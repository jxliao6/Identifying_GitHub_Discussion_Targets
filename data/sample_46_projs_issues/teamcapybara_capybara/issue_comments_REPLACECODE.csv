issue_num,datetime,body,login,close_date
1848,2017-03-23 02:09:39,"## Meta
Capybara Version:
2.8.1
Driver Information (and browser if relevant):
Poltergeist, Chrome

## Expected Behavior
    within '.main-navigation' do
      click_link 'Blog'
    end

should find the link 'Blog'
## Actual Behavior
     Failure/Error: click_link 'Blog'
     
     Capybara::ElementNotFound:
       Unable to find link ""Blog""

## Steps to reproduce
<S_CODE_TOKEN>
If I move the Blog link outside of the .collapse div test passes
Inside of .collapse Capybara doesn't find the link even though save_and_open_page displays Blog link.
",dxypher,2017-03-23 05:18:42
1848,2017-03-23 05:18:42,"The .collapse would by default be non-visible on the page -- save_and_open_page just saves the HTML without the CSS - a better test for you would be `save_and_open_screenshot` which will actually show what is visible and non-visible on the page.  If you haven't clicked on the button to toggle the menu before attempting to click the link then it definitely won't work.  If you have then show your full test code that you expect to work, and we can reopen this.",twalpole,2017-03-23 05:18:42
1847,2017-03-16 22:25:19,The markdown formatting in `History.md` is messed up.  This PR gets History.md looking awesome again.,roberts1000,2017-03-16 22:35:41
1847,2017-03-16 22:35:38,Hmmm -- not sure what happened there - thanks.,twalpole,2017-03-16 22:35:41
1847,2017-03-16 22:45:12,"Thanks for merging.  Any interest in renaming History.md to CHANGELOG.md if I submit another PR?  I typically look for a CHANGELOG.md first, when a new gem version comes out.  Seems like more and more gems are using a CHANGELOG.md instead of a History.md lately.",roberts1000,2017-03-16 22:35:41
1847,2017-03-16 22:52:17,@roberts1000 Not really,twalpole,2017-03-16 22:35:41
1847,2017-03-16 22:53:00,Roger.  Thanks for considering.,roberts1000,2017-03-16 22:35:41
1846,2017-03-15 14:29:29,"## Meta
Capybara Version:
2.12.1
Driver Information (and browser if relevant):
selenium-webdriver 3.3.0

## Expected Behavior
Test should not fail with exception #<NameError: undefined local variable or method `base' for nil:NilClass>

## Actual Behavior
Testcase fails with #<NameError: undefined local variable or method `base' for nil:NilClass>

## Steps to reproduce
Since update from capybara 2.11.0 to 2.12.1 we have failing tests. We do a find with a selector and fail with the NameError. The code in https://github.com/teamcapybara/capybara/blame/master/lib/capybara/session.rb#L785 contains `[nil, :frame].include? scope`. The `scope` variable in our case is `#<Capybara::Node::Element tag=""article"" path=""/html/body/div[1]/main/div[2]/div/div/div/div[2]/div[1]/div/div/section/article[3]"">`. The `include?` check subsequently hits https://github.com/teamcapybara/capybara/blob/master/lib/capybara/node/matchers.rb#L677 where `self` is the `nil`-value passed on from the code in `session.rb`. Since `nil` does not have a `base` method, we see the error.

This issue only seems to happen in test cases, where we use within.

## Stacktrace
<S_CODE_TOKEN>",Aqualon,2017-03-15 17:28:28
1846,2017-03-15 14:46:16,Please show an example of a test that causes this,twalpole,2017-03-15 17:28:28
1846,2017-03-15 16:12:51,"If found this minimal testcase breaking with capybara 2.12.1 and working with 2.11.0

<S_CODE_TOKEN>

If I remove the `include Capybara::Node::Matchers`, the test works. With it I get the error

<S_CODE_TOKEN>

The include happens in an internal gem used to set up integration tests across teams in my company, so I don't know exactly what was the use case behind adding it.

But to me it looks like this is accidentally overwriting the `==` method, so the include? check fails.",Aqualon,2017-03-15 17:28:28
1846,2017-03-15 16:39:20,@Aqualon  Thanks for that - investigating,twalpole,2017-03-15 17:28:28
1846,2017-03-15 16:51:07,@Aqualon  What driver are you using?,twalpole,2017-03-15 17:28:28
1846,2017-03-15 17:09:41,"@Aqualon I think it looks like your inclusion of Capybara::Node::Matchers is overriding the == method of nil, or Symbol ? --  Capybara::Node::Matchers is only for inclusion into  Capybara::Node::Base and Capybara::Node::Simple - so I think this is user error and you're going to have to figure out why you're including Capybara::Node::Matchers anywhere else.",twalpole,2017-03-15 17:28:28
1846,2017-03-15 17:28:28,"Confirmed - by including Capybara::Node::Matchers into global scope you've included it into the Object class 

irb(main):005:0> include Capybara::Node::Matchers
=> Object
irb(main):006:0> Object.ancestors
=> [Object, Capybara::Node::Matchers, Kernel, BasicObject]

which includes it into almost everything, including NilClass  --  You can't do that.",twalpole,2017-03-15 17:28:28
1845,2017-03-11 20:58:38,"## Meta
Capybara Version: 2.12.1
Driver Information (and browser if relevant): Selenium Webdriver (chrome, phantomjs, probably others)

## Expected Behavior

Capybara changes current scope and document on within_frame method usage.
Similar to `text` method https://github.com/teamcapybara/capybara/blob/master/lib/capybara/node/document.rb#L23
the `title` method should depend on a current document.

## Actual Behavior

It always returns browser title instead of current document title

## Steps to reproduce
<S_CODE_TOKEN>

## Proposal

lib/capybara/node/document.rb

<S_CODE_TOKEN>
",romikoops,
1845,2017-03-11 22:38:28,"Using the code https://gist.github.com/twalpole/1147a74a892607f19b3a22d34dd937d3 , this works correctly for both Poltergeist and capybara-webkit, but fails for Selenium.  This is a bug in selenium-webdriver and should be reported there.  It could possibly be worked around in Capybara::Selenium::Driver but I would not accept any changes in Capybara::Node::Document .  ",twalpole,
1845,2017-03-11 23:02:15,"@twalpole Thanks a lot for your quick feedback. I have corrected affected drivers. You are right, originally I tested on phantomjs driver (selenium-webdriver gem). You also are right regarding edge case when a title is missing in a frame. I proposed a raw code.

If the bug is fully connected with selenium-webdriver gem, I suggest to post the corresponding issue there and close this one. At least other users will have an ability to find this conversation about the problem.",romikoops,
1845,2017-03-13 18:23:08,"After looking at this further, it may actually be Poltergeist and capybara-webkit that are producing the incorrect result here.  selenium-webdriver is following the webdriver spec which states that `title` is the title of the top level browsing context, not of the current browsing context.  

@route @mhoran  @jferris   Do any of you have any input on which should be the correct interpretation of `#title`",twalpole,
1845,2017-03-13 19:57:01,"Looks like inconsistency here. I found #current_url also works differently for different drivers. I am author Howitzer gem. It uses capybara. To make sure a correct frame is opened I need to validate the frame url and title. Unfortunatelly, right now I have to go with monkey patching Capybara::Selenium::Driver https://github.com/strongqa/howitzer/blob/master/lib/howitzer/web/capybara_methods_proxy.rb#L5",romikoops,
1845,2017-03-13 20:13:25,"@romikoops Yes there is currently some inconsistency between drivers behavior in this but since we generally tend to lean towards the webdriver definition of things we'll probably end up making the current selenium behavior the ""correct"" one - which is that title and current_url refer to the top level browsing context and not the frames as specified here - https://w3c.github.io/webdriver/webdriver-spec.html#get-current-url - which correspond to what users can actually see in the browser.   Monkey patching different behavior into Capybara is a terrible idea, you'd be much better off adding methods like `frame_url` and `frame_title` or something",twalpole,
1845,2017-03-13 21:54:09,"Interesting. It certainly makes sense that the title would correspond to what is shown in the title bar of my browser. However, we went out of our way to support extracting the title from the current frame context. The same goes for `#current_url`, and I'm sure other methods (since the webdriver spec came along after we wrote capybara-webkit.)",mhoran,
1845,2017-03-13 22:29:16,"@mhoran Yeah -- I'm wavering between whether Capybara should add `frame_url` and `frame_title` driver methods (and then maybe allow a parameter for assert_current_path, assert_title to choose that the user wants frame level) or make seleniums `title` and `current_url` return the frames info when in the frame context.   The first would more align with the webdriver spec (and I prefer to go towards that), but I'm having a hard time coming up with a case where it makes sense to want to check the pages URL from inside a frame context.",twalpole,
1845,2017-03-14 03:40:49,"Yeah, I agree. I think the top frame makes sense.

On Mon, Mar 13, 2017 at 03:29:21PM -0700, Thomas Walpole wrote:
> @mhoran Yeah -- I'm wavering between whether Capybara should add `frame_url` and `frame_title` driver methods (and then maybe allow a parameter for assert_current_path, assert_title to choose that the user wants frame level) or make seleniums `title` and `current_url` return the frames info when in the frame context.   The first would more align with the webdriver spec, but I'm having a hard time coming up with a case where it makes sense to want to check the wholes pages URL from inside a frame context.
> 
> -- 
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub:
> https://github.com/teamcapybara/capybara/issues/1845#issuecomment-286263845

-- 
Matt Horan matt@matthoran.com http://matthoran.com/
",mhoran,
1845,2017-03-14 16:51:26,"I think we should follow webdriver spec and there's always a way for users to find a ""proper"" title or url for a frame without monkey patching capybara just using proper xpath inside within_frame right?",route,
1845,2017-03-14 17:01:24,"@route - yes there is.  

Ok, so I think the consensus is that current_url and title when called on the session should return the top level context url and title (that which would be shown in the browser) which is how selenium currently works. For Capybara 2.14, not the 2.13 release going out today/tomorrow, I'll add tests for that (will require changes in poltergeist and capybara-webkit) and look at possibly adding some frame specific title and url methods.  Sound good?",twalpole,
1845,2017-03-14 18:09:15,@twalpole yep perfect,route,
1845,2017-03-14 18:39:44,@twalpole Amazing! Let me know if I can help you with something.,romikoops,
1844,2017-03-07 22:11:35,"@jferris @mhoran @jonleighton @route FYI: I plan to do a Capybara 2.13.0 within the next week or so. 

The only change that affects drivers currently is the expectation of the ability to return elements from evaluate_script.   For Poltergeist that ability is already in the master branch, and capybara-webkit has an open PR to support it.

The other major change (which doesn't affect drivers) is the addition of MiniTest assertions and expectations to provide parity with the support provided for RSpec.
",twalpole,2017-03-16 20:55:44
1844,2017-03-16 20:55:44,Released,twalpole,2017-03-16 20:55:44
1843,2017-03-07 13:48:37,"Follow up to #1841 and rails/rails#28254

* Remove all references to `Test::Unit`
* Add `Capybara::Minitest::Assertions` and `require`s to all Minitest/Rails examples.",lucasmazza,2017-03-07 17:32:56
1843,2017-03-07 16:13:05,"Please don't completely remove the Test::Unit instructions (it's still technically supported), I am fine with removing the references to it from the MiniTest sections though.",twalpole,2017-03-07 17:32:56
1843,2017-03-07 16:49:12,@twalpole thanks for the feedback - I brought back a `Test::Unit` specific section to the README and left the Rails/Minitest after it.,lucasmazza,2017-03-07 17:32:56
1843,2017-03-07 17:32:50,Thanks! - merging,twalpole,2017-03-07 17:32:56
1842,2017-03-07 09:31:47,"## Meta
Capybara Version: 2.12.1
Driver Information (and browser if relevant): Poltergeist
Rails: 5.0.2
Rack: 2.0.1

## Expected
Capybara should start a Rack server able to handle X-FORWARDED-FOR headers.

## Actual case
The way Capybara fires up the rack server is similar to: https://github.com/rack/rack/issues/990 . Therefore browser requests going through a proxy  won't reach the actual Rails server.

## Possible fix
As suggested in the Rack-issue, is adding the full uri to the `map` command. See https://github.com/teamcapybara/capybara/blob/master/lib/capybara/rails.rb#L5",rschellhorn,2017-03-09 17:37:51
1842,2017-03-08 17:20:38,"X-FORWARDED-FOR contains the original client and proxies visited along the route, so I assume you actually mean X-FORWARDED-HOST?

Since we don't necessarily know what the full uri is going to be (the user can change Capybara.app_host, /etc/hosts, local DNS routing, etc) and I would guess a config using  X-FORWARDED-HOST when testing is pretty rare, this is probably up to the user to just set their own 'Capybara.app'
",twalpole,2017-03-09 17:37:51
1842,2017-03-08 17:29:39,"Also, what have you set Capybara.server to?  If you haven't set it, try `Capybara.server = :puma` (It defaults to webrick which is what your links seem to mention as being problematic)",twalpole,2017-03-09 17:37:51
1842,2017-03-09 09:25:16,"Thanks for the last reply. Puma works like a charm!

Some background:
We use Capybara to test a React (through create-react-app) front-end with a Rails backend. Create-react-app just enabled X-FORWARD headers for their built in proxy capabilities.
",rschellhorn,2017-03-09 17:37:51
1842,2017-03-09 17:37:51,"Closing this since it sounds like it's just a limitation of Webrick, which will not be the default whenever 3.0 launches and Capybara is easily switched to puma (which with rails 5+ you really want to do anyway otherwise ActionCable in process testing won't work)",twalpole,2017-03-09 17:37:51
1841,2017-03-06 20:16:50,,twalpole,2017-03-06 23:57:27
1841,2017-03-06 20:17:45,See https://github.com/rails/rails/issues/28254,twalpole,2017-03-06 23:57:27
1840,2017-03-06 16:24:20,"This is more of an issue with Capybara and IDE integration. As such, I wasn't sure of the best place to post this. I'm finding that if you use the following structure in RubyMine (or IntelliJ IDE with the Ruby plugin), you get an error indicated for the code. Although the code still works.

Here is the code:

<S_CODE_TOKEN>

The second line is the one that leads to a contextual error in RubyMine. Specifically:

    Found 2 extra arguments. Required 0.

I bring this up because it happens with literally no other Ruby library that I have found, only Capybara. As far as version specifics:

Capybara version is 2.12.1. I'm using RubyMine 2016.3.2. Current build is RM-163.10154.57. This, however, happens on the last three builds of RubyMine for me. I've also tried this on the IDE on different machines just in case I was getting some weird artifact.

I'm not sure if there's anything that can even be done for this but I just wanted to bring it up in case it was either a known issue or an emerging issue, particularly since, so far, Capybara is the only library I've seen this happen with.",jeffnyman,2017-03-06 20:21:52
1840,2017-03-06 17:36:16,"I don't use an RubyMine or IntelliJ so I have no way to replicate this, however the code called by `Capybara::Selenium::Driver.new` is https://github.com/teamcapybara/capybara/blob/master/lib/capybara/selenium/driver.rb#L35 .  From that we can see it defined as `def initialize(app, options={})`, so it takes 1 or 2 parameters and the code you show is calling it with 2 so the error doesn't really make a lot of sense to be coming from that line.  Maybe you should report it to RubyMine for an explanation?",twalpole,2017-03-06 20:21:52
1840,2017-03-06 18:19:10,"Agreed. I am in process of doing just that with JetBrains and will report back when I get a response. The code assist in RubyMine (""jump to declaration"") is pointing to these two locations:

    Driver (Capybara in capybara.rb)
    Driver (Capybara in capybara/driver/node.rb)

I note that in the first of those, the following lines are being jumped to:

<S_CODE_TOKEN>

I don't know if that's what is throwing RubyMine off. I was hesitant to bring this up here because clearly the code works so it's not an issue with Capybara; but if others use this IDE they might come across this issue.",jeffnyman,2017-03-06 20:21:52
1840,2017-03-06 20:21:52,"Ok - closing this for now then, we can reopen if JetBrains gets back to you and it does turn out to be a Capybara issue.",twalpole,2017-03-06 20:21:52
1839,2017-02-28 10:23:36,"## Meta
Capybara Version: 2.12.1
Driver Information (and browser if relevant): selenium-webdriver 3.1.0 with Firefox 51

## Expected Behavior
When a ``click_link`` returns successfully, the link is being clicked.

## Actual Behavior
The ``click_link`` returns, but the link is not clicked.

We have been observing this problem in one of our apps where we navigate through clicks and Firefox would not load the clicked pages. In the app, this was simple a-href links. This happens on our AC server where we run multiple browser sessions during one test in an Xvfb and windows are maximized. The browser which was not in front would simply start misbehaving. We were able to reproduce and minimize this problem locally by using one browser and minimizing the window (on Linux). However, it only seems to happens on pages that execute heavy JavaScript.

## Steps to reproduce
<S_CODE_TOKEN>",rbu,2017-03-06 12:05:30
1839,2017-02-28 10:24:59,"For what it's worth, we are seeing this bug on pre-geckodriver builds too (Capybara 2.10.1, Selenium 2.53.3, Firefox 45 ESR).",rbu,2017-03-06 12:05:30
1839,2017-02-28 10:35:37,"left: minimized, showing bug. right: not minimized, expected behavior.
![cut](https://cloud.githubusercontent.com/assets/65913/23401961/ebfc75d0-fda9-11e6-828a-0bc323f272f7.gif)
",rbu,2017-03-06 12:05:30
1839,2017-02-28 13:08:16,"I would like to add that we have manually inserted a <S_CODE_TOKEN> whenever we switch browsers, which seems to have made this problem at least happen less often. However, I'm not yet convinced it is a workaround, as we still have test flakiness which might originate from this bug.",dwt,2017-03-06 12:05:30
1839,2017-02-28 17:07:46,"After a quick look, changing your code to 

    3.times do
      click_link('UI Kit')
      sleep 1
      click_link('Buttons')
      puts(""Loaded Buttons page #{has_text?('the button classes on an')}"")
      click_link('Dashboard')
      puts(""Loaded Dashboard page #{has_text?('Total Sales today')}"")
      sleep 1
    end

seems to make the behavior when minimized match the behavior when not minimized.  This would tend to imply that your animations aren't completed before you attempt to click the next link, which depending on what your animations do, whether they disable events on other menu elements while they're animating, what parts of the page get replaced and when in relation to you attempting the next click (click_link can return immediately - any action triggered by the click may continue after click_link has returned) could create the issue you're seeing.    Why it happens only when minimized I'm not exactly sure but as a first guess I would say the animations go slower when the app is minimized.  I may have time later this week to look more in depth but I don't think there's anything Capybara can do about this --  If you can easily disable animations in the test environment that's usually a good thing to do since it will also make your tests faster.",twalpole,2017-03-06 12:05:30
1839,2017-02-28 19:06:03,"I've been having similar problem with Capybara2 with recent FF and chrome drivers. What I have observed is that if an element is not visible in the browser window (i.e. needs scrolling down), then it does not get clicked even though capybara finds it. You can reproduce this issue by making the window small such that an element is not visible. I added a click to ""Maps"". If the window shows Maps link the automation run successfully. If I make the window such that Maps is not visible it fails with this error:
  unknown error: Element <a href=""javascript:void(0);"" class=""waves-effect waves-primary"">...</a> is not clickable at point (35, 24). Other element would receive the click: <i class=""md md-equalizer""></i>
        (Session info: chrome=56.0.2924.87)
        (Driver info: chromedriver=2.27.440174 (e97a722caafc2d3a8b807ee115bfb307f7d2cfd9),platform=Mac OS X 10.12.3 x86_64) (Selenium::WebDriver::Error::UnknownError)

  3.times do
      click_link('UI Kit')
      click_link('Buttons')
      puts(""Loaded Buttons page #{has_text?('the button classes on an')}"")
      click_link('Dashboard')
      puts(""Loaded Dashboard page #{has_text?('Total Sales today')}"")
      click_link('Maps')
  end",rugill,2017-03-06 12:05:30
1839,2017-02-28 19:14:29,@rugill If that is this issue then it would be a selenium bug (or possibly geckodriver/chromedriver) and not much Capybara can do about it - although I don't know why adding sleeps would make it pass then (unless the page is animating something as selenium scrolls it so the click ends up in the wrong place - would still be a selenium bug),twalpole,2017-03-06 12:05:30
1839,2017-02-28 20:43:58,"@rugill I just noticed the point (35, 24) that it's trying to click at.  That point would put it behind the fixed header so I would expect another element to receive the click, i.e. it's behaving correctly.  The thing is that when an element needs scrolling to be seen selenium attempts to scroll it to the top of the page, there's a capability 'elementScrollBehavior' that you can set to 1 which will make it scroll to the bottom of the page (if chromedriver has implemented that capability), although that may not help here either due to the fixed footer in the section which it would probably end up behind.  Your only option may be to scroll the section of the page to where you need it using `execute_script` and then click the link

Either way this isn't the same problem as the current issue.",twalpole,2017-03-06 12:05:30
1839,2017-02-28 21:12:31,I've been doing more testing with this and I agree with @twalpole conclusion. I'll check into his suggestion about elementScrollBehavior with FF and see if it helps my test. Thanks.,rugill,2017-03-06 12:05:30
1839,2017-03-01 11:50:37,"@twalpole thanks for the feedback. While the page I linked has animations, I have been able to reproduce this issue on a page that has no animated menu as well, but since it's not a public application, I cannot share that link unfortunately.

The reason this is confusing to me is that even if the animation is running slower, I would expect it to *not find* the link. On the other hand, if the link is actually found and clicked, why is the click not being triggered?

In our local example, we were able to reproduce this in Xvfb and a ratpoison window manager which automatically full-screens the Firefox. Then we would:
1. Open Firefox A, navigate to a page
2. Open Firefox B, this hides Firefox A completely
3. In Firefox A session, navigate to another page, then click a link.

The result will be: The click brings Firefox A into the foreground (!) and there is a hover effect over the link/button. But it was not clicked.",rbu,2017-03-06 12:05:30
1839,2017-03-01 17:04:50,"@rbu I can't say 100% for sure without a lot more debugging of that page but it appears the menu is swallowing all other clicks while it's animating, so the click is actually happening it's just not triggering any actions.  Then adding a sleep delays enough that the animation has finished and the click is no longer swallowed by the menu.

Your second description would most likely be a geckodriver/marionette issue if the browser is behaving differently when in the foreground or not, and Capybara probably can't do anything about it.  One thing you could try is making sure the 'focusmanager.testmode' preference is set to 'true' in the firefox profile.  I know Selenium used to set that, but I don't think it does since the swap to using geckodriver/marionette, and am not sure whether firefox even supports it anymore but doesn't hurt to try it.",twalpole,2017-03-06 12:05:30
1839,2017-03-06 12:05:30,"@twalpole, Thank you for the feedback. As I mentioned, I was not able to reduce the core Firefox/Selenium issue further so it could become a good bug report. I'll close this for now, as you point out it is not a Capybara issue.

As a sidenote, do you know if Selenium accepts bugs written using the Capybara API?",rbu,2017-03-06 12:05:30
1838,2017-02-24 12:29:06,"**Note:** This is for issues with Capybara.  If you have a howto type question, please ask on the mailing list as requested in the README: http://groups.google.com/group/ruby-capybara

## Meta
Capybara Version:
<!-- 2.7.0? -->
2.7.0
Driver Information (and browser if relevant):
<!--capybara-webkit -->
capybara-webkit 1.11.1
qt 5.0
qt5-webkit-common-5.6.2-alt0.M80P.1

## Expected Behavior
`fill_in('email', with: @user.email)` finds the input element

## Actual Behavior
`Capybara::ElementNotFound`

## Steps to reproduce
<!--
Please be sure to include the code that is creating the issue along with HTML the code is being run against
-->
the code:
<S_CODE_TOKEN>
",majioa,2017-02-24 17:11:58
1838,2017-02-24 17:11:58,"Capybara-webkit is a driver that can be used with Capybara and is located at https://github.com/thoughtbot/capybara-webkit .  If this issue is capybara-webkit specific then you'll need to discuss it over at that project.  The first thing they will likely tell you to do is to update to the latest release of both capybara-webkit and capybara, and then to make sure the element is actually visible on the page you think it is (via a screenshot) so you may want to perform those two steps before reporting an issue over there.",twalpole,2017-02-24 17:11:58
1837,2017-02-21 01:32:36,"## Meta
Capybara Version:
2.12.1
Driver Information (and browser if relevant):
all defaults

## Expected Behavior
Be able to assert:
<S_CODE_TOKEN>

## Actual Behavior
Assertion fails, because `current_url` does not contain the `#code=magic`
<S_CODE_TOKEN>

## Steps to reproduce
Visited a URL that redirects to a url like: ""http://callback.google.com#code=magic""
(Note: This is part of the standard OAuth 2.0 protocol, not an unusual spec that should need JS.)

Related: #155 ",aminariana,2017-02-23 18:33:12
1837,2017-02-21 06:00:13,"If by ""all defaults"" you mean the rack-test driver, it ignores all host names and all requests are directed straight to the app under test so it's never going to do anything correctly with an outside url.

If instead you mean the selenium driver then please provide an url we can visit, and any steps required there to actually produce the issue you're seeing, because the following code shows the URL fragment being returned correctly.

    require ""capybara/dsl""
    require ""selenium-webdriver""

    sess = Capybara::Session.new(:selenium)
    sess.visit(""https://github.com/teamcapybara/capybara"")
    sess.click_link('Drivers')
    sess.assert_current_path(""https://github.com/teamcapybara/capybara#drivers"", url: true)",twalpole,2017-02-23 18:33:12
1837,2017-02-23 18:33:12,"Closing, we will reopen if/when enough info to reproduce is provided.",twalpole,2017-02-23 18:33:12
1836,2017-02-19 01:29:34,"This is a port of 8ba2fa825f6e28cdf7233679b0a145cd09ffc2c3.
If not planning to commit to the master branch, please close it. Thanks!
",y-yagi,2017-02-20 07:11:53
1836,2017-02-20 07:12:00,Thanks,twalpole,2017-02-20 07:11:53
1835,2017-02-16 13:38:05,"https://github.com/jruby/jruby/issues/4212 - this bug is still unfixed and they've suggested a fix will be in 9.2.0.0. Because of that, https://github.com/teamcapybara/capybara/commit/f7e537006af5cf882bc3df4317d2974bf392c974 breaks Capybara 2.12.0 for JRuby above 9.1.5.0. This is our case - we use JRuby 9.1.7.0 and Capybara 2.12.0 doesn't work.",boris-petrov,2017-02-17 02:31:42
1835,2017-02-16 19:16:33,"Hmmm -- I could have sworn this was fixed in 9.1.6.0, did they revert?  Also it's passing the tests we have for it.  What error, specifically, are you seeing?",twalpole,2017-02-17 02:31:42
1835,2017-02-16 21:38:31,"Actually it passes the tests locally, but does appear to be causing hangs on travis -- I'm just going to remove lazy results evaluation from JRuby totally (without version check) and we'll worry about re-enabling it later.  I'll release a 2.12.1 later today (California) once all the tests pass.",twalpole,2017-02-17 02:31:42
1835,2017-02-17 02:31:42,Fixed via https://github.com/teamcapybara/capybara/commit/1b65bf243c506ede3a14d57faa985616a92e505d and 2.12.1 released,twalpole,2017-02-17 02:31:42
1834,2017-02-06 17:57:06,"**Note:** This is for issues with Capybara.  If you have a howto type question, please ask on the mailing list as requested in the README: http://groups.google.com/group/ruby-capybara

## Meta
Capybara Version:
capybara (2.12.0, 2.11.0)
capybara-mechanize (1.5.0)

Driver Information (and browser if relevant):
mechanize (2.7.5)

## Expected Behavior
I expected the tests to work / pass
## Actual Behavior
Guessing an upgrade of Capybara has broken the Mechanize driver
## Steps to reproduce
I just run my test,   rspec spec/index_mech_spec.rb





",gbonk,2017-02-06 19:17:24
1834,2017-02-06 17:58:26,"Here's the output of the error I now receive

`
Basic Site Validation, via Mechanize
  Using Capybara, return an HTTP 200 (FAILED - 1)

Failures:

  1) Basic Site Validation, via Mechanize Using Capybara, return an HTTP 200
     Failure/Error: visit ""/""

     TypeError:
       The second parameter to Session::new should be a rack app if passed.
     # ./spec/index_mech_spec.rb:15:in `block (2 levels) in <top (required)>'

Finished in 0.001 seconds (files took 2.66 seconds to load)
1 example, 1 failure

Failed examples:

rspec ./spec/index_mech_spec.rb:14 # Basic Site Validation, via Mechanize Using Capybara, return an HTTP 200

`",gbonk,2017-02-06 19:17:24
1834,2017-02-06 18:00:10,"I removed 2.12 and now the test passes.

`

onk@ICC11167 MINGW64 /c/dev/devops-poc (master)
$ gem uninstall capybara

Select gem to uninstall:
 1. capybara-2.11.0
 2. capybara-2.12.0
 3. All versions
> 2
Successfully uninstalled capybara-2.12.0

gbonk@ICC11167 MINGW64 /c/dev/devops-poc (master)
$ rspec spec/index_mech_spec.rb

Basic Site Validation, via Mechanize
  Using Capybara, return an HTTP 200

Finished in 1.05 seconds (files took 2.69 seconds to load)
1 example, 0 failures



`",gbonk,2017-02-06 19:17:24
1834,2017-02-06 19:16:41,"That's a new error that was added in 2.12 to notify you that you're passing an invalid parameter (perviously the parameter was just ignored) - what are you doing at ./spec/index_mech_spec.rb line 15
",twalpole,2017-02-06 19:17:24
1834,2017-02-06 19:40:35,"Sorry I thought the files were attached.  Please take a look.

[spec_helper.txt](https://github.com/teamcapybara/capybara/files/755670/spec_helper.txt)
[index_mech_spec.txt](https://github.com/teamcapybara/capybara/files/755669/index_mech_spec.txt)


",gbonk,2017-02-06 19:17:24
1834,2017-02-06 19:42:32,"Our tests are setup to change the driver as they require because we have so many tests and different drivers.  If you could explain as to how to properly pass in the proper app, I would be greatly appreciative. 

The only known work around that I had was just passing in ""anything"" as the value is/was ignored or note useful.  Has that changed ?",gbonk,2017-02-06 19:17:24
1834,2017-02-06 20:09:15,"As documented - https://github.com/teamcapybara/capybara#setup - Capybara.app needs to be a rack app (or nil if you're not having Capybara run the app under test), not a string.  So if using mechanize you can probably just set `Capybara.app = nil` if you're not testing a local app.  Also rather than setting Capybara.current_driver in a before block you should just be able to add   `:driver => :mechanize` metadata to the describe call (if you're using the standard capybara rspec setup - although then reset_sessions! would also already be called so maybe you're not))

Note: a rack app can be as simple as

    app = proc do |env| [200, { ""Content-Type"" => ""text/html"" }, [""Some content""]] end
",twalpole,2017-02-06 19:17:24
1833,2017-02-01 23:08:08,"Support the return of elements in nested structures (Arrays, Hashes) from evaluate_script",twalpole,2017-02-02 17:40:55
1832,2017-01-31 11:58:54,"**Note:** This is for issues with Capybara.  If you have a howto type question, please ask on the mailing list as requested in the README: http://groups.google.com/group/ruby-capybara

## Meta
Capybara Version:
<!-- 2.8.1? -->
Driver Information (and browser if relevant): Implement support to AngularJS implementations. Would it be possible for the Capybara to implements support to all AngularJS directives? For example: https://docs.angularjs.org/api/ng/directive
<!-- selenium-webdriver 2.53.4 with Firefox 47.0.1? capybara-webkit? Poltergeist? -->

## Expected Behavior
For example, to command <fill_in ‘ng-directive’, :with => “value”>, we have a success result.

## Actual Behavior
For example, to command <fill_in ‘ng-directive’, :with => “value”>, we have a not found result.

## Steps to reproduce
<!--
Please be sure to include the code that is creating the issue along with HTML the code is being run against
It is not bug.
-->
",giovanicosta,2017-01-31 16:40:15
1832,2017-01-31 16:40:15,"Capybara focuses on adding interaction for standard HTML elements, and is not currently interested in adding methods to handle the JS framework du jour elements/widgets.  If you wanted to create a separate gem that provides selectors for angular elements (using Capybara.add_selector) on top of Capybara feel free.",twalpole,2017-01-31 16:40:15
1831,2017-01-29 13:45:33,"## Meta
Capybara Version: 2.12.0

## Expected Behavior
Capybara starts Puma server with host and port settings defined in config.

## Actual Behavior
When using Puma 3.7.0 server is started on tcp://0.0.0.0:3000. Capybara.server_port and Capybara.server_host are ignored.

My config:
> Capybara.javascript_driver = :poltergeist
> Capybara.server = :puma
> Capybara.server_host = '127.0.0.1'
> Capybara.server_port = 3030

rspec output:
> Puma starting in single mode...
> * Version 3.7.0 (ruby 2.4.0-p0), codename: Snowy Sagebrush
> * Min threads: 5, max threads: 5
> * Environment: test
> * Listening on tcp://0.0.0.0:3000

With Puma 3.6.2 it works as expected.

## Steps to reproduce
* Install Puma 3.7.0
* Set non-default Capybara.server_port and Capybara.server_host
* Run tests using javascript driver
",ditch0,2017-02-21 06:35:56
1831,2017-01-29 16:47:32,"I can't reproduce this behavior, do you have your own `Capybara.register_server(:puma)` block defined?",twalpole,2017-02-21 06:35:56
1831,2017-01-29 17:10:44,"I have replicated this, but have no clue why --I think it's a bug in puma",twalpole,2017-02-21 06:35:56
1831,2017-01-29 17:34:22,Puma is now automatically loading `config/puma.rb` and overwriting the settings Capybara passes it - Not sure why though,twalpole,2017-02-21 06:35:56
1831,2017-01-29 18:29:59,"Until a new Capybara release is made or Puma is fixed you can workaround this issue by putting

    Capybara.register_server :puma do |app, port, host|
      require 'rack/handler/puma'
      Rack::Handler::Puma.run(app, Host: host, Port: port, Threads: ""0:4"", config_files: ['-'])
    end

in your code before specifying `Capybara.server = :puma`  which will prevent puma from loading config/puma.rb and use the passed in options.",twalpole,2017-02-21 06:35:56
1831,2017-02-09 14:09:08,"We'll fix this in 3.7.1, should push it out soon.",nateberkopec,2017-02-21 06:35:56
1831,2017-02-13 20:51:08,@nateberkopec Any update on a puma 3.7.1 release?,twalpole,2017-02-21 06:35:56
1831,2017-02-21 06:35:56,Fixed in puma 3.7.1,twalpole,2017-02-21 06:35:56
1830,2017-01-27 20:59:42,,twalpole,2017-01-27 21:56:29
1830,2017-01-27 21:27:31,"Does it support unwrapping? (https://github.com/SeleniumHQ/selenium/blob/selenium-3.0.1/rb/spec/integration/selenium/webdriver/driver_spec.rb#L182)
I think support for it is also needed as behaviour is surprising otherwise.",abotalov,2017-01-27 21:56:29
1830,2017-01-27 21:52:57,@abotalov No - it supports returning AN element -- It's not going to run through objects to figure out whether or not they have elements in them at the current time.  If you want to implement that and submit a PR - feel free,twalpole,2017-01-27 21:56:29
1830,2017-01-28 22:36:46,@abotalov Actually - I've implemented full unwrapping for selenium - Just need to check it can work with Poltergeist and CapybaraWebkit too,twalpole,2017-01-27 21:56:29
1829,2017-01-26 21:56:01,This updates the rack_test driver so that calling Node#click on a checkbox or radio_button can change the state of the element.,twalpole,2017-01-27 21:57:06
1828,2017-01-16 20:47:26,"…textarea elements -  This makes Noed#text return the original text from textarea elements like selenium does, rather than a new value that is set to the element.  Technically, according to the spec, I think `#text` should return nothing on a textarea since the text content isn't actually shown - and innerText returns blank.  Currently though all drivers return the initial page content of textarea elements.  We should look at changing this to be more spec compliant in a future release or v3.0",twalpole,2017-01-18 16:43:38
1827,2017-01-13 05:33:13,"When we experimented moving our suite to BrowserStack, `page.current_url` was often returning nil.

Calling `have_current_path` and `page.current_path` would raise:
`NoMethodError: undefined method 'path' for nil:NilClass`, with no intelligent waiting for BrowserStack to finally return a valid url.

This PR modified to only call those methods if the parsed URI is not nil. If it's nil, @actual_path remains nil.",dylanlive,2017-01-13 23:48:47
1827,2017-01-13 05:49:26,"Hmm, I was seeing this locally too. `Capybara::Session DSL` tests don't seem to let me stub `current_url` to return nil. Any ideas?",dylanlive,2017-01-13 23:48:47
1827,2017-01-13 08:26:14,"Per BrowserStack, apparently it's intentional for Selenium to return nil.

They disclosed this to me in an email:
> We were able to confirm that this is the default behaviour of Selenium when a webpage is currently in loading state. Basically, Selenium responds /provides a particular value to a getCurrentUrl() method according to the current status of the webpage. If the webpage is still loading it returns a null value, whereas, if the webpage has loaded completely it returns a valid response.

I have been running this patch locally over the last few weeks, and verified Capybara's wait feature properly works (when BrowserStack is finally providing a legitimate url).",dylanlive,2017-01-13 23:48:47
1827,2017-01-13 09:55:38,"Could you also, perhaps, file an issue in https://github.com/w3c/webdriver?
Currently the specification doesn't seem to say anything about what behaviour should be in this case.",abotalov,2017-01-13 23:48:47
1827,2017-01-13 18:47:03,"Interesting, I've never seen Selenium return nil fro current_url when used with anything else, but this code doesn't complicate anything so I'm fine to add this.  

The tests are failing on the DSL portion (They are run against  DSL, rack_test and selenium) because during DSL testing @session isn't actually a Capybara::Session instance.  You should be able to mock using 

    allow_any_instance_of(Capybara::Session).to receive(:current_url) { nil }

and have it work.   Once you've fixed that please squash the commits and I'll go ahead and merge.

Thanks!",twalpole,2017-01-13 23:48:47
1827,2017-01-13 22:44:09,"@twalpole Yeah I hadn't either until we experimented moving our suite to BrowserStack. I've noticed a lot of latency in general. Regardless, I figured it wouldn't hurt to prevent this issue from raising an exception in Capybara.

Thanks for the suggestion! I've updated the mock, squashed commits, and updated.

@abotalov I'll take a look into this.",dylanlive,2017-01-13 23:48:47
1826,2017-01-09 22:26:38,"Ruby 2.4.0 has an issue where using Forwardable delegators can produce random errors

https://bugs.ruby-lang.org/issues/13107?next_issue_id=13106&prev_issue_id=13111

This works around if for the methods we have seen errors on from rack-test.  The other option is to just wait for 2.4.1 to release where the issue has been fixed.",twalpole,2017-01-10 19:02:31
1826,2017-01-10 10:34:46,"2.4.0 may cause a number of issues in various gems. So, perhaps, it doesn't make much sense to do patches for them at gem level.",abotalov,2017-01-10 19:02:31
1826,2017-01-10 19:02:31,@abotalov  Yeah - I think I'm just going to mark 2.4.0 as allowed failures on travis and ignore it for now - 2.4.0 is basically unusable if anything included into a project uses delegators from forwardable.,twalpole,2017-01-10 19:02:31
1825,2017-01-03 22:18:28,"When running Capybaras tests we are getting occasional failures on the rack_test tests

    Failure/Error: process(:get, last_response[""Location""], {}, env) if last_response.redirect?
    
     TypeError:
       wrong argument type Integer (expected Proc)
     # ./lib/capybara/rack_test/browser.rb:39:in `block in process_and_follow_redirects'

These errors (when they occur) are in random tests, and I think are probably a bug in Ruby 2.4s forwardable implementation but haven't been able to prove that yet.
",twalpole,2017-01-10 19:30:34
1825,2017-01-03 22:18:55,@abotalov Have you come across this or do you have any ideas about the cause?,twalpole,2017-01-10 19:30:34
1825,2017-01-05 07:37:04,"I have found out that it also happens in `html` method where `last_response` is used:
* ./lib/capybara/rack_test/browser.rb:94:in `html' (https://travis-ci.org/teamcapybara/capybara/jobs/188745458)

Also it sometimes happens more than one time per build - https://travis-ci.org/teamcapybara/capybara/jobs/188644698

It happens in different specs all the time.",abotalov,2017-01-10 19:30:34
1825,2017-01-05 07:54:49,"Yeah, last_response is forwarded with def_delegator.  I'm leaning towards believing this is a bug in ruby 2.4",twalpole,2017-01-10 19:30:34
1825,2017-01-05 07:56:13,"It might be given there were many changes in Forwardable, but it has to be proven with PoC, I think.",abotalov,2017-01-10 19:30:34
1825,2017-01-05 08:07:57,Agreed - short term I may monkey patch rack_test and see if the issue goes away,twalpole,2017-01-10 19:30:34
1825,2017-01-05 09:02:51,I'm running a test set with the last_response method monkey patched to just call rather than use the implementation of def_delegator - will see how that goes  https://travis-ci.org/teamcapybara/capybara/builds/189108461  ,twalpole,2017-01-10 19:30:34
1825,2017-01-05 19:22:30,So after monkey patching around the def_delegator I've run the full build 3 times on travis and the error has not occurred -- I think this pretty conclusively proves it's an issue in the ruby 2.4 delegator code.  Created issue with ruby-core - https://bugs.ruby-lang.org/issues/13107,twalpole,2017-01-10 19:30:34
1825,2017-01-10 01:05:56,"This is indeed a bug in the MRI ruby optimizer, it has been fixed in trunk so will be fixed in ruby 2.4.1",twalpole,2017-01-10 19:30:34
1825,2017-01-10 19:30:34,Closing since it's a Ruby 2.4.0 bug.,twalpole,2017-01-10 19:30:34
1824,2017-01-03 20:26:39,"## Meta
Capybara Version:
2.4.4

Driver Information:
selenium-webdriver 3.0.5
Firefox 50.1.0

## Expected Behavior
I should be able to have duplicate `expect(page).to have_content(""content"")` statements, with `click_on ""button""` in between, and another `click_on ""button 2""` after, and it should click the 2nd button ok.

## Actual Behavior
The 2nd `click_on` (`click_on ""button 2""`) doesn't work every time. It seems like half the time it works, and half the time it just hangs.

## Steps to reproduce
Doesn't work:
<S_CODE_TOKEN>

_Seems to be_ working every time:
<S_CODE_TOKEN>

HTML for ""Shelby Mustang GT""
<S_CODE_TOKEN>

HTML for ""Relationship successfully added""
<S_CODE_TOKEN>

HTML for ""Manage Relationships""
<S_CODE_TOKEN>

Note that `click_on ""Manage Relationships""` is also used earlier and it does work.

Also, if I throw a `sleep 1` above `click_on ""Manage Relationships""` when I do have duplicate `have_content` statements, it seems to work as well. It appears something is up with the async code thinking it already worked so it doesn't let the second statement perform it's async waiting?

Thanks!",davidwparker,2017-01-03 21:57:43
1824,2017-01-03 21:35:30,"What do you mean by ""doesn't work"" / ""hangs""? Does an error occur?",abotalov,2017-01-03 21:57:43
1824,2017-01-03 21:48:55,"Yes, apologies. It fails on the line after `click_on ""Manage Relationships`:

<S_CODE_TOKEN>

with the error:
<S_CODE_TOKEN>

(which passes ok on either using `sleep` or changing the latter `have_content`)",davidwparker,2017-01-03 21:57:43
1824,2017-01-03 21:57:43,"This sounds like it is probably expected behavior because (depending on exactly what clicking on ""+ Relationship"" does)  `click_on` just clicks the button, it doesn't wait for anything to happen since it has no idea what is going to happen (and hence no idea how to wait for it).  This means if you check for the content ""Shelby Mustang GT"", click on ""+ Relationship"", and then check for the content ""Shelby Mustang GT"" again it's possible the second content check will match the same element the first content check did because any side effects of click_on haven't occurred yet.  That's why you need to check for visual things that are not on the page before you trigger an action but are after the action.  Checking for ""Relationship successfully added"" works reliably because it's not on the page until the action completes (and sleep just works because it delays until well past the time when the action has completed).

Closing this now, if you can provide more details on this that shows it's not expected behavior we can reopen.",twalpole,2017-01-03 21:57:43
1824,2017-01-03 22:02:21,"Thanks @twalpole - I'm not entirely sure of the expected behavior yet (I just inherited this codebase and I don't have anyone that I can ping questions to). I'll continue to explore it and if it turns out to be unexpected, then I'll be back. Thanks for the follow up- that makes sense to me!",davidwparker,2017-01-03 21:57:43
1823,2017-01-03 19:23:25,"This changes the :style option for `attach_file` to :make_visible which takes true or a hash of style options to change.  If `true` is specified it currently applies opacity:1, display: 'block'.   Still considering how to handle errors/the changes not making the field visible, currently it warns and then raises an error about not finding the element -- probably should just raise an error about the style changes not making the element visible.",twalpole,2017-01-09 18:20:38
1823,2017-01-03 22:12:02,"@abotalov Can you think of any other style changes that would make sense for the default (true) option to make.  It could do things like make the position absolute and move the element to the top of the page, etc - but that might be going too far and better suited for people to specify as custom changes if needed.  I believe the majority of cases (of hidden file inputs) I see currently are just the field with opacity set to 0 and then overlayed over whatever element is being styled as the upload button.",twalpole,2017-01-09 18:20:38
1823,2017-01-05 07:54:42,"By the way, a file input can have `opacity: 0`, `display: block` and be interactable in Selenium.",abotalov,2017-01-09 18:20:38
1823,2017-01-05 07:57:49,@abotalov Which version of selenium?  That would violate the definition of interactibility from the webdriver spec https://www.w3.org/TR/webdriver/#element-interactability,twalpole,2017-01-09 18:20:38
1823,2017-01-05 21:55:02,"Spec with the following passes in Chrome (Chromedriver 2.27) with selenium-webdriver 3.0.5 on this branch:
<S_CODE_TOKEN>

(just remove `:make_visible` from some written test)

I see Webdriver spec but it seems this part isn't currently implemented according to it.",abotalov,2017-01-09 18:20:38
1823,2017-01-05 22:18:32,"Interesting, I would have sworn that didn't work previously.  It definitely violates the webdriver definition of intractability since opacity: 0 is specifically mentioned",twalpole,2017-01-09 18:20:38
1823,2017-01-05 22:35:40,This may not be needed (in the current form) with the current versions of drivers since they appear to allow setting file inputs when hidden (using visible: false option) - need to figure out what exactly the CSS settings were for people whom that doesn't work for,twalpole,2017-01-09 18:20:38
1823,2017-01-05 22:48:57,"@abotalov Ok -- that example does fail when testing Selenium with Firefox without marionette (<= 2.47) - with a Selenium::WebDriver::Error::ElementNotVisibleError eror, but it looks like geckodriver and chromedriver support attaching a file to non visible file inputs",twalpole,2017-01-09 18:20:38
1822,2017-01-03 08:45:34,Behaviour was changed in https://github.com/teamcapybara/capybara/commit/b13e4d3887bfbfd9bcd765c7292554a95b52f549,abotalov,2017-01-03 09:34:34
1822,2017-01-03 09:57:41,Thanks,twalpole,2017-01-03 09:34:34
1821,2017-01-03 00:08:38,"@jferris @mhoran @jonleighton @route FYI: I plan to do a Capybara 2.12.0 within the next week or two. Two changes that affect drivers are 

1. Optional driver support for simple argument passing to execute_script/evaluate_script (including page elements).
2. Session#switch_to_frame - requires the driver to support the Driver#switch_to_frame API

There were also some tests added around #disabled? behavior when field elements are inside disabled fieldsets.",twalpole,2017-01-22 21:11:23
1821,2017-01-07 16:11:46,@twalpole Do we have both in poltergeist?,route,2017-01-22 21:11:23
1821,2017-01-07 16:29:51,"@route - Yes, I implemented both in Poltergeist (not released yet though), it should be passing all the capybara master branch tests.  ",twalpole,2017-01-22 21:11:23
1821,2017-01-22 21:11:23,Released,twalpole,2017-01-22 21:11:23
1820,2017-01-02 21:19:27,Add assertions to match all/none of a group locators applied to a specific selector type.  ,twalpole,2017-01-02 23:21:24
1820,2017-01-03 08:46:12,"Could you please say if you see the benefit of using these methods instead of just:
<S_CODE_TOKEN>
?",abotalov,2017-01-02 23:21:24
1820,2017-01-03 09:29:47,"@abotalov `page.assert_all_of_selectors(:css, '#my_div', 'a.not_clicked') ` is slightly less typing and reads fine - see the rails PR linked above ",twalpole,2017-01-02 23:21:24
1819,2017-01-01 14:38:54,"**Note:** This is for issues with Capybara.  If you have a howto type question, please ask on the mailing list as requested in the README: http://groups.google.com/group/ruby-capybara

## Meta
Capybara Version:
<!-- 2.8.1? -->
2.11.0
Driver Information (and browser if relevant):
<!-- selenium-webdriver 2.53.4 with Firefox 47.0.1? capybara-webkit? Poltergeist? -->
<S_CODE_TOKEN>

## Expected Behavior
show chrome window
## Actual Behavior
raise error:(it stuck for long time and raise this error)

<S_CODE_TOKEN>
## Steps to reproduce
<!--
Please be sure to include the code that is creating the issue along with HTML the code is being run against
-->


<S_CODE_TOKEN>

here is my full env:

<S_CODE_TOKEN>",roroco,2017-01-02 05:07:11
1819,2017-01-02 04:57:29,"I fix it, see [my stackoverflow question](http://stackoverflow.com/questions/41416278/capybara-stuck-when-use-chromedriver/41421522#41421522)",roroco,2017-01-02 05:07:11
1818,2016-12-30 20:38:30,"…ince they are so often hidden on the page  -  This adds a :style option to the attach_file method which allows for modifying the file inputs CSS before attempting to attach the file.  This is because it's pretty standard for a file input to be hidden in some way for styling reasons, and attach_file requires the input to be visible to attach the file with no other way of interacting with it.  This just prevents people from having to add their own code that modifies style before every attach_file call.  It requires driver support for argument passing of elements to execute_script.",twalpole,2017-01-02 23:20:22
1818,2017-01-03 09:16:07,"Do you think one may misunderstand `:style` option and think that it finds an element with a given style? (as majority of other `Capybara::Node::Actions` options are shared with `Finders` and some of them have options like `:class`, `:name`, `:id`, `:placeholder`)

Do you think that it would be better to rename it to e.g. `preset_style`?",abotalov,2017-01-02 23:20:22
1818,2017-01-03 09:25:00,"@abotalov Yeah - I originally had it as :style_change but didn't like that -- I'm not sure I like `preset_style`, maybe `set_style` -  I'll think about it",twalpole,2017-01-02 23:20:22
1818,2017-01-03 09:29:25,"Is the only reason to have `style` option to make the input field visible? If so, is there a way to implement an option to make the element visible (and hide the details from users) without setting style explicitly? For example:

<S_CODE_TOKEN>",strika,2017-01-02 23:20:22
1818,2017-01-03 09:30:46,@strika - no there isn't due to the many ways an element can be hidden,twalpole,2017-01-02 23:20:22
1818,2017-01-03 09:33:18,OK. Thanks.,strika,2017-01-02 23:20:22
1818,2017-01-03 19:00:27,"With a night of sleep on this, I like the idea put forward by @strika, with a minor extension.  We could have a `make_visible: true` option that defaults to setting something like `opacity: 1, display: block`  - and if that doesn't work for a specific users site they can set it to a hash of settings to change.",twalpole,2017-01-02 23:20:22
1818,2017-01-03 19:24:06,See PR #1823 ,twalpole,2017-01-02 23:20:22
1817,2016-12-29 23:50:00,,twalpole,2016-12-30 02:35:49
1816,2016-12-29 18:20:04,"## Meta
Capybara Version: **2.7.1**
Driver Information (and browser if relevant): **rack-driver**

## Expected Behavior
Descendant fields of `<fieldset disabled>` should be treated as disabled too by rack-driver.

(Reference: `disabled` attribute https://developer.mozilla.org/en/docs/Web/HTML/Element/fieldset#Attributes)

## Actual Behavior
Descendant fields of `<fieldset disabled>` are treated as enabled by rack-driver.

## Steps to reproduce
<S_CODE_TOKEN>

<S_CODE_TOKEN>

",eliotsykes,2016-12-30 02:36:29
1816,2016-12-29 23:51:24,"Thanks for this report.  Clear, understandable, all relevant info, and a way to reproduce - perfect :)   PR #1817 should fix it, just waiting for the tests to pass.",twalpole,2016-12-30 02:36:29
1816,2016-12-30 02:36:29,Fixed via PR #1817  - It will be in the next release,twalpole,2016-12-30 02:36:29
1816,2016-12-30 09:33:08,"Thank you for the kind words @twalpole, its the least I could do as a longtime user of Capybara, - and thank you even more for the fix.

I've realized my reproduction case above is incomplete, it doesn't cover ancestor fieldsets that aren't direct parents. I'm unsure if the changes at https://github.com/teamcapybara/capybara/pull/1817/files#diff-7064352df631f346ca44fb93af7af952R96 will cover this scenario:

<S_CODE_TOKEN>
",eliotsykes,2016-12-30 02:36:29
1816,2017-01-02 06:11:37,I believe it should cover that scenario But will confirm tomorrow,twalpole,2016-12-30 02:36:29
1816,2017-01-02 20:08:19,I added a test to make sure it works with nested.,twalpole,2016-12-30 02:36:29
1815,2016-12-29 09:19:07,Hope this will save few minutes for other developers. Thanks.,strika,2016-12-30 20:41:14
1815,2016-12-29 09:58:45,This is only true if you've required capybara/rails and not set anything else.,twalpole,2016-12-30 20:41:14
1815,2016-12-29 10:52:37,I see. Any suggestions how a developer can know where a screenshot is going to be saved? (Without digging into the [code](https://github.com/teamcapybara/capybara/blob/1730fd91e7a7e6c02a9492682c595bceb2448648/lib/capybara/session.rb#L821-L829)).,strika,2016-12-30 20:41:14
1815,2016-12-29 23:53:45,"@strika Rather than saying ""If the application that you are testing is a Rails app"" say something like ""If you have required capybara/rails Capybara.save_path will default to ...""",twalpole,2016-12-30 20:41:14
1815,2016-12-30 09:09:01,"Thanks. I updated the PR.

Is it a problem that this doesn't cover all cases (e.g. it doesn't mention `Capybara.save_and_open_page_path`)?",strika,2016-12-30 20:41:14
1815,2016-12-30 20:39:37,@strika save_and_open_page_path is deprecated so it doesn't matter,twalpole,2016-12-30 20:41:14
1815,2016-12-30 20:41:22,Thanks,twalpole,2016-12-30 20:41:14
1814,2016-12-28 19:37:19,"This PR attempts to issue a warning whenever a class that has included Capybara::DSL includes another module that shadows some of the Capybara::DSL methods.  If you are expecting the methods to be shadowed they can be added to the array Capybara.expected_shadowed_dsl_methods to suppress the warning, or set it to nil to disable completely.  Specifically this is an attempt to notify users of the case where RSpec::Matchers  shadows `within` which leads to the block being passed to it being completely ignored but not necessarily raising an error.",twalpole,
1814,2017-01-05 21:09:32,"IMO this alone might be not a quiet good solution to the underlying issue.
User should be able to use both Capybara's and RSpec-Expectations APIs. `all`/`within` have useful implementations in both libraries.

Let's see what ways we have:
* User includes RSpec::Matchers after Capybara::DSL. Here we can:
  - Recommend to use `all` and `within` via a session object (page)
  - Add `within_element` method as alias for `within`. Also replace `all` with `find_all` / `within` with `within_element` in Capybara's docs. But `page.all` / `page.within` is not worse so this is too crazy.
* User includes Capybara::DSL after RSpec::Matchers. Here we can:
  - Recommend to alias `all` / `within` rspec matchers using `alias_matcher`. One may try to add these aliases into RSpec itself.
  - Implement blocks suggested in https://github.com/rspec/rspec-expectations/issues/820 in RSpec-Expectations and recommend to access shadowed rspec methods using such blocks
  - Advice to call `RSpec::Matchers::BuiltIn::All.new` instead of `all`

Regarding your point in https://github.com/rspec/rspec-expectations/pull/960:
`claim RSpec owns the within method name is ludicrous` - [one may say that its RSpec that owns the namespace](https://github.com/teamcapybara/capybara/issues/1396#issuecomment-57104345). I agree that it would have been better if RSpec had chosen names that don't collide with Capybara's methods. But now both libraries own their methods and can't just remove/rename them.

Going forward, I think it might be good [to have build checks for such clashes](https://github.com/teamcapybara/capybara/issues/1396#issuecomment-57098125) so there would be less chance of new colliding methods.

cc @JonRowe ",abotalov,
1814,2017-01-05 21:40:03,"@abotalov The issue this is proposed to solve is really the `within` issue when RSpecs matchers override Capybaras version of the method.  In all the other cases of `all` and `within` the user ends up with some sort of error which allows them to, eventually, work out that it's calling the wrong method.  With RSpecs `within` overriding Capybaras though it just ends up with the test silently ignoring a block of code

    within(element) do
      expect(page).to have_content('Some test')  # ends up not being run if RSpecs `within` has shadowed Capybara's 
    end

which leads to false passing of tests (the worst possible outcome)

Since RSpecs `within` matcher doesn't take a block, but Capybaras version always does, I proposed having RSpec flag that as an error which would at least have warned users - but that was not acceptable.  I don't have time to continue proposing other changes to RSpec that may or may not be acceptable, and the maintainers of RSpec don't seem to really consider it to be an issue that needs flagging,  so I'm looking to do anything I can purely in Capybara to at least give users notice that things may not be as expected.  Adding `within_element` is definitely a possibility but, as you said, doesn't solve usage in existing tests.

Either way they are both available to be used in the same test, either via  RSpec.all/RSpec.within, or page.all/page.within but without any indication that the wrong one is being used (silent ignoring) the user isn't notified in any way",twalpole,
1814,2017-02-22 14:48:05,"This is great!  We were just running into false positive `within` problems because we included `RSpec::Matchers` after `Capybara::DSL`.  I didn't spend enough time figuring out why it only seemed to happen sometimes, but having a warning would have definitely saved some headaches!",axlekb,
1814,2017-02-23 07:36:20,"@axlekb Yeah -- it's still being considered, want to make sure it doesn't potentially create issues for people who aren't having the problem to start with.",twalpole,
1813,2016-12-23 20:23:53,"This adds support for `exact_text` option on selector queries, and an 'exact' option on title and text queries.  The thought is that an `exact` option always affects the primary function of the query - so the title in title queries, text in text queries, locator in selector queries.  The `exact_text` option on selector queries can be true/false in which case it will affect the `text` option, or it can be a string which is a shortcut for passing that string as the `text` option and also passing `exact_text: true`.   

The one issue of ""inconsistency"" is that the text query `exact` option defaults to Capybara.exact_text, but this is documented and I don't consider it a huge issue for a user to understand - and makes more sense than it defaulting to Capybara.exact from a usability pov.

Another issue is the `exact` option for title queries currently defaults to false, but will be changed in v3 to default to Capybara.exact",twalpole,2016-12-27 18:19:39
1812,2016-12-23 00:24:41,Let `execute_script` and `evaluate_script` optionally take arguments that will get passed to the scripts as `arguments`.  Selenium supports passing elements as arguments too.,twalpole,2016-12-23 17:23:50
1812,2016-12-23 09:04:34,"By the way this feature was rejected several times before: https://github.com/teamcapybara/capybara/issues/1662, https://github.com/teamcapybara/capybara/issues/1297, https://github.com/teamcapybara/capybara/pull/938",abotalov,2016-12-23 17:23:50
1812,2016-12-23 16:11:30,"@abotalov Yes it was, because it was reported to not be possible (or very difficult) in other drivers.  What has changed is that I went ahead and implemented it for Poltergeist - https://github.com/teampoltergeist/poltergeist/pull/838 - so it's not a Selenium specific feature anymore",twalpole,2016-12-23 17:23:50
1811,2016-12-20 18:02:50,The required `with` option to Node#fill_in masks the ability to pass a `with` option through to the fillable_field finder used to locate the field.  This allows that with a `currently_with` option.,twalpole,2016-12-27 18:19:59
1810,2016-12-19 22:18:07,Attempt to fix Issue #1809.  This allows for chrome having an extra iframe on the about:blank page when JS is disabled - not sure why and long term should probably be something fixed by chrome/chromedriver ,twalpole,2017-01-09 18:23:03
1810,2017-01-03 21:55:24,"I googled a bit, and it seems this frame may be added by Chromedriver itself - https://chromium.googlesource.com/chromium/src/+/lkcr/chrome/test/chromedriver/chrome/navigation_tracker.cc
But code contains the following:
<S_CODE_TOKEN>

Maybe, it's not removed if JS is disabled. What do you think?
If that is the case, I think it would be better to file an issue in chromedriver's tracker.",abotalov,2017-01-09 18:23:03
1810,2017-01-03 22:06:03,"@abotalov Definitely seems that it's not removed.  This PR doesn't really do anything that will break things so it should be safe to merge, just waiting for a response from the OP of Issue #1809 to make sure if fixed the issue for them.  There's also the question of whether or not there's much use in trying to use Capybara with Chrome when javascript is disabled -- Haven't really tried anything to find out.",twalpole,2017-01-09 18:23:03
1810,2017-01-09 18:23:03,This went along with Issue #1809 - Closing due to lack of feedback,twalpole,2017-01-09 18:23:03
1809,2016-12-18 09:47:16,"## Meta
Capybara Version: 2.2.1, 2.11.0
Driver Information (and browser if relevant): selenium-webdriver 3.0.3 using ChromeDriver 2.26.436421 (6c1a3ab469ad86fd49c8d97ede4a6b96a49ca5f6) to drive Chrome 55
Other: Tests are running with Cucumber 2.4.0

## Expected Behavior

Capybara should reset the session after each scenario with no issues.

## Actual Behavior

When JavaScript is disabled, ChromeDriver appends an iframe to the about:blank page's body, which causes Capybara's [empty page check](https://github.com/teamcapybara/capybara/blob/master/lib/capybara/selenium/driver.rb#L136) to fail:

<S_CODE_TOKEN>

**2.11.0** Chrome navigates to about:blank, and after 10 seconds Capybara raises `Timed out waiting for Selenium session reset (Capybara::ExpectationNotMet)`

**2.2.1** as soon as Chrome navigates to about:blank, Capybara raises `expected not to find xpath ""/html/body/*"", found 1 match: """" (Capybara::ExpectationNotMet)`

**2.2.0** works fine because it uses an empty HTML file instead of about:blank

## Steps to reproduce

With the following files, run `bundle install && bundle exec cucumber`

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

## Screenshot

![screen shot 2016-12-18 at 22 13 13](https://cloud.githubusercontent.com/assets/794263/21292819/00c7fbae-c576-11e6-98de-b07db1e3ad42.png)
",wildlyinaccurate,2017-01-09 18:21:29
1809,2016-12-19 17:35:47,This sounds like a Chrome bug -- have you reported it to that project? Or the chromedriver project,twalpole,2017-01-09 18:21:29
1809,2016-12-19 21:52:44,"I haven't reported it to ChromeDriver because I assume it's a ""feature"" rather than a bug. I was wondering whether Capybara would solve this by going back to using an empty HTML document rather than navigating to about:blank? Is there a reason that about:blank is preferred?",wildlyinaccurate,2017-01-09 18:21:29
1809,2016-12-19 22:24:38,"@wildlyinaccurate about:blank is preferred because the empty HTML document caused all sorts of issues with other browsers in selenium, and isn't necessarily available when Capybara is set to not run its own server.  Not sure how having an extra iframe in the about:blank page could be considered a ""feature"", it's completely against the idea of about:blank.  

Anyway, try the extra_dummy_frame branch and see if that works for you, there's no guarantee all the other features of Capybara will work correctly when JS is disabled either, since things like returning non-visible text depend on execute_script, which used to not work when JS was disabled in the browser.  It's possible JS is now allowed to be executed from chromedriver even when JS is disabled, but it's not tested)",twalpole,2017-01-09 18:21:29
1809,2016-12-19 22:49:40,"Thanks, I'll give that branch a go. I'll also have a play around with ChromeDriver and see if I can comfirm whether execute_script still functions correctly.",wildlyinaccurate,2017-01-09 18:21:29
1809,2016-12-21 20:57:06,@wildlyinaccurate Any feedback on the branch?,twalpole,2017-01-09 18:21:29
1809,2016-12-21 21:05:07,"Nope, I'm sans computer at the moment. I'll check back in after the holidays.",wildlyinaccurate,2017-01-09 18:21:29
1809,2017-01-03 18:54:27,@wildlyinaccurate Any update on this?,twalpole,2017-01-09 18:21:29
1809,2017-01-09 18:21:29,Closing due to lack of response - we can reopen if/when feedback is provided,twalpole,2017-01-09 18:21:29
1808,2016-12-16 19:23:18,As the largest part of Issue #1248 this allows for per session configuration of the relevant global options.  The feature is hidden behind the `Capybara.per_session_configuration` swtich. ,twalpole,
1807,2016-12-16 15:17:14,"Ruby 2.4.0 unifies Fixnum and Bignum into Integer.

https://bugs.ruby-lang.org/issues/12005

Just modified `Fixnum` to `Integer`. As a result of that will fix `warning: constant ::Fixnum is deprecated` warning in Ruby 2.4.0+.

Thanks.",koic,2016-12-16 19:15:01
1807,2016-12-16 19:15:04,LGTM - Thanks,twalpole,2016-12-16 19:15:01
1806,2016-12-16 02:20:01,"## Meta
'capybara', '~> 2.10', '>= 2.10.1'

Driver Information (and browser if relevant):
45.5.0 firefox ESR

## Expected Behavior
should able to select  hapus 
select 'hapus', :from => :toggle_action

I also have been try to use 

find('#toggle_action').click
sleep 2
find('#toggle_action').find(:xpath, 'option[2]').select_option
select('hapus')
find(:xpath, './/*[@id=""toggle_action""]/option[@value=""delete""]').click
select ""hapus"", :from => ""toggle_action""
sleep 1
within '#toggle_action' do
find('#toggle_action>option', :text => 'hapus').click
end
find('#toggle_action').click
select('hapus', :from => 'toggle_action')
select(""delete"")

find(item_id).select('hapus')

## Actual Behavior
Can't select 'hapus',  but step green 

## Steps to reproduce

![screenshot from 2016-12-16 09-18-43](https://cloud.githubusercontent.com/assets/19463315/21249466/ca69eba0-c370-11e6-9a72-3bb616c8a5db.png)


",LamhotJM,2016-12-16 19:12:48
1806,2016-12-16 18:58:23,"What version of selenium-webdriver are you using?

If your step is green, what makes you believe the item is not selected?
",twalpole,2016-12-16 19:12:48
1806,2016-12-16 19:12:48,"The following code works fine for me - closing until enough information is provided to replicate the issue
<S_CODE_TOKEN>
",twalpole,2016-12-16 19:12:48
1805,2016-12-15 21:23:36,"![image](https://cloud.githubusercontent.com/assets/1217/21242517/01479002-c315-11e6-9726-1755620e4dfc.png)
",alexspeller,2017-01-10 20:41:18
1805,2017-01-10 22:07:35,w00t,simi,2017-01-10 20:41:18
1804,2016-12-14 12:44:56,"This commit injects the CSS as internal, and the images as Base64 allowing to have an HTML screenshot looking much better.

Regarding the code, I don't like to pass the session as parameter to the helper methods, but it was even worst to me to have those methods in the `Capybara::Session` class. I was tempted to create a `Capybara::HtmlTransformer` class which would embed this code and called from the `Capybara::Session`.

Can someone (@twalpole maybe?) tells me the way I should implement this better (if needed)?",zedtux,2016-12-14 18:08:06
1804,2016-12-14 14:20:48,I will check and fix the tests soon.,zedtux,2016-12-14 18:08:06
1804,2016-12-14 15:04:27,Also I was thinking of adding an option in order to enabled/disable this feature,zedtux,2016-12-14 18:08:06
1804,2016-12-14 18:08:06,"Hi - thanks for the efforts, however the point of saving the page is to look at the HTML as your app rendered it, so drastically changing the page isn't really something I consider desirable.  We do provide the `asset_host` setting which can be set so you can load up the saved page and load the assets from a different base url if wanted, and if you really want to see what the page looked like in the browser there is `save_screenshot`.  The functionality you're proposing may be better as a separate gem.",twalpole,2016-12-14 18:08:06
1804,2016-12-14 18:16:51,"Thank you @twalpole  for your fast reply.


> [...] changing the page isn't really something I consider desirable

This is the reason why in my last comment I suggested to add an option to enable/disable it.

> We do provide the asset_host setting which can be set so you can load up the saved page and load the assets from a different base url ...

This option require to have a running server, where my feature doesn't, which ease the life of developers.

> [...] if you really want to see what the page looked like in the browser there is save_screenshot.

As far as I know, this requires to have a JavaScript driver which is slow. (Correct me if I'm wrong).
Also this prevent developers to inspect the page and see the CSS rules for example.

The added code is really small, and with an option to enable it (disabled by default) would give us the best of both worlds.",zedtux,2016-12-14 18:08:06
1804,2016-12-14 18:36:03,"Yes - it requires a running server, but that's easy enough to setup and means the page is loading the same way it would in production.
Yes - screenshot requires a driver that supports taking screenshots, and that is only the JS supporting drivers, however with the amount of JS/CSS used in apps today the rack-test driver really is very limited and most people are using one of the JS drivers.

I still think this feature is one that would be best implemented as a separate gem that does something like add a 'save_finalized_page` method to Capybara::Session.",twalpole,2016-12-14 18:08:06
1804,2016-12-14 19:06:56,"Okay, thank you, I'll check with the `capyabara-screenshot` gem if they accept my code (I have the feeling to be the guy looking for friends 😄, or a kind of Repo-less).",zedtux,2016-12-14 18:08:06
1804,2016-12-14 20:14:13,"@zedtux Why don't you create your own gem -  name it  capybara-finalize-page or something and release that, rather than trying to get it included into another gem? ",twalpole,2016-12-14 18:08:06
1804,2016-12-15 18:01:50,"Just to avoid people having n amount of gems to be installed for just 20 lines of code. But in the end, if event `capybara-screenshot` doesn't want my code, I will do a gem for sure :)",zedtux,2016-12-14 18:08:06
1803,2016-12-09 02:22:59,Issue #1365 ,twalpole,2016-12-09 22:31:05
1802,2016-12-05 01:55:55,"## Meta
**Capybara Version:** 2.7.1
**Driver Information:** capybara-webkit 1.11.1

## The problem
Using `.set()` works well, but neglects to fire JavaScript events. This creates an issue when javascript events must be fired when a user types into a `contenteditable` field (eg. when using redactor, Froala). This was mentioned in #310.

One solution is to set the field using javascript: (froala example)
<S_CODE_TOKEN>

This solution is messy however, is there an alternative approach or could `.set()` be changed to allow these js methods to fire? ",jeremylynch,2016-12-05 04:20:01
1802,2016-12-05 04:20:01,This is driver specific behavior - you need to file this issue over on the capybara-webkit project,twalpole,2016-12-05 04:20:01
1801,2016-11-30 10:35:44,"When using the gem [capybara-screenshot](https://github.com/mattheworiordan/capybara-screenshot), sometimes I get a BadURI error, because the current URL of the application has the following form:

`http://someNormalUrl/some_normal_path/some_id##other_stuff` (Note the two hashes)

When there is this type of url capybara throws the error and the screenshot is not saved, which is bad because we want the screenshot to understand what is going on. It still shows the cause of the error and everything else runs normally, but with no screenshot.

This fix prevents the badURI error and allows to save the screenshot. All tests are passing as well, but I am honestly not sure wether this can have more impact on the execution of capybara.",mduqueoviedo,2016-11-30 19:39:50
1801,2016-11-30 13:28:33,"Yep, this is happening really often. Looking forward to merging of this pull request.",altmer,2016-11-30 19:39:50
1801,2016-11-30 15:39:33,"Randomly encoding a URL is not the solution to this issue, and will just end up breaking path marchers etc in people's code.  The proper solution is to figure out why the driver is returning an invalid URL from current_url.  What driver are you using? ",twalpole,2016-11-30 19:39:50
1801,2016-11-30 15:44:48,"I am using Poltergeist as driver. 

I'd gladly fix this in my code or in the capybara-screenshot gem instead, but the issue raises when calling this method, it is so deep in execution that I had to put the fix here.",mduqueoviedo,2016-11-30 19:39:50
1801,2016-11-30 16:04:48,"it sounds like it's something that should be fixed in Poltergeist so it's current_url method returns a valid URL.  That will need tests for different urls to make sure it never double encodes, etc",twalpole,2016-11-30 19:39:50
1801,2016-11-30 17:04:51,"Looking at this further - it appears selenium returns the same invalid URL if you have invalid urls in links, etc.  You can't visit those urls through Capybara directly (via a `vist` call) though because they are technically invalid and should be http://someNormalUrl/some_normal_path/some_id#%23other_stuff to be valid.  Calling encode however turns it into http://someNormalUrl/some_normal_path/some_id%23%23other_stuff and would also screw with already properly encoded characters in the path which is also not correct.   The easiest solution here may be to use Addressable::URI.parse in this case which uses a much more lenient parsing algorithm ",twalpole,2016-11-30 19:39:50
1801,2016-11-30 17:07:40,@mduqueoviedo What framework are you using that ends up producing technically invalid URLs?,twalpole,2016-11-30 19:39:50
1801,2016-11-30 17:15:05,"For completeness the spec that covers this is https://tools.ietf.org/html/rfc3986#section-3.5  where 

fragment         = *( pchar / ""/"" / ""?"" )
pchar              = unreserved / pct-encoded / sub-delims / "":"" / ""@""
unreserved     = ALPHA / DIGIT / ""-"" / ""."" / ""_"" / ""~""
pct-encoded  = ""%"" HEXDIG HEXDIG
sub-delims     = ""!"" / ""$"" / ""&"" / ""'"" / ""("" / "")""  / ""*"" / ""+"" / "","" / "";"" / ""=""

",twalpole,2016-11-30 19:39:50
1801,2016-11-30 19:39:50,Closing in favor of 95173f04c3f5a8984949e738ebafaf530479257b now merged into master,twalpole,2016-11-30 19:39:50
1801,2016-12-01 08:25:59,"Awesome, thanks!

Just FYI, I am using Angular 1 as frontend framework, and following their way of indicating frontend routes. ",mduqueoviedo,2016-11-30 19:39:50
1800,2016-11-29 16:37:10,"Hello I'm just upgrading to rails 5, specifically 5.0.0.1 and I'm getting a lot of deprecation warnings that look like the following:
`
DEPRECATION WARNING: #original_exception is deprecated. Use #cause instead. (called from process at /Users/LuisMiguelDelgado/.rvm/gems/ruby-2.3.1/bundler/gems/capybara-6234d2d20b63/lib/capybara/rack_test/browser.rb:61)`

I was getting varied deprecation warnings with the same message, thought Capybara might be the source so I pulled the gem straight from the github master branch and now I'm getting these. Any thoughts? 

",8vius,2016-11-29 17:17:41
1800,2016-11-29 17:17:41,Since that line (and no where else in Capybara) mentions `original_exception` it's not a Capybara issue. ,twalpole,2016-11-29 17:17:41
1799,2016-11-23 19:54:46,,twalpole,2016-11-23 22:58:15
1798,2016-11-22 16:29:38,"It looks like the message for marionette is different than for the old version. Because of this, when Firefox shuts down too quickly, the ""unknown error"" thrown by the driver will make the entire RSpec test suite fail.

The issue can be reproduced using:
* capybara 2.10.1
* selenium-webdriver 3.0.1
* geckodriver 0.11.1
* firefox 49.0.1
* Ubuntu 14.04 (tested on both Ubuntu and Mac OS, but the issue only appears on Ubuntu).
",psyho,2016-11-23 19:55:12
1798,2016-11-22 16:42:29,How is your firefox being shut down before the driver calls quit?  This really seems like something that should be fixed in selenium/geckodriver rather than us continuing to add more and more strings for each different browser selenium supports.,twalpole,2016-11-23 19:55:12
1798,2016-11-23 09:08:37,"@twalpole I haven't debugged how it happens. `quit` is being called by Capybara and it raises an exception. I noticed that the same exception, with a different message is being handled already in Capybara code, so I updated the code to preserve the same behaviour against the latest versions of Firefox/geckodriver. All I can add is that Firefox is shut down without any processes hanging around after the test suite finishes, same goes for the geckodriver process.",psyho,2016-11-23 19:55:12
1798,2016-11-23 17:11:44,"The problem is that ""Failed to decode response from marionette"" doesn't mean the same thing as ""can't communicate"" to me (one of them comes from a selenium grid, one from geckodriver I think) - and the fact that it's being returned in an `UnknownError` makes it tough to say what it means and whether it should be ignored or not. I also don't want to start adding constants for every message we're going to ignore.   I guess it probably doesn't matter what the message is in an UnknownError during quit we could just warn out the message and continue on.  If you want to change this to just do something like `warn ""Ignoring unknown Selenium error: #{e.message}""` and get rid of the tests you added I'd merge that in.
",twalpole,2016-11-23 19:55:12
1798,2016-11-23 19:55:12,Closing this in favor of PR #1799 ,twalpole,2016-11-23 19:55:12
1797,2016-11-21 10:58:48,The link http://jnicklas.github.com/capybara/ in the description at the top of the github page is broken. It returns a 404.,grichmond-mdsol,2016-11-21 17:06:31
1797,2016-11-21 17:06:31,Fixed - thanks for pointing this out.,twalpole,2016-11-21 17:06:31
1796,2016-11-20 21:06:34,"## Meta
Capybara Version:
2.7.1
Driver Information (and browser if relevant):
Firefox Versoin:
47.0.1
Selenium-Webdriver Verstion:
2.53.4

Nothing else custom configured such as Poltergeist, etc.

## Expected Behavior

Following save_and_open_page with fields filled in the codebase (*and* working behind the scenes if I enable `click_button 'Log in'`), I should see the user email and the user password entered.

## Actual Behavior

Page renders unfilled. 

Screenshot:
<img width=""340"" alt=""screen shot 2016-11-20 at 9 02 32 pm"" src=""https://cloud.githubusercontent.com/assets/7865030/20466116/b0ff3bd6-af64-11e6-9f5f-6059e5576fc5.png"">

Code:

<S_CODE_TOKEN>
## Steps to reproduce

Fork my codebase: https://github.com/Schwad/PorkCasts-Montana

`rake db:migrate`
`bundle install`
(Currently on ruby 2.2.1, upgrading to Rails five and Ruby 2.3.1 following full test suite).

Would appreciate any thoughts here, I started seeing this behavior on a production app in my day job and have used my side-project public repo to replicate the issue for you to be able to dig in. 

I've ensured Firefox is 47.0.1 and disabled updates so it hasn't snuck around to 50 behind my back!

Would sincerely appreciate any thoughts, comments or questions you can offer.

Best,

Schwad
",Schwad,2016-11-20 21:30:25
1796,2016-11-20 21:30:25,"save_and_open_page saves the current HTML and attributes.  Filling in a field only changes the value property (not attribute) so it won't be shown in the saved page.  If you need to see the current state, use save_screenshot instead.
",twalpole,2016-11-20 21:30:25
1796,2016-11-20 22:11:05,"Thanks for this @twalpole .

For those who may visit this issue in the future having a similar problem, be sure to:
- Set default_driver as selenium
- If you want to replicate the functionality of save_and_open_page with `save_screenshot`, I found `save_and_open_image` from the [capybara-screenshot](https://github.com/mattheworiordan/capybara-screenshot) gem helpful. 
",Schwad,2016-11-20 21:30:25
1796,2016-11-21 02:45:17,@Schwad There is also `save_and_open_screenshot` which doesn't need the capybara-screenshot gem.,twalpole,2016-11-20 21:30:25
1795,2016-11-17 22:44:10,"I ran into a situation where I've got multiple matching nodes for a query, and always need to pick the last one. I added this as a patch to my tests, and figured I'd clean it up for upstream, as others might find it useful.",booch,2016-11-17 23:30:14
1795,2016-11-17 23:30:14,"Thanks for the effort, however I don't really want to add any more matching strategies currently - they're confusing enough for people already.  For ones own use in a project rather than patching in a last strategy I think I'd instead write a method to include in the features - something like

<S_CODE_TOKEN>
",twalpole,2016-11-17 23:30:14
1794,2016-11-16 12:12:48,"I'd like to propose a feature: `be_readonly` as in addition to `be_disabled` so a spec can be written to check against HTML 5 elements that have the `readonly` attribute, e.g.: 
<S_CODE_TOKEN>",ain,2016-11-16 13:43:04
1794,2016-11-16 13:42:20,"The be_xxxx matchers are provided by RSpec for all boolean (name ends in ?) methods on the element, so if you're using a version new enough to have Element#readonly? (2.8 iirc) this should already be provided.  That being said, those marchers don't provide any waiting/retrying behavior, and a much better way to test for this is the have_field matcher

<S_CODE_TOKEN>
",twalpole,2016-11-16 13:43:04
1794,2016-11-16 14:02:01,"Thanks for prompt feedback!
",ain,2016-11-16 13:43:04
1793,2016-11-16 09:22:29,"I'm writing a capybara/rspec test for a web app that opens a popup window containing a form that needs to be submitted. Immediately upon submission of the form, the javascript logic in the popup window would automatically close the popup window. 

Now I would intermittently get `Net::ReadTimeout` errors because of this, I'm assuming because the selenium webdriver cant recover when the popup closes too quickly and is left in a weird state.

<S_CODE_TOKEN>

I'm using `within_frame` here because the form I need to submit is actually within an iframe in the pop-up window. I have no control over the page I am testing and would only really be able to work around it in the test.

Is there any way to reliable handle the popup window and the iframe within it closing too quickly?

### Versions

capybara (2.7.1)
selenium-webdriver (2.51.0)",samgavinio,2016-11-17 04:04:50
1793,2016-11-16 13:20:15,"This sounds driver specific. What driver/versions are you using?
",twalpole,2016-11-17 04:04:50
1793,2016-11-17 03:52:19,"Versions are:

capybara (2.7.1)
selenium-webdriver (2.51.0)
",samgavinio,2016-11-17 04:04:50
1793,2016-11-17 04:04:50,"Upgrade to the latest version of capybara (2.10.1)  and selenium-webdriver 2.53.4 if using FF and needing full functionality - 3.0.x if using chrome with it
",twalpole,2016-11-17 04:04:50
1793,2016-11-17 07:25:37,"Experiencing this still in capybara (2.10.1)  and selenium-webdriver 2.53.4. Here's some older related selenium issues for reference:

https://github.com/seleniumhq/selenium-google-code-issue-archive/issues/3291
https://github.com/seleniumhq/selenium-google-code-issue-archive/issues/7534

Since it seems to be a selenium driver issue it's probably a good idea to keep this closed.

Thanks.
",samgavinio,2016-11-17 04:04:50
1792,2016-11-15 17:18:25,,twalpole,2016-11-16 14:11:00
1791,2016-11-15 16:58:00,,twalpole,2016-11-15 16:58:15
1790,2016-11-14 17:52:10,There is currently an issue where if you use the text option combined with visible: :hidden option in a selector the text will never match.  This fixes that,twalpole,2016-11-14 18:56:04
1789,2016-11-09 19:38:37,Potential alternate to PR#1787,twalpole,2016-11-10 17:20:42
1788,2016-11-09 19:13:25,"## Meta
capybara (2.10.1)

Occurs for both:
poltergeist (1.11.0) with phantomjs 2.1.1
selenium-webdriver (2.53.4) with firefox 47.0.1

## Expected Behavior

`.text` that returns a string should be able to use `have_content` against all parts of that string

## Actual Behavior

When the string includes HTML, `have_content` appears to interpolate the string as HTML and only searches what would be rendered to a user.

## Steps to reproduce

HTML:
<S_CODE_TOKEN>

Renders on the page to:
<S_CODE_TOKEN>

Capybara:
<S_CODE_TOKEN>

Note: This is not an urgent issue by any means as the following works:

<S_CODE_TOKEN>",ronwsmith,2016-11-09 19:19:36
1788,2016-11-09 19:19:36,"You're trying to use have_content incorrectly.  Like all of Capybaras matchers they are used with elements.  If you call it on text `Capybara.string` is used to convert that text to elements by parsing it as HTML.  The correct usage is as you show at the end

<S_CODE_TOKEN>

This is behaving exactly as expected
",twalpole,2016-11-09 19:19:36
1788,2016-11-09 20:19:32,"Appreciate the insight @twalpole .  I wasn't familiar with the `Capybara.string` behavior.

Note to anyone else reading this issue: `has_content?` throws a `NoMethodError` on a string, but `have_content` converts it to an element.
",ronwsmith,2016-11-09 19:19:36
1788,2016-11-09 20:45:01,"@ronwsmith Yes because `has_content?` is a method on Capybara::Node::Element - `have_content` is a Capybara provided RSpec matcher - they're completely different things.  If you're working with strings you should just be using the normal string methods and/or RSpec matchers designed for working with strings
",twalpole,2016-11-09 19:19:36
1787,2016-11-09 15:10:31,"Speed up interactions with checkbox / radio where input is hidden but label is not by
* not waiting to find checkbox if not visible
* not waiting while trying to set value on checkout box `cbox.set` if not visible

Before this the default behaviour was to wait until the time out before checking if could interact via the label.",mrloop,2016-11-10 08:36:06
1787,2016-11-09 18:41:18,"This speedup would be nice to have however in the current form it will attempt to call set on a non-visible element if allow_label_click is false (default) which is not acceptable.  Also, it may be better to change this so all the logic is inside a synchronize block so the whole thing gets retried rather than worrying about the wait time on each separate call.
",twalpole,2016-11-10 08:36:06
1787,2016-11-09 19:18:35,"Thanks for the quick review @twalpole 

> in the current form it will attempt to call set on a non-visible element if allow_label_click is false (default) which is not acceptable.

Where `allow_label_click` is false the implemention in this PR will raise at [line 156](https://github.com/mrloop/capybara/blob/d8d57df8bef11ddf674e3a6f9f5a89b6fd576acb/lib/capybara/node/actions.rb#L156)
`cbox = find(:checkbox, locator, options.merge({visible: (allow_label_click ? :all : true)}))`

This scenario is tested for [here](https://github.com/mrloop/capybara/blob/d8d57df8bef11ddf674e3a6f9f5a89b6fd576acb/lib/capybara/spec/session/check_spec.rb#L160) , maybe the ternary operator doesn't help readability, also not sure if it's in keeping with the project style. Let me know if it's acceptable in it's current form or if it needs changed.
",mrloop,2016-11-10 08:36:06
1787,2016-11-09 19:44:44,"You are correct, my mistake.  So really the only behaviors that would be changed are the the error message that is raised if the wait time is mentioned in the error message and what happens if the user passes a `visible` option in.  An alternate implementation that would provide similar results is PR #1789 but without changing the current behavior at all.  
",twalpole,2016-11-10 08:36:06
1787,2016-11-09 20:08:14,"@twalpole great I'll try out #1789 with test suite tomorrow. (UTC+00:00)
",mrloop,2016-11-10 08:36:06
1787,2016-11-09 20:11:42,"@mrloop Thanks -- let me know if it behaves basically equivalent to this PR and then I'll have to decide which way to go.
",twalpole,2016-11-10 08:36:06
1787,2016-11-10 08:36:02,"@twalpole #1789 working as expected. I'll close this PR in favour of yours. Thanks for coming up with better solution and I now know capybara internals a little bit better :) 
",mrloop,2016-11-10 08:36:06
1786,2016-11-08 22:46:01,,twalpole,2016-11-09 00:03:48
1785,2016-11-04 09:46:57,"Broken `ActionView::Template::Error` with rails v4.2.1

## Meta
Capybara Version: 2.10.1
Driver: Poltergeist

## Expected Behavior
Should see
<S_CODE_TOKEN>

## Actual Behavior
Instead i see
<S_CODE_TOKEN>
## Steps to reproduce

1. Write a rails view
2. Put a `raise ""Boom!""` inside a view.

<S_CODE_TOKEN>

3. Write an integration test for this view

<S_CODE_TOKEN>

4. Observe weird exception

<S_CODE_TOKEN>

## Quickfix

<S_CODE_TOKEN>

## Why this happened

Bad `ActionView::Template::Error#initialize` in rails ([link](https://github.com/rails/rails/blob/v4.2.1/actionview/lib/action_view/template/error.rb#L64))",mluts,2016-11-09 00:04:49
1785,2016-11-04 17:13:29,"I just had the same exact problem.
",adimichele,2016-11-09 00:04:49
1785,2016-11-06 00:42:45,"Hmmm --- that's the way it used to be but was changed to get the cause set properly for JRuby - guess that's not going to work.  Have to experiment a bit with this
",twalpole,2016-11-09 00:04:49
1785,2016-11-09 00:04:48,"Should be fixed through PR# 1785
",twalpole,2016-11-09 00:04:49
1784,2016-11-03 13:39:51,Here's a fix for some Ruby warnings.,amatsuda,2016-11-03 17:54:58
1784,2016-11-03 17:55:01,"Thank you very much
",twalpole,2016-11-03 17:54:58
1783,2016-11-03 12:03:43,"## Meta
Capybara Version:
2.10.1
Driver Information (and browser if relevant):
selenium-webdriver 3.0.0 with Chrome 54.0.2840.90

## Expected Behavior
Chrome should open the URL passed in at Session.visit()

## Actual Behavior
Chrome opens data:, and visit() fails

## Steps to reproduce
    @session = Capybara::Session.new(Capybara.current_driver)
    @session.visit <URL>
    # Chrome does not open the URL
",Logout22,2016-11-03 12:43:09
1783,2016-11-03 12:43:09,"I removed the .chromedriver-helper directory in my home, and then it worked. Must have been misconfigured accidentally. Sorry!
",Logout22,2016-11-03 12:43:09
1783,2016-11-17 22:02:37,"Same problem here 
`Chrome 54.0.2840.98`
`chromedriver 2.25.426935`
Anyone else got this and solved it?
",kikocastro,2016-11-03 12:43:09
1782,2016-11-01 15:09:32,"## Meta
Capybara Version:
Various ones, Have upgraded through 2.8 through to 2.10.1

2.53.4 Latest stable 2 webdriver

## Expected Behavior

When A Crash occurs either through a failure or timeout, the driver.quit hook should run, and run fast (Of magnitude seconds).

## Actual Behavior

When our script times out due to the `REASON: Net::ReadTimeout` it takes nearly 3mins to run the command : `Capybara.current_session.driver.quit`

Below is an extract of a failure log

<S_CODE_TOKEN>",luke-hill,2016-11-01 18:00:48
1782,2016-11-01 16:21:30,"All Capybara does when you call driver.quit is call quit on the Selenium::Webdriver object, so any delay is going to be in selenium not in Capybara.  Your driver configuration may affect that (if you've changed the default selenium timeouts for instance) but there's nothing Capybara can do about it, and I'll guess not much selenium will do about it since they've moved on to 3.0+
",twalpole,2016-11-01 18:00:48
1782,2016-11-01 16:42:12,"I have changed the default timeouts (This is a remote instance), the timeout has been changed to 120s for remote grid drivers.

However it seems as though when we get a Net::Timeout it can't quit in a timely fashion. Typically this is only an issue on Internet Explorer.

On other areas of the site when it crashes it only takes 1-2 secs to call and run this command, so I'm thinking it's an issue linked to Net::Timeouts and this command (Be it a Selenium command or not)

Will post up instantiated driver commands tomorrow
",luke-hill,2016-11-01 18:00:48
1782,2016-11-01 18:00:48,"@luke-hill There's nothing Capybara can do -  If you've changed the selenium timeouts to 120s and when you tell selenium to quit it's taking around 120s I think it's pretty clear selenium is using the timeout you've set to attempt to talk to the driver again -  You should probably file an issue with selenium - but again they've moved on to v3.0+ so not sure if they'll really do much.
",twalpole,2016-11-01 18:00:48
1782,2016-11-02 07:57:39,"The thing is it's not taking ""around"" 120s. It's taking 150s.

If it was taking 120s, I would assume it's timing out ""again"" calling the quit command. But I'll do as you've requested and place a follow-up in the selenium-group.
",luke-hill,2016-11-01 18:00:48
1781,2016-10-31 17:00:25,This adds setting to the selenium driver to trigger local/sessionStorage clearing during `#reset!`,twalpole,2016-10-31 18:46:25
1780,2016-10-28 10:26:45,"## Meta

Capybara Version:
2.7.1
Driver Information (and browser if relevant):
selenium-webdriver (2.51.0) with Firefox 46.0
## Steps to reproduce

Use `find_field('Name')` on the following html:

<S_CODE_TOKEN>
## Expected Behavior

Element should be found as `find_field` method looks at `label` according to documentation.
## Actual Behavior

If I use method `find_field('Name')` on this html it doesn't find field.

`Capybara::ElementNotFound: Unable to find field ""Name""
`
",ievgenChernikov,2016-10-28 16:34:02
1780,2016-10-28 16:34:00,"This is because Capybara follows the HTML spec and doesn't know anything about react.  The HTML spec states that labels are linked to inputs either by wrapping them or with a `for` attribute equal to the `id` attribute of the input.

It's easy enough to add data-reactid label linking to the field selector if you want it in your own project - something like

<S_CODE_TOKEN>

should work but Capybara is not going to be adding library specific features currently.
",twalpole,2016-10-28 16:34:02
1779,2016-10-27 16:53:45,,twalpole,2016-10-31 18:35:28
1779,2016-10-27 16:55:14,"Waiting for feedback from Issue #1776 
",twalpole,2016-10-31 18:35:28
1778,2016-10-27 15:19:05,"Hi everyone!
I faced with such problem - I've got SPA which needs access to microphone. Before any actions, user have to give permissions for browser to use mic, so the prompt window appears. Is it possible to emulate permissions whatever?
",rockandruby,2016-10-27 16:52:23
1778,2016-10-27 16:52:22,"Closing since you failed to read the issue template
",twalpole,2016-10-27 16:52:23
1777,2016-10-18 14:59:25,"## Meta

Capybara Version:
2.10.1
Driver Information (and browser if relevant):
Poltergeist 1.11.0 / PhantomJS 2.1.1
## Steps to reproduce

On a page with multiple checkbox `<input>` tags:

<S_CODE_TOKEN>
## Expected Behavior

Check first `count` checkboxes.
## Actual Behavior

<S_CODE_TOKEN>

FYI - Changing `each.with_index` to `each_with_index` works.
",dvandersluis,2016-10-18 18:26:46
1777,2016-10-18 15:08:10,"`#all` returns a Capybara::Result not an Array - if you want accces to all the methods on an array you can call `#to_a` on it.

<S_CODE_TOKEN>
",twalpole,2016-10-18 18:26:46
1777,2016-10-18 15:32:56,"Actually, thinking about this -- the only reason it doesn't work is because the #each implemented in Capybara::Result doesn't return an enumerator when called without a block.  I'm going to implement that, but for future info  Capybara::Result is not guaranteed to behave exactly like an Array but can be converted to an array as shown above if necessary.
",twalpole,2016-10-18 18:26:46
1777,2016-10-18 18:26:46,"Fixed via 4bd9806804c71e939188e720e8bb10fcb8cf9530
",twalpole,2016-10-18 18:26:46
1777,2016-10-18 18:27:25,"Thanks!
",dvandersluis,2016-10-18 18:26:46
1777,2016-10-18 20:16:24,"@dvandersluis You're welcome, thanks for pointing this out.  On a side note, rather than `all('input[type=checkbox]')` Capybara does provide a [:checkbox selector](https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb#L298) , so you could just do `all(:checkbox)`  which also supports a number of filter options too
",twalpole,2016-10-18 18:26:46
1776,2016-10-13 21:34:57,"## Meta

This is a followup to https://code.google.com/p/selenium/issues/detail?id=7405.
Capybara Version:
2.10.1
Driver Information (and browser if relevant):
selenium-webdriver 2.53.4 with Firefox 47.0.1 on OS X Sierra
## Expected Behavior

Improve waiting for the window to resize. Here is how it could work for maximize (but similar technique could be applied to `resize_window_to`).

<S_CODE_TOKEN>
## Actual Behavior

The current behavior (see below) waits for 0.1 seconds for the window to maximize. It's not clear whether the `sleep 0.1` is long enough. For example, on my giant monitor on os x, it is not. 

<S_CODE_TOKEN>
",pkmiec,2016-10-31 18:37:13
1776,2016-10-14 17:15:06,"@pkmiec The problem is there really is no way to know when maximize has finished.  Your method assumes the size has started changing within .05 seconds and will never spend more than .05 seconds without changing.  Those might be valid assumptions but I'm not convinced of that.  Since you're calling maximize you're obviously interested in some change that occurs when the window size changes, so the proper solution for this is to wait for that change.  What change are you expecting in your page when maximized and is it something you Capybara will wait for?
",twalpole,2016-10-31 18:37:13
1776,2016-10-14 19:22:00,"You're right there is no way to tell for sure. I was just suggestion something which I think could work than the simple sleep 0.1.
",pkmiec,2016-10-31 18:37:13
1776,2016-10-15 00:17:26,"I guess it wouldn't hurt to do something like this, although it should be implemented in Window#maximize not in the driver -  PRs welcome
",twalpole,2016-10-31 18:37:13
1776,2016-10-15 07:42:39,"Another issue with this is that window could already be maximized when `#maximize` is called.
",abotalov,2016-10-31 18:37:13
1776,2016-10-26 22:07:04,"@pkmiec Please give the window_size_change_wait branch a try and see if that would work for you
",twalpole,2016-10-31 18:37:13
1776,2016-10-26 22:08:40,"@twalpole will do .. thanks
",pkmiec,2016-10-31 18:37:13
1776,2016-10-30 20:46:38,"@twalpole i tested it on my giant monitor and it works.
",pkmiec,2016-10-31 18:37:13
1776,2016-10-31 18:37:13,"Closed via b8bd553a7d7a14a56d7527f0600bcf56a30c87c2
",twalpole,2016-10-31 18:37:13
1775,2016-10-13 16:48:39,"PR #1774 But checking for a specific message in the exception to limit the number of errors ignored
",twalpole,2016-10-18 15:00:35
1775,2016-10-13 16:51:28,"Potential fix for Issue #1773 - waiting for feedback from @dylanlive before merging
",twalpole,2016-10-18 15:00:35
1775,2016-10-13 18:46:34,"@twalpole Tested and verified this will catch the case of a user closing the browser on Grid.

Unfortunately I don't believe it will catch other Grid connection issues, such as an SO_TIMEOUT. SO_TIMEOUT's also fall under `Selenium::WebDriver::Error::UnknownError`, but have a different exception message.

The easy solution would be to add another expected message to catch, but I fear the maintenance of string matching... what are your thoughts?

Exception:

<S_CODE_TOKEN>

For brevity of this comment, I made a gist containing the backtrace:
https://gist.github.com/dylanlive/df4645d54cdaa21c170c9fec1e62cc3a
",dylanlive,2016-10-18 15:00:35
1775,2016-10-13 19:08:59,"@dylanlive  Ugh -- and this is the problem with UnknownError - I'm not interested in maintaining the strings and really don't want to just ignore all the errors - how often are you getting these errors?  There's an argument to be made that SO_TIMEOUT is an error some people would actually want to know about since the timeouts could potentially be adjusted.
",twalpole,2016-10-18 15:00:35
1775,2016-10-13 19:46:16,"@twalpole I concur :P

Reasonable argument that people would want to know about it; however, the exception will likely still be raised during test execution (which can be caught in an rspec around block).

If the session was already terminated, does it make sense for quit to raise an exception? Likely the same argument could be used for `Errno::ECONNREFUSED`.

As for my experience with the SO_TIMEOUT's, they're occurring around some of our bandwidth throttling scenarios. Need to spend time researching prevention, but in the interim, was looking at recovery. The at_exit logic to quit is killing recovery efforts.
",dylanlive,2016-10-18 15:00:35
1775,2016-10-18 15:03:57,"I've merged in the catching of the general 'Error communicating with the remote browser' error since it probably means the browser is gone and really isn't providing any useful info that could be used to diagnose any issue.   I'm not, as of now, comfortable doing the same with SO_TIMEOUT errors because I feel those would tend to indicate an issue between the client and the grid which should be diagnosed by the user
",twalpole,2016-10-18 15:00:35
1774,2016-10-13 02:29:20,"Potential solution for #1773.

Upon quitting the browser, this catches a `Selenium::WebDriver::Error::UnknownError` exception, which is raised when there is a server-side issue communicating with the browser.

If the remote browser session is terminated for a server-side reason, Capybara will be able to assign `@browser` to nil upon quitting.
",dylanlive,2016-10-13 16:50:23
1774,2016-10-13 16:20:49,"As mentioned in Issue #1773 I'm reticent since I don't want to end up hiding actual errors people may need to know about -- Was there a message with the error you're receiving that could be used to narrow the errors that get ignored?
",twalpole,2016-10-13 16:50:23
1774,2016-10-13 16:50:23,"@dylanlive  Please try the selenium_quit_error branch/PR #1775 and see if that solves the issue you're having  -  Closing this in favor of the more limited error ignoring (assuming it works)
",twalpole,2016-10-13 16:50:23
1773,2016-10-13 02:13:36,"## Meta

Capybara Version: 2.10.1 
Driver Information (and browser if relevant): selenium-webdriver 2.53.4, RSpec 3.4.0, Selenium Grid v.2.53.1
## Summary

When a remote Selenium Grid session is disconnected unexpectedly, it's difficult to recover.

A `Selenium::WebDriver::Error::UnknownError` exception is raised [upon exit](https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/driver.rb#L26), even after clearing the session_pool and creating a new instance of the driver (full exception below).

A new driver instance can be created, but after the suite is finished, the old driver instance still tries to exit.
## Expected Behavior

When the test suite is finished running, at exit, it should not create an exception if the remote connection is already gone.
## Actual Behavior

An exception is triggered.

This prevents the user from recovering by creating a new driver, as the old driver raises an exception at exit.
## Steps to reproduce

1) Configure a remote driver to connect to Selenium Grid
2) Add this snippet to a test suite's spec_helper.rb so that the session_pool is cleared, and the example is retried (must be using rspec-retry to use run_with_retry...):

<S_CODE_TOKEN>

3) Let the test suite start running
4) Close the remote browser manually, or shut that node down
- An exception will be raised, but the code snippet above will clear the session pool and reconnect to the remote

5) Don't interfere when it reconnects. Examples will pass, but at the very end of the suite, when exiting, this is raised:

<S_CODE_TOKEN>

The code snippet added to spec_helper.rb was meant to recover from a Grid disconnection, but the exception becomes unavoidable when Capybara tries to exit.

I intend to add a rescue within the driver.quit method to account for Selenium::WebDriver::Error::UnknownError, similar to https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/driver.rb#L243
",dylanlive,2016-10-18 20:09:04
1773,2016-10-13 03:06:29,"I'm reticent to add a rescue for UnknownError here since it could potentially hide real issues-- it would be much better is selenium actually responded with a specific error when communication has died.  For your use case you could just do something along the lines of

<S_CODE_TOKEN>

Additionally - fully emptying the session pool is a bad idea if you are or ever start to use multiple sessions at once - you'd be much better off just removing the current session from the session pool.  That being said with the above patch you shouldn't need to touch the session pool at all, just call #quit on the current session and then it should automatically reconnect during retry.
",twalpole,2016-10-18 20:09:04
1773,2016-10-18 20:09:04,"c64ca0f3cd26a57b20b72f71297a4e5f92cb7715  Should catch the error generated when the remote browser died.  I'm cautious about swallowing other errors that may hide issues the user should be fixing.  If there are more needing to be caught in custom situations you can easily prepend a module to swallow those errors too.
",twalpole,2016-10-18 20:09:04
1772,2016-10-10 21:46:04,"This defines the return type for node actions not otherwise defined as being the element being interacted with.  This allows for chaining some actions on elements, or checking their state, etc.

<S_CODE_TOKEN>
",twalpole,2016-10-11 16:08:25
1772,2016-10-11 16:08:21,"The return types of these methods were undefined before do defining them in a minor version release should be fine.
",twalpole,2016-10-11 16:08:25
1771,2016-10-08 00:25:19,"Update Travis to use /dev/urandom when installing JRuby to work around the lack of entropy in /dev/random.

Change how app exceptions are raised from tests so the cause is properly set in JRuby

Disable Capybara::Result element evaluation optimization when using JRuby due to a bug in lazy enumerator evaluation - https://github.com/jruby/jruby/issues/4212
",twalpole,2016-10-08 00:53:00
1770,2016-10-05 22:17:26,"Allow to keep expression filter definitions more modular by allowing declaration outside of the main selector expression - work in progress
",twalpole,
1769,2016-10-04 19:14:46,"Generally prefer the ruby 1.9 hash format over hashrocket
",twalpole,2016-10-05 16:22:03
1768,2016-10-03 10:01:33,"**Note:** This is for issues with Capybara.  If you have a howto type question, please ask on the mailing list as requested in the README: http://groups.google.com/group/ruby-capybara
## Meta

Capybara Version: 2.7.1

<!-- 2.8.1? -->

Driver Information (and browser if relevant): selenium-webdriver 2.53.4

<!-- selenium-webdriver 2.53.4 with Firefox 47.0.1? capybara-webkit? Poltergeist? -->
## Expected Behavior

mtch = find_all('#my_calendar td.day', text: '3', match: :prefer_exact)
mtch.count == 1
mtch.first.text == '3'
## Actual Behavior

mtch = find_all('#my_calendar td.day', text: '3', match: :prefer_exact)
mtch.count == 7
mtch.first.text == '30'
mtch.second.text == '23'
mtch.third.text == '3'
## Steps to reproduce

Use above mentioned script to find an element, make sure that you have your matching string as a substring in same xpath but at different location.
",om-nishu-trantor,2016-10-03 16:01:10
1768,2016-10-03 16:01:10,":prefer_exact affects the behavior of finders through the :exact option, which as explained [here](https://github.com/jnicklas/capybara#exactness) only affects XPath#is expressions (which are used in most of Capybaras built-in specialized selectors when looking for things like label contents).  It does not affect the :text option which can be passed to finders.  match :prefer_exact also doesn't have any effect on find_all/all queries since by using #all you're implying you want more than one result.  Where prefer_exact would make a difference would be in something like

<S_CODE_TOKEN>

This uses the :fillable_field selector which will look at the label content of elements to find the desired element.  It will match an element with text of 'Password' if it exists, and if not it would match 'Your Password Here'.

If you do want exact matching for the :text option you need to pass a regex

<S_CODE_TOKEN>
",twalpole,2016-10-03 16:01:10
1768,2016-10-04 07:02:16,":+1:  It works.
",om-nishu-trantor,2016-10-03 16:01:10
1767,2016-10-03 01:33:39,"This allows for a selector to have a default visibility setting.  This means a custom selector written to find input elements of type = ""hidden"" won't need to specify visible: false in the options every time it's used when it would only ever make sense to use the selector if visible: false/:all/:hidden was specified.

<S_CODE_TOKEN>

without the visibility setting this would have to be used like

<S_CODE_TOKEN>

with the setting it can just be

<S_CODE_TOKEN>
",twalpole,2016-10-03 20:31:43
1766,2016-09-30 15:09:40,"According to #1755 in 2.9.x we are going to be able to do:

`expect(page).to have_field(class: 'xxx', with: 'value')`

It's not working for me,

<S_CODE_TOKEN>

The complete example,

<S_CODE_TOKEN>

Poltergeist 1.10.0 / Phantomjs 2.1.1
",vizcay,2016-09-30 16:29:17
1766,2016-09-30 15:19:03,"Unfortunately I may have mispoken in #1755 - and the ability to do it exactly like that may not be there until 2.10 (I have to read what I put in the release announcement and determine whether it can be released as a ""bug"" fix or whether its a ""new"" feature).  For now you should be able to do

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

or use the master branch - 9e581b0802d199a957e24c05120e4286c9f36ebd is the commit that allows it without the nil
",twalpole,2016-09-30 16:29:17
1766,2016-09-30 15:30:22,"Ok I will stick to, 

`expect(page).to have_selector(:field, class: 'xxx', with: 'value')`

that is working meanwhile.

Thanks
",vizcay,2016-09-30 16:29:17
1766,2016-09-30 15:43:55,"@twalpole also I found this but not sure if it's a bug or not supported (hidden field):

<S_CODE_TOKEN>
",vizcay,2016-09-30 16:29:17
1766,2016-09-30 16:29:17,"@vizcay  The :field selector - https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb#L53 - is specifically defined not to include fields of type 'hidden'.  To test for that you'd need to do something like

<S_CODE_TOKEN>

or if you're doing it a lot, create your own custom selector

<S_CODE_TOKEN>

which you could then use as 

<S_CODE_TOKEN>

The need to pass 'visible: false' to that is unfortunate so I should probably implement a way for selectors to override the default visibility setting in a future release
",twalpole,2016-09-30 16:29:17
1766,2016-09-30 17:10:46,"@twalpole yes but usually I'm checking the value of a field:

`expect(page).to have_css('input[type=""hidden""][value=""xxx""].retencion_ganancias_destroy', visible: false)`

that looks like too much.. so I will explore the custom selector route.. this will be ideal:

`page.has_selector?(:hidden_field, class: 'retencion_ganancias_destroy', with: 'xxx')`

Thanks
",vizcay,2016-09-30 16:29:17
1766,2016-09-30 17:59:20,"@vizcay to  add value checking to the custom selector, just add a 'with' filter (or import it from the field filter set)

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>
",twalpole,2016-09-30 16:29:17
1766,2016-09-30 18:06:16,"@vizcay Just as a note -- the reason to implement the :with filter through a filter rather than through the xpath/css expression (like the :name expression filter in the example above) is that you usually want to be testing the current value property whereas the xpath/css query would test the attribute as it was set when the page loaded.
",twalpole,2016-09-30 16:29:17
1765,2016-09-30 03:31:10,"As with links, button elements may consistent entirely of an image. In such cases, one may identify the button using the value of the descendant image's alt attribute (as a screen reader would).
",elliterate,2016-09-30 18:07:12
1765,2016-09-30 04:42:56,"@elliterate you need to use different text for your added button so it doesn't cause ambiguous issues with the other tests. Other than that this looks good.
",twalpole,2016-09-30 18:07:12
1765,2016-09-30 18:07:09,"Thanks!
",twalpole,2016-09-30 18:07:12
1764,2016-09-28 20:54:50,,twalpole,2016-09-29 16:07:55
1763,2016-09-26 17:27:12,"Allow to pass a block that will be used to filter results once all other filters have passed.
",twalpole,2016-10-03 00:58:28
1763,2016-09-26 21:35:08,"Out of curiosity - why did you decide that it would be better to leave a warning rather than implement the same behaviour for `has_css?`, etc.?
",abotalov,2016-10-03 00:58:28
1763,2016-09-29 16:26:41,"@abotalov It was an intermediate step while I thought about whether it made sense to have on all the specialized matchers/finders or only on the general versions
",twalpole,2016-10-03 00:58:28
1762,2016-09-21 19:06:23,"allow_click_label won't actually click the label if the radio button/checkbox is ""hidden"" by being shifted off the page to a negative location.  This occurs because both poltergeist and capybara-webkit (would have the issue if it supported Capybara 2.8+) both consider elements shifted off the page with negative positions to be visible whereas selenium-webdriver does not.
",twalpole,2016-09-21 23:15:18
1762,2016-09-21 23:15:18,"Fixed via 272a052f68c6079ae90940910b5da0bc197faf07
",twalpole,2016-09-21 23:15:18
1761,2016-09-14 16:29:19,"I have a test in which I select an option from a dropdown in a form, then click the submit button. I noticed this test was failing (intermittently, oddly enough) and when I dug deeper, I discovered the reason:

Selecting an option from a dropdown will cause that dropdown to remain open. This means that the following click does not actually submit the form, but merely serves to lose focus from the dropdown.

I was able to solve this in my test by explicitly blurring from the select: `page.execute_script(""$('#my_select').blur()"")` but I feel that this should not be necessary. Selecting with capybara should work as it does in real world usage, and close the dropdown after a selection is made.
",phillipspc,2016-09-19 19:29:02
1761,2016-09-14 17:02:55,"What driver are you using? Is this a normal select where you're calling `select('something', from: 'something else')`, or is it a select replacement widget?  Are there change event listeners on the select that could be causing this? Show some code that's having the issue.
",twalpole,2016-09-19 19:29:02
1761,2016-09-15 14:06:07,"Hi @twalpole 
I'm using Selenium as the driver. The failing test code looks like this:

<S_CODE_TOKEN>

and passes when I add `page.execute_script(""$('#scheduled_report_hour_of_day_to_send').blur()"")` before the assertion. Really nothing noteworthy about the HTML this tests...

There should be no conflicting listeners on the select. If this is not the standard/expected behavior from capybara (leaving the dropdown open), then I'll just live with this fix for now. I created this issue under the assumption that it was.
",phillipspc,2016-09-19 19:29:02
1761,2016-09-15 16:35:45,"@phillipspc That is definitely not the expected behavior since selecting the option clicks on the option it should behave just like with a user.  I'm actually a little surprised that your tests work at all since `click_button` occurs asynchronously (doesn't wait for the click to submit a request, etc) so I would expect assert_difference to routinely fail - unless you're doing something like sharing a database connection between the threads from a connection pool (mutex protected) which could then pause whichever thread doesn't get the connection first and would lead to intermittent failures.  For robustness your test really should be something like the following to make sure the action has actually completed before checking for the updated count

<S_CODE_TOKEN>
",twalpole,2016-09-19 19:29:02
1761,2016-09-15 21:21:00,"@phillipspc Also, what browser are you using with Selenium?
",twalpole,2016-09-19 19:29:02
1761,2016-09-19 16:56:11,"@twalpole using firefox with selenium
",phillipspc,2016-09-19 19:29:02
1761,2016-09-19 17:10:11,"@phillipspc Without a reproducible example I don't think there's much we can do here. We have a number of tests -  like https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/select_spec.rb#L43 - that are run against selenium w/firefox (and chrome) which select items and then click buttons and they pass every time.
",twalpole,2016-09-19 19:29:02
1761,2016-09-19 19:29:01,"@twalpole thats fine. thanks for taking a look. We're also on an older version, so that may be a factor.
",phillipspc,2016-09-19 19:29:02
1760,2016-09-13 18:10:36,"Add Node#matches_xpath?/matches_css? sugar for matches_selector?
",twalpole,2016-09-13 20:35:55
1759,2016-09-13 18:03:49,"@jferris @mhoran @jonleighton @route  FYI: I plan to do a Capybara 2.9.0 release end of this week/beginning of next - There should be no changes that affect drivers.
",twalpole,2016-09-19 21:54:56
1759,2016-09-14 01:02:34,"Thanks for the heads up! Unfortunately we're still struggling with our TravisCI configuration, but it does look like progress is being made on moving capybara-webkit over to Circle. That should get us unblocked in catching up on the 2.8 release, and it sounds like there should be no issues with 2.9.
",mhoran,2016-09-19 21:54:56
1759,2016-09-19 21:54:56,"released
",twalpole,2016-09-19 21:54:56
1758,2016-09-13 06:05:21,"I have a strange failure with the default driver, but only on CircleCI, not on my vagrant dev box running Ubuntu.  The failure is that an assertion of a class being on the body tag does not work:

<S_CODE_TOKEN>

`puts body.html` clearly indicates the class is present.  Also changing the driver to `:webkit` makes it pass.  

I realize this is probably not enough to analyze the problem, but I'm not sure what the next step is to debug this problem.  Or maybe it rings a lucky bell and you could point me in the right direction?

This is using capybara 2.7.1, capybara-webkit 1.11.1, rails 4.0.13, nokogiri 1.5.11.
",gtd,2016-09-13 06:33:37
1758,2016-09-13 06:29:09,"Nokogiri 1.5.11 is 3 years old and had tons of issues in parsing and processing xml.  Since that's what Capybara uses to find elements when using the rack-test driver I would first try updating to a newer version of nokogiri.  If that doesn't fix it you might want to try asking on the mailing list.  You should also get used to using `assert_selector('body.splash')` rather than `assert has_selector?('body.splash')` since the error message should be more helpful
",twalpole,2016-09-13 06:33:37
1758,2016-09-13 06:33:37,"Yeah I had to do a bit of work to update other dependencies to get nokogiri updated, but it is indeed fixed in 1.6.8.  Thanks for the quick response.
",gtd,2016-09-13 06:33:37
1757,2016-09-13 01:58:05,"MIME::Types.type_for('xxx.csv') returns an obsolete type first, which is not how the docs describe - http://www.rubydoc.info/gems/mime-types/MIME/Types#type_for-instance_method .  According to the docs they should be in priority order with non-obsolete types before obsolete types.  This works around that issue.  - Issue #1756
",twalpole,2016-09-13 05:14:57
1756,2016-09-13 00:21:41,"I'm attaching a file to a file field like ths:

`attach_file('Csv', Rails.root.join('test', 'fixtures', 'push_notifications_valid_upload.csv'))`

If I debugger in the controller, I see this

<S_CODE_TOKEN>

If I attach the same file in a browser and submit, the content type is ""text/csv"" - so it seems that the test suite is incorrect.  Is this a bug?  Configuration problem?  Is there a way to stub the content type to the correct value?

Thanks!

Additional info I found:
""text/comma-separated-value"" exists but appears to be flagged as obsolute here:
https://github.com/mime-types/mime-types-data/blob/master/types/text.yaml#L38-L45
",ghost,2016-09-13 05:15:20
1756,2016-09-13 01:31:17,"I assume you're using the rack-test driver?  The mime-types gem is used to select the first mime-type that matches the given filename.  According to the docs http://www.rubydoc.info/gems/mime-types/MIME/Types#type_for-class_method they should be sorted with non-obsolete before obsolete, however from your report it would appear that is not happening.  What version of mime-types are you suing?
",twalpole,2016-09-13 05:15:20
1756,2016-09-13 01:33:10,"2.99.2
I also tried bumping to 3.1 and that didn't help.
",ghost,2016-09-13 05:15:20
1756,2016-09-13 01:39:51,"Seems like mime-types sorting is fully broken then
",twalpole,2016-09-13 05:15:20
1756,2016-09-13 01:58:51,"@josh-m-sharpe Please try the mime_types_broken branch and see if that fixes the issue for you.
",twalpole,2016-09-13 05:15:20
1756,2016-09-13 02:16:13,"Yep - that branch looks good!
",ghost,2016-09-13 05:15:20
1756,2016-09-13 05:15:20,"Fixed in master
",twalpole,2016-09-13 05:15:20
1755,2016-09-12 00:06:36,"Hi, I've been using capybara for quite a time and always struggle with the situtation to check for fields (inputs) values changed after ajax or js given the case that they don't have a reliable name, id or label to match them.

I develop accounting applications where is quite common to have _tables_ of things were records are added dinamically via JS. Given that:
- the inputs can't have a predefined id because they arent unique
- the name of the input is not known in the test, because they are added dinamically with a PLACEHOLDER inside that is dinamically replaced with Date().getTime() (so there aren't collisions)
- because they are inside tables, they don't have a label to match

Let's say for example I have this kind of test,

<S_CODE_TOKEN>

In the last line we get intermitent results of course because it doesn't waits for js to finish (this is simple enought and it will, but you get the point). Now,

`expect(page).to have_field('.subtotal', with: '125.00')`

doesn't works because it only locates by id, label or name. Also,

`expect(page).to have_css('input.subtotal[value=""125.00""]')`

won't work because the attribute is not the current value of the DOM.

So what I am missing here? What's the 'standard' way to write this kind of tests to wait for js?

Thanks, great piece of software by the way = )
",vizcay,2016-09-12 00:47:44
1755,2016-09-12 00:47:44,"Assuming you're using a recent version of you could just do 

<S_CODE_TOKEN>

assuming you're not going to have random other inputs in that row that would have values of 125.00.  If you really want to verify it's the one with class of .subtotal you could do something like

<S_CODE_TOKEN>

which will retry for the value to change.  

If you're using the master branch you can just do

<S_CODE_TOKEN>

In the future please ask howto question in the mailing list as requested in the README
",twalpole,2016-09-12 00:47:44
1755,2016-09-13 14:31:21,"@twalpole:

Great, I think that 

`expect(page).to have_field(class: 'subtotal', with: '125.00')`

is by far the best syntax.. that will be on 2.8.2 ?
",vizcay,2016-09-12 00:47:44
1755,2016-09-13 14:53:52,"@vizcay  It's a new feature so it will be in 2.9.0
",twalpole,2016-09-12 00:47:44
1754,2016-09-10 18:53:45,"This adds custom yard handlers, tags, and templates to support documenting the built-in  selectors
",twalpole,2016-09-13 18:08:20
1753,2016-09-09 13:56:10,"my app has many tables, so the truncation strategy is taking longer and longer to execute. with close to 800 cucumber scenarios. that's a lot of DB cleaning happening in between. for often a few rows.

so I am told the transaction strategy should be much faster.

but most of my cucumber scenarios are tagged `@javascript` which spawn a different thread and so I am using a connection pool, hack that I found https://gist.github.com/mperham/3049152

Here is the patch to my application that I am using

https://gist.github.com/mathieujobin/024209d11f7613d969680b37c41ceeb4

But I am getting this error for every scenarios

`Mysql2::Error: SAVEPOINT active_record_1 does not exist: ROLLBACK TO SAVEPOINT active_record_1 (ActiveRecord::StatementInvalid)`

Although I have this option disabled as well

`Cucumber::Rails::World.use_transactional_fixtures = false`

any hints? anything Capybara could do to make this easier?
",mathieujobin,2016-09-09 14:38:39
1753,2016-09-09 14:38:39,"Capybara specifically recommends using the truncation or deletion strategy when running JS tests due to the number of potential issues that trying to share a db connection can cause, and we can't provide help if you're choosing not to take that advice.  Additionally there is a potential issue of after_commit callbacks not being run when using transaction mode.   

In the future please ask howto questions on the mailing list as requested in the README
",twalpole,2016-09-09 14:38:39
1753,2016-09-09 15:15:50,"thank you ! 
",mathieujobin,2016-09-09 14:38:39
1752,2016-09-07 19:13:45,"This allows for a :class option to passed to many selectors for filtering
",twalpole,2016-09-08 04:45:02
1751,2016-09-06 11:06:17,"It was not obvious at all where to get them. Mozilla.com forces the latest version upon users.
",vassilevsky,2016-09-06 16:51:19
1751,2016-09-06 16:51:27,"thanks
",twalpole,2016-09-06 16:51:19
1750,2016-09-02 16:14:55,,khasinski,2016-09-03 18:09:48
1750,2016-09-03 18:09:44,"Thanks!
",twalpole,2016-09-03 18:09:48
1749,2016-09-01 18:57:58,,twalpole,2016-09-01 18:58:48
1748,2016-08-30 18:40:02,"Move some helper methods into BaseQuery - the helpers are marked as api private so should be ok to move in a minor version release
",twalpole,2016-08-31 20:30:39
1747,2016-08-30 17:22:13,,twalpole,2016-08-31 16:55:19
1746,2016-08-26 09:25:51,"I try couple way but just not working. 

<S_CODE_TOKEN>

all of these not working

<S_CODE_TOKEN>

Full RSpec:

<S_CODE_TOKEN>

Google Search Result about ""Capybara placeholder"" are all from 2013 or before.

After I read document I still don't know how..
http://www.rubydoc.info/github/jnicklas/capybara/master/Capybara/Node/Actions#fill_in-instance_method

Maybe you guys can put some example here? 
https://github.com/jnicklas/capybara#interacting-with-forms

:ice_cream: : 
Thank you
",1c7,2016-08-26 10:57:23
1746,2016-08-26 10:37:32,"What do you mean by ""not working""? Do you get an error, does it just not fill in, etc?  What driver are you using?  What version of Capybara are you using?
",twalpole,2016-08-26 10:57:23
1746,2016-08-26 10:57:23,"@twalpole 
Thank for reply!, 
Sorry for incomplete information.
Problem already solved, I just give up on using placeholder, Just use the ID of the <input> element

<S_CODE_TOKEN>

This work for me

one of my html

<S_CODE_TOKEN>

Thanks again
have a nice day :D
",1c7,2016-08-26 10:57:23
1746,2016-08-26 11:24:32,"Ok

<S_CODE_TOKEN>

should have worked too
",twalpole,2016-08-26 10:57:23
1745,2016-08-24 21:11:49,"The :exact option only has an effect when used with selector expressions built using XPath#is - warn when used with CSS expressions or XPath strings.  Additionally, stop resolving results twice when using :smart or :prefer_exact match mode and the selector would have no difference between exact and not exact.
",twalpole,2016-08-25 17:03:20
1744,2016-08-23 00:50:09,"The current statement in the README is technically incorrect.

This is the code that should work to use Selenium 3.0 with the legacy Firefox driver.

<S_CODE_TOKEN>

If this PR is too wordy, maybe the information and above code could be put somewhere else and referenced by link in the README.
",titusfortner,2016-10-18 14:58:22
1744,2016-08-23 01:53:12,"While this is technically correct - Firefox 48 with selenium-webdriver 2.53.4 and marionette: true is basically unusable with Capybara due to multiple missing/broken features, and selenium-webdriver 3 beta w/ FF 47.0.1 and the legacy driver adds no benefit. Rather than deal with all the bug reports that will get filed we are going to stick with the current statement.  Once selenium-webdriver 3 releases we'll consider merging this in with a caveat depending on what functionality works/can be made to work at that point.
",twalpole,2016-10-18 14:58:22
1744,2016-08-23 02:50:49,"> selenium-webdriver 3 beta w/ FF 47.0.1 and the legacy driver adds no benefit

Except that it does provide benefit because things have been updated that are not backported to 2.x. But I get your point that it is beta and that you don't want to confuse people unnecessarily.

I would still urge:
1. Recommending ESR which doesn't auto-update and will get security patches rather than 47.0.1. This is what big companies like Salesforce are doing.
2. Adjusting the wording so it doesn't sound like it is Se 3 that is feature incomplete. :)
   ""...selenium-webdriver 3 which currently has multiple issues and is feature incomplete""
",titusfortner,2016-10-18 14:58:22
1744,2016-08-23 04:36:27,"@titusfortner Unless I missed a recent commit, Selenium 3 (selenium-webdriver 3.x) is currently feature incomplete (when used with marionette) -  There is no way to request the current value or any other property of a Selenium::WebDriver::Element -  In Selenium 2.x requesting the value of an ""attribute"" of a Selenium::WebDriver::Element would give you the property if it existed and was a simple type (and boolean attributes were converted to true/false) otherwise it returned the attribute value.  In Selenium 3 all we have access to on Selenium::WebDriver::Element are attribute values - that makes it unusable with Capybara for any sort of dynamic page.
",twalpole,2016-10-18 14:58:22
1744,2016-08-23 05:00:07,"You are conflating everything upstream of Capybara as ""Selenium"" which is inaccurate. Selenium is the code that gets sent to binary executables, and those executables are somewhat inconsistent in the results they provide (pretty much all of them except for chromedriver & IEDriver at this point). Selenium itself is not feature incomplete, and as far as Ruby is concerned there are minimal functional differences between 2.x and 3.x except for what is the default firefox driver. There is nothing to ""fix"" in the Selenium code; it is up to the browser vendors to improve their products at this point, which they are actively doing.

Yes, I have a dozen or so bugs filed for Marionette, and you've already discussed the 3 most important ones - Actions Classes, Select Lists and Attribute Values, and I agree geckodriver won't be very usable without all 3 of these being addressed.
",titusfortner,2016-10-18 14:58:22
1744,2016-08-23 05:28:47,"@titusfortner I'm not conflating everything as Selenium, I fully understand the lines between them  and I'm up to date on the spec changes going on in Webdriver.  W3CBridge provides an #element_value method which I don't believe is exposed through Selenium::WebDriver::Element (implemented via the W3C getProperty API which geckodriver supports) but would solve the value issue  - and I believe I saw commits in other parts of selenium (non-ruby)  recently implement shims to emulate the 2.x behavior using the W3C getAttribute and getProperty methods which geckodriver has implemeted.  It would seem to me it's  currently selenium-webdriver that is deficient on that functionality?
",twalpole,2016-10-18 14:58:22
1744,2016-08-23 10:19:59,"Ah yes, sorry; sure enough the Ruby bindings were behind. That's been fixed in master. Thanks.

For now everything is still going through the `Element#attribute` method, so it should be all backwards compatible. I'll take a look at the #element_value method, I have no idea why that one was never exposed in the Element class.
",titusfortner,2016-10-18 14:58:22
1744,2016-08-31 23:52:31,"@titusfortner Is a nightly build of the selenium-webdriver gem generated anywhere that can be downloaded for our automated tests?  I was using it directly from the selenium github repo but since the switch to using the atom for getAttribute that's no longer possible.  I would like to be able to notify remove the disclaimer as soon as our tests pass with it, which will hopefully be soon with the switch to using the atom for getAttribute and FF fixing the select behavior in 49
",twalpole,2016-10-18 14:58:22
1744,2016-09-01 02:52:49,"Yeah, I'm not super happy with that, either. I was hoping that once we deprecated the legacy Firefox & Safari drivers we wouldn't need to do any build process at all for the Ruby code, but I guess it makes sense that where JWP drivers use the atoms, w3c should not.

I have a local Jenkins I use to run Watir specs on Selenium master. I shallow clone Selenium and run: 

`./go //rb:gem:build`

Then set in the gemfile:

`gem 'selenium-webdriver', :path => '../selenium/build/rb'`
",titusfortner,2016-10-18 14:58:22
1744,2016-09-01 03:52:01,"@titusfortner Thanks - I'll give something like that a try - on a side note I'm slightly shocked by the size of the atom produced - 37k over the wire every time the value of an ""attribute"" is requested seems a tad excessive although it does keep it down to one request.
",twalpole,2016-10-18 14:58:22
1744,2016-09-01 16:18:00,"Huh, that's interesting. The one that we've had stored in the Watir project for years is only 4k. There might be a compile issue, I'll check with Simon & Jason.
",titusfortner,2016-10-18 14:58:22
1744,2016-09-01 19:13:04,"@titusfortner Ok - building the current selenium-webdriver and testing with FF 49 gets Capybara down to 13 test failures - mostly sending keys to prompt modals (keySequence.join is not a function), missing mouse move action, sending ""special"" keys (:space & :backspace - ignored, shifted keys - the shift is not released when sent as an array of multiple key combos), and extra key events with code of 0 being generated) that all used to work correctly.  The missing actions are definitely a geckodriver issue and I'm guessing the key issues probably are too.  
",twalpole,2016-10-18 14:58:22
1744,2016-09-01 20:22:46,"@titusfortner Actually it appears the shifted keys issue is a selenium-webdriver issue.  [Current versions](https://www.w3.org/TR/webdriver/#element-send-keys) of the webdriver spec appear to have removed the NULL resetting key modifiers that used to be in the  [spec](https://www.w3.org/TR/2015/WD-webdriver-20150803/#sendkeys) .  It would appear selenium-webdriver needs to either stop accepting accepting nested arrays  ( send_keys([:shift, 'a'], ""bcdef"")  used to produce Abcdef ) or split out any such passed arrays and send them to w3c compliant drivers as separate sendKeys calls - https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/common/keys.rb#L114

Of course I think either way of fixing this will break the ability to send something like  [:ctrl, a], :backspace, 'abcd'  to select everything in a field, clear it, and then type new contents,  since calling separately to send_keys will change the selection and reset the insertion caret - so maybe the current webdriver spec is deficient

create selenium issue - https://github.com/SeleniumHQ/selenium/issues/2704
",twalpole,2016-10-18 14:58:22
1744,2016-09-01 21:58:35,"@twalpole - 3.0.0.beta3 is now released with the latest updates
Simon suggested he'd follow up on this tomorrow as far as what the w3c spec should do for the send keys.

Speaking of Capybara tests. How do I run a single selenium test, I couldn't find documentation on it? I miss the ability to right click in Rubymine and run a single spec. :)
",titusfortner,2016-10-18 14:58:22
1744,2016-09-02 00:14:32,"@titusfortner Because of the way most of Capybaras tests are included in the project so the other driver authors can run them against their own drivers the easiest way to run a single test is to tag it and then use the -t flag with rspec

<S_CODE_TOKEN>

since you probably want to be running against marionette something like below should work

<S_CODE_TOKEN>
",twalpole,2016-10-18 14:58:22
1744,2016-09-02 00:29:32,"@twalpole, Thanks! Yeah the Watir project currently uses a submodule for running watirspecs with different projects. Submodules are kind of a pain, though, so we are considering the option of something similar to what Capybara does. It seems to be substituting one type of pain for another, though. :)
",titusfortner,2016-10-18 14:58:22
1744,2016-09-04 19:49:18,"@twalpole - fwiw, getAttribute is down to 7KB in beta3.1 :)
",titusfortner,2016-10-18 14:58:22
1744,2016-09-05 20:59:52,"@titusfortner that's much better :)
",twalpole,2016-10-18 14:58:22
1744,2016-10-18 14:58:22,"Closing in favor of the updated message that's now in the README
",twalpole,2016-10-18 14:58:22
1743,2016-08-22 06:44:58,"run capybara test for index action, it will be passed even if ajax call returns 500. Is it possible to fail test for such cases?

<S_CODE_TOKEN>
",solutus,2016-08-22 07:02:15
1743,2016-08-22 07:02:15,"Ask howto questions on the mailing list as requested in the readme
",twalpole,2016-08-22 07:02:15
1742,2016-08-19 02:56:50,,sanemat,2016-08-19 16:58:20
1742,2016-08-19 16:58:25,"Thanks!
",twalpole,2016-08-19 16:58:20
1741,2016-08-18 20:36:23,"This allows for options to be passed through to the xpath/css expression builders so that filtering can be done in the original xpath/css rather than requiring more communications with the browser when possible.  It also implements the :id, :name, :placeholder filters using this feature.
",twalpole,2016-08-29 19:27:00
1740,2016-08-18 17:06:18,"Fix issue with error message when expected text is missing but contains regex special characters
",twalpole,2016-08-18 17:39:06
1739,2016-08-18 02:54:02,"When the text as invalid Regexp is given to `#have_text`, it raises the following error:

<S_CODE_TOKEN>

We expect an error `Capybara::ExpectationNotMet`, not a `RegexpError`.
",tricknotes,2016-08-18 17:07:53
1739,2016-08-18 05:15:10,"Good catch - I'll look at this/merge in tomorrow - thanks
",twalpole,2016-08-18 17:07:53
1739,2016-08-18 17:07:53,"Pulled into PR #1740  - will merge when tests pass - closing this PR
",twalpole,2016-08-18 17:07:53
1738,2016-08-11 08:07:55,"If the test cases were executed on selenium grid, there is no need to check the file locally as all test will be executed on remote. I'd suggest to provide a new option 'check', then user can choose if check file existence or not before setting path.
",jinyulin,2016-08-11 17:39:16
1738,2016-08-11 17:39:16,"When using with selenium grid and attach_file you should be setting the file_detector in your driver settings - https://github.com/SeleniumHQ/selenium/blob/a81b559fe727c3ab4b5810bcc64da7182579c7a5/rb/lib/selenium/webdriver/common/driver_extensions/uploads_files.rb#L52 - so that the test files are kept with your tests and uploaded to the test instances as needed.  If you really don't want to do that and don't want file existence to be checked you can just find the file input and call #set on it directly

<S_CODE_TOKEN>
",twalpole,2016-08-11 17:39:16
1737,2016-08-10 19:12:31,,CGA1123,2016-08-10 21:48:53
1736,2016-08-09 18:57:15,"I have a new-ish rails5 app which I'm trying to test with the latest version capybara and rspec.

I have a test with two expectations. When both expectations are run, the second test always fails. When only one is run (regardless of each one, it passes as expected). After switching to chromedriver, I see that after the first test the browser navigates to about:blank, and the commands from the second are never executed. I can call `binding.pry` before any capybara commands in the second test, and no `visit` commands I execute are reflected in the Chrome window.

rails_helper.rb

<S_CODE_TOKEN>

Failing test

<S_CODE_TOKEN>

What am I doing wrong here?
",danielwestendorf,2016-08-09 19:23:40
1736,2016-08-09 19:23:40,"Please ask howto questions on how he mailing list as requested in the README
",twalpole,2016-08-09 19:23:40
1736,2016-08-09 19:27:56,"This seems more like a bug to me, but I'll ask there, thanks.
",danielwestendorf,2016-08-09 19:23:40
1736,2016-08-09 19:51:53,"@danielwestendorf   It's such a simple use case it's way more likely to be a configuration issue on your end than a bug in Capybara.
",twalpole,2016-08-09 19:23:40
1736,2016-08-09 19:57:35,"It totally was, thanks!
",danielwestendorf,2016-08-09 19:23:40
1735,2016-08-08 09:13:22,"I didn't have this error before upgrade (rails 4.2), but once I upgraded to rails 5.0.0, I got this error.

NoMethodError: undefined method `click' for nil:NilClass

I know that the HTML doesn't have the DOM element that is being clicked but I don't know why this error is now showing?
",salmagomaa,2016-08-08 19:11:32
1735,2016-08-08 19:11:32,"Without you providing the code causing the error there is nothing we can say. I will reopen if you provide enough info for us to troubleshoot or you can ask for help on the mailing list as mentioned in the README.
",twalpole,2016-08-08 19:11:32
1735,2016-08-10 14:09:14,"Thanks it was my code error!
",salmagomaa,2016-08-08 19:11:32
1734,2016-08-05 22:37:01,"This lazily evaluates the results from `#all` when possible.  Not sure if this is a good idea or not since it potentially delays the evaluation of visibility
",twalpole,2016-08-15 22:08:10
1733,2016-08-03 21:00:17,"This idea has been [discussed before](https://github.com/jnicklas/capybara/pull/1101) but I thought I'd float a less in your face version. Something like..

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

If that still increases the size of the API more than the feature is worth it then no problem.
",thehenster,2016-08-03 22:42:20
1733,2016-08-03 22:41:44,"I think the `click_link` and `fill_in` examples seem like they would be really rare cases and probably better served by just scoping to a region of the page.  Most cases of the `find` example are probably better served by doing something along the lines of `find(""div.item:last-of-type"")` when possible which then doesn't have the downsides of #all/#first
",twalpole,2016-08-03 22:42:20
1732,2016-08-03 20:19:47,"This adds support for matching on the aria-label attribute when finding fields/links/buttons (as requested in Issue #1528).  Support for the aria-labelledby attribute is not provided.  It is easy enough to add for the case where aria-labelledby is a single value ( something like `XPath.attr(:'aria-labelledby').equals(XPath.anywhere()[XPath.string.n.is(locator)].attr(:id))` ), however aria-labelledby is specified to be a space separated list of ids which I don't believe is possible to match against in a single XPath statement (XPath 1.0 anyway)
",twalpole,2016-08-15 18:33:12
1731,2016-08-03 17:26:09,"Hi

I am trying to set up a test suite for a new Rails 5 app. I am getting
   `ArgumentError: rack-test requires a rack application, but none was given`
Happy to give more information on my set up to get some help please.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

As a side note I also tried with webkit driver in the configure block but got another error:

<S_CODE_TOKEN>
",cwyn,2016-08-03 18:34:40
1731,2016-08-03 18:34:40,"Please ask howto questions on the mailing list as requested in the README
",twalpole,2016-08-03 18:34:40
1730,2016-07-29 21:51:26,"Hi,

I have noticed that the RSpec matchers for asserting :count, :minimum, :maximum on an element return a purely boolean response but I imagine most folks would benefit from seeing what the found count was in relation to the expectation.

Current: 

<S_CODE_TOKEN>

Proposed:

<S_CODE_TOKEN>

The proposed is based on what RSpec currently returns for its [Comparison Matchers](https://www.relishapp.com/rspec/rspec-expectations/v/3-5/docs/built-in-matchers/comparison-matchers)

Thoughts? 
",tk8817,2016-07-29 22:56:00
1730,2016-07-29 22:44:48,"Capybaras matchers do provide the counts - #<Capybara::ExpectationNotMet: expected to find css ""h1, p"" 5 times, found 4 matches: ... -, but has_validation_errors? isn't provided by Capybara, so I have no idea what matcher that actually is. What library provides it, and how are you calling it?
",twalpole,2016-07-29 22:56:00
1730,2016-07-29 22:56:00,"From the error message I would guess you're calling something like

   expect(page.has_validation_messages?(count: 1)).to be true

If so that will never have a better error message, since you're calling a boolean method with RSpecs built-in comparison matcher.  When using capybaras matchers you would do something like

<S_CODE_TOKEN>

which would give the nice error message with count details, if on the other hand you did 

<S_CODE_TOKEN>

you would not get the nice details because you're only using RSpecs built in comparison matcher which has no details about the count parameter.
",twalpole,2016-07-29 22:56:00
1729,2016-07-29 03:03:48,"Any type of edit path edit_posts.. etc and even visit('/posts/1/edit') both return an error:
No Path matches ""http:/127.0.0.1:3000/posts/1/MyText""
With MyText being the value I have in a fixture file map_layers.yml in the field layer_url.
Changing the fixture text to edit fixes the issue. Seems strange however.
",Fladdermuz,2016-07-29 03:55:52
1729,2016-07-29 03:55:52,"I'm not sure what this has to do with Capybara, sounds like you're redirecting requests and are shadowing one of your url helpers with a local attribute.  Capybara doesn't overwrite any route helpers, or have anything to do with them.
",twalpole,2016-07-29 03:55:52
1729,2016-07-29 03:58:45,"No and no. Just started after installing the Gem. Probably something else then.
",Fladdermuz,2016-07-29 03:55:52
1728,2016-07-28 10:04:12,"I have come across several use cases where the field value is not completely predictable, but always follows a pattern.  It would be nice to be able to match the field value using a regular expression.

Please let me know how to improve this PR in any way.

I could not find any direct documentation of the field selector options.  Let me know if there is documentation i should update.

This PR is based off the current master and has the same failure on travis as master.  I have expanded the tests for the new feature.
",donv,2016-08-01 21:17:51
1728,2016-07-28 17:10:55,"Documentation should be updated for the find_field, has_field?, and has_no_field? methods
",twalpole,2016-08-01 21:17:51
1728,2016-07-30 09:03:02,"@twalpole  Hi!  I updated the doc for the find_field, has_field?, and has_no_field? methods and changed the tests to use some Regexp features.
",donv,2016-08-01 21:17:51
1728,2016-08-01 20:31:19,"@twalpole Thanks for the tip.  I changed the type identifier separator to comma with a trailing space.
",donv,2016-08-01 21:17:51
1728,2016-08-01 21:18:00,"Thanks for the PR !
",twalpole,2016-08-01 21:17:51
1728,2016-08-01 21:19:27,"Thanks for merging!  😄 
",donv,2016-08-01 21:17:51
1727,2016-07-26 12:41:08,"Hi,

Is there any way I can configure the duration of wait_for_pending_requests() ? 

This is really useful when using REPL (e.g. binding.pry) for debugging, because often we need to pause the execution more than 60 seconds to inspect variables etc.

Thanks
",hgani,2016-07-26 14:26:13
1727,2016-07-26 14:26:13,"Not currently, it's hard coded at 60 seconds, https://github.com/jnicklas/capybara/blob/master/lib/capybara/server.rb#L91

PRs welcome
",twalpole,2016-07-26 14:26:13
1726,2016-07-26 09:24:28,"Is there a way to have partial matching?
E.g. I have this url:

/people?name=""John""&sort_by=name

And I want to match `name=""John""` part.
Is it possible?
",Vanuan,2016-07-26 14:23:28
1726,2016-07-26 14:23:27,"You can use a Regexp, for any further details or any other howto questions please ask on the mailing list as requested in the README
",twalpole,2016-07-26 14:23:28
1726,2016-07-26 14:34:37,"Thanks
",Vanuan,2016-07-26 14:23:28
1725,2016-07-22 17:42:11,"RSpec 3.5 added a new config.shared_context_metadata_behavior setting - http://rspec.info/blog/2016/07/rspec-3-5-has-been-released/ .  If this is set to `:apply_to_host_groups` the background/given/given! aliases will no longer be automatically included into features.  This PR fixes that issue.
",twalpole,2016-07-22 20:00:21
1724,2016-07-22 15:27:16,"Hi, 

I get the following error:

<S_CODE_TOKEN>

By copying the sample code from the README into my spec:

<S_CODE_TOKEN>
## System Info

Stack:

<S_CODE_TOKEN>

---

`rails_helper.rb`:

<S_CODE_TOKEN>

---

`spec/support/capybara.rb`:

<S_CODE_TOKEN>
",amingilani,2016-07-22 18:46:04
1724,2016-07-22 16:12:03,"Temporary fix: I got around the issue by replacing `background` with `before`, and `given` with `let`
",amingilani,2016-07-22 18:46:04
1724,2016-07-22 16:32:03,"Duplicate of Issue #1723  - @Fahrenhei7 What was your configuration mistake?
",twalpole,2016-07-22 18:46:04
1724,2016-07-22 16:38:59,"@amingilani I notice from your code sample that you are loading all files in spec/support/*_/_.rb but you list your filename as rspec/support/capybara.rb (rspec vs spec) is that just a typo?  Also, are you changing RSpecs new shared_context_metadata_behavior setting?
",twalpole,2016-07-22 18:46:04
1724,2016-07-22 18:46:01,"@twalpole sorry, that was a typo, fixed, everything is in `spec/`

And YES! I had `config.shared_context_metadata_behavior = :apply_to_host_groups` because the comment above said:

<S_CODE_TOKEN>

Changing it back fixed it!

I'm closing this issue, but can you please explain what happened? And if this will be a problem with Rspec 4 comes out?
",amingilani,2016-07-22 18:46:04
1724,2016-07-22 19:28:31,"@amingilani The way Capybara includes the aliases into the tests uses shared contexts which in previous versions of RSpec would automatically get included based on metadata. If  shared_context_metadata_behavior == :trigger_inclusion (default in 3.5) that behavior continues, however if changed to :apply_to_host_groups that behavior changes and the automatic inclusion no longer happens.  The change in behavior makes sense for RSpec since it makes the API more in line with all the other places in the API metadata is used, and I'm working on a fix for it currently which will be included in Capybara 2.8
",twalpole,2016-07-22 18:46:04
1724,2016-07-22 19:29:35,"@twalpole: Makes sense! Thank you for the explanation!
",amingilani,2016-07-22 18:46:04
1724,2016-07-22 20:05:09,"@amingilani 09138cdcd74db3b3928d67ffbbc8010f860658f2 is the fix being merged into master, if you want to give it a try
",twalpole,2016-07-22 18:46:04
1723,2016-07-19 19:12:41,"undefined method `background' for RSpec::ExampleGroups::CreateNewAchievement:Class

I got errors like this when use ""background"" and ""given"" methods in rails 5. But with methods before and let everything goes great.

Rspec version 3.5.1
Capybara version 2.7.1
",fahrenq,2016-07-20 15:49:01
1723,2016-07-19 19:59:47,"@Fahrenhei7 Show an example test that gives this this error.
",twalpole,2016-07-20 15:49:01
1723,2016-07-19 21:17:59,"<S_CODE_TOKEN>
",fahrenq,2016-07-20 15:49:01
1723,2016-07-19 23:24:22,"Are you requiring 'capybara/rspec' somewhere? After RSpec::Core::Version::STRING has been defined?
",twalpole,2016-07-20 15:49:01
1723,2016-07-20 04:57:07,"No. But I have this specs in spec/features and have
`config.infer_spec_type_from_file_location!`
in configuration of rspec.
",fahrenq,2016-07-20 15:49:01
1723,2016-07-20 05:11:47,"I tried, and even if i require 'capybara/rspec' somewhere in rails_helper, for example after 'rspec/rails' or wherever, I receive the same error.
",fahrenq,2016-07-20 15:49:01
1723,2016-07-20 05:29:31,"@Fahrenhei7 Not sure what to tell you -- `background` and `given` are aliases that are set up in rspec/capybara/features.rb which is required by capybara/rspec - https://github.com/jnicklas/capybara/blob/master/lib/capybara/rspec/features.rb#L3

There are set up via a shared_context that is applied to any test that has the metadata capybara_feature: true.  That metadata is set when you use `feature` which is defined in the same file.  I have no idea how your usage of `feature` was working without including capybara/rspec  unless you have overrides of your own.
",twalpole,2016-07-20 15:49:01
1723,2016-07-20 06:35:40,"Thanks! I finally found the issue. I missed one step in including capybara to rails app. Just got misleading, why everything from capybara worked, but the aliases. 
Thanks for your time! Sorry, for my inadvertence.
",fahrenq,2016-07-20 15:49:01
1722,2016-07-15 19:33:06,"This changes the expected frame api for drivers from `within_frame` to `switch_to_frame` accepting either the frame elment, :parent, or :top to switch to the given frame, the parent frame, or the outermost frame.   

@jferris @mhoran @jonleighton @route  Please give your thoughts?  I'd like to make this change in Capybara 2.8, however if there are reasons this couldn't be implemented relatively quickly in any drivers I may have to reconsider.  Note this only changes the driver API not the user `within_frame` API which will continue to accept index, id/name, or an element.  Once the drivers have implemented the new method we can possibly look at improving the user facing API as discussed in Issue #1365 in a future Capybara release
",twalpole,2016-07-18 18:36:43
1722,2016-07-15 19:39:40,"I don't think this should be a problem in capybara-webkit.
",jferris,2016-07-18 18:36:43
1722,2016-07-18 18:35:10,"Ok - doesn't look like it's an issue for poltergeist either - merging
",twalpole,2016-07-18 18:36:43
1721,2016-07-14 00:46:53,"@jferris @mhoran @jonleighton @route Heads up - I plan to release Capybara 2.8.0 some time next week.  The only real changes are for ease of usability Capybara will now attempt to click on the labels of checkboxes/radio-buttons if the checksbox/radio button is non-visible, and removal of the need to pass a nil to most node action when a selector is not wanted.  Currently poltergeist is passing all the 2.8.0 tests, however capybara-webkit is failing one that was added for an issue that came up.  There is already an open issue about this behavior in capybara-webkit - https://github.com/thoughtbot/capybara-webkit/issues/365
",twalpole,2016-08-16 18:51:21
1721,2016-07-14 00:49:13,"Note: This will likely be the last 2.x Capybara release, and will then be moving to drop support for ruby < 2.2 , etc 
",twalpole,2016-08-16 18:51:21
1721,2016-07-21 16:54:53,"I decided to add the new frames API for drivers to 2.8 - and it will get released next week rather than this week - PR #1722 .  Poltergeist support for it is already merged in master.
",twalpole,2016-08-16 18:51:21
1721,2016-07-26 10:53:40,"Thanks for heads up! Oh I missed frame API :)
",route,2016-08-16 18:51:21
1721,2016-07-28 17:48:34,"Barring any last minute issues - this will be released tomorrow
",twalpole,2016-08-16 18:51:21
1721,2016-07-29 00:29:54,"If @jferris doesn't get to this tomorrow, I hope to have some time over the weekend to look into it.
",mhoran,2016-08-16 18:51:21
1721,2016-07-29 01:03:03,"@mhoran Would you prefer I push a release until the beginning of next week?
",twalpole,2016-08-16 18:51:21
1721,2016-07-29 01:13:28,"If there's no rush, it'd be great to be compatible with 2.8 out the gate.
",mhoran,2016-08-16 18:51:21
1721,2016-07-29 18:47:28,"@mhoran  Okay - I'll delay until the beginning of next week - let me know if there are any issues.
",twalpole,2016-08-16 18:51:21
1721,2016-07-29 20:06:53,"@mhoran I understand Chromium is being investigated for the next development of capybara-webkit but any chance of capybara-webkit doing a release that requires Qt 5.5+ , gets rid of the font override hack, etc -- People using older versions of Qt really seem to be the major source of issues with capybara-webkit.
",twalpole,2016-08-16 18:51:21
1721,2016-07-30 13:25:06,"@twalpole we had intended to release 2.0 at some point and drop support for Qt 4.8, but had no intentions of requiring a certain Qt 5 version. Unfortunately, I think a number of users are still on Qt 5.2 (Ubuntu trusty). Debian jessie provides 5.3, and to get 5.4, Ubuntu wily is required. 5.5 is only available in Ubuntu xenial, and Debian unstable includes 5.6 (which no longer includes the QtWebKit module).

Then there are the official binary releases from the Qt Project, which we've always recommended to our users. Unfortunately, most folks don't bother using these packages.

Based on the above, I have the feeling a version lock to 5.5 would be more trouble than it's worth.
",mhoran,2016-08-16 18:51:21
1721,2016-08-01 01:28:25,"Well, I just spent my whole evening trying to get https://github.com/thoughtbot/capybara-webkit/pull/923 merged in, but it seems JRuby on Travis with Trusty is broken beyond repair. I just noticed that the Capybara `.travis.yml` allows failures on JRuby, and you're seeing the same issue.

Trusty is now required for Qt 5 tests, and I was hoping to merge in https://github.com/thoughtbot/capybara-webkit/pull/928 while I was at it, but now I've given up. Maybe fresh eyes will help me find a solution, but unfortunately I've made no progress on Capybara 2.8 compatibility.
",mhoran,2016-08-16 18:51:21
1721,2016-08-01 04:05:00,"Please feel free to file JRuby issues for failures that do not match behavior under MRI. We want to help you get it green.
",headius,2016-08-16 18:51:21
1721,2016-08-01 16:23:33,"@headius I don't think it's a JRuby issue, but rather a Travis-CI issue with JRuby configuration.  @mhoran Yeah I gave up on trying to get the JRuby travis config to work.
",twalpole,2016-08-16 18:51:21
1721,2016-08-16 18:51:21,"Released
",twalpole,2016-08-16 18:51:21
1720,2016-07-13 18:12:03,"This fixes issue #1719 by making it clearer why server errors are appearing from test code.
",twalpole,2016-07-13 19:04:39
1719,2016-07-13 17:44:23,"When a server error is raised during synchronize, the exception cause is set to the currently caught exception (ExpecationNotMet, etc) - This is potentially confusing - see http://stackoverflow.com/questions/38332619/capybara-not-waiting-on-expect
",twalpole,2016-07-13 19:05:00
1719,2016-07-13 19:05:00,"Fixed via PR #1720 
",twalpole,2016-07-13 19:05:00
1718,2016-07-03 09:57:41,"Hello,

It seems like Rack 2.0 was released few days ago, and the latest version no longer supports Ruby 1.9.3. This breaks Capybara for Ruby 1.9.3 users.

Thanks.
",amitz,2016-07-03 13:59:23
1718,2016-07-03 13:59:23,"You need to specify rack < 2.0 in your projects Gemfile - Capybara will not be limiting the version of rack it supports since that would prevent people on modern versions of ruby from using rails 5, and rack < 2 is not a dependency of Capybara.
",twalpole,2016-07-03 13:59:23
1718,2016-07-03 14:01:57,"Isn't it possible to check for the current Ruby version and pick the right depenecy in the gemspec file? I have seen it in the past on other gems. This I guess will streamline the experiance for Ruby 1.9.3 (if any left besides me? :-))
",amitz,2016-07-03 13:59:23
1718,2016-07-03 18:49:27,"@amitz  - Not in any kind of reliable supported manner -  Really bundler/gem should add a feature to not consider gems that specify a ruby version above what you're running, but as of now thats not there.  Same issue occurred with mime-types 3 -- There's nothing Capybara can do about it, and the version is not a dependency of Capybara so it shouldn't be specified as one.  It's a dependency of your projects decision to stay with 1.9.3 (which is really really out of date).
",twalpole,2016-07-03 13:59:23
1718,2016-07-03 20:16:43,"@twalpole - Fair enough. Thanks for detailed answer.
I'll state anyhow that the rack version that support Ruby 1.9.3 and should be forced in the Gemfile is ""**1.6.4**"" -(in-case someone will stumble upon this thread in the future with the same problem).

Thanks.
",amitz,2016-07-03 13:59:23
1717,2016-06-30 18:33:22,"Rack  is one of capybara dependenty, before it did not have any Ruby version requirements and could be instaled automaticly. But today a new rack gem was released (version 2.0.1). It has minimum requirement of Ruby 2.2.
This may cost a confision.
It would be good if capybara could restrict that rack up to verion 2 is used.
",kristineKronberga123,2016-06-30 19:21:11
1717,2016-06-30 19:21:10,"Doing that would prevent people who are running ruby 2.2+ from using new rack gems, and Capybara has no issues itself running with the new rack.   This should not be a restriction specified in Capybara.
",twalpole,2016-06-30 19:21:11
1716,2016-06-30 14:31:53,"I just had a play with [the request counter](https://github.com/jnicklas/capybara/commit/998350091be30fd84e102755f009304cc45e26dc) implemented in Capybara 2.7. It was interesting to me because we have had something quite similar in a test suite I work with for a while, so I thought it could be an opportunity to remove that custom code.

Our implementation looks like this (it's not CPU-threadsafe but we don't care because we're on MRI):

<S_CODE_TOKEN>

We also use [database_cleaner](https://github.com/DatabaseCleaner/database_cleaner), and a long time ago I made sure that it would hook into `RequestCounter` to block requests while running `DatabaseCleaner.clean`:

<S_CODE_TOKEN>

I ripped out all of this to try the Capybara implementation, but unfortunately I saw a database deadlock while running my test suite.

I think what happens is something like this (note I'm using the [Poltergeist](https://github.com/teampoltergeist/poltergeist) driver):
- In the `after` hook, `wait_for_pending_requests` is called, but there are _currently_ no pending requests
- Some time shortly _after_ this, my page submits an XHR request to the app. Note that Poltergeist does [release](https://github.com/teampoltergeist/poltergeist/blob/master/lib/capybara/poltergeist/client/browser.coffee#L22) the page as part of its `reset` implementation, but I suspect there is some asynchronicity here.
- In the main Ruby thread, we start running `DatabaseCleaner.clean`
- Meanwhile, in the server thread, the app starts processing the XHR request, which involves some database work
- Because of the nature of the database queries running in the two threads, the database throws a deadlock error (`PG::TRDeadlockDetected: ERROR:  deadlock detected`) and my test fails

(FWIW, yes my `DatabaseCleaner.clean` code is definitely running after Capybara's [after hook](https://github.com/jnicklas/capybara/blob/master/lib/capybara/rspec.rb#L19-L24).)

To prevent this, I think `Capybara::Server` could be modified to ignore requests which come before [the before hook](https://github.com/jnicklas/capybara/blob/master/lib/capybara/rspec.rb#L25-L31) or after [the after hook](https://github.com/jnicklas/capybara/blob/master/lib/capybara/rspec.rb#L19-L24). Thus ensuring that requests will only ever hit the Rails app while we're actually in the process of running a test.
",jonleighton,2016-06-30 14:48:24
1716,2016-06-30 14:48:24,"> (FWIW, yes my DatabaseCleaner.clean code is definitely running after Capybara's after hook.)

Sorry! I'm wrong about this :( Turns out my understanding of RSpec's ordering was wrong, as this test demonstrates:

<S_CODE_TOKEN>

Outputs:

<S_CODE_TOKEN>

I'm going to close this and try again.
",jonleighton,2016-06-30 14:48:24
1716,2016-06-30 14:56:53,"@jonleighton Great that someone else is looking at this, since we've had some people who think it's causing issues (Issue #1715) but I don't see how it could be (maybe they have order issues with the database_cleaner fater block too).  An important thing to notice is that wait_for_pending_requests is only called after the session has set the page back to about:blank so there really shouldn't be any more requests started after that.
",twalpole,2016-06-30 14:48:24
1716,2016-06-30 15:55:03,"Ok, here's what I have found out:
1. As demonstrated above, RSpec after hooks run in the _reverse_ of the order that they are defined. The last one runs first.
2. I get deadlocks and other race conditions if my `DatabaseCleaner.clean` hook runs before Capybara's reset hook.
3. Therefore, I need to define my `DatabaseCleaner.clean` hook before `capybara/rspec` is defined
4. This is actually more difficult to achieve than I first realised, because [rspec-rails actually requires `capybara/rspec`](https://github.com/rspec/rspec-rails/blob/master/lib/rspec/rails/vendor/capybara.rb), therefore I also need to make sure my `DatabaseCleaner.clean` hook is defined before I even require `rspec/rails` (so I need to require just `rspec`, then define the `DatabaseCleaner.clean` hook, then require `rspec/rails`)

So it seems to be that it is _possible_ to have a configuration which doesn't cause race conditions. However it is certainly not easy, and I wouldn't be surprised if lots of users get tripped up by these subtle issues.

(I just found RSpec's [`append_after` method](http://rspec.info/documentation/3.4/rspec-core/RSpec/Core/Configuration.html#append_after-instance_method) which looks like it'll allow me to define my `DatabaseCleaner.clean` hook after `capybara/rspec` is required, so this is an alternative way.)

I'm not sure what Capybara itself can do to mitigate this problem. Fundamentally, we want some way to ensure that Capybara's `after` hook is the first one to run, so that it definitely runs before `DatabaseCleaner` (if the user is using that). But I'm not sure there's actually a way to achieve that.

I guess documentation could help.
",jonleighton,2016-06-30 14:48:24
1716,2016-06-30 17:26:04,"@jonleighton Just to point out -- using `append_after` is the recommended standard config - https://github.com/DatabaseCleaner/database_cleaner#rspec-with-capybara-example
",twalpole,2016-06-30 14:48:24
1715,2016-06-28 19:07:23,"~~Capybara 2.7.0 and 2.7.1 introduced some unbelievably non-deterministic timing failures (very frustrating) into our test suite.~~

When a single spec is run, it passes (**consistently**). When run with other feature specs locally or on CI, it fails (**consistently fails in 1 place when entire suite is run**)

~~As far as I can tell, this behavior is not present on Capybara 2.6.2~~

~~This seems like a pretty serious regression to me. We believe that whatever mechanism was introduced to solve timing delays is actually making things worse.~~

~~the actual failure looks like premature truncation (We're using database cleaner). Specifically, we think that not all requests are finished before DB cleaner starts cleaning, because we see ""Record Not found"" errors.~~

As this is a non-deterministic failure that requires that I re-run my entire test suite to see the problem, it is extraordinarily difficult to do trial & error here.
",jasonfb,2016-06-30 21:00:36
1715,2016-06-28 19:08:22,"our actual failure. only fails when I run the whole suite or run the suite on the CI server

<S_CODE_TOKEN>
",jasonfb,2016-06-30 21:00:36
1715,2016-06-28 19:09:59,"here's the spec, as will see there is already a **sleep 5** at the end of my spec which appears to do nothing and does not help whatsoever with the timing problems. 
https://gist.github.com/jasonfb/986b99a459308ca2ade4212900d740f6
",jasonfb,2016-06-30 21:00:36
1715,2016-06-28 19:11:56,"full gemflie lock, showing all versions

https://gist.github.com/jasonfb/8e2e0f3f9c1ba1fc9f8d6f77e49517c9
",jasonfb,2016-06-30 21:00:36
1715,2016-06-28 19:16:15,"I am going back & forth between PhantomJS 2.1.1 and Phantom JS 2.0.0. So far 2.0.0 looks more stable and consistent. (With 2.1.1 I was seeing the driver lock-up on my CI server, like freeze halfway through and all subsequent tests fail. 2.0.0 does not show this behavior)
",jasonfb,2016-06-30 21:00:36
1715,2016-06-28 19:16:51,"I am leaving all this documentation here because it seems to us that later versions the problems are getting worse not better, so this is warning to others. 
",jasonfb,2016-06-30 21:00:36
1715,2016-06-28 20:06:17,"@jasonfb This is probably a better question for SO. That being said, are you checking the database for a record after creating that record through the UI?
",adsteel,2016-06-30 21:00:36
1715,2016-06-28 20:58:00,"@jasonfb There is no way for premature truncation to occur while you're still in a test (unless you've really screwed up your database_cleaner config somehow, or you're doing parallel tests on the same database).  What could happen prior to 2.7.0 is the test could finish and the database gets cleaned while there were still unfinished (and not waited for the visible results of) requests being executed.  Since you are still in the test (waiting for ""1x Blue Night 18 Hour Jersey has just been added to your cart"" to appear) then waiting at the end isn't going to do anything.

If it was left over requests from the previous test, then sleeping 5 at the beginning of the test (rather than the end) that always fails might would potentially make a difference.

This really looks more like it's an issue with the mocking/doubling being done in a feature test (which is usually frowned upon)
",twalpole,2016-06-30 21:00:36
1715,2016-06-28 21:01:45,"@jasonfb Also I'm a little shocked that after running a bunch of tests your test would still be referencing a Spree::Variant with 'id'=2, since a few tests in I would expect to see ids higher than 2 - or is that seed data created with fixed ids or something?
",twalpole,2016-06-30 21:00:36
1715,2016-06-28 21:10:22,"@jasonfb  Also are there tables you've excluded from being cleaned by database cleaner --  are you sure                                                                         `variant: boxer_briefs_18_hour.variants.first`  is actually returning a variant with a null deleted_at?
",twalpole,2016-06-30 21:00:36
1715,2016-06-29 00:20:19,"@twalpole thanks for all that attention, much appreciated. I think the auto-increment isn't reset on the test dbs, thus causing the growing id numbers as you pointed out. Will go through your other points as well one-by-one. Thanks.

It certainly feels like something is funky with the db cleaner setup. as well, I will try to see if I can re-do those mocks and just do proper log-ins. 
",jasonfb,2016-06-30 21:00:36
1715,2016-06-29 00:35:58,"@jasonfb  Just to clarify -- If a bunch of previous tests had occurred I would expect a number higher than 2 (so its the fact the number is so low that makes me question whats going on)-- Not resetting the auto-increment helps mitigate caching issues since each test ends up accessing resources with unique ids
",twalpole,2016-06-30 21:00:36
1715,2016-06-30 21:00:36,"We solved this ---- it was _really_ hard. @twalpole You were right, the problem was in our setup.

Specifically, and importantly (documenting here), capybara-webkit will hold onto a cache of endpoints that are set to cache (makes sense, sort of). That means that even if you `Rails.cache.clear` on the server (which we tried), the headless driver has already cached our endpoint from a previous spec.

On the 2nd (subsequent) spec, the same endpoint is not fetched again by the headless driver, because it believes it already has it in the (headless driver's) web cache. Unfortunately for us, that important endpoint (which is just a giant JSON dump) is actually specific to our data, which was changing from spec to spec. 

So that's why on subsequent run my front-end was sending variant_id(s) to my backend that weren't in the database, because those old veriant IDs had already been deleted by database cleaner. 

So basically if you have endpoints that have cache-control headers on them (like, non-zero cache-control headers) you have to remember that the headless driver (webkit or poltergeist) will cache those responses inside of itself, even if you clear your Rails cache. This is why they pass individually but failed when run as a group. 

For now, we're going to `if Rails.env.test?` the cache control header, so that in test it will respond with 0 minutes (normally it responds with a 3 minute cache). However, is there any way to tell the driver (webkit or poltergeist-- we switch between them) not to hang onto the cache of endpoints it hits from spec-to-spec? That way, I could avoid the ugly `if Rails.env.test?`  in my app.
",jasonfb,2016-06-30 21:00:36
1715,2016-06-30 21:21:34,"@jasonfb The poltergeist 1.10.0 I released the other day added `driver.clear_memory_cache` which will clear out the cache - you could try calling that in a before block - not sure if capybara-webkit has a similar option or not
",twalpole,2016-06-30 21:00:36
1715,2016-06-30 21:29:33,"Nice, thanks. 
",jasonfb,2016-06-30 21:00:36
1715,2016-06-30 21:31:20,"@reidcooper @jasonfb :mountain_railway:
",jasonfb,2016-06-30 21:00:36
1714,2016-06-23 14:56:14,"If you search for ""ignore_hidden_elements"" in https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/has_text_spec.rb, there are two tests where the description and contents don't match up.

Just happened to see it looking into other stuff, and I don't know it enough to make a PR at this point, but thought I would report it at least.

<S_CODE_TOKEN>
",henrik,2016-06-23 16:41:00
1714,2016-06-23 16:41:00,"Good catch! - fixed - thanks
",twalpole,2016-06-23 16:41:00
1713,2016-06-17 17:54:58,"When running the following script:

<S_CODE_TOKEN>

I can see from the command line that the thin server has booted. I can also manually visit the URL and it works.

Error:

<S_CODE_TOKEN>

Gem version: 2.7.1
Ruby version: 2.3.1
Thin Version: 1.7.0

From what I can tell, inside Capybara::Server, the `@server_thread.join(0)` always returns false. This is used to determine if the server is `responsive?`
",stevebooks,2016-06-18 17:12:54
1713,2016-06-17 18:39:07,"More info:
`Capybara.server_host = ""localhost""` fixes it. 😞 
This took a while to debug. Anything we can do here so that others don't run into the same issue?
",stevebooks,2016-06-18 17:12:54
1713,2016-06-18 17:12:54,"You should be using the 3 parameter version of the server block which also provides the expected host

<S_CODE_TOKEN>
",twalpole,2016-06-18 17:12:54
1712,2016-06-14 13:04:53,"After updating driver to marionette all fill_in methods stop working
Look at this string 
https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/node.rb#L52
It is always true, because now self[:readonly] is equal ""false"" (for inputs tags) which is boolean true.
",SanderMander,2016-06-14 14:54:17
1712,2016-06-14 14:54:17,"Work to support marionette is underway in the marionette branch where this issue has already been fixed - marionette w/ selenium is not really ready for prime time yet - select/deselect of multiple selects doesn't work, multiple sessions don't work due to port conflicts, exexute_script can't access page defined functions, etc. you're better off sticking with FF 46 until 47.0.1 is released which should work with FirefoxDriver again
",twalpole,2016-06-14 14:54:17
1712,2016-06-14 15:00:36,"See Issue #1709 and issue #1710 
",twalpole,2016-06-14 14:54:17
1711,2016-06-13 10:31:11,"This is occasionally useful.

For example in a recent application I'm using SauceLabs, and I'd like to iterate through all session in order to close them in a different way.
",jnicklas,2016-07-05 16:38:08
1711,2016-06-13 10:32:33,"It's potentially somewhat confusing, since it might well contain sessions not used in the current test, or nto contain a manually started session, so I'm not sure if this is really a fantastic idea. Thought I'd propose it anyway, since I've been finding myself calling `send(:session_pool)` a few times now.
",jnicklas,2016-07-05 16:38:08
1711,2016-06-21 17:05:59,"I'm not really sure this is a great idea either - will leave open while considering it more.
",twalpole,2016-07-05 16:38:08
1711,2016-07-05 16:38:08,"I don't think I want to add this at the moment (for the reasons you brought up), and it's easy enough for people to work around if they really need the access.
",twalpole,2016-07-05 16:38:08
1711,2016-07-05 21:49:16,"👍 
",jnicklas,2016-07-05 16:38:08
1710,2016-06-11 19:00:46,"As of a future FF, Firefox driver in Selenium will no longer work, and support will have to be provided through marionette.  Work has begun on support for marionette in the marionette branch of Capybara but there are still a lot of things broken and many tests that run fine separately but fail when run as part of the test suite.  If anyone can figure out how to select/deselect a single option in a multiple select without selecting/deselecting the rest of the options info would be appreciated.

With selenium-webdriver 2.53.1 a driver can be configured to use marionette as 

Capybara.register_driver :selenium do |app|
  Capybara::Selenium::Driver.new(app, browser: :firefox, marionette: true)
end

also requires having [wires](https://github.com/mozilla/geckodriver) in your path
",twalpole,2017-01-10 20:28:51
1710,2016-06-13 22:57:35,"Couple gotchas about the `wires` binary:
- Per the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette/WebDriver):
  - ""Even though the project has been renamed to GeckoDriver, many of the selenium clients look for the old name. **You need to rename the binary file to 'wires' (the old name) and ensure it is executable.**""
- If running specs launches Wireshark instead of your browser, it's because selenium-webdriver is looking for any executable called 'wires*' and is finding `wireshark` in your `PATH` before `wires`.
  - Make sure `geckodriver-0.8.0-OSX` has been renamed `wires`, made executable (`chmod u+x wires`), and is somewhere in your `PATH` before wireshark.
",gmcnaughton,2017-01-10 20:28:51
1710,2016-06-13 23:04:18,"Another gotcha is that multiple sessions don't work because selenium-webdriver doesn't set a unique marionette-port for each instance of firefox launched - this means the second sessions instance of wires/geckodriver connects/attempts to connect to the first sessions instance of firefox and the first session then goes nuts -- actions occurring twice, random errors, etc.
",twalpole,2017-01-10 20:28:51
1710,2016-06-16 14:50:38,"Another gotcha is that this call errors:

<S_CODE_TOKEN>

unknown option: profile

Without the profile option it ""works"" as before.
",juanibiapina,2017-01-10 20:28:51
1710,2016-06-16 18:30:46,"So is there a way to work with a custom profile?
",tucknats,2017-01-10 20:28:51
1710,2016-06-16 18:44:12,"@juanibiapina good point, I got that error too!  I haven't found a workaround for specifying a profile yet. (In our case, we're using a profile to set a custom user-agent).
",gmcnaughton,2017-01-10 20:28:51
1710,2016-06-16 19:21:17,"@juanibiapina Looking through the selenium and geckodriver code it looks like profile is now supposed to be passed through firefox_profile in the capabilities --- https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/remote/capabilities.rb#L245   and  https://github.com/mozilla/geckodriver/blob/4cbbc79ad487a7b1d8defd66be2923af6febf33e/src/marionette.rs#L331  -- unfortunately the special handling (encoding) for firefox_profile doesn't appear to have made it into the W3CCapabilities class, which I believe needs to be used for capabilities when using marionette - https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/remote/w3c_capabilities.rb#L187  so you may need to encode them yourself
",twalpole,2017-01-10 20:28:51
1710,2016-06-23 16:38:08,"FYI - all current changes on the marionette branch have been merged into the master branch --  This does not mean marionette works fully with Capybara, we are dependent on a number of fixes in selenium and geckodriver before it will be fully usable.
",twalpole,2017-01-10 20:28:51
1710,2016-06-23 18:40:08,"@twalpole Thanks! 👍 
",gmcnaughton,2017-01-10 20:28:51
1710,2016-06-30 17:48:56,"Update:  geckodriver 0.9.0 fixes the multiple session issues but appears to break a lot of other things since it appears to now return attribute values with no way to access attribute properties (with selenium-webdriver 2.53.4) -- Basically I think marionette is going to be unusable with Capybara until selenium-webdriver v3 launches.
",twalpole,2017-01-10 20:28:51
1710,2016-07-13 02:00:02,"Yet another gotcha, `geckodriver` [explicitly does not support Firefox 47](https://github.com/mozilla/geckodriver#supported-firefoxen). Is there an alternative that gets selenium working on Firefox 47, or do we just wait until 48 comes out?
",mockdeep,2017-01-10 20:28:51
1710,2016-07-13 03:00:23,"@mockdeep That really just means they won't fix any issues that only occur with 47 -  It ""works"" with 47, if we define ""works"" as starts up firefox and some things happen, but it's definitely not fully functional with the latest selenium-webdriver on any current version of firefox (47, 48 beta, 49 alpha) at the moment.
",twalpole,2017-01-10 20:28:51
1710,2016-07-13 14:45:12,"@twalpole unfortunately it doesn't do much for me. It boots up the browser and doesn't get past the login page. Do we have any sense at what point there will be a stable alternative?
",mockdeep,2017-01-10 20:28:51
1710,2016-07-13 18:28:09,"@mockdeep That really depends on the selenium-webdriver release schedule.  From looking at the code I assume it will come in selenium-webdriver v3 which I would expect to be released relatively soon after Firefox 48 if that really no longer works with FirefoxDriver.  For now you should just stay with FF 47.0.1 and selenium-webdriver 2.54.3 and not use marionette/geckodriver
",twalpole,2017-01-10 20:28:51
1710,2016-07-13 18:36:21,"@twalpole selenium-webdriver 2.54.3 doesn't work for me with FF 47. I get an unable to connect error:

<S_CODE_TOKEN>
",mockdeep,2017-01-10 20:28:51
1710,2016-07-13 19:03:01,"@mockdeep Whoops typo -- it's selenium-webdriver 2.53.4 - and FF 47.0.1 .  The .0.1 is very important 47.0.0 doesn't work -- It's what the capybara tests are currently run with and works fine - works locally too.
",twalpole,2017-01-10 20:28:51
1710,2016-07-13 19:04:43,"Ah, okay. I'm still on 47.0, so will report back when then next release comes through.
",mockdeep,2017-01-10 20:28:51
1710,2016-07-29 22:02:38,"Selenium-webdriver released 3.0.0.beta1 today - running it with Capybara, the latest geckodriver (0.9.0), and FF 48beta7 things are still massively broken - https://travis-ci.org/jnicklas/capybara/jobs/148403787 .  A large part of that is due to the fact there is no way to access the current value of an element (it only returns the attribute not property), but there's also things like clicking on an option in a select doesn't change the select, mouse actions don't work, etc.  Hopefully there are a few more betas coming.
",twalpole,2017-01-10 20:28:51
1710,2016-08-02 18:10:24,"FF48 released today - Until selenium-webdriver and geckodriver  provide a few more features it's basically unusable with Capybara so don't update.
",twalpole,2017-01-10 20:28:51
1710,2016-08-23 01:03:16,"> Basically I think marionette is going to be unusable with Capybara until selenium-webdriver v3 launches.

The great thing about geckodriver now is that its usability is completely independent of the Selenium release cycle. Part of the reason for the missing features is because it is implementing everything entirely based on the new [w3c spec](w3c.github.io/webdriver/webdriver-spec.html), which is still in draft. The Mozilla team has made a ton of progress recently, but Selenium 3 will likely be released before they've fixed the major issues you've identified.
",titusfortner,2017-01-10 20:28:51
1710,2016-08-23 01:41:07,"@titusfortner It's independent of the Selenium release cycle if we write a driver directly against geckodriver.  If we continue using Selenium then a lot of it is still dependent on the Selenium release cycle.  My personal view is that releasing Selenium 3 before it has comparable feature support with the Selenium 2.x and FirefoxDriver is just a recipe for tons of bug reports, but thats not my decision to make :)
",twalpole,2017-01-10 20:28:51
1710,2016-08-23 02:58:41,"geckodriver will be just like chromedriver, completely independent of Selenium releases. The browser manufacturer will keep their latest drivers compatible with the latest version of Firefox. The only conflation with a Selenium release is that 3+ defaults to geckodriver instead of the legacy driver, which as we've discussed in the PR is configurable. :)

My point is merely that the release of selenium v3 will not make marionette any more or less usable as your comment seemed to indicate.

At the point that the latest Firefox version doesn't work with legacy driver, it doesn't make sense for that to continue to be the default, and the Selenium team gets to punt the bug reports to Mozilla who are hard at work dealing with them. Also, this change in default was at Mozilla's request. :)
",titusfortner,2017-01-10 20:28:51
1710,2016-08-23 04:42:58,"@titusfortner The issue is that while geckodriver can change how its features work, unless Selenium 3 is providing access to them then we are tied to the selenium releases - as per my comment on PR# 1744  -  Providing access to the element value and the element properties would actually make marionette eminently more usable (although the select issues would still be a problem until the next FF release).  Also, I'm not in any way arguing that the move to marionette isn't a good thing - it definitely is - i'm  just stating that it's not yet really usable for most people with Capybara.
",twalpole,2017-01-10 20:28:51
1710,2016-10-10 19:23:09,"Update : Geckodriver 0.11.1 was released - current failures in the capybara test suite when using geckodriver 0.11.1, master branch of selenium-webdriver and firefox 50.0b5 - https://travis-ci.org/jnicklas/capybara/jobs/166497395   .  
Summary:
1. I would hope the passing text to a system prompt modal will be fixed before Selenium 3 releases
2. mouseMoveTo errors are dependent on FF implementing the webdriver actions API and will prevent drag_drop/hover/right_click/double_click from working - timeframe unknown
3. send_keys/fill_in - The webdriver spec changed and basically rules out complex combinations of characters being sent through as an elements value (modifiers, etc) -  This may just be a limitation that has to be accepted.   It may be possible to workaround the limitation for send_keys once FF implements the webdriver actions API for keys - timeframe unknown

So if you have no need for system prompt modals, mouse interaction more than a standard left click, or modifier keys being sent to elements then feel free to give the latest versions a try
",twalpole,2017-01-10 20:28:51
1710,2016-10-11 00:23:38,"Because marionette is a w3c implementation and Geckodriver is still
considered alpha, the Selenium team does not plan to hold up the 3.0
release for Firefox issues. These are Selenium 4.0 concerns.

On Oct 10, 2016 12:23, ""Thomas Walpole"" notifications@github.com wrote:

> Update : Geckodriver 0.11.1 was released - current failures in the
> capybara test suite when using geckodriver 0.11.1, master branch of
> selenium-webdriver and firefox 50.0b5 - https://travis-ci.org/
> jnicklas/capybara/jobs/166497395 .
> 
> Summary:
> 1. I would hope the passing text to a system prompt modal will be fixed
> before Selenium 3 releases
> 2. mouseMoveTo errors are dependent on FF implementing the webdriver
> actions API and will prevent drag_drop/hover/right_click/double_click
> from working - timeframe unknown
> 3. send_keys/fill_in - The webdriver spec changed and basically rules out
> complex combinations of characters being sent through as an elements value
> (modifiers, etc) - This may just be a limitation that has to be accepted.
> It may be possible to workaround the limitation for send_keys once FF
> implements the webdriver actions API for keys - timeframe unknown
> 
> So if you have no need for system prompt modals, mouse interaction more
> than a standard left click, or modifier keys being sent to elements then
> feel free to give the latest versions a try
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/jnicklas/capybara/issues/1710#issuecomment-252720856,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAvb4f17rhVGzelqgYul5Xrvp4_VSn9mks5qypClgaJpZM4IznnW
> .
",titusfortner,2017-01-10 20:28:51
1710,2016-10-11 01:04:37,"@titusfortner The only issue I stated I hoped would be fixed before Selenium 3 release is the system prompt modal text - which is defined in the w3c spec to pass the text as a ""value"" parameter - https://w3c.github.io/webdriver/webdriver-spec.html#dfn-send-alert-text .  Appears selenium-webdriver doesn't do that.  The other issues are all dependent on FF feature implementation - hence the ""timeframe unknown""
",twalpole,2017-01-10 20:28:51
1710,2016-10-11 18:32:42,"Yes, that was a recent change in the spec to require everything to pass results in ""value"", but what is causing the text to alert failure is this: https://bugzilla.mozilla.org/show_bug.cgi?id=1255906
The new 'value' expectation also broke the window size / position when going through the standalone server for Firefox / geckodriver (that one still works with Ruby directly). 
",titusfortner,2017-01-10 20:28:51
1710,2016-10-11 21:02:17,"@titusfortner While the mozilla bug is part of the issue, I believe the current issue being seen is that selenium-webdriver passes the text as  a ""text"" parameter - https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/remote/w3c_bridge.rb#L174 - rather than a ""value"" parameter as the spec requires and it appears geckodriver expects.  That then produces a ""Missing 'value' parameter"" error.  Not sure whether changing that key from ""text"" to ""value"" would break the other drivers though.
",twalpole,2017-01-10 20:28:51
1710,2016-10-14 09:35:21,"`selenium-webdriver` 3 has been released!
https://rubygems.org/gems/selenium-webdriver/versions/3.0.0
",lucascaton,2017-01-10 20:28:51
1710,2016-10-14 17:18:22,"@lucascaton Yep - and if you want to use it with Chrome it should work fine.  If you want to use it with new versions of Firefox (>= 48) then the limitations of no system prompt modals, mouse interaction more than a standard left click, or complex sets of characters including modifier keys being sent to elements still apply and there's nothing Capybara can do about it.  Apparently you should be able to use it with Firefox 45ESR and 47.0.1 by specifying the marionette: false option in the capabilities
",twalpole,2017-01-10 20:28:51
1710,2016-11-16 00:58:41,"I figure since the question of porting the old FireFox profile config to Marionette was brought up in this thread it couldn't hurt to follow up on what happened. 

@gmcnaughton did you ever get the profile options working? I am having trouble determining if I am passing through the profile options correctly. The old way of configuring the browser using Capybara was the following:

<S_CODE_TOKEN>

now with marrionette set as true (as you know) the above code no longer works. So I am trying the following code:

<S_CODE_TOKEN>

I use a javascript in the page to see if the user agent has changed:

`alert(navigator.userAgent.toLowerCase())`

How did you encode the prefs to work like before with profile?
",dunban1,2017-01-10 20:28:51
1710,2016-11-16 18:52:15,"@dunban1 Try something like 

<S_CODE_TOKEN>
",twalpole,2017-01-10 20:28:51
1710,2016-11-17 18:28:44,"@dunban1 Good question! I haven't had a chance to try again.  Personally we're still blocked by https://github.com/mozilla/geckodriver/issues/93 (support for self-signed certificates), so we're still running our test suite under FF 45.

@twalpole Thanks for the sample code (and all your work on this)!
",gmcnaughton,2017-01-10 20:28:51
1710,2016-11-22 01:21:49,"Thank you for your responses @twalpole and @gmcnaughton 

I get the following error with the code snippet:
<S_CODE_TOKEN>
when I add this line `Capybara.default_driver = :selenium` at the top. I get the following error instead:
<S_CODE_TOKEN>
The registration of the driver seems to be failing and it tries to use the fall back default which fails as well without proper configuration?

Perhaps there is another way that I should be looking at instead? For example, I have explored getting this to work is by referencing a pre-made FireFox profile. Is there a way to do this in Capybara with Marrionette?

I have been able to configure FireFox directly using selenium by linking the correct FireFox profile in the following code:

<S_CODE_TOKEN>

But I have no idea how to register the driver once I configured it directly. I imagine Capybara is designed to instantiate the driver only inside the register_driver. If not is there a way to get this working should passing the firefox_options object ultimately not work? 
",dunban1,2017-01-10 20:28:51
1710,2016-11-22 01:51:05,"@dunban1 This is getting well off topic for the issue at hand.  The README has a number of examples for calling `register_driver`, if those aren't enough please ask your howto questions on the mailing list as requested in the README.",twalpole,2017-01-10 20:28:51
1710,2016-11-22 22:33:50,"For anyone that finds this thread and was looking for an answer to how to use firefox_options to configure the FireFox profile. The conversation shall be continued here: https://groups.google.com/forum/#!topic/ruby-capybara/AyAcBX9-lIE

@gmcnaughton FYI if you're eventually going to stop using FF47 once Marrionette stabilizes I would imagine you will need this answer as well.",dunban1,2017-01-10 20:28:51
1710,2017-01-10 20:28:50,I'm closing this issue since it's documented in the README and Capybara will be swapping to default to Chrome when Capybara 3 releases,twalpole,2017-01-10 20:28:51
1710,2017-01-10 23:09:35,"System prompt modals are fixed in the selenium-webdriver master branch so selenium-webdriver > 3.0.5 when released should have that functionality.  That just leaves mouse interaction other than a standard left click, or modifier keys being sent to elements as the features that would limit use of current FF with selenium-webdriver",twalpole,2017-01-10 20:28:51
1710,2017-01-11 06:48:33,"For Capybara try this steps After downloading geckodriver and Added it into Path:

Make sure your selenium webdriver is '3.0.0'

Capybara.default_driver = :selenium
Capybara.register_driver :selenium do |app|
  browser = (ENV['BROWSER'] || 'firefox').to_sym
  Capybara::Selenium::Driver.new(app, browser: browser, marionette: true)
end

",rafiqdeen,2017-01-10 20:28:51
1710,2017-01-11 07:23:12,"@rafiqdeen ??? Do you have a problem using that?  Yes it will ""work"" but the features mentioned previously will not work (i.e.. no hover, no drag_to, no right_click, no double_click, etc, etc)",twalpole,2017-01-10 20:28:51
1710,2017-01-29 08:03:43,"Is there any update on this issue? Has anything got capybara + selenium + geckodriver working? 
",jeremylynch,2017-01-10 20:28:51
1710,2017-01-30 08:08:24,"@mrjlynch - it works just fine unless you need more complicated keyboard/mouse interactions. That part of the spec was recently agreed on and Mozilla is working hard to finish that implementation.

Oh, and I thought I'd already released all of the important updates. I'll get selenium-webdriver 3.0.6 out soon with the system prompt modal fix; sorry for that delay.",titusfortner,2017-01-10 20:28:51
1710,2017-02-03 00:30:23,"@titusfortner how do you install `geckodriver`? 
Here is what I tried in vain:
1. Download Geckodriver from here: https://github.com/mozilla/geckodriver/releases
2. Unzip and run the executable (geckodriver)
3. Run export PATH=$PATH:downloads/geckodriver

I also tried renaming `geckodriver` to `wired` (and updating path accordingly)",jeremylynch,2017-01-10 20:28:51
1710,2017-02-03 01:50:45,"Options:

1. Find a path that is already on PATH and stick geckodriver there
2. Do what you did but use a full path instead of a relative path
3. Do: `gem install webdrivers` and it will manage all of the drivers for you. It automatically makes sure that you are on the latest version.",titusfortner,2017-01-10 20:28:51
1710,2017-02-03 03:43:54,"Thanks @titusfortner, got it working (thanks to option 3)
It seems very buggy. 
<S_CODE_TOKEN>

Do you know when chrome will be supported? ",jeremylynch,2017-01-10 20:28:51
1710,2017-02-03 03:54:32,"Glad you got it working. What is buggy?

Chrome is already supported it just isn't the default.

The latest geckodriver finally supports mouse movements and Lucas has a pr
to selenium with an implementation based on specs, but it isn't quite ready
yet.
",titusfortner,2017-01-10 20:28:51
1710,2017-02-03 04:32:52,"@mrjlynch  You need to specify :chrome for the browser, and install chromedriver.  The only features that currently fail with Capybara and the newest version of selenium-webdriver with the newest version of FF  are

1.  system prompt modals  -  fixed in the master branch of selenium, will be in the next release
2. mouse interaction more than a standard left click - as @titusfortner mentioned it's coming alone
3. complex sets of characters including modifier keys being sent to elements - the spec has been finalized and as soon as geckodriver matches that spec it should be ok.
4. A recently discovered one that only affects Capybara master - equality with elements returned from `evaluate_script` - being worked on currently, would expect it to be fixed in the next selenium-webdriver release",twalpole,2017-01-10 20:28:51
1710,2017-03-08 18:10:47,#drag_to and #hover support are fixed as of geckodriver 0.15 selenium-webdriver 3.3 and firefox 53b1 . - # right_click and #double_click will also probably work if the element is in the visible window (none of these appear to scroll elements out of view into view),twalpole,2017-01-10 20:28:51
1709,2016-06-11 18:54:34,"FF 47 is broken when attempting to use with selenium-webdriver 2.53+ - Apparently a new release of FF should be coming next week that fixes this.  https://github.com/SeleniumHQ/selenium/issues/2110
",twalpole,2016-06-30 16:51:18
1709,2016-06-16 22:30:58,"Same problem for me.  I tried going to an older FF and then had other problems 😿 
",QuotableWater7,2016-06-30 16:51:18
1709,2016-06-16 22:51:12,"@QuotableWater7 What other problems did you have -- you should be able to rollback to FF 46, turn off updates and be good to go.  This Issue was put here as an informational item to explain the current issue -- hopefully they release 47.0.1 soon
",twalpole,2016-06-30 16:51:18
1709,2016-06-16 22:54:45,"When I'm on FF 46, here is an issue I'm seeing:

<S_CODE_TOKEN>
",QuotableWater7,2016-06-30 16:51:18
1709,2016-06-16 22:55:38,"The spec runs perfectly on our CI though (we use Solano)
",QuotableWater7,2016-06-30 16:51:18
1709,2016-06-16 23:28:40,"@QuotableWater7 It's probably due to window size - so on your machine the default window size is different than on the CI setup and that leads to elements overlapping others (fixed header/footer, etc) - try resizing your window for that test.
",twalpole,2016-06-30 16:51:18
1709,2016-06-22 03:53:56,"how to rollback to FF 46 in Linux?
",rafiqdeen,2016-06-30 16:51:18
1709,2016-06-22 23:03:49,"@rafiqdeen It depends on what particular flavor of Linux you're using and which package manager.
",twalpole,2016-06-30 16:51:18
1709,2016-06-23 04:36:10,"@twalpole I am using ubuntu 14.04 LTS and I tried Synaptic package manager but it shows only 28.0 version.
",rafiqdeen,2016-06-30 16:51:18
1709,2016-06-23 16:44:03,"@rafiqdeen  http://askubuntu.com/questions/428772/how-to-install-specific-version-of-some-package/428778
",twalpole,2016-06-30 16:51:18
1709,2016-06-28 16:28:20,"Firefox 47.0.1 has been released, and appears to also have issues with selenium-webdriver -  stick with 46.0.1 for now 
",twalpole,2016-06-30 16:51:18
1709,2016-06-30 16:51:18,"Firefox 47.0.1 works correctly with selenium-webdriver 2.53.4
",twalpole,2016-06-30 16:51:18
1709,2016-07-27 05:47:26,"@ZigmaZigmax  The errors you are getting are coming from selenium-webdriver and nothing to do with Capybara.  Capybaras own tests run with selenium-webdriver 2.53.4 and Firefox 47.0.1 without issue, so I would suggest making sure you are actually running FF 47.0.1 and that you don't have any hung processes hanging onto ports.  If both of those are fine check out the issue reports at the selenium project on github.
",twalpole,2016-06-30 16:51:18
1709,2016-07-28 10:47:57,"Oh, I am sorry, I am new to this, But I tried capybara, I thought selenium is the only driver to launch firefox, will capybara itself can launch Firefox and do UI functional test?
",ZigmaZigmax,2016-06-30 16:51:18
1708,2016-06-11 08:09:58,"Surrounding the `Named sessions` and `Using the sessions manually` section in `Using sessions`,
To make it easier to look for how Capybara managed sessions.
",suemoc,2016-07-11 21:25:26
1707,2016-06-07 02:33:01,"I propose extending the Capybara DSL with yet another method, `#replace_html`, which would literally replace the current page source code.

Or maybe there is such functionality already, but I haven't noticed it?
### The use case

I am developing a service which provides a set of JavaScript widgets which are intended to be embedded in 3rd-party websites. In order to test the widget, I need to prepare some trivial fake page. For example:

<S_CODE_TOKEN>
### What can I do now?

So far I've found 3 ways to work around the problem:
1. Provide some test controller and test view with this trivial page. Seems quite hacky cause these controller and view are useless outside of test environment. In fact, I should add some flow control into Rails routes to disable them in production.
2. Use https://github.com/oesmith/puffing-billy gem, but that seems to be an overkill. It adds bunch of dependencies, requires configuration, I had trouble to get it running. This approach is actually more difficult than it appears to be.
3. Inject the source code with JavaScript. It works, is not overcomplicated, but still hackish:

<S_CODE_TOKEN>

However I believe introducing yet another method is advocated.
### Other considerations

I'm not sure if the behavior of proposed method should be limited to replacing the page source code. Perhaps it should also make an entry in browser's history, like visit does. Perhaps it should also call `load` event on `window`.
",skalee,2016-06-07 09:00:43
1707,2016-06-07 09:00:43,"If you just want your own content to be loaded, create your own ""app"" and use that

<S_CODE_TOKEN>

Modifying a pages content really isn't something the Capybara project needs/wants to do.
",twalpole,2016-06-07 09:00:43
1706,2016-06-06 13:56:23,"Hello, 

I have this menu in rails : 

<S_CODE_TOKEN>

where he boekhouding choice needs to be clicked so the rekening schema choice is visible.

Now I test the menu like this : 

<S_CODE_TOKEN>

this one fails with this message : 

<S_CODE_TOKEN>

when I change the webdriver to webkit everythings works fine 
",ghost,2016-06-07 18:29:15
1706,2016-06-07 09:02:19,"Please ask howto questions on the mailing list as requested in the README.  If you think you've found an actual issue with Capybara then please provide a reproducible example that we can test with.
",twalpole,2016-06-07 18:29:15
1706,2016-06-07 10:43:08,"I think I have found a actual issue. 
I have given the rails and test data which you can test on in my first respons. 

if you need more , im willing to give you more info.
You can also use alll the code of the site, Im making now.
The url is :  https://github.com/rwobben/paytime

so to reproduce this : 

1) clone my repo : git clone https://github.com/rwobben/paytime.git
2)  bundle install
3) rspec 
",ghost,2016-06-07 18:29:15
1706,2016-06-07 18:29:15,"This is intermittent because you have an issue with animation -- while the link is moving its possible for a click to occur in the wrong place and therefore be ignored (or be clicked in the right place but swallowed by one of the JS libraries while its sliding down).  This is not a capybara issue but rather an issue with the individual drivers (in this case selenium-webdriver, but poltergeist and capybara-webkit both can suffer from the same issue in different situations) - You can either put a slight delay between the two clicks to make sure the animation has finished, or a better solution (which will also make your tests faster) is to disable animations during testing.  Since you're using jquery and bootstrap you can disable the animations by adding the following in your layout after the include for application.js

<S_CODE_TOKEN>
",twalpole,2016-06-07 18:29:15
1705,2016-05-17 22:46:59,"Hello,

I have a warning in capybara when passing to rails 5.0.rc1.

DEPRECATION WARNING: env is deprecated and will be removed from Rails 5.1 (called from process at /usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/bundler/gems/capybara-6b12bc496f1d/lib/capybara/rack_test/browser.rb:61)

Thank you for your amazing gem !
",tibastral,2016-06-01 18:56:49
1705,2016-05-17 23:21:26,"The `env` being accessed there is a passed in parameter - not sure why that would be generating a rails deprecation - do you have a bigger stack trace?
",twalpole,2016-06-01 18:56:49
1705,2016-05-18 09:32:31,"Nop, since it's not an error, but just a deprecation, no idea to get a bigger stack trace...
",tibastral,2016-06-01 18:56:49
1705,2016-05-18 16:24:23,"hmnmm -- I'm not seeing it in any of my projects using 5.0.0.rc1 -- what other gems are you using?
",twalpole,2016-06-01 18:56:49
1705,2016-05-18 16:26:19,"also you can open your copy of the  capybara gem and add a break (pry, byebug, etc) where the deprecation is coming from and look at the stack trace there to see if it provides any clue
",twalpole,2016-06-01 18:56:49
1705,2016-05-18 17:23:05,"That's the trace :

/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/bundler/gems/capybara-6b12bc496f1d/lib/capybara/rack_test/browser.rb:62:in `process'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/bundler/gems/capybara-6b12bc496f1d/lib/capybara/rack_test/browser.rb:39:in`block in process_and_follow_redirects'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/bundler/gems/capybara-6b12bc496f1d/lib/capybara/rack_test/browser.rb:38:in `times'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/bundler/gems/capybara-6b12bc496f1d/lib/capybara/rack_test/browser.rb:38:in`process_and_follow_redirects'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/bundler/gems/capybara-6b12bc496f1d/lib/capybara/rack_test/browser.rb:27:in `submit'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/bundler/gems/capybara-6b12bc496f1d/lib/capybara/rack_test/form.rb:78:in`submit'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/bundler/gems/capybara-6b12bc496f1d/lib/capybara/rack_test/node.rb:62:in `click'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-rails-1.4.3/lib/cucumber/rails/capybara/javascript_emulation.rb:16:in`click_with_javascript_emulation'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/bundler/gems/capybara-6b12bc496f1d/lib/capybara/node/element.rb:135:in `block in click'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/bundler/gems/capybara-6b12bc496f1d/lib/capybara/node/base.rb:85:in`synchronize'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/bundler/gems/capybara-6b12bc496f1d/lib/capybara/node/element.rb:135:in `click'
/Users/thibaut/goinfre/rushout/features/support/capybara_helpers/core/form_submitter.rb:38:in`rescue in submit_form'
/Users/thibaut/goinfre/rushout/features/support/capybara_helpers/core/form_submitter.rb:35:in `submit_form'
/Users/thibaut/goinfre/rushout/features/support/capybara_helpers/core/form_submitter.rb:5:in`fill_in_and_submit'
/Users/thibaut/goinfre/rushout/features/support/capybara_helpers/core/form_submitter.rb:10:in `visit_and_create'
/Users/thibaut/goinfre/rushout/features/support/capybara_helpers/core/admin_object_creator.rb:8:in`initialize'
/Users/thibaut/goinfre/rushout/features/support/capybara_helpers/event_creator.rb:5:in `new'
/Users/thibaut/goinfre/rushout/features/support/capybara_helpers/event_creator.rb:5:in`default_attributes'
/Users/thibaut/goinfre/rushout/features/support/capybara_helpers/core/admin_object_creator.rb:9:in `initialize'
/Users/thibaut/goinfre/rushout/features/support/capybara_helpers/contest_creator.rb:5:in`new'
/Users/thibaut/goinfre/rushout/features/support/capybara_helpers/contest_creator.rb:5:in `default_attributes'
/Users/thibaut/goinfre/rushout/features/support/capybara_helpers/core/admin_object_creator.rb:9:in`initialize'
/Users/thibaut/goinfre/rushout/features/step_definitions/events_steps.rb:29:in `new'
/Users/thibaut/goinfre/rushout/features/step_definitions/events_steps.rb:29:in`block in <top (required)>'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/core_ext/instance_exec.rb:25:in `instance_exec'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/core_ext/instance_exec.rb:25:in`block in cucumber_instance_exec'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/core_ext/instance_exec.rb:42:in `cucumber_run_with_backtrace_filtering'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/core_ext/instance_exec.rb:13:in`cucumber_instance_exec'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/rb_support/rb_step_definition.rb:102:in `invoke'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/step_match.rb:27:in`invoke'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/step_match.rb:20:in `block in activate'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/action.rb:23:in`execute'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/step.rb:31:in `execute'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/runner.rb:104:in`execute'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/runner.rb:51:in `execute'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/runner.rb:26:in`test_step'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/step.rb:16:in `describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:26:in`block (3 levels) in describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:25:in `each'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:25:in`block (2 levels) in describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/filters/prepare_world.rb:22:in `block in test_case'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/around_hook.rb:16:in`execute'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/runner.rb:104:in `execute'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/runner.rb:51:in`execute'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/runner.rb:33:in `around_hook'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/around_hook.rb:11:in`describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:106:in `block (2 levels) in compose_around_hooks'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:107:in`compose_around_hooks'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:24:in `block in describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/runner.rb:18:in`test_case'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:23:in `describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/filters/prepare_world.rb:11:in`test_case'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:23:in `describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/filters/apply_around_hooks.rb:8:in`test_case'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:23:in `describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/filters/apply_after_hooks.rb:5:in`test_case'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:23:in `describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/filters/apply_before_hooks.rb:5:in`test_case'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:23:in `describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/filters/apply_after_step_hooks.rb:8:in`test_case'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:23:in `describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/filters/activate_steps.rb:11:in`test_case'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:23:in `describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/filters/quit.rb:11:in`test_case'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/case.rb:23:in `describe_to'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/filters/locations_filter.rb:17:in`block in done'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/filters/locations_filter.rb:16:in `each'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/filters/locations_filter.rb:16:in`done'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/filter.rb:61:in `done'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/test/filters/tag_filter.rb:18:in`done'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/compiler.rb:23:in `done'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core/gherkin/parser.rb:39:in`done'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core.rb:29:in `parse'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-core-1.4.0/lib/cucumber/core.rb:18:in`compile'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/runtime.rb:68:in `run!'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/lib/cucumber/cli/main.rb:32:in`execute!'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/cucumber-2.3.3/bin/cucumber:8:in `<top (required)>'
/usr/local/var/rbenv/versions/2.3.1/bin/cucumber:23:in`load'
/usr/local/var/rbenv/versions/2.3.1/bin/cucumber:23:in `<top (required)>'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.4/lib/bundler/cli/exec.rb:63:in`load'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.4/lib/bundler/cli/exec.rb:63:in `kernel_load'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.4/lib/bundler/cli/exec.rb:24:in`run'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.4/lib/bundler/cli.rb:304:in `exec'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.4/lib/bundler/vendor/thor/lib/thor/command.rb:27:in`run'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.4/lib/bundler/vendor/thor/lib/thor/invocation.rb:126:in `invoke_command'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.4/lib/bundler/vendor/thor/lib/thor.rb:359:in`dispatch'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.4/lib/bundler/vendor/thor/lib/thor/base.rb:440:in `start'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.4/lib/bundler/cli.rb:11:in`start'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.4/exe/bundle:27:in `block in <top (required)>'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.4/lib/bundler/friendly_errors.rb:98:in`with_friendly_errors'
/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.12.4/exe/bundle:19:in `<top (required)>'
/usr/local/var/rbenv/versions/2.3.1/bin/bundle:23:in`load'
/usr/local/var/rbenv/versions/2.3.1/bin/bundle:23:in `<main>'
",tibastral,2016-06-01 18:56:49
1705,2016-05-18 17:43:23,"I'm guessing its coming from your app or middleware used by your app and something is filtering the stack trace
",twalpole,2016-06-01 18:56:49
1705,2016-05-18 18:36:12,"Nop my app is not using env

Sent from my iPhone

> On 18 mai 2016, at 19:43, Thomas Walpole notifications@github.com wrote:
> 
> I'm guessing its coming from your app or middleware used by your app and something is filtering the stack trace
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
",tibastral,2016-06-01 18:56:49
1705,2016-05-18 18:59:45,"@tibastral it doesn't have to be your code -- it could be middleware installed by some other gem -- the `env` referred to in the method in Capybara is a local variable hash that is passed in so there's no reason for that to output a deprecation notice, which would mean it has to be coming from some code called from the `send` - one last thing to try would be to open your copy of the actionpack gem and break when env is called and look at the stacktrace there -- I guess it's probably the env defined in  `actionpack/lib/action_controller/metal.rb`
",twalpole,2016-06-01 18:56:49
1705,2016-06-01 18:56:49,"I'm closing this since I can't replicate it - If someone can provide an example that replicates it we can reopen.
",twalpole,2016-06-01 18:56:49
1704,2016-05-16 16:02:04,"I cannot seem to find an option to disable automatic redirection. I need to test the redirect whether it's a 301 or 302 header response.
",rsiddle,2016-05-16 16:59:50
1704,2016-05-16 16:59:50,"Capybara is designed to mimic a user - they don't see the redirect response, they see the page redirected to - hencen most Capybara drivers don't provide it to you.   You can technically do it with the rack_test driver by registering one created with the `follow_redirects: false` option but it usually easier to just test for redirect responses in your controller specs/tests. 
",twalpole,2016-05-16 16:59:50
1703,2016-05-16 14:51:17,"I have the following test and development group in my Gemfile:

<S_CODE_TOKEN>

After install, and before  I made any changes to my spec_helper or rails_helper files, I could not run guard-rspec anymore.  I got the following error:

<S_CODE_TOKEN>

Any leads on why this might happen?
",b-d-b,2016-05-16 17:02:02
1703,2016-05-16 17:02:02,"No clue -- look further up the stacktrace to see where the error is coming from.  Please ask howto question in the mailing list as requested at the top of the README
",twalpole,2016-05-16 17:02:02
1702,2016-05-16 13:16:09,"I had cross-contamination between tests, which was a real hell to debug.

For workaround I ended up doing this:

<S_CODE_TOKEN>

But it's really a bug in capybara that it allows this cross-test contamination, and it should clear `localStorage` as well as any other kind of HTML5 browser state between tests.

Presumably this kind of code ought to go to `Capybara::Selenium::Driver#reset!`, and to similar places in other drivers supporting such storage mechanisms.
",taw,2016-05-16 17:08:49
1702,2016-05-16 17:08:49,"This has been discussed previously and the performance hit for doing this every test when most apps don't depend on localStorage was decided to be not worth it.  If you have a need for it adding an after block as you have works fine.  This is documented in the Session#reset method - http://www.rubydoc.info/gems/capybara/Capybara/Session#reset%21-instance_method  -  PRs  documenting it in the README would be considered
",twalpole,2016-05-16 17:08:49
1702,2016-05-16 23:10:29,"This feels like a very bad decision. What developer sees without this reset is tests failing randomly (based on random seed) on CI, but every one of them working just fine when ran individually every time - and none of the standard ways to debug it are going to be helpful.

This hacky `after` hook (which I think only works reliably enough for single origin tests suites, there ought to be a more proper way) is not terribly complicated, but figuring out that your random CI fails have anything to do with capybara leaking state between tests is extremely difficult to debug. Even if documentation said something about `localStorage` (which is far more likely to be used by some framework than by app directly, so developer probably won't even know), there's no reasonable way to guess that.

This is a bug in capybara, there's really no other way to look at it. The only reasonable alternative to cleaning `localStorage` between tests would be to tell the browser to disable `localStorage` completely (`--disable-local-storage` for chrome). Having contaminated `localStorage` is just wrong.

And for that matter, does it really have significant performance impact? It feels unlikely compared with tons of setup being ran for every test.
",taw,2016-05-16 17:08:49
1702,2016-05-17 01:10:53,"@taw  The fact that this has come up a couple of times in the last 3 years shows how little it actually affects people.  The ""hacky""??? after hook is exactly how it would be implemented in Capybara if it ever was, so I'm not really sure what your issue with that is.  

As stated in the Session#reset documentation - the decision was made not to reset localstorage since Capybara has no way of knowing everything that an app would need to have reset between tests, so the developer has to make that decision.  If that doesn't work for you, you are free to use any other free testing framework you feel like.   If instead you want to make it clearer to others by submitting a PR for the README about session resets that would be considered.
",twalpole,2016-05-16 17:08:49
1702,2016-05-17 14:22:24,"Considering how difficult to debug problems like this are, the fact that it showed up multiple times suggest it probably affects a lot of people, but they just shrug it off with ""capybara is inherently unreliable"" (a very common attitude).
",taw,2016-05-16 17:08:49
1701,2016-05-13 13:53:32,"I am navigating through a Rails-backed website with Backbone and Bootstrap on front-end.
Sign in page doesn't pose any problems, but return from the click on sign-in button takes a few extra seconds after the home page has loaded (in chromedriver).
All pages for signed-in user are almost entirely dynamically generated.
Everything (including `page.find(:xpath,'//html')`) is a stale element on the page for Capybara, while direct use of Selenium suggests no problems at all. PhantomJS doesn't render the page at all, although using Capybara finders gets me `ObsoleteNode` rather than failing to find anything.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

More backtrace `find(:xpath,'//html')`:

<S_CODE_TOKEN>
",akseiya,2016-05-17 17:28:38
1701,2016-05-16 17:11:42,"are you inside a within block?  if so the element you are within has probably been removed from the page.  If not, we need a minimal reproducible example to debug this.
",twalpole,2016-05-17 17:28:38
1701,2016-05-17 09:21:59,"@twalpole : 
No, no `within` in this case. I actually tried to use `#app-navigation` as selector for a `within` initially and then realized the error pops up even for a plain `find(:xpath,'//html')`.
I'm not sure how to proceed with minimal reproducible debug. Between submitting the sign-in form and the attempt to access the dashboard page there is a lot of proprietary code at work.
",akseiya,2016-05-17 17:28:38
1701,2016-05-17 10:03:06,"In case the problem was not flaky enough, it doesn't reoccur today. Transition from sign-in page to dashboard is fluid, there's no delay in `irb`'s return from `click_button 'Sign in'`, Capybara finders work fine.
",akseiya,2016-05-17 17:28:38
1701,2016-05-17 17:28:38,"I would say look at whatever code was changed between yesterday and today - anyway doesn't seem like its actually an issue in Capybara - closing
",twalpole,2016-05-17 17:28:38
1701,2016-05-18 08:57:48,"It was indeed a `within`, just a one I did miss, apologies for the waste of time.
",akseiya,2016-05-17 17:28:38
1700,2016-05-11 17:54:54,,twalpole,2016-05-16 18:02:47
1699,2016-05-10 10:41:20,"Hello there,

I have a CSS class with multiple dots in it's name. I'm trying to use the following:

<S_CODE_TOKEN>

The HTML itself looks like this:

<S_CODE_TOKEN>

And it seems that Capybara is not finding the class I need. I keep getting:
`Unable to find css "".my.very.important.class""`

Do I need to somehow escape the dots in the class name, or is this not supported at all?

Thank you!

P.S Using Capybara 2.6.2
",ramunasm,2016-05-10 14:41:12
1699,2016-05-10 14:41:10,"Please ask how to questions on the mailing list as requested in the README - or read up on CSS escaping just as you would have to do to target that class in a normal .css file
",twalpole,2016-05-10 14:41:12
1698,2016-05-09 22:21:07,"Alternate to PR #1697  -  This changes selenium-webdriver to ignore unexpected alerts (raise an error) rather than the default of dismissing them which allows us to accept the alert from before unload and therefore allow unload to continue.
",twalpole,2016-05-11 17:52:36
1698,2016-05-10 09:06:03,"It doesn't seem particularly nice to have to change the default value, but I guess modifying the `options` could be tricky since someone can specify their own capabilities?
",jnicklas,2016-05-11 17:52:36
1698,2016-05-10 09:23:16,"Works brilliantly though! I think behaviour wise this is far better than my PR.
",jnicklas,2016-05-11 17:52:36
1698,2016-05-10 17:36:12,"@jnicklas - Updating the defaults seemed like the easiest way to make sure it was set all the time (unless overridden by the users options) - there really doesn't seem to be another place in the selenium API to do it nicely.
",twalpole,2016-05-11 17:52:36
1697,2016-05-09 15:32:00,"Unfortunately the current way of doing this is prone to race conditions. See #1696. Selenium does not provide any API to check if a modal is open, and simply trying to close it and catching the error is very, very slow on Firefox. One quirk though is that Selenium returns the text of any open modal as the return value of `navigate.to`. Why? I have no idea. Is this even an official/intentional API? I don't know. (Maybe @jarib knows?). So it turns out that the fastest way of safely navigating away from a page and catching any alerts caused by this is by checking that the return value of `navigate.to` is neither `""""` nor `nil` (the behaviour seems to differ between selenium drivers). I've checked that this works with Chrome, Firefox and IE via the remote driver at least.

Honestly I'm not sure if this is the right way of solving this, but I'm kind of out of other ideas.
",jnicklas,2016-05-11 17:51:43
1697,2016-05-09 16:45:20,"Pretty sure selenium used to raise an error if you tried to navigate away while a modal was visible, so this must be a recent behavior change - maybe they replaced the error with returning the text? 
",twalpole,2016-05-11 17:51:43
1697,2016-05-09 19:05:34,"I think the root cause of this is that selenium (with firefox at least) is dismissing the unhandled alert itself and no longer raising the error it used to (99% sure it used to).  Dismissing the alert rather than accepting it appears to prevent the location change so everything fails.  @jnicklas  - could you try setting the desired capability ""unexpectedAlertBehaviour"" (note English spelling of behaviour with a u) to ""ignore"" and see if your issue goes away, it fixes things in my tests and may be a preferable default since we are managing the alerts ourselves
",twalpole,2016-05-11 17:51:43
1697,2016-05-09 22:22:24,"@jnicklas  Please look at PR #1698 and give your thoughts on that as opposed to this one.
",twalpole,2016-05-11 17:51:43
1697,2016-05-11 17:51:34,"Closing in favor of PR #1698 
",twalpole,2016-05-11 17:51:43
1696,2016-05-09 14:20:17,"#1672 introduced behaviour which tries to make sure that resetting the session is going to close any alerts from a `beforeunload` handler. Unfortunately, if such an alert is already open, there's a race condition where Capybara never navigates to about:blank and thus gets stuck in a loop trying to check for no content, which never happens. This causes the session reset to time out with an error like:

<S_CODE_TOKEN>

I have a repro [here](https://gist.github.com/jnicklas/a2ada84190f2cc9fdb95acec6a235dde). I'll try to submit a fix.
",jnicklas,2016-05-11 17:53:01
1696,2016-05-09 22:42:51,"This issue is caused by selenium defaulting to dismissing unexpected alerts, which causes the navigation to about:blank to abort.  We catch this and attempt to accept the alert, but since the alert has already been dismissed seleniums alertTimeout (which I don't see a way to override but might be missing something) takes over and selenium waits for 2 seconds before telling us the modal has already gone away - cycle repeats until we timeout.  I've created PR #1698 which changes the default to ignoring (not dismissing or accepting) unexpected alerts so we can accept it which allows the beforeunload to continue and the page to navigate away
",twalpole,2016-05-11 17:53:01
1696,2016-05-11 17:53:01,"Fixed via PR #1698 
",twalpole,2016-05-11 17:53:01
1695,2016-05-02 20:20:54,,twalpole,2016-05-04 19:35:35
1694,2016-05-01 17:46:54,"Currently each session creates a server object which creates a counter object.  Some of these servers instance are not actually booted up but instead requests are served by an existing server object.  This results in sessions that query the incorrect counter to see that requests have ended.  If we make the counter tied to the app instance and accessible based on that  it would potentially solve this issue.
",twalpole,
1694,2016-07-25 16:43:13,"Doing this may actually end up creating deadlocks during reset of sessions with multiple sessions accessing the same server - not sure if this is a good idea or not -- one way around it would be to split resetting the session and waiting for the requests to all finish - so that all sessions could first be reset and then wait for all the sessions requests to finish
",twalpole,
1693,2016-04-29 18:22:52,"2.7 potential fix for Issue #1692 - Working on a better solution for 2.8
",twalpole,2016-05-01 17:31:05
1692,2016-04-28 09:52:29,"The `wait_for_pending_requests` method on Server was introduced in 2.7.0, but unfortunately this method is not enough to prevent requests from hitting the server after reset. I have pretty definitive proof of this race condition occuring, and I think I have an explanation of what's happening:
- `wait_for_pending_requests` called, counter is zero, method returns
- request starts, hits server, count is increased to one
- `DatabaseCleaner.clean` is called, starts emptying out the DB
- request keeps processing, hits a point where a query fails due to missing data cleaned out by database cleaner, server sets `error` property
- next test starts, fails due to `error` property being set

In other words: requests can hit the application _in between_ `wait_for_pending_requests` and `DatabaseCleaner.start`.

I managed to fashion a workaround for this issue, by introducing a request blocker, which prevents any requests from hitting the Rails application, and responds with a 200 status code and a ""Request blocked"" message: https://gist.github.com/jnicklas/090d7099afd6cb6349c5245e39d1e664

The order in which to apply the reset operations is very important though: the request blocker needs to be enabled _before_ resetting sessions, otherwise this won't work. This way we prevent any new requests from hitting the application, as well as waiting for any existing requests to finish. I think given this setup, it is impossible for any requests to hit the application after session reset, and indeed after this change I cannot reproduce the race condition any more.

Unfortunately, integrating this into Capybara is not super straight-forward. Of course we could bundle something like the request block middleware attached in the gist, but it's a significantly breaking change. It would mean that people would have to call something like `session.start` before they can call any Capybara commands. For RSpec and Cucumber we could make this automatic, but it would be a breaking change for anyone using Capybara with another test framework or stand-alone.

Another option is to add some kind of reset hook, so that we could do something like:

<S_CODE_TOKEN>

Somewhere in the Capybara codebase we'd then do something like (pseudocode):

<S_CODE_TOKEN>

This would actually be quite a nice feature, and I think we could do it without breaking backwards-compatibility. The problem is that it's somewhat unclear when to call these hooks. Capybara can have multiple sessions, and it's totally legit to reset one of those in the middle of a test. We don't want to go emptying out people's databases just because they reset a session in the middle of a test. Maybe that's just a question of API design, but I'm not sure.
",jnicklas,2016-05-01 17:44:20
1692,2016-04-28 17:54:56,"@jnicklas I think this may need more analysis -  The way it works currently - Session#reset! calls driver.reset!  which should be synchronous and not return until the browser has moved from the current page to about:blank (or equivalent).  There should be no way for the browser to initiate another request after this (if it is happening then I would think thats a driver bug).   Then wait_for_pending_requests is called to wait for any orphaned requests still being processed by the app to finish.  Once they are done then reset! finishes.   If the new request is coming from a second session that should also be fine because all sessions get reset before the test ends and DatabaseCleaner starts up.  
If this is happening because someone is manually managing sessions and calling DatabaseCleaner after resetting only one session but keeping another session running there is nothing we can do about that, it's user error.
",twalpole,2016-05-01 17:44:20
1692,2016-04-28 19:02:43,"@jnicklas Do you happen to be opening multiple windows in the session (and not closing them) where this is happening (as opposed to multiple sessions) ?  I think only the currently active window gets navigated to about: blank on driver#reset! (in selenium) which means you could potentially be getting a request initiated from another window.
",twalpole,2016-05-01 17:44:20
1692,2016-04-28 19:49:44,"I do have multiple sessions, but not multiple windows in this test. I can't really explain it either, and it's super hard to create a reproducible test case, but I'm _sure_ that the app is indeed receiving requests in between `wait_for_pending` and `reset`.

One possible factor is that we're using Puma as the server for Capybara, and not WebRICK. Could it be an explanation that Puma is ""holding"" a request? That is when we call `wait_for_pending_requests`, the request has already hit Puma, but Puma has not yet let it hit the application?
",jnicklas,2016-05-01 17:44:20
1692,2016-04-28 20:28:46,"I think I actually managed to repro this! https://gist.github.com/jnicklas/754cc8ed42122f52b92abc7196c437e9

It's a bit weird, I'll admit and it took some fiddling with the parameters to get it to fail like this. The Queue is there to make sure that something like I/O flushing doesn't affect the result, the result is the same when using `puts` directly though.

As you can see in the sample output, we receive a request **after** calling reset, and after printing ""done""! In theory this should never happen.

There are a bunch of conditions which seem to have to be met in order for this to fail:
- Server must be saturated with requests
- Multiple sessions must be used
- beforeunload hook which sends an AJAX request (maybe it just needs to be close in time to reset, but I couldn't get it to fail without beforeunload)

So all in all an unlikely scenario, but I think it proves that there is indeed a race condition in there.
",jnicklas,2016-05-01 17:44:20
1692,2016-04-28 20:29:35,"I'm not sure about the repro though, it's really complicated, so please double check that I haven't done anything dumb.
",jnicklas,2016-05-01 17:44:20
1692,2016-04-28 20:38:44,"I guess puma could be holding a queue of requests -- hmmm -- - I'll take a look at the repro case in a bit
",twalpole,2016-05-01 17:44:20
1692,2016-04-28 20:40:58,"The repro doesn't use Puma, just webrick.
",jnicklas,2016-05-01 17:44:20
1692,2016-04-28 22:10:18,"Ok - playing with the repro.rb file --- If instead of `oReq.open(""GET"", ""/ajax"");` one does oReq.open(""GET"", ""/ajax"" + counter) - it works properly.  So I thought maybe it was timing so I added var constant = 10 and did oReq.open(""GET"", ""/ajax"" + constant) - still failed, and it fails even if counter is initially 1.  
  For some reason if the browser has already made a request to the URL - the  before_unload triggered request creates an issue - if it is a new URL everything works properly???  Is Firefox rate limiting requests to the same URL or something?
",twalpole,2016-05-01 17:44:20
1692,2016-04-29 06:33:42,"Yeah, this whole thing is super weird. It's kind of fascinating that this issue actually cropped up pretty consistently in a real app, given how hard it is to replicate. I get the same behaviour with Chrome btw, so I don't think it's anything browser specific.
",jnicklas,2016-05-01 17:44:20
1692,2016-04-29 17:46:11,"@jnicklas Found it - each session creates it's own instance of Server, but doesn't actually start it up when it's sharing between sessions, this means it actually ends up looking at the wrong request counter when trying to close the second session.  I thought I had made sure this case was taken care of, but I guess not.  A potential solution would be to just reset sessions in the reverse order they were created but they're currently stored in a hash so we don't have that info.  A short term fix for your use case would be to specify `Capybara.reuse_server = false`  which would fix the issue, but use a bit more memory.
",twalpole,2016-05-01 17:44:20
1692,2016-04-29 17:49:48,"Actually hashes do iterate in insertion order (since ruby 1.9) so that may actually be a solution to this issue - You may still want to use `Capybara.reuse_server = false` since that ensures errors are raised in the session that created them too.
",twalpole,2016-05-01 17:44:20
1692,2016-04-29 18:25:27,"@jnicklas Please try PR #1693 and see if it fixes the issue on your real app (without Capybara.reuse_server = false).  If so it'll be a good enough fix for 2.7 and for 2.8 I think I'll look at making it so there is an instance of Counter per app instance and the sessions access the correct one.
",twalpole,2016-05-01 17:44:20
1692,2016-05-01 17:44:20,"I've released this as 2.7.1 with the reversing of session resets which should fix this issue for now.  `Capybara.reuse_server = false` will also definitely fix the issue since each session would have a server tracking its requests.
",twalpole,2016-05-01 17:44:20
1691,2016-04-27 17:27:30,"Calling switch_to.parent_frame to return from the current frame fails if the frame has been removed from inside itself.  Reverting to our previous method of storing the frame stack and then iterating back through it solves this.
",twalpole,2016-04-27 18:45:16
1690,2016-04-27 17:24:20,"When using within_frame with the selenium driver, if the frame is removed from within the frame when capybara attempts to return to the parent frame an error is raised - http://stackoverflow.com/questions/35769366/a-is-null-error-while-clicking-on-element-containing-javascript-in-capybara-s?noredirect=1#comment61326872_35769366
",twalpole,2016-04-27 18:51:30
1690,2016-04-27 18:51:30,"Fixed via PR #1691 - will release in 2.7.1
",twalpole,2016-04-27 18:51:30
1689,2016-04-27 08:18:29,"error -

<S_CODE_TOKEN>

debugging result -

<S_CODE_TOKEN>

then the console crashes without an error
",danilvoe,2016-04-29 19:41:48
1689,2016-04-27 08:40:53,"setting

Capybara.configure do |config|
  config.javascript_driver = :webkit
  config.current_driver = :webkit
  config.run_server = false
end
Capybara::Webkit.configure do |config|
  config.allow_unknown_urls
  config.skip_image_loading
end
",danilvoe,2016-04-29 19:41:48
1689,2016-04-27 10:40:14,"the problem occurs when you use gem searchkisk when performing indexing
",danilvoe,2016-04-29 19:41:48
1689,2016-04-27 11:02:42,"problem only occurs if you are using  - Capybara::DSL
",danilvoe,2016-04-29 19:41:48
1689,2016-04-27 17:50:26,"Somehow you've created an endless loop between two methods - this could occur if Capybara and Searchkick are included into the same object and have some methods named identically.  That being said, there is no reason for those two gems to be included into the same model, so my guess is you're doing something wrong, like including Capybara::DSL into Object?
",twalpole,2016-04-29 19:41:48
1689,2016-04-28 05:48:55,"For yet need both gem. I gave up mixing Capybara :: DSL, and the problem has disappeared, if it is possible to make so that the mixing does not interfere with searchkisk would be great if you can not make it possible to close the issue.
",danilvoe,2016-04-29 19:41:48
1689,2016-04-28 06:13:47,"I don't understand what you're asking - what class are you including Capybara::DSL into?
",twalpole,2016-04-29 19:41:48
1689,2016-04-29 19:41:48,"Closing due to lack of response, we can reopen if/when more info is provided
",twalpole,2016-04-29 19:41:48
1688,2016-04-24 07:03:05,"Please have a look at https://github.com/mattheworiordan/capybara-screenshot/issues/170

After I **upgraded Capybara to 2.7.0** the screenshot gem produced the **screenshots in the project root instead of the default tmp/capybara** and deleted my project directory (really happy to commit to local git very often _lol_).

When I set the path with **save_and_open_page_path it is working** but warning about the deprecation. With **save_path** I can remove the deprecation warning but it **is competely ignored** and all the files are comming to the project root directory again. That's my main reason to think that Capybara has a problem (I only **use** the two awesome gems, so it's just a noob guess)
",AntonTrapp,2016-04-25 02:37:42
1688,2016-04-25 02:37:42,"capybara-screenshot passes absolute paths to capybara, if it's ignoring save_path it's because it hasn't yet been updated to be compatible with capybara 2.7
",twalpole,2016-04-25 02:37:42
1688,2016-04-25 04:15:02,"Thank you very much for the information!
",AntonTrapp,2016-04-25 02:37:42
1688,2016-04-26 19:37:48,"@twalpole thanks for the response.  To save me trawling through the changes in 2.7, any chance you can suggest what needs to change to be compatible then?
",mattheworiordan,2016-04-25 02:37:42
1688,2016-04-26 19:57:54,"@mattheworiordan The first thing save_page and save_screenshot do is call [prepare_path](https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L729) passing in the filename/path passed to them and the default extension types (html/png).  If Capybara.save_path is defined Capybara should handle relative filenames correctly and you should be able to just pass a relative filename/path and it should save in the right place (or use Capybara.save_path to build an absolute path), if save_path is not defined and the previous Capybara.save_and_open_page_path is non nil you need to do what you were previously doing.
",twalpole,2016-04-25 02:37:42
1687,2016-04-21 23:32:39,"This will allow #check, #uncheck, #choose to click an associated label to toggle the checkbox/radio button state if the checkbox/radio button are not inter-actable (non-visible)
",twalpole,2016-04-25 02:36:08
1686,2016-04-19 16:53:25,"I found the discussion on stackoverflow [multiple-sessions-in-capybara](http://stackoverflow.com/questions/36712779/multiple-sessions-in-capybara/36721112?noredirect=1#comment61033495_36721112) very enlightening. Please include the examples in the Capybara README.md. I believe that others would benefit.  Thank you.
",mikejramsey56,2016-04-22 18:02:43
1686,2016-04-22 18:02:43,"Fixed via README update
",twalpole,2016-04-22 18:02:43
1685,2016-04-18 16:00:02,"We've got a bug in our code that shows up depending on the users browser timezone.  We've been able to fix it, but would love to have an acceptance test to ensure it doesn't happen again, but we have trouble trying to influence the timezone that capybara is using for it's javascript operation (currently with poltergeist as the driver).

We've found a few resources online, e.g. 

http://stackoverflow.com/questions/19532425/how-to-stub-a-specific-timezone-for-capybara-testing

and have tried setting the timezone via the command line setting of env vars, and also using the zonebie gem to no avail:

<S_CODE_TOKEN>

Any ideas how we could manipulate the timezone that capybara/poltergeist (or other js driver) things they are running in?

Many thanks in advance
",tansaku,2016-04-18 16:31:31
1685,2016-04-18 16:31:31,"Please ask howto questions on the mailing list as requested in the README - also note that TZ in the ""browser"" is not a function Capybara has any control over - although the specific driver you're using may be able to set it.
",twalpole,2016-04-18 16:31:31
1685,2016-04-19 07:06:24,"apologies - sorry - most other projects are happy to get general questions in their issues and I keep forgetting that capybara is an exception to that.  Thanks for your input.
",tansaku,2016-04-18 16:31:31
1684,2016-04-14 21:12:37,"Make locator optional in finders and actions where it makes potential sense
",twalpole,2016-04-20 20:06:58
1683,2016-04-13 19:07:25,"gem version 2.7.0
also using gem `capybara-screenshot` 1.0.12
### Steps to Reproduce
1. Setup `env.rb` with `Capybara.save_and_open_page_path = 'tmp/screenshots'`
2. Run your tests with a failure
3. Observe that there is a deprecation warning to use `#save_path` instead
4. Observe that there are both the .png (screenshot) and .html (page) files in `./tmp/screenshots`
5. Change the line in `env.rb` to `Capybara.save_path = 'tmp/screenshots'`
6. Run your tests with a failure
### Expected

To see two files in `./tmp/screenshots`, the .png screenshot and the .html file
### Actual

The .png screenshot shows up in working directory (`.`) whereas the .html respects the configuration and shows up in `./tmp/screenshots`
",f3ndot,2016-04-13 19:50:19
1683,2016-04-13 19:50:19,"capybara-screenshot passes absolute paths to `#save_screenshot` and has not been updated to use `#save_path` - If you call page.save_screenshot yourself you will see that it does use `#save_path` when passed a relative path (or nothing).

Closing since it's an issue in capybara-screenshot
",twalpole,2016-04-13 19:50:19
1682,2016-04-13 10:16:39,"I am using rspec 3.4 and have updated capybara from 2.6.2 to 2.7 today.
After the update a few tests failed, e.g.: 
expect(""<input value=\""published,unpublished\"" class=\""hidden form-control\"" type=\""hidden\"" name=\""search[state]\"" id=\""search_state\"" />"").to have_css('input[type=""hidden""]') 
- works under 2.6.2
",Nghi93,2016-04-13 15:54:38
1682,2016-04-13 15:54:38,"Assuming you mean expect(page).... (rather than an empty string) this is as expected, the fact it worked in 2.6.2 with the rack-test driver was a bug. An input of type hidden is not visible on the page and is therefore not found by default.  Passing `visible: :all` as an option to find will make Capybara find invisible elements too
",twalpole,2016-04-13 15:54:38
1681,2016-04-09 17:01:31,"When i try to upload 1 image for testing, it works fine.
However, I hit an error when I upload 2 images (2 single file upload) 
Any kind soul to help on this issue i faced?

Below is my code with the error encountered.

attach_file 'category_image', ""spec/support/images/test.jpg""
attach_file 'category_banner', ""spec/support/images/test.jpg""

NoMethodError:
       undefined method `banner_will_change!' for #Category:0x007f8cd9a80e18
       Did you mean?  name_will_change!
",yongquanben,2016-04-09 17:52:47
1681,2016-04-09 17:52:47,"Please ask howto questions in the mailing list as requested at the top of the README - you'll want to post a stacktrace for the error when you do.
",twalpole,2016-04-09 17:52:47
1680,2016-04-09 12:20:21,"RSpec expectations allows you to [compose matchers](https://www.relishapp.com/rspec/rspec-expectations/v/3-4/docs/compound-expectations) with `and` (`&`) and `or` (`|`).

It seems it's not possible to use composed matchers with capybara:

<S_CODE_TOKEN>

(I also tried with `or`)
",agross,2016-04-09 17:16:53
1680,2016-04-09 15:18:11,"This is tested for in the specs so it should work, make sure rspec/expectations is required before capybara.
",twalpole,2016-04-09 17:16:53
1680,2016-04-09 17:16:53,"Thanks, running `RSpec.configure` before requiring capybara did the trick.
",agross,2016-04-09 17:16:53
1679,2016-04-07 00:31:53,"Implementation of reusable sets of filters for selectors - This came out of Issue #1463 .

I'm not convinced this is hugely useful, although for projects that build a large number of custom selectors it may be. Thinking about it.
",twalpole,2016-04-26 00:06:16
1679,2016-04-26 00:05:57,"I've decided I like this for sharing filters between selectors - merging
",twalpole,2016-04-26 00:06:16
1678,2016-04-06 20:03:39,"A ""bald contenteditable"" is one added to an element like this:

<S_CODE_TOKEN>

Rather than this:

<S_CODE_TOKEN>

The latter is currently supported by Capybara, but the former is not.
",chadoh,2016-04-07 02:12:25
1678,2016-04-06 20:05:55,"So far, all I've added is a test to expose the problem. However, I have not had luck running this test locally! Is there a way that I can run a single test locally? I tried to do this in several different ways, such as the trusty `rspec lib/capybara/spec/session/node_spec.rb:129`, but everything I tried (other than the hella-lengthy & noisy `rake`) gave me this error:

<S_CODE_TOKEN>
",chadoh,2016-04-07 02:12:25
1678,2016-04-06 20:34:40,"@chadoh add a tag to the test you want to run separately 

<S_CODE_TOKEN>

then you can do

<S_CODE_TOKEN>

to run just that test - remove the tag before committing
",twalpole,2016-04-07 02:12:25
1678,2016-04-06 20:46:41,"BTW -- https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable  -- contenteditable is an enumerated attribute - not a boolean one.  As such 

<S_CODE_TOKEN>

is not valid - and it must be assigned a value of ""true"", """", or ""false""
",twalpole,2016-04-07 02:12:25
1678,2016-04-06 21:28:11,"@chadoh - Here is the link to the HTML spec about the contenteditable attribute - https://w3c.github.io/html/editing.html - Not specifying any value leads to ""the inherit state, which is the missing value default (and the invalid value default).""  - so it is not the same as contenteditable=""true"" and the element should only be editable if it has an editable parent - I think this PR is probably invalid
",twalpole,2016-04-07 02:12:25
1678,2016-04-07 02:12:25,"Ah, good catch @twalpole! Thanks!
",chadoh,2016-04-07 02:12:25
1677,2016-04-06 18:34:07,"This adds a label selector that finds label by id or text, and also support a :for filter that takes either a string to match against the 'for' attribute or a field element that the label is associated with
",twalpole,2016-04-06 19:39:18
1676,2016-04-05 16:44:55,"Deprecate save_and_open_page_path in favor of save_path.  The setting is used by save_page, save_and_open_page, save_screenshot, and save_and_open_screenshot so the name save_and_open_page_path doesn't really make sense.  The behavior is also changing when any of the mentioned methods are passed a relative path it will now be interpreted as relative to the setting of Capybara.save_path, whereas previously they were interpreted as relative to Dir.pwd
",twalpole,2016-04-05 18:16:23
1675,2016-04-05 10:00:50,"The anchor links in the table of contents at http://www.rubydoc.info/github/jnicklas/capybara/master don't work, because `yard`'s auto anchors differ from the content. But GitHub's work. So I added explicit heading anchors so they should work on both sites.
",afoster,2016-04-05 16:40:40
1675,2016-04-05 16:40:54,"Thanks!
",twalpole,2016-04-05 16:40:40
1674,2016-04-05 00:04:45,"@jferris @mhoran @jonleighton @route  Heads up - I plan to release Capybara 2.7.0 in the next few days.  

I believe the only changes that are relevant for drivers are the deprecation of #browser_initialized from the driver public API, and the requirement that Driver#reset! now be synchronous.  Tests were added for this behavior and both capybara-webkit and poltergeist appear to pass, so no updates should be needed.  

The biggest change from a driver maintenance perspective is the middleware added to the server instance Capybara starts.  This tracks open requests and will hopefully prevent requests continuing in the server after session resets/during database clearing and reduce the issue reports filed because of this.
",twalpole,2016-04-07 16:21:33
1674,2016-04-05 00:07:48,"Awesome! The middleware sounds like a great feature.
",mhoran,2016-04-07 16:21:33
1674,2016-04-05 09:17:54,"@twalpole thanks for heads up, agree on middleware wanna see it in action.
",route,2016-04-07 16:21:33
1674,2016-04-07 16:21:33,"Released
",twalpole,2016-04-07 16:21:33
1673,2016-04-04 23:04:07,"Warn when unused parameters are passed to SelectorQuery
",twalpole,2016-04-04 23:07:00
1673,2016-04-04 23:06:44,"Fixes issue #1395 
",twalpole,2016-04-04 23:07:00
1672,2016-04-04 19:07:29,"Make sure `#reset` for the selenium driver is synchronous and handles modals that may appear.
",twalpole,2016-04-04 21:40:18
1672,2016-04-04 22:36:22,"This is amazing! Thank you so much for putting so much effort into this.
",jnicklas,2016-04-04 21:40:18
1672,2016-04-04 22:39:01,"@jnicklas you're welcome -- I tried it with capybara-webkit and poltergeist and the removal of the assert_no_selector in Session#reset! didn't appear to affect them, so hopefully it doesn't --- I'm sure we'll hear if it does :)
",twalpole,2016-04-04 21:40:18
1671,2016-03-30 19:25:29,"I think that this was a futile attempt to resolve problems with restting sessions which should be much better handled by the addition of `wait_for_pending_requests`.

Closes #1670
",jnicklas,2016-04-04 21:31:23
1671,2016-03-30 20:55:02,"The problem with wait_for_pending_requests is that it's not 100% reliable when a server is shared between sessions
",twalpole,2016-04-04 21:31:23
1671,2016-03-31 06:13:31,"Interesting! Why is that?

Regardless I'm not actually convinced that the assert removed in this PR actually does _anything_, at least for Selenium. Other drivers might rely on it to some extent, I'm not sure, but I'm pretty sure that `nagivate.to` is synchronous for Selenium, so this really _shouldn't_ make any difference.
",jnicklas,2016-04-04 21:31:23
1671,2016-04-01 16:20:09,"I misspoke on this, the issue with wait_for_pending_requests, when the server is shared, is that the middleware has no way to determine which session the requests are coming from, so reseting one session will wait for both sessions requests to end which, as far as reset being synchronous is concerned, isn't really an issue.    I'll add a test to make sure reset is synchronous and then look at merging this.
",twalpole,2016-04-04 21:31:23
1671,2016-04-04 21:31:23,"Included in PR#1672
",twalpole,2016-04-04 21:31:23
1670,2016-03-30 18:16:47,"So this issue is totally my fault :( I'm experiencing an intermittent failure in an application where an alert appears just after a browser has reset the session, since it's in an unload handler. Here's how Capybara currently implements reset:

<S_CODE_TOKEN>

In my case `assert_no_selector` is raising an unhandled alert error.

The reason `assert_no_selector` is called here in the first place is to make sure that resetting the session is synchronous. Instead of relying on the driver to make sure that it is, I thought that I could cheat and let Capybara handle this for the drivers. It seems that that was a mistake. That already became apparent in the need for the `browser_initialized?` hack. Of course we could handle this annoying case here as well, but there's no really way to rescue a Selenium-specific error here that isn't totally gross.

IMO we should cut out losses on this one and simply force the driver to make sure that restting is synchronous.
",jnicklas,2016-04-04 21:40:21
1670,2016-03-30 18:18:38,"Stack trace: https://gist.github.com/jnicklas/f921d3e671547dc175c9f413c6da5426
",jnicklas,2016-04-04 21:40:21
1670,2016-03-30 20:51:06,"We can fix this in the selenium driver by checking for no elements in its reset! method, but removing the check from Session#reset! would be a breaking change for all the other drivers
",twalpole,2016-04-04 21:40:21
1670,2016-03-30 21:56:59,"@jnicklas Does the change in the selenium_driver_reset_synchronous branch fix your issue?
",twalpole,2016-04-04 21:40:21
1670,2016-03-30 22:20:13,"@mhoran @route @jonleighton @jferris  Is reset! in your drivers currently synchronous, if not is it something that could be easily implemented?
",twalpole,2016-04-04 21:40:21
1670,2016-03-31 02:18:31,"We don't do anything explicitly asynchronous in capybara-webkit on reset, and removing the `assert_no_selector` resulted in no failures. I'm in the process of porting capybara-webkit over to Chromium Embedded (CEF), as QtWebKit is dead. CEF is much more asynchronous than QtWebKit, and I've made every effort to wrap up asynchronous calls to be synchronous. However, there could be an issue here, and it's probably something I'll have to work around when the time comes.
",mhoran,2016-04-04 21:40:21
1670,2016-03-31 16:18:54,"@twalpole I believe that poltergeist works properly on this
",route,2016-04-04 21:40:21
1670,2016-12-23 22:13:24,"@mhoran Thanks for mentioning capybara-webkit is moving to use CEF. Just to report that we did run into the async session reset issue with capybara-webkit (sometimes session wasn't reset in time and leaked into the following spec). Adding back the single `assert_no_selector` line in capybara seems to solved it.

I am not sure if it's worth digging into the root cause at this point, but wonder if you have any insights. Thanks!",starsirius,2016-04-04 21:40:21
1670,2016-12-23 22:22:40,"@starsirius Do you happen to be using database_cleaner, and are triggering clean with an `after` block, rather than an 'append_after' block as database_cleaner recommends? - https://github.com/DatabaseCleaner/database_cleaner#rspec-with-capybara-example",twalpole,2016-04-04 21:40:21
1670,2016-12-23 23:30:33,"@twalpole No. My app doesn't have a database so we don't use database_cleaner.

By the way, the temporary fix in my own [fork](https://github.com/starsirius/capybara/commit/c056ddb7979804d5ef4fdf31eca2621a9889886d) (capybara 2.7.1, because of capybara-webkit, + that single `assert_no_selector` line) seems to fix the issue. :(",starsirius,2016-04-04 21:40:21
1669,2016-03-27 18:27:15,"I am testing an OAuth 2 provider using Oauth2 gem, Capybara, RSpec and Poltergeist.

The Capybara server does not seem to respond to the Oauth2 requests:

<S_CODE_TOKEN>

Capybara setup:

<S_CODE_TOKEN>

It seems that the server only responds when there is a `visit`, `get` or other HTTP request called from within the spec. I guess that the server is started and stopped with each request.

This creates some unexpected behavior (at least for me). I wonder if it would make more sense to start the server at the beginning of all specs, and stop it after? Or perhaps I am missing something?

Alternatively, is there a way to start and stop the Capybara explicitly?
",georgeu2000,2016-03-27 19:01:15
1669,2016-03-27 19:01:15,"OK, I found the issue. The spec must be tagged as `:js`. Otherwise it uses Rack::Test and the server is not started.
",georgeu2000,2016-03-27 19:01:15
1668,2016-03-24 18:19:25,"Move the html element selector definitions from the xpath gem into the capybara selectors and modify them so nil locators devolve into just finding element types
",twalpole,2016-03-24 21:19:15
1668,2016-03-30 13:11:59,":tada: 
",jnicklas,2016-03-24 21:19:15
1667,2016-03-18 21:40:46,"In eventmachine/eventmachine#703, we found that Capybara.server_host defaults to `127.0.0.1`, while Thin defaults to `localhost`. With the new EventMachine 1.2.0 gem, we're using the system's `getaddrinfo` to return both IPv4 and IPv6 addresses in whichever order the local operating system prefers. This allows Thin to bind to `::1` by default, but Capybara's default of `127.0.0.1` fails to connect.

By allowing Capybara to also follow the local operating system preference, both client and server will bind and talk on the same local IP address.
",sodabrew,2016-03-19 19:28:21
1667,2016-03-18 21:58:32,"https://github.com/jnicklas/capybara/commit/89d00c4f0801a1d00f57c4bedb81c23b888e18df   - host (which over time became the server_host value) was specifically set to 127.0.0.1 many years ago  to ""prevents some issues"" .  I have no clue what those issues were, or if they would still be issues.  Other than that this makes sense to me - lets see if @jnicklas has any recollection of what the issues were? :)
",twalpole,2016-03-19 19:28:21
1667,2016-03-18 22:49:25,"I think that it was maybe some kind of CORS issue? I can't quite remember. Also it's possible that `localhost` is not actually set, if it's not included in the host file. On the other hand from what I understand `localhost` should be resolved by DNS if it's not set in the local configuration.

I do want to point out thought that this is a breaking change. A lot of people have written a lot of test suites which assume that Capybara binds on 127.0.0.1. If this is changed it's going to annoy a lot of people.
",jnicklas,2016-03-19 19:28:21
1667,2016-03-19 19:28:21,"@sodabrew  As @jnicklas pointed out, this would be a breaking change - so I'm not going to merge it.  I did however cherry pick the second commit which makes find_available_port check for a port on the correct interface.  For your team to maintain the same behavior it should just be a matter of you setting `Capybara.server_host = 'localhost'` now
",twalpole,2016-03-19 19:28:21
1667,2016-03-19 21:20:58,"Yes sounds reasonable, thanks! And I've at least made a little paper trail so someone with this error and the updated EventMachine should be able to find this config workaround easily on their favorite search engine :)
",sodabrew,2016-03-19 19:28:21
1666,2016-03-14 21:55:26,"My observers work fine in my app and in my regular tests, but Capybara feature tests do not trigger any observers, no matter what I try. Has anyone dealt with this or is this a known or intentional behavior?

I'm using the latest version of RSpec, Capybara (github masters) and Rails 5.0.0beta3.
",gregblass,2016-03-14 23:58:42
1666,2016-03-14 23:58:42,"Ask questions on the mailing list as requested in the README
",twalpole,2016-03-14 23:58:42
1666,2016-03-15 00:01:09,"Sorry about that, and done.
",gregblass,2016-03-14 23:58:42
1666,2016-07-28 15:04:59," Linking to the mailing list post in case others find this:
https://groups.google.com/forum/#!searchin/ruby-capybara/rails-observers/ruby-capybara/lRb_i_52O6g/M5lHyjKoKQAJ
",phereford,2016-03-14 23:58:42
1665,2016-03-10 05:55:57,"I added Session#last which returns the last node found matching the given criteria.  
",Tmee,2016-03-17 01:31:01
1665,2016-03-17 00:07:25,"Hi @jnicklas, any thoughts on bringing this into the next release?  
",Tmee,2016-03-17 01:31:01
1665,2016-03-17 00:21:33,"@Tmee jnicklas doesn't really work on Capybara anymore - I'm the person doing most development nowadays.  My concern is whether `#last` justifies expanding the API .  Often while testing one wants to access the first element (or at least an element if any matches exist), I'm not sure how often last would be used, and it's already easy enough to just do `all(...).last`
",twalpole,2016-03-17 01:31:01
1665,2016-03-17 00:25:45,"#first and #all  (and #last if added) also have the major downside of being non-reloadable elements, which can lead to all sorts of flaky test issues.
",twalpole,2016-03-17 01:31:01
1665,2016-03-17 00:26:07,"ah, sorry about the @mention jnicklas.  Ok, I noticed I was typing `all(...).last` a bunch and thought it would be nice to have a `last(...)` similar to the awesome `first(...)` finder.  But no worries, thanks for getting back to me!
",Tmee,2016-03-17 01:31:01
1665,2016-03-17 00:27:41,"If you don't mind explaining - what type of testing are you doing that you're calling `all(..).last` all the time?
",twalpole,2016-03-17 01:31:01
1665,2016-03-17 00:33:11,"Just UI automation specs with selenium.  There have been a hand full of times, similar to the amount I use #first, that I've wanted to check the last element in table or in a list where I have to write out `all(...).last`.
",Tmee,2016-03-17 01:31:01
1665,2016-03-17 00:54:30,"ok -- in most cases you're better off using last-child/last-of-type css selectors with `#find` if/when possible - People really tend to overuse #all/first and it causes a large number of the issues people have with Capybara being 'flaky'  due to it's lack of waiting behavior and the resultant elements being non-reloadable
",twalpole,2016-03-17 01:31:01
1665,2016-03-17 01:30:44,"ok, thanks for the info! 
",Tmee,2016-03-17 01:31:01
1664,2016-03-10 05:14:50,"I added Session#last which will return the last found node for a given criteria.  I used the Session#first as a model for documenting, but if I need to edit/add anything to the PR just let me know!  
",Tmee,2016-03-10 05:34:12
1663,2016-03-09 15:04:17,"Hi,
I'm using the Rails 5 beta 3 with action cable, the integration works fine in development but when I try a feature test through capybara, it doesn't seem to hit the channel actions.

I'm using Portergeist and configured puma as capybara's server. Also I'm using es5-shim and es6-shim.

Has anyone else experienced this or knows any workaround?

Thanks!
",smarquez1,2016-03-10 06:22:34
1663,2016-03-10 06:22:34,"Use the master branch and specify `Capybara.server = :puma`
",twalpole,2016-03-10 06:22:34
1662,2016-03-05 19:01:43,"Hi,

First off - I've been using capybara for a few years now and i love it.  So thanks for all the hard work.  :)

Feature request: `execute_script` should accept optional `*args` attribute.

Note: I'm more than happy to work on a pull request for this feature, but wanted to open an issue first to discuss to see if this had already been thought of and not implemented for some reason.

Use case: I am using site_prism as my page object model and sometimes I want to execute javascript on one of the selenium elements which I have in my object model.

So instead of writing:

<S_CODE_TOKEN>

I could write:

<S_CODE_TOKEN>

(where `@home.login_bar` is my site_prism element)

One reason I can come up with why capybara's execute_script only takes one argument, and selenium webdriver takes 2 arguments (js and elements), is that either of the other drivers (poltergiest, capybara-webkit) only support the one js argument.  But I haven't invested the time to see if it's possible in the other drivers under the covers or they just chose to leave it out in the public ruby api as well.

Right now I am simply doing:

<S_CODE_TOKEN>

But it would be more convenient if I didn't have to think about the interface difference.  And it took me a far amount of googling/experimentation to even get that to work, so I think capybara supporting it (even if for supported drivers) would be helpful to others.

Thanks,
Tom
",tommyh,2016-03-06 01:31:48
1662,2016-03-06 00:52:05,"This has been discussed before, and as you surmised the issue is whether or not it's possible to pass element references to the browser in the other available drivers.  It requires elements having a unique id that can be sent back and forth, as well as the ability to serialize/deserialize random other arguments and then pass them through to JS to be evaluated.  When this was previously discussed it wasn't possible in at least one other driver available at the time, not sure if that has changed.   We try not to add functionality that can't be implemented in other drivers to the capybara DSL because that ends up being just as bad as calling methods through page.driver (from a cross driver test usage perspective) but with the added benefit of not being able to tell it's not cross driver compatible when looking at the test code
",twalpole,2016-03-06 01:31:48
1662,2016-03-06 01:31:21,"Gotcha, I've confirmed that the other drivers don't have it in their public api, and I'm not motivated enough to chase down if the unique id requirement has been improved.

Glad you gave me this feedback before I invested time in a pull request.  :)

Now that I think of it, I might try monkey patching this behavior in our project.  If I do that, I'll post that code on this issue if it would help others.

Thanks again,
Tom

> On Mar 5, 2016, at 4:52 PM, Thomas Walpole notifications@github.com wrote:
> 
> This has been discussed before, and as you surmised the issue is whether or not it's possible to pass element references to the browser in the other available drivers. It requires elements having a unique id that can be sent back and forth. When this was previously discussed it wasn't possible in at least one other driver available at the time, not sure if that has changed. We try not to add functionality that can't be implemented in other drivers because that ends up being just as bad as calling methods through page.driver (from a cross driver test usage perspective) but with the added benefit of not being able to tell it's not cross driver compatible
> 
> —
> Reply to this email directly or view it on GitHub.
",tommyh,2016-03-06 01:31:48
1662,2016-03-07 09:47:22,"If you are only using one driver (ie Selenium because you're using Sauce Labs), then here's a monkey patch which has been working well for me so far:

<S_CODE_TOKEN>
",tommyh,2016-03-06 01:31:48
1661,2016-03-01 09:34:53,"Hi @jnicklas 
I got  a module named `addressable` in `app/models/concerns`, to manage `addresses` `phones` and `faxes`. After I upgrade `capybara` to latest version, all my feature tests were failed. And failure message: 

<S_CODE_TOKEN>

I noticed version 2.6.2 is forced dependency on gem `addressable`, did it override my `Addressable` ? and what need I do?

Any thoughts? 
",cod7ce,2016-03-01 13:14:06
1661,2016-03-01 13:14:06,"Move Capybara back to 2.5.x, or change/scope the name of your addressable module
",twalpole,2016-03-01 13:14:06
1661,2016-04-12 20:27:59,"Why should client code be changed because of a test dependency ? That is still an issue imho.
",kofronpi,2016-03-01 13:14:06
1661,2016-04-13 17:35:28,"@kofronpi - so if you had an app dealing with rodents that happened to have a Capybara model in it, you would require Capybara to change its class/module names so you can use it to test? 
",twalpole,2016-03-01 13:14:06
1660,2016-02-26 19:35:51,"This PR adds some missing documentation for the `attach_file` method, which takes an options hash but didn't previously document what parameters it accepted. Please let me know if the descriptions make sense.

This is a fix for #1659
",alextaylor000,2016-03-01 19:01:08
1660,2016-02-26 21:10:37,"I've added a couple of comments to clarify things --  Also when adding documentation only PRs - if you add [ci skip] to end of your commit message it will prevent travis from wasting time doing builds
",twalpole,2016-03-01 19:01:08
1660,2016-02-27 22:34:08,"@twalpole, thanks for the feedback (and the tip about `[ci skip]`). I've updated the PR based on your feedback.

One thing I wasn't entirely sure about was what the default value for `multiple` is. From what I understand about [how the Selector is loaded](https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb#L283), it appears to be `true`, but let me know if I've got this wrong.
",alextaylor000,2016-03-01 19:01:08
1660,2016-02-28 18:11:22,"@alextaylor000 From https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb#L287 you can see the `multiple` option doesn't have a default, so it's ignored unless passed in.  A `default` option would be passed in if there was a default value (like the `disabled` filter above) --  `boolean: true` is just a syntactic sugar instead of passing `valid_values: [true,false]` to the filter 
",twalpole,2016-03-01 19:01:08
1660,2016-02-29 06:42:00,"Thanks for the notes, I think I was looking too far into `file` to figure out those default values. PR has been updated.
",alextaylor000,2016-03-01 19:01:08
1660,2016-03-01 19:01:11,"Thanks!
",twalpole,2016-03-01 19:01:08
1659,2016-02-25 20:21:05,"The documentation for `Capybara::Node::Actions#attach_file` doesn't specify the options that can be passed to it - for example, passing `:match => :first` to get the first match in the case of ambiguous selectors.

I'm happy to submit a PR updating the relevant docs, I just wanted to confirm that the valid options are whatever is valid for `Class: Capybara::Query`, i.e.:

<S_CODE_TOKEN>

Thanks :)
",alextaylor000,2016-03-06 00:54:56
1659,2016-02-25 20:36:07,"The allowed options would be the ones allowed by #find plus any extras added by the :file_field selector however some don't really make any sense - :text for instance since a file field doesn't have text content, the count ones (count, maximum, minimum, between) don't really make any sense in this context, visible doesn't make sense since you can't set an invisible file field - disabled for the same reason - so I guess the full list of options that may make some sense is :match, :exact, :wait, :multiple
",twalpole,2016-03-06 00:54:56
1659,2016-02-26 01:36:57,"Great, thanks @twalpole! PR is cookin'.
",alextaylor000,2016-03-06 00:54:56
1659,2016-03-06 00:54:56,"Closed through PR #1660 
",twalpole,2016-03-06 00:54:56
1658,2016-02-23 14:29:34,"In the README, ""rspec"" was misspelled as ""rpsec"" in one place. While I was in there, I noticed a few spots where the official ""RSpec"" capitalization wasn't used, so I went ahead and made those consistent as well.

Thanks for this great library! Hopefully someday I'll have a more substantive PR to contribute =]
",CodingItWrong,2016-02-24 03:50:14
1658,2016-02-24 03:50:18,"Thanks
",twalpole,2016-02-24 03:50:14
1657,2016-02-23 13:21:28,"I have issue with testing uploading multiple files with `capybara` using `cocoon`. How can I find all fields with id: ""image"" and attach to each of them file?

I found some decision, but it don`t work:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Error: `Unable to find file field #<Capybara::Element tag=""input"" path=""/html/body/div/div/div/form[@id='new_post']/div[@id='educations']/div[1]/input[@id='image']"">`
",TeTiRoss,2016-02-23 16:35:35
1657,2016-02-23 16:35:35,"questions on how to use capybara are not issues.  Please post questions to the mailing list as requested in the README 
",twalpole,2016-02-23 16:35:35
1656,2016-02-23 02:13:41,,JuanitoFatas,2016-02-24 03:49:07
1656,2016-02-24 03:49:09,"Thanks
",twalpole,2016-02-24 03:49:07
1655,2016-02-19 04:19:26,"We are using ~> 2.6.0 and started receiving a visibility related regression.

We're doing:

<S_CODE_TOKEN>

but get warnings the element next to it would receive the click

<S_CODE_TOKEN>

It turns out this is because of an extra long option causing the displayed options to be very wide; and Capybara thinks that the non-displayed options would overlap, maybe due to z-index?, with the selected option.

![would_receive_click](https://cloud.githubusercontent.com/assets/365751/13166440/d4aac184-d717-11e5-8cef-f128958c5edf.png)
",CloCkWeRX,2016-02-19 04:45:28
1655,2016-02-19 04:41:26,"Since all capybara does for select_option when using selenium is tell selenium to click the option unless it's already selected -- this would seem to be a selenium issue.  If you're not already using the latest selenium-webdriver try updating - If you are you may want to report an issue on the selenium project.

As a side note you could write your code as

<S_CODE_TOKEN>

it's not a great benefit when dealing with option elements since the :option selector doesn't add any extra filters, but getting in the habit of using the provided [selectors](https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb#L279) can lead to better reading tests with more flexibility
",twalpole,2016-02-19 04:45:28
1655,2016-02-19 04:45:28,"Looks like https://github.com/SeleniumHQ/selenium/commit/b21a4f52d37588d2938aace2f47c93d442cd052e is probably the fix for your issue - and was released in selenium-webdriver 2.52.0
",twalpole,2016-02-19 04:45:28
1654,2016-02-17 00:23:34,,twalpole,2016-03-09 22:06:29
1654,2016-02-17 00:24:45,"ActionCable can't be tested using webrick -- allow for registering server types to make it easier to use other server types.  :webrick and :puma registrations provided
",twalpole,2016-03-09 22:06:29
1653,2016-02-16 10:20:13,"Is there any work in progress that will address the issue raised in this SO post:

http://stackoverflow.com/questions/17203986/setting-a-cookie-with-javascript-doesnt-work-in-poltergeist-and-or-phantomjs

And in particular a good way of addressing this issue without going through the deprecated browser method?

Many thanks in advance
",tansaku,2016-02-16 13:58:28
1653,2016-02-16 13:58:26,"Ask questions on the mailing list as requested in the README,and when you do make it clear what exactly you're asking about since that SO question has an accepted answer
",twalpole,2016-02-16 13:58:28
1652,2016-02-04 09:57:58,"Hello,
I'm using capybara, to visit page, I put path such as ""admin_root_path"" but I got an error 

<S_CODE_TOKEN>

It's really hard to fix.. Please let me know why it works like this. Actually this code was going well few months ago but I don't know why it's not working now.

Thank you!
",whitelka,2016-02-08 22:27:30
1652,2016-02-04 13:07:24,"Same here. The error was introduced at version 2.6.0.
",Sa-ryong,2016-02-08 22:27:30
1652,2016-02-04 18:07:33,"What do you have Capybara.app_host set to?
",twalpole,2016-02-08 22:27:30
1652,2016-02-08 16:47:07,"Oh, I was testing scoped route. For me, Capybara.app_host is set to ""op.lvh.me:3000"".
",Sa-ryong,2016-02-08 22:27:30
1652,2016-02-08 21:20:51,"This url lacks a scheme. It should probably be `http://op.lvh.me:3000`
",abotalov,2016-02-08 22:27:30
1652,2016-02-08 22:27:30,"Yeah -- it's unfortunate naming since Capybara.app_host (as shown in the readme) really is more of a base_url than a hostname -- change it to what @abotalov has specified and the issue should go away - If not we can reopen this
",twalpole,2016-02-08 22:27:30
1651,2016-02-03 21:34:36,,twalpole,2016-03-25 16:42:11
1650,2016-02-03 19:44:44,,twalpole,2016-02-17 00:23:02
1649,2016-02-01 18:58:35,"# visible?, #disabled?, #checked?, #selected? should return a boolean as documented - this was not the case with the rack_test driver which was instead returning the attribute value for some of the predicates.
",twalpole,2016-02-01 21:05:07
1648,2016-02-01 17:06:28,,paulmenzel,2016-02-01 17:16:59
1648,2016-02-01 17:17:03,"thanks
",twalpole,2016-02-01 17:16:59
1647,2016-01-29 09:00:53,"Hi, we have a test

<S_CODE_TOKEN>

However, this fails, even if the element has this class. `textarea[:class]` is empty.

Interacting with the browser sometimes seems to fix the issue.

Some pictures:

<img width=""787"" alt=""screen shot 2016-01-29 at 9 59 28 pm"" src=""https://cloud.githubusercontent.com/assets/30030/12671316/96fe6bbe-c6d3-11e5-82e3-6b3097185e39.png"">

After clicking some other fields, generally interacting with the browser:

<img width=""797"" alt=""screen shot 2016-01-29 at 10 00 05 pm"" src=""https://cloud.githubusercontent.com/assets/30030/12671336/b6ca9e18-c6d3-11e5-85df-bb7b6d6ed17c.png"">
",ioquatix,2016-01-29 11:46:31
1647,2016-01-29 11:46:31,"Okay, after a lot of mucking about, I found out the following.

Firstly, I was only updating the validity on 'input' event.

<S_CODE_TOKEN>

But it appears that the `fill_in` method only triggers `blur`. After adding that event `on('input blur', ...)` it worked as expected.
",ioquatix,2016-01-29 11:46:31
1647,2016-01-29 11:46:57,"Perhaps it should be considered to trigger input event when `fill_in` is used, but this may or may not be a bug.
",ioquatix,2016-01-29 11:46:31
1646,2016-01-28 14:26:27,,cafedomancer,2016-01-29 18:36:05
1646,2016-01-29 18:36:08,"Thaks
",twalpole,2016-01-29 18:36:05
1645,2016-01-28 14:07:27,"Hey guys, I'm getting this exception and I can't figure out why.

<S_CODE_TOKEN>
",chalmagean,2016-01-28 19:32:22
1645,2016-01-28 15:32:25,"@chalmagean You'll have more luck with questions on either the mailing list or stackoverflow.
",adsteel,2016-01-28 19:32:22
1645,2016-01-28 19:32:21,"Closing since this is a question and not an issue - please read the top of the README
",twalpole,2016-01-28 19:32:22
1644,2016-01-27 21:37:11,"Yesterday, the tests in my project were passing.  Today, the fail because of 

> "". . . /gems/activesupport-4.2.5.1/lib/active_support/dependencies.rb:274:in `require': cannot load such file -- addressable (LoadError)
>   from /usr/local/rvm/gems/ruby-2.1.3@ion_documentation_engine/gems/activesupport-4.2.5.1/lib/active_support/dependencies.rb:274:in`block in require'""

The only 2 gems that changed in the Gemfile.lock in my project between yesterday and today are
- capybara from 2.6.0 to 2.6.1
- selenium-webdriver from 2.49.0 to 2.50.0

Forcing capybara to 2.6.0 resolves the problem and the tests run again.
In the Gemfile.lock of the version that fails, it has addressable listed, so I don't think the gem is missing entirely.

<S_CODE_TOKEN>

Why would changing to capybara 2.6.1 be breaking tests?  
Thank you for the help.
",hb9358,2016-01-27 23:43:22
1644,2016-01-27 22:09:01,"Hmmm -- it shouldn't be --- 2.6.1 was released because addressable wasn't being included in the current_path_query file - not sure why it would be failing for you.
",twalpole,2016-01-27 23:43:22
1644,2016-01-27 22:12:54,"What version of addressable was being loaded in your gemfile.lock?
",twalpole,2016-01-27 23:43:22
1644,2016-01-27 22:22:21,"Ok -- found it -- require 'addressable' would require addressable 2.4.0 to work ---   I will release Capybara 2.6.2 soon to fix that oversight
",twalpole,2016-01-27 23:43:22
1644,2016-01-27 22:28:10,"Awesome was just about to respond with a sample Gemfile.lock. :+1: 

Thanks
",chrismitchell,2016-01-27 23:43:22
1644,2016-01-27 23:27:08,"I just had a same issue, I resolved it by requiring `addressable/uri` in /lib/capybara/queries/current_path_query.rb:1

this is because the addressable is not a file
",rezadehganpour,2016-01-27 23:43:22
1644,2016-01-27 23:32:15,":speech_balloon: @rezadehganpour 

> I just had a same issue, I resolved it by requiring addressable/uri in /lib/capybara/queries/current_path_query.rb:1
> 
> this is because the addressable is not a file

It _is_ a file in addressable 2.4.0. The issue is that Capybara 2.6.1 created a dependency on addressable 2.4.0 but its gemspec allows any version of addressable (including 2.3.8, which I had, which brought me to this issue :) ).

Changing the `require`  statement in current_path_query.rb, like you did, seems a better solution than constraining the version of addressable in the Capybara gemspec.

Thanks for reporting this @hb9358, and for starting to work on a fix, @twalpole!
",mjgiarlo,2016-01-27 23:43:22
1644,2016-01-27 23:43:22,"2.6.2 released - should be fixed
",twalpole,2016-01-27 23:43:22
1644,2016-01-27 23:51:20,":clap: @twalpole 
",mjgiarlo,2016-01-27 23:43:22
1644,2016-01-28 04:39:48,"2.6.2 fixed the issue for me, thanks @twalpole and @hb9358 for reporting.
",chrismitchell,2016-01-27 23:43:22
1644,2016-01-28 04:41:04,"Yea same here. thanks!
",rezadehganpour,2016-01-27 23:43:22
1643,2016-01-27 19:02:05,"The following commit used `Addressable` to normalize path comparisons: https://github.com/jnicklas/capybara/commit/d6a824c00e8ab9e1d9c76651c729ebe866b2e14b

However, it's now causing a `NameError` exception if the addressable gem is not loaded in the project,
so we're requiring it in this specific location.

_Note:_ It isn't failing in the Capybara suite because `launchy` is required in a bunch of tests files, and this gem automatically loaded addressable since it's a dependency.
",jmbejar,2016-01-27 19:36:48
1643,2016-01-27 19:37:01,"Good catch -- thanks.
",twalpole,2016-01-27 19:36:48
1642,2016-01-22 11:12:27,"Just a syntactic sugar method that would make RSpec expectations a little better to read.

Usage in RSpec would be:

<S_CODE_TOKEN>

Compared to the current available:

<S_CODE_TOKEN>

@twalpole 
",syndbg,2016-01-22 17:49:24
1642,2016-01-22 12:43:32,"Hmm... the Travis Selenium driver doesn't support `#status_code`. 

What's the preferred approach here when you want to test driver-dependant logic?
",syndbg,2016-01-22 17:49:24
1642,2016-01-22 17:49:24,"@syndbg The reason Capybara doesn't already have a have_status_code matcher is because it doesn't really make a lot of sense to check in feature tests (rather in controller tests where capybara isn't used).  

There are two reasons for this:
1. Capybara attempts to emulate a user as much as possible and users don't really see response codes.
2. Browsers automatically follow redirects, etc - so you can't really check for a large portion of the codes you'd want to be testing for.

Instead, in feature tests you should be testing for content that appears on pages, which indirectly is testing the status codes, i.e. if the correct content appears you know the response was a 2xx 

To answer your question though, driver feature specific tests are handled through :requires metadata on the tests as seen at https://github.com/jnicklas/capybara/blob/2.6_stable/lib/capybara/spec/session/response_code.rb#L2

On a separate note, the matchers in Capybara generally employ a waiting behavior and provide support for RSpec as well as minitest, etc.  A good example of how something like this would be implemented is the have_title (or have_current_path) matcher, so if you have other matcher contributions you'd like to make in the future please follow those as examples, and probably ask on the mailing list mentioned in the README whether they would be considered before putting in the work.

Thanks
",twalpole,2016-01-22 17:49:24
1641,2016-01-21 10:13:32,"Steps to reproduce:
Capybara.app_host = 'http://example.com/#/'
Capybara.visit('line/1')

ExpR: Opens http://example.com/#/line/1
ActR: Opens http://example.com/line/1
",askaa,2016-05-04 20:45:30
1641,2016-01-22 17:52:17,"I'm curious as to why you'd ever set Capybara.app_host to 'http://example.com/#/'   ??
",twalpole,2016-05-04 20:45:30
1641,2016-01-22 18:59:30,"I guess such approach is used sometimes for single page applications.
",abotalov,2016-05-04 20:45:30
1641,2016-01-22 19:46:33,"@abotalov In that case I think one should just call visit('#/line/1')  then so it's clear in the test you're setting the target - otherwise calling visit('line/1') is going to be pretty confusing to most people
",twalpole,2016-05-04 20:45:30
1641,2016-05-04 20:45:30,"IMHO this behavior wouldn't make sense -- if you want to visit based on the target portion of the URL then include the '#' in the visit method, otherwise the test becomes ambiguous
",twalpole,2016-05-04 20:45:30
1640,2016-01-20 14:35:38,"Currently, considering rather widely accepted front end conventions, e.g. BEM, the Capybara locator logic of `text, id, title or nested image's alt attribute` isn't catering the needs very well.

Scenario: only classes used in HTML with all content coming from CMS. 

I'd suggest finding a better way for the `locator` and/or also add support for class-based matching.
",ain,2016-01-20 18:10:06
1640,2016-01-20 18:10:06,"Please read README.md and CONTRIBUTING.md 
1. Class based matching is a nightmare in most apps for the reason that classes are specifically designed for reuse on multiple elements which makes most queries ambiguous.  
2. The goal of Capybara is to emulate a user as much as possible, so it doesnt matter where the content for the page is coming from since we're dealing with the assembled displayed page.  In a test scenario that content is repeatable and therefore clicking on a button that says 'Submit Me' is what the user would be doing (id is there for cases where it's not possible to use visible text)
3.  Nothing is stopping you from using Capybara.add_selector to add your own selectors that use whatever locator strategy you want.
4.  Next time you post this kind of issue provide concrete examples to illustrate your point.
",twalpole,2016-01-20 18:10:06
1639,2016-01-20 01:26:03,"…etween sessions.  When using multiple sessions with the same app Capybara, by default, reuses the server.  This means when errors are raised in a session, or requests are made from the browser (ajax, etc) we have no way of knowing which session they are associated with, and therefore errors get raised in only the first session.  A setting Capybara.reuse_server was recently merged into Capybara, but that has the downside of using another port, more memory usage, etc.  This PR adds another method of tracking the session by adding a cookie to the browser and using that to track the session id.  Unfortunately with selenium we can't add a cookie to a domain unless the browser is already on a page on that domain (other drivers can, so it may be worth moving this functionality into a method that can be overridden).  To get around that I added a query parameter to every call to #visit which is stripped out by the middleware, used to identify the session, and then set as a cookie in the browser with the response so further requests should pass it back.  Another thought was to have the browser visit a page in the middleware (like **identify**) before every #visit to set the cookie.  Any thoughts anyone reading this has would be great.
",twalpole,
1638,2016-01-18 23:06:13,,y-yagi,2016-01-18 23:42:14
1638,2016-01-18 23:42:18,"Good catch -- thanks
",twalpole,2016-01-18 23:42:14
1637,2016-01-18 22:59:46,"This adds Capybara.reuse_server (defaults to true).  When set to false Capybara will not create a new server on a new port for each session which allows for raising server errors in the session which caused them.  This also includes  PR #1545 which adds tracking of open requests and delays during session reset until there are no open requests.  This behavior is tested with both reuse_server = true and false
",twalpole,2016-01-18 23:51:59
1637,2016-01-19 01:44:22,"Thank you :heart: 
",jhawthorn,2016-01-18 23:51:59
1637,2016-08-02 23:12:30,"@twalpole I am not sure if I understand what `Capybara.reuse_server` is doing. I'm using RSpec and configured Capybara to use Unicorn as a server (what I use in prod). I would expect that with `reuse_server = false` and `Capybara.reset_sessions!` after each spec, a new Unicorn server would be started for each spec. Am I misunderstanding how this is supposed to work?
",jgonera,2016-01-18 23:51:59
1637,2016-08-03 02:35:40,"@jgonera Capybara.reuse_server determines whether a new app server is run for each session or whether one is shared between multiple sessions.  There is no setting in Capybara that would automatically shut down and start a new server for each spec - it could make testing painfully slow for no real benefit
",twalpole,2016-01-18 23:51:59
1637,2016-08-03 15:41:43,"@twalpole Thank you for a fast reply. What do you mean by ""app server?"" I thought that Unicorn was the app server in my case.

Anyway, I do realize that it would make everything slower but I have a legitimate reason for that. If I stub out calls that my app does to third-party services, the stubs will not be ""unstubbed"" after each example if I'm running Unicorn. The reason for that, I think, is that Unicorn forks a separate process when it's started and after that RSpec/Capybara have no access to that process.

I configure Capybara to use Unicorn like this:

<S_CODE_TOKEN>

Let's say I have a spec file like this (just to illustrate, not a real spec):

<S_CODE_TOKEN>

Assuming that I run those examples in the order they are written, the second one will fail. What I think is happening is this:
- The first example is run and `SomeServiceObject.some_api_call` is stubbed.
- We use `visit` for the first time so Capybara spins up a server. Unicorn forks a worker process.
- Example finishes, RSpec removes the stub but only in the process itself and Unicorn master are running in. Unicorn worker process is untouched.
- The second example is run, but the Unicorn worker still has `SomeServiceObject.some_api_call` stubbed out so it fails.

Restarting the server is one solution that comes to my mind, but if there is anything else I can do to ""unstub"" in Unicorn worker, then I'll happily try that out.
",jgonera,2016-01-18 23:51:59
1637,2016-08-03 17:45:20,"By app server I mean the server instance that is started - in your case that would be Unicorn ( btw, you should really update to the register_server syntax for servers).   Stubbing/mocking is not recommended while running feature tests for many reasons, and with Unicorn I guess there's another one.  Additionally I would guess it also breaks Capybaras open request tracking.   If you insist on stubbing in feature tests and also want to continue to use Unicorn for those tests, I would guess the Unicorn::HttpServer instance has methods to shutdown and restart the worker process(s) that you could call from an rspec after block - you'll probably want to make sure to use `append_after` to attach the block to make sure it is the last thing done after each test
",twalpole,2016-01-18 23:51:59
1637,2016-08-03 21:24:46,"> By app server I mean the server instance that is started - in your case that would be Unicorn

So shouldn't `reuse_server = false` start a new Unicorn for each spec, given that [Capybara resets the session after each example](https://github.com/jnicklas/capybara/blob/07e777742532ba4a0e4957f3241fc4fb6a903e86/lib/capybara/rspec.rb#L21)?

This is getting a bit off-topic, but let me just ask one more question.

> Stubbing/mocking is not recommended while running feature tests for many reasons

Can you point me to some docs describing why? How do people write feature specs for features that depend on third-parties (e.g. payment providers)? Even if you use something like [VCR](https://github.com/vcr/vcr), it's still essentially mocking, just using something like WebMock and not RSpec.
",jgonera,2016-01-18 23:51:59
1637,2016-08-03 22:17:01,"No it shouldn't start a new Unicorn - reset_session! resets changes in the session (basically removes cookies and goes back to a blank page) it doesn't delete the session and create a new one.  If you create multiple capybara sessions using the same driver and application, when `refuse_server` is true there will only be one server serving all those sessions, if `refuse_server` is false there will be one server per session - that's it.

As for no mocking/stubbing - during end-to-end testing you shouldn't be doing things that modify the objects in the app, since then you're no longer testing the whole app.  If you want to fake outside services you either use fake versions of those services that run locally (like https://github.com/thoughtbot/fake_stripe) or use a programmable proxy like [puffing-billy](https://github.com/oesmith/puffing-billy) to fake web responses
",twalpole,2016-01-18 23:51:59
1637,2016-08-03 22:32:57,"I see, thanks!
",jgonera,2016-01-18 23:51:59
1636,2016-01-17 16:02:01,"I experience slow (some minutes) boot time of the server when using a
javascript driver. I saw it was blocking during `connect` but that no
server was running at this time, the server is only started after a
first connection failure. I have been using the following quick
workaround as monkey patch since months:
https://gist.github.com/anonymous/9b160239c098aefb266f, which prevent
doing the first connection attempt (the one before server start) and
it worked well for me.

I wanted to work on a proper fix (by the way I could not find the
mailing list address, sorry for opening an issue directly), but I face
multiple problems: I can't run the test suite easily on master as it
can takes hours to complete, it fails on unrelated specs (I would need
a custom WM as I understand:
https://github.com/jnicklas/capybara/blob/master/.travis.yml#L49-L51),
my ""fix"" breaks existing specs on `Capybara::Server`, and seems to
have side effect on the test suite (`Errno::EADDRINUSE` errors during
`bind`).

I'm very unfamiliar with ruby `Thread` API and don't have rubinius
anymore so this is as far as I could go:
https://github.com/tjouan/capybara/compare/fix-server_responsive-thread_check.
- tjouan/capybara@c3038fb ""fixes"" the last server spec, I think the
  intent was originally to stub the HTTP connection, not to add an
  expectation;
- tjouan/capybara@c26bcec is to allow increasing server wait time, it
  was not enough in my case, first connect is always longer than the
  hard-coded 60 seconds;
- tjouan/capybara@b99fbf2 adds a guard clause to `#responsive?` so it
  returns early and details what may be an issue as I understand it:
  
  <S_CODE_TOKEN>

Here are the errors on Travis CI:
https://travis-ci.org/tjouan/capybara/builds/102936275

The one for MRI seems random, but the one for rbx-2 seems consistent.
",tjouan,2016-01-17 18:35:32
1636,2016-01-17 18:35:32,"The ""mailing list"" is linked to right from the top of the README
- Need help? Ask on the mailing list (please do not open an issue on GitHub): http://groups.google.com/group/ruby-capybara""

The monkey patch you have been using breaks the use of Capybara with multiple sessions, and is why you have test failures after applying it.  Capybara will sshare one server thread amongst multiple sessions that use the same application instance to reduce memory usage, etc.  Because of this the session first attempts to connect to an existing server instance (that may exist in another session - the first responsive? call) and if that connection is refused it then starts up a new server thread and waits (up to 60 seconds) until that is responsive.  
  If you're having an issue where the first responsive? call takes a long time to be refused you really need to look at your system/firewall setup and make sure that attempted connections from the local machine aren't just silently dropped.  If on the other hand your delay is only in the server start-up, we would consider a PR that made that time configurable (probably preferred as a capybara setting rather than ENV variable), but you also should really look at whats happening during your apps startup - there are very few apps that should really take over a minute to startup in a test environment.
  As for the server spec, it is correct as written (an RSpec message expectation), Net::HTTP is expected to receive :start and when it does is mocked to raise an error
",twalpole,2016-01-17 18:35:32
1636,2016-01-30 13:52:36,"Thank you for your fast and detailed answer,

On 2016-01-17 10:35:41 -0800, Thomas Walpole wrote:

> The monkey patch you have been using breaks the use of Capybara with multiple sessions, and is why you have test failures after applying it.  Capybara will sshare one server thread amongst multiple sessions that use the same application instance to reduce memory usage, etc.  Because of this the session first attempts to connect to an existing server instance (that may exist in another session - the first responsive? call) and if that connection is refused it then starts up a new server thread and waits (up to 60 seconds) until that is responsive.   

  What seemed odd to me in the server code and specs now makes perfect
sense, I understand how my change was ""naive"" and wrong regarding the
expected behavior you describe.

>   If you're having an issue where the first responsive? call takes a long time to be refused you really need to look at your system/firewall setup and make sure that attempted connections from the local machine aren't just silently dropped.

  The problem is I can't control this in all environments easily.
Forcing `localhost` instead of `127.0.0.1` (localhost does not always
resolve to this address) mitigates the issue in a few env where I can
temporary change system behavior but this is not very convenient or
wanted as I still generate false positive alerts due to first failed
connection attempt.

> If on the other hand your delay is only in the server start-up, we would consider a PR that made that time configurable (probably preferred as a capybara setting rather than ENV variable), but you also should really look at whats happening during your apps startup - there are very few apps that should really take over a minute to startup in a test environment.

  The server start-up is ok for me, I just needed to increase the
timeout during my diagnosis because it was shorter than the time
required for connect() to fail, in that case capybara would report
that server took to long to start, but in fact it will never be
started (need first connection failure).

  What I want to achieve seems specific, so I think the best path is
to maybe work on an alternative and independent implementation for the
server part, I'll give it a try when I can.

  Again, thank you a lot for taking the time to explain the behavior
of current server implementation in capybara.

> The ""mailing list"" is linked to right from the top of the README
> - Need help? Ask on the mailing list (please do not open an issue on GitHub): http://groups.google.com/group/ruby-capybara""

  I got a page in mixed language listing archives, but no address
listed or any doc. I found an unofficial process to ""guess"" it but
the mail I sent bounced back. I admit I didn't try very long, because
every time I try to use mailing lists on google-group I have
troubles :-)
",tjouan,2016-01-17 18:35:32
1635,2016-01-15 14:11:38,"Hello

Some background: Rails app. Background jobs. I'm running Sidekiq with multiple theads, each one of them is using Capybara, Poltergeist and PhantomJS in order to test and take screenshots of different pages.

I'm hitting critical memory quota exceeded errors in my worker. It seems highly likely that I'm collecting multiple instances of PhantomJS on my worker, despite the jobs finishing as expected.

I would really like to try something like Capybara::Session.close or Capybara::Session.quit, in a teardown routine at the end of my Sidekiq job and see if that makes a difference. I can't see how to do this.

Any help would be massively appreciated.

Tom
",tomgallagher,2016-01-15 16:21:48
1635,2016-01-15 16:21:47,"Please ask how to questions on the mailing list as requested in the readme 
",twalpole,2016-01-15 16:21:48
1635,2016-01-16 03:38:38,"OK will do. Apologies.
",tomgallagher,2016-01-15 16:21:48
1634,2016-01-14 18:16:45,"@jferris @mhoran @jonleighton @route   -  Just a heads up that I plan to hopefully release Capybara 2.6 this coming weekend.  I don't believe there is anything that should affect driver authors, it's mainly to get released support for rack 2.0 (rails 5) in the rack_test driver.
",twalpole,2016-01-17 23:59:08
1634,2016-01-15 00:27:09,"Thanks for the heads up! We'll follow close behind with a release of capybara-webkit. Could you ping us on this thread when it's out?
",mhoran,2016-01-17 23:59:08
1634,2016-01-15 00:45:21,"Will do
",twalpole,2016-01-17 23:59:08
1634,2016-01-15 12:34:14,"Thanks for updates!
",route,2016-01-17 23:59:08
1634,2016-01-17 23:52:31,"@jferris @mhoran @jonleighton @route - 2.6.0 is released
",twalpole,2016-01-17 23:59:08
1633,2016-01-13 05:26:59,"I want to write some acceptance test cases for a website using capybara with selenium webdriver, but i dont know how to start and write test cases ,can you please any one tell me the sample example for that, I tried in many ways with the help of google but i have not received the exact details of it, Please provide me a doc if possible. that is very impotent for me. 
example:
I want to open just like google URL (https://www.google.co.in/)  ,and search somthing and click on submit . please help me.
thanks in advance......
",karunakarkarna,2016-01-13 05:51:36
1633,2016-01-13 05:51:36,"Please ask how to questions on the mailing list as requested in the README
",twalpole,2016-01-13 05:51:36
1632,2015-12-30 05:02:48,"The Selenium project has moved from code.google.com to github.com, so
this commit modifies the link to the correct wiki page.

There are a few more mentions of code.google.com where two issues are
linked, but the migration to github.com has not included the historical
issues, so those links cannot be updated. The links themselves, though,
do still continue to work.
",Nitrodist,2015-12-31 01:27:25
1632,2015-12-31 01:27:31,"Thanks
",twalpole,2015-12-31 01:27:25
1631,2015-12-29 17:46:34,"Hi there!

I posted a question on the popular Q&A site StackOverflow the other day (http://stackoverflow.com/questions/34500357/capybara-with-selenium-not-rendering-partial) but the more I think about it the more I am starting to be convinced that the problem is laying in the Capybara gem itself or possibly in the seleinum-webkit driver. I have a Foundation 5 modal window that is hidden by default and after a click on a link there should be a reveal that allows the user to interact with that modal. It does not appear to be rendered at all in the Firefox window that loads but it is present when I call save_and_open_page in the test. The rails_helper I have for the project is listed in the above link. Let me know if you need anything else! Been a very frustrating issue to deal with to say the least.

One of the most telling thoughts I have about the issue is that I have the line:

<S_CODE_TOKEN>

Which should reveal the modal window in the Firefox. It doesn't though, nothing loads which is strange. The icon also doesn't display (it's a SVG icon that is rendered using CSS) which is really strange but we don't get a  Selenium::WebDriver::Error::ElementNotVisibleError when trying to interact with it so I'm not sure what the problem is.
",illegalnumbers,2015-12-29 18:14:37
1631,2015-12-29 18:14:37,"Without a reproducible example we can interact with there is no way to debug this.  If you can provide a simple reproducible example that shows the issue, and/or a way for us to interact with it then we can potentially look at it.  Without that, all we can really say is there are thousands of people a day clicking on links that have JS actions that make modals appear and it works for them, so the issue is more likely to be with your test code and or app than with Capybara.  If you can provide a reproducible example we will reopen this.  One thing you could check is for JS errors in the firefox console, since it sounds like your JS actions may not be working.
",twalpole,2015-12-29 18:14:37
1630,2015-12-26 16:06:58,"Points out specifically what RSpec configuration option is being
referred to when '`spec/features`' is being suggested as the place to
put capybara specs. Alternative instructions for Rails applications has
also been added.
",Nitrodist,2016-01-14 21:45:13
1629,2015-12-23 00:38:02,"hi,
just to know first if it was actually ready to use it with rails5

Then, compared to the use i could have in previous rails version, I'm quite stuck with (for example) the following :

`Failure/Error: visit(""/users/sign_in"")
     ArgumentError:
       wrong number of arguments (0 for 1..2)`

And it goes like this for any urls listed in routes that have been tried, that involves devise (a direct access to the singeing page, a redirect to a signin page, etc)
thanks for clarifying or some help on this one
",bbnnt,2015-12-23 14:52:09
1629,2015-12-23 01:47:57,"I assume you're using the rack_test driver, if so use the master branch with rack 2.0
",twalpole,2015-12-23 14:52:09
1629,2015-12-23 08:25:20,"@twalpole I have those two in my gemfile

<S_CODE_TOKEN>

Here (https://github.com/plataformatec/devise/issues/3870) was the cause of this problem
",bbnnt,2015-12-23 14:52:09
1628,2015-12-23 00:04:45,"The new [`have_current_path`](https://github.com/jnicklas/capybara/pull/1567) matcher is super useful, so it'd be good to mention it in the docs.
",yozlet,2015-12-23 19:02:19
1628,2015-12-23 19:02:25,"Thanks
",twalpole,2015-12-23 19:02:19
1627,2015-12-20 09:23:50,"Hi, I've got the following part of a form:

<S_CODE_TOKEN>

In my `spec`, I try to click the `Update account` button using capybara:

<S_CODE_TOKEN>

It's always the `Delete my account` button which is being clicked (+ the validation is automatically confirmed). No matter how I try to target the `Update account` button, it's always the wrong one being triggered and so my test obviously fails. 

If I remove the `Delete my account` button from the template, the correct, `Update account` button, is being triggered. 

I'm not sure if I'm doing something wrong or this is a bug? Thanks a lot!

Update:
Interestingly I didn't think about this solution as this has like always worked (not sure what broke it) but changing the `button_to` to a `link_to` seems like to solve the problem.
",andersennl,2015-12-21 15:00:43
1627,2015-12-20 14:33:24,"What driver are you using?
",twalpole,2015-12-21 15:00:43
1627,2015-12-21 07:22:56,"@twalpole I didn't set any specific driver so I guess I'm using `:rack_test`.
",andersennl,2015-12-21 15:00:43
1627,2015-12-21 15:00:43,"Ok, so the rack_test driver doesn't support any JS or most CSS.  Because of this there would be no confirmation since its JS driven.  Without seeing the rest of your form, I'm going to assume it also has JS dependent behavior and what you're actually seeing is the results of clicking the correct button in a non-JS supporting browser. You can test that by disabling JS in your browser or just looking at what's actually submitted in your logs. The odds of the rack_test driver having an issue with clicking the wrong button are very low.
",twalpole,2015-12-21 15:00:43
1626,2015-12-16 21:53:16,"I'm using Capybara 2.5

Issue: 
this line: `find_field('stateAuthority', disabled: :all)` returns an error in my tests

<S_CODE_TOKEN>

documentation: http://www.rubydoc.info/github/jnicklas/capybara/master/Capybara%2FNode%2FFinders%3Afind_field

thanks for your time.
",cguanzon,2015-12-16 22:23:47
1626,2015-12-16 22:23:44,"You're reading the docs for the master branch, if you look at the docs for the version you're using - http://www.rubydoc.info/gems/capybara/2.5.0/Capybara/Node/Finders#find_field-instance_method you'll see that feature isn't supported.  If you want to use it you'll need to specify the master branch of Capybara in your Gemfile for now

<S_CODE_TOKEN>
",twalpole,2015-12-16 22:23:47
1625,2015-12-15 14:12:27,"I would love to call `xfeature` for pedning feature and `ffeature` for focused feature
",Bartuz,2015-12-22 17:33:16
1625,2015-12-15 14:12:37,"https://github.com/jnicklas/capybara/pull/1624
",Bartuz,2015-12-22 17:33:16
1625,2015-12-22 17:33:16,"Closed via PR #1624
",twalpole,2015-12-22 17:33:16
1624,2015-12-15 14:09:04,"Introducing `xfeature`, `ffeature` and `fscenario`
",Bartuz,2015-12-21 16:45:16
1624,2015-12-15 14:50:43,"How does the test output look like:
![test_output](https://cloud.githubusercontent.com/assets/4388676/11813798/1f745b00-a33b-11e5-9dad-9bc2a6339232.png)
",Bartuz,2015-12-21 16:45:16
1624,2015-12-16 23:46:16,"Only Ruby 1.9.3 build (the second one? there are two builds on 1.9.3) fails. https://travis-ci.org/jnicklas/capybara/jobs/96986194
with message: 

<S_CODE_TOKEN>

Any assistance?
",Bartuz,2015-12-21 16:45:16
1624,2015-12-17 00:16:04,"As a guess RSpec 2.2 doesn't support exclude_pattern=   -- don't break out these tests into a separate task and just test for the metadata in the test rather than that true == true.
",twalpole,2015-12-21 16:45:16
1624,2015-12-17 09:55:38,"@twalpole I have merged these tasks and refactored focus tag specs
",Bartuz,2015-12-21 16:45:16
1624,2015-12-18 10:08:32,"rbx-2 uses rspec-core 3.4.1 and fails after removing rspec 2 aliases. need to investigate
",Bartuz,2015-12-21 16:45:16
1624,2015-12-20 15:17:13,"Ok looks like the tests pass, please squash this down to one commit
",twalpole,2015-12-21 16:45:16
1624,2015-12-20 20:21:08,"Should I force push to `bartuz/master` or create new PR? 
",Bartuz,2015-12-21 16:45:16
1624,2015-12-20 20:33:13,"Just squash and force push, and in the future please create a feature branch in your repo for changes, rather than doing it in master 
",twalpole,2015-12-21 16:45:16
1624,2015-12-20 20:39:19,"@twalpole thanks you assistance and patience! :)
",Bartuz,2015-12-21 16:45:16
1624,2015-12-21 16:45:22,"Thanks a lot!
",twalpole,2015-12-21 16:45:16
1623,2015-12-11 00:28:54,"There are no errors, it just doesn't actually drag the element to the specified location.  I'm using `:sauce` as the `javascript_driver`.
",meenie,2015-12-11 00:50:10
1623,2015-12-11 00:50:10,"That's a driver issue - report it at the driver project
",twalpole,2015-12-11 00:50:10
1622,2015-12-09 10:54:44,"I was getting a circular require warning while running the `rspec-rails` test suite. This should fix it. Also took the chance to remove some unnecessary requires in other places.
",deivid-rodriguez,2015-12-23 19:41:51
1622,2015-12-21 16:51:40,"hmmm -- this will break things for anyone who is just doing require 'capybara' currently -- I have to take the time to go back through the older readmes and see when that was the last suggested way to use capybara
",twalpole,2015-12-23 19:41:51
1622,2015-12-21 21:26:44,"I just looked at [this version](https://github.com/jnicklas/capybara/blob/d2265a3a06146a18daea3f9809ad16845cb79817/README.md) of the README (back in 2009) and it seems to make the same suggestions as now.
",deivid-rodriguez,2015-12-23 19:41:51
1622,2015-12-23 19:41:53,"Ok -- we'll give it a try and hope no one screams
",twalpole,2015-12-23 19:41:51
1622,2016-02-13 15:13:58,"Hi. On RSpec we pin to the oldest version of capybara we support, which is currently the 2.2.x series. Would it be possible to get this patch backported into the 2.2.x series and released? If not, it's a non-issue, but if you can, that'd be great!
",samphippen,2015-12-23 19:41:51
1621,2015-12-08 05:13:21,"`Capybara::Node::Matchers#assert_selector` and its negation, `assert_no_selector` are boolean and are expected to only return `true` or `false`.

However, in the case of `false`, rather than just returning `false`, they are implemented with a `raise` & `rescue` `return false`, resulting in bad performance, i.e. (pseudocode):

<S_CODE_TOKEN>

Example use case is when branching logic based on the existence of an element on the page:

<S_CODE_TOKEN>

Current workaround is to provide a `:count` option:

<S_CODE_TOKEN>

Anecdotal benchmarks:

<S_CODE_TOKEN>

P.S.

The same is true for `Capybara::Node::DocumentMatchers` as well.
",Kache,2015-12-08 06:23:14
1621,2015-12-08 06:23:14,"You don't understand what you're actually testing here - it has nothing to do with exceptions and everything to do with Capybaras waiting behavior - if that's not enough explanation I'll add more details tomorrow when I have time
",twalpole,2015-12-08 06:23:14
1621,2015-12-08 07:55:53,"It sounds like you're referring to the `Capybara::Node::Base#synchronize` wait/retry behavior.

I picked up Capybara for use as a common Ruby API for automating both PhantomJS and Chrome, and I did not expect `has_css` to wrap a test/assertion framework. I suppose since Capybara is _intended_ to be a testing framework, `has_css` is synonymous with ""`assert_has_css`"".

It wouldn't be out of the question for me to feature-request for a non-test framework configuration that loads a different implementation of the various `Matchers`, would it?
",Kache,2015-12-08 06:23:14
1621,2015-12-08 16:54:48,"Correct, this has to do with the #synchronize wait/retry behavior

When you call has_css?  the code will check for the existence of matching elements, if elements exist it will return true immediately, if they don't it will continue checking for up to Capybara.default_max_wait_time seconds for the element to appear.  If after that time matching element(s) have not appeared it will return false.  When using has_no_css? this behaves in the opposite manner, will return true immediately if no matching elements exist, otherwise it will wait for matching elements to disappear from the page, or return false once the maximum time has passed.  The reason for this behavior is if you have code like the following

<S_CODE_TOKEN>

the click_link executes asynchronously, so the new page may not be loaded when the call to has
css? starts.  The waiting behavior ensures the page has time to load and check for the div.intro element to appear.  If you know for sure the page is loaded when you want to make the decision you can always pass wait: 0 to the has_xxx? method and it will disable the waiting behavior, like below

<S_CODE_TOKEN>

In this case - the waiting for the page to load is done by the have_text expectation waiting for something that appears on the new page but wasn't on the previous page.  Since we know the page is loaded we can then disable waiting in the call to has_css? by passing a wait time of 0 seconds
",twalpole,2015-12-08 06:23:14
1620,2015-12-07 21:29:43,"I know that I can use the workaround Capybara.ignore_hidden_elements = false, but it seems to me that the visible flag set to false should account for opacity 0 objects on the page.
",kleinab,2015-12-07 23:32:50
1620,2015-12-07 22:28:40,"Please provide an example that shows this issue
",twalpole,2015-12-07 23:32:50
1620,2015-12-07 22:44:10,"Example:

HTML:

<S_CODE_TOKEN>

Ruby:

<S_CODE_TOKEN>

Shouldn't the foo line also return ""Hello world""?  Or is there another solution?
",kleinab,2015-12-07 23:32:50
1620,2015-12-07 22:55:33,"ok, so neither of those raises an ""element not found"" so the title of this issue is incorrect.  #text takes a parameter of whether or not to return invisible text as documented here - https://github.com/jnicklas/capybara/blob/1a9417061c08194d9c4332cbbac186798cd5978a/lib/capybara/node/element.rb#L55 .  Because of this your .bar example should also return an empty string as written, what driver are you using?
",twalpole,2015-12-07 23:32:50
1620,2015-12-07 23:34:55,"Thanks for your help>
",kleinab,2015-12-07 23:32:50
1619,2015-12-07 19:49:10,"Much nicer than very old PNGs.

![image](https://cloud.githubusercontent.com/assets/65950/11637816/ac1c251a-9cf1-11e5-8de7-a32178a33ca6.png)
",olivierlacan,2015-12-22 17:55:53
1618,2015-12-03 07:28:06,"The page have header `<meta http-equiv=""Content-Type"" content=""text/html; charset=shift_jis"">`,  select tags

<S_CODE_TOKEN>

I want click  `<option value=""2"">2:株式会社ブレインテスト</option>`
but  is not working with code  `select('2:株式会社ブレインテスト',  from: 'sel01')` 
It is happen  errors  `Capybara::ElementNotFound: Unable to find option ""2:株式会社ブレインテスト""`

I using debug to see text  of  option tag '2:株式会社ブレインテスト'. 
This is capybara wrong encoding.  
`find(:xpath, ""//*[@id='sel01']/option[@value='2']"").text`  =>  ""2:譬ｪ蠑丈ｼ夂､ｾ繝悶Ξ繧､繝ｳ繝�せ繝�""

Help me ! 

I want  using  method #select(value, options = {})  
",vihc,2015-12-03 11:24:02
1618,2015-12-03 11:23:35,"Using

<S_CODE_TOKEN>

the test

<S_CODE_TOKEN>

works fine for me with both the rack_test and selenium drivers - If you're using a different driver it may be a bug in that driver and should be reported on that drivers project, otherwise you'll need to provide a minimal failing exampl, and then we can reopen this
",twalpole,2015-12-03 11:24:02
1617,2015-12-02 19:16:38,"I am not 100% sure that this is the only change necessary, but the tests pass. 

As per gemnasium recommendation
https://gemnasium.com/jnicklas/capybara

mime-types repo, with version info in readme: https://github.com/mime-types/ruby-mime-types/

![screen shot 2015-12-02 at 11 15 57 am](https://cloud.githubusercontent.com/assets/578159/11541262/26694498-98e6-11e5-80fe-1145086c2f56.png)
![screen shot 2015-12-02 at 11 12 58 am](https://cloud.githubusercontent.com/assets/578159/11541263/266ea9d8-98e6-11e5-9a0f-e7ba32d147f4.png)
",compwron,2015-12-08 17:31:27
1616,2015-12-01 19:31:19,"Not sure what's up, I think it's a bug in Capybara as I can't otherwise determine what I'm doing wrong here.

I recently upgraded Rails from 4.1.0 to 4.2.5 and then this particular test started failing:

<S_CODE_TOKEN>

The browser window loads appropriately it just never finds the Edit link that is present on the page. All the actual functionality appears to work appropriately. If I just have a visit to that path everything works afterwards as well. For some reason it just doesn't like that link.

The markup is below for that link.

<S_CODE_TOKEN>
",illegalnumbers,2015-12-01 23:08:02
1616,2015-12-01 19:35:23,"What is the actual html when the page is open (rather than the erb), and what exactly is the error you're getting
",twalpole,2015-12-01 23:08:02
1616,2015-12-01 21:27:09,"Error I am getting is:

<S_CODE_TOKEN>

Which makes sense because the click_link to the edit should load the edit page which has that form in it.

The html is below.

<S_CODE_TOKEN>

The strange part is when I have a binding.pry added to the page before the click_link call (so I could see what renders) and then continue execution the test seems to work. Is it an async problem related to the visit call?
",illegalnumbers,2015-12-01 23:08:02
1616,2015-12-01 21:40:54,"Does the page a user is directed to after logging in have a link with 'Edit' in it??  It is possible that you are actually clicking the link on that page before the visit call has actually changed to the business_info_path(user.business) page.  You can check that by doing 

<S_CODE_TOKEN>

after the visit, or an expectation for text/elements that would only be on that page.  You could also change to 

<S_CODE_TOKEN>

to make sure it's clicking the correct Edit link
",twalpole,2015-12-01 23:08:02
1616,2015-12-01 22:55:28,"Awesome, thank you! It does actually have a link on the page with that text in it...that is very strange now that I double check on that rendered HTML that it is not present there...that would explain at least what I thought was voodoo. Now the crazy thing is why is it rendering when I see the actual page when the test harness runs but not in the HTML. 

I'll try those steps and report back what I find. In the interim I tried fiddling with my updated gems to make sure nothing was being caused by some other dependency in the project being updated, seems like I got other failures so that could have been it as well. I appreciate the support!
",illegalnumbers,2015-12-01 23:08:02
1615,2015-11-29 01:27:56,"mime-types 3.0 removed support for Ruby 1.9.3.

> Version 3.0 is a major release that requires Ruby 2.0 compatibility and removes deprecated functions.

ref: https://github.com/mime-types/ruby-mime-types/

Capybara depends on `>= 1.16`, and claims 1.9 support in the README.

This was previously reported for mime-types 2.0 at https://github.com/jnicklas/capybara/issues/1173, where it was suggested to switch to a `~>` dependency instead. Given this is the second time it has broken, thoughts on doing so this time?

I discovered this because `simplecov`'s 1.9 build was failing due to a transitive dependency on mime-types through capybara.
",xaviershay,2015-11-29 02:06:00
1615,2015-11-29 02:06:00,"I see no reason to limit people running ruby 2.0+ to mime-types < 3 - yes if you're still running 1.9.3 you will need to lock mime-types in your own gem file, but capybara works with 2 or 3
",twalpole,2015-11-29 02:06:00
1615,2015-11-29 02:33:15,"at the very least shouldn't this be called out in the README? It currently claims 1.9 support with no caveats, but it won't work out of the box.

(FWIW I'd be ok with just officially dropping 1.9 support since it was EOLed in February)
",xaviershay,2015-11-29 02:06:00
1615,2015-11-30 02:46:19,"The fact is that Capybara will work with any available version of mime-types >= 1.16  -- mime-types v3+ won't work with ruby 1.9.3 but that's not a limitation of capybara, its really a limitation of bundler and the gem dependency system that it won't pick a lower acceptable version of mime-types when running with ruby < 2.  The error message that is returned is pretty clear - ""Gem::InstallError: mime-types-data requires Ruby version >= 2.0"" and if a user adds mime-types < 2.0 to their Gemfile capybara will work just fine.   If you wan't to submit a PR for documentation that will be considered but this really isn't a Capybara issue  ( ie. Capybara works with any version of mime-types >= 1.16 that the ruby you are using will support)
",twalpole,2015-11-29 02:06:00
1615,2015-12-09 15:54:05,"The build should be fixed though (or the failures ignored / 1.9 support dropped).

It could be possible too to specified correct conditional dependencies with a hack like this: https://github.com/astashov/debugger-xml/commit/c67ef5b88e168cfebab30231017710f39e3b36c9.
",deivid-rodriguez,2015-11-29 02:06:00
1615,2016-01-29 04:31:14,"I'm a newbie trying to build and install the capybara-webkit gem, following the Windows instructions in [https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit].

I'm tripping up on the last step in the instructions with the mime-types error (""mime-types-data requires Ruby version >= 2.0.""), because I've followed the instructions pretty closely and used Ruby 1.9.3.

I'd just like to know, where and how do I ""lock mime-types in your own gem file"", as twalpole has suggested?

Thanks in advance.

PS - this is my list of local gems:

<S_CODE_TOKEN>
",stby-telstra,2015-11-29 02:06:00
1615,2016-04-22 15:30:48,"I'm having the same issue on a Debian Wheezy and Ubuntu 14.04 installation, both with Ruby 1.9.3 installing Rails 4.2.6, did any of you guys got it working?
",gtbono,2015-11-29 02:06:00
1615,2016-04-22 19:51:34,"@gtbono If your problem is your project not installing then in your projects Gemfile specify `gem 'mime-types', '< 3.0'` , if your problem is building capybara-webkit then thats a different project and you would need to ask over on it.
",twalpole,2015-11-29 02:06:00
1614,2015-11-27 11:08:43,"# Outcome

<S_CODE_TOKEN>
# Expected

<S_CODE_TOKEN>
# Versions

<S_CODE_TOKEN>
",runephilosof,2015-11-27 16:22:27
1614,2015-11-27 12:04:43,"Here is a test that confirms the bug:

## Testcase

<S_CODE_TOKEN>

## Result:

<S_CODE_TOKEN>
",runephilosof,2015-11-27 16:22:27
1614,2015-11-27 16:22:27,"This is not a bug, but rather by design.  The `exact` option doesn't affect the `text` option - but rather ""Control whether `is` expressions in the given XPath match exactly or partially"" -http://www.rubydoc.info/gems/capybara/Capybara/Node/Finders#all-instance_method .  In practice this means it affects the locators passed to the specialized finders - ie   `find_link('Test', exact: true)` or `find(:button, 'Test', exact: true)`.  If you want to match exactly using the :text option you can pass a Regexp

<S_CODE_TOKEN>

PRs clarifying this in the documentation will be considered
",twalpole,2015-11-27 16:22:27
1613,2015-11-25 10:06:14,"I am trying to perform swipe action for `particular element`. But capyabra is swiping `full page`.

My code

<S_CODE_TOKEN>
",Aravin,2015-11-25 14:40:20
1613,2015-11-25 14:40:20,"#touch_action isn't provided by capybara, so I think you're reporting this issue on the wrong project
",twalpole,2015-11-25 14:40:20
1612,2015-11-23 19:54:21,"https://github.com/sparklemotion/nokogiri/blob/v1.6.6.x/CHANGELOG.rdoc#1664--2015-11-19
",Kosmas,2015-11-23 21:21:20
1612,2015-11-23 21:21:20,"We're not going to bump the minimum supported version of nokogiri in the capybara gem. This is something that should be handled in the project using capybara and is only relevant if the person is using the vendored versions of libxml2 and libxslt.  The current spec of >= 1.3.3 does not prevent use of the newest release
",twalpole,2015-11-23 21:21:20
1611,2015-11-22 13:16:31,"I intend to open a PR to address this issue, just don't have the time right this minute :)

When using `have_current_path` to match the request path and query string, it does not work with non alpha numeric characters, most importantly for checkbox arrays

In my case, when searching ""Location"" objects by an array of categories passed in via a checkbox array

<S_CODE_TOKEN>

produces this

<S_CODE_TOKEN>

To address this bug, I imagine the expected string should be uri encoded.

Thoughts?
",lukerollans,2016-01-17 23:16:50
1611,2015-11-22 15:52:04,"what driver are you seeing this with? It seems like more of an issue with the return of current_url/path from the driver, I don't think we want to encoding every url passed in to the matcher
",twalpole,2016-01-17 23:16:50
1611,2015-11-23 01:19:03,"It's not a JS spec, so whichever driver is default. Do you still think it may be a driver issue?
",lukerollans,2016-01-17 23:16:50
1611,2015-11-23 19:56:37,"The default driver is racktest, and I'm 95% sure this is going to be a driver specific thing.  The have_current_path matcher works by calling URI.parse on what the driver returns for current_url and then using the relevant parts.  
",twalpole,2016-01-17 23:16:50
1611,2015-12-28 18:42:55,"So this is because the racktest driver returns unescaped urls for current_url even when the url visited was escaped (other drivers don't do that).  As a workaround short term you could call URI.unescape on the path you're passing to have_current_path....   I need to find time to look into the rack_test driver and figure out why it's doing that, or maybe just update have_current_path to compare against the url as passed in and an unescaped  version of it - need to think about it
",twalpole,2016-01-17 23:16:50
1610,2015-11-21 00:33:09,"Hi,

I have the following setup in my `env.rb`

<S_CODE_TOKEN>

Running my cucumber tests works just fine with this.
I want to go an extra step and run my cucumber tests on different browsers and OS.

I have a `browsers.json` file and I try to register the driver from my Rakefile.

This is what I have so far:

<S_CODE_TOKEN>

It is basically copying most of my content of env.rb into the Rakefile.
I also remove most of the content of my `env.rb` file. 

When I run `rake` it complains with:
`rack-test requires a rack application, but none was given (ArgumentError)`

How can I fix this, or is it even the right way of doing what I want?
",jrm2k6,2015-11-21 00:35:46
1610,2015-11-21 00:35:46,"Moved to mailing-list
",jrm2k6,2015-11-21 00:35:46
1609,2015-11-19 21:48:36,"Update:
## The problem is solved. It was caused by firefox. Firefox input tag's maxlength always return -1 instead of 524288. Thanks!

I am using Capybara to test this JavaScript with Selenium as the webdriver and Firefox v 42.0 as the browser that interprets the JavaScript. I am seeing some odd behavior and I am not sure if Capybara is behaving correctly or if it is some other system. I think it is Capybara because when I open a new instance of Firefox and try the same actions in the console manually it appears that everything works properly. When I run my test and Capybara runs the Firefox instance I set a breakpoint in my code in my spec to see what is happening in the browser. It appears something strange is going on at that point when I inspect in that Firefox window's console. 

I have a function that is represented by the following in JavaScript. 

<S_CODE_TOKEN>

My spec (using Capybara) is provided here

<S_CODE_TOKEN>

The initial problem is that my spec keeps failing when it shouldn't (I believe) since the conditions for it to pass (the page having the field I expect) is actually happening when I run the program in development. It fails when it tries to fill_in 'split-transaction-amount'. The input tag that is generated by the field that I want to fill in is located below.

<S_CODE_TOKEN>

When the input tag gets generated and the page tries to fill it in as I am running the browser I placed a breakpoint in the generated JavaScript (in browser) to debug the issue. When the breakpoint is hit by the test suite continuing, I see odd stuff. The line with the conditional of:

<S_CODE_TOKEN>

fails even though I am telling Capybara to input with a '2' and everything seems to work when I load the page normally. Is this a bug in Capybara?

I am using:
Capybara: 2.5.0
selenium-webdriver: 2.46.2

EDIT2:

To clarify, when testing the browser I can stop the execution using a pry and then input a number manually in the generated instance by Capybara, Selenium, etc. In that manually inputted number the regex still fails again in that browser instance. It doesn't fail in Chrome or Firefox when I just run the application manually. Very strange.

EDIT:

My rails_helper.rb file is listed below as I think it can help identify the issue. Hopefully.

<S_CODE_TOKEN>
",KingsleyZ,2015-11-19 23:15:14
1608,2015-11-18 23:17:07,"I am writing a massive to test UI. Basically after you click a button (id=add-split-transaction), a new row will be append to the UI with div id split-transaction-3. Click the button again, a new div block split-transaction-4 will be generated.

Here is the code. I am trying to generate 100 rows but it says cannot find split-transaction-3. If I don't put everything in a loop. It works. 

<S_CODE_TOKEN>

So my question is why does capybara not working in a loop? Thanks.
",KingsleyZ,2015-11-18 23:29:40
1608,2015-11-18 23:29:40,"Ask howto questions in the mailing list as requested in the README
",twalpole,2015-11-18 23:29:40
1607,2015-11-18 20:41:58,"Created with https://github.com/dkhamsing/frankenstein
### GitHub Corrected URLs

| Was | Now |
| --- | --- |
| http://github.com/travisjeffery/timecop | https://github.com/travisjeffery/timecop |
| https://github.com/bmabey/database_cleaner | https://github.com/DatabaseCleaner/database_cleaner |
| https://github.com/jonleighton/poltergeist | https://github.com/teampoltergeist/poltergeist |
### Other Corrected URLs

| Was | Now |
| --- | --- |
| http://travis-ci.org/jnicklas/capybara | https://travis-ci.org/jnicklas/capybara |
",ReadmeCritic,2015-11-18 21:40:14
1607,2015-11-18 21:40:18,"thanks
",twalpole,2015-11-18 21:40:14
1607,2015-11-18 22:32:54,":smile: 
",ReadmeCritic,2015-11-18 21:40:14
1606,2015-11-18 04:07:13,"I'm getting errors after every scenario, the problem is this:

<pre>
Locator not implemented (WARNING: The server did not provide any stacktrace information)
      Command duration or timeout: 41 milliseconds
      Build info: version: '2.48.2', revision: '41bccdd', time: '2015-10-09 19:59:12'
      System info: host: 'IE11WIN10', ip: '192.168.179.55', os.name: 'Windows 10', os.arch: 'x86', os.version: '10.0', java.version: '1.8.0_66'
      Driver info: org.openqa.selenium.edge.EdgeDriver
      Capabilities [{acceptSslCerts=true, browserVersion=20.10240.16384.0, platformVersion=10, browserName=MicrosoftEdge, takesScreenshot=true, pageLoadStrategy=normal, takesElementScreenshot=true, platformName=windows, platform=ANY}]
      Session ID: 014D2248-D569-4DAE-8767-63DA160464B2
      *** Element info: {Using=xpath, value=/html/body/*} (org.openqa.selenium.WebDriverException) (Selenium::WebDriver::Error::UnknownError)
      [remote server] sun.reflect.GeneratedConstructorAccessor11():-1:in `newInstance'
      [remote server] sun.reflect.DelegatingConstructorAccessorImpl():-1:in `newInstance'
      [remote server] java.lang.reflect.Constructor():-1:in `newInstance'
      [remote server] org.openqa.selenium.remote.ErrorHandler(ErrorHandler.java):206:in `createThrowable'
      [remote server] org.openqa.selenium.remote.ErrorHandler(ErrorHandler.java):158:in `throwIfResponseFailed'
      [remote server] org.openqa.selenium.remote.RemoteWebDriver(RemoteWebDriver.java):647:in `execute'
      [remote server] org.openqa.selenium.remote.RemoteWebDriver(RemoteWebDriver.java):378:in `findElements'
      [remote server] org.openqa.selenium.remote.RemoteWebDriver(RemoteWebDriver.java):494:in `findElementsByXPath'
      [remote server] org.openqa.selenium.By$ByXPath(By.java):356:in `findElements'
      [remote server] org.openqa.selenium.remote.RemoteWebDriver(RemoteWebDriver.java):341:in `findElements'
      [remote server] sun.reflect.GeneratedMethodAccessor14():-1:in `invoke'
      [remote server] sun.reflect.DelegatingMethodAccessorImpl():-1:in `invoke'
      [remote server] java.lang.reflect.Method():-1:in `invoke'
      [remote server] org.openqa.selenium.support.events.EventFiringWebDriver$2(EventFiringWebDriver.java):102:in `invoke'
      [remote server] com.sun.proxy.$Proxy1():-1:in `findElements'
      [remote server] org.openqa.selenium.support.events.EventFiringWebDriver(EventFiringWebDriver.java):176:in `findElements'
      [remote server] org.openqa.selenium.remote.server.handler.FindElements(FindElements.java):50:in `call'
      [remote server] org.openqa.selenium.remote.server.handler.FindElements(FindElements.java):1:in `call'
      [remote server] java.util.concurrent.FutureTask():-1:in `run'
      [remote server] org.openqa.selenium.remote.server.DefaultSession$1(DefaultSession.java):176:in `run'
      [remote server] java.util.concurrent.ThreadPoolExecutor():-1:in `runWorker'
      [remote server] java.util.concurrent.ThreadPoolExecutor$Worker():-1:in `run'
      [remote server] java.lang.Thread():-1:in `run'
</pre>


Browser : Microsoft Edge
OS : Windows10
Tested with cucumber/capybara
",haonoy,2015-11-18 07:10:17
1606,2015-11-18 04:58:36,"According to http://stackoverflow.com/questions/31748000/not-able-to-locate-the-element-using-xpath-locator-for-edge-driver-instance-of-s there is no xpath support in Edge, which would mak capybara unusable with it - I don't currently have access to a  Windows 10 system to test with so can't confirm it myself
",twalpole,2015-11-18 07:10:17
1606,2015-11-18 05:19:02,"Here's a status page for for the edge webdriver - https://dev.windows.com/en-us/microsoft-edge/platform/status/webdriver/details/ - not sure if I'm reading it correctly but I think it's saying there's a preview release of the driver that has xpath support
",twalpole,2015-11-18 07:10:17
1606,2015-11-18 07:10:17,"@twalpole Thank you for your answer - you can download Windows10 virtual machine from https://dev.windows.com/en-us/microsoft-edge/tools/vms/mac/ :)
",haonoy,2015-11-18 07:10:17
1605,2015-11-16 00:18:26,"I can't sign out of my app in RSpec/Capybara. A failing example:

<S_CODE_TOKEN>

I run a simple log-in, log-out example:

<S_CODE_TOKEN>

The `user_id` is somehow being persisted in the session after its deletion in the `sign_out` method. If I follow the same steps in the browser manually, I get

<S_CODE_TOKEN>

as expected. Since this problem is occurring within a single test, I don't think this is a `Capybara.reset_sessions!` issue. What am I missing here?
",githorse,2015-11-16 02:25:11
1605,2015-11-16 02:25:11,"Please ask howto questions in the mailing list as requested in the README, and include details about which driver you're using, what the steps are doing, etc.  As a guess though I would say you're using selenium as the driver and your sign_out step isn't looking for any results after redirecting to the root path , so the second visit test_path is actually occurring before the sign_out redirect occurs, so cookies in the browser aren't actually getting reset
",twalpole,2015-11-16 02:25:11
1605,2015-11-20 14:35:45,"Hi @twalpole, I'm using the Poltergeist driver actually. I'm still confused about how to get this working, since the redirect does not get performed even if I add a line after `sign_out`:

<S_CODE_TOKEN>

I've posted this on the mailing list [here](https://groups.google.com/forum/#!topic/ruby-capybara/y_Eay2zTvfc).
",githorse,2015-11-16 02:25:11
1604,2015-11-13 10:07:58,"(sorry, I initially accidentally hit the return button before filling in the description ^^° here goes)

I'm using capybara 2.5.0 along with rspec-rails 3.4.0.

In a feature spec scenario I haven't yet implemented, my spec passes with something akin to:

<S_CODE_TOKEN>

I don't know how this could pass. I've been following the rspec documentation: https://www.relishapp.com/rspec/rspec-mocks/v/3-3/docs/setting-constraints/matching-arguments

Each time I tried to fill in a field that wasn't there, click on a link or button that wasn't there, it failed as expected. Only when I use have_text or have_content does it always pass, regardless of what the code does.

Hope it helps ^^ I don't know where to start debugging the code myself ^^°
",Bastes,2015-11-13 21:23:25
1604,2015-11-13 10:35:15,"A little digging later with pry-byebug reveals that:

<S_CODE_TOKEN>

Always yields ""true"" somehow in my context. I tried then:

<S_CODE_TOKEN>

What I got was (as expected) the error message from the controller (the controller create action hasn't been implemented yet, so it ends in a 500 error). Of course, the content the matcher shouldn't be finding yet finds is nowhere in this content.

I'll continue digging to see what I can find.
",Bastes,2015-11-13 21:23:25
1604,2015-11-13 10:54:56,"More digging:
If I try to assert wether text is there on a page that's implemented (not a 500 error) the check is made and fails when it should, succeeds when it should.
",Bastes,2015-11-13 21:23:25
1604,2015-11-13 16:44:37,"This is something that is pretty heavily tested in this project so I would doubt there's an error with it in Capybara (not impossible, just highly unlikely).  Much more likely is that your 500 error page is showing the source code of where the error was thrown from on it, which will include the text you're searching for. 
",twalpole,2015-11-13 21:23:25
1604,2015-11-13 21:11:09,"That could explain it ; I'll see wether the string was part of the error.

Though, and I don't mean to criticize just for the sake of it, I'd be less surprising if Capybara was to fail the scenario automatically when it receives a 500 error (with of course some way to disable that behaviour on the off-chance someone actually needs to check that a 500 error is raised through a scenario?). As a project maintainer, I'd be interested in tests failing when the app crashes through a scenario ^^

P.S. thanks for your help @twalpole ^^
",Bastes,2015-11-13 21:23:25
1604,2015-11-13 21:16:28,"@twalpole Diagnosis confirmed ^^d I'll patch my own spec to check wether a 500 error happened, but in case you have an idea on how to implement a safeguard to raise an error automatically in a scenario when a 500 error is raised, I'd be glad to contribute and try to implement it.
",Bastes,2015-11-13 21:23:25
1604,2015-11-13 21:20:36,"@Bastes If the app actually raised an error then Capybara will raise the error and fail the test (assuming Capybara.raise_server_errors is true (default) ), however in your case the app isn't actually raising an error, its returning a valid webpage - just happens to be a webpage about an internal error the app caught.
",twalpole,2015-11-13 21:23:25
1604,2015-11-13 21:23:25,"@Bastes Also you could probably turn off whatever is producing detailed error pages in test mode - you wouldn't want that info displayed in production mode, so by default have it off in test mode too.  (If in rails check that better-errors isn't loaded in the test environment for instance - not sure what other settings might need to be checked).  Then the source code won't be displayed in the error page, and your test will correctly fail/pass
",twalpole,2015-11-13 21:23:25
1604,2015-11-13 21:27:55,"@twalpole Ah, there's the culprit then. Thanks a lot for your help, better_errors was indeed loaded in dev and test mode, and disabling it raises the errors in the scenario as it should.

Cheers, and sorry for the noise ^^°
",Bastes,2015-11-13 21:23:25
1604,2015-12-04 16:53:59,"This happened to me as well.  It was very confusing behavior. 
",tarr11,2015-11-13 21:23:25
1603,2015-11-10 22:24:08,"https://stackoverflow.com/questions/33640613/clicking-an-icon-with-capybara
",Deekor,2015-11-10 22:36:13
1602,2015-11-10 18:05:58,"<S_CODE_TOKEN>

I couldn't reproduce it but does anyone know why this would happen?
",nambrot,2015-11-10 18:28:16
1602,2015-11-10 18:28:16,"Ask questions on the mailing list as requested in the README
",twalpole,2015-11-10 18:28:16
1602,2015-11-10 18:57:37,"Sorry. Fwiw, I figured it out why it failed. Adding an empty space inside the `div` makes it discoverable for Capybara
",nambrot,2015-11-10 18:28:16
1602,2015-11-10 19:14:06,"Correct because without content or set sizes a div is not visible on the page -- asking on the mailing list would have got you the answer
",twalpole,2015-11-10 18:28:16
1601,2015-11-09 00:26:11,"The `Object` class in Ruby defines an instance method named `method`
that receives a symbol a returns a `Method` object. Byebug uses this
method to grab information about the parameters of each frame in the
backtrace.

The `Capybara::RackTest::Form` class defines a method called `method`,
overriding the method mentioned above. This case could probably be
rescued in `byebug`, but since the method is just a private utility
in the class, I think it is fine to just rename it to something else
inside capybara.

While renaming it, I noticed a typo in a variable name, so I made the
renamings so that the typo is corrected too.

Reference: https://github.com/deivid-rodriguez/byebug/commit/5a634640b4dd40be98e7f8f73abff013a0a6c6e7#diff-4bfdaaf6a5014abdaeae92d370b02373
",deivid-rodriguez,2015-11-09 00:58:56
1601,2015-11-09 00:58:59,"LGTM - thanks
",twalpole,2015-11-09 00:58:56
1601,2015-11-09 01:09:26,"Thanks!
",deivid-rodriguez,2015-11-09 00:58:56
1600,2015-11-08 09:13:23,,AhmedKamal20,2015-11-09 00:37:15
1600,2015-11-09 00:37:20,"thanks
",twalpole,2015-11-09 00:37:15
1599,2015-11-06 14:58:36,"When testing an action that redirects offsite it is useful to be able to not follow redirects just temporarily when it is enough to assert that a redirection has occured to the correct location.

Currently when using the Capybara::RackTest::Driver an attempt to redirect to an external site results in a request with the same path to the app currently under test. Most of the time this will cause a test to fail as a request is made to a non-existent path.

I know the ethos behind capybara is that it shouldn't do things users can't do with browsers. This is a bending of the rules to improve usability.. so just throwing it out there.. Happy to add some more test cases if you think it might be useful.
",thehenster,2015-11-09 00:56:27
1599,2015-11-09 00:56:27,"Thanks for the effort but I'm not going to include for a couple of reasons
1. Capybara really is the wrong tool to be using if you're checking result status codes, as evidenced by the fact you have to go to driver specific methods to access them
2. if you want a driver that doesn't redirect you can just register a :racktest_no_redirect driver and use that for the specific tests you don't want redirection on.
",twalpole,2015-11-09 00:56:27
1598,2015-11-04 14:45:06,"I am currently trying to run a rspec test with Capybara and Database cleaner and I repetitively receive this threading error with Mysql.

Gemfile.lock

rspec (3.3.0)
capybara (2.4.4)
capybara-webkit (1.4.1)
database_cleaner (1.5.1)

<S_CODE_TOKEN>

spec_helper.rb

<S_CODE_TOKEN>

The Spec File

<S_CODE_TOKEN>

Now the webpage screenshot shows up correct, however, I feel like its something to do with the javascript causing a threading issue.
",reidcooper,2015-11-04 17:43:09
1598,2015-11-04 17:43:09,"You're sharing the database connection between the test and server threads and/or you have AJAX requests still occurring when database cleaner is trying to truncate the database - either way this should be asked on the mailing list as requested in the README
",twalpole,2015-11-04 17:43:09
1597,2015-11-03 18:54:38,"I read the existing documentation, but I was still having trouble with a single element (I was missing the `first('a')` part), so I thought another example would help someone else.
",jaredbeck,2016-01-14 21:52:03
1597,2016-01-14 23:31:39,"Thanks Thomas
",jaredbeck,2016-01-14 21:52:03
1596,2015-11-03 14:32:03,"The page I'm testing has `<base>` starting with `/` tag, so local htm dump can't find CSS, etc. because the scheme is `file://`. So I would like to force the correct base in my tests.

I guess the original author https://github.com/jnicklas/capybara/commit/e0591fef5c9b4de9d56f71608043c86aed6a8fa4 made this function ignoring it the base tag already exists because he didn't want to bother with regex. So:
1) I've made it override href attribute if it already exists
2) I've changed the `[^<]` to `[^>]` in regex because I assume it's a bug
3) I've added `:focus` ability to rspec, becuse the `spec_helper.rb` requires all the tests, that makes impossible to run the one specific test
4) note you that different drivers reorder html attributes, that makes me unable to fully test the regex in rspec,, but I'm sure it's fine
",Nakilon,2015-11-03 17:04:30
1596,2015-11-03 16:12:38,"Test `""executes successfully even if the page is missing a <head>""` appears to work not fully correctly
with selenium driver because Firefox adds tags on his own: `""<html xmlns=\""http://www.w3.org/1999/xhtml\""><head></head><body>Bar</body></html>""`
I spotted it when for some reason `$& + ""` instead of `""\\0` didn't work despite the http://stackoverflow.com/a/32409118/322020
",Nakilon,2015-11-03 17:04:30
1596,2015-11-03 17:04:30,"Thanks for the efforts,  however this isn't something I'm going to be merging into Capybara in the near future for a few reasons.  

1) the decision to not modify the base tag if it already existed was made in the discussion when this feature was added (not just because someone didn't want to write a regex) - https://github.com/jnicklas/capybara/pull/958  -  Also your current replacement regex has at least one error since attributes don't have to be quoted unless they contain certain characters
2) As discussed in the above thread the [^<] was for malformed html, may not really be required, but also isn't hurting anything
3) That is specifically not in current code because things like people leaving :focus tags in their code means the automated tests don't fully run (as happened with your first PR).  If you want to test specific tests just use `rspec -t focus`  - it's also not really relevant to the existing PR so we would normally prefer that as a separate PR (or at least a separate commit)
4) I can't test it but ""I'm sure it's fine"" really isn't something a project wants to hear 
",twalpole,2015-11-03 17:04:30
1596,2015-11-04 20:08:22,"4) Existing regexes are not fully tested for the same reason. Why then they are in the project?
",Nakilon,2015-11-03 17:04:30
1596,2015-11-04 20:46:13,"Huh?  The project has been built over quite a bit of time and there very well may be pieces that aren't fully tested. That doesn't mean just because someone says ""I'm sure it's fine"" we should assume it is,especially since in this case its definitely not fine (see issue 1).  Next time you may be better off opening an issue about new functionality to discuss whether it is something that project would entertain before putting in the effort to implement it.  

If you see other regexs in the project which you consider wrong, please feel free to submit PRs with tests that show the problems.
",twalpole,2015-11-03 17:04:30
1595,2015-11-02 16:06:31,"When testing a page with JS that hides and shows 
certain elements, it's useful to know whether a 
test failure means that an element has failed to 
render, or has rendered but become invisible (or 
failed to become visible). 

For instance, some jQuery plugins will take 
existing elements and hide them, adding some other
elements onto the page that use the originals as
storage. If your tests are written to use the 
now-hidden elements they will mysteriously start
failing. 

This commit only changes the behavior for failed
tests (rspec and assert) and only for text
queries. It might be nice to extend this to the 
other finders.
",alexch,2016-07-21 19:14:15
1595,2015-11-02 18:28:15,"+1
",harlantwood,2016-07-21 19:14:15
1595,2015-11-02 19:13:58,"I've added a couple of comments, but overall I'm iffy on this.   Yes it would probably be helpful for some people to have this type of error message, but it's also the kind of thing that will encourage people to just pass :all into their text queries to get tests passing -- which is not something that should be encouraged.
",twalpole,2016-07-21 19:14:15
1595,2015-11-04 21:02:11,"I'm not convinced it would encourage people to just pass :all into their text queries just to get their tests to pass. If some people don't care about their tests being accurate then there's not much a reasonable error message can do for them :-). And it's not suggesting any action, just pointing out the (possibly new or changed) reality and giving a clue -- which I would have appreciated when working with some buttons that toggle invisible checkboxes on a codebase I was new on last week.
",alexch,2016-07-21 19:14:15
1595,2015-11-12 17:49:09,"Just the one small change I commented on above, and then it looks good to me.  when you've made that change please squash the commits, and then I'll merge it in
",twalpole,2016-07-21 19:14:15
1595,2016-07-21 19:14:15,"This was squashed and merged as 51c83ed5a93f7a6f36f27019927d2ee7c4e2d599
",twalpole,2016-07-21 19:14:15
1594,2015-10-29 18:48:09,"I have some code in a controller laid out like the following that does a redirect to an external url. This code works in my actual environment but when the test I wrote below runs using capybara with selenium I get a routing error. I shouldn't get a routing error since I should just be doing a redirect to an external service. Not sure whats up here, I think it's a bug in capybara.

spec

<S_CODE_TOKEN>

controller

<S_CODE_TOKEN>
",illegalnumbers,2015-10-29 22:46:45
1594,2015-10-29 22:37:05,"What exactly is the error?  and are you 100% sure that you're running it with the selenium driver and not with the rack-test driver?
",twalpole,2015-10-29 22:46:45
1594,2015-10-29 22:46:45,"Capybara is for use in integration/feature tests.  Since browsers actually follow redirects you can't check for them other than checking you end up on the final url - if you want to verify that a redirect (http 301, 302) is returned you should be doing that in a controller/request spec.  Also, comparing to current_path immediately when using real browsers is problematic because visit can/will return before the browser has actually completed its requests.  If you want to check that a browser ends up on a specific page you should be using

<S_CODE_TOKEN>

which will utilize Capybaras waiting behavior for the page url to change
",twalpole,2015-10-29 22:46:45
1594,2015-10-30 01:14:27,"Sorry on the late response - yes I am sure I'm running it with the selenium driver. The problem was that I was getting a 

<S_CODE_TOKEN>

where xyz was the route that I was redirecting to (outside of my site) based on the posting in my controller, it was a strange problem. I agree that it could be easier to just check that a redirect is returned from a controller spec but it seems odd that the behavior in Capybara would lead to a no route error when clearly the item does a redirect outside of the application. I appreciate you pointing out the have_current_path matcher!
",illegalnumbers,2015-10-29 22:46:45
1594,2015-10-30 01:48:13,"It shouldn't lead to a no route error unless you haven't tagged the test for js and are therefore using the rack-test driver which ignores the hostname
",twalpole,2015-10-29 22:46:45
1594,2015-10-30 02:16:59,"Hm, it appears that my spec helper didn't infer my spec type correctly based on location and was defaulting to rack-test. My apologies on that! I still get the following error though after using the code you posted:

<S_CODE_TOKEN>
",illegalnumbers,2015-10-29 22:46:45
1594,2015-10-30 03:27:25,"Make sure you're using capybara 2.5
",twalpole,2015-10-29 22:46:45
1594,2015-10-30 16:26:10,"Updated, appears to be working now. Thanks @twalpole ! I'll be sure to give you a twitter shout out :)
",illegalnumbers,2015-10-29 22:46:45
1593,2015-10-29 14:26:09,"Hi guys, I had some code working until it started failing some days ago (possibly since Chrome got updated). I'm using the `open_new_window` function. I've isolated it and it still fails...

Ruby version: 2.1.2
Selenium driver + Chrome v46.0.2490.71 (64-bit)

Code:

<S_CODE_TOKEN>

Error:

<S_CODE_TOKEN>

Any clue?

Thanks in advance!
",aadoello,2015-11-16 18:47:12
1593,2015-10-29 16:01:29,"One possibility is that Chrome is taking longer to open the new window, could you try increasing `Capybara.default_max_wait_time` and see if that fixes things for you?  
",twalpole,2015-11-16 18:47:12
1593,2015-10-29 16:49:16,"Hi Thomas,

Thanks for your help. Unfortunately I already tried that. I set it to 10
seconds and didn't work. I don't think it's time-related, it's more like
Capybara just can't open the window and doesn't realise about it... any
other idea?

2015-10-29 17:01 GMT+01:00 Thomas Walpole notifications@github.com:

> One possibility is that Chrome is taking longer to open the new window,
> could you try increasing Capybara.default_max_wait_time and see if that
> fixes things for you? If so we probably need to allow passing the :wait
> option through #open_new_window
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/jnicklas/capybara/issues/1593#issuecomment-152226108.

## 

Best Regards,

Alvaro Almagro Doello
Automated Test Engineer at FinancialForce.com
Twitter https://twitter.com/Alvaro_Almagro - LinkedIn
https://www.linkedin.com/in/alvaroalmagro
",aadoello,2015-11-16 18:47:12
1593,2015-10-29 17:25:32,"Well Capybara does realize it can't open the window - that's what the error is saying :)   All calling open_new_window does is execute ""window.open()"" in the browser, so as long as there is a current browser on which to call that then there aren't really many things to go wrong.  A few things to try
1.  visit a page before calling open_new_window to make sure there is actually a browser window to run the JS in
2. update to the latest chrome_driver
3. Make sure your chrome isn't configured to block new windows

This is behavior that is tested for in capybaras specs and is currently passing on travis with latest chrome_driver and latest chrome
",twalpole,2015-11-16 18:47:12
1593,2015-11-16 18:47:12,"Closing due to lack of followup
",twalpole,2015-11-16 18:47:12
1592,2015-10-29 14:23:54,"Appears that rack 2 (for Rails 5) has broken capybara's click_button method.
Now getting ""undefined method `normalize_params' for Rack::Utils:Module""
error when we using capybara's click_button method.
- After porting to Rails 5, I get this error with at least 3 repos:

<S_CODE_TOKEN>

To Reproduce, you can do the following:
- Example repo (I remove all but 1 test) with error:
  - git clone https://github.com/jasnow/tasks5lite.git
  - After set up, run ""rake"" and you will get this error:

<S_CODE_TOKEN>
- After tracking down the trigger line, I found this line
  - Rack::Utils.normalize_params(params, key, value)
  
  in this method:
  - merge_param!(params, key, value)
  
  in this file:
  - capybara-2.5.0/lib/capybara/rack_test/form.rb

Also found these references interesting:
- http://apidock.com/rails/Rack/Utils/normalize_params
  - Where I found this sentence: 
    - This method is deprecated or moved on the latest stable version. The last existing version (v2.3.2) is shown here.
- http://openwall.com/lists/oss-security/2015/06/16/14
  - Mentioned security-related changes to normailze_params inside rack.
- https://thewebfellas.com/blog/rails-2-3-8-rack-1-1-and-the-curious-case-of-the-missing-quotes
  - Unclear if this is helpful.
",jasnow,2015-10-29 14:36:52
1592,2015-10-29 14:36:52,"This should already be fixed in the master branch, please try using that
",twalpole,2015-10-29 14:36:52
1592,2015-10-29 14:38:49,"You are right - Sorry for the issue.
",jasnow,2015-10-29 14:36:52
1592,2015-12-19 20:10:03,"When is the next release of capybara gem?
",jasnow,2015-10-29 14:36:52
1592,2015-12-19 20:21:49,"No current date set - use the master branch
",twalpole,2015-10-29 14:36:52
1592,2015-12-19 20:35:40,"OK
",jasnow,2015-10-29 14:36:52
1592,2016-08-25 00:07:50,"I've faced this same issue and upgrading to a newer version fixed it for me. In my case, I've used:

<S_CODE_TOKEN>
",embs,2015-10-29 14:36:52
1591,2015-10-28 13:53:50,"The command

<S_CODE_TOKEN>

triggers the error message
`Options passed to Capybara::Node#set but the driver doesn't support them`
on Mac OSX 10.11 using either poltergeist or capybara-webkit driver.
Which driver supports the `fill_options` functionality?
",m1racoli,2015-10-28 14:15:49
1591,2015-10-28 14:15:49,"Ask ""how to"" questions in the mailing list as requested in the README
",twalpole,2015-10-28 14:15:49
1590,2015-10-28 04:33:25,"I want to compare the expected path and current path to justify whether the test is passed

I found the method Capybara::SessionMatchers#assert_current_path. I guess this method can fulfill my requirement. 

But when i wrote 

<S_CODE_TOKEN>

in my test, the error showed no #assert_current_path method

I've seen the Capybara::Session has included the Capybara::SessionMatchers. I'm confused of why i cannot call the #assert_current_path method. Does Capybara have the functionality to compare current path and expect path? coz use page content to justify the result is not stable for me. 

Thanks in advance!
",JevanWu,2015-10-28 06:01:21
1590,2015-10-28 06:01:21,"Ask ""how to"" questions on the mailing list as requested in the README
",twalpole,2015-10-28 06:01:21
1589,2015-10-23 07:29:45,"I have a page that on page load, does an ajax request to an external server. I want to mock that request.

I have been using sinon.js to mock the ajax requests to external servers when there is a DOM event. In this case is easy since I create a sinon server right before testing the event. After triggering the event with Capybara I respond to the request with sinon and it works.

However, when the request is made on page load. I can't create the server and respond before the `visit url`, because the request is not yet made. However, when I create and respond after the `visit url` it is too late since my request has already failed.

Could there be a way to pass a block to the #visit method maybe?

Thanks!
",lmuntaner,2015-10-23 14:35:05
1589,2015-10-23 14:35:05,"Please ask how to questions on the mailing list as requested in the README
",twalpole,2015-10-23 14:35:05
1589,2015-10-23 14:38:14,"Oops!! So sorry about that!!
",lmuntaner,2015-10-23 14:35:05
1588,2015-10-22 10:58:17,"The default finding method is by_css. I would love if it was by_xpath if selector begins with ""//"" (and maybe "".//"") because I use xpath in 30-50% of selectors.
",Nakilon,2015-10-22 16:06:22
1588,2015-10-22 16:06:22,"Capybara isn't going to start trying to detect the type of selectors by default because that just ends up  opening a can of worms.  However, if you want to add the behavior for your project it's easy enough to replace the current :xpath selector with one with a match proc that will make your wanted behavior happen.  Executing something like the following code after Capybara has loaded its builtin selectors will replace the existing :xpath selector and make find default to :xpath if a selector type is not passed but the locator starts with .//   

<S_CODE_TOKEN>
",twalpole,2015-10-22 16:06:22
1587,2015-10-13 16:10:21,"Hello,

I have an input field with no name, id or label, that I need to write an expectation on.

You can target this with a css selector using the `input[value='foo']` or a similar xpath, because it will match all inputs regardless.

However, in my case, the value of the input is being changed by javascript. An xpath selector would fail in this case because [""The XPath query is run against the html document so doesnt access the value property.""](https://github.com/jnicklas/capybara/issues/1061). The css selector form fails because it does not wait for the value to change. The normal way to solve this would be to use `expect(page).to have_field(..)`. However, the [field selector passes down the first argument to XPath::HTML.field](https://github.com/jnicklas/capybara/blob/6659722b7d16eb48676a5e0a595ee5da913f5f5b/lib/capybara/selector.rb#L129). XPath::HTML.field takes that argument and [tries to match that argument to id, name, label or placeholder](https://github.com/jnicklas/xpath/blob/master/lib/xpath/html.rb#L170). 

However, in my case, I have none of those. I just want to be able to match an input, regardless of attributes.

To give context, I am using react, and react is what is controlling, changing, and recording the value of the input field behind the scenes, so I do not need to assign it a name or id.

One solution could be to put a condition at the [point in which we call out to XPath](https://github.com/jnicklas/capybara/blob/6659722b7d16eb48676a5e0a595ee5da913f5f5b/lib/capybara/selector.rb#L129), and if the locator is `nil` or perhaps some symbol like `:any`, just do a normal xpath search for any input, textarea or select.

Thanks
",phillc,2015-10-13 16:38:34
1587,2015-10-13 16:38:34,"I haven't specifically tried it but I would guess

<S_CODE_TOKEN>

would probably do what you want, if not you can always add your own selector type with Capybara.add_selector(:react_field) { ... } and then do

  expect(page).to have_selector(:react_field, 'selector', filter1: 'blah blah', ...)  

with whatever type of xpath and filters you want
",twalpole,2015-10-13 16:38:34
1587,2015-10-13 16:44:39,"Empty string and nil do not work in this case.

Will try adding my own selector, thanks.
",phillc,2015-10-13 16:38:34
1586,2015-10-12 12:16:26,"I run tests with Capybara -> WebdriverRemote -> Firefox -> xvfb launching them as:
`java -jar selenium-2.47.1.jar -role hub`
`java -jar selenium-2.47.1.jar -role webdriver -hubHost 127.0.0.1`
They are hanging on `visit` starting exactly from **the second test** in 10% of test runs.

![screen shot 2015-10-08 at 13 47 01](https://cloud.githubusercontent.com/assets/2870363/10427816/5adf8426-70f5-11e5-91c3-40179b4cde72.png)

Here is node log around the moment of hanging:

<S_CODE_TOKEN>

... and on suite finish:

<S_CODE_TOKEN>

Note 0: it doesn't produce screenshots.
Note 1: that the same `visit` works fine in the first test:

<S_CODE_TOKEN>

Note 2: the only difference of the second test from the first one I know is that it already has Facebook cookies -- authorizing like this:

<S_CODE_TOKEN>

Here are parts of my Gemfile.lock:

<S_CODE_TOKEN>

CentOS release 6.7 (Final), Mozilla Firefox 38.3.0 and openjdk version ""1.8.0_51"".
",Nakilon,2015-10-12 17:41:09
1586,2015-10-12 17:41:09,"Since all capybara is doing is requesting selenium-webdriver to visit a url I would guess you've run into a bug in selenium and should report it over on that project.

I do have a concern about your test code though - in your before block the 

<S_CODE_TOKEN>

there is no guarantee the previous click has actually changed the current_host immediately so it's possible that equality test is failing when you expected it to pass - you would probably be better off using something like

<S_CODE_TOKEN>

which will wait a bit to see if the url changes, you can also use similar rather than directly using Selenium::WebDriver::Wait which utilizes Time.now and can therefore hang if Time is frozen/stubbed/etc  - On platforms that support it capybara utilizes the monotonic system timer so doesn't have that issue.
",twalpole,2015-10-12 17:41:09
1585,2015-10-08 18:47:54,,nambrot,2015-10-12 17:43:17
1585,2015-10-12 17:43:20,"thanks
",twalpole,2015-10-12 17:43:17
1584,2015-10-08 11:38:44,"Looks like chaining `#text` doesn't mind nodes visibility:

<S_CODE_TOKEN>

Shouldn't it be described somewhere in docs or is it a bug?
",Nakilon,2015-10-08 16:51:27
1584,2015-10-08 16:51:27,"all returns a Capybara::Result object which doesn't have a #text method, so I'm not really sure what code you're calling.  Have you added methods to Capybara::Result?  If you've included the capybara dsl into Object, then I guess it could be calling capybaras text method, but that would be calling it for the entire page, which I guess could output what you're showing.  Either way this isn't a bug in Capybara.
",twalpole,2015-10-08 16:51:27
1583,2015-10-06 21:46:52,"html files produced by capybara when running `save_and_open_page` are saved in `tmp/capybara` which from time to time needs clearing out.

I noticed this page on SO http://stackoverflow.com/questions/19342578/how-to-make-rake-tmpclear-also-clear-tmp-capybara and wondered if capybara should be applying this task to rake somehow for clearing capybara tmp files as part of `rake tmp:clear` or have I missed something and should it be already doing it?
",amnesia7,2015-10-06 21:52:41
1583,2015-10-06 21:52:41,"Capybara doesn't do any cleanup of tmp files -- you need to handle that yourself
",twalpole,2015-10-06 21:52:41
1583,2015-10-24 14:25:15,"Just got a response from rails issue about this and looks to be a straightforward addition to allow this cleanup to be added if it's worth it: https://github.com/rails/rails/issues/22050#issuecomment-150812209

Any more thoughts @twalpole or is it still not worth adding?
",amnesia7,2015-10-06 21:52:41
1583,2015-10-24 17:18:20,"where to save the files by default is set by Capybara.save_and_open_page_path - so if a user sets that in code that isn't loaded by the Rakefile then the task would be cleaning the wrong thing, also Capybara isn't rails only so adding this for everyone wouldn't make much sense.  
Capybara won't be adding this to the project, if you want it in your projects as explained in the rails teams response it's easy enough to add.
",twalpole,2015-10-06 21:52:41
1582,2015-10-06 20:50:12,"This fixes #1579
- selected filter always allows invisible options
- options filter allows invisible options if the select
  itself is invisible
- with_options filter allows invisible options if the select
  itself is invisible
",naw,2015-10-06 22:27:57
1582,2015-10-06 21:06:32,"I think it needs a test for a visible select with a non-visible but selected option - otherwise looks good to me
",twalpole,2015-10-06 22:27:57
1582,2015-10-06 21:36:57,"My original HTML for the selected spec was actually like that, but then I noticed that selenium considers an invisible selected option as visible.  That makes sense --- if you load a form with a pre-selected invisible option into Firefox or Chrome, the option is indeed visible.

Originally, I had a test to verify a visible select with an invisible option would _not_ pass the options filter, but the selenium version of the test failed because selenium treated the invisible option as if it were visible. The RackTest and Chrome version of that test passed.

I can definitely adjust the spec per your suggestion, but in selenium I believe the spec would pass even without the code changes .... in other words, it would pass for the wrong reason(s) and not be testing the correct code path.  Perhaps that's fine, as long as the other drivers _do_ test the correct code path?

Any additional thoughts on this before I move forward?
",naw,2015-10-06 22:27:57
1582,2015-10-06 21:48:31,"We're saying that a selected option is checked against selected whether it's visible or not, so if firefox happens to ignore display: none on an option that is selected I think it's fine -- other drivers may not and the test will be verifying that the option is included in the selected filter 
",twalpole,2015-10-06 22:27:57
1582,2015-10-06 22:03:18,"Added a commit to address your suggestion.  I can squash it if it looks OK to you.
",naw,2015-10-06 22:27:57
1582,2015-10-06 22:14:37,"looks good -- go ahead and squash and I'll merge it in
",twalpole,2015-10-06 22:27:57
1582,2015-10-06 22:16:15,"Squashed. Thanks for your quick attention to this.
",naw,2015-10-06 22:27:57
1582,2015-10-06 22:28:01,"thanks for the work!
",twalpole,2015-10-06 22:27:57
1581,2015-10-06 20:29:26,"I am trying to write test cases using Capybara with Selenium and am running into an issue 

<S_CODE_TOKEN>

The application opens up  in a firefox browser, but after couple of seconds it closes and a new blank window/browser is shown.

Could you give inputs on how I can resolve this problem?
",haridak,2015-10-06 21:09:13
1581,2015-10-06 21:09:13,"Please ask howto questions on the mailing list as requested in the README
",twalpole,2015-10-06 21:09:13
1581,2015-10-06 21:22:08,"Sure, thanks
",haridak,2015-10-06 21:09:13
1580,2015-10-03 13:23:43,"I have an AJAX link that updates each click.  The first time it's executed it works fine.  But as the link is replaced it becomes escaped only in the Capybara test and becomes an invalid URI.

Using
- Rails 4.1.13
- Capybara 2.4.4
- Capybara-WebKit 1.5.1

I'm using Rails' UJS to execute JavaScript in the current page which simply rewrites the div cell with the same link and a counter.

<S_CODE_TOKEN>

This is what's in the page.  And it calls the UJS javascript code:

<S_CODE_TOKEN>

And that works in the test.

What it loads is simply the same link with an added counter.

<S_CODE_TOKEN>

The HTML output, for the link, in the browser is:

<S_CODE_TOKEN>

After the JavaScript has been executed and the same link rewritten in place it ends up (quote) escaped so capybaras click_on method raises this error.

<S_CODE_TOKEN>

So looping over this fails after this first JavaScript link replacement.

I know the solution for my problem is to simply not rewrite the link and only rewrite the count.  But I see this as an issue Capybara contains in JavaScript written links becoming escaped and therefor unusable for further testing.  Hope this helps!

Same results with both

<S_CODE_TOKEN>
",danielpclark,2015-10-03 13:54:21
1580,2015-10-03 13:54:21,"My bad.  The JavaScript isn't executing.  After changing it so it doesn't replace the link I checked the response and page itself becomes the JavaScript returned instead of executing it to update the page.

<S_CODE_TOKEN>
",danielpclark,2015-10-03 13:54:21
1579,2015-10-02 23:53:02,"`page.have_select('Label', visible: false, selected: 'selected option')`

The select will be found (even though it is hidden), but the selected option will not be found because it (and its text) are hidden.

I would have expected the filter to match even if the option is hidden (if `visible: false` is specified).

Fixing it seems like it would require a change to the filter system in general.

 As far as I can tell, the filter system itself does not pass the underlying options hash (containing `visible: false`) to the filters when checking for a match, so there is no way for the filter to make determinations based on `visible: false`.

Questions:
1. Would you agree that the filter _should_ match on a hidden option, provided `visible: false` is 
   specified?
2. Would you be open to a PR to fix this?
3. Passing the underlying options hash to `Filter#matches?` seems like one viable solution, although perhaps heavy-handed.  Any alternative suggestions?
",naw,2015-10-06 22:27:57
1579,2015-10-03 00:05:41,"I think the selected filter should never care about the visibility status of the options at all --- if they're selected they should be matched
",twalpole,2015-10-06 22:27:57
1579,2015-10-03 01:35:53,"In that case, the fix is easy:

https://github.com/naw/capybara/commit/e855c2d5da38bad2ae94ebc9860112c745a9ecf1

What do you think about visibility in the other filters, such as `options` and `with_options`?
",naw,2015-10-06 22:27:57
1579,2015-10-03 17:05:04,"options and with_options are slightly more complicated - if the select isn't visible (which can be checked from the node element) then there's no point checking the visibility of the options since they can't be visible so they should probably all be considered.   If the select is visible (which can again be checked from the node) then we obviously want visible options, but do we want hidden options?  I would guess no - and if if the user really wants to check for a visible select with non-visible options then they may have to resort to querying the options individually
",twalpole,2015-10-06 22:27:57
1578,2015-10-02 00:03:06,"The explicit dependency on this Rack method breaks when upgrading to Rack 2 because Rack::Utils.normalize_params has been moved since this commit https://github.com/rack/rack/commit/7e7a3890449b5cf5b86929c79373506e5f1909fb

There's [a very similar version in Rack::QueryParser](https://github.com/rack/rack/blob/master/lib/rack/query_parser.rb#L78), but it has
the downside of trying to make a hash of Rack::QueryParser instances
instead of a hash of hashes.
",tjgrathwell,2015-10-28 19:32:42
1578,2015-10-03 17:19:37,"hmmm -- I don't really like the idea of copying the whole method over, and would prefer if it was possible to do using functionality provided by rack 2 - however I understand that may not be possible.  I need to think about this for a bit
",twalpole,2015-10-28 19:32:42
1578,2015-10-13 08:20:19,":+1: Thank you @tjgrathwell this bug has been here for months.

I decided to search and found your PR because I wanted to put my [WIP Rails Authenticator](https://travis-ci.org/hello-gem/hello) back testing with rails:master Now my specs work again :heart:  https://travis-ci.org/hello-gem/hello/builds/85068627

I had also tried your first approach, @twalpole I can validate that it does not work because it brings instances of internal classes, maybe a cleaner solution will show up in the recent future, but right now placing direct code in there seems like the easiest choice. :cry: 

@tjgrathwell thanks again! :+1: 
",thejamespinto,2015-10-28 19:32:42
1578,2015-10-28 19:45:20,"This is merged into master and I added rack 2 and sinatra 2.2.0-alpha to the beta-versions test for travis
",twalpole,2015-10-28 19:32:42
1577,2015-10-01 16:08:51,"I am using Capybara 2.4 for web page scraping and was having a memory leak issue with phantomjs remaining in memory and consuming resources. According to the Poltergeist webpage, they suggest using a Capybara method to fix this problem:

<S_CODE_TOKEN>

Now the issue is that whenever I do Capybara.visit after quitting the driver, I receive the error:

<S_CODE_TOKEN>

I believe resetting the session should fix this, but I get the same error whenever I call any of the _reset! methods on the session or driver. Is there a way to just initialize a new session object?
",wakproductions,2015-10-01 16:36:27
1577,2015-10-01 16:36:27,"Capybara doesn't support operation after you call driver specific messages on the poltergeist driver, you should post this question either in the mailing list or over on the poltergeist project
",twalpole,2015-10-01 16:36:27
1576,2015-09-20 13:06:06,"Hi,

How much work do you think it would be to have a very basic driver for HTML strings using webkit or selenium?

I know I can already use the Node matchers on strings, but I'd like to be able to save a rendered screenshot in order to help debug our View and Cell specs.

I'm happy to look into this myself, but I'd like it if someone with knowledge of the capybara internals could give me a steer on whether it's possible/practical and how much work this would be.
",samstickland,2015-09-21 15:51:51
1576,2015-09-21 15:51:51,"To save a rendered screenshot of a string - you would need to load the string into webkit or selenium so they can process and render the css.  If you know its a static html string without any JS or anything you could save it to a file and then open that file in FF or whatever.  However,  wouldn't it just be easier to set up your tests to rerun failing tests in selenium or webkit and save a screenshot from there.  

I'm closing this since its not an issue with Capybara, if you want to discuss further please move over to the mailing list detailed in the README
",twalpole,2015-09-21 15:51:51
1575,2015-09-19 03:53:08,"- Allowing `true`, `false`, or `:all` for all selectors with the `:disabled` option
- Adding `:skip_if` option to `Filter` to skip the filter (i.e. return `true`) if this value is passed

I added the `:skip_if` option to `Filter` because so many selectors had this `:disabled` option and adding the logic to each seemed too repetitive. If there's a preferred alternate approach or a better name than `:skip_if`, let me know.
",jillianrosile,2015-09-19 18:43:32
1575,2015-09-19 03:56:59,"And right after I submit this I notice that @twalpole submitted the same thing earlier today. Oops. Well, here's another idea of how to approach it.
",jillianrosile,2015-09-19 18:43:32
1575,2015-09-19 18:46:07,"@jillianrosile Thanks for this -- great idea on the :skip_if option.  I made one change so the skip_if value doesn't need to be specified in the valid_values - merged in to master
",twalpole,2015-09-19 18:43:32
1575,2015-09-19 20:37:36,"Thanks! Looked at your follow-up commit and I like it. Makes sense to not have to repeat the parameter in both `:valid_values` and `:skip_if`.
",jillianrosile,2015-09-19 18:43:32
1574,2015-09-18 19:47:31,,twalpole,2015-09-19 18:46:21
1574,2015-09-19 18:46:40,"Closed in favor of #1575
",twalpole,2015-09-19 18:46:21
1573,2015-09-08 12:34:27,"I am trying to assert if text for a given node matches value returned from an API but when API returns nil for a value, it still passes.

<S_CODE_TOKEN>

if the API.value is nil the test still passes. Should text eq be used here? 
",sharmarahul,2015-09-08 22:32:44
1573,2015-09-08 22:32:44,"This is as designed, have_content verifies the page/element contains the passed string at least once (or more if any of the count options are passed) - if you want to check for an exact match you need to pass a regex to have_content
",twalpole,2015-09-08 22:32:44
1572,2015-09-08 11:44:58,"Hello Team,
Could you please help me, I haven't found anything about this question in the internet - how to perform adfs authentication with capybara?
On the beginning of page loading I have this login pop-up:
<img width=""476"" alt=""screen shot 2015-09-08 at 14 42 53"" src=""https://cloud.githubusercontent.com/assets/3985704/9733997/6bab7c92-5638-11e5-8b15-4dbaebb78048.png"">
are there ways to enter login and password?

Thank you!
",KaterynaTs,2015-09-08 14:43:47
1572,2015-09-08 14:43:47,"Please ask how to questions on the mailing list as requested in the README
",twalpole,2015-09-08 14:43:47
1572,2015-09-08 15:11:54,"Thank you, [done in Google group](https://groups.google.com/forum/#!topic/ruby-capybara/X1RQGUjMVDM).
",KaterynaTs,2015-09-08 14:43:47
1571,2015-08-31 04:56:18,"As of [1.0.0](https://github.com/jnicklas/capybara/blob/master/History.md#deprecated), deprecated features are I think easy to understand better section of another.
",y-yagi,2015-09-01 16:05:19
1570,2015-08-27 23:54:09,"This reimplement Session#visit usuing URI#merge.  It was initially aimed at fixing Issue #1348, but I decided that #1348 wasn't really a valid use of #visit.
",twalpole,2015-09-08 22:29:10
1569,2015-08-25 22:38:32,,twalpole,2015-08-25 22:38:39
1568,2015-08-25 15:23:16,"The method used in the example doesn't exist!
",hashrocketeer,2015-08-25 15:35:55
1568,2015-08-25 15:35:55,"Duplicate of #1565 and others
",twalpole,2015-08-25 15:35:55
1567,2015-08-24 18:58:10,,twalpole,2015-08-25 18:33:48
1566,2015-08-21 19:40:58,,twalpole,2015-08-26 05:57:51
1566,2015-08-21 19:55:32," @jferris @jonleighton @mhoran  @route  It's been a while since the last Capybara release and some of the features I wanted to add have been delayed (proxy support for selenium driver).  My current plan is to release the current set of updates as 2.5 in the next few days/week, and then do a 2.6 with the other planned updates in the next couple of months.   I don't think there is much in 2.5 that will affect your drivers other than Node#send_keys and that there is now a test for Node#path behavior.  If you have any concerns with the 2.5 release please let me know
",twalpole,2015-08-26 05:57:51
1566,2015-08-21 21:44:51,"Thanks for the heads up. We've not yet implemented `send_keys` in capybara-webkit, though I do have a work in progress. Also, we'd like to cut our own version 2.0 to drop some deprecated features, so it probably makes sense to coordinate the release.
",mhoran,2015-08-26 05:57:51
1566,2015-08-25 23:06:01,"@mhoran I'm pretty much ready to do a 2.5 release, would it be of any benefit to do an rc1 release first?
",twalpole,2015-08-26 05:57:51
1566,2015-08-26 02:18:44,"I'd say go ahead and release 2.5. I think the only issue we have at the moment is `send_keys`, which shouldn't be too difficult as we've already looked at it. Unfortunately I've yet to finish up the implementation, but just about everything else looks good. Hopefully we can get a compatible version out the door shortly after the release, but I don't want to hold up the release in the meantime.
",mhoran,2015-08-26 05:57:51
1566,2015-08-26 12:53:58,"We can push an interim release which allows Capybara 2.5 but raises an unsupported error for `send_keys`. That's the usual thing to do when a driver doesn't support a feature, right?
",jferris,2015-08-26 05:57:51
1566,2015-08-26 14:13:33,"Yeah, and as long as you're deriving from Capybara::Driver::Node that should happen automatically
",twalpole,2015-08-26 05:57:51
1566,2015-08-26 21:04:02,"Thank you @twalpole for information, I'll try to run tests and release new version soon!
",route,2015-08-26 05:57:51
1565,2015-08-20 08:42:38,"`default_max_wait_time` doesn't seem to exist any more. I'm guessing `default_wait_time` is the new name?
",ramhoj,2015-08-20 09:20:34
1565,2015-08-20 09:20:34,"Dup of #1550
",twalpole,2015-08-20 09:20:34
1564,2015-08-17 23:31:19,"In my testing, I had <button type=""Submit"">Go</button>.  Capybara could not click the button in this instance.
",kylemellander,2015-08-21 19:45:12
1564,2015-08-18 13:47:48,"Please provide the HTML, the capybara command you were attempting to use, and which driver you were using
",twalpole,2015-08-21 19:45:12
1564,2015-08-21 19:45:11,"Closing due to lack of response
",twalpole,2015-08-21 19:45:12
1563,2015-08-17 14:59:10,"Hi,

I have tests that quite smoothly works with Firefox but after changing browser to Chrome I've started getting:

<S_CODE_TOKEN>

Any ideas or hints how to cope with it?
",piotrzk,2015-08-17 17:38:45
1563,2015-08-17 17:38:45,"This is a duplicate of #1553
",twalpole,2015-08-17 17:38:45
1562,2015-08-12 20:43:55,"I often write matchers that take an argument that might be either a single object or a collection, e.g.

<S_CODE_TOKEN>

I could then write the matcher like this, in theory:

<S_CODE_TOKEN>

The `Array.wrap` method does exactly what I want here -- wraps a single object in an array or calls `.to_ary` on an Enumerable object (i.e., leaves it unchanged for my purposes). Problem is, though `Capybara::Result` defines the `.to_a` method as expected, it does not define the corresponding implicit `.to_ary` method, so `Array.wrap` doesn't work here. Any reason that shouldn't be patched?
",githorse,2015-08-12 21:06:02
1562,2015-08-12 21:05:56,"Capybara::Result is not an array, and doesn't implement all the methods Array supports.  My understanding is that #to_ary should only be implemented for objects that are derived from Array or implement all the methods Array supports - see https://bugs.ruby-lang.org/issues/3685
",twalpole,2015-08-12 21:06:02
1562,2015-08-12 21:10:00,"FYI: you should should just be able to do  Array(actual)  since that will move on to trying #to_a if #to_ary is not provided
",twalpole,2015-08-12 21:06:02
1562,2015-08-14 14:01:00,"thanks @twalpole -- I didn't realize Array() would do that. That works.
",githorse,2015-08-12 21:06:02
1561,2015-08-11 15:35:42,"Fixes a typo `agains` -> `against`
",gravitystorm,2015-08-11 16:20:23
1561,2015-08-11 16:20:38,"Thanks
",twalpole,2015-08-11 16:20:23
1560,2015-08-11 14:33:02,"Using Cpaybara + Rspec + Selenum .
Trying to fill in a textarea with a **very** long string:

<S_CODE_TOKEN>

results in:

<S_CODE_TOKEN>

any idea how to resolve?
",shoshRose,2015-08-17 18:21:52
1560,2015-08-11 16:28:47,"How long is ""very long""? What driver are you using? Also, if you can provide a minimal test case that would be great.
",twalpole,2015-08-17 18:21:52
1560,2015-08-17 18:21:52,"Closing due to lack of response
",twalpole,2015-08-17 18:21:52
1559,2015-08-10 22:25:55,"As part of my PhD research on code authorship, we calculated the Truck Factor (TF) of some popular GitHub repositories.

As you probably know, the [Truck (or Bus) Factor](https://en.wikipedia.org/wiki/Bus_factor) designates the minimal number of developers that have to be hit by a truck (or quit) before a project is incapacitated. In our work, we consider that a system is in trouble if more than 50% of its files become orphan (i.e., without a main author).

More details on our work in this preprint: https://peerj.com/preprints/1233

We calculated the TF for **Capybara** and obtained a value of **3**.

The developers responsible for this TF are:

Jonas Nicklas - author of 65% of the files
Thomas Walpole - author of 18% of the files
Andrey Botalov - author of 14% of the files

To validate our results, we would like to ask **Capybara** developers the following three brief questions:

(a) Do you agree that the listed developers are the main developers of **Capybara**?

(b) Do you agree that **Capybara** will be in trouble if the listed developers leave the project (e.g., if they win in the lottery, to be less morbid)?

(c) Does **Capybara** have some characteristics that would attenuate the loss of the listed developers (e.g., detailed documentation)?

Thanks in advance for your collaboration,

Guilherme Avelino
PhD Student
Applied Software Engineering Group (ASERG)
UFMG, Brazil
http://aserg.labsoft.dcc.ufmg.br/
",gavelino,2015-08-11 17:07:25
1558,2015-08-09 17:27:57,"This PR is to implement`Capybara::Selenium::Node#path`. It now returns a XPath which points to the node, instead of raising `NotSupportedByDriverError`.
",soutaro,2015-08-20 20:47:57
1558,2015-08-09 20:41:22,"Thanks for the PR -- I made a couple of comments, with those fixes I think it looks good --- I'll give it a more in depth review later today
",twalpole,2015-08-20 20:47:57
1558,2015-08-10 05:47:20,"Thanks! I will fix for your comments today.
",soutaro,2015-08-20 20:47:57
1557,2015-07-30 16:08:08,"At line 5 of [lib/capybara/rails.rb](https://github.com/jnicklas/capybara/blob/3ae284460b1af35d40b077bf14f7222c2982c120/lib/capybara/rails.rb#L5), there is a hard-coded assumption that the app I am testing is rooted at ""/""

<S_CODE_TOKEN>

This is not a guarantee.  My Rails 4.2 application is configured with:

<S_CODE_TOKEN>

so that the application lives at https://mydomain.com/some_nested_url.

To tell Capybara this, I have to monkey-patch the entire `Capybara.app = Rack::Builder.new do ...` in the above file.

Instead of ""/"", the argument to `map` should really be:

<S_CODE_TOKEN>

This could even be a configurable option, with `ActionController::Base.relative_url_root.presence || '/'` as the default.

If I a PR that addresses this, will it be accepted?  Should I make it configurable or just check for `relative_url_root`?
",betesh,2015-07-30 19:30:20
1557,2015-07-30 19:30:20,"Is setting ActionController::Base.relative_url_root alone enough to make a an app work in a subdirectory?  From my quick (very quick and very minimal) test it isn't and seemed only to change the url of asset links.  If it alone isn't sufficient then using it for the mount point is going to create more issues.   lib/capybara/rails.rb should really be taken as the basic case and an example for more complex cases.  If you have a more complex case copy the contents of the file into your own rails_helper.rb (or whatever file you configure your test setup from) and modify it as needed
",twalpole,2015-07-30 19:30:20
1557,2015-07-30 21:00:46,">  If you have a more complex case copy the contents of the file into your own rails_helper.rb (or whatever file you configure your test setup from) and modify it as needed

That's what I'm doing, but I wouldn't call my case ""more complex"".  In production, it's mounted at a relative_root_url -- nothing particularly complex there.  I want Capybara to match production as much as possible, and since I have a `mount ""some_nested_url"" do` block in `config.ru`, I want one in Capybara.app as well.  It seems to be that the default should be for the two environments to match.
",betesh,2015-07-30 19:30:20
1557,2015-07-30 21:39:10,"Ok - then all you need to do is override the default app created

<S_CODE_TOKEN>

Basing the mount point on the setting of ActionController::Base.relative_url_root isn't correct since setting that alone doesn't appear to be enough to get a rails app to work in a subdirectory, and it's not really worth figuring out all the settings and logic across multiple versions of rails that would be required to be checked instead of 5 lines in a users helper file. 
",twalpole,2015-07-30 19:30:20
1556,2015-07-29 16:40:14,,mattduboismatt,2015-07-29 18:25:43
1556,2015-07-29 18:25:43,"The README is for master where the correct method name is default_max_wait_time
",twalpole,2015-07-29 18:25:43
1556,2015-07-29 18:44:26,"Dup of https://github.com/jnicklas/capybara/pull/1550
",abotalov,2015-07-29 18:25:43
1555,2015-07-27 15:34:29,"This line
expect(page).not_to have_content(client.to_s, :visible=>false)

Produces this warning message...
invalid keys :visible, should be one of :text, :visible, :between, :count, :maximum, :minimum, :exact, :match, :wait

Capybara 2.4.4

Can't we use visible=false to test for non-visible paragraph content? 

thanks!
",vanboom,2015-07-27 15:47:40
1555,2015-07-27 15:47:40,"Please ask how to questions on the mailing list as requested in the README
",twalpole,2015-07-27 15:47:40
1555,2015-07-27 16:26:30,"Despite the question, the warning seems wrong to me. The visible option is listed as one of the possible accepted options. This should not produce the warning then.
",obfuscoder,2015-07-27 15:47:40
1555,2015-07-27 16:32:48,"This is a duplicate of https://github.com/jnicklas/capybara/issues/1549

As you can see in https://github.com/jnicklas/capybara/commit/bc47af003e7866836d646286adcaa3a661b9e143 `:visible` is not a supported option and it never was one.
",abotalov,2015-07-27 15:47:40
1554,2015-07-24 22:09:41,"Not sure when this started happening, but I'm getting this error message when trying to check for content on the page:

<S_CODE_TOKEN>

It used to be that Capybara would provide a helpful error message including the content that was found on the page. I'm using Capybara/Cucumber/RSpec to test an Ember.js app so maybe there is a bug in this particular combination.
",andrewhavens,2015-07-30 19:33:26
1554,2015-07-24 22:15:06,"What driver are you using? What version of Capybara? and please post the stacktrace so we can see where the error is coming from
",twalpole,2015-07-30 19:33:26
1554,2015-07-24 22:48:53,"Mostly using capybara-webkit, but this happens when using selenium too. It usually happens when an element can't be found on the page. There is no stack trace other than my failing steps. My steps simply have things like `fill_in` fields or `click_on` links or `expect(page).to have_content`. The cause of the failure is that the AJAX request hasn't finished, and Capybara doesn't know to wait for those requests to finish. Normally, Capybara is smart enough to wait, but in this case, it's some sort of conflict with Ember.js's virtual DOM.
",andrewhavens,2015-07-30 19:33:26
1554,2015-07-25 01:22:32,"Without a stack trace or reproducible test case there's not much we can do about this
",twalpole,2015-07-30 19:33:26
1554,2015-07-30 19:33:26,"Closing -- if a stacktrace or reproducible test case is provided we can reopen
",twalpole,2015-07-30 19:33:26
1554,2016-05-23 18:19:10,"In case anyone else comes across this (my google search led me here), I experienced this issue. The cause for me was the following line:

https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/base.rb#L90

<S_CODE_TOKEN>

It turned out I was loading the wait time from my environment setting:

<S_CODE_TOKEN>

The issue is that in this example `ENV['DEFAULT_MAX_WAIT_TIME']` will be a string and not a numeric type.

<S_CODE_TOKEN>

Solved things for me.
",scsmith,2015-07-30 19:33:26
1553,2015-07-24 19:04:34,"After updating Chrome to version 44, some capybara started to break, specifically tests where a user logs in.  However, not all of the tests that have a logged in user failed.  Oddly, I fixed the failing tests by inserting a sleep .1 right after the code that signs the user in.  I also fixed the tests by using Chrome version 43.  I have no idea how to make my tests compatible with Chrome version 44 without adding those inexplicable sleeps.
",jessicadanaowens,2015-07-24 19:22:40
1553,2015-07-24 19:22:40,"Chrome 44 has a number of issues with chromedriver -  the 2 biggest being

https://code.google.com/p/chromedriver/issues/detail?id=1158&colspec=ID%20Status%20Pri%20Owner%20Summary

https://code.google.com/p/chromedriver/issues/detail?id=1159&sort=-id&colspec=ID%20Status%20Pri%20Owner%20Summary

For the second issue of special keys not working theres not Capybara can do to fix, so hopefully Chrome or chromedriver will make a change to make that work again.

For the first issue, the problem is that a lot of actions now return much sooner than they used to (visit returns before the new page has started loading, etc) - and the proper solution to that is really having your tests wait for content from the new page (rather than just sleeping 0.1 seconds) before performing other actions, so that Capybaras implicit waits allow for the browser to catch up.  The other option may be do something like  

  expect(page).to have_no_css('#login') 

in the end of your login method, to have the test wait for the page to unload.  Either way this isn't really an issue on Capybaras side, just a massive change in behavior of chromedriver that may require a bunch of work to make tests compatible - hopefully they revert the behavior  (it required changes in a bunch of capybaras tests too - you can see them as recent commits on the master branch)
",twalpole,2015-07-24 19:22:40
1552,2015-07-21 08:30:55,"This PR eliminates some Ruby :warning:s when run with `RUBYOPT=""-w""`.

Similar to #599, #897.
",amatsuda,2015-07-21 18:39:12
1552,2015-07-21 18:39:16,"thanks
",twalpole,2015-07-21 18:39:12
1551,2015-07-21 03:37:30,"Please share your thoughts regarding `#has_text?` matcher being able to accept an array of strings that need to appear on the page only once.

Before

<S_CODE_TOKEN>

After

<S_CODE_TOKEN>

Would be happy to send the pull request.
",andrii,2015-07-21 18:43:38
1551,2015-07-21 18:43:20,"I'm not sold on this really gaining anything, since I tend to lean more towards having the tests be very clear about what is actually being checked for - If you actually have an array of text you can always just do

<S_CODE_TOKEN>

, but for most cases its just clearer to write out each line.  
",twalpole,2015-07-21 18:43:38
1550,2015-07-20 20:02:51,"it's `default_wait_time`
",GBH,2015-07-20 20:06:43
1550,2015-07-20 20:06:43,"This is README.md of `master` branch. The corresponding change (https://github.com/jnicklas/capybara/pull/1502) is not released yet.
",abotalov,2015-07-20 20:06:43
1550,2015-07-20 20:07:00,"The readme is for the upcoming version 2.5 -- where it has changed to default_max_wait_time to attempt to clear up confusion about what exactly the setting does.  default_wait_time is being deprecated.
",twalpole,2015-07-20 20:06:43
1550,2015-07-20 20:12:22,"Ah, bah! That makes sense. 

Problem is that one wouldn't know. Even the site: http://jnicklas.github.io/capybara/ tells you to install the gem and points to README on the master branch.

I'm seen on some other repos notices like ""This is README for unreleased version, click here for current"". This comes up from time to time.
",GBH,2015-07-20 20:06:43
1549,2015-07-16 11:48:21,"Using version (2.4.4)

<S_CODE_TOKEN>

Will succeed and show a confusing message:

> invalid keys **:exact**, should be one of :text, :visible, :between, :count, :maximum, :minimum, **:exact**, :match, :wait

This will also happen for other invalid keys.
",ndnenkov,2015-07-16 17:46:58
1549,2015-07-16 17:27:36,"The message is confusing and will be fixed in the 2.5 release, however the gist of the message that :exact is an invalid option for have_content/have_text is correct.  If you really want to match the text exactly (rather than just look for the passed string to be a substring of the page/element content) then you should pass a regex  /\ABuild software better, together.\Z/  
",twalpole,2015-07-16 17:46:58
1548,2015-07-15 17:08:02,"I can't choose/check options via default `check` /  `choose` helpers of capybara, while switching to `find` works:

<S_CODE_TOKEN>

HTML:

<S_CODE_TOKEN>

Setup is `capybara (2.5.0.dev)` + `poltergeist (1.6.0)`.

HTML snippets are from different steps of form and get rendered after an ajax call, just so you know*
",killthekitten,2015-07-16 21:09:35
1548,2015-07-16 17:49:13,"Are the checkbox and radio button visible?  If you are hiding them and highlighting the labels to show selected state, then this behavior is correct/as designed since a user cannot click on a hidden checkbox/radio button.   
",twalpole,2015-07-16 21:09:35
1548,2015-07-16 20:54:54,"@twalpole yes, the elements are customized, so there is a big chance that they are hidden. I need to take a look later. 

Thank you for the idea. So is there a workaround? Click on the visible label still should change the value of a checkbox, why don't we support it?
",killthekitten,2015-07-16 21:09:35
1548,2015-07-16 21:09:34,"It is supported by doing exactly what you are doing -- find the label and click on  it.   #check and #choose are specifically defined to interact with the checkboxes and radio buttons.  If they're not visible on the page the user cant directly interact with them, so you cant use check or choose.
",twalpole,2015-07-16 21:09:35
1548,2015-07-16 21:09:38,"In fact, there are specs that are expecting this feature to work:

<S_CODE_TOKEN>

https://github.com/jnicklas/capybara/blob/3ae284460b1af35d40b077bf14f7222c2982c120/lib/capybara/spec/session/choose_spec.rb#L12

<S_CODE_TOKEN>

https://github.com/jnicklas/capybara/blob/3ae284460b1af35d40b077bf14f7222c2982c120/lib/capybara/spec/session/check_spec.rb#L57
",killthekitten,2015-07-16 21:09:35
1548,2015-07-16 21:10:12,"@twalpole labels are visible.
",killthekitten,2015-07-16 21:09:35
1548,2015-07-16 21:11:25,"Yes -- the labels are visible but the checkbox and radio button are obviously not -- check and choose can find by label text, but they interact directly with the checkbox and radio button -- if they are not visible on the page the user cannot directly interact with them
",twalpole,2015-07-16 21:09:35
1548,2015-07-16 21:13:50,"@twalpole but who cares does he can interact or not? I mean it's a default way of interaction with these elements, via labels.
",killthekitten,2015-07-16 21:09:35
1548,2015-07-16 21:15:58,"@twalpole and the fact this behavior is not documented or mentioned in the exception message (stop me if I'm wrong) makes debugging very complicated. 
",killthekitten,2015-07-16 21:09:35
1548,2015-07-16 21:19:56,"Actually the default way of interacting with a checkbox is to click the checkbox - if there is a label attached to the checkbox then you can usually click the label too, however that is definitely the secondary method of interaction with a checkbox.  The bottom line is if you are hiding the checkbox or radio button, you can't use check or choose to interact with it -- do like you have done find the label and click it.

From the docs for #check  --  Find a check box and mark it as checked. The check box can be found via name, id or label text.  --  The ""check box can be found"", except it can't if its not visible on the page.  If you feel the docs need clarifying PRs are always considered.
",twalpole,2015-07-16 21:09:35
1547,2015-07-15 15:21:41,"Hi

 `capybara` uses a method `rspec` also uses: `all` - see [RSpec's documentation](https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/all-matcher) for more on this matcher. 

Unfortunately this is at least an issue  for all projects using `aruba` (> 0.8) together with `capybara` as it makes heavy use of `rspec-expectations` - e.g.`middleman` middleman/middleman#1562. Maybe this is even an issue for your own `rspec`-integration. It looks very similar to #1526.

Here's some code which breaks if both `aruba` and `capybara` are used. Though it's a problem of `capybara` plus `rspec-exectations` really from my point of view. @myronmarston @mattwynne Just a ping for you to know.

For now I don't see a way to work around this. Any suggestion is more than welcome. This code checks if all or none of the given strings are existing files. Unfortunately `all` should be used from `rspec` and not from `caypbara` in this context.

<S_CODE_TOKEN>

This code above now fails with:

<S_CODE_TOKEN>

Looking at the source of `~/.gem/ruby/2.2.2/gems/capybara-2.4.4/lib/capybara/dsl.rb` there seem to be some lines of code relevant here:

<S_CODE_TOKEN>

At `~/.gem/ruby/2.2.2/gems/capybara-2.4.4/lib/capybara/session.rb:24` you will find this:

<S_CODE_TOKEN>
",maxmeyer,2015-07-15 15:26:21
1547,2015-07-15 15:26:19,"Duplicate of  #1396
",maxmeyer,2015-07-15 15:26:21
1545,2015-07-07 06:46:48,"It's possible when using a JS driver for a request to continue being processed on the server after calling `Capybara.reset_sessions!`. Though the browser requests are stopped, any requests the server had already started processing will continue.

This causes issues when using capybara with DatabaseCleaner, as the the cleaner might run at the same time as the request, which will likely cause the request to error.

This PR adds a thread-safe counter to Capybara::Server which keeps track of the number of requests currently being processed by `Capybara::Server::Middleware`. It exposes public methods `Server#pending_requests?`, which is truthy when there are requests still being processed, and `Server#wait_for_pending_requests`, which will wait up to 60 seconds for requests to finish.
",jhawthorn,2016-01-18 23:01:31
1545,2015-07-08 17:30:15,"Why are you attempting to join the server thread while waiting for the requests to end?  Joining would only succeed if the server thread was ending.  I also need to think about how/if this relates to testing with multiple sessions.
",twalpole,2016-01-18 23:01:31
1545,2015-07-14 19:35:00,"I used `join` just because it's what `boot` was using. I will change it to a sleep.
",jhawthorn,2016-01-18 23:01:31
1545,2015-08-27 20:09:15,"This is definitely still on the table and I'm considering it for 2.6 -- I haven't spent enough time yet to think through whether it has any issues with the fact that multiple sessions often share the same Capybara::Server and Middleware 
",twalpole,2016-01-18 23:01:31
1545,2015-09-10 18:43:39,"@twalpole thanks for the update. Is there anything I could do to help move this forward?
",jhawthorn,2016-01-18 23:01:31
1545,2015-09-11 16:53:13,"@jhawthorn ok -- I've added a few comments to the current code, but there is a larger concern.  I believe this suffers from the same problem as Issue #1540 .  Namely that the methods on session don't really do what one would think when multiple sessions using the same app are created.  This may or may not be of concern (I haven't really decided if it's actually a real problem or just an issue that occurs in artificial conditions).  I think it would actually be more of an issue for this situation than the #1540 though.  I don't think we want to be duplicating the app object for each session, but a quick thought at a fix would be to have each session create a new server thread with it's own middleware instance on it's own port but share the app object, which would allow tracking requests on a per session basis.  That could lead to threading problems though and probably requires more thought
",twalpole,2016-01-18 23:01:31
1545,2015-09-14 23:39:36,"The per_session_server branch may be required to have this code work with multiple sessions correctly, more comments about it over on Issue #1540 
",twalpole,2016-01-18 23:01:31
1545,2016-01-12 03:42:17,"@twalpole sorry for the delay.

I've addressed your feedback and rebased against the latest master.

As far as I can tell this works fine with the changes in the `per_session_server` branch (different servers would count their requests separately). The code is very similar to that which handles errors, so I would expect them to behave largely the same.
",jhawthorn,2016-01-18 23:01:31
1545,2016-01-18 23:01:31,"Closing this PR as it was merged into PR #1637 
",twalpole,2016-01-18 23:01:31
1544,2015-07-05 02:00:43,,HuckyDucky,2015-07-05 02:05:12
1543,2015-07-02 11:54:00,"This is a call for a behavior gut check. I am a long time user of Capybara and thought I was pretty versed in Capybara's [synchronization methods](http://www.elabs.se/blog/53-why-wait_until-was-removed-from-capybara). Recently it became obvious to me that #all and #first DLS methods both do not do an implicit wait or sync. Is this intended? It kind of feels right but I never fully understood this.

If it helps, I use Capybara mostly with Minitest and the DSL mixed into rails integration test cases. Here is a pry session where I was learning about this behavior:

<S_CODE_TOKEN>

In each case the #all and #first did not wait. But reading the code, I felt it should. Could you throw down some knowledge? Also... thank you so much for all your work here. Huge fan.
",metaskills,2015-07-02 15:10:26
1543,2015-07-02 15:10:18,"They don't wait by default because they are looking for 0 or more instances. If you want waiting to happen for them you need to use one of the numeric options (min, max, count, between). 

<S_CODE_TOKEN>

In the future please ask these types of questions on the mailing list as requested in the README
",twalpole,2015-07-02 15:10:26
1543,2015-07-02 16:04:58,"> They don't wait by default because they are looking for 0 or more instances.

That makes perfect sense. I love it. Thanks you so much for the enumerated recommendations as well. Cheers!
",metaskills,2015-07-02 15:10:26
1542,2015-07-01 14:13:54,"- Prefer `check that`, `check if` reads as if it's vague.
- Add `the` to `current node` for specificity.
",teoljungberg,2015-07-02 19:12:18
1542,2015-07-02 19:12:18,"If is actually grammatically correct for most of these cases -  http://thegrammarexchange.infopop.cc/eve/forums/a/tpc/f/340600179/m/9821045711
",twalpole,2015-07-02 19:12:18
1541,2015-06-30 18:02:07,"Attempting to find the element  &lt;div id=""a.b.c""/>  using the css escaped query 

<S_CODE_TOKEN>

doesn't work in racktest
",twalpole,2015-10-12 17:45:09
1541,2015-06-30 18:03:35,"This is because nokogiri doesn't handle the css query escaping of ids or class names.  I have submitted a PR to nokogiri https://github.com/sparklemotion/nokogiri/pull/1303  , but no progress has been made on getting it included
",twalpole,2015-10-12 17:45:09
1541,2015-10-12 17:45:09,"Closing since this fix will be in nokogiri 1.6.8 when released
",twalpole,2015-10-12 17:45:09
1540,2015-06-27 18:55:16,"Let's say multiple sessions are created while running the test suite and the app raises an exception in a certain situation. Each session makes a request to the same end point and the app will raise an exception. In this scenario, the first session can capture the exception, but the second one can't.

This is because [each session creates a server object](https://github.com/jnicklas/capybara/blob/5b6d65feaef0bbed661db607f9970a90730e1d2b/lib/capybara/session.rb#L66), but [only the first one creates a server thread](https://github.com/jnicklas/capybara/blob/5b6d65feaef0bbed661db607f9970a90730e1d2b/lib/capybara/server.rb#L66). And since the second session talks to the server thread created by the first session, the exception will be rescued by the first server object (more sepcifically, [a middleware object](https://github.com/jnicklas/capybara/blob/5b6d65feaef0bbed661db607f9970a90730e1d2b/lib/capybara/server.rb#L20-L21)).

The following test replicates the issue:

<S_CODE_TOKEN>

And the result:

<S_CODE_TOKEN>
",yuki24,2016-01-18 23:53:29
1540,2015-06-30 17:37:37,"Yes - this is an issue -- not sure what the best solution is though, or whether the current behavior is good enough.  I don't think starting a new session to run a separate test on the same app is a normal use case.  Running a new copy of the app for each session is not a good solution either.  
",twalpole,2016-01-18 23:53:29
1540,2015-07-21 21:49:40,"Added some documentation about this issue - https://github.com/jnicklas/capybara/commit/404f9551042d78db76c583155910c4f98aa2447a  
Leaving this issue open for now
",twalpole,2016-01-18 23:53:29
1540,2015-09-11 09:09:02,"Up vote.
",Funfun,2016-01-18 23:53:29
1540,2015-09-11 16:15:15,"Can anyone provide a real world testing situation where it makes sense to create multiple sessions with the same app and test for a server error in one thats not the default session?  Just trying to decide how much effort to put towards this.
",twalpole,2016-01-18 23:53:29
1540,2015-09-14 23:38:07,"Please try the per_session_server branch and see if that solves the issue you're having - I'm still not sold on this being an issue that is worth the downsides of this fix to solve, and wish I could implement it by just dynamically adding listeners to the existing server object and then storing the errors based on the port number of each session.  Unfortunately I think that would require stopping people from being able to set Capyara.server to guarantee Webrick use which can't really be done.
",twalpole,2016-01-18 23:53:29
1540,2016-01-18 23:53:29,"This should be fixed in the master branch if you configure with Capybara.reuse_server = false
",twalpole,2016-01-18 23:53:29
1539,2015-06-17 15:32:52,"`URL.parse` in `current_url` will raise an error if url contains any
illegal URI characters.
",yiliangt5,2015-06-18 02:17:05
1539,2015-06-17 16:20:37,"What problem is this supposed to fix?  - and needs tests
",twalpole,2015-06-18 02:17:05
1538,2015-06-17 15:21:03,"I don't understand visit very well or at all. It seems so limited in functionality.

So for example I can use 

<S_CODE_TOKEN>

That makes sense and is useful.  We could also do something like

<S_CODE_TOKEN>

This also works. But I think it would also be useful to do something like

<S_CODE_TOKEN>

I expected this to take me to http://www.devops.ok/crucible/admin but that is not the case. In fact this will take me to file:///crucible/admin.

Is it possible to navigate within a site using context path only?

The documentation does btw show examples like visit '/crucible/admin' but I think I confirmed that these do not work.
",onknows,2015-06-17 16:27:44
1538,2015-06-17 16:27:41,"Ask howto questions on the mailing list as requested in README
",twalpole,2015-06-17 16:27:44
1537,2015-06-17 09:11:09,"Hi there,

I came across a blocker wherein i have to perform the click operation on an image (with an id), i tried xpath & css to locate this element and have failed to do it so far

Snippet of the source in the web page:
<img id=""j_idt60:j_idt61:pdo"" style=""cursor:pointer;padding-right:4px;"" onclick=""document.getElementById('j_idt60:j_idt61:regionViewExportPDO').exportData();showMessageAfterDownload();"" src=""/vendor-customer-csll-gui-1.2-SNAPSHOT/javax.faces.resource/PDO.png.html?ln=images""/>

What was attempted and error thrown: (at option #3 - not sure how to avoid extra backspace ""\"" being added on the run?)

Option #1: page.find(:xpath, "".//_[@id='j_idt60:j_idt61:pdo']"").click
-- Capybara::ElementNotFound: Unable to find xpath "".//_[@id='j_idt60:j_idt61:pdo']""

Option #2: page.find(:xpath, "".//_[@id='j_idt60:j_idt61:pdo']"").click
-- Capybara::ElementNotFound: Unable to find xpath "".//_[@id='j_idt60:j_idt61:pdo']""

Option #3: find(:css, '#j_idt60:j_idt61:pdo').click
--Capybara::ElementNotFound: Unable to find css ""#j_idt60\:j_idt61\:pdo""

Option #4: find(:css, '#j_idt60:j_idt61:pdo').click
--Selenium::WebDriver::Error::InvalidElementStateError: invalid element state: Failed to execute 'querySelectorAll' on 'Document': '#j_idt60:j_idt61:pdo' is not a valid selector.

Can any one here share their thoughts on how to overcome this issue?

Thanks in advance
",ChinmayaTelstra,2015-06-17 13:28:30
1537,2015-06-17 13:28:30,"How to questions go in the mailing list as requested in the readme 
",twalpole,2015-06-17 13:28:30
1536,2015-06-16 20:22:53,"Add a label selector that will take  text, ""for"" identifer, or the element whose bound label should be found.  It also adds the idea of ""dynamic"" selectors where the selector receives the locator and the node its being called on and then performs its own finding of nodes instead of just providing a css or xpath expression.  I'm not fully sold on the name ""dynamic"" yet but haven't come up with anything better
",twalpole,2016-04-06 18:32:47
1536,2016-04-06 18:32:47,"""dynamic"" selector is not required for label selector - can be implemented with a filter - closing
",twalpole,2016-04-06 18:32:47
1535,2015-06-12 18:56:46,"Sort is working on string attributes but is ignored on date type attributes

Gemfile:

<S_CODE_TOKEN>

Console:

<S_CODE_TOKEN>
",murtyk,2015-06-12 19:00:05
1535,2015-06-12 19:00:05,"Closing since this has nothing to do with Capybara
",twalpole,2015-06-12 19:00:05
1535,2015-06-12 23:10:26,"sorry, typed in the wrong tab. It is meant for ransack gem,
",murtyk,2015-06-12 19:00:05
1534,2015-06-10 02:00:23,"Hello, please, I need urgent help. I have the following code 
![image1](https://cloud.githubusercontent.com/assets/4118271/8073507/2e0b7d16-0ee3-11e5-90b1-429dcfff5088.png)

I desire to select the option with value 1. I code the following code:

When(/^I click the radio button ""([^""]*)""$/) do |locator|
  page.select locator, :from => 'edit-type'
end

The code is not bad, when capybara choose the option, i recieve in console the following error:
end of file reached (EOFError)

In the page web show me the following alert:
![mensagge](https://cloud.githubusercontent.com/assets/4118271/8073595/85d5b8c6-0ee4-11e5-88c4-556e2c42f20d.png)

The page use AJAX, exists some problem for use it?

Can you help me, please?
",gelopfalcon,2015-06-10 04:50:46
1534,2015-06-10 04:50:46,"As stated in the README, ask howto questions on the mailing list
",twalpole,2015-06-10 04:50:46
1533,2015-06-05 18:49:21,"Capybara provides a number of helpful matchers for asserting against a
DOM structure with various selectors. RSpec's view specs focus on
asserting against specific markup; this change ensures this is easier
to do.

<S_CODE_TOKEN>
",joshuaclayton,2015-06-05 20:16:48
1533,2015-06-05 19:04:15,"I end up adding a helper to do this to every project for which I write view specs. I'd welcome this change in capybara proper.
",derekprior,2015-06-05 20:16:48
1533,2015-06-05 20:16:52,"lgtm - thx
",twalpole,2015-06-05 20:16:48
1533,2015-06-19 11:09:42,":+1:
",pacoguzman,2015-06-05 20:16:48
1532,2015-06-05 18:01:21,,twalpole,2015-06-09 16:49:53
1532,2015-06-05 18:51:15,"The use case is this:
I have a cucumber test that is working fine. Than I add a ""disabled"" option to some items dynamically. The test still passes, while a user couldn't select an option.
",Vanuan,2015-06-09 16:49:53
1532,2015-06-05 19:40:16,"@Vanuan What driver are you using?  If you're saying that calling select_option actually selects the option rather than just ignoring the operation then that would be a problem with the driver.
",twalpole,2015-06-09 16:49:53
1532,2015-06-05 20:51:15,"It's poltergeist
https://github.com/teampoltergeist/poltergeist/issues/626
",Vanuan,2015-06-09 16:49:53
1532,2015-06-05 22:01:06,"@Vanuan but is it actually selecting the option, or just ignoring the select --- I would hope it's just ignoring the select.  Capybara will not be throwing an exception for this behavior currently (just issuing a warning - which will also issue for poltergeist), so I would hope poltergeist doesn't throw since that would mean different drivers with different behaviors.   If you want your test to fail when trying to select a disabled element then you will need to assert that the value was or was not actually selected.
",twalpole,2015-06-09 16:49:53
1531,2015-06-05 15:14:24,"Given this:

<S_CODE_TOKEN>

When I do this:

<S_CODE_TOKEN>

Everything is fine, but I expect an exception to be thrown.
",Vanuan,2015-06-09 16:50:56
1531,2015-06-05 18:02:49,"We can't throw an exception currently (breaking behavior change) - but a warning does seem reasonable (like happens when attempting to set read only fields).  See PR #1532 
",twalpole,2015-06-09 16:50:56
1531,2015-06-05 18:45:02,"At least it should not be selected. Thank you!
",Vanuan,2015-06-09 16:50:56
1530,2015-06-04 13:01:03,"Hi 

I am using capybara as our acceptance framework. But when I do `click_button`, certain times it does click, certain times it throws `Capybara::ElementNotFound:` on my rspec test suite. Is there way to fix this issue permanently? 
",sivagollapalli,2015-06-04 13:40:47
1530,2015-06-04 13:40:47,"Ask ""how to use capybara"" questions on the mailing list as requested in the Readme - and when doing so you'll need to provide more info than this.
",twalpole,2015-06-04 13:40:47
1529,2015-06-04 08:37:41,"Hello guys,

Is it possible to run rspec from rails controller (eg. Kernel.system ""rspec spec/features/test.rb"")?

I tried to run rspec from linux and it's working fine but when I ran it using the controller, it tells unable to connect to firefox. See the screenshot below: 

![image](https://cloud.githubusercontent.com/assets/3905566/7980180/005cdfb8-0ad8-11e5-82a9-773cd991c86c.png)

Thanks! 
",noahjerreel,2015-06-04 13:45:55
1529,2015-06-04 13:45:55,"Ask ""how to use capybara"" questions on the mailing list as requested in the README
",twalpole,2015-06-04 13:45:55
1528,2015-06-03 15:53:07,"Currently, with the following HTML:

<S_CODE_TOKEN>

this will work:

<S_CODE_TOKEN>

However, there are situations where you want to give elements text content for accessibility via `aria-label` and it would be useful if this content were matched as well.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

What do you think?

More information on `aria-label`: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute
",lencioni,2016-08-15 22:12:07
1528,2015-06-04 16:32:58,"It's probably worthwhile to look at this for more than just buttons since aria-label can be applied to pretty much any html element.  This would require input from someone with a lot more knowledge of what makes sense from an accessibility perspective across all form elements, and probably for a v3 release.
",twalpole,2016-08-15 22:12:07
1528,2015-06-04 17:05:58,"Yes, I agree that this should be used for more than just buttons--that was just the example I was using. Thanks!
",lencioni,2016-08-15 22:12:07
1528,2015-08-14 11:54:49,"I guess this request is related to [Xpath](https://github.com/jnicklas/xpath/) library which is used by Capybara.
",dnesteryuk,2016-08-15 22:12:07
1528,2016-04-13 17:17:07,"To add support for `aria-label` to Capybara without waiting for the xpath library to implement it, you can just add this to your test helper:

**This only works with versions before 2.7**

<S_CODE_TOKEN>
",koenpunt,2016-08-15 22:12:07
1528,2016-04-13 17:33:31,"@koenpunt As of 2.7.0 Capybara no longer uses the XPath::HTML methods so your method won't work.  You'd need to modify (or replace) the :link and :button selectors  (Capybara.modify_selector/add_selector)
",twalpole,2016-08-15 22:12:07
1528,2016-04-13 17:36:58,"Oh well, I've missed that release. But still applies to older releases :) 

Why you've moved away from the XPath::HTML methods?
",koenpunt,2016-08-15 22:12:07
1528,2016-04-13 17:39:23,"@koenpunt Because they didn't allow the flexibility to make the locators optional
, and jnicklas is probably going to be removing XPath::HTML from the xpath gem
",twalpole,2016-08-15 22:12:07
1528,2016-08-03 20:21:44,"PR #1732 Adds support for this that can be turned on by setting `Capybara.enable_aria_label = true` .  It defaults to `false` for backwards compatibility reasons.
",twalpole,2016-08-15 22:12:07
1528,2016-08-15 22:12:07,"Closed via 22dfca46b8c8e9ddf272c44e9476a0687dc439cb
",twalpole,2016-08-15 22:12:07
1527,2015-06-03 15:12:15,"When I have a `<select>` element on my page (and it has a label 'Country'), and I select an option by value:

<S_CODE_TOKEN>

Capybara takes over 20 seconds to assert that this is selected using:

<S_CODE_TOKEN>

I narrowed it down to the line https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L118 where the query was './/option' 

If i put 'selected' on the option, Capy is fast, but when using DOM API, it's slow.

Any help you can provide will be appreciated.

Regards,
  [Rasheed Abdul-Aziz](https://github.com/squeedee)  && Bebe Peng
",bebepeng,2015-06-05 18:26:59
1527,2015-06-03 15:13:22,"@squeedee
",bebepeng,2015-06-05 18:26:59
1527,2015-06-03 15:53:05,"If you can provide an example that reproduces we will look into it, otherwise I don't see how this is possible, unless maybe your page is ridiculously large. have_select will time out in 5 seconds (by default), so there is no way it should be taking 20 seconds
",twalpole,2015-06-05 18:26:59
1527,2015-06-03 16:18:09,"We will try to produce an easily reproducible example. The timeout is not hit because the time taken by Capybara::Result.new does not relinquish control to synchronize. When it's done, it matches, so no exception, so the test passes (despite being 20 seconds after the start of the match). 

The page is not ridiculously large, the query is contextualized to the select that matches in the outer query (outer query is where it finds the select via its `label` element). The number of options is not large, so the xpath query is fast. The result from the xpath query has approx. 250 option nodes, which are passed to `Result.new`, where things come to a crawl. That's as far as we investigated. Will work on a sample for you. 
",bebepeng,2015-06-05 18:26:59
1527,2015-06-03 18:47:30,"What driver are you using? and if selenium, which version?  (2.45 has a serious performance bug in it which can cause major test slowdowns - unfortunately 2.46 has not been released).  So having 250 option nodes, each of which has to be queried for whether or not it's selected could take some time, but it really shouldn't be 20 seconds, although with the 2.45 performance issue in selenium maybe it would.  Unfortunately we can't change the query to  './/option[@selected]' since xpath only queries against the attributes in the document, not the properties - this means that if a selection is changed after the document is loaded the results of the xpath query would not be correct.  Technically it could be possible to swap to a css query of  'option:checked' which would be evaluated against properties but that then brings up browser support issues.
",twalpole,2015-06-05 18:26:59
1527,2015-06-03 21:54:48,"We are using selenium-webdriver 2.45.... :( We'll see if selenium edge makes a difference. 
",bebepeng,2015-06-05 18:26:59
1527,2015-06-03 22:07:07,"FYI - the releveant selenium issues are 

https://code.google.com/p/selenium/issues/detail?id=8551
https://github.com/SeleniumHQ/selenium/issues/383
",twalpole,2015-06-05 18:26:59
1527,2015-06-05 05:04:40,"selenium-webdriver 2.46.1 has been released --  please let me know if that improves your situation
",twalpole,2015-06-05 18:26:59
1527,2015-06-05 18:11:42,"Yeah the new release for selenium totally helped! We're down to 6 secs. Thanks so much for your help. :)
",bebepeng,2015-06-05 18:26:59
1527,2015-06-05 19:16:02,"@bebeng Would it be possible for you to run it using the selected_optimization branch and see what the time is then please?
",twalpole,2015-06-05 18:26:59
1527,2015-06-05 21:58:17,"Here are all the combos tried again:

Selected_optimization + Selenium 2.45.0 = ~5.5 secs
Selected_optimization + Selenium 2.46.1 = ~4 sec
Capybara 2.4.4 + Selenium 2.45.0 = ~23 sec
Capybara 2.4.4 + Selenium 2.46.1 = ~7 sec
",bebepeng,2015-06-05 18:26:59
1527,2015-06-05 22:05:28,"So the optimization saves about 25% with the non-broken selenium on selects with a large number of options, not sure it's worth it for the added code complexity.  Will have to think about it. 
Thanks
",twalpole,2015-06-05 18:26:59
1526,2015-06-03 12:56:35,"Use this self-contained gist to recreate the issue:
https://gist.github.com/bilus/7213a2914a8bb33cefb7

Dependencies:
ruby 2.1.2
capybara 2.4.4
rspec 3.2.0
sinatra 1.4.6

Problem: It doesn't fill in email and name, `find` doesn't work as well. 

To make it pass, comment out `include RSpec::Matchers` in line 38.
",bilus,2015-10-29 23:11:47
1526,2015-06-03 13:23:39,"Duplicate of https://github.com/jnicklas/capybara/issues/1361
",abotalov,2015-10-29 23:11:47
1526,2015-06-03 13:31:46,"#1361 has been closed and the problem is a real one (as is the `all` issue). It cost me several hours to narrow down the issue and figure out what is wrong after upgrading gems in a large project.

As far as I can tell, the docs don't reflect it while declaring compatibility with RSpec. I think adding at least a note to Readme would be in order or perhaps even emit a warning. If there's support for that, I'd be more than happy to submit a PR with the Readme update.
",bilus,2015-10-29 23:11:47
1526,2015-06-03 17:20:21,"Happy to review a PR for the Readme, but theres really not much we can do about this -- we can't stop other includes from overriding methods.
",twalpole,2015-10-29 23:11:47
1526,2015-06-03 18:05:36,"I guess we could override include on the class Capybara::DSL is included to and then check if RSpec::Matchers is included after and issue a warning.   Something like the following in Capybara::DSL

<S_CODE_TOKEN>

Not sure if thats a good idea or not
",twalpole,2015-10-29 23:11:47
1526,2015-06-03 22:23:26,"@bilus looks like `RSpec::Matchers` works differently when using in `minitest` and `rspec`. There is no issue with RSpec+Capybara and `within` matcher. In RSpec it's `be_within` and it works fine without affecting Capybara `within`.

You can switch to `RSpec` instead of `minitest`. Here is your example pass without collision:

<S_CODE_TOKEN>
",cris,2015-10-29 23:11:47
1526,2015-06-03 22:55:04,"In production I'm using Cucumber not minitest. I've used minitest just to
recreate this issue.

A call to `within` goes here:
https://github.com/rspec/rspec-expectations/blob/master/lib/rspec/matchers.rb#L251

It seems you're simply not including Matchers at all in your code.
",bilus,2015-10-29 23:11:47
1526,2015-06-04 17:57:49,"@bilus 

For this simple app, to make test pass, you need only to swap `include`s:

<S_CODE_TOKEN>

In this way `Capybara::DSL` overwrites `within` from `RSpec::Matchers` and test pass. I don't know, how you setup your Cucumber configuration. But try to change the way you `include` module or `require` library. So RSpec should go before Capybara.
",cris,2015-10-29 23:11:47
1526,2015-06-04 18:03:35,"@bilus 
Also, as an option, you can remove `within` method: `RSpec::Matchers.send :remove_method, :within` before including `RSpec::Matchers`:

<S_CODE_TOKEN>
",cris,2015-10-29 23:11:47
1526,2015-06-05 09:26:55,"Thanks! I think the easiest way might be to just use `page.within` consistently in all tests. That's what I've actually done in the original
project.

On Thu, Jun 4, 2015 at 8:03 PM, Sergii Boiko notifications@github.com
wrote:

> @bilus https://github.com/bilus
> Also, as an option, you can remove within method: RSpec::Matchers.send
> :remove_method, :within before including RSpec::Matchers:
> 
> Capybara.app = Sinatra::Application
> RSpec::Matchers.send :remove_method, :within
> 
> class TestApp < MiniTest::Unit::TestCase
>   include Capybara::DSL
>   include RSpec::Matchers
> 
>   def test_title_exists
>     visit '/'
>     within('#main-form') do
>       fill_in 'email', with: 'user@example.com'
>       fill_in 'name', with: 'Joe Public'
>       click_button 'submit'
>     end
>     assert has_content?('Congratulations')
>   end
> end
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/jnicklas/capybara/issues/1526#issuecomment-108993566.
",bilus,2015-10-29 23:11:47
1526,2016-02-05 00:14:02,"Good tip on remove_method! I took out the method for Capybara due to name conflict with the geokit-rails gem: `Capybara::DSL.send :remove_method, :within`
",bjornlinder,2015-10-29 23:11:47
1526,2016-02-05 00:32:52,"@bjornlinder RSpec and Capybara make sense to be included into the same scope - but why would geokit-rails include a #within method into test cases ? It would seem it should only be included into the models that are declared acts_as_mappable. (or why are you including Capybara::DSL into models, if thats what you're doing)
",twalpole,2015-10-29 23:11:47
1526,2016-02-05 18:24:54,"I'm not including Capybara into models - the geokit #within method gets called as part of the integration tests. Capybara is available in the model because the query is running in the test environment.
",bjornlinder,2015-10-29 23:11:47
1526,2016-02-05 18:58:10,"@bjornlinder The geokit-rails gem only includes the #within method into ActiveRecord::Base derived classes correct? And Capybaras DSL methods should only be included into whatever feature/integration test class is being used (definitely not into ActiveRecord::Base derived classes - so it shouldn't be available in any models), and issues a warning if you include it in the global scope - so I'm not fully understanding how there would ever be a conflict.
",twalpole,2015-10-29 23:11:47
1526,2016-02-05 21:23:04,"Why Capybara is available from models when running tests, I don't know either. Not getting any errors about Capybara being in the global scope.
",bjornlinder,2015-10-29 23:11:47
1526,2016-02-05 22:00:14,"search for ""include Capybara::DSL""  in your code and see if maybe you're including it somewhere it shouldn't be -  including it into models could cause all sorts of weird issues during testing - and none of Capybaras files do that - you can also check Object.included_modules and Object.ancestors to see what has been included into the global object, and the same on things like ActiveRecord::Base to see there too
",twalpole,2015-10-29 23:11:47
1525,2015-05-28 17:52:52,"Fixes issue with concatenation of a documents title with title elements in the documents body (embedded svg for instance) when using the rack_test driver
",twalpole,2015-05-29 14:45:37
1524,2015-05-26 14:31:40,"We have some inlined SVGs with a title tag and the value of `page.title` is the concatenation of the real page title and of the svg title.

cc @masterkain

Don't know xpath enough but maybe the problem lies in this query:

<S_CODE_TOKEN>

**update: added svg example**

<S_CODE_TOKEN>
",elia,2015-05-29 14:46:35
1524,2015-05-26 17:06:12,"What driver are you using?
",twalpole,2015-05-29 14:46:35
1524,2015-05-26 17:44:16,"Rack test
",elia,2015-05-29 14:46:35
1524,2015-05-28 16:55:41,"ok -- it's not the code you pointed out (that wouldn't cause concatenation , although it has its own issue)  but there is an issue -- I'll work on a solution
",twalpole,2015-05-29 14:46:35
1524,2015-05-29 14:46:35,"I believe this should be fixed on master - thanks for the report
",twalpole,2015-05-29 14:46:35
1524,2015-05-29 15:11:18,"thanks for fixing it!
",elia,2015-05-29 14:46:35
1523,2015-05-26 11:03:50,"<S_CODE_TOKEN>

There isn't any ajax request in this part of the code except that there is a javascript which hides/displays the `effective_date date_select tag`. When I add `js: true` to the spec mail[=> ActionMailer::Base.deliveries .last] returns nil but if the test is allowed to wait for a second or two things would work fine. How do I fix this without the HACK ! :sob: 

Capybara Version : capybara (1.1.3) 
Webkit Version : capybara-webkit (0.13.0)
",sithara,2015-05-26 11:09:35
1523,2015-05-26 11:09:22,"Ask questions on mailing list as requested in the readme
",twalpole,2015-05-26 11:09:35
1523,2015-05-26 11:27:41,"@twalpole :+1:  ..
",sithara,2015-05-26 11:09:35
1522,2015-05-22 20:36:51,"On travis using Window#size with selenium and chrome returns a size larger than [window.outerWidth, window.outerHeight], by 1 or 2 pixels in both directions.  Not sure why - needs more investigation
",twalpole,2016-04-08 18:15:10
1522,2016-01-27 13:52:41,"I have same issue, setting size , and I get screenshot, the image size is different on server and my mahcine, do you find any workaround or fix for that?
",RezaRahmati,2016-04-08 18:15:10
1522,2016-01-27 17:41:24,"@RezaRahmati Nope -- I'm guessing it has to do with the window manager being used.  Also on some systems there is a delay between changing the window size and it actually changing, so if you're getting a screenshot immediately after changing the size you may wait to add a slightly delay.
",twalpole,2016-04-08 18:15:10
1522,2016-04-08 18:15:10,"Not much we can do about this, I'm assuming its a rounding issue. Closing
",twalpole,2016-04-08 18:15:10
1521,2015-05-16 06:41:48,"Hello,

While debugging an RSpec-Test using Capybara I tried to get an element by its ID. I can see it in the body, but Capybara does not find it. I think it should. Here is the output:

<S_CODE_TOKEN>

Info:

<S_CODE_TOKEN>

Did I miss something here? Or is this a bug? BR, Jonathan
",jstriebel,2015-05-16 14:06:56
1521,2015-05-16 14:06:55,"Yes - you missed the ""display: none"" on the element - In the future please post questions about how to use Capybara on the mailing list as requested in the README -- The github issues are for confirmed bugs in Capybara
",twalpole,2015-05-16 14:06:56
1520,2015-05-15 21:44:49,"This is more of a question/advice around the Capybara DSL.

We have an interesting testing situation at Amahi where we install web apps and test them with Capybara, however, we found that in some cases, we'd like to pass/fail tests on some internal state of the web app. Is it possible to do that in the current Capybara DSL?

Imagine an app like Webmin or some downloader or similar that has some side effect in the system like adding a file somewhere or something like that. I would like to be able to say in our tests:

<S_CODE_TOKEN>

where that helper method is this:

<S_CODE_TOKEN>

However, that does not work, because expect complains it should be used in an Rspec test ""it"" statement.

I may well be not be completely aware of the ins and outs of what I am doing, but we have all things working with Capybara and very happy about that, we just need to be able to fail tests due to some side effects of the web app we're testing.

Thanks!
",cpg,2015-05-15 23:04:35
1520,2015-05-15 23:04:35,"Please ask questions on the mailing list as requested in the README
",twalpole,2015-05-15 23:04:35
1520,2015-05-15 23:56:28,"Done. Ma bad. I must have browsed the README like 1000 times, but usually just go quickly to the DSL.
",cpg,2015-05-15 23:04:35
1519,2015-05-13 01:53:08,"I'm using Rails 4.2.1 and Ruby 2.2.2 with capybara-2.4.4 and launchy-2.4.3. When I run `save_and_open_screenshot` no screenshot shows up. Has anyone else experienced similar issues? This was working with Rails 3.2+.
",netwire88,2015-05-13 02:11:38
1519,2015-05-13 02:11:38,"Ask questions on the mailing list as requested in the README
",twalpole,2015-05-13 02:11:38
1518,2015-05-13 00:35:51,"capybara may not be running on the same computer as the browser.

I'm testing Internet Explorer on a windows machine running selenium-server. Driving the test from RSpec/capybara running on my Mac. The (Rails) app is also running on the Mac.

However when testing the uploading files using attach_file, capybara raises an exception b/c the file's not present on my Mac. But it's not relevant whether the file's on the Mac, but whether it's present on the windows machine. 

Of course capybara can't check whether the file is present on the windows machine, but at least it should allow the test to continue, and then the expectation should fail. So I added a config parameter (config.remote = true) to inhibit the exception.

I'm kinda surprised nobody's run into this before, so I'm wondering if this is a weird test configuration or if there's some other solution that I'm not seeing. Or maybe people don't test with IE? Anyway, here's a PR with tests for you. To run just the tests relevant to this feature, use the RSpec tag :attach_file => true.
",lazylester,2015-05-22 22:18:36
1518,2015-05-20 18:59:30,"I think a lack of remote testing and a minimal amount of use of attach_file in testing due to its shortcomings (no multiple files, etc - caused by shortcomings in the selenium api) lead to this not being an issue for most people.  I'm wondering whether it may be better to just not check for existence - or issue a warning rather than raising - instead of adding another configuration switch
",twalpole,2015-05-22 22:18:36
1518,2015-05-21 01:44:26,"@twalpole either of your suggestions is ok. If the file's not present then the test should surely fail anyway, my personal preference would be to eliminate the existence check. Do you need another PR?
Thank you for taking the time to respond, and thanks for your work on Capybara.
",lazylester,2015-05-22 22:18:36
1518,2015-05-22 22:11:36,"@lazytester - looking at this some more and doing a bit of reading of the docs for selenium-webdriver -  I think you should actually be keeping your test files on the local machine, and setting the file detector on the remote driver.  By doing that selenium-webdriver is supposed to find the local file and upload it to the remote test machine - if that does actually work then Capybara checking for file presence makes sense.
",twalpole,2015-05-22 22:18:36
1518,2015-05-23 18:26:05,"@twalpole thanks for your response...

""if that does actually work"" you say. I'd be happy to verify it if you can point me to the selenium-webdriver docs that describe it. After reading your suggestion, I reviewed the docs and haven't seen anything like that described. Nor do I see any API that suggests that this is possible.

All we really have is the Capybara attach_file interface. The same test should be executable whether interacting with a browser on the local machine or a remote machine. It seems pretty weird to have some kind of conditional inside the test that invokes some driver API calls if the target is remote. Isn't that what your'e suggesting?
",lazylester,2015-05-22 22:18:36
1518,2015-05-23 22:00:46,"Its setup of the driver, not conditional inside the test.   Here is a link to the documentation on it - http://www.rubydoc.info/gems/selenium-webdriver/Selenium/WebDriver/DriverExtensions/UploadsFiles#file_detector%3D-instance_method
",twalpole,2015-05-22 22:18:36
1517,2015-05-10 15:12:38,"Hi. And please sorry for my english :)

I study rails with Michael Hartl's Rails Tutorial (2rd edition).

When I wrote 

<S_CODE_TOKEN>

in my spec file and ran it I got green test, but I expected red, because **I don't have about action** in my Static Pages controller.
Is it ok?

I used capybara 2.4.4, rails 4.2.1, rspec 3.2.1.
",terrysahaidak,2015-05-10 15:50:13
1517,2015-05-10 15:50:13,"Please ask questions on the mailing list as requested in the README
",twalpole,2015-05-10 15:50:13
1516,2015-05-04 02:22:13,"Previously, if you had Capybara.asset_host defined and tried to
`save_page` on a document without a `<head>` tag (like plain text)
`inject_asset_host` would crash trying to string-replace a `<base>`
tag onto the nonexistant `<head>`.

Since there's probably no need for it to successfully inject a
`<base>` into such documents, now it will return the original content
when there is no `<head>` present.
",tjgrathwell,2015-05-20 19:00:22
1516,2015-05-04 17:21:10,"This seems good for plain text, but what if it is actually an html document, just without a <head> - I think in that case we should probably add a <head> containing the <base>
",twalpole,2015-05-20 19:00:22
1516,2015-05-04 17:39:18,"I think the main use case for `Capybara.asset_host` is allowing the generated .html file to successfully find .css files relevant to it.

In most reasonable HTML documents, those are in the `<head>`, so I don't know if the extra complexity required to also add `<base>` to the `<body>` (or wherever) would be merited.
",tjgrathwell,2015-05-20 19:00:22
1516,2015-05-20 19:00:25,"ok -- we'll go with this for now -- thanks
",twalpole,2015-05-20 19:00:22
1515,2015-04-28 23:20:46,"Hi, 

I'm having trouble with the latest version of Capybara (working with Cucumber). 

I am unable to use find or click_on. It will product the following output

`(byebug) click_on(""Log in"")
**\* ArgumentError Exception: wrong number of arguments (2 for 1)

nil
(byebug) click_on
**\* ArgumentError Exception: wrong number of arguments (0 for 1..2)

nil
(byebug) click_on(""test"", ""test"")
**\* ArgumentError Exception: wrong number of arguments (2 for 1)

nil`

I'm using the latest versions of Capybara in my gemfile

Edit:
Versions below:

capybara (2.4.4)
cucumber (1.3.19)
cucumber-rails (1.4.2)
rails (4.2.1)
xpath (2.0.0)
",stevepm,2015-04-28 23:35:49
1515,2015-04-28 23:35:49,"The odds of this being an issue in Capybara are 0.01% or everyone would be complaining.  Therefore please ask in the mailing group as requested in the README rather than creating issues.
",twalpole,2015-04-28 23:35:49
1514,2015-04-28 21:21:24,"Currently #all will immediately return 0 unless one of the count options are passed to it.

In my own tests, I have found that I almost always need this to be a minimum of 1 (thus the default waits will wait for at least 1) and only in exceptional cases did I want it to be 0. I would like to propose a default_minimum_matches setting, so this can be set globally, and overridden in exceptional places.

I've already implemented this in [my own fork and branch](https://github.com/almostwhitehat/capybara/tree/feature/default-minimum-matches), but I don't know rspec well enough to write the tests needed for a pull request. If you guys like the idea though, and someone wouldn't mind helping with the tests, I'd be glad to submit a PR to get it started.
",almostwhitehat,2015-05-04 17:04:42
1514,2015-04-29 18:54:39,"I'm not convinced having a setting that allows for any number to be default minimum matches is a good idea since it could make for difficult to understand tests.  In most of the cases where you are using #all do you really need #all or are you only using the first result and therefore would be better off with #first?
",twalpole,2015-05-04 17:04:42
1514,2015-05-04 16:41:59,"In my own experience, whenever I use #all I expect there to be at least one result. If I'm not sure if there will be any, then I'm doing a check for the presence, instead of just getting #all and checking for an empty set. When I need the first result, I always use #first instead of #all and grabbing the first result.

Personally, I think my proposed Capybara.default_minimum_matches is more consistent than Capybara.first_default_waiting added in #1506 since this applies to both matchers.
",almostwhitehat,2015-05-04 17:04:42
1514,2015-05-04 17:04:42,"The reason for the setting for #first is that a good argument can be made that a minimum of 1 makes sense when you ask for  the first element and its easy to understand when reading a test that first would probably wait for at least one like #find -   That argument doesn't really hold for #all - and being able to set #all to by default wait for 5 elements makes for tests that cannot be understood by a new person reading them.  This is a no for right now.
",twalpole,2015-05-04 17:04:42
1514,2015-05-04 18:16:01,"I definitely agree - a default wait for 5 elements could be confusing to a new person.

However, I've also seen many users confused by the fact that #find will use the default wait time before returning the element or ElementNotFound - but #all will immediately return an empty array.

Perhaps we're just looking at these wrong, but my thought was that #find and #all should be function the same, except one returns a single match, and the other returns many. 
",almostwhitehat,2015-05-04 17:04:42
1514,2015-05-04 20:17:46,"#find returns a single match but #all returns none, 1, or many    -   I think you're really looking for a #one_or_more method - which you could easily add to your test suite without the need to add a potentially confusing setting that have the potential of making tests harder to read for others, and without making them brittle when someone decides to change the setting back to 0, or up it to 3
",twalpole,2015-05-04 17:04:42
1513,2015-04-27 21:02:24,"Adds regex support when searching for links with `href` filters.

Solves #1510.
",YSavir,2015-04-28 17:44:43
1513,2015-04-27 21:55:32,"@YSavir Other than the few line comments I made, its looking good -- please also update the has_link and click_link documentation to show they can take a regex for :href
",twalpole,2015-04-28 17:44:43
1513,2015-04-27 22:42:38,"Added changes. Should I squash the commits?
",YSavir,2015-04-28 17:44:43
1513,2015-04-28 00:12:27,"Once the documentation fixes are made, yes please squash
",twalpole,2015-04-28 17:44:43
1513,2015-04-28 00:34:09,"Done and done.
",YSavir,2015-04-28 17:44:43
1513,2015-04-28 17:44:49,"Thanks
",twalpole,2015-04-28 17:44:43
1512,2015-04-25 00:36:53,"This is nowhere near final and will be changing quite a bit
",twalpole,2016-07-13 18:15:55
1512,2016-07-13 18:15:53,"PuffingBilly is a better solution for now
",twalpole,2016-07-13 18:15:55
1512,2016-07-13 22:28:46,"To clarify - by ""better"" I mean already implemented and not requiring any other work currently.  puffing-billy is also written in ruby so doesn't require having a java environment setup.  From a feature/flexibility standpoint browsermob-proxy support could probably provide more.
",twalpole,2016-07-13 18:15:55
1511,2015-04-24 23:14:04,"We are starting to include safari (on OSX) in our automated test runs. We currently run our automated tests on firefox and chrome mainly. But Safari poses some problems:

_attach_file_ doesn't work.

Specifically I call this code:

<S_CODE_TOKEN>

It works great when I test it manually. But not capybara!

As you know, capybara implements attach_file here:
/Users/me/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/capybara-2.4.4/lib/capybara/node/actions.rb
(line 148)

<S_CODE_TOKEN>

Again this code works great in chrome and firefox, but not safari.

Here is the DOM it's attempting to locate (as rendered by 3 different browsers):

<S_CODE_TOKEN>
",chris1248,2015-04-24 23:30:23
1511,2015-04-24 23:30:23,"You need to take this up with selenium -  It's not supported there, so there's nothing we can do about it - https://code.google.com/p/selenium/issues/detail?id=4220
",twalpole,2015-04-24 23:30:23
1510,2015-04-23 20:07:03,"I've been trying to use `have_link` and test its `href` attribute using RegEx but to no avail. Here's a sample of the code:

<S_CODE_TOKEN>

It'll work with a string, but not with Regex:

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",YSavir,2015-04-23 20:51:50
1510,2015-04-23 20:51:50,"Correct - have_link doesn't accept regex for the :href option, nor is it documented anywhere to. From the docs for click_link which uses the same selector as have_link - 

# @option options [String] :href    The value the href attribute must equal

If instead you're saying you would like to see this functionality expanded to allow for using regexps then fully tested PRs are always considered.
",twalpole,2015-04-23 20:51:50
1510,2015-04-24 18:35:39,"On it, thanks!

Also, was browsing through the tests, and as far as I can tell there isn't any test coverage for the `:href` option to begin with. Is that right?
",YSavir,2015-04-23 20:51:50
1510,2015-04-24 19:04:34,"yes there is in lib/capybara/spec/session/has_link_spec.rb  -- Unlike most projects most of the specs are in the lib/capybara/spec directory because they need to be accessible to all the other drivers that are written for Capybara
",twalpole,2015-04-23 20:51:50
1509,2015-04-23 18:12:18,,twalpole,2015-07-16 17:58:32
1509,2015-04-23 19:43:55,"It's useful only if RSpec::Matchers is included after Capybara::DSL, though.
",abotalov,2015-07-16 17:58:32
1509,2015-04-23 20:57:15,"@abotalov - Correct, if they are included the other way then Capybaras #all isn't hidden. Are you saying we shouldn't do it because of that? I don't think we want to deprecate #all currently, and I see no issue with having #all and #find_all accessible.
",twalpole,2015-07-16 17:58:32
1508,2015-04-23 17:25:17,"We need to add the ability to whitelist URLs when using the selenium driver.  99% sure this will require implementing/using a proxy
",twalpole,2016-07-13 18:16:51
1508,2015-04-23 19:29:53,"A proxy (in testing context) is useful for many things, at least for:
- showing requests that come through it (e.g. to check that correct requests are sent to some 3rd party service)
- url whitelisting / blacklisting (e.g. to speedup tests)
- limiting network bandwidth (e.g. to check work of an app in such network conditions)
- injecting HTTP headers into requests (e.g. basic authentication header)
- waiting till a particular response will be received (e.g. if receiving of a response doesn't result in a DOM change but the test, nevertheless, can't proceed without the response being received)

A larger number of things is listed here - https://github.com/lightbody/browsermob-proxy. I think those things are also needed as Browsermob is primarily used for testing purposes.

I don't think it makes sense to even start reimplementing this as part of Capybara. If Browsermob has some unsolvable downsides, then it's better to use other gem / modify existing gem / write a new one. That gem would have only purpose - proxying
",abotalov,2016-07-13 18:16:51
1508,2015-04-23 21:28:27,"I agree completely, I would much rather have this done using an existing proxy if at all possible
",twalpole,2016-07-13 18:16:51
1508,2015-04-24 06:07:33,"It's possible using https://github.com/jarib/browsermob-proxy-rb (I haven't used it for 9 months though)
",abotalov,2016-07-13 18:16:51
1508,2015-04-24 06:56:56,"Yeah, I have it mostly working
",twalpole,2016-07-13 18:16:51
1508,2015-04-24 18:02:29,"@mhoran @jferris @route @jonleighton I'm working on adding whitelisting of urls to the selenium driver using browsermob_proxy - and was wondering whether the proxy is something that would be of use to other drivers, or to just hide it all inside the selenium driver - feedback appreciated
",twalpole,2016-07-13 18:16:51
1508,2015-04-24 21:26:15,"I think what we've built into capybara-webkit already works pretty well in the driver. I'm not sure if it would be less work to integrate it with a proxy. I'm guessing that, if you hide it within the Selenium driver, it will decrease the surface area of public code you have to worry about, which is probably worth keeping it internal.
",jferris,2016-07-13 18:16:51
1508,2015-04-27 06:04:00,"We've implemented blacklisting in poltergeist in a different way either with native PhantomJS API. While proxy is a good thing in common for all drivers for this specific task I think it's good to hide it.
",route,2016-07-13 18:16:51
1508,2015-09-17 22:20:32,"This is supported through the puffing-billy gem - maybe add some info to the README about it, or a very basic wrapper that uses it.
",twalpole,2016-07-13 18:16:51
1508,2016-07-13 18:16:51,"Closing this - puffing-billy is satisfactory for now
",twalpole,2016-07-13 18:16:51
1507,2015-04-22 16:45:42,"See https://github.com/jnicklas/capybara/pull/1506

The thing is, Node#first returns `nil` only if no elements matched passed args. We have `assert_no_selector`, etc. for this use case.
",abotalov,2016-11-14 17:32:23
1507,2015-04-22 17:20:37,"My only real concern with this is if people are using first to check for presence on a page and changing behavior based on that

<S_CODE_TOKEN>

What would be our recommended way of doing something like that if #first raised instead of returning nil?
",twalpole,2016-11-14 17:32:23
1507,2015-04-23 17:52:46,"@twalpole before #1506 that example was unsafe, as it wouldn't wait (it still is unsafe by default), right?

Would it be doable to recommend using `page.has_no_selector` for this scenario?
",RSO,2016-11-14 17:32:23
1507,2015-04-23 18:35:37,"@RSO Waiting doesn't make anything safe or unsafe, it just determines the time period during which an elements is looked for on the page.  If I know the page is not dynamic in any way and just need different behavior depending on whether or not a certain item is on that page then the above is a perfectly valid (and ""safe"") way to make that determination without having to do two finds on the page.  Using has_selector? or has_no_selector? followed by another find to get the actual element just results in a slower test.
",twalpole,2016-11-14 17:32:23
1507,2015-04-23 19:54:41,"Yeah, I think I get your case. What I meant with ""safe"" (and what I think you get, but just wanted to make sure) is the fact that it's error-prone, even for non-dynamic pages. E.g:

<S_CODE_TOKEN>

But, I think that you're looking for a way to make the non-waiting call anyway, correct? Isn't this some kind of pattern that applies to other ways of selecting throughout Capybara? Like, isn't there something like `first('a', wait: false)`?

BTW, sorry if I'm of trouble with these questions! Thanks for taking the time to respond.
",RSO,2016-11-14 17:32:23
1507,2015-04-23 20:39:28,"The use case I specified would be more for use in test helper functions where it may need to handle two different things - without the user caring which.  This issue isn't about the waiting or not, its about whether or not I can use #first to determine behavior.  If it raises I cannot, if it returns nil when no matching element is found it can, and has been in returning nil vs raising an exception.  So say I have a message box that appears on screen and I want to be able to close it - sometimes there's a checkbox that needs to be checked, othertimes there's not.  In most of my tests I don't really care whether the checkbox is there or not just that when it is there it gets checked.  I know that when the box appears the checkbox will already be there if it is going to be there, so while I may need to wait while finding the box, I don't need to wait while checking for the existence of the box

<S_CODE_TOKEN>

If first raises rather than returning nil I could write the relevant part of that as 

<S_CODE_TOKEN>

but that has duplication of the selector and a second search for the element for no particular reason. I could also write it as

<S_CODE_TOKEN>

That's not exactly elegant but at least it only  does one search for the matching element.

As for your definition of ""safe"" - we've been through this a couple of times with Capybara, and it comes down to the developer having to know what they're expecting their page to be doing, when they need to wait and when they don't.  There are a number of methods that can negatively affect test times if a developer doesn't understand what they are testing for and which method to use for that test.  There really isn't a way for Capybara to make sure everyone does the ""correct"" thing and still allow flexibility to do what is needed.  See issue 1435.   

Anyway that's getting off topic for this issue.
",twalpole,2016-11-14 17:32:23
1507,2016-11-14 17:32:23,"Implemented via 7cffbb36f82cd58e3e7ed6c9bd9880d08f0d2c5e in 3.0_dev branch
",twalpole,2016-11-14 17:32:23
1506,2015-04-21 17:55:33,"This adds Capybara.first_default_waiting as a setting to allow making the default behavior of Node#first be to wait for at least one element to match (same as passing minimum: 1 as an option), but returning nil if no matching elements show up rather than raising Capybara::ExpectationNotMet
",twalpole,2015-04-23 17:15:43
1506,2015-04-21 19:50:18,"Thanks for this PR! This would indeed resolve my issues (apart from the raised questions around returning `nil`).
",RSO,2015-04-23 17:15:43
1505,2015-04-21 16:33:40,"Attempting to install Capybara with RSpec on a rails 4.01 app.

Getting this error today.

/Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/capybara-2.4.4/lib/capybara/rails.rb:15:in `<top (required)>': undefined method`join' for nil:NilClass (NoMethodError)
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/activesupport-4.0.8/lib/active_support/dependencies.rb:229:in `require'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/activesupport-4.0.8/lib/active_support/dependencies.rb:229:in`block in require'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/activesupport-4.0.8/lib/active_support/dependencies.rb:214:in `load_dependency'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/activesupport-4.0.8/lib/active_support/dependencies.rb:229:in`require'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/rspec-rails-3.2.1/lib/rspec/rails/vendor/capybara.rb:7:in `<top (required)>'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/activesupport-4.0.8/lib/active_support/dependencies.rb:229:in`require'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/activesupport-4.0.8/lib/active_support/dependencies.rb:229:in `block in require'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/activesupport-4.0.8/lib/active_support/dependencies.rb:214:in`load_dependency'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/activesupport-4.0.8/lib/active_support/dependencies.rb:229:in `require'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/rspec-rails-3.2.1/lib/rspec/rails.rb:13:in`<top (required)>'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/activesupport-4.0.8/lib/active_support/dependencies.rb:229:in `require'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/activesupport-4.0.8/lib/active_support/dependencies.rb:229:in`block in require'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/activesupport-4.0.8/lib/active_support/dependencies.rb:214:in `load_dependency'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/activesupport-4.0.8/lib/active_support/dependencies.rb:229:in`require'
    from /Users/Will/Google Drive/Driver Hunt/Code/driverhunt2/spec/spec_helper.rb:9:in `<top (required)>'
    from /Users/Will/Google Drive/Driver Hunt/Code/driverhunt2/spec/controllers/jobs_controller_spec.rb:1:in`require'
    from /Users/Will/Google Drive/Driver Hunt/Code/driverhunt2/spec/controllers/jobs_controller_spec.rb:1:in `<top (required)>'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in`load'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1226:in `block in load_spec_files'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in`each'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/rspec-core-3.2.3/lib/rspec/core/configuration.rb:1224:in `load_spec_files'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:97:in`setup'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:85:in `run'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:70:in`run'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/rspec-core-3.2.3/lib/rspec/core/runner.rb:38:in `invoke'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/gems/rspec-core-3.2.3/exe/rspec:4:in`<top (required)>'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/bin/rspec:23:in `load'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/bin/rspec:23:in`<main>'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/bin/ruby_executable_hooks:15:in `eval'
    from /Users/Will/.rvm/gems/ruby-2.0.0-p481@railstutorial_rails_4_0/bin/ruby_executable_hooks:15:in`<main>'
Williams-MacBook-Air:driverhunt2 Will$ 

My spec_helper.rb has at the top:

require 'devise'
require 'rspec/rails'
require 'capybara/rspec'

rails_helper.rb at the top:

ENV['RAILS_ENV'] ||= 'test'
require 'spec_helper'
require File.expand_path('../../config/environment', **FILE**)
require 'rspec/rails'

(i.e. no mention of capybara)

My Gemfile:

group :development, :test do
  gem 'rspec-rails'
  gem 'factory_girl_rails'
  gem 'faker'
  gem 'capybara'
end

Full Gemfile:

source 'https://rubygems.org'

gem 'dotenv-rails', :groups => [:development, :test]
# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'

gem 'rails', '4.0.8'
# Use postgresql as the database for Active Record

gem 'pg'
# Use SCSS for stylesheets

gem 'sass-rails', '~> 4.0.2'
# Use Uglifier as compressor for JavaScript assets

gem 'uglifier', '>= 1.3.0'
# Use CoffeeScript for .js.coffee assets and views

gem 'coffee-rails', '~> 4.0.0'
# See https://github.com/sstephenson/execjs#readme for more supported runtimes
# gem 'therubyracer', platforms: :ruby
# Use jquery as the JavaScript library

gem 'jquery-rails'
# Turbolinks makes following links in your web application faster. Read more: https://github.com/rails/turbolinks
# gem 'turbolinks'
# Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder

gem 'jbuilder', '~> 1.2'

group :doc do
  # bundle exec rake doc:rails generates the API under doc/api.
  gem 'sdoc', require: false
end
# Use ActiveModel has_secure_password
# gem 'bcrypt', '~> 3.1.7'
# Use unicorn as the app server
# gem 'unicorn'
# Use Capistrano for deployment
# gem 'capistrano', group: :development
# Use debugger
# gem 'debugger', group: [:development, :test]

gem 'rails_12factor', group: :production

gem 'devise'

gem ""better_errors"" # better error page
gem 'binding_of_caller' # errors page has irb

gem 'jquery_mobile_rails'

gem 'quiet_assets', group: :development

gem 'exception_notification', '~> 4.0.1'

gem 'activeadmin', github: 'activeadmin'

gem ""uk_postcode"", ""~> 2.0.0.alpha""
# gem 'bootstrap-sprockets'
# gem 'bootstrap-sass', '2.1'

gem 'geokit-rails'

gem 'stripe'
# Sadly doesn't work:
# gem 'obfuscate_id', :git => 'https://github.com/namick/obfuscate_id.git'

gem 'will_paginate-bootstrap'

gem 'thin'
gem 'private_pub'

gem 'carrierwave'
gem ""mini_magick""
gem ""fog""
gem ""fog-aws""

gem 'mailcatcher', :group => :development # Open email in browser

gem 'resque', :require => ""resque/server""
gem 'resque-scheduler'

gem 'newrelic_rpm'

gem 'state_machine'

gem 'friendly_id'
",WillTaylor22,2015-04-21 17:03:55
1505,2015-04-21 17:03:55,"This isn't an issue with capybara - it's most likely with where you're requiring it from.   A quick glance shows you're requiring capybara/rails in spec_helper instead of rails_helper so thats most likely the issue.  In the future please ask howto type questions on the mailing list as requested in the README
",twalpole,2015-04-21 17:03:55
1504,2015-04-16 18:16:31,,twalpole,2016-04-04 23:07:33
1504,2015-04-16 18:24:34,"Do you think it makes sense to also output a warning for Finders and Actions?
",abotalov,2016-04-04 23:07:33
1504,2015-04-16 18:27:53,"While I want to say ""yes it makes sense"" we quickly run into issues where lots of warnings are produced for one call -- ie  the actions call finders and each will then issue its own warning, and I think that would start to get confusing.   I guess we could just blank out the options if the object passed in isn't a Hash - which would mean only the initial method receiving the non hash object would warn.  thoughts?
",twalpole,2016-04-04 23:07:33
1504,2015-04-16 18:55:17,"If I would do it, I would probably parse `args` in `Query#initialize`.

If `args` are wrong, it's possible to invoke `caller` and find the last element of an array that contains a substring `/capybara/`. Then to get a method name we can invoke e.g.

<S_CODE_TOKEN>
",abotalov,2016-04-04 23:07:33
1504,2015-04-16 19:10:49,"I'm not 100% sure that would always give us the method the user is calling though which would create confusing warnings.  I'll have to think about it a bit
",twalpole,2016-04-04 23:07:33
1504,2015-04-16 20:37:58,"Thinking about this,  I don't think it would work for chained finds or things like page.find(...), page.has_css?(....)  etc -- I guess we could filter out certain files (session.rb, etc)  but I think it would start to get messy.
",twalpole,2016-04-04 23:07:33
1504,2015-04-16 20:57:25,"It looks like chained methods don't get into trace:

<S_CODE_TOKEN>

The only concern I have is that a folder `capybara` might exist in user's / some library's code. To mitigate it we can search for `/lib/capybara/node/finders.rb` and hope that some other library (or a user) won't have it...

So inspecting `caller` feels like a hack :(
",abotalov,2016-04-04 23:07:33
1504,2015-04-16 21:40:23,"hmmm -- interesting -- when I tried it with page.has_link?  the last ""capybara"" entry in caller was 
""/Users/twalpole/Projects/jnicklas-capybara/lib/capybara/session.rb:686:in `block (2 levels) in class:Session'"",    -  which I assumed came from the page method - I'll have to figure out exactly what it is, and yes inspecting caller does feel like a hack
",twalpole,2016-04-04 23:07:33
1504,2015-04-16 21:53:33,"@abotalov -  as you can see from the PR - I've implemented something for actions too, but finders gets more complicated due to the variable args functions -- maybe a hack using caller is a cleaner solution.  I'm going to think about it for a bit
",twalpole,2016-04-04 23:07:33
1503,2015-04-14 21:43:54,"...time

Implementation of the basic idea from PR #1448 
",twalpole,2015-04-16 17:05:21
1502,2015-04-14 20:57:13,"Implementation of the request/discussion in Issue #1442
",twalpole,2015-05-20 19:01:01
1502,2015-04-16 18:17:05,"@abotalov thanks for the review - Fix for those comments coming shortly
",twalpole,2015-05-20 19:01:01
1501,2015-04-13 19:58:55,"Without requiring capybara-webkit you get an error: `no driver called :webkit was found, available drivers: :rack_test, :selenium`
",cerdiogenes,2015-04-14 20:57:53
1501,2015-04-13 20:24:10,"If you've added capybara-webkit to your Gemfile then the require shouldn't be needed, maybe we should just change it to say to add capybara-webkit to your Gemfile instead of adding the require line.  Any more in depth usage instructions really belong over in the capybara-webkit project rather than in Capybaras readme.
",twalpole,2015-04-14 20:57:53
1501,2015-04-14 14:24:37,"I'm using it in an engine, maybe this is the problem.
",cerdiogenes,2015-04-14 20:57:53
1500,2015-04-13 04:27:45,"This is a WIP on more fill_options for node#set with the selenium driver
",twalpole,2015-11-12 17:58:46
1499,2015-04-08 22:56:01,,aditya811,2015-04-08 23:34:32
1499,2015-04-08 23:27:12,"What is the reason for this?
",twalpole,2015-04-08 23:34:32
1498,2015-04-08 00:35:53,"I am developing a React application where we have some controlled inputs. This means that whenever there is an onchange event, we update some application state that ends up re-rendering the input to the DOM. In practice, when testing these fields with Capybara, we've run into issues with the `fill_in` method because of how the inputs are cleared. Running some JS to set the value to empty ended up not working for us because React would immediately clobber the input with the value stored in the application state.

Using `native.clear` to clear an input before filling it in with the desired text more accurately mimics real-world behavior. This allows us to remove a warning comment and helps Capybara work better with codebases that maintain a tight control over the DOM, such as React.js.
",lencioni,2015-04-13 01:35:09
1498,2015-04-08 02:03:02,"I see that this broke some specs, but I don't think I have enough context on how important the previous behavior was. In any case, I'd love to hear your thoughts before I spend more time on this.
",lencioni,2015-04-13 01:35:09
1498,2015-04-08 02:39:19,"This is an area where Capybara has tried many different methods for clearing a field before filling it in and trying to keep it matching normal browser behavior.  native.clear doesnt match normal browser behavior because it fires a change event, which normally wouldn't be fired until an input loses focus, sending the number of backspaces to clear the field was tried but had performance issues in the past (not sure if those still exist or not), sending ctrl-a or cmd-a followed by backspace requires platform specific code, so the javascript clear thats currently implemented was settled on.   That being said, the fill_options parameter was added to #fill_in to allow for passing options through to #set so that drivers could implement things like different clearing mechanisms -   fill_in('Name', with: 'Bob', fill_options: {clear: :native})  or some such thing - although no fill_options have yet been implemented for the selenium driver
",twalpole,2015-04-13 01:35:09
1498,2015-04-08 12:19:42,"Thanks for the response! This is very helpful.

> native.clear doesnt match normal browser behavior because it fires a change event, which normally wouldn't be fired until an input loses focus

Agreed, this is not ideal.

> sending the number of backspaces to clear the field was tried but had performance issues in the past (not sure if those still exist or not)

I had considered this approach as well. I think it might make sense for compatibility to be the default over performance. 

> That being said, the fill_options parameter was added to #fill_in to allow for passing options through to #set so that drivers could implement things like different clearing mechanisms - fill_in('Name', with: 'Bob', fill_options: {clear: :native}) or some such thing - although no fill_options have yet been implemented for the selenium driver

Ah, this sounds good. Would you be open to a pull request that implements `fill_options` for the selenium driver where it clears by backspacing as the default and you can specify an option to clear by assignment for performance? `fill_options: { clear: :assignment }` Alternatively, I could leave the current behavior as default and create an option for backspacing--but as I previously mentioned, it seems like the right way to go is compatibility by default and give people who want to improve performance an option to do so, so that would be my preference.

Also, if you happen to know of a driver that has implemented `fill_options`, that would be helpful for me so I can see an example of how it is being used.
",lencioni,2015-04-13 01:35:09
1498,2015-04-08 16:46:03,"IIRC the performance hit (especially with chrome) was enough to make Capybara basically unusable so we won't be changing the default currently.  Issue #1319 and PR #1338 were where the need for fill_options was discussed and @sobrinho was the person initially requesting for poltergeist.  I'm not sure if it was ever used in poltergeist or not.  I would be open to a pull request that implements multiple clear methods for selenium and potentially a setting that will allow changing the default option (as long as its default is the current behavior)
",twalpole,2015-04-13 01:35:09
1498,2015-04-08 16:52:31,"as @abotalov mentioned it would probably be nice to have a :none option for clear too thereby allowing for appending to existing content, it might also be nice to accept an array of keystrokes so I could pass [[:command, 'A'], :backspace], as my clear method and those keystrokes would just get forwarded on to send_keys
",twalpole,2015-04-13 01:35:09
1498,2015-04-09 03:27:57,"What I'm currently doing in that cases is this:

<S_CODE_TOKEN>

It uses jQuery and requires the input to have an id but you can get the idea easily.

You can change the triggered event as you like.
",sobrinho,2015-04-13 01:35:09
1498,2015-04-09 03:29:48,"Also note that the method is kind of naive, it is assuming you never have an apostrophe on id (which is invalid anyway) or on value.

But if you concerned about that you can the variables to be something like `$(...).val(#{with.to_s.to_json})`.
",sobrinho,2015-04-13 01:35:09
1498,2015-04-12 14:30:53,"Alright, I've pushed a new version that implements `fill_options` with an option to use backspaces to clear the field. It looks like the only specs that are failing are the same ones that are failing on master. Let me know if you'd like me to do anything else with this commit.
",lencioni,2015-04-13 01:35:09
1497,2015-04-03 02:25:35,"Contrived example

The spec

<S_CODE_TOKEN>

fails

throw in a `binding.pry` and 

<S_CODE_TOKEN>

Using `find(‘textarea#my_text').value.should == ‘A value’` works in this rather contrived example, however this does _not_ work if the text area contents are set via ajax. In that case `find('textarea#my_text').value` always returns `””`. (I assume this is because whatever magic that `has_css?` does to auto-wait for javascript to finish doesn’t happen with `find`, but I’m not sure.)

Is this the expected behavior? Is there a workaround for what I’m trying to accomplish?

Versions:
ruby 2.2.0p0
capybara 2.4.4
rails 4.2.1
rspec-rails 3.2.1
poltergeist 1.6.0 + phantomjs 1.9.8
",BM5k,2015-04-03 04:24:05
1497,2015-04-03 04:24:05,"Please ask howto questions in the Google group as requested in the readme 
",twalpole,2015-04-03 04:24:05
1497,2015-04-03 04:27:19,"Does that mean this _is_ the expected behavior?
",BM5k,2015-04-03 04:24:05
1497,2015-04-03 04:33:05,"You are using the incorrect methods for what you're trying to do.  Either ask on the mailing (Google groups) list as requested in the README or read the docs further
",twalpole,2015-04-03 04:24:05
1497,2015-04-03 04:36:26,"Thanks for the clarification.
",BM5k,2015-04-03 04:24:05
1496,2015-04-02 17:48:43,"**Rails 4.2.0, RSpec 3.1, Capybara 2.4.4, Capybara Webkit 1.3.1**

My `checkbox` method finds a checkbox based on its HTML element value. My tests are failing with the following Nokigiri error, but I figured asking for help here, since I am using Capybara to select the elements.

<S_CODE_TOKEN>
",onebree,2015-04-02 18:09:15
1496,2015-04-02 18:09:15,"Please ask how to questions on the mailing list as requested in the README
",twalpole,2015-04-02 18:09:15
1495,2015-03-30 21:54:45,"`spec/rails_helper.rb`:

<S_CODE_TOKEN>

my login method:

<S_CODE_TOKEN>

`spec/features/content_spec.rb`:

<S_CODE_TOKEN>

I got this error:

<S_CODE_TOKEN>

When i am using `:selenium` driver:

<S_CODE_TOKEN>

How can i fix this problem?
",cihad,2015-03-30 22:00:59
1494,2015-03-17 21:34:24,"#1483 was the last mention I saw of this from someone.

On Mac, I upgraded to phantomjs 2.0 using homebrew and immediately couldn't attach a file in test cases that required :js.  It's working without js: true.

Downgrading to ""phantomjs192"" resolved the issue.
",lewang,2015-03-17 21:43:30
1494,2015-03-17 21:43:30,"The capybara project doesnt support phantomjs itself.  The support is provided via the poltergeist driver, so this issue should be filed with the poltergeist project
",twalpole,2015-03-17 21:43:30
1494,2015-03-17 22:09:39,"thnaks.

On Tue, Mar 17, 2015 at 5:43 PM, Thomas Walpole notifications@github.com
wrote:

> The capybara project doesnt support phantomjs itself. The support is
> provided via the poltergeist driver, so this issue should be filed with the
> poltergeist project
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/jnicklas/capybara/issues/1494#issuecomment-82610470.

## 

Le
",lewang,2015-03-17 21:43:30
1493,2015-03-17 19:55:58,"The window#maximize spec has recently stopped passing on Travis runs
",twalpole,2016-07-29 19:37:02
1493,2015-03-17 20:12:37,"@abotalov You did a great job getting this passing originally with the awesome window manager.  Any chance you have time to look at it again and see if you can figure out what has changed that is causing it to fail with firefox every time (I believe it passes with chrome).  I have marked the test as pending for the firefox/travis combo currently.
",twalpole,2016-07-29 19:37:02
1493,2015-03-22 09:05:48,"I reproduced it on my machine. This test passes with Firefox 35 + awesome + Xvfb + selenium 2.44.0 /  2.45.0.dev2 / 2.45.0.dev3 but fails with selenium 2.45.0.dev / 2.45.0 (OS - Ubuntu 14.04)

I don't yet what is the cause of it.
",abotalov,2016-07-29 19:37:02
1493,2015-04-02 19:18:04,"This could be caused by the significant performance degradation the firefox driver has in selenium 2.45.0  hopefully 2.45.1 or 2.46 will be released soon with the fix so we can confirm.   https://code.google.com/p/selenium/issues/detail?id=8551
",twalpole,2016-07-29 19:37:02
1492,2015-03-17 17:48:30,"Fix for issue #1491 while using the racktest driver
",twalpole,2015-03-17 17:49:14
1491,2015-03-13 13:35:10,"if I set `href` to '#', the test case is ok!

<S_CODE_TOKEN>

but when I change `href` to `javascript:void(0)`, then I run test again, It'll give me a error

<S_CODE_TOKEN>
",DotHide,2015-03-17 19:24:29
1491,2015-03-13 15:01:58,"What driver are you using? Please show the stack trace for the error.
",twalpole,2015-03-17 19:24:29
1491,2015-03-17 17:47:04,"Since no further info has been provided, I am assuming this was while using the racktest driver - and am fixing it for that case -- If it was not using the racktest driver you will need to provide the info requested.
",twalpole,2015-03-17 19:24:29
1490,2015-03-12 18:43:32,"Added capybara gem along with selenium web driver to Gemfile. rake assets precompile is breaking since then. Tracing the issue seems to point the problem at this place.

/Users/keshav/.rvm/rubies/ruby-2.1.4/lib/ruby/2.1.0/test/unit.rb:199:in `block in non_options': file not found: assets:precompile:all (ArgumentError)
    from /Users/keshav/.rvm/rubies/ruby-2.1.4/lib/ruby/2.1.0/test/unit.rb:178:in`map!'
    from /Users/keshav/.rvm/rubies/ruby-2.1.4/lib/ruby/2.1.0/test/unit.rb:178:in `non_options'
    from /Users/keshav/.rvm/rubies/ruby-2.1.4/lib/ruby/2.1.0/test/unit.rb:237:in`non_options'
    from /Users/keshav/.rvm/rubies/ruby-2.1.4/lib/ruby/2.1.0/test/unit.rb:58:in `process_args'
    from /Users/keshav/.rvm/rubies/ruby-2.1.4/lib/ruby/2.1.0/minitest/unit.rb:1073:in`_run'
    from /Users/keshav/.rvm/rubies/ruby-2.1.4/lib/ruby/2.1.0/minitest/unit.rb:1066:in `run'
    from /Users/keshav/.rvm/rubies/ruby-2.1.4/lib/ruby/2.1.0/test/unit.rb:27:in`run'
    from /Users/keshav/.rvm/rubies/ruby-2.1.4/lib/ruby/2.1.0/test/unit.rb:780:in `run'
    from /Users/keshav/.rvm/rubies/ruby-2.1.4/lib/ruby/2.1.0/test/unit.rb:372:in`block (2 levels) in autorun'
    from /Users/keshav/.rvm/rubies/ruby-2.1.4/lib/ruby/2.1.0/test/unit.rb:33:in `run_once'
    from /Users/keshav/.rvm/rubies/ruby-2.1.4/lib/ruby/2.1.0/test/unit.rb:371:in`block in autorun'

Appreciate your help, 
Keshav.
",keshavkuruva,2015-03-12 19:08:08
1490,2015-03-12 19:08:07,"Capybara has nothing to do with asset compilation and isn't listed at all in the stack trace you posted, so I'm 99.9% sure it has nothing to do with this error.   You might want to look at anything else that was changed at the same time as you added capybara.  You might also want to post the mailing list mentioned at the top of the readme to see if anyone there has had a similar issue.
",twalpole,2015-03-12 19:08:08
1490,2015-03-18 19:45:07,"Thanks Guys. Fixed this. Was being caused because of a different gem called contest that was being used along with capybara. I was able to fix this after setting require => false for contest gem in Gemfile.
",keshavkuruva,2015-03-12 19:08:08
1489,2015-02-27 17:43:25,"Not able to find input element label using capyabra. Is there any default finder can give the label for the input element?
for eg:

<S_CODE_TOKEN>

> page.all(""form"").first.find.all(""input"").first.find(:xpath, "".."")
> this returns > #<Capybara::Element tag=""td"">

Is there any way to get label element of the input or input before element using capyabara.
",rails-geek,2015-02-27 17:57:10
1489,2015-02-27 17:56:07,"Please ask how to questions on the mailing list as requested in the README.  Also, you'll probably want to clean up that html to be valid before reposting the question on the mailing list (can't have three elements with the same id of ""et"", and the label should either surround the input or have a for attribute linking it to an input)
",twalpole,2015-02-27 17:57:10
1488,2015-02-26 21:42:56,"Potential fix for issue #1245
",twalpole,2015-02-26 22:29:47
1487,2015-02-26 05:03:43,"Fixes #1485 
",eoinkelly,2015-02-26 18:15:59
1487,2015-02-26 17:54:35,"Ok - so if you make the one change I indicated and squash the two commits together, I'll merge this in -- thanks
",twalpole,2015-02-26 18:15:59
1487,2015-02-26 18:07:45,"Done :-)
",eoinkelly,2015-02-26 18:15:59
1486,2015-02-25 20:48:31,"The README is large (yay!) and I refer to it regularly so I thought a TOC would be helpful.
",eoinkelly,2015-02-25 22:17:34
1486,2015-02-25 22:17:39,"thanks
",twalpole,2015-02-25 22:17:34
1485,2015-02-25 18:04:45,"Very minor thing but the API docs refer to `Capybara::Element` which does not exist e.g. https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/finders.rb#L25 - I presume they should refer to `Capybara::Node::Element`? 
",eoinkelly,2015-02-26 18:15:59
1485,2015-02-25 18:21:21,"Technically in the location referenced it could be Capybara::Node::Element or Capybara::Node::Simple I believe, but yes it is incorrect -  PR would be welcome
",twalpole,2015-02-26 18:15:59
1484,2015-02-21 08:47:23,"The title says it all. It seems that when I do `choose ""radio_button_true""` for my specs, it just highlights the radio button but fails to choose it. 

Here's the bootstrap feature I'm talking about
http://getbootstrap.com/javascript/#buttons-checkbox-radio

If you wan't a clearer description, I created a repository that demo's this error
git@github.com:carlqt/capybara_issue.git

Just type in `rspec` then watch how it fails.
",carlqt,2015-02-21 15:12:03
1484,2015-02-21 15:12:02,"This is an issue with how the bootstrap javascript works for button-groups -  it needs the label to be clicked on rather than the radio button.   In this case that could be done with something like   

<S_CODE_TOKEN>

or as something that could be turned into a  choose_bootstrap helper or something

<S_CODE_TOKEN>
",twalpole,2015-02-21 15:12:03
1483,2015-02-18 02:26:41,"Hi, please help me with this
I have application that have ability to upload file from JS

I collect the file use this code

data = new FormData();
data.append('file' $(""#file_input"")[0].files[0])

but when I do testing using capybara
attach_file 'fieldname', filepath
or
find(..).set filepath

JS didnt recognize file and send undefined into server
Thank you :)
",evandavid,2015-02-18 03:31:29
1483,2015-02-18 03:31:29,"Please ask howto questions on the mailing list as requested in the README
",twalpole,2015-02-18 03:31:29
1482,2015-02-12 08:20:55,"When giving before: each at describe and context the script behaves as expected.
However when we give before: each at describe level but before: all at context level. The before: all of context level is executing before before: each of describe level, the test script and execution result have been enclosed
![execution](https://cloud.githubusercontent.com/assets/9031799/6163763/ad1bb3b0-b2bc-11e4-8bc0-6fb6fae340c2.png)
![test_script](https://cloud.githubusercontent.com/assets/9031799/6163769/c0f77f54-b2bc-11e4-8889-5a7d337ef38c.png)
",Dbhar,2015-02-12 08:45:37
1482,2015-02-12 08:45:36,"This isn't an issue in Capybara. Ask questions in mailing or Stack Overflow. Also this is question about RSpec, not Capybara.
",abotalov,2015-02-12 08:45:37
1481,2015-02-10 16:03:18,"Hope this is the right forum to ask this question. While reviewing https://github.com/jnicklas/capybara#asynchronous-javascript-ajax-and-friends it wasn't 100% clear about which finder methods are AJAX-friendly. In the [documentation](http://www.rubydoc.info/github/jnicklas/capybara/Capybara/Node/Finders:find) _only_ `find` is said to honor `default_wait_time`. Do any others? If not, it would probably be best to make this explicit in the README. I'd be happy to submit revision based on your guidance. Thank you!
",bbuchalter,2015-08-25 20:40:49
1481,2015-02-10 16:07:23,"Additionally, it would be nice to be explicit about which RSpec matchers support `default_wait_time` as well.
",bbuchalter,2015-08-25 20:40:49
1481,2015-02-10 16:13:48,"I would be curious to know which finders and matchers _do not_ support the default_wait_time.  In my experience, I've not seen many specs get ahead of itself and fail before the default_wait_time.
",philipfong,2015-08-25 20:40:49
1481,2015-02-25 18:29:18,"All the finders are implemented via either #find or #all which both support waiting through either default_wait_time or a :wait option passed to the finder, so all the capybara provided finders support waiting.  For #all to wait one of the count options would need to be passed to it (otherwise 0 matching elements is a valid return).  PRs updating the documentation would be welcome
",twalpole,2015-08-25 20:40:49
1481,2015-02-26 23:46:45,"Just realized I didn't mention the matchers -- all the capybara provided matchers support waiting as well
",twalpole,2015-08-25 20:40:49
1481,2015-03-17 19:02:05,"Can someone help with this scenario?  This type of rspec matcher does not wait, and will fail immediately.  Please note that I'm still using the old 'should' syntax.

page.all('foo').size.should == 3

This type of statement doesn't appear to ""wait"" for the result to become 3.  I have to wrap this line with some code to mimic the default_wait_time being used.
",philipfong,2015-08-25 20:40:49
1481,2015-03-17 19:04:03,"@philipfong In that statement a matcher is `==`. This matcher is provided by RSpec, not Capybara, and doesn't wait.

To wait you can use:
- a matcher provided by Capybara:

<S_CODE_TOKEN>
- `become_*` matchers provided by [waiting_rspec_matchers](https://github.com/abotalov/waiting_rspec_matchers) gem:

<S_CODE_TOKEN>
",abotalov,2015-08-25 20:40:49
1481,2015-03-17 19:20:51,"@philipfong  Also note that as I stated above regarding capybaras finders - ""For #all to wait one of the count options would need to be passed""  - so you could also do 

<S_CODE_TOKEN>

Obviously that doesn't read all that well, and the first example provided by @abotalov is probably the cleanest reading way to do what you are doing - with 'should' syntax it would be 

<S_CODE_TOKEN>
",twalpole,2015-08-25 20:40:49
1481,2015-03-17 19:34:59,"I just tried out the capybara finder with the count option and it works beautifully!  I did not know that option was supported.  Thank you, @twalpole @abotalov 
",philipfong,2015-08-25 20:40:49
1481,2015-03-17 19:44:20,"@philipfong http://www.rubydoc.info/github/jnicklas/capybara/Capybara/Node/Finders#all-instance_method   -- you can also specify minimum, maximum, between
",twalpole,2015-08-25 20:40:49
1481,2015-04-10 17:27:17,"Oh, interesting. I was under the impression that #find waited but #all did not wait. I see now that this is not quite the case.

Specifically, both #find and #all run a query to find the element(s) in question. Capybara will run this query again if it detects a Capybara::ElementNotFoundError, or an ""invalid element error"" -- this will come from the driver, so for instance Selenium might raise a Selenium::StaleElementReferenceError. It will then run the query over and over until `Capybara.default_wait_time` is reached (at which point it will raise the error).

So why does it seem that #find waits but #all does not? Because #find will raise a Capybara::ElementNotFoundError by default if it cannot find the element in question, which as we've seen will cause the query to get re-run, and #all will _not_. In other words #all still waits, but it fails a lot faster. 

In response to

> For #all to wait one of the count options would need to be passed

It looks like judging from the [code](https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/finders.rb#L152) that passing options to #all does modify the query that Capybara will run, but it doesn't necessarily cause it to wait longer. Specifically, if you provide `:count` Capybara will raise Capybara::ExpectationNotMet immediately if the number of elements found doesn't match your `:count` (and this is not in the list of errors that will cause the query to get retried, so the query is not retried).
",mcmire,2015-08-25 20:40:49
1481,2015-04-10 17:31:15,"So to answer the OP, saying that #find is the only method that supports `Capybara.default_wait_time` isn't quite correct. Both #find and #all support `Capybara.default_wait_time`, but #find is more aggressive at attempting to find the element in question, and raises an error if it cannot do so within the alloted time; #all will simply return an empty array if it can't find those elements (unless you provide `:count`, in which case it raises an error immediately).

I think the [documentation](https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/finders.rb#L10) actually describes this pretty well.
",mcmire,2015-08-25 20:40:49
1481,2015-04-10 21:05:03,"@mcmire You missed the fact that the ExpectationNotMet error is derived from ElementNotFound, so it will actually trigger a retry.   Using any of the count type options (count, minimum, maximum, between) will cause #all to wait up to the passed in wait time (or default_wait_time) for a set of elements that fulfill the requirements. If none of the count type options are used then any set of elements is an acceptable response (including none) so it will return immediately with the current set of elements (which may be empty) matching the query. 
",twalpole,2015-08-25 20:40:49
1481,2015-04-10 22:05:55,"@twalpole Ahh... nice, well, I stand corrected. That's very cool.

So yeah... the docs should definitely be updated in this case.
",mcmire,2015-08-25 20:40:49
1481,2015-08-25 20:48:29,"Well done @twalpole thank you!
",bbuchalter,2015-08-25 20:40:49
1480,2015-02-06 15:15:36,,deepj,2015-02-25 18:43:23
1480,2015-02-25 18:43:29,"thanks
",twalpole,2015-02-25 18:43:23
1479,2015-02-04 15:29:12,"So, I have the following select:

<S_CODE_TOKEN>

And I do:

<S_CODE_TOKEN>

But it only select the last one not both of them.

Here is some of the config I have:

<S_CODE_TOKEN>
",theonegri,2015-02-04 19:57:04
1479,2015-02-04 17:50:09,"There are tests for this exact behavior so I'm going to start by assuming this is not actually an issue in Capybara.  What #select does is: find the element and then click on the option - assuming its not already selected.  In your case the select box already has the two entries selected so the two select method calls should do nothing.  Do you happen to be using some kind of javascript select box enhancement that is changing the page structure?
",twalpole,2015-02-04 19:57:04
1479,2015-02-04 18:12:47,"Not that I know.
I tried with a simple example:

<S_CODE_TOKEN>

And in the chrome launched, I only see this: http://cl.ly/image/3w1p1x3r0t3W

So I'm assuming that chrome doesn't display both select? Or am I doing something wrong?
",theonegri,2015-02-04 19:57:04
1479,2015-02-04 19:28:41,"What version of chrome and chromedriver are you using? Also what version of capybara?
",twalpole,2015-02-04 19:57:04
1479,2015-02-04 19:40:01,"Version 40.0.2214.94 (64-bit) on OS X 10.10.2 
",theonegri,2015-02-04 19:57:04
1479,2015-02-04 19:50:16,"and chromedriver?
",twalpole,2015-02-04 19:57:04
1479,2015-02-04 19:52:07,"If you're not running chromedriver 2.14 - trying upgrading that, and if that doesn't fix your issue, maybe try asking over on the mailing list -- works fine for me.
",twalpole,2015-02-04 19:57:04
1479,2015-02-04 19:57:04,"Sorry, forgot that part.
I was using ChromeDriver 2.10.267517 and I just updated to the latest version.

I works perfectly.

Thanks a lot for your time!
",theonegri,2015-02-04 19:57:04
1478,2015-02-04 15:26:07,,theonegri,2015-02-04 16:34:54
1478,2015-02-04 16:35:16,"duplicate of https://github.com/jnicklas/capybara/issues/1479 created by error
",theonegri,2015-02-04 16:34:54
1477,2015-02-03 21:57:20,"Not sure if default value for `attributes` in `#submit` wasn't added intentionally, but adding it seems to improve the API
",gaganawhad,2015-02-25 18:45:49
1477,2015-02-03 22:55:11,"Pretty sure this was intentional since they're not really part of the public API and submitting a form without its parameters doesn't really make sense.
",twalpole,2015-02-25 18:45:49
1477,2015-02-04 15:06:31,"Got it! That makes sense. My use case was `page.driver.submit :delete, '/sign-out', {}` which got me wondering... 
",gaganawhad,2015-02-25 18:45:49
1476,2015-01-28 19:40:18,"Currently there doesn't seem to be a way to have capybara switch ""servers"" between tests?

For example, can we use the following configuration for a group of specs

<S_CODE_TOKEN>

And use the default server (webrick I believe) for the remaining?
",tonywok,2015-01-28 20:09:07
1476,2015-01-28 20:09:07,"As requested in the README, please ask questions about how to use Capybara on the mailing list
",twalpole,2015-01-28 20:09:07
1475,2015-01-27 03:07:35,"I have some troubles with the speed of capybara checks. Sometimes, it clicks too fast. User doesn't do different actions every `0.05` seconds. 

For example, I click to open modal window, enter some data and click save. Capybara does all this when the modal is only starting to show up. The javascript execution is still in progress and Save button handler is not yet attached. I have to add `sleep 1` or `2` between actions to finish JS execution. 

The main idea is: we try to imitate a user, and he usually does little pauses between actions. It would be useful to have a parameter, like `Capybara.wait_between_actions` or something similar.
",NameFILIP,2015-01-27 05:35:19
1475,2015-01-27 05:35:19,"For actions that need changes to have happened first, you should be testing for those changes to exist first (classes set/removed on modal when it's fully opened, etc) or disable animations in test mode.  Adding delays between every action would make tests unbearably slow. If you need more info please ask questions on the mailing list as mentioned in the README
",twalpole,2015-01-27 05:35:19
1475,2015-01-27 05:53:34,"Sure I do test that changes exist. The problem is when you test a more or less complex Single Page Application, you very often have to dig into the javascript code trying to figure out what happens exactly before what you need. Just think maybe there is a better way to overcome this problem..

How to disable animations in test mode? (I've found this solution http://stackoverflow.com/questions/11131875/what-is-the-cleanest-way-to-disable-css-transition-effects-temporarily#answer-11132887) or is there a parameter somewhere? Or maybe it's somehow possible to determine if JS is still executing?
",NameFILIP,2015-01-27 05:35:19
1475,2015-01-27 08:22:54,"all depends on how you're doing the animations, but again - ask questions on the mailing list not in issues
",twalpole,2015-01-27 05:35:19
1474,2015-01-26 19:18:30,"See https://github.com/jnicklas/capybara/issues/1463

This doesn't have new tests and I'm not sure if it works (though I ran existing tests). Just take a look on what I propose to do.
",abotalov,2016-07-14 00:06:28
1473,2015-01-23 22:05:32,,twalpole,2015-01-23 22:05:40
1472,2015-01-23 21:17:37,"Implementation of item discussed in Issue #1459  -  @jferris @jonleighton @mhoran Thoughts on implementing this in your drivers for Capybara 2.5 ?
",twalpole,2015-02-26 18:19:29
1472,2015-01-26 03:00:47,"There are a few keys that we can't send in capybara-webkit

<S_CODE_TOKEN>

There is no differentiation between shift and left shift, control and left control, or alt and left alt in Qt. We only have left, up, right, and down mappings, but nothing corresponding to ""arrow"".

Is `:separator` `|`? Is `:decimal` `.`?

Command is not a cross-platform key, so it is not supported by Qt. On OS X, `Qt::Key_Control` maps to command, and `Qt::Key_Meta` maps to control. We could conceivably map these as appropriate on each individual platform, but that may be surprising for users.

Finally, what should `:null` send?
",mhoran,2015-02-26 18:19:29
1472,2015-01-26 18:28:33,"@mhoran - The list of symbols is what selenium understands
:left_shift, :left_alt, :left_control are just aliases for :shift, :alt, :passport_control: 
:arrow_up, :arrow_down, :arrow_right, :arrow_left  are aliases for :up, :down, :right, :left.  
:command is an alias for :meta.  
:decimal is the numeric keypad .  
:add, :divide, :subtract, :multiply are the numeric keypad instances of +, /, -, *

:separator is the numeric keypad ""seperator"" key (different from the :decimal key) - the keycode is 108 and I'm guessing its a key returned by non-english keyboards although I can't find info that specifically states that.

:null - appears to be used in lower level key routines in selenium to trigger release of all modifier keys.  It is probably not needed for this so I'm removing it from the list 
",twalpole,2015-02-26 18:19:29
1472,2015-01-28 14:56:11,"> There is no differentiation between shift and left shift, control and left control, or alt and left alt in Qt. We only have left, up, right, and down mappings, but nothing corresponding to ""arrow"".

I'm guessing that if we just sent shift, control, and alt, that would be least surprising to users. Same goes for up/arrow_up.
",jferris,2015-02-26 18:19:29
1472,2015-01-28 18:05:26,"@jferris I have removed the arrow_x and left_x aliases from the list of required supported key symbols - For future info DOM Level 3 does support identifying left vs right instances of shift, alt, control via the location attribute of a KeyboardEvent however not all browsers support it at the moment https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent.location and selenium doesn't currently provide a way to set it, so we may have to revisit left_shift, right_shift, etc in the future
",twalpole,2015-02-26 18:19:29
1471,2015-01-23 18:56:40,,arirusso,2015-01-23 18:56:48
1470,2015-01-23 18:52:45,,twalpole,2015-01-23 18:52:53
1469,2015-01-22 15:34:00,"It happens from time to time when I run cucumber.

It randomly adds /content/index-m.php at the end of my URL which makes the scenario fail because the page is never loaded because that specific url doesn't exist.

I must say I am new with cucumber & capybara. This is how my steps.rb file looks like: 

<S_CODE_TOKEN>

where `$page` stores my website page.

And this is how my env.rb file looks like:

<S_CODE_TOKEN>

![capybara_visit](https://cloud.githubusercontent.com/assets/3664943/5858546/00459214-a222-11e4-8f46-53103d959425.jpg)
",toshidavila,2015-01-22 18:10:59
1469,2015-01-22 18:10:59,"Since the string /content/index-m.php is nowhere in capybara, this is not a capybara issue -- I would check the value of the $page variable before you call visit and if its correct there then your code is probably redirecting.  In the future, if you are not 99.9% sure its an issue with Capybara, please ask questions on the mailing list as requested in the README
",twalpole,2015-01-22 18:10:59
1469,2015-01-22 18:14:39,"Hi,

the $page variable is https://www.mypage.com and it happens randomly with the method visit...
",toshidavila,2015-01-22 18:10:59
1468,2015-01-20 07:43:00,"require ""spec_helper""

require ""rails_helper""

include Capybara::RSpecMatchers

include Capybara::DSL

Capybara.javascript_driver = :webkit

feature ""Course"", :type => :feature do

scenario ""Get index and apply different search filters for course types"", js: true do

visit ""/courses""

within(""//body"") do

find(:xpath, ""//input[@id='course_type_id_1']"").click

find(:xpath, ""//div[@class='course-right-sec']"")

expect(page).to have_content('65,171 courses')

expect(page).to have_content('Fundamentals of Design')

end

end

end

The problem i am facing with the above code is that when i find a specific div with a respective class inside a within block, whether the div with that class exists or not, the test passes in any case. Any help on this issue?
",hassanabbas901,2015-01-20 08:27:07
1468,2015-01-20 08:27:07,"https://github.com/jnicklas/capybara#beware-the-xpath--trap
",abotalov,2015-01-20 08:27:07
1467,2015-01-19 15:37:23,"This works fine when testing manually, but using Capybara with a JS driver (such as Selenium Webdriver), it stalls out because the GET request is too large. Switching the index route to a POST allows this to work, but is not RESTful (a POST to /resources should create an object, not return an index, that's what GET at /resources is for). And again, it works in normal browsers.
",TrevorHinesley,2015-01-19 19:05:55
1467,2015-01-19 19:05:55,"How long is your uri?  Different browsers have different limits as do different servers -  Capybara starts up the rails app using WEBrick which IIRC has a limit around 2048, for url length, to match some version of IEs limit - I believe you can change WEBricks default limit (check the WEBrick docs for that), but using a URL anywhere near a browsers or servers length limit is not a great idea - maybe your routing scheme needs a rethink
",twalpole,2015-01-19 19:05:55
1467,2015-01-19 21:18:42,"I'm not using any special routing, this is a DataTables default which is used on thousands of sites. I could change it to a POST but that seems to defy convention. Works fine in Thin, which is what my Rails app uses.
",TrevorHinesley,2015-01-19 19:05:55
1467,2015-01-19 21:29:58,"Switched Capybara's server to Thin, resolved.
",TrevorHinesley,2015-01-19 19:05:55
1467,2015-11-06 20:31:49,"another option is
https://github.com/raggi/capybara-puma
",JoeZ99,2015-01-19 19:05:55
1467,2016-10-07 00:31:22,"How did you switch capybara's server to thin? Also, the capybara-puma gem is now deprecated saying capybara has ""native features"". How can we increase the max uri length for get requests and do so in a portable way(eg so it can run remote CI like Travis)?
",synth,2015-01-19 19:05:55
1467,2016-10-07 01:43:10,"@synth capybara-puma is now deprecated because you can just do `Capybara.server = :puma` with recent versions of Capybara.  To switch to thin you'd need to use Capybara.register_server to setup thin, and then after that specify `Capybara.server = :thin`  - see https://github.com/jnicklas/capybara/blob/master/lib/capybara.rb#L481 for how puma is registered as an example
",twalpole,2015-01-19 19:05:55
1467,2016-10-07 20:27:22,"👍 Thanks!
",synth,2015-01-19 19:05:55
1466,2015-01-18 13:09:28,"### jnicklas/capybara now has a Chat Room on Gitter

@abotalov has just created a chat room. You can visit it here: [https://gitter.im/jnicklas/capybara](https://gitter.im/jnicklas/capybara?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).

This pull-request adds this badge to your README.md:

[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jnicklas/capybara?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

Happy chatting.

PS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.
",gitter-badger,2016-04-04 23:09:02
1465,2015-01-17 17:23:32,,abotalov,2015-01-19 19:43:26
1465,2015-01-19 18:46:52,"Is not respecting BUNDLE_JOBS a new change on Travis?? I'm pretty sure it used to respect it
",twalpole,2015-01-19 19:43:26
1465,2015-01-19 19:37:59,"See:
https://github.com/calagator/calagator/commit/87169d023b7143d21d3cd399158dbd97a7ac0579
https://github.com/teampoltergeist/poltergeist/pull/499#issuecomment-54663015

After some search in travis-build/travis-build I found that first commit that added `--jobs=3` is probably this one - https://github.com/travis-ci/travis-build/commit/6cb7c4d8c0f9b89b7d95b46ef1174cb327dc1538 and current implementation seems to be here (https://github.com/travis-ci/travis-build/blob/a9f5fe32fffb4d4ceee2062770c7c50aa3098d3a/lib/travis/build/script/shared/bundler.rb). Though I don't know Travis structure, I've just searched through it.

So travis-build sets `--jobs=3` without checking for BUNDLE_JOBS env variable. Probably this is a bug  in Travis but I think `--jobs=3` is fine for us.

cc @joshk
",abotalov,2015-01-19 19:43:26
1465,2015-01-19 19:43:31,"ok 3 vs 4 wouldn't make much difference anyway -- merging -- thanks
",twalpole,2015-01-19 19:43:26
1464,2015-01-15 21:21:44,"When running tests with cucumber with automated save on failure, both the image an a corresponding html file are saved. However, I would like the options:
1) Save Image only (no HTML)
2) Embed Image into HTML (No Image file)
3) Embed Image into HTML (with Image file)
",scalixte-mdsol,2015-01-15 21:45:58
1464,2015-01-15 21:45:58,"This isn't functionality provided by Capybara, so I assume you are using the capybara-screenshot gem and your request belongs over there.
",twalpole,2015-01-15 21:45:58
1464,2015-01-15 21:54:21,"Please disregard the issue written earlier. Thanks, @twalpole .
",scalixte-mdsol,2015-01-15 21:45:58
1463,2015-01-07 18:18:25,"I see the following downsides in some aspects of Capybara:
1. `find` always returns instance of `Element`, not a subclass of it. Therefore some methods that make sense only for some kinds of elements aren't provided (e.g. Select#selected_option, FileField#set, Image#loaded?, etc.)
2. :field, :radio_button, etc. are:
   - hard to debug if ElementNotFound occurs. Writer of the code may have meant id/name/placeholder/etc. but it's not easy to find if that element really exists on the DOM
   - difficult to remember which attributes are supported and which are not (is alt attribute supported?)
     But people use them as:
   - `have_field('name')` looks better than `have_css(""*[name='name']"")`
   - there is no good alternative if you want to use selector-specific options.  
     `expect(page).to have_field('field_id', with: 'something')`  
     `expect(page).to have_select('label_text', with_options: ['42', '43'])`

Proposed solution:
1. Add `:name`, `:value`, `:label_text`, `:href`, etc. selector kinds out-of-the-box to make it easier to find elements in a deterministic way without necessity to write longer css/xpath selectors
2. Add `:type` option that specifies which kind of element it is. Examples:

<S_CODE_TOKEN>

New methods `Capybara.register_element_type` and `Capybara.register_selector_kind` will be added. `Capybara.add_selector` will be deprecated. It will be possible to register both element type and selector kind using `add_selector` (some methods will be delegated to registering element type and some others to registering selector kind).

User would be able to define a subclass of `Capybara::Node::Element` and its relation to one of registered element types (some subclasses will be defined as part of Capybara).

`:type` won't be used to check element's tag but only to return element of a more specific class and to support type-specific options (like `:checked`, `:disabled`, `:href`, etc that are defined by `register_element_type`).

This change looks backwards compatible to me. 

WDYT?
",abotalov,2016-04-07 00:34:22
1463,2015-01-14 18:19:32,"Sorry for the delay on this - personal issues have kept me away for a while.
At first glance this sounds interesting, although I think it is two different issues and if implemented should probably be done as two different PRs.  A couple of issue
1. Its not clear to me why add_selector would be deprecated, or what register_selector_kind would be for. 
2. Would you  see this being implemented via changes to the xpath gem, or strictly in capybara.
3. If :type isn't checking elements tags isn't this opening users up to even more difficult to debug issues?
",twalpole,2016-04-07 00:34:22
1463,2015-01-24 22:26:28,"> 1. Its not clear to me why add_selector would be deprecated, or what register_selector_kind would be for.

I played around with code and decided that there's no need to deprecate it and add `register_selector_kind`. Only element type - related methods (`label`, `filter`, `description`, `describe`) will be deprecated by adding `@deprecated` YARD tag (and probably adding `warn`).

> 1. Would you see this being implemented via changes to the xpath gem, or strictly in capybara.

XPath/css selectors needed for `:href` or `:name` are very simple so it doesn't make sense to extract them to xpath gem. If there would be complex enough selectors, probably I'll try to make a change in xpath gem.

> 1. If :type isn't checking elements tags isn't this opening users up to even more difficult to debug issues?

I believe `:element` shouldn't be used for checking element tags as:
1. L&F of HTML element can be significantly changed from standard.
2. It would complicate implementation (we have to merge it into css/xpath selectors)
3. I don't think an idea to merge a tag name into css/xpath selector is a good one. I wouldn't expect Capybara to do it. Probably it makes sense to merge it into selectors like `:id` but I would vote for selectors to be consistent here.
4. That would separate responsibilities of element type and selector.

I have been implementing this feature and there's an issue with behavior of `Capybara.add_selector` if selector/element type with that name was already registered. There are two options:
1. When it's invoked, replace existing Selector with Selector created from supplied block + replace ElementType with created from the supplied block
2. When it's invoked, replace existing Selector with Selector created from supplied block + instance_eval block in scope of existing ElementType

Option 1 will be fully compatible with existing behavior of `add_selector`. But in this case it would be impossible to add selector without not-deregistering element type. Users of 2.x versions will have to invoke `add_selector` prior to `register_element_type`. If `filter`, `label`, etc. will be removed in 3.0 from `Selector`, there will be no need to do anything with ElementType from Selector so there will be no this limitation.

Option 2 will break the following use case:

<S_CODE_TOKEN>

I would prefer option 1 as limitation will exist only until 3.0. Do you agree?

Also the option will be named `:element` as `:type` is already used by `:field` selector.
",abotalov,2016-04-07 00:34:22
1463,2015-01-26 19:01:47,"I have to think about this some more.  I don't understand why we would be deprecating anything for this change.   It seems to me that just adding support for the :type parameter as the class which results should be, and then adding some new predefined selectors (which really is a different issue than this one) produces the same outcome without massive changes, and still keeping the current flexibility for custom selectors?  

As far as calling add_selector twice for the same selector, I would expect it to completely replace the current selector (as I believe it currently does).  Maybe we need to add a Capybara.update_selector or something to allow for changing a selector, or update_selector_type if we really think people will want to be changing the returned element types of the default selectors - of course users could just do something like  Capybara::Selector.all(name).some_method_name = :new_type to change the returned element type too. 
",twalpole,2016-04-07 00:34:22
1463,2015-01-26 19:26:31,"> I don't understand why we would be deprecating anything for this change.

I want to give users ability to write:

<S_CODE_TOKEN>

To make it possible custom filters like `:with` should be part of ElementType, not Selector. Therefore, I'd like to remove this ability from Selector (in future) so it won't be duplicated in two places. If `:element` isn't supplied, then it's set to `@selector.name`.
",abotalov,2016-04-07 00:34:22
1463,2015-01-26 20:18:24,"So it seems like I didn't understand what you were suggesting in the first place - I don't think moving the ""selection"" of elements from the selector to element types is helpful, and seems like its going to end up with more duplication than before.  I think

<S_CODE_TOKEN>

is going to become highly confusing since with: will no longer have a standard meaning when used with the :id selector.  A user will now also have to add a new ElementType for ever selector type they add.  This seems to add layers of complexity for few if any benefits.  I get the desire for being able to change the type of the returned element, but I don't get what benefit the rest of these changes bring that couldn't just be done with a custom selector.  I'll go look at the PR you just pushed, but as of now I'm not leaning towards this.  If you really need to be able to call random methods on the element type couldn't that just be done with a filter  

<S_CODE_TOKEN>

or something - while still maintaining the current flexibility  (obviously call_on_element is a terrible name for the filter, but something along those lines)
",twalpole,2016-04-07 00:34:22
1463,2015-01-26 20:33:01,"I guess maybe my real issue with this is that this is really multiple issues that have been intertwined,  I think I read at least 3 things you're trying to change -
1.  Being able to return instances of a subclass of Element for given selectors
2. Being able to have sets of filters that can be specified for use with any selector (and hopefully allowing for a default set for any given selector)
3.  Add new selectors out of the box

Is that correct?
",twalpole,2016-04-07 00:34:22
1463,2015-01-26 23:00:40,"@abotalov  for # 2 in my list of what I think you're looking for - please take a look at the filter_set branch I just pushed - I think something along those lines would provide the functionality you're looking for without requiring deprecation of a bunch of things, although its just a first stab at it and I may need to spend a bit more time thinking things through
",twalpole,2016-04-07 00:34:22
1463,2015-03-22 10:04:13,"I haven't responded previously as I got some concerns whether this feature has a value at all.

I don't see much value in using `:type` without any wrapper. It's just some additional code and I would like to use it via some sugar placed on top of it (the sugar might be not a part of Capybara, though).

Consider this example (with sugar):

<S_CODE_TOKEN>

The fact that `field` and `have_field` take inconsistent parameters doesn't look consistent, unfortunately.

@twalpole Do you have any thoughts about it?
",abotalov,2016-04-07 00:34:22
1463,2015-04-07 20:28:59,"Would this solve my problem?

I want to show that the ""selected"" option for a select element is ""Extension"". With my current knowledge of Capybara, I cannot do this with simply `page.has_field?(""Key type"", with: ""Extension"")`, because the resultant ""match"" contains all options.... Not looking for the CSS for the one selected.
",onebree,2016-04-07 00:34:22
1463,2015-04-07 20:50:20,"@onebree Please ask how do I do things type questions on the mailing list as requested in the README -  or read the docs and look for has_select? with the :selected option
",twalpole,2016-04-07 00:34:22
1463,2015-04-07 21:19:38,"@twalpole thank you, that helps. I thought the item was a field.
",onebree,2016-04-07 00:34:22
1463,2016-04-07 00:34:17,"I added the reusable sets of filters as PR #1679 so thoughts about it can be added there.  I believe the rest of this was determined to probably not be useful so I'm closing it.  If it is still considered useful we can reopen
",twalpole,2016-04-07 00:34:22
1462,2014-12-30 10:21:25,"Everytime I run all rspec at first time, capybara tests get this error:
""Error compiling CSS asset when run all rspec at first time""
It will all pass at second time running all rspec.
If I run single capybara test, it always pass.

What direction should I find for solving this?
What should I do for solving this?

thanks.
![screen shot 2014-12-30 at 10 11 43 am](https://cloud.githubusercontent.com/assets/4341690/5577637/7b0849ee-9050-11e4-8203-ba11a615a721.png)
",crokobit,2015-01-14 18:39:01
1462,2015-01-14 18:20:36,"Did you find a solution for this -- I'm 99.9% sure this has nothing to do with capybara and is probably an issue with your versions of sprockets/sass/etc.
",twalpole,2015-01-14 18:39:01
1461,2014-12-30 10:15:29,"Everytime I run rspec first time, capybara tests get this error:
""Error compiling CSS asset when run all rspec at first time""
It will all pass at second time running all rspec.
If I run single capybara test, it always pass.

What direction should I go for solving this?

thanks.
",crokobit,2014-12-30 10:19:48
1461,2014-12-30 10:19:48,"![screen shot 2014-12-30 at 10 11 43 am](https://cloud.githubusercontent.com/assets/4341690/5577632/6ba597b8-9050-11e4-979d-d8d0529e7256.png)
",crokobit,2014-12-30 10:19:48
1460,2014-12-26 18:09:12,"Hi!

We currently use Capybara for testing navigation using links.  A typical use is

<S_CODE_TOKEN>

This works well most of the time, but it seems the assert + current_path does not wait until the page is loaded.

Searching for a solution, I have found suggestions to wait for some **_content**_ on the next page, but that is not what we want.  The content can change over time while in our case the paths are stable.

Is there a way to assert the current_path using the regular timeout?

If not, can it be added?

Here is our current implementation, free for all to use :smile: :

<S_CODE_TOKEN>

Is there a better way?
",donv,2015-08-25 20:41:36
1460,2014-12-26 19:20:46,"I wrote a gem (https://github.com/abotalov/waiting_rspec_matchers) for such purposes.

<S_CODE_TOKEN>
",abotalov,2015-08-25 20:41:36
1460,2014-12-27 11:16:12,"@abotalov Sounds good, but I am using MiniTest.  Is it usable with MiniTest?
",donv,2015-08-25 20:41:36
1460,2014-12-27 12:06:42,"@donv No. Maybe you can write similar extension yourself.
",abotalov,2015-08-25 20:41:36
1460,2015-01-14 18:26:21,"IIRC this has been mentioned before, and it was agreed we should have some sort of path matcher, however it was never decided what it needs to match. Issues with it are whether or not it needs to match query paramters, fragments, etc
",twalpole,2015-08-25 20:41:36
1460,2015-08-24 18:59:23,"Please look at PR #1567 and see if you think that would fit your needs
",twalpole,2015-08-25 20:41:36
1460,2015-08-25 20:41:36,"Fixed through PR #1567
",twalpole,2015-08-25 20:41:36
1460,2015-08-26 07:29:59,"Sorry for the late response.  This looks good to me :+1: 
",donv,2015-08-25 20:41:36
1459,2014-12-23 14:27:14,"When sending a special keys, like arrow keys (""up"", ""down"", ""left"", ""right"") there is a different syntax for different drivers

For the selenium's webdriver I use:

<S_CODE_TOKEN>

For the poltergeist:

<S_CODE_TOKEN>

The root of this problem is that Selenium keys differ from PhantomJS keys:
https://selenium.googlecode.com/svn/trunk/docs/api/rb/Selenium/WebDriver/Keys.html
https://github.com/ariya/phantomjs/blob/master/src/modules/webpage.js#L465

It would be nice if capybara has some mapping or restrictions for this, so that you can easily switch between different drivers.
",NameFILIP,2015-01-23 21:33:29
1459,2015-01-14 18:33:59,"@jferris @jonleighton @mhoran  - any thoughts on supporting a unified definition/mapping for special keys?
",twalpole,2015-01-23 21:33:29
1459,2015-01-14 18:45:56,"I'd be fine mapping a symbol or constant to a key press, like `send_keys(:down)` or `send_keys(Capybara::KEY::DOWN)`.
",jferris,2015-01-23 21:33:29
1459,2015-01-14 19:33:42,"@jferris Would you see this being handled in each driver, or having the drivers provide the mapping and #send_keys in their node classes - and capybara doing the translation in Capybara::Node::Element#send_keys ?
",twalpole,2015-01-23 21:33:29
1459,2015-01-14 19:56:45,"I think you'd need two mappings:
- The list of normalized key codes mapped to the list of driver-specific key codes
- The strategy for sending one or more key codes to a driver

I'm not sure how much added value there is in having the first mapping. Expecting the drivers to normalize the key codes seem okay to me, but as a driver author, I don't think it would be more difficult for me to implement one approach over the other, so I'm fine with either.
",jferris,2015-01-23 21:33:29
1459,2015-01-14 20:41:39,"Some my opinions:
1. `Capybara::Node::Element#send_keys` shouldn't map keys (like `:down`, `:shift`, etc.). Mapping should happen at driver side.
2. Constants like `Capybara::KEY::SHIFT` won't be useful for users. Symbols are better.
3. It makes sense to standardize to Selenium keys (http://www.rubydoc.info/gems/selenium-webdriver/Selenium/WebDriver/Keys) as they are documented in [draft spec](https://w3c.github.io/webdriver/webdriver-spec.html#widl-WebElement-sendKeys-void-DOMString-value).

@jferris Could you clarify what do you mean by `The strategy for sending one or more key codes to a driver`? Do you mean sending keys with pressed another key or something else?
",abotalov,2015-01-23 21:33:29
1459,2015-01-14 20:52:21,"> Could you clarify what do you mean by The strategy for sending one or more key codes to a driver? Do you mean sending keys with pressed another key or something else?

Sorry, by ""driver"" I meant ""native underlying implementation.""

Basically, each driver will need to implement `send_keys` no matter what. If `Capybara::Node::Element#send_keys` maps the keys, drivers will also need to implement `map_key` or something similar.
",jferris,2015-01-23 21:33:29
1459,2015-01-23 21:33:29,"Closing this -- discussion should move to PR #1472 
",twalpole,2015-01-23 21:33:29
1458,2014-12-21 21:28:34,,simi,2015-01-14 18:48:36
1458,2015-01-14 18:48:41,"thanks
",twalpole,2015-01-14 18:48:36
1457,2014-12-12 20:10:03,"Hello,

I was unsure if this is something incorporated within current Capybara version. I would like to see if there would be a nicer way to select radio buttons with dynamic ID ? 
e.g 
input class=""schedule_btn"" id=""button_332_2014-12-19T12:09:16-08:00"" name=""button[332]"" type=""radio"" value=""2014-12-19T12:09:16-08:00"" 

Wherein the value is something dynamic ? 
",heterodyned,2014-12-12 21:02:07
1457,2014-12-12 21:02:06,"Please ask questions about how to use Capybara in the mailing list, as requested in the beginning of the README
",twalpole,2014-12-12 21:02:07
1456,2014-12-12 18:34:53,"This one feature would save thousand and thousand of hours of developer time. See thread below. 

visit must come inside of an it block

describe 'target availability pie chart' do
    it “should load the page” do
    visit '/'
        expect(page).to have_content('blah’)  
    end
 end

I do that all the time myself. I do that so often I think it would be really great if there were an “it” method defined inside of the describe scope that just raised an error saying “you didn’t wrap your test inside of an ‘it’ block”

That feature alone would save thousand of hours in developer frustration on this one issue. 

-Jason

On Dec 12, 2014, at 11:58 AM, Nicola Adamchik nicolaa@gmail.com wrote:

GEMFILE:

gem 'rails', '4.1.1'

group :development, :test do
  gem 'rspec-rails', '3.0.1'
  gem 'capybara', '2.4.1'
  gem 'capybara-webkit'
end

spec_helper.rb
ENV[""RAILS_ENV""] ||= 'test'
require File.expand_path(""../../config/environment"", **FILE**)
require 'rspec/rails'
require 'capybara/rspec'
require 'capybara/rails'

RSpec.configure do |config|

  config.include Capybara::DSL

  config.infer_spec_type_from_file_location!
end

spec/features/target_dashboard_spec.rb
require 'spec_helper'

describe 'target dashboard', type: :feature do

  describe 'target availability pie chart' do
    visit '/'
    expect(page).to have_content('blah')
  end
end

---

> bundle exec rspec

undefined method `visit' for RSpec::ExampleGroups

What am i missing?
## 

You received this message because you are subscribed to the Google Groups ""Capybara"" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ruby-capybara+unsubscribe@googlegroups.com.
For more options, visit https://groups.google.com/d/optout.
## 

You received this message because you are subscribed to the Google Groups ""Capybara"" group.
To unsubscribe from this group and stop receiving emails from it, send an email to ruby-capybara+unsubscribe@googlegroups.com.
For more options, visit https://groups.google.com/d/optout.
",jasonfb,2015-01-14 18:36:39
1456,2015-01-14 18:36:39,"This seems more like an rspec issue than a capybara issue -- perhaps a suggestion for rspec to give a better error message when an undefined method is called on an instance of ExampleGroups would be helpful 
",twalpole,2015-01-14 18:36:39
1455,2014-12-12 14:24:45,,xaph,2014-12-25 12:45:12
1455,2014-12-25 12:45:16,"Thanks!
",jnicklas,2014-12-25 12:45:12
1454,2014-12-11 07:54:33,"We have a test which checks HTML5 form validations. We have a text area which uses `setCustomValidity` which adds the class 'user-error'.

When we write a test like so:

<S_CODE_TOKEN>

It fails incorrectly.

If immediately before the expect line, I add `binding.pry` and print `page.has_css? 'textarea[name=details].user-error'`, I get the correct result. I thought this might be a synchronisation issue, but no amount of `reload` or `sleep` seems to make the test pass. Any idea what is going wrong?
",ioquatix,2015-01-14 18:38:41
1454,2014-12-11 07:55:11,"@madleech perhaps this is of interest to you.
",ioquatix,2015-01-14 18:38:41
1454,2014-12-17 04:35:35,"What driver are you using?
",twalpole,2015-01-14 18:38:41
1454,2014-12-17 04:42:17,"selenium? with JavaScript enabled? Firefox?
",ioquatix,2015-01-14 18:38:41
1454,2014-12-17 17:31:31,"hmmm -- no clue then - can you produce a minimum example, with the same issue, I can use to debug it?
",twalpole,2015-01-14 18:38:41
1454,2014-12-17 18:10:29,"Ok - I'm pretty sure I know why this is happening -- Are you calling setCustomValidity from a change handler?  If so - the change event is not fired until the textarea loses focus so in your test the textarea is never losing focus, the change event is not firing, and therefore the class is not added.  When you add binding.pry your test stops and you click into the terminal window.  Clicking into the terminal window deactivates the firefox window which causes the textarea to lose focus and the change event to fire.  If you can click on some other element on the page, or other action that will cause focus to shift, it should work
",twalpole,2015-01-14 18:38:41
1454,2014-12-21 23:43:03,"@twalpole what is the correct way to loose focus?
",ioquatix,2015-01-14 18:38:41
1454,2015-01-14 18:38:41,"Sorry for the delay -- depends on your app and what you can do -- as I said previously - clicking on some other element on the page could do it, or any other action on the page that would cause the textarea to lose focus - there is no one correct way
",twalpole,2015-01-14 18:38:41
1453,2014-12-09 14:20:22,"This is on 2.4.1. Other keys work just fine. Providing :visible to other functions works fine as well.

<S_CODE_TOKEN>
",rbu,2014-12-09 20:26:54
1453,2014-12-09 20:26:54,"<S_CODE_TOKEN>
",abotalov,2014-12-09 20:26:54
1453,2014-12-09 20:28:27,"You see incorrect error message because of this - https://github.com/jnicklas/capybara/blob/2.4.1/lib/capybara/queries/text_query.rb#L52
",abotalov,2014-12-09 20:26:54
1453,2014-12-09 23:39:45,"As @abotalov points out - the error message is incorrect, however the error is correct -- visible is not a valid option key for has_text ---   Whether or not to only look at visible text can be changed through the type parameter as shown in the docs -   http://www.rubydoc.info/github/jnicklas/capybara/Capybara/Node/Matchers#has_text%3F-instance_method
",twalpole,2014-12-09 20:26:54
1453,2014-12-11 18:07:11,"@abotalov, Based on the code you linked, I do not understand why it is not a valid key:
https://github.com/jnicklas/capybara/blob/2.4.1/lib/capybara/query.rb#L7

However, this error message needs to be fixed at the least. How hard would it be to accept the :visible keyword and convert that to the :visible type though? I do not see a reason why this API would behave different from all other find methods.
",rbu,2014-12-09 20:26:54
1453,2015-07-15 08:13:41,"Ping! Any closure on this? I just stumbled about this again.
",dwt,2014-12-09 20:26:54
1453,2016-11-21 17:37:59,"I've just gotten bitten by this again. Is there a specific reason that you want to accept `has_text?('foo', visible: false)` just like you do with all other `has*?()` APIs? AFAIK it really stands out as being the only one of the bunch that doesn't follow this convention.",dwt,2014-12-09 20:26:54
1453,2016-11-21 17:49:26,"@dwt The `visible` option everywhere else has 5 valid values - 
true/:visible, false/:all, and :hidden -  The :hidden value cannot be implemented for has_text? so it uses a different API -- Any recent version of Capybara should raise an error if you try to use a `visible` option so I'm not really sure how you could get bitten by this again.  This may be changing when v3 releases but as of now it's the way it is.  Additionally checking that text is on a page but non-visible  is a bad code smell in test since it's testing for the presence of something a user could never see or interact with.",twalpole,2014-12-09 20:26:54
1452,2014-12-08 08:00:51,"Good day! If I use `selenium` webdriver (upd: and set `run_server = false`) then `rack` and `rack-test` gems are needless for me. But they're required. Let's make this optional? Thanks.
",kuraga,2014-12-08 18:17:42
1452,2014-12-08 18:17:42,"IIRC rack would still be needed since the app that capybara starts up is a rack app -  on top of that rack-test is a small gem that allows capybara to be functional out of the box.  Thanks for the suggestion but we won't be changing this.  
",twalpole,2014-12-08 18:17:42
1452,2014-12-08 18:19:51,"No since I set `run_server = false`. But thanks.

Well proposes about `rack` and `rack-test` are different... Because `rack` is for main testing technique but `rack-test` is just a default option...
",kuraga,2014-12-08 18:17:42
1451,2014-12-06 01:31:47,"Capybara gives a rather vague and unhelpful ""Unable to find field"" exception message if an expected form field is missing. Although, it may seem like a trivial issue, the real problem is that this error message masks the root cause of the underlying test/spec failure.  As such, this is a rather common exception due the fact that there are a variety of orthogonal circumstances in which the `Capybara::ElementNotFound` exception can be raised (for instance, maybe it's a 500/404 error message, a simple typo in either the view or the spec, or a different page is rendered than is expected, etc...). Since the root cause of the issue is almost always at a ""deeper level"" than Capybara, dispatching a more detailed exception description would go a long way in making failing specs easier to trace, debug, and maintain.

I'd propose a simple trace/helper printout of either the raw DOM html, or perhaps a list of the available DOM elements on the page (i.e. something like the printout on the `have_content` matcher). I also suppose there are two minor drawbacks: (1) increased coupling between the exception handling logic and the parsing service, and (2) perhaps a very slight performance overhead when this specific exception. However, I'd personally find this capability very helpful and would be happy to submit a PR if it's something that is thought to be useful.
",Aerlinger,2015-01-14 18:39:57
1451,2014-12-08 18:20:42,"I'm not convinced that printing out a list of potentially hundreds of dom elements is going to be helpful to anyone, but I'm open to being convinced otherwise
",twalpole,2015-01-14 18:39:57
1451,2015-01-14 18:40:11,"Closed due to lack of followup
",twalpole,2015-01-14 18:39:57
1450,2014-12-05 10:56:02,"I'm trying to find any button with the unavailable class set, but using the css-selector I seem to get a different response than with xpath. The odd thing is that it feels like there's some kind of cache lurking somewhere.

<S_CODE_TOKEN>

Ideas?
",kitofr,2014-12-08 20:24:03
1450,2014-12-08 18:22:30,"What driver are you using?
",twalpole,2014-12-08 20:24:03
1450,2014-12-08 19:55:58,"PhantomJS w/ poltergeist
",kitofr,2014-12-08 20:24:03
1450,2014-12-08 20:24:03,"The find call basically gets passed straight through to the driver, so this should probably be posted over on the poltergeist project
",twalpole,2014-12-08 20:24:03
1449,2014-12-03 16:27:14,"As per https://github.com/thoughtbot/capybara-webkit/issues/691#issuecomment-65437734, I would like to suggest a new API for downloading files using Capybara.

Currently, I use Selenium Firefox with specific Firefox profile settings, to download files from links, to a specific directory. However, I find that I have to swap between Webkit and Selenium too often, that I'd like to be able to use Capybara Webkit exclusively.

Is it possible as per @jferris comment to provide some form of an API from Capybara for downloading files?
",nritholtz,2015-01-14 18:40:53
1449,2014-12-08 18:28:11,"I'm not sure what sort of API we could provide for this - you click the link, if the link has the download attribute set, or has a filetype set to be downloaded by the browser it downloads it.  If you'd like to propose the API you would want for this we would consider it
",twalpole,2015-01-14 18:40:53
1449,2015-01-14 18:40:53,"Closed due to lack of response
",twalpole,2015-01-14 18:40:53
1449,2015-01-14 21:04:45,"> Currently, I use Selenium Firefox with specific Firefox profile settings, to download files from links, to a specific directory.

We should support not only Firefox driver. Not all Webdriver implementations have the possibility to autosave files. Also they have different APIs for it. So it's not a good idea to standardize this way to do file downloads at Capybara side.
",abotalov,2015-01-14 18:40:53
1448,2014-12-01 18:34:36,"Hello,

Capybara uses real clock to measure time which leads to races when clock is moved 1 hour ahead. This pull requests switches Capybara to use monotonic clock, which doesn't have such problems.

I've used a gem (that depends on hitimes) because supported Ruby includes 1.9.3 and monotonic clock is introduced only in Ruby 2.
",ledestin,2015-04-14 21:44:46
1448,2014-12-08 18:49:09,"Looking at the monotonic_times gem it doesnt seem to provide enough added benefit to justify including it rather than just using hitimes directly.   I need to read up on any platform issues that may be involved here, and it may just make more sense to use Process.clock_getTime directly when running on ruby 2.1+ 
",twalpole,2015-04-14 21:44:46
1448,2014-12-08 19:35:45,"Your call. I personally think that Process.clock_gettime(Process::CLOCK_MONOTONIC) is way too long to repeat more than a single time.
",ledestin,2015-04-14 21:44:46
1448,2015-04-14 21:44:46,"Closing in favor of the lesser dependencies (and admittedly lesser platform support) in PR #1503 
",twalpole,2015-04-14 21:44:46
1447,2014-11-30 00:24:35,"Specifically when doing a `ActiveRecord::Migration.maintain_test_schema!`

Raises:

<S_CODE_TOKEN>

This is ""not a rails issue"" because it's a monkey patch relying on rails internals. See: https://github.com/rails/rails/issues/17826

This change caused it to stop working: https://github.com/rails/rails/compare/v4.1.7.1...v4.1.8?diff=split&name=v4.1.8#diff-1452ba37bae4c4676b4288be7db09b8dR160

I'm not sure how to fix it just yet, so I'm just reporting it for now.
",aaronjensen,2015-12-01 23:14:01
1447,2014-12-03 18:58:19,"We are also running into this issue.  Any known workarounds?
",shedd,2015-12-01 23:14:01
1447,2014-12-04 01:25:42,"We moved to a much simpler monkey patch:

<S_CODE_TOKEN>

That seems to work fine. It proved to be a little bit more sensitive than our last version (because we were wrapping the connection with the connection_pool gem which reduced some of the contention) so we had to fix a few tests and improve our synchronization/connection sharing between our app and tests. I may blog about this at some point...
",aaronjensen,2015-12-01 23:14:01
1447,2014-12-07 18:43:37,"Thanks @aaronjensen!

I tried this out.  It seems to work on most of our specs, but on some, I hit this error:

<S_CODE_TOKEN>

Did you also run into the same issue?  When you said that you had to fix some tests, was this the issue that you saw?
",shedd,2015-12-01 23:14:01
1447,2014-12-07 19:16:05,"we're using mysql, what we saw was connection in use errors. what you might do is ensure that your spec is not accessing the db at the same time as your server (via ajax possibly). We have a somewhat sophisticated locking mechanism so we can do `pause_browser { User.first }` and rack middleware will prevent requests from happening. There's a blog post on it somewhere, I don't remember where. Its solution had some race condition problems. If you think this is what you're hitting let me know and I can share some of the stuff we have.
",aaronjensen,2015-12-01 23:14:01
1447,2015-01-06 21:46:45,"@aaronjensen that worked for me too--thanks!
",turboladen,2015-12-01 23:14:01
1447,2015-03-30 13:09:12,"Is `maintain_test_schema` is issue? Did you run into the same problem if you disabled/removed that option?
",onebree,2015-12-01 23:14:01
1447,2015-12-01 23:14:01,"I've removed the suggestion from the README, it's too problematic to be a reasonable suggestion for beginning users of Capybara
",twalpole,2015-12-01 23:14:01
1446,2014-11-29 15:25:47,"Couldn't find fancybox popup, raises an error

<S_CODE_TOKEN>

here is my rspec code 

<S_CODE_TOKEN>

here is my fancybox wrapper

<S_CODE_TOKEN>
",sunloverz,2014-12-03 06:35:47
1446,2015-11-10 22:17:43,"how did you resolve this?
",williscool,2014-12-03 06:35:47
1446,2015-11-10 23:06:21,"@williscool If you have questions ask them on the mailing list as requested in the README
",twalpole,2014-12-03 06:35:47
1445,2014-11-24 16:26:44,"Seeing this note would have saved me a lot of debugging time. Maybe there is a better fix, like killing the webserver in `reset_session!`, but this seems like an improvement as is.
",aripollak,2014-12-25 12:44:56
1445,2014-12-25 12:44:56,"This is only a problem if you reset your database before you reset Capybara. If you do this in the wrong order, you get race conditions. There are various threads about this. The suggested fix is not acceptable. The ThoughtBot blog promotes bad practices and you should not be following its advice.
",jnicklas,2014-12-25 12:44:56
1445,2014-12-25 16:55:01,"I am only resetting the database after Capybara is reset. The problem is that there could still be a request in progress in the WEBrick thread even after Capybara is reset, since Capybara is not doing anything about that.
",aripollak,2014-12-25 12:44:56
1444,2014-11-23 19:12:04,"https://github.com/jnicklas/capybara/commit/8ce6d4eb9dcf4cc6003106dffd38dd53411535ff#commitcomment-8688865
",GerryG,2015-04-14 19:46:22
1443,2014-11-21 20:23:10,"We primarily use :webkit for testing with cucumber.  With a recent change, we are using javascript on virtually every page and the use of `@javascript` everywhere is annoying at best, as we go through long test runs only to find yet another place where a new test was added but forgot the tag.  

To attempt to default this, I tried using an `Around` hook for the most control, but found that the `capybara/cucumber.rb` `Before` hook was calling `Capybara.use_default_driver` after I had set things up as expected.  To solve the order of execution issue, I took the code from that file for `Before '@javascript'` and added it to my own support file like:

<S_CODE_TOKEN>

Given my logging, I can see this combination with `@javascript`.  Here's a snip of the log:

<S_CODE_TOKEN>

Unfortunately, when I omit `@javascript`, here is the same log snippet:

<S_CODE_TOKEN>

The feature runs several steps in, but fails on 

<S_CODE_TOKEN>

The error is legitimate and the screenshot confirms the error.  Digging a bit into the server side, it finds a null value when it attempts to lookup the tenant, which is an entity seeded in the test background and cleaned up after by `database_cleaner`.  It seems to me that the way I'm setting it up still has problems, and at some point it needs the `rack_test` driver activated to find my tenant record.

I've searched both the Capybara codebase and Cucumber codebase for references to `@javascript`, and only found the code it `capybara/cucumber.rb`, which it appears by the logging that I have successfully overridden, but yet it still fails.

What else would be necessary to completely default the javascript driver to webkit without having to tag every scenario as `@javascript`?
",rosskevin,2014-11-21 20:57:40
1443,2014-11-21 20:44:25,"I think I found a lead on this in `cucumber-rails`, specifically [database.rb](https://github.com/cucumber/cucumber-rails/blob/master/lib/cucumber/rails/database.rb#L101) which is called by the [active_record hooks](https://github.com/cucumber/cucumber-rails/blob/master/lib/cucumber/rails/hooks/active_record.rb#L11)
",rosskevin,2014-11-21 20:57:40
1443,2014-11-21 20:57:40,"Found a relevant issue in `cucumber-rails`

https://github.com/cucumber/cucumber-rails/issues/257
",rosskevin,2014-11-21 20:57:40
1443,2014-11-21 21:03:32,"Capybara.default_driver = :webkit
DatabaseCleaner.strategy = :truncation

is all that should be required to have capybara default to using the webkit driver without needing to specify @javascript everywhere
In the future please ask how to questions in the mailing list as requested in the README
",twalpole,2014-11-21 20:57:40
1443,2014-11-21 21:37:12,"Thank you @twalpole.  It seems I was down a path with an older minor version locked `database_cleaner`.  I omitted some of my configuration going to a simpler version and it worked just fine.  Specifically, I was using:

<S_CODE_TOKEN>

Going back to simpler truncation with :except worked just fine.
",rosskevin,2014-11-21 20:57:40
1442,2014-11-20 01:51:58,"I think its a bit misleading to call it default_wait_time, as it tends to imply that is the wait time in place for every action.  Particularly with the removal of wait_until, and the implicit action of Capybara's matchers to keep retrying until it finds a match, or the default_wait_time is exceeded.  The current naming reads to me that there is a 2 second delay, then the matcher is tried once.  

Obviously this would be something to change in a big release and phase out with deprecation before another big release, but I do think adding 'max' makes the name better.

I won't be at all offended if you reject this idea out of hand.
",prpetten,2015-08-21 20:02:32
1442,2014-11-20 20:40:18,"We also have `using_wait_time` and `:wait` option. I agree that those names are confusing and I know people who were confused by them. Probably your suggestion is good as people are supposed to set `default_wait_time` in a single place.
",abotalov,2015-08-21 20:02:32
1442,2014-12-08 18:30:49,"I'm open to this change, and would be willing to consider a PR
",twalpole,2015-08-21 20:02:32
1442,2015-08-16 21:11:35,"Some people visiting the repo may think that `master` reflects the current gem version. For instance, the `default_max_wait_time` section of README might confuse new capybara users. :crying_cat_face: 
",dhulihan,2015-08-21 20:02:32
1442,2015-08-16 21:15:20,"@dhulihan I'm a baby Capybara and it confused me D:
",michaelmagistro,2015-08-21 20:02:32
1442,2015-08-21 21:10:58,"@dhulihan Same here. That is confusing. May be better to keep the next version in a separate branch, and have master always reflect the current gem verion.
",adsteel,2015-08-21 20:02:32
1442,2015-08-21 21:47:35,"@adsteel That would be counter to the way pretty much every other project organizes itself.  If you want the README for a specific version - look at that versions README, or read the docs for the version you're using on rdoc.info
",twalpole,2015-08-21 20:02:32
1442,2016-10-14 22:11:43,"it's really easy to forget to check the branch list. It's common to have the master branch be stable and use other branches for subsequent development. I think a note in the readme really would help beginners; some other projects are doing this as well. 
",MaxPleaner,2015-08-21 20:02:32
1442,2016-10-15 00:11:27,"@MaxPleaner That may be common for an app, but it's not for most gems.  A PR with a note in the readme would be considered as long as it is worded/implemented in a way I don't have to modify/update it for every release
",twalpole,2015-08-21 20:02:32
1441,2014-11-12 16:30:21,"Using angular/coffee, I have two concurrent ajax requests that are bound together within a promise. ex:

<S_CODE_TOKEN>

When testing the redirection success within capybara the output is utterly broken:

I got nothing at all

<S_CODE_TOKEN>

instead of something like

<S_CODE_TOKEN>

My test looks like the following

<S_CODE_TOKEN>

When removing one of the `put`/`ajax` in the `coffee`, it works fine again. That let me think that capybara doesn't handle properly concurrent ajax request.

Any ideas?
",vmeyet,2014-11-28 18:47:53
1441,2014-11-12 16:37:35,"By the way the driver used during those tests is the Firefox-driver
",vmeyet,2014-11-28 18:47:53
1441,2014-11-20 00:41:41,"Do the requests depend on each other running at exactly the same time? There's only one WEBrick webserver thread handling requests from the browser, so any requests will be handled serially.
",aripollak,2014-11-28 18:47:53
1441,2014-11-21 16:33:13,"That shouldn't be an issue, I mean they are independent query but we use a promise to bound their response. (if both ajax are HTTP200 then success if any (or all) fail then error).

What is weird is that it looks like the test are still running (taking time to give the terminal back) just not showing anything on stdout.

In particular not the stack-trace when the tests are failing.
",vmeyet,2014-11-28 18:47:53
1441,2014-11-21 18:06:13,"Concurrent requests shouldn't affect anything (unless they're causing a deadlock) - is it possible Raven is swallowing whatever output should be showing up?  What do your logs show as far as receiving/processing the requests?  Also, I would expect the test as written to fail since

<S_CODE_TOKEN>

doesn't wait for the current_path to change, so if the ajax requests take any time to complete the test will immediately fail after clicking the button
",twalpole,2014-11-28 18:47:53
1441,2014-11-28 18:47:53,"closing due to lack of response
",twalpole,2014-11-28 18:47:53
1441,2014-12-01 09:14:40,"Hey sorry about the delay!

The issue on our side was resolved last week, since we didn't change anything for the lib I guess this wasn't capybara related. I'm not sure what did the trick though.

To answer your request:
1. Indeed the `expect(current_path).to eq(""/users/success"")` would fail right away, But this was most likely not the source of bug, since this was simplified code (in the actual code there is an auto-waiting finder `find '.account-creation'`)
2. This might be Raven swallowing the output. However this was consistently failing on that one test and only that one. (other failures were just fine). So still kind of strange.

Thanks for closing this, and sorry again for the delay.
",vmeyet,2014-11-28 18:47:53
1440,2014-11-10 00:54:57,"How do you click on a link with a nbsp; in it?  Below is some code that finds the link and prints it, but cannot click on it.

<S_CODE_TOKEN>

Thanks.
",ashanbrown,2014-11-10 03:13:44
1440,2014-11-10 03:13:44,"Please ask ""how to"" questions on the mailing list as requested in the README, however 

<S_CODE_TOKEN>

should do what you're trying to do
",twalpole,2014-11-10 03:13:44
1440,2014-11-10 16:38:45,"I was sort of assuming the answer was going to be something unreadable, so I do feel like this is an issue in that it was behavior I was not expecting nor seemed to be documented or found as an existing issue (the places I usually look for explanations).  Is there a design or performance explanation for fact that I can find a link with matching text but cannot do click_on using the same text?  I can post to the email list if you do think that's a better place for this.  Thanks.
",ashanbrown,2014-11-10 03:13:44
1439,2014-11-07 14:19:06,"Should fix #1410

All elements are considered reloadable. `#allow_reload!` may be removed from `Element` and `Simple` in next major version as it's not needed with this PR.

One of moments to discuss - currently behavior may be unexpected e.g. in the following case:

<S_CODE_TOKEN>

But I don't know at the moment a good solution for it. The problem is that element of enumerable doesn't know the way using which it was got from that enumerable.
",abotalov,2015-01-14 18:51:07
1439,2014-12-08 18:51:40,"Sorry its taken so long for me to look at this -- work and life have been in the way.    The potential unexpected behavior around multiple results is concerning to me, and is most likely why all results weren't made reloadable in the first place -  I think this needs a lot more thought before inclusion.
",twalpole,2015-01-14 18:51:07
1439,2014-12-25 12:59:19,"This was precisely why I didn't make `first` and `all` reloadable in the first place, yes. You cannot be sure that the list has the same number of elements in the same order anymore, so you might end up interacting with something in a completely different area of the page. This is very unsafe and probably not at all what the user expects.

Suppose you have a list of messages where messages appear at the **top**. Now you do this:

<S_CODE_TOKEN>

Will this test succeed? It depends on the implementation. That's pretty bad. Essentially the behaviour of this test is completely undefined. I think it should be fairly obvious why: `hello` moves as the new message is added. Reloading it, even if we preserve the index of it, makes absolutely no sense. We'll end up with a handle to a different message.

Huge :-1: from me. I spent a lot of time thinking about this stuff when I designed the reloading/waiting system, and I still am very sure that reloading these elements is a very flawed idea, and will lead people to writing less stable tests like the one above. The above test could have easily been written in idiomatic Capybara style and it would have worked just fine:

<S_CODE_TOKEN>
",jnicklas,2015-01-14 18:51:07
1439,2015-01-14 18:51:07,"Closing due to @jnicklas huge :-1: and my misgivings about the potential unexpected behavior
",twalpole,2015-01-14 18:51:07
1438,2014-11-06 20:37:32,"There is a `Capybara.save_and_open_page_path` variable which works if you don't specify a screenshot's filename (`page.save_screenshot`).
But if you call it `page.save_screenshot('somename.png')` it is ignored. It is good when the path is full, but when it's relative that variable is ignored.

For example,

<S_CODE_TOKEN>

The save_screenshot's implementation: https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L658
",NameFILIP,2016-04-05 18:17:50
1438,2015-01-17 03:07:30,"Maybe renaming to `default_save_and_open_page_path` would make it clearer? I'm not sure switching the behaviour here would be any more intuitive.
",xaviershay,2016-04-05 18:17:50
1438,2015-01-17 07:11:46,"Why not? I usually don't want to pollute my project directory with a bunch of screenshot files. I prefer a special folder (`tmp` for example) where all the generated files are saved. To achieve this, I set the `Capybara.save_and_open_page_path = 'tmp'`. If you don't need such behaviour - just don't set the variable.

Right now, I have to make sure there is a correct prefix for all `page.save_screenshot('tmp/somename.png')`. That's a little bit annoying.
",NameFILIP,2016-04-05 18:17:50
1438,2016-04-05 18:17:30,"PR #1676 changes this behavior and makes it more sane
",twalpole,2016-04-05 18:17:50
1437,2014-11-04 17:09:36,"The issue is basically described in subject. I don't really know if this problem is RSpec problem or Capybara one. I haven't found anything on the web about this issue, diving into the Capybara code didn't help me either.
I'm using the capybara-webkit driver if it helps.
",vittorius,2014-11-04 17:29:40
1437,2014-11-04 17:29:40,"Please read the README, specifically the top section and the section on using with Spec -  If that doesn't solve your issue then post ""how to use capybara"" questions on the mailing list as requested.
",twalpole,2014-11-04 17:29:40
1436,2014-11-04 12:18:48,"https://groups.google.com/forum/#!topic/ruby-capybara/iMnVcQlMY6c
",abondarev,2014-11-04 14:39:24
1435,2014-11-03 15:00:46,"Hello! I've found that across many test suites a lot of extra time is spent when synchronized methods are used improperly. For example, you want to test if a selector is on the page in order to take a different action. Consider:

<S_CODE_TOKEN>

If the person is signed in, it signs them out quickly. However, if they are signed out, this will wait the full Capybara wait time before failing the if.

This is a newbie mistake, and I was hoping to add some warnings to it as a potential aid.

The relevant line is here:

https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/base.rb#L89

I am very happy to implement this feature with tests. I am looking for guidance on the following things:
1. Would this be accepted?
2. Is there a way you would like it implemented?

Thanks!
- @ngauthier
",ngauthier,2014-11-05 21:05:25
1435,2014-11-03 19:55:38,"Do you want the warning to be printed for all synchronized methods or only for some subset of them?
",abotalov,2014-11-05 21:05:25
1435,2014-11-03 20:00:23,"I would like a warning whenever the timeout is hit, regardless of the caller.

Also, I think an easy way to achieve this would be to wrap the exception in something like Capybara::TimeoutException so that it is not caught by the caller since it would not be a Capybara::ElementNotFound subclass.
",ngauthier,2014-11-05 21:05:25
1435,2014-11-03 20:01:15,"I don't understand how this would even work.  Printing out a warning everytime one of the synchronized methods is called would just add a ton of spam output to everyones tests.  I also don't understand why you would have tests that do different things based on the state of the user when the whole point of tests is to execute a deterministic repeatable thing, so the state of the user should be known
",twalpole,2014-11-05 21:05:25
1435,2014-11-03 20:02:17,"I think you misunderstand.

I only want a warning when the maximum timeout is reached. Meaning capybara could not complete the requested action.
",ngauthier,2014-11-05 21:05:25
1435,2014-11-03 20:15:00,"The use of has_content? (as in your example) is not always an error, especially when dealing with modern web apps and parts of pages being loaded via ajax after initial load etc. So outputting a warning everytime it doesn't match seems like a bad idea.   If you want to submit a PR that updates the documentation to make it clear that the method will wait a specified time for the condition to become true, that would be accepted
",twalpole,2014-11-05 21:05:25
1435,2014-11-03 20:34:24,"I don't think you understand the issue. Let's say that my application has two states: on and off. When the app is on, there's text that says ""ON"" in the `#header`. When it's off, it says `OFF` in the `#header`.

I may have a method like this to assert the app is on:

<S_CODE_TOKEN>

And likewise for off:

<S_CODE_TOKEN>

I would not want any logging in this case. Now consider a new programmer, who writes this helper method:

<S_CODE_TOKEN>

When I run this method, two things could happen:
1. The app is on, and this method returns true immediately
2. The app is off, and this method waits for 15 seconds (or whatever capybara's timeout is) then returns false

The new programmer thinks their method works fine. They may or may not notice the 15 second delay to evaluate their method.

As experienced capybara users, we know the method should be written something like:

<S_CODE_TOKEN>

This will be fast in both cases.

So, what I am proposing is some kind of notification for the second case: when a programmer erroneously uses a synchronized method the wrong way, such that it reaches the timeout. Something simple like:

<S_CODE_TOKEN>

Personally, I consider any time the max timeout is reached to be an error, even if the test passes, because I should use a different capybara method.

Does this make sense? Please let me know if you have questions.
",ngauthier,2014-11-05 21:05:25
1435,2014-11-04 05:39:25,"I believe Capybara way is something like:

<S_CODE_TOKEN>

, not `assert page.has_xxx?`
",abotalov,2014-11-05 21:05:25
1435,2014-11-04 13:15:29,"Yes, @abotalov, this is my point. There is a capybara way that is better, but _there is no warning when you do it the wrong way_. Capybara will still work properly with `asset page.has_xxx?` but it will sleep for the full wait time.

All I want to do is add a warning when you reach the full timeout. This can only happen in two cases:
1. You are developing and you got the step wrong, so then you'll get an ElementNotFound anyways
2. You used a `has_xxx?` when you should have used a `has_no_xxx`

Right now there is no indication that the second one was done. I want a warning when someone does the second one.

Would it help if I submitted a PR and a pair of test cases?
",ngauthier,2014-11-05 21:05:25
1435,2014-11-04 17:34:46,"The problem with this is you are saying that every use of ""has_xxx?"" that returns false is an error and should therefore print a warning - it isn't and I don't consider adding log spam to the output of people ""correctly"" using those methods to be worth it.  
",twalpole,2014-11-05 21:05:25
1435,2014-11-04 17:45:09,"Also the statement ""Personally, I consider any time the max timeout is reached to be an error, even if the test passes, because I should use a different capybara method.""  illustrates the issue.  You believe it to be an error (not everyone does) and you should only be using a different capybara method if you want different behavior --  i.e.  if you want a true/false response and you want to wait and see if the element shows up on the page you should be using the has_xxx? methods.   If you do not want it to wait you should be using other methods, or passing a wait time of 0.  A very important thing to remember here is that #visit does not guarantee that the page is fully loaded when it returns, just as clicking a link returns before the page referenced by the link is loaded, so using methods that don't wait will at some point lead to hard to understand test failures.
",twalpole,2014-11-05 21:05:25
1435,2014-11-04 20:13:09,"""f you want a true/false response and you want to wait and see if the element shows up on the page you should be using the has_xxx? methods. If you do not want it to wait you should be using other methods, or passing a wait time of 0""

So, you agree, that in general you should use ""has_"" when you want the item on the page and ""has_no_"" when you don't want it on the page, but you are also saying it's not an error to use ""has_"" to check if something is not on the page?

I understand many people may be using the methods in reverse and not consider it a problem.

We also would not have to enable this be default, it could be an option.

At the _very_ least, would you be willing to consider a refactoring of synchronize such that a monkeypatch is possible?
",ngauthier,2014-11-05 21:05:25
1435,2014-11-04 21:00:45,"I agree that if you expect an item on the page (and want the system to wait to see if it shows up) then you should be using the has_xxx? methods.  If on the other hand you don't expect an item on the page (and want to wait for it to disappear if it's there at first) then you should use has_no_xxx? methods. The case  where I click a link - and then want to do something based on whats on the page.  So taking your example  

<S_CODE_TOKEN>

In that case I'm assuming its important for ""Sign out"" to be clicked if it is on the page and therefore it will wait for the link to be followed, page to load, ajax to run (etc, up to the time limit) see if ""Sign out"" appears on the page and if it does click it -  there is nothing wrong with that behavior (other than not understanding why one would have a conditional in a test that is deterministic).  If one did not want the waiting behavior then one should not be using has_content?  or should be using has_content?(""Sign out"", wait: 0).  

I'm willing to look at any pull requests, but it may be easier for you to just wrap synchronize, and in that wrapper  wrap the block passed through to allow you to do what you want in your code
",twalpole,2014-11-05 21:05:25
1435,2014-11-05 13:22:51,"@twalpole So, I think there may be some miscommunication on this issue in general.

I've been using capybara for almost 5 years now, and I have met Jonas and talked to him about the framework. I am no stranger to capybara, and I know how to use it.

I think we all agree that the code I posted is not the optimal solution. _That is my point_.

The point of this issue is to help new (and experienced!) programmers when they accidentally use a capybara method that times out. I am happy to make this warning off by default, and something you can enable.

I would love to implement it as part of capybara, but I am also perfectly happy to do it as an external library.

The challenge here is that the `if` statement that checks for the timeout is so deep in `synchronize` that a monkey patch would not be ideal.

I like the idea of wrapping synchronize, but I am not sure how to do this, as all I would see is the exception being raised, but there is no indication that the exception raised was due to a timeout. The best I can come up with is wrapping synchronize with redundant timeout logic that is slightly less than the real timeout, and raising a different exception.

I just want to reiterate that I understand there is a better way to write the capybara code! My goal is to help people not make mistakes by issuing warnings when they have used a finder inappropriately.

Thanks for the feedback and discussion so far.
",ngauthier,2014-11-05 21:05:25
1435,2014-11-05 13:26:54,"Here's a rough idea of what I would do:

<S_CODE_TOKEN>

OR, we could extract a method:

<S_CODE_TOKEN>

This doesn't change behavior, but now a library can monkeypatch `check_timeout`.

Make sense?
",ngauthier,2014-11-05 21:05:25
1435,2014-11-05 13:29:42,"This would be my try at a wrapped version that could be `:alias_method_chain`ed:

<S_CODE_TOKEN>
",ngauthier,2014-11-05 21:05:25
1435,2014-11-05 17:24:14,"@ngauthier ""The point of this issue is to help new (and experienced!) programmers when they accidentally use a capybara method that times out. I am happy to make this warning off by default, and something you can enable.""   -  If the fact that the capybara method times out is an error then the programmer should be using a method that errors instead of one that returns true/false - outputting warnings for every instance where synchronize times out will just add a ton of spam to the output of anyone validly using the has_xxx? or has_no_xxx? methods, as well as potentially confusing people whose tests are failing, since they will now see  ,   ""Warning Slow finder!"" and ""Could not find ...""  and assume they just need to increase their wait times, when there is actually something wrong with their app.  Throwing warnings on methods that are doing what they are supposed to do in case someone has used them ""incorrectly"" just doesn't seem like a good idea to me.

For the wrapper version, without thinking about it too much, I don't think the buffer time is required because your wrapper will always be called before the normal capybara so your start_time will always be <= to the capybara stored one, and the rescue will get called after capybaras so Time.now will always be >= the the capybara used one, so the condition should always be true if capybaras comparison was also true.   That being said - iirc, the only way for Capybara::ElementNotFound to be returned from synchronize is if the timeout occurs, so I don't think you really need the check anyway.  Something along the lines of

<S_CODE_TOKEN>

would probably work
",twalpole,2014-11-05 21:05:25
1435,2014-11-05 18:01:10,"I guess I just disagree that a call to `has_xxx` that hits the timeout is a valid use. I am strict and would not want the timeout hit in any scenario.

I will try the above monkey patch and see if it works for me. Although the exception will be raised if it's a non-waiting driver and also if it was passed in the options, so I think I still need the timeout check.

Thanks for the feedback.
",ngauthier,2014-11-05 21:05:25
1435,2014-11-05 18:42:12,"@twalpole Could you give an example of a valid use of `has_x?` where timeout may be reached?
",abotalov,2014-11-05 21:05:25
1435,2014-11-05 19:12:14,"@abotalov  The very first post here is a valid use case if you want to test if a selector shows up on the page (within a set timeframe) in order to take a different action.  I grant that it should not be a common use case in well written tests, but I can see it sometimes being useful in libraries of test methods, etc.  If you're saying there is no valid use where timeout may be reached, then you're saying we should just remove the has_x? methods - and everyone can just always use the assert_x methods.   The has_x? methods specifically return true/false as opposed to the assert_x methods - they are methods with specifically different behavior, and the one whose behavior is wanted is the one that should be used.  As I said earlier, documentation updates may make the behaviors clearer to people, but adding warnings to a method that is doing exactly what it is written to do makes no sense to me.
",twalpole,2014-11-05 21:05:25
1435,2014-11-05 19:19:48,"@ngauthier The only driver I know of that doesn't wait is racktest, which already overrides synchronize so that wouldn't be an issue - If there are others a check on driver.wait?  is simple enough.  If passed in errors really are a concern you could also check if errors does not contain Capybara::ElementNotFound and not log if that is true.  You really don't need the timing info.
",twalpole,2014-11-05 21:05:25
1435,2014-11-05 20:36:31,"I went through one of my test suites and also found some usages of `has_x?` methods. They are primarily used in methods where I care about achieving some result and don't care about the way how that result was achieved.

Also it's used in situation like this: there is a set of 5 pages. The app displays this set of pages to a user in a random order. And user does different actions depending on which page was now shown to him. So it's natural to have something like:

<S_CODE_TOKEN>
",abotalov,2014-11-05 21:05:25
1435,2014-11-05 20:50:00,"I made a gem here:

https://github.com/ngauthier/capybara-slow_finder_errors

You simply include the gem and it raises an error on a timeout. You may want to just include from time to time to check on the suite, or you may leave it in all the time to not allow timeouts.

While this is a solution, I do think a capybara warning (not an exception) that can be disabled (or is disabled by default) would be useful to those who think capybara is slow.
",ngauthier,2014-11-05 21:05:25
1435,2014-11-05 21:05:20,"@ngauthier ""I do think a capybara warning (not an exception) that can be disabled (or is disabled by default) would be useful to those who think capybara is slow""  - we're just going to have to disagree on this.

Also your suggestion in the new gem that 

<S_CODE_TOKEN>

is incorrect and

<S_CODE_TOKEN>

is correct, is highly misleading and potentially dangerous for new users.  Those two statements test two very different things.   The first tests that the text is not on and doesn't show up on the page within a time period(useful after triggering an ajax request for instance) - the second tests that the text disappears from the page within a time period (or wasn't there to begin with).  These are two VERY different things, and one is not more or less correct than the other, depending on what they are testing for.   Can they be sped up - yes, by looking for other things that would definitely be on the page after the ajax request and then checking inside them, but that makes the test more complicated to read and also more brittle.  Is that speed up worth the more complicated/brittle tests - maybe, depends on the user, size of the test suite, number of times you're doing that test, etc, etc.
",twalpole,2014-11-05 21:05:25
1435,2014-11-05 21:11:39,"Yes I agree they are different based on their behavior, but to accomplish the ""Is X not on the page"" task in it's simplest form one is better than the other. There's certainly subtlety here in the wait that the timeouts work.

I also agree that it is an optimization, and optimizations usually have tradeoffs in readability and simplicity.

For me, on my most recent project, we went from a 14 minute test suite to 2:30 by replacing all of these calls that reach timeouts. That's certainly sufficient for me to make the optimization.

Thanks again for the feedback. I believe we've reached a consensus on this issue.
",ngauthier,2014-11-05 21:05:25
1435,2014-11-27 14:36:55,"@ngauthier -  a very useful gem which made my test suite 9% faster for 20 minutes of painless work. I've used RSpec for 2 years or more and wasn't aware because the problem was unknown. 
",notapatch,2014-11-05 21:05:25
1435,2014-12-17 03:10:42,"I just came across this thread after we started using @ngauthier's gem. I didn't know @ngauthier tried to get this included upstream before publishing a gem. Kudos to you man for the effort.

I just wanted to add my voice to the chorus that my team finds this information very useful. @twalpole you have used the phrase ""ton of spam"" multiple times in this conversation, and I (a user of this library) totally disagree that this is qualified as ""spam"". I **want** to see this information.

I agree with @ngauthier and his statement ""I am strict and would not want the timeout hit in any scenario.""

The root cause is that these two statements:

<S_CODE_TOKEN>

look extremely similar to the developer writing the code but exhibit very different behavior. This is at odds with every rspec/minitest/testunit assertion I've ever used. I find it analogous to:

<S_CODE_TOKEN>

I fully appreciate that the wait is a user convenience so that we don't have manage asynchronous waits manually. However there is no way with the current capybara codebase for a user to even audit/evaluate their test suite in order to find these timing hotspots.

> ... they are methods with specifically different behavior, and the one whose behavior is wanted is the one that should be used. As I said earlier, documentation updates may make the behaviors clearer to people, but adding warnings to a method that is doing exactly what it is written to do makes no sense to me.
> Also your suggestion in the new gem that ... is incorrect and ... is correct, is highly misleading and potentially dangerous for new users. Those two statements test two very different things. 

I think the problem here is that these methods are stretching the definition of uniformity. These are two methods that behave quite differently but look very similar. Because of that, they are also traps for the principle of least astonishment when they are written as well as read without running the code or without expert-level context. I don't agree that updating documentation is the best solution here.

In my opinion these two options are more appropriate: 
- Change the method names so that it's abundantly clear that they behave differently when they are used
- Allow an optional way to audit incorrect uses of the method. It's a real bummer that this strategy has to be maintained as an external monkey patch.
",zmoazeni,2014-11-05 21:05:25
1435,2014-12-17 04:32:30,"@zmoazeni  -  your statement ""Allow an optional way to audit incorrect uses of the method"" is the real issue here.  There is no way to know which are ""incorrect"" uses and which are the use the developer intended.  The developer has to have some knowledge about what they want to test for, and what they are actually testing for.  
  Your ""analogous"" example really isn't because we're not taking an existing matcher and secretly adding waiting behavior to it.  There are two matchers --  has_content?  and has_no_content?  (actually just aliases of has_text? and has_no_text?) which will each wait a specified amount of time for the content to appear or disappear from the page.  
1. If you want to check that content is currently on the page or will appear on the page then you want assert page.has_content?  
2. if you want to check that content is not currently on the page or will disappear from the page then you want assert page.has_no_content? 
3. if you want to check that information is not on the page and does not appear on the page within a given time then you can use refute page.has_content?
4. if you want to check information is on the page and does not disappear within a given time then you can use refute page.has_no_content?

Each of those uses is equally valid, they are just testing for different things.

As nick stated, we've reached a consensus on this issue, which is if you feel you never want to test for the behaviors in 3 and 4, then feel free to include nicks gem.
",twalpole,2014-11-05 21:05:25
1434,2014-10-29 23:00:46,"# next() finds the next sibling node of the current node.
# previous() finds the first previous element of the current node.

Specs are passing.
",neilma,2015-01-14 18:51:52
1434,2014-11-05 22:08:18,"Looks like the error has nothing to do with my commit...
",neilma,2015-01-14 18:51:52
1434,2014-11-05 22:57:05,"I'm confused by the naming of these since I would assume them to be complementary - but they appear  not to be.  Also what is your use case for these methods?  Also your tests don't actually check that the passed tag is used for anything
",twalpole,2015-01-14 18:51:52
1434,2014-11-05 23:09:35,"@twalpole thanks for the comment, one of the use cases would be a user's found an element and then tries to find the previous or next element's text in relative to the current element.
",neilma,2015-01-14 18:51:52
1434,2014-12-25 13:02:15,"IMO this isn't that useful in Capybara. Capybara's tagline is:

> Capybara helps you test web applications by simulating how a real user would interact with your app. 

A real user would never care if two elements are adjacent to each other.
",jnicklas,2015-01-14 18:51:52
1433,2014-10-29 13:01:16," HTML code for Issue Slip:

<%= simple_nested_form_for @issue_slip do |f| %>
  <%= f.error_messages %>

  <p>
  <%= f.hidden_field :user_id, :value => current_user.id %>
  <b>From Store:</b></br>

<%= f.label :store_location_id %>
   <% if !current_user.store_location_id? %>
    <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, {:prompt => ""Select Store""}, :style => 'width:205px;' %><br />
  <% else %>
  <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, :value => current_user.store_location_id %><br/>
  <% end %>
 <b>Delivery To:</b></br>
<% if @count == nil %> 

<div class = ""shop_floors"">
<%= f.label :shop_floor_id %>
<%= f.collection_select :shop_floor_id, ShopFloor.all,:id,:name, {:prompt => ""-Select a Shopfloor""}, :style=>'width:150px;'%></div><br/>
<% else %>
<strong><%= f.label :shop_floor_id %>:<%= @issue_slip.shop_floor.name %></strong><br /><% end %>
<div class =""date"">
 <%= f.label :date, ""Date"" %>
 <%= f.datepicker :date, :dateFormat => 'dd MM, yy',  :showOn => ""both"", :buttonImage => ""/assets/calendar.gif"", :buttonImageOnly => true, :changeMonth => true, :changeYear => true , :size =>20 %><br/></div>
<%= f.label :project_id %>
<%= f.text_field :project_id , :size => 20 %><br />
<%= f.label :employee_id, ""Issued. By"" %>
<% if !current_user.employee_id? %>
<%= f.collection_select :employee_id, Employee.all,:id,:name, {:prompt => ""Select Employee""}, :style => 'width:205px;' %><br />
 <% else %>
 <%= f.collection_select :employee_id, Employee.find_all_by_user_id(current_user.id), :id, :name %><br/>
 <% end %>
<%= f.input :remarks, :label => 'Remarks', :input_html => { :size => 20} %><br/>
 <%= f.label :bom_quantity %>
 <%= f.text_field :bom_quantity, :size=> 20, :value => number_with_precision(f.object.bom_quantity , :precision => 3) %><br />
 <div class = ""cust_order"">
<%= f.label :customer_order_id %>
<%= f.collection_select :customer_order_id , CustomerPendingOrder.all, :id,:id, :prompt => ""Select Customer Order"" %></div> <br />
<div class = ""bom"">
<%= f.label :bill_of_material_id %>
<%= f.collection_select :bill_of_material_id, BillOfMaterial.all, :id, :title , :prompt => ""Select a BOM"", :style => 'width:205px;' %></div>
<div class=""load_bom""><%= f.submit ""Load BOM"" %></div> <br/>  
 <hr>
  <%= f.fields_for :issue_slip_line_items do |builder| %>
  <%= render 'issue_slip_line_item_fields', :f => builder %>
   <%end%>
 <p><%= f.link_to_add ""Add Product"", :issue_slip_line_items %> </p>   
<p><%= f.submit data: {:disable_with=>@submit_tag_label}%><div class=""load_preview_issue_slip""><%= f.submit ""preview"", :style => 'width:130px;', data: {:disable_with=>""loading preview...""} %></div></p>
  <% end %> 
</p>

Issue slip line item:
 
<%= f.link_to_remove ""Remove Product""%><br/>
<div class =""product"">
  <%= f.association :product, :prompt =>""Select Product"",  input_html: {data:{prices: prices}}, :collection => Product.in_stock %> </div>
        <%= image_tag :image , :class => ""prodimage""%>
<div class = ""productid"">
 <%= f.hidden_field :product_id, :class=>""productid"" %></div>
<br/>
<div class =""price""><%= f.label :price %><%= f.text_field :price, :size=>20, :value => number_with_precision(f.object.price, :precision => 2)%> </div><br/>
<div class = ""qty"">  
<%= f.label :quantity, ""Quantity""%>
<%= f.text_field :quantity, :size=>20 , :value => number_with_precision(f.object.quantity, :precision => 3)%></div><br/>
 <%= f.label :amount %>
 <%= f.text_field :amount, :size=>20,:class =>""amt"", :value => number_with_precision(f.object.amount, :precision => 2) %><br/>
<!--%= f.label :customs_duty, ""Custom Duty""%-->
 <!--%= f.text_field :customs_duty, :size=>20 %-->
</div>

 <hr/> 

test case for issue slip:

it ""issue slips test"", :js => true do
    click_link 'New Issue Slip'
    select('Inuit HAL', :from => 'Store location')
    expect{ page.should have_content 'New Issue Slip'}
    expect{ page.should have_content 'From Store'}
    expect{ page.should have_content 'Delivery To'}
    select('sample shopfloor', :from => 'Shop floor')
    expect{ page.should have_content 'Shop floor '}
    fill_in ""Date"", :with => ""06 October, 2014""
    fill_in ""Project"", :with => ""1993""
    select('Sample Employee', :from => 'Issued. By')
    fill_in ""Remarks"", :with => ""There is no remarks to mention""
    fill_in ""Bom quantity"", :with => ""2""
    expect{ page.should have_link 'Add Product'}
    click_link 'Add Product'
    select('Nike', :from => 'Product')
    fill_in ""Price"", :with => ""1000""
    fill_in ""Quantity"", :with => ""1""
    fill_in ""Amount"", :with => ""1000""
    expect{ page.should have_link 'Back to List'}
    click_button 'Create Issue slip'
end
end

Error message:
Failures:

<S_CODE_TOKEN>

In the above code the Add product link is the issue when i click the that link it should load up another form called as issue_slip_line_item there i have Product, Price, Amount, Quantity field in my case the test is not able to recognize the product field it is giving me the error unable to find the product, Actually when i click the add product link it should open the issue slip line item form, there i have field in which test case is failing to open the link please help
",SaurabhBhat1206,2014-10-29 15:23:51
1433,2014-10-29 15:20:00,"Please read the README, and then post questions about how to use capybara on the mailing list as requested. Also, you are combining RSpecs expect and should syntax together in a single line which (from a quick glance) seems to me means none of your expectations are actually being checked, they should be either

<S_CODE_TOKEN>

Or

<S_CODE_TOKEN>
",twalpole,2014-10-29 15:23:51
1432,2014-10-29 00:43:31,"Best explained with a quick code example:

<S_CODE_TOKEN>

Surely the matching shouldn't depend on whether or not the link is before or after the `<script>` tag?

Tested on V2.1.0 and V2.4.4 on Mac OS X with the same results.
",aspinall,2014-10-29 03:44:11
1432,2014-10-29 01:41:21,"This is interesting, and appears to be an issue with Nokogiri parsing of html documents   It appears that if the first element encountered of the fragment is a script element, nokogiri inserts the fragment into a &lt;head&gt; element, which capybara then interprets as non-visible this can be seen with

<S_CODE_TOKEN>

As can be seen, it's not actually the order of the elements, it's the fact that nokogiri sees a &lt;script&gt; tag first.  I'm not sure what, if anything, Capybara can do about this, it might be worth a discussion on the nokogiri repository
",twalpole,2014-10-29 03:44:11
1432,2014-10-29 02:21:32,"This is actually libxml2 behavior (used by nokogiri)
",twalpole,2014-10-29 03:44:11
1432,2014-10-29 03:44:11,"OK, done a bit more digging and I think it was fixed in libxml2 v2.9.0. This line is in the [release notes](http://xmlsoft.org/news.html) for 2.9.0: 

> Visible HTML elements close the head tag (Conrad Irwin),

I have managed to run a test against libxm2 v2.9.1 on another machine and the ""correct"" behaviour is observed. I'll message the nokogiri developers and ask that they bump their libxml2 dependency to the latest version.

Thanks for your help.
",aspinall,2014-10-29 03:44:11
1431,2014-10-22 06:51:40,"I'm using capybara to test my website,
but most cases failed since 10/16
i also try with https://github.com

<S_CODE_TOKEN>

<S_CODE_TOKEN>

ubuntu 12.04
ruby 2.0.0
rspec 3.1.2
capybara latest
",tonybearpan,2014-10-22 15:03:26
1431,2014-10-27 07:47:32,"What was the conclusion?  I also have the same problem, and started on 10/17/14 for me. cc: @twalpole and @tonybearpan.
",styliii,2014-10-22 15:03:26
1430,2014-10-22 05:09:04,"Commit 83742b0 added new values to the `:visible` option; this change documents the new values.
",mr-vinn,2014-10-23 19:10:04
1430,2014-10-23 19:10:09,"thanks
",twalpole,2014-10-23 19:10:04
1429,2014-10-21 00:15:21,"Clean up formatting of README note about Rails 4.0/4.1 test environment thread safety.
",gmcnaughton,2015-02-26 18:27:04
1429,2015-02-26 18:27:20,"thanks
",twalpole,2015-02-26 18:27:04
1428,2014-10-20 09:46:22," HTML code for Issue Slip:

<%= simple_nested_form_for @issue_slip do |f| %>
  <%= f.error_messages %>

  <p>
  <%= f.hidden_field :user_id, :value => current_user.id %>
  <b>From Store:</b></br>

<%= f.label :store_location_id %>
   <% if !current_user.store_location_id? %>
    <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, {:prompt => ""Select Store""}, :style => 'width:205px;' %><br />
  <% else %>
  <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, :value => current_user.store_location_id %><br/>
  <% end %>
 <b>Delivery To:</b></br>
<% if @count == nil %> 

<div class = ""shop_floors"">
<%= f.label :shop_floor_id %>
<%= f.collection_select :shop_floor_id, ShopFloor.all,:id,:name, {:prompt => ""-Select a Shopfloor""}, :style=>'width:150px;'%></div><br/>
<% else %>
<strong><%= f.label :shop_floor_id %>:<%= @issue_slip.shop_floor.name %></strong><br /><% end %>
<div class =""date"">
 <%= f.label :date, ""Date"" %>
 <%= f.datepicker :date, :dateFormat => 'dd MM, yy',  :showOn => ""both"", :buttonImage => ""/assets/calendar.gif"", :buttonImageOnly => true, :changeMonth => true, :changeYear => true , :size =>20 %><br/></div>
<%= f.label :project_id %>
<%= f.text_field :project_id , :size => 20 %><br />
<%= f.label :employee_id, ""Issued. By"" %>
<% if !current_user.employee_id? %>
<%= f.collection_select :employee_id, Employee.all,:id,:name, {:prompt => ""Select Employee""}, :style => 'width:205px;' %><br />
 <% else %>
 <%= f.collection_select :employee_id, Employee.find_all_by_user_id(current_user.id), :id, :name %><br/>
 <% end %>
<%= f.input :remarks, :label => 'Remarks', :input_html => { :size => 20} %><br/>
 <%= f.label :bom_quantity %>
 <%= f.text_field :bom_quantity, :size=> 20, :value => number_with_precision(f.object.bom_quantity , :precision => 3) %><br />
 <div class = ""cust_order"">
<%= f.label :customer_order_id %>
<%= f.collection_select :customer_order_id , CustomerPendingOrder.all, :id,:id, :prompt => ""Select Customer Order"" %></div> <br />
<div class = ""bom"">
<%= f.label :bill_of_material_id %>
<%= f.collection_select :bill_of_material_id, BillOfMaterial.all, :id, :title , :prompt => ""Select a BOM"", :style => 'width:205px;' %></div>
<div class=""load_bom""><%= f.submit ""Load BOM"" %></div> <br/>  
 <hr>
  <%= f.fields_for :issue_slip_line_items do |builder| %>
  <%= render 'issue_slip_line_item_fields', :f => builder %>
   <%end%>
 <p><%= f.link_to_add ""Add Product"", :issue_slip_line_items %> </p>   
<p><%= f.submit data: {:disable_with=>@submit_tag_label}%><div class=""load_preview_issue_slip""><%= f.submit ""preview"", :style => 'width:130px;', data: {:disable_with=>""loading preview...""} %></div></p>
  <% end %> 
</p>

Issue slip line item:
 
<%= f.link_to_remove ""Remove Product""%><br/>
<div class =""product"">
  <%= f.association :product, :prompt =>""Select Product"",  input_html: {data:{prices: prices}}, :collection => Product.in_stock %> </div>
        <%= image_tag :image , :class => ""prodimage""%>
<div class = ""productid"">
 <%= f.hidden_field :product_id, :class=>""productid"" %></div>
<br/>
<div class =""price""><%= f.label :price %><%= f.text_field :price, :size=>20, :value => number_with_precision(f.object.price, :precision => 2)%> </div><br/>
<div class = ""qty"">  
<%= f.label :quantity, ""Quantity""%>
<%= f.text_field :quantity, :size=>20 , :value => number_with_precision(f.object.quantity, :precision => 3)%></div><br/>
 <%= f.label :amount %>
 <%= f.text_field :amount, :size=>20,:class =>""amt"", :value => number_with_precision(f.object.amount, :precision => 2) %><br/>
<!--%= f.label :customs_duty, ""Custom Duty""%-->
 <!--%= f.text_field :customs_duty, :size=>20 %-->
</div>

 <hr/> 

test case for issue slip:

it ""issue slips test"", :js => true do
    click_link 'New Issue Slip'
    select('Inuit HAL', :from => 'Store location')
    expect{ page.should have_content 'New Issue Slip'}
    expect{ page.should have_content 'From Store'}
    expect{ page.should have_content 'Delivery To'}
    select('sample shopfloor', :from => 'Shop floor')
    expect{ page.should have_content 'Shop floor '}
    fill_in ""Date"", :with => ""06 October, 2014""
    fill_in ""Project"", :with => ""1993""
    select('Sample Employee', :from => 'Issued. By')
    fill_in ""Remarks"", :with => ""There is no remarks to mention""
    fill_in ""Bom quantity"", :with => ""2""
    expect{ page.should have_link 'Add Product'}
    click_link 'Add Product'
    select('Nike', :from => 'Product')
    fill_in ""Price"", :with => ""1000""
    fill_in ""Quantity"", :with => ""1""
    fill_in ""Amount"", :with => ""1000""
    expect{ page.should have_link 'Back to List'}
    click_button 'Create Issue slip'
end
end

Error message:
Failures:

<S_CODE_TOKEN>

In the above code the Add product link is the issue when i click the that link it should load up another form called as issue_slip_line_item there i have Product, Price, Amount, Quantity field in my case the test is not able to recognize the product field it is giving me the error unable to find the product, Actually when i click the add product link it should open the issue slip line item form, there i have field in which test case is failing to open the link please help
",SaurabhBhat1206,2014-10-20 14:30:30
1428,2014-10-20 14:30:30,"Please post questions about how to use capybara on the mailing list, as requested at the top of the README
",twalpole,2014-10-20 14:30:30
1427,2014-10-20 02:12:15,,igrep,2014-10-23 19:10:37
1427,2014-10-23 19:10:42,"thanks
",twalpole,2014-10-23 19:10:37
1426,2014-10-16 16:27:16,"Hi All,

I've noticed that when the last browser window is closed the @browser instance remains set within the driver. I want to be able to close down the browser between cucumber scenarios so that I can fire up a new browser on each scenario.

I've found that the following error is raised from Firefox and Chrome respectively:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

See the script below to reproduce:

<S_CODE_TOKEN>

In an attempt to resolve this issue I've made a fork of Capybara and made a slight tweak to the close_window method to reset the @browser instance back to null when closing the last window. Following the closing of the last window and the reset of the @browser instance,  on the @browser method call it opens a new window and doesn't raise an error.

I haven't submitted a PR as of yet as I wanted to get feedback initially, there might already be an easier way around this?? Please see the link below:

https://github.com/jonathanchrisp/capybara/compare/close-window?expand=1#diff-d8f8252c683ecfca36a3d18712282b40R105
- I've also added the relevant unit tests to ensure this works as expected. 
",jonathanchrisp,2014-10-23 19:18:05
1426,2014-10-16 16:46:47,"I believe an easier way of shutting down the browser between each scenario would be to not worry about closing the windows and just use an After block

<S_CODE_TOKEN>

Of course firing up a new instance of the browser for every scenario is probably going to be painfully slow

Also - just from a quick look over your changes, I think just setting @browser to nil without actually calling quit on it will lead to a lot of unused firefox/chrome/etc processes being left running.
",twalpole,2014-10-23 19:18:05
1426,2014-10-17 08:47:44,"Hi @twalpole,

Thanks for your quick reply, good point about the processes. For now I'm going to do as you have suggested and quit the browser following each scenario. 

Do you think it would be of any benefit if Capybara could check whether there is at least one window available before performing any action, so that if there were none it could launch a new one and prevent this issue? Having to shutdown and relaunch the browser each time as you've said above is a little slow :( 
",jonathanchrisp,2014-10-23 19:18:05
1426,2014-10-23 19:18:05,"Since Capybara seeks to mimic user behavior, closing all the windows would require the user to open a new window - so I don't think Capybara should be checking for open windows.   
",twalpole,2014-10-23 19:18:05
1425,2014-10-16 15:50:04,"hello good afternoon, I am using capybara with the spec but I have problem when I test a complex form when I click add it generates the fields but can not fill. which method should I use?
",jeffersonsc,2014-10-16 16:12:38
1425,2014-10-16 16:12:38,"From the README -  Need help? Ask on the mailing list (please do not open an issue on GitHub): http://groups.google.com/group/ruby-capybara
When you post there you'll want to provide a lot more info, including the html that's generated
",twalpole,2014-10-16 16:12:38
1424,2014-10-15 07:50:23,"Found with: https://github.com/plasticboy/vim-markdown

Breaks highlight from that point forwards.
",cirosantilli,2014-10-15 14:33:21
1423,2014-10-13 20:28:19,"Can anyone help with fixing code that triggers this warning:

<S_CODE_TOKEN>

More information and some attempts at solving it are on Stack Oveflow, 

http://stackoverflow.com/questions/26275359/deprecation-warning-from-capybara/26337319#26337319
",obromios,2014-10-13 20:55:13
1423,2014-10-13 20:55:13,"As requested in the README, please ask questions about how to use Capybara on the mailing list.
",twalpole,2014-10-13 20:55:13
1422,2014-10-13 20:13:58,,twalpole,2014-10-13 20:14:15
1421,2014-10-13 11:42:44,"It allows to start https server inside `Capybara.server` block and control its readiness with `#responsive?` method.
",mender,
1420,2014-10-10 12:06:35,"Hi,

sometimes has_content? is failing, for examples for following lines always returns true, even there is no hiding same content on the page it returns true, but it should be false.

<S_CODE_TOKEN>

My env.rb as following:

<S_CODE_TOKEN>

Suprisingly, if I run the Capybara via terminal by entering following lines of command, it returns false as it is expected.

<S_CODE_TOKEN>

**Could you please help me on the subject what is wrong with my configuration? or is this a bug?**
",gunesmes,2014-10-10 14:35:06
1420,2014-10-10 14:35:06,"Has_content? Is a well tested part of Capybara and I therefore highly doubt there is a bug that would return true when the content isn't on the page.  You should post your problem on the mailing list as requested in the readme.  You'll want to post your test as well as the html that it's querying against. save_page  and save_and_open_page will probably be helpful to you.
",twalpole,2014-10-10 14:35:06
1419,2014-10-07 08:23:13,"rails 4.1.1, capybara 2.4.3
in my integration tests i have

<S_CODE_TOKEN>
",artempartos,2014-10-13 17:14:17
1419,2014-10-07 21:45:23,"We're experiencing this issue as well, on @circleci, but not locally. Rails 4.1.6

The issue appears to be that when we run locally, `Rails.application.middleware` is a ActionDispatch::MiddlewareStack, but when CircleCI runs the build, it uses a Rails::Configuration::MiddlewareStackProxy, which does not include Enumerable. We don't know why this is, but will be looping them in.

lib/capybara/rails.rb:8 checks whether Rack::Lock is already in the stack by calling `include?` on `Rails.application.middleware`. Unfortunately it doesn't look like Rails::Configuration::MiddlewareStackProxy offers any nice way of making this check.
",vericred-dev,2014-10-13 17:14:17
1419,2014-10-07 22:06:07,"Hey,

Engineer at CircleCI here. I'm not very familiar with Ruby or Capybara in particular, but we see file-ordering bugs in Ruby projects pretty often. Could that be what's happening here?

We've got [a document](https://circleci.com/docs/file-ordering) about file-ordering bugs that may be helpful. The gist of it is that OS X (or certain OS X filesystems, not sure atm) always lists files in the same order, while Linux (or certain Linux filesystems) doesn't. This can cause namespaces to be loaded in different orders and expose different behavior.

@vericred-dev, are you on OS X?

Our users have a fairly constant trickle of capybara failures that'd I'd love to get to the bottom of. Maybe this is it, or related?
",startling,2014-10-13 17:14:17
1419,2014-10-08 14:47:45,"Hi, @startling. Yeah, our dev boxes, on which capybara 2.4.2+ are working just fine, are OS X.

@artempartos, what platform are you seeing this problem on? Have you done anything interesting to your middleware stack? We don't think we have.
",vericred-dev,2014-10-13 17:14:17
1419,2014-10-08 16:29:30,"This sounds like the Rails app hasn't been fully initialized yet, which could be down to an ordering issue.  If I can't figure out exactly why by this weekend I'll release a new version without the concurrency fix and maybe just print a warning or something.
",twalpole,2014-10-13 17:14:17
1419,2014-10-08 16:45:09,"Ok -- so the middleware stack proxy is replaced with the actual middleware stack during the call to Rails.application.initialize!  in config/environment.rb  -  What tasks are the people with failures running that would be executing capybaras rails.rb before config/environment.rb is required?
",twalpole,2014-10-13 17:14:17
1419,2014-10-09 15:10:04,"@vericred-dev i'm working on vagrant box with Linux precise64. 
I have next middlewares

<S_CODE_TOKEN>
",artempartos,2014-10-13 17:14:17
1419,2014-10-13 17:14:17,"Fixed in 2.4.4 which will be released as soon as travis tests pass
",twalpole,2014-10-13 17:14:17
1418,2014-10-06 14:45:17,"I have a rails 4.1.1 application and integration tests.
And now i decide to update my capybara version to last at this moment (2.4.3)
My tests failed with 
NoMethodError: undefined method `include?' for #Rails::Configuration::MiddlewareStackProxy:0x00000003218128
This PR fixes this.
",artempartos,2014-10-06 14:53:19
1417,2014-10-05 22:18:49,"Hi, one of the maintainers of capybara-mechanize here. This test had a hardcoded values for the URI to visit which varies for different test cases. When these specs are integrated in custom driver's test suite like capybara-mechanize, it leads to failures. In addition, the remainder of the tests in this file also use `root_uri.host` rather than `localhost`.

This replaces #1227, which was rejected for changing the original purpose of the test. However, this patch only changes the hardcoding. It will allow https://github.com/jeroenvandijk/capybara-mechanize/issues/55 to proceed and bump it's compatibility to beyond capybara 2.1.

Thanks!
",phillbaker,2014-10-13 17:03:03
1417,2014-10-11 19:13:23,"Would be good to see this merged guys
",DaveBlooman,2014-10-13 17:03:03
1417,2014-10-12 20:59:15,"+1 :)
",ariera,2014-10-13 17:03:03
1417,2014-10-13 17:04:08,"Gem release to follow soon? 
",DaveBlooman,2014-10-13 17:03:03
1417,2014-10-13 18:58:26,"@DaveBlooman 2.4.4 coming as soon as travis finishes
",twalpole,2014-10-13 17:03:03
1417,2014-10-13 19:24:53,"Thanks @twalpole any chance we could get this backported to 2.2.x as well? I can do a PR into that branch if it'd help.
",phillbaker,2014-10-13 17:03:03
1417,2014-10-13 19:32:13,"@philbaker - thats 3 versions ago, we don't backport much in capybara.  Is there any reason you can't just update support to 2.4 ?  you can ignore the tests for the modal and window management apis until you're ready to support them.  -  Actually capybara-mechanize wouldn't support the modal and window management apis anyway - so 2.4 shouldn't be much different that 2.2
",twalpole,2014-10-13 17:03:03
1417,2014-10-14 01:22:41,"Thanks @twalpole! 

I'll give it a shot, I was hoping to get something quick out on 2.2 and then work on updating to 2.4. If it turns into a bunch of work, I'll open a PR against https://github.com/jnicklas/capybara/tree/2.2_stable and we can discuss.
",phillbaker,2014-10-13 17:03:03
1416,2014-10-02 19:09:10,"Recently updated to the latest Xcode, uninstalled and reinstalled QT through brew, uninstalled the gems and re-installed them (Capybara 2.4.3 and Capybara-webkit 1.3.0), verified that I'm using these and no other versions (ergo older versions).

We are feature testing a page served with a Backbone.js container inside it effectively doing the index table for controllers (a device - not to be confused with the controller in MVC - we have a list of ""controllers"" which return to the user).

Test is simple:

<S_CODE_TOKEN>

Tried js: true at the context and describe block levels as well - doesn't make a difference.

The puts exists to prove that the page we get back includes the backbone elements.

It does not:

<S_CODE_TOKEN>

We have the following configured in spec_helper.rb:

<S_CODE_TOKEN>

You can see I've tried selenium and webkit to no avail.  I've tried the patch mentioned on SO about running the web request and the [javascript in the same thread](http://stackoverflow.com/questions/8774227/why-not-use-shared-activerecord-connections-for-rspec-selenium), but nothing is working.

The Javascript is simply _not firing_.  

Now of course, everything is working fine in an actual browser.  Load the page, the table appears within 250ms like it's supposed to do.  Interacting with the table is fine.  Javascript is fine in the browser.

So there must be something fundamentally wrong with Capybara, Capybara-webkit, or one of it's dependencies.

Happy to provide any other data you require.  Been beating my head about this for hours. 
",tgmerritt,2014-10-02 23:06:44
1416,2014-10-02 23:06:44,"I'm going to go out on a limb here and say this has nothing to do with Capybara and more to do with either your shared database connection, or loading of data for the test.  Check your logs to see if the javascript request is actually hitting the app, if not throw some debugger statements in your JS and see why not.  Either way this is not an issue with Capybara.  If you want more people to take a look at it, post it in the Capybara mailing list as requested in the README
",twalpole,2014-10-02 23:06:44
1416,2014-10-02 23:10:25,"It could also be the order of your rspec before filters -- off the top of my head I don't remember if they run in the order defined, or reverse that - but that could be an issue if DatabaseCleaner.start is running before the strategy is changed for js tests.   --  nevermind they are run in the order defined
",twalpole,2014-10-02 23:06:44
1415,2014-10-01 17:40:07,"This is a fix issue 1237 best liked by @twalpole 
",sbonebrake,2014-10-15 22:01:14
1415,2014-10-13 18:48:14,":+1: 
",bootstraponline,2014-10-15 22:01:14
1414,2014-09-30 16:06:33,"How do we match HTML codes using has_link?  I have up/down arrows to change the ordering of elements on my page that are not matching with the following ruby on rails code...

expect(page).to have_link ""&uarr;"", href: ...

thanks!
Don
",vanboom,2014-09-30 16:19:20
1414,2014-09-30 16:19:20,"Please read the top of the README
",twalpole,2014-09-30 16:19:20
1413,2014-09-29 19:36:32,"Hello :)

I couldn't find a way to assert on `has_content?('foo', visible: true)` so I ended up doing:

<S_CODE_TOKEN>

which do not feels too clean.

Any hints? :)
",runa,2014-09-29 19:54:26
1413,2014-09-29 19:54:26,"Questions about using Capybara belong in the mailing list, as requested in the README
",twalpole,2014-09-29 19:54:26
1412,2014-09-29 08:55:35,"We are experiencing some oddness using capybara rspec with sinatra.  In particular sinatra errors appear to prevent subsequent page content checks from failing correctly.  Please find a detailed example in the following repository:

https://github.com/tansaku/rspec-capybara-bug
",tansaku,2014-09-29 17:26:54
1412,2014-09-29 17:15:37,"When I run this example - the first two tests correctly pass, and the third one correctly fails.  The reason the first two should pass is that you have ""show exceptions"" enabled for sinatra so it's producing an error page with backtrace which has the source for your test in one of the sections, so the text is actually on the page.
",twalpole,2014-09-29 17:26:54
1412,2014-09-30 09:01:33,"thanks @twalpole  for the feedback.  I see we can get the tests to fail if we add:

<S_CODE_TOKEN>

show_exceptions is true by default in sinatra, so this seems like a potentially very confusing issue.  cucumber capybara on the other hand doesn't behave like this.  The error thrown by sinatra is caught by cucumber rspec and is displayed in the console - I think it would make a lot more sense to developers if capybara-rspec followed capybara-cucumber in that regard.  Running a cucumber feature it looks like this:

<S_CODE_TOKEN>

I've added the cucumber example to the existing repo in case you want to run it yourself:

https://github.com/tansaku/rspec-capybara-bug

Thanks for clarifying that this is not a bug per se, but I would argue it is a serious usability issue - the cucumber behaviour seems much more developer friendly - is there some reason that capybara - rspec integration can't support the same?
",tansaku,2014-09-29 17:26:54
1412,2014-09-30 14:52:42,"show_exceptions is only true by default in the development environment, so because your env.rb includes the line ENV['RACK_ENV'] = 'test' then show_exceptions is not being set to true, and hence the error page isn't generated.  The same things happens if you run  RACK_ENV='test' rspec  .  It looks like you used the cucumber-sinatra gem to generate the env.rb for you, so if you feel like generating a capybara-rspec-sinatra gem to generate a test environment for you then go ahead, but Capybara can't be in the business of setting up the test environments for all the different frameworks out there.
",twalpole,2014-09-29 17:26:54
1412,2014-10-03 07:52:56,"Aha - thanks @twalpole - that clears everything up - really appreciate you taking the time to explain the details - we'll consider making an rspec-sinatra gem
",tansaku,2014-09-29 17:26:54
1411,2014-09-29 02:38:13,"We are developing a web app using Google Polymer as front end.

We discovered that Capybara could not query element within Shadow DOM.

Is there any technique to solve this?
",afterclassroom,2014-09-29 17:28:23
1411,2014-09-29 17:28:23,"Please ask questions about usage of Capybara in the mailing list, as requested in the README
",twalpole,2014-09-29 17:28:23
1411,2014-09-30 13:53:31,"I agree with @afterclassroom, I think the specific issue is that Capybara doesn't support ""custom elements"" (polymer uses it): http://www.html5rocks.com/en/tutorials/webcomponents/customelements/

A work around is to make something like this:
document.querySelector('custom-element').shadowRoot.querySelector('#html-element')

Please look below at the comments of the link:
https://github.com/webdriverio/webdriverio/issues/194

Right now, I am working to develop an approach to overcome this problem, trying to use capybara.
",froucher,2014-09-29 17:28:23
1411,2014-10-14 22:23:36,"@afterclassroom try using the 'within' method to reference elements within the Shadow DOM. Note that if there are nested Shadow DOMs, you'll need another 'within' function as well.
",qiheme,2014-09-29 17:28:23
1411,2014-10-21 09:52:13,"@qiheme 

We would love to apply 'within'. 

But as you sketched out, we do have nested Shadow DOMs.

In which case, how could we locate to the proper DOM element, at which, we could use ""within""?

Here is an example of how jQuery could locate the needed element at GoogleChrome's console:

document.querySelector('classroom-app').shadowRoot.querySelector('core-animated-pages').querySelector('section.core-selected').querySelector('login-form /deep/ input')
",afterclassroom,2014-09-29 17:28:23
1411,2014-10-21 13:11:41,"@afterclassroom 

Try this:

within('classroom-app') do
  within('core-animated-pages') do
    within('section.core-selected') do
      within('login-form') do
        page.find('input')
      end
    end
  end
end

Use 'within' to break through each nested shadow DOM. Since you're using 'deep', I can't really tell if there are any other nested sDOMs in there. Also, since you're not using shadowRoot to get to 'section.core-selected' that particular 'within' might not be needed. I realize that nested loops can cause speed issues when running tests so I would probably put this in a separate rb file in your support folder. Let me know if this works for you.
",qiheme,2014-09-29 17:28:23
1410,2014-09-28 17:59:57,"I think it would be a good idea to make elements returned by `Finders#all` reloadable, i.e.:
- set `Element#allow_reload` to true for every element from returned result. It may be done inside `Finders#all` or `Query#resolve_for`
- Pass `index` as the last argument inside `Query#resolve_for` (It will be not required argument that defaults to `0` just to not break backwards compatibility as `@api private` isn't added for `Element#initialize`)
- Inside `Element#reload` use `all(...)[index]` instead of `first(...)`

Do you like that idea?
",abotalov,2015-01-14 18:55:34
1410,2014-11-05 18:47:36,"@twalpole Do you want me to provide reasoning on why I think it would be a good idea to make elements returned by `all` reloadable? Or do you need something else from me?
",abotalov,2015-01-14 18:55:34
1410,2014-11-05 19:48:24,"I think I agree with this, just haven't spent any time to think it through --  Off the top of my head I would be concerned about what happens with the indexes and elements as elements are added and removed from the page.  I think we'd need some good test cases to fully explain what should and should not be  happening with this.
",twalpole,2015-01-14 18:55:34
1410,2015-01-14 18:55:34,"Closing this due to jnicklas huge :-1: and potential unexpected behavior it introduces
",twalpole,2015-01-14 18:55:34
1409,2014-09-26 13:43:34,"We are experiencing an odd situation where webmock failures do not caught by capybara-rspec, specifically the following passes:

<S_CODE_TOKEN>

but if we check for the 200 status of the returned page we see a failure:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

which is really strange - when we look that the page that is generated we see the error being reported correctly:

""WebMock::NetConnectNotAllowedError at /README.md""

so the short term solution we have found is to add  ""expect(page.status_code).to eq 200"" everywhere, but this is kind of messy and it feels like a hack - is there some reason why expect(page).to have_content can pass green as a result of the 500 error message?
",tansaku,2014-09-26 16:33:18
1409,2014-09-26 16:33:18,"Please ask questions about capybara usage on the mailing list as requested in the README - or if you think this is an actual bug in capybara, please create a minimum failing example.   As it is #visit may return before the page has loaded so checking page.status_code like that is not guaranteed to be reliable
",twalpole,2014-09-26 16:33:18
1409,2014-09-29 08:49:13,"Apologies if this was not the correct forum, however as requested here is a minimum failing example:

https://github.com/tansaku/rspec-capybara-bug
",tansaku,2014-09-26 16:33:18
1408,2014-09-26 12:02:06,"I was having problems with matching a complex CSS selector to an HTML document in a Rails/RSpec view spec. After verifying that the same selector matched as expected against the same HTML document using `Nokogiri::HTML().at_css` I broke the example down and found that even this example fails:

<S_CODE_TOKEN>

See a reproducing test case at https://gist.github.com/fidothe/cbb1f0d7b484d0e414d7

I've spent a few hours digging around trying to follow the call chain down to where the underlying Nokogiri CSS method gets called, but I haven't been able to figure out what's going on, sorry.
",fidothe,2014-09-26 16:28:26
1408,2014-09-26 16:28:26,"By default Capybara only finds visible elements.  Since a head element is not visible it will not be found.  You can do  expect(html).to have_css('head', visible: false) if you want to ignore visibility for that expectation, or set Capybara.ignore_hidden_elements to false if you always not non-visible elements returned
",twalpole,2014-09-26 16:28:26
1407,2014-09-25 16:00:04,"Not sure why it's disabled, but since I expected to find it working I think it would be useful to enable it

cc: @twalpole (6c0674db9bb6896d4ced8f8ab12fc0e3eec6d71e)
",elia,2014-10-13 20:15:24
1407,2014-09-25 16:16:34,"Just wondering why you expected to find it working?  Is it documented somewhere that it should be defined?
",twalpole,2014-10-13 20:15:24
1407,2014-09-25 16:17:46,"Just for similarity with `fit`
",elia,2014-10-13 20:15:24
1407,2014-10-03 03:33:07,"Was surprised about this today, myself.
",botandrose,2014-10-13 20:15:24
1407,2015-01-25 23:38:02,":+1 - this should be released! 

I can confirm it works fine with RSpec monkey patching disabled.
",e2,2014-10-13 20:15:24
1406,2014-09-24 13:23:46,"Why did he seek get, request a patch!?

My rspec test:
 `it 'remove moderator privilegue', js: true do`
 `page.driver.version`
 `find(:css, 'a.btn.btn-small.toggle_moderator').trigger('click')`
 `expect(page).to have_css('.icon-star')`
 `end`

Fail:

`Failure/Error: Unable to find matching line from backtrace`
    `ActionController::RoutingError:`
  `No route matches [GET] ""/furrer/users/7/toggle_moderator""`

Routes:

`get 'furrer', to: 'furrer/home#index'`
`namespace :furrer do`
 `resources :users, except: [ :new, :create, :show ] do`
   `member do`
    `patch :toggle_active`
    `patch :toggle_moderator`
   `end`
  `end`
`end`
",g-ilham,2014-09-24 19:25:12
1406,2014-09-24 19:25:10,"Please post questions about using Capybara on the mailing list as requested in the README.    You'll also want to provide your html over there since without it theres no way to know what you're doing
",twalpole,2014-09-24 19:25:12
1406,2014-09-24 19:30:35,"@twalpole  sorry, ok.
",g-ilham,2014-09-24 19:25:12
1405,2014-09-23 17:47:49,"As redundant as `current_path` and `current_host` (URI + `current_url`), but a more common use case than `current_host`, so I think that the convenience is worth it.

80 votes on SO: http://stackoverflow.com/questions/5228371/how-to-get-current-path-with-query-string-using-capybara/25999027#25999027

I will add tests if the feature is accepted.
",cirosantilli,2015-01-31 22:40:21
1405,2015-01-31 22:40:21,"http://stackoverflow.com/questions/5228371/how-to-get-current-path-with-query-string-using-capybara/25999027?noredirect=1#comment44797830_25999027
",cirosantilli,2015-01-31 22:40:21
1404,2014-09-22 22:22:46,"People need examples for help getting started, and this example project helps a lot.
",shaunlebron,2016-04-04 23:14:48
1404,2016-04-04 23:14:48,"I don't think we want to add a random sample project to the readme -- might be better info for a wiki
",twalpole,2016-04-04 23:14:48
1403,2014-09-22 01:31:46,"Quite a few of my tests broke when upgrading to Capybara 2.4.2. Looks like I was taking advantage of the fact Rails was allowing concurrent requests. I have a few endpoints in my app that I call while a request is happening (I make a HTTP request to m app's API during a request to get data).

Looks like a recent change has stopped Rails from allowing concurrent requests here: https://github.com/jnicklas/capybara/commit/385a7507f6525d9b2d1e23bef0bb2e6fe5ad0c97

I suppose I'm trying to figure out why this was changed, and if there's a way I can change this behaviour? I couldn't find a related issue.

Cheers!

cc. @twalpole
",keithpitt,2014-09-22 01:49:12
1403,2014-09-22 01:49:12,"This was done because constant loading is not threadsafe when config.eager_load is false and would lead to random errors.  If you want the old behavior back you can copy the functionality of lib/capybara/rails.rb into your own file, remove the Rack::Lock stuff, and then not require lib/capybara/rails.rb - or you can set config.eager_load=true in your config/environments/test.rb (although that has a performance penalty in app load time)
",twalpole,2014-09-22 01:49:12
1403,2014-09-22 02:02:52,"Ok thanks. I know of quite a few apps that do this, so this particular change probably shouldn't have been in a patch release as it's not backwards compatible.
",keithpitt,2014-09-22 01:49:12
1403,2014-09-22 02:35:10,"Those apps are then currently being tested in a way that isn't threadsafe, while depending on multiple threads -- which is worse, predictable testing, or random errors that are hard to debug??
",twalpole,2014-09-22 01:49:12
1403,2014-09-22 02:40:29,"I don't claim to know enough about how threads and Rails work to comment on that, all I know is that I upgraded a patch release and my tests broke.

Going from supporting concurrent requests (even though you say it's buggy) to not supporting it, is an important change to communicate clearly I think.

But feel free to ignore everything I say.

Thanks though for doing open source work! I <3 Capybara!
",keithpitt,2014-09-22 01:49:12
1402,2014-09-20 01:41:53,,twalpole,2014-09-20 05:58:31
1401,2014-09-19 23:27:07,,twalpole,2014-09-24 19:26:45
1400,2014-09-18 21:44:28,"Rails doesn't insert Rack::Lock into the middleware when config.cache_classes is true, even if config.eager_load is false (the default Rails test environment settings).   This causes an issue since it allows WEBrick to handle multiple requests at once which can cause concurrency issues around constant loading. See - https://github.com/rails/rails/issues/15089
",twalpole,2014-09-19 17:33:48
1400,2014-09-19 10:18:34,"It works :)
",divineforest,2014-09-19 17:33:48
1400,2014-09-22 17:09:12,"FYI, we decided against back-porting the fix to 4.1 (https://github.com/rails/rails/commit/60819046eadd6adfb56c08ca17d546f56c1974e4) specifically because we believe it can break other people's currently-passing tests.
",matthewd,2014-09-19 17:33:48
1399,2014-09-18 17:34:53,"Recently, I wrote an integration test for a payment system using Stripe Checkout (https://stripe.com/docs/checkout), and ran into an issue while filling out the credit card fields in the Stripe Checkout form (using Selenium as the driver).

Stripe checkout, via javascript, removes focus on the credit card number and expiration date fields after every n characters are entered. For example for the credit card field with a card number 4242 4242 4242 4242, focus is removed after every four characters that are entered.

So, if I do something like... 

<S_CODE_TOKEN>

...it doesn't work. 

As of now, in the set method, there is a way to get around this - you check native.attribute('isContentEditable') if a field is not of tag_name ""input""

https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/node.rb

In the stripe checkout case, I needed this branch (which is the last branch in the if/else)..

<S_CODE_TOKEN>

..to run for a field of tag_name ""input"", which didn't pass the native.attribute(""isContentEditable"") check. 

What I did was to add an option to the set method called ""ensure_focus"", which made the code above run regardless of tag_name or anything else if I pass in true. 

Is there a better way to deal with this? I can provide more details if required.
",sidk,2014-09-18 17:48:32
1399,2014-09-18 17:48:32,"Capybara attempts to emulate a user filling in the fields while still being reasonable fast (the field is cleared via JS since it was ridiculously slow via backspaces in some instances) - Are you sure the issue you're having is that the stripe field removes focus, since it would be a terrible user experience if every 4 characters they had to reclick in a box to enter the next 4?  Either way this is a question best asked on the mailing list
",twalpole,2014-09-18 17:48:32
1398,2014-09-18 06:25:24,"Fix typo
",takashi,2014-09-18 21:55:01
1398,2014-09-18 21:55:10,"thanks
",twalpole,2014-09-18 21:55:01
1398,2014-09-19 16:34:08,"thx for merging :) 
",takashi,2014-09-18 21:55:01
1397,2014-09-18 03:52:16,"I'm assuming that the underlying cause of this issue has something to do with my own code setup and not Capybara, but I am creating an issue because it might possibly point to another underlying issue.

So anyway, I have an engine and in my tests I am mounting it in a rails app with ActiveRecord 3.2.3 and testing views from the engine (think `feature 'xyz' do ... end`), and after calling `visit '/some/valid/path'` `page.html` is an empty string (not even an html tag), and `response` is nil.

The odd thing is, this test works when I change the gemfile to use ActiveRecord 4.0, 4.1, or even 4.2. Any ideas what is going on, or where I should dig to figure it out?

Thanks!
",joncalhoun,2014-09-26 16:39:27
1397,2014-09-18 20:51:07,"To add to this - if I have a controller with the following code:

<S_CODE_TOKEN>

But oddly changing it to this:

<S_CODE_TOKEN>

causes it to render nothing again. So I'm not sure if something is breaking and capybara/rspec just stop rendering the page or what. 
",joncalhoun,2014-09-26 16:39:27
1397,2014-09-26 16:39:27,"The fact that your code is working with Rails 4.0,4.1,4.2 but not 3.2 would indicate issues in your code not being compatible with Rails 3.2 -- check your test.log/development.log for errors.   Immediately in your example I can see that   User.all.limit(5).as_json isn't valid in 3.2 since #all executes the query (IIRC) - so it would have to be User.limit(5).all.as_json for Rails 3.2, so I would expect errors in your logs and failing tests  -  In the future please ask questions about usage of Capybara on the mailing list, or provide a minimum failing example so we can experience the issue.
",twalpole,2014-09-26 16:39:27
1396,2014-09-11 13:06:19,"Unfortunately the `all` method in the Capybara DSL is now conflicting with the `all` matcher in Rspec (https://www.relishapp.com/rspec/rspec-expectations/v/3-1/docs/built-in-matchers/all-matcher). I'm not sure what happens now (fight to the death?), but it did lead to a very confusing error message:

<S_CODE_TOKEN>

Thoughts?
",mhodgson,2015-11-03 23:58:36
1396,2014-09-11 13:08:46,"One thought, maybe rename the `all` method in Capybara to `every`. Seems to maintain the same meaning and would read ok:

<S_CODE_TOKEN>
",mhodgson,2015-11-03 23:58:36
1396,2014-09-11 18:54:59,"@myronmarston That's the second time when RSpec adds a method with a name that already exists in Capybara - see https://github.com/jnicklas/capybara/issues/1361
",abotalov,2015-11-03 23:58:36
1396,2014-09-11 18:57:24,"IMO `every` is a bad name. It makes sense in your example but it doesn't make sense when you want to e.g. get second element - `every('.cls')[1]` or `every('.cls').last`
",abotalov,2015-11-03 23:58:36
1396,2014-09-11 18:58:40,"As told in previous issue about `within` the easiest workaround is to invoke that method from page (aka `Capybara.current_session`):

`page.all`
",abotalov,2015-11-03 23:58:36
1396,2014-09-11 19:13:07,"> @myronmarston That's the second time when RSpec adds a method with a name that already exists in Capybara - see #1361

Sorry about that :(.  I'm not sure what we could have or should have done differently, given that RSpec continues to gain new features (often in the form of new APIs) as requested by the community.  Any suggestions?
",myronmarston,2015-11-03 23:58:36
1396,2014-09-11 19:25:45,"@abotalov I actually am having the reverse problem where I can't access Rspec's `all` method, not the other way around (for which your workaround would be fine). I think in the case of Rspec I need to do this:

<S_CODE_TOKEN>

But that kind of kills readability and isn't worth it. I just looped over the elements manually instead.
",mhodgson,2015-11-03 23:58:36
1396,2014-09-11 19:29:10,"@abotalov maybe `find_all` ?
",mhodgson,2015-11-03 23:58:36
1396,2014-09-11 19:35:31,"@mhodgson RSpec's `all` doesn't work for you as `Capybara::DSL` is included after `RSpec::Matchers`. Adding alias inside Capybara won't resolve the issue as `all` will continue to exist and override RSpec's method.

You can include `Capybara::DSL` before including `RSpec::Matchers`. Then `all` will mean RSpec's method. And you would be able to use Capybara's method via `page.all`.
",abotalov,2015-11-03 23:58:36
1396,2014-09-28 20:06:23,"@myronmarston 

> I'm not sure what we could have or should have done differently

It looks to me that an issue of clashing method names is an issue not only of RSpec and Capybara but of Ruby ecosystem in general. It's bad when two gems expose methods with the same name. So it would be better if there would be a general enough solution for that problem.

It's easy to find those clashing methods if one would put some care into combining a list of modules/classes with with which methods exposed by a gem may interfere. Something like:

<S_CODE_TOKEN>

It may be even possible to create a general gem that will contain `gems_and_their_methods` array not only just for testing context but also for model, controller etc. though it may be a very large task, not sure.

It's possible to incorporate such task into a build that will check for those clashes and say if there are e.g. any new.
",abotalov,2015-11-03 23:58:36
1396,2014-09-28 23:21:14,"That's an interesting idea, @abotalov.  I would say that it's really only a problem when gems choose to add methods to a namespace owned by another gem, as is the case here. RSpec ""owns"" the namespace for the API it exposes, and capybara chooses to import its API into that same namespace.  Also, I don't want to limit new RSpec APIs to just method names that aren't already in use by an RSpec extension.  It would be useful to know in advance that adding a particular API will cause a conflict with a method in a particular extension, but that wouldn't necessarily stop us from adding it.  It would, however, allow us to discuss the issue before the new API is released, to have solutions ready.

If you decide to develop your conflict-detection logic further and want some input from the RSpec side, let me know.
",myronmarston,2015-11-03 23:58:36
1396,2015-03-30 12:38:54,"I have a feature here where I'm not interested in accessing the Capybara method, but RSpec's builtin matcher instead. Worked around with `include RSpec::Matchers.clone`
",schnittchen,2015-11-03 23:58:36
1396,2015-07-15 21:26:39,"Would it be possible to implement a proxy that's intelligent enough to forward methods called on the result of `#all` to either Capybara or RSpec depending on the context?
",mattwynne,2015-11-03 23:58:36
1395,2014-09-10 06:40:14,"I tend to forgot to wrap the URL into a Hash, like this:

<S_CODE_TOKEN>

This is what I wanted to write:

<S_CODE_TOKEN>

This is a false positive because have_link [ignores](https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L11) the second parameter if it is not a Hash.
I think it would be nice to catch this potential error.

This is my own dirty hack to notify me:

<S_CODE_TOKEN>
",wgc-as,2016-04-04 23:07:09
1395,2014-09-10 17:34:03,"I agree that `*args` should be validated more properly but I believe it may break half-working code of some users. And therefore such change can be done only in 3.0
",abotalov,2016-04-04 23:07:09
1394,2014-09-09 21:08:45,"Take for example an element which has the text content `The quick brown fox jumps over the lazy dog`, the locator '.content-test', and is not visible.

If `ignore_hidden_elements` is set to `true` (the default), then the following methods will return incorrect results on the element when found with the query option `visible: false`:

<S_CODE_TOKEN>

However, the following would succeed:

<S_CODE_TOKEN>

I have not investigated what other methods may also be affected by this issue.  The resolution for me was to set `ignore_hidden_elements = false`.
",tmertens,2014-09-09 22:56:12
1394,2014-09-09 21:47:08,"This appears to be a bigger problem than first expected.  After looking at this further, it appears that the behavior of `#has_content?` is inconsistent as well, in that it does not respect the `visible: true` query option, such that for content expected to not be visible on the page, you cannot test for it if `ignore_hidden_elements = false` at least this is how it appears thus far.
",tmertens,2014-09-09 22:56:12
1394,2014-09-09 22:56:12,"from the documentations for #text  
    # Retrieve the text of the element. If `Capybara.ignore_hidden_elements`
     # is `true`, which it is by default, then this will return only text
     # which is visible. The exact semantics of this may differ between
     # drivers, but generally any text within elements with `display:none` is
     # ignored. This behaviour can be overridden by passing `:all` to this
     # method.
so you need to call   #text(:all)  if you want it to return hidden text

also the has_text? documentation (for which has_content? is just an alias)  - shows that you would need to call
#has_text?(:all, ""The quick brown fox jumps over the lazy dog"") to have it check for hidden content
",twalpole,2014-09-09 22:56:12
1394,2014-09-10 01:31:08,"Excellent, I will give this a try.  Thanks for the tip!

On Tue, Sep 9, 2014 at 5:56 PM, Thomas Walpole notifications@github.com
wrote:

> from the documentations for #text
> 
> # Retrieve the text of the element. If Capybara.ignore_hidden_elements
> 
> # is true, which it is by default, then this will return only text
> 
> # which is visible. The exact semantics of this may differ between
> 
> # drivers, but generally any text within elements with display:none is
> 
> # ignored. This behaviour can be overridden by passing :all to this
> 
> # method.
> 
> so you need to call #text(:all) if you want it to return hidden text
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/jnicklas/capybara/issues/1394#issuecomment-55049164.
",tmertens,2014-09-09 22:56:12
1394,2014-09-10 15:00:47,"@twalpole 

Good morning!

After further consideration, I realize that `#text(:all)` doesn't fully resolve the issue I reported and in fact I believe the current behavior still qualifies as a bug.  Let me explain and I fully welcome your feedback.

I will attempt to thoroughly qualify the statement that this is in fact a bug (or, perhaps a feature request since it may represent a breaking change):

Most importantly, your suggestion to use `#text(:all)` does not allow us to perform text validation (e.g. `has_content?`) on invisible elements using the implicit wait functionality built in to Capybara.  The text method will return immediately (if it finds the element in question) and then an assertion must be made on the immediate response, or I must wrap my query in a waiter block, again negating the benefit of Capybara's implicit wait mechanisms.

Alternately, I can use a `find()` using the `text: 'something'` query option(see below), but this is not ideal for setting expectations within tests.

Secondly, there exists an inconsistency in the current behavior.  Specifically, given an invisible element containing 'some text', take the following examples:

<S_CODE_TOKEN>

As you can see, specifying the `text` query option in the `find()` method parameter hash ignores the visibility of the element, and matches on `:all` text regardless.

Finally, by specifying `visible: false` on the element query, my query implicitly states that the element is not visible, and therefore any query against the text value of that element and/or any subelement should be performed implicitly with `text(:all)`.  The element is already determined at this point to be a non-visible element based on the specified query selector, and as such other method calls on the element should be able to apply this visibility context to their behavior.

Therefore, element methods such as '#text', '#has_content?', '#has_text?' etc should behave appropriately for the visibility of the context they are called within, and not simply to the global `ignore_hidden_elements` setting.
",tmertens,2014-09-09 22:56:12
1394,2014-09-10 17:31:34,"@tmertens

> Most importantly, your suggestion to use #text(:all) does not allow us to perform text validation (e.g. has_content?) on invisible elements using the implicit wait functionality built in to Capybara

`has_text?(:all, 'text')`

> As you can see, specifying the text query option in the find() method parameter hash ignores the visibility of the element, and matches on :all text regardless.

It does respect it - https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L44

> Finally, by specifying visible: false on the element query, my query implicitly states that the element is not visible

That's not true. It means that you don't care if it's visible or not. Therefore I'm not convinced to support your next conclusions.
",abotalov,2014-09-09 22:56:12
1394,2014-09-10 18:18:46,"> It does respect it - https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L44

The code you referenced supports exactly what I stated.  Perhaps I did not word it clearly enough.  To reiterate, the API is _inconsistent_ in the fact that  `#find` matches text using the value of the `visible` query option passed into it, while `#has_text?` applied to the element found using the aforementioned `#find()` would yield a result of `false`.

> It means that you don't care if it's visible or not.

In what case would you ever specify `visible: false` for an element you expect to be visible?

Let's take your example and suppose I do not care if the element is visible or not.  In this case I set `visible: false` in my `find()`.  If I then perform a validation on the text content of the found element, the text value would be non-deterministic based on whether or not the element happens to be visible at the time of the validation.  e.g.

<S_CODE_TOKEN>

Note the OR in the possible result, which would in turn yield non-deterministic test failures.
",tmertens,2014-09-09 22:56:12
1394,2014-09-10 19:04:16,"@tmertens It seems you also want to make `visible: false` mean `visible: :hidden`, not `visible: :all` as it does now.
",abotalov,2014-09-09 22:56:12
1394,2014-09-10 19:28:37,"@abotalov Not at all, I'm simply trying to demonstrate that Capybara's concept of ""visibility"" is applied inconsistently to element and text nodes in the DOM.

That's not to say that there isn't utility for a `visible: :hidden` query option, but that's outside the scope of this ticket.
",tmertens,2014-09-09 22:56:12
1394,2015-06-03 06:43:31,"Run into the same issue today.

In my opinion , we already include ""visible: false"" in [find('invisible-element', visible: false).text], so don't need to repeat the similar option (:all) in text(:all).
",wingice,2014-09-09 22:56:12
1394,2015-06-03 15:46:45,"This isn't changing.  You have to specify what visibility you want in the text marchers.  Is this inconvenient? Maybe, but that's because you probably shouldn't be testing for text content of invisible elements.  If the user can't see it why are checking for its text content?  If the user will be able to see it at some point then then trigger whatever behavior makes it visible and test its content then.  If you really, really, really want to be testing text content of invisible elements a lot, then write a helper method to make it easier for yourself
",twalpole,2014-09-09 22:56:12
1394,2016-01-29 18:22:09,"`text(:all)` solved this for me but I support @wingice.  
My case was a error balloon outside of browser window because the page is too wide.
",Nakilon,2014-09-09 22:56:12
1394,2016-01-29 21:36:15,"@Nakilon If your error balloon is appearing offscreen, then thats a usability issue and should be fixed, rather than changing your text to pass when the text is not visible -- hence why you shouldn't be searching for things that aren't visible.
",twalpole,2014-09-09 22:56:12
1393,2014-09-04 11:27:39,"Otherwise If you want to filtered out tests `capybara_skip: [:windows]` those three will be executed anyway
",route,2014-09-19 17:43:58
1393,2014-09-18 21:58:07,"The entire wrapping spec

<S_CODE_TOKEN>

requires :windows so I don't think these additions are required, unless I'm missing something?
",twalpole,2014-09-19 17:43:58
1393,2014-09-19 06:09:26,"That's what I though too, but it looks like they work different way and the innermost will override outermost. So in case to filter out `capibara_skip: [:windows]` those 3 specs remain unfiltered.
",route,2014-09-19 17:43:58
1393,2014-09-19 10:31:18,"Here's build on Travis https://travis-ci.org/teampoltergeist/poltergeist/jobs/34381734
As you can see from the commit, skip option is set to `Capybara::SpecHelper.run_specs TestSessions::Poltergeist, 'Poltergeist', capybara_skip: [:modals, :windows]` and there're three failed tests.
",route,2014-09-19 17:43:58
1393,2014-09-19 17:43:51,"ah -- yeah  requires overrides the tag on the test, it doesnt merge them.   Thanks for catching this.
",twalpole,2014-09-19 17:43:58
1392,2014-09-04 09:53:23,"Now ""within"" method is not synchronised and using it can cause issues like

<S_CODE_TOKEN>

One possible solution is to add

<S_CODE_TOKEN>

inside `within` method.
",divineforest,2014-09-19 18:42:44
1392,2014-09-04 17:14:14,"within calls find which is synchronized, are you sure your .nav-bar element is on the page within the timelimit you have set for  Capybara.default_wait_time?
",twalpole,2014-09-19 18:42:44
1392,2014-09-19 13:22:46,"Yes, `find` works as expected.
",divineforest,2014-09-19 18:42:44
1391,2014-09-02 23:32:09,"Configuration of my application: postgresql, rspec 3.0, capybara, database_cleaner (truncation strategy for features), poltergeist.

Sometimes I have the exception like `ActiveRecord::RecordNotFound` in my feature tests. It's interesting that when I ran the failed test separately it's not failed.

This is an example of the failed test:

<S_CODE_TOKEN>

The `logged_as_store_owner` creates a user in DB and sets the given `user_id` into `warden` to emulate login. `create_current_store` creates a store in DB with `FactoryGirl`. It seems like that the fail is given when there wasn't commit yet in DB to create the store and the `visit edit_store_path(store)` tries to select it from DB. Is it possible or not? Just wonder when the capybara thread starting and when we can have the resynchronized behavior?
",ka8725,2014-09-02 23:52:22
1391,2014-09-02 23:52:22,"Please ask questions about using Capybara on the mailing list
",twalpole,2014-09-02 23:52:22
1390,2014-08-31 13:58:11,,abotalov,2014-09-18 22:03:21
1390,2014-09-18 22:02:56,"thanks
",twalpole,2014-09-18 22:03:21
1389,2014-08-31 07:23:49,"The example given for a successful sign in test was incorrect as the password for the created user and the password to sign in did not match. Thanks to @amelialaundy for the catch while going over the docs.
",ootoovak,2014-10-13 20:18:24
1388,2014-08-29 11:56:12,"The driver does not handle remote redirects... got it. Fine.

The failure behaviour, though, I suggest should be different. This is what I see in my tests:

<S_CODE_TOKEN>

In words: I get redirected to the local rails app to a path it cannot handle.

Why not a big fat error / warning?
I got this for the first time today and a warning stating ""you are testing something I cannot handle"" would have been nice. I don't see a good reason for even attempting the redirect if it is off-app and cannot be handled at the Rack level. If there is none then a warning and even a suggestion to switch to a different driver would be helpful.
",eimermusic,2014-10-13 19:37:01
1388,2014-09-08 07:27:15,"In my test suite and from reading about the various drivers, the rack-based driver cannot redirect to ""anywhere"". Makes sense since it is based on rack and would only know about the world within rack. I totally see the reasonable limitation in a rack-based driver not being able to load up google.com or something.

I do agree that those methods do look like they would respect the host part of the url. I have no idea where the host gets changed but I can imagine it even being something implicit like ""if host is unknown to rack then use default host"" or something like that.

I clearly see my rails app trying to respond to an Amazon S3 path including authentication and all manner of S3 specific stuff. Those redirects work just fine in both development and production.

What I have done as a workaround is to instantiate a copy of the rack driver like this:

<S_CODE_TOKEN>

Note how redirects are turned off. Something you cannot switch on/off on the object directly. (well... it is Ruby so I actually could but not in any way I should)

Then I swap out the driver in before/after blocks where I need to handle off-site redirects.

<S_CODE_TOKEN>

And expect the location header to be something reasonable. Not as good as being abel to verify something actually is a document of a certain type but I can already test that in the code that generates the files.

<S_CODE_TOKEN>

I just want to also not that I did not invent this trick out of thin air. I found someone doing it online but can no longer remember where I copied the concept from.
",eimermusic,2014-10-13 19:37:01
1388,2014-10-13 19:37:00,"You might want to look at the capybara-mechanize driver which is currently in the process of updating to support newer capyabars.  It uses mechanize to extend the racktest driver to support remote requests
",twalpole,2014-10-13 19:37:01
1387,2014-08-28 07:04:00,"<S_CODE_TOKEN>

This code delete the item however the javascript that handle the data-method tag is not in the page.
So in a real browser when we click on this link we go to the show view.

Of course when I had the @javascript tag to the scenario, the test fails.
So when the javascript tag is here --> RED
When there is not tag --> GREEN

Is it a rack test issue ? It's the default driver for capybara right ?
Anyway how the delete can work with the rack test driver (it does not execute the js) ? 
",bvasseursiliconsalad,2014-08-28 17:09:07
1387,2014-08-28 17:09:07,"The racktest driver has a :respect_data_method option that is enabled by default if you require capybara/rails - this will then use the method in data-method (if one exists) for a link click -  This emulates some rails default behavior without needing JS execution.  In the future please ask questions about how to use Capybara on the mailing list
",twalpole,2014-08-28 17:09:07
1386,2014-08-27 15:38:27,"Hi,
how to use capybara with remote:true link.
now if i click on a link with remote:true it not see the element that load after
",Malstrom,2014-08-27 16:13:18
1386,2014-08-27 16:13:10,"Please ask questions about how to use capybara on the mailing list
",twalpole,2014-08-27 16:13:18
1385,2014-08-27 05:59:46,"Is pull request for readonly option support (ex. have_field 'Color', readonly: true ) is welcomed?
",miks,2015-08-25 21:25:55
1385,2014-09-23 18:41:38,"A readonly addition to the field selector would definitely be considered
",twalpole,2015-08-25 21:25:55
1384,2014-08-25 08:22:04,"Hi!

Many devs use database_cleaner in conjunction with RSpec, Capybara and Selenium/Capybara-webkit.

I added one line in the readme to link to a post by Avdi Grimm where he shows a proper setup of database_cleaner to work with Capybara and includes a thorough explanation.

It seems to me that easying access to config instructions for such a popular setup will benefit both your gem and new developers.

Cheers!
",cec,2016-04-04 23:19:35
1384,2016-04-04 23:19:35,"Closing since the database cleaner README has a more up to date recommended config
",twalpole,2016-04-04 23:19:35
1383,2014-08-24 12:16:04,,abotalov,2014-09-19 18:47:16
1382,2014-08-24 11:58:52,"To debug Travis failures I added once the following to `window_opened_by` method when running tests on Travis:

<S_CODE_TOKEN>

On my machine it executes from 3 to 140 ms. On Travis it took ~760 ms once - https://travis-ci.org/jnicklas/capybara/jobs/33410167#L492 so spec failed.

So I changed that failing spec so it won't fail if takes so long. Probably it would be needed to increase it even more.
",abotalov,2014-08-27 16:15:39
1382,2014-08-27 17:32:37,"Ok -- this didn't seem to fix anything -- so I'm considering reverting it -- is there a reason I shouldnt?
",twalpole,2014-08-27 16:15:39
1382,2014-08-27 19:23:34,"It seems to me that from time to time `driver.window_handles` takes significantly more time than usually. As you see at the link I provided it took > 700 ms so it failed because of it.

I could add those debugging rows again and rerun the build a few times to reproduce the issue. 

But you say:

> this didn't seem to fix anything

Can you provide a link to a Travis build where that test failed?
",abotalov,2014-08-27 16:15:39
1382,2014-08-27 19:28:41,"That error appeared in https://travis-ci.org/jnicklas/capybara/jobs/33720773 but it seems it didn't appear in other builds from build history.
",abotalov,2014-08-27 16:15:39
1382,2014-08-27 19:53:12,"https://travis-ci.org/jnicklas/capybara/builds/33713374   Thats the build that still had errors that seem to be around window timing after this PR was merged in
",twalpole,2014-08-27 16:15:39
1382,2014-08-27 19:56:55,"The only purpose of this PR is to fix the error with that particular scenario (""should raise error if value of :wait is less than timeout""). It doesn't fix other tests. I'll take a look on those tests and see if it's possible to fix them. But it looks to me that scenario I tried to fix in this PR hasn't failed in builds after this PR was merged.
",abotalov,2014-08-27 16:15:39
1381,2014-08-22 08:57:02,"I have a html element as below:
<button data-monitor-id=""pb:ll:le"">...</button>

I used ""page.find(:xpath, ""*[@data-monitor-id='pb:ll:l']"")"" to find this element, it did not work. Can you help to fix it? Thanks.

One more question, I want to add this attribute into html.rb
button = descendant(:input)[attr(:type).one_of('submit', 'reset', 'image', 'button')][attr(:id).equals(locator) | attr(:value).is(locator) | attr(:title).is(locator) | attr(:data-monitor-id).is(locator)], but it does not allow ""-"". Is there a way to escape ""-""?
",leevyzz,2014-08-22 14:13:22
1381,2014-08-22 14:13:22,"Please ask questions about how to use capybara on the mailing list
",twalpole,2014-08-22 14:13:22
1380,2014-08-14 18:15:41,,twalpole,2014-09-19 18:38:58
1379,2014-08-13 18:27:47,"In [this](https://github.com/jnicklas/capybara/blob/master/lib/capybara/rspec/matchers.rb#L4) line, `::RSpec::Version` is being checked, but that constant will not exist if the user _only_ specifies `gem 'rspec-rails'` in their Gemfile. `rspec-rails` has a dependency on every RSpec gem _except_ the RSpec ""metadata"" gem.

It should check for the existence of `::RSpec::Expectations::Version` instead.
",justinko,2014-09-21 02:51:19
1379,2014-09-21 02:51:19,"Fixed in 2.4.2
",twalpole,2014-09-21 02:51:19
1378,2014-08-13 09:26:46,"This changes save me alot of time. Because when I make mistake in field name is annoying.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I think it would be nice to have it in capybara, what do you think?
",Paxa,2016-04-07 00:02:12
1378,2015-04-22 14:31:36,"Has anything like this been implemented yet? I think it sounds useful and I'd be interested in implementing a solution like this. Perhaps something similar for all ElementNotFound exceptions where it would recommend any elements with similar names. I can't count the number of times a field like ""Title"" hasn't been found because I was searching for ""Title:"" instead or something similar.
",chrisccerami,2016-04-07 00:02:12
1378,2015-04-22 15:03:52,"You can use this monkey patch. It works for me

How you want to detect possibilities for every ElementNotFound?
If I do `find('.page_title')` I don't know how to make it, list all possible css selectors will give too much information.
",Paxa,2016-04-07 00:02:12
1378,2015-04-22 16:30:37,"The problem I have with this is that the locator can be id, name, placeholder, or label text - so printing out only some of those is incomplete and can lead to more confusion, yet printing everything could lead to huge strings of text on some pages.  This also misses the label text for labels with nested inputs and no 'for' attribute
",twalpole,2016-04-07 00:02:12
1378,2015-04-22 16:37:35,"So you suggest to use only one selector? last?

<S_CODE_TOKEN>

I just had other problem now: hidden elements, I think need to make suggestion for that too
",Paxa,2016-04-07 00:02:12
1378,2015-04-22 17:32:11,"@Paxa This should not be done for #find - It is impossible to determine what the user may have wanted there.  I was referring to your initial code, which only outputs id or name and some label text, it ignores name (if an id exists),  placeholder, and some labels text in its suggestion list.  I think an incomplete suggestion list is actually worse than no suggestion list since it creates the illusion of having all the info when in fact you don't.
",twalpole,2016-04-07 00:02:12
1378,2015-04-23 05:34:52,"So are you thinking you wouldn't want to see something like this implemented at all? Or would you be willing to consider some sort of implementation for adding the extra output to the ElementNotFound exception? I was thinking about trying to work on an implementation when I get some free time this weekend, but if it's something you aren't interested in at all, I won't bother with the PR.
",chrisccerami,2016-04-07 00:02:12
1378,2015-04-23 06:10:19,"@chrisccerami your description of doing it for all ElementNotFound errors is basically impossible,  those errors can come from any valid CSS or XPath selector, and trying to determine the users intention for that isn't really doable
",twalpole,2016-04-07 00:02:12
1378,2015-04-23 06:11:51,"@twalpole I think if we make it for `find` it will give wrong suggestions. For example fill_in, select, click_link etc using find inside. I think better to make decorators for errors every case. And may be make special case to detect if `find` called from capybara or from user's test
",Paxa,2016-04-07 00:02:12
1378,2015-04-23 07:00:57,"I have one more thing: (looks ugly but it works)

<S_CODE_TOKEN>

before:

<S_CODE_TOKEN>

after:

<S_CODE_TOKEN>
",Paxa,2016-04-07 00:02:12
1378,2015-04-23 16:53:08,"@pavel - The ""if we make it for find it will give wrong suggestions"" is exactly my point about not being able to do it for all ElementNotFound errors.  Doing it for all the methods in Capybara::Node::Actions is probably possible.

The issues I have with your other two suggestions are 
1. Your #fill_in method is incomplete in the suggestions it offers (as detailed in a previous message)
2. Both of these methods have a race condition where it's possible to get an error like
   Unable to find field ""Title"" did you mean one of these [""Title"", ....]  
   Where it's telling you it couldn't find a field and then asking if you meant that exact same field.  This is because of the time delay between the field not being found and then getting all the available things on the page.   I don't think there's really a clean way to fix that possibility so it should probably be checked for when the error message is generated and make a statement about the race condition if it happens.  This may have to take into the match mode currently being used.
3.  This behavior would need to be turned on/off with a setting  -  Capybara.suggest_on_action_failure  or something like that
4.  To be included in Capybara you would also need to take into account that the default selector might be :xpath, so things like   find(label_selector) in your #fill_in would need to be become  find(:css, label_selector)  to make sure it continues working even if people have changed the default. 
",twalpole,2016-04-07 00:02:12
1378,2016-04-07 00:02:12,"Closing due to age, and the nebulous chance of this even being doable in a complete manner than is useful
",twalpole,2016-04-07 00:02:12
1377,2014-08-12 17:19:46,"formmethod attribute in html5 (http://www.w3schools.com/html/html5_form_attributes.asp)
",nidalaa,2014-08-27 16:16:26
1377,2014-08-14 20:39:44,"Thanks for this - looks good.  Unfortunately we're having some repeating failures on Travis although I don't think they're caused by this code.  I'm going to try rerunning the tests and once they pass I'll merge this in
",twalpole,2014-08-27 16:16:26
1377,2014-08-16 12:34:32,"Just a small (but still useful) change and it looks like it has nothing to do with with Travis failures but in the meantime I will also try to look at it once again.
",nidalaa,2014-08-27 16:16:26
1376,2014-08-12 07:50:54,"The readme makes it look/sound like that if you're using Test::Unit (or Minitest::Spec) with Rails, there's no need to add the `teardown` method given in the non-Rails snippet. However if you don't, the session and driver state will be retained between tests, which is different to the behaviour that Rspec gets by default, and obviously breaks test isolation. This PR attempts to reduce confusion that may arise (which is what happened in my case).

Ideally, I think Test::Unit / Minitest should get this behaviour by default just like Rspec does, perhaps through the [`after_teardown`](http://docs.seattlerb.org/minitest/Minitest/Test/LifecycleHooks.html#method-i-after_teardown) callback Minitest provides?
",noinkling,2016-04-04 23:18:04
1375,2014-08-10 17:11:11,"Every time, when i try to find elements with wrong selector. 
Here is my code:

<S_CODE_TOKEN>

Selector 'email:' is wrong, but it's not see in stacktrace:
/Users/boris/.rvm/gems/ruby-2.1.1@global/gems/actionpack-4.1.4/lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call': No route matches [GET] ""/images/favicon.ico"" (ActionController::RoutingError)
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/actionpack-4.1.4/lib/action_dispatch/middleware/show_exceptions.rb:30:in`call'
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/railties-4.1.4/lib/rails/rack/logger.rb:38:in `call_app'
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/railties-4.1.4/lib/rails/rack/logger.rb:20:in`block in call'
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/activesupport-4.1.4/lib/active_support/tagged_logging.rb:68:in `block in tagged'
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/activesupport-4.1.4/lib/active_support/tagged_logging.rb:26:in`tagged'
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/activesupport-4.1.4/lib/active_support/tagged_logging.rb:68:in `tagged'
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/railties-4.1.4/lib/rails/rack/logger.rb:20:in`call'
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/actionpack-4.1.4/lib/action_dispatch/middleware/request_id.rb:21:in `call'
    from /Users/boris/.rvm/gems/ruby-2.1.1/gems/rack-1.5.2/lib/rack/methodoverride.rb:21:in`call'
    from /Users/boris/.rvm/gems/ruby-2.1.1/gems/rack-1.5.2/lib/rack/runtime.rb:17:in `call'
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/activesupport-4.1.4/lib/active_support/cache/strategy/local_cache_middleware.rb:26:in`call'
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/actionpack-4.1.4/lib/action_dispatch/middleware/static.rb:64:in `call'
    from /Users/boris/.rvm/gems/ruby-2.1.1/gems/rack-1.5.2/lib/rack/sendfile.rb:112:in`call'
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/railties-4.1.4/lib/rails/engine.rb:514:in `call'
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/railties-4.1.4/lib/rails/application.rb:144:in`call'
    from /Users/boris/.rvm/gems/ruby-2.1.1/gems/rack-1.5.2/lib/rack/builder.rb:138:in `call'
    from /Users/boris/.rvm/gems/ruby-2.1.1/gems/rack-1.5.2/lib/rack/urlmap.rb:65:in`block in call'
    from /Users/boris/.rvm/gems/ruby-2.1.1/gems/rack-1.5.2/lib/rack/urlmap.rb:50:in `each'
    from /Users/boris/.rvm/gems/ruby-2.1.1/gems/rack-1.5.2/lib/rack/urlmap.rb:50:in`call'
    from /Users/boris/.rvm/gems/ruby-2.1.1@global/gems/capybara-2.4.1/lib/capybara/server.rb:19:in `call'
    from /Users/boris/.rvm/gems/ruby-2.1.1/gems/rack-1.5.2/lib/rack/handler/webrick.rb:60:in`service'
    from /Users/boris/.rvm/rubies/ruby-2.1.1/lib/ruby/2.1.0/webrick/httpserver.rb:138:in `service'
    from /Users/boris/.rvm/rubies/ruby-2.1.1/lib/ruby/2.1.0/webrick/httpserver.rb:94:in`run'
    from /Users/boris/.rvm/rubies/ruby-2.1.1/lib/ruby/2.1.0/webrick/server.rb:295:in `block in start_thread'
",borisaka,2014-08-14 18:30:31
1375,2014-08-14 18:30:31,"Please ask usage questions on the mailing list
",twalpole,2014-08-14 18:30:31
1375,2014-10-04 09:10:53,"I got the same error while testing with capybara
",vkeziah,2014-08-14 18:30:31
1375,2015-01-20 13:27:01,"I am also getting same error.
",anujaware,2014-08-14 18:30:31
1375,2015-03-03 22:18:14,"+1
",chalmagean,2014-08-14 18:30:31
1375,2015-03-03 22:55:00,"@chalmagean  This issue is CLOSED  -- its not a Capybara issue. If you want help with an error you're getting, go to the Capybara mailing list as requested in the README and post details of your problem there
",twalpole,2014-08-14 18:30:31
1375,2015-07-13 20:48:49,"My setup includes a Rails Engine, using Combustion and Capybara to run functional tests. I also ran into this issue, and placed a favicon in `spec/internal/public/favicon.ico` to resolve. Hope this helps fellow googlers.
",mikeantonelli,2014-08-14 18:30:31
1374,2014-08-04 09:10:31,"Using `capybara 2.4.1`, I'm having trouble selecting a select field. Here is my code:

erb:

<S_CODE_TOKEN>

spec file:

<S_CODE_TOKEN>

This is the exact error I get:

<S_CODE_TOKEN>

Everything else, like writing text into a text_area works fine. Am I doing something wrong here? Thanks!
",andersennl,2014-08-05 16:41:37
1374,2014-08-05 16:41:37,"Please ask ""how to"" questions on the mailing list, and you'll want to paste the actual html generated from your erb when you do.
",twalpole,2014-08-05 16:41:37
1373,2014-08-01 17:25:29,"current_path_query is a method that return Path and query of the current page without any domain information
",ice5050,2015-11-03 23:28:56
1373,2015-11-03 23:28:56,"The functionality this would generally be useful for is provided by the has_current_path?/have_current_path/assert_current_path series of boolean and matchers
",twalpole,2015-11-03 23:28:56
1372,2014-08-01 10:12:53,,sponte,2014-08-05 17:13:30
1372,2014-08-01 10:35:26,"I already proposed that previously:
https://github.com/jnicklas/capybara/issues/1297
https://github.com/jnicklas/capybara/pull/938
",abotalov,2014-08-05 17:13:30
1372,2014-08-05 17:13:30,"Closing since its a duplicate that doesn't deal with the issues raised with the previous PR
",twalpole,2014-08-05 17:13:30
1371,2014-08-01 10:11:34,"I think current_path_query (return Path and query of the current page) may be useful.

I got it from http://stackoverflow.com/questions/5228371/how-to-get-current-path-using-capybara.
",ice5050,2014-08-01 12:14:43
1370,2014-08-01 06:09:58,"I was just trying to get selenium-webdriver working with capybara following the instructions in the README, but I get the following popup error: ""Your Firefox profile cannot be loaded. It may be missing or inaccessible."" -- however it seems to be because I already had firefox running - perhaps worth a note in the README?
",tansaku,2014-08-14 20:41:23
1370,2014-08-14 19:00:03,"There are many possible errors that user may get because of environment issues.

Capybara's README is already too long and I don't think it's a right place to put troubleshooting info.
",abotalov,2014-08-14 20:41:23
1369,2014-07-31 15:26:31,"It's sometimes useful to check current url of the page. That's why Capybara and Webdriver expose `current_url` method.

When server isn't used user can check that after opening some page current_url is `""#{Capybara.app_host}/path?query#fragment""`.

But when server is used user can't write so easy check as authority is more complicated. So he has to either:
- copy-paste the algorithm used by `visit`
- check not whole url but only scheme, path, query and fragment (it would require to write several lines of code)

IMO both those options aren't good.

Therefore I propose to add read-only `Capybara.actual_app_host` that will return the actual part of url before path that is opened by `visit`. It can be done in 2.5
",abotalov,2015-08-25 21:56:35
1369,2014-07-31 16:29:02,"Why would anyone be checking the host against what Capybara thinks the host should be, shouldnt users be checking it against what they think the host should be?  I don't necessarily think having access to the actual host capybara is using in visit is a bad idea, but I do think the argument for it here is wrong.
",twalpole,2015-08-25 21:56:35
1369,2014-07-31 16:53:49,"> Why would anyone be checking the host against what Capybara thinks the host should be, shouldnt users be checking it against what they think the host should be?

Cause checking whole url is easier than checking scheme, path, query and fragment separately.
",abotalov,2015-08-25 21:56:35
1369,2014-07-31 17:25:44,"Yes checking whole url is easier - thats not what I asked.    If the user thinks the host should be www.example.com  why would they not check against that in their url string, vs substituting in the hostname capybara is using, or are you saying the user doesn't really care about the hostname - and really only wants to compare the path, query, and fragment?  if you are saying the user only wants to compare the path, query and fragment then maybe a better solution is a method on session that returns    request_uri + fragment  of the current_url
",twalpole,2015-08-25 21:56:35
1369,2015-08-25 21:56:34,"Closing because I believe the has_current_path matcher with the :url option and a regexp meets this need
",twalpole,2015-08-25 21:56:35
1368,2014-07-31 15:10:57,"I propose to be more consistent as current interchangeble usage is quiet confusing:

<S_CODE_TOKEN>

I propose to consistently refer to :css, :button, :xpath, etc. as `selectors` and to second arguments (`'#id'`, `'Click me!'`, `""//*[@name='something']""`) as `locators`.

The whole thing (`:css, '#id'`) can also be named selector as it's used in names like `assert_selector(:css, '#id')`.

Here are examples of (IMO) improper naming:
https://github.com/jnicklas/capybara/blob/2.4_stable/lib/capybara/rack_test/driver.rb#L65
https://github.com/jnicklas/capybara/blob/2.4_stable/lib/capybara/node/finders.rb#L133

> ""The type of selector""

can be changed to:

> ""Locator (or css selector). It's named locator by Capybara as otherwise it could be confused with the first argument""

I don't propose to make API changes, just changes to docs and variable naming.
",abotalov,2014-07-31 16:25:50
1368,2014-07-31 16:24:51,"I think redefining the symbol that is identifying the type of the locator as a ""selector"" is a terrible idea, especially when the locator may actually be a selector (css selector) etc.   Yes Capybara.default_selector and Capybara.add_selector are really Capybara.default_selector_kind and Capybara.add_selector_kind but I don't know anyone who has found that confusing.
",twalpole,2014-07-31 16:25:50
1368,2014-07-31 16:54:46,"I disagree. In most places in code second argument is called `locator`.

IMO the naming should be consistent.
",abotalov,2014-07-31 16:25:50
1368,2014-07-31 16:56:49,"> I think redefining the symbol that is identifying the type of the locator as a ""selector"" is a terrible idea

Capybara's public API already redefines this meaning using `add_selector`, `default_selector`. IMO redefining that meaning in code itself would be more consistent with public API,
",abotalov,2014-07-31 16:25:50
1368,2014-07-31 17:05:35,"Yes its called locator because it may or may not be a selector ---  if the type of the locator is :css then the locator is a css selector and if the type of the locator is :xpath then the locator is an xpath selector.  If the type is something different then the locator could be anything.
",twalpole,2014-07-31 16:25:50
1368,2014-07-31 17:20:46,"> xpath selector

It's called expression in the spec - http://www.w3.org/TR/xpath/, not selector

From YARDoc:

<S_CODE_TOKEN>

Here `locator` is said to be `The selector`. But it's not correct as actually it's either css selector, xpath expression or some other string.

Also first sentence in documentation of `add_selector` is documented as:

> Add a new selector to Capybara

So currently all those things:
- `:css`, `:xpath`, `:name`
- '`'#id'`, `'Click me!'`, `""//*[@name='something']""`
- `:css, '#id'`

are called selectors. So when someone says ""selector"" (in context of Capybara) he can mean quiet different things. Naming those things more consistently will add more clarity.
",abotalov,2014-07-31 16:25:50
1368,2014-07-31 17:41:45,"Yes - the spec calls it an expression I know that - however it is also commonly referred to as an xpath selector due to its similarity in purpose to a css selector  -  https://www.google.com/#q=%22xpath+selector%22 
Your suggestion however is to rename the one thing that is never referred to as a selector outside capybara (a symbol identifying the kind of string being used to locate elements) as 'selector' --  that is a terrible idea.
",twalpole,2014-07-31 16:25:50
1368,2014-07-31 19:57:50,"I see. Probably we can go a bit other route then:
- `:css`, `:xpath`, `:name` - selector kind
- '`'#id'`, `'Click me!'`, `""//*[@name='something']""` - selector or locator
- `:css, '#id'` - selector
- object of `Selector` class - selector

Probably it's already named in such way.
",abotalov,2014-07-31 16:25:50
1367,2014-07-31 14:09:43,,atomgas,2014-07-31 14:10:05
1366,2014-07-29 15:05:25,"We're having problems using the `Capybara.reset!` function, with chromedriver, in combination with a remote web application.

The result we get is... 

<S_CODE_TOKEN>

... which seems a little odd, as we're just asking Capybara to stop and reset the browser session.

We see this problem with chromedriver-2.8 and 2.9 , on multiple versions of Chrome, on various Linux 64bit systems.

What seems to trigger/fix this problem is having a page with javascript/content outstanding when the `Capybara.reset!` is called. 

Wrapping this in a function...

<S_CODE_TOKEN>

... seems to fix the problem

capybara (2.4.1)

regards

James M
",james-masson,2014-10-13 17:16:54
1366,2014-09-26 16:42:49,"Have you reported this error to chromedriver?  It seems ridiculous to have to visit '/'  and then about:blank everytime to reset the browser
",twalpole,2014-10-13 17:16:54
1366,2014-10-13 17:16:54,"Closing due to lack of feedback
",twalpole,2014-10-13 17:16:54
1365,2014-07-29 10:14:23,"Hi,

I'd like to contribute a new API for working with frames (it can be done for e.g. 2.5):
- `Session#switch_to_frame(:top_level)`
- `Session#switch_to_frame(:parent)` (switch_to.parent_frame will be added in Selenium-Webdriver 2.43)
- `Session#switch_to_frame(element)` (element is Capybara::Node::Element)
- `Session#within_frame(element)`

Old `within_frame(frame_handle)` where ""frame_handle"" is passed to the driver (and in reality can be not only handle but also something else) will be deprecated like it was done with `within_window`.

Please approve.
",abotalov,2016-12-09 22:31:30
1365,2014-07-29 15:39:09,"I don't see the point in adding the first 3 methods to Session - what is the use case for those which isn't just better served by within_frame?    Perhaps updating within_frame to take an array of selectors for nested frames makes sense, and updating the selenium driver to use switch_to.parent_frame when it's available makes sense for performance reasons (which is why I implemented it a week or 2 ago and have just been waiting for 2.43 to release, to test and merge)
",twalpole,2016-12-09 22:31:30
1365,2014-07-29 16:27:32,"@twalpole It's a single `switch_to_frame` method with ordinary overloads.
",abotalov,2016-12-09 22:31:30
1365,2014-07-29 16:29:11,"The use case for `switch_to_frame` over `within_frame` is the same as for `switch_to_window` over `within_window`
",abotalov,2016-12-09 22:31:30
1365,2014-07-29 17:41:15,"The fact that `within_frame` is exposed to driver level isn't good (Jonas said it in the past too - https://github.com/jnicklas/capybara/issues/984#issuecomment-14349992, see also Jon Leighton's comment above it). So IMO that issue is best to be resolved by:
1. deprecating drivers' `within_frame` method
2. adding `switch_to_frame(element)`, `switch_to_parent_frame` to drivers' interfaces

The use case for `switch_to_frame` (and `switch_to_window`) is that you can switch in one method, then do some operations in various other methods and then switch back in possibly another method.  Consider this:

<S_CODE_TOKEN>

This scenario (or just a test) is not declarative enough but if a person already has `I do something useful` stepdef (for another scenario that works with the page not opened in a frame) they can reuse it instead of writing a new stepfef. (P.S.: I know that Matt Wynne tells that scenarios should be declarative but still many people write not declarative scenarios and use Cucumber without following BDD). I haven't had a need to use `switch_to_frame` actually myself.

Also it seems there were users requesting it:
https://github.com/thoughtbot/capybara-webkit/issues/620

cc @mhoran @jferris @route @yaauie

---

> Perhaps updating within_frame to take an array of selectors for nested frames makes sense

Do you mean that?

<S_CODE_TOKEN>
",abotalov,2016-12-09 22:31:30
1365,2014-07-29 18:19:30,"I agree that within_frame should probably not be part of the driver API in a perfect world but that doesnt necessarily mean switch_to_frame should be part of the session API.  thoughtbot/capybara-webkit#620 also isn't requesting the behavior, its documenting a bug in capybara-webkit where the capybara-webkit driver switches frames automatically based on QT default behavior.  Thats something that should be fixed in the capybara-webkit driver not by adding new APIs n Capybara.

Yes something like 

<S_CODE_TOKEN>

could potentially be useful, or just

<S_CODE_TOKEN>

where frame1, frame2, and frame3 are the names or ids of nested frames
",twalpole,2016-12-09 22:31:30
1365,2014-07-29 19:07:34,"@abotalov   Actually you have said 2 different things, the initial text proposes adding switch_to_frame (with its overloads) to the session -- then later on you have said adding it to the driver API, which are you actually proposing?  
",twalpole,2016-12-09 22:31:30
1365,2014-07-29 19:13:28,"There are two possibilities:
1. Don't add switch_to_frame to Session. Make changes in drivers' interface as shown in my previous comment
2. Add switch_to_frame to Session. Make changes in drivers' interface as shown in my previous comment

1 - doesn't make enough sense
2 - IMO makes sense but you disagree that it would be good feature
",abotalov,2016-12-09 22:31:30
1365,2014-07-29 23:36:00,":+1: to making the frame API behave more like the window API. I'd also like to cut down on the incompatibilities between drivers when it comes to frame handling, as noted in https://github.com/jnicklas/capybara/issues/984#issuecomment-14357652. And as @jnicklas pointed out, this code really needs to be cleaned up.

I agree with @abotalov regarding `switch_to_frame` vs `within_frame`. I feel there are benefits to both depending on the situation, and as we've provided both `switch_to_window` and `within_window` (implemented via `switch_to_window`), I think users may expect that behavior.

Perhaps `within_frame` could take a proc as an argument, as `within_window`. I think this is a nice way to handle the option of selecting a particular frame that matches a selector, versus overloading arguments.

Thanks for the heads up, @abotalov.
",mhoran,2016-12-09 22:31:30
1365,2014-07-30 00:00:28,"a problem here is that frames are nested, which windows aren't - tracking frame changes is also necessary for maintaining the current_scope stack.  I still haven't seen any use case that justifies supporting random hopping between frames in the same document without returning to the parent frame in between.
",twalpole,2016-12-09 22:31:30
1365,2014-07-30 19:56:52,"> a problem here is that frames are nested, which windows aren't - tracking frame changes is also necessary for maintaining the current_scope stack

Please give an example use case that shows the issue.

> Perhaps within_frame could take a proc as an argument, as within_window. I think this is a nice way to handle the option of selecting a particular frame that matches a selector, versus overloading arguments.

IMO supporting just element is enough - `within_frame(find('#id'))` or `within_frame(find('iframe', match: :first))`. Ideally I would like to make `within_frame` to accept the same args as `within` - `within_frame('iframe', match: :first)` but it won't be backwards compatible so it can be done only in Capybara 3.0. For now I would like to deprecate passing name, id, index to make it more consistent with `within`.

If you mean that `within_frame` with lambda should iterate through frames to find first frame contents that matches the block, then I'm not sure that it would be a useful feature. I added `switch_to_window` with block as API user can't know window handle of the window he wants to switch to ([it's not possible to switch to window using anything other than handle](https://dvcs.w3.org/hg/webdriver/raw-file/default/webdriver-spec.html#widl-WebDriver-switchToWindow-void-DOMString-handle)). The downside of such way is that iterating through frames would be a bit slower than finding it directly by element. IMO if it's possible to provide useful ""fast"" API, then providing alternative useful ""slow"" API isn't needed.
",abotalov,2016-12-09 22:31:30
1365,2014-08-10 14:13:29,"I agree that supporting element should be fine. It behaves like `within`, and is compatible with the existing browser API.

It looks like there may be a bug in passing element to capybara-webkit due to XFS protection (we simply call `focus` on the element via JavaScript), but we'll be sure to test that (preferably in the integration tests.)
",mhoran,2016-12-09 22:31:30
1365,2014-08-13 20:36:13,"Also currently `within_frame` doesn't wait as other methods do when id or name are passed. So even if you want `within_frame` to continue support id/name in long-term perspective it should wait.
",abotalov,2016-12-09 22:31:30
1365,2015-09-16 18:17:48,"Did this new API ever get merged in?  I need the #switch_to_frame methods.
",jtrupiano,2016-12-09 22:31:30
1365,2015-09-16 20:16:54,"@jtrupiano I don't think so. Ended up here as proposal
",route,2016-12-09 22:31:30
1365,2015-09-16 20:32:11,"@route thanks for the reply.  A question for you (and the lurkers) regarding the following situation.  I am directly working with Session instances (no naked calls to #within_frame, etc).  I have scenarios where I want to observe the same behavior when a request comes directly from the browser vs. when the request is loaded into an iframe on another page.  So in my test code, I want a ""handle"" of sorts to the top level Session-like object.  In other words, something like this...

<S_CODE_TOKEN>

This is admittedly stripped down for illustrative purposes, but I want to re-use all of that code after the call to #get_root as if it were unaware that it were happening within an iframe.  So what's the recommended way to get a pointer/handle to the iframe that either is or behaves like a Session?
",jtrupiano,2016-12-09 22:31:30
1365,2015-09-16 20:51:22,"I'm a little out of context but why you cannot use `within_frame` even if you manage session yourself? So basically it pushes an iframe to the stack and when block ends pops it.
",route,2016-12-09 22:31:30
1365,2015-09-16 20:58:10,"I don't understand how to do that.  #within_frame doesn't yield a root-level ""Session-like"" object for me to work with (or does it??).

<S_CODE_TOKEN>

What am I missing / not understanding?
",jtrupiano,2016-12-09 22:31:30
1365,2015-09-16 20:59:49,"I haven't tried and can be mistaken but try it yourself:

<S_CODE_TOKEN>

I think the block catches local variables and it should be fine.
See examples in spec: https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/within_frame_spec.rb
",route,2016-12-09 22:31:30
1365,2015-09-16 21:05:55,"Oh I get it now.  #within_frame actually alters the state of the variable session.  That's what I was missing.  Thanks for helping me think through this, @route.

btw I'd still be happier if I had #switch_to_frame :)
",jtrupiano,2016-12-09 22:31:30
1365,2015-09-16 21:06:38,"@jtrupiano No problem ;)
",route,2016-12-09 22:31:30
1365,2016-07-15 19:33:57,"Driver authors please look at PR #1722 and give relevant feedback
",twalpole,2016-12-09 22:31:30
1365,2016-12-09 22:31:30,Closed via PR #1803,twalpole,2016-12-09 22:31:30
1364,2014-07-25 10:11:00,"When a js driver is set (selenium or poltergeist in my test) and using the path method result in an error :

<S_CODE_TOKEN>

path method is inherited from Capybara::Driver::Node and raise a NotSupportedByDriverError, but in Capybara::Node::Element.path the ActionController::RoutingError is throw

Error with capybara 2.4.1, poltergeist 1.5.1
",frodrigo,2014-07-25 13:41:35
1364,2014-07-25 13:41:35,"Now I understand the trick. The problem is the bad http query is reported asynchronously.
",frodrigo,2014-07-25 13:41:35
1363,2014-07-24 13:30:04,"When javascript is disabled in firefox, capybara doesn't allow setting of text. It returns the following error:

Selenium::WebDriver::Error::JavascriptError: waiting for evaluate.js load failed

I guess it's because it calls the execute_javascript method which throws this error. When I comment out this line and just use the native element it seems to work. 
",sharmarahul,2014-10-13 17:19:55
1363,2014-07-24 14:09:57,"What do you propose?
",abotalov,2014-10-13 17:19:55
1363,2014-07-24 14:18:08,"How about adding a flag to check if javascript is disabled?
",sharmarahul,2014-10-13 17:19:55
1363,2014-07-24 16:14:11,"Commenting out the execute_javascript works for you because your element didn't have any previous content.  If it had previous content that content would have most likely been appended to rather than replaced.  Capybara has been through a number of different methods for clearing and setting contents on a field,  the current one is the most equivalent to what a user would do (as far as the correct events being fired, etc) while still being reasonably quick.   I guess if javascript is disabled we don't need to worry about the events as much, so we could just call clear followed by send_keys in that case.  Is there a performant cross browser (selenium supports more than just firefox) method for determining if javascript has been disabled - or should we just assume javascript will usually be enabled and catch the error from the execute_javascript and call clear instead.
",twalpole,2014-10-13 17:19:55
1363,2014-07-24 19:40:05,"Yeah, I think it would be fine to add a rescue there:

<S_CODE_TOKEN>

I think it makes sense to output a warning as javascript error can theoretically occur for some other reason and thus user will know that it occurred. We can add exception message to rescue but it's not standardized by Webdriver W3C spec so I wouldn't like it.

@twalpole AFAIK `warn` outputs to STDERR so user can't redirect such output to some file with ""debug"" info. Probably warning should be outputted to `$stderr`.
",abotalov,2014-10-13 17:19:55
1363,2014-07-25 09:09:54,"Well I just tried rescuing the exception, and the test is painfully slow. May be because it still tries to load evaluate.js every time?
",sharmarahul,2014-10-13 17:19:55
1363,2014-07-25 16:27:55,"@sharmarahul Looking through the selenium-webdriver code, if the firefox session is created with javascript disabled then any call to execute_script immediately raises Error::UnsupportedOperationError, and the execute_script should never actually be sent to the browser, so there shouldnt be any great performance hit.  How are you disabling javascript in your Firefox session?
",twalpole,2014-10-13 17:19:55
1363,2014-07-25 16:30:41,"@sharmarahul also - what version of selenium-webdriver are you using?
",twalpole,2014-10-13 17:19:55
1363,2014-07-25 18:15:23,"Looking at this further, setting the capability javascript_enabled to false doesn't actually appear to do anything so it always attempts to do the execute_script on the browser which has a timeout before failing - which is why your tests take so long.   The following page - http://yizeng.me/2014/01/08/disable-javascript-using-selenium-webdriver/ - also makes some good points about how most (if not all) of seleniums drivers are largely implemented in JS so I'm not really sure what will and will not work properly in selenium let alone in Capybara if JS is disabled
",twalpole,2014-10-13 17:19:55
1363,2014-10-13 17:19:55,"Closing since javascript enabled appears to be a requirement of selenium-webdriver
",twalpole,2014-10-13 17:19:55
1362,2014-07-16 23:37:58,"Assumptions:
- `Capybara.run_server` is true
- `driver.needs_server?` is true

Currently, using multiple sessions will cause Capybara to [boot up a separate server for each session](https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L66).

It seems to me that each session should share the same server instead. Is there a reason why each session gets its own dedicated server?
",samwgoldman,2014-07-17 00:02:31
1362,2014-07-17 00:02:31,"IIRC - while there may be multiple Capybara::Server objects created, as long as the same app is passed to each of them (Capybara.app) then there is only one actual thread started running that app
",twalpole,2014-07-17 00:02:31
1361,2014-07-15 09:52:34,"Hi All,

Quick question as I'm unable to solve this:

<S_CODE_TOKEN>

If you view the methods available to the Test object instance, as I have included the `RSpec::Matchers` the `Capybara::DSL` method 'within' is overridden by the method in the `RSpec::Matchers` module.

Is there anyway to get around this? I basically want to be able to use `expect` within my Test object.  e.g.

<S_CODE_TOKEN>

Please note that if I don't include the `RSpec::Matchers` module then I'm unable to use the expect method. I have the following versions of the gems installed:

capybara (2.4.1)
rspec (3.0.0)
rspec-core (~> 3.0.0)
rspec-expectations (~> 3.0.0)
rspec-mocks (~> 3.0.0) 

Any feedback would be greatly appreciated.

Regards,
Jon
",jonathanchrisp,2014-08-14 18:33:29
1361,2014-07-15 11:26:06,"Just to note the only way I can see getting around this is to set an @session instance variable on initialize and then call the Capybara session directly e.g.

<S_CODE_TOKEN>
",jonathanchrisp,2014-08-14 18:33:29
1361,2014-07-15 16:33:40,"The easiest workaround for this issue in your situation is to change `within` to `page.within`.
",abotalov,2014-08-14 18:33:29
1361,2014-07-16 07:29:37,"Hey @abotalov, thanks for the feedback, I forgot about the page method returning the current session so this would work quite nicely.
",jonathanchrisp,2014-08-14 18:33:29
1360,2014-07-15 08:52:26,,bbatsov,2014-07-15 20:06:54
1360,2014-07-15 20:07:03,"whoops -- thanks
",twalpole,2014-07-15 20:06:54
1359,2014-07-12 02:29:10,"Would it be helpful to update the instructions for the placement of require 'capybara/rspec'? It might even be helpful just to specify that for RSpec 3.x the new location is rails_helper.rb.

==Edit==
The location can be inferred from the initial setup. Closed issue to refrain from redundancy. 
",joeltaylor,2014-07-12 02:44:55
1358,2014-07-08 21:46:51,"trying to install capybara

Gem::Ext::BuildError: ERROR: Failed to build gem native extension.

<S_CODE_TOKEN>
## Building nokogiri using packaged libraries.
## libiconv is missing.  please visit http://nokogiri.org/tutorials/installing_nokogiri.html for help with installing dependencies.

**\* extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.

Provided configuration options:
    --with-opt-dir
    --without-opt-dir
    --with-opt-include
    --without-opt-include=${opt-dir}/include
    --with-opt-lib
    --without-opt-lib=${opt-dir}/lib
    --with-make-prog
    --without-make-prog
    --srcdir=.
    --curdir
    --ruby=/Users/McGroarty/.rvm/rubies/ruby-2.1.2/bin/ruby
    --help
    --clean
    --use-system-libraries
    --enable-static
    --disable-static
    --with-zlib-dir
    --without-zlib-dir
    --with-zlib-include
    --without-zlib-include=${zlib-dir}/include
    --with-zlib-lib
    --without-zlib-lib=${zlib-dir}/lib
    --enable-cross-build
    --disable-cross-build

extconf failed, exit code 1

Gem files will remain installed in /Users/McGroarty/.rvm/gems/ruby-2.1.2/gems/nokogiri-1.6.2.1 for inspection.
Results logged to /Users/McGroarty/.rvm/gems/ruby-2.1.2/extensions/x86_64-darwin-13/2.1.0-static/nokogiri-1.6.2.1/gem_make.out
An error occurred while installing nokogiri (1.6.2.1), and Bundler cannot continue.
Make sure that `gem install nokogiri -v '1.6.2.1'` succeeds before bundling.
Freddys-MacBook-Pro:project_admin McGroarty$ bundle update
",fredmcgroarty,2014-07-08 21:55:05
1358,2014-07-08 21:55:05,"Have you gone to the page the error message tells you and checked the instructions on installing nokogiri there?  If so and it's still not working for you, then file an issue with the nokogiri project
",twalpole,2014-07-08 21:55:05
1357,2014-07-08 16:38:04,"It is convenient to be able to pass in URI objects to `visit`, but
these need to be coerced to a string before actual usage. Most of
visit's code paths would convert the incoming url to a string
as-needed. However, the path used when `always_include_port` is
enabled did not, causing an error where `URI.parse` would try to parse
an existing URI object.

This change consolidates the coercion to string at the entrypoint of
the method.
",shepmaster,2014-07-15 20:07:59
1357,2014-07-08 16:48:02,"Ugg. I can see that this is more-or-less equivalent to @alexpeachey's #1298. However, I think that the arguments about backwards-compatibility are no longer valid, as the current visit code _unconditionally_ calls `to_s`. This change just ensures that the string result is used consistently throughout the method.
",shepmaster,2014-07-15 20:07:59
1357,2014-07-08 18:52:24,"See https://github.com/jnicklas/capybara/pull/1298#issuecomment-48381543

I think changing `# @param [String] url     The URL to navigate to` to `# @param [#to_s] url     The URL to navigate to. The parameter will be casted to String by the method.` would be enough to get this merged.
",abotalov,2014-07-15 20:07:59
1357,2014-07-08 20:50:29,"@abotalov good point - done!
",shepmaster,2014-07-15 20:07:59
1356,2014-07-07 21:14:05,"I have a radio button where the label is an image and it appears to me that capybara cannot select a radio button (or presumably checkbox either) using just the alt text of the image.  It can, however, perform click_link on an image based on alt text.  I realize it becomes sort of murky when you combine text and images with alt text  -- I'm not sure what happens for links in this case -- but does this sound like something capybara should support?  If so, I might investigate generating a pull request for this functionality.  It might, however, require deciding how text is matched when you have images and text combined (concatenation seems like the most obvious choice, although if the image is in front and you want to select by the visible label text, then simple concatenation would not work).  Thanks,

Andrew
",ashanbrown,2014-10-13 17:20:53
1356,2014-07-07 21:34:42,"See https://github.com/jnicklas/xpath/blob/master/lib/xpath/html.rb#L109

As you see it already supports id, name, placeholder, label. So the code that uses it is very ambiguous which (IMO) is bad. Consider the following code:

<S_CODE_TOKEN>

It's not clear how to find using browser console that `something` as you don't know if it's an id, name, placeholder or label after looking at that line of code. Therefore you should invoke irb, run `XPath::HTML.radio_button('something')`, copy giant xpath selector and then execute it in browser console. IMO it's too cumbersome. Instead it should be visible from the first glance if that `something` is  an id/name/placeholder/etc.

So IMO implementation of all those selectors in `XPath::HTML` is too ambiguous and thus bad. I propose you to use non-ambiguous CSS/XPath locators instead (or just chain Capybara methods though it's less performant as it will produce more driver method invocations). It would allow you to debug it in browser console more easily.
",abotalov,2014-10-13 17:20:53
1356,2014-10-13 13:00:11,"Hi,

I am trying to run js headless spec using poltergeist. Using choose to find a radio button by id does not work.

#### Error

<S_CODE_TOKEN>

#### Code

<S_CODE_TOKEN>

What am I missing?
",swathik,2014-10-13 17:20:53
1356,2014-10-13 17:20:53,"@swathik -- Please ask howto questions on the mailing list as requested in the README
",twalpole,2014-10-13 17:20:53
1355,2014-07-07 20:39:22,"I don't fully understand this issue, so this PR is more about putting eyeballs on the problem than proposing a good solution. /disclaimer

Capybara has an issue when filling time fields in Chrome. When using Chromedriver only, calling `navigate.to(""about:blank"")` causes _all_ subsequent attempts to fill inputs with `type=time` to silently fail.

I've set up a [Rails repo](https://github.com/chronophasiac/capybara_test) that illustrates the problem. Clone, `bundle`, and run `bundle exec rspec spec/features`. I would have added a test to Capybara, but I couldn't figure out how to execute the test suite in Chrome instead of FF.

The quick fix that I've implemented for my project is the subject of this PR. For reasons I cannot discern, calling JavaScript to load ""about:blank"" appears not to trigger the bug. Hopefully someone else can dig around and discover the real cause for this issue so a proper solution can be implemented.
",mikeraimondi,2014-07-08 17:52:05
1355,2014-07-07 22:12:32,"As it is reproducible in Chromedriver only it looks like a bug in Chromedriver to me. Please try to file a bug against this project.

Note that to file a bug against Chromedriver you should lower signaficantly number of dependencies (no Rails, PG, etc.) and use Selenium Webdriver ruby binding directly instead of Capybara.
",abotalov,2014-07-08 17:52:05
1355,2014-07-08 17:52:05,"Fair enough. I'm not sure I have enough time right now to track down the bug in Chromedriver, but at least now there's a record that this bug exists. Thanks!
",mikeraimondi,2014-07-08 17:52:05
1354,2014-07-03 23:06:34,"Hi guys,

I know this has been discussed many times, but the problem still remains: it is very challenging to make capybara wait until an asynchronous activity completes. Yes, I appreciate we are expected to write ""appearance-driven"" tests, where a page structure / content changes upon, say, AJAX completion. However, there is always a case everyone disregards for some reason: what if I want to test some complex javascript logic, where no user interface is involved at all? An iconic example would be testing some data transfer layer implemented over an arbitrary library (i.e. jquery, or maybe form-to-iframe submission to compensate against IE's lack of FormData API), which talks to server using some protocol / conventions and changes its inner state respectively. I am perfectly able to invoke any JS code to call methods of my API layer, I can stub test controller to make it respond with some specific data to my javascript and I can assert that certain response types are handled in a proper manner; but how can I tell capybara something like ""hey, just wait until all ajax, iframes, images – who knows which transport I use? – all that stuff to finish loading, let it execute its callbacks, bless the associated JS hooks to complete, and only then give me control so I can asset an javascript object has changed its state"". Is there any way to do that or we are stuck with waiting for jQuery.active to become 0 (which immediately breaks upon stepping away from jquery requiring to handle every kind of transport in a specific way)?

Many thanks in advance.
",yard,2014-07-04 02:08:39
1354,2014-07-04 02:08:39,"What you're describing - a javascript activity that provides no visible change to the page sounds like something more suited for JS unit tests using something like Jasmine.  However if you really want to be testing this using Capybara then you need to be looking for more general asynchronous matchers such as https://github.com/abotalov/waiting_rspec_matchers
",twalpole,2014-07-04 02:08:39
1354,2014-07-04 08:10:49,"Thank you very much for the async matchers reference – will definitely check them out. As for the Jasmine suggesting – I think it is pretty reasonable to have the described feature anyway; maybe it is a more job of a driver, but it sounds pretty obvious to be able to wait for an asynchronous event in an effective manner. And the problem with all the async matchers that I've seen is that they incorporate a classical while (condition) do sleep(x) end loop, which renders to be very ineffective on large test cases (consider a 3k test suite where a 50ms delay is incorporated into these matchers; in the worst case we are adding 2,5 minutes to total execution time just for waiting things).
",yard,2014-07-04 02:08:39
1354,2014-07-04 08:32:02,"> ""hey, just wait until all ajax, iframes, images – who knows which transport I use? – all that stuff to finish loading, let it execute its callbacks, bless the associated JS hooks to complete, and only then give me control so I can asset an javascript object has changed its state""

I don't think it's easy to implement. Please suggest if you have any ideas. It has been discussed many times at Webdriver side. Those are page load strategies that are suggested - https://dvcs.w3.org/hg/webdriver/raw-file/default/webdriver-spec.html#page-load-strategies-1

Anyway, I think this belongs more to Webdriver than to Capybara as doing what you want will require quiet a lot of JS code.
",abotalov,2014-07-04 02:08:39
1354,2014-07-04 13:14:58,"As for high-level ideas I believe the most flexible approach would be introducing some sort of scope/batch/transaction paradigm, which would wrap one or more commands and fire the notification once all the side effects (loading data, executing callbacks, updating DOM etc) of the commands in question have finished. There are tricky parts which are still to be resolved (for instance, setting up a recurring event via setInterval – when to report about its completion?), but for 99% of cases it shall work pretty cool. I understand that is a pretty solid amount of work, but overall sounds quite doable. 

Regarding the place it belongs to – I agree, that is definitely to do with Webdriver (and Capybara shall just expose it via its API). 

Where do you think would be a good place to start a discussion and study the implementation options?
",yard,2014-07-04 02:08:39
1354,2014-07-04 13:37:00,"As it will change remote end interface of Webdriver I suggest you to create an issue in Webdriver W3C tracker - https://www.w3.org/Bugs/Public/enter_bug.cgi?product=Browser%20Test%2FTools%20WG
",abotalov,2014-07-04 02:08:39
1354,2014-07-05 17:53:26,"The issue with this proposal is that every case of ""all the side effects ... have finished"" is different.  What you really mean is, all the side effects I care about for this test have finished   If a custom event thats triggers starts a timer (setTimeout), do we then wait for the timer to finish? As you mentioned, setInterval is a significant issue in defining all side effects have finished, and without answering those sorts of questions there is no way it will make it into the WebDriver spec.  Its also why these are the sorts of issues that Capybara is not designed for, and really isn't the proper tool to be using for testing javascript that has no visible changes to a page.
",twalpole,2014-07-04 02:08:39
1353,2014-07-02 22:18:51,"HTML 5.1 (http://www.w3.org/TR/html51/single-page.html#space-character) defines two methods for normalizing spaces:
- ""skip whitespace"" (that normalizes just 5 characters)
- ""skip White_Space characters"" (that normalizes all Unicode spaces)

Only the first of those algorithms seems to be actually used in the spec.

XML defines only 4 characters as one that should be normalized - http://www.w3.org/TR/xml/#NT-S

See https://gist.github.com/abotalov/19f6f07b2d9cc64f8a59 (HTML), https://gist.github.com/abotalov/df3630771e21bae504c8 (XML) for my evaluations.

What should be changed? (please approve. I think it can be changed in 2.x as it's a bug)
1. `Capybara::Selenium::Node#visible_text` shouldn't do space normalization as Webdriver already does it - https://dvcs.w3.org/hg/webdriver/raw-file/default/webdriver-spec.html#widl-WebElement-getElementText-DOMString)
2. Algorithm of `normalize_whitespace` itself should be changed to do space normalization similarly to how getElementText does it. Some parts of getElementText's algorithm (e.g. processing CSS whitespace style) aren't worth to be checked so the algorithm will be somewhat different.

Initially `normalize_whitespace` was made to handle so many space characters after https://github.com/jnicklas/capybara/issues/767. But it seems to me that this issue is entirely different (or code has changed too much as currently `normalize_whitespace` has nothing to do with `find_link`). Normalization for `find_link` happens in `xpath` gem and #767 is still not fixed and should be fixed there (this is an attempt - https://github.com/jnicklas/xpath/pull/63, however it's incorrect as it shouldn't treat several nbsp as one)
",abotalov,
1353,2014-07-02 22:54:03,"The spec mentions ""The step skip White_Space characters means that the user agent must collect a sequence of characters that are White_Space characters."", but then as you mentioned goes on to never mention a step ""skip White_Space"" ever again.  Is that just because its a WIP and isn't complete yet. or do they really mean that Unicode spaces shouldn't be normalized.  
Either way Capybara has taken the stance that for it all whitespace is normalized - so I think (at least for now) we should leave it that way. 
",twalpole,
1353,2014-07-07 20:56:21,"I filed this issue - https://www.w3.org/Bugs/Public/show_bug.cgi?id=26258

The methods of Webdriver (and Capybara too) try to behave the same as users behave. Users don't see invisible text and Capybara doesn't return it by default. Similarly if browsers render several non-breaking spaces as several spaces, Capybara should also not normalize several non-breaking spaces (currently it normalizes as I noted in examples in previous comment).

However, changing current behavior may break tests of some users (e.g. those relying on Capybara to normalize non-breaking spaces).

So this should be done in Capybara 3.0. The algorithm should be as similar to the algorithm in Webdriver spec is possible (I mean only in those parts that say about whitespace normalization, zero-width spaces removal)
",abotalov,
1352,2014-07-02 18:18:32,,twalpole,2014-07-02 23:56:29
1352,2014-07-02 19:45:36,"Other than this bug the PR looks good to me.
",abotalov,2014-07-02 23:56:29
1352,2014-07-02 20:08:12,"@abotalov I've added descriptions for the rest of the filters - please take a look
",twalpole,2014-07-02 23:56:29
1351,2014-07-01 18:41:10,"Capybara includes xpath as a hard dependency, and xpath depends on nokogiri, which is really hard to build (requires a lot of system libraries in place and at specific, not up to date versions), even on a unix system. It says in the readme that xpath is optional, and not used unless you ask for it. Can we make it truly optional and ask that the end user install it if they want to use it?
",calebmeyer,2014-07-01 18:50:19
1351,2014-07-01 18:49:47,"Where in the readme do you see that xpath is optional?   Using XPath style selectors or CSS style selectors can be chosen by the user, but then nokogiri is used to convert a CSS style selector into an XPath selector in some cases.  On top of that the rack-test driver is fully built on nokogiri, so I don't really see removing the need for nokogiri anytime soon.  A better solution may be to file the issues you're having with building nokogiri on the nokogiri github page, so they can look at making it easier for you.
",twalpole,2014-07-01 18:50:19
1350,2014-07-01 05:57:38,"Hi, 

Every time i call `execute_script` i get `[object HTMLInputElement]` in my rspec output like this: 

<S_CODE_TOKEN>

Code: 

<S_CODE_TOKEN>

Is there any way to omit the output? 

Thanks in advance. 
",bilby91,2014-07-01 06:21:23
1350,2014-07-01 06:21:23,"Please ask questions about using Capybara on the mailing list, as mentioned in the README.  You'll also want to tell people what driver you're using, since I'm 99.9% sure that output is coming from whichever driver you're using and not actually from Capybara
",twalpole,2014-07-01 06:21:23
1349,2014-07-01 02:14:24,,sobrinho,2014-07-01 02:22:17
1349,2014-07-01 02:22:17,"Thanks, I fixed that about 2 hours ago :)
",twalpole,2014-07-01 02:22:17
1349,2014-07-01 02:23:10,"Thanks @twalpole, I didn't pulled from the master :flushed:
",sobrinho,2014-07-01 02:22:17
1348,2014-06-30 06:32:59,"Hello,

Looking at [the code](https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L209), it looks like Capybara considers any URL without scheme to be relative.
Actually, an absolute URL can have an empty scheme: when encountering `//example.com`, browsers will use the same scheme as the current page (thus https://example.com if you're currently on an HTTPS page, or http://example.com otherwise).

Please find my suggestions in this pull request.

Regards,

David
",davidstosik,2015-08-28 18:32:42
1348,2014-06-30 07:29:16,"<S_CODE_TOKEN>
",abotalov,2015-08-28 18:32:42
1348,2014-06-30 07:44:22,"@abotalov Thanks for your comment.
What do you think of my last commit?
",davidstosik,2015-08-28 18:32:42
1348,2014-07-26 21:36:31,"I've digged into this issue a bit more and now would like to say the following:

> Actually, an absolute URL can have an empty scheme: when encountering //example.com, browsers will use the same scheme as the current page (thus https://example.com if you're currently on an HTTPS page, or http://example.com otherwise).

URI reference without scheme is called a relative URI reference (see http://tools.ietf.org/html/rfc3986#section-4.2), not absolute one. Absolute URI reference must start from scheme.

From YARD-ocs of `#visit` method:

> Navigate to the given URL. The URL can either be a relative URL or an absolute URL.

Actually that statement is currently incorrect. Transforming of relative URI reference to the absolute one made by `#visit` doesn't handle most of cases specified by http://tools.ietf.org/html/rfc3986#section-5. However, supporting relative URI references' resolution properly will drastically complicate the algorithm. And I don't see enough reasons to make `visit` compliant with RFC as handling most of those cases is IMHO not needed by Capybara users.

Also changing the algorithm to one from RFC may be backwards incompatible for someone.

For example, some users may currently do something like:

<S_CODE_TOKEN>

In current Capybara version this would open `http://www.example.com/en/something`. This is against RFC but someone may have relied on such implementation (maybe, they looked into Capybara's code, saw that `visit` concatenates strings and relied on such behavior without checking RFCs. Also such ""resolution"" may seem natural.). Therefore I would vote against changing it in 2.x. Note that this PR changes behavior for this case.

However, I think the case pointed by @dstosik is worth supporting as it may be useful in some circumstances.

So I would vote for inserting a ""crutch"" like this in 2.5 instead of this PR:

<S_CODE_TOKEN>

@twalpole WDYT?
",abotalov,2015-08-28 18:32:42
1348,2014-07-31 19:49:04,"Also @dstosik what is your use case? Why do you want this feature?
",abotalov,2015-08-28 18:32:42
1348,2014-08-01 02:52:52,"Hi.
My use case is a test I wrote to ensure that CSS selectors don't go over [IE's limitation of 4095 CSS selectors per file](http://marc.baffl.co.uk/browser_bugs/css-selector-limit/).
To do that I first load the HTML page, then load each CSS file on the page.
As some files are included to the page with pattern `src=""://example.com/my.css""`, I need Capybara to handle this type of URL.
",davidstosik,2015-08-28 18:32:42
1348,2014-08-14 19:28:05,"Your use case is different from what I thought.

I don't think `visit` should be able to handle resolving urls against current_url. You should probably transform relative URI references into absolute ones according to current_url using URI::join or Addressable::URI#join.
",abotalov,2015-08-28 18:32:42
1348,2014-12-25 13:04:33,"We still don't use `URI.merge` for this stuff? I always thought that this code should be rewritten to take advantage of that method, but I can't remember if there were any problems with that or if we/I simply forgot about it.
",jnicklas,2015-08-28 18:32:42
1348,2015-08-27 20:15:10,"I missed this one completely -- will look into it for 2.6
",twalpole,2015-08-28 18:32:42
1348,2015-08-27 23:30:01,"So I pulled the tests for this into another branch and am rewriting visit using URI.merge --- I added a line note on one of the tests since I'm not really sure what its testing -- feedback would be great (and sorry for this having taken so long)
",twalpole,2015-08-28 18:32:42
1348,2015-08-28 09:08:20,"`visit` is a bit strange in the sense that it does accept relative URLs.

There isn't really any user-facing feature in browsers which behaves this way, the user can only ever enter absolute URLs, even thought the browser might fill in the scheme part. I tested in Safari, Chrome and Firefox and all of them do allow protocol relative URLs and actually fill in the scheme, however, the scheme they choose is `file:` and not `http:`.

But this isn't really the same behaviour as Capybara has for `visit` anyway, since `visit` does allow relative URIs, which is more like clicking a link behaves in browsers, though in that case the user wouldn't actually type the address.

So Capybara's current state of this method is probably a bit broken, since it doesn't actually simulate any user behaviour, which is what Capybara claims to do. Changing it would break compatibility though, so it's probably not a great idea.

I'm not sure what the conclusion of this is. It would be consistent with allowing relative URIs to allow protocol relative URIs as well, but allowing relative URIs is kinda broken in the first place so  ¯_(ツ)_/¯.
",jnicklas,2015-08-28 18:32:42
1348,2015-08-28 18:32:42,"After thinking about this and looking through the tests I think all this boils down to is defaulting scheme to http when not specified, which I'm not convinced is necessarily valid.  I definitely agree with @abotalov that we should not be resolving against current_url for calls to Session#visit, since calls to visit really are about setting up the state of the browser in order to then interact with it, not about loading stuff relative to the current page.
",twalpole,2015-08-28 18:32:42
1347,2014-06-29 23:58:42,"The screenshot path will not start with `capybara/` for 3rd drivers like
poltergeist since they aren't on capybara itself.

See https://travis-ci.org/teampoltergeist/poltergeist/jobs/28737963#L534
",sobrinho,2014-07-01 00:21:40
1347,2014-07-01 00:21:45,"thanks
",twalpole,2014-07-01 00:21:40
1346,2014-06-29 22:29:14,,sobrinho,2014-06-29 22:39:45
1346,2014-06-29 22:39:49,"thanks
",twalpole,2014-06-29 22:39:45
1345,2014-06-26 18:59:01,"Previous behavior didn't match behavior of other methods: there should not be additional check for `window.closed?` after wait time had elapsed.
",abotalov,2014-06-27 21:23:01
1344,2014-06-23 07:07:50,"Hi,
I'm expecting problem with has_content? - it returns true independent of page content in my code

<S_CODE_TOKEN>

How to fix it?
",alec-c4,2014-06-23 09:05:54
1344,2014-06-23 09:05:54,"expect(page).to have_text(string)
",abotalov,2014-06-23 09:05:54
1344,2014-06-23 10:02:37,"<S_CODE_TOKEN>
",alec-c4,2014-06-23 09:05:54
1344,2014-06-23 10:11:41,"i'm using minitest, but not rspec
",alec-c4,2014-06-23 09:05:54
1343,2014-06-20 21:51:14,"In RSpec 2 :file_path appears to be delegated to :example_group metadata so the same format works for both
",twalpole,2014-06-23 19:07:55
1342,2014-06-20 01:00:57,,twalpole,2014-06-20 01:01:08
1341,2014-06-19 20:37:50,"<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Should `have_content`, `have_text`, and anything that deals with a text node decode or strip HTML entities?
",amccloud,2014-06-19 21:21:31
1341,2014-06-19 21:19:27,"Nope -- The documentation from has_text? which have_text is a matcher based on states - 
# Checks if the page or current node has the given text content,
# ignoring any HTML tags and normalizing whitespace.
This is referring to stripping the tags and normalizing whitespace of the page contents,
and is behaving exactly as designed, and is designed to match what the user would actually see on the page.
",twalpole,2014-06-19 21:21:31
1340,2014-06-19 18:34:07,"Often there's a need to wait for something that doesn't worth to have its own matcher. Some examples below:
- reload non-AJAX page until some element/text appears
- wait for a particular request to be sent through the proxy
- wait for page url/path to become ""some_string""
- wait for response headers array to contain some header (#1092)
- wait for element attribute to eq/include ""some_string""

Most of existing gems like retryable provide ability to specify number of attempts instead of wait time and thus aren't Capybara style. Here are some of those gems:
https://github.com/carlo/retryable
https://github.com/lionelbarrow/retry
https://github.com/raul/retry_upto
https://github.com/krautcomputing/tries
https://github.com/kammerer/retrying
https://github.com/afazio/retry_block
https://github.com/carwoo/retry_anything
https://github.com/foursquare/wait
https://github.com/MYOB-Technology/wait_until (this doesn't provide a way to specify rescued exceptions)

IMO the most elegant way to handle some of use cases above is to provide a new rspec matcher (see https://github.com/rspec/rspec-expectations/issues/580) as matchers like `eq` or `include` would produce very nice error messages. But it seems (https://github.com/rspec/rspec-expectations/issues/536#issuecomment-40988582) RSpec maintainers don't like idea to make `eq` work in such way.

So the other idea is to produce RSpec matchers like `eq_after`/`include_after` so they won't interfere with rspec matchers.

Some other use cases (e.g. ""reload page until some element/text appears"") can technically be handled in this way but not very elegantly:

<S_CODE_TOKEN>

So I think it would be a good idea to also add a method similar to `sunchronize` to `Capybara::DSL`:

<S_CODE_TOKEN>

WDYT?
",abotalov,2014-06-24 18:14:50
1340,2014-06-19 19:40:18,"I think this may be too general to be in capybara, and might be better as a separate gem of ""asynchronous matchers"" or something.  I use a set of matchers like the following

<S_CODE_TOKEN>

for situations like this ..     become, become_truthy, become_falsy, become_&lt;predicate&gt;
and then use it like

<S_CODE_TOKEN>
",twalpole,2014-06-24 18:14:50
1340,2014-06-19 19:47:21,"@twalpole Currently I use something similar to your solution but I don't quiet like it as block returns either `true` or `false`.

Instead block should contain proper rspec expectation so user would see error message with more data about the error (e.g. which text appeared on the page instead of desired).
",abotalov,2014-06-24 18:14:50
1340,2014-06-19 19:53:55,"ok - so the matcher could rescue RSpec::Expectations::ExpectationNotMet errors raised in the block and append the message from the last error raised onto the failure_message.   Again this seems like a general thing and not Capybara specific to me
",twalpole,2014-06-24 18:14:50
1340,2014-06-22 15:15:45,"After starting writing code I actually also came up to a decision that it's out-of-scope of Capybara. But it's still useful to its users. Here is it - https://github.com/abotalov/waiting_rspec_matchers

I would be happy if you'll review it. If it will be OK I will will publish it to Rubygems. Also it would allow to close issues like https://github.com/jnicklas/capybara/issues/1092 as `waiting_rspec_matchers` would handle those cases (if user uses rspec-expectations).
",abotalov,2014-06-24 18:14:50
1340,2014-06-23 19:26:47,"If user doesn't use rspec-expectations he can handle it using one of retriable gems or by writing similar gem for his assertion library.
",abotalov,2014-06-24 18:14:50
1340,2014-06-24 10:16:25,"I've just pushed some improvements to it.
",abotalov,2014-06-24 18:14:50
1340,2014-06-24 16:22:05,"@abotalov since you're using method_missing you should probably also be defining respond_to_missing? .  Other than that I think the gem is solving the issue presented.  I don't necessarily like the  phrasing  'become_have_css', but I havent come up with anything better.  We should probably close this issue now, and move any further discussions over to your gem.
",twalpole,2014-06-24 18:14:50
1340,2014-06-24 18:14:50,"@twalpole Thanks, I defined respond_to_missing?
",abotalov,2014-06-24 18:14:50
1339,2014-06-19 17:21:24,"Fixes #1336 
",abotalov,2014-06-20 00:59:08
1339,2014-06-20 00:59:14,"thanks
",twalpole,2014-06-20 00:59:08
1338,2014-06-18 23:36:51,,twalpole,2014-06-23 19:07:30
1338,2014-06-19 12:02:54,"@twalpole seems fine for me, just the double check that @abotalov mentioned has to be changed :shipit: 
",sobrinho,2014-06-23 19:07:30
1338,2014-06-19 15:43:05,"ok -- fixed the double check -- anyone have a preference between   :fill_options and :set_options as the key that will be propagated from fill_in to set?
",twalpole,2014-06-23 19:07:30
1338,2014-06-19 16:22:30,"I vote for `fill_options`.

Also I think that there should be a way to not clear text field before trying to set its value. Should this possibility be added as a new method or just as a key for `fill_options`?
",abotalov,2014-06-23 19:07:30
1338,2014-06-19 16:55:22,"I think not clearing is a key passed to fill_options, and is driver specific (obviously it would be good to get some agreement between drivers on some of these options)
",twalpole,2014-06-23 19:07:30
1338,2014-06-23 02:00:27,":shipit: 
",sobrinho,2014-06-23 19:07:30
1337,2014-06-18 22:30:27,"Hi, sorry for bad English.

I'm trying to move to Rails 4.1.1 (by the words i'm also tried 4.1.0, and branches 4-1-2, 4-1-stable) and got error in tests. Capybara doesn't work correctly. I made demo repository 
https://github.com/woto/capybara_rails the test passes but, the page isn't loaded. The image from save_screenshot is blank. I'm talking about poltergeist, but webkit or selenium also don't work.
",woto,2014-06-18 22:55:03
1337,2014-06-18 22:42:24,"Forget to mention that Capybara + Poltergeist/WebKit/Selenium correctly works with Rails 4-0-stable branch in my current project
",woto,2014-06-18 22:55:03
1337,2014-06-18 22:55:03,"Usability questions should be asked on the mailing list
",twalpole,2014-06-18 22:55:03
1337,2014-06-18 23:05:52,"Did you even read the message? I waste a time to report a problem. May be title Capybara don't work with Rails 4.1 wold be better?

The question to others. Can you confirm a problem with test repository.

Anyway many thanks to author.
",woto,2014-06-18 22:55:03
1337,2014-06-18 23:08:30,"ps. It's not usability problem, can you reopen issue?
",woto,2014-06-18 22:55:03
1337,2014-06-19 00:19:14,"Yes I read the message - you got errors in test after moving to rails 4.1.1 but you have provided no details of any of the errors - the repository you created doesnt require the necessary file (as documented in the readme) - so the error your repo shows is not in Capybara - its user error.  If you can actually provide details of a problem with Capybara and rails 4.1.1 then we'll reopen this, otherwise its user error and should be discussed on the mailing list
",twalpole,2014-06-18 22:55:03
1337,2014-06-19 04:19:32,"Damn, you totally right. On casual coincidence i've got same wrong behaviour of Capybara. But in project (not demo) the missed line require 'capybara/rails' is included. I thought that this is problem because of moving to Rails 4.1.1. I'll try to localize problem in project knowledge of that there are no problems with pair Rails 4.1.1 + Capybara. Thanks. Best regards.
",woto,2014-06-18 22:55:03
1336,2014-06-18 18:58:35,"`Session#visit` doesn't work correctly with e.g. `about` scheme:

<S_CODE_TOKEN>

I propose to change :

<S_CODE_TOKEN>

to:

<S_CODE_TOKEN>

I think this is a backwards-compatible fix. @twalpole do you agree?
",abotalov,2014-06-20 00:59:08
1336,2014-06-18 20:00:39,"This won't work since a : is valid in a url path - as long as its not in the first section of a relative path.   http://www.ietf.org/rfc/rfc3986.txt  section 3.3

abcd:ef/something   -- not a valid relative path
abcdef/some:thing  -- valid relative path
/abcd:ef     -- valid absolute path

a better solution would be to check for ^http:   or ^about:  if those are the only schemes to be supported, or URI:parse the url and check for the existence of a scheme or not.   Also doesnt the same issue exist a couple of lines later in

<S_CODE_TOKEN>
",twalpole,2014-06-20 00:59:08
1335,2014-06-18 18:38:04,"Using Capybara 2.3.0

As you can see from this test failure (which only happens sometimes), have_content is just not working sometimes (compare the last line to what's expected to be found):

<S_CODE_TOKEN>
",TrevorHinesley,2014-06-18 18:53:11
1335,2014-06-18 18:43:13,"I think this is the duplicate of https://github.com/jnicklas/capybara/issues/1179
",abotalov,2014-06-18 18:53:11
1335,2014-06-18 18:44:15,"I see. Is there a workaround? What's the resolution?
",TrevorHinesley,2014-06-18 18:53:11
1335,2014-06-18 18:45:46,"This bug isn't yet fixed. The workaround is to increase wait time.
",abotalov,2014-06-18 18:53:11
1335,2014-06-18 18:45:55,"Hmm alright thanks I'll give it a shot.
",TrevorHinesley,2014-06-18 18:53:11
1335,2014-06-18 18:53:11,"Yes this appears to be a duplicate of #1179 however I wouldnt say a ""workaround"" is to increase the wait time,  the solution to the test failing is to increase the wait time, or speed up your app.  Whats happening is the page is finally changing between the time have_content stops checking for the correct text, and the time the error message is generated. So even if the error message was correct your test would still  be failing occasionaly. unless you increase the wait time or speed up your app - Anyway - closing as a duplicate of #1179
",twalpole,2014-06-18 18:53:11
1334,2014-06-16 16:48:02,"This issue is to start a dialog regarding porting the RSpec 3 matcher updates to the 2.2.x line. Currently, RSpec 3 has a check to make sure capybara is at least 2.2.0. However, due to the matchers in the 2.2.x line not implementing the new RSpec 3 API anyone using these versions will get deprecation notices.

Due to the tight coupling between these two libraries, I'd like to purpose adding something to the 2.2.x line so that we do not need to push out a new breaking change in rspec-rails.
",cupakromer,2014-06-17 15:34:13
1334,2014-06-16 16:53:18,"> Due to the tight coupling between these two libraries, I'd like to purpose adding something to the 2.2.x line so that we do not need to push out a new breaking change in rspec-rails.

As I commented on the rspec-rails issue (after you were already working on opening this, apparently!), I don't think that backporting this does anything to help the rspec-rails issue because we simply can't change what minimum capybara version we require (even if it's just a patch-level bump) and say we are SemVer compliant.
",myronmarston,2014-06-17 15:34:13
1334,2014-06-16 18:57:22,"I don't think backporting to 2.2.x is worth the effort for this, and as @myronmarston says wouldn't really fix the issue.  rspec-rails will work with capybara 2.2.0 just with deprecation warnings, and those warnings go away with capybara 2.3.x, so as long as the rspec-rails check is for >= 2.2.0 most people will update to capybara 2.3.x (and 2.4.x within the next couple of weeks) which don't have any backward breaking changes just add new features/support and get rid of the warnings.   I would however say the rspec-rails Gemfile should probably specify  ~>2.2   instead of ~>2.2.0  so tests can be run with the latest capybara 2.x versions instead of just 2.2.x versions.
",twalpole,2014-06-17 15:34:13
1334,2014-06-17 15:34:13,"Agreed.
",cupakromer,2014-06-17 15:34:13
1333,2014-06-14 18:56:39,"https://github.com/JonleePeakman/guardtest

generated app via: 'rails new guardtest'
edited gem file as per GIT repo, generated rspec:install and edited spec_helper.rb:
require 'rails'
require 'rspec/core'
require 'capybara/rspec'
require 'capybara/rails'

and ensured config.include Capybara::DSL in config block.

error:

/home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/capybara-2.3.0/lib/capybara/rails.rb:15:in `<top (required)>': undefined method`join' for nil:NilClass (NoMethodError)
    from /home/jonlee/Projects/rails/guardtest/spec/spec_helper.rb:4:in `require'
    from /home/jonlee/Projects/rails/guardtest/spec/spec_helper.rb:4:in`<top (required)>'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/lib/rspec/core/configuration.rb:1018:in `require'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/lib/rspec/core/configuration.rb:1018:in`block in requires='
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/lib/rspec/core/configuration.rb:1018:in `each'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/lib/rspec/core/configuration.rb:1018:in`requires='
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/lib/rspec/core/configuration_options.rb:101:in `block in process_options_into'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/lib/rspec/core/configuration_options.rb:100:in`each'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/lib/rspec/core/configuration_options.rb:100:in `process_options_into'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/lib/rspec/core/configuration_options.rb:22:in`configure'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/lib/rspec/core/runner.rb:96:in `setup'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/lib/rspec/core/runner.rb:85:in`run'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/lib/rspec/core/runner.rb:70:in `run'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/lib/rspec/core/runner.rb:38:in`invoke'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/gems/rspec-core-3.0.1/exe/rspec:4:in `<top (required)>'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/bin/rspec:23:in`load'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/bin/rspec:23:in `<main>'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/bin/ruby_executable_hooks:15:in`eval'
    from /home/jonlee/.rvm/gems/ruby-2.1.1@railstutorial_rails_4_0/bin/ruby_executable_hooks:15:in `<main>'
",JonleePeakman,2014-06-14 19:22:11
1333,2014-06-14 19:22:11,"Looks like your rails environment isn't actually being loaded, as a guess you probably want to be using the rspec-rails gem.
Please ask usage questions on the mailing list
",twalpole,2014-06-14 19:22:11
1333,2014-06-14 20:02:53,"Looking further at this you have spec/rails_helper.rb which I believe is generated by the rspec-rails currently in beta, but you're not using that in your project?  Without the beta rspec-rails I don't think rails_helper.rb gets read, and the really important line in that file is

<S_CODE_TOKEN>

since thats calls

<S_CODE_TOKEN>

which is what will actually load/initialize your app and set your Rails.root
",twalpole,2014-06-14 19:22:11
1333,2014-06-14 20:04:46,"Yes that's right, addded to spec_helper.rb and solved the issue.
",JonleePeakman,2014-06-14 19:22:11
1332,2014-06-14 03:08:41,"because capybara/rspec requires rspec-core, but not rspec.
",hanachin,2014-06-14 19:22:30
1332,2014-06-14 03:23:12,"It cause error when you use `capybara/rspec` without `rspec`.

The sample project is here, add `rspec-rails` and `capybara` to new rails project.
`rspec-rails` automatically loads `capybara/rspec` and causes error.

https://github.com/hanachin/rspec-rails-example

<S_CODE_TOKEN>
",hanachin,2014-06-14 19:22:30
1332,2014-06-14 19:22:34,"Thanks
",twalpole,2014-06-14 19:22:30
1332,2014-06-15 08:03:43,"welcome :smiley: 
",hanachin,2014-06-14 19:22:30
1331,2014-06-13 18:52:20,"When I upgraded selenium webdriver from 2.41.0 to 2.42.0, capybara started opening firefox in native retina mode (i.e. very small pixels and many of them).  I don't know if this is a bug/regression in selenium webdriver or whether capybara needs to change some control to prevent this.  I'm using Firefox 30.  I'd welcome any tips about how to fix/work around this.  Thanks.
",ashanbrown,2014-06-13 20:53:31
1331,2014-06-13 20:48:40,"Was the only change you made 2.41.0 to 2.42.0 or was it also from FF 29 to FF30?  I don't have access to a retina mbp currently so I can't replicate this issue -- it might be best to post something over on selenium, although I don't think they claim support for FF30 yet.
",twalpole,2014-06-13 20:53:31
1331,2014-06-13 20:53:31,"actually - here is the issue on selenium https://code.google.com/p/selenium/issues/detail?id=7445
",twalpole,2014-06-13 20:53:31
1331,2014-06-13 21:18:49,"Thanks for finding the issue.  I did confirm that the problem was only changing from 2.41.0 to 2.42.0.  I imagine it's unlikely that selenium-webdriver will change back, but I could be wrong.  Are we saying that the solution is just to hit Ctrl-+ if you want to see what's going on in your capybara tests on a macbook pro?  Or should we request a change from selenium-webdriver that allows capybara to override the value of layout.css.devPixelsPerPx?  I love that capybara is easy to set up and work with.  Any issue that interferes with that seems like it might be worthy some sort of fix or workaround.  I don't think I'm the only one out here with a retina macbook pro, although I would be curious of others see the same issue.
",ashanbrown,2014-06-13 20:53:31
1331,2014-06-13 23:00:49,"@dontfidget the issue is that selenium has locked the setting, so we couldn't override it even if we wanted to.  On top of that the reason it was locked was to fix an issue of missing clicks, which I think, in the short term, is more important than font sizes on retina screens. Longer term I hope selenium fixes the missing clicks issue without locking the pixels value.  The issue linked above has been accepted and someone is workings on it, so hopefully a better fix will be in 2.43
",twalpole,2014-06-13 20:53:31
1331,2014-06-14 18:54:34,"Thanks for the details.  I'm just not familiar enough with how this selenium-webdriver so I appreciate your interpretation of what's happening with that issue.
",ashanbrown,2014-06-13 20:53:31
1330,2014-06-12 23:47:38,"Not really sure how to test this -- maybe a completely separate spec.  Not sure its worth it.
",twalpole,2014-06-13 04:55:19
1329,2014-06-12 18:24:10,,twalpole,2014-06-12 19:24:21
1328,2014-06-11 18:56:56,,twalpole,2014-06-12 23:46:14
1328,2014-06-11 19:00:33,"@jnicklas  The real issue with this is that HaveSelector needs to catch the Capybara::ExpectationNotMet exception and then ends up raising an RSpec::Expectations::ExpectationNotMetError  exception.   This may necessitate waiting for a major version update if there was a guarantee of HaveSelector raising Capybara::ExpecationNotMet on failure.   I don't see it documented (or specifically tested) anywhere.  What would your thoughts on it be?
",twalpole,2014-06-12 23:46:14
1328,2014-06-11 19:05:43,"I think it should be done in major version.
",abotalov,2014-06-12 23:46:14
1328,2014-06-11 19:09:11,"It wasn't documented but it's a quiet well known (and reliable) fact that those methods raise `Capybara::ExpectationNotMet` error - http://stackoverflow.com/search?q=%5Bcapybara%5D+ExpectationNotMet
",abotalov,2014-06-12 23:46:14
1328,2014-06-11 19:14:11,"Also as this is backwards incompatible change please take a look on https://github.com/jnicklas/capybara/pull/1246 as it refactors this code too (I know that I should rebase it, maybe fix something, include Composable, etc.)
",abotalov,2014-06-12 23:46:14
1328,2014-06-11 19:27:18,"@abotalov all of the entries I looked at in that search were people trying to figure out why their matcher was failing, none of them seemed to be people rescuing that specific exception.  I'm not convinced this needs to go into a major release.
",twalpole,2014-06-12 23:46:14
1328,2014-06-13 13:25:42,"Is there a release cycle for capybara, wondering when this will make it into the gem?
",DaveBlooman,2014-06-12 23:46:14
1328,2014-06-13 16:30:06,"@DaveBlooman There is no fixed release cycle.  I'm aiming for the next release in 1-2 weeks
",twalpole,2014-06-12 23:46:14
1328,2014-06-13 16:31:56,"Thanks for update and the PR.
",DaveBlooman,2014-06-12 23:46:14
1327,2014-06-10 21:52:39,"Hello,

Thanks for the outstanding gem! I'm looking for help on how to test something.

In my software, I have a dynamically generated file input that is actually triggered by a button click event. While I could use capybara `attach_file` directly on the file input, I would rather use the button.

After click in the button, I can even see the file browser opening in chrome. Is there a way to select a file?

Thanks!
",fotanus,2014-06-10 22:09:32
1327,2014-06-10 22:09:32,"Please ask questions about using Capybara on the mailing list, as instructed in the README 
",twalpole,2014-06-10 22:09:32
1326,2014-06-10 09:01:10,"I have the following html saved with the save_and_open_page command right before the capybara selectors are run (I've also checked page.body, it's the same): https://gist.github.com/davidkovaccs/8991af5bed1805277f52

I get the following error message: 'expected to find xpath ""//div[@class='box']"" 9 times, found 6 matches: ""box_2001 attrkulcs1: attrvalue 1 attrkulcs2: attrvalue 2 attrkulcs3: attrvalue 3"", ""box_2002 attrkulcs1: attrvalue 1 attrkulcs2: attrvalue 2 attrkulcs3: attrvalue 3 attrkulcs4: attrvalue 4"", ""box_2003"", ""box_1001"", ""box_1002 attrkulcs1: attrvalue 1 attrkulcs2: attrvalue 2 attrkulcs3: attrvalue 3"", ""box_1003 attrkulcs1: attrvalue 1"". Also found """", """", """", which matched the selector but not all filters. (Capybara::ExpectationNotMet)'

Note that the found 6 matches is not 6 for every test run. it a number between 4 and 9. I don't really understand what can be the 'matched the selector but not all filters' statement. As I know I'm not using any filters.

I've tried the following selectors, but all of them gives the same error message:

have_xpath(""//div[@class='box']"", :count => 9)
have_selector(:css, '.box', :count => 9)
have_css('.box', :count => 9)
I've tried it with capybara 2.2.1 and 2.3.0 also. I'm using Selenium webdriver 2.42.0

Running $x(""//div[@class='box']"").length from browser console works perfectly.
",davidkovaccs,2014-06-10 14:44:57
1326,2014-06-10 14:25:35,"You are actually using filters count and visible (defaults to true)  without the relevant css it's impossible to say for sure, however the three empty sets of quotes would tend to indicate that 3 of the .box elements weren't actually visible on the page 
",twalpole,2014-06-10 14:44:57
1326,2014-06-10 14:44:57,"Thanks for your help, this was the problem indeed! With a :visible => false flag it works perfectly.
This existance of this visible parameter was not clear for me and I couldn't found anything related to this on the web.
Thanks anyway!
",davidkovaccs,2014-06-10 14:44:57
1326,2014-06-10 16:41:34,"@davidkovaccs just FYI - but visible defaults to true since in most cases when doing user interaction tests one wants tto make sure the content is actually visible to the user
",twalpole,2014-06-10 14:44:57
1325,2014-06-09 08:59:26,"please see attachment for html code.
![capture](https://cloud.githubusercontent.com/assets/3436711/3214871/60c98604-efb7-11e3-967b-a3ae1dae59dd.PNG)

JS script:
var languageDropdown = $(""#wcc-sel-language-root"");
    if (languageDropdown.length > 0) {
        languageDropdown.combobox({
            id: ""wcc-sel-language"",
            name: ""languageID"",
            width: ""auto"",
            attr: {""aria-describedby"": ""tip-language""},
            defaultValue: ""12"",
            data: [{""value"":""12"",""label"":""Latin American Spanish""},{""value"":""10"",""label"":""Italian""}],
            click: onLanguageChange
        })
    }
",leevyzz,2014-06-09 14:34:33
1325,2014-06-09 14:34:33,"Usage questions belong on the mailing list
",twalpole,2014-06-09 14:34:33
1324,2014-06-06 09:06:36,"Hi,

I have a rails app that is mounted in a subdirectory like this:

<S_CODE_TOKEN>

This works in dev and production as intended and puts my app in http://<host>/central

Sadly Capybara ignores these settings. This is no problem, when running in rack_test mode. But when using webkit or selenium, things break because js and css files are not loaded, because links are pointing to '/central/assets'.

What I'm missing is an option like:

<S_CODE_TOKEN>

Or something equivalent. Is there any way to achieve this? I've been looking at the source, but couldn't find a way.

Can someone help? 

Thanks in advance!

Roberto
",robotex82,2014-06-06 16:30:54
1324,2014-06-06 16:30:54,"I don't think its worth handling this use case with new settings in Capybara, however it should be easy enough for you to set it up to work.  Don't require capybara/rails, and instead use that file as the basis to create your own that mounts at '/central' instead of the / that lib/capybara/rails.rb does.  Basically you're treating it more as just a rack app, rather than anything special about rails.  Please ask future usability questions in the mailing list
",twalpole,2014-06-06 16:30:54
1323,2014-06-05 16:42:46,"As the title suggests, the code that's hanging up is:

<S_CODE_TOKEN>

It gets to the line with `window.location.href = data.path` but never actually redirects, it just sits there.
",TrevorHinesley,2014-06-05 19:02:01
1323,2014-06-05 17:55:22,"This is code you're running in the browser -- how is this code in any way related to being a capybara issue?
",twalpole,2014-06-05 19:02:01
1323,2014-06-05 18:07:20,"Honestly, I thought I posted this in one of the JS drivers' issues pages. My mistake. Feel free to close!—
Sent from my iPhone

On Thu, Jun 5, 2014 at 12:55 PM, Thomas Walpole notifications@github.com
wrote:

> ## This is code you're running in the browser -- how is this code in any way related to being a capybara issue?
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/1323#issuecomment-45252384
",TrevorHinesley,2014-06-05 19:02:01
1322,2014-06-03 20:16:28,"This extends on PR #1037 
",twalpole,2014-07-01 06:24:46
1322,2014-06-03 20:25:19,"IMO the following code isn't a good read:

<S_CODE_TOKEN>

When I read it it wasn't clear to me if `'Linus Torvalds'` is a message shown in the modal or the text entered into the text input.

Do you see see some way to solve it?
",abotalov,2014-07-01 06:24:46
1322,2014-06-03 20:27:02,"What about?

<S_CODE_TOKEN>
",abotalov,2014-07-01 06:24:46
1322,2014-06-03 20:34:44,"I don't have an issue with respond_to_prompt - its the only one of the new methods that has a required parameter and I think its relatively clear that parameter is what will be entered into the prompt
",twalpole,2014-07-01 06:24:46
1322,2014-06-03 21:08:59,"@abotalov hmmm -- I'm having second thoughts about respond_to_prompt -- maybe the parameter should be :with so it matches up with fill_in ---  I need to think about this a bit longer
",twalpole,2014-07-01 06:24:46
1322,2014-06-03 21:53:12,"> hmmm -- I'm having second thoughts about respond_to_prompt -- maybe the parameter should be :with so it matches up with fill_in --- I need to think about this a bit longer

I think `:with` is not a good parameter too:

<S_CODE_TOKEN>

IMO it may mean `Respond to prompt that contains 'Linus Torvalds'`.
",abotalov,2014-07-01 06:24:46
1322,2014-06-26 22:58:11,"cc @jferris, this is a continuation of #1037, which I believe you had spent some time looking into. I've not gotten up to speed on where this API is currently, but this is something we should have on the radar for capybara-webkit.
",mhoran,2014-07-01 06:24:46
1321,2014-06-02 22:49:56,"IF an anchor element with no href is clicked on - Racktest follows it as if href was '/'  -- this is incorrect -- correct behavior should be to do nothing
",twalpole,2014-06-02 23:26:45
1320,2014-06-02 09:36:01,"I ran into issue similar to this: http://stackoverflow.com/questions/18693683/cucumber-capybara-tests-fail-randomly-under-phantomjs

Then in Node::Base.synchronize method I found a line
sleep(0.05)
My guess is that capybara floods web-server with requests. 
Also, it would be nice to pass 0.05 as a parameter like default_wait_timeout.
",0xorial,2014-06-04 00:24:55
1320,2014-06-04 00:24:55,"Setting automatic_reload to false by default would completely remove Capybaras ability to wait for elements to appear on a page, and it is documented as one of the Capybara config options

<S_CODE_TOKEN>

From your comment you seem to think that it is telling the browser to continuously refresh the page - that is not what its doing at all, and would not be causing a flood of requests against the web-app.  What it does is automatically reanalyze the element finders as the page is changed by javascript, or loading,
",twalpole,2014-06-04 00:24:55
1319,2014-05-31 22:28:04,"# TL;DR

We need to be able to customise the behaviour of `Node#set` somehow on our driver to trigger blur or not after filling the field, i.e.:

<S_CODE_TOKEN>
# Long Version

Capybara's fill_in extract the :with option and pass it to `Node#set` and we are not able to receive any option from the user.

That's necessary in some specific use cases where the behaviour for fill_in needs to be slight different.

The default behaviour for poltergeist and probably other drivers, as can be seen [here](https://github.com/teampoltergeist/poltergeist/blob/master/lib/capybara/poltergeist/client/agent.coffee#L181-L203), is:
1. Clear input value
2. Trigger focus event
3. Trigger keydown event
4. Append the character
5. Trigger keypress event
6. Trigger keyup event
7. Repeat 3 to 6 for every received character
8. Trigger change event
9. Trigger input event
10. Trigger blur event

We need to be able to be able to receive on poltergeist if the blur event must happen or not.

It's really useful for autocompletes, i.e.: Typeahead and jQuery UI Autocomplete, where the autocomplete options is shown after you stop typing but is still focused on the input.

When the input loses the focus, it get's closed, so we can't chose any option from autocomplete.

There is some recommendations on web to circumvent this ""problem"" using a custom helper, like this:

<S_CODE_TOKEN>

Receiving the options on `Element#set`, would allow us to do this:

<S_CODE_TOKEN>

At my first PoC, I changed the capybara from:

<S_CODE_TOKEN>

To:

<S_CODE_TOKEN>

And after that I changed signature of `Capybara::Poltergeist::Node#set` to receive 2 arguments, so I received the options and customised the blur event to happen or not.

What do you think, guys?

I think that would be useful for all drivers for all kind of stuff, like [this one](https://github.com/teampoltergeist/poltergeist/issues/488).
",sobrinho,2014-07-01 22:47:30
1319,2014-06-02 19:53:20,"This is something that would probably be useful, however it also breaks the driver API so couldnt be implemented before 3.0, unless there was checking for the arity of the drivers set method and only pass the options if the method supports more than one parameter
",twalpole,2014-07-01 22:47:30
1319,2014-06-02 20:04:58,"I would chose to check the method arity to make it backwards compatible, so, we can do a minor release to support this.
",sobrinho,2014-07-01 22:47:30
1319,2014-06-05 18:22:47,"@sobrinho Are you planning on submitting a PR for this?
",twalpole,2014-07-01 22:47:30
1319,2014-06-10 01:28:23,"I will submit a pull request this week ;)
",sobrinho,2014-07-01 22:47:30
1319,2014-06-18 23:40:47,"@sobrinho please take a look at PR #1338 and see if that will meet the needs.   I changed your idea a little bit by passing the options through as  :fill_options to prevent option clashes with those that can be passed to the finder.  so now it would be

<S_CODE_TOKEN>
",twalpole,2014-07-01 22:47:30
1319,2014-07-01 22:47:30,"Closing since this is in master now
",twalpole,2014-07-01 22:47:30
1318,2014-05-31 21:25:15,"I've searched online and I am unable to find how to test a feature with a page that includes a form. Further how do you navigate to that form and test it's elements?
",davidimoore,2014-05-31 21:32:07
1318,2014-05-31 21:32:07,"Pleas ask usage questions on the mailing list
",twalpole,2014-05-31 21:32:07
1318,2014-05-31 21:52:07,"Ok will.
",davidimoore,2014-05-31 21:32:07
1317,2014-05-29 16:46:35,"Updates examples to click form button instead of a link and filling in fields labled as Email instead of Login.

Clean and full version of #1315  and #1316 pull requests.
",stgeneral,2014-07-03 18:03:54
1317,2014-05-29 17:45:38,"What is the reason for this change?  Capybara is not Devise specific, or even Rails specific - and neither are the examples in the README
",twalpole,2014-07-03 18:03:54
1317,2014-05-29 17:56:17,"@twalpole the main reason is to make examples workable because click_link won't submit form.
And bit more logical user in example is created with email (not login) field.

Devise was just an example of widely used case.
",stgeneral,2014-07-03 18:03:54
1317,2014-07-03 13:53:10,"LGTM
",abotalov,2014-07-03 18:03:54
1316,2014-05-29 15:36:55,"Update fill_in to match created user fields.
Also, email is used by default in devise.
",stgeneral,2014-05-29 16:47:20
1316,2014-05-29 16:34:47,"You should probably update other places where `fill_in 'Login'` is used
",abotalov,2014-05-29 16:47:20
1315,2014-05-29 15:34:27,"It should click button on the form instead of a link.
",stgeneral,2014-05-29 16:46:53
1315,2014-05-29 16:35:24,"You should probably update other places where `click_link 'Sign in'` is used.
",abotalov,2014-05-29 16:46:53
1314,2014-05-28 23:44:03,"In https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L135-L141 there is documented `A snapshot of the DOM of the current document, as it looks right now (potentially modified by JavaScript).`

This is not the case for me. In my [example](https://github.com/innsbruck-rb/innsbruck-rb.at/blob/master/spec/features/admin_spec.rb#L3-L15), `page.html` only contains the javascript DOM changes after `expect(page).to have_content` and therefore `page.has_content?` is executed.

Don't know if this should be considered as bug or this is a desired behaviour.
",tak1n,2014-05-28 23:52:46
1314,2014-05-28 23:52:46,"I'm not 100% sure I understand what you're saying here - but I think you're saying that if you check page.html for something its not there, but after the matcher runs it is?   That would be expected since the matchers will wait a specified amount of time for the condition to become true, whereas page.html would have the content at the moment its called - and would not show changes that happen asynchronously in JS unless its called over and over.   If my interpretation of your comment is correct then this is not a bug and is the expected behavior.  Usage questions should be asked on the mailing list.
",twalpole,2014-05-28 23:52:46
1314,2014-05-28 23:55:49,"Okay thanks to clear this up, sry to bother u :)

Will aks on the mailing list next time
",tak1n,2014-05-28 23:52:46
1313,2014-05-26 06:27:12,"I am testing a URL shortener (http://github.com/palyvoice/paly.io), and have a test for redirects.

The test uses a randomly generated url with `Faker::Internet.http_url`, and so sometimes does not exist at all.

When I get dumped there, the `current_url` is `data:text/html,chromewebdata` instead of whatever url I was supposed to be redirected to.

Why is this? How can I fix it or otherwise assert that I have been redirected?

I am using Sinatra+Rspec+Capybara.
",tekknolagi,2014-06-04 00:26:18
1313,2014-06-04 00:26:18,"I'm  not really sure what you're doing here, you may have better luck asking this question on the mailing list
",twalpole,2014-06-04 00:26:18
1313,2014-06-04 06:01:01,"@twalpole My apologies for not being super clear.

My application gives a 301 redirect. Sometimes that redirect destination doesn't exist. Capybara doesn't handle this situation well in Chrome in that after the redirect, the `current_url` is `data:text/html,chromewebdata` instead of the expected destination url. Does that make more sense?
",tekknolagi,2014-06-04 00:26:18
1313,2014-06-04 17:19:31,"@tekknolagi Capybara doesn't do anything special to get the current_url, it just asks the browser driver for it.  That being said I have been able to replicate the behavior you're seeing using Chrome with selenium.  This is because Chrome loads an internal page into the browser when it can't lookup the url passed to it ( look at  #html before checking #current_url ) so the current url is actually what is shown.  There's nothing Capybara can do about this.  You could look at the conntent of the page Chrome loads and check it for the correct url.  On Chrome Version 35.0.1916.114  evaluate_script('templateData[""summary""][""failedUrl""]') will give you the url it was attempting to go to, but I'm not sure how stable that will be with changing versions of chrome
",twalpole,2014-06-04 00:26:18
1313,2014-06-04 17:30:25,"@twalpole What is the recommended way to check that a browser is being redirected?
",tekknolagi,2014-06-04 00:26:18
1313,2014-06-04 17:39:49,"Write a controller test that directly verifies the response is a redirect -  Capybara is for testing user interface interaction, not lower level controller testing.
",twalpole,2014-06-04 00:26:18
1313,2014-06-04 17:46:03,"Can you please explain further and give or link to an example?
",tekknolagi,2014-06-04 00:26:18
1313,2014-06-04 17:59:38,"http://guides.rubyonrails.org/testing.html#functional-tests-for-your-controllers   or
https://www.relishapp.com/rspec/rspec-rails/docs/controller-specs should get you started.  Beyond that its not really a discussion for Capybara issues 
",twalpole,2014-06-04 00:26:18
1313,2014-06-04 19:52:23,"I am not using Rails; it is a Grape & Sinatra based app.
",tekknolagi,2014-06-04 00:26:18
1313,2014-06-04 20:03:38,"I've pointed you in the direction you should be looking. Google will give you plenty of responses to controller testing for sinatra.   This is not a Capybara issue.
",twalpole,2014-06-04 00:26:18
1313,2014-06-04 20:07:34,"Ah, I see. My apologies.

On Wed, Jun 4, 2014 at 1:03 PM, Thomas Walpole notifications@github.com
wrote:

> I've pointed you in the direction you should be looking. Google will give
> you plenty of responses to controller testing for sinatra. This is not a
> Capybara issue.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/jnicklas/capybara/issues/1313#issuecomment-45143925.
",tekknolagi,2014-06-04 00:26:18
1313,2015-07-23 17:27:05,"For those interested, the page url seems to be available from javascript [as detailed here](http://stackoverflow.com/a/29945213/26510), and [usable in Capbara by calling evalute_script](http://stackoverflow.com/a/24965161/26510)
",bradparks,2014-06-04 00:26:18
1313,2015-09-07 02:41:27,"Following @bradparks 
It ended up being this for me:
`page.driver.browser.title`
",prpetten,2014-06-04 00:26:18
1313,2016-07-11 09:03:14,"Related: [ChromeDriver bug #1272](https://bugs.chromium.org/p/chromedriver/issues/detail?id=1272)
",kenorb,2014-06-04 00:26:18
1312,2014-05-25 01:53:04,"To reflect the latest available tag
",donaldpiret,2014-06-02 19:48:41
1312,2014-06-02 19:48:41,"Thanks for this , however 2.3.0 was just released so this isn't necessary anymore
",twalpole,2014-06-02 19:48:41
1311,2014-05-24 07:01:13,"Getting the error:

ArgumentError:
       wrong number of arguments (1 for 0)

When using:
expect(page).to have_css 'title', text: 'Todo'

This is my spec helper requires:
require 'rspec/rails'
require 'capybara/rails'
require 'capybara/rspec'
require 'rspec/autorun'

And the full trace:
# /Users/severinfurneaux/.rvm/gems/ruby-2.0.0-p247/gems/rspec-expectations-2.10.0/lib/rspec/matchers/block_aliases.rb:16:in `expect'

<S_CODE_TOKEN>
",sevfurneaux,2014-05-27 13:37:03
1311,2014-05-24 20:18:02,"This doesn't look right: `expect(page).to have_css 'title', text: 'Todo'`.

`have_css` wants one css selector as an argument.  Are you trying to look at the content of the `<title>` tag?  This will probably work better in that case:

<S_CODE_TOKEN>

Also the lack of parentheses might be a problem.  I'm not sure if ruby interprets that line like this:

<S_CODE_TOKEN>

or like this:

<S_CODE_TOKEN>
",mikegee,2014-05-27 13:37:03
1311,2014-05-27 08:28:01,"Ah, thanks Michael. Thats now working for me.

On 24 May 2014 21:18, Michael Gee notifications@github.com wrote:

> This doesn't look right: expect(page).to have_css 'title', text: 'Todo'.
> 
> have_css wants one css selector as an argument. Are you trying to look at
> the content of the <title> tag? This will probably work better in that
> case:
> 
> expect(page.find('title')).to have_content('Todo')
> 
> Also the lack of parentheses might be a problem. I'm not sure if ruby
> interprets that line like this:
> 
> expect(page).to(have_css 'title', text: 'Todo')
> 
> or like this:
> 
> expect(page).to have_css('title', text: 'Todo')
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1311#issuecomment-44098682
> .
",sevfurneaux,2014-05-27 13:37:03
1310,2014-05-21 05:36:47,"When using the `has_field` matcher with a `with` option, failure messages are quite helpful:

<S_CODE_TOKEN>

However, when using `has_select` with the `selected` option, there is nothing in the failure message that indicates that a certain value was expected to be selected.

Superficially it looks like [this method](https://github.com/jnicklas/capybara/blob/df52fb1653632edde1d46768ebf2fb2c790cd9a0/lib/capybara/query.rb#L32-L36) could be extended to improve the descriptions of more of the possible options, but I'm not sure if that's where you'd prefer this functionality to live.

If you don't mind adding to that method I'm happy to submit a PR.
",lsimoneau,2014-07-03 18:19:59
1310,2014-05-21 16:40:28,"Its not great that Query#description needs to know about the custom filters available on selectors - and description should probably be moved out to the selectors at some point.  However, since we're currently doing it for :with in Query#description adding :selected description functionality there would be fine
",twalpole,2014-07-03 18:19:59
1310,2014-07-03 18:19:59,"Fixed in 2.4.0
",twalpole,2014-07-03 18:19:59
1309,2014-05-20 16:22:29,"Optimize visibility testing of text in Capybara::RackTest::Node#unnormalized_text - Issue #1307
",twalpole,2014-05-21 01:07:18
1309,2014-05-20 21:34:09,"Here is a small benchmark for this - https://gist.github.com/abotalov/c0e2477744b2812ba1ed

Output for current master:

<S_CODE_TOKEN>

Output for this branch:

<S_CODE_TOKEN>

Improvement is very large.
",abotalov,2014-05-21 01:07:18
1309,2014-05-20 21:49:05,"@abotalov --  Great -- assuming they're producing the same results :)  --  Waiting for tests to pass and will then merge
",twalpole,2014-05-21 01:07:18
1308,2014-05-19 22:07:03,"With the latest Nokogiri (1.6.2.1) - unselect fails when using RackTest and JRuby - I believe its due to the new xpath context caching in nokogiri when using JRuby, and that cache not getting cleared correctly when remove_attribute is called.

Issue filed with Nokogiri - https://github.com/sparklemotion/nokogiri/issues/1109
",twalpole,2015-01-23 18:34:13
1308,2015-01-14 21:22:50,"A fix was included into Nokogiri - https://github.com/sparklemotion/nokogiri/commit/a8b55d03763e12e67ec89366b202694249686779  -  and should be available in the next release
",twalpole,2015-01-23 18:34:13
1308,2015-01-23 18:34:13,"This should be fixed with nokogiri 1.6.6.1
",twalpole,2015-01-23 18:34:13
1307,2014-05-15 22:43:39,"Hello!

Running the following code on a [webpage containing about 1000 lines](https://gist.github.com/pcreux/1619e5da865a055aea10) take 0.3 seconds on my machine:

<S_CODE_TOKEN>

While this take ""no"" time:

<S_CODE_TOKEN>

I nailed down the performance bottleneck to `RackTest::Node#visible_text`.

<S_CODE_TOKEN>

would return:

<S_CODE_TOKEN>

I don't have time to dig deeper into it right now. Is this a known issue? Anybody ran into it before?

I'm using Ruby 2.1.2 with github capybara.
",pcreux,2014-05-17 20:45:58
1307,2014-05-17 08:52:14,"I worked more on this tonight.

The method `Capybara::Node::Simple#visible?` is called ~1475 times when running `page.text`. 0.47 seconds are spent running the xpath query of that method in total.

The [xpath query](https://github.com/jnicklas/capybara/blob/483f261c3c4403d5ed621290910bb48bb8a23495/lib/capybara/node/simple.rb#L100) seems being the issue here. Replacing it with a good old `true` makes `page.text` run in 0.04 seconds.
",pcreux,2014-05-17 20:45:58
1307,2014-05-17 20:45:58,"visible? is called on every element to check whether or not that element is actually visible (with caveats) and therefore should be checked for the desired text.  For performance In your tests you could be checking the portion of the page you expect the text to be in for that text instead of the entire page, and thereby running visible? for a lot fewer elements.  On the other hand if you don't care about visibility you could just do   expect(page).to have_text(:all, 'Download')
",twalpole,2014-05-17 20:45:58
1307,2014-05-17 21:00:19,"Thanks Thomas,

I was just surprised by how slow it is. I thought this performance issue
appeared recently as I did not run into it before.

Using rack-test, capybara checks that the element is visible using inlined
styles. I assume that most elements are made invisibles via CSS classes
these days (""hide"" for instance) thus making this check not reliable. I
don't think that the resulting decrease in performance is worth it though.
What is your opinion on this? Would it be worth escalating this to the
capybara mailing list?

Have a great week-end,

## 

φ http://pcreux.com

On Sat, May 17, 2014 at 1:46 PM, Thomas Walpole notifications@github.comwrote:

> visible? is called on every element to check whether or not that element
> is actually visible (with caveats) and therefore should be checked for the
> desired text. For performance In your tests you could be checking the
> portion of the page you expect the text to be in for that text instead of
> the entire page, and thereby running visible? for a lot fewer elements. On
> the other hand if you don't care about visibility you could just do
> expect(page).to have_text(:all, 'Download')
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1307#issuecomment-43423660
> .
",pcreux,2014-05-17 20:45:58
1307,2014-05-17 21:33:06,"@pcreux  - Yes, when using racktest it checks using inline styles (since its not reasonable to process and interpret css in capybara - hence the ""with caveats"" in my previous post).  We try to provide as much parity as reasonably possible between different drivers, and reasonable detection of visible text is part of that parity. I don't think most people are paying a huge performance hit for it, since they really shouldn't be checking a whole page for the text.  If you know you expect text in a message area, then find and check that message area for the text - then the performance hit is minimal.   That being said, if you can speed up the visibility check query, without reducing the current functionality, then PRs would gladly be looked at (for instance their really isnt the need to check ancestors when walking the entire tree, since its already done).  If you really don't want to have visibility checking in your tests then you can set Capybara.ignore_hidden_elements and Capybara.visible_text_only to false, or as stated before pass :all to the have_text matcher, and have basically 0 performance hit
",twalpole,2014-05-17 20:45:58
1307,2014-05-19 02:37:57,"Hey Thomas,

I gave it a shot without much success. The `#visible?` method is not always called while traversing the tree so it has to check `ancestors-or-self`.
",pcreux,2014-05-17 20:45:58
1307,2014-05-19 18:19:17,"@pcreux  give my visible_optimization branch a try - https://github.com/twalpole/capybara/tree/visible_optimization - and let me know if that makes a noticeable difference - if so I'll look at pulling it in
",twalpole,2014-05-17 20:45:58
1307,2014-05-20 05:39:40,"I confirm a 100% speed increase on my side:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

On Mon, May 19, 2014 at 11:31 AM, Thomas Walpole
notifications@github.comwrote:

> @abotalov https://github.com/abotalov It's possible I screwed something
> up there, but I don't think so - what makes you think it would?
> unnormalized_text aborts traversing through children if a node is hidden -
> so it would never look at ""Invisible text""
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1307#issuecomment-43539538
> .
",pcreux,2014-05-17 20:45:58
1307,2014-05-20 16:13:03,"It is still an order of magnitude slower than asserting against the page body:

<S_CODE_TOKEN>
",pcreux,2014-05-17 20:45:58
1307,2014-05-20 16:24:59,"@pcreux - yes its going to be slower, it needs to check for visibility which is going to take time.  Feel free to attempt further speedups - without losing the current functionality
",twalpole,2014-05-17 20:45:58
1307,2014-05-20 17:38:55,"Yes, thank you. I'll see if I can run the xpath query once, then traverse
the tree instead of traversing the tree and run the xpath query on every
single node.

## 

φ http://pcreux.com

On Tue, May 20, 2014 at 9:25 AM, Thomas Walpole notifications@github.comwrote:

> @pcreux https://github.com/pcreux - yes its going to be slower, it
> needs to check for visibility which is going to take time. Feel free to
> attempt further speedups - without losing the current functionality
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1307#issuecomment-43648827
> .
",pcreux,2014-05-17 20:45:58
1307,2014-05-20 17:49:51,"@pcreux try pr  #1309 first
",twalpole,2014-05-17 20:45:58
1306,2014-05-13 21:50:12,"Here is the reason - https://github.com/wayneeseguin/rvm/issues/2847

The build also started to fail on Chrome (maybe because of Chromedriver update to 2.10, maybe because of something else) but I haven't investigated it yet.
",abotalov,2014-05-19 18:56:18
1306,2014-05-19 18:56:22,"Thanks
",twalpole,2014-05-19 18:56:18
1305,2014-05-09 01:29:10,"I've been trying to figure out a fix or work around for an intermittent Net::ReadTimeout on the first test in the test suite to run using Selenium.

I have two stacktraces, one from cucumber, one from rspec.

https://gist.github.com/bdarfler/4ff9710b9b8b222ffc54

I have enabled screenshots and when I look at them the page is clearly there as is the html. I have increased the selenium timeout to 2 minutes but that has not helped.

If it helps I am not able to replicate this locally. Only when the suite runs in CircleCi.

I'm out of ideas both for what the issue might be or how I might gain more information to help diagnose. Any help or suggestions would be greatly appreciated.
",bdarfler,2014-06-04 00:27:17
1305,2014-05-21 17:49:22,"Did you figure anything out on this?  From a quick look at the stacktraces it doesnt appear to be a capybara issue, and the fact that it is intermittent is puzzling.
",twalpole,2014-06-04 00:27:17
1305,2014-05-21 18:03:56,"@twalpole I believe it is between selenium and firefox webdriver. Thanks for following up.
",bdarfler,2014-06-04 00:27:17
1305,2014-06-04 00:27:17,"Closing since this doesnt appear to be a Capybara issue
",twalpole,2014-06-04 00:27:17
1305,2014-07-21 21:50:21,"@bdarfler Did you ever figure out how to fix this problem? I'm having the same issue myself.
",jasonswett,2014-06-04 00:27:17
1305,2014-07-21 22:25:25,"Nope. I just caught the exception and retried. We eventually started using
https://github.com/y310/rspec-retry for other reasons so I suspect that
helps us out as well.

On Mon, Jul 21, 2014 at 5:50 PM, Jason Swett notifications@github.com
wrote:

> @bdarfler https://github.com/bdarfler Did you ever figure out how to
> fix this problem? I'm having the same issue myself.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/jnicklas/capybara/issues/1305#issuecomment-49670998.

## 

@bdarfler http://twitter.com/bdarfler
http://bdarfler.com
",bdarfler,2014-06-04 00:27:17
1305,2015-06-16 19:22:16,"When the server is first starting up, it can take a while for the assets to be compiled during the first request. I suspect that this is why Selenium times out - the server simply takes too long to respond to the very first request. This is why only the first test in the suite times out, and why it can be intermittent.

It looks like `selenium-webdriver` has an internal HTTP timeout of 60 seconds. Here's the [documentation](https://code.google.com/p/selenium/wiki/RubyBindings#Internal_timeouts) explaining how to configure the timeout.

Unfortunately, it looks like [Capybara::Selenium::Driver](https://github.com/jnicklas/capybara/blob/e5c5991bd356eff4bd6c2cdf9ff85d3aa05cf569/lib/capybara/selenium/driver.rb#L13) does not expose this option.

I am using rspec-retry to work around the issue for now. Works like a charm. You don't have to change anything in the tests. Here is my configuration:

<S_CODE_TOKEN>
",dwbutler,2014-06-04 00:27:17
1305,2015-07-08 03:00:46,"I also ran into the first feature spec timing out. This happens to be in an `ember-cli-rails` app.  Here's what I did to workaround assets taking more than 60 seconds to compile on first page load.

<S_CODE_TOKEN>
",afomi,2014-06-04 00:27:17
1305,2015-07-08 18:35:37,"Wanted to chime in that I also see Net::ReadTimeout issues pop up frequently. This seemed to be limited to the first test. Any other tests that hit our front page would pass without issue.

I resolved using rspec-rerun, with a max rerun of 5 times. Unfortunately, this ""solution"" still adds a significant amount of time to test duration.
",dylanlive,2014-06-04 00:27:17
1305,2015-10-30 12:16:25,"I also see this issue, and found rspec/retry, but we actually found after a year of rspec/retry that it was an anti-pattern for us. It allowed us to get sloppy on our tests, and eventually we had to go and skip tests that where chronically bad and slowly come back to them over time, so that we had green runs again. 

I wish there were a better work-around!
",bhgames,2014-06-04 00:27:17
1305,2016-04-19 21:34:33,"Here is another solution:

<S_CODE_TOKEN>

then in your circleci.yml

<S_CODE_TOKEN>
",rstormsf,2014-06-04 00:27:17
1304,2014-05-08 20:21:21,"With latest update to selenium webdriver 2.41.0 and Firefox 29 setting of number fields (input[type=""number""]) does not seem to work any more:

<S_CODE_TOKEN>

Input field remains empty.  If I change `type=""number""` to `type=""text""` then ""1"" is set to the input. Is this a known problem?
",abezzub,2014-05-08 21:15:13
1304,2014-05-08 20:46:45,"Definitely appears to be an issue with FF 29 - not sure theres anything capybara can do about it though - maybe file an issue with selenium-webdriver
",twalpole,2014-05-08 21:15:13
1304,2014-05-08 21:06:27,"Looking at selenium-webdriver it only supports FF28 - have to wait for an update it looks like
",twalpole,2014-05-08 21:15:13
1304,2014-05-08 21:12:55,"Selenium issue for tracking this   -  https://code.google.com/p/selenium/issues/detail?id=7291&can=1&q=number&sort=-id&colspec=ID%20Stars%20Type%20Status%20Priority%20Milestone%20Owner%20Summary
",twalpole,2014-05-08 21:15:13
1304,2014-05-08 21:15:13,"Thanks!
",abezzub,2014-05-08 21:15:13
1304,2015-11-04 20:25:17,"workaround if you are using Poltergeist:

<S_CODE_TOKEN>
",gabeodess,2014-05-08 21:15:13
1304,2015-11-04 21:11:42,"@gabeodess This issue was specifically about using selenium, and closed over a year ago.  If you are saying that Poltergeist won't fill a visible input of type number, please file an issue over on the poltergeist project.  Generally, suggesting javascript execution as a workaround is usually a terrible idea since the app is no longer being tested as a user would interact with it, doesn'tt generate events, etc. Yes there are times when it can make sense, but that usually involves really understanding why you're doing it which a lot of beginning capybara users don't.
",twalpole,2014-05-08 21:15:13
1304,2015-11-04 21:21:37,"@twalpole this was the first hit I got when I was trying to figure why my number fields weren't filling with capybara's #fill_in method.  I figured I would just include how I got around this in case other people got to this same thread. 
",gabeodess,2014-05-08 21:15:13
1303,2014-05-01 16:23:45,"Hi,

I've been using capybara with rails for a little while and noticed that it has a dependency on nokogiri - unfortunately, nokogiri was not supported for x64 machines until very recently; there was a [new release a couple weeks back](https://github.com/sparklemotion/nokogiri/issues/864) for nokogiri 1.6.2 rc1, however capybara does not reflect this and still requires nokogiri 1.6.1 (which does not support x64 machines).

Is there any chance you could update the gemfile to use the new nokogiri 1.6.2?

<S_CODE_TOKEN>
",danpantry,2014-05-03 01:45:08
1303,2014-05-03 01:45:08,"Capybara has on open ended dependency on Nokogiri, there is nothing preventing you from using 1.6.2.rc1.
",jnicklas,2014-05-03 01:45:08
1303,2014-05-03 10:26:25,"Yes, correct. And I use it myself.
However, I thought it might be worth mentioning in case one of your other users is running x64. The new nokogiri supports that and is backwards compatible with the old.
",danpantry,2014-05-03 01:45:08
1302,2014-04-30 05:32:29,"On a ""payment processing"" page that periodically polls for the status with AJAX and triggers a redirect in JavaScript on success or failure, we occasionally encounter this error.

I presume it's a race condition: we've asked Capybara to check if an element is present, meanwhile the page redirects, so the `html` element we're holding onto is no longer being displayed?
",lsimoneau,2014-06-04 00:30:45
1302,2014-05-06 17:37:41,"Yes - it sounds like you're holding onto a stale element - would have to see the test code to comment any further
",twalpole,2014-06-04 00:30:45
1302,2014-06-04 00:30:45,"Closing this due to lack of additional information.  Probably a better question for the mailing list
",twalpole,2014-06-04 00:30:45
1301,2014-04-28 21:44:25,"Hi,

When using opera-driver with capybara/selenium, all my tests run without problem and succeed. However when rspec finishes and returns it -sometimes- raise the following error:

<S_CODE_TOKEN>

The raise is obviously done by the driver https://github.com/operasoftware/operadriver/blob/master/src/com/opera/core/systems/scope/WaitState.java but I was wondering why Capybara is brute-forcing the driver to quit. I assume the driver does not close itself quickly enough for a reason, but I cannot figure out why. Any clue would be appreciated.

Config:
- rails 4.1.0
- capybara 2.2.1
- Selenium-webdriver 2.41.0
- rspec 2.14.1
",randoum,2014-05-06 17:43:30
1301,2014-04-28 21:46:41,"It's also a possibility that my config is incorrect, kindly see my spec_helper.rb:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",randoum,2014-05-06 17:43:30
1301,2014-05-06 17:43:30,"Capybara isn't brute-forcing anything to quit - from your stacktrace the last code in capybara executed is 
from /home/benj/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/capybara-2.2.1/lib/capybara/selenium/driver.rb:150:in `quit'

After that its calling into selenium-webdriver so any timeouts are occuring in either selenium-webdriver or opera-driver
",twalpole,2014-05-06 17:43:30
1301,2014-05-13 21:37:30,"Ok thanks I'll check with them
",randoum,2014-05-06 17:43:30
1300,2014-04-25 08:16:19,"When I run my tests I got this strange error.

<S_CODE_TOKEN>

My tests worked correctly before, I'm upgrading my application and some of them are failing, do you know what's wrong here or how could I look into?
Thanks.
",Vadorequest,2014-04-25 16:12:43
1300,2014-04-25 16:12:43,"Since the stack trace shows this to be in the poltergeist gem this should probably be asked over at that gem.
",twalpole,2014-04-25 16:12:43
1299,2014-04-24 21:19:04,"Currently the `process` method in `Capybara::RackTest::Browser` takes an argument called `path` and assumes it is a string as it treats it as such by using it as an argument to `URI.parse` and sending it methods like `start_with?`.

This patch coerces the path argument with `to_s`.

@twalpole I thought this a more appropriate near term fix for my desired long term fix by tackling the issue at the driver level.
",alexpeachey,2014-07-15 20:10:56
1299,2014-04-28 20:27:34,"Hmm, well both the original commit and the second commit pass on rbx locally ""sometimes"". It seems overall rbx just isn't stable. Neither change should cause it to crash. I can just close and revoke this pull request as I don't know what can be done to not make rbx crash.
",alexpeachey,2014-07-15 20:10:56
1299,2014-07-15 20:10:56,"Accepted PR #1357 - covers the same issue
",twalpole,2014-07-15 20:10:56
1298,2014-04-24 19:26:32,"The `visit` method takes a `url` as a parameter and in checking for special cases it performs `url.to_s`. However if no special cases apply, it does not perform `to_s`.

As someone who would like to send an arbitrary object capable of producing a url from `to_s` I feel adding consistency to the treatment of the parameter is beneficial.
",alexpeachey,2014-07-15 20:11:27
1298,2014-04-24 19:36:22,"This changes the current driver api - and therefore isn't going to be considered before v3
",twalpole,2014-07-15 20:11:27
1298,2014-04-24 20:06:10,"I don't see how this changes the driver api. The docs around the visit method specify it is supposed to receive a string and that it expects a string and in all ""special"" cases it is forced into a string.

The driver visit method also expects a string and in fact, RackTest, makes a very big assumption that it is a string because it uses `URI.parse` on it which fails when it isn't a string. In the Selenium driver if it isn't handed a URI it uses `URI.parse`.

If anything, this change makes the `visit` method more robust as it ensures the driver does actually get a string instead of only sometimes getting a string.

The entire capybara test suite passes with this change.
",alexpeachey,2014-07-15 20:11:27
1298,2014-04-24 20:13:11,"Yes -- the capybara test suite does pass, however there are other drivers that use capybara -- changing the behavior of parameters currently passed to those drivers isn't going to happen until the next major revision - v3
",twalpole,2014-07-15 20:11:27
1298,2014-04-24 20:24:19,"Ok, thank you. I can understand that even though the contract and documentation on the visit method specify it should be a string, it doesn't mean that people who wrote drivers actually adhered to the documented API and may have just adhered to the behavior of the method.

So changing this on the next major version makes sense.
",alexpeachey,2014-07-15 20:11:27
1298,2014-07-08 18:16:20,"@twalpole I disagree with you.

Previously Capybara could sent to driver's `visit` method either String or not String. If user sends parameter of String type, then String will be sent to driver.

After this PR (or https://github.com/jnicklas/capybara/pull/1357) String is sent to driver's `visit` method (and it was supported previously). So it doesn't invoke any changes neither at driver, nor at user side.
",abotalov,2014-07-15 20:11:27
1298,2014-07-08 18:37:04,"@abotalov  I'll go through it again - although alex understood it so I think I explained my reasoning fine above.  As you said - previously Capybara could send to drivers visit method either a String or not a String (ie a URI could be passed through untouched, even though undocumented in some cases) and I wasn't willing in a minor version to change that just so the user didn't have to call #to_s on an arbitrary object in case an existing driver was actually using that undocumented ""feature"".  The visit method has since been changed to actually fix a bug - which I consider more justifiable than just for ease of use - and so it may now be fine to revisit this issue.  As it is the documentation for the visit method specifies that a String must be passed in, so any pull request for this issue will need to have that documentation updated to show that an ojbect that responds to #to_s would be acceptable as well
",twalpole,2014-07-15 20:11:27
1298,2014-07-15 20:11:27,"PR #1357 covers the same issue
",twalpole,2014-07-15 20:11:27
1297,2014-04-22 20:58:41,"I don't have permissions to reopen #938 so I start a new issue to discuss it further.

It seems that primary reason why that PR was rejected was that it was hard to make options hash working in some drivers.

But there is already similar situation - `options` argument of `save_screenshot`. Different drivers have different possible values of those options:
https://github.com/thoughtbot/capybara-webkit/blob/master/lib/capybara/webkit/driver.rb#L162
https://github.com/teampoltergeist/poltergeist/blob/master/lib/capybara/poltergeist/browser.rb#L179
",abotalov,2014-05-21 17:50:32
1297,2014-04-22 21:08:29,"The reason it was rejected was the problem with passing and returning elements, not different values of options as was explained by @mhoran in #938 - also execute_script is way more core to using capybara than save_screenshot - and as such I'd like to keep supported use as compatible across drivers as we can
",twalpole,2014-05-21 17:50:32
1297,2014-08-05 10:34:47,"How about if we create a new evalute_with_objects method for capybara?
",sponte,2014-05-21 17:50:32
1297,2014-08-05 11:09:53,"I don't see any benefits in adding `evalute_with_objects` method over changing `evaluate_script`/`execute_script` methods to accept `*args`
",abotalov,2014-05-21 17:50:32
1297,2014-08-05 17:04:41,"I agree there is no benefit adding evaluate_with_objects.  If someone can figure a way for capybara-webkit. etc to support passing and returning page elements (that is acceptable to the capybara-webkit developers) then I'm for it - until then its not happening.
",twalpole,2014-05-21 17:50:32
1296,2014-04-22 16:35:24,"Ruby 2.x doesn't support non-class/module arguments to rescue clauses.
Ruby 1.9 only supported it due to what is now considered a regression:

https://bugs.ruby-lang.org/issues/4438

Remove string arguments from rescue clauses to prevent TypeErrors from
being raised during rescue attempts.
",ironcladlou,2014-05-06 17:46:34
1296,2014-04-24 19:43:35,"looks fine to me - I'll merge it in over the weekend -   thanks
",twalpole,2014-05-06 17:46:34
1296,2014-05-08 18:56:23,"@twalpole thanks!
",ironcladlou,2014-05-06 17:46:34
1295,2014-04-22 07:40:27,"Follow up to #1273 and #958
- Better YARD documentation
- Fix bug in `inject_asset_host` when `asset_host` is set and `base` tag is present
- Make `path` argument of `save_screenshpt` `nil` by default
- Puts generated filename to `$stdout` when `save_page` or `save_screenshot`
  are invoked without args
",abotalov,2014-09-18 22:05:04
1295,2014-06-26 19:08:26,"I think I fixed issue you pointed.

However, this PR causes issue on JRuby: for some reason the last line that is outputted on master (https://travis-ci.org/jnicklas/capybara/jobs/28440741#L3721) isn't outputted in this branch (https://travis-ci.org/jnicklas/capybara/jobs/28482447#L3746).

I don't know what may be the cause of it.
",abotalov,2014-09-18 22:05:04
1295,2014-06-27 23:29:12,"I applied the fix for inject_asset_host separately since it really isn't part of this PR, so that change should be removed from this PR.  Other than that I have a couple of concerns.  
1. I'm not convinced only outputting the path when its not provided makes sense - what is the use case for having it output the path.  If its so the user can go open it, then they should just use the save_and_open methods -  If its for other tools to process the files then wouldnt the tools want to know about all the files saved, even if the user specified the name to save them as?
2. The jruby issue - I know jruby has had issues with $stdout and $stderr in the past, not sure if thats it.  It could also be a sideffect of the stubbing on $stdout for your expectations - maybe try creating a new StringIO object , stubbing on that and redirecting $stdout to that for the test??
",twalpole,2014-09-18 22:05:04
1295,2014-07-05 12:02:46,"1. Fixed
2. That was because I moved `Launchy.open` outside of begin block
",abotalov,2014-09-18 22:05:04
1295,2014-08-24 12:33:06,"I've just changed `prepare_path` method a bit to make it not to yield path but return it. Probably it looks better now. What does stop this from being merged?
",abotalov,2014-09-18 22:05:04
1295,2014-09-04 17:25:57,"@abotalov the only thing stopping it is me having time to go through and see the current state -- I hope to be able to catch up on a lot of the current issues/PRs this weekend
",twalpole,2014-09-18 22:05:04
1295,2014-09-18 22:05:10,"thanks
",twalpole,2014-09-18 22:05:04
1294,2014-04-18 07:23:49,"Capybara provides most of its methods as part of `Session` class. Then those methods are included to `Capybara::DSL`. It makes sense to add other methods to Capybara' `Session` like:
- resize current window / get size of current window / close current window / maximize current window
- wrappers for [action builder](https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html#actions)
- wrappers for [touch gestures builder](https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html#touch-gestures)
- `switch_to_frame`
- `scroll_to(left,top)` / `current_scroll_position` (implemented via `execute_script`)
- methods for manipulations with cookies (`add_cookie`, `delete_cookie`, etc.)

Usually such methods are added as instance methods of `Session` class and are included to `Capybara::DSL`. But it bothers me that such approach adds too many methods into end user code that may start to interfere with methods provided by other libraries. Thus I don't especially like such design. Thus I'm curious if you see a better way out of this. But I don't see this way myself :worried: 
",abotalov,2016-11-21 23:37:39
1294,2016-11-21 23:37:39,"Closing this because I think it would be too big a breaking change, not to mention annoying to have to scope all user interactions to some other object all the time.",twalpole,2016-11-21 23:37:39
1293,2014-04-15 11:53:18,"I'm using capybara and poltergeist for feature testing on a form that has an <input type=""date""> field. It works fine but for the date field not being filled at all by the:

<S_CODE_TOKEN>

The fill_in method ends well, but the test fails because the field remains empty.
",Bastes,2014-04-16 16:16:10
1293,2014-04-15 12:00:58,"Hope this will help:

<S_CODE_TOKEN>

Produces:

<S_CODE_TOKEN>

(yes, my locale is fr ^^)

But the test still fails because the ""Date"" field remains empty.
",Bastes,2014-04-16 16:16:10
1293,2014-04-15 12:13:07,"More diagnosis material:
Filling the field on the page in JavaScript, it expects a ""YYYY-MM-DD"" value. Though doing this:

<S_CODE_TOKEN>

Or:

<S_CODE_TOKEN>

Doesn't work any better.
",Bastes,2014-04-16 16:16:10
1293,2014-04-16 16:16:10,"Since the driver handles the setting of values to elements, this is probably an issue better filed with poltergeist
",twalpole,2014-04-16 16:16:10
1293,2014-04-22 09:14:47,"If anyone else encounters the problem, here's the issue on Poltergeist's: https://github.com/teampoltergeist/poltergeist/issues/480
",Bastes,2014-04-16 16:16:10
1292,2014-04-11 21:34:27,"Here is my spec_helper.rb settings for Capybara:

<S_CODE_TOKEN>

I've tried setting it manually:

<S_CODE_TOKEN>

And I've tried pointing it to just use the assets from the development server:

<S_CODE_TOKEN>

But nothing is working. I either get this error:

<S_CODE_TOKEN>

Or it just straight up uses my development server (I can watch it hit the logs).

Help?
",TrevorHinesley,2014-04-15 01:24:33
1292,2014-04-15 01:24:33,"Please ask usage questions on the mailing list 
",twalpole,2014-04-15 01:24:33
1291,2014-04-10 04:00:50,"Gemlock
capybara 2.2.1

 Failure/Error: Unable to find matching line from backtrace
     Capybara::ExpectationNotMet:
       expected not to find xpath ""/html/body/*"", found 2 matches: ""Home Locations OpsManual esther-price@airdrilling.com Click here for more secure connection."", ""Location 2013 Inventory Material Requests Shipments Daily Reports Maintenance Quality HSE 10 Apr 2014 Activities Equipment Personnel Charges Summary Location 2013 Drilling FieldRecusandae consequatur est sequi cum officia corrupti commodi.Quo sed ratione voluptatem qui ad.Dolorem dolor ex voluptas facilis qui animi officiis et.Eligendi velit possimus aut pariatur reprehenderit.Adipisci nobis ullam accusantium iste porro asperiores rerum. Created with Highstock 1.3.5 Start Hole Depth (m) Air/Fluid/SPP Activity chart Depth Air SPP Fluid 10. Apr 01:00 02:00 03:00 04:00 05:00 06:00 07:00 08:00 09:00 10:00 50 60 70 80 90 100 110 0 1 2 3 4 5 6 Highcharts.com All Comments Start time Start Hole Depth (m) Activity Comment 00:00 56 baaaa 10:00 98 woof"". Also found """", """", """", """", """", """", """", """", """", """", """", """", """", """", which matched the selector but not all filters.
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/capybara-2.2.1/lib/capybara/node/matchers.rb:108:in `block in assert_no_selector'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/capybara-2.2.1/lib/capybara/node/base.rb:81:in`synchronize'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/capybara-2.2.1/lib/capybara/node/matchers.rb:106:in `assert_no_selector'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/capybara-2.2.1/lib/capybara/session.rb:396:in`block (2 levels) in class:Session'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/capybara-2.2.1/lib/capybara/session.rb:81:in `reset!'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/capybara-2.2.1/lib/capybara.rb:253:in`block in reset_sessions!'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/capybara-2.2.1/lib/capybara.rb:253:in `each'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/capybara-2.2.1/lib/capybara.rb:253:in`reset_sessions!'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/capybara-2.2.1/lib/capybara/rspec.rb:20:in `block (2 levels) in <top (required)>'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example_group.rb:471:in`instance_eval'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example_group.rb:471:in `instance_eval_with_rescue'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example.rb:242:in`instance_eval_with_rescue'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/hooks.rb:31:in `run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/hooks.rb:85:in`block in run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/hooks.rb:85:in `each'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/hooks.rb:85:in`run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/hooks.rb:446:in `run_hook'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example_group.rb:350:in`run_after_each_hooks'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example.rb:298:in `run_after_each'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example.rb:120:in`block in run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example.rb:179:in `call'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example.rb:179:in`run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-rails-2.14.0/lib/rspec/rails/adapters.rb:51:in `block (2 levels) in <module:MiniTestLifecycleAdapter>'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/extensions/instance_eval_with_args.rb:16:in`instance_exec'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/extensions/instance_eval_with_args.rb:16:in `instance_eval_with_args'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example.rb:247:in`instance_eval_with_args'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/hooks.rb:106:in `block (2 levels) in run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/hooks.rb:108:in`call'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/hooks.rb:108:in `run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/hooks.rb:446:in`run_hook'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example_group.rb:340:in `run_around_each_hooks'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example.rb:256:in`with_around_each_hooks'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example.rb:111:in `run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example_group.rb:390:in`block in run_examples'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example_group.rb:386:in `map'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example_group.rb:386:in`run_examples'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example_group.rb:371:in `run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example_group.rb:372:in`block in run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example_group.rb:372:in `map'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/example_group.rb:372:in`run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/command_line.rb:28:in `block (2 levels) in run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/command_line.rb:28:in`map'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/command_line.rb:28:in `block in run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/reporter.rb:58:in`report'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/command_line.rb:25:in `run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/runner.rb:80:in`run'
     # /Users/neo/.rvm/gems/ruby-2.0.0-p353@airdrilling/gems/rspec-core-2.14.7/lib/rspec/core/runner.rb:17:in `block in autorun'
",wizztjh,2014-04-10 18:57:05
1291,2014-04-10 18:57:05,"Is this supposed to indicate an issue in Capybara???   Its basically telling you that the page didnt get cleared at the end of a test.   What driver are you using?, do you have alert boxes popping up when people try and leave your page, are you preventing the page from changing.  I'm closing this for now - if you want to provide info on what exactly this is we can reopen it
",twalpole,2014-04-10 18:57:05
1291,2014-10-21 12:33:49,"I have exactly the same issue here it seems, with capybara 2.3.0. A test more or less randomly fails on our ci server (codeship) but passes locally.
",ncri,2014-04-10 18:57:05
1290,2014-04-09 18:40:26,"I'm using pouchdb in my web app which uses indexeddb and/or websql. Is there an API in capybara for resetting this?

I've been beating my head against the wall trying to get chromedriver to dump the data, but nothing is working, and the data keeps coming back.
",kfatehi,2014-04-09 18:52:25
1290,2014-04-09 18:52:25," No - you would probably want to do this in a custom after hook  - but this is a question for the mailing list.
",twalpole,2014-04-09 18:52:25
1289,2014-04-08 01:38:15,"Touch API to get this moving forward
",twalpole,
1289,2014-04-08 05:55:19,"I'd like to suggest additional swipe methods: swipe_left, swipe_right, swipe_up, swipe_down or maybe as swipe(:left), swipe(:down) etc.
",carhartl,
1289,2014-04-08 06:51:39,"1. It seems Sauce Labs is able to provide a free account (https://saucelabs.com/opensauce, choose Open Sauce at sign up form) so we can use it until Travis CI will provide support for Android (https://github.com/travis-ci/travis-ci/issues/1395)
2. I'm OK with providing only methods that you implemented in the scope of this PR as it will be always possible to add optional method arguments/additional methods (e.g. `x`, `y` params for `single_tap`). Eventually Capybara can provide wrappers for all mobile parts of Webdriver W3C spec but I'm fine with merging only this part for now.
",abotalov,
1289,2014-04-08 17:05:31,"@carhartl  yeah, the question there is just  how far (in px) is a 'swipe'  -- the flick currently is just set to a fast 200px swipe right, not really sure what makes sense for defaults on something like that.  Should swipe replace flick, or is a flick a fast swipe and should remain (so we would have  swipe(:left) and flick(:left) ), etc?
",twalpole,
1289,2014-04-08 19:55:30,"What is the difference between `flick` and `swipe`?
",abotalov,
1289,2014-04-08 19:59:24,"I've just filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=25293 as Webdriver spec doesn't define a way to set speed/duration of `swipe`.

However, I don't understand the difference between `swipe` and `flick` so I don't know if Capybara should provide both methods.
",abotalov,
1289,2014-04-08 20:01:31,"@abotalov - speed -- webdriver does support a speed for the flick (the ruby selenium-webdriver has :fast and :normal) -- a slower flick would be what most people would call a swipe I believe -- I don't know if it makes sense to have the two as separate methods, or pass a parameter, or just not worry about speed
",twalpole,
1289,2014-04-08 20:13:34,"The part about speed is currently missing in Webdriver spec so when it will appear there may be API breakage in Selenium 3.

So I would prefer to provide a single method without saying in documentation if it's fast or not. Maybe it would be `swipe` with `normal` speed for now.

Appium provides a much more robust API than Webdriver language bindings currently provide. I think swipe vs flick situation and other disputable API decisions should be handled upstream.
",abotalov,
1289,2014-04-08 20:16:22,"I don't like `single_tap` as a method name. Appium provides a count parameter to tap (https://github.com/appium/appium/blob/9f798f52e112477eb35abcb04c6c46778d77a100/docs/gestures.md) so maybe this API will be added to Selenium in future.

I think it would be better to name this method `tap`. This allow us to add `:count` option in future if Webdriver Ruby binding will support it.

I'm fine with adding `double_tap` as a short-hand method.
",abotalov,
1289,2014-04-08 21:03:53,"@abotalov - the issue with tap is that it would be overriding Object#tap with  a function that is completely different -  that might be a surprise to some people
",twalpole,
1289,2014-04-09 17:22:20,"pulling in @jonleighton @mhoran @jferris @jcoglan , if any of you are planning on implementing touch methods do you have any feedback on this?
",twalpole,
1289,2014-04-09 17:29:25,"QtWebKit supports touch events (and seems to have them on by default, even on non-mobile clients), so I think this should be fine in capybara-webkit. I know some users are using them now by just sending the events manually. I'm not sure when I'll be able to go through and implement the new API, though.
",jferris,
1289,2015-01-05 04:21:13,"Hey, there's this gem I have developed that adds touch gestures support to Capybara. Take a look at https://github.com/Ricardonacif/touch_action .

Thanks,
",Ricardonacif,
1288,2014-04-03 19:03:46,,twalpole,2014-04-03 19:04:19
1287,2014-04-03 19:00:04,,twalpole,2014-04-03 19:00:17
1286,2014-04-03 07:58:06,,abotalov,2014-04-03 20:43:42
1286,2014-04-03 20:06:21,"My only concern with this is whether enabling markdown screws up any of the existing docs??
",twalpole,2014-04-03 20:43:42
1286,2014-04-03 20:22:32,"I haven't checked all docs but in general they seem to look in the same way as previously.
",abotalov,2014-04-03 20:43:42
1286,2014-04-03 20:43:45,"Ok -- lets go with it then
",twalpole,2014-04-03 20:43:42
1285,2014-04-03 06:33:33,"Currently the Capybara's DSL `feature` does not work with the new RSpec 3 configuration [`expose_dsl_globally = false`](https://relishapp.com/rspec/rspec-core/v/3-0/docs/configuration/global-namespace-dsl#when-exposing-globally-is-disabled-the-top-level-dsl-no-longer-works) which removes the `describe` from Ruby's `main` object. 

Please see https://github.com/rspec/rspec-rails/issues/984 for background.

As @myronmarston suggested, it seems Capybara needs to use [`RSpec::Core::Configuration#alias_example_group_to`](https://github.com/rspec/rspec-core/blob/77cc21e97a6e4c66acb21c8a89e8e45bffade820/lib/rspec/core/configuration.rb#L726-L756) in [lib/capybara/rspec/features.rb](https://github.com/jnicklas/capybara/blob/12b975da27eacb482cb325f6c68b7fd44389506f/lib/capybara/rspec/features.rb#L10).
#### Environment
- capybara 2.2.0 (https://github.com/jnicklas/capybara/tree/12b975da27eacb482cb325f6c68b7fd44389506f)
- rspec-core 3.0.0.beta2 (https://github.com/rspec/rspec-core/tree/77cc21e97a6e4c66acb21c8a89e8e45bffade820)
",yujinakayama,2014-06-13 04:56:40
1285,2014-04-03 06:44:48,"As @yujinakayama mentioned, `alias_example_group_to` is a public API specifically designed for this, to make it work well with whatever level of monkey patching the user has opted into or out of.  It also lets you provide default metadata that that alias will always have...so you can greatly simplify that file to:

<S_CODE_TOKEN>
",myronmarston,2014-06-13 04:56:40
1285,2014-04-03 17:09:08,"I believe short term - just changing feature to call RSpec.describe instead of just describe will get this working, longer term we should be using something along the lines of alias_example_group_to - however we need to keep this compatible will both RSpec 2 and 3
",twalpole,2014-06-13 04:56:40
1285,2014-04-03 17:17:51,"> I believe short term - just changing feature to call RSpec.describe instead of just describe will get this working, longer term we should be using something along the lines of alias_example_group_to - however we need to keep this compatible will both RSpec 2 and 3

That's certainly reasonable.  If you want to start using the config APIs I listed above you can always have an rspec version conditional and do one or the other.
",myronmarston,2014-06-13 04:56:40
1285,2014-04-03 19:50:06,"@yujinakayama  please let me know if master works for you now
",twalpole,2014-06-13 04:56:40
1285,2014-04-03 23:03:50,"@twalpole  Thanks. The `feature` without `RSpec` now works:

<S_CODE_TOKEN>

However `RSpec.feature` doesn't work. Also, the `feature` is still monkey-patched on the `main` object even though `expose_dsl_globally = false` is set. I'm not sure if Capybara should conform to the RSpec's policy strictly, but it would be nice if it could.
",yujinakayama,2014-06-13 04:56:40
1285,2014-04-04 01:10:20,"@yujinakayama - Yeah, I just implemented the short term fix, so only feature on the global object will work properly currently -  I have to think about the rest of it.
",twalpole,2014-06-13 04:56:40
1285,2014-06-13 04:56:40,"Should be fixed on master now
",twalpole,2014-06-13 04:56:40
1284,2014-04-02 19:52:05,"As requested in #1282 
",abotalov,2014-04-03 07:58:17
1283,2014-04-02 18:52:14,,twalpole,2014-04-02 18:52:33
1282,2014-04-02 08:02:21,"Related to:
https://github.com/jnicklas/capybara/issues/1253

Capybara #reset! should handle quite an ordinary case, where an alert might open up on the page.

Currently, if you try to use reset! and an alert opens on the page, then the capybara fails to handle it and crashes this and every other test that uses that same session
",stenver,2014-04-02 17:20:16
1282,2014-04-02 08:18:38,"-1. It was explained in https://github.com/jnicklas/capybara/issues/1253
",abotalov,2014-04-02 17:20:16
1282,2014-04-02 08:29:41,"If i simply implement my own after method, which is exactly the same as #reset!, but also handles alerts, then this kind of defeats the purpose of #reset!

Having alerts on the page is a very old and standard thing. User can be prompted with an alert while, for example, filling a form page and then trying to leave. This might easily happen in tests, if the test fails in the middle of filling the form and then the after block is called, which contains #reset_session.

Now if that happens, then all subsequent tests also fail with that session, since the alert is still open. I dont see why it is such a bad idea to make such a great thing as capybara better at handling both standard use cases and making sure that if one test fails, then others are not affected

In another words - what are the downsides of this pull request?
",stenver,2014-04-02 17:20:16
1282,2014-04-02 17:20:16,"As explained in #1253 this really isn't something everyone needs and there are plenty of ways to implement in your own project.  
",twalpole,2014-04-02 17:20:16
1282,2014-04-02 18:05:00,"Can you please explain why this is a bad idea, besides that its not always needed? Capybara has other exceptions for special cases aswell.

And why is Capybara team content with leaving this major bug still open?
",stenver,2014-04-02 17:20:16
1282,2014-04-02 18:31:25,"We don't consider it a ""major bug"", and don't consider the overhead of calling browser.switch_to.alert to be worth it for everyone when it's needed by a tiny percentage of people.  Personally I'm not convinced that accepting the alert every time would be correct for everyone.  If you need this behavior its easy enough to monkey patch reset! or alias_method it and add your behavior after calling the original, or any number of other solutions to your issue
",twalpole,2014-04-02 17:20:16
1282,2014-04-02 18:39:57,"Fair enough. Performance is important. 

What could be done, is make a warning in the readme that this method is not able to handle alert events and if there is a threat for one, you should specifically expect an alert after reset!, if you dont want the entire session to crash.
",stenver,2014-04-02 17:20:16
1282,2014-04-02 19:53:21,"@stenver Done - #1286
",abotalov,2014-04-02 17:20:16
1281,2014-04-01 13:07:19,"Using browserstack, i discovered that if you quit your test manually, then Capybara, at the end of the suite, quits it again. This causes an error for capybara. 

I have tested it with browserstack IE 10 and i have also confirmed that an error is raised when using local firefox. Chrome seems to handle it fine.

Here is the stack trace

<S_CODE_TOKEN>
",stenver,2014-04-02 09:06:04
1281,2014-04-02 09:05:43,"https://github.com/jnicklas/capybara/commit/636391e6de334513e7471003b55351581edc3644

This fixes it. I guess i will use head version until new release is done
",stenver,2014-04-02 09:06:04
1280,2014-03-31 22:12:19,,jwworth,2014-04-01 06:35:23
1280,2014-04-01 06:35:27,"Thanks!
",jnicklas,2014-04-01 06:35:23
1279,2014-03-31 16:59:32,"Derive CSSHandlers from BasicObject so global includes of modules with functions that collide with xpath function names (like ActionView::Helpers::TextHelper#concat) don't cause failures
",twalpole,2014-04-02 17:05:25
1279,2014-04-01 20:44:35,"Do you know which method collides in case of including `ActionView::Helpers::TextHelper`?
",abotalov,2014-04-02 17:05:25
1279,2014-04-01 21:15:37,"concat  is the primary one -- but basically any function that is matches an xpath function would create a problem if its included into global scope (which includes into Object)
",twalpole,2014-04-02 17:05:25
1278,2014-03-29 20:58:09,"Adding this line to spec file:

<S_CODE_TOKEN>

makes have_selector to fail like this:

<S_CODE_TOKEN>

Moreover other specs in project with have_selector also become to fail the same way though they don't have this include (either should or should_not is used)
Removing this include in a single file solves the problem.

Example of the test:

<S_CODE_TOKEN>
",tmandzak,2014-03-29 22:34:52
1278,2014-03-29 21:19:41,"Duplicate of https://github.com/jnicklas/capybara/issues/1060
",abotalov,2014-03-29 22:34:52
1278,2014-03-29 22:34:52,"You're polluuting every object with every function defined in TextHelper as documented in #1060 
",twalpole,2014-03-29 22:34:52
1278,2014-03-29 23:58:19,"@tmandzak you're not the first person coming up with including exactly this helper in the global scope. Did you read somewhere to do this?
",jnicklas,2014-03-29 22:34:52
1278,2014-03-30 09:44:28,"I just needed to use `pluralize` when checking content. I think it's the way most beginners like me will go. Regarding reading (not exactly this case) here is the link:
https://stackoverflow.com/questions/6806473/rails-3-is-there-a-way-to-use-pluralize-inside-a-model-seems-to-only-work-in
The solution to use `ActionController::Base.helpers.pluralize` is also mentioned there.
",tmandzak,2014-03-29 22:34:52
1277,2014-03-27 18:28:21,"A minor change: instead of adding a global monkey-patch to ActiveRecord::Base.connection, suggest a more localized one that only affects specs marked with `js: true`.
",epidemian,2014-03-27 19:01:33
1277,2014-03-27 18:45:00,"It's a bit RSpec specific though.
",jnicklas,2014-03-27 19:01:33
1277,2014-03-27 19:01:32,"Oh, snap. Sorry, i forgot that Capybara was not RSpec-specific :sweat: 

Closing this...
",epidemian,2014-03-27 19:01:33
1276,2014-03-27 08:12:52,"The github home page states that ""the two following statements are functionally equivalent:""

<S_CODE_TOKEN>

However I experienced so, that the `page.should_not have_...` version waits Capybara.default_wait_time while the `page.should have_no..` version not. I'm using capybara and selenium webdriver.
",nagyt234,2014-03-27 18:32:21
1276,2014-03-27 08:31:59,"Beware of partial quotes ;)

> Be aware that because of this behaviour, the following two statements are not equivalent, and you should always use the latter!
> 
> <S_CODE_TOKEN>
> 
> The former would immediately fail because the content has not yet been removed. Only the latter would wait for the asynchronous process to remove the content from the page.
> 
> **Capybara's Rspec matchers**, however, are smart enough to handle either form. The two following statements are functionally equivalent:
> 
> <S_CODE_TOKEN>

In other words, you need to use Capybara's RSpec matchers, otherwise this doesn't work.
",jnicklas,2014-03-27 18:32:21
1276,2014-03-27 09:39:08,"Thx for the quick replay, but it did not answer my issue. In contrast of the capybara documentation cited also by you, I deteremined that the two following statements are NOT functionally equivalent:

<S_CODE_TOKEN>

At least in the case of selenium.
",nagyt234,2014-03-27 18:32:21
1276,2014-03-27 10:02:10,"They are, you're just not using the Capybara RSpec matchers for some reason. I don't know why, maybe you didn't require ""capybara/rspec"", maybe you have some other custom setup. Try `p have_xpath('a').inspect` and you should see whether the Capybara RSpec matchers are included properly.
",jnicklas,2014-03-27 18:32:21
1276,2014-03-27 18:24:56,"If I start the the same spec containing

<S_CODE_TOKEN>

from spec/feature I get

<S_CODE_TOKEN>

from spec/requests I get

<S_CODE_TOKEN>

Why does it make any difference?

I have only one line associated with Capybara in '''spec_helper.rb''':

<S_CODE_TOKEN>
",nagyt234,2014-03-27 18:32:21
1276,2014-03-27 18:30:26,"@nagyt234 because the Capybara::DSL and Capybara::RSpecMatchers are only included for rspec tests of type :feature  -- from the readme

<S_CODE_TOKEN>
",twalpole,2014-03-27 18:32:21
1275,2014-03-25 07:32:46,"Deprecated should RSpec syntax updated to new expect variant (in folder spec/).

All specs I have updated are working the same way as before (passing or pending). 
",DavydenkovM,2014-04-02 22:58:38
1275,2014-03-25 07:39:34,"Duplicate of https://github.com/jnicklas/capybara/pull/1192
",abotalov,2014-04-02 22:58:38
1275,2014-03-25 08:34:32,"Hmm, IIRC the RSpec team changed their minds on the deprecation.
",jnicklas,2014-04-02 22:58:38
1275,2014-03-25 18:56:39,"@jnicklas Nope, `should` syntax seems to be deprecated:
https://github.com/rspec/rspec-expectations/blob/master/lib/rspec/expectations/configuration.rb#L135
https://github.com/rspec/rspec-expectations/blob/master/lib/rspec/expectations/configuration.rb#L115
https://github.com/rspec/rspec-expectations/blob/master/lib/rspec/expectations/syntax.rb#L26
",abotalov,2014-04-02 22:58:38
1275,2014-03-25 19:01:07,"@abotalov:

> or explicitly enable `:should`
",jnicklas,2014-04-02 22:58:38
1275,2014-03-25 19:23:39,"@jnicklas We can explicitly enable `should` instead of merging @twalpole's PR. I don't think that enabling `should` in Capybara specs is a bad decision.

But it doesn't change the fact that `should` is deprecated.
",abotalov,2014-04-02 22:58:38
1275,2014-03-25 19:43:11,"No it's not. Source: http://myronmars.to/n/dev-blog/2013/07/the-plan-for-rspec-3#what_about_the_old_expectationmock_syntax
",jnicklas,2014-04-02 22:58:38
1275,2014-03-25 19:43:48,"> While I won’t say “never” (who knows what the future holds?), we don’t have any current plans to ever remove the old syntax. Users have invested in code that uses the old syntax for many years, and while we recommend using the new syntax (particularly for new projects), we’d be doing users a disservice to remove the old syntax anytime soon. It’s also not a significant maintenance burden.
",jnicklas,2014-04-02 22:58:38
1275,2014-03-25 19:54:58,"The issue here is that the should syntax has to be intentionally enabled, while the expect syntax will always work --- If other drivers want to test against the capybara specs they will have to enable should syntax (polluting every object with the should method) in their testing to do that -- If we convert those tests over to expect syntax then both people with and without should enabled can use those tests. 
",twalpole,2014-04-02 22:58:38
1275,2014-03-25 19:58:48,"@jnicklas RSpec-expectations produces a deprecation warning by default (if you don't specifically enable `should` syntax):
https://github.com/rspec/rspec-expectations/blob/master/lib/rspec/expectations/syntax.rb#L27
https://github.com/rspec/rspec-support/blob/master/lib/rspec/support/warnings.rb#L5

So I think it can be said that `should` syntax is deprecated
",abotalov,2014-04-02 22:58:38
1275,2014-03-29 16:05:33,"It will be great to see this PR merged. :+1:
",seuros,2014-04-02 22:58:38
1275,2014-04-01 18:06:43,"FYI: as pointed out by @abotalov #1192 is this plus a bunch of other changes/fixes needed for rspec 3 compatability
",twalpole,2014-04-02 22:58:38
1275,2014-04-02 22:58:38,"Pulled in the larger #1192 - should provide all of this PR and more
",twalpole,2014-04-02 22:58:38
1274,2014-03-24 17:26:55,"Discovered in https://github.com/bootstrap-ruby/rails-bootstrap-forms. This fix is required by 832cf8752ab2d8ae52aa208131a2309f029e9e22.

Previously, the following

<S_CODE_TOKEN>

would result in `Labelspan` instead of `Label span`
",aceofspades,2014-03-24 18:59:38
1274,2014-03-24 17:38:56,"From a quick look at this it looks like it would add spaces where there were none.
",twalpole,2014-03-24 18:59:38
1274,2014-03-24 17:45:46,"@twalpole That's probably right... the bug is the converse, that spaces are being eaten somewhere. Can you offer any guidance?
",aceofspades,2014-03-24 18:59:38
1274,2014-03-24 18:22:39,"umm -- its being eaten in Nokogiri when parsing the document -- this PR is definitely not a solution since it would mean 

<S_CODE_TOKEN>

would have_text('Label span') which is definitely wrong.   Browsers do treat the space in your example as significant so it appears this may be a bug in the HTML parsing of Nokogiri - might be worth a post over there?
",twalpole,2014-03-24 18:59:38
1274,2014-03-24 19:19:31,"@aceofspades FYI -- building nokogiri against libxml2 v2.9.1 appears to fix this issue --- so it appears its potentially an issue in some version/versions of libxml2
",twalpole,2014-03-24 18:59:38
1274,2014-03-25 17:15:58,"Hmm 2.9.x is unsupported, I wasn't able to get specs to compile.

Filed a PR with a failing spec to nokogiri: https://github.com/sparklemotion/nokogiri/pull/1069
",aceofspades,2014-03-24 18:59:38
1273,2014-03-22 02:12:02,"This adds a new method `save_and_open_screenshot` that saves the screenshot then
opens it for inspection.

Refactor duplicate logic for `save_and_open_page` and `save_and_open_screenshot`
",gylaz,2014-04-03 21:28:14
1273,2014-03-22 03:15:39,":+1:
",croaky,2014-04-03 21:28:14
1273,2014-03-22 10:57:15,"I made some comments about my concerns. It would be better to wait for @jnicklas to see if he will approve them.
",abotalov,2014-04-03 21:28:14
1273,2014-03-24 02:48:00,"@abotalov Thanks for the comments! I fixed some of the things. Let's wait to see what @jnicklas has to say about some of the other ones, since I tried to not change the original API at all.
",gylaz,2014-04-03 21:28:14
1273,2014-03-24 07:41:44,"The tests failed on Travis. I think you should add launchy to Gemfile.
",abotalov,2014-04-03 21:28:14
1273,2014-04-02 23:15:58,"@gylaz Could you update this PR to be against current master, and see if you can figure out whats going on with the failed builds? Then we can move forward on getting this merged in.
",twalpole,2014-04-03 21:28:14
1273,2014-04-02 23:23:07,"> Could you update this PR to be against current master

@twalpole Will do!

> see if you can figure out whats going on with the failed builds?

The build if failing due to `Kernel#caller` not behaving the same way as in MRI. One way around this is to pass the calling method as an argument. Thoughts?
",gylaz,2014-04-03 21:28:14
1273,2014-04-02 23:52:59,"I don't really like the idea of passing the calling method name as an argument, but it is a private method being called so if there isn't a universal way to get the calling methods name then we can probably live with it
",twalpole,2014-04-03 21:28:14
1273,2014-04-02 23:59:43,"@gylaz -- actually -- this is just for a warning that Launchy needs to be installed to open the files, I don't know that it really matters whether it was called from save_and_open_page or save_and_open_screenshot -- either way the user needs to install Launchy - so maybe just dump the method name
",twalpole,2014-04-03 21:28:14
1273,2014-04-03 01:07:27,"@twalpole This is ready for a re-review.
",gylaz,2014-04-03 21:28:14
1273,2014-04-03 08:21:50,"LGTM.

There were failing tests not related to this PR so I rerunned the build and it's green now.
",abotalov,2014-04-03 21:28:14
1273,2014-04-03 20:00:05,"@gylaz ok -- I think its all good now, unfortunately the tests failed due to the signature of the latest chrome failing on travis.   If you could rebase to master (which forces the chrome install now) one more time just to make sure the tests are passing and then I'll merge it in.
",twalpole,2014-04-03 21:28:14
1273,2014-04-03 21:28:19,"Looks good -- thanks a lot
",twalpole,2014-04-03 21:28:14
1272,2014-03-19 23:29:53,,jwworth,2014-03-20 12:13:41
1272,2014-03-20 12:13:46,"Thanks!
",jnicklas,2014-03-20 12:13:41
1271,2014-03-18 21:33:25,"Currently `all` returns `Result` instead of array. It has the following downsides:
1. We should delegate all useful methods of `Array` to `@result`. But it's hard to choose all necessary methods. For example currently `reverse` method (that I wanted to use recently at some project) isn't delegated so Capybara user should do `all(locator).to_a.reverse`
2. It increases surface of public API

Before #1246 `all` was used in `assert_selector` and `assert_no_selector` so `Result` was needed. It will be not so after it will be merged. `all` should return an array instead of `Result`
",abotalov,2016-08-15 22:13:57
1271,2014-04-04 23:49:53,"I'm taking a look at this issue. What do you think about just forwarding some methods instead of returning the array?

I was thinking of adding these to def_delegators: :reverse, :shift, :unshift, :<<, :push, :pop, :compact, :sample, :slice, :take, :uniq

This would preserve `matches_count?` and the failure messages from `Capybara::Result`.
",fluxusfrequency,2016-08-15 22:13:57
1271,2014-04-05 07:33:16,"`matches_count?` and failure messages aren't needed for end user.
",abotalov,2016-08-15 22:13:57
1271,2014-04-07 17:01:39,"Instinctively I don't have a problem returning an Array in capybara 3, however we could definitely add some more delegated methods in the next 2.x release if we think they are really useful, although .to_a.xxx works fine for most people, and any delegated that would actually change the results (push, etc) would not be good for delegating
",twalpole,2016-08-15 22:13:57
1271,2016-08-15 22:13:57,"Closing this as returning an Array would prevent us from optimizing the calling of filters on the results
",twalpole,2016-08-15 22:13:57
1270,2014-03-18 18:45:30,"Hello Jonas Nicklas,

Environment: Ruby + Cucumber + Capybara + Rspec, (Windows 7, x64 bit), Internet Browser.
Issues: (There is a form with two fields: user name and password. When my cucumber step_definition.rb file executed):
1. It open the browser and simply close it, do not fill the input fields.  
2.  The fill_in method executed, but it take so long till TimeOut::Error message displayed (browser window closed).for example user name = 'Sadia', then writing 'Sadia' in username filed took so long. I have no clue why it is slow.
3. Could you please provide a very simple example to implement a session. I want to automate test scripts independent from each other in a test suite. For each test I want to open and close the browser. There are lot of projects uploaded but sorry to say really confusing and simple implementation.

Please guide me that how I can solve there problems.Thanks for your time and help.

Regards,
",sadia-rubbani,2014-03-18 20:28:35
1270,2014-03-18 20:28:35,"Ask questions in mailing list or Stack Overflow.
",abotalov,2014-03-18 20:28:35
1269,2014-03-16 15:39:43,"IMO it's better to be strict and library should impose good defaults. I don't write more here since Jonas has already written about strictness many times.
",abotalov,
1269,2014-06-10 23:02:54,"I agree.  Let's not forget that we are TESTING... why would you default to matching inexact substring matches?  

For example:  how many applications have ""Edit Model"" and ""Delete Model"" links, both of which would match... 
page.should have_link(""Model"") with exactness=false.
",vanboom,
1268,2014-03-16 15:32:43,"It would be good if the following methods won't apply filters to all elements to improve performance:
1. `find` with `match: :first` option (after first matching element was found)
2. `first` (after first matching element was found)
3. `all`, `assert_selector` with `:minimum` option (after needed minimum amount of elements was found)
4. `assert_no_selector` with `maximum: n` or `count: n` option (after `n+1` method was found)
",abotalov,2016-08-15 22:11:26
1268,2014-03-16 20:18:19,"Talking about performance is meaningless without numbers. If you want to criticise the performance of a particular aspect of Capybara, show some numbers.
",jnicklas,2016-08-15 22:11:26
1268,2014-03-17 21:19:59,"I don't think that benchmarks are needed here as this issue is obvious after looking at this row from `Result`'s `initialize` method:

<S_CODE_TOKEN>

So in case if there are N elements matching locator on the page, Capybara will check each element for matching filters which will result in at least N+1 query. It may be more if `matches_filters?` will make more than 1 driver method invocation.

Anyway, here is a benchmark - https://gist.github.com/abotalov/9608318. Here are results of running it on my machine:

<S_CODE_TOKEN>

Obviously you can say, that a person should use unique locators - i.e. e.g. `find('.row:first-child')`.

Yes, a person can. But the issue here is producing unneded driver method invocations and we should just fix it in Capybara.
",abotalov,2016-08-15 22:11:26
1268,2014-03-18 09:53:37,"I would suggest running more iterations of each benchmark. From my vague knowledge of statistics you need at least around 30 samples to be vaguely confident in the result, but l would suggest doing way more than than, at least around 100. We definitely need numbers. With performance you can bend over backwards, making the code significantly harder to read and work with for no gain. The only way to avoid that is to only optimize where it matters, and this is only possible to figure out with numbers.

It's good that you're pointing this out, there are definitely things we can do to improve performance.
",jnicklas,2016-08-15 22:11:26
1268,2014-03-18 21:16:25,"I modified the benchmark (url is the same - https://gist.github.com/abotalov/9608318):

<S_CODE_TOKEN>

3a can be optimized to 2a
3b can be optimized to 2b
3c can be optimized to 2c
",abotalov,2016-08-15 22:11:26
1268,2014-03-18 21:18:22,"I expect that comparative numbers for `find` with `match: :first`, `assert_selector` and other methods outlined in issue description will be nearly the same as performance depends mostly on number of Selenium method invocations.

Of course, the most importance cases that should be optimized are 1 and 2 from issue description.
The points 3 and 4 from issue description are less important (I rarely use those filters) but I'm open to fixing them too.
",abotalov,2016-08-15 22:11:26
1268,2016-04-04 17:44:05,"Basically this would involve moving the count options logic into SelectorQuery#resolve_for.  I don't believe example 3 is actually correct, since `all` needs to return all matches even if a `minimum` option is provided - so the only optimization that  could be done for `all` would be raising an error once the `maximum` or  `count`  is exceeded. Also example 1 and 2 need to handle the case where any  count options are passed in, to make sure the overall count is correct before returning the first matched element.
",twalpole,2016-08-15 22:11:26
1268,2016-08-06 00:38:21,"I've implemented something for this in PR #1734 if anyone wants to take a look/critique
",twalpole,2016-08-15 22:11:26
1268,2016-08-15 22:11:21,"closed via 676fba48e2968c7d4ab7f442a8771c25a6664cb1
",twalpole,2016-08-15 22:11:26
1267,2014-03-13 23:53:37,"This is relatively minor but caused me confusion for a while until I checked the implementation. I'm assuming here that the implementation is to be considered correct and the docs, therefore, incorrect.

API methods ""click_button"" and ""find_button"" both call down with identical parameters to ""find"", it's just that the first call also calls ""click"" on the result for you. However, the first says that the location parameter finds by ""Text, id or value"" (where ""text"" doesn't make a lot of sense for INPUT types of Submit or Image, and only marginally for BUTTON when complex HTML may be nested inside the tag). The ""find_button"" call has the more usual list of ""id, name or value"", which makes more sense. Either way, they really both ought to say the same thing, since they're implemented through the same call, at least according to the inline source code in the docs themselves.

http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Node/Actions#click_button-instance_method
http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Node/Finders#find_button-instance_method
",pond,2015-08-25 21:51:00
1267,2014-03-14 00:06:31,"Actually according to what's ultimately the back-end for this, XPath's HTML ""button"" finder, it's looking at ID, title and value attributes. This explains why my attempts to get Capybara to find a button by a value it'd find in the name attribute, were it looking, have been unsuccessful.

https://github.com/jnicklas/xpath/blob/master/lib/xpath/html.rb#L22

It may be worth in Capybara's documentation simply making a reference to the relevant XPath details where you call through to that, in order to avoid duplication of documentation and possible synchronisation or transcription errors between the two. It should make future maintenance easier as well.

I have also encountered confusion in others about what ""button"" means in this context - again, it goes down to XPath. XPath's own documentation on the ""button"" custom selector is a little out of date in fact, with the code searching for a wider range of input types than it describes, but in any event it'd be handy if the Capybara docs again just pointed through to the right bit of XPath so that it's really obvious to the API client who does what and how we should expect things to behave.
",pond,2015-08-25 21:51:00
1266,2014-03-13 13:04:21,"Hi!

We are developing a real time application, so we are taking advantage of the capybara multiple sessions features. However, if the user tries to leave the page, then he will get an alert. This is also used if the test fails - we need to reset the sessions and keep other tests going

But reset_session! and reset! cant handle any page pop ups. In fact, they crash the entire test suite

Our current workaround looks like this:

<S_CODE_TOKEN>

But frankly, this is quite ugly and tedious. Especially since pools method is private, so you have no easy way to iterate over all the sessions. I believe this should be handled by simple capybara command. Im willing to do the pull request itself, if given the desired method and instructions.
",stenver,2014-03-14 07:11:14
1266,2014-03-14 07:08:34,"Duplicate of https://github.com/jnicklas/capybara/issues/1253 and https://github.com/jnicklas/capybara/pull/1252
",abotalov,2014-03-14 07:11:14
1265,2014-03-13 09:07:35,"In the code below, if I have the `sleep 1`, the test passes. Without the `sleep`, the test reliably fails. Calling `hover` on `the_image` triggers the ajax. Maybe I'm setting up the last expect incorrectly? Or are there cases where sleep is needed?

<S_CODE_TOKEN>
",justin808,2014-04-03 21:48:20
1265,2014-03-19 19:57:49,"This assert doesn't wait as you use standard RSpec's assert that doesn't wait.

To make it wait till href attribute will start from `https:`, you can use `starts-with` xpath's function.

So the assert will be like:

<S_CODE_TOKEN>
",abotalov,2014-04-03 21:48:20
1264,2014-03-12 20:21:48,"Hi Jonas,

this patch adds a docs badge to the README to show off inline-documentation to potential contributors: [![Inline docs](http://inch-pages.github.io/github/jnicklas/capybara.png)](http://inch-pages.github.io/github/jnicklas/capybara)

The badge links to [Inch Pages](http://inch-pages.github.io), a project that tries to raise the visibility of inline-docs to encourage aspiring Rubyists to document their code. Your status page is http://inch-pages.github.io/github/jnicklas/capybara/

Inch Pages is still a young project, but already used by projects like [Guard](https://github.com/guard/guard), [Haml](https://github.com/haml/haml), [Pry](https://github.com/pry/pry), and [ROM](https://github.com/rom-rb/rom).

What do you think?
",rrrene,2016-04-04 23:10:26
1264,2014-06-27 05:55:06,"I updated the badge in this PR to now link to [Inch CI](http://inch-ci.org), the successor of the Inch Pages project. The status page now is http://inch-ci.org/github/jnicklas/capybara

It is a web-service based on [Inch](http://trivelop.de/inch) that lets people lint and show off their inline docs (as opposed to a static website served via GitHub Pages).

What do you think?
",rrrene,2016-04-04 23:10:26
1263,2014-03-10 17:36:07,"I want to use Capybara in a Rails integration test. But for some reason Capybara.current_session.server.host is always nil. I'm probably doing something wrong. What should I do? 

<S_CODE_TOKEN>
",ddevaal,2014-03-11 10:48:44
1263,2014-03-11 07:56:54,"It does seem to work with the selenium driver. RackTest probably doesn't start a server?
",ddevaal,2014-03-11 10:48:44
1262,2014-03-03 11:42:30,"Hi guys, I want to get some html from other website after it ajax done.
In first time I am able to use merchanize to get but it can not get js or ajax loading html. 

Currently I using posting such a lot of request (>300) to that website to get information (it support free tool but no API to get result). 

Could capybara able to do that? If it could, how can I setting it. 
And it 's performance is better than $posting request, isnt it?
Thanks all :)
",dieuit07,2014-03-03 19:08:42
1262,2014-03-03 11:51:33,"Please ask questions in mailing list or Stack Overflow
",abotalov,2014-03-03 19:08:42
1261,2014-02-27 02:14:12,"I get this error

expected to find text ""updated name of sprint"" in ""Internal Server Error ActiveRecord::JDBCError: database is locked: UPDATE \""sessions\"" SET \""data\"" = 'BAh7BkkiGXdhcmRlbi51c2VyLnVzZXIua2V5BjoGRVRbB1sGaQZJIiIkMmEk MDQkNXliYklCWnR6QjFUaFQuZDhkNFdsLgY7AFQ= ', \""updated_at\"" = '2014-02-27 02:10:45.872000' WHERE \""sessions\"".\""id\"" = 15 WEBrick/1.3.1 (Ruby/1.9.3/2013-11-14) at 127.0.0.1:35156"" (RSpec::Expectations::ExpectationNotMetError)
",hoasung01,2014-03-02 14:17:40
1261,2014-03-02 14:17:40,"This is not enough information to attribute this to Capybara. You could be running into a DB lock for any reason, and Capybara does nothing with your DB, so it's not likely the culprit.
",jnicklas,2014-03-02 14:17:40
1260,2014-02-24 20:36:03,"https://github.com/jnicklas/capybara/pull/1232 added possibility to pass more than one count option (by count option I mean any of `:count`, `:minimum`, `:maximum`, `:between`).

But to support this ability properly we should:
- raise errors if conflicting options were passed (e.g. `count: 3, minimum: 4`)
- change failure message. Example keys: `minimum: 2, maximum: 5, between: 3..6`. Here are choices that I think we have:
  - normalize keys so error message will include `from 3 to 5 times`
  - just append keys so error message will include `at least 2 times, at most 5 times and between 3 to 6 times`

In any case it would require to write some code to support it properly. But I don't really see a use case when this ability may be useful.  I propose to raise error if more than one count key has been passed.

cc @tmertens (as you added this feature)
",abotalov,2014-07-08 21:31:09
1260,2014-02-24 20:42:38,"Why would we want to ban the use of minimum and maximum together? 
",twalpole,2014-07-08 21:31:09
1260,2014-02-24 20:44:33,"Because IMO it's easier to use `:between` instead
",abotalov,2014-07-08 21:31:09
1260,2014-02-24 20:54:05,"I think the intention of a test specifying minimum: 3, maximum: 6 is clearer than between: 3..6  or between 3...7  - but maybe I'm just biased with regard to the use of ranges because I've seen too many people screw up the difference between inclusive and exclusive ranges
",twalpole,2014-07-08 21:31:09
1260,2014-02-24 20:59:47,"@twalpole Do you think that issue that you talk about is worth adding code for stuff outlined in issue description?
",abotalov,2014-07-08 21:31:09
1260,2014-02-24 21:48:40,"Actually I don't think its worth worrying about conflicting options at all.   If a user adds conflicting options the test will fail and they will then have to look at why the test is failing.  As for the error message, appending them together as in your second example would be my preference since the error message then relates directly to the count options used  
",twalpole,2014-07-08 21:31:09
1260,2014-03-02 14:16:23,"I agree with @twalpole on this. No need to go too crazy on this. If a user wants to choose options which might conflict then that's their prerogrative.
",jnicklas,2014-07-08 21:31:09
1260,2014-07-08 20:56:46,"> If a user adds conflicting options the test will fail and they will then have to look at why the test is failing.

It doesn't seem to be true to me as `Helpers#matches_count?` returns just after checking `count` option. It won't even check others. So the options may be conflicting but the tests will pass.
",abotalov,2014-07-08 21:31:09
1260,2014-07-08 21:31:09,"Please open a new issue about it not checking all the options if count is specified, we will not be raising an error if more than one count key is passed though
",twalpole,2014-07-08 21:31:09
1260,2014-07-08 22:44:33,"Also note that the behavior you're complaining about is behavior that is actually tested for in all_spec.rb, and documented in Capybara::Helpers::matches_count, which is referred to from the finders #all documentation - so it definitely won't be changed before 3.0 at the earliest
",twalpole,2014-07-08 21:31:09
1259,2014-02-24 15:45:22,"We upgraded to Capybara 2.2.1 to use the contenteditable feature to interact with [SCEditor](http://www.sceditor.com/), a JS rich text editor. It renders the editable body within an iframe.

Unfortunately, using node.set() does not work in a within_iframe block. We tried something along the lines of

<S_CODE_TOKEN>

It will defocus the currently selected element, but not change the focus inside the frame.
",rbu,2016-04-07 00:43:24
1259,2014-02-24 15:59:03,"I think this is a bug of driver that you use, not Capybara's one
",abotalov,2016-04-07 00:43:24
1259,2014-03-02 14:19:02,"@rbu @twalpole I don't know, this is a very edge use case, so it could be buggy in Capybara. @rbu which driver are you using? Could you provide an executable reproduction?
",jnicklas,2016-04-07 00:43:24
1259,2014-03-03 12:09:46,"Sure, sorry for not mentioning we use Selenium earlier. Reproducer:

<S_CODE_TOKEN>
",rbu,2016-04-07 00:43:24
1259,2014-03-03 18:38:07,"After a quick look I believe this is due to seleniums inability to change the contents of a contenteditable elements children -- we have a test for this that is marked pending for exactly this reason.    I'm 99% sure this doesnt have anything to do with frames but will continue to investigate if anyone can convince me it does
",twalpole,2016-04-07 00:43:24
1259,2014-03-03 19:44:55,"It looks like this is the same bug as https://code.google.com/p/selenium/issues/detail?id=6984
",abotalov,2016-04-07 00:43:24
1259,2014-07-24 17:15:15,"@abotalov That bug is marked as fixed, supposedly in 2.42 -- doesnt appear to fix the test we currently have pending though, any insight?  
",twalpole,2016-04-07 00:43:24
1259,2014-07-24 18:13:04,"The following works:

<S_CODE_TOKEN>

The test from description of https://code.google.com/p/selenium/issues/detail?id=6984 also works.

I've just reported a new bug about @rbu's case - https://code.google.com/p/selenium/issues/detail?id=7651
",abotalov,2016-04-07 00:43:24
1259,2016-04-07 00:43:24,"Closing since this is an issue in selenium.  If it's ever fixed there it will start working in Capybara.
",twalpole,2016-04-07 00:43:24
1258,2014-02-21 16:08:29,"This information is important and should be easily accessable
",mxrguspxrt,2014-03-02 14:15:23
1258,2014-03-02 14:15:23,"I guess that you ran into this problem and wanted to call out the solution for others, but I don't think this is a good way of structuring a README. Especially we can't call out any gotcha people might run into when using some other library together with Capybara, there are simply too many.
",jnicklas,2014-03-02 14:15:23
1257,2014-02-21 13:26:42,"I'm not sure if I've identified some sort of bug or if there's something wrong with my app. Within a feature spec, when I have it click a link to open an iframe, the JavaScript within the iframe doesn't seem to execute. (I've tried having it `sleep` for 5 seconds per suggestions from some StackOverflow answers to no avail.)

<S_CODE_TOKEN>

The only workaround that I've found is to add a ""Reload"" link within the view for the test environment, click that reload link, and then proceed with the rest of my test.

View code:

<S_CODE_TOKEN>

Then the modified test:

<S_CODE_TOKEN>

I could create an app that demonstrates this problem and post to GitHub/Heroku if you think it would help. Otherwise, do you have any idea what could be going on here?
",chrisdpeters,2014-02-21 14:59:57
1257,2014-02-21 13:55:55,"Could be that Capybara manages to click the link before you've attached the event to it? Did you use a DOM-ready block? Try if using event delegation helps.
",jnicklas,2014-02-21 14:59:57
1257,2014-02-21 14:59:57,"Even if I call `sleep 10` after clicking the link to open the iframe, the event never attaches. It's a really simple page being loaded in the iframe, so it makes no sense that the JavaScript would take that long to execute. And it runs just fine in Firefox when I'm playing around with the app by hand.

I can try event delegation over the next day or two to see if that alleviates the problem. I'll reopen this issue if it doesn't.
",chrisdpeters,2014-02-21 14:59:57
1256,2014-02-19 19:43:48,"Currently `have_selector`, `have_text` and `have_title` do substring matching when string is passed to them.

But if element's text is not too long it's often more useful to do full string matching.

Currently synchronized full text matching can be done only using regexps:

<S_CODE_TOKEN>

But IMO it looks awful. I think Capybara should do a better job here and provide a way to do a full text matching more nicely.

I'd like to propose some ways how API may look like and I would like to hear your opinion on this.

Here is what I can propose:

<S_CODE_TOKEN>
#1 + #2a + #3a looks quiet good. But in that case we will have to add methods 10 methods:

`has_full_text?`, `has_no_full_text?`, `have_full_text`, `assert_full_text`, `assert_no_full_text`, `has_full_title?`, `has_no_full_title?`, `have_full_title`, `assert_full_title`, `assert_no_full_title`. IMO it's too much given that there are other ways.

IMO #3b doesn't look good.

I like #1 + #2c + #3c the most. The only issue with this is that it doesn't fit into the general idea of locator that carries out the main role in searching + options that clarify it.
",abotalov,2016-12-23 20:24:23
1256,2014-02-19 22:27:20,"Isn't the obvious one:

<S_CODE_TOKEN>
",jnicklas,2016-12-23 20:24:23
1256,2014-02-19 22:38:47,"The user isn't likely to want to do full text matching using `have_text` even if `Capybara.exact = true` is set. Personally I do `Capybara.exact = true` in my projects but I won't like full text matching being default for `have_text` or `:text` option of `have_selector` if `Capybara.exact = true` is set.

So `have_text(""foo"", exact: true)` shouldn't take into account `Capybara.exact`.

So option that enables full text matching should be named differently.

Also the aim of this proposal is provide the shortest possible API for this.

We can provide

<S_CODE_TOKEN>

but it's longer than

<S_CODE_TOKEN>

so I would prefer `full: 'foo'`
",abotalov,2016-12-23 20:24:23
1256,2014-02-20 00:40:03,"We can document that have_text defaults to exact:false no matter what Capybara.exact is set to and accepts exact:true as an option -- that way the api is consistent and we get the apparently desired behavior
",twalpole,2016-12-23 20:24:23
1256,2014-02-20 07:03:08,"@twalpole There is another issue with `:exact`:

<S_CODE_TOKEN>

So we can't use the same option for both xpath matching and text matching. At the very least they should be named differently.
",abotalov,2016-12-23 20:24:23
1256,2014-02-20 08:17:14,"I think either way we lose. It's also not nice to have two options with different names which mean the same thing.

One possible way for you to solve this in your app is to add a small helper, so that instead of:

<S_CODE_TOKEN>

You can write this:

<S_CODE_TOKEN>

Maybe that's not super awesome, but it's at least a little better.

Considering the past, and how people have reacted to Capybara releases where we changed defaults or behaviour, I think we want to be very, very careful with making any breaking changes. But I also think it's really important that the API is memorable and comprehensible and looks nice. This seems to leave us in a spot where we can't really fix this in a satisfactory way, imo.
",jnicklas,2016-12-23 20:24:23
1256,2014-02-20 08:44:18,"@jnicklas I thought about something like `exact` helper method previously too but somehow I forgot about that idea when writing this issue.

Proposed by me:

<S_CODE_TOKEN>

Proposed by you:

<S_CODE_TOKEN>

Your proposal is also quiet short and nice. I think I support it even more than mine as it would require much less amount of code to write and it leads to shorter learning curve. But I think this helper method is useful enough for everybody to be placed to Capybara::DSL.
",abotalov,2016-12-23 20:24:23
1256,2014-02-20 09:12:02,"The problem is that people are going to end up writing code like:

<S_CODE_TOKEN>

and then wonder why it doesn't work.
",jnicklas,2016-12-23 20:24:23
1256,2014-02-20 09:12:22,"It's kinda hard to understand where it would work and where it wouldn't.
",jnicklas,2016-12-23 20:24:23
1256,2014-02-20 09:34:03,"what about allowing the :text option to optionally be set to a hash like so

have_selector('#id', text: { exact: 'some test' })

that way we're using the same option naming but scoping it to where its being applied for queries where text is not the primary thing being searched  have_text and have_title would still be

have_text('some text', exact: true)
have_title('some text', exact: true)
",twalpole,2016-12-23 20:24:23
1256,2014-04-06 15:09:03,"People may use any of those variants:

<S_CODE_TOKEN>

It would be better to document a single ""recommended"" alternative to both of those so if we are going to add API for this, it would be better to make it short as full text/title matching is a common use case and existing way to write `/\Asome test\Z/` is short.

<S_CODE_TOKEN>

is too long in comparison with:

<S_CODE_TOKEN>

So what about the next?

<S_CODE_TOKEN>
",abotalov,2016-12-23 20:24:23
1256,2014-04-07 16:56:25,"I don't like adding another parameter name - we already have options through the api for doing exact matches and they all use exact -- nowhere else is full or full_text used.  `text: { exact: 'some test' }`  describes what its doing and uses naming that is already familiar in the api -   if people really need more sugar on top they can write their own helper  exact(txt) or whatever that just returns `text: { exact: txt }`
",twalpole,2016-12-23 20:24:23
1256,2014-04-07 20:20:58,"IMO it makes sense to do exact text matching by default for `have_link`, etc. methods + possibly `have_title` as those usually operate with small pieces of texts and it usually makes sense to test them exactly.

But IMO it doesn't make sense to do exact text matching by default for `have_text` as usually people write `expect(page).to have_text('some text')`. So `Capybara.exact` shouldn't influence `have_text`.

But adding `exact` option to `have_text` will add confusion as setting `Capybara.exact` won't have influence on it. So I think this option should be named differently.

Also note that text returned by `text` is a user-visible text, with CSS rules applied. Text used by xpath gem is a text present in HTML source of the page which may differ from the user-visible text and Capybara users should be aware of this difference.

So I don't think that text used in `have_link` and text used in `have_text` are familiar to each other enough. I think option for `have_text` should be named differently. IMO `:full` is a good enough name.
",abotalov,2016-12-23 20:24:23
1256,2014-04-07 20:50:09,"We are not going to change the default behavior in the next 2.x release so the comments about whether or not exact text matching by default make sense or not are irrelevant for the current discussion.    The only thing we're currently talking about are optional ways of doing the regex full match without using a regex.   For that case  have_text('xyz', exact: true)   have_title('xyz', exact: true) are fine and consistent with current apis -  for have_selector('#id', text: {exact: 'abc'})  is also understandable.  The more I think about it -- having some of these default to exact and some not, also doesnt make a lot of sense from a consistency point of view.   We will not be adding new :full or :full_text keywords currently.  We can revisit them in the future potentially, but I don't see any real benefit of them currently.
",twalpole,2016-12-23 20:24:23
1256,2014-04-07 21:05:00,"> We are not going to change the default behavior in the next 2.x release so the comments about whether or not exact text matching by default make sense or not are irrelevant for the current discussion.

This issue has milestone 3.0. I don't think we should do anything about it in 2.x

> The only thing we're currently talking about are optional ways of doing the regex full match without using a regex.

Yes.

> For that case have_text('xyz', exact: true) have_title('xyz', exact: true) are fine and consistent with current apis

I disagree that `have_text('xyz', exact: true)` is fine and consistent for the reasons specified in my previous post (`Capybara.exact` shouldn't influence `have_text`; CSS rules). Thus I think we should not add `:exact` option to methods that `Capybara.exact` won't influence.
",abotalov,2016-12-23 20:24:23
1256,2014-04-07 21:18:33,"I'm pushing back against the Capybara.exact not influencing have_text -  how is anyone supposed to know which matchers it affects and which it doesn't -- It enables exact or partial matching for visible text except in the have_text matcher -- that doesnt make any sense.
",twalpole,2016-12-23 20:24:23
1256,2014-04-07 21:28:45,"IMO it doesn't make any sense to enable exact text matching for `have_text` by default.

But it makes sense to enable exact ""text"" matching for `have_link`/`have_button` by default.
",abotalov,2016-12-23 20:24:23
1256,2014-06-07 09:36:03,"I've been thinking about this for some time during the last previous months. 

If exact text matching is default, people MUST add some code to match text partly.

But if part text matching is default, there's no need to add some code to match text exactly. So people (e.g. me) tend to forget to add some code that will tell that text should be matched exactly.

Therefore, tests may not find some bugs like:

<S_CODE_TOKEN>

I think that some people may be not even aware that in those situations they should write:

<S_CODE_TOKEN>

So I think a config option like `Capybara.exact_text` would be a good addition to Capybara API. I'm not sure if it should be set to true or false by default but I think I would make it `true` at projects I work on. Also I think `Capybara.exact_text = true` should be ""recommended"" like `Capybara.exact = true` is.

`Capybara.exact` shouldn't be used for text/title matching as many people that set `exact` to `true` will have issues when upgrading. So I think people should have a choice if they want to upgrade `have_text`, `have_title`, etc. as it may be not worth it at some projects.

`exact_text` should influence `have_text`, `have_title`, `:text` option in `have_css`/modal dialogs/window APIs and other places where text matching is used.
",abotalov,2016-12-23 20:24:23
1256,2014-06-23 19:24:52,"This can be partly handled by https://github.com/abotalov/waiting_rspec_matchers:

<S_CODE_TOKEN>

But I think my previous comment still makes sense as it's more to nice to write:

<S_CODE_TOKEN>

I think https://github.com/abotalov/waiting_rspec_matchers should be only for relatively rare cases.
",abotalov,2016-12-23 20:24:23
1256,2016-12-23 20:24:23,Closing this for PR #1813,twalpole,2016-12-23 20:24:23
1255,2014-02-19 15:46:00,"Upgrading to Rspec 3.0.0.beta2 results in a number of deprecation messages:

<S_CODE_TOKEN>

Rspec 3.0.0.beta2 adds support for Rails 4.1. Rails 4.1 RC1 was recently released.

I'll dive a little deeper and try to put together a PR for you.
",christiannelson,2014-02-19 15:51:23
1255,2014-02-19 15:51:18,"It's a duplicate - https://github.com/jnicklas/capybara/issues/1254
",abotalov,2014-02-19 15:51:23
1254,2014-02-19 09:58:40,"I'm using `expect(page).to have_content 'Success'` in a request spec and that produces the following deprecation warning from rspec 3.0.0.beta2:

> Deprecation Warnings:
> 
> Capybara::RSpecMatchers::HaveText implements a legacy RSpec matcher
> protocol. For the current protocol you should expose the failure messages
> via the `failure_message` and `failure_message_when_negated` methods.
> 
> If you need more of the backtrace for any of these deprecations to
> identify where to make the necessary changes, you can configure
> `config.raise_errors_for_deprecations!`, and it will turn the
> deprecation warnings into errors, giving you the full backtrace.
",Goltergaul,2014-02-19 13:59:21
1254,2014-02-19 11:17:09,"See https://github.com/jnicklas/capybara/pull/1219
",abotalov,2014-02-19 13:59:21
1254,2014-02-19 13:59:21,"ah didn't find this one. thanks
",Goltergaul,2014-02-19 13:59:21
1254,2014-02-27 19:52:51,"Hey, I'm on rspec 3.0.0beta2 and capybara 2.2.1 and still getting this issue. My impression is that this PR was pulled. Are the warnings still expected behaviour? If so, any workarounds? 
",ashour,2014-02-19 13:59:21
1254,2014-02-27 20:07:25,"@ashour You get those warnings because Capybara version that includes this change hasn't been released yet.
",abotalov,2014-02-19 13:59:21
1254,2014-02-27 23:57:51,"@abotalov I see. Is there any way to suppress the warnings for the time being?
",ashour,2014-02-19 13:59:21
1254,2014-03-13 12:38:59,"@ashour you could link to the github repo in your gemfile for now
",ncri,2014-02-19 13:59:21
1254,2014-04-04 00:39:36,"@ncri Where are you suggesting we pull from to work around this?  Capybara's master branch is still at version 2.2.0.  Does it contain the fix?
",palfvin,2014-02-19 13:59:21
1254,2014-04-04 01:43:49,"@palfvin Yes this was pulled into master -- we are still working on full RSpec 3 compatibility, I hope to release a new gem within the next 2 weeks
",twalpole,2014-02-19 13:59:21
1254,2014-05-19 21:04:59,"Any updates on when a new capybara gem version will be released?
",cupakromer,2014-02-19 13:59:21
1254,2014-05-19 21:13:06,"@cupakromer  I had wanted to get one out by now - but then life got in the way.  Hopefully end of this week - more likely end of next week.
",twalpole,2014-02-19 13:59:21
1254,2014-05-19 21:20:06,"Sounds good. rspec just cut all of the 3.0.0.rc1 versions. I feel more projects will try out RC1 than the betas. So they'll likely see lots of these messages filling up the output.
",cupakromer,2014-02-19 13:59:21
1254,2014-06-23 01:41:24,"rspec 3 is out! Time to fix this one?
",puyo,2014-02-19 13:59:21
1254,2014-06-23 01:46:31,"I believe this was fixed in 2.3
",twalpole,2014-02-19 13:59:21
1254,2014-06-23 01:58:22,"You're totally right. Sorry. I had a version constraint in a Gemfile... it's a long story. :)
",puyo,2014-02-19 13:59:21
1253,2014-02-18 21:28:19,"There are many things that people may want to do when Capybara's reset! method is invoked:
- Accept alerts (https://github.com/jnicklas/capybara/pull/1252)
- Clear HTML5 session storage (https://github.com/jnicklas/capybara/issues/1001)
- Clear cache/HTML5 local storage/IndexedDB/Web SQL database/flash cookies/etc.

But most apps don't need to do it so it would be incorrect to slow down people's tests .

I propose to add method to `Capybara::Session` that can be used like:

<S_CODE_TOKEN>

The block passed to the method will be called after `driver.reset!` when session's `reset!` method is invoked.
",abotalov,2014-02-19 06:32:40
1253,2014-02-18 21:39:00,"I disagree that this is a good feature. There is no need for a hook in this case, there are a multitude of options to fix strange cases like this one. Monkey patching for one. Changing the `after` hook in RSpec, `prepend` in Ruby 2.1, simply creating their own `after` hook in RSpec (which is how I usually do it), etc... I think we can't cater to every crazy thing that people might want to do. 
",jnicklas,2014-02-19 06:32:40
1253,2014-02-19 06:34:35,"Actually I don't need it myself too. I just saw a couple of issues created by others and thought that such ability would probably be useful.
",abotalov,2014-02-19 06:32:40
1253,2014-02-20 19:45:14,"@jnicklas Thanks for the tips. I'm fairly new to the testing stack I'm using here (Cucumber/Capybara/Selenium) so my apologies for the potentially naive question, but are you suggesting the best approach to do something like Issue 1252 would be to monkey patch the `reset!` method?
",klinden,2014-02-19 06:32:40
1253,2014-02-20 19:58:41,"@klinden no, my preferred solution is to simply add an RSpec after hook (or equivalent) and run whatever you need to before Capybara.reset_sessions! is called. Monkey patching `reset!` is an option, but not the first one I'd use.
",jnicklas,2014-02-19 06:32:40
1253,2014-02-20 20:01:21,"@jnicklas Well, the only problem with that is I can't do what I need to do (accepting an onbeforeunload dialog) until the browser has attempted to navigate away (which happens in `reset!`)
",klinden,2014-02-19 06:32:40
1253,2014-02-20 20:25:41,"Couldn't you just navigate away first? ;)
",jnicklas,2014-02-19 06:32:40
1253,2014-02-20 20:27:10,"Yeah, I suppose that would work, haha. I guess it's just a matter of figuring out what seems the least hackish. Thanks for the tips.
",klinden,2014-02-19 06:32:40
1253,2014-03-14 07:21:34,"I still think the entire test suite shouldnt crash because of a pop up.

Currently, if you call reset_session! and a pop up appears, then the next tests throw ""unexpected pop up"" error and your entire suite is gone.
",stenver,2014-02-19 06:32:40
1253,2014-04-01 13:39:08,"While we already made a workaround and created our own implementation of reset_session that doesnt crash, then i would still like to contribute and help Capybara get better. If i make a pull request that fixes this quite critical bug, then are you guys going to considder it?
",stenver,2014-02-19 06:32:40
1252,2014-02-18 19:39:49,"During session reset in the Selenium driver if the page being tested had an onbeforeunload dialog, navigating to about:blank would cause this dialog to display. There was no way to handle this so a Selenium::WebDriver::Error::UnhandledAlertError would occur. This patch switches to the alert (if it is present) and accepts it so that the error doesn't occur.
",klinden,2014-02-19 06:35:52
1252,2014-02-18 21:28:29,"See https://github.com/jnicklas/capybara/issues/1253
",abotalov,2014-02-19 06:35:52
1252,2014-02-19 06:35:52,"Looks like this idea is not supported by Jonas - #1253 
",abotalov,2014-02-19 06:35:52
1251,2014-02-18 05:35:26,"A small thing, doc says:

<S_CODE_TOKEN>

but I'm using Rails (3.0.20) with minitest and I must add teardown method otherwise Capybara doesn't reset for me between tests. 
",gamov,2016-04-04 17:17:56
1251,2014-03-02 14:21:32,"I haven't used test/unit or minitest with Rails in a decade, but it would be my guess that the `teardown` method is indeed needed for Rails too, and the documentation is confusing or downright wrong.
",jnicklas,2016-04-04 17:17:56
1250,2014-02-17 21:24:20,"It seems to be a Ruby convention to end names of classes derived from StandardError with ""Error"".

But names of many Capybara error classes don't follow this convention.

I'd want to propose to change names of error classes to follow it:
ElementNotFound -> ElementNotFoundError
Ambiguous -> AmbiguousError
ExpectationNotMet -> ExpectationNotMetError
etc.
",abotalov,2014-02-18 06:28:16
1250,2014-02-17 22:20:03,"Even worse, they're inconsistent ;) I guess the _only_ one that people are likely going to actively use as an API is `ElementNotFound`, so changing that one is worse than changing any of the others. In other words, if we change anything with the errors we should probably do the opposite and remove the `Error` suffix from those that have it.
",jnicklas,2014-02-18 06:28:16
1250,2014-02-17 22:23:03,"When can people use `ElementNotFound` as an API?
",abotalov,2014-02-18 06:28:16
1250,2014-02-17 22:25:20,"Rescuing it, or intentionally raising it together with `synchronize`. I've done this on a number of projects. So yes, this error at least, is public API, IMO, and we shouldn't break it just because.
",jnicklas,2014-02-18 06:28:16
1249,2014-02-17 17:09:07,"I am making some test with cucumber-capybara-selenium.

And I have the next error:

<S_CODE_TOKEN>

And the ruby code is:

<S_CODE_TOKEN>

And my system is:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",mdtrooper,2014-03-02 14:23:34
1249,2014-03-02 14:23:32,"This does not attribute the bug to Capybara, most likely you have an encoding error in your code. That's what the stack trace indicates.
",jnicklas,2014-03-02 14:23:34
1248,2014-02-17 13:13:37,"Capybara is not thread safe in that we rely on global configuration which is liable to change at any point. Unfortunately, fixing this is probably going to break APIs in a few subtle ways. Changing a global configuration parameter is not going to affect an already existing session, since we'd need to copy configuration to sessions to prevent concurrent modification, as well as providing an API to change options per session. I think this is consistent with how _most_ people use Capybara, but it's going to break for some people, so I want to do this for 3.0.
",jnicklas,
1248,2014-02-17 13:55:28,"It seems we should just move most of configuration from capybara.rb to session.rb.

looks good to me
",abotalov,
1248,2014-02-17 14:10:11,"Yes, I think actually making this change is reasonably simple. We'd have to add the thread id to the session key, I think, but that shouldn't be too bad.
",jnicklas,
1248,2014-10-21 02:39:29,"I'm not sure I understand your comment about adding thread id to the session key. Do you mean using thread local storage such as `Thread.current[Capybara]`? 

It should be possible for the same thread to have two different capybara sessions with different settings, right? Otherwise any code which uses two or more different configurations in a single thread will have to take special care to maintain the previous the configuration state while using a session, which seems onerous compared to storing configuration in the session object at which point no two sessions would have access to the same configuration object. 
",soulcutter,
1248,2015-01-08 09:15:07,"Is this ok?

<S_CODE_TOKEN>

Here `session` is an array of session instance, I have tried, but it turned out to be dead lock. I don't know why?
",timlentse,
1248,2015-08-27 19:38:01,"is there a branch or a patch that makes this possible?  When is capybara 3 coming out.
",oystersauce8,
1248,2015-08-27 19:40:53,"There is no branch or patch currently and no current timeline for Capybara 3
",twalpole,
1248,2016-12-16 19:24:29,The largest part of this (the per session configuration) is being worked on in the `session-config` branch/PR #1808  if anyone has any feedback/suggestions,twalpole,
1247,2014-02-16 18:12:32,"There are some backwards incompatible changes that I'd like to propose. Some of them are in https://github.com/jnicklas/capybara/pull/1246

I think at least one minor version should be released in 2.x series as 3.0 may remove some APIs and it makes sense to deprecate such APIs in 2.x. Semver says:

> Before you completely remove the functionality in a new major release there should be at least one minor release that contains the deprecation so that users can smoothly transition to the new API.

So I think we should create a new branch for 2.x Capybara versions that will maintain backwards compatibility. Master will be for 3.0 development.
",abotalov,2014-03-02 14:24:24
1247,2014-03-02 14:24:24,"I think we settled on not too much breaking changes, and we have milestones set up, so this issue can be closed, right?
",jnicklas,2014-03-02 14:24:24
1246,2014-02-16 17:48:45,"See #1241

This description has been updated several times to reflect current state of the pull request while it has been amended.

Added:
1. `assert_text`, `assert_no_text`, `assert_title`, `assert_no_title` methods
2. `:wait` option for `has_title?`, `has_no_title?`, `have_title`

Other user-facing changes:
1. Fixes https://github.com/jnicklas/capybara/issues/1179
2. Improved failure messages for `have_text` and `have_title` matchers. I think it would be better to improve failure message for `have_selector` in another PR as this one is already quiet long.
3. `Capybara::Node::Simple` now normalizes returned whitespace
4. `has_text?('text', count: 0)` will behave in the same way as `has_no_text?('text')`

Known backwards incompatible changes that probably belong to public API:
1. `Capybara::Query` was renamed to `Capybara::Query::NodeQuery` and made private api
2. `all_text` and `visible_text` implemented by drivers not longer normalize whitespace. It's done in `Capybara::Node::Element` now.
3. `description` method was removed from `Capybara::RSpecMatchers::HaveSelector`,  `Capybara::RSpecMatchers::HaveText`,  `Capybara::RSpecMatchers::HaveTitle` as I don't see enough sense in its existence
",abotalov,2014-07-01 22:46:26
1246,2014-02-17 12:39:10,"The only change that is actually breaking existing behavior is the `has_title` change, right? Is this really necessary? It doesn't seem like we _have_ to fix that issue. The fact that it matches substrings is consistent with `has_text` and `has_selector`, so that's a solid argument against this change, imo.
",jnicklas,2014-07-01 22:46:26
1246,2014-02-17 12:53:59,"I like this in principle. One thing that bugs me a bit is there's something a bit ugly about the way that queries are stateful. Especially since `NodeQuery` is not stateful (it's state is carried via `Capybara::Result`) while `TextQuery`, etc... are. I'm not saying that `Capybara::Result` is necessarily a good thing, I'm not super enthusiastic about it, to be honest. But maybe we could have done something far simpler, which would have solved the same problems. Why not simply add `assert_text` and `assert_tiltle` similar to `assert_selector`. We can use that in the matchers, and they'll be far simpler, and won't suffer from the race condition problems. Additionally these methods will be a nice addition for people who use Capybara with xUnit style test frameworks. What do you think?
",jnicklas,2014-07-01 22:46:26
1246,2014-02-17 13:09:08,"@jnicklas I think we should have either TextQuery or TextResult to fix https://github.com/jnicklas/capybara/issues/1179

We can't just have assert_text as we need to store state somewhere.
",abotalov,2014-07-01 22:46:26
1246,2014-02-17 13:13:01,"TextResult seems to be an overkill to me and storing state in TextQuery is good enough to me.
",abotalov,2014-07-01 22:46:26
1246,2014-02-17 13:25:57,"Regarding your comments about `has_title?`

IMO `page.has_text?('text')` means ""does page contain text ""text"" on it?""

So `page.has_title?('title')` means ""does page contain title ""title"" on it?"" It doesn't mean ""does title has substring ""title"" in it?""

So I think this change is good.
",abotalov,2014-07-01 22:46:26
1246,2014-02-17 13:45:02,"But why not just `assert_text`, and then use the message of the exception as the failure message. This is pretty much what we do with `have_selector` and `assert_selector`, and there it fixes the same problem, so it would be internally consistent, and we wouldn't have to add `TextResult`.
",jnicklas,2014-07-01 22:46:26
1246,2014-02-17 13:53:58,"I beleieve rspec matchers should raise standard's rspec RSpec::Expectations::ExpectationNotMetError.
But `assert_selector` raises Capybara::ExpectationNotMet

IMO it's quiet strange.

So I think it would probably be good to refactor HaveSelector so it won't use assert_selector.

Also I plan to refactor failure message for Result so it will be more descriptive about which filters exactly have been failed. It may look like (I haven't fully decided yet):

<S_CODE_TOKEN>
",abotalov,2014-07-01 22:46:26
1246,2014-02-17 21:57:55,"@jnicklas suggestion to add `assert_text` and `assert_title` for non-rspec users seems quiet good to me. I'll add them.

But it seems that `HaveSelector`'s `matches?` method shouldn't invoke `assert_selector`:

<S_CODE_TOKEN>

as [RSpec 3 adds compound matchers](http://myronmars.to/n/dev-blog/2014/01/new-in-rspec-3-composable-matchers). User should be able to use them like:

<S_CODE_TOKEN>

So `matches?` method should return false instead of raising error. So `HaveSelector` should have `failure_message` and `failure_message_when_negated` methods.
",abotalov,2014-07-01 22:46:26
1246,2014-02-17 22:18:03,"We could simply catch the error and store it. That's stateful in the same way your proposed Query solution is, but it's quite isolated to the matchers, so it seems less bad to me. What do you think?
",jnicklas,2014-07-01 22:46:26
1246,2014-02-18 20:33:22,"@jnicklas I tried to fix commit according to your suggestions and updated pull request description to reflect this.

Some notes:
1. I still think that it would be better for `have_title` to do full string matching instead of substring matching. Reasons:
   - full text matching for title is arguably more useful than substring matching as titles are usually not long enough and they can be matched fully
   - currently synchronized full title matching can be done only using regexps like `/\Atitle\Z/`. If proposed change will be applied substring matching could be done via `/title/` which looks better than `/\Atitle\Z/` that is currently needed for full title matching
2. I put `failure_message` inside `TextQuery` and `TitleQuery` as
   - `:expected_text`, `:count`, `:actual_text` aren't needed in other places except building failure message
   - `failure_message` and `failure_message_when_negated` seem to need some helper method to be DRY
3. I will probably fix issue with compound matchers outlined above in another pull request later
",abotalov,2014-07-01 22:46:26
1246,2014-02-20 08:37:24,"@abotalov, why did you remove the tests for `#description` on the RSpec matchers?

Looking at the code this no longer changes the `have_title`, etc.. behaviour, right? In that case I think this is shaping up nicely, and I'm pretty sure we'll get this merged soon. I think it would be nice to have separate tests for `assert_text`, etc... as these are now public API, but maybe it's not super essential to get this PR merged, I don't want to wait too long on this one since the diff is so huge.

Nice job @abotalov this cleans up the internals very nicely, and also opens up for other interesting refactorings in the future.
",jnicklas,2014-07-01 22:46:26
1246,2014-02-20 08:54:17,"@jnicklas 
1. I deleted `description` method from rspec matchers so I deleted tests for them too. It's better to test for failure messages than descriptions as users don't see descriptions.
2. I'm currently writing tests for `assert_text` and `assert_title`.
3. I haven't yet reverted my API changes for `has_title?`. I'll do so after we'll have final decision on https://github.com/jnicklas/capybara/issues/1256
4. I'll rebase this PR on master.
",abotalov,2014-07-01 22:46:26
1246,2014-02-20 09:00:20,"@jnicklas Also I placed `failure_message` method into query. Do you see a better place for it?
",abotalov,2014-07-01 22:46:26
1246,2014-02-20 09:10:11,"@jnicklas Do you prefer me to amend commit or make a new one?
",abotalov,2014-07-01 22:46:26
1246,2014-02-20 09:16:26,"@abotalov amend is better, imo.

Just checked the code for `failure_message`, and I'm still not happy about it. My main problem is that I want queries to be repeatable, and therefore stateless. If we make this refactor, it'll set a direction, where we can generalize a lot of the querying code in Capybara, and the ability to re-use queries is nice. Making them stateless would make them reusable and also thread-safe (maybe not so important right now). So, the addition of `assert_title`, etc... is nice, but the purpose of adding them has been lost. The purpose was to remove the statefulness from Query.
",jnicklas,2014-07-01 22:46:26
1246,2014-02-20 11:07:06,"@jnicklas How can I make query stateless?
Do you mean that `resolve_for` should return `TextResult` (or just array) that will store state needed to construct failure message?
",abotalov,2014-07-01 22:46:26
1246,2014-02-20 12:09:16,"Maybe, or maybe moving `resolve_for` into the query isn't that great, I'm not sure.
",jnicklas,2014-07-01 22:46:26
1246,2014-02-20 12:11:19,"@jnicklas Why do you want to make queries repeatable and stateless?
",abotalov,2014-07-01 22:46:26
1246,2014-02-22 14:04:01,"@jnicklas I amended commit. Changes since my last comment:
- Branch was rebased on master
- `assert_selector`/`assert_no_selector` now use `resolve_for` directly instead of `all`. It's done as `assert_text`/`assert_no_text` should have the same logic for count keys.
- `has_title?(string)` checks passed string for inclusion, not exact matching, as it did previously as it's out of scope of this PR
- Tests for `assert_text`, `assert_title` have been added
- `assert_selector` and `assert_no_selector` have been moved upper in the file as all other methods (except methods for matching texts) depend on them
",abotalov,2014-07-01 22:46:26
1246,2014-02-22 14:15:45,"So I'd want to DRY code for count keys. But doing it properly would require some refactoring as I believe it would be better:
- to raise error if conflicting count options were passed (e.g. `count: 3, minimum: 4, maximum: 2, between: 6..5`)
- provide better failure message if several count options were passed (currently `Helpers#failure_message` builds failure message with only one option taken into account). It should normalize them instead

So I think it should be done in another PR as logic from `assert_selector`/`assert_text`/`Helpers#failure_message`/`Helpers#matches_count?` should probably be extracted to `BaseQuery` and `resolve_for`.
",abotalov,2014-07-01 22:46:26
1246,2014-02-22 14:57:07,"> If we make this refactor, it'll set a direction, where we can generalize a lot of the querying code in Capybara, and the ability to re-use queries is nice. 

I think we can move such code to `BaseQuery` instead of writing `TextResult`, `TitleResult`, `BaseResult`.
",abotalov,2014-07-01 22:46:26
1246,2014-06-11 19:37:02,"This is a massive commit, are there parts of this that are non-breaking that make sense to implement separately first?
",twalpole,2014-07-01 22:46:26
1246,2014-06-11 19:44:23,"@twalpole changes made by this PR are outlined in description of this PR.
",abotalov,2014-07-01 22:46:26
1246,2014-06-11 19:58:05,"@abotalov Yes - I read the list of changes and am asking why this is one monolithic change and not serveral smaller ones -  Are all the changes dependent  on other changes, or can some of this be done as smaller separate non-breaking commits.   For instance the ""Added"" section could be done as 1 or 2 commits and I don't think need the rest of these changes (from just a cursory glance), and would not require a major release.
",twalpole,2014-07-01 22:46:26
1246,2014-06-11 20:00:59,"Renaming Capybara::Query and making it private should have an intermediate deprecating release as well - what is the reasoning behind doing this anyway?
",twalpole,2014-07-01 22:46:26
1246,2014-06-11 22:12:31,"> what is the reasoning behind doing this anyway?

Some reasoning is explained in #1241. I don't remember well but I think the primary reasons of making this PR are:
- provide better failure messages for matchers
- fix #1179 and similar intermittent bugs
- assert valid keys (I believe all methods that accept hash should assert keys as users often pass invalid keys that aren't validated. Previously it was done only in Capybara::Query but it should be done in all methods)

> Renaming Capybara::Query and making it private should have an intermediate deprecating release as well

Yes, semver tells that minor release should be made. I can add `Capybara::Query` that will be just an alias of `Capybara::Query::NodeQuery` but marked as deprecated to meet this requirement. But I don't think it's worth it (I can't imagine anyone who relies on existence of `Capybara::Query`). I think semi-public API (I write semi-public as I believe this code wasn't actually intended to be used by anyone outside of Capybara). IMO changes that affect ~0 people aren't worth release of a new minor version.

> I don't think need the rest of these changes

Ok, let's go through those changes.

> Other user-facing changes:
> Fixes #1179

It's a bug. All bugs MUST be fixed (even if they are reproducible in ~0.0001% of cases). I think this PR provides quiet a good-looking result. Note that previously I tried to fix #1179 in #1185 but the fix was a crutch.

> Improved failure messages for have_text and have_title matchers. I think it would be better to improve failure message for have_selector in another PR as this one is already quiet long.

Capybara should provide more information for a user in case of failure.

> Capybara::Node::Simple now normalizes returned whitespace

It makes sense

> has_text?('text', count: 0) will behave in the same way as has_no_text?('text')

It makes sense

> Known backwards incompatible changes that probably belong to public API:
> Capybara::Query was renamed to Capybara::Query::NodeQuery and made private api

Several new queries have been added. So I think all queries should be under the same namespace.

> all_text and visible_text implemented by drivers not longer normalize whitespace. It's done in Capybara::Node::Element now.

One of aims of Capybara is to make drivers have less code duplication. So it's better to do it at Capybara side as we can.

> description method was removed from Capybara::RSpecMatchers::HaveSelector, Capybara::RSpecMatchers::HaveText, Capybara::RSpecMatchers::HaveTitle as I don't see enough sense in its existence

I don't see sense in its existence (other rspec matchers don't have it. This stuff was moved into queries)
",abotalov,2014-07-01 22:46:26
1246,2014-06-11 22:40:45,"@abotalov - Either I'm not explaining myself well or you're misreading what I wrote - ""For instance the ""Added"" section could be done as 1 or 2 commits and I don't think need the rest of these changes""  - this does not mean that the rest of the changes are unwarranted, it just means that the two things described under ""Added"" could be done as a separate much smaller commits, that don't break backwards compatibility of public APIs and could be released much sooner in a minor release.   

So I'm going to ask again, hopefully more clearly -  Which parts of this can be moved into separate smaller, feature specific,  pull requests that are independent from each other (so that some can be used now without waiting for a major release)?
",twalpole,2014-07-01 22:46:26
1246,2014-06-11 22:49:47,"> Which parts of this can be moved into separate smaller, feature specific, pull requests that are independent from each other (so that some can be used now without waiting for a major release)?

It's possible to add methods like `assert_text`, etc. in a less DRY way than in this PR in minor version. But I don't like to spend my free time on writing crutches (I beileve open source software should have a very readable and high quality code). I don't support the idea of ""intermediate"" releases that add crutches for the sake of backwards compatibility. I would prefer to make some other breaking changes and make a major version bump.
",abotalov,2014-07-01 22:46:26
1246,2014-06-19 17:24:05,"@twalpole I thought a bit more about this PR and I think it's in a very unmergable state and should be splitted to several PRs with more terse goals when time for 3.0 will come.
",abotalov,2014-07-01 22:46:26
1246,2014-06-19 17:44:05,"@abotalov I agree completely
",twalpole,2014-07-01 22:46:26
1246,2014-06-25 18:40:11,"@twalpole I think I can add `assert_title`/`assert_no_title`/`assert_text`/`assert_no_text` but addition of those methods also requires to add new query classes (BaseQuery, TextQuery, TitleQuery). Otherwise, it would be needed to copy paste`Query#wait` method.
",abotalov,2014-07-01 22:46:26
1246,2014-06-25 21:40:05,"@twalpole I reduced the scope of PR. It seems not to contain backwards incompatible public API changes now. Is scope OK for you now?

I still have to review PR and write yardocs for added methods.
",abotalov,2014-07-01 22:46:26
1246,2014-06-25 23:11:26,"@abotalov - yes the scope of this is much more agreeable - I'll review the PR now
",twalpole,2014-07-01 22:46:26
1246,2014-06-26 21:09:18,"I would like to squash commits before it will be merged.
",abotalov,2014-07-01 22:46:26
1246,2014-07-01 00:06:24,"@abotalov ok -- I think this is looking good -- if you squash the commits I'll go ahead and merge it in
",twalpole,2014-07-01 22:46:26
1246,2014-07-01 22:46:48,"Great job - thanks for keeping with it
",twalpole,2014-07-01 22:46:26
1245,2014-02-12 19:13:36,"Typically, Capybara tests should run against your application without needing to mock any collaborators. However, sometimes it's necessary to mock calls to an external service (in our case, our payment processor). We use RSpec mocks to handle this.

Currently, if the mocked object receives any unexpected messages, it raises an `RSpec::Mocks::MockExpectationError`. This is the expected behavior for RSpec.

Unfortunately, the middleware that Capybara installs to catch these errors and bubble them into the test thread [doesn't catch this error](https://github.com/jnicklas/capybara/blob/master/lib/capybara/server.rb#L20). This means that if you mock an external service during a test and the mock receives an unexpected message, the server fails silently, renders a blank response, and you get a weird failure like this:

<S_CODE_TOKEN>

rather than one like this:

<S_CODE_TOKEN>

This appears to be because RSpec intentionally creates `MockExpectationError` such that it [won't be caught by StandardError rescues](https://github.com/rspec/rspec-mocks/blob/master/spec/rspec/mocks/mock_expectation_error_spec.rb). I assume they do this so that normal error handling in the code under test doesn't swallow these.

Would you accept a patch that made `Capybara::Server::Middleware` rescue `Exception`, or do you anticipate that causing other problems? Would it be appropriate for Capybara to just catch and bubble `RSpec::Mocks::MockExpectationError` specifically instead?
",pnc,2015-02-26 22:34:51
1245,2015-02-26 15:58:00,"This issue isn't limited to RSpec::Mocks::MockExpectationError. @mitchlloyd and I just spent hours trying to figure out why LoadError wasn't being raised in our tests.

Rescuing Exception rather than StandardError would let these errors bubble up. Currently the errors are invisible to us.

I don't think this falls under the common advice of never rescue Exception because the exception is being re-raised after being set on the middleware. It's hard to imagine an exception being raised inside of the server that you wouldn't want to see when running your tests.

We looked into providing a test case for this scenario, but we're unsure of where to write this test. capybara/spec/server_spec.rb has some coverage of the server, but it does not appear to be exercising the middleware.
",mguterl,2015-02-26 22:34:51
1245,2015-02-26 19:08:30,"spec/session/reset_session_spec.rb  is where Capybara.raise_server_errors is tested and would be the place for any new tests -  Without a lot of thought on why the decision was made to only rescue StandardError originally I would be reticent to accept a change to this behavior, due to the potential of breaking tests.  We could however add something like Capybara.raise_server_all_exceptions (defaulted to false).
",twalpole,2015-02-26 22:34:51
1245,2015-02-26 21:04:41,"On second thoughts we'll just make the list of errors caught configurable and default it to StandardError
",twalpole,2015-02-26 22:34:51
1245,2015-02-26 21:44:10,"Would PR #1488 solve your issue(s) in the midterm - and then we can consider raising all exceptions by default in Capybara v3
",twalpole,2015-02-26 22:34:51
1245,2015-02-26 21:51:39,"That will solve the problem for our use case. Thanks for such a quick turnaround!

> On Feb 26, 2015, at 16:44, Thomas Walpole notifications@github.com wrote:
> 
> Would PR #1488 solve your issue(s) in the midterm - and then we can consider raising all exceptions by default in Capybara v3
> 
> —
> Reply to this email directly or view it on GitHub.
",mguterl,2015-02-26 22:34:51
1245,2015-02-26 21:55:11,"@twalpole That would do it for us! I can write a section to add to the _Gotchas_ blurb in the README for your patch, if you like.
",pnc,2015-02-26 22:34:51
1245,2015-02-26 22:15:20,"@pnc - sure
",twalpole,2015-02-26 22:34:51
1245,2015-02-26 22:34:33,"Merged the PR into master-  I don't foresee a new release (2.5) for at least a few weeks, so hopefully you can just use master in the meantime (after-all this has been an open/forgotten issue for over a year :) )  
",twalpole,2015-02-26 22:34:51
1244,2014-02-11 10:21:51,"Hi, guys!

I've just got issue with testing `CKEditor` using `capybara-webkit` driver

after executing client side code such as

<S_CODE_TOKEN>

capybara switches to context of this ckeditor's `iframe` and cann't go back.

Is there way to switch capybara back to default (document) context?
",maximderbin,2014-02-16 14:50:04
1244,2014-02-11 10:23:41,"It looks like Capybara-webkit issue to me.
",abotalov,2014-02-16 14:50:04
1244,2014-02-11 10:42:59,"looks like, but they are silent on it :(
",maximderbin,2014-02-16 14:50:04
1244,2014-02-16 14:50:04,"`capybara-webkit` issue

https://github.com/thoughtbot/capybara-webkit/issues/620
",maximderbin,2014-02-16 14:50:04
1243,2014-02-11 06:28:09,"The 'current_path' method on the session object, uses 'current_url', which uses the javascript 'window.location.toString()' (with capybara-webkit at least) to determine the current url. That string may or may not encode special characters like spaces, it seems to depend on the browser. Eg, 'http://www.example.com/path with spaces/index.html'. But firefox doesn't encode spaces, and neither does webkit, and passing a string with spaces to URI.decode raises an error.

This patch makes the RackTest browser behave like firefox, and then introduces a test & fix for the problem.
",trammel,2014-02-11 07:10:29
1243,2014-02-11 06:55:04,"Note that [Webdriver spec says](https://dvcs.w3.org/hg/webdriver/raw-file/default/webdriver-spec.html#methods-2):

> The returned value should be the equivalent to returning document.location.href
",abotalov,2014-02-11 07:10:29
1243,2014-02-11 07:06:21,"OK. I'll withdraw this pull request, and document exactly when the browser (chrome & webkit) and exactly under what circumstances they're providing back unencoded ""window.location.href"" strings when used with Capybara.
",trammel,2014-02-11 07:10:29
1242,2014-02-07 23:37:27,"I'm using Capybara 2.2.1 with Rspec.

I have this code on my page:

<S_CODE_TOKEN>

And I've tried each of these:

<S_CODE_TOKEN>

I get the same error every time:

<S_CODE_TOKEN>

Everything I've read says that all of these should work.  Am I doing something wrong?
",kiddrew,2014-04-03 22:37:06
1242,2014-02-08 00:29:40,"I would guess that your option elements are being hidden through css or something along those lines.  You can verify this by doing

<S_CODE_TOKEN>

Also this question is better asked on the mailing list
",twalpole,2014-04-03 22:37:06
1242,2014-02-08 01:11:55,"One other possibility is you have multiple selects and have set Capybara.match = :first  - although I don't think thats it since you have tried every different locator format for it, and you would have had to have multiple selects with the same id to keep seeing the issue
",twalpole,2014-04-03 22:37:06
1242,2014-02-08 23:12:04,"Thanks for the response. The select is definitely visible, but I tried `visible: false` just as a sanity check -- no dice. This is also the only select in the form, so that can't be it either.

I'll ask on the mailing list. Thanks.
",kiddrew,2014-04-03 22:37:06
1242,2014-03-13 10:35:23,"I have the exact same problem with 2.2.1, and it was working perfectly before with 2.0.2. All my specs with a select failed now. @kiddrew where you able to fix that on our side?
",gillien,2014-04-03 22:37:06
1242,2014-03-13 13:42:19,"I did get it working, but I can't remember at this point what I did...
",kiddrew,2014-04-03 22:37:06
1242,2014-03-17 13:31:29,"select X, from: Y

X should be an option label, not an option value
",sseletskyy,2014-04-03 22:37:06
1242,2015-12-07 10:21:52,"That also happens when using Materializecss (with js: true), in that case is enough to pass the  visible: false option (thanks @twalpole)
",alexdesi,2014-04-03 22:37:06
1242,2016-05-05 22:12:49,"I just spent an afternoon on this issue, when doing a bit of debugging noticed that some of the fields were empty on the form, which led me to clone the development DB. 

Rake db:test:prepare
",wadson-qwiklabs,2014-04-03 22:37:06
1241,2014-02-06 21:45:15,"I propose to add BaseQuery, TextQuery, TitleQuery and use them instead of Query where necessary.

It would allow to assert keys more properly. Some keys that are supported by `has_selector?` aren't supported by `has_text?`.

Also I propose to fix https://github.com/jnicklas/capybara/issues/1179 by doing something like:

<S_CODE_TOKEN>

i.e. move `Finders#text_found?` to `TextQuery`.

If `Finders#text_found?` will be moved to `TextQuery` the same should be done for `Finders#resolve_query`
",abotalov,2014-07-02 05:32:43
1241,2014-02-07 16:23:18,"I've never liked `Finders#resolve_query`. I think I'm :+1: on this.
",jnicklas,2014-07-02 05:32:43
1241,2014-07-01 22:54:39,"@abotalov Ok to close this since its basically in the latest changes?
",twalpole,2014-07-02 05:32:43
1240,2014-02-06 06:37:36,"1. Run Travis tests on latest Chromedriver
2. Build on latest rbx version (rbx updates every month; they don't follow Semver yet; so IMO it doesn't worth to build on previous versions)
",abotalov,2014-02-06 16:53:21
1240,2014-02-06 16:53:20,"Sounds good to me :)
",jnicklas,2014-02-06 16:53:21
1239,2014-02-05 20:50:44,,abotalov,2014-02-06 06:37:48
1238,2014-02-05 08:38:52,"I propose to refactor it to something like:

<S_CODE_TOKEN>

It would allow us to use features provided by Matchers DSL like default implementation of `failure_message`, `failure_message_when_negated`, `description`, composable matchers, chainable matchers. In some cases default implementations of failure messages look good enough, e.g. in `become_closed` matcher proposed here - https://github.com/jnicklas/capybara/pull/1235.

This can be done only in Capybara 3.0 as I believe `Capybara::RSpecMatchers::HaveSelector` is part of public API.

If you approve this suggestion I'll work on it myself.
",abotalov,2016-11-21 23:13:05
1238,2014-02-06 16:55:43,"IIRC there was some reason we didn't do this in the first place, that I can't remember off the top of my head.
",jnicklas,2016-11-21 23:13:05
1238,2014-02-06 16:55:56,"Sorry that was not a very useful comment :P
",jnicklas,2016-11-21 23:13:05
1238,2014-02-06 17:10:27,"@jnicklas May the reason be that you wanted to share code between matcher methods? If yes, then it seems to be solvable.
",abotalov,2016-11-21 23:13:05
1238,2014-02-06 17:13:40,"It was done in this commit - https://github.com/jnicklas/capybara/commit/d03fba859be1ae43924093c38f7d5a5f149d106b
",abotalov,2016-11-21 23:13:05
1238,2014-02-06 17:29:11,"And after that you added `have_content` matcher - https://github.com/jnicklas/capybara/blob/f5552dfe42eb53722cef2cf3dca15dd188935577/lib/capybara/rspec/matchers.rb so it was probably done to add it.
",abotalov,2016-11-21 23:13:05
1238,2015-04-22 16:52:49,"I wrote this issue when I didn't know it's valid to write custom matchers in this way (I think RSpec didn't have good enough documentation for this case).

Now it has (http://www.rubydoc.info/gems/rspec-expectations/RSpec/Matchers/MatcherProtocol) so it doesn't probably make sense to refactor it fully. But it looks to me there is still some stuff to cleanup there so I leave this open.
",abotalov,2016-11-21 23:13:05
1238,2016-11-21 23:13:05,Closing since these are pretty DRY now.,twalpole,2016-11-21 23:13:05
1237,2014-02-04 23:15:53,"Currently session's reset! is as follows:

<S_CODE_TOKEN>

If driver.quit has been called sometime during the test, the call to assert_no_selector will eventually cause the browser to get initialized again.  This is causing an additional Saucelabs session to open during the rspec.rb's config.after method.
It seems to me that the reset! method should be something like:

<S_CODE_TOKEN>
",sbonebrake,2015-06-19 19:10:02
1237,2014-02-17 13:18:37,"Hmm, this is tricky. Breaks the driver API which is never great :(
",jnicklas,2015-06-19 19:10:02
1237,2014-04-03 22:35:40,"I guess we could add browser_initialized? to Driver::Base and just have it return true by default -- that would then maintain the current behavior for any driver that hasn't added support for it
",twalpole,2015-06-19 19:10:02
1237,2014-09-22 17:43:15,"Revisiting this issue. I have two proposals to fix this issue done on my fork. The first would be as twalpole mentioned above and add browser_initialized? to the driver base and have it return true by default:
https://github.com/sbonebrake/capybara/commit/5665396fc99fe73340e88998ffa7a4d2eda6ffa2

The second way, which I prefer, is to push the call to ""assert_no_selector"" down into the driver's reset method itself.
https://github.com/sbonebrake/capybara/commit/15d4534428291841a073eea888ae4975b6d898e9
I think this makes more sense because we are trusting the driver to assert the reset! is successful rather than having the session have to check on it.  The downside to this approach is that it technically isn't backwards compatible and any other drivers that extend would have to implement the call to assert_no_selector.

Let me know if either of these are acceptable and i'll submit a proper pull request.
",sbonebrake,2015-06-19 19:10:02
1237,2014-09-22 17:47:48,":+1: 
",bootstraponline,2015-06-19 19:10:02
1237,2014-09-23 17:28:48,"I'm leaning towards the first solution, because of the backwards compatibility it provides.  @jferris, @jonleighton, @mhoran - any input on this ?
",twalpole,2015-06-19 19:10:02
1237,2014-09-23 17:49:54,"I suppose another advantage of the first solution is that browser_initialized? could possibly be used in other methods.
However, I feel that session.reset! always asserting_no_selector after reset! is taking a little bit of freedom away from the driver because the each driver may have its own definition of what it means to verify that the reset! is complete.  This thinking made me think of a 3rd solution where the drivers had the method ""assert_reset_complete"", but then I figured that responsibility should just be in the driver's reset! method because that's probably the only place it would be used.
",sbonebrake,2015-06-19 19:10:02
1237,2014-09-23 18:05:00,"@sbonebrake - the assert_no_selector isn't verifying that the driver is reset though -- its verifying that the session is reset - ie - no content in the sessions page. 
",twalpole,2015-06-19 19:10:02
1237,2014-09-23 18:12:08,"> @sbonebrake - the assert_no_selector isn't verifying that the driver is reset though -- its verifying that the session is reset - ie - no content in the sessions page.

The problem is that check doesn't make sense for all drivers. A native Android app doesn't respond to the `""/html/body/*""` xpath selector.
",bootstraponline,2015-06-19 19:10:02
1237,2014-09-23 18:20:40,"Again -- its not a check to verify the driver is reset - so its not meant to make sense for the driver.  Its to check the Session is reset - and since capybara is a tool for testing web applications it does make sense in the session.  Most of session doesn't make sense as far as a native Android app goes, because Capybara was never designed for testing native apps.
",twalpole,2015-06-19 19:10:02
1237,2014-09-23 18:40:38,"As far as capybara-webkit goes, I'm fairly certain that our `reset!` command doesn't return until the reset is complete, so I don't think this makes a difference for us.
",jferris,2015-06-19 19:10:02
1237,2014-09-29 23:03:18,"Should I submit a pull request for the first solution?
",sbonebrake,2015-06-19 19:10:02
1237,2015-06-19 18:52:03,"Can we get some resolution on this? Is there a pull request pending?
",chris1248,2015-06-19 19:10:02
1237,2015-06-19 19:10:02,"This was released in 2.4.2
",twalpole,2015-06-19 19:10:02
1236,2014-02-04 02:26:55,"When I attach a file via `attach_file` and then check the content type in the file in the params, it's empty.

However if I upload the same file in the same form manually and check the same way, I'll get a proper content type.
",darthdeus,2014-02-04 13:05:24
1236,2014-02-04 13:05:24,"So I've traced this issue down to the `mime-types` gem, which is internally being used by `rack-test` to detect the content type of the file. Unfortunately it only does detection by extension name, which isn't there for the file I'm uploading (`.p12`)
",darthdeus,2014-02-04 13:05:24
1236,2014-02-04 13:30:19,"Yeah, mime-types is not going to be perfect, unfortunately.
",jnicklas,2014-02-04 13:05:24
1236,2014-02-25 17:04:13,"I just came across the same problem today. Trying to upload an .ics file via `attach_file`, it does not set the content type. However, when manually uploading the file, the content type is being set just fine (to text/calendar). Also, the `mime-types` gem seems to support `text/calendar` files: [text.yaml#22](https://github.com/halostatue/mime-types/blob/master/type-lists/text.yaml#L22)

Any idea, why `attach_file` is not setting the content_type in this case?
",phansch,2014-02-04 13:05:24
1236,2014-02-27 11:26:55,"@phansch I'm not sure, in my case the file type was completely missing in the mime-types, but seems you're having a different issue.
",darthdeus,2014-02-04 13:05:24
1236,2014-06-11 22:16:17,"Sorry to comment here on something that's clearly not capybara's problem, but this is the only place I've found anyone else that has run into this.

Is there a workaround?   Registering the new mime-type with `Mime::Type.register_alias` doesn't seem to have any effect for me.  I can't find anything in the `mime-type` gem docs regarding adding custom mime-types.  Not sure what else to try.  I hope I'm overlooking something obvious.
",jsgarvin,2014-02-04 13:05:24
1235,2014-02-02 11:47:45,"I'd like to outline some points:
1. Previously Jonas proposed `use_window` as the name for `switch_to_window`. I named it `switch_to_window` as this name is more similar to Webdriver users.
2. I made `Window#exists?` non-waiting as I don't see benefit to wait for window to become to exist. `Window#closed?` is made non-waiting as `Window#exists?` is non-waiting.
3. This pull request deprecates support for passing strings to `within_window`. Reasons are:
   1. To make API more synchronous (added methods operate only with instances of `Window` class, not strings).
   2. Current implementation leads to impossibility of selecting window in some circumstances.
       Example:  
       First window has url ""http://www.example.com/2"".  
       Second window has url ""http://www.example.com/"".  
       So `within_window('http://www.example.com/')` would select first window as it searches using `include?`. I think this behavior is surprising at least.
      Other examples (e.g. for title) can be thinked out too so I think it's better to deprecate ability to pass strings to this method.
4. [Webriver wire protocol](https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/window/:windowHandle/size) and [Webdriver W3C spec](http://www.w3.org/TR/webdriver/#resizing-and-positioning-windows) currently have commands for resizing/getting size of not current window but it was decided that it doesn't make sense (https://www.w3.org/Bugs/Public/show_bug.cgi?id=24987) so they will most probably be removed. So I decided that methods at driver level should be
   
   <S_CODE_TOKEN>
   
     instead of
   
   <S_CODE_TOKEN>
5. I implemented finding window in `switch_to_window`, `within_window` themselves instead of writing `find_window` method to prevent unnecessary additional switching of windows.
   Here's how `find_window` would look like:
   
   <S_CODE_TOKEN>
   
   But swicthing back in `find_window` and force in `within_window` would be unnecessary operations. So I decided to implement finding directly in `switch_to_window` and `within_window`.  
   Note: switching to window takes ~20ms in Selenium.
",abotalov,2014-06-02 19:20:45
1235,2014-02-03 14:06:45,"Wow, awesome pull request! Thanks @abotalov. This thing is huge, so I'll have to review this properly. At a first glance, I really like it though. The proposed `window_opened_by` is very nice IMO, exactly what you'd want in most cases. Also, the fact that it synchronizes is very nice. I think the proposed API is definitely _much_ better than what we have now.

Does this include some method of returning all currently open windows? I didn't find it in the code. I think that would be desirable. We don't have it now either so it's not necessary for this to get merged.

One question is what we do with version numbers. I agree that the current window API can barely be described as working, so maybe we aren't _breaking_ anything per se. But still this would probably require a major version bump, right? I'm perfectly okay with doing a major version bump for this though.

@joliss, @twalpole your thoughts on this?
",jnicklas,2014-06-02 19:20:45
1235,2014-02-03 14:10:34,"@jnicklas AFAIK this pull request doesn't break backwards compatability. It adds deprecation warning but it seems to be OK.
From http://semver.org/ :
`Minor version ... MUST be incremented if any public API functionality is marked as deprecated.`

So it's OK to release a minor version with this.
",abotalov,2014-06-02 19:20:45
1235,2014-02-03 15:10:56,"@jnicklas Re bumping the major, I'd say do it - there's no harm, and I also don't see that much reason to wait and coalescse multiple breaking changes into a single new major version. So ""Capybara 3.0.0 released, only breaking change is new window API superceding `.whatever`"" seems like a perfectly reasonable plan. (I have bumped the major version of [jquery-ui-rails](https://github.com/joliss/jquery-ui-rails) several times for fairly trivial reasons - it's at 4.x now - and not had any issues.)

No thoughts on the actual window API, I've never had to deal with windows.
",joliss,2014-06-02 19:20:45
1235,2014-02-04 08:41:25,"> Does this include some method of returning all currently open windows? I didn't find it in the code. I think that would be desirable. We don't have it now either so it's not necessary for this to get merged.

Yes, `Session#windows`
",abotalov,2014-06-02 19:20:45
1235,2014-02-04 09:18:56,"Also pulling in @jonleighton @mhoran @jferris @jcoglan. I don't think this presents any problems for driver authors, right guys? Just want to check and make sure. IIRC both capybara-webkit and poltergeist implement a lot of this stuff themselves anyway, right?
",jnicklas,2014-06-02 19:20:45
1235,2014-02-05 00:48:17,"Thanks for the heads up, @jnicklas. I'll take a look and see if there's anything we can't implement in capybara-webkit. At first glance, I don't see anything that looks too difficult. We're still behind on Capybara 2.2 features, but I hope to get caught up soon.
",mhoran,2014-06-02 19:20:45
1235,2014-04-03 19:42:45,"@jnicklas @twalpole What do you think about it?
Should we release it in 2.3 and remove support for old `within_window` in 3.0?
Or release it in 3.0 and remove support for old `within_window` in 4.0?
",abotalov,2014-06-02 19:20:45
1235,2014-04-03 19:52:42,"I havent really had a chance to look through all of this yet -- give me a day or two -- I'm trying to go through the other open PRs and issues from oldest to newest.
",twalpole,2014-06-02 19:20:45
1235,2014-04-08 16:28:00,"I think this should have maximize_current_window
",twalpole,2014-06-02 19:20:45
1235,2014-04-08 16:52:49,"I'm not 100% sold on block passing being the primary method of matching windows in switch_to_window.   Why would we have   switch_to_window { page.title == 'xxx' }  but not the simpler   switch_to_window(title: 'xxx')   --  the same goes for within_window  --   

<S_CODE_TOKEN>

would read much better as 

<S_CODE_TOKEN>

for the common cases  title, path, url
",twalpole,2014-06-02 19:20:45
1235,2014-04-08 21:23:44,"> I think this should have maximize_current_window

I omitted it for a reason - `maximize_window` can be ""truly"" supported only in real browsers.

Also I wouldn't recommend people to use it in their tests since maximizing window may result in different more-difficult-to-debug behavior at different computers (as one doesn't know to which size window was resized). It's better to pass coordinates to `resize_current_window_to` as it's possible to resize window to a size > OS viewport.
",abotalov,2014-06-02 19:20:45
1235,2014-04-08 21:54:13,"Except if you resize_current_window_to something bigger than the viewport you will run into visibility issues when testing.  If we don't add maximize (which is part of the webdriver spec for a reason), is there a way for the user to do it using resize_window_to ? 
",twalpole,2014-06-02 19:20:45
1235,2014-04-09 05:59:27,"I run my tests in a new Xvfb session. Browser window is resized to the the size of the viewport of the Xvfb session (I mean:

<S_CODE_TOKEN>

I run tests in parallel and capture video from tests to make debugging easier. I see no issues with this approach. I don't see benefits in Webdriver's `maximimize`.
",abotalov,2014-06-02 19:20:45
1235,2014-04-09 17:11:37,"Or you could set your xvfb session size and then just call maximize rather than passing those sizes around - please add maximize and maximize_current_window.
",twalpole,2014-06-02 19:20:45
1235,2014-04-10 07:35:08,"I've just pushed a new commit adding maximize window. Also I fixed a couple of bugs in a previous commit (that appear if block passed to `within_window` contains `within` method and error is raised inside block).

I also think that it's a nice idea to provide ability to pass a hash to `switch_to_window`, `within_window` but I have several concerns about it:
1. It's not clear if url/title matching should be exact or substring. We haven't yet come up to a long term decision about it (https://github.com/jnicklas/capybara/issues/1256). I think it's better to come up with it before adding new methods that may bring additional backwards compatibility issues.
2. I think that primary mechanism of getting instance of window is via `window_opened_by`. I implemented passing block to `switch_to_window`, lambda to `within_window` to make it possible to switch to window that was opened long ago. It's not a wide case so I'm not sure if it's worth to add a syntactic sugar like passing hash.
3. If we will add support for `:url` and `:title` hash options to both those methods, we will have some duplication between them. Also we will have to `assert_valid_keys`. Thus it makes sense to extract `assert_valid_keys` to `Capybara::Helpers`.

This pull request seems to be backwards compatible so it can be included to 2.3 release.
",abotalov,2014-06-02 19:20:45
1235,2014-04-10 19:13:06,"ok -- to prevent #1256 from holding up 2.3 - how about instead we don't currently deprecate string passing to within_window, and instead we extend it to allow regexs too.  That way a user can do exact matching in 2.3 if they need/want to - and it puts the within_window API in sync with the discussions going on in #1256
",twalpole,2014-06-02 19:20:45
1235,2014-04-11 21:07:13,"I fixed the issues you commented about.

I would like to build a new ""good"" API instead of enhancing API that we are going to deprecate. Thus I would prefer to add ability of passing a hash like `switch_to_window(title: 'exact', url: /substring/)` where string means exact matching and regexp means usual regexp matching. I will extract `assert_valid_keys` to `Capybara::Helpers` and mark it `@api private` if you approve this.

Also there are some errors on Travis that are non-reproducible in my environment:
1. All ""should be able to maximize window"" tests failed. I think that's because tests should be runned inside X11 (i.e. Xvfb).
2. https://travis-ci.org/jnicklas/capybara/jobs/22725833#L330. It looks like current window hasn't been changed just after window was switched. I think it's a bug in Selenium and should be fixed on its side.
3. https://travis-ci.org/jnicklas/capybara/jobs/22725832#L455. Difference between wait time and timeout is already 400 ms. Maybe, I should make it even larger but IMO it's already large enough.
4. https://travis-ci.org/jnicklas/capybara/jobs/22725831#L3490, https://travis-ci.org/jnicklas/capybara/jobs/22725832#L482, https://travis-ci.org/jnicklas/capybara/jobs/22725834#L344. I don't know why it happens.
",abotalov,2014-06-02 19:20:45
1235,2014-04-15 01:22:16,"@abotalov I believe running with a window manager (fluxbox, etc) will solve most of these issues - see  https://github.com/twalpole/capybara/commit/126303097a6ab530da6cbb29c7aa8058ba979ae9  -  thats almost there - but I think the setting to hide the toolbar in fluxbox is needed --  currently the vertical height ends up 25px short
",twalpole,2014-06-02 19:20:45
1235,2014-04-18 07:27:08,"I've tried to configure `fluxbox` using most of commands from here - http://manpages.ubuntu.com/manpages/raring/man1/fluxbox.1.html but it didn't help. Also I tried to use `jwm` and `icewm` but they didn't work out of the box too.

After another look at proposed API I think I don't like it enough. Methods like `resize_to`, `maximize`, `size`, `close` can be sent only to current window. Also Webdriver doesn't need window handle for them to work. Thus it shouldn't be necessary to get handle of current window prior to invoking them. Thus they shouldn't be exposed as methods of `Window` class. But it makes me curious about where they should belong. I don't like adding all methods to `Capybara::DSL` (see #1294).
",abotalov,2014-06-02 19:20:45
1235,2014-04-20 06:53:41,"Also I think it would be a good idea to provide only regexps as possible values for `url` and `title` options in 2.3 release. Thus we will be able to delay decision about exact and substring matching. I think it would also be worth to ask users for feedback about exact vs substring matching if we won't be able to achieve agreement between us.
",abotalov,2014-06-02 19:20:45
1235,2014-04-22 21:15:53,"Hopefully I'll have some time tomorrow to look at configuring fluxbox to get the tests passing.  What is the downside to resize_to, maximize, size, close being only called on the current window?  In any window manager/OS I can think of - doing any of those things - involves making the window the current window, and then having the action happen (that may all be one step - clicking the X in corner or whatever) - but either way the window becomes current during it. Requiring the user to make the window current first doesnt seem like an undue burden in normal usage.
",twalpole,2014-06-02 19:20:45
1235,2014-04-22 21:17:56,"@twalpole Does it mean that you accept moving those methods to `Session`?
",abotalov,2014-06-02 19:20:45
1235,2014-04-22 21:27:59,"@abotalov Sorry I wasn't clear about that.  No I don't think they should be added to Session.  I like that they are currently available through current_window.  Maybe the result of current_window, should be a CurrentWindow singleton that supports the resize, maximize, etc methods - instead of just a Window object.
",twalpole,2014-06-02 19:20:45
1235,2014-04-22 21:57:48,"@twalpole Do you mean that all methods except `maximize`, `resize_to`, `close`, `size` should be delegated from `CurrentWindow` to `Window` using `method_missing`?
",abotalov,2014-06-02 19:20:45
1235,2014-04-22 21:59:43,"I don't like adding `CurrentWindow` as it would unnecessarily add a class to public API (i.e. API visible in Rubydoc.info).
",abotalov,2014-06-02 19:20:45
1235,2014-04-22 22:38:00,"No I mean moving the methods that can only be called on the current window into CurrentWindow
",twalpole,2014-06-02 19:20:45
1235,2014-04-22 22:43:00,"or I guess we allow resizing/maximizing any window, and each of those calls switches to that window and then switches back (if not already current) - That wouldnt be terrible 
",twalpole,2014-06-02 19:20:45
1235,2014-04-23 06:49:31,"> No I mean moving the methods that can only be called on the current window into CurrentWindow

IMO `current_window` should behave like any other window so:
`page.current_window.exists?`
`page.current_window.closed?`
`page.current_window == other_window`
should work. Thus if `current_window` will return singleton instance of `CurrentWindow` those methods should be delegated to `Window` with `current_window_handle`. And there are a ton of methods that should be delegated (e.g. `object_id`, `instance_variable_get`, `instance_of?`, etc.) and thus I think we should delegate all methods using `method_missing` if we'll choose adding `CurrentWindow`.

> or I guess we allow resizing/maximizing any window, and each of those calls switches to that window and then switches back (if not already current) - That wouldnt be terrible

I don't like that because of the following possible usage scenario:

<S_CODE_TOKEN>

That would involve 2*N window switching operations instead of N. I think it's better to move switching windows to the side of the user so only N switching windows operations will be performed:

<S_CODE_TOKEN>
",abotalov,2014-06-02 19:20:45
1235,2014-04-23 16:56:07,"the 2_N switches would only occur if the user did it the first way - there is nothing to stop them doing it the second way if performance is a top concern for them, although I don't know that looping through all the windows getting the size, or maximizing, etc is really going to be a common behavior, since we're really aimed at replicating a users behavior.  It's also only 2_N switches for a driver that doesnt allow direct access to specific windows.  Allowing these operations on any window simplifies the code, and makes the Window object make more sense.  Obviously the current_window_resize, current_window_maximize, etc in driver would have to change to window_resize(window_handle), etc - but overall I think it makes things simpler
",twalpole,2014-06-02 19:20:45
1235,2014-04-23 17:53:32,"As you pointed out it's possible to resize only current window.

If driver will have `window_resize_to(window_handle)` than such method should do (in case of e.g. Selenium):
`get current window handle + switch to window + resize + switch back to remembered handle`
in `selenium/driver.rb`. So there will be 4 driver method invocations instead of 1. IMO it's bad and thus it's better to implement `resize_current_window_to` at driver level.

If we'll decide to make `Window#resize_to` available in all windows, then this method will look the same:
`get current window handle + switch to window + resize + switch back to remembered handle`
So there will be 4 driver method invocations too.

Also we can disallow `Window#resize_to` for non-current window as it's currently done in this PR. So `Window#resize_to` does 2 driver method invocations:
`get current window handle + resize`
End user has to do switch before invoking `resize_to`. So there will be 3 driver method invocations if user wants to resize non-current window. It's better but it still unnecessarily gets `current_window_handle` that is not needed to know in Webdriver case.

So we should provide API that would allow user to do just:
switch to window + resize
without getting current window handle.

So `resize_to` should be accessible on `current_window` only. So `current_window` should return a singleton instance of `CurrentWindow`. And `resize_to` will be implemented in `CurrentWindow` as invocation of driver's `resize_current_window_to` without getting handle of current window. So end user will have to write:

<S_CODE_TOKEN>

`Window` won't have `resize_to`, etc. methods at all. `resize_to`, `size`, `close` methods will be accessible only on `CurrentWindow`.

If we'll add `CurrentWindow#resize_to` then we may implement `Window#resize_to` so end user could write:

<S_CODE_TOKEN>

But `Window#size` will have to do:
`get current window handle + switch to window + resize + switch back to remembered handle`
And thus there will be 4_N driver method invocations instead of 2_N.

So I think users should learn to write `current_window.size` instead of `window.size`. Otherwise it will be not clear for them why `current_window.size` takes 3 times faster than `window.size`
",abotalov,2014-06-02 19:20:45
1235,2014-04-23 18:17:44,"All your assumptions are based on the driver not being able to modify a specific window without making it current - which is true for selenium but may not be true for other drivers. Allowing for any window object to be resized/maximized is identical to the current behavior if the window being resized is the current window, and has a few more driver invocations if it's not -- I think you're trying to optimize away miliseconds in what will be rarely used functionality, at the expense of making the API and code more complicated for no real gain and a loss of readability in tests.
",twalpole,2014-06-02 19:20:45
1235,2014-05-27 20:57:32,"@twalpole I made defined fixes so please review it again. Last commit:
- fixes issue with maximize on Travis
- allows operations with non-current window
- adds a sleep to `switch_to_window`
- rebased PR
",abotalov,2014-06-02 19:20:45
1235,2014-05-28 16:32:25,"@abotalov other than the comments I added about just popping scopes instead of fully resetting it (which could end up hiding bugs elsewhere), and the failing tests I think its looking good.  I've restarted the tests to see if the failures were just a fluke (jruby will fail due to a bug in nokogiris xpath querying under jruby)
",twalpole,2014-06-02 19:20:45
1235,2014-05-28 20:36:58,"@twalpole I fixed the issue with scoping inside `within_window`.
",abotalov,2014-06-02 19:20:45
1235,2014-05-29 19:12:11,"So the random failures that are occuring appear to be because the windows opened in the before block of within_window_spec.rb aren't actually opening before the tests are running.  Can you have the before block wait until the windows exist?
",twalpole,2014-06-02 19:20:45
1235,2014-05-30 17:23:36,"@abotalov  -  So after rerunning the failed spec runs a couple of times - they will all eventually pass - other than possibly making sure the windows are opened in within_window_spec before the tests run , is there anything else you feel should be changed here or do you believe its ready for merging into master?
",twalpole,2014-06-02 19:20:45
1235,2014-06-01 18:57:50,"@twalpole I fixed intermittent issues related to windows (those that appeared more than one time at Travis). Last commit has been amended many times.

I don't plan to change anything here but if you see any issues I'm able to fix them.
",abotalov,2014-06-02 19:20:45
1234,2014-01-28 22:12:34,,gregmolnar,2014-01-31 12:46:30
1234,2014-01-29 10:07:46,"Is this a common idiom? Do libraries usually provide `refute_*` assertions? I never use the xUnit style, so I have no idea. Please add tests regardless.
",jnicklas,2014-01-31 12:46:30
1234,2014-01-29 11:52:11,"I've added a test and rebased. 
Regarding the other libraries in minitest assertions has a refute pair: http://www.ruby-doc.org/stdlib-1.9.3/libdoc/minitest/unit/rdoc/MiniTest/Assertions.html#method-i-refute so for instance instead of `assert_not_empty` you can use `refute_empty` which in my opinion sounds better. But it might be just a matter of taste :).
",gregmolnar,2014-01-31 12:46:30
1234,2014-01-31 12:46:39,"Good enough for me :) thanks!
",jnicklas,2014-01-31 12:46:30
1234,2014-01-31 13:17:21,"Thanks for merging it!
On 31 Jan 2014 13:46, ""Jonas Nicklas"" notifications@github.com wrote:

> Good enough for me :) thanks!
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/pull/1234#issuecomment-33791187
> .
",gregmolnar,2014-01-31 12:46:30
1234,2014-09-06 20:51:19,"I think ""assert_no_text"" and ""assert_no_title"" should also have ""refute"" aliases?
",semaperepelitsa,2014-01-31 12:46:30
1233,2014-01-25 08:19:08,,abotalov,2014-01-31 12:48:38
1233,2014-01-31 12:48:42,"Thanks!
",jnicklas,2014-01-31 12:48:38
1232,2014-01-17 22:05:55,"This resolves https://github.com/jnicklas/capybara/issues/1231 and https://github.com/natritmeyer/site_prism/issues/57

This PR enables the use of count query options [:count, :maximum, :minimum, :between] with the Capybara::Node::Finders#all method.

These changes maintain backwards compatibility.  All original capybara specs are passing in their original form, and new specs have been added to validate the new behavior for Capybara::Node::Finders#all()

This enables users to specify expectations on the number of elements to be found by their query, without first using assertions such as `has_css?('a', :count=>5)` before attempting to interact with the desired element array.

The following queries which use to ignore the options values will now only succeed if the expectation is met:

<S_CODE_TOKEN>

Not that anyone really needs this functionality, but you can also now combine query options and the query will only succeed if all expectations are met.  This, however, does not apply to the :count option.  If :count is specified, all other options will be ignored.

<S_CODE_TOKEN>
",tmertens,2014-02-20 08:26:19
1232,2014-01-17 23:06:03,"This is a really nice pull request with a very useful feature, thank you! My only criticism is the loop over the hash in the specs. IMO this makes the specs less readable. I would prefer un-DRY specs over clever specs.
",jnicklas,2014-02-20 08:26:19
1232,2014-01-17 23:59:53,"@jnicklas Per your request!
",tmertens,2014-02-20 08:26:19
1232,2014-01-25 19:23:07,"@jnicklas Any update on this and/or when it might be merged in?  I would love to see this make the next gem release.  Let me know if there are any other changes you would like me to make.
",tmertens,2014-02-20 08:26:19
1232,2014-01-31 13:55:46,"Honestly I still don't like the way the specs are written. That `tap` thing is super confusing. Can't we make this simple and straight-forward?
",jnicklas,2014-02-20 08:26:19
1232,2014-01-31 15:27:52,"@jnicklas 

Since scenario names are no longer being defined using values from the options hash, the `tap` is no longer necessary and I replaced it with the standard `let`.

`tap` is actually a very simple and useful construct which allows you to 'tap' into a call chain.  It takes the result of the method call being tapped into and passes it into the `tap` block.  So, in this case it was effectively creating the hash and passing it into the block of specs as the variable named 'options' at runtime.  In this case I was using it to avoid using an instance variable and to scope the options hash only to the block where it was required, preventing it from polluting the environment outside of the options specs.  You cannot use variables defined in `let` blocks inside scenario descriptions because `let` values are not available until the specs are actually being executed, so either `tap` or some other runtime variable was required for the looped tests that were previously implemented.  Since the loops were removed and the option names from the hash are no longer being used in the test names, we can drop the `tap`.
",tmertens,2014-02-20 08:26:19
1232,2014-01-31 15:47:10,"I do understand how `tap` works, I've been programming Ruby for a while ;)

I was complaining about the readability, and I'm afraid the let block still obscures rather than helps. Compare:

<S_CODE_TOKEN>

vs:

<S_CODE_TOKEN>

**That's** what I was shooting for. No indirection.
",jnicklas,2014-02-20 08:26:19
1232,2014-01-31 15:56:36,"Frankly, I thought it made it more clear since the hash keys ascribe meaning to each value (e.g. success/failure), but I've removed it since you feel strongly about it.
",tmertens,2014-02-20 08:26:19
1232,2014-02-03 13:31:21,"Sorry to be so picky, I've had another look at this PR. There is one thing which bother me a little bit. The `assert_selector` and `assert_no_selector` methods are a bit strange now. Sometimes they expect `all` to throw and exception, and other times they don't. They then basically check if `all` should have thrown an exception. This design doesn't seem very elegant to me.

I'm not against relying on `all` throwing exceptions. We already rely on _exceptions as control-flow_ in a lot of places, so that doesn't bother me too much. But it should be either/or. Either exceptions, or explicit checking. Mixing both styles is pretty confusing.
",jnicklas,2014-02-20 08:26:19
1232,2014-02-03 14:34:46,"Regarding assert_selector and assert_no_selector, I agree that the design is not terribly elegant, but it was the best solution I could find which ensures backwards compatibility for existing functionality and forward compatibility with the new features on this branch.

By far the biggest problem to overcome here was the previous default `count > 0` in `Helpers.matches_count?` which effectively injected a count requirement into that method even when the user did not specify an expectation on any of the :count filters.

It should be noted that `assert_selector` has no flow control which expects `all` to raise an exception, except in that the `matches_count?` logic being moved into the `all` method, which previously was already raising an exception in the `assert_selector` method, so there is no change here.

For the `assert_no_selector` method, I suppose the only alternative option here would be to allow the caller to specify to `all` how exceptions should be handled and passing through an exception handler.  I will think about this today, as I agree that use of exceptions for flow control is undesirable, but I didn't think of a good alternative at the time which would be compatible with the existing functionality of the `assert_no_selector`.
",tmertens,2014-02-20 08:26:19
1232,2014-02-03 15:07:45,"`matches_count?` is not public API, so breaking it is not a problem.
",jnicklas,2014-02-20 08:26:19
1232,2014-02-03 16:08:12,"No, but breaking it breaks the behavior of assert_selector and assert_no_selector in the case of a double negative where there is, for example, an expectation like so:

<S_CODE_TOKEN>

Hence the exception handling injected into this method.

As I see it, there a small handful of options besides the current method, none of which seem particularly elegant:
1. Allow an exception handling block to be passed to `#all`, and pass in an empty block from `assert_no_selector`. This is probably the _most_ elegant solution without creating a new finder method, or using the exception from `all` for flow control:

<S_CODE_TOKEN>
1. Strip out the count options from the options hash before passing it to `all`, and then process the count options inside the `assert_no_selector` method.  This is very ugly, since we can no longer call `matches_count?` directly on the result:

<S_CODE_TOKEN>

Other possible options would be to provide an `all_ignore_count` method, or push `:ignore_count => true` onto the options hash passed into the `all` method, but I think this may be more confusing than helpful.
",tmertens,2014-02-20 08:26:19
1232,2014-02-03 22:57:51,"@jnicklas do you have any preference on the proposed solutions above?
",tmertens,2014-02-20 08:26:19
1232,2014-02-04 08:09:19,"It looks to me that it probably can be simplified to:

<S_CODE_TOKEN>
",abotalov,2014-02-20 08:26:19
1232,2014-02-04 17:12:51,"@abotalov That is a possibility, but then we are calling a private method in the Finders module from the Matchers module. It is certainly simpler, but I'm not sure how I feel about this.

EDIT: I should add that this is effectively the same as using an `all_ignore_count` method, but using an existing private method instead of (new) public one which, really, would delegate directly to `#resolve_query` anyways.
",tmertens,2014-02-20 08:26:19
1232,2014-02-12 08:47:19,"ping @jnicklas 

EDIT: btw while working on #1241 I moved `Simple#resolve_query(query)` and `Finders#resolve_query(query)` to `Query#resolve_for(node)` (and added `find_css` and `find_xpath` to `Node::Simple` and `Node::Base`)

So I hope it will be refactored there to:

<S_CODE_TOKEN>

and you can merge it as it is currently
",abotalov,2014-02-20 08:26:19
1232,2014-02-14 20:03:35,"Just noticed that as this PR adds ability to pass several keys like `:minimum` and `:maximum` it should probably also change `Capybara::Helpers#failure_message` appropriately.
",abotalov,2014-02-20 08:26:19
1232,2014-02-19 19:00:25,"@abotalov `Capybara::Helpers#failure_message` already has conditions for `:minimum`, `:maximum`, and `:between` so I don't believe any change is necessary.

Frankly, I think the way the failure message is handled is rather ugly and I would change it to use sideband data output by the `matches_count?` method; however, to do a proper refactor would probably break hundreds of tests that assert on the content of the failure messages, so I don't see myself doing that in this PR.
",tmertens,2014-02-20 08:26:19
1232,2014-02-19 19:15:16,"@tmertens After merging of this pull request failure message returned by `Helpers#failure_message` will be incorrect if several options will be passed.

Example:
`have_css('#id', minimum: 1, maximum: 3)`

Message returned by `failure_message` will be like `""expected to find css ""#id"" at most 3 times""` and won't check for existence of `:minimum` key.

That's what I meant when I wrote previous comment.

But now I think that solving that issue won't be enough. Consider the following case:
`have_css('#id', count: 2, minimum: 3, maximum: 1, between: 5..7)`

It's clear that this query is invalid. But currently query doesn't check those parameters. I think query should check parameters and normalize them. For example if `:minimum => 1` and `:maximum => 3` have been passed, then failure message should be `""between 1 and 3 times""`. Also query should raise if conflicting options have been passed to it.

So it seems there is no need to fix bug outlined above in the scope of this PR as some refactoring is needed. I hope this pull request will be merged soon.
",abotalov,2014-02-20 08:26:19
1232,2014-02-19 22:03:05,"@abotalov Yes, I understand the issue as you mentioned with several options being passed.

This is where sideband data from the matches_count? method would come in helpful and would ultimately replace the failure_message helper method.  I took an initial stab at this and got it working for `Capybara::Result` but began running into additional test failures when `Helpers#failure_message` is removed because it is also used by `Capybara::RSpecMatchers`.  I haven't fully resolved this yet and I'm not sure I want to tackle it in this PR.  I haven't had time yet to look more into the RSpecMatchers failures.
",tmertens,2014-02-20 08:26:19
1232,2014-02-19 22:23:57,"Note that I made https://github.com/jnicklas/capybara/issues/1246 that refactors some related things
",abotalov,2014-02-20 08:26:19
1232,2014-02-19 22:37:32,"@abotalov I'm inclined not to make any further changes to this PR without input from @jnicklas since he is ultimately responsible for approving/merging this afaik and I don't want to waste effort making changes which depend on another PR which may or may not get merged in.  This is a very important feature for us to get into the mainline, so I will punt on this until I hear more from him.  I am hoping to get this merged sometime soon so that we can switch back to an official release of Capybara in the near future rather than running off of a fork.
",tmertens,2014-02-20 08:26:19
1232,2014-02-20 08:27:50,"Finally had a chance to review this properly. Thank you for being so helpful and working to get this into the mainline. This really is a very nice PR, with a very nice feature addition, and I'm very happy to merge it.
",jnicklas,2014-02-20 08:26:19
1231,2014-01-17 14:56:20,"When querying for a collection of elements, the `:count` query option is ignored.

Take, for example, a page where only 5 anchor elements exist on the page.  The following query will succeed rather than failing, returning the five results found on the page:

<S_CODE_TOKEN>

Expected behavior is that Capybara will implicitly wait for the specified number of results to appear on the page before returning the results, and raise an exception if the specified number of elements is not found.

I believe that :minimum and :maximum are also affected by this based on prior experiences; however, I have not retested them recently.  I am still investigating the root cause of this defect.
",tmertens,2014-02-20 08:26:19
1230,2014-01-17 08:20:33,"When session.reset! is called, @touched is never getting properly reset to false. This hopefully fixes that. Added applicable test.
https://github.com/jnicklas/capybara/issues/1229
",lesliepc16,2014-01-29 08:48:10
1230,2014-01-29 08:48:15,"Nice, thanks!
",jnicklas,2014-01-29 08:48:10
1229,2014-01-17 07:40:23,"I believe there's a bug with resetting the session. After resetting the session, you'd expect @touched to be false, but in fact it's true.

I think the reason is:
https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L80

these two lines need to be reversed as the assert will cause the session to be ""touched""

<S_CODE_TOKEN>

As an aside, why have an assert in an after hook? It seems unexpected to have it there.
",lesliepc16,2014-02-03 13:32:18
1229,2014-01-17 08:05:01,"Demonstrating the bug: https://gist.github.com/lesliepc16/8469911
",lesliepc16,2014-02-03 13:32:18
1229,2014-01-28 23:05:25,"@jnicklas - this is a very small change. Let me know what you think. Right now we're monkeypatching this part of capybara so would be really happy to get this into master if it looks ok.
",lesliepc16,2014-02-03 13:32:18
1229,2014-01-29 08:50:54,"I merged the pull request. Thanks!

The reason the assert is there is so we can make sure that `reset` is synchronous, which it wasn't before. This caused race conditions for some people where AJAX requests were hitting their controllers after the DB had been reset.
",jnicklas,2014-02-03 13:32:18
1229,2014-01-29 08:51:21,"Maybe not the most elegant solution, but it felt better than having to replicate the waiting logic in all drivers.
",jnicklas,2014-02-03 13:32:18
1229,2014-01-29 23:52:35,"Cool. Thanks for the explanation and merging that in!

On Wed, Jan 29, 2014 at 12:51 AM, Jonas Nicklas notifications@github.comwrote:

> Maybe not the most elegant solution, but it felt better than having to
> replicate the waiting logic in all drivers.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1229#issuecomment-33566127
> .
",lesliepc16,2014-02-03 13:32:18
1228,2014-01-17 01:49:07,"This may totally be an issue on my end, but I am having a lot of trouble comprehending why this could possibly happen.

I have a simple method for login that's used for all my specs.

<S_CODE_TOKEN>

At the breakpoint:

<S_CODE_TOKEN>

You can see that after the login button is clicked, there is a `redirect_to` param to `/projects`, but after exiting the breakpoint, the request just hangs. This only happens for specs with `js: true`. Furthermore, if I copy and paste the url from `page.current_url` into a new browser, the page loads just fine.

**Could it be possible that Capybara is not following-through on redirects automatically like it should?**

 I've tried switching between WEBrick and Thin as well as capybara-webkit and selenium. Thanks!
",jamesfzhang,2014-04-03 22:25:24
1228,2014-02-03 13:34:06,"Most likely this is an issue with your app. Are you by chance using something like WebMock/VCR/FakeWeb? Especially FakeWeb has been known to hang Capybara sometimes.
",jnicklas,2014-04-03 22:25:24
1228,2014-03-03 12:55:00,"@jamesfzhang did you find out what was wrong? I seem to be having a similar issue. I have other tests throughout the application that submit forms and have js enabled but one form is not submitting. Capybara is finding the button but the form is hanging.

Also,  @jnicklas do you have any troubleshooting tips I could follow to get this sorted? There are more details of the problem here: http://stackoverflow.com/questions/22099004/trouble-shooting-issues-with-capybara-not-submitting-a-form
",QBD,2014-04-03 22:25:24
1228,2014-03-03 14:53:55,"Sorry I forgot to respond. Yes we do use FakeWeb but I think the actual cause of this issue has to do with the session not appropriately handled by the login request. It's an issue with our app and not Capybara.
",jamesfzhang,2014-04-03 22:25:24
1228,2014-03-04 00:31:49,"Oh ok, I'm not using FakeWeb or any of the other mentioned gems. Really could do with getting these features tests passing though
",QBD,2014-04-03 22:25:24
1228,2014-04-03 22:25:24,"Closing since this wasn't a Capybara issue
",twalpole,2014-04-03 22:25:24
1227,2014-01-16 22:01:24,"This test had hardcoded values which may vary for different apps and while this specs are integrated in custom driver's test suite like capybara-mechanize, it fails becouse of that (https://travis-ci.org/jeroenvandijk/capybara-mechanize/jobs/17002693#L153)

Problem occurred when I was trying to bump up capybara version for capybara-mechanize gem where app have different host (`www.local.com` not `localhost`) and don't have `/foo/bar` endpoint.
",lukaszx0,2014-04-02 17:34:50
1227,2014-01-31 12:02:06,"Ping.
",lukaszx0,2014-04-02 17:34:50
1227,2014-04-02 17:34:50,"Since this change negates the original purpose of the test I'm closing this PR
",twalpole,2014-04-02 17:34:50
1226,2014-01-15 14:40:58,"In application I'm working on right know, we've monkey patched RackTest driver to keep track or redirects count. We have few cucumber steps which rely on it as an easier way to have common step checking if redirect happened. Alternative solution was checking `Location:` url but it's different for each case, thus just checking if redirect happened is was more better and applies to all cases.

This PR adds redirects counter to `RackTest::Browser` and simple proxies in `RackTest::Driver` for easier retrieval. (we've also patched both in out app)
",lukaszx0,2014-02-03 13:35:52
1226,2014-01-16 22:45:44,"Why do you need to check the number of redirects?
",jnicklas,2014-02-03 13:35:52
1226,2014-01-16 22:58:48,"In our particular case, we're just checking if redirection happen and we actually have it as a boolean flag (`@redirected = true` instead of `@redirects += 1`). I thought though that if we're doing this it might come handy for somebody in the future to check number of the redirects (and I can imagine such scenario) but having it as a flag would be good enough for me. What do you think?
",lukaszx0,2014-02-03 13:35:52
1226,2014-01-16 23:39:10,"I don't understand _why_ you want to check if redirects happen though, what's the use case, why do you want to know?
",jnicklas,2014-02-03 13:35:52
1226,2014-01-16 23:53:14,"We have a cucumber step `Then I should not be redirected` and `Then I should be redirected to ""<path>""` and we're using it in many places as a quick validator if everything went ok, for example login. It's more verbose to get an error that redirect didn't happen rather than ""element not found"" because we failed logging in, thus we were not redirected to page with expected content.
",lukaszx0,2014-02-03 13:35:52
1226,2014-01-17 06:56:13,"That seems like a very brittle pattern to me. Redirects are an implementation detail. ""Then I should not be redirected"" really tells you nothing, there are any number of reasons you may or may not be redirected, I can't see how adding this kind of assertion to your test suite gives you any added confidence. It only gives you more work when the internals of your app change.

Consider this from the perspective of someone using your site, do they care if they were redirected or not?
",jnicklas,2014-02-03 13:35:52
1226,2014-01-17 14:53:10,"I generally agree with you and your reasoning. I doesn't give us more confidence, it's used rather as - like I called it - earlier, quick validator of what happened. 

> Consider this from the perspective of someone using your site, do they care if they were redirected or not?

No. They're not. Yet, we are using this kind of assertion in our cucumber test suite and I wanted remove our ugly patch and push it to official release. Let me know if you are going to accept it - it'd be great. If not - we'll switch to fork with this patch applied.

Thanks.
",lukaszx0,2014-02-03 13:35:52
1226,2014-02-03 13:35:52,"I'm going to go with a no on this one. I feel it doesn't have enough utility, and generally encourages testing at a too-granular level. Also, the expectation you would derive from it wouldn't really give you much to go on. You'd have to be sure that the previous request wasn't a redirect, and so on.
",jnicklas,2014-02-03 13:35:52
1225,2014-01-14 03:12:30,"The [Capybara::Node::Document](https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/document.rb) does not have a `native` function like [Capybara::Node::Element](https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/element.rb#L39-L41) does. I wanted to start using and testing JS libs like Mousetrap.js and Keymaster.js using Poltergeist's [key events](https://github.com/jonleighton/poltergeist#sending-keys) but these libs bind to the `document` and I am not sure how to access it. Would a pull request be viable for this sort of thing?
",metaskills,2014-04-09 18:59:09
1225,2014-02-03 13:36:46,"Sorry for the late response. That does seem like a good idea. I've been meaning to look over the API for various types of Nodes and make them more consistent with each other.
",jnicklas,2014-04-09 18:59:09
1225,2014-03-03 21:03:56,"I don't see any way to implement it except `execute_script`
",abotalov,2014-04-09 18:59:09
1225,2014-04-08 22:44:23,"The question here is what would  Document#native return?   If its the html element then this is possible -- what would you be using the native document element for?
",twalpole,2014-04-09 18:59:09
1225,2014-04-09 05:46:01,"I think @metaskills means JS's `document`.
",abotalov,2014-04-09 18:59:09
1225,2014-04-09 18:59:09,"@metaskills if you want to provide more info here we can reopen this issue, until then I'm going to close it.
",twalpole,2014-04-09 18:59:09
1225,2014-04-09 20:36:38,"That's fine. My goal was to see if anyone else felt this pain and/or if there was interest in a pull request. By the comments I see above, that may be a yes. So future people can read/find this if needed.
",metaskills,2014-04-09 18:59:09
1224,2014-01-08 00:34:54,"Should be false IMHO though.
",espen,2014-01-08 16:12:11
1223,2014-01-07 17:48:48,"In my case the response body contained a PNG file and capybara-screenshot called save_page (due to https://github.com/mattheworiordan/capybara-screenshot/pull/69). This results in an Encoding::UndefinedConversionError since the body is treated as text and a conversion from ASCII to UTF-8 is applied, but the PNG - of course - contains invalid bytes.
",cschramm,2014-02-03 13:57:05
1223,2014-02-03 13:38:04,"Wondering if there could be any possible downsides to this? I don't think so, as this should work fine if the data isn't binary, right?
",jnicklas,2014-02-03 13:57:05
1223,2014-02-03 13:46:02,"Right, the Ruby IO class documentation says this for binary file mode:

> Suppresses EOL <-> CRLF conversion on Windows. And
> sets external encoding to ASCII-8BIT unless explicitly
> specified.

The later is what we want. The first should not be an issue and, anyway, it would just affect Windows. :wink: 
",cschramm,2014-02-03 13:57:05
1223,2014-02-03 13:57:14,"Alright! Thanks!
",jnicklas,2014-02-03 13:57:05
1222,2014-01-06 18:56:07,"It's ubiquitous now.
",joliss,2014-02-03 13:39:55
1222,2014-02-03 13:39:54,"I'm torn on this one. Asking people to install gems manually does seem a little quaint. With Rubygems gaining the ability to run Gemfiles this will become even less common. On the other hand, we know what happens when we assume ;) I'm going to go with ""everyone uses bundler anyway"".
",jnicklas,2014-02-03 13:39:55
1221,2014-01-06 01:49:52,"Renamed failure message methods. Added aliases which are only enabled on RSpec 2.
",thomasfedb,2014-01-06 18:40:15
1221,2014-01-06 02:07:56,"/cc: @myronmarston, @jonrowe, @samphippen, @xaviershay ... is this the right idea for an RSpec 2.x and 3.x compatible matcher?
",alindeman,2014-01-06 18:40:15
1221,2014-01-06 02:12:56,"Seems legit. Although I'd have used aliases.
",JonRowe,2014-01-06 18:40:15
1221,2014-01-06 02:13:29,"I also wouldn't object to just having the aliases as is. I don't think it'll cause any pain? /cc @myronmarston
",JonRowe,2014-01-06 18:40:15
1221,2014-01-06 02:15:31,":sparkles: 
",samphippen,2014-01-06 18:40:15
1221,2014-01-06 02:20:28,"Yep, having the aliases always available regardless of rspec version is fine.
",myronmarston,2014-01-06 18:40:15
1221,2014-01-06 02:22:28,"@JonRowe @myronmarston Can you alias before defining the method? (Given that I'm defining the RSpec 2 versions in `Matcher` and the RSpec 3 versions in it's descendants.
",thomasfedb,2014-01-06 18:40:15
1221,2014-01-06 02:34:23,"Yeah maybe not, so it's define methods on the parent or define aliases in both children.
",JonRowe,2014-01-06 18:40:15
1221,2014-01-06 02:47:19,"@JonRowe Yeah, and I opted to avoid duplication.
",thomasfedb,2014-01-06 18:40:15
1221,2014-01-06 02:59:48,"Personally I'd have gone for the duplication for clarity (alias each method under definition)
",JonRowe,2014-01-06 18:40:15
1221,2014-01-06 14:59:36,"Agreed with everyone here, just regular aliases would be better.
",jnicklas,2014-01-06 18:40:15
1221,2014-01-06 18:40:15,"Given that #1219 has been merged, I'm closing this.
",thomasfedb,2014-01-06 18:40:15
1220,2013-12-31 20:39:26,"I'm not sure if this is a capybara issue or a poltergeist issue. It could be a capybara issue because a sleep solves the issue, but that's not advised in the latest capybara.

Situation: I've got a rails remote button that I had to make hidden so that I could put the calling button inside of another form. This ""dummy"" button calls the real button with this simple bit of JS code:

<S_CODE_TOKEN>

When the visible ""dummy"" button (really a link) calls the hidden button in my capybara test, I can verify the confirm dialog shows doing a sleep. But that is not the way that capybara is supposed to wait for elements to show.

If I run this code in the test to call the hidden button directly, then my test works:

<S_CODE_TOKEN>
",justin808,2014-04-03 22:05:28
1220,2014-01-06 15:04:14,"Not at all sure what you mean. Please provide a full example. You can use this template as a starting point: https://gist.github.com/jnicklas/5137053
",jnicklas,2014-04-03 22:05:28
1220,2014-04-03 22:05:28,"Closing due to lack of response
",twalpole,2014-04-03 22:05:28
1219,2013-12-31 11:00:48,"Heya - when I updated to RSpec3, I got a bunch of deprecation warnings complaining about Capybara's HaveText matcher using `failure_message_for_should`/`failure_message_for_should_not`. 

This commit uses their replacements (`failure_message`/`failure_message_when_negated`), while maintaining rspec2 compatibility with `alias_method`.  WDYT?
",jdelStrother,2014-01-06 15:00:19
1219,2014-01-06 00:31:56,"@jdelStrother You missed one, see line 95.
",thomasfedb,2014-01-06 15:00:19
1219,2014-01-06 08:08:27,"Doh, thanks.  I've updated the PR
",jdelStrother,2014-01-06 15:00:19
1219,2014-01-06 15:00:26,"Looks good to me! Thanks!
",jnicklas,2014-01-06 15:00:19
1219,2014-01-06 18:40:37,"@jnicklas Any timeline on a new gem being released?
",thomasfedb,2014-01-06 15:00:19
1219,2014-01-07 18:39:54,"We don't have a regular release schedule, but I guess we'll do a release to make sure everything works nicely once RSpec 3 hits final.
",jnicklas,2014-01-06 15:00:19
1219,2014-06-02 19:19:11,"Rspec 3 has hit final.
",jcoyne,2014-01-06 15:00:19
1219,2014-06-04 20:46:53,"RSpec is now out. Any chance on getting this out?
",aprescott,2014-01-06 15:00:19
1219,2014-06-04 21:11:05,"@aprescott Capybara 2.3.0 has been already released.
",abotalov,2014-01-06 15:00:19
1219,2014-06-04 21:15:07,"Oh, awesome thanks!
",aprescott,2014-01-06 15:00:19
1218,2013-12-31 09:35:16,,salimane,2014-04-02 18:53:52
1218,2014-01-06 14:58:01,"Seems like Ruby 2.1.0 is not building with the base versions Gemfile. @joliss, @twalpole I'm thinking that the base versions Gemfile maybe isn't worth the trouble. What do you think, should we kill it? 
",jnicklas,2014-04-02 18:53:52
1218,2014-01-06 17:37:10,"@jnicklas I'm rerunning the failed test since it failed trying to install the json gem which seems to install just fine under 2.1 for me, so it may just have been a spurious failure (will know once travis runs it again) - however while looking into this I did notice that since the rspec dependencies for 2.2 are setup as
Gem rspec-2.2.0
  rspec-core (~> 2.2)
  rspec-expectations (~> 2.2)
  rspec-mocks (~> 2.2)

it actually just loads all the latest 2.14.x versions of rspec-core, expectations and mocks -- so its really not testing rspec 2.2 as a minimum version.   That leaves rack, rack-test, nokogiri and cucumber as the packages its testing minimum versions of.   For me its not really worth testing the minimum versions of them for a testing tool (I'd feel differently if capybara was a library used in production)
",twalpole,2014-04-02 18:53:52
1218,2014-01-06 18:42:54,"@jnicklas The rerun was fine, so this failure may have just been a temporary issue with travis
",twalpole,2014-04-02 18:53:52
1218,2014-01-06 18:47:28,"> @joliss, @twalpole I'm thinking that the base versions Gemfile maybe isn't worth the trouble.

Here's the original reasoning: I was assuming that at some point we'd accidentally use a feature that wasn't supported by the minimum version of a dependency, without bumping the version spec in `Gemfile` at the same time. So I added the base version Gemfile in order to avoid having to deal with issues like ""Capybara breaks with old version of $dependency"". In other words, it was intended as a time saver. If it's not saving time, we should perhaps remove it.

I don't believe the `Gemfile.base-versions` test has ever actually caught anything, has it? If it hasn't, perhaps that's evidence that we don't need it.

Then again, seeing @twalpole comment's, perhaps this issue is unrelated.

I'll leave it up to you all.
",joliss,2014-04-02 18:53:52
1218,2014-01-07 18:37:19,"> I don't believe the Gemfile.base-versions test has ever actually caught anything, has it? If it hasn't, perhaps that's evidence that we don't need it.

I don't think it has. All the libraries we rely on are fairly old, stable libraries which don't have a lot of breaking changes. I vote for getting rid of it.
",jnicklas,2014-04-02 18:53:52
1218,2014-01-07 18:53:37,"@jnicklas One thing to keep in mind is that we will probably want to test with both rspec 2 and 3 once 3 is final
",twalpole,2014-04-02 18:53:52
1218,2014-01-23 08:06:18,"It seems bundler is already on >= 1.5.1 at Travis.

Row 246 of https://travis-ci.org/jnicklas/capybara/jobs/17161920 says `Using bundler (1.5.1)`
",abotalov,2014-04-02 18:53:52
1218,2014-02-03 13:41:57,"@twalpole true, but we don't have _that_ much code which integrates with RSpec. When we make changes to it, we could just run that manually.

@abotalov what does the bundler version have to do with this?
",jnicklas,2014-04-02 18:53:52
1218,2014-02-03 14:04:04,"This pull requests adds:
`gem install bundler -v '>= 1.5.1' # Temporary workaround for gem installation error on ruby 2.1.0`

But this row is not needed as Travis already has this version.
",abotalov,2014-04-02 18:53:52
1218,2014-02-03 14:25:50,"@abotalov I've just added a commit to remove that temp work around.
",salimane,2014-04-02 18:53:52
1218,2014-04-02 18:53:26,"Added 2.1.1 in #1283 
",twalpole,2014-04-02 18:53:52
1217,2013-12-30 21:50:20,"I had a cucumber test that was passing before add load_and_authorize_resource in my UsersController. Capybara cannot find the elements.

More info: http://stackoverflow.com/questions/20847766/capybara-cant-find-element-if-i-use-cancan-load-and-authorize-resource
",ricbermo,2013-12-30 22:40:25
1217,2013-12-30 22:40:25,"This is not an issue with capybara -- if you have usage questions please ask them on the mailing list
",twalpole,2013-12-30 22:40:25
1216,2013-12-20 22:37:48,,tispratik,2016-04-04 23:11:04
1216,2014-01-06 15:02:32,"This seems a bit randomly jammed in. :-1:

If this _should_ be documented, let's find a better way.
",jnicklas,2016-04-04 23:11:04
1216,2014-01-06 17:59:26,"Thanks @jnicklas. Can you point me to a better section? Actually we spent hours trying to figure out the right way to  override the :prefs, so thought it will be useful to share.
",tispratik,2016-04-04 23:11:04
1216,2014-01-23 08:09:12,"You can look at `new-readme` branch of this repo - https://github.com/jnicklas/capybara/commit/4cc7017b6dd08494ef165c73046aadaf2e01010a
",abotalov,2016-04-04 23:11:04
1215,2013-12-20 09:30:58,"Reset page with data-urls. This should solve problems with remote drivers not being able to access empty page, and also with Windows not understanding the `file://` protocol properly.
",jnicklas,2014-01-06 15:18:05
1215,2013-12-30 08:07:51,":thumbsup:
",DylanLacey,2014-01-06 15:18:05
1215,2013-12-30 08:51:21,"cool trick! :)
",ghost,2014-01-06 15:18:05
1215,2014-05-21 20:39:46,"PSA for anyone looking at this in the future, the data URI is great but doesn't work with internet explorer.
",juliemr,2014-01-06 15:18:05
1214,2013-12-16 23:19:22,"Getting the following error:

Selenium::WebDriver::Error::UnknownError: Component returned failure code: 0x80520001 (NS_ERROR_FILE_UNRECOGNIZED_PATH) [nsIWebNavigation.loadURI]
        assert_ok at C:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.38.0/lib/selenium/webdriver/remote/response.rb:52
       initialize at C:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.38.0/lib/selenium/webdriver/remote/response.rb:15
  create_response at C:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.38.0/lib/selenium/webdriver/remote/http/common.rb:59
          request at C:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.38.0/lib/selenium/webdriver/remote/http/default.rb:66
             call at C:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.38.0/lib/selenium/webdriver/remote/http/common.rb:40
      raw_execute at C:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.38.0/lib/selenium/webdriver/remote/bridge.rb:634
          execute at C:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.38.0/lib/selenium/webdriver/remote/bridge.rb:612
              get at C:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.38.0/lib/selenium/webdriver/remote/bridge.rb:110
               to at C:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.38.0/lib/selenium/webdriver/common/navigation.rb:14
           reset! at C:/jruby-1.7.4/lib/ruby/gems/shared/gems/capybara-2.2.0/lib/capybara/selenium/driver.rb:102
           reset! at C:/jruby-1.7.4/lib/ruby/gems/shared/gems/capybara-2.2.0/lib/capybara/session.rb:79
         **send** at org/jruby/RubyBasicObject.java:1703
             send at org/jruby/RubyKernel.java:2209
   reset_session! at C:/jruby-1.7.4/lib/ruby/gems/shared/gems/capybara-2.2.0/lib/capybara/dsl.rb:51
           (root) at C:/Projects/Workspace/capybara_test/capybara_test.rb:26
             load at org/jruby/RubyKernel.java:1073
           (root) at -e:1

When running the below program on Windows 7 with Firefox 20-22:

<S_CODE_TOKEN>

By using gem 'capybara', '2.1.0' in the above code we do not see this problem.
",highlandwolf,2014-01-06 15:18:04
1213,2013-12-16 16:44:54,"This is a cleaner version of PR #1208 -  Adds formaction support to racktest driver
",twalpole,2013-12-16 16:55:20
1212,2013-12-15 14:05:00,"I'd like to start a discussion with this pull request. It's still a bit rough, please bear with me.

This introduces a proxy server implementation (based on WEBrick) and configures the browser to use that proxy server. Thus the proxy server now receives any requests made by the browser. The proxy server internally uses the rack test framework to invoke the app to test. This allows us to easily test apps which use multiple domains. 

Right now the proxy server forwards all requests to the web app (similar to the RackTest adapter), but it'd be relatively easy to extend this to actually forward some requests to remote servers or use net mocking frameworks to mock requests.

Besides the selenium proxy driver included in the pull request, I also created one for Poltergeist:

<S_CODE_TOKEN>

Register those drivers like this:

<S_CODE_TOKEN>

One limitation, we need to configure the proxy driver's host and port to make sure they are available, for instance:

<S_CODE_TOKEN>

I'd love to hear your comments on how we can get this into capybara, we need this mainly to test our multi-domain app. Thanks.
",mreinsch,
1212,2013-12-15 15:40:47,"Have you looked at https://github.com/jarib/browsermob-proxy-rb?

Also I haven't experienced any issues with testing multi-domain apps when I used Capybara + Selenium.
",abotalov,
1212,2013-12-16 00:02:08,"As an idea, I really like this. It would be very nice to have a simple way to mock out specific URLs via the proxy, it seems that this would be a fluent candidate for creating something like that, or even making it possible to use existing mocking frameworks like WebMock in the client. Interesting stuff, the idea of using a proxy is neat.

Implementation wise, I think this needs some work though, but I realize you just wanted to throw this out there. I'm not too happy about all the SSL stuff in there, and I also don't like that it comes with a preconfigured list of hosts it ignores. There's also a lot of copy-paste with Capybara::Server going on. I'm guessing you know all of that though, so let's work on making this into something we can merge.

I'd also liket to discuss the `needs_proxy?` method. Somehow this seems a bit strange to me. Some drivers will be capable of providing a proxy setting and some won't (terminus comes to mind). It seems more in line that some drivers are capable of using a proxy and some aren't, so maybe we should somehow have an option to enable the proxy, and a way for Capybara to instruct the driver to use a certain proxy server. What do you think?
",jnicklas,
1212,2014-07-19 17:56:13,"Thanks for the feedback and sorry for the long delay!

I finally got some time to revise the pull request based on your feedback. The drivers now have a supports_proxy_protocol? method, which together with Capybara.use_proxy_protocol determines whether to use http or proxy. If proxy protocol is chosen, we'll tell the driver which host/port we're using, so it can start the browser with the correct settings.

So to use it, you only need the following

<S_CODE_TOKEN>

For poltergeist, the following patch works fine for me:

<S_CODE_TOKEN>

I still need to make the list of ignored hosts configurable - idea there is to allow everyone to hook in their own code, so we can hopefully see stubs for some of the common sites people integrate with...

Anyway, please let me know if that is moving into a direction you'd be happy with. Thanks!
",mreinsch,
1212,2014-07-19 18:00:36,"Regarding the SSL stuff, I'd prefer to not have that in there either, but it's required to test any SSL sites. The browsers use the CONNECT mechanism to tunnel the raw SSL stream through the proxy...
",mreinsch,
1212,2014-08-03 12:53:26,"I've completed the configuration, so it's now possible to plug in different rack apps for different hosts to mock out third party services - or to deliver 404 errors in case you just don't want to bother (like for google analytics).
",mreinsch,
1211,2013-12-14 06:33:02,"In the following script, button.click fails, but I can call page.execute_script per what I'd evaluate in the console, and that works.

On this page, there's a lot of dynamic javascript manipulating the DOM. Nevertheless, it's an absolute mystery why button.click did not work. I'd expect it to be doing the same same thing as calling click() in javascript. What's really strange is that if I called button.click twice, sometimes it would fire once, but not reliably.

<S_CODE_TOKEN>

I'm happy to try to provide more information to resolve this.

Some things I did:
1. I went into debugger mode for poltergeist. Everything looks normal, and the jquery script showed above worked fine in the console.
2. The button runs an ajax request. I'm quite sure that the button is just not getting clicked, so ajax is not part of the issue.

Here is a shot of the DOM for this issue.

![developer_tools_-_file____users_justin_j_blink_bpos_tmp_capybara_screenshot_2013-12-13-20-15-35 761 html](https://f.cloud.github.com/assets/1118459/1747957/e5bd45e4-6489-11e3-91f3-987efd5cc33b.jpg)
",justin808,2014-04-03 22:02:56
1211,2013-12-16 19:22:22,"There are so many variable which could be going wrong here. I'd bet good money this is something in your app which is strange, but it's not impossible you're running into a bug. I'd suggest paring away stuff until you're left with a much simpler test case.
",jnicklas,2014-04-03 22:02:56
1211,2014-04-03 22:02:56,"Closing this issue for now -- if you have a simpler test case we can reopen 
",twalpole,2014-04-03 22:02:56
1211,2014-04-15 17:35:43,"I ran into a similar issue where when I used debugger and called button.click the second time, it worked, it also worked with click() in the console. I tried several methods and what worked for me was to make the button path more specific. 
I guess for your case I would try: find(""a.blink-btn action-btn#addToCartBtn"").click or find(""a#addToCartBtn"").click or .trigger('click')
",tramxme,2014-04-03 22:02:56
1211,2014-10-10 23:10:30,"Had the same issue and trigger('click') was the solution.
",bpinto,2014-04-03 22:02:56
1210,2013-12-12 17:04:20,"I have 3 models:

<S_CODE_TOKEN>

As you can see two models have the same name but not the same goal. 

In my controller when I do:

<S_CODE_TOKEN>

it raises in my rails server:
`#<Category::Reference id: nil, title: nil, position: nil, slug: nil, created_at: nil, updated_at: nil>`

But the same raise when I do a `visit` with capybara raises: 
`#<Reference id: nil, title: nil, position: nil, description: nil,  created_at: nil, updated_at: nil>`

As you can see rails raises the good instance `Category::Reference` whereas capybara raises the wrong one `Reference`

I think I will need to rename my inherited model but it's a pity!

Thanks

Config:
- Ruby 2.0
- Rails 4.0.2
- Capybara 2.2.0
",luckynumberslevin,2013-12-16 19:01:53
1210,2013-12-13 10:44:39,"It seems it's not due to the class name but to the directory name. If I change :

<S_CODE_TOKEN>

by

<S_CODE_TOKEN>

It works well... I will rename my folder, but the question is, why is there a different behavior between rails and capybara?
",luckynumberslevin,2013-12-16 19:01:53
1210,2013-12-16 19:01:53,"Capybara has no insight into how your application loads your code. Most likely you're running into an issue with Rails' constant autoloading. The fact that it fails with Capybara is a red herring probably caused by the fact that your test environment is configured differently.
",jnicklas,2013-12-16 19:01:53
1210,2013-12-17 13:52:14,"Ok, thank you for your answer, I will check in this way.
",luckynumberslevin,2013-12-16 19:01:53
1209,2013-12-11 19:00:20,"This just bit me. Was wondering why some Capybara examples (like the README) have `find(""#bla"").visible?`  with an invisible element, but writing that caused an exception for me.

Also, maybe mention somewhere that you can pass in visible: false to a `find()` call.
",yjukaku,2015-08-04 17:27:59
1209,2013-12-16 19:02:43,"Good point. Doc patches are very welcome if you have a suggestion on how we can document this better.
",jnicklas,2015-08-04 17:27:59
1209,2014-01-17 14:19:53,"This just bit me a couple days ago as well, and I completely agree with the comment on [this commit](https://github.com/jnicklas/capybara/commit/a1dc2f4d592d000442406665c4f6fb9cb653441c), that this should be false by default.  It leads to behavior that is inconsistent with both the Capybara documentation and also leads to inconsistent Capybara API where methods available on the elements are not actually functional.
",tmertens,2015-08-04 17:27:59
1209,2015-08-02 00:00:24,"This hit me too today, I'd argue this should be in big bold letters throughout the documentation as it's completely counter-intuitive when you are using css (and possibly others, I'm not used to xpath) selectors for matching.
",CamJN,2015-08-04 17:27:59
1208,2013-12-11 01:30:24,"Documentation for formaction:
http://www.w3schools.com/tags/att_input_formaction.asp

If the implementation proposition is not up to the quality standard, or perhaps it's just not consistent in some way with the current code, please let me know and let's rework it.
",lamvak,2013-12-16 16:55:49
1208,2013-12-11 09:24:23,"I see the build problems. I'll investigate.
Edit: I see many builds fail with some build configs. I don't see anything specific to the proposed change in the travis log.
",lamvak,2013-12-16 16:55:49
1208,2013-12-11 15:13:55,"The build errors on ruby and rbx don't have anything to do with this request
",twalpole,2013-12-16 16:55:49
1208,2013-12-11 15:24:33,"Please rework the tests associated with this pull request. The cucumber features are not intended for testing functionality in this gem, they are solely for the purpose of testing the actual integration with cucumber.
",jnicklas,2013-12-16 16:55:49
1208,2013-12-11 15:25:10,"Also, it should not be necessary to add new actions to the test app for this test.
",jnicklas,2013-12-16 16:55:49
1208,2013-12-11 15:37:09,"@jnicklas : got it!
",lamvak,2013-12-16 16:55:49
1208,2013-12-16 16:46:30,"I reimplemented this with tests in the correct location as PR #1213 - seems like a worthwhile addition
",twalpole,2013-12-16 16:55:49
1208,2013-12-16 16:55:49,"Closed via PR #1213
",twalpole,2013-12-16 16:55:49
1208,2013-12-21 21:56:40,"@twalpole I just couldn't get back to it earlier. Thank you very much.
",lamvak,2013-12-16 16:55:49
1207,2013-12-10 16:06:11,"C:\Ruby193\bin\ruby.exe -EUTF-8 -e $stdout.sync=true;$stderr.sync=true;load($0=ARGV.shift) C:\Ruby193\bin/cucumber C:/Users/arnaudl/RubymineProjects/Test/features/performance.feature --format Teamcity::Cucumber::Formatter --expand --backtrace --verbose --color -r features
Testing started at 15:55 ...
Code:
- features/support/env.rb
- features/support/pages/BuyoutPage.rb
- features/support/pages/PerformancePage.rb
- features/step_definitions/my_steps.rb

Features:
- C:/Users/arnaudl/RubymineProjects/Test/features/performance.feature
  Parsing feature files took 0m0.024s

Selenium::WebDriver::Error::StaleElementReferenceError: Element not found in the cache - perhaps the page has changed since it was looked up
[remote server] resource://fxdriver/modules/web_element_cache.js:7615:in `fxdriver.cache.getElementAt'
[remote server] file:///C:/Users/arnaudl/AppData/Local/Temp/webdriver-profile20131210-1384-1qkm9fj/extensions/fxdriver@googlecode.com/components/command_processor.js:7233:in`Utils.getElementAt'
[remote server] file:///C:/Users/arnaudl/AppData/Local/Temp/webdriver-profile20131210-1384-1qkm9fj/extensions/fxdriver@googlecode.com/components/command_processor.js:10374:in `WebElement.isElementDisplayed'
[remote server] file:///C:/Users/arnaudl/AppData/Local/Temp/webdriver-profile20131210-1384-1qkm9fj/extensions/fxdriver@googlecode.com/components/command_processor.js:10844:in`DelayedCommand.prototype.executeInternal_/h'
[remote server] file:///C:/Users/arnaudl/AppData/Local/Temp/webdriver-profile20131210-1384-1qkm9fj/extensions/fxdriver@googlecode.com/components/command_processor.js:10849:in `DelayedCommand.prototype.executeInternal_'
[remote server] file:///C:/Users/arnaudl/AppData/Local/Temp/webdriver-profile20131210-1384-1qkm9fj/extensions/fxdriver@googlecode.com/components/command_processor.js:10791:in`DelayedCommand.prototype.execute/<'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/response.rb:51:in `assert_ok'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/response.rb:15:in`initialize'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/http/common.rb:59:in `new'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/http/common.rb:59:in`create_response'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/http/default.rb:66:in `request'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/http/common.rb:40:in`call'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/bridge.rb:634:in `raw_execute'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/bridge.rb:612:in`execute'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/bridge.rb:553:in `isElementDisplayed'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/common/element.rb:171:in`displayed?'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/selenium/node.rb:74:in `visible?'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/node/element.rb:145:in`block in visible?'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/node/base.rb:81:in `synchronize'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/node/element.rb:145:in`visible?'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/query.rb:44:in `matches_filters?'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/result.rb:27:in`block in initialize'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/result.rb:27:in `select'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/result.rb:27:in`initialize'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/node/finders.rb:159:in `new'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/node/finders.rb:159:in`resolve_query'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/node/finders.rb:129:in `all'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/session.rb:354:in`block (2 levels) in class:Session'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/dsl.rb:51:in `block (2 levels) in <module:DSL>'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/site_prism-2.5/lib/site_prism/page.rb:60:in`find_all'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/site_prism-2.5/lib/site_prism/element_container.rb:14:in `block (2 levels) in elements'
C:/Users/arnaudl/RubymineProjects/Test/features/step_definitions/my_steps.rb:133:in`block in <top (required)>'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/core_ext/instance_exec.rb:48:in `instance_exec'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/core_ext/instance_exec.rb:48:in`block in cucumber_instance_exec'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/core_ext/instance_exec.rb:69:in `cucumber_run_with_backtrace_filtering'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/core_ext/instance_exec.rb:36:in`cucumber_instance_exec'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/rb_support/rb_step_definition.rb:97:in `invoke'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/step_match.rb:25:in`invoke'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/step_invocation.rb:60:in `invoke'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/step_invocation.rb:38:in`accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:106:in `block in visit_step'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:170:in`broadcast'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:105:in `visit_step'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/step_collection.rb:19:in`block in accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/step_collection.rb:18:in `each'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/step_collection.rb:18:in`accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:100:in `block in visit_steps'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:170:in`broadcast'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:99:in `visit_steps'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:15:in`block in execute'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime.rb:83:in `block (2 levels) in with_hooks'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime.rb:99:in`before_and_after'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime.rb:82:in `block in with_hooks'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime/support_code.rb:120:in`call'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime/support_code.rb:120:in `block (3 levels) in around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/language_support/language_methods.rb:9:in`block in around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/language_support/language_methods.rb:91:in `call'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/language_support/language_methods.rb:91:in`execute_around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/language_support/language_methods.rb:8:in `around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime/support_code.rb:119:in`block (2 levels) in around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime/support_code.rb:117:in `call'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime/support_code.rb:117:in`around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime.rb:94:in `around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime.rb:81:in`with_hooks'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:13:in `execute'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/scenario.rb:32:in`block in accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/scenario.rb:79:in `with_visitor'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/scenario.rb:31:in`accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:58:in `block in visit_feature_element'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:170:in`broadcast'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:57:in `visit_feature_element'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/feature.rb:38:in`block in accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/feature.rb:37:in `each'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/feature.rb:37:in`accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:27:in `block in visit_feature'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:170:in`broadcast'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:26:in `visit_feature'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/features.rb:28:in`block in accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/features.rb:17:in `each'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/features.rb:17:in`each'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/features.rb:27:in `accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:21:in`block in visit_features'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:170:in `broadcast'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:20:in`visit_features'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime.rb:49:in `run!'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/cli/main.rb:47:in`execute!'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/bin/cucumber:13:in `<top (required)>'
C:/Ruby193/bin/cucumber:23:in`load'
C:/Ruby193/bin/cucumber:23:in `<top (required)>'
-e:1:in`load'
-e:1:in `<main>'
C:\Users\arnaudl\RubymineProjects\Test\features\performance.feature:25:in`Then i buy  collectfrom tickets'
1 scenario (1 failed)
2 steps (1 failed, 1 passed)
0m28.661s

Process finished with exit code 1
",arnaud-co-uk,2013-12-16 19:07:22
1207,2013-12-10 17:18:51,"in fact it is probably more an issue for either site-prism in particular or the page object pattern in general. 
",arnaud-co-uk,2013-12-16 19:07:22
1207,2013-12-10 17:34:04,"Are you using site_prism? I've advised the site_prism creator that he's using Capybara incorrectly numerous times without success. I would suggest using and understanding Capybara on its own and creating your own page object pattern on top.
",jnicklas,2013-12-16 19:07:22
1207,2013-12-16 19:07:22,"`StaleElementReferenceError` in of itself is _not_ a bug, there are legitimate reasons this error can occur. Please make sure you understand why this error is occuring in your case. Also, in the future, please consider the people who will be reading the issues you create, just dumping a giant stack trace and a mountain of code there is not helpful and you will not get any decent help out of it. Make sure you format your code nicely and describe your problem in a consise way.
",jnicklas,2013-12-16 19:07:22
1206,2013-12-09 16:36:51,"The following test is blinking to fail for me every once in a while.  Not sure why.

1) Capybara::Session selenium #fill_in should wait for asynchronous load
     Failure/Error: @session.fill_in('new_field', :with => 'Testing...')
     Capybara::ElementNotFound:
       Unable to find field ""new_field""
     # ./lib/capybara/node/finders.rb:41:in `block in find'
     # ./lib/capybara/node/base.rb:81:in`synchronize'
     # ./lib/capybara/node/finders.rb:30:in `find'
     # ./lib/capybara/node/actions.rb:53:in`fill_in'
     # ./lib/capybara/session.rb:396:in `block (2 levels) in <class:Session>'
     # ./lib/capybara/spec/session/fill_in_spec.rb:109:in`block (2 levels) in <top (required)>'
",dpdawson,2014-04-07 17:02:37
1206,2013-12-16 19:37:33,"Which OS, Ruby flavour and version, and Capybara driver are you using? It passes consistently for me on MRI 2.0 and Jruby 1.7.8 at least.
",jnicklas,2014-04-07 17:02:37
1206,2013-12-16 21:27:38,"OSX 10.9
MRI 2.0.0p247
Capybara 2.1.0
",dpdawson,2014-04-07 17:02:37
1206,2013-12-16 23:10:38,"Are you not using the latest master?
",jnicklas,2014-04-07 17:02:37
1206,2013-12-18 19:41:58,"Sorry, Capybara was 2.2.0.
",dpdawson,2014-04-07 17:02:37
1206,2014-04-03 22:00:32,"@dpdawson Any update on this, are you still seeing it?
",twalpole,2014-04-07 17:02:37
1205,2013-12-09 15:15:02,"Attempt to fix [#1179](https://github.com/jnicklas/capybara/issues/1179)

I'm not sure the best way to test this, but would this fix the mentioned issue by memoizing the text method on Capybara::Node::Simple?
",dpdawson,2013-12-10 12:58:32
1205,2013-12-09 16:37:10,"#1159 is an issue with selenium driver. I think it's not reproducible in Racktest.

Method that is invoked in `failure_message_for_should` can be `Document#text` and `Element#text` too.

I think memoization can't be applied in `text` method since it will prohibit the following usage:

<S_CODE_TOKEN>
",abotalov,2013-12-10 12:58:32
1205,2013-12-10 12:58:32,"Oh, yes. I see. Then I don't see a way to do it without serious retooling.
",dpdawson,2013-12-10 12:58:32
1204,2013-12-09 09:22:26,"In rails4, I have test code like this:

<S_CODE_TOKEN>

and it passed, but I change it like this:

<S_CODE_TOKEN>

it failed!!!!!

the error message is:

<S_CODE_TOKEN>

I change several javascript driver and it's still the same. I think I can get a answer here

I use rspec and this is in my spec_helper:

<S_CODE_TOKEN>
",ghost,2013-12-20 08:35:19
1204,2013-12-09 11:24:46,"Ok, I tried several times and I found 

<S_CODE_TOKEN>

will pass whether with js: true or not.But

<S_CODE_TOKEN>

only pass without js: true
",ghost,2013-12-20 08:35:19
1204,2013-12-20 08:35:18,"This is expected behaviour. The behaviour of `visible` can be slightly different from driver to driver, and by default, invisible elements are excluded.
",jnicklas,2013-12-20 08:35:19
1203,2013-12-06 17:24:03,"See https://gist.github.com/mattwynne/7821742 for the error.

This happens at the end of a Cucumber scenario on a Windows 7 box with Capybara 2.2 running Firefox. When I pinned back to Capybara 2.1 the problem went away.
",mattwynne,2014-01-06 15:18:05
1203,2013-12-19 09:05:40,"I have a related (the same?) the same problem but on Ubuntu 13.10, firefox 26.0. Stacktrace and behavior seems the same, but I don't get a timeout though.

I was not even running seleium tests when the error occurred. Maybe that was the problem? 17 scenarios are passing before one scenario fails in the After hook in cucumber.rb:8, after that all tests fail in the After hook.

Reverting to 2.1.0 or commenting out the call to reset_sessions! works.

<S_CODE_TOKEN>
",henrikedberg,2014-01-06 15:18:05
1202,2013-12-02 09:20:53,"I'm running test's in a new environment that we call as ""stub"". Using capybara with cucumber-rails. The rails server is not starting, by default. ""config.run_server"" is set to true.  I tried running in ""test"" environment too, but the server is not starting. Any help much appreciated. 
",paramadeep,2013-12-02 10:25:36
1202,2013-12-02 09:59:36,"@paramadeep the server is booted lazily as soon as it's needed, maybe that's what's confusing you? It doesn't have anything to do with the Rails environment, Capybara isn't even aware of that.
",jnicklas,2013-12-02 10:25:36
1202,2013-12-02 10:11:52,"@jnicklas I just mentioned the environment to check if it the reason. 

The problem is, the application server doesn't spin-up while the test runs. The tests fails as the application is not loading on to the browser.
Just to confirm the application is not started, I observed there is no port used by a ruby in the system while I'm debugging the test.
",paramadeep,2013-12-02 10:25:36
1202,2013-12-02 10:25:36,"I'm afraid I don't know what's going on, but I doubt you're running into an actual issue, more likely it's something about your configuration that is strange, or you're misunderstanding how to use something. To get help with these kinds of problems, post to the mailing list or to StackOverflow.
",jnicklas,2013-12-02 10:25:36
1202,2013-12-03 08:35:53,"I'm using cucumber-rails. I have to add the following lines in Cucumber environment file, ""feature/support/env.rb"" 

require File.expand_path('../../../config/environment', **FILE**)
require (""rspec/rails"")

without this Capybara.app in session class is not instantiated. 

Please update the read me file. With Cucumber-Rails, 'read me' says things work out of box, which is not the case.
",paramadeep,2013-12-02 10:25:36
1201,2013-11-29 12:07:00,,semenyukdmitry,2013-12-20 08:34:06
1201,2013-11-29 13:44:36,"This method is defined inside ActiveSupport and Capybara can be used in projects that don't use it.
",abotalov,2013-12-20 08:34:06
1200,2013-11-27 10:00:10,"I have a situation where I must click a `span` elements, which makes parts of the DOM vissible (that I must verify). A javascript click eventhandler makes the part of the DOM vissble. But when using capybaras `click_on` it seems that it only searches through `a` and `button` elements. So triggering this javascript click eventhandler seems impossible.
",jarl-dk,2013-11-27 12:56:40
1200,2013-11-27 11:09:53,"Have you tried using `find`, e.g.

<S_CODE_TOKEN>
",diabolo,2013-11-27 12:56:40
1200,2013-11-27 12:56:40,"Thanks a lot. that was a way around it... I use

<S_CODE_TOKEN>

where `click_text` is the human readable text.
",jarl-dk,2013-11-27 12:56:40
1200,2013-11-28 09:18:21,"You should consider using normalize-space() rather than text() - this is what Capybara (XPath) uses internally for finding nodes by text - as the actual text of your html nodes often will contain trailing and following whitespace, and also multiple whitespace between words, which is normalized by the browser for display.
",adiel,2013-11-27 12:56:40
1200,2013-11-28 09:21:13,"Thanks for the tip.

2013/11/28 Adrian Longley notifications@github.com

> You should consider using normalize-space() rather than text() - this is
> what Capybara (XPath) uses internally for finding nodes by text - as the
> actual text of your html nodes often will contain trailing and following
> whitespace, and also multiple whitespace between words, which is normalized
> by the browser for display.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1200#issuecomment-29449125
> .
",jarl-dk,2013-11-27 12:56:40
1199,2013-11-26 17:58:15,"Install chromedriver 2.7 for travis tests
",twalpole,2013-11-26 17:58:23
1198,2013-11-26 01:24:27,"I'm getting errors after every scenario after upgrading to 2.2.0, the problem is this assertion is failing:
https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L81

`expected not to find xpath ""/html/body/*"", found ...`

tested using last versions of chrome and FF, with selenium driver on Windows.
I'm not sure, but it seems the reason is the browser is not navigating to a blank page, as supposed to.

(tests work fine using 2.1.0)
",benjamine,2014-01-06 15:18:05
1198,2013-11-26 01:39:48,"Navigating to about:blank was causing hangs when using chromedriver with selenium, so in 2.2 it changed to loading an empty html document - https://github.com/jnicklas/capybara/commit/6b1e42dd3195cc6589fbacbac69a5aca05c0d2e7 -  Do you happen to be using a remote browser that can't access the file?
",twalpole,2014-01-06 15:18:05
1198,2013-11-26 08:18:45,"Which driver are you using? It's possible some of them haven't caught up with the 2.2.0 changes yet. We now require `reset` to be synchronous, because otherwise it can cause strange failures, but it might not be in all drivers yet.

It's pretty bad that this breaks the driver API. Maybe this assertion should be removed. Pulling in @mhoran, @jferris @jcoglan and @jonleighton.
",jnicklas,2014-01-06 15:18:05
1198,2013-11-26 14:30:11,"Reset is synchronous in capybara-webkit. All WebPage instances are destroyed, local storage is deleted, and the cookie store is emptied.
",mhoran,2014-01-06 15:18:05
1198,2013-11-26 15:39:05,"I'm using selenium webdriver, and yes I notice the browser is not navigating to a blank page.
The assertion error messages shows that the page content is still the content of the last page in the scenario.

These are the drivers I tested this with (both failing in the same assertion):

<S_CODE_TOKEN>
",benjamine,2014-01-06 15:18:05
1198,2013-11-26 15:47:57,"capybara-webkit destroys all WebPage instances and then instantiates a new WebPage object but does not navigate to about:blank. This looks to be consistent with Selenium. Prior to capybara-webkit 0.14.0 we navigated to about:blank on reset (https://github.com/thoughtbot/capybara-webkit/commit/126411337e60fe6b556e8f9ec018408022cb0bcc).
",mhoran,2014-01-06 15:18:05
1198,2013-11-26 15:57:52,"ok, but notice I'm not using capybara-webkit, but selenium webdriver, maybe could we have a config setting to turn that off for a specific driver?
",benjamine,2014-01-06 15:18:05
1198,2013-12-18 10:10:18,"There is an additional problem with the behavior in 2.2.0:
Capybara navigates to a file on the local file system, then expects it to be empty.
This will fail if you use Capybara with Browsers that are not running on the same machine (in our case we use Sauce Labs). Navigating to the missing file results in Chrome displaying an error page and the assertion not to find `/html/body/*` fails because the error page actually contains HTML.
",janv,2014-01-06 15:18:05
1198,2013-12-23 12:56:20,"For what it's worth: in Terminus, I cheat a little bit by disabling `find` after a `reset`, and enabling it again on the next `visit`. See `@find_enabled` in https://github.com/jcoglan/terminus/blob/master/lib/terminus/browser.rb.

Navigating to `about:blank` would be problematic; since Terminus has to access everything via a proxy in order to inject the JavaScript driver, so the response necessarily contains HTML.
",jcoglan,2014-01-06 15:18:05
1198,2014-01-07 02:25:26,"awesome, thanks
",benjamine,2014-01-06 15:18:05
1197,2013-11-23 00:09:08,"The @browser instance variable was not being cleared when #quit was called, which could lead to an error if it was accessed again.  This change makes sure it gets reset to nil
",twalpole,2013-11-23 00:11:53
1196,2013-11-22 22:09:36,"The way that I like to write cucumber steps is to use an application driver and call methods of that from the step definitions. It feels wrong to have the RSpec expectations ion the driver or the driver give a damn what testing framework will be used, but the driver also should not expose Capybara-specific objects to the step code.

When I have seen other people try to work around this, their first instinct is generally to abuse Capybara by returning data queried from the page, and running expectations against that. The result is generally flickering tests that can only be made reliable by introducing hard-coded delays.

So -- I'd like to see the code for testing expectations and returning descriptions of failures be extracted into their own layer, separate from the RSpec expectation classes themselves.

I'm thinking of maybe something that returns a true/false and yields a failure description to a block if applicable?
",stevecj,2014-07-03 09:15:01
1196,2013-11-26 01:10:57,"Capybara has `assert_selector`, which is kind of what you describe, I guess?
",jnicklas,2014-07-03 09:15:01
1196,2013-11-28 19:54:04,"Hmm. That might do the trick, actually. It looking at the source, it raises an exception with `result.failure_message` as the message, so that should provide all of the info that's needed. I'll try using that, and see if it works as expected.

Thanks Jonas :)
",stevecj,2014-07-03 09:15:01
1196,2013-11-28 21:02:28,"FWICS, the only downside is that it requires a selector, so can't use the convenience methods like #has_text? Would this be an appropriate way to assert having text using #assert_selector ?

<S_CODE_TOKEN>

It seems to work. The failure message has a little extra noise in it, but not terrible. Is there some simpler way to express that?
",stevecj,2014-07-03 09:15:01
1196,2013-12-20 08:40:27,"That's true. There's an open issue on the text in the failure message of the  `have_text` matcher sometimes being incorrect, and adding an `assert_text` and using that under the hood might be a better option and kill two flies with one stone.

The code you posted should work fine, though it'd probably be more performant to use:

<S_CODE_TOKEN>

This is pretty much what Capybara does under the hood anyway.
",jnicklas,2014-07-03 09:15:01
1196,2014-07-03 09:14:59,"`assert_text`, `assert_no_text`, `assert_title`, `assert_no_title` were added to master branch.
",abotalov,2014-07-03 09:15:01
1195,2013-11-22 00:03:36,"We are running into an issue where we need a fresh browser/driver for every test. This line is causing us trouble.

https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/driver.rb#L19

The problem is that we manually quit the browser, but then later Capybara will try to quit the browser but it's already been quit so we get an error.

I know it's generally advised to use reset sessions in between tests, however we are trying to integrate with Saucelabs and each unique session is tied to one set of videos/test run and we'd like to have each test's results separate.

What is the right way to quit the driver/create a new driver for every test.

Thanks!
",lesliepc16,2013-11-22 00:34:27
1195,2013-11-22 00:34:25,"I would think subclassing Capybara::Selenium::Driver to create your own driver class and then overriding browser and/or reset! to provide the behavior you want would be one solution, however this is a question that should be asked on the mailing list
",twalpole,2013-11-22 00:34:27
1195,2013-11-22 06:50:40,"Thanks for the suggestion.
",lesliepc16,2013-11-22 00:34:27
1195,2013-11-22 08:55:35,"IIRC this bug is fixed in 2.2.0, just released. Try upgrading.
",jnicklas,2013-11-22 00:34:27
1194,2013-11-19 21:10:09,"This enables the rbx-2.1.1 build to run on travis.  @jnicklas : 2.1.0 on travis appears to just be missing since it doesnt even install, so I removed it from travis.yml completely.  2.0.0 appears not to install the ruby standard library since 'gem --version' errors our before we have a chance to run any scripts to install anything so I've moved that to allowed failures.   jruby is failing because stdout appears to be buffered so travis doesnt see any status output from rspec for 10 minutes and aborts the run.  Any ideas on that?
",twalpole,2013-12-20 08:36:27
1194,2013-11-19 22:19:22,"@jnicklas I just changed to the documentation rspec formatter, when testing with jruby, which flushes the buffer so travis sees test progress
",twalpole,2013-12-20 08:36:27
1194,2013-11-20 00:17:54,"@jnicklas - ok so now that the jruby test actually gets to run fully - it fails being unable to connect to chromedriver  - any thoughts on the cause of that?
",twalpole,2013-12-20 08:36:27
1194,2013-11-26 01:09:11,"No idea, I've never used chromedriver with JRuby, not sure if there are any issues.
",jnicklas,2013-12-20 08:36:27
1194,2013-11-26 20:14:36,"@jnicklas I have no clue why chromedriver has issues under jruby on travis - but even removing chrome from being tested with jruby it still fails on the server spec with 

1) Capybara::Server should bind to the specified host
     Failure/Error: Unable to find matching line from backtrace
     Errno::EADDRINUSE:
       Address already in use - bind - Address already in use
     # ./lib/capybara.rb:171:in `run_default_server'
     # ./spec/capybara_spec.rb:30:in`(root)'
     # ./lib/capybara/server.rb:70:in `boot'

Is testing on jruby worth dealing with issues?  Also the tests with chrome randomly fail at the end with ""cannot kill Chrome"", which I'm guessing is chromedriver not waiting long enough for chrome to exit in the travis environment (from the chromedriver source it appears to wait a fixed 5 seconds with no way to modify), so it may not be worth running with chrome either
",twalpole,2013-12-20 08:36:27
1194,2014-01-10 05:10:40,"This problem is still occurring. Please advise on how you worked around it ?
using JRuby 1.7.9 and HEAD capybara

<S_CODE_TOKEN>
",thimmaiah,2013-12-20 08:36:27
1193,2013-11-15 17:56:40,"The session mode was changed from :selenium to :selenium_focus in a different commit -  updated logic on test so it is still marked as pending.
",twalpole,2013-11-15 17:57:18
1192,2013-11-15 17:34:32,"@jnicklas -  This is all the tests changed to use 'expect' syntax and changes made to get rid of all the deprecation warnings rspec 2.99.0.beta1 throws in advance of rspec 3 being released.  The downside to these changes is that the tests will no longer run with earlier rspecs than 2.99 due to the lack of the be_truthy/be_falsey matchers.  I'm not sure that its going to be possible to have tests that can ruin using either rspec 2.x or 3 without implementing our own be_truthy/be_falsey matchers if rspec doesnt have them.  Do you think this is worth continuing on currently?
",twalpole,2014-04-02 22:57:42
1192,2013-11-15 21:26:09,"Crazy pull request :) Let's maybe hold off until RSpec 3 is released though, and then move the whole suite to 3 in one fell swoop?
",jnicklas,2014-04-02 22:57:42
1192,2013-11-15 21:40:00,"Yeah, I'm fine with that -- most of this was automated conversion with transpec -  I did it to see what was coming up and any issues there would be -- it shows that enabling the specs run by other adapters to work in both rspec 2 ( < 2.99) and 3 is going to run into the issue with be_falsey and be_truthy - so we're either going to have to require all other adapters to update to rspec 3 too or work around the issue.
",twalpole,2014-04-02 22:57:42
1192,2013-11-25 05:36:21,"If you run into any complications with upgrading, please ping me or one of the other rspec-core folks.  We're working hard to make the transition to 3.0 as smooth as possible in spite of the many changes we're making.
",myronmarston,2014-04-02 22:57:42
1192,2013-11-25 17:56:08,"@myronmarston  a 2.14 release that adds the be_truthy/falsey matchers might be a nice help for tools like capybara that have test suites other project use to ensure compliance and would like to be runnable under rspec 2 and 3.
",twalpole,2014-04-02 22:57:42
1192,2013-11-25 18:04:52,"@myronmarston  or maybe a separate gem that provides those two matchers
",twalpole,2014-04-02 22:57:42
1192,2013-11-25 22:51:17,"Hmm, in 2.14 it's as simple as `alias be_truthy be_true; alias be_falsey be_false`, but as that's a new API I don't think we can add it in a 2.14.x release without violating SemVer.  It's in 2.99 so it's already in an RSpec 2.x release.  Also, are all adapters running RSpec 2.14?  If not, it wouldn't fix the issue, anyway.

Instead, I'd recommend capybara defining `be_truthy` and `be_falsey` aliases if and only if those matchers are not defined...then capybara can use them, and it should work with adapters running any 2.x or 3.x version of RSpec.

<S_CODE_TOKEN>
",myronmarston,2014-04-02 22:57:42
1192,2014-04-01 19:34:13,"@abotalov 5 months ago when this PR was first started it was against 2.99 - since then the release of 3 is much closer and so now its testing against the beta of 3 - the base versions is set to rspec 2.2 and whatever the latest version of fuubar is compatible with that is.  
",twalpole,2014-04-02 22:57:42
1192,2014-04-01 20:22:27,"Also I noticed that RSpec 2.2 specifies other RSpec libraries using `~>` (see https://github.com/rspec/rspec/blob/v2.2.0/rspec.gemspec#L27). Because of it Capybara's `Gemfile.base-versions` build actually uses RSpec `2.14`, not `2.2` (https://travis-ci.org/jnicklas/capybara/jobs/21961445#L277) and will use `2.99` when it will be released.

I think it's not good as `2.99` will contain many features not present in `2.2` and we should build against `2.2` instead (or bump version requirement).

If you think it's out of scope of this PR I can make a new one.
",abotalov,2014-04-02 22:57:42
1192,2014-04-01 20:22:38,"LGTM
",abotalov,2014-04-02 22:57:42
1192,2014-04-01 20:38:20,"@abotalov Yeah I had noticed the rspec 2.2 vs 2.14 issue too (I think I mentioned it another issue somewhere) --  I'm not sure if going back to 2.2 makes any sense at this point - it was released 4.5 years ago and if anyone is still using 2.2 they're probably not updating capybara --  I think testing against 2.14 and 3 is probably going to be fine in the future
",twalpole,2014-04-02 22:57:42
1191,2013-11-15 02:02:00,"I was en undefined method error for ""call"" on MyApp:Class, then I realized the documentation was incorrect.  I added the .new and the problem was solved!
",amorphid,2013-11-26 01:06:40
1191,2013-11-15 08:04:42,"There's nothing stopping you from assigning an instance to a constant, it doesn't have to be a class. Also, classes can be Rack apps. Rails puts your application in YourApp::Application, so this isn't even particularly uncommon. I actually think that adding `new` here is a bit misguiding, since you probably want the same instance of your rack app that you're sending in to rack. Maybe we could make it lowercase, as in:

<S_CODE_TOKEN>
",jnicklas,2013-11-26 01:06:40
1191,2013-11-15 14:40:55,"Hi Jonas,

In my opinion, saying MyApp.new (or MyRackApp.new) is the clearest way to indicate that Capybara.app is equal to an instance.  MyApp could be a constant or module, my_rack_app could be a method, and both feel like too much abstraction to me.

To put it another way, it took me a day to figure out that it was supposed to be an instance.  In my defense, I am relatively new to programming :)
",amorphid,2013-11-26 01:06:40
1191,2013-11-15 21:21:45,"Everything in Ruby is an instance. Classes are instances of the class `Class`. You can do `MyRackApp = 2` and now `MyRackApp` is an instance of Fixnum. Whether you want a class, or an instance of that class depends on your application, in Rails, the correct call would have been `Capybara.app = MyApp::Application` **without** `new`.
",jnicklas,2013-11-26 01:06:40
1191,2013-11-15 21:32:00,"How about this:
Capybara.app = instance_of_my_rack_app # I think that's pretty clear
On Nov 15, 2013 1:21 PM, ""Jonas Nicklas"" notifications@github.com wrote:

> Everything in Ruby is an instance. Classes are instances of the class
> Class. You can do MyRackApp = 2 and now MyRackApp is an instance of
> Fixnum. Whether you want a class, or an instance of that class depends on
> your application, in Rails, the correct call would have been Capybara.app
> = MyApp::Application _without_ new.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/pull/1191#issuecomment-28604377
> .
",amorphid,2013-11-26 01:06:40
1191,2013-11-15 21:35:00,"But it's not correct. A rack application is any object in Ruby which follows the Rack ""interface"". Saying ""an instance of a rack app"" doesn't make any sense, because a rack app is not a class.
",jnicklas,2013-11-26 01:06:40
1191,2013-11-15 21:36:29,"It might be a class, but it might not be. This is a valid rack app, no class in sight:

<S_CODE_TOKEN>
",jnicklas,2013-11-26 01:06:40
1191,2013-11-26 01:06:40,"Okay, sorry, I'm pulling my veto on this one.
",jnicklas,2013-11-26 01:06:40
1191,2013-11-26 01:38:08,"I already figured out that I wasn't making a sufficient case to sway you.
 The reason I suggested this in the first place is because I found the
answer on the capybara-webkit page.  Check this out:

https://github.com/thoughtbot/capybara-webkit

Whether you're more or less right isn't important to me.  What matters to
me is that I found the answer elsewhere, and I wanted to share that with
you.  Using the ""Foo.new"" approach makes more sense to me.

On Tue, Nov 26, 2013 at 12:06 PM, Jonas Nicklas notifications@github.comwrote:

> Okay, sorry, I'm pulling my veto on this one.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/pull/1191#issuecomment-29258892
> .
",amorphid,2013-11-26 01:06:40
1191,2013-11-26 08:14:21,"Are you using Sinatra? Are you talking about this section?

> If you're using capybara-webkit with Sinatra, don't forget to set
> 
> Capybara.app = MySinatraApp.new

If so, this is completely correct for Sinatra application, but it is _not_ correct for Rack applications in general. I think there's no harm in adding a short line about Sinatra to our README. Also, my initial suggestion about using `Capybara.app = my_rack_app` in the context we were debating about here still stands.
",jnicklas,2013-11-26 01:06:40
1191,2013-11-26 08:33:12,"I'm writing a pure Rack app, and the main app lives in a class.  I suspect
the largest percentage of non-Rails apps are some flavor of Sinatra or a
class based approach.  Of those not using Rails, anyone not using a
MyApp.new approach is likely in the minority and/or is smart enough to
figure out the right convention.
On Nov 26, 2013 7:14 PM, ""Jonas Nicklas"" notifications@github.com wrote:

> Are you using Sinatra? Are you talking about this section?
> 
> If you're using capybara-webkit with Sinatra, don't forget to set
> 
> Capybara.app = MySinatraApp.new
> 
> If so, this is completely correct for Sinatra application, but it is _not_correct for Rack applications in general. I think there's no harm in adding
> a short line about Sinatra to our README. Also, my initial suggestion about
> using Capybara.app = my_rack_app in the context we were debating about
> here still stands.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/pull/1191#issuecomment-29274068
> .
",amorphid,2013-11-26 01:06:40
1190,2013-11-10 11:44:39,,glenbray,2013-11-14 21:22:54
1190,2013-11-10 12:38:18,"Hmm, why?
",jnicklas,2013-11-14 21:22:54
1190,2013-11-10 12:50:31,"Visual consistency - Line 442 'within' link to rubydoc and line 494 'page.html' link to rubydoc.
",glenbray,2013-11-14 21:22:54
1189,2013-11-06 22:09:47,"I know this is silly but oh well :)
",jessicard,2013-11-07 11:21:56
1189,2013-11-07 11:22:04,":) Thanks!
",jnicklas,2013-11-07 11:21:56
1188,2013-11-05 15:39:02,"I'm running capybara with chrome-driver but when the chrome browser fires up to test a javascript scenario it just crash.

unknown error: session deleted because of page crash
from tab crashed
  (Session info: chrome=30.0.1599.101)
  (Driver info: chromedriver=2.4.226086,platform=Mac OS X 10.8.5 x86_64) (Selenium::WebDriver::Error::UnknownError)

Does this looks like an issue on my side?
",lurraca,2013-11-10 12:41:34
1188,2013-11-10 12:41:34,"Hmm, this could be any number of things, but I don't think anyone here is really equipped to help you. Try opening an issue on the Chromedriver or Selenium projects.
",jnicklas,2013-11-10 12:41:34
1187,2013-11-05 07:31:38,"I think that many use cases for usage of `all` are like:

<S_CODE_TOKEN>

In such use cases it's quiet inconvinient that Capybara doesn't check for existence of at least one element with such locator. So if there will be no one such element on the page the bug won't be found.

I can change it to:

<S_CODE_TOKEN>

But I think Capybara should do a better job here.

I propose to:
1. Add Capybara config option config `check_for_all_to_exist` with possible values `true` and `false`
2. Add option `exist` to `all` with possible values `true` and `false`
",abotalov,2014-02-20 07:53:28
1187,2013-11-05 08:11:54,"Very much disagree. The purpose of `all` is to find all elements, nothing more, nothing less. If you want to make sure an element exists, use `find` or an assertion.
",jnicklas,2014-02-20 07:53:28
1187,2014-02-20 07:53:28,"https://github.com/jnicklas/capybara/pull/1232 solves this issue. Closed in favor of it.
",abotalov,2014-02-20 07:53:28
1186,2013-10-31 13:54:55,"Not sure if this is a capybara issue, but I didn't get any response on SO, so posting it here

When I try to submit a form using cucumber tests (click_on submit_button), I get an invalid token error

When I click on button ""Create Account""  
                                               # features/step_definitions/steps.rb:13
      ActionController::InvalidAuthenticityToken (ActionController::InvalidAuthenticityToken)
      ./features/step_definitions/steps.rb:15:in `/^I click on button ""(.*?)""$/'
      features/service_provider_account_setup.feature:92:in`When I click on button ""Create Account""'

Any idea what is going on?
",maheshguruswamy,2013-11-10 12:44:27
1186,2013-10-31 16:46:13,"This is an error in your app. If you're submitting a form it needs to
include a special token to protect against CSRF attacks. Read the Rails
security guide for more details.

/Jonas

On Thu, Oct 31, 2013 at 2:54 PM, Mahesh Guruswamy
notifications@github.comwrote:

> Not sure if this is a capybara issue, but I didn't get any response on SO,
> so posting it here
> 
> When I try to submit a form using cucumber tests (click_on submit_button),
> I get an invalid token error
> 
> When I click on button ""Create Account""
> 
> # features/step_definitions/steps.rb:13
> 
> ActionController::InvalidAuthenticityToken
> (ActionController::InvalidAuthenticityToken)
> ./features/step_definitions/steps.rb:15:in /^I click on button ""(.*?)""$/'
> features/service_provider_account_setup.feature:92:inWhen I click on
> button ""Create Account""'
> 
> Any idea what is going on?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1186
> .
",jnicklas,2013-11-10 12:44:27
1186,2013-10-31 17:02:50,"@jnicklas , the same form works when I submit it through the browser. When I do a puts page.body in the step that is failing, I do see the csrf meta tag in the page body. It looks like this in the HTML

meta content=""YgH87uIz/13tjJ9VgxvpM0uQx6lwYWULWGVzlho7oF8="" name=""csrf-token"" 
",maheshguruswamy,2013-11-10 12:44:27
1186,2013-10-31 19:43:55,"Not sure if it matters, but I am using nested models and ajax posts.
",maheshguruswamy,2013-11-10 12:44:27
1186,2013-11-10 12:44:27,"There is nothing reproducible here, so I'm closing this issue. If you need more help, please consult the mailing list or StackOverflow.
",jnicklas,2013-11-10 12:44:27
1185,2013-10-30 21:58:38,"Attempt to fix #1179 
`normalize_whitespace` inside `text_found?` is removed is it seems to be already normalized in `all_text` and `visible_text`.
",abotalov,2014-02-16 17:53:12
1185,2013-10-31 07:48:58,"This whole solution is very stateful in a really bad way, imo. Don't like this at all.
",jnicklas,2014-02-16 17:53:12
1185,2013-10-31 08:06:40,"How do you propose to fix this issue?
",abotalov,2014-02-16 17:53:12
1185,2013-10-31 16:54:50,"I don't know how to write not stateful solution here.

I though about adding `TextFinder` class and moving `has_text?`, `has_no_text?`, `text_found?` to it.

But `TextFinder` would need access to `synchronize` method. Could we add `synchronize` to `NODE_METHODS`?
",abotalov,2014-02-16 17:53:12
1185,2014-02-16 17:53:27,"Closed in favor of #1246 
",abotalov,2014-02-16 17:53:12
1184,2013-10-30 15:32:29,"I think it can be just removed as it's said in section about :match
",abotalov,2013-10-30 21:46:57
1184,2013-10-30 21:47:34,"Agreed. Since we now raise an error when the match is ambiguous by default, the note is no longer necessary.
",jnicklas,2013-10-30 21:46:57
1183,2013-10-29 20:44:17,,abotalov,2013-10-30 21:49:13
1183,2013-10-30 21:49:21,"Thanks!
",jnicklas,2013-10-30 21:49:13
1182,2013-10-29 09:04:51,,nashby,2013-10-29 14:15:42
1182,2013-10-29 14:15:46,"Thanks!
",jnicklas,2013-10-29 14:15:42
1181,2013-10-26 23:37:00,"Inspired from this issue: https://github.com/jnicklas/capybara/issues/1178

This is my first PR to an open source project, so please correct me if I didn't follow some protocol, I'd like to contribute more in the future.

I decided to throw a warning instead of throwing an error (As the issue requested) for backwards compatibility

I did not create any new tests, but modified the 2 tests I could find that cared about read only fields. 
",comjf,2014-04-07 20:27:11
1181,2013-10-28 21:58:45,"Thanks for contributing, and welcome ;)

I'm not sure if I like using a warning like this. At least the warning could be more descriptive.

I'd actually forgotten that we'd written tests codifying the behaviour of ignoring writes to readonly elements. Semver then tells us we shouldn't raise an exception.

I'm torn on this one. @twalpole, what do you think?
",jnicklas,2014-04-07 20:27:11
1181,2013-10-28 22:25:11,"Thanks! I can obviously change the warning to be whatever message you guys like, I just wanted to get start contributing to see if I could do it.

Is there a priority list or something for my to look into doing next?
",comjf,2014-04-07 20:27:11
1181,2013-10-28 22:53:44,"@comjf not really. Just check around on the issues list if you see anything open that you think you can fix. Thanks for helping out!
",jnicklas,2014-04-07 20:27:11
1181,2013-10-28 22:53:57,"I would lean more towards raising an exception (and bumping the version if we feel necessary) since users obviously can't edit readonly fields and therefore any test that attempts to do so is broken.  This change could be reserved until we have a few other breaking changes that would justify a version bump.  One solution may be to go with a deprecation warning for now and change to raising an exception at the next breaking version.
",twalpole,2014-04-07 20:27:11
1181,2013-11-26 01:14:47,"So what do we do about this? I'm not super enthusiastic about forcing drivers to print a warning to pass the suite, I don't think that's the right call.
",jnicklas,2014-04-07 20:27:11
1181,2013-11-26 18:35:47,"Sorry, I completely forgot about this. I'll go ahead and update to have it raise an exception later this week.

What would you like the exception to be?

Thanks for the reminder.
",comjf,2014-04-07 20:27:11
1181,2013-11-26 18:47:50,"@jnicklas - how about we have the built-in drivers output a deprecation warning for now, but not test for it - and add a test for throwing an exception that is pending until version >= 3.0.0  which would be when semver allows for the change
",twalpole,2014-04-07 20:27:11
1181,2013-11-26 20:50:44,"@twalpole that sounds like an excellent suggestion. :+1: 
",jnicklas,2014-04-07 20:27:11
1181,2014-02-05 19:35:22,"@comjf  Do you plan to work on this? Otherwise I can do it myself.
",abotalov,2014-04-07 20:27:11
1181,2014-04-02 23:30:17,"@comjf / @abotalov  - any progress on this?
",twalpole,2014-04-07 20:27:11
1181,2014-04-03 00:57:31,"@twalpole Please review, I'm rusty and completely forgot about this. I didn't quite understand what you meant by 'have the built-in drivers output a deprecation warning for now', not sure how to do that. So I simply made a new exception and modified tests for it. When 3.0 is ready we can look at this again. 

Perhaps I should close this and make a new PR to a different branch? (I also need to squash my history)
",comjf,2014-04-07 20:27:11
1181,2014-04-03 17:35:13,"@comjf The thought was that instead of raising an exception currently, just do

<S_CODE_TOKEN>

but add a test that checks for an exception being thrown if the version of capybara is >= 3 which will remind us that we need to implement that in the future.  Don't test for the warn though since it's not actually an update to the required API for other drivers
",twalpole,2014-04-07 20:27:11
1181,2014-04-03 17:37:14,"Ah ok, that should be easy enough, sorry that I misunderstood you. I'll close this and reopen a PR with just what you describe, but is there anything else that should be done at the moment?

Thanks,
James Flowers
",comjf,2014-04-07 20:27:11
1181,2014-04-03 20:08:18,"nope -- I think those changes would complete this - thanks
",twalpole,2014-04-07 20:27:11
1180,2013-10-26 22:34:16,"Changes from @wtfiwtz with tests now added
",twalpole,2013-11-10 13:33:03
1180,2013-10-26 22:40:45,"@jnicklas I created tests for this because it makes sense but @wtfiwtz hasnt come back, however I have one question.   @wtfiwtz implemented this in Form#params so the defaulting is only done at submit time, however ""real browsers"" return 'on' as the value of a checkbox/radio without a specified value any time its queried ( ie   field.value returns 'on' ) -- would you rather this be implemented through changes to Simple#value so its more like a real browser, or left as is ???
",twalpole,2013-11-10 13:33:03
1180,2013-10-28 22:00:27,"That does sound better to me. Are there any issues with compatibility to consider here?
",jnicklas,2013-11-10 13:33:03
1180,2013-10-28 22:16:40,"Not that I can think of -- it would only affect racktest and only if people haven't set a value on their checkbox or radio button.  I'll change the implementation and update this PR
",twalpole,2013-11-10 13:33:03
1180,2013-10-28 23:01:04,"@jnicklas  ok, the defaulting now occurs in Capybara::Node::Simple#value, and tests are there for both value and submission
",twalpole,2013-11-10 13:33:03
1180,2013-11-10 13:33:13,"Thanks, awesome work as always!
",jnicklas,2013-11-10 13:33:03
1179,2013-10-25 15:34:01,"Currently when using `have_text` Capybara sends `text` request to browser two times:
First time in `text_found?` method - https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/matchers.rb#L470
Second time in `failure_message_for_should` method - https://github.com/jnicklas/capybara/blob/master/lib/capybara/rspec/matchers.rb#L56

It leads to an issue when text changes between those two requests which can lead to a strange message like:

> expected to find text ""text_to_find"" in ""some_text1 text_to_find some_text2""
",abotalov,2014-07-01 22:46:26
1179,2013-10-28 22:04:21,"Yeah, this is annoying, makes it really hard to debug race-condition style failures. Care to send a PR?
",jnicklas,2014-07-01 22:46:26
1179,2013-11-01 21:12:35,"Note that this issue also be happens for `have_title`
",abotalov,2014-07-01 22:46:26
1179,2014-06-28 19:36:08,"Also ran into this. https://groups.google.com/forum/#!topic/ruby-capybara/x1zLbci32aI
",jamonholmgren,2014-07-01 22:46:26
1178,2013-10-25 09:14:14,"When a textfield has been marked 'readonly' and you call e.g. `fill_in('text_field_id', with: value)`, it fails silently. `Capybara::RackTest::Node#set` simply does not execute the `set`, because of an `unless self[:readonly]`. Please raise an error if this is attempted: it would have saved me quite some time searching for why the `set` didn't work. I'm sure others have been surprised by this as well.
",Confusion,2014-07-01 22:51:22
1178,2013-10-25 11:18:13,"I'm not sure what happens if you try to do this with another driver, mostly with Selenium. The behaviour should be consistent, so we should adapt to what they do. This does make sense to me, so if you can work it up, please provide a pull request!
",jnicklas,2014-07-01 22:51:22
1178,2013-11-26 01:12:18,"Since it seems like we have tested the current behaviour, that means we can't change it without doing a major version bump, which will probably take a while.
",jnicklas,2014-07-01 22:51:22
1178,2014-04-27 05:43:28,"It would be handy to be able to force set the field if needed. We are using datepicker that is 'readonly' so people are forced to pick and not fill it in but in the tests it is handy to just fill it in. I have just updated the version of capybara today and hit the same problem where setting a 'readonly' field gives you no warning.
",ametia,2014-07-01 22:51:22
1178,2014-05-06 17:46:00,"Forcing can be done by using execute_script if needed.  Since capybara aims to replicate user interaction generally it won't be allowing for forcing the setting of values on readonly elements.
",twalpole,2014-07-01 22:51:22
1178,2014-07-01 22:51:20,"Clsing this now since attempting to set a readonly element will issue a warning in master now (2.4 to be released soon), it will raise an error whenever we move to v3
",twalpole,2014-07-01 22:51:22
1178,2016-10-12 12:14:55,"It would be very nice to have the option of ignoring the ""readonly"" property and override this behaviour altogether.

While I understand the rationale behind replicating user interactions it still feels extremely wrong to install, and deal with the complexity (locally and in the CI environment) of a JS driver stack for the sake of hacking an `execute_script` into filling a date picker. (which, by the way, isn't that much closer to replicating actual user behaviour than simply having the ability to force a readonly field).

IMHO the ideal target behaviour is: raise an exception if filling a readonly field by accident, but with the option of bypassing this check, if explicitly requested.

Cheers!
",davout,2014-07-01 22:51:22
1178,2016-10-12 17:08:50,"@davout Since it sounds like you're using the rack_test driver you can just do `element.native['value'] = 'whatever to set'` if you really really want to set a readonly element.  The bigger question is why you would want to be setting a readonly element since a user couldn't, and even if you were using a JS capable driver you should be setting it the same way a user would rather than using execute_script
",twalpole,2014-07-01 22:51:22
1177,2013-10-24 22:40:27,"In a freshly generated Rails 3.2.14 app, using Capybara 2.1.0 and RSpec 2.14.6, the ""visit"" method is not found inside an integration spec.

<S_CODE_TOKEN>

For detailed reproduction instructions, do Michael Hartl's tutorial, Rails 3.2, chapter 3 --  http://ruby.railstutorial.org/chapters/static-pages?version=3.2 -- but don't fix the capybara version number in the Gemfile.

Workaround: in spec_helper.rb, inside the RSpec::configure block, add 

   `include Capybara::DSL`

I'm reporting this to Capybara since this works with Capybara 1.1.2 and the same version of RSpec, but I haven't looked into the code to see where the fault lies... should I report it to https://github.com/rspec/rspec-rails as well?
",alexch,2013-10-24 22:48:25
1177,2013-10-24 22:48:25,"From the capybara readme 

If you are using Rails, put your Capybara specs in spec/features.
If you are not using Rails, tag all the example groups in which you want to use Capybara with :type => :feature.
",twalpole,2013-10-24 22:48:25
1177,2013-10-24 23:40:11,"I see. The confusing thing is that Capybara used to work in `request` and `acceptance` integration specs, but now it doesn't (unless you tag it with `type: feature`). I know that RSpec recently added `feature` integration specs, but it's odd that `request` specs stopped working. Is there some technical reason not to use Capybara in request specs, or is it just the principle that request integration specs are somehow different from feature integration specs?
",alexch,2013-10-24 22:48:25
1177,2013-10-24 23:43:56,"Nevermind. I found the theory in http://www.andylindeman.com/2012/11/11/rspec-rails-and-capybara-2.0-what-you-need-to-know.html and http://blog.plataformatec.com.br/2012/06/improving-the-integration-between-capybara-and-rspec/
",alexch,2013-10-24 22:48:25
1177,2013-10-25 07:57:57,"Yeah, it's a bit annoying that we had to break this, but I think it's for the best. You can use Capybara's `feature` instead of `describe` and it'll always do the right thing, that's one way to work around the problem.
",jnicklas,2013-10-24 22:48:25
1176,2013-10-23 02:24:10,"Suggested use of context to group tests
",durrantm,2013-10-23 06:41:15
1176,2013-10-23 06:41:15,"Huge diff for no gain. Reviewing this would take way too much time, sorry.
",jnicklas,2013-10-23 06:41:15
1175,2013-10-18 07:22:51,"Hi

I've set `Capybara.ignore_hidden_elements = true` and Capybara still seems to be finding a form that's hidden.

A div which has a form inside of it has its visibility toggled using a JavaScript on-click event. In the browser, it works as expected. In the spec, I add a `save_and_open_page` before attempting to interact with the form and I can see it on screen (as there are no styles loaded when the page is opened up).

My view looks like this:

<S_CODE_TOKEN>

My interaction spec line looks like:

<S_CODE_TOKEN>

My CSS:

<S_CODE_TOKEN>

The spec has no JavaScript driver which is intended. I expect this element to not have the ability to be interacted with.
",pawel2105,2013-10-18 15:35:11
1175,2013-10-18 07:53:26,"If by ""The spec has no JavaScript driver"" you mean that you're using the racktest driver, it doesn't evaluate css classes, so it doesn't know the div is meant to be invisible.  You can either set the display:none directly on the div or test in a full browser that does load and evaluate all css
",twalpole,2013-10-18 15:35:11
1175,2013-10-18 11:53:30,"How do you mean set the `display:none` directly on the div?
",pawel2105,2013-10-18 15:35:11
1175,2013-10-18 15:35:10,"Using racktest the test for visibility is

native.xpath(""./ancestor-or-self::*[contains(@style, 'display:none') or contains(@style, 'display: none') or @hidden or name()='script' or name()='head']"").size == 0

Therefore <div style='display:none;'>xyz</div>   would be invisible, but your class of hide-form-div isn't interpreted. For the class to work you need a full browser that loads and interprets the css
",twalpole,2013-10-18 15:35:11
1175,2013-10-18 16:12:33,"@pawel2105 Also you can use a headless selenium - ghostdriver
",abotalov,2013-10-18 15:35:11
1175,2014-06-01 16:55:52,"@twalpole That seems like an important thing to mention in the [""Finding"" part of the README](https://github.com/jnicklas/capybara/blob/master/README.md#finding) no?

For instance a comment like:

<S_CODE_TOKEN>
",olivierlacan,2013-10-18 15:35:11
1175,2014-06-01 17:18:38,"@olivierlacan There are plenty of things that don't work in Racktest besides visibility checking. So it shouldn't go there.
",abotalov,2013-10-18 15:35:11
1174,2013-10-16 05:09:40,"I have the case where I'm on an edit page which looks like `foo/1234345/edit` and the path to that is `edit_foo_path(1234345)`, but `current_path` resolves to `edit_foo_path` which I can't compare to my routes, because I get this error `No route matches {:action=>""edit"", :controller=>""foos""}`

So I'm thinking `current_path` should return `edit_foo_path(1234345)`
",deiga,2013-10-16 05:27:59
1174,2013-10-16 05:12:12,"Of course I'm not sure if this error comes from my test and not `Capybara` :P
This is how I test the path:

<S_CODE_TOKEN>

Where `page_name` would contain `'edit foo'`
",deiga,2013-10-16 05:27:59
1174,2013-10-16 05:18:18,"Hmm, apparently `current_path` is totally fine. My way of testing just isn't working. 

Can anyone help me to be able to test this kind of a path? My problem is that I have the `ID` of `foo` in the session variables and thus cannot get to it from capybara tests.
",deiga,2013-10-16 05:27:59
1174,2013-10-16 05:27:59,"I think this can be closed as I submitted the question to a better forum http://stackoverflow.com/questions/19395853/how-to-get-id-of-object-from-session-in-cucumber-features
",deiga,2013-10-16 05:27:59
1173,2013-10-15 15:05:48,"I'm preparing mime-types 2.0 for release, and it has some breaking API changes (not for most uses, but some esoteric features). The most important API change is that mime-types 2.0 no longer supports Ruby 1.8.

If this matters, the gemspec needs to be changed from `>= 1.16` to `~> 1.16`.
",halostatue,2013-10-28 22:10:40
1173,2013-10-20 18:07:19,"Hey there, tried to run our tests against mime-types v2pre. Got this when I ran `bundle install`:

<S_CODE_TOKEN>

Errr, you might want to fix this ;)
",jnicklas,2013-10-28 22:10:40
1173,2013-10-20 21:29:55,"Sorry—I'm actively working on the branch right now, so sometimes those things get checked in that way. It's cleaned up. I think I'm just down to making sure that my test coverage is good and then making sure that documentation is up to date. I'll probably be releasing this week.
",halostatue,2013-10-28 22:10:40
1173,2013-10-28 22:10:40,"Our test suite passes against 2.0 of mime-types so I think we're all good on this one. Thanks @halostatue for the heads up.
",jnicklas,2013-10-28 22:10:40
1172,2013-10-05 18:26:58,"closes #1170
",nashby,2013-10-28 22:02:04
1172,2013-10-20 16:24:42,"Nice work, the pull request looks good. I'm not sure the API is explicit enough though, consider a spec like this:

<S_CODE_TOKEN>

I think the `back` looks a bit lonely and out of place here ;) This is just a question of naming of course, but maybe we should call it something like `go_back`, `visit_previous`, `click_back_button` or something like that. I don't really think any of those suggestions are perfect, so let me know if you have any ideas :)
",jnicklas,2013-10-28 22:02:04
1172,2013-10-20 17:56:07,"@jnicklas I like `go_back` and `go_forward` names!
",nashby,2013-10-28 22:02:04
1172,2013-10-20 18:18:57,"Okay, let's agree on that then? Care to update the pull request?
",jnicklas,2013-10-28 22:02:04
1172,2013-10-20 21:01:19,"@jnicklas done!
",nashby,2013-10-28 22:02:04
1172,2013-10-27 11:41:44,"@jnicklas please let me know if I should change anything else.
",nashby,2013-10-28 22:02:04
1172,2013-10-28 22:02:01,"This is really nice, thank you! 
",jnicklas,2013-10-28 22:02:04
1171,2013-10-03 01:02:07,"Looks like this: [![Code Climate](https://codeclimate.com/github/jnicklas/capybara.png)](https://codeclimate.com/github/jnicklas/capybara)
",Gaelan,2013-10-20 16:19:57
1171,2013-10-20 16:20:54,"Thanks!
",jnicklas,2013-10-20 16:19:57
1170,2013-10-02 11:52:41,"Hi can we have a method that clicks the browser back button for selenium tests so that we can check pushstate apps work correctly. Thanks
",skyhaikuteam,2013-10-28 22:02:04
1170,2013-10-02 12:33:04,"This sounds like a sensible request, pull requests welcome ;)
",jnicklas,2013-10-28 22:02:04
1169,2013-09-25 13:28:51,"- Description with value
- Casting automatic values passed as object to string
- Added some tests for have_fields selector including a value

As discussed and fixing https://github.com/jnicklas/capybara/issues/1168
",gurix,2013-10-20 16:26:22
1169,2013-10-20 16:26:19,"Nice, thanks!
",jnicklas,2013-10-20 16:26:22
1169,2013-12-27 19:04:34,"This change broke one of my tests.  I was verifying that a text input was empty, and in Capybara 2.1.0 this expectation passed:

<S_CODE_TOKEN>

An empty text input's `#value` is `nil` (in 2.1 and 2.2), so that failing after upgrading to 2.2.0 was unexpected.

<S_CODE_TOKEN>

It's not possible to match against `nil` anymore because `to_s` gets called on what you pass to `with`.
I can easily rewrite my test to:

<S_CODE_TOKEN>

And maybe that test is more descriptive.  But I'm wondering if this code should be changed to _not_ call `#to_s` if the passed-in value is `nil`?  Or maybe when you're comparing textfield values, `nil` and `""""` should be equal?

I'm fine with changing my test, and maybe somebody will stumble upon this if they have the same issue.
",dpetersen,2013-10-20 16:26:22
1169,2014-05-29 18:56:40,"I agree with dpetersen.  This breaks the ability to check text fields for an empty value using has/have_field and "":with => nil"".  

nil != """", so let's not do a to_s on that value.
",mlitnewski,2013-10-20 16:26:22
1169,2014-05-29 19:07:43,"@mlitnewski why should you test of nil? What's the idea behind that? Except you would check whether there is some tag like this `<input name=""foo"">`, but that's does not change the browsers behavior. After submitting it still sends an empty string and not a nil if i remember, as far as I know.
",gurix,2013-10-20 16:26:22
1169,2014-05-29 19:38:59,"It's been a while, but I think my complaint was that you could no longer do this to verify a field was empty:

<S_CODE_TOKEN>

and it worked before this seemingly unrelated patch. This wouldn't work either:

<S_CODE_TOKEN>

Because of the `with` value being converted to `String` and an empty field's value always returning `nil`, you couldn't use this style of expectation to test an empty field anymore. If the value of a field is `nil`, shouldn't an expectation using `with: nil` pass?
",dpetersen,2013-10-20 16:26:22
1169,2014-05-29 21:10:59,"Yes, that is pretty much it.  My example was more like:

page.has_field?(""somefield"", :with => nil).should be_true
Which stopped working when I updated my capybara gems.

Changing it to this:
page.has_field?(""somefield"", :with => '').should be_true
Also did not work.

However - This works:
expect(find_field(""somefield"").text).to be_blank
",mlitnewski,2013-10-20 16:26:22
1169,2014-07-12 20:23:02,"Great, this works. thanks everyone
expect(find_field(""somefield"").text).to be_blank
",lsaffie,2013-10-20 16:26:22
1168,2013-09-25 07:31:08,"I observed an unexpected behaviour using the test

<S_CODE_TOKEN>

that fails. While fiddling around I found out that `predecessor.id` is in fact of type `Moped::BSON::ObjectId`

Explicit casing to string solves the problem

<S_CODE_TOKEN>

what in my point of view is not correct rails behaviour, because within such an input field I can just use a string. 

Therefore I suggest to use `filter(:with) { |node, with| node.value == with.to_s }` in https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb?source=cc#L106 or I am totally wrong?
",gurix,2013-10-20 16:26:23
1168,2013-09-25 10:50:52,"Yes, that sounds right to me, we've done similar things for most other places where we take in objects, casting them to strings internally. Care to work up a pull request? (don't forget the tests ;))
",jnicklas,2013-10-20 16:26:23
1167,2013-09-21 04:34:24,"When using Capybara on a website with frames it becomes hard (if not impossible) to access the title of the page that is rendered in the frame.

page.title for example will not return the page title of the page in the frame but it will return the page title of the parent.
",onknows,2013-10-20 16:40:44
1167,2013-09-21 10:08:13,"Wait, do frames even have titles? Where would you see those?
",jnicklas,2013-10-20 16:40:44
1167,2013-10-20 16:40:43,"I did some searching and came up blank on this. It seems like browsers behave the same way as Capybara, the title always remains the title of the parent frameset, not the child frame, so I'm thinking that Capybara's behaviour is correct in this case. Let me know if you can provide any other information on this. I'm closing this in the meantime.
",jnicklas,2013-10-20 16:40:44
1166,2013-09-20 16:35:22,"Hi Everyone,

I was stuck for many days to find out the an error ""Not Found Element"" while I'm use javascript mode with my example, but When I remove it It can find an element.
Anybody have any idea?

Thanks in advance,
Bunhok.
",cbunhok,2013-10-20 16:41:50
1166,2013-10-20 16:41:50,"Please use the mailing list or StackOverflow for these kinds of questions. You're not going to have much look with a question as generic as this one, you'll need to provide at least your code, the HTML code you used and maybe a stack trace.
",jnicklas,2013-10-20 16:41:50
1165,2013-09-19 21:12:44,"**this is for non javascript tests**

If you run

<S_CODE_TOKEN>

with a headless browser, the underlying html gets read.

However, if you run the same expectation with say :selenium then the CCS styles text gets read, which may have a different case depending on the CCS style.

So, is there are way to have_content be case insensitive?
",thatandyrose,2013-09-19 21:20:48
1165,2013-09-19 21:20:48,"`have_content` actually takes a regexp, so you can use `have_content(/foo/i)`. Please ask questions on the mailing list in the future.
",jnicklas,2013-09-19 21:20:48
1165,2013-09-19 21:21:43,"My bad, thanks @jnicklas 
",thatandyrose,2013-09-19 21:20:48
1165,2015-11-13 02:59:44,"@jnicklas (And anyone else this may concern), this has bitten me too, and although it was pretty easy to find an answer and fix it, it is a bit hacky to use a RegEx, and it means we can't test for the right text neither on CSS or on the code.

I image this kind of inconsistency would be pretty easy to fix, or at least to define a ""standard"" and explain which drivers are the exception (Either Selenium and you test code, and have to be hacky when using headless, or you test the CSS-ed version and Selenium is flagged).

I'm also Ok with suggesting using RegEx from the start and documenting it, or whichever other solution is decided on, I just think we shouldn't let any inconsistencies ""slide"", especially considering pretty much everything is working really smoothly. :D
",frnco,2013-09-19 21:20:48
1165,2015-11-13 03:30:40,"@frnco Which headless driver are you referring to?
",twalpole,2013-09-19 21:20:48
1165,2016-04-20 07:24:37,"I was bitten by that behaviour using capybara-webkit. 

The page in question contains the string ""Thanks"" in an element that is styled using `text-transform: uppercase`. This results in `expect(page).to have_content 'Thanks'` to fail, which is very unexpected and imho a bug.
The same expectation does pass when not using capybara-webkit.

So is this a capybara-webkit issue?
",momolog,2013-09-19 21:20:48
1165,2016-04-20 08:06:20,"@momolog
`text` and similar methods try to return text that is `roughly what a text-only browser would display`.

For example Webdriver specification explicitly says that `text-transform` should be respected. See
https://www.w3.org/TR/webdriver/#getelementtext
",abotalov,2013-09-19 21:20:48
1165,2016-04-20 10:58:53,"@abotalov So `has_content?` is **not** meant to check for content of the page body?
Checking for the raw content therefore should be done via `page.find('body').text`?
",momolog,2013-09-19 21:20:48
1165,2016-04-20 14:04:56,"@momolog This is as designed - Capybara is designed to emulate user behavior and therefore any driver which processes CSS should ""see"" the text as a user sees it. In your case you are applying a text-transform of uppercase so the user would see ""THANKS"".  Why would you not want to test for the text as the user sees it, that's the whole point of feature tests?  If you really need case insensitivity use a regex.  The exception to this is the rack-test driver which doesn't process CSS (or JS, ...) so is really only useful for very simple testing nowadays
",twalpole,2013-09-19 21:20:48
1164,2013-09-18 19:50:07,"I have this select menu

<S_CODE_TOKEN>

with the number in the select's id being randomly generated by nested_form.

I've tried

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

and both seem to find the select box and select the element (give no error).

But when I check for the string to be there...

<S_CODE_TOKEN>

I get

<S_CODE_TOKEN>

Funny enough, `save_and_open_page` shows the 'just hello' option selected...

Is this a bug or am I missing something? Thanks a lot.
",deivid-rodriguez,2013-09-19 21:25:32
1164,2013-09-19 21:25:32,"The options inside select boxes are not counted as content. `has_content?` and it's better named alias `has_text?` only check the text present on the page, similar to calling `textContent` on a DOM element. You can use `has_select? ""foo"", selected: ""bar""` instead.
",jnicklas,2013-09-19 21:25:32
1164,2013-09-19 21:38:25,"Ohh, I see, I was obviously missing somehting... :) I always thought `has_content` would check for every text that is visible on the page...

Thanks a lot and congratulations for your nice gem!
",deivid-rodriguez,2013-09-19 21:25:32
1163,2013-09-16 12:32:26,"I'm using Rails 3.2.14, Capybara 2.1.0, jquery-fileupload-rails 0.4.1.

If I try to write tests around file upload, the file input is not found by capybara. The spec fragment:

<S_CODE_TOKEN>

The rspec result:

<S_CODE_TOKEN>

I.e., the first example runs successfully, but the second not, however the html page contains both (output fragment of print page.html):

<S_CODE_TOKEN>

The input is not hidden, the span is found in the same div. I've tried of course ""#upload_upload"" as selector, the result is the same. In the spec I added the two lines to show() the input later, the result is the same without them.

Any help is appreciated.
",nagyt234,2013-09-16 16:47:34
1163,2013-09-16 15:28:58,"There could be about a million things wrong here which aren't issues in Capybara. Please try boiling this down to a more succinct failing test case, and that'll probably help you find the issue in your app as well ;)
",jnicklas,2013-09-16 16:47:34
1163,2013-09-16 16:32:15,"The default css for the <input typ=""file""...> in jquery fileupload is pasted below.  Assuming you're using the default css, even though you're calling show() on it it still has an opacity 0 and is being translated -300px out of the viewport so it is not visible and will therefore not be found by capybara by default.  You can try passing visible:false to have_selector and see if it finds it then

.fileinput-button input {
  position: absolute;
  top: 0;
  right: 0;
  margin: 0;
  opacity: 0;
  filter: alpha(opacity=0);
  transform: translate(-300px, 0) scale(4);
  font-size: 23px;
  direction: ltr;
  cursor: pointer;
}
",twalpole,2013-09-16 16:47:34
1163,2013-09-16 16:47:34,"Thx @twalpole . Your note solved the problem:

<S_CODE_TOKEN>
",nagyt234,2013-09-16 16:47:34
1162,2013-09-16 11:14:52,"An instance of Result can now call #sample. This is delegated to Array#sample.
This allows a random result to be chosen.
This is useful if we want to check one of the results but with no particular preference as to which result.
",asmega,2013-09-19 21:22:56
1162,2013-09-16 13:03:50,"Not sure why the build failed. It looks like Travis blew up? Is there a way to rerun the build?
",asmega,2013-09-19 21:22:56
1162,2013-09-16 15:34:20,"Seems like the Rubinius build crashed. Yay for testing against weekly builds. I'm re-running the build, but I think everything is fine.

No reason not to delegate `sample`, I guess, though it is a bit of a strange use case ;)
",jnicklas,2013-09-19 21:22:56
1162,2013-09-17 09:55:03,"rather than checking every node for the same thing I'm happy to check a few. especially for higher level tests. I think this is better than just checking the first or the last elements. but yes some may consider that an odd use case
",asmega,2013-09-19 21:22:56
1162,2013-09-19 21:23:10,"Merged. Thanks!
",jnicklas,2013-09-19 21:22:56
1161,2013-09-11 21:38:10,"Setting `server_host` was added by 2dca77060ab33fe35ce3996f9721657a8d604ca3 but it doesn't work properly.
Webrick was still binding host by default it's `0.0.0.0`, `host` in `server.rb` related just to request `Net::HTTP.start`.
So the test I commented doesn't test that Webrick binded proper host, actually I have no clue how to test that... and just commented that one to pay you attention to it.
",route,2013-09-16 15:25:32
1161,2013-09-11 23:03:10,"Hmm, yeah, this is not easy to test, but it seems you're right, the current behaviour is somewhat incorrect.
",jnicklas,2013-09-16 15:25:32
1161,2013-09-16 08:04:55,"Just rebased it and rewrote test, @jnicklas could you review this one? At least it checks that server is available if we bind 0.0.0.0 address.
",route,2013-09-16 15:25:32
1161,2013-09-16 11:19:28,"Done
",route,2013-09-16 15:25:32
1161,2013-09-16 15:25:29,"Nice, thanks :) I agree, the order `port, host` is a bit backwards, but we should keep it this way for compatibility as you said.
",jnicklas,2013-09-16 15:25:32
1160,2013-09-11 10:15:24,"**Motivation:**

While I would be careful with adding many filters to Capybara's selectors, I think this is something that is useful and relatively common. Having this as part of the list of supported link filters in Capybara would also help raising awareness of SEO optimisations of web applications via the use of proper 'rel' attributes.

See the [relevant W3C page](http://dev.w3.org/html5/spec-preview/links.html#link-type-nofollow) to get a better context if necessary.

**Proposed solution:**

Rather than having to rely on an ugly Xpath selector, this pull request adds support to filter links based on 'rel' attributes. This allows us to better describe links for SEO and do things like:

<S_CODE_TOKEN>
",attilagyorffy,2013-10-28 22:11:05
1160,2013-09-11 11:27:06,"Please add some tests ;)
",jnicklas,2013-10-28 22:11:05
1160,2013-09-11 11:54:56,"Maybe I have overlooked at this, was searching for an example that tests the `href` filter but could not find one in the `spec` directory. Thought filters are only tested in general as a unit in which case no specific test for the `rel` filter would be necessary. I'm going to have another look and push some commits.
",attilagyorffy,2013-10-28 22:11:05
1160,2013-09-11 12:12:03,"Tests added. I've also added tests to the `have_link` matcher with given `href` filters that were previously missing.
",attilagyorffy,2013-10-28 22:11:05
1160,2013-09-11 13:14:34,"You were looking in the wrong place. Capybara's layout is a bit confusing, the specs are actually in `lib/capybara/spec` (yes there is a good reason for that). See here: https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/has_link_spec.rb
",jnicklas,2013-10-28 22:11:05
1160,2013-09-11 13:16:03,"The matcher specs you modified are just sanity checks that everything works in RSpec as expected, we don't need to test these options there.
",jnicklas,2013-10-28 22:11:05
1160,2013-10-20 16:29:22,"This pull request, as is, is not in a state to be merged. Please let me know if you're still interested in working on this, otherwise I'll close it down.
",jnicklas,2013-10-28 22:11:05
1160,2013-10-28 22:11:05,"Closing.
",jnicklas,2013-10-28 22:11:05
1159,2013-09-05 04:20:04,"On different browsers,

<S_CODE_TOKEN>

Will submit different values during form submission if no value="""" attribute has been provided. Typically Firefox and Chrome supply the value ""on"" and this pull request makes the behaviour of Rack_Test consistent with those browsers.

http://stackoverflow.com/questions/10832640/input-checkbox-true-or-checked-or-yes
http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#h-17.4

To verify: setting the @javascript tag in cucumber resolved this, because Firefox was then used to render the page. However, I would prefer to run the cucumber test in a headless mode (for performance reasons).

Cheers,

Nigel
",wtfiwtz,2013-10-26 22:45:13
1159,2013-09-05 05:42:58,"In html4 the value attribute was required for checkboxes, but html5 changed that  
- The value IDL attribute is in mode default/on.

So returning 'on' when there is no value attribute is spec compliant.  That being said, there really should be a test before this is merged in
",twalpole,2013-10-26 22:45:13
1159,2013-10-20 16:27:55,"I agree with twalpole, this is a sensible change, but please add tests, otherwise I'll close this.
",jnicklas,2013-10-26 22:45:13
1159,2013-10-26 22:45:13,"I've taken this code and added tests - its now in pr#1180
",twalpole,2013-10-26 22:45:13
1158,2013-09-04 20:07:31,"just a few tweaks that would have saved me some head banging...
",eprothro,2013-10-20 16:29:56
1158,2013-10-20 16:30:06,"Makes sense to me, thanks! Sorry for the delay :)
",jnicklas,2013-10-20 16:29:56
1157,2013-08-31 21:43:18,"I'm actually not sure if this is an issue for Poltergeist, the driver I'm using, or for Capybara. If this is a Poltergeist issue, let me know and I'll bring it up there.

This issue pertains to finding elements that have an `id` attribute that starts with a number. Per [this StackOverflow question](http://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html) ids are supposed to start with a letter. An id that starts with a number is invalid. Capybara handles this inconsistently.

If you do something like:

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

it will return a `Capybara::Poltergeist::InvalidSelector` error.

However, if you use `page.find_by_id`, there is no problem. So, this does not return an error:

<S_CODE_TOKEN>

I'm not sure if this is desired behavior, but it seems like these should behave the same way.
",idiomatik,2013-10-20 16:44:06
1157,2013-08-31 22:24:35,"Actually HTML5 relaxed the requirements on ids a lot -  http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#the-id-attribute  -  so even pure numeric ids are now valid, and real browsers tend to be somewhat lenient with the rules even if the page isn't identified as html5.  
",twalpole,2013-10-20 16:44:06
1157,2013-09-02 17:45:51,"Ahhh, thank you for the information. I guess the issue, as I see it, is that both `find_by_id` and `assert_selector` should work the same way. So, if one returns an error when looking for an element with a numeric id, the other one should do the same. My intuition is that `find_by_id` is just a shortcut for using the same code path that `assert_selector` and `within` use, but I guess they use totally different ways of finding elements. That seems counterintuitive to me.
",idiomatik,2013-10-20 16:44:06
1157,2013-09-02 18:09:24,"find_by_id actually creates an xpath query for the element with the id and uses that to search for the element.  Since pretty much anything can be an id in html5 and its valid to look for an id matching any string you want in xpath, it won't throw any sort of error   (if you choose to search for an invalid id in an html4/xhtml doc so be it).   assert_selector on the other hand passes the given selector through to the ""browser"" as either an xpath query or a css query and natively queries for either the xpath or css.  What that means is the browser may inspect the query and determine it to be invalid.   This only really became an issue in Capybara 2.1 because prior to that all queries were converted to xpath before being sent to the browser.  This had the unfortunate side-effect of not allowing one to use some css selectors such as :enabled, :disabled, :checked, etc even though the browser one was testing with supported them.  Since 2.1 css queries are passed straight through and allow the use of all css features the browser supports.   If poltergeist is throwing that error and your doctype is html5 then its an error in either poltergeist or webkit, or possibly you have the default query type set to xpath instead of css (you can check that by doing  within :css, '#1234' )
.
",twalpole,2013-10-20 16:44:06
1157,2013-10-20 16:44:06,"I agree with @twalpole, closing.
",jnicklas,2013-10-20 16:44:06
1156,2013-08-30 22:02:00,"This pull request makes changes into code added by https://github.com/jnicklas/capybara/pull/1111

Currently additional instances of Query are created unnecessarily in `assert_selector`, `assert_no_selector`, `has_text?`, `has_no_text?`. They are used for the sole purpose of getting `wait`.

I believe it's better to extract method to Helpers than to create additional instances of Query when they are not needed at all (especially in `has_text?` and `has_no_text?`)

Also I removed unneeded print in spec added by #1111
",abotalov,2013-10-20 19:44:41
1156,2013-10-20 17:23:49,"Sorry for the looong delay. I actually prefer the way the code reads now. Are you finding that this is actually impacting memory usage or performance significantly?
",jnicklas,2013-10-20 19:44:41
1156,2013-10-20 19:32:39,"@jnicklas No, I don't experience such issues
",abotalov,2013-10-20 19:44:41
1156,2013-10-20 19:44:41,"I'm closing this in that case, then. Sorry.
",jnicklas,2013-10-20 19:44:41
1155,2013-08-28 13:25:04,"Hi,

I currently face a random fail in a feature spec using Selenium and Capybara.
My latest assumption is that it could be due to angular's directive: they are pieces of javascript generating dom elements.

Sometimes the `find` method raises because the expected dom element coming from the directive is absent (in this case there is no pending ajax request).

Does Capybara wait for an absent dom element if there is no ajax request? 
If no, how could I do that manually?
If yes, the random mystery remains :)

Thanks in advance,

Ben
",apneadiving,2013-10-20 16:43:05
1155,2013-10-20 16:43:05,"Yes, Capybara does wait for any kind of asynchronous process, not just AJAX requests. In fact we do nothing special with AJAX requests at all. If you still have trouble with this, try asking the mailing list or on StackOverflow.
",jnicklas,2013-10-20 16:43:05
1154,2013-08-27 17:22:08,"Looking at the code, it appears that the default synchronize behavior will raise immediately when it hits an ambiguous match. Is this intended behavior? Ideally, I'd like to wait for it be unambiguous just like it would wait if the element didn't yet exist. Happy to try and fix if this is desirable for others and I'm interpreting things correctly. This is relatively deep in a large project, and haven't yet broken out a simple test case.
",jredburn,2013-08-27 22:11:33
1154,2013-08-27 22:11:33,"You know, running the code is better than looking at it ;) I think you're confused by the fact that `Capybara::Ambiguous` is a subclass of `Capybara::ElementNotFound`, and then in synchronize, we check `is_a?(Capybara::ElementNotFound)`, which allows subclasses.
",jnicklas,2013-08-27 22:11:33
1154,2013-08-28 17:41:57,"Thanks for the clarification - I'm seeing an ambiguous match I don't expect but was unable to reduce it down to a simple case so expected it wasn't that easy. Sorry!
",jredburn,2013-08-27 22:11:33
1153,2013-08-25 16:53:29,"Hi I am using capybara to do some dirty work for me: :smirk: :smirk: :smirk:

_Visit home page then sign in._

<S_CODE_TOKEN>

When I run the test, my Firefox fires up, but it did not took advantage of my full laptop width 1280x960, then the navbar collapse to mobile version (Thanks Twitter Bootstrap!). 

![](https://dl.dropboxusercontent.com/u/4708852/bug-report/race-with-capybara.png)

Results in this error:

<S_CODE_TOKEN>

Now I'm in a race condition :checkered_flag: :checkered_flag: :checkered_flag: that I should expand the browser window to full size before Mr Capybara clicks the link... hahahaha!!!!!!!

Any advices? Sorry if this is naive, thanks!
",JuanitoFatas,2013-08-25 17:20:02
1153,2013-08-25 17:20:02,"Please ask questions about how to use capybara in the mailing list mentioned in the readme, this is for bugs.
",twalpole,2013-08-25 17:20:02
1153,2013-08-25 17:22:48,"@twalpole Sorry about the disturbance.
",JuanitoFatas,2013-08-25 17:20:02
1152,2013-08-23 17:34:13,"Hi,

My application has subdomains so I store sessions in cookies with domain set statically in an initializer, it's either `.site.com` or `.site.dev` (I use an alias in `/etc/hosts`). Capybara works great on default settings when using poltergeist, but not with the default rack_test. I've checked page.current_url on rack_test, and it always gives `example.com`. Can this be adjusted so that I can run rack tests that use cookies?
",farnoy,2013-08-26 12:32:29
1152,2013-08-23 17:43:39,"Ok, I've managed to solve it for now, not sure if subdomains will work.

<S_CODE_TOKEN>
",farnoy,2013-08-26 12:32:29
1152,2013-08-26 12:32:29,"Please send questions to the mailing list.
",jnicklas,2013-08-26 12:32:29
1151,2013-08-23 15:01:25,"Hello,

We added functionality for adding an :immediate parameter to a selector assertion. It's especially helpful for negative assertions that we expect to be there right away.

Ian
",ianmcnally,2013-08-26 12:33:43
1151,2013-08-23 16:25:17,"What's wrong with `:wait => 0`?
",jnicklas,2013-08-26 12:33:43
1151,2013-08-26 12:33:43,"Closing this. As is, this pull request is not going to get merged anyway (no tests), and I don't like the idea.
",jnicklas,2013-08-26 12:33:43
1150,2013-08-22 17:28:18,"Hello.
i'm wondering how to use save_and_open_page to show page with css and js if cucumber scenario is failing...
as for now assets are missing on opened page...
",danil-z,2013-08-22 17:43:14
1150,2013-08-22 17:43:14,"Use the mailing list for these kinds of questions please.
",jnicklas,2013-08-22 17:43:14
1149,2013-08-21 20:37:02,"Is this possibly a capybara issue?

http://stackoverflow.com/questions/18030507/how-to-verify-301-status-code-using-capybara-webkit

Capybara-Webkit (and poltergeist) works fine to confirm a status code of 200 or 404, but when I do a redirect (301), I get back a status code of 200.

So this always fails

<S_CODE_TOKEN>

I can verify that the right page is shown with the redirect:

<S_CODE_TOKEN>

Any advice? Skip the check on the 301 status?
",justin808,2013-08-21 21:04:52
1149,2013-08-21 21:04:52,"Capybara is for simulating user experience, since a user never sees a 301 I wouldnt expect to test that with Capybara.   You'll  get more complete answers by positing to the mailing list mentioned in the README, but if you really need to verify a 301 is sent (instead of a 302 or something) rather than just the result of the url changing then you probably just need a standard controller spec and dont involve capybara at all - https://www.relishapp.com/rspec/rspec-rails/docs/controller-specs
",twalpole,2013-08-21 21:04:52
1148,2013-08-20 13:20:35,"I'm currently trying to write a spec to check whether race conditions by user
interaction are prevented. A page should have a buttons that each can only be
clicked once:

<S_CODE_TOKEN>

However Capybara is throwing this at me:

<S_CODE_TOKEN>
",nocksock,2013-08-26 12:35:08
1148,2013-08-26 12:35:08,"Sounds like you are being redirected to a `file` URL which doesn't exist. Probably an error somewhere in your application. If not, check with the capybara-webkit project. This doesn't sound like an error in Capybara to me though. 
",jnicklas,2013-08-26 12:35:08
1148,2013-08-26 12:39:36,"I rewrote the test using the slightly more verbose `Capybara::DSL`: 

<S_CODE_TOKEN>

which works just fine. Nothing in the Application has been changed. So I assume there's something erroneous going on. 
",nocksock,2013-08-26 12:35:08
1148,2013-08-26 12:53:18,"I'm afraid this is all too vague. Please boil this down to something minimal. You can start here: https://gist.github.com/jnicklas/5137053
",jnicklas,2013-08-26 12:35:08
1147,2013-08-20 13:04:58,"The README says

<S_CODE_TOKEN>

But I need something like this in my code:

<S_CODE_TOKEN>
",jarl-dk,2013-08-26 12:38:04
1147,2013-08-26 12:38:23,"Nice catch, thanks!
",jnicklas,2013-08-26 12:38:04
1147,2013-08-26 14:19:54,"Note that for rails 4 your commit is not sufficient...
",jarl-dk,2013-08-26 12:38:04
1147,2013-08-26 14:26:41,"It wasn't really intended to show how to set the user agent, but rather how to set headers in general. Probably should make up something completely different.
",jnicklas,2013-08-26 12:38:04
1146,2013-08-19 21:21:52,"I'm looking for a way to run Capybara Selenium test reliably. Without timeouts. I have a specific request that takes time to complete and this request will fail the test at random.

Is there a way to make Capybara wait longer for completion of the request? I tried Capybara.default_wait_time but this seems to have a different purpose. No matter what value timeouts will occur on the specific request. I set it for example equal to American debt 17000000000000. Doesn't matter, timeout is still there.
",onknows,2013-08-20 06:51:35
1146,2013-08-19 21:39:35,"Just how long are we talking about? You can adjust the timeout via `Capybara.default_wait_time` or by using the `:wait` option on `find`, `click_link`, etc... I'm not aware of any other timeout mechanism aside from this.
",jnicklas,2013-08-20 06:51:35
1146,2013-08-19 21:46:39,"It doesn't take that long for the timeout to occur. Don't know exactly. Strange thing is that when I run each feature separate, it works. When I run them all together, the timeout occurs, currently each time.

I don't understand why the feature will run alone but not as part of a test that also runs the other features.
",onknows,2013-08-20 06:51:35
1146,2013-08-19 22:00:38,"@ostraaten seems to talk about `Timeout::Error`.
If it's so it's a downstream issue (as you see in stack trace). It may be issue of Selenum or issue of one of Selenium's dependencies. It's not an issue of Capybara.

Usually Timeout::Errors and similar errors happen when you attempt to start multiple Selenium processes in parallel. I read that increasing number of ephemeral ports may help to solve it - https://code.google.com/p/selenium/wiki/ScalingWebDriver#Ephemeral_sockets

I remember I had a lot of those errors when I tried to run my tests in 5 threads. Currently I run them in one thread and don't see timeout errors.
",abotalov,2013-08-20 06:51:35
1146,2013-08-19 22:01:27,"Maybe I should use
    page.driver.browser.manage.timeouts.page_load = 300
Rather than default_wait_time?
",onknows,2013-08-20 06:51:35
1146,2013-08-19 22:02:22,"[Also you may try to use Curb or net-http-persistent as a internal selenium's gem for HTTP](https://code.google.com/p/selenium/wiki/RubyBindings#Using_Curb_or_your_own_HTTP_client) but it didn't help me.
",abotalov,2013-08-20 06:51:35
1146,2013-08-19 22:04:29,"[You may also try to increase internal Selenium's timeout from 60 seconds to some higher value](https://code.google.com/p/selenium/wiki/RubyBindings#Internal_timeouts) but I doubt that it will help as it's unlikely that your page loads so much time
",abotalov,2013-08-20 06:51:35
1146,2013-08-19 22:42:27,"Actually it is the page load that takes long. I have tried many suggestions found on the internet, none of them work. I'm pretty confident that Capybara CANNOT be told to wait long or longer. There is some smartness in there which is perfect for most web applications but unfortunately I have a request that takes long, sometimes minutes - to load. This web app is not perfect and the request should not takes this long but it does. It was designed to take long.

Capybara just won't work with web apps that have these types of long running requests because there is just no way to tell it to wait a specific time. I will have to find another tool, capable of handling the exceptions.
",onknows,2013-08-20 06:51:35
1146,2013-08-20 06:27:23,"As I told you it's unlikely to be an issue in Capybara. You should [increase selenium's `client.timeout`](https://code.google.com/p/selenium/wiki/RubyBindings#Internal_timeouts) and `page.driver.browser.manage.timeouts.page_load`
",abotalov,2013-08-20 06:51:35
1146,2013-08-20 06:51:35,"After thinking about it, I think it is easier to change the design of the web application so that this particular request doesn't take this long to complete. It was poorly designed in the first place. 

That will fix it for me I'm sure. But I still feel it is strange that it is not possible to easily influence how long the test should wait for a request to complete. I have tried all above mentioned settings. They don't fix random timeouts.
",onknows,2013-08-20 06:51:35
1145,2013-08-19 19:53:54,"I ran into a problem for hours when I had a test like this:

<S_CODE_TOKEN>
",tomprats,2013-08-19 21:36:47
1145,2013-08-19 21:36:47,"This is not true, `:js => true` will work just fine on an `it` block.
",jnicklas,2013-08-19 21:36:47
1145,2013-08-19 21:39:28,"Could this depend on the js driver?  I'm using poltergeist and it definitely makes a difference for my tests
",tomprats,2013-08-19 21:36:47
1145,2013-08-19 23:49:18,"No, not really. This uses RSpec's metadata feature, which can be used both with `it` and `describe` blocks. https://www.relishapp.com/rspec/rspec-core/v/2-14/docs/metadata/user-defined-metadata

Try it again, you're most likely doing something strange.
",jnicklas,2013-08-19 21:36:47
1144,2013-08-19 17:36:06,"When trying to call save_and_open_page (in a cucumber hook, in case that matters), my browser tries to open the (invalid) URL ""http://capybara-whatever.html"" instead of a local file relative to the directory i'm running the command from.

Looking at the code of the method, I found the line:
""path = File.expand_path(path, Capybara.save_and_open_page_path) if Capybara.save_and_open_page_path""

So I assigned Capybara.save_and_open_page_path to the project's root directory in my env.rb. This worked fine.

However, shouldn't the default behaviour be to open the page in the root directory automatically? After all, that's where it was saved.

Just prepending something like ""./"" to the path might help. When I call Launchy.open(""test.html""), this also fails in the similar way, while Launchy.open(""./test.html"") works (provided that file exists).

Details about my system:

Ruby 2.0.0-p247
Ubuntu 13.04 64-bit
Chrome version 28.0.1500.95
Capybara 2.1.0
Launchy 2.3.0
",Fryie,2013-08-26 12:54:43
1143,2013-08-14 13:03:47,"I'm trying to test a page that shows several records. When i try to check if the page contains each of those records i'm receiving irregular results. Sometimes the test succesfully passes, sometimes it only shows several of the records. When using sleep for about 1s before visiting the page sleep for about 1s

I'm creating the database records using FactoryGirl, but using standard Rails create methods yields the same result.

<S_CODE_TOKEN>

I'm using Rspec, Spork, Capybara and Database Cleaner

my spec_helper.rb

<S_CODE_TOKEN>
",harmdewit,2013-08-15 15:26:04
1143,2013-08-15 15:25:51,":confounded:

I found out that i was showing posts that were created after `Time.now`. Some inconsistency between the time of the test and the Capybara server caused several posts to be loaded but others not. Setting `created_at` to an earlier point in time solved my problem.
",harmdewit,2013-08-15 15:26:04
1142,2013-08-13 19:35:47,"I could not find a test case for this method to update.
",justincampbell,2013-10-20 17:26:11
1142,2013-08-26 12:40:13,"Could you explain why you want this? You know you can call `save_page` to just save the page, right?
",jnicklas,2013-10-20 17:26:11
1142,2013-08-27 14:23:26,"@jnicklas All of the docs I read for saving a page pointed to the `save_and_open_page` method, but it's now painfully obvious that I could just call `save_page` from a step.

Still, I found it jarring that when I first attempted to save and open a page, that missing the Launchy gem prevented it from saving at all.
",justincampbell,2013-10-20 17:26:11
1142,2013-10-20 17:26:09,"Okay, I guess this is a nicer error message, so let's merge this in anyway :)
",jnicklas,2013-10-20 17:26:11
1141,2013-08-10 11:17:51,"Added instructions how to switch driver for single spec, as introduced in the following commit:
https://github.com/jnicklas/capybara/commit/aa46894ce79af589fa5148bba2533e05a7f6e910
",szymon-przybyl,2013-08-26 12:57:22
1141,2013-08-26 12:57:22,"This seems like it's an RSpec tutorial. The README is already super bloated, I'm hesitant to add more unnecessary stuff. Besides, the :driver option is already documented in the README anyway.
",jnicklas,2013-08-26 12:57:22
1140,2013-08-09 01:40:53,"Thank you for merging my previous pull request, here's the same enhancement to `has_checked_field?` and `has_unchecked_field?`! :heart: :heart: :heart: 
",carols10cents,2013-08-26 12:55:28
1140,2013-08-20 19:41:56,"+1 for this feature,

currently we can't test disabled checkboxes using the matchers `have_checked_field` and `have_unchecked_field`, because they don't receive options.
",lucasdavila,2013-08-26 12:55:28
1140,2013-08-26 12:55:42,"Nice work, thank you!
",jnicklas,2013-08-26 12:55:28
1139,2013-08-08 23:37:25,"Hi capybara team! :heart: 

I wanted to assert that there was a disabled button on a page, but I discovered that `has_button?` ignores disabled buttons. Then I found that finders take an option `:disabled`, and that `has_field?` passes options through so that you can do `has_field?(locator, :disabled => true)`. When I tried calling `has_button?(""Button text"", :disabled => true)` though, I got wrong number of arguments since `has_button?` doesn't currently pass an options hash through like `has_field?` does.

This pull request adds that functionality to `has_button?`, `has_no_button?`, and the associated RSpec matchers.

I noticed that `has_checked_field?`, `has_unchecked_field?` and their associated `no` methods are also missing an `options` argument-- I'd be happy to add that enhancement as well, but I wanted to make sure I was on the right track and that this was something you wanted to support before doing that.

Thank you!
",carols10cents,2013-08-09 00:04:28
1139,2013-08-09 00:04:23,"Looks good to me, thanks! I'd definitely appreciate a pull request for the other methods too!
",jnicklas,2013-08-09 00:04:28
1138,2013-08-08 09:33:37,"I am not sure if i grouped this correctly, but my topic-branch would only compare to master and that does not seem appropriate.
The change to the Gemfile was necessary to be able to bundle 2.0_stable, the rest is just a few TestCases to motivate the backport.
",Patru,2013-10-20 18:00:26
1138,2013-08-26 13:01:56,"With these older branches, you need to do `git submodule update --init` after checking out to bundle. I'm okay with backporting these changes, put please separate out the Gemfile stuff. It shouldn't be necessary anyway.
",jnicklas,2013-10-20 18:00:26
1138,2013-10-20 18:00:26,"Closing this since there's been no movement since my last comment.
",jnicklas,2013-10-20 18:00:26
1137,2013-08-07 20:40:11,,twalpole,2013-08-07 20:40:41
1136,2013-08-07 17:32:29,,twalpole,2013-08-26 12:58:52
1136,2013-08-26 12:58:20,"Nice, thanks!
",jnicklas,2013-08-26 12:58:52
1135,2013-08-06 20:02:06,"When converting from Capybara-Webkit to Poltergeist/PhantomJs, many tests broke because PhantomJs is very sensitive to elements being visible. I'm using the Twitter bootstrap dialogs which take a dom element and make it visible. Thus, the dom element exists as far as Capybara-Webkit is concerned, but not as far as PhantomJs is concerned. 

Changing

<S_CODE_TOKEN>

to

<S_CODE_TOKEN>

resolves the issue. However, this is cumbersome. Could we consider a change of adding _visible: true_ as the default for certain drivers? Or is this a bug in that visible: true should always be added? 
",justin808,2013-08-06 20:55:36
1135,2013-08-06 20:55:36,"This issue is fixed by upgrading Capybara and Poltergeist:

<S_CODE_TOKEN>
",justin808,2013-08-06 20:55:36
1135,2013-08-07 09:18:16,"If `Capybara.ignore_hidden_elements = true`, then `visible: true` will be applied by default everywhere.

Capybara 2.1 defaults to `true` though previous versions default to `false`
",abotalov,2013-08-06 20:55:36
1134,2013-08-06 16:16:13,"Is there a way to launch two drivers and let the two drivers talk to each other through capybara?
",yangchenyun,2013-08-26 13:02:37
1134,2013-08-26 13:02:37,"Please ask questions on the mailing list. Short answer: yes, it is possible.
",jnicklas,2013-08-26 13:02:37
1133,2013-08-05 11:30:32,"# Goal

Introducing a framework that relies on evented webservers I need capybara to use thin. 
# Problem

The server works when starting it with `bundle exec thin start -R ./sinatra/config.ru -p $PORT` and the system works as expected, websockets for the win. But when it comes to feature tests capybara with webrick fails (as expected since the rack middleware relies on thin) and using thin makes the test suite hang with the following output:

<S_CODE_TOKEN>

To make sure the server isn't starting too slow here's a capture of the normal startup pahse:

<S_CODE_TOKEN>
# Code

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Would be great if you could assist - this is the only thin between me & the release of the updated version currently (https://github.com/5v3n/ratpack).

Thanks in advance

Sven
",5v3n,2013-08-05 13:51:38
1133,2013-08-05 13:51:38,"Had a little conversation with the creator of the realtime framework I'm using here. Guess it's beyond the scope of capybara to test realtime updates so I'll close this one.
",5v3n,2013-08-05 13:51:38
1133,2015-06-08 11:20:21,"For anyone else with this problem, found a link to the conversation referenced above https://github.com/faye/faye/issues/234
",habitullence,2013-08-05 13:51:38
1132,2013-08-05 09:21:00,"My feature test will randomly hang at requesting external resources. The browser shows it's requesting a external resource, for instance, requesting a Javascript from Google. It just do nothing until reach the time out and throw a net time out exception:

<S_CODE_TOKEN>

I tested with wekit and selenium and both of them have the problem.
I wonder if Capybara has problems with requesting external resource. It may not recognized the event that it has finished a request while it has lots of external resource requests.

I'll appreciate if anyone can help me out.
",ryancheung,2013-08-08 01:43:57
1132,2013-08-07 10:34:20,"Are you sure you're not simply on a bad connection? The driver may indeed block until everything has finished loading, Capybara makes no assertion either way about that.
",jnicklas,2013-08-08 01:43:57
1132,2013-08-08 01:43:52,"@jnicklas Yeah, It's not the Capybara. I debugged with chromedriver and finally found that there's a pending request in the network list, which was intermittently blocked by the China Great Fire Wall. After I set proxy for chromedriver the problem was gone. 
",ryancheung,2013-08-08 01:43:57
1131,2013-08-02 09:49:28,"Maybe a RubyDoc issue:

http://rubydoc.info/github/jnicklas/capybara
http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Node/Element

are returning 200 code empty bytestreams
",barneycarroll,2013-08-26 13:03:54
1131,2013-08-26 13:03:54,"Works fine for me now, probably just a temporary glitch in RubyDoc.
",jnicklas,2013-08-26 13:03:54
1130,2013-07-30 10:57:16,"<S_CODE_TOKEN>

@calculation.id return 456 or other id

That happened after update capybara to 2.1
",panSarin,2013-07-30 15:08:48
1130,2013-07-30 14:49:40,"In 2.1 CSS queries are passed through to the browser (or nokogiri) to be searched for instead of going through a CSS to xpath conversion first.  This means they may get checked for validity as CSS.  Does your document happen to be HTML 4?  If so ids are required to start with a letter and may be the reason for the error.  If not please post the actual source line and stacktrace
",twalpole,2013-07-30 15:08:48
1130,2013-07-30 15:08:48,"that could be the reason that i dont start id with a letter because in other cases that works. Thanks for such a fast reply!
",panSarin,2013-07-30 15:08:48
1129,2013-07-29 18:00:39,"Here's the failing spec:

<S_CODE_TOKEN>

Here's the error (full backtrace here: https://gist.github.com/AzizLight/611c71037a86e2b57a0b):

<S_CODE_TOKEN>

Here's my Capybara configuration:

<S_CODE_TOKEN>

I tried to change the `contacts_path` with any other valid path (even with `'/contacts'`) and I get
the same error. It doesn't make sense to me.

I also tried to use Capybara from the master branch; didn't make a difference.

The only thing that seems to work is if I add `js: true`; but then the example is super slow...
",RobertAudi,2013-07-29 19:39:19
1129,2013-07-29 19:33:37,"Here is what I see when I set `:debug` to `true`:

<S_CODE_TOKEN>
",RobertAudi,2013-07-29 19:39:19
1129,2013-07-29 19:39:19,"The more I look at it, the more I think it's a poltergeist issue. Closing and posting an issue there.
",RobertAudi,2013-07-29 19:39:19
1128,2013-07-27 15:03:48,"When I do cucumber over all my features, after around 4 features, Chrome will failed to load the web page (it would display loading icon and just leave the icon there eternally). If I launch a new tab within that browser, and fill in the same address, I can still see the page being load just fine.

So now I won't be able to cuke any more. I guess it's an incompatibility issue since the features suite had ran just fine before (when my Chrome is still at some earlier version)
",phuongnd08,2013-11-10 13:35:35
1128,2013-07-30 19:22:33,"We have seen this issue too. From our investigation, it looks like chromedriver isn't able to find the tab.
",gerry3,2013-11-10 13:35:35
1128,2013-07-31 16:17:10,"Also, I use Chrome for rspec features (integration) tests as well and do not see this issue. Look like only a combination of Cucumber + Capybara + Chrome yields this issue.
",phuongnd08,2013-11-10 13:35:35
1128,2013-07-31 16:21:33,"Lol, right after this comment, I started observe the issue with RSpec integration tests as well. Very funny.
",phuongnd08,2013-11-10 13:35:35
1128,2013-07-31 16:24:30,"Look like there are too many chromedriver instances in the background. I'm killing all of them and RSpec integration is running well now.
",phuongnd08,2013-11-10 13:35:35
1128,2013-07-31 16:30:41,"@gerry3 Look like quitting all ""zombie"" instances of chromedriver helps with the case of Cucumber too :)
",phuongnd08,2013-11-10 13:35:35
1128,2013-08-06 05:48:38,"Hmm, after a few successful run, it now hangs gain. I already kill zoombie instances of chromedriver but it doesn't help.
",phuongnd08,2013-11-10 13:35:35
1128,2013-08-06 19:10:19,"I never had any zombies and this is still an issue for us.
",gerry3,2013-11-10 13:35:35
1128,2013-08-20 19:25:08,"I'm seeing this behavior too. Chrome version: `28.0.1500.95`.

<S_CODE_TOKEN>
",erran,2013-11-10 13:35:35
1128,2013-08-20 19:55:01,"I just updated chromedriver to 2.2 (from 2.1). I'm still unable to to run my cucumber features. After updating to v2.2, I also need to start `chromedriver` manually on the port (either 9515 or 9516) it lists as unavailable:

<S_CODE_TOKEN>

The failing tests all report timeout errors (`Timeout::Error`) for any tests that run after the initial test (which passes).
",erran,2013-11-10 13:35:35
1128,2013-08-26 13:05:32,"Hmm, this is pretty weird. This sounds more like it'd be related to the selenium-webdriver and/or chromedriver projects, but let's leave this open as a point of reference.
",jnicklas,2013-11-10 13:35:35
1128,2013-11-10 13:35:35,"Closing this, as I don't really think we can do anything about this from within Capybara, please open an issue for chromedriver.
",jnicklas,2013-11-10 13:35:35
1127,2013-07-24 18:57:49,"In #1115, @jnicklas suggested we change Result#inspect, to avoid confusion. This is that.

No new tests. Tests pass.
",srawlins,2013-07-24 20:17:06
1126,2013-07-23 21:25:09,"a couple methods in matchers.rb have a small typo, which propagate up to the auto-generated YARD doc.
",dguzzo,2013-07-23 22:14:04
1125,2013-07-23 00:07:00,"This change addresses issue #1122. This will allow RSpec 3 development to continue working against capybara. This is because `example` will no longer be explicitly available in hooks.
",thomas-holmes,2013-08-08 22:48:07
1125,2013-07-23 02:45:55,"This looks good to me. rspec-rails master is green under it.

For context, we're deprecating and removing `example` in favor of it being yielded to the hook as a block argument. To support both RSpec 2 and 3, though, libraries will need to do something like @thomas-holmes's patch.

Thanks :heart: 
",alindeman,2013-08-08 22:48:07
1125,2013-07-23 11:10:28,"Could you please squash the commits into one?
",jnicklas,2013-08-08 22:48:07
1125,2013-07-23 13:25:15,"There you go.
",thomas-holmes,2013-08-08 22:48:07
1125,2013-07-25 14:43:20,":+1:
",alindeman,2013-08-08 22:48:07
1125,2013-08-08 19:17:08,"I know bumps are typically annoying, but any thoughts on this one? I'd love to switch back to mainline capybara in rspec-rails.
",alindeman,2013-08-08 22:48:07
1125,2013-08-08 22:48:20,"looking good.
",jnicklas,2013-08-08 22:48:07
1125,2013-08-09 20:10:57,"Great! Any idea when the next release of capybara will be? There's no huge hurry, as we're not yet sure when RSpec 3 will be.
",alindeman,2013-08-08 22:48:07
1125,2013-08-09 21:46:47,"We have nothing planned atm, there hasn't really been a lot of activity, lately.
",jnicklas,2013-08-08 22:48:07
1125,2013-08-09 21:59:01,"Cool, maybe just some release before we push an rspec 3.0 RC? I can loop back with you when that time comes.
",alindeman,2013-08-08 22:48:07
1125,2013-11-14 16:35:25,"@jnicklas, RSpec 3.0.0 is near! Any chance we can get a capybara release pushed out with this change?
",alindeman,2013-08-08 22:48:07
1125,2013-11-14 22:18:31,"Just pushed 2.2.0.rc1. Will push final in a week barring complications.
",jnicklas,2013-08-08 22:48:07
1124,2013-07-22 15:14:28,"This feature is far too useful not to be included in the readme - took me a good half hour to find out whether this was possible!
",Malet,2013-08-26 13:06:01
1124,2013-07-23 11:12:23,"This needs to be worded differently. Currently it doesn't really explain at all what this option does, and when it is relevant.
",jnicklas,2013-08-26 13:06:01
1123,2013-07-20 18:19:23,"This pull request isn't ready yet, but is an illustration of the changes that I think need to be made. See #1122.

Change explicit use of `example` variable to using the block value that
is passed in to examples and before/after hooks.
",thomas-holmes,2013-07-21 08:40:07
1123,2013-07-20 19:30:07,"It was not, that was a mistake. Thanks for catching it.
",thomas-holmes,2013-07-21 08:40:07
1123,2013-07-21 04:17:43,"Okay, I corrected that additional error and was able to get all of the tests running with RSpec 3.0.0.pre. One test does fail due to the non-existence of the `mock` method but the rest of the suite passes.

There currently an additional dependency issue with Fuubar.
",thomas-holmes,2013-07-21 08:40:07
1123,2013-07-21 08:40:13,"Nice, thanks!
",jnicklas,2013-07-21 08:40:07
1123,2013-07-21 09:42:49,"Build started failing after merging this
",abotalov,2013-07-21 08:40:07
1123,2013-07-21 14:32:23,"Sorry, I should have been more clear somehow. I wasn't intending for this to be merged in right away.

The changes I was updating Capybara for are in RSpec 3 which is currently in a preview state (as RSpec-3.0.0.pre). I'm not sure how to time/version this as I don't think the change is backwards compatible.
",thomas-holmes,2013-07-21 08:40:07
1123,2013-07-21 21:59:35,"Reverted. My mistake for not reviewing this properly.
",jnicklas,2013-07-21 08:40:07
1122,2013-07-20 18:17:55,"In RSpec 3 the example variable will no longer be defined. It will instead be passed into blocks as an argument. This requires a minor change to Capybara's `RSpec.configure` `before` hooks.

I've made a commit with what I think is the change that needs to happen, I'm not sure what branch it should go against though.

See rspec/rspec-core#666 and rspec/rspec-rails#782
",thomas-holmes,2013-08-26 13:14:41
1122,2013-07-21 22:01:01,"I accidentally merged and then reverted #1123, which unfortunately broke the build. Let's leave this open for now at least until we find a better solution.
",jnicklas,2013-08-26 13:14:41
1122,2013-07-21 23:19:22,"Thanks. I opened this up so we could start trying to get this resolved. Hopefully sometime this week we'll have a more complete PR put together.
",thomas-holmes,2013-08-26 13:14:41
1122,2013-07-23 00:03:29,"I've got a good PR ready now that I'll be submitting shortly. It should allow rspec-rails to use capybara while having no adverse effects to capybara.
",thomas-holmes,2013-08-26 13:14:41
1122,2013-08-26 13:14:41,"This is now merged. Thanks!
",jnicklas,2013-08-26 13:14:41
1121,2013-07-18 01:05:39,"In my Rails app, I use the force_ssl configuration in my environment files, and force_ssl in most of my controllers (in my test environment as well).  Getting this to work with Capybara has been a pain - the server would just time out.

I finally got things working, but it required two things: (1) configuring the Capybara server to use a local SSL certificate that I'd made, and (2)  overriding the `responsive?` method for the server to send HTTPS requests.

Here's the code I ended up using.  I put all of it into my `spec_helper.rb` file just for simplicity.

<S_CODE_TOKEN>

Does this configuration make sense, or did I overlook some better way of achieving the same thing?  And if it makes sense, is there any interest in merging in the ability to specify the `responsive?` function to respond to SSL?
",brycesenz,2013-07-18 15:40:38
1121,2013-07-18 15:40:37,"This isn't really an issue, please post to the mailing list.
",jnicklas,2013-07-18 15:40:38
1121,2013-07-18 15:49:16,"Sorry for being a bit unsure of best practices with this.  What do you mean ""post to the mailing list"" though?  Is there a mailing list for like, feature requests, and if so, what is it?
",brycesenz,2013-07-18 15:40:38
1121,2013-07-18 16:33:23,"There is a mailing list for Capybara, if you look at the second sentence of the README, it says this:

> _Need help?_ Ask on the mailing list (please do not open an issue on GitHub): http://groups.google.com/group/ruby-capybara

If you look at the contribution guide (which is linked from the ""new issue"" page, and from the README) you will find a thorough explanation.
",jnicklas,2013-07-18 15:40:38
1121,2013-07-18 16:35:35,"I'm not sure why you had to jump through so many hoops, but if you post to the mailing list, others might have simpler solutions, so we might find a better way rather than leaving a dead issue lying here which probably won't ever find a satisfying resolution because we don't really know what's even wrong.
",jnicklas,2013-07-18 15:40:38
1121,2013-09-12 01:35:39,"@brycesenz - i'm struggling to get my tests working with ssl as well.  Was able to use your monkey patch but then i still struggled to get selenium (firefox) to automatically accept the self-signed certificate.  Didn't see this conversation continued on the mailing list.  Where did you end up with things?

thx
",kbaum,2013-07-18 15:40:38
1121,2013-09-12 18:52:28,"@kbaum - I looked through the mailing list, but honestly, it looked like I was the only one having SSL problems so I didn't post anything.  If you create a new issue and link it back here though (or some easier alternative), we can try to figure out what's going wrong.
",brycesenz,2013-07-18 15:40:38
1121,2013-09-12 20:46:45,"@brycesenz - I would but it seems that @jnicklas didn't think it was pull request worthy.  I responded to a thread on the mailing list, but so far nobody else has spoken up.  I was able to get things working by following your example and monkey patching the responsive? method.  I also had to ensure that i was using the latest firefox as firefox 17 did not seem to honor the ignore ssl check option.  Overall, i think some more light needs to be shed in this area.  
",kbaum,2013-07-18 15:40:38
1121,2014-09-01 20:41:55,":+1:  This is a huge issue for me. Thanks @kbaum and @brycesenz for the patch.
",volkanunsal,2013-07-18 15:40:38
1121,2015-02-22 22:04:31,"@brycesenz was there ever a less hackful way found to get Capybara to work with SSL? I found [your post](http://cowjumpedoverthecommodore64.blogspot.com/2013/09/if-your-website-runs-under-ssl-than.html) saying there was going to be an update, but couldn't find one.
",bbuchalter,2013-07-18 15:40:38
1121,2015-02-22 22:24:31,"@bbuchalter - I don't know whose blog that is, but it isn't mine.  I'm glad they liked my code though!  I still use the same code as I have on this post; I kind of want to dig back into what exactly is going wrong, but I've been swamped with other projects and standing up a few gems of my own.

Sorry I can't be of more help right now, but for the sake of all of us on this thread, post back if you find a better way!
",brycesenz,2013-07-18 15:40:38
1120,2013-07-16 07:37:27,"As a user i would like to have selection support for dropdowns
",martijnschouwe,2013-07-16 09:50:37
1120,2013-07-16 09:50:37,"It exists - http://rubydoc.info/gems/capybara/Capybara/Node/Actions#select-instance_method
",abotalov,2013-07-16 09:50:37
1119,2013-07-16 07:36:29,"As a user i must be able to select a text in a textfield and get the step matcher accordingly e.g. find_field(""name"").value.should eq value
",martijnschouwe,2013-07-16 09:52:13
1119,2013-07-16 09:52:28,"wrong project. sorry :)
",martijnschouwe,2013-07-16 09:52:13
1118,2013-07-16 05:24:10,"I am trying to to test a remote server and my setup works as long as I do not include parameters in the URL passed to visit. 

Here's my setup, based on this recommendation: How to get Cucumber/Capybara/Mechanize to work against external non-rails site ( http://stackoverflow.com/questions/15665106/how-to-get-cucumber-capybara-mechanize-to-work-against-external-non-rails-site )

It works until I add parameters to the URL. Any advice on addressing this issue?

<S_CODE_TOKEN>

This works fine:

<S_CODE_TOKEN>

end

But this:

<S_CODE_TOKEN>

results in

<S_CODE_TOKEN>
",andreimoment,2013-07-16 21:31:34
1118,2013-07-16 07:01:57,"Capybara.app is meant to be a rack app, I know it _shouldn't_ be invoked in this case, but assigning a String is probably a bad idea anyway.

Please provide a complete stacktrace.
",jnicklas,2013-07-16 21:31:34
1118,2013-07-16 16:50:20,"If I uncomment the 

<S_CODE_TOKEN>

line, I get:

<S_CODE_TOKEN>

despite the 

<S_CODE_TOKEN>

So I added the string per this SO recommendation (See ottobar's answer at  http://stackoverflow.com/questions/15665106/how-to-get-cucumber-capybara-mechanize-to-work-against-external-non-rails-site )    

... What do I need to do in order to get the stacktrace so I can provide it to you?    
",andreimoment,2013-07-16 21:31:34
1118,2013-07-16 21:31:34,"setting 

<S_CODE_TOKEN>

resolved the errors.

I am closing this issue. 
",andreimoment,2013-07-16 21:31:34
1117,2013-07-13 00:20:15,"The documentation states:-

""Execute the given block for a particular scope on the page. Within will find the first element matching the given selector and execute the block scoped to that element:""

However, if the selector returns more than one match, it seems to trigger an error rather than simply use the first matching element. According to the discussion here

https://groups.google.com/forum/#!searchin/ruby-capybara/ambiguous/ruby-capybara/z3Oh2jGR46U/zxZURjA-IjQJ

it looks like the observed behavior is the way it's supposed to work but in that case, I think the documentation is misleading.
",cddr,2013-08-26 13:14:02
1117,2013-07-19 05:19:09,"Agreed, this also led me astray. I just came here to open an issue on this topic myself.
",idiomatik,2013-08-26 13:14:02
1116,2013-07-12 23:10:44,"I got this error when using FF 13.0.1 with selenium-webdriver 2.19.0.
The code is:
require 'rubygems' 
require 'selenium-webdriver' 

driver = Selenium::WebDriver.for :firefox 
driver.get ""http://www.google.com"" 

When I change to selenium-webdriver 2.25.0 the browser did not even open.  What is the solution for this?

Thanks!
",Morning123NC,2013-10-20 18:10:52
1116,2013-08-08 18:44:51,"Sounds like more of a question for the selenium project than capybara
",twalpole,2013-10-20 18:10:52
1116,2013-08-08 19:19:14,"According to the changelog support for FF 13 was added in 2.24.0. Upgrading to the latest version wont't do any harm either.

And yes, it is not related to capybara.
",khustochka,2013-10-20 18:10:52
1115,2013-07-11 14:11:02,"I ran the following code:

<S_CODE_TOKEN>

I'm not able to iterate through the results.  In fact, it is showing me that there is only one results, even though the @elements variable has 3, which is what I expect.  Here is my debugging output:

(rdb:1) labels

<S_CODE_TOKEN>

(rdb:1) labels.size
1
(rdb:1) labels.first.text
""Video URL""
(rdb:1) labels.last.text
""Video URL""
(rdb:1) labels.instance_variable_get(""@elements"")[0].text
""Upload a Photo""
(rdb:1) labels.instance_variable_get(""@elements"")[1].text
""Upload a Photo""
(rdb:1) labels.instance_variable_get(""@elements"")[2].text
""Video URL""

I'm using Capybara version: 2.1.0
",rcarvalho,2013-08-07 10:39:24
1115,2013-07-23 23:50:04,"Capybara::Result does not [forward](https://github.com/jnicklas/capybara/blob/master/lib/capybara/result.rb#L32) `#size`, `#first`, or `#last` to `@elements`, but instead to `@result`, which is equal to `elements.select { |node| query.matches_filters?(node) }`. After looking at [#matches_filters?](https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L38), I'm going to hazard a guess that two of the labels are not visible, and you have `Capybara.ignore_hidden_elements` set?
",srawlins,2013-08-07 10:39:24
1115,2013-07-23 23:53:03,"We should probably override `#inspect` so that this doesn't trip up other people too ;)
",jnicklas,2013-08-07 10:39:24
1115,2013-07-23 23:53:29,"I think @srawlins's analysis is spot on.
",jnicklas,2013-08-07 10:39:24
1115,2013-07-28 08:01:00,"@jnicklas I think this can be closed since #1127 was merged :)
",nashby,2013-08-07 10:39:24
1114,2013-07-10 04:38:16,"Feature specs not being properly ran:

<S_CODE_TOKEN>

Is there any additional setup for the features directory to recognized by RSpec (i,e, spec_helper.rb)?
",conradwt,2013-07-10 04:58:20
1114,2013-07-10 04:58:20,"You'll get better responses by posting in the mailing list mentioned in the readme
",twalpole,2013-07-10 04:58:20
1113,2013-07-09 23:38:19,"In 2.1.0 using nested features such as: 

<S_CODE_TOKEN>

results in a NoMethodError

<S_CODE_TOKEN>

This might not the most common use-case but rspec does permit nested `describe`s so capybara should probably behave similarly.

In the future if `self.feature` becomes more complex it might be better to move it to another module and then extend it instead.
",tgaff,2013-07-10 15:33:40
1113,2013-09-19 00:30:07,"Curious: Any idea on when the next version of capybara might be available ? 
",gaganawhad,2013-07-10 15:33:40
1112,2013-07-08 10:12:41,"Make `within` similar in spelling to `fill_in`, or other way around.
",SergXIIIth,2013-08-07 10:38:33
1112,2013-07-09 07:23:30,"Within is a word in the English language, fillin is not - this change doesn't really make sense to me. 
",twalpole,2013-08-07 10:38:33
1112,2013-07-26 16:04:50,"I agree with @twalpole , this is not a change that should be made - `with_in` doesn't make sense, and neither does `fillin`, so neither proposed change is good.
",EamonNerbonne,2013-08-07 10:38:33
1112,2013-08-07 10:38:52,"Yup.
",jnicklas,2013-08-07 10:38:33
1111,2013-07-03 12:07:23,"closes #1105
",nashby,2013-07-03 12:16:05
1111,2013-07-03 12:16:03,"Very nice work, thank you!
",jnicklas,2013-07-03 12:16:05
1110,2013-07-02 17:59:16,"This pushes a nil scope onto the scopes stack when switching windows and frames, and then interprets that nil as document while current_scope is called.  This has the effect of changing the scope to be the document in the switched to frame or window.  Hopefully this works across multiple drivers, the other option would be to make each drivers within_frame and within_window responsible for updating the scope.
",twalpole,2013-07-02 22:20:46
1110,2013-07-02 22:20:54,"Nice!
",jnicklas,2013-07-02 22:20:46
1109,2013-06-28 10:19:46,"jQuery (in the Chrome console):

![image](https://f.cloud.github.com/assets/1814983/721260/a280b672-dfdb-11e2-8f2c-1f431e772274.png)

Capybara:

<S_CODE_TOKEN>

Is this a known issue? Who's right?

Thanks for explanation.
",jmuheim,2013-08-26 13:15:46
1109,2013-06-28 11:06:46,"As far as I can see, this should work with both RackTest and Selenium. Since Capybara 2.1, CSS selectors are handled entirely by the driver, so this could be different depending on driver and browser. The CSS3 spec is a bit ambiguous about whether it should work with selectors other than elements, but it did appear to work fine at least in Chrome and FF. Can you write a repeatable test case? You can start here: https://gist.github.com/jnicklas/5137053
",jnicklas,2013-08-26 13:15:46
1109,2013-06-28 11:14:24,"I see that I can take some time to do this during weekend. :-)

On Jun 28, 2013, at 1:06 PM, Jonas Nicklas wrote:

> As far as I can see, this should work with both RackTest and Selenium. Since Capybara 2.1, CSS selectors are handled entirely by the driver, so this could be different depending on driver and browser. The CSS3 spec is a bit ambiguous about whether it should work with selectors other than elements, but it did appear to work fine at least in Chrome and FF. Can you write a repeatable test case? You can start here: https://gist.github.com/jnicklas/5137053
> 
> —
> Reply to this email directly or view it on GitHub.
",jmuheim,2013-08-26 13:15:46
1109,2013-08-26 13:15:46,"This has been open for a while, and all my tests show it works as intended. Closing for now, let me know if you can replicate it again.
",jnicklas,2013-08-26 13:15:46
1109,2013-09-04 20:19:44,"@jnicklas I ran into this issue today and wrote an example to reproduce the error. I forked and updated your gist [here](https://gist.github.com/midu/6442311)

the failing test is the [third one](https://gist.github.com/midu/6442311#file-template-rb-L56-L76)

Hope this helps
",midu,2013-08-26 13:15:46
1109,2013-09-04 23:04:16,"The spec on nth-of-type is not clear on how this should work with class selectors, and it appears nokogiri is treating it differently than browsers do.   Nokogiri appears to implement this as find the nth child of the type specified (in this case wildcard) and if it matches the class selector return it, if it doesnt match the class selector return nil.   Browsers implement this as find the the children that match both elment type and class selector and return the nth of it.
",twalpole,2013-08-26 13:15:46
1109,2013-09-04 23:16:43,"FYI - this is a known issue in Nokogiri and is listed as something for the 2.0 roadmap - https://github.com/sparklemotion/nokogiri/issues/394
",twalpole,2013-08-26 13:15:46
1109,2013-11-08 20:59:18,"@midu I submitted a patch to nokogiri https://github.com/sparklemotion/nokogiri/pull/968 that should fix this -- it was merged in a week ago.
",twalpole,2013-08-26 13:15:46
1109,2013-11-08 23:56:09,"That's fantastic @twalpole, thank you very much!
",midu,2013-08-26 13:15:46
1109,2013-12-07 18:43:53,"How can I use the new version of Nokogiri with Capybara? I thought adding `gem 'nokogiri', git: ""https://github.com/sparklemotion/nokogiri.git""` to my Gemfile would make Capybara use the new version, though I'm still getting the error related to this issue. Thanks.
",mattvleming,2013-08-26 13:15:46
1109,2013-12-07 19:21:38,"@mattvleming - I dont think you can actually use nokogiri from the github repository like that - https://github.com/sparklemotion/nokogiri/blob/master/Y_U_NO_GEMSPEC.md   
",twalpole,2013-08-26 13:15:46
1109,2013-12-07 20:18:48,"Wow that's interesting. To summarize for others, basically Nokogiri doesn't have a .gemspec so that means you can't reference to their git repo in a Gemfile, when you might want to if their master branch has fixes merged in but those fixes haven't been released yet. Thanks a lot @twalpole, I found a way to get around the bug I was having–the code is more hideous but it'll have to do. 
",mattvleming,2013-08-26 13:15:46
1108,2013-06-24 13:16:12,"I asked over on SO: http://stackoverflow.com/questions/17170171/capybara-form-with-multiple-true-getting-sent-the-wrong-value

I have a form that uses the multiple: true option to allow me to upload multiple files at a time.  I can upload multiple files just fine, but when I run my tests that do not choose a file to upload, my controller crashes because it tries to find a file named """".

Spec:

<S_CODE_TOKEN>

Form:

<S_CODE_TOKEN>

Error:
  `Paperclip::AdapterRegistry::NoHandlerError: No handler found for """"`    

If I remove the `multiple: true` declaration from the form, the spec passes just fine.

If I recreate the process myself in a browser, the program works just fine.  It's only when running the tests that this field is submitted incorrectly.  It appears that instead of submitting the form with `zone[shapefiles_attributes][][asset]` set to `nil`, it is submitting the form with a value of `""""`.
",workmaster2n,2013-07-02 20:44:16
1108,2013-07-02 15:20:39,"I just added a test case which seems to prove that the form is indeed being submitted with a value of `nil`, and not `""""`, at least given Sinatra's params parser. Could you please re-check and see if this isn't an issue with your application somewhere?
",jnicklas,2013-07-02 20:44:16
1108,2013-07-02 20:44:16,"There is a typo in my form.  It is `mulitpart: true` instead of `multipart: true`.  Thanks for looking into that and adding the test.

Best of luck
",workmaster2n,2013-07-02 20:44:16
1107,2013-06-24 05:06:56,"Hi people!, i'm trying to use capybara but it's hangs when i run Capybara.visit:

My platform: 
Win7-x64
Jruby 1.7.4
selenium-webdriver 2.33
capybara 2.1.0

java version ""1.7.0_21""
Java(TM) SE Runtime Environment (build 1.7.0_21-b11)
Java HotSpot(TM) Client VM (build 23.21-b01, mixed mode, sharing)

The code:

require ""capybara""
require ""capybara/dsl""
Capybara.default_driver = :selenium
Capybara.run_server = false
Capybara.visit ""/""

under jirb the stacktrace when ctrl+c:

irb(main):008:0> Capybara.visit ""/""
^CTerminate batch job (Y/N)? IRB::Abort: abort then interrupt!
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.33.0/lib/selenium/webdriver/common/port_probe
r.rb:35:in `free?'
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.33.0/lib/selenium/webdriver/common/port_probe
r.rb:5:in`above'
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.33.0/lib/selenium/webdriver/firefox/launcher.
rb:49:in `find_free_port'
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.33.0/lib/selenium/webdriver/firefox/launcher.
rb:33:in`launch'
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.33.0/lib/selenium/webdriver/firefox/socket_lo
ck.rb:20:in `locked'
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.33.0/lib/selenium/webdriver/firefox/launcher.
rb:32:in`launch'
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.33.0/lib/selenium/webdriver/firefox/bridge.rb
:24:in `initialize'
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.33.0/lib/selenium/webdriver/common/driver.rb:
31:in`for'
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/selenium-webdriver-2.33.0/lib/selenium/webdriver.rb:67:in `for'
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/capybara-2.1.0/lib/capybara/selenium/driver.rb:11:in`browser'
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/capybara-2.1.0/lib/capybara/selenium/driver.rb:43:in `visit'
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/capybara-2.1.0/lib/capybara/session.rb:193:in`visit'
        from org/jruby/RubyBasicObject.java:1709:in `__send__'
        from org/jruby/RubyKernel.java:2213:in`send'
        from c:/jruby-1.7.4/lib/ruby/gems/shared/gems/capybara-2.1.0/lib/capybara/dsl.rb:51:in `visit'
        from (irb):8:in`evaluate'
        from org/jruby/RubyKernel.java:1093:in `eval'
        from org/jruby/RubyKernel.java:1489:in`loop'
        from org/jruby/RubyKernel.java:1254:in `catch'
        from org/jruby/RubyKernel.java:1254:in`catch'
        from c:\jruby-1.7.4\bin\jirb:13:in `(root)'irb(main):009:0>
",gdelca5,2013-11-15 16:09:25
1107,2013-07-02 15:23:01,"It doesn't really make much sense to disable `run_server`, but not specify a fully qualified URL, this way Capybara doesn't really know where to go. That being said, it probably still shouldn't hang, but looking at the stack trace it looks more like a problem with selenium-webdriver.
",jnicklas,2013-11-15 16:09:25
1107,2013-08-26 13:32:16,"Looking at the stack trace, maybe you are out of ports to run selenium on? I've heard that this can happen.
",jnicklas,2013-11-15 16:09:25
1107,2013-11-10 13:34:21,"Did you ever manage to resolve this? I'm thinking of closing this issue.
",jnicklas,2013-11-15 16:09:25
1107,2013-11-11 14:59:10,"I ran the example again with ruby (rubyInstaller 1.8.7), and it works. 
In the week, i'll try again with jruby and then post the results.
",gdelca5,2013-11-15 16:09:25
1107,2013-11-15 16:09:25,"I try with:

W7-x64
Java 1.7.0_45-b18
jruby 1.7.8
cucumber 1.3.9
capybara 2.1.0
selenium-webdriver 2.37.0

And the code is working.
",gdelca5,2013-11-15 16:09:25
1106,2013-06-23 01:14:23,"Hi people, I use Capybara (with selenium-webrowser) with Rails 3.2.12 and with 4.0.0.rc2  and I have in the test/test_helper.rb but it doesn't work =/

<S_CODE_TOKEN>

But in a few tests when Capybara loggin return to the last page that visit in the last test... so that don't work... (I save sesion[:return_to], but with session.reset! it's supposed to reset all of that....)
",Shelvak,2013-08-26 20:27:17
1106,2013-07-02 15:25:38,"Its behaviour is quite well tested, so I doubt it doesn't work. One quirk with reset! in Selenium is that it only resets cookies under the domain of the current page, so if you stored a cookie on another domain than the one you had when you called reset!, some cookies might not be cleared. I don't know why it's implemented that way, I assume for performance reasons, but I'm not quite sure. Could you check if this is the problem?
",jnicklas,2013-08-26 20:27:17
1106,2013-07-02 16:19:58,"The test doesn't run in different domain, i save the last url in the rails session var, but It should be clean after the reset! method I suppoust... The session var is not a cookie, is a server var...
",Shelvak,2013-08-26 20:27:17
1106,2013-07-02 16:32:39,"@Shelvak If you are using rails default session storage then the session var is actually passed as a cookie back and forth and should be cleared by Capybara.reset!.  If instead you have changed the session store to use the database, memcache, or something else then you'll have to see why those aren't getting cleared out.
",twalpole,2013-08-26 20:27:17
1106,2013-07-03 01:59:27,"No, I use the standard session var in the controllers... But for some strange reason, the reset method sometimes don't reset that...
",Shelvak,2013-08-26 20:27:17
1106,2013-08-26 13:30:49,"I have trouble believing there is a bug like this with `reset!`, please provide a minimal reproduction using the [template](https://gist.github.com/jnicklas/5137053).
",jnicklas,2013-08-26 20:27:17
1106,2013-08-26 17:27:05,"Hey excuse me for the lately answer, I discover the (posibly) problem.... I use rails4, with turbolinks,and Capybara with selenium-webdriver. Sometimes when firefox is changing from one page to other, firefox keep loading and not change..... the current test bang! and the next start with a not clean session...  So perhaps is not capybara, is selenium... or the both...

Fortunately it don't happend any more the last month... so you can close the ticket if you consider ^^

A hug and thanks for the help...
",Shelvak,2013-08-26 20:27:17
1106,2013-08-26 20:27:17,"Okay, I'll close it for now, let me know if you have this problem again.
",jnicklas,2013-08-26 20:27:17
1105,2013-06-21 07:36:31,"Methods `assert_selector` and `assert_no_selector` invoked by most of other matchers don't support `:wait` option since they don't pass it to `synchronize`.

`:wait` option also isn't supported by `has_text?` for the same reason.
",abotalov,2013-07-03 12:16:05
1105,2013-07-02 15:28:00,"Yes, they should definitely support it!
",jnicklas,2013-07-03 12:16:05
1104,2013-06-20 20:43:09,"Also I moved related methods to be near each other
",abotalov,2013-07-02 15:28:16
1103,2013-06-18 23:22:55,"I'm writing a spec to confirm signup emails using the `letter_opener_web` gem. The email web interface has a list of all the emails and an iframe where the contents of the selected email is shown. I'm trying to find the right email and then click the confirmation link inside the iframe. However, I can't access any elements inside the iframe.

This is what the parent page looks like:

<S_CODE_TOKEN>

This is what the iframe contents look like:

<S_CODE_TOKEN>

This is what my spec code looks like:

<S_CODE_TOKEN>

This the error I get:

<S_CODE_TOKEN>

I'm using capybara 2.1.0.
",jgyllen,2013-07-11 23:35:07
1103,2013-06-19 16:12:41,"I'm guessing that the frame has not finished loading the content from the a.click before the within_frame 'mail' is run -  please try sleeping for a couple of seconds after the a.click to confirm
",twalpole,2013-07-11 23:35:07
1103,2013-06-24 18:34:08,"That didn't help.
",jgyllen,2013-07-11 23:35:07
1103,2013-06-24 20:02:55,"Ok -- I can't get this to replicate -- there are no line numbers in your spec code -- which line is 96 ?
",twalpole,2013-07-11 23:35:07
1103,2013-06-24 20:40:18,"<S_CODE_TOKEN>
",jgyllen,2013-07-11 23:35:07
1103,2013-07-02 15:35:23,"I think I see what's going on. You need to move the within_frame block out of the outer within block. Otherwise Capybara will scope all searches inside the within_frame block to whatever the current context node. Conceptually, your code is doing the same as this:

<S_CODE_TOKEN>

Since `table` is not within the `mail` frame, you get the exception. Seems like this is indeed a bug. We should probably clear the context node when we jump into a within_frame or within_window block.
",jnicklas,2013-07-11 23:35:07
1103,2013-07-02 18:03:46,"@jnicklas good catch.  I submitted a PR with tests that would fix this issue, although this does raise the question of whether within_frame should be allowed to work in this case, since the frame being switched to is outside the within 'table.letter-opener' scope
",twalpole,2013-07-11 23:35:07
1103,2013-07-02 22:21:45,"Fixed by #1110! Thanks @twalpole.
",jnicklas,2013-07-11 23:35:07
1103,2013-07-02 23:33:19,"That helped! Thanks guys.
",jgyllen,2013-07-11 23:35:07
1103,2013-07-11 21:34:51,"@jnicklas since #1110 was merged I think it can be closed.
",nashby,2013-07-11 23:35:07
1103,2013-07-11 23:35:26,"Ooops, forgot to click the button ;) Thanks @nashby 
",jnicklas,2013-07-11 23:35:07
1102,2013-06-15 03:02:17,"Capybara's documentation is using RSpec's ""should"" syntax, but their docs have switched to reflect the relatively new ""expect"" syntax, so I edited this README to reflect the change. Thanks!
",aceofbassgreg,2013-06-15 10:35:02
1101,2013-06-14 14:58:34,"Add an official `last` finder, which can be used as such:

<S_CODE_TOKEN>

A bit nicer than `all('.item').last.click`.
",jsteiner,2013-08-26 13:33:56
1101,2013-06-18 07:33:00,"Is this really such a common use case? Maybe it happens all the time, but I've honestly never found myself wanting something like this.
",jnicklas,2013-08-26 13:33:56
1101,2013-06-18 12:21:17,"I think this method may be useful.
",abotalov,2013-08-26 13:33:56
1101,2013-06-18 14:38:42,"For what? Give me use cases, please!
",jnicklas,2013-08-26 13:33:56
1101,2013-06-18 14:49:26,"Example:
It's quiet common to add elements to the bottom of a list (for example comments on Github) so it may be good to be able to select them using `last(locator)` instead of `all(locator).last`

IMO `last` has the same rights to be included into Capybara as `first`
",abotalov,2013-08-26 13:33:56
1101,2013-06-18 15:06:12,"@abotalov this is exactly what I was using it for.
",jsteiner,2013-08-26 13:33:56
1101,2013-08-26 13:33:56,"I'm gonna say no to this one. Just seems unnecesary to me. Sorry.
",jnicklas,2013-08-26 13:33:56
1101,2014-01-14 21:01:11,"We also had a use for this in our app.
",robwierzbowski,2013-08-26 13:33:56
1100,2013-06-13 19:35:06,"Add the `has_meta?` method to allow testing for existence of meta tags:

<S_CODE_TOKEN>
",alfonsocora,2013-10-28 22:12:42
1100,2013-06-13 19:51:28,"I disagree that this is a good idea in the first place, though I'm open about having a discussion about this. That being said, this pull request needs a _lot_ of work before I'd consider merging it, but before we get into that, let's discuss if this is a good idea in the first place.

I don't feel that this really fits with the purpose and feel of Capybara. This is not something a user would know or check, it's rather about the nitty details of HTML, something an HTTP client, like a search engine, might care about. I feel this would fit better in a view/controller/api test, rather than in Capybara.
",jnicklas,2013-10-28 22:12:42
1100,2013-06-13 20:25:31,"You're right. Meta tags are not perceived by users. On the other hand, I extracted this from a helper I've been copying on every project I work. These are very common uses of meta tags:
- Search engines (page description, indexability, keywords)
- Open graph APIs (like Facebook)
- Mobile optimization

Most projects implement one or more of these features, so the meta tag matcher would be a handy helper.
On the other hand, if the aim of capybara is to test user experience, then I agree that this should go somewhere else, although a separate gem seems a bit overkill :) What do you think?
",alfonsocora,2013-10-28 22:12:42
1100,2013-10-28 22:12:42,"If your meta tag logic is sufficiently complicated, you should stick it in a helper and unit test it. I think that's a better practice than testing it using Capybara. I'm closing this down, sorry.
",jnicklas,2013-10-28 22:12:42
1099,2013-06-13 16:33:57,"This little method is only for convenience, but I find myself writing this enough by hand that I thought I would make the proposal.

Behavior basically matches the [Underscore.js pluck method](http://underscorejs.org/#pluck). I'm not sure what other libraries use the term ""pluck,"" but hopefully the meaning is intuitive to others besides myself.

I can add any needed documentation to the PR before it is merged. I just wanted to find out first if this change would have a chance of being accepted. All suggestions welcome.
",jcamenisch,2013-06-13 17:47:08
1099,2013-06-13 17:47:08,"I don't like this for two reasons:
1. We should not add any general purpose Enumerable methods in Capybara, it's the wrong place to put them. There are lots of libraries which extend Enumerable, ActiveSupport being the most popular, but there is no place for randomly adding these in a gem. Not even on a class which does not affect other classes in the system.
2. The use case you are suggesting with this is problematic, because the kind of assertion you are making is inherently prone to race conditions. You should be very careful when using `all` with assertions, always be safe and use `have_*` or `find`, unless you understand the synchronize system very well. I don't like including a method which promotes bad practices.
",jnicklas,2013-06-13 17:47:08
1099,2013-06-13 18:37:23,"OK. Thanks.
",jcamenisch,2013-06-13 17:47:08
1098,2013-06-13 16:30:04,,artfuldodger,2013-06-13 16:32:28
1097,2013-06-11 16:27:45,"A call to `first('foo', visible: true)` should normally return either nil, or the found element.
However due to the way the finders are implemented, grabbing the element and the later visibility check are two distinct actions and the element can change between them resulting in Selenium::WebDriver::Error::StaleElementReferenceError getting raised.

I'd like to tackle this but I'm not currently sure of the best approach to take. I'd love to know if anybody has any thoughts on this.
",alishutc,2013-10-20 17:29:43
1097,2013-06-11 16:57:11,"Moving the creation of the  Capybara::Result inside the synchronize block would probably fix that - but I think writing a reliable test for it would be really tough due to the narrow timings.  
",twalpole,2013-10-20 17:29:43
1097,2013-06-11 22:09:19,"Indeed, that looks like a regression to me. It should definitely be inside the synchronize block.
",jnicklas,2013-10-20 17:29:43
1097,2013-06-12 14:37:18,"Thanks, good to know and that looks like a quick fix. I agree though, it is a tricky behaviour to spec.
",alishutc,2013-10-20 17:29:43
1097,2013-06-12 15:09:42,"I've managed to recreate this reliably in a spec by execing some javascript on the page to modify the element.

I'll try to tidy it up a bit and submit a PR.
",alishutc,2013-10-20 17:29:43
1097,2013-06-12 18:09:09,"Hmm, looking in to this further there are other problems.
The problem I'm having actually involves finding elements by their text, something like `find 'a', text: 'foo'`.
Normally this behaves as expected and the synchronize block catches the error and retries if the element disappears between being found and checking the text.
However if you happen to be inside a block where the default wait time is 0, then you lose this because the synchronize block never retries.
",alishutc,2013-10-20 17:29:43
1097,2013-06-12 18:28:01,"Sorry! keep hitting close by mistake.
It seems like, regardless of the wait time or anything else, elements that have become stale should be filtered out at the point the query result is built. So if you happen to grab something and it disappears before you can check the text/visibility/anything else, the correct response is that the element is not present.
Does that sound sensible?
",alishutc,2013-10-20 17:29:43
1097,2013-06-12 18:56:47,"The problem is that you're invariably going to run into race conditions with this. The only way to filter out an element that is stale is to actually try calling something on it. Explicitly checking is always going to be race-condition prone. Recovering from the exception then is pretty tricky.

If you set the wait_time to 0 then race conditions can and will occur, this is why it is there in the first place.
",jnicklas,2013-10-20 17:29:43
1097,2013-06-14 11:27:11,"I sort of agree, but it also seems like the synchronize block is being used for two separate concerns:
There's the asynchronous behaviour detailed in the README - waiting a certain amount of time for elements to appear. Then there's the secondary thing of retrying on errors.

In some cases I'm not even sure that the retry logic is actually beneficial. As an example, lets say I find an element, that element is subsequently removed for some reason, and then I later call #text on that element.

AFAIK Capybara will catch the stale element error and retry until the wait time expires. But in this case once an element is stale it's never coming back so all we're really doing is delaying the inevitable raise and slowing things down.

Sorry I'm not providing much in terms of a solution here, more outlining the problem as I see it. But I certainly think you could make a case for separating out the error handling from the asynchronous retry logic.
",alishutc,2013-10-20 17:29:43
1097,2013-07-04 06:47:36,"@alishutc we actually handle that case. The synchronize behaviour has gone through a lot of iterations, and I think the current behaviour is quite sophisticated and should cover most cases quite well. Bugs like this aside ;)

`synchronize` actually does nothing when it called inside another `synchronize` block. Since pretty much every call you make into Capybara is wrapped in `synchronize`, this means that sub-operations, such as getting the text of an element, never actually get stuck at waiting for a removed element. Instead the error will bubble, and the whole operation will retry instead.
",jnicklas,2013-10-20 17:29:43
1097,2013-07-04 06:48:51,"And if you're calling #text on the element yourself, you probably _want_ to get an exception if it's no longer there.
",jnicklas,2013-10-20 17:29:43
1096,2013-06-07 17:54:38,"I mentioned this problem in #954, but that issue has been closed for more than 4 months, before ruby 2 / rails 4, so I suspect it might not be related.

I am having an issue with Capybara and Rails 4 RC1 / Ruby 2.0. I have no idea where this is coming from, except from me stepping through the stack. I can see `path` being set, but eventually the app goes into a never ending loop as seen below:

I haven't  solved the issue (yet), but here's more details, maybe this is something anyone recognized?

<S_CODE_TOKEN>

Using `ruby-2.0.0-p195`, `rails-4.0.0.rc1`, `capybara-2.1.0`
",JeanMertz,2013-11-10 13:32:17
1096,2013-06-07 18:05:49,"You'll get more feedback on this if you post on the mailing list http://groups.google.com/group/ruby-capybara
",twalpole,2013-11-10 13:32:17
1096,2013-06-09 10:32:09,"Well, this issue seems to only happen when using `RackTest`. When I use `Selenium` or `Capybara-Webkit`, things work as expected...
",JeanMertz,2013-11-10 13:32:17
1096,2013-07-02 15:37:18,"Could you please provide the full stack trace.
",jnicklas,2013-11-10 13:32:17
1096,2013-11-10 13:32:17,"No stack trace, no way to reproduce, closing.
",jnicklas,2013-11-10 13:32:17
1096,2013-11-16 21:52:14,"@jnicklas sorry, this was one of those ""suddenly it was magically gone"" issues that pop up from time to time.
",JeanMertz,2013-11-10 13:32:17
1095,2013-06-06 03:59:16,"`page.should have_selector(""input[value='Click']:disabled"")`
was pass, but
`page.find_button('Click')[:disabled].should eq 'disabled'`
was 

> Capybara::ElementNotFound: 
> Unable to find button ""Click""

occurred at same page, in Capybara 2.1.0.

Is this expected behavior?
",dot,2013-06-06 05:10:29
1095,2013-06-06 04:59:46,"find_button by default filters out disabled buttons as shown below.  If you want to find a disabled button do  find_button('Click', disabled: true)

from lib/capybara/selector.rb

<S_CODE_TOKEN>
",twalpole,2013-06-06 05:10:29
1095,2013-06-06 05:26:13,"thank you for your answer.
",dot,2013-06-06 05:10:29
1095,2015-06-24 01:36:17,"This worked for me as well. Thank you.
",indiesquidge,2013-06-06 05:10:29
1094,2013-06-05 12:29:18,"Why this line -  https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L122 is needed? It was added in https://github.com/jnicklas/capybara/commit/0062f7f432763388ecc8d26079fb710008b6088e#L1R117?

It confuses users (for example me) as when I visit `""http://www.google.com""` I expect path to be `""""`, not `nil`

Here is a quick example that shows that this line doesn't seem to be needed in context of other changes from this commit:

<S_CODE_TOKEN>
",abotalov,2013-06-05 12:40:43
1094,2013-06-05 12:40:43,"Sorry, Capybara seems to work right:

<S_CODE_TOKEN>

It was my mistake.
",abotalov,2013-06-05 12:40:43
1093,2013-05-29 21:29:44,"I have read http://www.elabs.se/blog/60-introducing-capybara-2-1  and am fiollowing the instructions there. Iam using Capybara 2.1 with Poltergeist 1.3.0

On the page I'm testing, I have 3 links, one has the link text ""Replot"", the other two have the link text ""Replots"".

With Capybara configured like this

Capybara.configure do |config|
        config.match = :smart
    config.exact_options = true
    config.exact = true
    config.ignore_hidden_elements = false
end

When I get to a step the evaluates to  click_link(""Replot"")

I get this exception raised:
Ambiguous match, found 3 elements matching css ""a"" with text ""Replot"" (Capybara::Ambiguous)

So it seems like exact matching doesn't work. Or I don't understand how it should work.

(Not sure which is the right declaration, blog shows ""config.exact_options="" but the capybara source uses ""config.exact_options="" )

If I configure Capybara like this:
Capybara.configure do |config|
    config.match = :smart
    config.exact_options = false
    config.exact = false
    config.ignore_hidden_elements = false
end

I get the same assertion.
",infomongo,2013-06-17 19:25:11
1093,2013-05-29 22:17:13,"That's pretty strange. I'd ask you to double check everything, and if you're sure, create a repeatable test case.
",jnicklas,2013-06-17 19:25:11
1093,2013-06-12 22:15:26,"Absolutely double checked everything. Could you point me at an example of a simple repeatable test case? 

Not sure if this would be pure ruby, or a cucumber & steps, or what.
",infomongo,2013-06-17 19:25:11
1093,2013-06-12 22:16:38,"This is a good starting point: https://gist.github.com/jnicklas/5137053
",jnicklas,2013-06-17 19:25:11
1093,2013-06-12 22:26:13,"Ok. Thanks.
",infomongo,2013-06-17 19:25:11
1093,2013-06-17 19:25:11,"You'll be shocked to learn that I can't create a simple test that duplicates my problem. ( </sarcasm> )

Schoolboy error. 
I had config.ignore_hidden_elements = false as I was migrating from Capybara 1.x and we are using underscore templates. So it was finding stuff inside script tags.

Thanks for the help.
",infomongo,2013-06-17 19:25:11
1093,2013-06-17 19:30:34,"Hehe ;) No worries.
",jnicklas,2013-06-17 19:25:11
1092,2013-05-24 07:31:50,"I have this step definition:

<S_CODE_TOKEN>

This basically verifies that the controller action returns an ""xlsx"" document.
**NOTE:** the action isn't quick, so trying to repro add delay of at least 5 seconds to the controller action in rails.

The problem is that the `page.response_headers[""Content-Type""]` returns `""text/html""` immediately after the click `click_button`.

This seem to be because of the session (`page`) object not actually waiting for the response to be returned and is returning some defaults.

Workaround is to wrap it in custom `wait_until` like so:

<S_CODE_TOKEN>

I was expecting the page object to wait for the response, similarly to how `find` and other methods work.
",dnagir,2015-08-25 21:53:29
1092,2013-11-26 01:15:43,"Just making a note here, that IMO this is a valid feature request, and we should have some kind of matcher for this.
",jnicklas,2015-08-25 21:53:29
1092,2014-04-03 21:52:51,"@jnicklas What sort of matcher were you thinking?  Obviously the issue is that the code doesnt know that click_button is actually going to direct to a new ""page"" so the headers are still for the current page.
",twalpole,2015-08-25 21:53:29
1092,2014-04-03 23:30:25,"> Obviously the issue is that the code doesnt know that click_button is actually going to direct to a new ""page"" so the headers are still for the current page.

Just my $0.02.

In this particular example the `click_button` will `POST` the form dynamically generated by the javascript. So the browser treats it as a normal `POST` request.

Thus the capybara may be able to know that a new request has already started.
",dnagir,2015-08-25 21:53:29
1092,2014-04-04 17:31:49,"@dnagir click_button doesnt wait for the javascript to execute before returning, so its possible the response_headers is being accessed before that POST occurs (in your original code).  I think what @jnicklas was thinking was to have a has_response_headers matcher that would actually wait for the headers to match the passed in values.   
",twalpole,2015-08-25 21:53:29
1092,2014-04-04 17:36:12,"Pretty much, yes. It does seem a little strange to have a matcher like that though.
",jnicklas,2015-08-25 21:53:29
1092,2014-04-04 17:39:55,"@jnicklas Yeah - we don't have matchers for any other non-user visible type things specifically because Capybara is a user interaction testing tool.   Maybe a has_content_type matcher would make more sense, since that is at least something that the user would ""see""
",twalpole,2015-08-25 21:53:29
1092,2014-04-04 18:38:26,"User doesn't see any of the HTTP headers. So I'm OK with providing Racktest-specific `has_response_header?(name, value)` as we already have `response_headers` in Racktest.

But I would prefer to provide easy-to-use waiting-for-some-condition method similar to `wait_until` that Capybara had previously.

Currently user can't wait for the element to have a specific attribute, text field to have a specific value, select field to have a specific option selected.

Capybara provides non-waiting methods to do it but they don't allow to wait for specific value. Thus user should write CSS locators/big XPathes instead of some simple Ruby if he wants to just wait - see e.g. https://github.com/jnicklas/capybara/issues/1265

IMO it would be better to expose something like `wait_until` to deal with all this than adding:
- new `has_response_header?` method
- `:attributes` option to `Query`

But maybe we should add `has_response_header?`, `:attributes` option to `Query`, not sure.
",abotalov,2015-08-25 21:53:29
1092,2014-04-07 20:55:32,"Capybara used to expose a wait_until and it was removed because everyone used it incorrectly.  Adding it back is a move in the wrong direction.  Its easy enough to write ones own version if its really needed as Jonas documented in a blog post a while ago.
",twalpole,2015-08-25 21:53:29
1092,2014-04-07 21:15:36,"For what it's worth, I'm not 100% sure of the removal of `wait_until` anymore. It made sense to me at the time, because I saw so much bad code using `wait_until`, but I dunno, maybe removal was a very drastic step to take.
",jnicklas,2015-08-25 21:53:29
1092,2014-05-11 12:58:30,">  to have a has_response_headers matcher that would actually wait for the headers to match the passed in values.

:+1: We definitely need a way to check the headers of a downloaded file (`Content-Type`, `Content-Disposition`, etc.).

Until then, is there a workaround to wait for the correct headers to be updated?
",benel,2015-08-25 21:53:29
1092,2014-05-11 13:43:39,"What about something like this:

<S_CODE_TOKEN>

Is that a legitimate use of `wait_until`?

P.S. I used `wait_until` definition from the [gist](https://gist.github.com/jnicklas/d8da686061f0a59ffdf7).
",benel,2015-08-25 21:53:29
1092,2014-06-24 18:19:17,"I think it can be closed as response_headers and status_code aren't IMO worth to have an own matcher in Capybara (it's not a widely used enough feature). Instead you should use one of retriable gems (see https://github.com/jnicklas/capybara/issues/1340), https://github.com/abotalov/waiting_rspec_matchers or other similar solution.
",abotalov,2015-08-25 21:53:29
1091,2013-05-24 07:17:46,,dnagir,2013-05-24 07:22:07
1091,2013-05-24 07:22:07,"Short.
",jnicklas,2013-05-24 07:22:07
1091,2013-05-24 07:46:48,"@jnicklas LOL. Sorry for this, I have no idea where it came from, don't even remember starting to type ""Long..."" :(
",dnagir,2013-05-24 07:22:07
1090,2013-05-23 11:07:35,"If driver if not started, and we call the quit method, we got an ugly
# <NoMethodError: undefined method `quit' for nil:NilClass>

.../capybara-2.1.0/lib/capybara/selenium/driver.rb:140:in `quit'

Useful for those like me who use Capybara APIs

Cheers
",randoum,2013-08-26 14:37:51
1090,2013-05-23 14:23:50,"Could you please add tests to this pull request.
",jnicklas,2013-08-26 14:37:51
1090,2013-05-24 00:43:11,"Hi Jonas,

Sure, just give me a week or two, I'm in rush finishing my app for a demo for now.

Cheers
",randoum,2013-08-26 14:37:51
1090,2013-08-26 14:38:23,"Foregoing usual policy and merging this without tests.
",jnicklas,2013-08-26 14:37:51
1090,2013-08-27 02:21:43,"Yes, sorry Jonas but even if I gave it thoughts my schedule really did not allow me to work on it
Thanks for the merge
",randoum,2013-08-26 14:37:51
1089,2013-05-22 20:34:57,"I am having trouble with a scenario where I only do:
- click_link, which will fire an ajax request
- find something
- on a after(:each), I run DatabaseCleaner.clean

The problem is, the ajax request is running at the same moment of the after(:each) block, which causes me to have a nil association in the model code. 

It is the real issue. I think that if I have a spec, it's after hooks should only run after all requests from this test are terminated. In my case I was getting controller and model code running at the same time as my DatabaseCleaner.clean, driving me to random errors when associations were not at the database anymore.

I think it is a way important issue, cause I heard from people problems that fits it.

For example, if I have an js: true spec and inside this spec I interact with the page and some ajax requests are fired, but my spec isn't testing this specific ajax requests, this problem can easily arrive. Say this ajax request is slow and the real spec finished without needing the response from this ajax. The example will pass at the beginning but the ajax will fail the example later because it needs somethings at the database.

Please, if I can help more, get in touch.

I am using capybara + rspec + poltergeist.

PS. I resolved my problem with a better find, which will only be true when the ajax request returns and js renders the stuff. But this 'issue' showed me the above issue.
",rafaels,2013-10-20 18:12:43
1089,2013-05-22 22:21:53,"Try moving DatabaseCleaner to an `around` hook instead. Those are executed after the `after` hook. This way Capybara.reset_sessions! is called before the database is cleaned out, which should hopefully prevent errors like this.
",jnicklas,2013-10-20 18:12:43
1089,2013-05-22 22:22:44,"Essentially, you want to end up with this:

<S_CODE_TOKEN>

Not this:

<S_CODE_TOKEN>
",jnicklas,2013-10-20 18:12:43
1089,2013-05-23 01:39:00,"I tried the around hook with:

<S_CODE_TOKEN>

And something similar in my application code. (pry doesn't help here)
Still getting 'database.cleaner.clean.before' being executed side by side with my application code.

Any thoughts why? Maybe poltergeist reset! is asynchronous or something like that?
",rafaels,2013-10-20 18:12:43
1089,2013-05-23 01:53:19,"Also, with this _around_ approach I am having deadlock problems.

PG::Error: ERROR:  deadlock detected
       DETAIL:  Process 7591 waits for AccessExclusiveLock on relation 148666 of database 148517; blocked by process 7660.
       Process 7660 waits for RowExclusiveLock on relation 148636 of database 148517; blocked by process 7591.
",rafaels,2013-10-20 18:12:43
1089,2013-06-05 21:58:36,"I hit this deadlock issue too, but discovered what was causing it in my situation so I'll explain for the good of all:

<S_CODE_TOKEN>

Here's the ultimate writeup (by Capybara author) to aid understanding: http://www.elabs.se/blog/53-why-wait_until-was-removed-from-capybara
",jopotts,2013-10-20 18:12:43
1089,2013-06-28 18:29:28,"@rafaels could you find the issue?
",filipegiusti,2013-10-20 18:12:43
1089,2013-07-02 15:48:15,"Since `visit` is async in a lot of drivers, this could actually mean that `reset!` is async as well, since it basically does `visit ""about:blank""` for most drivers. Not sure how best to solve this. Waiting for the page to be blank might be slow. We should probably enforce that reset! is sync.
",jnicklas,2013-10-20 18:12:43
1089,2013-07-19 14:28:32,"I believe I'm seeing this same problem, with both capybara-webkit and poltergeist drivers. A set of my specs all pass when run individually, but if I use `:focus` to run 2-3 of them at once, one of them will randomly fail with an error in the server while rendering an Ajax response. Pausing the spec run with a debugger and analyzing the database reveals it to be empty.

In my case, all of the specs that I've seen fail have Capybara assertions that look for something on the page, and therefore should be waiting for the Ajax to complete.
",sjmadsen,2013-10-20 18:12:43
1089,2013-07-20 02:56:31,"@sjmadsen - i am also seeing this problem sporadically.  Seems like i have proper assertions too.  Would it be possible to just kill all database pids before running DatabaseCleaner?  I am using postgres and i tried doing this but it didn't seem to help:

<S_CODE_TOKEN>

Not sure why that didn't help...
",kbaum,2013-10-20 18:12:43
1089,2013-07-22 14:44:32,"I also saw deadlocks when moving `DatabaseCleaner.clean` to an `around` hook. For now I am tolerating the false positive failures and hoping for some traction here.

@kbaum The problem isn't deadlocks for me, but rather DatabaseCleaner getting to run too soon. Even in the case of a deadlock, though, killing the connection is addressing a symptom, not the root cause.
",sjmadsen,2013-10-20 18:12:43
1089,2013-07-25 12:26:53,"@sjmadsen - In one sense, i agree that it is addressing the symptom, but at the point DatabaseCleaner is cleaning the database the tests are over.  I can see an argument that DatabaseCleaner is supposed to clear everything from the database including data and locks.  Why should the developer have to worry about this?  Isn't the point to make testing easier?
",kbaum,2013-10-20 18:12:43
1089,2013-07-25 12:54:15,"@kbaum The original problem in this issue was that the tests are not over, and yet DatabaseCleaner has cleaned out the database. In my case, an Ajax request is still in-flight and the response blows up because an associated record is suddenly gone.

To your larger point, I agree that the programmer should not have to worry about stale locks. If this is a Capybara problem, then only Capybara developers (or someone willing to dig into the code) has to think about it. Everyone else benefits from the fix. In general, papering over a symptom is bad practice. You might fix a deadlock by killing the process, but since the root cause has not been resolved, it will likely cause other failures elsewhere.

I may have time later today to dig into this. I'll send a PR if I come up with anything.
",sjmadsen,2013-10-20 18:12:43
1089,2013-07-25 21:02:33,"Like @rafaels, my issue ultimately ended up being a badly designed finder. This stuff can get tricky with Ajax, so for any future person stumbling across this:

In my case, I have a section of the page that expands and collapses via a link. Inside the expanded section, I have a form that allows the user to add a new record. Upon clicking the submit button, the new record is created and only that part of the page is refreshed. Here's the key part: I don't want the expanded part to stay expanded.

So I wrote two examples: one to test that the new record was properly added, the second that the ""expand"" link didn't appear (it should be ""collapse"").

The issue is that merely testing for the lack of the ""expand"" link wasn't enough. The link isn't there when the Ajax request starts, and so Capybara is happy and continues on. I had to add an extra `expect()` for something that wasn't on the page so that Capybara would properly wait for the Ajax request to complete, _then_ test to ensure the expand link didn't exist. I end up testing that the new record was created twice, although the ""success"" example checks for a couple of other things, too.

Moving DatabaseCleaner to an `around(:each)` hook still causes deadlocks for me, but that is a separate issue from what this started as. If it's a real issue for someone, a new issue should probably be opened.
",sjmadsen,2013-10-20 18:12:43
1089,2013-09-20 21:14:36,"+1, I worked around this by duplicating a `find` call instead of working with an existing instance I previously assigned to a variable.
",mhuggins,2013-10-20 18:12:43
1089,2013-10-08 17:22:44,"For me, checking current_path.should... was enough to ensure that Capybara hung around and waiting for the request to finish before running DatabaseCleaner. Previous code just reloaded some model objects and checked whether they had been updated, but that wasn't enough for Capybara to wait before it ran the cleaner.  Interestingly, adding an ""expect { ... }.to change(...).by(1)"" around the click_on didn't keep it from running the cleaner too early.  I didn't try the around hook, since so many are having trouble with it.   Lesson learned: always check something on the page or the current_path as the last thing in a feature spec.
",kianw,2013-10-20 18:12:43
1089,2013-10-20 18:12:43,"So I added 6b1e42dd3195cc6589fbacbac69a5aca05c0d2e7, which should hopefully make sure that `reset` is always synchronous. This plus ensuring the hooks are called in the right order, should resolve this issue.
",jnicklas,2013-10-20 18:12:43
1089,2013-10-24 00:17:19,"I back-ported this to 2.0.3, and it has resolved the deadlocking problems that have been plaguing our specs.  Any chance that we can get an official 2.0.4 release with this change?  I'll be happy to pull together a pull request, if that would help.
",tmorris-fiksu,2013-10-20 18:12:43
1089,2013-10-24 06:56:33,"Sounds sensible to me :) Are you having trouble upgrading to 2.1? There are some default changes, but largely I don't think we break compatibility anywhere between 2.0 and 2.1.
",jnicklas,2013-10-20 18:12:43
1089,2013-10-25 01:26:35,"I was having the trouble detailed in this thread: https://github.com/thoughtbot/capybara-webkit/issues/510 .  Thanks for encouraging me to take another look at 2.1 - especially with the config work-around that you gave there, I think that upgrading will be a better option.  So, don't count on a pull request from me!  Looking forward to a 2.1.x versioned release with this deadlocking fix in it.
",tmorris-fiksu,2013-10-20 18:12:43
1089,2013-12-09 14:04:13,"I follow what you said and use this in my spec_helper file

<S_CODE_TOKEN>

and the version of capybara is 2.1 and I still get deadlock problem

hope it will be fixed soon
",ghost,2013-10-20 18:12:43
1089,2013-12-09 15:01:56,"Capybara 2.2 includes the commit with the deadlocking fix.  Have you tried 2.2?  I was able to upgrade from 2.1 to 2.2 with no issues.
",tmorris-fiksu,2013-10-20 18:12:43
1089,2013-12-09 15:10:05,"Sad news. Even I upgrade from 2.1 to 2.2 the deadlock bug still show up.

<S_CODE_TOKEN>
",ghost,2013-10-20 18:12:43
1089,2013-12-15 02:18:53,"I get this error as well with the latest versions and parallel rspec

<S_CODE_TOKEN>

I use rspec-retry:
    rspec-retry (0.2.1)

And that prevents the suite from failing.

<S_CODE_TOKEN>
",justin808,2013-10-20 18:12:43
1089,2013-12-24 01:17:56,"Still getting `PG::TRDeadlockDetected` in 2.2.0.

<S_CODE_TOKEN>

I managed to reduce the chances of deadlock by sleeping after every cucumber scenario.  Normally, `cucumber-rails` runs `DatabaseCleaner.clean` automatically, but that can be turned off with `Cucumber::Rails::Database.autorun_database_cleaner = false` and then `.clean` can be called manually in a [cucumber hook](https://github.com/cucumber/cucumber/wiki/Hooks). 
",jaredbeck,2013-10-20 18:12:43
1089,2014-01-02 19:14:24,"I just saw the first spec deadlock error that I've seen in many weeks:  PG::Error: ERROR:  deadlock detected
I just went from v1.0.0 of capybara-webkit to v1.1.0; I browsed the changes in those versions, but nothing jumped out at me as the culprit.
",tmorris-fiksu,2013-10-20 18:12:43
1089,2014-02-15 18:37:57,"For what it's worth, I've also been experiencing deadlocks, so far I can only narrow it down to a combination of `parallel_tests` and `spring`. 
",markburns,2013-10-20 18:12:43
1089,2014-02-26 14:16:57,"I've also been experiencing deadlocks

I use guard and zeus. When I run all specs by just pressing enter i a guard console all is good, but when I save a controller spec (i.e just run one controller spec) I get 

<S_CODE_TOKEN>

It happends in this method

<S_CODE_TOKEN>

And I have this in the spec helper

<S_CODE_TOKEN>
",andreaslyngstad,2013-10-20 18:12:43
1089,2014-03-31 21:43:07,"I was suffering from what I though was the same issue and discovered the following answer on SO I don't know if this helps any, and it helped me.

<S_CODE_TOKEN>

[Capybara with :js => true causes test to fail](http://stackoverflow.com/questions/8178120/capybara-with-js-true-causes-test-to-fail/8698940#8698940)
",webhat,2013-10-20 18:12:43
1089,2014-04-04 21:08:03,"After upgranding from 2.1 to 2.2 and using the around hook the problem is solved for me.
",cerdiogenes,2013-10-20 18:12:43
1089,2014-06-14 17:53:14,"Same issues with DatabaseCleaner running prior to the resolution of an AJAX call, solved with `around` fix and Capybara `2.3`.
",andrewhao,2013-10-20 18:12:43
1089,2014-06-19 14:14:10,"@markburns Did you find any way to solve this problem? I also have this problem, when run parallel_test (specs) and spring is installed.
",Loremaster,2013-10-20 18:12:43
1089,2015-01-28 01:59:09,"The problem arises because Capybara's hook in Rspec is executed before others. In my case it was `DatabaseCleaner`'s after hook and it was truncating the database randomly. BTW, `around` hook not worked for me either. So my solution is very simple - just past capybara's initial stuff into bottom of `spec/spec_helper.rb` file:

<S_CODE_TOKEN>

Hope it helped you either.
",ka8725,2013-10-20 18:12:43
1089,2015-03-27 12:00:08,"Im having the same issue. 
It seems focused around a single example. Im 99% sure the example is fine:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Tried all the methods here. Around hook, moving the include still no luck.

<S_CODE_TOKEN>

Truncate setup looks like:

<S_CODE_TOKEN>

In my debugging I have found that the `/new-thing` visit either happens twice or the `new` action on the controller is being called twice. Logging looks like:

<S_CODE_TOKEN>

I have accidentally stumbled across two solutions but I have no idea how or why either of them work. 

The first one was in the controller action. Where I was getting the no method error on foos.

<S_CODE_TOKEN>

became

<S_CODE_TOKEN>

The bang seemingly makes the spec pass 100% of the time????

The other solution I ~~came up with~~ found was to add `page.save_screenshot('screenshot.png')` after the `expect` line of the spec. I'm not sure how or why I put it there, I just did. I did read somewhere that you should always check for something on the page at the end of a spec like this so that capybara waits and starts the next example correctly. It may have something to do with it.

This might help get to the bottom of the problem or at least help someone.
",richkettle,2013-10-20 18:12:43
1089,2015-09-16 04:14:24,"We are using Capybara 2.2.1 with Poltergeist 1.5.0 and had deadlocks in feature specs. The problem were unfinished Ajax calls at the end of the spec. The database cleaner tried to change stuff that was still in use.

Our current solution was finding all Ajax calls and waiting for them to finish. That's not ideal and I'm thinking of implementing this: http://blog.salsify.com/engineering/tearing-capybara-ajax-tests

Any better ideas?
",mkllnk,2013-10-20 18:12:43
1089,2015-09-16 17:40:23,"We use an especially after hook that hits a simple page that has no Ajax. This causes capybara to wait until Ajax is complete within the actual spec.

On Wed, Sep 16, 2015 at 12:14 AM, Maikel notifications@github.com wrote:

> We are using Capybara 2.2.1 with Poltergeist 1.5.0 and had deadlocks in feature specs. The problem were unfinished Ajax calls at the end of the spec. The database cleaner tried to change stuff that was still in use.
> Our current solution was finding all Ajax calls and waiting for them to finish. That's not ideal and I'm thinking of implementing this: http://blog.salsify.com/engineering/tearing-capybara-ajax-tests
> 
> ## Any better ideas?
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/1089#issuecomment-140621662
",kbaum,2013-10-20 18:12:43
1089,2015-09-16 23:43:50,"Is that the same as this?

<S_CODE_TOKEN>

And isn't there still the case that a request was cancelled but the server is still busy completing the request? We have some computations that take a bit longer...

I'm using a slightly modified version of the [rack request blocker](https://gist.github.com/mkllnk/e3805dd7d566e6b1176c) from [salsify](http://blog.salsify.com/engineering/tearing-capybara-ajax-tests) in spec_helper.rb:

<S_CODE_TOKEN>

It has been working fine, but increased the run time of the test suite by maybe 5%.
",mkllnk,2013-10-20 18:12:43
1089,2015-12-12 00:39:27,"Has anyone ever found an explicit reason for this failing. For our most recent tests, RSpec seems to induce the teardown by DatabaseCleaner before everything has finished, but for the life of me I cannot figure out why
",nambrot,2013-10-20 18:12:43
1089,2015-12-12 02:21:08,"@nambrot  It's generally caused by ajax requests that don't complete before the test finishes -  Capybara does not know about these requests since the app is running separately and therefore doesn't wait for them to finish -  There is no universal solution to this (other than maybe using a proxy to detect requests) - but if you know that all your ajax requests are using a specific library (jQuery, etc) then you can add an after hook to wait for the request count to be 0 before continuing 
",twalpole,2013-10-20 18:12:43
1089,2015-12-14 02:34:15,"@twalpole 

> but if you know that all your ajax requests are using a specific library (jQuery, etc) then you can add an after hook to wait for the request count to be 0 before continuing

I presume you mean to put this in the after hook where I use DatabaseCleaner?

I have a test case such as 
`expect { action }.to change{ ActionMailer::Base.deliveries.count }.by(1)` and even if I have `wait_for_ajax` statements (based on Jquery ajax) which we use widely in our test suite, it doesnt actually wait.
",nambrot,2013-10-20 18:12:43
1089,2015-12-14 02:47:59,"The after hook checking for ajax requests would need to execute before reset_sessions! is called (added in capybara/rspec if youve included that) and also before DatabaseCleaner after hook. The problem is that it's really a hack and has a number of weak points , such as the minute you add a JS library that creates native XHR requests , rather than going through jQuery, it no longer works, and if a request is initiated after you check but before the browser session gets reset it no longer works.  It's much better to wait for a visible on screen change if possible.
",twalpole,2013-10-20 18:12:43
1089,2015-12-14 03:02:56,">  It's much better to wait for a visible on screen change if possible.

Inside the test or before the after hook in a separate after hook? Most of my tests check for screen changes, but the after hook for cleanup will still be called beforehand unfortunately
",nambrot,2013-10-20 18:12:43
1089,2015-12-22 15:57:43,"@jnicklas [says](https://github.com/jnicklas/capybara/issues/1089#issuecomment-26678773):

> So I added 6b1e42d, which should hopefully make sure that reset is always synchronous. This plus ensuring the hooks are called in the right order, should resolve this issue.

It is not clear to me the proper/supported/best-practice way to ""ensure the hooks are called in the right order"" with capybara and database cleaner. 

I _think_ I am running into this problem.  Should DatabaseCleaner and/or Capybara docs be enhanced to explain the necessity of ensuring the hooks are called in the right order, and how to do that? 
",jrochkind,2013-10-20 18:12:43
1089,2015-12-22 17:32:36,"@jorchkind  The order hooks are called in is not a feature of Capybara or DatabaseCleaner, its defined by the test framework you're using - rspec, etc.  As for the proper/supported/best-practice way, that needs to be defined by the programmer with a knowledge of what their app does.  I'm locking this issue now, if you have questions on how to make things work with Capybara please ask them in the mailing list as requested in the README and CONTRIBUTING files.
",twalpole,2013-10-20 18:12:43
1088,2013-05-22 01:53:42,"This makes #value act more like a Ruby attr_accessor.

<S_CODE_TOKEN>

I wasn't sure if tests were necessary for a one-line method aliasing, please let
me know if they are and I'll add some.

Cheers,
Andrew
",stewart,2013-05-22 21:48:50
1088,2013-05-22 06:44:54,"That's kinda neat, I like it. And yes, tests are necessary ;)
",jnicklas,2013-05-22 21:48:50
1088,2013-05-22 16:14:09,"I dont like this, since value= tends to imply you're actually making the value equal to what is passed.  For checkboxes and radios  (at least) that is not the case.  #set indicates a bit of removal from what the value attribute/property actually becomes.
",twalpole,2013-05-22 21:48:50
1088,2013-05-22 16:49:38,"That's a good point, actually.
",jnicklas,2013-05-22 21:48:50
1088,2013-05-22 17:46:16,"If it doesn't seem right, I'll close the PR. I just ran into this when working on some Cucumber features last night and found it odd you couldn't assign value like a standard Ruby instance variable.
",stewart,2013-05-22 21:48:50
1088,2013-05-22 18:00:26,"@stewart The difference is that with a standard Ruby instance variable you are actually assigning the value.  In this case you're inputting data (as a user would) to a form element that may change the value as its entered, may deny the entry, or may be a checkbox/radio etc.   If I had  find('input[type=checkbox]').value = ""abcdefg""  what would you expect it to actually do?  I might think that would change the value attribute of the checkbox, but by aliasing it to set what it actually does is just check the checkbox, no matter what the value attribute of the checkbox is
",twalpole,2013-05-22 21:48:50
1088,2013-05-22 20:07:34,"Here is another example that looks weird to me if this pull request will be merged - https://gist.github.com/abotalov/5630475

<S_CODE_TOKEN>
",abotalov,2013-05-22 21:48:50
1088,2013-05-22 21:48:50,"If it makes the interface potentially more confusing than I say this is a bad idea.
",stewart,2013-05-22 21:48:50
1087,2013-05-18 12:20:33,"I am having some problems to get started with this project. A better documentation would be helpful. Specially documentation with example HTML code and the corresponding capybara code. Many Thanks. 
",reiz,2013-05-18 13:57:52
1087,2013-05-18 13:57:52,"There are _a lot_ of great resources out there for learning Capybara. The README should usually give you a starting point. If it isn't enough there are numerous books and tutorials out there. Just search around for a bit.
",jnicklas,2013-05-18 13:57:52
1087,2013-05-19 13:19:24,"Yes. I found some examples in blogs. 
",reiz,2013-05-18 13:57:52
1086,2013-05-17 16:26:25,"When i run my rspec tests with spork, every time i use capybara's save_and_open_page, spork is loosing the test suite.. or maybe doesnt output anything anymore...

See the log

<S_CODE_TOKEN>

Any suggestions?

There are some other people which have the same problem, see:
https://github.com/sporkrb/spork/issues/226 or 
http://stackoverflow.com/questions/15895522/save-and-open-page-and-spork-spork-is-loosing-test-suite-output
",lichtamberg,2013-05-17 16:42:59
1086,2013-05-17 16:42:55,"If it only happens with Spork, then it isn't an issue with Capybara.
",jnicklas,2013-05-17 16:42:59
1086,2013-05-17 16:55:27,"@lichtamberg   save_and_open_page uses launchy, and if iirc there were conflicts between spork and launchy at one time.  Not sure if those were ever worked out. but those two projects would probably be the best place to start looking
",twalpole,2013-05-17 16:42:59
1086,2013-05-27 20:51:20,"Hmm...

RDX posted following on stackoverflow:

<S_CODE_TOKEN>

What do you think? its not related to capybara?
",lichtamberg,2013-05-17 16:42:59
1085,2013-05-16 13:34:18,"Similar to https://github.com/jnicklas/capybara/issues/620, Chrome (26.0) doesn't trigger a change event on fill_in.
",rweng,2013-11-10 13:11:15
1085,2013-05-18 03:02:29,"Can you provide a test case?
",TimMoore,2013-11-10 13:11:15
1085,2013-05-31 17:45:10,"gnaa, still got it on my plate but didn't get to it yet, sorry :/
",rweng,2013-11-10 13:11:15
1085,2013-11-10 13:11:15,"Closing due to lack of activity.
",jnicklas,2013-11-10 13:11:15
1084,2013-05-15 20:22:09,"As reported on the mailing list - https://groups.google.com/forum/?fromgroups=#!topic/ruby-capybara/TmeFibQbQMQ

This PR includes a test for the issue
",twalpole,2013-11-10 13:15:53
1084,2013-05-15 20:49:17,"@jnicklas The fix I added makes all the tests pass, but I havent fully convinced myself request_path wasn't returning """" instead of ""/"", from the rescue, for some good reason.   Can you think of anything this change would break?
",twalpole,2013-11-10 13:15:53
1084,2013-07-03 12:30:59,"Sorry for the delay in hangling this. I'm really confused as to why this is happening. I'll try and dig into the code a bit. I'm not convinced the return value of request_path is the culprit.
",jnicklas,2013-11-10 13:15:53
1084,2013-11-10 13:15:46,"Never got around to investigating this further. But it seems to me that this is a sensible workaround, which shouldn't have any detrimental side effects, so let's roll with it.
",jnicklas,2013-11-10 13:15:53
1083,2013-05-14 20:28:46,"Hi, 

When I used 

within_frame('content') do
   find(:xpath,""for example anything"").click
end

the method click show me a popup and when the scope goes to outside of the block
an exception is raised and I can't continue

This happened after migration of capybara

I can't understanding what is happening

The exceptions is Modal Dialog Present (Selenium::WebDriver::Error::UnhandledAlertError)
",dinegri,2013-05-14 21:41:51
1083,2013-05-14 21:41:51,"This is a question better asked on the mailing list, since its not a bug in capybara.   In summary you need to handle the popup after it shows since when leaving the within_frame block the driver has to iterate back to the parent frame but selenium doesnt allow for anything but dealing with the popup once one has appeared.
",twalpole,2013-05-14 21:41:51
1083,2013-05-14 23:52:10,"Sorry for ask in wrong place

Thank you for the answer
",dinegri,2013-05-14 21:41:51
1082,2013-05-13 14:45:00,"I just upgraded my rails process to capybara 2.1, and then I get the following weird error in my cucumber scripts:

<S_CODE_TOKEN>

Now, what I am trying to do, is search (and find) an `svg` element, before I was able to do using the following (using css selectors):

<S_CODE_TOKEN>

This now fails. In the update to the new capybara version I can see we now have to include the `selenium-webdriver` explicitly, and I also saw the `xpath` gem was updated. 

I also noticed in the history that the css is now handled differently: it is no longer converted to xpath.

So when I tried writing the same query using xpath (I find css a lot more natural for me :)), it  just works.

So for now:
- using css selectors to retrieve svg elements no longer works
- xpath does still work --but it is harder for me :)

For completeness, I translated the following css selectors:
- `""#matrix_heat_map *[name()='svg']""`
- `""#matrix_heat_map *[name()='svg'] *[name()='g'] *[name()='rect'].cell""`

to the following xpath expressions:
- `"".//*[@id='matrix_heat_map']/*[name()='svg']""`
- `""//*[@id='matrix_heat_map']/*[name()='svg']/*[name()='g']/*[name()='rect'][@class='cell']""`

Not sure if it is intended behaviour that the css selectors no longer work as before, just thought to mention it.
",nathanvda,2013-05-13 16:06:46
1082,2013-05-13 15:02:48,"name()='svg' is not valid CSS, it should just be name='svg'
",twalpole,2013-05-13 16:06:46
1082,2013-05-13 15:04:35,"Owwww trying that out immediately. And it worked before, because the css was translated to xpath. 
",nathanvda,2013-05-13 16:06:46
1082,2013-05-13 15:09:14,"Correct, the previous conversion to xpath actually hid a bit of illegal css. Now the CSS is passed straight to the browsers query so illegal CSS isn't acceptable, but you can now use css3 pseudo selectors like :visited, :checked, :active, etc when using selenium  which aren't available through xpath
",twalpole,2013-05-13 16:06:46
1082,2013-05-13 15:17:40,"Ok, that explains that bit. But the `*[name='svg']` does not work for me. It just does not find anything. The xpath does work. I am pretty sure I observed the same behaviour before, and using the `name()=svg` worked, because of the translation to xpath.

So I am not sure if this is something you should fix: ""when trying to find `svg`, you have use xpath"" seems a good rule to me :smile:
",nathanvda,2013-05-13 16:06:46
1082,2013-05-13 15:21:31,"What does the HTML look like?
",twalpole,2013-05-13 16:06:46
1082,2013-05-13 15:57:43,"After rereading this and looking at your converted xpath - I realized that you are actually using the xpath name function and not trying to match the name attribute in css.  In this case your css should just be

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>

what you have listed as css selectors in the initial question are a half mix between css and xpath and only worked because of the halfway conversion process that used to be done on css, but they are definitely not valid css
",twalpole,2013-05-13 16:06:46
1082,2013-05-13 20:14:32,"Wow. WTF. When I first implemented this, about six months ago the css selectors as you wrote did not work at all. At that time I found some explanation that `svg` was declared in a different namespace, or something similar, which is why it needed to be the `name()='svg'` xpath thing. 

But now I try it in css, and it just works. Awesome. Much cleaner imho than xpath.

[feeling a bit stupid here]

Thanks!!!
",nathanvda,2013-05-13 16:06:46
1082,2013-05-13 20:19:47,"@nathanvda - yeah the behavior six months ago was due to it being converted to xpath, and then issues with namespaces.  That goes away now since the query is passed straight through as css.  XPath of course can be more powerful for certain types of queries, but in this case the css is definitely clearer.
",twalpole,2013-05-13 16:06:46
1081,2013-05-12 13:12:05,"This forces Firefox to emit change events even when it's in the background.

Note that this only changes the setting for Capybara's own tests. It is an
alternative to pull request #1058, which changed the default for the Selenium
driver.
",TimMoore,2013-10-20 17:46:00
1081,2013-09-30 08:41:28,"@jnicklas did you have any particular concerns with this? I can rebase the branch if you're interested in merging it.
",TimMoore,2013-10-20 17:46:00
1081,2013-10-20 17:45:57,"This is no longer necessary, it seems. Looks like focusmanager is now the default in Selenium :)
",jnicklas,2013-10-20 17:46:00
1081,2013-10-21 19:41:10,"Great! Do you know what Selenium version that changed in?
",TimMoore,2013-10-20 17:46:00
1080,2013-05-11 23:11:19,"I have run into a situation where I need to make a request to the running server as part of an integration test, specifically I have a Git hook within the app (think Github-style app) that makes a local request to the Rails app.

Currently, a server doesn't get run due to the `driver.needs_server?` call returning false for the default driver: https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L54 ...is there a way to override this behaviour without monkey patching the `initialize` method. I would guess this is quite a common requirement.
",thelucid,2013-05-11 23:42:51
1080,2013-05-11 23:42:51,"Step 1 - Read the readme
Step 2 - Post question to the mailing list as requested in the readme
",twalpole,2013-05-11 23:42:51
1079,2013-05-10 17:18:58,"This adds double_click and right_click to the Node API with tests and support for Selenium
",twalpole,2013-11-26 01:05:15
1079,2013-05-10 17:21:05,"One question here is whether it should be right_click or context_click  -- Selenium uses context_click, however I went with the everyday use of right_click - easy change if desired (or maybe change the definition to context_click and alias right_click to it?)
",twalpole,2013-11-26 01:05:15
1079,2013-10-07 21:26:56,"Is there a reason this hasn't been merged?
",buob,2013-11-26 01:05:15
1079,2013-11-26 00:02:16,"This would be really useful. I hope it can be included in Capybara 2.3.
",TimMoore,2013-11-26 01:05:15
1079,2013-11-26 01:05:13,"I don't think there's any reason at all this hasn't been merged, except my own inattentiveness. It took two reminders to push me to get to this, as I was reading through the list of issues when preparing 2.2, I somehow though of this as a feature request. Pull request looks good, and I like `right_click` better than `context_click`.
",jnicklas,2013-11-26 01:05:15
1079,2013-11-26 01:22:01,"Thank you! :grinning: 
",TimMoore,2013-11-26 01:05:15
1079,2014-03-26 14:06:11,"Can this be included in a 2.3 release? It's been on `master` for quite a long time.
",aprescott,2013-11-26 01:05:15
1078,2013-05-09 22:59:35,"Capybara 2.1.0 and above has a :focus tag on one of the fill_in_spec tests.  This removes it.
",ryansch,2013-05-10 06:12:35
1078,2013-05-28 18:42:19,"@jnicklas - thanks for the merge. This is effecting dependent gems upgrading to Capy2.1 (eg. jeroenvandijk/capybara-mechanize#51), any chance there's a patch release coming soon?
",phillbaker,2013-05-10 06:12:35
1078,2013-05-28 21:04:09,"We don't have anything planned right now. I don't have too much time to work on Capybara atm, and this doesn't seem to have super high priority.
",jnicklas,2013-05-10 06:12:35
1077,2013-05-09 08:50:45,"Hi,

(Same as #1076 but for 1.1 because I am not sure yet we can upgrade to 2.0 easily)

because I need the scope to write an rspec matcher such as ....

<S_CODE_TOKEN>

the only solution I found was to add this to capybara.

thanks
",mjobin-mdsol,2013-05-09 15:39:56
1077,2013-05-09 15:39:56,"We don't accept new features for old versions.
",jnicklas,2013-05-09 15:39:56
1076,2013-05-09 08:48:30,"Hi,

because I need the scope to write an rspec matcher such as ....

<S_CODE_TOKEN>

the only solution I found was to add this to capybara.

thanks
",mjobin-mdsol,2013-05-09 15:41:12
1076,2013-05-09 15:40:55,"Just use `Object#tap`:

<S_CODE_TOKEN>
",jnicklas,2013-05-09 15:41:12
1076,2013-05-09 15:44:22,"Or just use current_scope inside the within block
",twalpole,2013-05-09 15:41:12
1076,2013-05-10 04:18:49,"thanks ! I appreciate your giving me alternatives.
",mjobin-mdsol,2013-05-09 15:41:12
1075,2013-05-07 22:32:54,,mikegehard,2013-10-20 18:16:09
1075,2013-05-09 15:42:54,"I agree that the way this is currently written isn't quite correct, but imho this isn't either.
",jnicklas,2013-10-20 18:16:09
1075,2013-05-09 15:46:50,"I don't see string `WebKit and Selenium are supported through external gems.` correct.

Bindings for Selenium are inside Capybara.
",abotalov,2013-10-20 18:16:09
1075,2013-05-09 18:06:10,"Thanks for the feedback. I'll take some time to try and clean it up. @jnicklas can you give me some feedback on what part you don't think is ""quite correct""?
",mikegehard,2013-10-20 18:16:09
1074,2013-05-06 13:15:34,"Use Capybara.before_action and Capybara.after_action to start & stop a run loop in some of the frameworks that have a run loop.
",hajee,2013-05-09 15:45:00
1074,2013-05-06 19:51:43,"Instinctively this doesnt seem useful, although I could be wrong on that.  On the other hand the implementation is definitely not ""correct"".   Executing a simple nested call to find all anchor tags inside an element with an id
    @session.find_by_id('first').all('a')
ends up calling the before action and after action 7 times each (and thats with the elements on the page when the call is made, and no retries needed to wait for them)-  there's no way that can be intended?
",twalpole,2013-05-09 15:45:00
1074,2013-05-07 05:45:34,"Calling the before & after actions 7 times is definitely not what I intended :-). 

As for usefulness, my idea is:
[Ember.js](http://emberjs.com/about/) batches changes to the DOM to make sure the final changes are only put on the DOM once. This means that the DOM is not always directly updated after a capybara action is finished. By starting a [run loop](http://emberjs.com/api/classes/Ember.run.html) before the capybara action and finishing it after the capybara I can ensure **all** dom changes and other bindings are finished.
",hajee,2013-05-09 15:45:00
1074,2013-05-07 06:36:40,"@hajee then you're not really testing the app the way a user would be using it, and you could possibly be hiding errors that do exist in your app with embers caching etc.  In tests where it's important you could just have the test wait for the relevant change to appear in the DOM. I definitely don't think running some JavaScript before and after every Capybara call makes sense since that includes a bunch of things that would never trigger a change on the page (searching page for elements, getting contents, reading values, etc)
",twalpole,2013-05-09 15:45:00
1074,2013-05-09 15:45:00,"I agree with @twalpole. Testing like this isn't good and we shouldn't encourage it. Besides, this doesn't work as intended.
",jnicklas,2013-05-09 15:45:00
1074,2013-05-09 17:45:18,"Ok. It was a nice learning experience. 

On 9 mei 2013, at 17:45, Jonas Nicklas notifications@github.com wrote:

> I agree with @twalpole. Testing like this isn't good and we shouldn't encourage it. Besides, this doesn't work as intended.
> 
> —
> Reply to this email directly or view it on GitHub.
",hajee,2013-05-09 15:45:00
1073,2013-04-29 19:46:22,"I have seen various posts on this issue, well not with MongoDB being used. My understanding is that capybara doesn't care if you use active record, mongo, sql or the skittle on the floor.

So lets get to it,

**Error**

<S_CODE_TOKEN>

We have all seen this when we fail at following simple instructions, so let me show you my files:

**Spec helper**

<S_CODE_TOKEN>

Other Notes:

Why is: `config.use_transactional_fixtures = true` commented out? because when its uncommented it spazzes out and throws:  

<S_CODE_TOKEN>

I assumed that was a mongo db issue. So I commented it out. after doing so I get the above error. Is this because capybara uses transactional fixtures?

**test File**

Located in: spec/requests, generated by `rails g integration_test sign_in`

<S_CODE_TOKEN>

So with that why am I getting the error?
",AdamKyle,2013-04-29 19:58:56
1073,2013-04-29 19:58:56,"This is really a ""how do I use capybara"" question and as such belongs in the mailing list, and not as an issue on github.

Most likely your issue is fixed with the instructions from the ""Using Capybara with RSpec"" section of the readme.

> If you are using Rails, put your Capybara specs in spec/features.
> If you are not using Rails, tag all the example groups in which you want to use Capybara with :type => :feature
",twalpole,2013-04-29 19:58:56
1073,2013-04-29 20:04:01,"are you saying all my tests need to be put under spec/features? that doesnt seem right to me...
",AdamKyle,2013-04-29 19:58:56
1073,2013-04-29 20:16:55,"Or tagged with a type of feature -- read the manual --  If you have further questions about how to use capybara, please take them to the mailing list.
",twalpole,2013-04-29 19:58:56
1072,2013-04-28 09:38:39,"This ensures that appropriate events are fired in the browser without causing performance problems.

Fixes jnicklas/capybara#1028
",TimMoore,2013-11-10 13:11:08
1072,2013-05-05 21:35:23,"PhantomJS used to have a similar implementation, but they backed out the change due to incompatibilities with libraries like jquery.inputmask. capybara-webkit does the same as PhantomJS and the Selenium driver, simply clearing the field via JavaScript. I don't know if there's a good solution that will solve the problem without raising new issues.
",mhoran,2013-11-10 13:11:08
1072,2013-05-09 06:52:10,"@mhoran is this the issue you're talking about? https://github.com/jonleighton/poltergeist/issues/176

It does seem like there may be no perfect solution here. I think it is important to be able to test the behavior of clearing out a field.

Another option would be to make it an explicit action: something like `clear_field 'name'` instead of `fill_in 'name', :with => ''`. The drawback is that it would need a new `clear` method on `Node` implementations. We could ease the burden on driver developers by putting a default implementation in `Capybara::Driver::Node` that just calls `self.set('')` and then leave it to driver developers to provide an alternate implementation if necessary to get the desired behavior.

What do you think, @jnicklas?
",TimMoore,2013-11-10 13:11:08
1072,2013-05-09 06:53:27,"There's also this related issue: https://github.com/thoughtbot/capybara-webkit/issues/303
",TimMoore,2013-11-10 13:11:08
1072,2013-07-03 12:22:08,"Oh god, I hate this issue. It just keeps coming back whatever we do. Maybe we could handle the case of sending in an empty string specially, and just call the `clear` method in that case?
",jnicklas,2013-11-10 13:11:08
1071,2013-04-27 08:18:15,"I used Cucumber+Capybara2.1:

![1](https://f.cloud.github.com/assets/3436711/435097/7315713e-af9d-11e2-8a88-df015b0e076a.png)

Then I should see button ""bbb""  --------------------------passed
And I should see button ""aaa""   ---------------------------failed
",leevyzz,2013-05-09 15:39:15
1071,2013-05-09 14:15:08,"I think this is the correct behavior because `type=""BUTTON""` isn't the correct XHTML syntax that is widely used today
",carloslopes,2013-05-09 15:39:15
1071,2013-05-09 15:39:15,"Yes indeed. Capybara is case sensitive and only accepts ""button"", not ""BUTTON"".
",jnicklas,2013-05-09 15:39:15
1070,2013-04-26 13:45:27,"Currently, Capybara allows text fields to be filled in with arbitrary Ruby objects. For example: 

<S_CODE_TOKEN>

One might expect this cucumber step to fill in the date field with the text ""2013-03-19"". In reality though this isn't what happens. The date field actually gets filled in with the date object, and then when the form is submitted the date object gets passed directly to the controller. This is unrealistic and can't happen in a real application. Capybara should stringify objects passed to the fill_in method before those objects are passed to the controller.
",Ajedi32,2013-04-26 13:56:39
1070,2013-04-26 13:52:24,"Hmm, hold up. This might not be true; I may have just misinterpreted some anomaly I found while testing my app. Stand by...
",Ajedi32,2013-04-26 13:56:39
1070,2013-04-26 13:56:39,"Yeah turns out this was actually caused by something I was doing in my application. Sorry about that...
",Ajedi32,2013-04-26 13:56:39
1069,2013-04-26 01:11:25,"This makes the behavior of textareas with linefeeds in RackTest more like the behavior with Selenium - Fix for issue #1068
",twalpole,2013-07-03 12:28:15
1069,2013-04-29 20:55:21,"@jnicklas I moved the modify textarea contents part of this into one place Capybara::HTML -  If there's a different place you think it would fit better (or different name) let me know and I'll make that change
",twalpole,2013-07-03 12:28:15
1069,2013-05-09 15:46:22,"It almost sounds like this should be fixed upstream in Nokogiri?
",jnicklas,2013-07-03 12:28:15
1069,2013-05-09 16:13:38,"I think there is a good argument to be made that the textarea parsing portion of this is a bug in Nokogiri or more exactly libxml2 when parsing html.  However since we already had a partial fix for this in capybara (which ""breaks"" submission in some cases) it might be worth making the fix correct and then seeing if we can get it fixed upstream.  The cr/lf portion of this affecting submission is not an issue in nokogiri - its just mimicking the behavior of full browsers
",twalpole,2013-07-03 12:28:15
1069,2013-05-09 16:35:09,"@jnicklas  the requirement for ignoring leading line breaks comes from http://www.w3.org/TR/html401/appendix/notes.html#notes-line-breaks   -  This specifically refers to rendering, and browsers have taken this to affect the value - I think this makes the case that its an issue in parsing in Nokogiri/libxml2 less clear
",twalpole,2013-07-03 12:28:15
1068,2013-04-25 20:54:59,"This issue is related to #677 #687 and #787 

As established in those issues, browsers ignore the leading newline in a textarea and Rails adds a leading newline to ensure that a user-created leading newline is honored. Capybara's RackTest driver was changed to respect this when reading the value but not when submitting the form.

That has lead me to a test using Capybara and TackTest where I'm not changing the value of a textarea form but submitting the form submits a different value than the original, one with a leading newline. I think all that needs to happen is the addition of same gsub added to Capybara::Node::Simple#value be added to the textarea case in Capybara::RackTest::Form#params.
",cgriego,2013-07-03 12:28:15
1068,2013-04-25 23:38:44,"I think this is more complicated than just adding the same gsub to Capybara::RackTest::Form#params .  I did a few little tests to compare browser behavior to rack-test

If the \n immediately following the textarea is in the original document and the form is submitted without changing the textarea contents then current behavior is the following
RackTest : submits the leading \n
FF via Selenium : ignores the leading \n (and a final \n if there is one) and all remaining \n are returned as \r\n

However if we set the content of the textarea to something with a leading \n then FF will not ignore that leading \n (or a final \n) and will return those converted to \r\n s

Just changing the params function to gsub out leading \n would potentially interfere with any changed values,
so we have to be careful that any changes dont strip the \n values that get set into the textarea during running.  There is also the question of whether we should be converting all \n to \r\n when the form is submitted as browsers do.  @jnicklas I've done some work on a fix for this, would be interested on your thoughts on the \r\n issue
",twalpole,2013-07-03 12:28:15
1068,2014-05-05 08:16:41,"Why the last commit of this issue is not merged? It is not part of the release 2.2.1. I would like it in the next release.
",nagyt234,2013-07-03 12:28:15
1067,2013-04-25 09:18:29,"I have this feature spec that I can't get to pass. When the line `click_button 'All Users'` is run, the session seems to expire and user is redirected to the sign_in page instead of the form submitting and redirecting to the same page and display a flash message 'Poll was sent to all users.'

<S_CODE_TOKEN>

I'm using Devise for authentication and below is my helper for `login(user)` and my spec_helper file.

<S_CODE_TOKEN>

Link to my spec_helper which is quite long:
https://gist.github.com/gjaldon/5458535

Is this a bug or is there something wrong with the way I configured Capybara/Devise? My Capybara version is '1.1.4' but this same code doesn't work with '2.1.0' too.
",gjaldon,2013-04-25 12:25:38
1067,2013-04-25 10:46:38,"Maybe Rails' CSRF protection kicking in?
",jnicklas,2013-04-25 12:25:38
1067,2013-04-25 12:25:38,"Appreciate the response, Jonas. It turns out the user was being signed out by Devise since he wasn't confirmed. Sorry for the trouble!
",gjaldon,2013-04-25 12:25:38
1066,2013-04-23 07:54:17,"Hello! 

I have following situation:

1) on page load I should upload some data form server via AJAX.
2) uploaded data should be stored in JS variable (I have not any css/html changes for detect that ajax is finished here) - somthing will changes on html only if data variable not empty and user press another action in future
3) I have JS method to detect that my variable is not empty

I need something like this for test:

<S_CODE_TOKEN>

but wait_until removed form Capybara2.0

I try to use following way form http://www.elabs.se/blog/53-why-wait_until-was-removed-from-capybara

<S_CODE_TOKEN>

but it's geves

<S_CODE_TOKEN>

Can you halp me? What should I do for my situation? Should I make special div(hidden|visible) for detection of ajax complition?
",the-teacher,2013-04-23 23:59:13
1066,2013-04-23 23:59:13,"That error indicates that your script did not evaluate to true within the wait time set, which would tend to indicate your app isnt working the way you think it is, or its taking a long time.  However this is an issue that should be posted to the mailing list and not created as an issue on github since its not a bug in capybara.
",twalpole,2013-04-23 23:59:13
1065,2013-04-22 21:10:17,"This changes the racktest driver to respond with ""true"" or nil when retrieving boolean attributes as the selenium driver does.  I'm ambivalent about this change but @abotalov feels pretty strongly about having the same behavior from all drivers so I have implemented this.  I'm not loving the ""true""/nil responses (which come from the webdriver spec) and maybe it would be better to change both drivers to respond with true/false for boolean attributes.  Either way getting tests that exactly match the expected returns will encourage other drivers to do the same thing.  I had code in Capybara::Node::Simple that verified the specified attribute name was valid for the current element before treating it as a boolean attrribute, however after looking at Selenium I removed it since they don't seem to verify that.  
",twalpole,2013-10-31 08:07:31
1065,2013-07-03 12:19:09,"Hmm, this adds so much code, and I don't feel that this is particularly valuable. @abotalov, you felt very strongly about this, do you really think this is necessary? It seems superfluous to me. :-1: 
",jnicklas,2013-10-31 08:07:31
1065,2013-08-26 14:39:17,"Closing. @abotalov never got back here, and I personally feel this is a bad idea.
",jnicklas,2013-10-31 08:07:31
1065,2013-10-30 22:11:37,"Solving issue with Racktest and Selenium returning different values for `#[]` would be nice but such solution can't be complete as in general Selenium returns not attribute but property.

There are many differences between them (see https://dvcs.w3.org/hg/webdriver/raw-file/default/webdriver-spec.html#reading-attributes-and-properties). It will be not possible to implement all those rules in Racktest without JS support.

@jnicklas Do you think that `#[]` of Capybara's Racktest driver should try to mimic behavior of Selenium where possible?
",abotalov,2013-10-31 08:07:31
1065,2013-10-31 07:51:06,"No, honestly I feel this is kind of a bad idea. We're getting into an uncanny valley type scenario. Let's just leave this as is.
",jnicklas,2013-10-31 08:07:31
1064,2013-04-22 16:14:55,"This ignores clicks on form submitting elements when there is no associated form in racktest (as browsers do)
",twalpole,2013-04-22 17:22:22
1063,2013-04-22 08:33:26,"Hello,
I use capybara+selenium+cucumber. In previous version I could create screenshot and html page after scenario failed.
But now, in the capybara 2.1 you add Capybara.reset_session! In the After hook.
This is a reason why all screenshot, which I want to create after scenario failed, are blank.
",ipoltorak,2013-07-04 06:53:14
1063,2013-04-26 20:04:30,"@ipoltorak if you do something like the example below doesn't it work?

<S_CODE_TOKEN>
",carloslopes,2013-07-04 06:53:14
1063,2013-04-26 20:50:52,"I use Capybara 2.1. In my scenarios screenshots that are made in After hook aren't blank.

<S_CODE_TOKEN>
",abotalov,2013-07-04 06:53:14
1063,2013-04-26 21:24:43,"@ipoltorak  After hooks are run in the opposite order they are defined, so make sure that your after hook is being defined after the hook that calls reset_session!
",twalpole,2013-07-04 06:53:14
1063,2013-07-04 06:53:14,"I think @twalpole pointed out the correct reason why this is happening.
",jnicklas,2013-07-04 06:53:14
1062,2013-04-21 22:31:54,"This way no need to call configure at the end of file, `server` option will now use `default_server`, also added setter for this option.
",route,2013-05-09 15:48:47
1062,2013-04-22 07:19:31,"I prefer old code where I could quickly see all Capybara defaults in one place
",abotalov,2013-05-09 15:48:47
1062,2013-04-22 07:33:23,"I agree it's read easier, the benefit is we can fallback to defaults when value isn't set.
For example for server option we have to return `Capybara.server {|app, port| Capybara.run_default_server(app, port)}` after each test where behavior was changed.
",route,2013-05-09 15:48:47
1062,2013-05-09 15:48:47,"I prefer the old code too, to be honest.
",jnicklas,2013-05-09 15:48:47
1061,2013-04-19 16:04:18,"I have this example: https://github.com/ohcibi/capybara-xpath-example which is called xpath, but I just noticed that it also applies for css selectors.

There is a simple index.html that has an input of type range with value 0

<S_CODE_TOKEN>

The value then gets changed by JS

<S_CODE_TOKEN>

I now want to assert that the input field has this value of 1 like this

<S_CODE_TOKEN>

But this won't work. If I replace `1` by `0` the element would be found (as if it is found by its initial value).

The reason why I'm doing this is because I want to utilize capybaras behaviour of waiting a certain amount of time before an element is considered as ""not found""; to check if the value of the input has changed, which happens async in my application (as the example shows: its not even necessary to be async to trigger this bug).

If I would do a normal find and then assert for the value it'll work but then I would have to wait manually as the element is already on the page but has its old value as long as the async-process is not finished.

By the way I checked that the value of the `input` is actually 1 with pry and when using selenium it is even visible in the spawned firefox session, which stays open a few secs because capybara cant find the input with value 1.

**Update**
The example uses capybara-2.0.3 as there is a bug with capybara-webkit and capybara-2.1.0, but I just verified that this bug also happens when using capybara-2.1.0 with selenium
",ohcibi,2013-04-20 19:05:58
1061,2013-04-19 17:43:06,"This isn' a bug.  You're running up against the difference between attributes and properties.  When you set the value of the element from JS you are actually setting the property 'value' but that doesn't change the attribute of the element in the page source.  The XPath query is run against the html document so doesnt access the value property.  
",twalpole,2013-04-20 19:05:58
1061,2013-04-20 10:20:55,"@twalpole well for the matter of tests, I'd expect the finder to return what a user would see one the page and not what the browser is internally doing.
",ohcibi,2013-04-20 19:05:58
1061,2013-04-20 14:37:05,"@ohcibi if you have some kind of locator (id, name, label, placeholder) for the input then you can use the :with filter of the field selector. So in the case above with an Id of ""input"" the following should do what you want

expexct(page).to have_field(""input"", type: ""range"", with, ""1"")
",twalpole,2013-04-20 19:05:58
1061,2013-04-20 17:05:49,"@twalpole Thanks.. I was also stumbling over this in the meantime.. While this is a totally acceptable (or even better) solution for my current use case, I'd still consider the behaviour of the finder as a bug or at least as inconsistent.
",ohcibi,2013-04-20 19:05:58
1061,2013-04-20 19:05:58,"@ohcibi  Inspect the input in your page after you change its value from javascript.  The value attribute on the element will still have the original contents even though the input shows the new contents.  That is why an xpath query won't work.  Its neither a bug nor inconsistent, its just that you have to understand that by definition an xpath query has to be run against an XML document and is going to be matched against the attributes in that document.  That coupled with the DOM Level 2 interface spec for HTMLElement value (pasted below - note bold portion), means that an xpath query in the browser will see the value that was there at page creation time

> value of type DOMString
> When the type attribute of the element has the value ""text"", ""file"" or ""password"", this represents the current contents of the corresponding form control, in an interactive user agent. Changing this attribute changes the contents of the form control, <b>but does not change the value of the HTML value attribute of the element</b>. When the type attribute of the element has the value ""button"", ""hidden"", ""submit"", ""reset"", ""image"", ""checkbox"" or ""radio"", this represents the HTML value attribute of the element. See the value attribute definition in HTML 4.01.
",twalpole,2013-04-20 19:05:58
1061,2015-12-29 22:04:35,"I just want to bring attention to this again. Because of this issue, I needed to write my own data table parser and execute javascript to ascertain the text field in an updated input. Consequently, each row of the datatable now takes 6 seconds to parse. There might, and probably is a better way to parse this, but this ""issue"" lends itself to slow, ugly code workarounds. 

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I simply don't know of a better way. Was hoping to get a little feedback or more efficient way of doing this.
",daino3,2013-04-20 19:05:58
1061,2015-12-30 01:50:21,"@daino3 if you know the page isn't dynamically changing then pass wait: 0 as an option to all your has_no_css? calls and the method will be almost instantaneous - the default has_no_css? will wait for Capybara.default_max_wait_time seconds to make sure the page isn't being loaded by an ajax call - if you know you don't have to worry about that passing wait: 0 will make it check and continue without a retry
",twalpole,2013-04-20 19:05:58
1061,2015-12-30 17:21:59,"Thanks @twalpole! The `wait: 0` option made it got from 6 sec to 0.1! Gonna have to put that in the ol' tool kit. 

 I'm going to guess though, there's no ""nice"" way of getting around extracting a change in input value without executing some javascript... is that correct?
",daino3,2013-04-20 19:05:58
1061,2015-12-30 18:45:45,"In the future please ask howto question in the mailing list as requested in the README -  I'm locking this conversation for now  - but to answer your question

element['value'] should give you the value property (as opposed to attribute) in selenium and poltergeist, not sure with capybara-webkit off the top of my head.  If you're just looking to validate the selected value then you should be looking at the `with` option for the field selector or the `selected` option for the select selector

<S_CODE_TOKEN>
",twalpole,2013-04-20 19:05:58
1060,2013-04-18 16:37:02,"I posted a StackOverflow question regarding this [here](http://stackoverflow.com/questions/16088039/argumenterror-3-for-1-in-rails-actionviewhelperstexthelper-when-running-rs), but am wondering if anyone in the capybara community in particular may have some insight to this.

I've just upgraded to capybara 2.1.0 (since attempting an upgrade to the 2.0.x family), and am now getting an `ArgumentError (3 for 1)` in `ActionView::Helpers::TextHelper` but _only_ when running all rack_test driver acceptance specs at once. When I run files individually, I have no problem.
## Using:
- ruby 1.9.3p392
- rails 3.2.12
- rspec 2.13.0
- capybara 2.1.0

When I run my tests for an entire suite (failing at once with descriptive formatting):

<S_CODE_TOKEN>

The following error is thrown:

<S_CODE_TOKEN>

When running with the `--backtrace` option, the following is reported:

<S_CODE_TOKEN>
",sjtipton,2013-04-18 20:40:40
1060,2013-04-18 17:27:32,"@sjtipton Can you provide the actual spec which generates the exception?  A repeatable test case would be ideal.
",conradwt,2013-04-18 20:40:40
1060,2013-04-18 17:34:07,"Sure... it is important to note, though, that when running any of these in isolation, they pass; when running the entire non-selenium-dependent directory structure, I receive this error.

For what it's worth, here's one of the tests, in which it fails on line 12: `page.should have_css("".search_box"")`

<S_CODE_TOKEN>
",sjtipton,2013-04-18 20:40:40
1060,2013-04-18 20:04:29,"I seemed to have tracked it down to six files within the ""/non-webdriver-dependent"" directory structure that were including `ActionView::Helpers::TextHelper` for the sake of truncating expected content.

I will change these tests to use truncate off of String, and close this once I've verified that actually fixes the problem.
",sjtipton,2013-04-18 20:40:40
1060,2013-04-18 20:40:40,"Is there anything in Capybara 2.1 that would not allow me to include `ActionView::Helpers::TextHelper` within specific spec files? I've since worked around this issue, but am curious about the root cause.
",sjtipton,2013-04-18 20:40:40
1060,2013-04-18 22:23:06,"@sjtipton  If you're somehow including TextHelper into Capybara::RackTest::CSSHandlers then it could produce the behavior you're seeing. This is because TextHelper defines a concat function which would get called instead of the internal xpath concat in nokogiri/libxml
",twalpole,2013-04-18 20:40:40
1060,2013-06-11 11:23:11,"Confirmed that `include ActionView::Helpers::TextHelper` is the culprit here
",aphexddb,2013-04-18 20:40:40
1060,2014-02-18 22:55:23,"I'm also seeing this error and confirmed that `include ActionView::Helpers::TextHelper` is the culprit. But in my case ActionView::Helpers::TextHelper is included in a module. I don't see how it's getting into Capybara::RackTest::CSSHandlers

<S_CODE_TOKEN>

I had to refactor the module to avoid the error.

<S_CODE_TOKEN>

As a general practice maybe it's better to reference pluralize() directly rather than pulling in all of ActionView::Helpers::TextHelper? So the fix is not all that bad. But it still seems like this is an unintended side-effect of Capybara.
",willkoehler,2013-04-18 20:40:40
1060,2014-02-19 08:00:34,"@sjtipton you said ""within specific spec files"", Ruby does not make it possible to include modules lexically scoped to a single file. If you're including a module at the top of a file, _any_ file, you're including it in _every single Class_ in Ruby. Including everything inside Capybara.

This is bound to cause problems, not just with Capybara but with lots of other libraries too, essentially anything that relies on `method_missing` is going to crash and burn.

Be very careful about including stuff at the top level scope. Here's an illustration:

<S_CODE_TOKEN>
",jnicklas,2013-04-18 20:40:40
1060,2014-04-15 00:04:34,"I was having a similar problem, but it turned up in haml: https://github.com/haml/haml/issues/726. I ended up fixing the issue by switching the default driver to selenium.
",mockdeep,2013-04-18 20:40:40
1059,2013-04-17 15:02:01,"I can't find a way to match meta tags on my tests. I'm using Capybara 2.1.0:

<S_CODE_TOKEN>

Seems like the whole `head` element is ignored by Capybara. Are there any special matchers for meta tags?
",alfonsocora,2013-04-17 21:01:58
1059,2013-04-17 21:01:58,"You can use `visible` option:

<S_CODE_TOKEN>
",abotalov,2013-04-17 21:01:58
1059,2013-04-17 23:46:44,"@abotalov thanks a lot!
",alfonsocora,2013-04-17 21:01:58
1059,2013-06-11 19:00:03,"And of course, it works with CSS selectors too:

<S_CODE_TOKEN>
",chrisyour,2013-04-17 21:01:58
1059,2014-03-27 00:21:36,"@abotalov 
Thanks for this.
You can also use it with `within`

<S_CODE_TOKEN>
",serv,2013-04-17 21:01:58
1058,2013-04-17 05:11:03,"This is the change from pull request #951 rebased against master with one more change to restore a require statement that was removed in the interim.

I'm submitting it as a new PR to trigger a new Travis CI build.
",TimMoore,2013-05-09 22:17:30
1058,2013-04-17 05:41:10,"OK the build looks good. Is there any other testing I can do to help get this through?
",TimMoore,2013-05-09 22:17:30
1058,2013-04-29 13:47:37,"FWIW this was committed to Selenium today: https://code.google.com/p/selenium/source/detail?r=9e456160fa2f
",TimMoore,2013-05-09 22:17:30
1058,2013-04-29 13:55:30,"Nice, I've been a bit hesitant about merging this, since I don't really like the implementation (sorry ;)). Maybe we should just wait for this to make its way downstream. Jari is usually quick about packaging updated versions of webdriver.
",jnicklas,2013-05-09 22:17:30
1058,2013-04-30 13:01:51,"From the comments on that page today, it looks like it's controversial on their side as well.

Would you be more amenable to a change that just runs Capybara's own tests with this profile setting rather than changing the default?

My main interest in this is that it would fix the problem with the test change I proposed in #1054 failing when Firefox isn't active. My main interest in _that_ is that a test for the change I proposed in #1072 requires that change events are triggered and captured. The current behavior of `fill_in` not triggering a change event when the field is cleared to blank prevents some useful tests from working correctly.

I'd be grateful for any feedback you have on what you'd like to see changed or tested further before you're comfortable merging any of these changes. Thanks!
",TimMoore,2013-05-09 22:17:30
1058,2013-05-09 15:49:47,"Yes, I'd prefer if it only affected Capybara's own tests. But let's also keep an eye on when this is pushed upstream.
",jnicklas,2013-05-09 22:17:30
1058,2013-05-09 22:17:30,"Yeah, unfortunately the Selenium change was reverted: https://code.google.com/p/selenium/source/detail?r=27db294530d04ba83031be6597ed1480553bd198

I'll prepare a new pull request that only runs Capybara's tests this way.
",TimMoore,2013-05-09 22:17:30
1058,2013-05-12 13:12:42,"Superseded by #1081.
",TimMoore,2013-05-09 22:17:30
1057,2013-04-16 14:30:01,"Not sure if I am doing something wrong, but It seems that capybara can't find the element 'head' 

<S_CODE_TOKEN>

To make sure, I tried to bring the html down to this: 

<S_CODE_TOKEN>

I am using capybara 2.1.0
",gaganawhad,2013-04-16 16:35:51
1057,2013-04-16 16:35:20,"The head element is usually invisible, the default has changed in Capybara 2.1.0 to by default not find hidden elements, you need to pass `:visible => false` or set `Capybara.ignore_hidden_elements = false`.
",jnicklas,2013-04-16 16:35:51
1057,2013-04-16 16:48:28,"awesome! thank you very much
",gaganawhad,2013-04-16 16:35:51
1057,2013-09-18 15:57:10,"worked for me as well.
",lfender6445,2013-04-16 16:35:51
1056,2013-04-16 13:57:20,"I upgraded to capybara-2.1.0 and xpath-2.0.0 and out of the box I'm getting the following error with fill_in:

<S_CODE_TOKEN>

The line the error references is a very simple one:

<S_CODE_TOKEN>

Any ideas? For now I'm going to downgrade to 2.0.3 but I'd like to use the new select :match => :first feature and can't until I upgrade to 2.1.0. 
",rochers,2013-04-25 17:41:41
1056,2013-04-16 14:12:53,"A stacktrace would be helpful
",twalpole,2013-04-25 17:41:41
1056,2013-04-25 17:41:38,"Closing due to no response with more info
",twalpole,2013-04-25 17:41:41
1056,2013-04-25 18:28:12,"Sorry been too busy to troubleshoot -- will open another issue later if i encounter this again.
",rochers,2013-04-25 17:41:41
1056,2013-04-30 00:12:58,"<S_CODE_TOKEN>
",brandon-beacher,2013-04-25 17:41:41
1056,2013-04-30 00:13:34,"This has something to do when using the mechanize driver via `@mechanize`.
",brandon-beacher,2013-04-25 17:41:41
1056,2013-04-30 00:22:26,"capybara-mechanize 1.0.0 is not compatible with capybara 2.1 -  They need to tighten up their gemspec.
",twalpole,2013-04-25 17:41:41
1055,2013-04-16 02:28:51,"In our situation here, we are redirecting to a notionally external host, ie our Location header is 'http://www.foobar.com'.

At lib/capybara/rack_test/browser.rb:49, there is a substitution to allow for locally relative URIs, for example going from /auth/sessions to /auth/foobar, you could set Location to 'foobar' only.

This is ignored if the new URI path starts with /, ie is relative to the site; it should also be skipped if new URI path is empty:

<S_CODE_TOKEN>

becomes:

<S_CODE_TOKEN>
",metafunk,2013-11-10 13:31:14
1055,2013-04-26 19:54:15,"I didn't get the real situation of this.. could you show an example case of the issue happening?
",carloslopes,2013-11-10 13:31:14
1054,2013-04-13 07:59:22,"- Assert that the event is triggered.
- Assert that the value of the input is correct at the time the event
  is triggered.
- Do not allow multiple events to be fired for a single change.
",TimMoore,2013-10-20 18:17:32
1054,2013-04-13 08:02:08,"Caveat: this test fails when Firefox does not have focus. I planned to include a change that sets `focusmanager.testmode` in Firefox, but then I found pull request #951. I'm not sure what the best way to resolve this is.
",TimMoore,2013-10-20 18:17:32
1054,2013-04-13 08:19:14,"BTW I tried reversing the change in 6dc095b locally to make sure that it causes the updated test to fail, and it does.
",TimMoore,2013-10-20 18:17:32
1054,2013-04-14 14:02:52,"@TimMoore: we'd need the focusmanager thing for this. It's not acceptable that Firefox needs focus for this to pass.
",jnicklas,2013-10-20 18:17:32
1054,2013-04-14 23:57:55,"OK so maybe we should bring the discussion over to issue #951. It's not clear to me what needs to happen to get that through.
",TimMoore,2013-10-20 18:17:32
1054,2013-10-20 18:17:45,"Pulling this in now, thanks :)
",jnicklas,2013-10-20 18:17:32
1053,2013-04-12 02:16:39,"I know you're not supposed to, but we have one test where it would be nice.  We are testing how the user enables/disabled their api key in the UI, then we want to call `get ...` on the api, parse the json and see if it worked or shows the correct error.

Possible?
",barmstrong,2013-04-12 07:12:16
1053,2013-04-12 03:25:08,"Don't laugh

<S_CODE_TOKEN>
",barmstrong,2013-04-12 07:12:16
1053,2013-04-12 07:12:16,"I think the RackTest docs describe how to include it in a test context.
",jnicklas,2013-04-12 07:12:16
1053,2013-04-12 18:42:52,"I tried doing `include ::Rack::Test::Methods` but get `undefined local variable or method`app' for #RSpec::Core::ExampleGroup::Nested_1::Nested_1:0x007fb737932ba0`.

Do you have a link by chance?  Sorry for the hassle.
",barmstrong,2013-04-12 07:12:16
1053,2013-04-12 19:55:26,"Dude, no offense, but RTFM. It says _right there_ in the docs, how to do it.
",jnicklas,2013-04-12 07:12:16
1052,2013-04-12 02:15:00,"Interesting issue I noticed.  We are using bootstrap modals http://twitter.github.io/bootstrap/javascript.html#modals

And they fly down from the top of the page (if you have that option set).  I was sort of confused why my clicks on the modal buttons were being inconsistent.  Turns out while in flight the clicks would miss their targets.  I've got some sleeps in there for now which work ok, but just wanted to mention it.  This is with Capybara 2.1.
",barmstrong,2013-04-19 07:00:58
1052,2013-04-14 14:04:16,"Which driver?
",jnicklas,2013-04-19 07:00:58
1052,2013-04-18 10:59:41,"Poltergeist

## 

Brian Armstrong
Founder, CEO
Coinbase https://coinbase.com
San Francisco, CA, USA

On Sun, Apr 14, 2013 at 7:04 AM, Jonas Nicklas notifications@github.comwrote:

> Which driver?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1052#issuecomment-16351516
> .
",barmstrong,2013-04-19 07:00:58
1052,2013-04-19 07:00:58,"You might try and open an issue with them. Not really sure what Capybara itself could do to fix this kind of thing.
",jnicklas,2013-04-19 07:00:58
1051,2013-04-11 13:53:27,"From the README:

> Capybara's Rspec matchers, however, are smart enough to handle either form. The two following statements are functionally equivalent:
> 
> <S_CODE_TOKEN>

This statement is false as long as you assume whatever holds true for `have_xpath` is going to be true for `have_selector`.

This works by waiting long enough:

<S_CODE_TOKEN>

... while this doesn't:

<S_CODE_TOKEN>

A simple `sleep 0.05` suffices to make `.should_not have_selector` yield the same results;  at times even `pp`'ing an object delays Capybara long enough to make the test pass.

I wonder whether `.should have_no_selector` does something different or is just executed a tad slower, hence having the same effect as `sleep`ing.

---

FYI, Clicking the 'Edit' link does:
- trigger Ajax request, to which
- the Server responds with a `js.erb` template, which
- inserts a `<form>` into the DOM, while clicking the link again
- makes the server responds with `js.erb` telling jQuery to 
- remove the form from the DOM again.

---
- capybara (2.0.3)
- rails (3.2.13)
- rspec (2.13.0)
- rspec-core (2.13.1)
- rspec-expectations (2.13.0)
- rspec-instafail (0.2.4)
- rspec-mocks (2.13.0)
- rspec-rails (2.13.0)
",DivineDominion,2013-04-14 14:08:03
1051,2013-04-11 16:06:59,"Trying v2.1.0, there's just a slight difference is misbehavior:  only one of two rspec examples fail for each pass.  When I change `page.should_not have_selector` to `page.should have_no_selector` the example passes but the second one, which was fine before, fails --- until I change its assertion to the `have_no_selector` form, too.
",DivineDominion,2013-04-14 14:08:03
1051,2013-04-11 17:05:28,"@DivineDominion The name of the error message you posted ""Editing Events Ajax editing hides form after submission"" doesnt match the test you said is failing. Are you sure you're looking at the right test?
",twalpole,2013-04-14 14:08:03
1051,2013-04-11 17:21:35,"You're right.  Since they were alternating at the moment, I just copied the most recent error message.

The other test for which the error message has been fired is:

<S_CODE_TOKEN>

Thanks for pointing that out.
",DivineDominion,2013-04-14 14:08:03
1051,2013-04-11 18:31:48,"From a quick look at this, I think Capybara::RSpecMatchers is not being included which means that rspecs method_missing for matchers is called and ends up just directly calling Capybara::Node::Matchers::has_selector? which won't correctly handle the waiting for the should_not.   When Capybara::RSpecMatchers is correctly included Capybara::RSpecMatchers::have_selector is called instead, which means that Capybara::RSpecMatchers::HaveSelector is used as the Matcher and will correctly convert over to calling assert_no_selector which will then correctly wait.   I think this also means that should_not have_no_xxxx  wont work properly since there are no have_no_xxxx methods that would generate a Capyabara::RSpecMatchers::HaveNoSelector  matcher, and therefore they wouldnt wait properly.   @jnicklas does this analysis seem correct?   As for why you're not getting Capybara::RSpecMatchers included properly, I'm not sure 
",twalpole,2013-04-14 14:08:03
1051,2013-04-11 22:14:38,"Yes that sounds exactly right. You can clearly see by the error message
that the matchers are not being used.

On Thursday, April 11, 2013, Thomas Walpole wrote:

> From a quick look at this, I think Capybara::RSpecMatchers is not being
> included which means that rspecs method_missing for matchers is called and
> ends up just directly calling Capybara::Node::Matchers::has_selector? which
> won't correctly handle the waiting for the should_not. When
> Capybara::RSpecMatchers is correctly included
> Capybara::RSpecMatchers::have_selector is called instead, which means that
> Capybara::RSpecMatchers::HaveSelector is used as the Matcher and will
> correctly convert over to calling assert_no_selector which will then
> correctly wait. I think this also means that should_not have_no_xxxx wont
> work properly since there are no have_no_xxxx methods that would generate a
> Capyabara::RSpecMatchers::HaveNoSelector matcher, and therefore they
> wouldnt wait properly. @jnicklas https://github.com/jnicklas does this
> analysis seem correct? As for why you're not getting
> Capybara::RSpecMatchers included properly, I'm not sure
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1051#issuecomment-16252816
> .
",jnicklas,2013-04-14 14:08:03
1051,2013-04-12 13:44:52,"OK.  So I tried to find out what's wrong with this example group:

<S_CODE_TOKEN>

Which fails with these errors:

<S_CODE_TOKEN>

I guess the second one should look more like the first, is this correct?
",DivineDominion,2013-04-14 14:08:03
1051,2013-04-12 14:06:33,"Okay got it.  It's ""solved"" by moving the file from `spec/requests/` to `spec/feature/`.  That's strange since I assumed `config.include Capybara::DSL, :type => :request` would suffice:  without the line, the abovementioned tests fail because `visit` cannot be found.  So the DSL is included and some methods work, but not all of them?  Am I missing something?

Also, declaring `:type => :feature` for the example group doesn't change a thing when the file is in `spec/requests/`.
",DivineDominion,2013-04-14 14:08:03
1051,2013-04-14 14:08:03,"You need to include `Capybara::RSpec::Matchers` as well, Capybara handles this for you if you put the file in `spec/features`. Which you should.

rspec-rails' directory based type thing is honestly pretty weird, so I can't really tell you why it isn't accepting the `type` metadata.
",jnicklas,2013-04-14 14:08:03
1051,2013-04-15 10:01:35,"Okay thanks, `config.include Capybara::RSpecMatchers, :type => :request` did the trick.

This setup is all that's necessary:

<S_CODE_TOKEN>
",DivineDominion,2013-04-14 14:08:03
1050,2013-04-11 08:56:45,"I have a page with css style html{ overflow: hidden; }. Since Capybara 2.1, no page element is selectable anymore. Even page.find(""body"") returns nothing, since the whole page seems to be considered invisible. page.find(""body"", :visible => false) does work. But I need to do a page.has_content?(""some text"") and I'm now lost how to achieve this for this page. 
",plindelauf,2013-04-14 14:10:09
1050,2013-04-14 14:10:09,"You can change `Capybara.ignore_hidden_elements = false`, this will allow you to select hidden elements. What exactly is considered ""hidden"" is up to the driver, so it isn't an issue with Capybara.
",jnicklas,2013-04-14 14:10:09
1049,2013-04-11 07:02:20,"The current [changelog](https://github.com/jnicklas/capybara/blob/master/History.md) says:

> Hard version requirement on Ruby >= 1.9.3. Capybara will no longer install on 1.8.7. [Felix Schäfer]

Those two sentences are confusing. It no longer installs on anything < 1.9.3, not only 1.8.7. I'd propose updating the documentation.

Anbd why exactly was the support for 1.9.2 dropped?
",awendt,2013-04-14 14:13:48
1049,2013-04-11 07:13:00,"@awendt I'm guessing that the Capybara project wanted to be in line with Rails 4 which requires Ruby 1.9.3 or higher.
",conradwt,2013-04-14 14:13:48
1049,2013-04-11 08:04:09,"You're using 1.9.2? Why? 1.9.3 is superior in every conceivable way and highly compatible. Am I missing something?
",jnicklas,2013-04-14 14:13:48
1049,2013-04-12 14:50:53,"@jnicklas Because I'd like to upgrade dependencies one at a time, not all of them at once. I haven't gotten around to testing my app on 1.9.3. I know I could but I'm just not there yet.

BTW, the same argument about 1.9.3 being ""highly compatible"" can be used to ask why you restrict your users to a specific Ruby version when other version are ""highly compatible""? ;-)
",awendt,2013-04-14 14:13:48
1049,2013-04-12 15:21:02,"@awendt the reason we don't support 1.9.2 is because 1.9.2 is a broken piece of shit. We had constant issues with tests failing randomly, hanging or otherwise being a general pain in the ass on 1.9.2. As a result, our build was super unstable. Everything was always green on 1.9.3 and failing half the time on 1.9.2. Because there's no good reason to use 1.9.2 anymore, we decided to drop support for it.

The burden for supporting 1.9.2 was high, the cost for you to switch to 1.9.3 is very low.

And if you really want to upgrade your dependencies one at a time, just upgrade to 1.9.3 first, and then to Capybara 2.1.
",jnicklas,2013-04-14 14:13:48
1049,2013-04-15 06:52:27,"> the reason we don't support 1.9.2 is because 1.9.2 is a broken piece of shit

Now _that_ should go in the Changelog! :)

Thanks for clarifying. I was hoping to get a stable build with 2.1 first but I'll take your advice and upgrade Ruby first.
",awendt,2013-04-14 14:13:48
1049,2013-05-01 20:41:01,"Random note: I'm still stuck on 1.9.2 because upgrading to 1.9.3 was causing infinite loops in my Rails app and I haven't had time to track it down...

I realize that you no longer support it, but is there a quick workaround for getting it to work on 1.9.2?
",topherfangio,2013-04-14 14:13:48
1049,2013-05-24 13:17:33,"@topherfangio +1. I really need to launch Capybara under ruby 1.9.2.
",Loremaster,2013-04-14 14:13:48
1049,2013-05-24 19:41:33,"@topherfangio You have a couple of options:  upgrade to Ruby 1.9.3 and fix the issues within the Rails application or use Capybara 2.0.3.  Ideally, I would recommend the former course of action and there are resources on the Internet to help you move your Rails application forward.  Good luck.
",conradwt,2013-04-14 14:13:48
1049,2013-05-24 20:31:45,"I reverted to Capybara 2.0.3. I do not have the time at the moment to track down the infinite loop issue, and honestly, a drastic more amount of testing needs to be done if we're modifying our stack.

Thanks for the feedback :-)
",topherfangio,2013-04-14 14:13:48
1048,2013-04-10 23:02:29,,parndt,2013-04-11 08:01:40
1047,2013-04-10 15:02:16,"The current advice causes ""This connection is still waiting"" errors when both threads try to use the connection at the same time. I've been using this improved monkey-patch (by @mperham) for a while with no problems.

See: https://github.com/brianmario/mysql2/issues/99
And: https://gist.github.com/mperham/3049152
",adammck,2013-08-26 14:40:35
1047,2013-04-14 14:00:02,"This honestly seems _very_ strange to me. What's the point of having a connection pool of size one? What's the point of checking out a connection from that pool if we never give it back? Maybe my understanding of connection pools is too weak, but I honestly have no idea what this does, or how it would improve things. Also ActiveRecord already has a connection pool, the whole point of the monkey patch is that we _don't_ want to use it. So we add another connection pool, to work around the fact that we didn't want to use a connection pool in the first place. Huh?
",jnicklas,2013-08-26 14:40:35
1047,2013-04-14 17:50:46,"@jnicklas Overriding the self.connection method means you are bypassing AR's connection pool, thus making the code thread-unsafe.  My connection pool of size one ensures that there is still only one shared connection being used but because it's wrapped, it's thread-safe.
",mperham,2013-08-26 14:40:35
1047,2013-04-14 18:26:38,"Went on a run and had a crazy idea: these monkeypatches might be completely unnecessary with a simple `database.yml` tweak:

<S_CODE_TOKEN>

AR defaults to 5 connections.  We want to limit the tests to use one connection.  Can someone remove the monkeypatches, tweak their database.yml as above and see if the problem disappears?
",mperham,2013-08-26 14:40:35
1047,2013-04-14 19:28:46,"@jnicklas [Here's an example](https://gist.github.com/adammck/5383846#file-results-txt) of the thread-unsafe behavior of the current patch. The new patch is certainly strange, because we're actually using the `connection_pool` gem as a mutex, rather than a connection pool. But it works.
",adammck,2013-08-26 14:40:35
1047,2013-04-14 22:24:41,"I'm well aware that the shared connection hack is not thread safe, that's why it's a hack, as long as you know you're not accessing the database from the test and the app at the same time, it works fine. That's actually not a completely insane assumption to make, since database setup is usually done at the beginning of the test, and then interaction with the app starts.

The problem with what you are suggesting is that if the test code acquires a connection, it needs to give it back, otherwise, our thread pool of size one is exhausted, and the app keeps waiting for a connection until it times out.

I've done a quick experiment, and it seems like it is possible to set `pool: 1` and then call `ActiveRecord::Base.connection.close`, to return the connection to the pool. I was expecting this to abort the running transactions, but it turns out it doesn't, which is kinda neat.

Here's a gist: https://gist.github.com/jnicklas/5384485

This is a bit cumbersome, since you need to manually close the connection, but it should be at lease somewhat safer. Unfortunately it doesn't fail very gracefully if you forget to close the connection.
",jnicklas,2013-08-26 14:40:35
1047,2013-04-15 02:57:25,"If you use AR's `with_connection`, everything should work well.  Like
`File.open`, you want to use the block form so everything is cleaned up
automatically.

On Sun, Apr 14, 2013 at 3:24 PM, Jonas Nicklas notifications@github.comwrote:

> I'm well aware that the shared connection hack is not thread safe, that's
> why it's a hack, as long as you know you're not accessing the database from
> the test and the app at the same time, it works fine. That's actually not a
> completely insane assumption to make, since database setup is usually done
> at the beginning of the test, and then interaction with the app starts.
> 
> The problem with what you are suggesting is that if the test code acquires
> a connection, it needs to give it back, otherwise, our thread pool of size
> one is exhausted, and the app keeps waiting for a connection until it times
> out.
> 
> I've done a quick experiment, and it seems like it is possible to set pool:
> 1 and then call ActiveRecord::Base.connection.close, to return the
> connection to the pool. I was expecting this to abort the running
> transactions, but it turns out it doesn't, which is kinda neat.
> 
> Here's a gist: https://gist.github.com/jnicklas/5384485
> 
> This is a bit cumbersome, since you need to manually close the connection,
> but it should be at lease somewhat safer. Unfortunately it doesn't fail
> very gracefully if you forget to close the connection.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/pull/1047#issuecomment-16360855
> .
",mperham,2013-08-26 14:40:35
1047,2013-04-16 18:36:39,"@mperham with AR connecctions, from what I understand, the first time you use a connection in any given Thread, it will check out a connection. So it's quite easy to accidentally check out a connection, just by forgetting to wrap a call in a `with_connection` block. `File.open` doesn't have that problem, since you can't forget to open a file, it has to be explicit.

This does seem safer than what we're suggesting now, but it's also a lot more cumbersome. Having to wrap all database interaction in a `with_connection` block is pretty annoying. Can we at least figure out how to raise an exception if the user forgets to use the `with_connection` block? Is that possible?

I'm also honestly very surprised that it's even possible to close a connection within a transaction. That's obviously an advantage in the context of Capybara, but it doesn't at all seem like a good idea in the grand scheme of things, and more sounds like a bug in ActiveRecord. Seems a bit iffy to rely on that, so maybe this solution is a bit hack-ish too.
",jnicklas,2013-08-26 14:40:35
1047,2013-07-03 12:26:29,"@mperham, @adammck I'm inclined to close this issue. As I mentioned in my last comment, I'm not super satisfied with this proposed solution either. While it should be more threadsafe, it is also more likely to just hang the app if you're doing something wrong. Do you agree? Is this still something we should explore further?
",jnicklas,2013-08-26 14:40:35
1047,2013-07-03 16:25:33,"I don't feel strongly about this. I opened the issue because I was experiencing weird intermittent errors when using the shared_connection hack from the README, which @mperham's alternative hack solved, but I don't have a better solution right now.
",adammck,2013-08-26 14:40:35
1047,2013-07-03 18:02:39,"Just to follow up, though, I've created a test case in pretty typical Rails environment.
See: https://github.com/adammck/capybara_connection_sharing

In this example, we have a `/widgets/froobicate` route which performs a deliberately slow (about three seconds) database query, and a test which performs some unrelated queries. The existing monkey-patch raises the ""connection is still waiting"" error, while mperham's patch does not. It's certainly a strange situation, but I think it's pretty clear that there's a problem.
",adammck,2013-08-26 14:40:35
1047,2013-08-26 14:40:35,"I'm closing this for now. I don't really see how we can come to a resolution on this any time soon.
",jnicklas,2013-08-26 14:40:35
1046,2013-04-10 04:50:06,"Hello, I'm trying to upgrade to Capybara 2.1.0

I'm getting:

<S_CODE_TOKEN>

Which I assume means capybara is not getting loaded correctly.  I believe I set it up correctly requiring 'capybara/rails' and 'capybara/rspec' in spec_helper.rb

https://gist.github.com/barmstrong/21dcb9f17e328c71c9af

I also renamed my `requests` directory to `features` so I'm think it should work in this test.

Tried adding this to test_helper.rb also but no luck.

<S_CODE_TOKEN>

Any ideas?  Many thanks!
",barmstrong,2013-04-11 06:31:44
1046,2013-04-10 06:25:26,"Strangely, it can actually matter what _folder_ you are putting your files in. Try putting them in `spec/features` if they aren't there already.
",jnicklas,2013-04-11 06:31:44
1046,2013-04-10 06:56:31,"I moved them from requests to features folder.  Didn't seem to have an
effect.

On Tuesday, April 9, 2013, Jonas Nicklas wrote:

> Strangely, it can actually matter what _folder_ you are putting your
> files in. Try putting them in spec/features if they aren't there already.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1046#issuecomment-16157547
> .

## 

## 

Brian Armstrong
Founder, CEO
Coinbase https://coinbase.com
San Francisco, CA, USA
",barmstrong,2013-04-11 06:31:44
1046,2013-04-10 07:08:14,"Try running it without spork.
",jnicklas,2013-04-11 06:31:44
1046,2013-04-10 08:29:11,"Hmm, commented spork.  Tried a `bundle exec rspec`.  Same issue.  For some reason it is still not getting loaded.
",barmstrong,2013-04-11 06:31:44
1046,2013-04-10 08:30:16,"I tried add a `, type: :feature` on to a test as well to see if this would help.  No luck.

My files are named ..._request_spec.rb still.  Not sure if that matters.  But they are in the spec/features folder
",barmstrong,2013-04-11 06:31:44
1046,2013-04-11 02:32:43,"I'm trying to create a DSL for my app in the `spec/support/app_dsl.rb` file, and these use capybara methods to do things like `def signin` `def signout` etc for various app actions.

Is there some way to use capybara methods in this file?  I'm wondering if this is the root cause.

Currently I have something like `find('#email').set(user.email)` in there and it is saying:

<S_CODE_TOKEN>
",barmstrong,2013-04-11 06:31:44
1046,2013-04-11 04:30:52,"> NoMethodError:
>    undefined method `find_xpath' for #Capybara::Webkit::Driver:0x007fce2dce4a20

I had the same  issue and resolved it.

This reason is that the released version of capybara-webkit doesn't support Capybara 2.1.0 yet.
To resolve this, you should use it from `git://github.com/thoughtbot/capybara-webkit.git`.
Or using `poltergeist` instead of `capybara-webkit` as your [JavaScript driver](https://gist.github.com/barmstrong/21dcb9f17e328c71c9af#file-spec_helper-rb-L54) > @barmstrong
",tricknotes,2013-04-11 06:31:44
1046,2013-04-11 05:15:20,"Hmm, switched to `poltergeist`.  Now I am seeing `NotImplementedError` on the second line of this:

<S_CODE_TOKEN>

So `visit` worked.  But not `has_content?`
",barmstrong,2013-04-11 06:31:44
1046,2013-04-11 05:20:28,"If I run that from within the test in `spec/features/some_spec.rb` it works as expected.

But if I move that code into a helper method in `spec/support/my_app_dsl.rb` I get the `NotImplementedError` error.
",barmstrong,2013-04-11 06:31:44
1046,2013-04-11 05:44:12,"Ok got it working.  These provided the solution:

http://stackoverflow.com/questions/8192559/where-how-to-include-helper-methods-for-capybara-integration-tests
http://robots.thoughtbot.com/post/33771089985/rspec-integration-tests-with-capybara

Basically I had to do:

<S_CODE_TOKEN>

Tough one!  Thank you everyone for the help.
",barmstrong,2013-04-11 06:31:44
1046,2013-04-11 06:00:50,"Spoke too soon.  Works as long as I do not have `js: true` on the test.

Once I add that, it switches back to `NotImplementedError` on on anything like `page.has_content?('Sign Out')` (first example it hits).

Really strange.
",barmstrong,2013-04-11 06:31:44
1046,2013-04-11 06:19:48,"Poltergeist doesn't support Capybara 2.1 too
",abotalov,2013-04-11 06:31:44
1046,2013-04-11 06:31:44,"Yup just stumbled across this: http://stackoverflow.com/questions/15931464/notimplementederror-when-switching-to-poltergeist

Thanks for the help!
",barmstrong,2013-04-11 06:31:44
1046,2013-04-11 09:52:06,"Here is what I ended up with in my Gemfile.  (had to get poltergeist from master for it to work - the 1.1.0 branch wasn't doing some ajax actions correctly).

<S_CODE_TOKEN>

It's been slow going, but getting closer.
",barmstrong,2013-04-11 06:31:44
1045,2013-04-09 21:05:50,"keep up the good work.
",ricn,2013-04-10 07:13:14
1045,2013-04-10 07:13:02,"Best pull request ever! :trollface: 

Unfortunately, merging this wouldn't really be cool. Damn, that big green Merge button has never been so tempting.
",jnicklas,2013-04-10 07:13:14
1044,2013-04-09 13:14:44,"I need page.driver.head and page.driver.options
I added

<S_CODE_TOKEN>

then i got collision between Capybara::RackTest::Browser#options and forwarded method Rack::Test::Methods#options.
My temporary solution

<S_CODE_TOKEN>
",a0s,2013-04-09 14:51:39
1044,2013-04-09 14:51:38,"Please read this: http://www.elabs.se/blog/34-capybara-and-testing-apis
",jnicklas,2013-04-09 14:51:39
1043,2013-04-09 07:41:07,"'Text' was specified twice in the param of click_link's RDoc.  Remove it.
",awilfox,2013-04-10 07:10:14
1043,2013-04-10 07:10:18,"Thanks!
",jnicklas,2013-04-10 07:10:14
1042,2013-04-08 18:27:11,,parndt,2013-04-08 19:43:59
1042,2013-04-08 19:07:30,"Under what conditions does the current code fail, since with this change it will fail if/when rails reaches v10 (Yes we'll probably all be dead by then and its really not worth worrying about rails 10 today :)  but it would be good to know what problems the current to_f actually has)
",twalpole,2013-04-08 19:43:59
1042,2013-04-08 19:43:59,"Looks like it has already been fixed - see https://github.com/jnicklas/capybara/pull/1024 that resulted in  https://github.com/jnicklas/capybara/commit/78e3a488291fcc28e8293a25f3d5f1e95741d362
",abotalov,2013-04-08 19:43:59
1042,2013-04-08 20:44:58,"Oh awesome - I saw this on a fork I was using so decided to see if it would go into upstream. Thanks for pointing out #1024 :+1: 
",parndt,2013-04-08 19:43:59
1042,2013-04-08 21:05:00,"Just for completeness - this change was needed due to a change in rails 4 edge when Rails.version was changed to return a Gem::Version .  That change has since been reverted in rails.  This PR as submitted would still have been buggy but the change commited https://github.com/jnicklas/capybara/commit/78e3a488291fcc28e8293a25f3d5f1e95741d362 fixes it properly in case rails switches back to returning a Gem::Version 
",twalpole,2013-04-08 19:43:59
1041,2013-04-08 15:56:25,"Selenium Webdriver returns Javascript property instead of attribute in response to `#attribute` method. Look at:
https://code.google.com/p/selenium/issues/detail?id=1634
https://code.google.com/p/selenium/issues/detail?id=1824
https://code.google.com/p/selenium/issues/detail?id=5253
https://github.com/jnicklas/capybara/issues/43

Also this behavior isn't well documented in Selenium - https://selenium.googlecode.com/svn/trunk/docs/api/rb/Selenium/WebDriver/Element.html#attribute-instance_method, https://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name

I haven't checked how other Capybara drivers like Capybara-Webkit and Poltergeist behave but for sure Racktest will return actual attribute instead of JS property so we have inconsistency in driver behavior.

Can we do something to make behavior of `Capybara::Node::Element#[]` more consistent? WDYT?
",abotalov,2013-04-20 20:18:53
1041,2013-04-08 16:46:49,"Racktest doesn't do JS so all it can return is the actual attributes from the document. 
From the documentation for Selenium::WebDriver::Element#attribute

> More exactly, this method will return the value of the given attribute, unless that attribute is not present, in which case the value of the property with the same name is returned. If neither value is set, nil is returned ...  The following are deemed to be ""boolean"" attributes, and will return either ""true"" or ""false"":
> async, autofocus, autoplay, checked, compact, complete, controls, declare, defaultchecked, defaultselected, defer, disabled, draggable, ended, formnovalidate, hidden, indeterminate, iscontenteditable, ismap, itemscope, loop, multiple, muted, nohref, noresize, noshade, novalidate, nowrap, open, paused, pubdate, readonly, required, reversed, scoped, seamless, seeking, selected, spellcheck, truespeed, willvalidate

If this is returning the property instead of the attribute, when the attribute exists and isn't one of the ""boolean"" attributes, then it sounds like a bug in selenium (either in behavior or in documentation), and should probably be filed as such with Selenium.  
  That being said, I believe most users usually want to be checking the property values since those are what JS is typically modifying and why be running in a real browser if not for the JS support? Changing [] from its current behavior could create all sorts of issues for peoples current tests.
",twalpole,2013-04-20 20:18:53
1041,2013-04-08 21:32:28,"It's [a bug in Selenium rubydocs](https://code.google.com/p/selenium/issues/detail?id=5463). Correct documentation is in Webdriver spec - http://www.w3.org/TR/webdriver/#reading-attributes-and-properties

Should all Capybara drivers behave in the same way as shown in this spec? WDYT?
",abotalov,2013-04-20 20:18:53
1041,2013-04-09 00:56:24,"So it seems like Selenium correctly implements the WebDriver spec as far as properties and attributes, and RackTest does what it can on that front.  RackTest potentially fails on the URLs being fully resolved for a href, and img src (havent actually checked what it returns) which may be worth matching up to the selenium webdriver behavior.  Then we would need to provide a way to get the raw attribute or document somewhere how to access it (in Selenium you have to use JS)
",twalpole,2013-04-20 20:18:53
1041,2013-04-14 14:13:04,"I'm okay with the status quo on this. Let's not bog ourselves down in details like this unless it actually seems to matter to people. I don't think this is hugely important.
",jnicklas,2013-04-20 20:18:53
1041,2013-04-19 18:43:24,"I'm closing this since it doesnt seem theres anything worth doing here
",twalpole,2013-04-20 20:18:53
1041,2013-04-20 08:20:23,"> Let's not bog ourselves down in details like this unless it actually seems to matter to people.

It matters at least to me as drivers should behave in the same way!
At the moment in Selenium `#[]` returns property instead of attribute. It does so [to reduce incompatabilities between drivers](http://stackoverflow.com/a/10280487/841064)

We can fix that in two ways:
1. Use javascript's `getAttribute` to retrieve element's attribute in Selenium. But it will be incompatible between different browser engines and Capybara should try to reduce incompatabilities. Also it will be incompatible with this - https://github.com/jnicklas/capybara/issues/43 
2. Document that driver should try to return or emulate return of Javascript property instead of attribute

Currently drivers do the following:
- [Capybara-Webkit tries to emulate property a bit](https://github.com/thoughtbot/capybara-webkit/blob/master/lib/capybara/webkit/node.rb#L12)
- [Poltergeist just returns attribute instead of property](https://github.com/jonleighton/poltergeist/issues/275)
",abotalov,2013-04-20 20:18:53
1041,2013-04-20 08:28:42,"I think it's better to get Capybara-Webkit and Poltergeist to return property instead of attribute than use `getAttribute` to return attribute in Selenium
",abotalov,2013-04-20 20:18:53
1041,2013-04-20 19:14:19,"@aboltalov - Selenium prefers property over attribute because 99.9% of the time when testing the user really wants the property and not the attribute (if there is a difference between the them).  If this is really an issue for you then maybe bugs filed in Capybara-Webkit and Poltergeist would be the best thing and a pull request to make the racktest driver handle the boolean attributes and url attributes as specified in the WebDriver spec.  I dont see how ""Selenium returns property instead of attribute when #[] is invoked"" is actually a bug in capybara?
",twalpole,2013-04-20 20:18:53
1040,2013-04-05 07:57:09,"To support cases where you want to select one of multiple checkboxes. After adding option filter **filter(:option)  { |node, value|  node.value == value }** to **:checkbox** you can use following syntax 

<S_CODE_TOKEN>

HTML: 

<S_CODE_TOKEN>

lib/capybara/selector.rb:

<S_CODE_TOKEN>

At first I thought to clone and add corresponding specs, but I didn't find selector specs.
",legendetm,2013-10-20 17:59:16
1040,2013-04-26 20:11:19,"Why don't you check your checkboxes using their labels?

Probably your page has a label for each one of them, so you could simply do `check('Users')`
",carloslopes,2013-10-20 17:59:16
1040,2013-04-27 10:58:36,"I don't want to use any locale dependencies in my cucumber tests. I follow links by url and fill forms by input names.

<S_CODE_TOKEN>

And the only input type I cannot fill this way by default is a checkbox with multiple values.
",legendetm,2013-10-20 17:59:16
1040,2013-04-28 18:59:17,"hm got it.. and yeah, the `#check` method doesn't filter by value...

I avoid to do my tests filtering by name or id because i always try to simulate the real user behavior..

@jnicklas  what do you think about this? 
",carloslopes,2013-10-20 17:59:16
1040,2013-05-01 19:07:26,"I believe that using this method I simulate real user behavior as well, just without using locales. Translations changes at times and I don't want that to brake my tests.

To be more precise, rails uses input names like _user[name]_ where 
- user is taken from step name _And fill in **user** form with correct data_
- name and content from step table _| **name** | **Mr Koogel Moogel** |_
",legendetm,2013-10-20 17:59:16
1040,2013-10-20 17:59:33,"There you go, sorry for the late reply ;)
",jnicklas,2013-10-20 17:59:16
1039,2013-04-03 02:24:33,"My code:

<S_CODE_TOKEN>

My log:

<S_CODE_TOKEN>

My test does not pass because it just does not wait for the creation of the question. If I remove the within block, here is the log:

<S_CODE_TOKEN>
",daniel-g,2013-10-20 16:35:45
1039,2013-04-05 07:56:40,"I can't see any reason why this wouldn't work. Since this is fairly standard usage, can you recreate an executable test case? You can start here: https://gist.github.com/jnicklas/5137053
",jnicklas,2013-10-20 16:35:45
1039,2013-04-05 07:58:58,"It seems this is an issue that belongs to capybara-webkit. I will checkout the master branch and try again.
",daniel-g,2013-10-20 16:35:45
1039,2013-04-14 14:14:35,"Any news on this? Can I close this issue?
",jnicklas,2013-10-20 16:35:45
1038,2013-04-02 22:15:44,"I think it's good to reset sessions in all cases where it doesn't lead to increase of test execution time.

But in some cases it will be useful not to reset sessions after each scenario to:
1. make checks for the same page in different scenarios
2. minimize test execution time by not visitng that page before each scenario

I know that I can remove `require 'capybara/cucumber'` from `env.rb` and make tests to use own `cucumber.rb` but I think it should be possible to do it without that ""monkeypatching""

I think `@no_reset_sessions` shouldn't be documented in README.md as I think this feature is dangerous and thus it should be a bit harder to find information about it.
",abotalov,2013-04-03 19:35:03
1038,2013-04-02 22:19:33,"Previously it was discussed in https://github.com/jnicklas/capybara/pull/419 but I don't like implementation there as I think it's good to reset sessions everywhere where it won't involve significant increase of test execution time
",abotalov,2013-04-03 19:35:03
1038,2013-04-03 17:19:17,"This introduces issues with test ordering,  backgrounds in your feature, and numerous other potential quirks with features.  Also adding special undocumented features to a library doesnt seem to be the direction we should be going.  I think this is unnecessary and a bad idea, especially considering how easy it is for someone to implement themselves if they need it and understand the issues it brings with it.  Maybe a page for the wiki instead?
",twalpole,2013-04-03 19:35:03
1038,2013-04-03 19:35:03,"I agree with @twalpole, we should not be facilitating craziness like this.
",jnicklas,2013-04-03 19:35:03
1038,2013-04-03 19:41:35,"With this PR user decides himself to use it or not `@no_reset_sessions`. I see a problem with providing own `cucumber.rb` file that if unrelated changes to this file are made in Capybara repo, they don't become available in code of user tests and user of API should check Capybara's source code to find out if it was changed.
",abotalov,2013-04-03 19:35:03
1038,2013-04-03 20:16:25,"@abotalov if checking for changes to cucumber is really an issue, then you could add a Before step that stores the scenario and alias reset_sessions! to check for your tag name on the stored scenario and not call the original reset_sessions if the tag exists.  That way you get your desired ability to turn off session reset in your own code without worrying about cucumber.rb changing and without having to add a dangerous undocumented ""feature"" to capybara
",twalpole,2013-04-03 19:35:03
1038,2013-04-03 21:34:34,"Actually I'm not against documenting it in README.md. I just thought it's better not to write about it there.

Also I haven't understood @twalpole's comment. In current implementation after scenario hook will reset sessions after each scenario regardless of any tags. I don't know how before step hooks can help not to reset sessions in after hook.
",abotalov,2013-04-03 19:35:03
1038,2013-04-03 21:46:18,"@abotalov  -  And your reasoning for not documenting it, it being dangerous and having numerous iffy side-effects, is the exact reason I think it doesnt belong in capybara, and generally isnt a good idea to be suggesting people do in testing.  If its a test that needs the sesion to not be reset then its really one scenario and not two.  If its strictly for speed then look into tokens for login and/or bypassing part of authentication during testing.  As for how your own code can implement it given the current setup and without worrying about changes to cucumber.rb:  in a Before step you can store the scenario that is passed in into a global or instance variable somewhere.  Then you can alias the normal capybara reset_sessions!  with your own function that either calls the original reset_sessions! or doesnt based on the tags on the scenario you stored in the before step. 
",twalpole,2013-04-03 19:35:03
1038,2014-01-05 00:30:03,"I was thinking it could be cool to use a "" spec "" and capybara as a benchmarking tool, creating thousands of users with a loop and Faker-augmented factories, making them all interact with each other, and seeing how long everything takes. For that you'd need to stop the session being cleansed between tests. 

Just my 2 cents though, and twalpole's probably right. 

I think it would be nice to have the option though. Don't even include it in the README.md, it would just be nice to have the option for googlers looking to do something a little bit esoteric with capybara.
",Jinxy5,2013-04-03 19:35:03
1038,2014-01-05 02:50:51,"if people are looking for it and would like to use it then it seems like a wiki page or docs is a better idea. it's not always a good idea to let dangerous ideas flow through the keyboards of those who might not be aware of the dangers.
",ghost,2013-04-03 19:35:03
1037,2013-04-01 23:15:32,"Add an official notification API for handling alerts, confirms and prompts. See README for API usage.

The default naming is singular because Capybara ships with a Selenium driver which can only deal with a single alert/confirm/prompt at a time. While other drivers can support multiple notifications, I figured it would be best to stay consistent with Capybara core. I did, however, alias the methods in their plural form so that they would read better when dealing with multiple notifications.
",mikepack,2014-06-03 20:17:11
1037,2013-04-02 12:39:02,"Wow this is very impressive. I'm intent on pushing Capybara 2.1 RC1 very soon, so this will not make it into Capybara 2.1, as it will take some further deliberation before we can get this merged. Just wanted to point that out up front.

A few things I noticed:
1. We metaprogram in all other methods in the session, why not do the same with NOTIFICATION_METHODS?
2. This API should be opt-in for driver authors, so it should have it's own `:requires` metadata, so that driver authors can skip it if they desire.
3. I find the utility of confirming multiple prompts/alerts/confirms dubious, especially since we can't mix and match with the suggested API. There is no way to handle both a prompt and a following alert, so why bother with this at all?
4. The surfact area towards drivers is very large, do we really have to add that many methods?
5. I'm concerned about synchronization. Capybara should not leave that up to the driver. If for example the alert appears due to an async process 50ms later than the action that was supposed to trigger it, then Capybara should be able to handle that, and that should work without the driver authors having to do anything special, just as it does with elements.

Finally, let's get the driver authors involved in this discussion, @jferris, @jonleighton, @mhoran, @jcoglan, any comments on this?
",jnicklas,2014-06-03 20:17:11
1037,2013-04-02 20:30:06,"Awesome feedback. I considered this a starting point for discussion more than a complete solution anyway. I'll make a couple additional commits based on this discussion and squash before merging.
<br>

`1. We metaprogram in all other methods in the session, why not do the same with NOTIFICATION_METHODS?`

I'm not entirely sure what you mean here. Can you elaborate?
<br>

`2. This API should be opt-in for driver authors`

I'm assuming you are referring to the the metadata for specs. How does `:requires => [:notifications]` sound?
<br>

`3. I find the utility of confirming multiple prompts/alerts/confirms dubious`

I'm in agreement here, and it would improve consistency across drivers. I'd be in favor of supporting only one response. However, it would be impossible to test some cases, for example: when a single user interaction produces multiple prompts, maybe for a wizard-like experience.
<br>

`4. The surfact area towards drivers is very large, do we really have to add that many methods?`

I've thought through this a bit, and think I can reduce the driver API down to either one or two additional methods, depending on preference.

_Option one:_

<S_CODE_TOKEN>

Arguments:
**type:** :alert, :confirm, or :prompt
**accept:** true or false
**responses:** an array of optional responses
**bkl:** the code that produces a notification

_Option two:_

<S_CODE_TOKEN>

<S_CODE_TOKEN>

The motivation behind option two is to eliminate the boolean argument and the responses which are never applicable when rejecting a notification.
<br>

`5. I'm concerned about synchronization.`

I'll play with this a bit.
",mikepack,2014-06-03 20:17:11
1037,2013-04-04 14:27:52,"1. I'm talking about something like this: https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L351-L356
2. Exactly, sounds perfect!
3. I think this use case is sufficiently rare that we can ignore it for now.
4. I like the second option
",jnicklas,2014-06-03 20:17:11
1037,2013-04-04 21:25:04,"Alright, I've made some updates. A few comments:

Previously, it seemed like it might make sense to metaprogram the notification methods because there was a strong parity between the session and driver method names. Now that the driver methods have changed, it doesn't seem to be as applicable. I'd be interested to hear I'm wrong, however.

I've added a couple async specs, though I'm not entirely sure it's covering all bases. I would expect [this spec](https://github.com/mikepack/capybara/blob/03ff594e19b29b9cc82bdbea05adc783e6d82594/lib/capybara/spec/session/accept_alerts_spec.rb#L14-L19) to pass because of the synchronization around `#have_xpath`. However, I expected [this spec](https://github.com/mikepack/capybara/blob/03ff594e19b29b9cc82bdbea05adc783e6d82594/lib/capybara/spec/session/alert_messages_spec.rb#L30-L35) to fail because the link would be clicked and the browser session would terminate, leaving `#alert_messages` empty. It seems that Selenium is blocking on the link click and doing it's own synchronization. Feels like I'm missing something...
",mikepack,2014-06-03 20:17:11
1037,2013-04-04 22:12:21,"Whats the point in adding alert_messages, confirm_messages, and prompt_messages to the session.  Each call to accept/reject_notification returns the text for the box confirmed/rejected so when would a tester ever want to check that later rather than when accepting/rejecting the box, and if they would ever want to is it common enough to warrant 3 new methods on the session?
",twalpole,2014-06-03 20:17:11
1037,2013-04-04 22:55:28,"@twalpole Good point, I partially agree. Yes, accept/reject_notification returns the text, but readability would suffer if we removed the message accessors, in my opinion. Specifically, because the text is assigned above the line where the alert is clicked. Granted, this is also the case for accepting/rejecting. The name `#accept_alert` doesn't lend itself to returning the text, either.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

All that said, I would be in favor of removing the message accessors.
",mikepack,2014-06-03 20:17:11
1037,2013-04-04 23:07:53,"@mikepack - btw the reason the test you think should fail doesn't is that the javascript code used by selenium for the firefox driver (havent checked others) has an alertTimeout which it will wait for a modal dialog to show https://github.com/SeleniumHQ/selenium/blob/master/javascript/firefox-driver/js/firefoxDriver.js  .  Its set to 2 seconds by default, so you'll need to figure out if its possible to shorten that timeout in some cross browser fashion or extend your delay on the alert - and then the test will fail with a Selenium::WebDriver::Error::NoAlertPresentError
",twalpole,2014-06-03 20:17:11
1037,2013-04-04 23:11:11,"@mikepack I dont think having a var for the return really hurts readability much, and I think its better than the accessors where values ""magically"" appear but not until you've accepted or rejected the alert.  e.g. at a quick glance I might assume that alert_messages would include the message for the alert currently on the screen, but it doesnt until I call accept or reject
",twalpole,2014-06-03 20:17:11
1037,2013-04-04 23:38:28,"@twalpole Thanks for the tip, I'll mess with the timeouts.

I could see the potential confusion around alert_messages; this is how capybara-webkit surfaces the message, though I don't know the general sentiment towards it.

Having alert_messages could also cause confusion if used in conjunction with manual management of the notification. The alert must be wrapped with accept/reject to populate any messages. Eg:

<S_CODE_TOKEN>
",mikepack,2014-06-03 20:17:11
1037,2013-04-05 07:32:54,"What about?

<S_CODE_TOKEN>
",abotalov,2014-06-03 20:17:11
1037,2013-04-05 07:52:52,"This is shaping up quite nicely, @mikepack.

I think I agree with @twalpole, the `alert_messages` style accessors are confusing, and I think it's better to skip them. I think the most common use case is not to care about the message of the alert at all. One thing that _would_ be useful, imo, is something like this:

<S_CODE_TOKEN>

I think that gives a more elegant API to the most common reason one might want to look at alert/confirm messages in the first place, to make sure that we're confirming the right one. What do you think?

@abotalov that's too RSpec specific, imo. We might want to add matchers around that particular API, but honestly I don't really see the point.
",jnicklas,2014-06-03 20:17:11
1037,2013-04-05 07:53:30,"@mikepack also, can you shorten the README section a bit. It's very longwinded, imo.
",jnicklas,2014-06-03 20:17:11
1037,2013-04-05 08:04:02,"<S_CODE_TOKEN>

It's short but I think it's not too good that row  `""Are you sure?""` is before `click_link ""Delete""` which doesn't conform to real sequence of events.

Variant that I proposed conforms to real sequence of events.

But it's more about personal preference
",abotalov,2014-06-03 20:17:11
1037,2013-04-05 08:12:44,"@abotalov well, `accept_confirm` doesn't conform to the sequence of events either, but that's just a sacrifice we have to make to allow wider support in drivers. I'd rather that `accept_confirm` didn't take a block, and always appeared after the action that triggered the alert to appear. I.e. this:

<S_CODE_TOKEN>

Unfortunately, it seems like that's not technically possible in some drivers, from what I understand.
",jnicklas,2014-06-03 20:17:11
1037,2013-04-05 16:15:53,"@jnicklas the `accept_confirm` after the fact approach would definitely be harder in capybara-webkit, but if it's agreed that it would be a much better API, I could do some spiking to see if it's possible.
",jferris,2014-06-03 20:17:11
1037,2013-04-05 16:23:48,"I've updated the README to be more succinct and removed the message accessors.

@jnicklas while passing the expected message to accept/reject, if the actual message presented does not match the expectation, would you assume this throws an error? If so, the implicit expectation here is a little unclear.

@jferris thanks a ton. I'm interested in your results.
",mikepack,2014-06-03 20:17:11
1037,2013-04-05 16:30:31,"@jferris if it's not too much bother, that would be excellent. I would definitely prefer an API without blocks if it's possible. I think Selenium supports that nicely.

@mikepack I would expect `accept_confirm` to raise an error if there is no confirm box to accept, so if passed an argument, it should raise an error if the text does not match.
",jnicklas,2014-06-03 20:17:11
1037,2013-04-05 16:51:26,"@jnicklas Just to confirm 

>  I would expect accept_confirm to raise an error if there is no confirm box to accept, so if passed an argument, it should raise an error if the text does not match.

Those errors would only be raised after the appropriate wait time, using synchronize, correct?
",twalpole,2014-06-03 20:17:11
1037,2013-04-05 16:55:06,"@mikepack it would be great if these methods could accept a regex or a string to match against the text in the alert
",twalpole,2014-06-03 20:17:11
1037,2013-04-05 17:14:33,"@mikepack  The current PR has methods for dealing with alerts, confirms, and prompts in the session with these all calling accept/reject_notification, but not passing pass a type.  I know selenium doesnt differentiate between the 3 different types but are you sure the other drivers dont?  I notice your ""Option Two"" from above did have a type parameter.
",twalpole,2014-06-03 20:17:11
1037,2013-04-05 17:26:12,"@twalpole Good catch! Updated.
",mikepack,2014-06-03 20:17:11
1037,2013-04-05 18:45:49,"Do you think it would be better to put added specs to a subfolder of `spec/session`to reduce a number of files?
",abotalov,2014-06-03 20:17:11
1037,2013-04-05 18:52:58,"if I was writing those specs I think I'd put them all in one file, notifications_spec or modal_spec or something since they are basically all the same thing.  @jnicklas what are your feelings on that?
",twalpole,2014-06-03 20:17:11
1037,2013-04-05 18:57:29,"@abotalov @twalpole The reason I put them into separate files is to keep consistency with all the rest of the DSL methods: `all`, `click_link`, `execute_script`, etc as `all_spec.rb`, `click_link_spec.rb`, `execute_script_spec.rb`, etc
",mikepack,2014-06-03 20:17:11
1037,2013-04-05 19:05:46,"@mikepack I get completely why you created the multiple files, and it does fit with the way everything else is setup (other than they should be accept_alert_spec.rb instead of accept_alerts_spec.rb etc)
",twalpole,2014-06-03 20:17:11
1037,2013-04-05 19:11:25,"@twalpole Another great catch. Updated.
",mikepack,2014-06-03 20:17:11
1037,2013-04-10 07:18:08,"I'd personally be cool with having just one file, even though it is slightly inconsistent, but I don't really mind either way.
",jnicklas,2014-06-03 20:17:11
1037,2013-04-10 08:36:34,"I'd want to propose to put most of specs into different folders:

<S_CODE_TOKEN>
",abotalov,2014-06-03 20:17:11
1037,2013-04-10 16:03:49,"@jnicklas @abotalov I'd be in favor of subdirectories, but this is a little off topic for this PR :smile:. Spending some time today in capybara-webkit
",mikepack,2014-06-03 20:17:11
1037,2013-04-18 16:49:29,"@jferris Any update on your spike?
",mikepack,2014-06-03 20:17:11
1037,2013-04-18 17:14:31,"@mikepack I haven't gotten to look at it yet. I'll spend some time on it tomorrow. Thanks for the push.
",jferris,2014-06-03 20:17:11
1037,2013-04-18 17:19:56,"@jferris Thanks Joe. Some of my notes here: https://github.com/thoughtbot/capybara-webkit/issues/506
",mikepack,2014-06-03 20:17:11
1037,2013-04-19 14:27:59,"@mikepack I did some research today and added notes to thoughtbot/capybara-webkit#506.
",jferris,2014-06-03 20:17:11
1037,2014-03-09 14:19:02,"I see the following issues in this pull request:
1. Those things are called modal dialogs (http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#simple-dialogs). Notifications are different things - http://notifications.spec.whatwg.org/
2. Webdriver is in the process of W3C standartization (https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html) and therefore it's better to stick with its terminology and use `dismiss` instead of `reject`. Also after it will become W3C standard there won't be sense for Capybara to wait for a particular feature to be implemented in Capybara-Webkit/Poltergeist/whatever. Following W3C standard is enough :smirk:. Also Webdriver has phantomjs driver and it doesn't seem to be worse than poltergeist.

The following API usage seems good enough to me:

<S_CODE_TOKEN>
",abotalov,2014-06-03 20:17:11
1037,2014-03-09 20:04:39,"On Sun, Mar 09, 2014 at 07:19:08AM -0700, Andrey Botalov wrote:

> I see the following issues in this pull request:
> 1. Those things are called modal dialogs (http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#simple-dialogs). Notifications are different things - http://notifications.spec.whatwg.org/
> 2. Webdriver is in the process of W3C standartization (https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html) and therefore it's better to stick with its terminology and use `dismiss` instead of `reject`. Also after it will become W3C standard there won't be sense for Capybara to wait for a particular feature to be implemented in Capybara-Webkit/Poltergeist/whatever. Following W3C standard is enough :smirk:. Also Webdriver has phantomjs driver and it doesn't seem to be worse than poltergeist.

While I agree implementing the standard makes sense, leaving existing
users of Poltergeist or capybara-webkit out in the cold is not a great
option. Each of these testing tools, unfortunately, has their own set of
bugs which users have crafted test suites around, and they cannot be
used interchangeably without effort.

I believe someone had looked into implementing this API for
capybara-webkit. I'm not sure where Poltergeist is regarding the API.
However, if it's possible with Poltergeist then it's likely possible in
capybara-webkit. What I'd like to know is if the Webdriver alert API
works with the PhantomJS driver. If it does, then we should be able to
implement the API in Poltergeist and capybara-webkit.

Cheers.

## 

Matt Horan matt@matthoran.com http://matthoran.com/
",mhoran,2014-06-03 20:17:11
1037,2014-03-09 20:21:27,"Ghostdriver doesn't support that part of Webdriver API - https://github.com/detro/ghostdriver/issues/20
",abotalov,2014-06-03 20:17:11
1037,2014-03-24 16:51:21,"@abotalov in terms of naming, I agree we should stick to the spec as much as possible.

The spec seems to only support reactive dialog management. As the issue you linked to points out, phantom doesn't accommodate this approach. So, the goal of this PR is to support both proactive and reactive management, which is why this PR currently wraps such behavior in a block.

Proactive management in headless drivers (eg capybara-webkit, poltergeist, ghostdriver) looks like this:
1. Developer takes actions on forthcoming prompts
2. Page ""displays"" prompt, but because it's headless does not block
3. Make assertions about the prompt messages cached by driver

Reactive management in Selenium looks like this:
1. Page displays prompt and blocks UI until action is taken
2. Make assertions about the message contents
3. Developer explicitly takes action to close dialog

Can you provide examples of how your proposed API would accommodate both of these cases?
",mikepack,2014-06-03 20:17:11
1037,2014-04-02 23:28:58,"@mikepack Any chance of getting this PR rebased against current master and the naming changes @abotalov mentioned integrated, I'd like to move forward with getting this finished up and integrated.   I agree that the block passing method is probably the only way to currently allow this feature to be implemented by all/most of the current drivers available, so unless @abotalov has a suggestion for how the API can work with the headless-drivers I think we can move forward with the current approach
",twalpole,2014-06-03 20:17:11
1037,2014-04-03 03:35:09,"@twalpole I've rebased off master, replaced instances of ""reject"" with ""dismiss"", and ""notification"" with ""modal"".
",mikepack,2014-06-03 20:17:11
1037,2014-04-03 07:15:09,"I would prefer to wait for response to https://www.w3.org/Bugs/Public/show_bug.cgi?id=24979 to be made in Webdriver W3C bug tracker.

I think W3C specs are important and IMO it would be better to provide similar non-block API instead of rolling block one. Maybe, @AutomatedTester will be able to say something about it.
",abotalov,2014-06-03 20:17:11
1037,2014-04-03 17:58:57,"@abotalov  Ok - we can hold off a little while, but I would like to get this functionality into Capybara in the next few weeks, and in a way that all/most of the current drivers can implement.  Currently that looks to be with the block format, since prior knowledge of a modal dialog about to be opened, and the desired response seems to be needed by some of the drivers.
",twalpole,2014-06-03 20:17:11
1037,2014-04-04 17:20:22,"@mikepack - The async tests are failing since there is no code after executing the block that is waiting for the modal to appear
",twalpole,2014-06-03 20:17:11
1037,2014-04-04 17:22:48,"@mikepack - also if you could update the tests to the ""expect"" format rather than should due to the upcoming RSpec 3 that would be great -- thanks
",twalpole,2014-06-03 20:17:11
1037,2014-04-04 17:24:02,"@twalpole Yeah I noticed that as well. I'll do another pass and get everything passing.
",mikepack,2014-06-03 20:17:11
1037,2014-04-23 11:59:49,"Sorry for taking so long to reply. 

switchTo.Alert() is not described in the webdriver specification since it a purely local end API. We make the assumption that the remote end will still have access to modals no matter which context we are in. We are not switching windows (the Javascript sense) so we don't have to change any contexts on the remote end.

Hope that helps
",AutomatedTester,2014-06-03 20:17:11
1037,2014-04-24 07:56:53,"I think I'm fine with merging this after issues pointed by @twalpole will be fixed.

However, what about naming a method `accept_alert_on` instead of `accept_alert`? IMO it would enhance readability.
",abotalov,2014-06-03 20:17:11
1037,2014-06-03 19:24:51,"I've merged this into the modal branch - and then added wait and text options, to allow for adjustable wait times (selenium has its own 2 second wait so for selenium this actually only works in multiples of 2 seconds) and for matching the text of the modal before accepting/dismissing - comments welcome -- if there are no concerns I will merge into master in a few days
",twalpole,2014-06-03 20:17:11
1037,2014-06-03 19:55:36,"@twalpole It would be also good to add more info to yard comments:

<S_CODE_TOKEN>

Also it would be good to make a pull request from modal to master branch. I think commit comments will have better visibility.
",abotalov,2014-06-03 20:17:11
1037,2014-06-03 20:17:11,"Closing this PR - its continued on PR #1322 
",twalpole,2014-06-03 20:17:11
1037,2014-06-03 20:22:25,"Apologies for the lack of movement. I'm not sure how I got this far without handling the async case that @twalpole mentioned (though I thought I tested it). One of the problems with it is that it would require the same wait logic that happens on `#synchronize`. I didn't want to dive too deep into sharing that logic.
",mikepack,2014-06-03 20:17:11
1037,2014-06-03 21:45:56,"@mikepack  - it did work with async - but only because selenium itself has a 2 second wait for modal boxes.  I implemented somewhat adjustable delays using the wait functionality built into selenium-webdriver. Its only somewhat because of the selenium 2 second delay which means it actually ends up being multiples of 2 seconds.  Anyway -- no problem for the lack of movement you had it mostly done - I've moved it over to PR #1322 if you want to see what I added to your PR
",twalpole,2014-06-03 20:17:11
1036,2013-04-01 10:30:58,"I guess the last one is enough.
",arr-ee,2013-04-01 10:32:09
1036,2013-04-01 10:32:15,"thanks!
",jnicklas,2013-04-01 10:32:09
1035,2013-03-29 17:53:35,"Another strange issue - running consecutive specs using selenium driver hangs (as in the browser window remains open, but it does not load the page). Changing to webkit driver works fine, and running individual specs using selenium works fine. Something is stopping consecutive specs running in selenium - has anyone come across this?
",wakiki,2014-01-06 15:18:04
1035,2013-03-29 17:55:49,"Capybara resets sessions in After hook:
https://github.com/jnicklas/capybara/blob/master/lib/capybara/cucumber.rb#L9
https://github.com/jnicklas/capybara/blob/master/lib/capybara/rspec.rb#L14

It's done to ensure that state isn't shared between specs/scenarios
",abotalov,2014-01-06 15:18:04
1035,2013-03-29 18:01:32,"Hi @abotalov - this sounds like it could be related 

Currently at the top of acceptance_helper.rb I already have:

require ""spec_helper""
require 'capybara/rspec'
require 'rspec-rails'

Not sure what I need to do to fix it? 

Any help would be appreciated.
",wakiki,2014-01-06 15:18:04
1035,2013-03-29 18:11:55,"This behavior (not preserving state from previous specs/scenarios) is intentional as it's considered a good practice to have all scenarios independent from each other.

I know a man that ""fixes"" that by using a fork of Capybara with rows I linked to removed
",abotalov,2014-01-06 15:18:04
1035,2013-03-29 18:15:12,"Ah right I'm referring to a different issue - when running consecutive specs using the selenium driver using a command such as:

rspec spec/acceptance/some_dir/**

will open chrome, run the first spec, then the second spec will start and it will hang with a blank page in chrome. The URL will say something like 'http://127.0.0.1:8973' or some port and chrome will just have a 'loading' status and hang.

If I open another chrome browser and paste in the same URL it works fine.

Hope that makes sense and describes the problem better?
",wakiki,2014-01-06 15:18:04
1035,2013-03-29 18:16:59,"After 120 secs the spec will fail with 'Timeout::Error'
",wakiki,2014-01-06 15:18:04
1035,2013-05-02 11:22:30,"We're having the same issues. Sometimes when a new feature starts chrome just opens up, the URL is there, but the loader jsut keeps spinning without any response, or page loading. 
",sztupy,2014-01-06 15:18:04
1035,2013-05-02 11:35:28,"I never figured out what the problem was, and I had to switch to webkit instead which was a bit annoying. @sztupy if you do figure it out please do let me know thanks
",wakiki,2014-01-06 15:18:04
1035,2013-05-02 11:36:43,"What operating system and version you're using?
",sztupy,2014-01-06 15:18:04
1035,2013-05-02 11:39:58,"OS X Mountain lion
",wakiki,2014-01-06 15:18:04
1035,2013-05-02 11:41:32,"Thought so. We didn't have problems on either Linux or OS X Lion.
",sztupy,2014-01-06 15:18:04
1035,2013-05-02 14:20:50,"Just replaced chromedriver with the new chromedriver2, and modified selenium-webdriver to work with it, and I didn't had any issues since that. I uploaded the modified chromedriver-helper and selenium-webdriver gems to github:

https://github.com/sztupy/chromedriver-helper
https://github.com/sztupy/selenium-webdriver

only tested on OS X 10.8.3
",sztupy,2014-01-06 15:18:04
1035,2013-07-17 23:12:37,"We're having this same issue on OS X 10.8.4. We were using an old version of chromedriver (pre 2.0) and I upgraded it to 2.1 which at first seemed to fix this issue. But a couple days later we still got test failures of this nature, but they're intermittent. They do seem to be much more rare now, but there still seems to be something wrong and it's very hard to debug. I'm not sure this is a Capybara bug. I'm guessing it's more likely a selenium-webdriver, Chrome, or chromedriver bug.
Just a note to anyone who is having this issue and wants to upgrade to chromedriver2, you don't need to use @sztupy's forks of chromedriver-helper or selenium-webdriver anymore. It works as-is with the latest selenium-webdriver gem.
",lyahdav,2014-01-06 15:18:04
1035,2013-07-18 16:34:56,"You will still have the issue that you cannot (easily) set preferences (which were profiles in the previous version). Raised a bug with the webdriver guys: https://code.google.com/p/selenium/issues/detail?id=5951

Chromedriver-helper will work on linux, but not on mac or windows, as the platform's name was changed in the downloads. I uploaded chromedriver2-helper to rubygems, as it seems the original one is not updated.

And yeah, some of the bugs came back unfortunately, but it's still more stable than it was with the old chromedriver. If things worsen again I'll try to find the actual cause of the issue.
",sztupy,2014-01-06 15:18:04
1035,2013-08-08 00:29:41,"I am running into issues with Chrome hanging randomly with Chrome=28.0.1500.95 chromedriver=2.2,platform=Mac OS X 10.8 .  Gems selenium-webdriver (2.34.0), capybara (~> 2.1.0)

I've been looking at the chromedriver logs and I've noticed it seems to often follow a delete session cookie request that may be related to the session_reset that happens automatically between tests.  

Similar to @wakiki, I visually observe the browser just spinning on a blank page, but if I try manually navigating in a new tab in the same Chrome session with the Capy root URL (for example http://127.0.0.1:64579/ ) the expected page renders quickly.

Exact same tests execute with no timeout errors in Firefox, and headless with phantomjs/poltergeist.  

I think it's probably an issue with the chromedriver and its interaction with Capy/selenium-webdriver, so this issue may belong in the chromedriver world.

My chrome driver registration

<S_CODE_TOKEN>

**example chromedriver log during a timeout**

<S_CODE_TOKEN>
",gigiJackson,2014-01-06 15:18:04
1035,2013-08-21 00:48:04,"I did some more research into this issue and I'm pretty convinced it's a Chrome/ChromeDriver issue. May be this same issue open on the chromedriver project: https://code.google.com/p/chromedriver/issues/detail?id=252. I get very similar output to @gigiJackson in my chromedriver output. One thing that's different for me though, I can only reproduce this issue semi-consistently when navigating to about:blank, which Capybara does from the `reset_sessions!` call it makes after each test (from capybara/rspec.rb).
We have two integration test suites, one which includes capybara/rspec.rb and one which doesn't. The one that doesn't never seems to have this issue, the other has it a lot.
Also this may or may not be a performance issue, as we see this issue happen a lot more often on a MacBook Air than on a MacBook Pro.
I'm going to try continuing researching this, but a workaround may be to not include capybara/rspec.rb if it's timing out for you in the `reset_sessions!` code path.
",lyahdav,2014-01-06 15:18:04
1035,2013-08-21 02:17:07,"I can reproduce this very consistently with the following steps. I'm curious if it's not just me. First start up a rails console. Then run this setup line:
`require 'capybara/dsl'; Capybara.register_driver(:selenium) { |app| Capybara::Selenium::Driver.new(app, :browser => :chrome, :service_log_path => 'chromedriver.log') }; Capybara.default_driver = :selenium; include Capybara::DSL`
Then run:
`10.times { |i| puts i;visit 'http://google.com';visit 'http://example.com'}`
It always gets through the 10 iterations successfully.
Next run:
`10.times { |i| puts i;visit 'http://google.com';visit 'about:blank'}`
For me that never reaches past 3 or so without hanging, and then a Timeout::Error after 60 seconds. In chromedriver.log I see that it hangs when loading about:blank with the text 'waiting for pending navigations...'. If I go to the hung browser and click on the address bar and press enter (within 60 seconds of it hanging) it unhangs it, but only until the next iteration.

This is with Chrome version 28.0.1500.95 and chromedriver 2.1.

Interestingly enough, if I run:
`10.times { |i| puts i;visit 'http://example.com';visit 'about:blank'}`
It always succeeds. The main difference I can think is that http://google.com does a redirect but http://example.com doesn't. That may or may not be related to this issue.

Again this seems like a Chrome/chromedriver bug, but like I mentioned in my last comment a workaround is to not let Capybara run `reset_sessions!`. This is actually more complicated than not requiring 'capybara/rspec' as I implied in the previous comment. The way I got around it is to keep the require for 'capybara/rspec' in spec_helper.rb but right after it add:

<S_CODE_TOKEN>

I realize this is super hacky, and it might not work for everyone if you're relying on cookies getting cleared or it navigating to about:blank in between tests.

I'll continue to investigate this when I have more time. Any other help would be greatly appreciated.
",lyahdav,2014-01-06 15:18:04
1035,2013-08-27 14:16:53,"Yeah I get Net::ReadTimeout errors with chromedriver v2.2 and Chrome 29.

It wont fail all of the time, but it rarely manages to get past two scenarios inside a cucumber feature.

lyahdav's hacky solution works for me, and will be what I use for the moment. 
",Thranriel,2014-01-06 15:18:04
1035,2013-08-30 12:11:45,"For what it's worth, I filed a bug on this : https://code.google.com/p/chromedriver/issues/detail?can=2&start=0&num=100&q=&colspec=ID%20Status%20Pri%20Owner%20Summary&groupby=&sort=-id&id=502

I can reproduce it without Capybara : 

<S_CODE_TOKEN>

... that said, it does seem to be Capybara's navigating to about:blank that triggers the bug - I don't think I've seen it occur on visiting a regular page.  Weird.
",jdelStrother,2014-01-06 15:18:04
1035,2013-09-12 08:18:00,"I was banging my head against the monitor with this issue yesterday. Finally I found a workaround fix by observing the chromedriver logs showing that the network call to tell chromedriver to navigate to ""about:blank"" was never returning. (My google-fu was weak yesterday, only found this thread today.)

I patched the reset method (https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/driver.rb#L90) to navigate to 'about:help' instead and all works.

I also noticed that the HEAD shutdown command was being ignored by chromedriver yesterday and I was accumulating Chrome instances, but this morning its working again. Its raining outside today, maybe that's the difference?

I'll try chromedriver2 today if I can muster the will...

Oh yeah and if anyone else has as much difficulty enabling chromedriver logging as I did (trawling through the selenium source code finally to find out how), here you go:

<S_CODE_TOKEN>

This is the only config you can pass to chromedriver as it stands (see https://code.google.com/p/selenium/source/browse/rb/lib/selenium/webdriver/chrome/bridge.rb#105) :crying_cat_face:  

This was 100% consistently failing on:
macbook pro retina 10.8.4, 
Capybara 2.1.0 (and now master)
selenium-0.2.10
selenium-webdriver-2.35.1
chromedriver 2.3 (auto update broke old driver, so I moved to latest chromedriver via brew, not sure if there is a gem?)
chrome 29.0.1547.65... and maybe i'll be turning that autoupdating off :poop: 

Cheers
Kris
",kippr,2014-01-06 15:18:04
1035,2013-09-23 22:00:23,"Also reproduced same behavior:
 selenium-webdriver 2.35.0
 capybara 2.1.0
 chromedriver 2.3
 on mountain lion

The `about:help` hack seems to work though.
",tgaff,2014-01-06 15:18:04
1035,2013-09-24 17:01:33,"I was able to reproduce the issue was well:
selenium-webdriver 2.35.0
capybara 2.1.0
chromedriver-win32 2.3
Windows 7

The about:help hack fixed the issue.
",rhuberdeau,2014-01-06 15:18:04
1035,2013-09-24 22:16:59,"For those of you having problems with this, could you try creating an empty file, and then trying to navigate to `file:///path/to/file`? I think this might be a sensible alternative to about:blank, since that seems to be causing issues.
",jnicklas,2014-01-06 15:18:04
1035,2013-09-24 23:15:22,"@jnicklas yes, that works, as does using a filename that doesn't exist.
",brettporter,2014-01-06 15:18:04
1035,2013-09-25 13:48:18,"@jnicklas navigating to a file worked for me as well, and as brettporter noted, as does navigating to a file that does not exist.
",rhuberdeau,2014-01-06 15:18:04
1035,2013-10-09 14:24:50,"@jnicklas I just updated chromedriver to 2.4 (with Chrome 30.0) and the problem seems to have gone away, as did a problem I was having with a click event. The release notes indicate it supports Chrome 29.0 - 32.0, so perhaps the problem highlighted by recent commenters was chromedriver 2.3 + Chrome 29.0+?

Incidentally, I noted that chromedriver starts on the URL `data:,`, which might be another alternative to consider if needed.
",brettporter,2014-01-06 15:18:04
1035,2013-10-20 17:30:18,"Just pushed a fix for this, please give it a try, especially if any of you are on Windows.
",jnicklas,2014-01-06 15:18:04
1035,2013-12-17 02:18:59,"Hi @jnicklas! I noticed that 6b1e42d hard codes a local file system path. In my test suite, rspec/capybara/webdriver are running in a virtualbox, and only firefox and selenium are running on the local Mac. As a result, I see firefox's file not found error in between each test. Do you have any suggestions for working around this issue?
",mickeyreiss,2014-01-06 15:18:04
1035,2013-12-17 07:28:04,"Yeah, this solution has turned out to be problematic. I'll work on pushing a fix for it ASAP. If anyone has a suggestion on how to do this better, I'd love to hear it.
",jnicklas,2014-01-06 15:18:04
1035,2013-12-17 07:37:14,"@jnicklas how about `data:text/html,` instead? This works in Safari, Chrome and Firefox here. (`data:,` works in the last two only).
",brettporter,2014-01-06 15:18:04
1035,2013-12-18 08:41:30,"In the server middleware, you have a special path '/**identity**' to check for the responsiveness of the server.
You could have a path '/**empty**' to load the empty html page. When resetting the driver, you would visit ('/**empty**'), remote drivers wouldn't have to load that local file.
",nsocheleau,2014-01-06 15:18:04
1035,2013-12-20 08:50:08,"It seems that #1214, #1203, and #1198, are all related to this. I'll try to fix this using the `data:` suggestion, that seems like a good fix, but I don't have the setup available to test this on Windows, and I don't have time to set it up. So if someone here can test this on windows, that'd be super. Working on a patch now.
",jnicklas,2014-01-06 15:18:04
1035,2013-12-20 08:51:53,"What's visiting the empty page trying to achieve?  What about just deleting the code that does so?
",jdelStrother,2014-01-06 15:18:04
1035,2013-12-20 08:58:21,"Hi Jonas

I have a Windows VM I can test this on. Let me know when the patch is ready.

Would you like me to test with a particular version of selenium/ chrome/ chromedriver?

Cheers
Kris
",kippr,2014-01-06 15:18:04
1035,2013-12-20 09:32:28,"@jdelStrother there are multiple reasons for doing this, for one, it cancels all active Ajax requests, which prevents a lot of ugly race conditions on cleanup. Also, it prevents state from bleeding over between test cases, which is generally what you want.
",jnicklas,2014-01-06 15:18:04
1035,2013-12-20 09:33:17,"Hey guys, I have pushed #1215 which is a potential fix for this, would appreciate it a lot if someone with a Windows setup could test this out! /cc @kippr.
",jnicklas,2014-01-06 15:18:04
1035,2013-12-20 12:23:28,"Hmm, unfortunately I'm getting errors between each test now. With the local file solution I was also getting errors when running IE tests remotely on Windows 7 from my mac :(

Rolling back to the about:help still works for me on IE.

Below is the selenium error message. As you can see its a remote test i'm running.

<S_CODE_TOKEN>
",kippr,2014-01-06 15:18:04
1035,2013-12-20 12:52:32,"Damnit.
",jnicklas,2014-01-06 15:18:04
1035,2013-12-20 13:06:45,"Reading the [comment](https://github.com/jnicklas/capybara/issues/1035#issuecomment-25975083) from @brettporter above, I went back and tested the original implementation (using about:blank) and can confirm that with the latest chrome (31.0.1650.63)/ chromedriver (homebrew installed v2.7.236836)/ osx (10.9.1), about:blank no longer hangs between tests.

So you might be able to roll back and forget about this whole frustrating episode?
",kippr,2014-01-06 15:18:04
1035,2014-01-06 15:19:20,"Okay, let's go for it.
",jnicklas,2014-01-06 15:18:04
1035,2014-01-06 15:26:58,"I've pushed 2.2.1 with this fix to Rubygems, let me know if anyone has further problems with this.
",jnicklas,2014-01-06 15:18:04
1035,2014-01-06 16:55:06,":cactus: Thanks @jnicklas! We'll try this out and will let you know if there are any problems.
",mickeyreiss,2014-01-06 15:18:04
1035,2014-01-08 09:06:34,"Tested on a setup with the original problem (running local tests with Chrome on OSX) and on a setup that didn't like the above fix (remote tests with IE on Windows 7 VM).

Can confirm all is hunky dory now, thanks v much for the great project @jnicklas!
",kippr,2014-01-06 15:18:04
1035,2014-06-04 16:29:09,"I confirm there is a problem with Timeout::Error on IE+Win7, visit and click methods, browser hangs and fails with Timeout::Error. 
",alekstkach,2014-01-06 15:18:04
1035,2014-09-26 07:45:00,"The issue seems to be reproducible again on Ubuntu with:
- ChromeDriver 2.10.267518
- Google Chrome 36.0.1985.143 
- Capybara 2.4.3

Issues is related to https://code.google.com/p/chromedriver/issues/detail?id=700,
But it will be good to have some kind of quick workaround in Capybara, until the issue is fixed in chromediriver.
",vgrigoruk,2014-01-06 15:18:04
1035,2015-05-13 19:09:35,"FWIW, the chrome/chromedriver bug appears to be fixed now - https://code.google.com/p/chromedriver/issues/detail?can=2&start=0&num=100&q=&colspec=ID%20Status%20Pri%20Owner%20Summary&groupby=&sort=&id=502.   Not sure if we want to revert back to just using `about:blank` anytime soon?
",jdelStrother,2014-01-06 15:18:04
1034,2013-03-29 14:17:05,"Hi all,

I've updated my gems and my failing specs just hangs without any errors and it never times out. 

Here's my spec_helper.rb and feature_helper:
http://pastie.org/private/g2yh4akyvvhypu8hlvgzg

gems:
gem 'rails', '3.2.13'
  gem 'rspec', ""2.13.0""
  gem ""capybara"", ""2.0.5""
  gem ""rspec-rails"", ""2.13.0""

  gem 'database_cleaner', :git => ""git://github.com/bmabey/database_cleaner.git""
  gem 'mocha', '0.13.3'
  gem 'syntax'
  gem 'timecop'
  gem 'selenium-client'
  gem ""selenium-webdriver""
  gem 'better_errors'
  gem 'binding_of_caller'
  gem 'meta_request'
  gem 'spork-rails'
  gem 'factory_girl', '3.5.0'
  gem 'factory_girl_rails', '3.5.0'

It doesn't seem to matter whether I'm using webkit or selenium driver (chrome) - passing specs work fine, but failing specs seem to just hang.

At first I thought it was a timecop issue as per README but it's the same even if I remove Timecop. 

test.log doesn't show anything either so I'm completely stumped as to how to find out where the problem lies... does anyone have any ideas?
",wakiki,2013-03-29 17:42:47
1034,2013-03-29 14:22:21,"I've been running the specs via spork but running the specs directly gives a bit more error messages but still not quite sure what the problem is... if I press Ctrl-C when it hangs I get an error: 

An error occurred in an after hook
  Errno::ECONNREFUSED: Connection refused - connect(2)
  occurred at /Users/Steve/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/1.9.1/net/http.rb:762:in `initialize'

Anyone any ideas? Here's the full log:

ruby-1.9.3-p392@rlocums [Steve@SiMac] rlocums $ rspec spec/features/employers/employer_signup_journey_spec.rb 
No DRb server is running. Running in local process instead ...

**\* Mocha deprecation warning: Change `require 'mocha'` to `require 'mocha/setup'`.

**\* Mocha deprecation warning: Test::Unit or MiniTest must be loaded _before_ Mocha.

**\* Mocha deprecation warning: If you're integrating with a test library other than Test::Unit or MiniTest, you should use `require 'mocha/api'` instead of `require 'mocha'`.

Agent is configured to send raw SQL to the service
Agent is configured to send raw SQL to the service
/Users/Steve/.rvm/gems/ruby-1.9.3-p392@rlocums/gems/actionpack-3.2.13/lib/action_dispatch/http/mime_type.rb:102: warning: already initialized constant ICS
/Users/Steve/.rvm/gems/ruby-1.9.3-p392@rlocums/gems/actionpack-3.2.13/lib/action_dispatch/http/mime_type.rb:102: warning: already initialized constant PDF
No matching processes belonging to you were found
Run options: include {:focus=>true}

All examples were filtered out; ignoring {:focus=>true}
^C
Exiting... Interrupt again to exit immediately.

An error occurred in an after hook
  Errno::ECONNREFUSED: Connection refused - connect(2)
  occurred at /Users/Steve/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/1.9.1/net/http.rb:762:in `initialize'

F

Failures:

  1) Employers Employer signup journey
     Failure/Error: see 'lkj'
     EOFError:
       end of file reached
     # ./spec/features/support/helpers.rb:41:in `block in see_without_options'
     # ./spec/features/support/helpers.rb:33:in`each'
     # ./spec/features/support/helpers.rb:33:in `see_without_options'
     # ./spec/features/support/helpers.rb:14:in`see'
     # ./spec/features/employers/employer_signup_journey_spec.rb:13:in `block (2 levels) in <top (required)>'

Finished in 24.9 seconds
1 example, 1 failure

Failed examples:

rspec ./spec/features/employers/employer_signup_journey_spec.rb:4 # Employers Employer signup journey
ruby-1.9.3-p392@rlocums [Steve@SiMac] rlocums $ 
",wakiki,2013-03-29 17:42:47
1034,2013-03-29 14:47:28,"I see you're using Timecop, are you by chance using `Timecop.freeze`, that's known to cause problems. If you are, try `Timecop.travel` instead.
",jnicklas,2013-03-29 17:42:47
1034,2013-03-29 14:50:27,"Thanks @jnicklas - I saw the gotcha with Timecop so already use Timecop.travel and it's not related to that.
",wakiki,2013-03-29 17:42:47
1034,2013-03-29 15:01:58,"From the stack trace it looks like it's hanging in Net::HTTP, I've seen that happen when HTTP mocking liubraries like webmock or fakeweb are used, are you using anything like that?
",jnicklas,2013-03-29 17:42:47
1034,2013-03-29 15:45:17,"I think I've worked it out...

I have a method called 'debug' which essentially pauses the spec and allows me to open up inspect element within chrome browser. This method name was interfering with capybara internals by the looks of it. 

I worked around it by renaming the debug method to debugx. It's an ugly hack, but it works for now...

By the way, I implemented the debugx method as follows... I've probably completely missed something obvious but I'm not sure why this method doesn't already exist by default... it's quite common to want to pause a failing spec to investigate?

  def debugx
    old_wait_time = Capybara.default_wait_time
    Capybara.default_wait_time = 1000
    page.has_css?('#something_impossible_here_234234')
    Capybara.default_wait_time = old_wait_time
  end
",wakiki,2013-03-29 17:42:47
1034,2013-03-29 17:40:20,"I'd recommend using Pry for that sort of thing. Also, the method you implemented already exists in Ruby itself. Docs here: http://apidock.com/ruby/Kernel/sleep
",jnicklas,2013-03-29 17:42:47
1034,2013-03-29 17:42:47,"Thanks @jnicklas . I'll close this ticket.
",wakiki,2013-03-29 17:42:47
1033,2013-03-29 02:15:44,,tricknotes,2013-03-29 11:04:54
1033,2013-03-29 11:05:01,"Thanks!
",jnicklas,2013-03-29 11:04:54
1032,2013-03-28 11:38:14,"We are using CKEditor in our project. But when we try to verify the data entered the CKE's textarea element is valid, we fail.

There was an [issue describing this](https://github.com/jnicklas/capybara/issues/1025). You made a [change fixing the bug](https://github.com/jnicklas/capybara/commit/ca4781f186831f46b0549220389c95357d0863db), but then reverted it.

Let me tell you why your comment is wrong:

> Just revisited this, and it seems that according to the HTML5 spec, textareas must not contain literal HTML. 
> It seems that browsers support this anyway, to a certain extent at least, but it does not seem to be wellformed markup. 
> I've reverted the change I made originally, since it does not seem to be in conformance with the spec.

`textarea` is a **user input element** so user can write anything he wants within that input element. So we could verify that data to be valid. Whilst the bug does not allow us to do the job right.

I beg you to apply the fix you've done already. 

Thanks!
",shybovycha,2013-03-29 13:40:12
1032,2013-03-28 16:13:06,"@shybovycha of course the user can write anything they want. We are testing that filling in HTML into a field and extracting it back out works as expected, since the HTML is entity encoded when it is added to the field. The ""bug"" that the commit you mention fixes was that literal HTML inside textarea fields didn't work, e.g. this:

<S_CODE_TOKEN>

As far as I can tell, this is incorrect according to the HTML spec. Specifically it breaks if you try to include a `</textarea>` tag in your textarea. Surprisingly the HMTL validator does accept it as markup.

All of which is really beside the point, because you just should not do that. Just entity encode this stuff.

Also, how did the ""bug fix"" help you at all, considering that CKEditor is a JavaScript editor, and the fix only affects RackTest which doesn't even execute JavaScript.
",jnicklas,2013-03-29 13:40:12
1032,2013-03-28 16:15:21,"Also, if you want to refute my point and tell me ""I'm wrong"" when I cite the fucking spec, then please tell me where and how I've misunderstood the spec, not some vague notion of how you _think_ stuff should behave.
",jnicklas,2013-03-29 13:40:12
1032,2013-03-28 16:24:20,"Could you please **cite** the spec? All i've seen is just your words, not a **cite**.
",shybovycha,2013-03-29 13:40:12
1032,2013-03-28 16:34:00,"You could just read it yourself, you know:

> 4.10.13 The textarea element
> [...]
> Content model: Text.
",jnicklas,2013-03-29 13:40:12
1032,2013-03-28 17:02:09,"@shybovycha  As @jnicklas has pointed out the html spec states that the content model for textarea elements is of type Text.  That being said browsers default behavior for invalid content in textareas is to convert it to text.  This leads to the situation where having the following source for your document
    &lt;textarea&gt;&lt;div&gt;&amp;lt;div&amp;gt;some content&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/textarea&gt;
will lead to the innerText on the textarea returning 
&lt;div&gt;&lt;div&gt;some content&lt;/div&gt;&lt;/div&gt;  
which obviously isn't correct but is a byproduct of the browser trying to handle invalid markup.  It sounds like your app is generating invalid markup by not escaping the contents of the textarea to start with and should probably be fixed.  This does not look like an issue with capybara.
",twalpole,2013-03-29 13:40:12
1032,2013-03-29 13:40:12,"Thank you for your explanations!
",shybovycha,2013-03-29 13:40:12
1031,2013-03-27 21:22:42,"One of users [had a problem with it recently](http://stackoverflow.com/q/15665106/841064)
",abotalov,2013-03-27 21:23:16
1030,2013-03-27 19:12:18,"Seriously, didn't change anything.  A few days ago tests were working fine, today, they don't.   (This is on a Mac).  (I wonder if it's due to a Chrome auto-upgrade?)

Anyway, switching to the experimental Chrome Driver 2 got chrome working again, sort of. 

Now this line doesn't work, presumably unimplemented in the new driver.
Capybara.current_session.driver.browser.manage.window.resize_to(width, height)

See trace below.

1) Any thoughts on where the problems might have come from?
2) Any thoughts on other workarounds or things to try, wrt the original problem?
3) Any other ways to set window size?

Thanks--
# 

<S_CODE_TOKEN>
",tim-sge,2013-03-27 21:02:56
1030,2013-03-27 19:25:15,"Figured out question #3, btw -- registering a custom driver was the solution.  

#1 and #2 still a mystery, atm. Thanks for any thoughts.
",tim-sge,2013-03-27 21:02:56
1030,2013-03-27 19:35:54,"This is almost certainly due to a Chrome update,  Chrome 26 released yesterday, and really sounds more like an issue for the chrome-driver devs and/or selenium
",twalpole,2013-03-27 21:02:56
1030,2013-03-27 21:02:56,"Gotcha.  Closing this then.
",tim-sge,2013-03-27 21:02:56
1029,2013-03-27 13:54:52,"This doesn't work:

<S_CODE_TOKEN>

Firefox opens but no request is made.  The expectations fail.  Similar synchroneous examples work fine with `around` hooks, though.

Rephrased using `before`, the examples work fine works:

<S_CODE_TOKEN>

Currently running:
- capybara 2.0.3, selenium-webdriver 2.31
- rails 3.2.13
- ruby 2.0.0
",DivineDominion,2013-04-02 14:52:39
1029,2013-03-27 13:58:43,"Keep in mind that around hooks are run _before_ any other hooks. See: https://www.relishapp.com/rspec/rspec-core/v/2-13/docs/hooks/around-hooks!#before/after(:each)-hooks-are-wrapped-by-the-around-hook

Since Capybara uses before/after hooks for it's setup and teardown, it's probably just an order issue.
",jnicklas,2013-04-02 14:52:39
1029,2013-03-27 14:13:30,"> Since Capybara uses before/after hooks for it's setup and teardown, it's probably just an order issue.

Ah, well, didn't know about that detail!

That means the way Capybara is set up at the moment `around` hooks simply won't work whenever Capybara methods are involved.  Thanks for clarifying.

Nevertheless, would be cool if it did work ;)
",DivineDominion,2013-04-02 14:52:39
1029,2013-04-02 14:52:39,"Closing.
",jnicklas,2013-04-02 14:52:39
1028,2013-03-27 13:47:47,"Since Capybara 2.0.1 I'm having the following problem (Capybara 2.0.0 works fine)

I have the following js on my page:

<S_CODE_TOKEN>

When running specs using the fill_in command in Capybara 2.0.1, Chrome Console Log shows:

1: focusin 
2:
3: eg. s.evans@nhs.net 

This is despite the value of the input field clearly being 'eg. s.evans@nhs.net'

It works perfectly fine in Capybara 2.0.0 but I note something was changed with the 'fill_in' method in 2.0.1.

Can anyone help?

Steve
",wakiki,2013-11-10 13:11:55
1028,2013-03-27 14:05:08,"This is probably due to the way we reset fields in Capybara. This is the commit that likely breaks this behaviour 08a8fd683457bc2a635756a25f250614b0163567

In 2.0.0 we sent `\b` control characters to the field to clear it. Unfortunately, sending characters is very slow in selenium for some reason, especially in Chrome. This was a rather significant performance regression for many. Instead we now clear the field with JavaScript, which is way faster. It also doesn't trigger any events obviously. The events are triggered when you hit the send_keys method on the next line, at that point the field is already cleared. We've tried a dozen different variations over the years, and it seems that none are both 1) correct and 2) performant. The current one strikes a compromise between the two, at the expense of edge cases like this.
",jnicklas,2013-11-10 13:11:55
1028,2013-03-27 14:06:07,"Also, you know that HTML5 has a `placeholder` attribute which you can use for this, right?
",jnicklas,2013-11-10 13:11:55
1028,2013-03-27 14:29:06,"Thanks jnicklas. Alas I cannot use the HTML5 attribute as I need to support IE7/8.

The odd thing is that forms are submitted with empty values which is very strange. I also use client_side_validations although I don't think that is implicated.

I also have a method that is run at the beginning of every page:

$.fn.blurHint = ->
  this.each ->
    $input = $(this)
    hint = $input.attr('data-hint')
    if $input.val() ==  """" or $input.val() == hint
      $input.val(hint).addClass('blur')

If I remove this then the placeholder texts aren't there and then it works fine. It's to do with the way the value is set to '' in capybara.

Is there any way the 'focus' event is fired before clearing the field by js, or is there any workaround - I'm struggling...

Steve
",wakiki,2013-11-10 13:11:55
1028,2013-04-04 07:54:17,"I'm running into a problem that seems to be related. We're trying to _clear_ some input fields, but the change event doesn't get fired, so the underlying Backbone model isn't updated. Because we're setting to an empty string, the `send_keys` call is presumably a no-op.

If I patch in the old implementation, it works as expected. @jnicklas do you have any thoughts about what you'd like to do with this issue or how you want to handle these edge cases, if at all? Maybe offer an option to use the old behavior? Special case setting to an empty string?

I'm happy to take a stab at a pull request with the fix.
",TimMoore,2013-11-10 13:11:55
1028,2013-04-04 09:55:40,"+1

I ended up monkey-patching/overriding the method. An option to use the odd behaviour would be great and should be very easy to implement. So the DSL would be something like:

fill_in ""name"", with: ""Jo Bloggs"", use_backspace: true

or whatever other name can be used for the option.

It would really help the edge cases like mine as current upgrade completely broke my specs and there's no way round it other than to hack the source...

@jnicklas what do you think?
",wakiki,2013-11-10 13:11:55
1028,2013-04-04 10:13:58,"A bit ugly/hacky, but could we get a workable compromise by sending one backspace and then clearing the field with JS? Or selecting the text in the field via JavaScript and sending one backspace?
",TimMoore,2013-11-10 13:11:55
1028,2013-04-18 14:23:28,"+1
",joscas,2013-11-10 13:11:55
1028,2013-04-18 16:34:09,"Looks good to me, and closer to what a user would actually do
",twalpole,2013-11-10 13:11:55
1028,2013-11-10 13:11:55,"Closed by c9ba16cd08fd1f878d09ef778516240c78fbbd2e
",jnicklas,2013-11-10 13:11:55
1027,2013-03-27 12:17:01,"Why feature can not be nested

<S_CODE_TOKEN>
",golden05,2013-03-27 12:26:31
1027,2013-03-27 12:26:30,"Because that's what scenarios are for.
",jnicklas,2013-03-27 12:26:31
1027,2013-03-27 12:26:51,"you can also use regular describe/context just as with all other RSpec specs.
",jnicklas,2013-03-27 12:26:31
1026,2013-03-26 16:48:34,"... as there is a specific section about it further down.
",michaelrkn,2013-03-26 19:17:10
1025,2013-03-25 15:32:55,"Hi

In my project I use CKE Editor for email field.
I have validation for it. I am checking if there is ""install link"" in email.

When I create cucumber test, I get unexpected result, when I send this form to server I can see that capybara cuts tags from textarea.

In file
lib/capybara/rack_test/form.rb I found next code:

<S_CODE_TOKEN>

As I understood field.text cuts all tags. It is posible to use field.inner_html instead, but I did not know if it will influence smth else.

So, can you suggest elegant way to fix this behaviour?
",Jaromudr,2013-03-26 15:36:37
1025,2013-03-26 15:41:24,"There does indeed seem to be an issue when HTML is already contained within a textarea when the page is loaded. If the textarea is filled in via `fill_in` or `set`, everything works as intended. However there was some weird encoding/decoding going on, which doesn't seem to be necessary. Using `inner_html` everywhere as opposed to `text`/`content` seems to work better.
",jnicklas,2013-03-26 15:36:37
1025,2013-03-27 13:56:28,"Just revisited this, and it seems that according to the HTML5 spec, textareas must not contain literal HTML. It seems that browsers support this anyway, to a certain extent at least, but it does not seem to be wellformed markup. I've reverted the change I made originally, since it does not seem to be in conformance with the spec.
",jnicklas,2013-03-26 15:36:37
1025,2013-03-27 15:50:50,"So problem is little deeper, I tested my example on Chromium browser and I got next results

document.getElementById(""share_template"").innerText =>

<S_CODE_TOKEN>

document.getElementById(""share_template"").innerHTML =>

<S_CODE_TOKEN>

So, textarea do not contain literal HTML, it contain html escaped string.

With capybara I got next results

field.inner_text => ""\n\n\n\nCLM Tool\n\n\n1.0\n\n\n ...""

field.inner_html => 

<S_CODE_TOKEN>
",vladimir-myskov,2013-03-26 15:36:37
1024,2013-03-24 07:11:54,"I haven't tested this with rails < 4-master, but this fixes breakage where Rails.version now returns a Gem::Version and these comparisons fail there.  This is the offending commit afaict: https://github.com/rails/rails/commit/c07e1515f7c66f5599cbb3c7e9fe42e166bf3edc
",knewter,2013-03-26 12:26:30
1024,2013-03-25 00:04:56,"That seems weird. Comparing string sizes like this seems incorrect to me. For example:

<S_CODE_TOKEN>
",jnicklas,2013-03-26 12:26:30
1024,2013-03-25 00:40:55,"That's an excellent point, though I have no idea what to_f did with that.  I didn't even consider that case, though it's obvious now.  How is Gem::Version intended to be compared?
",knewter,2013-03-26 12:26:30
1024,2013-03-25 09:09:59,"Here's even more weird example:

<S_CODE_TOKEN>

What about [<=>](http://rubygems.rubyforge.org/rubygems-update/Gem/Version.html#method-i-3C-3D-3E):
`Rails.version >= Gem::Version(3.0)`
",abotalov,2013-03-26 12:26:30
1024,2013-03-25 09:36:07,"@abotalov if Rails previously returned something other than a `Gem::Version` that might break on older versions.
",jnicklas,2013-03-26 12:26:30
1024,2013-03-25 09:48:20,"@jnicklas What about:

<S_CODE_TOKEN>
",abotalov,2013-03-26 12:26:30
1024,2013-03-25 09:55:25,"I'm not even sure what it was before, was it really a string?
",jnicklas,2013-03-26 12:26:30
1024,2013-03-25 09:56:43,"@jnicklas 

<S_CODE_TOKEN>
",abotalov,2013-03-26 12:26:30
1024,2013-03-26 09:29:36,"How about:

<S_CODE_TOKEN>

This is compatible with `Rails.version` being a string or Gem::Version
",eval,2013-03-26 12:26:30
1024,2013-03-26 12:57:38,"I cherry picked this onto 2.0_stable and released it as 2.0.3 together with another tweak. A simple `bundle update capybara` should now fix this issue.
",jnicklas,2013-03-26 12:26:30
1023,2013-03-23 18:31:24,"I'm not sure if this is a bug, but it is a difference from 1.1.4 to 2.0.

In 1.1.4, driver.visit(""/redirect"") would keep the referer when it landed. This is no longer the case in 2.0. The following test passes in 1.1.4 (if you backport the TestApp endpoints), but fails in 2.0:

<S_CODE_TOKEN>

Is this an intentional change in 2.0.0? I see that if you use a session, the referer is kept (visit_spec.rb).
",dplummer,2013-03-25 16:34:41
1023,2013-03-23 19:05:31,"The reason I'm using this functionality is to test an attack vector. A user would not normally be able to follow the code path that the test driver does. However, an attacker which snooped on their HTTP session could get their insecure cookies and attempt an attack which with Capybara 1.1.4 we are able to replicate and test.

Additionally, this test fails and I'm not sure if it should:

<S_CODE_TOKEN>
",dplummer,2013-03-25 16:34:41
1023,2013-03-24 21:37:30,"Hmm, that does seem strange. I seem to remember we messed around with that behaviour a while back, maybe we didn't get it quite right. How do browsers behave in this instance? Does the test pass in Selenium?
",jnicklas,2013-03-25 16:34:41
1023,2013-03-25 16:34:41,"The selenium driver appears to fail too:

<S_CODE_TOKEN>

I checked it out in Google Chrome (ran the test_app sinatra) and found that Chrome has the same behavior, ie there is no referer.

Same behavior with curl:

<S_CODE_TOKEN>

Looks like the bug was in 1.1.4 for supporting it.

Thanks for the clarifying questions!
",dplummer,2013-03-25 16:34:41
1022,2013-03-19 22:37:37,"Reason is same as here - https://github.com/jnicklas/capybara/pull/988#discussion_r3222892
",abotalov,2013-03-26 19:49:36
1022,2013-03-26 19:49:36,"Looks like @jnicklas merged this branch using [ordinary commit](https://github.com/jnicklas/capybara/commit/5c1229acf94dc4a54531a4d72a1959b9fe1c10f4), not merge button 
",abotalov,2013-03-26 19:49:36
1022,2013-03-26 19:56:59,"Hmm, weird. @github usually picks that up.
",jnicklas,2013-03-26 19:49:36
1021,2013-03-19 18:24:08,"Gemfile:

`gem 'capybara', '~> 1.1.4'`

On trying to boot Rails 3.2.12:

<S_CODE_TOKEN>

Anyone else having similar issues?
",jwg2s,2013-03-19 19:24:35
1021,2013-03-19 19:24:33,"Guess this is more related to shoulda-matchers because I locked that back down to v1.4.2
",jwg2s,2013-03-19 19:24:35
1020,2013-03-19 14:42:22,"I'm using capybara 2.0.2 with capybara-webkit 0.14.1 (but I've tried with selenium driver also)

when I try to attach a file using 'attach_file' it raises an error.

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",abacha,2013-03-26 15:41:37
1020,2013-03-20 22:43:01,"Your usage of `attach_file` is pretty standard. Please provide more details about this error. We'll need at least a full stack trace. If you can provide something executable then that would be helpful.
",jnicklas,2013-03-26 15:41:37
1020,2013-03-20 22:43:49,"Try running `rspec -b`, that should give you a better trace.
",jnicklas,2013-03-26 15:41:37
1020,2013-03-26 15:41:59,"Closing this due to lack of information.
",jnicklas,2013-03-26 15:41:37
1020,2013-05-11 12:30:57,"@abacha I've had similar problems and figured out that strange TypeError `exception class/object expected` is happening because old version of `json` gem is used. `capybara-webkit` uses JSON serialization to give the client a heads up what error happened. You should use at least `1.7.7`, otherwise `JSON.load` will parse error into the `Hash` instead of real exception class.
",andreychernih,2013-03-26 15:41:37
1019,2013-03-18 14:29:21,"Gemfile

<S_CODE_TOKEN>

spec_helper

<S_CODE_TOKEN>

features/funds_spec.rb

<S_CODE_TOKEN>

Error:

<S_CODE_TOKEN>
",abacha,2013-03-26 19:23:43
1019,2013-03-18 14:35:24,"Try updating rspec-rails.
",jnicklas,2013-03-26 19:23:43
1019,2013-03-26 19:23:43,"Closing. If it's still a problem, then let us know.
",jnicklas,2013-03-26 19:23:43
1018,2013-03-18 13:58:16,"As a result of #970, selenium-webdriver is now an optional dependency of Capyabra. However, on projects where selenium-webdriver is not in the Gemfile, a LoadError is raised even if selenium-webdriver is not used. This is due to the uncondional require of `capybara/selenium/driver` on line 321 of capybara.rb: http://git.io/0tRUfQ.
",mhoran,2013-03-18 23:15:33
1018,2013-03-18 20:12:05,"I am also experiencing this after upgrading to `2.1.0.beta1`.
",topfunky,2013-03-18 23:15:33
1018,2013-03-18 20:23:21,"I messed up when I changed from `autoload` to `require`, didn't count on the fact that this would eagerly require the selenium driver. Fixed.
",jnicklas,2013-03-18 23:15:33
1018,2013-03-18 20:26:14,"Quick fix! Thanks!
",topfunky,2013-03-18 23:15:33
1018,2013-03-18 20:34:01,"Sorry to be obtuse, but you also removed `rack-test`? So there's no default driver?
",topfunky,2013-03-18 23:15:33
1018,2013-03-18 20:48:21,"Hopefully, as soon as the RackTest driver is used, it will [require](https://github.com/jnicklas/capybara/commit/07f2a714acd67b278451e5fef0de2d915ae8b994#L0R330) the needed files. I tried this out with a script and it seemed to work.
",jnicklas,2013-03-18 23:15:33
1018,2013-03-18 20:51:45,"Hmm. Not working for me with Rails 4, Capybara from Git, and RSpec 2.13.0. I'll try to figure it out.

<S_CODE_TOKEN>
",topfunky,2013-03-18 23:15:33
1018,2013-03-18 22:14:04,"It's probably [this](https://github.com/jnicklas/capybara/blob/master/lib/capybara/rails.rb#L17-L20). We override the default rack_test driver for Rails, and that one doesn't require anything.

This is actually a bit problematic, since anyone who has done that will have to require the rack-test driver, so this ends up being an API breaking change. That's not okay, so we need to fix this another way.
",jnicklas,2013-03-18 23:15:33
1018,2013-03-18 22:44:22,"Good catch.
",topfunky,2013-03-18 23:15:33
1018,2013-03-18 22:48:47,"Just pushed a new attempt at a fix for this.
",jnicklas,2013-03-18 23:15:33
1018,2013-03-18 22:50:42,"That works! Thanks.
",topfunky,2013-03-18 23:15:33
1018,2013-03-18 23:15:32,"Works great. Thanks!
",mhoran,2013-03-18 23:15:33
1018,2013-03-22 16:21:15,"@topfunky Cool, thanks.
",mhartl,2013-03-18 23:15:33
1017,2013-03-18 13:10:55,"Hello, I am currently using rspec for testing our application. This is the HTML that we are testing against:

<S_CODE_TOKEN>
## Issues with have_field on hidden fields

This works fine:

<S_CODE_TOKEN>

This doesn't work:

<S_CODE_TOKEN>

This also fails:

<S_CODE_TOKEN>

Why can't I select a hidden field with the `have_field` method?

Instead I have to do it like this:

<S_CODE_TOKEN>
## Issues with matching values of a hidden form-field

How can I test the value of a hidden field?

I want to do something like this:

<S_CODE_TOKEN>

But the `:value`-property isn't available in the `have_selector` method. 

**Update**

I figured out that I could use the following syntax for testing values:

<S_CODE_TOKEN>

Is it really correct to use xpath like this?
",kaspergrubbe,2013-03-18 13:32:41
1017,2013-03-18 13:32:41,"Users can't see hidden fields, so you shouldn't use Capybara to assert on their values.
",jnicklas,2013-03-18 13:32:41
1017,2013-03-18 19:31:47,"So Capybara is 100% only for user testing, and not view testing? 

That seems to be a tremendously shortcoming. Especially since RSpec is relying on the matchers from Capybara.

Why do we have accessors like `:visible => false` if we are only testing user-level stuff. Is that a leaky abstraction?

And what should I be using with RSpec to be able to test my hidden fields?
",kaspergrubbe,2013-03-18 13:32:41
1017,2013-03-18 19:42:55,"Well, pretty much. We don't go out of our way to support stuff which isn't specific to testing stuff which is visible to users. If I'd have my way, things would be more restrictive than they are, but pragmatism gets in the way, as is the case with `:visible => false`.

As far as checking for hidden fields, as you noticed, it's possible, it just isn't easy, and that's kind of where we draw the line. When someone uses `have_field` to assert the value of a field in the context of an integration test, then they don't expect that to find hidden fields, and that is the use case we optimize for.

We provide you the power of low level APIs so you can work around these defaults, we even provide you the power to build abstractions using the `add_selector` API, we just don't optimize for that use case.
",jnicklas,2013-03-18 13:32:41
1017,2013-03-18 19:48:07,"> Is it really correct to use xpath like this?

It's called CSS selector, not XPath.

Personally I prefer `have_css` almost always instead of more specialized matchers like `have_field`. I feel specialized matchers are too permissive (for example field matches any `input`, `textarea`, or `select` element that doesn't have a type of `submit`, `image`, or `hidden` with `id`, `name` or `placeholder` equaling to first param of `have_field`, see https://github.com/jnicklas/xpath/blob/master/lib/xpath/html.rb#L57). I prefer to specify exactly what Capybara should find using `have_css`
",abotalov,2013-03-18 13:32:41
1017,2015-08-10 06:49:09,"So on a form that spans multiple pages, carrying values from start to finish by way of hidden fields, the developer cannot sanity check whether a given page has hidden fields set to expected values?
",nosretep,2013-03-18 13:32:41
1016,2013-03-17 09:58:13,"I found this answer at SO - http://stackoverflow.com/a/7483333/841064

Capybara master throws `/gems/capybara-2.0.2/lib/capybara/query.rb:74:in 'assert_valid_keys!': invalid keys :class, should be one of :text, :visible, :between, :count, :maximum, :minimum, :href (ArgumentError)`.

Was this syntax ever supported by Capybara?
",abotalov,2013-03-17 10:58:42
1016,2013-03-17 10:56:19,"No. It's never been supported.
",jnicklas,2013-03-17 10:58:42
1015,2013-03-16 20:04:37,"It previously only rescued Errno::ECONNREFUSED and Errno::EBADF. On a
few occasions, I have also seen the Errno::ETIMEDOUT exception raised by
Net::HTTP from this method. Since the Net::HTTP calls are the only thing
in this method that should be making any kind of system calls, a rescue
of all SystemCallError exceptions (the superclass of all of the Errno
exceptions) will catch these as well as any other system call errors
triggered by Net::HTTP.
",jwilger,2013-03-25 00:07:40
1015,2013-03-17 14:29:21,"I kind of feel that those tests aren't particularly meaningful. Way too many mocks.
",jnicklas,2013-03-25 00:07:40
1015,2013-03-17 20:34:24,"The mocks are at system boundaries and are only replacing behavior of well-documented and stable APIs. The only possible exception to that is the stub on #server_thread; I suppose the test around thread joining could be tossed out to make that unnecessary (since that would then just be nil and the condition would be passed over), but I included it for the sake of complete coverage.

Short of mocking, what would you suggest to cause the Net::HTTP calls to raise a SystemCallError? Clearly at some level you need to manipulate something and cause it to fail to get that exception. A test specifically for something easy to produce, such as ECONNREFUSED, would not be sufficient, given that it would not catch the issue prompting the patch. I suppose we could add a complete wrapper around Net::HTTP that allowed specific errors to be triggered and use that in the production code, but that seems like overkill and is just another form of mocking anyway. The difficulty in testing this in any meaningful way _without_ mocks is likely evident in the fact that there is seemingly _no_ test coverage of this behavior prior to this change.
",jwilger,2013-03-25 00:07:40
1015,2013-03-17 20:42:18,"Crap, that comes across more confrontational than I intended. If you can think of a better way to test that without the mocks, I am genuinely interested. :-)
",jwilger,2013-03-25 00:07:40
1015,2013-03-17 21:02:46,"I guess this comes down to the eternal debate about mocks vs no mocks. In that debate I land on the ""mock as little as possible"" side. I find mocks inherently clumsy and unreliable, _especially_ when mocking third party libraries. Given that you have experienced this error, there must be some way of reproducing it, if there isn't, then why is worth fixing in the first place?
",jnicklas,2013-03-25 00:07:40
1015,2013-03-17 23:28:47,"It comes up intermittently. Run `Cabybara::Server#boot` once and It bombs on the ETIMEDOUT error, run it again and it works fine. Ultimately it's something from either the underlying Ruby code or the OS, since those are system call error codes. There may be someone out there who could easily cause that to be reproduced on demand, but not I.

If you like, I can update this and remove the tests that aren't specifically about this error condition (I only added them because it seemed like more coverage would be a good thing). That should at least reduce the amount of mocking to only the one `Net::HTTP.stub!(:start).and_raise(SystemCallError.allocate)`, and it would adequately cover the case for which I'm submitting the patch.
",jwilger,2013-03-25 00:07:40
1015,2013-03-25 00:08:52,"Thanks!
",jnicklas,2013-03-25 00:07:40
1014,2013-03-16 19:50:33,"capybara 2.0.2

> within('#simple_search_table') do
>   find(:xpath, './/a').click
> end

   Failure/Error: find(:xpath, './/a').click
   Capybara::Ambiguous:
     Ambiguous match, found 8 elements matching xpath "".//a""

> within('#simple_search_table') do
>    find(:xpath, './/a[3]').click
>  end

<S_CODE_TOKEN>
",carlcrott,2013-03-16 21:27:48
1014,2013-03-16 20:06:08,".//a[3] in xpath doesnt do what you think it does.  It will find all anchor elements that have 2 previous anchor siblings.   If you want to click the third anchor in your table then you probably want
    all(:xpath,'.//a')[2].click
",twalpole,2013-03-16 21:27:48
1014,2013-03-16 21:27:48,"@delinquentme since you seem to have deleted the post where you were trying to access the 10th anchor when only 8 exist I assume you've figured out what was wrong, and I'm going to close this.  Next time please ask questions about usage on the mailing list instead of opening an issue
",twalpole,2013-03-16 21:27:48
1013,2013-03-15 19:32:29,"@jnicklas - You said to just commit simple changes (and this one is pretty simple) - but it could affect other driver writers so I'll leave it up to you to commit :)
",twalpole,2013-03-16 01:02:49
1013,2013-03-16 01:02:45,"Seems good to me!
",jnicklas,2013-03-16 01:02:49
1013,2013-03-21 03:44:00,"WebKit doesn't seem to share this behavior. Ping @jonleighton.
",mhoran,2013-03-16 01:02:49
1012,2013-03-14 09:06:05,"This swallows exceptions raised within `reload` which are due to synchronization issues. Which prevents those exceptions from bubbling up and causing failures.
",jnicklas,2013-03-14 19:17:01
1011,2013-03-13 21:29:42,"This should implement disabled without the performance penalty seen with it as a filter.  This adds the concept of Selector modifiers that get to modify the selector expression based on options passed in.  It builds on top of the work in PR 996.  Its all pretty straight forward except for the modifier needed in the link_or_button selector, which is a bit strange because link doesnt support a disabled attribute, and we need to ignore it while still checking for it on button
",twalpole,2013-03-16 01:20:17
1011,2013-03-16 01:08:22,"I quite like the idea of modifiers in general, but their semantics are a bit strange now. I implemented something similar in the capy3 branch a while ago, as an experiment. For now, I've gone ahead and merged #996 because it's conceptually simpler and there doesn't seem to be a performance difference in real-world situations.
",jnicklas,2013-03-16 01:20:17
1011,2013-03-16 01:11:18,"We should revisit this idea at some point down the line, imo. But for now I just want to get capy2.1 shipped.
",jnicklas,2013-03-16 01:20:17
1011,2013-03-16 01:20:00,"Sounds good
",twalpole,2013-03-16 01:20:17
1010,2013-03-13 15:10:28,"Hey guys

I just nearly went crazy because I didn't find a problem in my spec, until I noticed through mere trial&error, that visiting the same path two times does **not** seem to refresh the page!

Is this the expected behavior? And how would you refresh a page then?

Thanks,
Josh
",jmuheim,2013-03-13 15:36:26
1010,2013-03-13 15:36:26,"Seemed to be a problem on my side.
",jmuheim,2013-03-13 15:36:26
1009,2013-03-13 00:26:13,"Following up on #1005 and #843.  
This gist:
https://gist.github.com/jpurcell001/5148357

Appears to fail regularly when run under capybara master.  Tried it with webkit, poltergeist, and selenium, and was able to get it fail under all three.  
When putting a `rescue puts @sess.html` after the failed find, it looks like the element is there - but somehow the nested blocks are creating confusion.

Let me know if you're able to reproduce using this.
",jpurcell001,2013-03-14 19:17:03
1009,2013-03-14 09:06:40,"Just pushed a possible fix, can you try it out and see if it helps you at all?
",jnicklas,2013-03-14 19:17:03
1009,2013-03-14 17:20:28,"Great commit! I can't reproduce related errors using the 'reload-race-conditions' branch. Thanks a lot.
",DimaSamodurov,2013-03-14 19:17:03
1009,2013-03-17 21:34:08,"@jnicklas  Thank you for the fix - definitely seemed to fix the issue in the test case.  
",jpurcell001,2013-03-14 19:17:03
1008,2013-03-12 23:47:45,"spec_helper was requiring itself
",grzuy,2013-03-13 07:04:04
1008,2013-03-13 07:04:17,"Yeah, that seems a bit unnecessary :P
",jnicklas,2013-03-13 07:04:04
1007,2013-03-12 23:00:15,"With your nested synchronize changes this is no longer used
",twalpole,2013-03-13 07:00:07
1007,2013-03-13 07:00:39,"@twalpole feel free to merge small changes like this yourself, if you want.
",jnicklas,2013-03-13 07:00:07
1006,2013-03-12 00:46:05,"`have_link_to` allows for matching a particular URL regardless of the link text. This makes it easier to change link text during development so long as the behavior remains the same. 

Example (rails, rspec):

<S_CODE_TOKEN>

I have less understanding of the code under `node`, which I believe is used outside of rspec. There was little documentation that I could find about adding to it, so my changes right now lie only under the `rspec` directory, but I'd be happy to change that with a little advice.
",sirbrillig,2013-03-13 07:02:42
1006,2013-03-12 07:26:13,"I don't agree that this is a good candidate for inclusion in Capybara. It doesn't fit with any of the other APIs we have and it doesn't really feel like it's testing things at the integration level.

Even if it were, this pull request would need a lot more work before I would consider merging it.
",jnicklas,2013-03-13 07:02:42
1006,2013-03-12 12:45:20,"Thank you for the input. I respectfully withdraw my pull. I found it useful in my own testing. May I ask what sort of work you would have suggested for improving the branch? 
",sirbrillig,2013-03-13 07:02:42
1006,2013-03-12 12:56:53,"@sirbrillig: it doesn't seem right to me that it would be only an rspec matcher, we should have added this as a matcher on Capybara::Node::Matchers. None of the other matchers are implemented like this. It would need a lot more tests as well.
",jnicklas,2013-03-13 07:02:42
1006,2013-03-12 21:08:46,"Agreed. There should be a similar matcher under Capybara::Node and specs at the higher level. I will implement that in my branch and close this pull request. Thank you!
",sirbrillig,2013-03-13 07:02:42
1006,2013-03-12 21:14:09,"@sirbrillig After you'll make a commit to this branch it will appear here. No need to make another PR
",abotalov,2013-03-13 07:02:42
1006,2013-03-12 21:18:04,"Ah, right, thank you @abotalov.
",sirbrillig,2013-03-13 07:02:42
1006,2013-03-12 23:10:23,"Hm. I made a commit, but it did not appear here. Perhaps github does not include branch updates in a closed pull request. I am going to reopen it just to see if it updates. (The update adds node matchers and more tests.)
",sirbrillig,2013-03-13 07:02:42
1006,2013-03-13 07:02:42,"I don't think that I was unclear when I said that I don't believe that this is a good candidate for inclusion in Capybara. You asked me what you hypothetically could have done to improve this pull request, and I answered the question. I'm still not going to merge it though, I think I made that very clear.
",jnicklas,2013-03-13 07:02:42
1006,2013-03-13 14:20:48,"Oops. I apologize. I forgot to re-close it. Thank you for the info!
",sirbrillig,2013-03-13 07:02:42
1005,2013-03-11 23:12:28,"This should prevent race conditions when calls to `synchronize` are nested.
",jnicklas,2013-03-12 08:43:36
1005,2013-03-12 21:03:58,"Thank you
",deepj,2013-03-12 08:43:36
1004,2013-03-11 22:54:48,"I have the following capybara spec:

<S_CODE_TOKEN>

and on the page I have this coffeescript:

<S_CODE_TOKEN>

At the line I noted in the spec, a truncate is happening so that all the data is gone and the subsequent steps of the spec fail. I think the truncate is happening because Capybara isn't waiting for the mixpanel AJAX call to return, because this causes the same error:

<S_CODE_TOKEN>

And this change allowed the tests to pass:

<S_CODE_TOKEN>

I'm not sure how Capybara's intelligent waiting works. The documentation on AJAX only gives examples for when you're waiting for a div to become visible, is that the only case where Capybara will intelligently wait for an AJAX response?
",choxi,2013-03-12 12:37:26
1004,2013-03-11 23:03:09,"@choxi you need to have capybara look for something that changes on the screen when the ajax function finishes.   Then capybara will wait for that to happen.
",twalpole,2013-03-12 12:37:26
1004,2013-03-12 01:00:48,"Thanks Thomas, I was hoping there would be a way to work around that. 

On Mar 11, 2013, at 4:03 PM, Thomas Walpole notifications@github.com wrote:

> @choxi you need to have capybara look for something that changes on the screen when the ajax function finishes. Then capybara will wait for that to happen.
> 
> —
> Reply to this email directly or view it on GitHub.
",choxi,2013-03-12 12:37:26
1003,2013-03-10 18:31:29,"I've mistakenly [made a commit requiring Ruby >= 1.9.3](https://github.com/jnicklas/capybara/commit/7a4c302ce85c0ead431b57ea20c2c10bf19607a1) instead of pull request

Reason: I've edited file through Github editor. When I did it previously, a pull request was automatically created. Now I'm repo collab so it's no longer the case. Sorry for this.
",abotalov,2013-03-10 18:36:54
1003,2013-03-10 18:35:22,"No worries. I don't know how many people still use 1.9.2. I doubt anyone uses versions earlier than that. Last time I checked the test suite failed on 1.9.2, and we don't run travis builds there, so I think this is the right call.
",jnicklas,2013-03-10 18:36:54
1003,2013-03-18 17:17:13,"Just a note that the default Ruby version for Heroku apps on Cedar is ruby 1.9.2p290. Anyone desiring to match their dev ruby to production (hopefully everyone) will need to accommodate for this change.
",baldwindavid,2013-03-10 18:36:54
1003,2013-03-18 17:32:33,"@baldwindavid It's easy to use 1.9.3 on Heroku - https://devcenter.heroku.com/articles/ruby-versions 
",abotalov,2013-03-10 18:36:54
1003,2013-03-18 17:52:01,"Yep, just noting the Heroku default and the likely resulting large number of apps running 1.9.2.
",baldwindavid,2013-03-10 18:36:54
1002,2013-03-10 12:54:24,"I'm trying to get Capybara with Rack::Test to work. It escapes second slash in visit's argument which results in a routing error. Earlier I've posted about this in the mailing list: https://groups.google.com/forum/?fromgroups#!topic/ruby-capybara/dh_NikCrgq0

Failing spec:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

routes.rb

<S_CODE_TOKEN>

The strange thing is that if set `Capybara.app_host` to my local server url it works, but also breaks all my `js: true` tests as they hit the development server.
",fenelon,2013-03-11 23:53:48
1002,2013-03-11 16:33:47,"I've never seen an error like this. It seems unlikely that you'd be the only person encountering an error like this if it weren't something in your app that causes this. Maybe someone has overridden the `visit` method?
",jnicklas,2013-03-11 23:53:48
1002,2013-03-11 16:53:21,"@jnicklas, I would be really grateful for any advice on narrowing down this issue.

I now had to put an around filter for every spec that uses Rack::Test and has 2 slashes in visit call.

Gems:

<S_CODE_TOKEN>

spec_helper.rb

<S_CODE_TOKEN>
",fenelon,2013-03-11 23:53:48
1002,2013-03-11 19:31:39,"I'm sorry, I can't help you with that. Just debug it like you would any other issue in your app. Somewhere in your stack, something is going wrong. Don't be afraid ;)
",jnicklas,2013-03-11 23:53:48
1002,2013-03-11 21:48:35,"Thanks anyway, @jnicklas. :) Are you absolutely sure that it's an app-level problem? Could you at least point me at the differences `Capybara.app_host` makes to `Rack::Test` behaviour? Cause those slashes dont get escaped if I specify it. 
",fenelon,2013-03-11 23:53:48
1002,2013-03-11 22:45:31,"I think this is the only relevant part: https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L178-L180

Not sure how that would affect things.

I can't be absolutely sure that it's at the app level of course, but it seems like the likeliest explanation to me. Capybara 2.0.2 has been out there for a while, at least you must be doing something a bit unusual, otherwise it seems pretty strange that we wouldn't have found such an obvious bug by now.
",jnicklas,2013-03-11 23:53:48
1002,2013-03-11 22:48:57,"Hmm, just saw that you have `Capybara. always_include_port = true`. What happens when you switch that off? It's a long shot, since that option _should_ have no effect on RackTest, but might be worth a try...
",jnicklas,2013-03-11 23:53:48
1002,2013-03-11 23:38:30,"@jnicklas, it seems to have no effect on this issue.

# 

FOUND IT! After 2 tries back in November and 4 days this month! 

Somehow, it's been crashing because of this line in routes:

<S_CODE_TOKEN>

Rack::Test somehow hitting Rails with `www`. =/

Thank you, Jonas! I couldn't get to sleep because of this bug. 
",fenelon,2013-03-11 23:53:48
1002,2013-03-11 23:47:47,"@fenelon ahh, if you're satisfied that this was a bug in your app, please close this issue.
",jnicklas,2013-03-11 23:53:48
1002,2013-03-11 23:53:48,"@jnicklas, closing it now. Thanks again!

P.S. Do you think the fact the default `Rack::Test` behaviour setting `www` subdomain worth reporting to them? 
",fenelon,2013-03-11 23:53:48
1002,2013-03-12 07:23:06,"@fenelon no, we set that in Capybara, and it's intentional, because Rails uses the same.
",jnicklas,2013-03-11 23:53:48
1001,2013-03-10 12:22:10,"I'm testing our heavy AJAX and Java enterprise SaaS application through RSpec, Capybara and Selenium/Poltergeist and it saves some data in HTML5 session storage. Unfortunately, Capybara doesn't reset them during reseting session what affects some my scenarios. I can make ""signing out from the application"" but it takes some additional time and sometimes it fails. If it fails, so it affects some other scenarios.

It'd be nice when Capybara resets HTML5 session storage too. Thanks
",deepj,2013-03-11 16:34:32
1001,2013-03-10 23:21:50,"I think it's a quiet rare use case and adding special support to Capybara isn't worth it. I think you should use Selenium API directly - http://rubydoc.info/gems/selenium-webdriver/Selenium/WebDriver/HTML5/SessionStorage. But I don't know how to call this class
",abotalov,2013-03-11 16:34:32
1001,2013-03-10 23:39:54,"I wish some standard API in Capybara for this. For now we use Selenium temporarily instead of Poltegeist because of many crashes of PhantomJS (mainly in cases of uploading files).

Session storage is powerful _alternative_ to cookies and with more using HTML5 feature would be really worth to support this. It doesn't mean usage of this feature is rare now but in the future won't be.
",deepj,2013-03-11 16:34:32
1001,2013-03-11 01:59:06,"Currently the only drivers in selenium-webdriver that have support for SessionStorage are the android and iphone drivers.  I dont know why none of the other drivers have support since dekstop browsers have local and session storage nowadays.  It might be worth a question over over at selenium-webdriver.  Once support is added, having capybara clear it would be easy enough.
",twalpole,2013-03-11 16:34:32
1001,2013-03-11 02:19:12,"@deepj  doing page.execute_script('sessionStorage.clear()') from an after block for javascript tests or as the last step of any tests that set the sessionStorage would accomplish what you want too, without having to go through signing out of your app
",twalpole,2013-03-11 16:34:32
1001,2013-03-11 03:00:23,"Thanks. I noticed it as well that works only for Android and iPhone drivers. Your advice works like a charm. I didn't realize I can call `sessionStorage.clear()` through `execute_script`.
",deepj,2013-03-11 16:34:32
1001,2013-03-11 16:34:32,"As long as this isn't supported in the commonly used webkit browsers, it's probably not worth adding it to Capybara. Closing.
",jnicklas,2013-03-11 16:34:32
1001,2013-11-15 15:29:10,"@deepj says ""It'd be nice when Capybara resets HTML5 session storage too.""

I say this is definitely an expected behaviour of capybara-cucumber integration. Otherwise the scenarios are not isolated.

Some web-apps use html5 local storage in stead of cookies to remember visitors across sessions.
",jarl-dk,2013-03-11 16:34:32
1001,2013-11-15 15:47:50,"I found a solution for Selenium/firefox on desktop on 
https://groups.google.com/d/msg/selenium-users/qahuzVl1svQ/hR6FO3GGzDMJ
The solution is 

<S_CODE_TOKEN>

but again this is definitely an expected behaviour when using 

<S_CODE_TOKEN>
",jarl-dk,2013-03-11 16:34:32
1001,2013-11-15 16:08:23,"@jarl-dk Most web apps don't use HTML5 web storage at all.
I think it doesn't worth to be put to `cucumber.rb` as it will slower tests a bit.

Also note that Capybara doesn't clear cache between scenarios. It may affect other scenarios for some web apps. I think Capybara shouldn't do it for the same reason.
",abotalov,2013-03-11 16:34:32
1001,2015-03-18 19:16:55,"This needs to be supported.  New web applications prefer local storage over cookies or sessions.  We have an angularJS web app that uses local storage for all session data and is not getting reset when using capybara with rspec.
",eterry1388,2013-03-11 16:34:32
1001,2015-10-09 12:00:51,":+1: for reseting localStorage
",Nakilon,2013-03-11 16:34:32
1001,2016-10-28 15:26:06,"Nowadays, localStorage and sessionStorage are in common use and are supported by all major browsers except Opera Mini.

http://caniuse.com/#feat=namevalue-storage

Would be great to revisit this idea. Even if it were off by default and could be turned on via something like:

<S_CODE_TOKEN>
",nertzy,2013-03-11 16:34:32
1000,2013-03-09 21:43:40,,twalpole,2013-03-10 14:10:16
999,2013-03-09 03:55:13,"Simple clarification to help Exception tracking while debugging a test suite build on Capybara, helping to see right away which method raised NotSupportedByDriverError exception
",randoum,2013-03-10 14:09:23
998,2013-03-08 23:35:35,,justinledwards,2013-03-08 23:39:26
997,2013-03-08 23:10:46,"I think it could be useful to make it so you can pass multiple arguments to fill_in
Example:
  fill_in 'password', 'password_confirmation', with: 'some_password'
",foklepoint,2013-03-08 23:24:34
997,2013-03-08 23:24:34,"That's not really on the horizon, from my perspective. I think it's not particularly useful and needlessly complicates things.
",jnicklas,2013-03-08 23:24:34
996,2013-03-08 13:26:45,"Closes #982.

Just wanted to document this change with a pull request before I merge it.
",jnicklas,2013-03-16 01:10:36
996,2013-03-08 14:22:52,"Feedback welcome!
",jnicklas,2013-03-16 01:10:36
996,2013-03-08 20:12:19,"The reason I implemented it like this, is because `:disabled` really only makes sense for a few specific selectors. Also, we really want the default to exclude disabled fields. Especially to preserve compatibility with 2.0 and follow semver.

We could add the option attribute to the `:option` selector, but we can't make it the default, since that would be a breaking the API. Not sure if that would just serve to confuse. In principle, I agree. Maybe we could go down the same route of adding a config option for it. Not sure if that's worth it though.
",jnicklas,2013-03-16 01:10:36
996,2013-03-08 20:53:57,"@jnicklas @abotalov mentioned that fieldset supports the disabled attribute, and the spec says ""When specified, causes all the form control descendants of the fieldset element, excluding those that are descendants of the fieldset element's first legend element child, if any, to be disabled.""   This is not currently supported in racktest, and a quick test with selenium seems to show that it gets it wrong too (field is actually disabled in the browser, but the native element returns that its enabled).  Not sure if its worth trying to implement.
",twalpole,2013-03-16 01:10:36
996,2013-03-08 21:38:04,"Note: @jnicklas and @twalpole replied to comment that was deleted just after writing
1. In this pull request `:option` doesn't support `:disabled`. But it supports it according to [HTML 5 spec](http://developers.whatwg.org/links.html#disabled-elements).
2. I prefer fast CSS selectors over selectors like `:button` that are transformed to XPath selectors so I think `:disabled` should also be available on `:css` and `:xpath`. IMO it does make sense to write `find('#button_id', disabled: true)`
3. Most of the buttons are never disabled so I think Capybara shouldn't check if button is disabled if `:disabled` option isn't specified. Such checks take time (especially in webdriver) and I don't want my tests to be slower because of unnecessary checks. But it can't be so because of backwards compatability as @jnicklas pointed out.

[But as I see](https://github.com/jnicklas/xpath/commit/6429e5a84a7893d514be1cb04d3ff250b74ab1f8) previously only disabled buttons weren't find by default. Do you think it will be better to set default for disabled to `false` only for buttons and to `nil` for all other selectors (where `nil` means no check)?

Another option is to add config option `find_disabled_elements` set by default to `false` and allow user to set it to `true`
",abotalov,2013-03-16 01:10:36
996,2013-03-08 23:04:06,"@abotalov no, fields need to be disabled in 2.0 as well, not just buttons. This change as far as I'm aware is completely compatible with 2.0.

As for performance: we can't have the cake and eat it too, unfortunately. If we want disabled fields not to be found by default (which we do, both for semver and simply because it's a good idea), and we want that option to be configurable, which apparently a lot of people seem to want, even though I kinda think they're wrong, then this is what we end up with.
",jnicklas,2013-03-16 01:10:36
996,2013-03-08 23:21:18,"@jnicklas I haven't understood. Do you agree with providing something like `Capybara.find_disabled_elements` or not?
",abotalov,2013-03-16 01:10:36
996,2013-03-08 23:23:01,"I think it's pushing it in terms of features. I can't really see the use case. When would I need to locate disabled fields? That's not really clear to me. Why would I need to do it all the time?
",jnicklas,2013-03-16 01:10:36
996,2013-03-08 23:42:23,"When I wrote that I thought that it takes quiet a lot of time to get attribute's value from Selenium. Now I made a quick check and it seems that it takes about 10 ms to get element attribute's value. Probably config option isn't worth saved time
",abotalov,2013-03-16 01:10:36
996,2013-03-09 18:08:42,"It might also be nice to have a spec around what happens when trying to find/click a _non_-disabled field/button when `:disabled => true` is set. I.e., will it find _only_ disabled elements or simply no longer exclude them?
",amarshall,2013-03-16 01:10:36
996,2013-03-10 14:31:27,"I am a concerned about the performance issue that @abotalov has pointed out. I did some benchmarking, with this code: https://gist.github.com/jnicklas/5128764

Running against this pull request:

<S_CODE_TOKEN>

For comparison, here it is running against master:

<S_CODE_TOKEN>

We can see that there is some variance, but clearly, this pull request yields an almost x2 decrease in performance when locating buttons. Unless the benchmark is somehow flawed.

To me, that's not really acceptable. @sobrinho and other who wanted this, what do you think?
",jnicklas,2013-03-16 01:10:36
996,2013-03-10 14:36:21,"Just ran it again with a higher `n`, seems like it's not _quite_ as bad:

<S_CODE_TOKEN>

that's roughly a 25% increase, not a 100% increase. Still quite a bit.
",jnicklas,2013-03-16 01:10:36
996,2013-03-10 15:18:19,"With `n = 1000` I have similar results to @jnicklas :

<S_CODE_TOKEN>
",abotalov,2013-03-16 01:10:36
996,2013-03-10 15:32:37,"Are you saying the capybara is going a little slower because of the disabled filter?

If you are saying that the master version took `20.327778` seconds and the version with disabled filter took `24.458801` for 1,000 iterations, I would be happy.

Reducing the performance is a bad thing but I don't think this difference of 4 seconds, considering 1,000 iterations, will make a impact even on large suites.

Considering a suite that takes 20 minutes and iterates with 3,000 inputs/buttons, going to 20 minutes and 12 seconds won't be really noticeable.

P.S.: I'm not sure if that's the problem that you guys are saying :)
",sobrinho,2013-03-16 01:10:36
996,2013-03-10 15:49:41,"I forgot to do `git submodule update` before running tests.
1. Here are results with Capybara set to `disabled-filter` and xpath set to master (I runned using `bundle exec ruby test.rb`):

<S_CODE_TOKEN>
1. Results with Capybara set to `master` and Xpath set to `master`:

<S_CODE_TOKEN>
1. Results with Capybara set to `master` and Xpath set to `e3fa3acbd1059dfa9b8d015437d2ac5b4272d122` (previous commit):

<S_CODE_TOKEN>
1. Results with Capybara set to `disabled-filter` and Xpath set to `e3fa3acbd1059dfa9b8d015437d2ac5b4272d122`:

<S_CODE_TOKEN>

Note: from those only 1 and 3 make sense
",abotalov,2013-03-16 01:10:36
996,2013-03-10 16:03:26,"I guess results say that it takes 1.5 times more for Selenium to return 2 elements than one element.
",abotalov,2013-03-16 01:10:36
996,2013-03-13 00:06:19,"The speed penalty could be removed by having Query pass the disabled option (or all the options) through to the selector generator and adding disabled and not_disabled to XPath -  so something along the lines of

<S_CODE_TOKEN>

This would remove the overhead of returning multiple elements that need to be checked and the extra roundtrip request to the browser to determine whether each element is disabled or not
",twalpole,2013-03-16 01:10:36
996,2013-03-13 00:34:47,"@jnicklas Implementing with disabled being passed to the selector generator I get the following times for n=1000

<S_CODE_TOKEN>

that was with the button selector below

<S_CODE_TOKEN>
",twalpole,2013-03-16 01:10:36
996,2013-03-13 00:57:21,"There are downsides using this approach?
",sobrinho,2013-03-16 01:10:36
996,2013-03-13 02:04:47,"@sobrinho One downside I can think of is that according to the html 4 and 5 spec form controls inside a fieldset that is disabled are supposed to be disabled (unless they are in its first legend child element).  One would assume that browsers would report those controls as disabled even though they dont have the disabled attribute on them.  Querying via xpath for the disabled attribute would obviously not be correct then.  That being said selenium-webdriver (with firefox at least)  does not actually report those elements as disabled even though they are displayed as disabled, so I'm not sure whether thats a bug or a conflict between the html spec and the webdriver spec (Also current xpath gem uses the disabled attribute on the element so technically its wrong too).  The other downside is it probably means special casing the disabled option since it would no longer be implemented as a custom filter
",twalpole,2013-03-16 01:10:36
996,2013-03-13 12:05:58,"It may be considered a bug but I never seen any web application using the disabled attribute on fieldsets.

Since XPath and Capybara seems to never be cared about this attribute on fieldset, I don't think we should care about it right now (maybe in the future or when someone report that's a needed feature).

@jnicklas ?
",sobrinho,2013-03-16 01:10:36
996,2013-03-13 21:32:28,"@jnicklas PR 1011 builds on top of this PR, implements the concept of Selector modifiers which are applied to the selector expression based on options, and then implements :disabled as modifiers instead of filters which should get rid of the performance hit.
",twalpole,2013-03-16 01:10:36
996,2013-03-15 14:58:50,"Okay, I did some real world benchmarking on an actual app which does quite a bit of form stuff. I only ran the js based capybara tests. These are the results:

<S_CODE_TOKEN>

As you can see there is no significant difference in performance between any of these options in a real world situation. The performance penalty paid for this seems to be negligible.
",jnicklas,2013-03-16 01:10:36
995,2013-03-07 19:54:46,"- remove transactions stuff from Test::Unit section, as it is covered in its own section
- use alternative thread monkey patch that works with spork
",michaelrkn,2013-03-26 19:18:32
995,2013-03-08 12:02:30,"I'm hesitant to merge the alternate thread monkey patch, since I've never used it myself, or heard of anyone else use it. The rest is fine.
",jnicklas,2013-03-26 19:18:32
995,2013-03-08 20:50:33,"I haven't seen it used widely, either, but it's the only way I've been able to get Capybara to work with Spork when testing with JS. You can see the method it overrides at https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb#L449; it changes `Thread.current.object_id` to `Thread.main.object_id`. 
",michaelrkn,2013-03-26 19:18:32
995,2013-03-25 23:29:11,"@jnicklas @michaelrkn what's the best move here?  I'm hoping to help triage a little bit, and figured this was a decent place to start?  I can send another PR that just cherry-picks the first commit, if that's helpful.
",knewter,2013-03-26 19:18:32
995,2013-03-26 12:58:03,"@knewter sounds good to me!
",jnicklas,2013-03-26 19:18:32
995,2013-03-26 16:50:50,"I went ahead and did this in issue #1026. Would you like me to open a separate request for the monkey-patch, or do you not want to go ahead with that? Maybe the two of you could test the patch yourselves so that you're comfortable with it (or find something that I didn't) before moving forward. 
",michaelrkn,2013-03-26 19:18:32
995,2013-03-26 19:18:32,"Let's leave it as is, for now.
",jnicklas,2013-03-26 19:18:32
995,2013-03-26 19:21:57,"Is there a recommended approach for people using Capybara with a Javascript driver and Spork? If so, I'd love to add it to the readme.
",michaelrkn,2013-03-26 19:18:32
994,2013-03-07 18:02:40,"Possibility to use 'textarea' and 'select' as a :type in Rspec matcher have_field(). (New implementation of https://github.com/jnicklas/capybara/pull/992)
",yannp,2013-03-08 12:03:55
994,2013-03-07 19:17:38,"Just do something like:

<S_CODE_TOKEN>

Voila, no changes to Query or anything needed.
",jnicklas,2013-03-08 12:03:55
994,2013-03-07 20:09:45,"Thanks! I've updated the code.
",yannp,2013-03-08 12:03:55
994,2013-03-08 09:22:11,"Thanks for pointing this out, pushed the update, I also changed another test to make sure 'textarea' and 'select' are distinguished from each other.
",yannp,2013-03-08 12:03:55
993,2013-03-07 15:57:13,,take,2013-03-07 19:25:42
993,2013-03-07 19:25:41,"We should have specified that we depend on Ruby 1.9.x in the gemspec, unfortunately I didn't know that is possible until after the gem release. As it stands, I don't really feel like putting a giant notice in the README like this. Honestly, if you're still using 1.8.7, you can't expect _anything_ to work anymore. It's been unmaintained for almost a year, and it's EOL is imminent. I don't feel like worsening everyone else's experience of reading the README just because some people are too stubborn to move on.
",jnicklas,2013-03-07 19:25:42
993,2013-03-08 00:31:46,"> We should have specified that we depend on Ruby 1.9.x in the gemspec, unfortunately I didn't know that is possible until after the gem release.

o ok! that'lll help :)

I would really like to move to ruby 1.9.x, but some projects are just too legacy :(
",take,2013-03-07 19:25:42
992,2013-03-07 15:23:57,"Following the discussion on https://github.com/jnicklas/capybara/issues/981 I took the liberty to implement an option to have_field() allowing to filter by tag name ('input', 'textarea', 'select'), ex:

`expect(page).to have_field('Description', :tag_name => 'textarea')`
",yannp,2013-03-07 19:14:04
992,2013-03-07 15:33:43,"I don't like this at all. If `:tag_name` were an option here, it should be an option _everywhere_. Which is not a good idea, and does not make any sense. I'd be okay with overriding `type` to allow `textarea` and `select`, but that's as far as I'm willing to go.
",jnicklas,2013-03-07 19:14:04
992,2013-03-07 18:04:38,"Ok I made a new pull request with the new implementation.
",yannp,2013-03-07 19:14:04
991,2013-03-07 08:23:51,"Hello

I use

<S_CODE_TOKEN>

and default driver beyond README

But When I run js feature with js: true, it raise Rack application timed out during boot

I tried http://docs.tddium.com/troubleshooting/browser-based-integration-tests and google ""capybara js Rack application timed out during boot"" but no useful solution

Can anyone help me? Heartfelt thanks.

same with https://github.com/jnicklas/capybara/issues/352
",zlx,2013-03-07 15:35:44
991,2013-03-07 15:35:44,"Not an issue. Your application times out during boot, whatever the reason for that is you'll have to investigate yourself.
",jnicklas,2013-03-07 15:35:44
991,2013-03-07 15:37:52,"To be a bit less harsh and more constructive: your application is taking to long to boot. From here, we don't know anything about your application, so we can't really say _why_ it's taking too long. You'll have to investigate yourself through profiling, or whatever, why your app starts so slow, and why it is timing out. Most likely this is not an issue with Capybara. Capybara is used by thousands of people whose apps _don't_ time out during boot.
",jnicklas,2013-03-07 15:35:44
991,2013-03-07 15:48:38,"Yes. our application is slow!

When without `js => true`, It works. 

so the problem is about the feature, maybe the default server boot timeout time is too short?

So Can I change Capybara boot timeout time like https://github.com/jnicklas/capybara/issues/#issuecomment-1495832 for `""capybara"", '~> 2.0.1'`
",zlx,2013-03-07 15:35:44
991,2013-03-07 15:55:03,"The timeout is 60s, it used to be configurable, but it isn't anymore, for some reason I can't quite remember. @joliss tinkered with that stuff a while ago, maybe she remembers. Remember that at this point your app is probably already _loaded_ we're only talking about actually _booting_ it, which _should_ be very fast.
",jnicklas,2013-03-07 15:35:44
991,2013-03-07 16:17:13,"I'll try to investigate my app and thinks very much!
",zlx,2013-03-07 15:35:44
991,2013-03-07 17:13:47,"I believe we took out the option simply because there is little reason to change it in practice. If someone can show a case of an app legitimately taking longer than 60 seconds to boot (and not just locking up indefinitely), we can revisit that of course.
",joliss,2013-03-07 15:35:44
990,2013-03-06 20:00:18,"If I have a list of items that comes in dynamically:

<S_CODE_TOKEN>

it's very difficult to say ""find me the first item that has count greater than 0, allowing for asynchronous loading."" I can't do `find('li.item', :text => /[1-9]/)` because there might be _several_ such elements. I can't do `first('li.item', :text => /[1-9]/)` because that doesn't wait for the data to load.

After reading the source, my best guess is `synchronize { all(...).first }.tap(&:allow_reload!)`, but I'm not _sure_.
",jamesarosen,2013-03-06 21:41:25
990,2013-03-06 20:36:03,"`Capybara::DSL` doesn't have `synchronize` and changing it to `find('body').synchronize { all(...).first }).tap(&:allow_reload!)` doesn't help. The all still executes immediately and returns `[]`.
",jamesarosen,2013-03-06 21:41:25
990,2013-03-06 20:40:30,"I've resorted to

<S_CODE_TOKEN>
",jamesarosen,2013-03-06 21:41:25
990,2013-03-06 21:36:10,"Capybara 2.1 will have:

<S_CODE_TOKEN>

Which will do what you want. I don't think there is any really good way of doing this in Capybara 2.0, but something like this is probably most correct:

<S_CODE_TOKEN>

I think that should do the trick.
",jnicklas,2013-03-06 21:41:25
990,2013-03-06 21:41:25,"OK.
",jamesarosen,2013-03-06 21:41:25
989,2013-03-04 12:45:12,"Hi

when we do

<S_CODE_TOKEN>

<S_CODE_TOKEN>

it works fine as 1 gets casted into string. When we do the same for

<S_CODE_TOKEN>

we get error

<S_CODE_TOKEN>
",zewelor,2013-03-26 20:29:49
989,2013-03-08 12:05:00,"Please add some tests to this pull request.
",jnicklas,2013-03-26 20:29:49
988,2013-03-03 23:08:03,"[My previous pull request](https://github.com/jnicklas/capybara/pull/915) wasn't updated so I made a new one.

Some error messages were changed to increase code reuse.

I plan to add `wait` option in another pull request.
",abotalov,2013-03-17 14:48:22
988,2013-03-05 07:53:15,"Travis tests failed but they pass on my computer.
",abotalov,2013-03-17 14:48:22
988,2013-03-10 14:28:36,"Can you give a feedback on this?
",abotalov,2013-03-17 14:48:22
988,2013-03-10 14:40:17,"It looks pretty good, I'm still a bit concerned with the argument parsing, it doesn't look quite right to me. I'll pull it down and play around with it a bit.
",jnicklas,2013-03-17 14:48:22
988,2013-03-10 22:59:26,"I've updated PR. For some reason I've also made an unnecessary ""Merge remote-tracking"" commit
",abotalov,2013-03-17 14:48:22
988,2013-03-17 14:56:09,"Finally merged this, thank you @abotalov!
",jnicklas,2013-03-17 14:48:22
987,2013-03-02 03:57:00,"Error pointed out by @jcoglan
",twalpole,2013-03-03 00:15:54
986,2013-03-02 00:23:40,"Whenever a request spec fails, I use `respec` gem to rerun failed examples. When doing this, I want to activate `:chrome` as driver (instead of headless `:webkit`) so I can inspect the problem visually within Chrome.

Instead of adding a `driver: :chrome` manually to the test case, I'd like to specify it globally like so:

<S_CODE_TOKEN>

Sadly this doesn't seem to work for specs that don't have JavaScript enabled. Is there a way to switch JS on for all specs? Something like:

<S_CODE_TOKEN>

Thanks
",jmuheim,2013-03-02 08:33:47
986,2013-03-02 08:33:47,"Questions should be asked in mailing list or at Stack Overflow
",abotalov,2013-03-02 08:33:47
986,2013-03-02 09:59:10,"I'll do. I'm sorry.
",jmuheim,2013-03-02 08:33:47
985,2013-03-01 10:00:45,"I want to take key press event.But this is not on specific field,its on page/window.
example:
While doing automation,on web page I have short-cut key suppose ""M""(keyboard key). So how should I achieve this?If it can be achieve inserting java script then how can I write it.?I'm beginner in JavaScript.
",nchandratre,2013-03-04 22:03:32
985,2013-03-04 22:03:32,"Questions should be asked in mailing list or stackoverflow.com
",abotalov,2013-03-04 22:03:32
984,2013-02-28 15:49:06,"I'm creating this as kind of a meta issue, so the process isn't as much in my head. I think we're in a fairly good state right now. I just upgraded a project from Capybara 1.1.4 to 2.1 as an exercise and it worked pretty well, only a few failures, all of which could be fixed easily by using the new `:match` option.

I want to release a beta in the next couple of days. I really want to get #982 fixed for the final release, but maybe we can release the beta before it is finished?
## Beta

In a couple of days.
- [x] Fix #982?
- [x] Release xpath 2.0.0.beta
- [x] Coordinate with driver authors
- [x] Update history file
- [x] Publish blog post re new features. Draft here: https://gist.github.com/jnicklas/ea03263353d98c6dfae8
- [x] Add post install instruction to gem file, warning of default change?
## RC

Wait two weeks, maybe?
- [x] Make sure capy-webkit and poltergeist have releases available
## Final

One week after RC?
- [x] Release final xpath 2.0.0
## Drivers?

@jonleighton, @jferris, @mhoran, @jcoglan, we have some breaking changes coming in 2.1 as you know from previous discussions. I'd like to coordinate so that we have releases for the drivers as soon as possible. Do you guys have time to work on this in the coming weeks? Is there anything I can do to help?
",jnicklas,2013-04-09 15:34:27
984,2013-02-28 16:38:08,"I think @mhoran implemented/merged everything we need:
- `Node#all_text`
- Native CSS
- `#title`
- `Node#hover` (work in progress)

Based on previous discussions and the draft blog post, I think we're covered. Anything we missed?
",jferris,2013-04-09 15:34:27
984,2013-02-28 16:46:31,"I think that's it, yes. Very nice :)
",jnicklas,2013-04-09 15:34:27
984,2013-03-01 10:15:44,"Cool, I will try to find some time to add 2.1 support in Poltergeist.
",jonleighton,2013-04-09 15:34:27
984,2013-03-01 23:34:52,"I just pushed `find()` and `text()` updates. Here's what I have left to do (Terminus does not support file attachments):

[https://github.com/jcoglan/terminus/blob/master/spec/2.1/reports/phantomjs.txt](https://github.com/jcoglan/terminus/blob/master/spec/2.1/reports/phantomjs.txt)
",jcoglan,2013-04-09 15:34:27
984,2013-03-02 00:20:53,"I'm confused about how `find()` with `:wait` should work. I'm trying to make [this spec](https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/find_spec.rb#L31-L37) pass, which clicks a link that causes some content to show after a `setTimeout()`.

The problem is I have [this code](https://github.com/jcoglan/terminus/blob/0.5.0/lib/terminus/public/terminus.js#L252-L254) in my `click()` implementation that makes it block until all pending `setTimeout()` blocks have been run, as required by various resynchronization tests. So, by the time the above spec gets to the `find()` call, the content is already visible. Clearly `click()` should return immediately in this case instead of blocking.

Any tips how to resolve this? Have I implemented resync in the wrong place? Does Capy tell the driver how long to wait on a `find()` call in any way? What other information is the driver given?
",jcoglan,2013-04-09 15:34:27
984,2013-03-02 02:05:20,"I've got as far as I'm going to get for now. See my [spec report](https://github.com/jcoglan/terminus/blob/a2882b88884cba81c518ed5e224dce74e54a36c5/spec/2.1/reports/phantomjs.txt).

Outstanding problems:
- Terminus will not support `attach_file` or `hover` because JavaScript
- I can't figure out how resync and `:wait` should interact, as I mentioned
- I have fixed a problem I was having with `within_frame` by adding `</iframe>` in my Capy fork -- see https://github.com/jnicklas/capybara/commit/3eb7e6ca0ead0ba523cb0bf58f5cfe4c4c04f439#commitcomment-2725922 -- I don't know if this is legit
- I haven't done cross-browser testing yet
",jcoglan,2013-04-09 15:34:27
984,2013-03-03 13:54:16,"I've started work on this.

I see that it's now possible to do `within_frame(element)` where `element` is a node.

In Poltergeist, someone reported a bug a while ago where `within_frame(name)` could fail if the named frame was not loaded yet. I fixed this by polling the page to see if the frame is loaded yet. Unfortunately I've realised that this means that if the frame will _never_ be loaded (i.e. a frame named `name` does not exist), then Poltergeist will hang indefinitely (until a timeout gets hit).

This has lead me to conclude that Capybara's `within_frame` ought to use the synchronisation stuff that is used for other elements. I think the best solution would be for Capybara to do something like this:

<S_CODE_TOKEN>

The means that drivers don't have to implement a `within_frame` which handles both an element and a frame name, and it ensures that the frame element exists on the page (with polling as necessary) before the driver's `within_frame` gets called.

Sound reasonable?
",jonleighton,2013-04-09 15:34:27
984,2013-03-03 16:51:26,"The within_frame/within_window API is broken as hell. Anything we can do to improve that is a plus. I'd be happy to yank the spec which introduced this change in requirement, so that we can ship 2.1. The webkit guys seem to have the same problem. Then we can have a proper discussion about how that API should look and implement it properly. Sounds good?
",jnicklas,2013-04-09 15:34:27
984,2013-03-03 20:44:34,"It's not blocking me implementing support for 2.1, it's just something I noticed as a result of that spec being added. No need to remove that spec from my perspective, and I have worked around the issue with https://github.com/jonleighton/poltergeist/commit/7e216ee0f58315731e27f40731f7ca79ab0e4ab8 for now, but that's a bit of a kludge.

Poltergeist master is now green against Capybara 2.1 so everything is looking good from here.
",jonleighton,2013-04-09 15:34:27
984,2013-03-03 22:59:49,"We've implemented the `within_frame` change in capybara-webkit, so that's not a blocker. +1 to removing the overloaded functionality from `within_frame` and introducing a synchronized find method. We can't do the same for window switching given that we don't have a `Node` to represent the window, but we could wrap up the native ""window handle"" and introduce `find_window` to return an object to be used by `within_window`.

We have synchronization code to frame loading for capybara-webkit, but it was needed for the other unsynchrnoized methods, e.g. `#html`. capybara-webkit users can set a timeout for each request which resolves the issue of an iframe load never completing. This behavior may make sense to standardize if Selenium supports such a feature.
",mhoran,2013-04-09 15:34:27
984,2013-03-06 12:16:04,"@jcoglan basically the wait system uses Exceptions as control flow, cuz everyone knows that's a great idea. 

Capybara's `synchronize` method wraps pretty much everything that Capybara does; when an exception happens inside `synchronize` that is of a certain type, the block is rerun, until no exception is raised or a timeout occurs.

For the most part, this process is completely irrelevant to driver authors, since it's handled at Capybara's layer.

However, in certain cases, elements become invalid, for example they may have disappeared from the DOM, or become invisible or whatever. This doesn't appear to be such a huge problem, since the element is now invalid, interacting with it should obviously raise an error. Unfortunately, this situation leads to race conditions, when elements disappear and reappear off the DOM. Since version 1.1 we've had a system in Capybara called automatic reload, which when faced with such an exception will attempt to reload the element.

The only thing you need to do as a driver author is to make calling methods on invalid elements raise an exception, and then adding the exception class that is raised to [`invalid_element_errors`].(https://github.com/jnicklas/capybara/blob/master/lib/capybara/driver/base.rb#L50-L52).
",jnicklas,2013-04-09 15:34:27
984,2013-03-06 12:18:22,"@jcoglan In other words, you should _not_ block, in order to wait for timeouts. All actions performed in Capybara are assumed to be asynchronous. They don't _have_ to be, the RackTest driver is synchronous everywhere, but for JS support it makes more sense.
",jnicklas,2013-04-09 15:34:27
984,2013-03-08 17:43:55,"I'd like to include Capy 2.1 in my Gemfile, but am having trouble finding your dev branch. Is it just on `master`?

I really need the `match` method in my current project. :)
",jamonholmgren,2013-04-09 15:34:27
984,2013-03-08 17:48:46,"@jamonholmgren its master and you'll probably need the master branch of the xpath gem too
",twalpole,2013-04-09 15:34:27
984,2013-03-08 17:49:19,"Thanks!
",jamonholmgren,2013-04-09 15:34:27
984,2013-03-12 03:33:35,"Note to driver authors that #1000 may need your attention.
",mhoran,2013-04-09 15:34:27
984,2013-03-21 03:49:45,"#1013 needs attention as well.
",mhoran,2013-04-09 15:34:27
984,2013-03-25 22:21:39,"@jnicklas I'm confused by when calls should wait or not. e.g. compare https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/find_spec.rb#L47-L51 with https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/has_css_spec.rb#L24-L28. The former requires `:wait` in order to wait for the `setTimeout()` to fire, while the second one doesn't. Is this difference indicated to the driver in any way?

I have this code in my `click` implementation that makes `click` block until timeouts and ajax calls have completed:

https://github.com/jcoglan/terminus/blob/master/lib/terminus/public/terminus.js#L245-L254

Should I remove this entirely, or reduce what it does, or are there options I'm ignoring in my implementation? Simply removing this logic and making `click` return immediately after triggering the event makes a lot of ""waits for asynchronous load"" specs fail, like the `has_css` spec I've linked to above.
",jcoglan,2013-04-09 15:34:27
984,2013-03-26 07:26:46,"@jcoglan did you see my explanation above: https://github.com/jnicklas/capybara/issues/984#issuecomment-14496380

Capybara will keep retrying until it succeeds. You should _not_ block anywhere, it shouldn't be necessary. The :wait option is new, and just makes it configurable _how long_ Capybara will wait and retry, again, you shouldn't have to care about it. Try rereading the README section on async JS and my explanation above.
",jnicklas,2013-04-09 15:34:27
984,2013-03-26 09:01:28,"@jnicklas Did this change in 2.0? Looking at my tests (I maintain compatibility with 1.1, 2.0 and 2.1) there was a group of tests in 1.1 called `driver with resynchronization support`, suggesting resync was the driver's responsibility. I've removed my resync code and got things working on 2.1, but on 1.1 these two tests fail:
- `#find with synchronization turned on should wait for all ajax requests to finish`
- `#find with short synchronization timeout should raise an error`

Can you clarify the role of resync in 1.1 and whether it was Capy's or the driver's responsibility?
",jcoglan,2013-04-09 15:34:27
984,2013-03-26 09:12:26,"Here's my commit removing all my resync support code, so `click()` now just dispatches the event and returns.

https://github.com/jcoglan/terminus/commit/b55944adf6da33d97c31851a316e8d0699ba1d19

I now have all the 2.1 tests passing, at least on PhantomJS and Chrome. Still compatible with 2.0, and with 1.1 modulo the two failures I mentioned in my previous comment.
",jcoglan,2013-04-09 15:34:27
984,2013-03-26 09:46:47,"@jcoglan it changed between 1.0 and 1.1, where we implemented the auto_reload feature which made resynchronization in the driver no longer necessary. However, we kept the resynchronization feature around, in the Selenium driver, mostly for compatibility reasons, but it was switched off by default. As long as the rest of the tests pass, I think you should be good with just removing `driver with resynchronization support` from your suite.
",jnicklas,2013-04-09 15:34:27
984,2013-03-27 10:16:42,"@jnicklas Okay, I've reinstated my resync code but made it disabled-by-default. I'm now passing all the tests on 1.1, 2.0 and 2.1.
",jcoglan,2013-04-09 15:34:27
984,2013-03-27 13:32:55,"@jcoglan nice :D
",jnicklas,2013-04-09 15:34:27
984,2013-04-02 15:27:36,"Just a heads-up that I've pushed 2.1.0.rc1: https://groups.google.com/forum/?fromgroups=#!topic/ruby-capybara/grJ2VanORfw
",jnicklas,2013-04-09 15:34:27
984,2013-04-09 15:34:26,"It's done! Pushed to Rubygems.
",jnicklas,2013-04-09 15:34:27
984,2013-04-15 22:04:04,"FWIW Poltergeist 1.2 has gone out with Capybara 2.1 support.
",jonleighton,2013-04-09 15:34:27
983,2013-02-28 09:44:46,"I'm using the below versions for testing:
""rspec-rails"", ""~> 2.13.0""
'capybara', '~> 2.0.2'

and running the simple title spec:

<S_CODE_TOKEN>

fails:

<S_CODE_TOKEN>

The needed title is displayed in a browser but the test fails. Any idea? Thanks.
",Javix,2013-02-28 11:11:18
983,2013-02-28 11:11:18,"After digging a little bit, I use the below solution:

<S_CODE_TOKEN>

Hope this helps.
",Javix,2013-02-28 11:11:18
983,2016-01-25 21:50:58,"Had this same problem while following «Ruby on Rails Tutorial» and using rspec_rails 3.2.1. `have_title` allowed me to continue.

<S_CODE_TOKEN>
",Rojo,2013-02-28 11:11:18
982,2013-02-27 15:47:29,"Hi,

What do you think about creating a `have_disabled_field` matcher?

I often create it in my applications and maybe it fits on capybara by default since it's pretty common.

An example of usage:

<S_CODE_TOKEN>

The total field must not be editable and must have the value `90.00` in this example.

I have this one:

<S_CODE_TOKEN>

It is not strictly and the error message is useless but it's just an idea.

I would be happy to work in a pull request to add it but I'm not sure where to put it (capybara or `XPath::HTML.disabled_field`).

An second implementation would be an option on `have_field`:

<S_CODE_TOKEN>

I prefer the latter but it requires more effort since `XPath::HTML.field` ignores disabled elements.
",sobrinho,2013-03-16 01:10:35
982,2013-02-27 15:53:12,"We'll probably make `:disabled` a filter, so that you can do: `have_field(""Blah"", :disabled => true)`.
",jnicklas,2013-03-16 01:10:35
982,2013-02-27 15:54:06,"Any work towards that would be excellent, see #948.
",jnicklas,2013-03-16 01:10:35
982,2013-02-27 16:16:49,"@jnicklas I should remove this line? https://github.com/jnicklas/xpath/blob/master/lib/xpath/html.rb#L172

I'm a bit afraid to remove it since it will change the currently behavior of xpath, regardless of the behavior of capybara.
",sobrinho,2013-03-16 01:10:35
982,2013-02-27 21:22:39,"I'm cool with breaking compatibility in the XPath gem. We'll do a major release, just in case.
",jnicklas,2013-03-16 01:10:35
982,2013-02-28 00:54:05,"Great!

I will work on this pull request tomorrow :)
",sobrinho,2013-03-16 01:10:35
982,2013-03-08 02:57:34,"@sobrinho i like the idea!
Are you working on this already? If so looking forward to it :)
In case not, i probably can help working on a patch for this. Let me know.
",grzuy,2013-03-16 01:10:35
982,2013-03-09 03:51:01,"@grzuy nope, I was pretty busy this week.

Seems like @jnicklas already started to work on this feature :)
",sobrinho,2013-03-16 01:10:35
982,2013-03-09 17:43:29,"i see, awesome! :)
",grzuy,2013-03-16 01:10:35
982,2013-03-16 14:24:26,"Thanks @jnicklas! :heart:
",sobrinho,2013-03-16 01:10:35
982,2015-07-02 06:58:35,"I am late to this party but thanks @jnicklas  for this feature
",sigu,2013-03-16 01:10:35
981,2013-02-27 14:44:12,"[Feature Suggestion] An Rspec Matcher for Asserting the Presence of a Textarea Field

Something along the lines of either:

<S_CODE_TOKEN>

Or:

<S_CODE_TOKEN>
",yfeldblum,2013-03-18 20:24:11
981,2013-02-27 14:58:51,"It'd be okay with supporting the first one, even though I don't _really_ see the benefit. Care to send a pull request?
",jnicklas,2013-03-18 20:24:11
981,2013-03-04 20:18:20,"I'm trying to implement this feature but I noticed that the 'type' option is already used to filter the 'type' attribute (please correct me if I'm wrong). It's still possible to do it as suggested as there is no 'textarea' type, but it wouldn't be consistent. I'm proposing: 

`expect(page).to have_field ""Freeform Notes"", tag_name: ""textarea""`
",yannp,2013-03-18 20:24:11
981,2013-03-04 20:31:29,"@yannp That works too.
",yfeldblum,2013-03-18 20:24:11
980,2013-02-26 10:17:37,"Hi, I'm encountering this very strange issue.

Here is the step definition, with `puts` after each line to check for the value of `Rails.env`:

<S_CODE_TOKEN>

And here is the cucumber output with --format pretty:

<S_CODE_TOKEN>

As you can see, the line with `attach_file` changes the value of `Rails.env` to `'development'`.
",danielres,2013-03-26 19:20:28
980,2013-02-26 18:08:28,"I dont see anything in the code that could do this, any chance you have overridden the attach_file function?
",twalpole,2013-03-26 19:20:28
980,2013-03-26 19:20:28,"No response from OP. I agree with @twalpole, there is nothing in Capybara itself which could possibly affect Rails.env. Closing.
",jnicklas,2013-03-26 19:20:28
979,2013-02-26 07:58:50,"@jnicklas - This PR adds selenium with chrome to the tests - There is one test failure currently   

Failure/Error: expect do
 expected TestApp::TestAppError but nothing was raised
 # ./lib/capybara/spec/session/reset_session_spec.rb:36:in `block (2 levels) in <top (required)>'

This doesnt occur if just the chrome specs are run, or just the firefox, but if both are run the error occurs.  I'm 99% sure this is because of the way Capybara::Server caches and looks up the port for server instances by object_id, meaning that even though I create a separate test session for chrome which creates a server object, that server object doesnt actually get booted (doesnt error either), and instead the tests are hitting the server object created for the firefox session.  This doesnt make any difference for most of the tests except the one failing since it checks the internal error state of the server object it thinks is handling requests, but ends up not. Not sure what the best way to fix that error would be, any suggestions?
",twalpole,2013-11-18 23:00:15
979,2013-02-27 13:43:45,"This effectively doubles the run time of our test suite. Is that worth it? It's ridiculously long as is.
",jnicklas,2013-11-18 23:00:15
979,2013-02-27 16:46:07,"@jnicklas my end goal was to just have travis default to run a few tests on chrome that firefox has to be pending on ( specifically hover currently). While working towards that I hit upon the issue I described with the sessions, and figured that should be fixed.
",twalpole,2013-11-18 23:00:15
979,2013-02-28 08:54:31,"Yes, sounds like we should fix that. But let's hold off on adding Chrome to the test suite. I think there is a cost in discouraging contribution if the test suite is prohibitively slow.

Maybe it might be possible to have an extended suite on Travis CI? Add Chrome to the suite only on Travis?
",jnicklas,2013-11-18 23:00:15
979,2013-02-28 08:55:01,"(I fixed the build on Travis btw... yay!)
",jnicklas,2013-11-18 23:00:15
979,2013-02-28 23:03:27,"@jnicklas ok, chrome tests are now only run for the travis rake task and I fixed the issue with the second server instance not booting.  However now the rbx tests are failing due to timeouts, not sure why - any ideas you can provide would be appreciated
",twalpole,2013-11-18 23:00:15
979,2013-03-04 22:23:18,"Native events are disabled by default on Firefox on Linux. I think that's why tests are failing on Firefox. To make tests not failing we may set `profile.native_events = true` but [there may be problems with several simultaneously opened windows](https://code.google.com/p/selenium/wiki/TipsAndTricks#Enabling_features_that_are_disabled_by_default_in_Firefox)
",abotalov,2013-11-18 23:00:15
979,2013-03-04 22:58:46,"@abotalov there's also no native event support on OSX and the selenium hover support has positional issues on Firefox too, so the native events are not the only reason for issues on Firefox.
",twalpole,2013-11-18 23:00:15
979,2013-04-12 09:59:11,"@twalpole is this still working for you? When I merge it into the latest master and try to run it (with Chrome 26 on Mac OS 10.8) I get a lot of timeouts waiting for Chrome to load pages:

<S_CODE_TOKEN>

etc.
",TimMoore,2013-11-18 23:00:15
979,2013-04-13 19:07:17,"@TimMoore -  havent tried it in a while -- I know there were issues with the latest versions of chrome and chromedriver
",twalpole,2013-11-18 23:00:15
979,2013-04-13 22:52:55,"@TimMoore Just tried it -  same issues you're having with it just hanging when using Chrome 26.0.1410.65 and chromedriver 26.0.1383.0 .  Strangely if one removes the 
    @browser.navigate.to('about:blank')
from Capybara::Selenium::Driver#reset!  then the tests work fine (other than the reset_session tests obviously).  It seems that either Chrome or chromedriver may be having an issue with changing the URL rapidly or something.
",twalpole,2013-11-18 23:00:15
979,2013-04-14 02:39:12,"I found this issue, which seems to describe the symptoms I see: https://code.google.com/p/chromedriver/issues/detail?id=23
",TimMoore,2013-11-18 23:00:15
979,2013-04-14 02:43:23,"BTW, the quickest way I've found to reproduce the problem is by running:

<S_CODE_TOKEN>

That hangs consistently for me on the fourth test.

I also tried adding simple access logging to `Capybara::Server::Middleware` and can see that the hanging requests don't reach the server at all.
",TimMoore,2013-11-18 23:00:15
979,2013-04-14 03:54:09,"Yeah, it definitely seems to be some kind of race condition in either chrome or chromedriver, guess it could be in selenium too. Does not appear to be in Capybara
",twalpole,2013-11-18 23:00:15
979,2013-11-14 21:29:22,"Whatever happened to this issue? Our build time on Travis is 11 minutes, well under the cut off at 50 minutes, so we should be able to add a Chrome run without problem. @twalpole did you have this working? Care to bundle it up in a pull request?
",jnicklas,2013-11-18 23:00:15
979,2013-11-15 21:44:18,"@jnicklas  I'll see about getting the PR updated to latest code
",twalpole,2013-11-18 23:00:15
979,2013-11-16 00:54:32,"It appears theres a known issue with trying to run chrome on the OpenVZ setups that travis uses
",twalpole,2013-11-18 23:00:15
979,2013-11-18 21:32:26,"@jnicklas ok this PR works again, and will run the tests against chrome as well as firefox on travis
",twalpole,2013-11-18 23:00:15
979,2013-11-18 23:00:13,"Okay merging this. At some point we'll need to do some serious debugging why Travis seems to hate JRuby and rbx.
",jnicklas,2013-11-18 23:00:15
978,2013-02-26 03:32:40,"The `have_field ""field-name"", type: :textarea` matcher [no longer finds textarea elements](https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/selector.rb#L83).
",yfeldblum,2013-02-27 13:46:18
978,2013-02-27 13:46:18,"Pretty sure that has never worked. textarea fields don't really have a type.
",jnicklas,2013-02-27 13:46:18
978,2013-02-27 14:37:56,"I checked it again and it indeed never worked in `capybara-v1` either.
",yfeldblum,2013-02-27 13:46:18
977,2013-02-25 20:09:43,"In Capybara 2.1 `:hidden` is supported as possible value for `:visible` so it's not intuitive that it's not supported by `Element#text` 
",abotalov,2013-02-28 09:08:17
977,2013-02-25 20:12:42,"Hmm, I thought about that, but what would it do? Seems strange to return only the text which is hidden. How would we even work that out?
",jnicklas,2013-02-28 09:08:17
977,2013-02-28 09:08:17,"I've thought about this some more, and I don't think there is any sensible way of implementing this. We can't do a diff, since `text(:visible)` will probably be affected by CSS (e.g. text-transform, content), while `text(:all)` won't. Let's leave it as is for now, unless you have any other ideas?
",jnicklas,2013-02-28 09:08:17
977,2013-02-28 09:37:58,"I asked a question at SO - http://stackoverflow.com/questions/15076350/is-it-possible-to-get-only-hidden-text-of-an-element. But answer is unconsoling
",abotalov,2013-02-28 09:08:17
976,2013-02-25 18:42:29,"This implements hover on an element which works with selenium and chrome. Unfortunately hover in selenium with firefox appears to be currently broken
",twalpole,2013-02-25 18:47:58
976,2013-02-25 18:48:09,"Cool,thank!
",jnicklas,2013-02-25 18:47:58
976,2013-02-26 00:06:09,"Ping @jonleighton. I'll get this in the pipeline for capybara-webkit. Fortunately we just implemented native click events.
",mhoran,2013-02-25 18:47:58
976,2015-04-30 21:14:51,"Is hover in selenium with firefox still broken?
",lynndylanhurley,2013-02-25 18:47:58
976,2015-04-30 21:29:56,"@lynndylanhurley You could try it rather than posting on a PR that was closed 2 years ago - or ask in the mailing list as requested in the README - but no its not still broken since the Capybara tests pass for it.
",twalpole,2013-02-25 18:47:58
975,2013-02-25 11:26:30,"This is also the problem on REE at Travis:

https://travis-ci.org/jnicklas/capybara/jobs/5035304
",mrsellars,2013-02-25 11:36:45
975,2013-02-25 11:36:45,"Okay, i should run the tests first next time. Forget the req..
",mrsellars,2013-02-25 11:36:45
975,2013-02-25 11:37:43,"Ruby 1.8.7 isn't supported
",abotalov,2013-02-25 11:36:45
974,2013-02-25 08:30:38,"Now that we accept options to all actions and finders, this should be fairly easy to do, just by sending it straight through to `find`. The idea is to support:

<S_CODE_TOKEN>

Where the argument is either the number of seconds to wait, or `false`.
",jnicklas,2013-02-25 19:58:06
974,2013-02-25 08:38:08,"Wow! Looks much better than `using_wait_time(5) { find('#foo') }`
",abotalov,2013-02-25 19:58:06
973,2013-02-24 18:15:56,"Trace:

<S_CODE_TOKEN>
",masterkain,2013-02-25 07:58:19
973,2013-02-24 18:32:23,"related https://github.com/jnicklas/capybara/pull/958#issuecomment-13917619
",masterkain,2013-02-25 07:58:19
973,2013-02-25 07:58:19,"You need to run XPath master if you're running Capybara master at this point:

<S_CODE_TOKEN>
",jnicklas,2013-02-25 07:58:19
972,2013-02-23 11:48:35,"Hey guys

I'm currently request testing a Rails app using Capybara and RSpec.

I use the [pry-rescue](https://github.com/ConradIrwin/pry-rescue/) gem that stops execution of RSpec and opens a [pry](https://github.com/pry/pry) console so I can immediately debug the problem.

I then normally add `driver: :chrome` to the current `it ""does something"" do ... end` block using pry's `edit -c`, then enter `c` to re-run the failed test. The test is then run again in Chrome, so I can debug the problem visually if needed, as soon as the spec fails again (which it certainly does as I didn't solve the problem until this point).

Sadly, when pry-rescue kicks in, Chrome already doesn't show the site's content anymore, it's just a blank page. This is very sad, because it forces me to add a `binding.pry` breakpoint manually before the failing point in the spec.

I asked at pry-rescue's place how to circumvent this, and the developer told me that:

> so pry-rescue doesn't open in rspec until the exception has bubbled all the way to the top.
> 
> Probably the best way to fix this is to find the method that capybara wraps with an ensure; black_out_chrome; end and monkey-patch it so that it's wrapped in a `Pry.rescue { ... }` block.

See https://github.com/ConradIrwin/pry-rescue/issues/28#issuecomment-13898021.

Now I'd really love to know which Capybara method I need to monkey-patch for this?

Thanks a lot,
Josh
",jmuheim,2013-02-25 07:59:21
972,2013-02-25 07:59:21,"[Here](https://github.com/jnicklas/capybara/blob/master/lib/capybara/rspec.rb#L14). Please ask questions on the mailing list in the future.
",jnicklas,2013-02-25 07:59:21
972,2013-02-25 18:06:52,"Thanks a lot for the information. I will ask on the mailing list in the future.
",jmuheim,2013-02-25 07:59:21
971,2013-02-23 09:10:28,"- removed deprecated :rubygems shortcut
- removed bundler - you already are using it
",morgoth,2013-02-24 17:21:18
970,2013-02-22 20:53:51,"References jnicklas#887

Tests are passing.
If you like it I can prepare another pull request with optional rack-test
",morgoth,2013-02-25 07:56:45
970,2013-02-23 08:53:22,"I will squash commits to one, when all is good.
",morgoth,2013-02-25 07:56:45
970,2013-02-25 07:56:45,"Sorry, I went ahead and implemented this, too much back and forth over a simple change. Thank you for getting the ball rolling on this!
",jnicklas,2013-02-25 07:56:45
970,2013-02-25 08:02:04,"@jnicklas no problem. Do you plan remove rack-test dependency as well?
",morgoth,2013-02-25 07:56:45
970,2013-02-25 08:19:21,"I looked at it, but it seems a bit tricky. There are a couple of other gems, like mime-types which we only really need for the RackTest driver, should we then remove the dependency on those as well?
",jnicklas,2013-02-25 07:56:45
970,2013-02-25 19:49:35,"That would be consequent action, but I can imagine annoyed people.
",morgoth,2013-02-25 07:56:45
970,2013-02-25 19:57:26,"Yeah, it feels fine for selenium, but let's leave racktest as is, for now.
",jnicklas,2013-02-25 07:56:45
969,2013-02-22 20:14:38,,twalpole,2013-02-24 17:29:07
969,2013-02-24 17:29:15,"Wohooo!!
",jnicklas,2013-02-24 17:29:07
969,2013-02-24 17:29:47,"Thanks so much :) This closes one of the oldest standing issues, which is absolutely fantastic!
",jnicklas,2013-02-24 17:29:07
969,2013-02-25 17:26:09,"@jnicklas you're welcome
",twalpole,2013-02-24 17:29:07
968,2013-02-21 10:21:54,"With Firefox 19 there is an error when I try and run my cucumbers

<S_CODE_TOKEN>

Seems to go away when I revert to Firefox 18 though...

am using capybara 2.0.1 and selenium webdriver 2.27.2
",Dakuan,2013-02-21 10:33:07
968,2013-02-21 10:33:07,"This is Selenium Webdriver issue, not Capybara's
",abotalov,2013-02-21 10:33:07
967,2013-02-21 09:01:02,"I'm a new guy.  Maybe it is not appropriate to submit a question here. But I don't know where I can submit question.
I want to verify if the default value of a dorpdownlist is right. But I get an error return: Capybara::ExpectationNotMet: expected to find select box ""gatewayType"" but there were no matches. Also found ""y w w y y z ."", which matched the selector but not all filters.

When /^I should see default value ""([^""]_)"" in list ""([^""]_)""$/ do |option, list|
  page.should have_select list, :selected => option
end

Can somebody help me? Thanks.
",leevyzz,2013-02-21 09:21:01
967,2013-02-21 09:21:01,"Questions should be asked in [mailing list](https://groups.google.com/forum/?fromgroups#!forum/ruby-capybara) or at specific sites like [stackoverflow.com](http://stackoverflow.com/).

Regarding your question:
has_select? can take the label, name or id of a select box. It looks like there is no select box with such label, name or id on the page.
",abotalov,2013-02-21 09:21:01
967,2013-02-22 01:00:50,"Thanks abotalov  for your answer. I used Cucumber + Capybara. I have suspected that there is no select box with such label, name or id on the page. But if my code is as below, it will work.

Then /^I should see ""([^""]_)"" in list ""([^""]_)""$/ do |option, list|
  page.should have_select list, :with_options => option
end

Then /^I should see ""([^""]_)"" in list ""([^""]_)""$/ do |list|
  page.should have_select list
end
",leevyzz,2013-02-21 09:21:01
967,2013-02-22 07:28:21,"@leevyzz If option is really selected please post a simple reproduction case to e.g. gist.github.com so we can reproduce it
",abotalov,2013-02-21 09:21:01
966,2013-02-21 02:16:15,"Please see this repo for the specs that are failing for me:
https://github.com/jakeonrails/broken-url-helpers

The code I shared used to work before upgrading to the latest Rspec/Capybara and moving my Capybara specs into the spec/features directory.

Am I doing it wrong? Why does spec/features (or Capybara) break the way URL helpers work?

I have tried changing `Capybara.default_host`, `Capybara.app_host`, along with trying to use `host! = ""xyz""`, and `@request.host = ""xyz""`, all to no avail.

Thanks in advance!
",jakeonrails,2013-02-21 19:44:17
966,2013-02-21 08:48:46,"From the contributing guide:

> Please don't send us an entire application, unless the bug is in the interaction between Capybara and a particular framework.
",jnicklas,2013-02-21 19:44:17
966,2013-02-21 19:35:46,"Well, this behavior is Rails specific, since the bug is that the URL helpers in Rails stop working in the spec/features folder for Capybara specs. You can read the README from that app, which I've just pasted over here, and it shows exactly what is going wrong:

### Changing default_url_options[:host] does not work with Capybara 2 in spec/features

With the latest versions of rails, rspec-rails and capybara:

<S_CODE_TOKEN>

With the output:

<S_CODE_TOKEN>

Why is this?
",jakeonrails,2013-02-21 19:44:17
966,2013-02-21 19:44:17,"@jnicklas I wasn't aware of the contributing guide when I wrote this issue. Just read about the mailing list, so I'm going to repost this there, and close this issue for now unless it is determined that there is a bug indeed.

Thanks!
",jakeonrails,2013-02-21 19:44:17
965,2013-02-20 22:11:48,"This pull request is an attempt at contributing to issue #832 - It implements an api for hover and resize_window. Unfortunately hover doesnt work with firefox on osx (works properly using chrome via webdriver) due to what appear to be positional bugs in selenium
",twalpole,2013-02-21 20:26:11
965,2013-02-20 22:35:34,"@abotalov I'm pretty sure it gets reset for every test in Capybara::SpecHelper::reset!  - if I'm wrong about that I'll be happy to store and reset the setting
",twalpole,2013-02-21 20:26:11
965,2013-02-20 22:40:07,"1. I think specs to `resize_window` and `hover` shouldn't belong to the same group. For example capybara-webkit currently supports `resize_window` but doesn't support hover without executing script (at least at first glance, I haven't used it)
2. @jnicklas If we support set of window size, we should also support get of size. What about alias:
   `window_size=(width, height)`  
   and method:  
   `window_size` returning 2 values: width and height

Also please take a look at [Selenium's Window class](http://selenium.googlecode.com/svn/trunk/docs/api/rb/Selenium/WebDriver/Window.html). Do we need separate class? I think no but want to point it out
",abotalov,2013-02-21 20:26:11
965,2013-02-21 08:44:48,"Imo, we could combine this with a more sensible alternative to `within_window`. So we an iterate through open windows, resize them, etc.. The idea of a separate window class is good.
",jnicklas,2013-02-21 20:26:11
965,2013-02-21 17:09:01,"@jnicklas Moving window related functions to a Capybara::Driver::Window class is fine, but I'm not sure what you're suggesting with within_window.  Are you saying that one shouldnt be able to just call resize_window or window.size(xxx,yyy) in the current session to resize the current window?
",twalpole,2013-02-21 20:26:11
965,2013-02-21 20:10:57,"@twalpole Please don't add different features in the same pull request next time when you will do it. It will make review easier
",abotalov,2013-02-21 20:26:11
965,2013-02-21 20:24:56,"@abotalov The only reason they were in the same PR was because they were discussed in the same issue referenced above.
",twalpole,2013-02-21 20:26:11
965,2013-02-21 20:26:11,"I dont dealing find dealing with @aboltalov to be worth doing this, closing PR, someone else can add this feature if its wanted
",twalpole,2013-02-21 20:26:11
965,2014-01-18 11:23:22,"Was this feature ever merged or implemented in any way? Thanks!
",deivid-rodriguez,2013-02-21 20:26:11
964,2013-02-19 22:37:23,"I'm trying to upgrade to Capybara 2.0 and I ran into the following problem:

<S_CODE_TOKEN>

And my link **is visible**!
What could possibly go wrong?
Thanks
",ddidier,2013-02-20 13:11:46
964,2013-02-19 23:01:19,"Unfortunately, Capybara does not support retrieving anything other than elements via XPath. You can of course use the attribute value, but there is no concept of an attribute object in Capybara. I suggest you use `link[:href]` instead.
",jnicklas,2013-02-20 13:11:46
964,2013-02-20 08:07:42,"Just for me to know, what's changed since Capybara 1.x, since that was working?
",ddidier,2013-02-20 13:11:46
964,2013-02-20 09:19:21,"Nothing has changed, as far as I'm aware. If this has ever worked, it was by accident, and not by design.
",jnicklas,2013-02-20 13:11:46
963,2013-02-19 20:20:26,"It was asked here - http://stackoverflow.com/q/14957981/841064
",abotalov,2013-02-19 20:47:51
963,2013-02-19 20:47:48,"Nice! I want to make all action methods take options anyway for the new `:match` and `:exact` options. So this is doubly good :)
",jnicklas,2013-02-19 20:47:51
962,2013-02-17 15:22:37,,martijnwalraven,2013-02-18 21:48:12
962,2013-02-18 20:51:17,"Hmm, thinking about this, maybe the method should be called `current_element` and not `current_node`. What do you think?
",jnicklas,2013-02-18 21:48:12
962,2013-02-18 20:58:43,"I thought about calling it current_element, and I agree it sounds much better. The distinction between nodes and element confused me as well at first. As a user of the DSL I think about elements, not nodes. Technically the document would be considered a node but not an element right? Do you think current_element should still return the document when an element is not in scope then? Or should it return nil in that case?
",martijnwalraven,2013-02-18 21:48:12
962,2013-02-18 21:04:55,"Huh, that's a good point actually. Yes, the document isn't an element, I think that would be confusing. So maybe current_node is better after all.
",jnicklas,2013-02-18 21:48:12
962,2013-02-18 21:05:25,"I don't think it makes sense for current_node to ever return `nil`, that would be even worse.
",jnicklas,2013-02-18 21:48:12
962,2013-02-18 21:09:27,"I agree. Is node used anywhere else in the DSL? An alternative might be current_scope, but I'm not sure that's better than current_node.
",martijnwalraven,2013-02-18 21:48:12
962,2013-02-18 21:14:29,"`current_scope` looks better to me. Users aren't likely to use that method to refer to Capybara::Node::Document
",abotalov,2013-02-18 21:48:12
962,2013-02-18 21:14:39,"Yeah, `current_scope` is nice. Let's go for that!
",jnicklas,2013-02-18 21:48:12
962,2013-02-18 21:18:06,"Great! Do you want me to make the change and create a new pull request? If I make the change, can I squash the two commits into one or will that confuse GitHub?
",martijnwalraven,2013-02-18 21:48:12
962,2013-02-18 21:23:22,"GitHub usually deals with that just fine. You can just force push over your branch and it will update here automatically.
",jnicklas,2013-02-18 21:48:12
962,2013-02-18 21:44:49,"I changed the method to current_scope. You were right, the pull request seems to refer to the right commit. Hopefully the merge will work.
",martijnwalraven,2013-02-18 21:48:12
962,2013-02-18 21:48:25,"Very nice, thanks! Good work :)
",jnicklas,2013-02-18 21:48:12
961,2013-02-16 21:35:00,"@jnicklas - Seeing issue #923 get closed this morning (request for :invalid pseudo selector support), it made me revisit something I'd been meaning to look at for a while.  Why always convert css to xpath when browsers can handle direct css searches?  This PR is the beginning of work on allowing css selectors to just flow through and be searched for as css, which would allow for css pseudo selectors to be used on browsers that support them.  Currently this code would require drivers to implement a find_css method which is obviously not optimal. I think a better way may be for find to  take a second parameter indicating whether the selector is xpath or css, and a way for the driver to indicate whether it will accept css, but this would break the current driver api.  I've also implemented the :disabled and :enabled pseudo selectors in the RackTest driver as proof that some of the css pseudo selectors can be implemented there (obviously not :invalid).  Your thoughts on how best to implement this, and whether or not you would consider it are appreciated before I finish it up
",twalpole,2013-02-19 19:05:36
961,2013-02-16 21:51:45,"I'd like to note that here is relevant mailing list discussion - https://groups.google.com/forum/#!topic/ruby-capybara/EA45B8vbQrw/discussion
",abotalov,2013-02-19 19:05:36
961,2013-02-17 11:45:53,"I'm not sure. I like the implementation, it's quite unobtrusive. There are a couple of things which should probably be cleaned up, but overall it looks pretty good. I guess we should involve the author driver authors in this discussion as well. Ping @jonleighton, @jcoglan, @jferris, @mhoran.
",jnicklas,2013-02-19 19:05:36
961,2013-02-17 13:42:12,"Seems good to me. Would be quite simple to implement.
",jonleighton,2013-02-19 19:05:36
961,2013-02-17 16:01:27,"Same here.
",mhoran,2013-02-19 19:05:36
961,2013-02-18 15:50:45,"The idea seems solid to me.

One nitpick: having `find` and `find_css` seems confusing to me. Renaming `find` to `find_xpath` would be better, so we have `find_css` and `find_xpath`.
",jferris,2013-02-19 19:05:36
961,2013-02-18 20:42:06,"@jnicklas - I implemented a way for drivers to indicate their acceptance of native css queries, and changed find in driver and node to receive a parameter identifying the format of the selector.  Please take a look and let me know if you think this is going in the right direction. There are 3 original tests that fail currently

rspec ./lib/capybara/spec/session/within_spec.rb:7 # Capybara::Session selenium #within with CSS selector should click links in the given scope
rspec ./lib/capybara/spec/session/within_spec.rb:48 # Capybara::Session selenium #within with Node rather than selector should click links in the given scope
rspec ./lib/capybara/spec/session/within_spec.rb:60 # Capybara::Session selenium #within with the default selector set to CSS should use CSS

They are failing because they do a css query of ""#for_bar li[contains('With Simple HTML')]"" which isn't legal css, so when passed directly to the browser instead of being processed by nokogiri they error out.  I can change these to use the :text option instead if you're ok with chaning them
",twalpole,2013-02-19 19:05:36
961,2013-02-18 20:44:06,"@jferris - just noticed your reply, I have changed the find and find_css to just be find taking a parameter to identify the type of selector (:css, or :xpath) - if the consensus is to go back to multiple find_<format> functions I can change over to that instead
",twalpole,2013-02-19 19:05:36
961,2013-02-18 20:50:17,"@twalpole if you can fix the failing specs, that would be great. There's no reason for them to use `contains`. Given that we went with separate methods for `visible_text` and `all_text`, maybe we should go with separate methods here as well? I like @jferris suggestion. Honestly though, I don't really care what the API towards the drivers looks like.
",jnicklas,2013-02-19 19:05:36
961,2013-02-18 21:05:21,"I think it will be better not to default to `:xpath` in `driver.rb`. Sending format to `driver.rb` explicitly will add clarity.
",abotalov,2013-02-19 19:05:36
961,2013-02-18 21:14:16,"@jnicklas I have fixed the specs. As for the find api - one thing to take note of is that by just having it be find( selector_format, selector ) it matches the node#find api and resolve_query doesnt need to know whether its calling a driver or a node.  If Node and Driver have different find apis then resolve_query would have to determine which its calling
",twalpole,2013-02-19 19:05:36
961,2013-02-18 21:18:05,"@abotalov - driver.rb is like that because the code defaults to not passing a format when using xpath, so that existing drivers will still work
",twalpole,2013-02-19 19:05:36
961,2013-02-18 21:20:29,"Looks really good overall. I have a few minor nitpicks before we can get this merged, but it's almost there :)
",jnicklas,2013-02-19 19:05:36
961,2013-02-18 21:21:40,"@twalpole shouldn't nodes implement both CSS and XPath as well then?
",jnicklas,2013-02-19 19:05:36
961,2013-02-18 21:26:46,"@twalpole Regarding your last comment: Capybara 2.1 breaks backwards compatability (as `all_text` method is added) so I think it can be brought here too
",abotalov,2013-02-19 19:05:36
961,2013-02-18 22:45:48,"@jnicklas I think the commit handles your concerns, next step is to move over to find_css and find_xpath if that is the consensus? or to remove the defaulting xpath format if the find(format, selector) api is preferred but with a required format?
",twalpole,2013-02-19 19:05:36
961,2013-02-18 23:13:29,"@jnicklas Good catch - I missed the conversion, although its not overriding @preferred_format, because @preferred_format is only set in css (it defaults to :xpath in initialize)
",twalpole,2013-02-19 19:05:36
961,2013-02-19 02:25:54,"+1 to `find_css` and `find_xpath` vs. the parameter. It would also be nice to remove the duplication of `#find` in `Node` and `Driver`, but I think that's outside the scope of this pull request.
",mhoran,2013-02-19 19:05:36
961,2013-02-19 17:46:16,"@jnicklas I think the last pushes cover all current concerns and feedback
",twalpole,2013-02-19 19:05:36
961,2013-02-19 18:48:08,"@mhoran nope 
",twalpole,2013-02-19 19:05:36
961,2013-02-19 19:05:36,"For some reason GitHub is not picking it up, but I just merged this. Thanks @twalpole for putting in so much effort and putting up with our nagging ;)
",jnicklas,2013-02-19 19:05:36
961,2013-02-19 19:11:03,"@jnicklas no problem, happy to contribute
",twalpole,2013-02-19 19:05:36
961,2013-02-21 11:01:20,"Sorry to be late to the party. My only reservation about this is the varying CSS selector support (or lack thereof) of various browsers (I maintain http://terminus.jcoglan.com, which drives real browsers). Of course, I could use a JS implementation as I have done for browsers with no XPath support, but I'm not sure whether users would expect to get the CSS semantics of the browser, or a uniform semantics provided by a JS library.
",jcoglan,2013-02-19 19:05:36
961,2013-02-21 12:25:19,"@jcoglan seems like most browsers these days support most selectors which are in regular use. I'm okay with different browsers providing different levels of support for CSS. If you want to go the extra mile, you could use sizzle as a poly fill for older browsers.
",jnicklas,2013-02-19 19:05:36
961,2013-02-21 13:06:35,"Actually Internet Explorer driver 6, 7 uses Sizzle for its purposes.

@jcoglan what do you propose instead of using browser's native CSS selector support?
",abotalov,2013-02-19 19:05:36
961,2016-01-29 12:24:41,"Sorry to wake up an old issue, but if `e = find('textarea:invalid')` gives an element, wouldn't you also expect `e.has_css?(':invalid')` to be true?
",ioquatix,2013-02-19 19:05:36
961,2016-01-29 15:56:25,"@ioquatix has_css? Looks for children that match the given css, it doesn't compare the element it's called on
",twalpole,2013-02-19 19:05:36
960,2013-02-16 18:18:26,"This is really a question to @jonleighton, @jcoglan and @mhoran mostly, but really anyone who authors capybara drivers.

I want to break the driver API for Capybara 2.1 by introducing a new method `#full_text` on nodes, as opposed to the regular `#text`. This would return the text of the node as it appears in the source, ignoring visibility. The name of this method doesn't really matter as it wouldn't be exposed to regular users, so I'm open to suggestions.

The idea is to have `Capybara::Element#text` take a boolean flag which would control which driver method is called. The default would be to use `Capybara.ignore_hidden_elements`, so that the behaviour matches that of finding elements and can be controlled through a config option. In order to not break semver, we'll include a config option which makes sure that text always returns only visible text, something like `Capybara.only_visible_text = true`.

We're changing some other defaults as well, so I'm not too concerned about breaking compatibility of the public API, but obviously this would break the driver API.

I know @jonleighton was campaigning for this even before 2.0 was released, and I should have listened then. Sorry about that.

Are you guys okay with that breakage?
",jnicklas,2013-02-17 13:47:43
960,2013-02-16 18:19:14,"And @jferris, of course!
",jnicklas,2013-02-17 13:47:43
960,2013-02-16 20:10:47,"I'm ok with it. In general I think it would be great to have more dialogue between driver implementors and the capybara core project, so thanks for posting this.
",jonleighton,2013-02-17 13:47:43
960,2013-02-16 22:03:25,"Sounds good. I believe we'll just want to use `textContent` instead of `innerText`, which ignores CSS. Is there a need for a new method, or could we pass the flag from `Capybara::Element#text` to `Capybara::Driver::Node#text`?
",mhoran,2013-02-17 13:47:43
960,2013-02-17 13:49:57,"Okay, let's do this. I went the very explicit route of changing `#text` into two separate methods, `#visible_text` and `#all_text` on drivers. There are still a couple of details to iron out, such as passing the type parameter to `have_text` as well, and making sure `has_selector(""foo"", text => ""bar"", :visible => false)` behaves as intended, but that shouldn't affect you guys.
",jnicklas,2013-02-17 13:47:43
959,2013-02-15 16:29:53,"I really like the ability of #within to take an element, so I can create reusable methods that find and return elements. In some cases however, I also need access to the element itself, to get at data attributes for instance. I could store the element in a local variable and reference it, but if #within would yield the element I could use a block variable and keep the within line nicely readable:

<S_CODE_TOKEN>

I tried changing this (in session.rb) and it seems to work:

<S_CODE_TOKEN>

Would changing this make sense? Or am I missing something?
",martijnwalraven,2013-02-16 09:07:21
959,2013-02-15 17:36:52,"You could just use Object#tap?
",jnicklas,2013-02-16 09:07:21
959,2013-02-15 17:57:53,"Thanks! I hadn't thought about using Object#tap. Is this what you had in mind? It works, but don't you think having #within yield the element would be more elegant? Do you see any drawbacks to doing that?

<S_CODE_TOKEN>
",martijnwalraven,2013-02-16 09:07:21
959,2013-02-15 18:06:50,"tap doesnt work well if you're passing a css expression to within though, or for within_fieldset, within_table, within_frame, within_window) .  I like the idea of within yielding the element, or potentially exposing current_node as part of the public api
",twalpole,2013-02-16 09:07:21
959,2013-02-15 21:26:52,"@martijnwalraven: More like that:

<S_CODE_TOKEN>

@twalpole: I'd be kind of okay with that.

I personally hardly ever use `within` so I don't really feel the need. If someone wants to go ahead and implement this, then please go ahead, but I'm not going to ;)
",jnicklas,2013-02-16 09:07:21
959,2013-02-16 09:07:21,"I don't like leaving feature requests open. I'm closing this issue until someone provides a pull request.
",jnicklas,2013-02-16 09:07:21
959,2013-02-16 09:11:10,"Sure, I understand. I was planning on working on this today though. Would you prefer #within to yield the element or exposing current_node/current_element as @twalpole suggests? The latter seems more general and might have other uses.
",martijnwalraven,2013-02-16 09:07:21
959,2013-02-16 09:34:34,"I think I would prefer the latter in that case. Yielding the element seems like it could easily be replaced with Object.tap.
",jnicklas,2013-02-16 09:07:21
959,2014-02-20 14:37:34,"I'm really trying to understand, but can't: why just to not to add yelf self? It obvious and expected behaviour by users, and costs nothing... one word and everybody's happy...

<S_CODE_TOKEN>

For me first option much readable than other
",vanburg,2013-02-16 09:07:21
959,2014-02-20 15:00:28,"@vanburg You can do:

<S_CODE_TOKEN>
",abotalov,2013-02-16 09:07:21
958,2013-02-09 10:48:09,"### Asset Host Support!

This adds asset host support to `save_and_open_page`

This takes the super-simple approach of prepending `Capybara.asset_server` to asset `src`'s or `href`'s (in the case of links). It may be simple, but it should be sufficient to get people's pages rendering with assets loading from other server locations (making no assumptions about where that server might be running).

So, for instance, if your assets were rendering in `save_and_open_page` like this:

<S_CODE_TOKEN>

Then you could add this line to `spec_helper.rb`:

<S_CODE_TOKEN>

(please note, no trailing slash)

And then in your opened page from `save_and_open_page`, that same asset would be rendered as:

<S_CODE_TOKEN>

If you don't wish to accept as-is, please tell me what I can do to make it acceptable or if there are some untenable issues that prevent acceptance.

Thank you!
",sdhull,2013-02-19 22:57:41
958,2013-02-09 10:59:05,"PS: Only ran specs with Ruby 1.9.3

Do I need to run them with other versions too?
",sdhull,2013-02-19 22:57:41
958,2013-02-09 11:14:22,":+1: from me. I'll be using this PR from now on, the precompiling of assets was getting way too slow.
",JeanMertz,2013-02-19 22:57:41
958,2013-02-09 11:46:53,"There is an issue with this PR. It seems that the relevant asset tags (script/link) get added back into the `body` element instead of the `head` element. This causes several issues (one of which is UTF-8 encoding errors).
",JeanMertz,2013-02-19 22:57:41
958,2013-02-09 18:12:04,"Oh no! That's bad news bears. Not sure how the code I added would do that, but lemme open the page and see what I can see in the spec I wrote.
",sdhull,2013-02-19 22:57:41
958,2013-02-09 18:21:18,"Hahah OK I see what happened.  Let me see what I can do, and maybe add an assertion in my spec like ""shouldn't remove the `<head>` tag.  :stuck_out_tongue_closed_eyes: 
",sdhull,2013-02-19 22:57:41
958,2013-02-09 18:37:37,"@JeanMertz thanks very much for testing it out! I changed how I was using Nokogiri, could you try it again at some point?  I'm out of town this weekend, but will check in on Monday when I get back.
",sdhull,2013-02-19 22:57:41
958,2013-02-10 20:57:43,"@sdhull: Thanks for taking the time to write up this pull request, despite our heated discussion preceding it. Hopefully this will get the ball rolling. A few issues/questions:

1) The use of Nokogiri::XML could be problematic. If the HTML is not well formed, I think that Nokogiri::XML will throw an exception, which is probably not what we want. It would probably even reject HTML5 style empty attributes, like `<input autofocus>`

2) The option should probably be called `asset_host` instead of `asset_server`. That's consistent both with Rails, and `app_host` in Capybara.

3) I think this will probably fail when the page contains protocol relative URLs, given that we just do a regexp check for `http`.
",jnicklas,2013-02-19 22:57:41
958,2013-02-11 13:29:03,"Just wanted to say, because I wasn't clear about it, that this code is **much** better than what we hade before, and we're definitely moving in the right direction, if we can get these quirks fixed, I'd be happy about merging this.
",jnicklas,2013-02-19 22:57:41
958,2013-02-11 18:42:16,"@jnicklas thanks so much for looking at this after I was admittedly being a jerk before.

I'm out of town till tonight but I'll see what I can do when I get back. I'm totally on the same page -- these were things I was concerned about too.
",sdhull,2013-02-19 22:57:41
958,2013-02-12 21:39:56,"OK so as I said, these were some concerns I had as well.
1. Originally I thought I was being clever and using `.fragment` method in Nokogiri, which I expected to simply be more forgiving with malformed XML. Instead, it simply rejected the `<head>` tag, which I thought was pretty bad. So I switched to `Nokogiri::HTML` but found that it _always_ added `<!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"" ""http://www.w3.org/TR/REC-html40/loose.dtd"">` to pages that didn't already have it (very annoyting!). So I switched back to `Nokogiri::XML` straight up.  I tested it a bit with random strings and didn't find it raising exceptions, but let me test a bit more:

<S_CODE_TOKEN>

Bummer. Ideas?
1. Done & done!
2. Changed the regex to `/^(http|\/\/)/` and added a spec. Good catch :wink: 
",sdhull,2013-02-19 22:57:41
958,2013-02-12 22:26:03,"Also, wrt (1), if XML is fully broken, then I kinda feel like explosions are OK (eg, `<div> asdflkj`)

At the end of the day I wish Nokogiri would do a ""best-effort"" parsing, allow me to update some attributes, and then output the result string without additional/unwanted modification.

<S_CODE_TOKEN>

That is, I didn't add a closing div tag or xml declaration. Y u add this without me asking, Nokogiri?!?  :rage: 
",sdhull,2013-02-19 22:57:41
958,2013-02-13 07:28:49,"Nokogiri probably transform the XML/HTML into an AST and then has a renderer for that AST. My guess would be that the parser corrects any inconsistencies, so when the AST is built it contains no information about the missing div tag any more. That's kind of a big downside, since it means that potentially Nokogiri could ""fix"" whatever it was that was causing our bug, and we'd bang our heads trying to figure out what's wrong. Hmm.
",jnicklas,2013-02-19 22:57:41
958,2013-02-13 11:16:24,"Hello,

I have a suggestion:
Instead of prepending all the assets paths with, for example ""http://localhost:3000"", wouldn't it be cleaner to add

<S_CODE_TOKEN>

inside the head element ?

By adding a comment, it would help to make what's happening obvious for anyone reading the source.

Something in the lines of:

<S_CODE_TOKEN>

Seems less invasive to me than modifying all the assets paths.
",danielres,2013-02-19 22:57:41
958,2013-02-13 16:22:47,"@danielres I was actually unaware of the existence of the `<base>` tag. That looks like a pretty excellent option!! I'm for it. @jnicklas what do you think?

Then I'd just have a single test that asserts that the base tag is added. Furthermore, finding index of the closing head tag and inserting just above it would probably be ok and I could leave this whole nokogiri mess behind. 
",sdhull,2013-02-19 22:57:41
958,2013-02-13 16:42:33,"Huh! That works? I had seriously no idea that that was possible. I checked the spec, it's in definitely in there, so yes, let's to it. Only concern is, what if there already is a `base` element? According to the spec there must not be more than one.
",jnicklas,2013-02-19 22:57:41
958,2013-02-13 16:42:49,"Base path usually causes more problems than it solves. So be sure to read up about its drawbacks before committing to this technique.

On Wed, Feb 13, 2013 at 5:22 PM, Steve notifications@github.com wrote:

> @danielres I was actually unaware of the existence of the `<base>` tag. That looks like a pretty excellent option!! I'm for it. @jnicklas what do you think?
> 
> ## Then I'd just have a single test that asserts that the base tag is added. Furthermore, finding index of the closing head tag and inserting just above it would probably be ok and I could leave this whole nokogiri mess behind. 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/958#issuecomment-13502548
",JeanMertz,2013-02-19 22:57:41
958,2013-02-13 19:19:00,"Geez. OK well after some more thought & reading [this stackoverflow page](http://stackoverflow.com/questions/1889076/is-it-recommended-to-use-the-base-html-tag) I feel a bit wary of doing this -- although this would of course be opt-in behavior with proper ""YMMV""-type warnings.

So on the one hand, we could recommend that people who want `save_and_open_page` to load assets could add something like this to their layouts:

<S_CODE_TOKEN>

But then the downside is it renders for _every_ spec, even when not saving and opening the page.

On the other hand, if we were to insert the base tag at the top of the `<head>` section, it wouldn't produce undue failures as it might if users add it in test environments. Worst case scenario is that it makes it more difficult to debug like 1% of cases (eg, times where you want to link to `<a href=""#some-anchor"">`). But in most cases (I'd argue 99%) it would make people's lives better to have assets load. And inserting a `<base>` tag is far less invasive than rewriting all the paths to links/images/javascripts.
",sdhull,2013-02-19 22:57:41
958,2013-02-13 20:46:05,"No, recommending that is a bad idea, it would break horribly in Selenium for example, which wouldn't ignore the base tag, and instead add the unwanted behaviour to anchor links. I think that would be very confusing.

It actually doesn't sound _that_ bad to insert the base tag for save_and_open_page, you're not going to click any links on that page anyway and expect them to work, so it's really not a problem that those links would be broken. The IE problem is irrelevant with HTML5, since we can just self close it. Even with an older doc type, I'm okay with that invalidating markup.

The only tricky issue IMO is what happens when the user has already specified a base tag, but it doesn't seem to be in common use, maybe that's not terribly likely to happen.
",jnicklas,2013-02-19 22:57:41
958,2013-02-13 22:50:39,"> It actually doesn't sound _that_ bad to insert the base tag

Agreed. One certainly shouldn't expect links to work after a `save_and_open_page`

> The only tricky issue IMO is what happens when the user has already specified a base tag

I think in this case the user can simply _not_ utilize the `asset_host` option in Capybara. Anyway, having 2 base tags is not allowed, so there are a few options that I see if they already have a base tag and still insist on specifying the `asset_host`:
1. Their page could simply break. Since I'm planning on prepending the base tag to the head, (when I tested in Chrome) it seems that the first base tag is used and subsequent ones are ignored.
2. I could add a simple regex check in the `save_page` code and output a warning if they have `asset_host` defined and a base tag in their page already.
3. I could add that regex check and just silently choose to not prepend the base tag to the head.

I'm inclined to opt for 2 or 3.
",sdhull,2013-02-19 22:57:41
958,2013-02-13 23:24:32,"2 seems like a pretty good option, as long as `asset_host` is not defined by default. Either way, you could just be clear in the documentation that using `asset_host` if you already have a `<base>` tag defined could yield unexpected results.

Just to be clear, the `<base>` tag would only be rendered when you `save_and_open_page`? It would not be added to all the specs?
",halloffame,2013-02-19 22:57:41
958,2013-02-13 23:26:28,"> Just to be clear, the <base> tag would only be rendered when you `save_and_open_page`?

Correct. I think I'm all set to rewrite my PR to do this.
",sdhull,2013-02-19 22:57:41
958,2013-02-14 07:20:52,"Cool, let's try it out and see how it works!
",jnicklas,2013-02-19 22:57:41
958,2013-02-14 08:07:46,"great !! :) +1
",danielres,2013-02-19 22:57:41
958,2013-02-14 09:15:07,"Just found another way to display the page with the assets properly rendered.

There is a module for Firefox named ""GreaseMonkey"", which allows to manipulate any web page in the browser with javascript. The script can be called automatically on each page that match certain criteria.

Here is the script I just hacked, works well for me but I did only very basic usage. 
So far, it allows me to see the rendered page with the stylesheets after a capybara's ""save_and_open_page"".

It illustrates an alternative way for developers to see their page properly rendered with the assets, without capybara having to manage this concern.

It's not complete as it works only for stylesheets for now, and you'll probably have to adapt it to your specific setup if you want to use it. It needs a rails server on http://localhost:3000 to serve the assets.

<S_CODE_TOKEN>

And here is the gist if you want to fork and improve on it: https://gist.github.com/danielres/4951525
",danielres,2013-02-19 22:57:41
958,2013-02-15 19:07:24,"You should add another test for

<S_CODE_TOKEN>

Looks good to me otherwise though. I'm looking forward to this change.
",halloffame,2013-02-19 22:57:41
958,2013-02-15 19:10:15,"@halloffame I'll plus one that. Good call. Done & done. Running specs now.
",sdhull,2013-02-19 22:57:41
958,2013-02-19 22:58:15,"Merged, and a quick refactor to pull the injection into a helper, so we get rid of body_to_write, which seemed a bit strange to me.
",jnicklas,2013-02-19 22:57:41
958,2013-02-19 22:58:52,"Thanks so much for fixing this in a very nice way.
",jnicklas,2013-02-19 22:57:41
958,2013-02-19 23:18:43,"Woot!  Thanks @jnicklas! For `body_to_write`, I just wanted to be sure I didn't modify the body itself (which users might be making assertions against). So I figured it'd be safer to make a copy of the body and modify that instead. At least that was the thinking there...
",sdhull,2013-02-19 22:57:41
958,2013-02-20 00:42:01,"Ahh, good thinking. I threw a `clone` in there, just in case...
",jnicklas,2013-02-19 22:57:41
958,2013-02-21 22:03:54,"@jnicklas good call!

Any idea when you might push a new patch release to rubygems?  I'd like to start using this in the codebase at my office right away  :satisfied: 
",sdhull,2013-02-19 22:57:41
958,2013-02-21 22:22:43,"Hmmm... tried pointing to the latest commit in my Gemfile, and getting weird failures. Guess that's why they call it ""the bleeding edge"", eh?  :wink: 

<S_CODE_TOKEN>
",sdhull,2013-02-19 22:57:41
958,2013-02-21 22:40:01,"@sdhull to use edge you probably need to be using edge xpath too
gem 'xpath', github: 'jnicklas/github'
",twalpole,2013-02-19 22:57:41
958,2013-02-22 18:28:53,"Thanks @twalpole I might try that... or I might just try to exercise some patience and wait for a patch release  :)
",sdhull,2013-02-19 22:57:41
958,2013-02-22 19:20:04,"@sdhull: soon-ish. I really want to get Capybara 2.1 out the door, but there are a few things left to do (document all the new stuff properly, for one), so it's gonna take at least a month or so before we land a beta, I would think.
",jnicklas,2013-02-19 22:57:41
958,2013-03-15 09:55:13,"Thanx, I'm passionately looking forward to hear from you about the release! :)

p.s. Excuse me, but will it always be necessary to run the server to have your assets served for **save_and_open_page**?
",installero,2013-02-19 22:57:41
958,2013-04-17 18:08:39,"@installero That is correct, the server is what serves up the assets. This should now be working in capybara > 2.1

To get it working you just need to add `Capybara.asset_host = ""http://localhost:3000""` somewhere before the tests are run. I have it at the bottom of `spec_helper.rb`
",halloffame,2013-02-19 22:57:41
958,2013-09-06 08:49:49,"awesome! thx for this :+1: 
",take,2013-02-19 22:57:41
958,2014-08-02 21:54:25,"sdhull & jnicklas & all others who contributed - thanks for making save_and_open_page work again.
",helabed,2013-02-19 22:57:41
958,2014-08-02 22:38:52,"Glad people are finding it useful :smile:

On Saturday, August 2, 2014, hani elabed notifications@github.com wrote:

> sdhull & jnicklas & all others who contributed - thanks for making
> save_and_open_page work again.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/jnicklas/capybara/pull/958#issuecomment-50975585.

## 

Sent from my spaceship
",sdhull,2013-02-19 22:57:41
958,2015-04-01 09:06:47,"Should `asset_host` and its usage be described in the docs? 
",MrHubble,2013-02-19 22:57:41
958,2015-04-01 18:25:42,"@MrHubble [it is in the docs](https://github.com/jnicklas/capybara/pull/958/files?diff=unified#diff-f6aa6c79750a9a5bd39ee17f3ade2974R40), however it may be worth putting in the readme as well?
",sdhull,2013-02-19 22:57:41
957,2013-02-09 06:29:38,"The example given for has_selector? with a count is misleading. As it specifies ""p#foo"", this is referring to a p element with an id of ""foo"". This should only appear once on a page.
",kanerogers,2013-02-15 21:29:42
957,2013-02-15 21:29:49,"Nice catch :)
",jnicklas,2013-02-15 21:29:42
957,2013-02-16 01:47:15,"HAH! Cheers, Jonas.

The only reason why I noticed it is it caught me out when I was writing my
spec. I got my classes and my ids mixed up and had a bit of a cry!

PS. keep up the good work, awesome project.

On Sat, Feb 16, 2013 at 8:29 AM, Jonas Nicklas notifications@github.comwrote:

> Nice catch :)
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/pull/957#issuecomment-13629073.

## 

_Kane Rogers_ | Solution Specialist | www.bluereef.com.au | _@Kane_Rogers_

___________________________________________________________________

_T_: +61 3 9898 8000 | _M_:\* _+61 0401 633 346 | *F_:\* *+61 3 9898 8055

**

[image: logo and slogan for email.gif]

P Please consider the environment before printing this email.
",kanerogers,2013-02-15 21:29:42
956,2013-02-08 20:15:58,"In RackTest allow for submit buttons to be outside of their form when they have the  form attribute set. Should fix issue #955
",twalpole,2013-02-15 21:38:51
956,2013-02-11 02:53:50,"+1 
I encountered the same bug.
",weilu,2013-02-15 21:38:51
956,2013-02-11 13:25:38,"Cool, I didn't even know about that. Can we get a negative test case for that as well? I.e. a button with the `form` attribute which does not match the form, or maybe matches a different form?
",jnicklas,2013-02-15 21:38:51
956,2013-02-11 13:26:52,"I'm concerned about the fact that the test can be passed simply by associating a button with the first form on the page, which is obviously not correct.
",jnicklas,2013-02-15 21:38:51
956,2013-02-11 17:20:08,"@jnicklas I'm afraid I don't understand the concern about associating a button with the first form on the page - If the button is associated with the form then the test should pass.  What is your concern there?
",twalpole,2013-02-15 21:38:51
956,2013-02-11 17:56:34,"@jnicklas I've added the case of the submit being in one form but associated with a different form.  I'm not sure what the desired behavior for a submit that specifies the id of a form that doesn't exist should be.  My reading of http://www.w3.org/html/wg/drafts/html/master/forms.html#attr-fae-form says that if the form doesn't exist then the submit would not be associated with any form and I believe the click should just be ignored.  On the other hand its most likely an error to have a submit that isnt associated with a form so maybe we should throw an error?  Also note that the spec does allow for a form attribute on all the input types allowing one to associate a text input with a form its not located within, and that element should get submitted with the form it is associated with.  
",twalpole,2013-02-15 21:38:51
956,2013-02-11 18:41:43,"Ahh, sorry, that's actually not at all what I meant, I should have explained more clearly. What I mean is that the tests as they were written didn't really check that the connection between the button's form attribute and the id attribute is correct. Since we only ever submit the first form on the page, the test could have passed simply by taking the first form element and submitting that, not actually searching for it by id. Imo, that would be an easy mistake for a driver author to make, and the tests wouldn't cover it, that's why I wanted _something_ which proves the connection between the buttons' form attribute and the form's id in a more tangible way.
",jnicklas,2013-02-15 21:38:51
956,2013-02-11 18:53:11,"@jnicklas Ok - well along with the addition of the test of a button in one form submitting a different form, the original tests were moved to use those 2 forms too, so they are no longer the first form in the document which I believe covers your concern?
",twalpole,2013-02-15 21:38:51
956,2013-02-11 19:04:25,"Would a test for a button or input inside a form that has a form attribute set on it be of value?
",Spaceghost,2013-02-15 21:38:51
956,2013-02-11 19:22:07,"@spaceghost there is already a test for a button inside a form that has a form attribute associating it with a different form
",twalpole,2013-02-15 21:38:51
956,2013-02-11 19:27:31,"@twalpole – It seems you're on top of things. Cheers, and thanks for covering my issue with a nice pull request. :thumbsup: 
",Spaceghost,2013-02-15 21:38:51
956,2013-02-15 21:39:15,"Okay, sorry for making you jump through hoops, this is excellent work, thanks for taking the time!
",jnicklas,2013-02-15 21:38:51
955,2013-02-08 18:19:26,"### What I tried to do

I have a [form](https://gist.github.com/Spaceghost/4740778#file-new-html-erb-L7-L17) whose [submit button](https://gist.github.com/Spaceghost/4740778#file-new-html-erb-L22) is outside the end of the form.

I have set the form attribute on [L22](https://gist.github.com/Spaceghost/4740778#file-new-html-erb-L22) and the submit works fine when I use it. However, in my [feature spec](https://gist.github.com/Spaceghost/4740778#file-login_page_spec-rb) when I use `click_button` or `click_on`, I get this [output](https://gist.github.com/Spaceghost/4740778#file-output)
### What I expected to happen

I expected capybara to submit the form using the button whose form attribute is set correctly.
### What actually happened

https://gist.github.com/Spaceghost/4740778#file-output
### Thoughts

When my [form](https://gist.github.com/Spaceghost/4740861#file-new-html-erb-L6-L23) has the [input](https://gist.github.com/Spaceghost/4740861#file-new-html-erb-L21) inside it, capybara [works](https://gist.github.com/Spaceghost/4740861#file-output) as expected.

I put `#save_and_open_page` into the [#login_as](https://gist.github.com/Spaceghost/4740861#file-login_page_spec-rb-L9) method to make sure capybara sees what I suspect.
",Spaceghost,2013-02-16 09:07:37
955,2013-02-15 21:54:39,"Excellent work from @twalpole on submitting a fix. Can you check and see if the fix works for you?
",jnicklas,2013-02-16 09:07:37
954,2013-02-07 19:56:26,"**collaborator_steps.rb**:

<S_CODE_TOKEN>

As mentioned in the snippet above, I'm getting a `stack level too deep (SystemStackError)` error when running this cucumber step definition. I believe it has something to do with the Capybara's `visit` method as this error goes away when I comment out that particular line.

I'm not sure if this is a flaw in my testing or if it's actually a bug in Capybara. My **env.rb** file is stock cucumber-generated. Any and all suggestions/recommendations are welcome.
",pruett,2013-02-07 20:12:57
954,2013-02-07 20:12:45,"Provide a reproduction case so we can reproduce it ourselves or post a full backtrace. I doubt problem is in `visit`.
",abotalov,2013-02-07 20:12:57
954,2013-06-07 17:25:38,"@abotalov I just ran into this problem myself.

I haven't  solved the issue (yet), but here's more details, maybe this is something you recognize?

<S_CODE_TOKEN>

Using `ruby-2.0.0-p195`, `rails-4.0.0.rc1`, `capybara-2.1.0`
",JeanMertz,2013-02-07 20:12:57
953,2013-02-06 19:40:54,"As it was decided here https://github.com/jnicklas/capybara/pull/898 , this adds the #title method to Capybara document. So, in tests we can use @session.title.should == 'Test Title'
",molfar,2013-02-15 21:50:23
953,2013-02-15 21:50:32,"Thanks!
",jnicklas,2013-02-15 21:50:23
953,2013-03-26 19:58:09,"Is this pull in Capybara 2.0.3? Or will be only in 2.1?
",lucascaton,2013-02-15 21:50:23
953,2013-03-26 19:59:58,"This will be in 2.1 only. In accordance with semver.org, we're not adding any new features in point releases.
",jnicklas,2013-02-15 21:50:23
953,2013-03-26 20:12:37,"Ok then, thank you =^D
",lucascaton,2013-02-15 21:50:23
952,2013-02-05 18:08:27,"I have a `<pre>` element in which lines of text are separated only by newlines, for example: 

<S_CODE_TOKEN>

I am using Cucumber to try to verify that the correct number of lines of text are appearing in the `<pre>` element. Using `save_and_open_page` and inspecting the HTML of the resulting file, I can see that there are indeed newline characters in the text of the element, however:

<S_CODE_TOKEN>

... fails with the following:

<S_CODE_TOKEN>

Looking at the actual return value of `page.find(""pre#log"").text` shows me this:

<S_CODE_TOKEN>

So it appears that, even though Capybara's internal representation of the page includes newlines or CRs (as seen via `save_and_open_page`), the `text()` method is filtering them out. This is preventing us from testing this functionality until/unless we find a workaround.
",brainhurricane,2013-02-05 19:05:09
952,2013-02-05 19:04:02,"Capybara [normlizes whitespace (i.e. changes newlines etc.) to spaces](https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/node.rb#L2). It's done as type of whitespace usually doesn't matter in HTML.
If you use Selenum, you can use this workaround:
`page.find(""pre#log"").native.text.gsub( ""\r"", ""\n"" ).split( ""\n"" ).count.should == 8`
",abotalov,2013-02-05 19:05:09
952,2013-02-05 19:07:59,"@jnicklas Do you think it's worth to change behavior of `text` if it's `<pre>` element where [type of whitespace matters.](http://www.w3.org/TR/html401/struct/text.html#h-9.1)
",abotalov,2013-02-05 19:05:09
952,2013-02-05 20:08:13,"Currently we're using capybara-webkit as the driver. Unfortunately `page.find(""pre#log"").native` is of class `String` with this driver, which isn't terribly helpful.

I've tried using selenium, but it has issues with the login screen of our application, and fails for no apparent reason on earlier steps.

I'll see if I can use some combination of `send()` and `instance_eval()` to dig the native text out of the Webkit node.
",brainhurricane,2013-02-05 19:05:09
952,2013-02-05 20:16:54,"Finally got this to work with the following:
`page.find(""pre#log"").instance_eval( '@base' ).invoke( 'text' ).gsub( ""\r"", ""\n"" ).split( ""\n"" ).count.should == 8`
",brainhurricane,2013-02-05 19:05:09
952,2013-08-27 18:10:21,"@brainhurricane @abotalov, did you guys find a workaround that works with capybara-webkit? I'm having the same issue
",beggerss,2013-02-05 19:05:09
952,2013-08-27 18:22:37,"@beggerss Using capybara-webkit, I found I could use `page.find( '#log' ).instance_eval( '@base' ).invoke( 'text' )` to get the raw text of the `#log` element, instead of `page.find( '#log' ).text` --- does this work for you?
",brainhurricane,2013-02-05 19:05:09
952,2013-08-27 18:27:04,"@brainhurricane I'm trying to download a PDF within `<pre>` tags. I've been using `page.find(:xpath, '/html/body/pre').instance_eval('@base').invoke('text')` and it looks properly formatted, however my PDF viewer says the doc is damaged, and it is about 1.5x larger a file than the original, viewable PDF
",beggerss,2013-02-05 19:05:09
952,2013-08-27 18:38:25,"@beggerss If the data coming out of that command is correct, then I suspect that your issue may not be with Capybara, but with how you're embedding the PDF.

AFAIK, browsers do not support PDF data embedded in `<pre>` tags – you would have to use an `<object>` or `<embed>` tag. There's some discussion on Stack Overflow about which is better.
",brainhurricane,2013-02-05 19:05:09
952,2013-08-27 18:47:20,"@brainhurricane, I'm actually using capybara for webscraping instead of site testing, so it's not under my control. Thanks for your help!
",beggerss,2013-02-05 19:05:09
952,2013-08-27 18:52:16,"@beggerss Good luck and godspeed!
",brainhurricane,2013-02-05 19:05:09
952,2014-03-05 18:42:45,"For others who stumble here...

With capybara-webkit driver, as mentioned, newlines are collapsed into spaces as per how browsers render pages.

In my case I'm testing a CSV export, and so newlines are important to me.

The trick is to use `source` instead of `page` as both are available but source does not have normalized whitespace. I found this via the capybara documenation here: http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Session
",michaelfagan,2013-02-05 19:05:09
952,2016-01-27 15:26:17,"@michaelfagan :+1: 
",whomwah,2013-02-05 19:05:09
951,2013-02-04 18:02:22,"Default to turning on focusmanager.testmode when using Firefox.  Without this preference enabled the change event is not fired for text fields when the firefox instance doesnt have focus which causes issues when running parallel tests or when just running tests locally and doing something else on the machine at the same time.
",twalpole,2013-02-04 18:22:43
951,2013-02-04 18:22:43,"actually -- apparently this causes problems with native events - nevermind
",twalpole,2013-02-04 18:22:43
951,2013-04-13 08:28:15,"@twalpole what were the problems that this causes? It doesn't seem to cause Capybara's own tests to fail when merged back into master.
",TimMoore,2013-02-04 18:22:43
951,2013-04-13 18:13:44,"@TimMoore The issue was that it interfered with events in linux and prevented typing into fields.   The bug report is https://bugzilla.mozilla.org/show_bug.cgi?id=774892  .  According to that report it may have been fixed in one of the later firefox versions, so might not be an issue anymore.
",twalpole,2013-02-04 18:22:43
951,2013-04-14 00:47:15,"Thanks for the info. The Travis CI builds are on Linux, so it should catch this. What do you think about reviving this change? Otherwise, tests for change events fail when Firefox is not in focus (as mentioned in #1054).
",TimMoore,2013-02-04 18:22:43
950,2013-01-31 17:50:12,"In light of the recent Rubygems security issues, I think it would be prudent to add a signature to the gem and include it in releases. This isn't something I can issue a PR for, since you (the project owner) would need to own the cert files.

The how-to is here:

http://docs.rubygems.org/read/chapter/21

TL;DR:
1. gem cert --build your@email.com
2. Copy the private key somewhere safe
3. Add the public key to the repo (`git add gem-public_cert.pem`)
4. Update the gemspec with something like:
   
   s.signing_key = '/home/chris/.gemcert/gem-private_key.pem'
   s.cert_chain  = ['gem-public_cert.pem']
5. Push and rake release

While this would be a self-signed certificate, the presence of the pubkey in the canonical repo will allow people verify that the gem they installed from Rubygems (or where ever) was signed by the project maintainer, and has not been altered.
",cheald,2013-02-16 09:07:47
950,2013-02-16 07:35:21,"Done! Thanks for the nudge.
",jnicklas,2013-02-16 09:07:47
949,2013-01-29 13:52:57,"As part of my testing with #948 I bumped the nokogiri version to latest. 

All green. :metal: (including jruby)
",benlovell,2013-02-16 09:09:02
949,2013-02-15 21:32:19,"Is there anything that breaks with older versions of Nokogiri, or why do we want to do this?
",jnicklas,2013-02-16 09:09:02
949,2013-02-16 09:09:02,"I don't think this is necessary. We certainly don't want to lock people to the very latest version for no good reason.
",jnicklas,2013-02-16 09:09:02
948,2013-01-29 10:53:51,"Hey,

I've added `#disabled?` 

I did consider adding a locator such as `find('input', :disabled => true)` but wanted to first check if you thought this made sense?

Also, I didn't squash my commits but I can do if you prefer, of course.

If there are any specific docs or otherwise you want me to update, do let me know!
",benlovell,2013-02-15 21:32:32
948,2013-01-29 11:11:21,":facepunch: I have to admit I never ran the specs on jruby. Just installing it now to see what's up.
",benlovell,2013-02-15 21:32:32
948,2013-01-29 13:28:02,"It appears that jruby nokogiri is particular about the empty `disabled` attribute. I've removed it for now. I assume it is a bug and will find the time to go through nokogiri in the next few days.

Other than that, this should be good. :metal:
",benlovell,2013-02-15 21:32:32
948,2013-02-04 23:21:15,":+1: 
",martco,2013-02-15 21:32:32
948,2013-02-15 21:34:47,"Looks really good! Thank you so much for contributing this.

As for `find(""foo"", :disabled => true)`, I really want that too. We made it a requirement for fields and buttons to be enabled in Capybara 2.0, but a lot of people are complaining that it's annoying not to be able to find disabled fields at all, so it would be excellent to provide this as an options instead of hardcoding it in the XPath gem. It could be a bit tricky to implement, but if you want to give it a shot, then please do!
",jnicklas,2013-02-15 21:32:32
948,2013-02-15 21:35:35,"Also, sorry that it took me so long to review this pull request.
",jnicklas,2013-02-15 21:32:32
948,2013-02-16 09:18:01,"I can take a stab at that. Watch this space :+1:
",benlovell,2013-02-15 21:32:32
948,2013-02-23 12:24:36,"`find(""foo"", :disabled => true)` will be great!
",MarceloCajueiro,2013-02-15 21:32:32
947,2013-01-29 00:02:50,"Node#all returns.

@jnicklas - As discussed on the [mailing list](https://groups.google.com/forum/?fromgroups=#!topic/ruby-capybara/1JEwsbqJQ8s)
",mdgreenfield,2013-02-15 21:42:38
947,2013-02-15 21:42:43,"Thanks!
",jnicklas,2013-02-15 21:42:38
946,2013-01-27 08:42:06,"I feel like I must be missing something in the upgrade process, yet it seems straightforward to follow the problem in the stack trace here so I guess I don't grok [how the test suite works](https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/spec/session/has_field_spec.rb) at first blush, so sorry for not preparing a more isolated example:

<S_CODE_TOKEN>

The offending scenario which was passing under Capybara 1.1.2:

<S_CODE_TOKEN>
",ches,2013-01-27 12:55:43
946,2013-01-27 10:36:41,"Did you by any chance override the `field` selector?

/Jonas

On Sun, Jan 27, 2013 at 9:42 AM, Ches Martin notifications@github.comwrote:

> I feel like I must be missing something in the upgrade process, yet it
> seems straightforward to follow the problem in the stack trace here so I
> guess I don't grok how the test suite workshttps://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/spec/session/has_field_spec.rbat first blush, so sorry for not preparing a more isolated example:
> 
> % rspec -b spec/features/discussions_spec.rb:103
> Rack::File headers parameter replaces cache_control after Rack 1.5.
> Run options: include {:locations=>{""./spec/features/discussions_spec.rb""=>[103]}}
> F
> 
> Failures:
> 
>   1) Discussions
>   In order to consult mentors and peers for advice
>   As a registered user
>   I want to post, read and follow discussions
>  Posting a new Discussion
>      Failure/Error: page.should have_unchecked_field ""Mentor""
>      ArgumentError:
>        invalid keys :unchecked, should be one of :text, :visible, :between, :count, :maximum, :minimum
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/capybara-2.0.2/lib/capybara/query.rb:74:in `assert_valid_keys!'
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/capybara-2.0.2/lib/capybara/query.rb:25:in`initialize'
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/capybara-2.0.2/lib/capybara/node/finders.rb:111:in `new'
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/capybara-2.0.2/lib/capybara/node/finders.rb:111:in`all'
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/capybara-2.0.2/lib/capybara/node/matchers.rb:85:in `block in assert_selector'
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/capybara-2.0.2/lib/capybara/node/base.rb:78:in`synchronize'
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/capybara-2.0.2/lib/capybara/node/matchers.rb:84:in `assert_selector'
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/capybara-2.0.2/lib/capybara/session.rb:341:in`block (2 levels) in class:Session'
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/capybara-2.0.2/lib/capybara/rspec/matchers.rb:9:in `matches?'
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/rspec-expectations-2.12.1/lib/rspec/expectations/handler.rb:23:in`handle_matcher'
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/rspec-expectations-2.12.1/lib/rspec/expectations/syntax.rb:53:in `should'
>      # ./spec/features/discussions_spec.rb:103:in`block (3 levels) in <top (required)>'
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/capybara-2.0.2/lib/capybara/session.rb:214:in `within'
>      # /Users/ches/.rvm/gems/ruby-1.9.2-p290@Admin500/gems/capybara-2.0.2/lib/capybara/dsl.rb:51:in`block (2 levels) in module:DSL'
>      # ./spec/features/discussions_spec.rb:102:in `block (2 levels) in <top (required)>'
>      # <SNIP -- ordinary RSpec from here down>
> 
> Finished in 8.46 seconds
> 1 example, 1 failure
> 
> The offending scenario which was passing under Capybara 1.1.2:
> 
>   scenario 'Posting a new Discussion' do
>     user.update_attributes!(mentor: true)
>     visit new_discussion_path
> 
> <S_CODE_TOKEN>
> 
>   end
> 
>  —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/946.
",jnicklas,2013-01-27 12:55:43
946,2013-01-27 12:55:43,"Aha, yes! It looks we like we added a custom selector long ago called ""field"" for testing data tables in admin views, and the conflict/shadowing issue just never surfaced before. Apologies for the noise and thanks for the pointer, Jonas.

Would you be open to a pull request to emit a warning of some kind when attempting to add a selector name that's already registered, if I can find time to whip something up? I realize it may be used in the wild for an intentional override (though perhaps unwisely), so there ought to be a way to silence such a warning I suppose.
",ches,2013-01-27 12:55:43
946,2013-01-27 13:20:07,"I think overriding an existing selector should be an allowable thing to do. It's probably not a _great_ idea, but it should be possible, without generating a warning. We could of course add a separate method which overrides an existing selector, but that seems a bit overkill. I don't expect that this is a very common problem.
",jnicklas,2013-01-27 12:55:43
945,2013-01-25 02:47:16,"Simple one-liner fix to remove warnings about @server being
uninitialized when run as part of test suites with -w enabled
",rurounijones,2013-01-25 02:50:03
945,2013-01-25 02:47:41,"another option, if this one-liner is not liked is to simple add an else @server = nil to the original if statement.
",rurounijones,2013-01-25 02:50:03
945,2013-01-25 02:50:02,"Well, looks like someone beat me to it but I got confused when editing a file and thought it was a different repo's version. closing this request as unnecessary.

This fact became more obvious when double-checking the diff on Github. Sorry for the noise
",rurounijones,2013-01-25 02:50:03
944,2013-01-22 05:59:29,"If I want to check for a hidden element, I am inclined to do this:

<S_CODE_TOKEN>

I am now aware that using

<S_CODE_TOKEN>

is likely a better way to conduct this test, however...  I was a bit surprised to find that this does not fail in the case that the element does exist, but is visible.

It looks like changing this line in lib/capybara/query#matches_filters? from:

<S_CODE_TOKEN>

to:

<S_CODE_TOKEN>

And changing this line in lib/capybara/query#initialize from:

<S_CODE_TOKEN>

to:

<S_CODE_TOKEN>

along with adding the following to spec_helper.rb

<S_CODE_TOKEN>

would allow me to produce the behavior I was expecting.

Intuitively, I expect

<S_CODE_TOKEN>

to be true regardless of visibility,

<S_CODE_TOKEN>

to only pass if the element is on the page and visible, and

<S_CODE_TOKEN>

to only pass if the element is on the page and not visible.

I have not bothered writing a test, etc., as I wanted to at least ping someone to see if this is desired behavior. Even with the proposed patch, it doesn't seem like a user should have to set a configuration value to nil for something that feels like it should be default behavior. I'm curious what other people think.
",ToadJamb,2013-02-24 17:45:32
944,2013-01-27 18:26:35,"Personally I think that by default Capybara should find only visible elements.

Thus, I'd prefer to be able to specify `only_visible: false` instead of current options `visible: false` and `visible: true`
",abotalov,2013-02-24 17:45:32
944,2013-01-28 11:35:54,"Well, you can, just set `Capybara.ignore_hidden_elements = true`.
",jnicklas,2013-02-24 17:45:32
944,2013-01-29 08:06:33,"That doesn't solve anything. No matter what you specify for `Capybara.ignore_hidden_elements` with the current capybara code, given the following html:

<S_CODE_TOKEN>

Using the following capybara finder will not fail:

<S_CODE_TOKEN>

Setting `Capybara.ignore_hidden_elements = true` is simply a default. It doesn't really matter what happens when you use `have_css('.my-div')`. I am primarily concerned with the behavior when using the `:visible` option explicitly. Here, the element is visible, but we specify that we expect it to be hidden. It should fail. Does it make sense to you that the example I give here passes?
",ToadJamb,2013-02-24 17:45:32
944,2013-01-29 20:46:26,"@ToadJamb Imagine a situation if your proposed changes will be applied. If user specified `Capybara.ignore_hidden_elements = true`, then:
`have_css '.my-div', :visible => false` will return only non-visible elements
`have_css '.my-div', :visible => true` and `have_css '.my-div'` will return only visible elements.

How can he specify that all (both visible and non-visible elements should be returned)?
",abotalov,2013-02-24 17:45:32
944,2013-01-31 20:54:11,"My initial proposal was that leaving `:visible` off (i.e. `have_css '.my-div'`) would return elements regardless of visibility. This would require changing the way `Capybara.ignore_hidden_elements` is used internally, but would result in the behavior I am advocating. Essentially, `Capybara.ignore_hidden_elements` would become a tri-state property, where nil does not set a default value for `:visible`.              

Given `Capybara.ignore_hidden_elements == nil`, you would get the following results:

`have_css '.my-div'` would pass for an element that is either visible or hidden. As long as the element is on the page, it would pass.
`have_css '.my-div', :visible => true` would fail if the element is hidden. If it is visible, it would pass.
`have_css '.my-div', :visible => false` would fail if the element is visible. If it is hidden, it would pass.

Obviously, all cases fail in the case that the element is not on the page at all.

Setting `Capybara.ignore_hidden_elements` to true would cause the `have_css '.my-div'` to only pass for visible elements, if you desire that behavior.

What I have outlined here is not the current behavior, but seems like it should be.
",ToadJamb,2013-02-24 17:45:32
944,2013-02-01 07:56:49,"@ToadJamb I'd want to repeat question.

If `Capybara.ignore_hidden_elements = true`, how can user specify that he wants to return all elements, both visible and invisible?
",abotalov,2013-02-24 17:45:32
944,2013-02-07 08:25:01,"Utilizing my original suggestion, the user would not need to do that, as it would be the default (which is also the current behavior, so I am admittedly confused by the need for `:visible => false` to indicate 'include both visible and hidden elements'). My suggestion is that the `:visible` setting would simply be an indicator that the element is expected to be in the specified state (visible/hidden). If it is not in the specified state, the matcher would fail.

I contend that the current options and behavior are misleading. Maybe a better solution is changing the allowed values for `:visible` to be `:visible`, `:hidden`, and `:any` (or `:all`) instead of trying to use boolean values. This would actually allow more explicit control, as the `:visible` and `:hidden` values would fail if the element is not in the expected state, whereas `:any`/`:all` would pass regardless of visibility.

At the end of the day, the current behavior allows no way to fail if you want to test that an element is hidden. I am open to other ways of fixing this, but definitely think it's worth finding a better way to handle. I believe I understand where you're coming from and would like to find a solution we can agree on.
",ToadJamb,2013-02-24 17:45:32
944,2013-02-07 08:46:27,"@jnicklas What about adding support for `:visible`, `:hidden`, `:any` as values for `:visible` instead of current `true` and `false`? I think it's a good idea.
",abotalov,2013-02-24 17:45:32
944,2013-02-13 02:47:24,"@ToadJamb i also found that behavior unintuitive and proposed similar changes a year ago (https://github.com/jnicklas/capybara/pull/544) but they were not accepted. A name change and other things were discussed on that pull request conversation. Feel free to check it out :)
",grzuy,2013-02-24 17:45:32
944,2013-02-16 09:45:56,"I don't particularly like any of these solutions.

@abotalov is right that we need an API that allows us to find elements _regardless_ of whether they are visible or not. That's pretty important. Finding hidden elements _only_ seems like an edge case in comparison, which is why the API is the way it is. Yes it's confusing, but none of these alternatives are better, imo.
",jnicklas,2013-02-24 17:45:32
944,2013-02-16 09:47:01,"We can't break the API, so if we accept symbols, we would need to still allow false as an alias for `any`.
",jnicklas,2013-02-24 17:45:32
944,2013-02-17 07:17:47,"@jnicklas That is completely understandable. Whether true/false can be deprecated at some point is a totally different conversation.

I am inclined to think adding the options suggested here with copious documentation would be ideal.
",ToadJamb,2013-02-24 17:45:32
943,2013-01-16 18:51:32,"Previously, Capybara::Node::Base#synchronize would record the time the
method was called, yield, then re-raise misc element-related errors
(ex. element not found) if the time the block took was more than
Capybara#default_wait_time, or it had tried several times that amounted
to #default_wait_time.

In practice, selenium sometimes takes seconds to return on the first
block, ex. when clicking a link that triggers behavior resulting in a
cpu spike. The amount of time taken varies significantly depending on
available resources, and setting the #default_wait_time to a high number
is hacky.

This changes #synchronize to record the time of the first failure, and
retry after that for #default_wait_time. This way, the amount of time
ex. click_link takes has no bearing on the amount of time it will retry
for once selenium becomes responsive. Developers can then set a lower
default_wait_time for faster failures overall, while also being
unaffected by random selenium lags resulting from client actions.
",woahdae,2013-02-25 20:02:57
943,2013-01-16 18:52:30,"I'd be happy to write a (contrived) test for this to prevent regression if people think it's a reasonable suggestion in the first place.
",woahdae,2013-02-25 20:02:57
943,2013-01-18 21:16:36,"Under which circumstances clicking link may take seconds and result in a cpu spike? Could you provide an example and say why do you need this?
",abotalov,2013-02-25 20:02:57
943,2013-01-23 18:01:42,"Generally in our pages with heavier javascript (although not an insane amount of JS) when in resource-constrained environments like our build server that run multiple other supporting services.

I know that's still vague, I'm trying to allocate time to exposing this artificially in a sinatra test app.
",woahdae,2013-02-25 20:02:57
943,2013-02-06 17:52:17,"I can confirm that this effects us as well.  When we switched over to using the falcon patch with optimized small hashes with ruby a lot of this went away. The faster the tests run the less this is an issue.
",noahc,2013-02-25 20:02:57
943,2013-02-06 18:27:52,"I don't mean to stall this request, I have a half-done attempt at a repro, and it's still on my to-do list.

On Feb 6, 2013, at 9:52 AM, Noah Clark notifications@github.com wrote:

> I can confirm that this effects us as well. When we switched over to using the falcon patch with optimized small hashes with ruby a lot of this went away. The faster the tests run the less this is an issue.
> 
> —
> Reply to this email directly or view it on GitHub.
",woahdae,2013-02-25 20:02:57
943,2013-02-15 21:46:13,"The problem I have with this is that it's actually a subtle change in behaviour. Previously people could set `Capybara.default_wait_time` to 0, and be guaranteed that synchronize would not redo anything. With this pull request, that wouldn't be the case. Maybe we could just have a special provision for the wait time being 0. Principally this seems like a sensible idea, even though I kind of feel that you could have just bumped the wait time.

Now for the big problem: This needs tests. No merge without tests.
",jnicklas,2013-02-25 20:02:57
943,2013-02-25 20:02:57,"After thinking about this, I don't really like this. The behaviour is unintuitive. It might have advantages in certain cases, but it's certainly not what I'd expect, and so violates the principle of least surprise.

We now allow `:wait` as an option to all actions and finders, that makes it easy to extend the wait duration if a specific wait needs to be longer. That should help somewhat if you're running into cases like this.
",jnicklas,2013-02-25 20:02:57
943,2013-02-25 21:59:31,"Since the parameter is called 'wait' I agree it's slightly surprising, although it's not necessarily a strict wait time since it can go beyond the time in these blocking situations anyways. Conceptualizing it as 'retry' makes the most sense to me overall, but meh.

That's why I wanted to let you consider it before writing a test for it :) Although I'd still like to try to dig in and find out why selenium blocks sometimes.

Thanks for the consideration!

On Feb 25, 2013, at 12:03 PM, Jonas Nicklas notifications@github.com wrote:

> After thinking about this, I don't really like this. The behaviour is unintuitive. It might have advantages in certain cases, but it's certainly not what I'd expect, and so violates the principle of least surprise.
> 
> We now allow :wait as an option to all actions and finders, that makes it easy to extend the wait duration if a specific wait needs to be longer. That should help somewhat if you're running into cases like this.
> 
> —
> Reply to this email directly or view it on GitHub.
",woahdae,2013-02-25 20:02:57
942,2013-01-15 15:37:46,"I'm in the process of upgrading my specs to be compatible with Capyara 2, but have noticed a few annoying inconsistencies, and things that have changed since version 1.

As an example, before hand I had this:

<S_CODE_TOKEN>

which matched ""Room 1 (default)"", however now for that to work I have to specify the exact text:

<S_CODE_TOKEN>

Links however still work as before with partial matching. The not ignoring hidden elements (I see there is a flag for that though) is causing a few issues with that though :smiley: e.g. 'Print' as a drop down menu with 'Print Room' as an option.

Is there a listing anywhere (other than commits) of how the API has changed since version 1?
",lucaspiller,2013-02-20 13:13:55
942,2013-01-15 15:43:46,"See http://techblog.fundinggates.com/blog/2012/08/capybara-2-0-upgrade-guide/ and History.md in root of this repo
",abotalov,2013-02-20 13:13:55
942,2013-01-28 08:08:04,"These inconsistencies are the most aggravating part of the upgrade experience. `find` is now strict? Very well, that probably promotes better habits in the long run, and I know the change is well-documented. But when it manifests as differences like `select` being strict as shown here, but `fill_in` behaving loosely (see [the maligned password confirmation example](http://techblog.fundinggates.com/blog/2012/08/capybara-2-0-upgrade-guide/#comment-626041052)), something has been lost in a crusade for correctness. I would have to agree with the commenters that urging users to step down an abstraction level to use IDs for something as common as filling form fields is an odd choice for an acceptance testing framework that previously could do better. If I still wrote Cucumber stories I would feel even more repulsed.
",ches,2013-02-20 13:13:55
942,2013-01-28 08:53:13,"Heh, I just saw [this exchange](https://github.com/jnicklas/xpath/commit/0bfd283a1147c7d07e6cfc6b1683aa09a489c843#commitcomment-2392254). @jnicklas have you expounded on that new set of tools on the mailing list or anywhere?
",ches,2013-02-20 13:13:55
942,2013-01-28 11:37:35,"@ches: did you read my blog post? http://www.elabs.se/blog/55-a-capybara-future
",jnicklas,2013-02-20 13:13:55
942,2013-01-28 11:52:16,"@jnicklas No I hadn't, just I was looking for, thanks for the pointer!
",ches,2013-02-20 13:13:55
942,2013-02-20 13:13:55,"I've recently changed the behaviour of `select`, so that it now behaves identically to everything else, and hopefully in a more intuitive way. I haven't quite finished everything yet, but once I have, I'll write an in-depth post about what exactly has changed.
",jnicklas,2013-02-20 13:13:55
941,2013-01-14 17:08:45,"Where can I find documentation using capybara (with rspec) especially the differences between gem version 1.1.2 and 2.0.2.  I try the samples from ""Ruby on Rails Tutorial"" of Michael Hartl, but the samples are working only with 1.1.2 but not with 2.0.2.

An example:

page.should have_selector('title',
                        :text => ""Ruby on Rails Tutorial Sample App | Home"")

does not recognize the text between the title tags.
",nagyt234,2013-02-16 09:49:19
941,2013-02-16 09:48:46,"Please ask questions on the mailing list.

Capybara 2.1 will include a have_title matcher, until then you're out of luck with trying to match the title, unfortunately.
",jnicklas,2013-02-16 09:49:19
940,2013-01-14 09:36:28,"I am having an issue due to a GET request with tons of parameters that fails in Capybara due to a 'request too large exception'.
Is there a way to run capybara using unicorn as server?
Unicorn ( as passenger that I use in production ) support a reasonable request parameters length.
",andreacfm,2013-02-16 09:51:28
940,2013-02-16 09:51:16,"Yes, there is, but please ask questions like this on the mailing list in the future.

You can set:

<S_CODE_TOKEN>
",jnicklas,2013-02-16 09:51:28
939,2013-01-13 16:44:44,"According to the spec [1], color values are serialized in lowercase.
capybara-webkit returns lowercase values when compiled against Qt 5,
while Firefox and Qt 4 return the initial, uppercase value.

[1] http://goo.gl/2GK9o
",mhoran,2013-01-13 16:51:02
938,2013-01-12 23:15:51,"This PR aims to do nearly the same as https://github.com/jnicklas/capybara/pull/564

However, this one:
- adds tests
- casts args of type `Capybara::Node::Element` to native
- casts returned value to `Capybara::Driver::Node` (I don't know how to create proper `Capybara::Node::Element` from driver.rb)

Parameters [are supported by PhantomJS](https://github.com/ariya/phantomjs/pull/231) so it will be possible to add this functionality to at least Poltergeist.

I made it a PR as it changes public API.
",abotalov,2013-01-14 07:49:12
938,2013-01-13 16:43:15,"It will be a bit difficult to implement this in capybara-webkit. It wouldn't be too difficult to add support for hash or array args, but passing and returning a Capybara::Node::Element would not be straightforward.
",mhoran,2013-01-14 07:49:12
938,2013-01-13 16:47:59,"I'm a bit sceptical of the utility of passing strings/hashes/whatever as arguments. After all, we could just serialize those to JSON and put them in the JS. I think passing elements would be far more useful, but if that's too difficult for the webkit guys to implement I don't want to put undue burden on you guys.
",jnicklas,2013-01-14 07:49:12
938,2013-01-13 16:57:51,"I want it to do [this](http://watirmelon.com/2012/11/27/checking-an-image-is-actually-visible-using-webdriver/) using Capybara. As ability of passing params may be supported not only by Selenium, I think it will be better to add it to Capybara than to go to `page.driver.browser`. Selenium Webdriver (according to its rdocs) supports all those params so I added them to PR. If a particular driver doesn't support params of some type, it can analyze them and throw `Capybara::NotSupportedByDriverError`.

Maybe, we should document that drivers may support params of not all types. Or document supported parameter types only in driver-specific rdocs.
",abotalov,2013-01-14 07:49:12
938,2013-01-13 17:10:15,"I'm going to leave this up to @mhoran. I like the feature, but if it's too difficult for them to implement, then I don't want to force them to. What do you think?
",jnicklas,2013-01-14 07:49:12
938,2013-01-13 17:25:49,"@jnicklas I'm not sure that driver authors will become forced to support all params. Driver may look at types of params and throw error if it doesn't support them.
",abotalov,2013-01-14 07:49:12
938,2013-01-14 01:22:24,"I can't find a straightforward way for a WebKit based driver to implement this. The evaluateJavaScript method returns a QVariant, which maps to basic types like int, bool, string, array or hash. If we need to return an element, we'll have to wrap up the script call to determine whether the return type is a basic type or element. The same goes for function arguments, which will require a wrapper to provide an ""arguments"" array.
",mhoran,2013-01-14 07:49:12
938,2013-01-14 07:49:12,"Okay, let's skip this then, sorry @abotalov.
",jnicklas,2013-01-14 07:49:12
937,2013-01-11 16:53:57,"I have this setting: 
Capybara.server_port = 3003

but when I run the test I get this error:
Capybara::Webkit::InvalidResponseError:
       Unable to load URL: http://www.lvh.me/users/sign_in because of error loading http://www.lvh.me/users/sign_in: Connection refused

I have seen this error before version 2 but it included the port.
",julianvargasalvarez,2013-02-20 13:14:32
937,2013-02-15 12:37:47,"Same problem here, setting Capybara.server_port gives me
Rack application timed out during boot (RuntimeError)

By not setting the server port, capybara runs ok
",gummybears,2013-02-20 13:14:32
937,2013-02-15 22:01:21,"If you run against a full URL like http://www.lvh.me, you need to set `Capybara.always_include_port = true`. And of course you also need to redirect the domain in your hosts file or via a local DNS server. Otherwise, Capybara is going to go and visit that URL. Capybara don't afraid of the Internet.
",jnicklas,2013-02-20 13:14:32
937,2013-02-15 22:02:55,"Ahh, seems like lvh.me points to 127.0.0.1, so no hostsfile/DNS trickery necessary, but the rest still stands, Capybara needs to know to include the port.
",jnicklas,2013-02-20 13:14:32
936,2013-01-11 03:59:51,"The capybara 2.0.

<S_CODE_TOKEN>

similar happens for on elements:

<S_CODE_TOKEN>

Note the missing `1` in `fn1`.
",dnagir,2013-02-24 17:31:04
936,2013-01-11 05:55:53,"Show a reproduction HTML, please
",abotalov,2013-02-24 17:31:04
936,2013-01-13 23:41:02,"It happened on the full page as well as particular elements.

The example HTML is:

<S_CODE_TOKEN>

I first updated capybara to v2, but then had to go back to v1 due to this issue.
",dnagir,2013-02-24 17:31:04
936,2013-02-20 13:29:34,"Cannot reproduce: https://gist.github.com/jnicklas/4995549
",jnicklas,2013-02-24 17:31:04
936,2013-02-20 23:14:44,"I must be going crazy then. I swear that's what I had. Unfortunately can't afford to upgrade now to v2. Too many breaking changes :(
",dnagir,2013-02-24 17:31:04
936,2013-02-21 08:45:55,"@dnagir Capybara 2.1 will allow you to essentially use the same settings as Capybara 1.x, with only very minor changes, so hold out a little longer and you should be able to upgrade more easily.
",jnicklas,2013-02-24 17:31:04
936,2013-02-22 00:50:41,"Yeah, thanks @jnicklas. That was my hope.
Appreciate all your work.

Cheers.
",dnagir,2013-02-24 17:31:04
936,2013-05-17 06:42:40,"@jnicklas wonder if 2.1 is still using the substring match, you said:

> Capybara 2.1 will allow you to essentially use the same settings as Capybara 1.x, with only very minor changes, so hold out a little longer and you should be able to upgrade more easily.

But the 2.1 is still using substring match (typical ""Password"", ""Password confirmation""). Is there an option to change how elements are matched or am I missing something?
",dnagir,2013-02-24 17:31:04
936,2013-05-17 06:58:49,"@dnagir the ""Matching"" section of the readme explains the new matching options (:match, :exact) that can be passed to the finders
",twalpole,2013-02-24 17:31:04
936,2013-05-17 06:59:56,"Thanks. Got it! Sorry for missing that section in the README.
",dnagir,2013-02-24 17:31:04
935,2013-01-11 02:52:26,"I am trying to fill in the field ""Password"" but capybara complains it is ambiguous as it is also finding the ""Password confirmation"" field.  My code looks like:

<S_CODE_TOKEN>

And the html on the page looks like: https://gist.github.com/d26c51a17bf7782c8984

This is in rack-test.

thx!
",kbaum,2013-01-11 13:18:54
935,2013-01-11 03:47:37,"Because the Capybara 2.0 matches ""Password"" to both ""Password"" and ""Password confirmation"" which is IMO wrong, but well, there must be a reason for that.

Use ids instead, the old fashion way :(
",dnagir,2013-01-11 13:18:54
935,2013-01-11 12:59:21,"Hmmm.. that seems wrong to me.  Why wouldn't it use an exact match of the label instead of matching  part of the label?  I am asking for the field ""Password"" not ""Password confirmation"".  Another words, i am NOT doing:

<S_CODE_TOKEN>

thx!
",kbaum,2013-01-11 13:18:54
935,2013-01-11 13:01:32,"Did you guys see my blog post: http://www.elabs.se/blog/55-a-capybara-future

I address some of these issues and propose some suggestions on how to fix this.
",jnicklas,2013-01-11 13:18:54
935,2013-01-11 13:18:54,"Read it and left a comment.  I guess this should be closed because this is obviously a known issue :-).  No reason to have the same discussion in 2 places.

thx!
",kbaum,2013-01-11 13:18:54
935,2013-01-15 00:39:58,"Is there any way to solve this problem today? Any monkey patch? :pensive:
",fabianoalmeida,2013-01-11 13:18:54
935,2013-01-15 01:28:56,"Where is the 2nd place to watch for this issue?
",dnagir,2013-01-11 13:18:54
934,2013-01-10 15:07:28,"See https://gist.github.com/4502533

I have a series of tests which work with data which is hidden by default. Before the latest update, the tests would pass by me clicking on a link that made them visible, and then asserting their presence. But now all of those tests are failing. Obviously if I add the @javascript tag then everything works, but I'd prefer not to do that if possible.

The gist above recreates the problem. I confirmed that the above test works with Capybara 1.1.4 but not in 2.0.0 or above.
",CoryFoy,2013-02-24 17:32:10
934,2013-02-24 17:32:10,"Capybara 2.1 will allow you to specify `text(:all)` or `text(:visible)` and the default for that will depend on `Capybara.ignore_hidden_elements`, so everything will be a little more sane. Hope that's enough of a fix.
",jnicklas,2013-02-24 17:32:10
933,2013-01-10 02:30:37,"Splits one big method into many to improve readability. Tests pass.
",jamescook,2013-01-10 07:37:53
933,2013-01-10 07:38:09,"Very nice, good call!
",jnicklas,2013-01-10 07:37:53
932,2013-01-09 21:13:27,"After upgrading to 2.0.2, some of my tests are failing due to images not being found.  

https://gist.github.com/b68884f0ad5103dafe08

As tracking these down is not top on my priority list, i was wondering if it's possible to relax this a bit.

thx!
",kbaum,2013-02-16 10:04:41
932,2013-01-18 16:09:30,"+1

Our designer had image_tag """", class: ""fill_with_js"" and it caused a really hard to debug issue like this one.
",garyharan,2013-02-16 10:04:41
932,2013-01-23 22:27:51,"I'm having same issue using :js => true (not sure if same happens when false)
",jess,2013-02-16 10:04:41
932,2013-02-16 10:04:53,"Capybara 2.1 will have a config option to disable this behaviour.
",jnicklas,2013-02-16 10:04:41
932,2013-06-14 19:40:07,"Did Capybara 2.1 get a config option for this? (I haven't found it in the docs so far, but still looking)
",gmcnaughton,2013-02-16 10:04:41
932,2013-06-15 10:29:41,"Yes, `Capybara.raise_server_errors = false`.
",jnicklas,2013-02-16 10:04:41
932,2013-06-18 16:56:41,"Thanks for the info, much appreciated!
",gmcnaughton,2013-02-16 10:04:41
932,2014-10-15 21:47:32,"Doesn't this mean that capybara won't be raising any server errors? i.e. not raising 500 server errors (which is something that we want to see).

As far as I remember previous versions didn't raise an exception when hitting a 500 error. It would just display the rails error page. That is when running javascript tests.
",yagudaev,2013-02-16 10:04:41
932,2014-12-16 02:53:41,"This just made debugging harder again for me, 2 months later. Is there an option to do a more granular control of this?
",yagudaev,2013-02-16 10:04:41
932,2014-12-16 03:31:19,"The real information I needed can be obtained using this workaround: https://gist.github.com/steve9001/1443408#comment-328884
",yagudaev,2013-02-16 10:04:41
931,2013-01-09 08:25:12,"Content method [was removed from XPath gem a year ago](Content method was removed from XPath gem a year ago)

I've also removed it from README file
",abotalov,2013-01-09 08:26:07
931,2013-01-09 08:26:18,"Thanks!
",jnicklas,2013-01-09 08:26:07
930,2013-01-08 20:00:39,"Attempting an upgrade to capybara 2.0.2 and one of tests was failing because capybara could not find the option within the select box.  

<S_CODE_TOKEN>

I know from the upgrade guide that the select method no longer works with partial matches, but from what i could tell, i was matching and it was still not working.  For example, the following code failed:

<S_CODE_TOKEN>

But I was able to get it working by running this instead:

<S_CODE_TOKEN>

Here is the implementation code that capybara was trying to execute:

<S_CODE_TOKEN>

The issue seems to be with the second find of the option.  My select box looks like:

https://gist.github.com/28440e9a6211cd57d051

thx!

-karl
",kbaum,2013-01-08 21:32:37
930,2013-01-08 21:06:33,"Capybara will find options by their ""label"", not their value, so in this case you should have done:

<S_CODE_TOKEN>
",jnicklas,2013-01-08 21:32:37
930,2013-01-08 21:32:37,"Ok.. i have to apologize.. i was looking for 30 days instead of 30 Days (capitalized).  

Thanks for your help!
",kbaum,2013-01-08 21:32:37
929,2013-01-08 15:01:36,"I noticed the RSpec examples didn't have any expectations and that they did not load a page in the beginning. I updated the examples in the README to be real functioning tests.
",JoelQ,2013-01-08 20:57:15
929,2013-01-08 20:57:26,"Thanks!
",jnicklas,2013-01-08 20:57:15
928,2013-01-08 08:43:35,"Currently it's specified that `within_frame` supports frame id as a parameter. However, currently:
- RackTest doesn't support `within_frame`
- Webdriver [supports](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/frame) frame id, name, index and WebElement
- Capybara-Webkit and Poltergeist support only name and index

So currently id is supported by one driver. Name and index are supported by 3 drivers. I changed documenation to clarify it.
",abotalov,2013-01-08 08:51:24
928,2013-01-08 08:51:19,"Looks good.
",jnicklas,2013-01-08 08:51:24
928,2013-01-14 01:00:01,"@jnicklas, this change will require capybara-webkit to implement a way to find a frame given a `Capybara::Node::Base`. That shouldn't be too difficult, however this leaves me wondering how driver authors should treat master. Will API changes like this be rolled out as a patch release, or into something bigger like a minor version?
",mhoran,2013-01-08 08:51:24
928,2013-01-14 07:48:18,"Hmm, I missed that change in functionality. We'll definitely do a minor release in that case. According to semver, we shouldn't add functionality in patch releases.
",jnicklas,2013-01-08 08:51:24
928,2013-02-13 03:02:35,"I'm running into some difficulty implementing this change in capybara-webkit. We represent ""native"" elements relative to each frame, not in a global context. This creates an issue if an element handle is referenced outside of the frame context from which it was instantiated.

I'm not sure how to move forward here. I don't want the behavior to be inconsistent between capybara-webkit and other drivers, however I'm not sure what the proper behavior should be in the described scenario.
",mhoran,2013-01-08 08:51:24
928,2013-02-13 07:15:11,"@mhoran I think Webdriver's `switch_to` does same:

<S_CODE_TOKEN>
",abotalov,2013-01-08 08:51:24
928,2013-02-13 07:30:36,"@mhoran I would be more than happy about a better API. The current within_frame API is crap.
",jnicklas,2013-01-08 08:51:24
928,2013-02-13 07:45:41,"@jnicklas [Here](https://groups.google.com/d/msg/ruby-capybara/lSBMiA_0hWU/LDkMalT6Pn0J) you proposed API for switching windows.
What about this?

<S_CODE_TOKEN>

Where options can be any of `id`, `name`, `position`, `element`, like `id: 'my_id'`

But it won't work for Webdriver as it searches for all those types and [doesn't provide option to specify type of locator](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/frame).
Is current `within_frame` really crap?
",abotalov,2013-01-08 08:51:24
928,2013-02-17 21:42:05,"I think that in the case of within_frame, switching on `Capybara::Element` solves some of the issues with the API. The problem arises when someone does what @abotalov  pointed out in his comment (https://github.com/jnicklas/capybara/pull/928#issuecomment-13477206). I've got this working in capybara-webkit, however the implementation will only work if a user finds an element and switches to it in the same context.

Using the Selenium driver, I get the following error if I try to switch to a frame outside the context in which the element was found:

<S_CODE_TOKEN>
",mhoran,2013-01-08 08:51:24
927,2013-01-08 03:19:21,"Installing gems with sudo strikes me as a bad thing.
",parndt,2013-01-08 07:59:59
927,2013-01-08 08:00:08,"A relic from another time :P
",jnicklas,2013-01-08 07:59:59
927,2013-01-08 08:52:32,"Lest we forget :)
",parndt,2013-01-08 07:59:59
926,2013-01-07 19:40:30,"Content method [was removed from XPath gem a year ago](https://github.com/jnicklas/xpath/commit/1691851b49ce5db484d79e4569848dad1571cf3a)
",abotalov,2013-01-09 08:25:18
925,2013-01-07 08:54:22,"Capybara doesn't use thin from version 2.0.2
",abotalov,2013-01-07 10:24:09
925,2013-01-07 10:24:14,"Thanks!
",jnicklas,2013-01-07 10:24:09
924,2013-01-06 21:27:08,"find(:foo) was removed in version 2.0.0 (I don't know the reason but probably it was considered a bad practice). So I think reference to this way should be removed from docs too.
",abotalov,2013-01-06 23:54:20
924,2013-01-06 23:54:25,"Thanks!
",jnicklas,2013-01-06 23:54:20
923,2013-01-05 02:46:02,"I'd like to be able to do this:

<S_CODE_TOKEN>

Right now, using Selenium, I get the following error:

<S_CODE_TOKEN>

Using Webkit:

<S_CODE_TOKEN>
",Trevoke,2013-02-16 09:53:18
923,2013-01-05 02:50:36,"What is `:invalid` supposed to do?
",jnicklas,2013-02-16 09:53:18
923,2013-01-05 02:54:05,"I hope you'll forgive me for defaulting to the [documentation](https://developer.mozilla.org/en-US/docs/CSS/:invalid): I think it will do a better job of explaining it than me. However, the short version is that it is the class thanks to which the form elements that fail validation glow red.

<S_CODE_TOKEN>

And, because a pseudo-class is kinda weird, here is its definition, again from [MDN](https://developer.mozilla.org/en-US/docs/CSS/Pseudo-classes):

<S_CODE_TOKEN>
",Trevoke,2013-02-16 09:53:18
923,2013-01-05 03:05:17,"Ahh, I see. This would be difficult for us to support, since Capybara actually doesn't do anything with CSS selectors. We just use Nokogiri to convert them to XPath, before handing off the XPath to the driver. I don't think that XPath can express the ""invalid"" notion, so this is probably pretty impossible. We might be able to support it with a syntax more like this:

<S_CODE_TOKEN>
",jnicklas,2013-02-16 09:53:18
923,2013-01-05 03:11:22,"I would be happy with that. I think it makes sense. So... This means that the 'invalid' pseudo-class would be applied to every selector in the string, right? example:

<S_CODE_TOKEN>

Would translate to looking for the following two things, correct?

<S_CODE_TOKEN>

I hope Capybara is able to support this.
",Trevoke,2013-02-16 09:53:18
923,2013-01-05 19:40:05,"Oh, also, I was able to get this working successfully through Browser#find_elements, like so:

<S_CODE_TOKEN>

But it's not the open API, and doing this is a hack, so it doesn't work with drivers like poltergeist.
",Trevoke,2013-02-16 09:53:18
923,2013-02-16 09:53:18,"I'm closing this, so as to not leave feature requests lying around. If someone wants this, please send a pull request.
",jnicklas,2013-02-16 09:53:18
923,2013-02-16 17:45:51,"That doesn't make any sense. No one is going to go sift through closed issues to find feature requests. I understand that you want to keep your list of issues clean, but why not just create a tag for features and leave that alone?

The only way someone will find this is if they happen to do a Google search for exactly this; if you leave it open, any number of people can see it and be inspired to help.
",Trevoke,2013-02-16 09:53:18
923,2013-02-16 18:01:14,"I highly doubt that someone is going to go to the Capybara issue tracker to find some fun stuff to work on. That very rarely happens. Most people who contribute do so because they have a need for a certain feature. In that case they can search for it. I've seen feature requests which were really good ideas linger around for years, with no one ever stepping up to fix it. In the end they just become distractions from what really needs to be done.
",jnicklas,2013-02-16 09:53:18
923,2013-02-19 19:21:49,"@trevoke PR #961 has been merged into master, so the :invalid pseudo selector should work once capybara 2.1 is released and whatever driver you are using is updated (assuming the browser you are testing against supports :invalid)
",twalpole,2013-02-16 09:53:18
923,2013-02-19 20:03:49,"I'm happy to be wrong :)
",jnicklas,2013-02-16 09:53:18
923,2013-02-19 21:00:25,"@twalpole Wonderful, thank you!
",Trevoke,2013-02-16 09:53:18
922,2013-01-02 16:03:16,"As discussed in #781, see http://docs.rubygems.org/read/chapter/20#required_ruby_version for more info in `required_ruby_version`.
",thegcat,2013-01-02 16:23:13
922,2013-01-02 16:25:23,"Great, thanks! :-)
",thegcat,2013-01-02 16:23:13
922,2013-01-02 18:26:06,"I think this will make it stop working with 1.8.7 altogether.

Jonas, do you want to release 3daca9e9355a2b80e2fb6b9c188f73a560c3c838 as 2.0.3 (as it contains a fix for 1.8.7 - see #921), and then we can bump the version to 2.1.0 with the new gemspec?
",joliss,2013-01-02 16:23:13
922,2013-01-02 18:26:32,"So 2.0.3 would be the ""last version with unofficial 1.8.7 support"" or so.
",joliss,2013-01-02 16:23:13
922,2013-01-02 19:04:55,"@joliss sounds sensible.
",jnicklas,2013-01-02 16:23:13
921,2012-12-31 20:42:03,"`[[:space:]]` works like `\s` in regexes, except it is encoding aware.  See http://www.ruby-doc.org/core-1.9.3/Regexp.html#label-Character+Classes

This avoids an issue I was seeing in 1.8 where the unicode characters were being misparsed and it was erroneously stripping several letters and most digits.
",bencates,2013-01-01 01:37:25
921,2013-01-01 01:37:23,"Hah, I had missed a bracket back when I tried it (`/[:space:]/` instead of `/[[:space:]]/`), and then I was confused why it didn't work. Thanks for fixing, and happy New Year!
",joliss,2013-01-01 01:37:25
920,2012-12-26 17:17:17,"Rack::Handler::Thin.run() (and, by extension, Capybara.server.call())
can return immediately if another Thin handler is already running.  This
results in a race condition where `@server_thread` can finish running
before we evaluate `responsive?`.   The easiest solution seems to be to
just remove the check that `@server_thread` is alive - it's quite possible
that EventMachine has merged the new server into a previous one, so we don't
particularly care about the state of our own thread.

---

I was having trouble running Capybara's tests successfully - I would keep getting timeout errors while booting, particularly in current_url_spec.rb and server_spec.rb (both of which create multiple Capybara::Servers), and eventually traced it down to this.  Has anyone else had trouble with that or is it just me?
",jdelStrother,2012-12-31 10:52:27
920,2012-12-26 18:05:11,"I have no idea why we are doing that check anyway. @joliss, any ideas?
",jnicklas,2012-12-31 10:52:27
920,2012-12-26 20:03:41,"I'm not sure. It was added by @raggi in ab62b27ae1c3836351a9a08ac9db729ed7e01f25. @raggi, any insights?
",joliss,2012-12-31 10:52:27
920,2012-12-26 20:05:37,"> I was having trouble running Capybara's tests successfully - I would keep getting timeout errors while booting, particularly in current_url_spec.rb and server_spec.rb (both of which create multiple Capybara::Servers), and eventually traced it down to this. Has anyone else had trouble with that or is it just me?

I haven't seen it, but it's quite possible that we're having a heisenbug there. Could you post a stack trace for posterity?
",joliss,2012-12-31 10:52:27
920,2012-12-26 20:12:53,"It's just a timeout from the Timeout block not completing, but it looks something like : 

<S_CODE_TOKEN>
",jdelStrother,2012-12-31 10:52:27
920,2012-12-26 20:17:46,"Argh.  Sorry - I was updating my 'timeouts' branch with a new commit, and managed to delete the branch due to a typo, which github has interpreted as me closing the request.  Can I re-add my new 'timeouts' branch (https://github.com/jdelStrother/capybara/commit/aa9cf9ba0421ef70573ad982db20d0f55cab469a) to this PR, or should I open a new one?
",jdelStrother,2012-12-31 10:52:27
920,2012-12-26 21:02:29,"I don't know a way to re-add branches, except for using the `hub` command line utility perhaps. Your best bet is to open a new PR and make a note here. (No biggie - GitHub gets wedged like this sometimes.)
",joliss,2012-12-31 10:52:27
920,2012-12-26 21:25:11,"... and github finally noticed the new branch.

The new version replaces the server_thread ivar with a local variable, which seems appropriate, assuming we really don't need the @server_thread check in `responsive?`.
",jdelStrother,2012-12-31 10:52:27
920,2012-12-27 04:01:07,"Thin is not thread safe, and basically incompatible with Capybara at it's core. It can work in many practical scenarios, but this is one that it's really not built for. EventMachine is specifically and by design not thread safe, and really will never directly support this execution model.

The fixable problem is, you aren't using a synchronous runner in Thin::Handler.run, and this is breaching the expected API contract, from an execution order standpoint.

It is arguably more correct to make Rack::Handler::Thin#run block until that thin server instance shuts down, i.e. `Thread.current.join(0.1) while server.running?` after https://github.com/rack/rack/blob/master/lib/rack/handler/thin.rb#L16
",raggi,2012-12-31 10:52:27
920,2012-12-27 04:02:43,"@jnicklas that check prevents race conditions in `responsive?`. This PR does not describe a bug in that code.
",raggi,2012-12-31 10:52:27
920,2012-12-31 10:54:48,"@raggi: sounds sensible. I removed the thin handler from the default server startup, so hopefully fewer people will run into this in the future. If they do, they will have handle this themselves. For those who don't explicitly need eventmachine, Puma is a better choice these days anyway.
",jnicklas,2012-12-31 10:52:27
919,2012-12-26 16:00:37,"It's no longer necessary, we rely on Ruby's Timeout::Error instead
",jdelStrother,2012-12-31 10:55:10
918,2012-12-26 15:17:27,"`TimeoutError` is actually `Capybara::TimeoutError`, which is unrelated to Ruby's Timeout.  I think this is left over from back when we used to use `Capybara.timeout {... }` while booting the server.

`Capybara::TimeoutError` could perhaps be removed now - it's only used as the superclass of `InfiniteRedirectError`.  WDYT?
",jdelStrother,2012-12-26 15:28:56
918,2012-12-26 15:29:07,"Indeed, we should remove the error class as well.
",jnicklas,2012-12-26 15:28:56
917,2012-12-26 09:50:30,"`response.should redirect_to(user_path(user))` this was working before but after updating everything including **rspec** it has broken. 

please help
",reejosamuel,2012-12-26 15:07:03
917,2012-12-26 15:07:03,"`reponse` is not part of the Capybara API. I think you are using Rails controller tests or so.
",joliss,2012-12-26 15:07:03
916,2012-12-26 08:59:44,"Hi,

I have a problem when using last Capybara version (2.0.1) and Ruby 1.8.7 (p302 and p371). Whenever `normalize_whitespace` is called inside `Capybara::Helpers` it strips all letters:

<S_CODE_TOKEN>

This method is called in the has_text? method, so 

<S_CODE_TOKEN>

would pass if #element is empty (because the whitespace normalized version of ""Lorem Ipsum"" is """").
",brenes,2012-12-26 15:09:15
916,2012-12-26 15:09:15,"I don't believe we support 1.8.7 anymore for Capybara 2.0. That said, if there's a reasonably straightforward fix for this, we can accept a pull request that makes it work on 1.8.7 again.
",joliss,2012-12-26 15:09:15
916,2012-12-26 15:18:21,"Good to know. If I find any fix I'll pull it. Thanks!
",brenes,2012-12-26 15:09:15
916,2013-02-04 22:26:47,"8852e4d seems to have fixed this
",jgarber,2012-12-26 15:09:15
915,2012-12-23 18:30:03,"This pull request aims to solve https://github.com/jnicklas/capybara/issues/642

In contrast to other selectors (such as `has_css?`), proposed code doesn't give good looking error message like [here](https://github.com/jnicklas/capybara/blob/master/lib/capybara/result.rb#L34). Also I added a broken test (`""fails if matched text count does not equal expected count""`)

Please advice how should I write has_text to minimize code duplication between this code and query.rb.

Note: I haven't checked if this code works. I changed it in Github editor
",abotalov,2013-03-03 23:08:10
915,2013-02-24 17:28:14,"The intent here is good, but it would need more tests, and as you say, somehow we need to remove the duplication between this, and query.rb. Maybe it does not make sense for that code to even live inside query. Maybe it should be a helper, or possibly just inside node/matchers.
",jnicklas,2013-03-03 23:08:10
914,2012-12-23 15:52:45,,abotalov,2012-12-23 16:21:09
914,2012-12-23 16:21:20,"Thanks!
",jnicklas,2012-12-23 16:21:09
913,2012-12-18 16:35:23,"In `spec/dsl_spec.rb`, there was a `before` clause defining `@session`, but it wasn't being used in any of the specs in that context.  Instead, each spec creates its own version of it.   This removes the duplication by making use of the already-existing `@session` variable.
",randycoulman,2012-12-26 16:08:27
913,2012-12-26 16:08:23,"Nice, thanks!
",joliss,2012-12-26 16:08:27
912,2012-12-15 17:07:48,"Ruby2.0.0 default encoding is UTF-8 instead of US_ASCII
",sanemat,2012-12-15 21:46:17
911,2012-12-15 00:10:10,"Allow elements that are content-editable to be set, and allow them to be filled in with `fill_in 'element', with: 'content'`.

There are commits to xpath to make this possible too, I don't know how Github handles those.

Would you like me to update the Readme to indicate this is possible too?
",JonRowe,2013-10-20 17:42:50
911,2013-01-22 01:21:03,"Hi @JonRowe   What (or where) are the xpath changes you mentioned?  
I didn't see an xpath repo under your name.
",tgaff,2013-10-20 17:42:50
911,2013-01-22 01:30:24,"Sorry, wasn't used to working with Git submodules, assumed it would be bundled in with this. See https://github.com/jnicklas/xpath/pull/48
",JonRowe,2013-10-20 17:42:50
911,2013-01-22 02:36:27,"I see, it doesn't show up unless I pull down PRs for xpath as well.  

I was able to reproduce the issue.  It looks more to me like it's intermittently not setting the contenteditable field at all.  I ran it with 10 second sleeps and still got failures.
",tgaff,2013-10-20 17:42:50
911,2013-01-22 02:40:35,"Oh I never got any failures with the 1 second sleep, without this PR you can't fill in contenteditable fields at all of course, so I just assumed that the heisenbug was down to how Capybara asserts on content, (for me it observably just wasn't waiting for the browser to finish)
",JonRowe,2013-10-20 17:42:50
911,2013-01-22 07:40:21,"Alright, I ran it a few hundred times more.  It looks like it's only failing for me if firefox loses focus during the tests.  Strange.  So based on that I suspect it's send_keys.  
I couldn't replicate this issue with the other tests.

I'd also like to get a solution for contenteditable, so I was hoping to help rather than throw a spanner into this...
",tgaff,2013-10-20 17:42:50
911,2013-01-22 07:42:43,"Ah yeah, there's a bunch of issues around Firefox and focus, especially on OSX, but in general this works :) Personally I'm hoping @jnicklas will merge this, and then phantomjs and the like will eventually integrate it, rather than relying on selenium.
",JonRowe,2013-10-20 17:42:50
911,2013-01-22 11:20:27,"I commented on the pull request to XPath [here](https://github.com/jnicklas/xpath/pull/48#issuecomment-12540142). I'm not convinced this is a good idea, to be honest.
",jnicklas,2013-10-20 17:42:50
911,2013-01-22 23:11:50,"As commented on https://github.com/jnicklas/xpath/pull/48, this is to allow `contenteditable` elements to be interacted with via set, the xpath change add's the syntactic sugar to allow us to use `fill_in` as well. Please don't reject this PR because of the syntax, I will change and move the tests to work directly with `find('#element').set('text')` if that is your preference, but this is a necessary change for those of us working with the HTML5 spec.
",JonRowe,2013-10-20 17:42:50
911,2013-01-23 07:09:37,"Can you repush this with the changes to the xpath submodule removed?
",jnicklas,2013-10-20 17:42:50
911,2013-01-23 07:53:33,"Done, was in the process of moving them to a more appropriate place ;) Note that firefox seems to now require focus to run these as a suite together, but not individually when run with `bundle exec rspec spec/selenium_spec.rb -t contenteditable` which I find curious...
",JonRowe,2013-10-20 17:42:50
911,2013-02-17 11:36:27,"FYI it passed ""on my machine"" once again only with firefox having focus... I tried various things with synchronise / timeouts but no joy.
",JonRowe,2013-10-20 17:42:50
911,2013-02-25 08:17:12,"Okay, I just tried running this, but the failures are rather painful. I'm very hesitant to merge something which makes it necessary to have focus on the browser to get a pass. For me it consistently failed when the browser didn't have focus. For new contributors especially, that's a stumbling block we can't afford. Do you have any ideas how we can work around this?
",jnicklas,2013-10-20 17:42:50
911,2013-02-25 11:20:06,"Yeah I've been able to fix similar issues with Selenium + Capybara before (was some tag completion widget) by firing the relevant focus events, so I'll try that here...
",JonRowe,2013-10-20 17:42:50
911,2013-02-25 15:29:56,"Setting focusmanager.testmode to true in the firefox profile may solve this on win/osx, unfortunately it breaks (or at least used to) text entry on linux
",twalpole,2013-10-20 17:42:50
911,2013-02-25 22:20:25,"I'll try that on OSX, but I we'll need a linux solution, for TravisCI and Linux contributors ;)
",JonRowe,2013-10-20 17:42:50
911,2013-02-25 22:30:18,"Capybara is completely fubarred on TravisCI anyway. I'm pretty close to just disabling builds entirely. We haven't had a passing build in ages. That's beside the point though, we do need this to work on Linux.
",jnicklas,2013-10-20 17:42:50
911,2013-02-25 22:44:17,"@jnicklas - I was working on enabling tests to run on chrome as well as firefox, which would allow the hover test to pass on chrome, while its ignored on firefox, would that be acceptable here too?  As far as the failing builds, do you have any clue why the base version tests fail on travis, running them locally appear to be fine for me.  Also is there any reason to continue testing the allowed failure matrix (ree, 1.8.7)
",twalpole,2013-10-20 17:42:50
911,2013-02-25 23:15:57,"@twalpole no, we should get rid of all 1.8.7 builds. I think the suite is simply too slow, that's why it fails on Travis, but I haven't investigated it more than shrugging at the fact that travis is broken _again_ and realizing that I don't really care.
",jnicklas,2013-10-20 17:42:50
911,2013-02-25 23:20:58,"1.8.7 considered harmful? :trollface:

Capybara should _try_ to maintain 1.8.7 compatibility if it can, or at least have a functional release, even if 1.x. is 1.8.7 and 2.x is 1.9.3 and beyond, just because so many people use 1.8.7 and Capybara is such a wonderful tool!

I'm a TravisCI fan so I might look at the build issue, but I agree it could well simply be build time, Capybara is not a fast test suite... (lol firefox :/)
",JonRowe,2013-10-20 17:42:50
911,2013-02-25 23:26:33,"Well we have this: https://github.com/jnicklas/capybara/blob/master/capybara.gemspec#L11

Which means that 2.1 will not run on 1.8.7 at all. Maintaining 1.8.7 compatibility is too much of a hassle, and EOL is reached in like two months anyway.
",jnicklas,2013-10-20 17:42:50
911,2013-02-25 23:36:13,":+1: It's a sensible decision, 1.x still support's it right? People using 1.8.7 will probably be stuck on older versions of Capybara too :P in any case it's not a relevant discussion for this PR :)
",JonRowe,2013-10-20 17:42:50
911,2013-02-25 23:53:51,"Yes, 1.x still support 1.8.7.
",jnicklas,2013-10-20 17:42:50
911,2013-03-05 00:12:18,"Hey, ok so I got this working when it's out of focus, basically forcing the browser to select the start of the editable area solves that issue.
",JonRowe,2013-10-20 17:42:50
911,2013-03-05 00:37:05,"Seems a bit crazy :) Maybe @jarib has some insight if this is a sane thing to do?
",jnicklas,2013-10-20 17:42:50
911,2013-03-05 01:30:59,"It's because firefox doesn't treat certain events the same way if the browser window doesn't have focus, I've run into perfectly sane code that otherwise breaks on firefox in CI because of that ""feature"". This is a relatively sane way of making sure we're typing where we think we are. It's just JS has a clunky api for it.
",JonRowe,2013-10-20 17:42:50
911,2013-03-06 10:28:35,"I think writing a good bug report against `focusmanager.testmode` would be the better action to take (cc @AutomatedTester).

That said. I'd be more concerned about the hack to work around the ElementNotVisible error than the focus bug. You're essentially giving Capybara the ability to type into an element a real user would not be able to type into. 

Also I think it's a bad practice in general to just work around what you think is incorrect behaviour in WebDriver, which does occasionally happen even though we've got it right in this case. :) If you don't let us know we won't have a chance to fix it.
",jarib,2013-10-20 17:42:50
911,2013-03-06 12:03:21,"@jarib 

The hack to work around ElementNotVisible is a hack to work around a Selenium bug, you can type into an empty content-editable div just fine, Selenium just thinks it's not visible. In practise it is visible and usable.

The hack for focus is actually just to ensure consistency in tests, in my experience Chrome / Safari don't exhibit Firefox's behaviour when it comes to not responding to Javascript due to not having focus. My aim with this PR is actually to get the spec into Capybara, Selenium implementation is just a by product, if you have a suggested improvement please make it. (I want this feature in other [headless] drivers).
",JonRowe,2013-10-20 17:42:50
911,2013-03-06 12:05:53,"I agree with @jarib that we should report bugs upstream instead of hacking around them. If this is a legit bug, then the webdriver project should be made aware of it.
",jnicklas,2013-10-20 17:42:50
911,2013-03-06 12:16:59,"> The hack to work around ElementNotVisible is a hack to work around a Selenium bug, you can type into an empty content-editable div just fine, Selenium just thinks it's not visible. In practise it is visible and usable.

@JonRowe What browser are you testing this in?
",jarib,2013-10-20 17:42:50
911,2013-03-06 16:10:05,"@jarib I take that statement back; It's actually a hack to work around Firefox not displaying them. Chrome and Safari display blank `contenteditable` elements as being one line high. I guess I made the mistake of not actually checking the test view in Firefox manually. This could be removed and the test data given styling to make it a line high instead.
",JonRowe,2013-10-20 17:42:50
911,2013-03-10 21:42:10,"@jnicklas @jarib What can I do to get this merged? Do you want me to remove/refactor the stuff around blank elements? I'm convinced the focus stuff should stay, as it's a workaround for allowing in the background tests...
",JonRowe,2013-10-20 17:42:50
911,2013-03-16 01:13:15,"@JonRowe I want to wait with this a little. I am focusing on getting 2.1 out the door, and this will have to wait until after that.
",jnicklas,2013-10-20 17:42:50
911,2013-03-16 09:09:19,"@jnicklas Why don't you want to include it to 2.1 if it's already done? I'm talking about my PR too
",abotalov,2013-10-20 17:42:50
911,2013-03-16 10:04:10,"@abotalov I think I'll include your PR in 2.1, I want to review it thoroughly again before I merge it though, since it's a rather large change. I don't really feel comfortable with this one though. It's implemented in a quite hacky way, and I'm worried that it might be difficult for other driver authors. I don't see it as a super important feature, so I want to wait.
",jnicklas,2013-10-20 17:42:50
911,2013-03-16 10:14:44,"I'm fine with waiting until after 2.1, however I feel the focus of this pull request has been missed.

My primary intention was to introduce the test for javascript drivers to support `contenteditable`, the better JS drivers follow Capybara for test support and in order to get this change into them (ok into `poltergeist`) I need to get the spec into Capybara. 

I have to disagree with you over my implementation though, my method of implementing support in Selenium (to meet the base requirements of the project) is solely due to the ""quite hacky way"" Selenium works. If Selenium had real control of the browser/was a real browser, half my code wouldn't be required.
",JonRowe,2013-10-20 17:42:50
911,2013-03-16 17:08:17,"@JonRowe I see 3 main issues with this PR
1. The ElementNotVisible hack definitely shouldn't be there, since if the element isn't visible how would the user ever click the element to begin editing it?  A min-height in the div style so that it becomes visible and can then be clicked on fixes that.  
2. The focus hack really shouldn't be necessary since clicking on the element should bring it into focus and allow editing.  This may be something that needs a bug report over at selenium
3.  This doesn't at all take into account the nested nature of contenteditable, which I believe there is an issue with in selenium

I took your PR as a start and played around with it in my contenteditable branch at https://github.com/twalpole/capybara/tree/contenteditable .  One of the tests fails using both FF and Chrome, but for different reasons on each, and I think it may be an issue with selenium although I need to look into it further.  The other 4 contenteditable tests pass
",twalpole,2013-10-20 17:42:50
911,2013-03-16 23:40:25,"<S_CODE_TOKEN>

Agreed, this was originally thought necessary because Firefox renders these differently to Chrome and I wasn't aware of the reason why I was getting the exception (I thought it was a Selenium bug, it's not).

So I've removed this.

<S_CODE_TOKEN>

I don't believe this to be a bug in Selenium, this is what I believe is happening, FireFox treats focus events differently when the browser is in the background as opposed to in the foreground. So when Selenium simulates a click/focus event, if the browser is in the background (whilst your tests are running, quite plausible) the event's don't work as they are supposed to and you get a heisenbug. This is a work around to allow this particular behaviour (simulating typing into a contenteditable) to work consistently.

<S_CODE_TOKEN>

Agreed, it deliberately doesn't, what's the issue? The use case here is you find the **specfic** element you want to type into, then set that, elements content, so you shouldn't have issues with nested content?
",JonRowe,2013-10-20 17:42:50
911,2013-03-17 00:00:28,"@JonRowe  - Note these are purely my opinions and not those of @jnicklas and his decisions are the ones that count for this project 
2.  Yes firefox has issues with focus, and on some platforms setting focusmanager.testmode in the profile will fix this. Unfortunately setting that on linux causes some other issues, and therefore isn't defaulted on by selenium yet.  That being said I dont believe it is Capybaras job to work around the issue with a javascript hack, a click on the box should enough to select it and start editing, rather we should file bug reports upstream and hope/work to get them fixed.
3.  Read the spec on contenteditable. If we're going to add support to the test cases other drivers need to follow then we should meet the spec for the feature.  If a parent element is marked as contenteditable then its children become editable by default unless they specify contenteditable false.  What if a parent is content editable and I want to edit one of the children -- checking self[:contenteditable] doesnt work for that.    If you look at the branch in my repo you'll see that checking native.attribute('isContentEditable') does (docs for selenium seem to say it should be iscontenteditable but that doesnt work for FF or chrome).
",twalpole,2013-10-20 17:42:50
911,2013-03-17 00:09:40,"Ah I see, you mean if we wanted to edit a child of a parent `contenteditable` this wouldn't work because it doesn't have the `contenteditable` flag itself.
",JonRowe,2013-10-20 17:42:50
911,2013-03-17 01:35:58,"Here's WebDriver's check for contenteditable. As you can see `isContentEditable` has problems in IE: 

  https://github.com/SeleniumHQ/selenium/blob/89f1e91ce/javascript/atoms/dom.js#L382

I'm not too familiar with Capybara's design, but why the need to duplicate this check instead of just falling through to `native.send_keys` when the user calls `#set(value)`? The default behaviour if none of the conditionals in that method kicks in is to do nothing, which I think is rather confusing - both `send_keys` or an exception would be a better user experience AFAICT. 
",jarib,2013-10-20 17:42:50
911,2013-03-17 01:58:06,"@jarib because there's a need to click the element to initiate editing, and a need to clear the element to meet capybaras definition of set
",twalpole,2013-10-20 17:42:50
911,2013-03-22 03:40:20,"I changed this to select all text in an element, then type, removing the need for a manual clear. Still should work without focus. I also added a (pending) test for editing a nested element, but it doesn't seem to work properly. It selects the correct element but won't send the keys, I think that _is_ a selenium bug. Any suggestions?
",JonRowe,2013-10-20 17:42:50
911,2013-06-12 20:18:25,"I'd like to use that. What's the status here?
",jeromegn,2013-10-20 17:42:50
911,2013-06-12 23:30:47,"This works as outlined so you're welcome to use my branch or take over this PR, I haven't had much luck convincing @jnicklas that this is necessary and I have no intention of going and hacking on selenium code to fix the issues this works around downstream. I mostly wanted the test to be included into capybara so I could go and implement this in poltergeist as I don't use selenium in my normal work.
",JonRowe,2013-10-20 17:42:50
911,2013-08-03 17:42:51,"+1 for this feature.
",h3h,2013-10-20 17:42:50
911,2013-08-27 03:55:46,":thumbsup: for this feature as well. I'd like to be able to 'type' (fill in) WYSIWYG fields.
",jondkinney,2013-10-20 17:42:50
911,2013-08-30 07:02:11,"Thanks for this PR @JonRowe. It's a shame it hasn't been pulled.

I can't speak for every +1, but I don't need the gold plating, just a narrow slice of all possible environments to prove my UI interaction work well enough for me to check in code. I'll take that over months of crossed fingers and missed bugs any day. With your change, I know the UI at least works in my dev environment. Without the change I don't know it works anywhere.
",IamNaN,2013-10-20 17:42:50
911,2013-09-10 03:54:06,"+1 for this
",samccone,2013-10-20 17:42:50
911,2013-10-20 17:44:52,"Okay so you probably weren't expecting this, but better late than never. I just pulled this, it seems that focusmanager is now the default in Selenium, so this passes even without the browser having focus now, yay!

@JonRowe: I took the liberty of squashing your commits into one, with an appropriate commit message, hope that's okay. Since this is so old, I didn't want you to have to do the extra work.
",jnicklas,2013-10-20 17:42:50
911,2013-10-20 22:21:32,":) Thanks! As you say, better late than never :heart:
",JonRowe,2013-10-20 17:42:50
911,2013-10-21 00:19:52,"huzzah!
",samccone,2013-10-20 17:42:50
910,2012-12-14 15:33:43,"Hi everyone,

i am using capybara gem 2,0.1 and I am having problem adding cookies to current session.

The code giving me problem is the following:

<S_CODE_TOKEN>

It used to work before updating, not it is giving me this error

can't convert nil into String (typeError)

Any suggestion on how to fix this?

Thanks!
",emilianodellacasa,2012-12-26 15:16:00
910,2012-12-18 17:27:08,"Sorry, closing this issue as I solved it, don't ask me how! :-)
",emilianodellacasa,2012-12-26 15:16:00
910,2012-12-25 10:36:11,"@emilianodellacasa I don't use Racktest but I'd want to add cookie manipulation functions to Capybara. Can you tell if this way will work to set cookies in Racktest:

page.driver.browser.set_cookie('name=value')
",abotalov,2012-12-26 15:16:00
910,2012-12-25 12:03:08,"Actually I was wrong, this issue still exists using last Capybara gem 2.0.1

I solved by installing version 1.1.1.

@abotalov I have already tried your code, but it is giving me the same error.

I am going to post more information in a bit, in the meanwhile Merry Christmas to you all!
",emilianodellacasa,2012-12-26 15:16:00
910,2012-12-26 15:15:59,"You are reaching into `driver.browser` internals. That's not part of the public API, and it can change at any time. I'm not sure how to fix your problem, but the canonical answer is, use your app's sign-in form to log test users in and out, rather than prying into Capybara internals.
",joliss,2012-12-26 15:16:00
910,2012-12-27 13:50:14,"I perfectly understand and accept your answer, even though I would prefer to set the cookie to avoid the sign in process for every test.

Still, I feel capybara should have a working API for setting cookies.
",emilianodellacasa,2012-12-26 15:16:00
910,2012-12-31 13:58:48,"Hi,

You can try:

<pre>
stub_user_id = User.where(:email=>""joe@bloggs.com"").first.id
Capybara.current_session.driver.browser.set_cookie ""stub_user_id=#{stub_user_id}"", URI(your_host)
</pre>

It works for me
",alaibe,2012-12-26 15:16:00
910,2013-01-02 10:30:54,"With new Capybara version 2.0.2 everything is ok, so it was definitely a bug.

Thanks for your support though, I will start using proposed codes instead of messing with Capybara internals.
",emilianodellacasa,2012-12-26 15:16:00
910,2016-01-08 10:22:13,"despite the fact that `allow_any_instance_of` considered is most buggy feature of the RSpec,  it might have sense to prefer it over using internal Capybara API:

<S_CODE_TOKEN>
",lessless,2012-12-26 15:16:00
909,2012-12-13 16:24:31,"Original subject was: ""Ambiguous match between buttons and links""

At my page I have a link with text ""Sign In"" and a button with text ""Sign In"". 

When I invoke `click_button 'Sign In'`, I get:
`[omitted]/capybara-2.0.1/lib/capybara/result.rb:22:in `find!': Ambiguous match, found 2 elements matching button ""Sign In"" (Capybara::Ambiguous)`

But there is only one button with text ""Sign In"" so I think match isn't ambiguous.

If you still think that such match is ambiguous, maybe error message should be changed to:
`Ambiguous match, found 2 elements containing text ""Sign In""`
",abotalov,2013-02-16 07:34:51
909,2012-12-31 13:39:52,"I highly doubt that there is a bug within that code, it's extensively tested. Are you _sure_ there isn't a second ""Sign in"" button? If so, please provide a minimal executable code sample which replicates this bug.
",jnicklas,2013-02-16 07:34:51
909,2012-12-31 13:55:38,"Here it is:

<S_CODE_TOKEN>

AFAIK Capybara doesn't find invisible elements so why does it find them when clicking?

(I've changed issue subject)
",abotalov,2013-02-16 07:34:51
909,2013-01-10 20:42:57,"I'm also seeing the same issue as abotalov, when I update from 1.14 to 2.0.2 my tests fail with Ambiguous match when attempting to click_on a button that has the same text as a hidden button...
",inscore,2013-02-16 07:34:51
909,2013-01-31 15:55:38,":+1: same issue here
",swistaczek,2013-02-16 07:34:51
909,2013-02-16 03:29:20,"Could this be related to the behaviour of the `visible` option? For example:

<S_CODE_TOKEN>
",fredwu,2013-02-16 07:34:51
909,2013-02-16 07:34:51,"Yes, the default up until Capybara 2.0 is that Capybara will find invisible elements. We're changing that for Capybara 2.1.
",jnicklas,2013-02-16 07:34:51
908,2012-12-13 05:32:45,"I have a functioning feature spec.  I was trying to set a break-point with save_and_open_page and got the error below.  I don't have a unicode \xC2 in my application so I don't know where this is coming from.

Failure/Error: save_and_open_page
Encoding::UndefinedConversionError:
 ""\xC2"" from ASCII-8BIT to UTF-8

rails (3.2.9)
rspec (2.12.0)
capybara (2.0.1)
",mattmartini,2013-02-16 18:04:50
908,2012-12-26 16:16:02,"I'm not sure what's going on here, but could this be fixed by #912?
",joliss,2013-02-16 18:04:50
908,2012-12-26 16:16:50,"Try running against Capybara master in other words, and let us know if the error is still there.

Also, a full backtrace would be nice.
",joliss,2013-02-16 18:04:50
908,2013-02-16 18:04:50,"Should probably be fixed by either #912 or that improved regexp thing. I don't think we do any other encoding. Closing.
",jnicklas,2013-02-16 18:04:50
908,2013-12-09 15:38:40,"I still have this issue, with both selenium and webkit drivers:
- ruby: ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-linux]
- capybara: 2.2.0
- rspec-core: 2.14.7

Baktrace:

<S_CODE_TOKEN>
",waiting-for-dev,2013-02-16 18:04:50
908,2014-03-08 00:40:05,"@waiting-for-dev did you figure something out?
",fuadsaud,2013-02-16 18:04:50
908,2014-05-01 06:12:19,"@waiting-for-dev Any resolution on this?
",jadekler,2013-02-16 18:04:50
907,2012-12-11 22:46:01,"This backports commit 01cb16e from issue #776 into the 1.1_stable branch.
",mscottford,2012-12-26 16:47:03
907,2012-12-12 07:21:08,"The History file is only kept up to date on the master branch, it's too much hassle to merge it back and forth otherwise.
",jnicklas,2012-12-26 16:47:03
907,2012-12-12 13:22:14,"I'll remove the changes to it.
",mscottford,2012-12-26 16:47:03
907,2012-12-12 13:27:49,"I amended the commit and force pushed to keep the commit history clean.
",mscottford,2012-12-26 16:47:03
907,2012-12-26 16:19:07,"Seems reasonable. Jonas, want to merge?
",joliss,2012-12-26 16:47:03
906,2012-12-11 08:05:55,"Using the Rack::Test driver: When I ""visit '/foo/bar'"" and that action redirects to ""http://example.com?param=val"", Capybara 2.0 will change this redirect to ""http://example.com/foo?param=val"". 
Capybara 1.1(.2) did the expected thing and redirected to ""http://example.com/?param=val"".

Looking at the relevant code in Capybara::RackTest::Browser#process, if the redirect location is explicitly set to ""http://example.com/?param=val"" everything works as before. 

I don't know if this change was intentional - if not I'd request reverting to the old behaviour, or change the behaviour to ""if a hostname is present in the uri and path is empty, assume a path of '/'"", conforming to the priciple of least surprise and to what browsers do :).

Edit: This also happens when just redirecting to ""http://www.example.com""; Capybara will change this to http://www.example.com/foo.
",sriedel,2012-12-31 13:35:55
906,2012-12-11 10:40:59,"There actually is no expected thing in this case. According to the HTTP spec all redirects _must_ be to absolute paths. I know that browsers allow relative redirects, but using them is a violation of the HTTP spec and when you do it the behaviour is undefined. Capybara just happens to handle it differently than regular browsers. I'm not sure if it's the right thing to do for us to implement unspecified behaviour.
",jnicklas,2012-12-31 13:35:55
905,2012-12-10 20:32:41,"I'm trying to upgrade to 2.0 and I'm having trouble crafting a find that click on the show John Doe link in the following snippet 

<S_CODE_TOKEN>

I don't like adding class or ids for testing purposes but I added the ""show user"" and ""delete user"" classes to help capybara distinguish between the delete and show links.  BTW I think in this scenario capybara should know the difference between ""Delete John Doe"" and ""John Doe"" without resorting to adding classes or ids but I'll save that argument for another day.

I've tried the following expecting capybara to click the correct link but I keep getting  Capybara::Ambiguous errors.  Short of resorting to xpath matchers how do I click ""John Doe?""

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",jnimety,2012-12-11 10:35:00
905,2012-12-10 20:39:08,"just to be clear I would expect `within` and the first `find` to modify the subsequent dom search and not raise Capybara::Ambiguous unless the combined query was ambiguous.
",jnimety,2012-12-11 10:35:00
905,2012-12-11 08:44:04,"Have the same issue.
",FoboCasteR,2012-12-11 10:35:00
905,2012-12-11 10:34:57,"That's not how `within` works. By their very nature it is impossible to combine several xpath expressions into one. You find first one node, then another within that node. My suggestion would be to find an element which is unique somehow and scope onto that. For example: `find("".show.branch"", :text => ""John Doe"").click_on(""Show"")`.
",jnicklas,2012-12-11 10:35:00
905,2012-12-11 10:35:16,"Also, please ask questions on the mailing list in the future.
",jnicklas,2012-12-11 10:35:00
905,2012-12-11 15:35:17,"moved discussion to https://groups.google.com/forum/?fromgroups=#!topic/ruby-capybara/z3Oh2jGR46U
",jnimety,2012-12-11 10:35:00
904,2012-12-07 17:55:11,"Looking at `lib/capybara/rspec/matchers.rb`, I can't find any method to match page body regardless of HTML tags. For example, I'd like to do:

<S_CODE_TOKEN>

with `page.body = ""... This is <em>italic</em> ...""`.

Am I missing something?
",infertux,2013-02-22 22:02:57
904,2012-12-26 16:32:08,"I believe this should work in Capybara 2.0. Are you using 1.1?
",joliss,2013-02-22 22:02:57
904,2012-12-31 15:49:45,"IIRC, it used to work with 1.x and doesn't work since 2.0 - I'll investigate and follow up.
",infertux,2013-02-22 22:02:57
904,2013-02-06 17:54:49,"We've found that with capybara 2.0 have_content appears to smash tags together, where as 1.x would insert a space between html tags.
",noahc,2013-02-22 22:02:57
904,2013-02-16 10:07:16,"The behaviour is tested in our test suite. Can you substantiate these claims somehow?

https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/has_text_spec.rb#L24-L28
",jnicklas,2013-02-22 22:02:57
904,2013-02-18 10:33:10,"Sorry for the delay, after further digging it seems the problem is not about HTML tags but rather `page.body` being empty somehow.

Here's my failing test case:

<S_CODE_TOKEN>

Any thoughts?
",infertux,2013-02-22 22:02:57
904,2013-02-21 18:45:19,"I haven't used Capybara in a while, but can you try `page.text` or something? That's what has_content tests against I believe.
",joliss,2013-02-22 22:02:57
904,2013-02-21 19:14:17,"@joliss  Actually `has_content?` invokes text so it doesn't matter which one you use.
",abotalov,2013-02-22 22:02:57
904,2013-02-21 21:13:22,"`page.text` is an empty string whereas `page.body` returns the expected HTML. Any idea why `page.text` is being empty?
`page.body.have_content(""This is italic"")` does what I expect but it looks a bit hackish to me?
",infertux,2013-02-22 22:02:57
904,2013-02-21 21:26:42,"@infertux `page.text` simply invokes `find(:xpath, '/html').text`. implementation of text method is driver method. But I don't have an idea why it happens.

Could you post a reproduction case to e.g. gist.github.com so we can reproduce your problem?
",abotalov,2013-02-22 22:02:57
904,2013-02-22 22:02:57,"Alright that was silly: the text I'm looking for is in a div with `style=""display:none;""` and that div is shown once some JavaScript gets loaded. So I just told the fake Rack app to serve JS resources as well and tagged the scenario with `@javascript` and it works now. Looks like Capybara 1.x didn't care about node visibility. Thanks for all the pointers.
",infertux,2013-02-22 22:02:57
903,2012-12-05 23:10:03,"When using a count parameter with a HaveSelector, such as the following:

<S_CODE_TOKEN>

We get an unhelpful, if not incorrect, error message in response, and can slow down debugging. Ideally it should print out the actual vs expected number of occurrences of the element, instead of reporting that  it could find none.
",gabetax,2012-12-06 07:05:59
903,2012-12-06 07:05:59,"This has been fixed already.
",jnicklas,2012-12-06 07:05:59
903,2012-12-06 15:17:49,"Well, I feel like a dick :flushed: -- Thanks Jonas
",gabetax,2012-12-06 07:05:59
902,2012-12-05 18:50:25,"Fixes ""incompatible character encoding"" error when running Capybara on JRuby platforms.
",heypiotr,2012-12-05 19:16:58
902,2012-12-05 18:55:36,"The original report is here: #900.
",heypiotr,2012-12-05 19:16:58
902,2012-12-05 19:16:53,"Thanks!
",joliss,2012-12-05 19:16:58
902,2012-12-05 22:14:54,"Do you guy know _why_ this is needed? Makes me a bit uneasy to randomly add encoding headers when we don't know why we would need to. I'm guessing it's due to the regexp. Did we ever try using `[[:space:]]` in the regexp?
",jnicklas,2012-12-05 19:16:58
902,2012-12-05 22:15:52,"Or possibly `\p{Z}`?
",jnicklas,2012-12-05 19:16:58
902,2012-12-06 08:57:44,"@jnicklas Yes, it's surely the regexp, take a look at the stack trace: https://gist.github.com/4193752

Now, I'm still a bit puzzled why the encoding header is needed there, since there are no actual unicode characters in the file - only /u codes. Might be just as well a bug in JRuby.

I'll check this later with JRuby 1.6 and might also raise this on the JRuby bug tracker.
",heypiotr,2012-12-05 19:16:58
902,2012-12-17 16:55:55,"Any news here?
",dmtroyer,2012-12-05 19:16:58
902,2012-12-21 08:15:03,"Just tested with JRuby 1.6.8 (running in Ruby 1.9 mode) and Capybara 2.0.1, the issue also manifests itself with such a configuration.

Also decided to give 1.7.1 a try, since it's out, but same story.
",heypiotr,2012-12-05 19:16:58
902,2012-12-21 09:57:13,"JRuby bug report here: http://jira.codehaus.org/browse/JRUBY-7040
",heypiotr,2012-12-05 19:16:58
901,2012-12-05 10:33:25,"Migration to 2.0.1 from 1.1.4 went fine, except for one thing: I need to mimic the client URL for some of my tests. In 1.1.4 I could simply do:

<S_CODE_TOKEN>

That way the @request.host would neatly give me ""www.test.com"" on the server side.

With 2.0.1, however, the ""Capybara.app_host = URL"" actually visits the URL. So in the example above, the browser navigates to www.test.com upon assignment. 

Is this intended behavior? If so, what is the 2.X way of mimicking the client URL?
",plindelauf,2012-12-31 13:37:34
901,2012-12-10 12:42:21,"In addition I found that when running Cucumber in @javascript mode, the request.host = ""127.0.0.1"" and in non-javascript mode it is ""www.example.com"". This seems to be related...
",plindelauf,2012-12-31 13:37:34
901,2012-12-31 13:37:34,"There is no change to this behaviour as far as I'm aware. My guess is that you switched away from rack-test. Selenium for example will happily visit any URL you give it. It's just a regular browser after all.
",jnicklas,2012-12-31 13:37:34
900,2012-12-03 09:15:44,"When running RSpec tests with Capybara on JRuby  1.7.0, `expect(page).to have_content(...)` sometimes fails with SyntaxError: (RegexpError) incompatible character encoding. By ""sometimes"" I mean it seems to be consistent between runs, but not all of those expects are failing.

Here comes the full stacktrace:
https://gist.github.com/4193752

Adding `# encoding: UTF-8` at the top of lib/capybara/helpers.rb solved the issue for me. Not sure if this is the way to go, or if the underlying cause is different though.

I wasn't able to reproduce this issue with MRI Ruby 1.9.3-p327. I was able to reproduce it with jruby-head.
",heypiotr,2012-12-05 19:17:53
900,2012-12-03 16:27:19,"Interesting. Adding the `# encoding` comment sounds reasonable. Want to add it, and if you're sure that it solves the problem, send a pull request?
",joliss,2012-12-05 19:17:53
900,2012-12-05 02:06:59,"I can confirm issue on JRuby 1.7 when trying to upgrade to Capybara 2.

I can also confirm that the suggested fix worked locally.
",avinmathew,2012-12-05 19:17:53
900,2012-12-05 19:00:02,"Thanks for your confirmation @avinmathew.

@joliss I've created a pull request #902. We're using this solution in our project for a week a now, and it does solve the problem for us.

If there's anything else I can do, I'll be happy to help.
",heypiotr,2012-12-05 19:17:53
900,2012-12-05 19:18:06,"Sweet, thanks for fixing!
",joliss,2012-12-05 19:17:53
900,2012-12-05 21:21:49,"Thanks @kdotme. This has been plaguing me for some time.
",dmtroyer,2012-12-05 19:17:53
899,2012-12-03 01:53:43,"Because the current_host is now being explicitly set to the host instead
of the full URI (as it was in Capybara 1.x) when URI.parse is being used
the result will always be `nil` when parsing the host from an incomplete
URI.
",bcardarella,2012-12-03 09:41:24
899,2012-12-03 01:54:36,"This is a bug that is causing issues as the `default_host` for the mock session object is nil and thus the `default_host` for the `CookieJar` is also set to nil.
",bcardarella,2012-12-03 09:41:24
899,2012-12-03 15:22:04,"Woot!
",bcardarella,2012-12-03 09:41:24
898,2012-12-02 19:43:23,"discussion is here #844
",nashby,2013-02-16 09:03:38
898,2012-12-03 09:43:39,"I would rather have there be a `#title` method which would be similar to `#text`. I think at least Selenium supports getting the page title from the browser, not from the DOM. That seems like a better solution.
",jnicklas,2013-02-16 09:03:38
898,2012-12-03 10:04:51,"and this method should be there? https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/document.rb
",nashby,2013-02-16 09:03:38
898,2012-12-03 10:15:27,"Yes, that seems sensible! Thanks for putting in this work!
",jnicklas,2013-02-16 09:03:38
898,2012-12-03 17:06:38,"@jnicklas could you please guide me a bit what should I do after adding `title` method to `Capybara::Document`? :sweat: 
",nashby,2013-02-16 09:03:38
898,2013-01-20 19:13:13,"@jnicklas, whats wrong with @nashby sollution? could you explaine please? This has_title? matcher is simply necessary. 
",molfar,2013-02-16 09:03:38
898,2013-02-16 09:03:38,"I picked some parts of this pull request and added more comprehensive support for has_title?. I didn't manage to maintain attribution, hope that's okay.
",jnicklas,2013-02-16 09:03:38
897,2012-12-02 06:39:04,"Those changes suppresses warnings that are found by the following command:

<S_CODE_TOKEN>

Here is a list of suppressed warnings:

<S_CODE_TOKEN>
",kou,2012-12-02 14:49:03
897,2012-12-02 14:48:57,"Thanks!

(Not to worry about the failing Travis build - it's an unrelated issue that we still need to track down.)
",joliss,2012-12-02 14:49:03
896,2012-12-01 20:51:17,"Ht there, 
How can I put Bacon + Capybara to work together in a Sinatra app?
",uchoaaa,2012-12-02 00:03:04
896,2012-12-01 20:54:41,"Did you read the readme?  You're not going to get an answer unless you post on the mailing list
",twalpole,2012-12-02 00:03:04
896,2012-12-02 00:03:01,"Yes, sure, I read. 
I will post it on mailing list then.
Thanks anyway
",uchoaaa,2012-12-02 00:03:04
895,2012-11-29 16:32:52,"Perhaps there is already a way to do this, but I find a need to be able to call a common function that searches for something at the <body> level of the page, but its getting called in some places within a lower level scope.  So I'd like to see something like:

page.find('#blah', :ignore_scope=>true)

Is there a way to do this currently?  If not, can this be a feature request?
",DaveSanders,2012-11-29 18:55:40
895,2012-11-29 18:44:00,"FWIW, I can do this in my spec_helper:

  config.before(:each, :type => :request) do
     @page_body = page.find('body')
  end

and have access to the page's body scope from everywhere.  But it feels sort of ""dirty.""
",DaveSanders,2012-11-29 18:55:40
895,2012-11-29 18:53:45,"From a quick glance at the source, I believe page.document.find('#blah') would do what you want (havent tried it though)
",twalpole,2012-11-29 18:55:40
895,2012-11-29 18:55:40,"Hmm, ok, I think you are right.  I'll give that a try and reopen if needed.  Might still be desirable at some point to add a scope option to a find, in case you need to look elsewhere.  Again, don't know - might be overcomplicating it.

Thanks!
",DaveSanders,2012-11-29 18:55:40
894,2012-11-28 21:29:47,"When using `Model.find_by_id` in a Sinatra app, I get Capybara::Element not found error. 

Apparently Capybara is overwriting the ActiveRecord method.

Removing Capybara from the app makes `Model.find_by_id` work as expected.
",georgeu2000,2012-11-30 10:21:19
894,2012-11-28 22:00:01,"You included Capybara in the global namespace, didn't you? Do not do that. It's such a bad idea, we've even added code to Capybara to discourage people from doing this. https://github.com/jnicklas/capybara/blob/master/lib/capybara/dsl.rb#L5-L13
",jnicklas,2012-11-30 10:21:19
894,2012-11-30 10:21:19,"Closing this because I'm 101% sure there is no other way to cause such an issue.
",jnicklas,2012-11-30 10:21:19
893,2012-11-28 19:20:05,"minor inconvenience only, noticed when I upgraded to capybara 2.0 today

save_and_open_page used to always default encoding to UTF-8, and now it shows up in Western/ISO-8859. 

(I'm developing a chinese web app.... it is easy enough to change encoding in browser, just a touch inconvenient only)
",twairball,2012-11-30 10:22:58
893,2012-11-29 00:15:55,"Are you sure this changed with the upgrade to Capybara 2.0? I'm not aware of any change that might affect this.

In general, declaring the UTF-8 encoding in the HTML layout (using meta charset) should do the trick. I'm not sure if there's anything we can do in Capybara to force the correct encoding, short of inserting a meta tag into the HTML using some nasty regex.
",joliss,2012-11-30 10:22:58
893,2012-11-30 10:23:23,"As Jo mentioned, just add a meta tag to your page. You should do that anyway.
",jnicklas,2012-11-30 10:22:58
892,2012-11-28 06:49:42,"Timecop has moved, it's official home is now https://github.com/travisjeffery/timecop
",jamie,2012-11-28 12:51:10
892,2012-11-28 12:51:08,"Thanks!
",joliss,2012-11-28 12:51:10
891,2012-11-27 23:55:55,"A common pattern in forms is to have a label tag with a 'for' attribute set to the id of the form element the label relates to, but after updating to the latest capybara I'm seeing ambiguous matches because of this.

For instance:
`<label for='foo'>Foo: </label><input id='foo'></input>`
The issue is that if I do
`fill_in :foo, :with => 'bar'` I get Ambiguous match, found 2 elements matching field :foo
",DanielHeath,2012-11-30 10:24:29
891,2012-11-28 01:39:03,"The example you've posted works fine for me, I would guess you actually have another input with a label containing the substring ""foo"".  You might want to read the release announcement about how 2.0 is not backwards compatible: https://groups.google.com/forum/#!topic/ruby-capybara/C0O7nP2YG1A
",twalpole,2012-11-30 10:24:29
891,2012-11-28 08:25:08,"Fair enough (don't see it in the dom but presumably it's in there).
Would be good to get some information about the nodes that were found in the case of an ambiguous match.

More generally - would it make sense to say that when there is an ambiguous match and one is an exact text match (or DOM ID match) while the other is a partial text match, the exact match should be used?
",DanielHeath,2012-11-30 10:24:29
891,2012-11-28 08:53:56,"@DanielHeath this is the behaviour we had in Capybara 1.x, and it caused all kinds of problems. I can't count the number of times I've debugged issues for possibly hours where Capybara was clicking on the wrong element. The new behaviour is maybe a bit strict at times, but it is a lot safer. The idea of an _exact_ match is also a bit suboptimal, what if the match is only _almost_ exact. It could be off by just punctuation. Computing an exactness factor or something like that isn't really feasible, so again, subtle bugs will bite you.

I agree that we need better error messages though. We've already spent a lot of time improving them, but there is more left to do.
",jnicklas,2012-11-30 10:24:29
890,2012-11-27 20:43:34,"Not sure if this is a bug or intended behavior.

It says in the docs that `has_content?` ""ignores any HTML tags"", but I am seeing that `text-transform=uppercase` CSS rules now make `has_content?` return false when compared with the text in the HTML.

I assume this is a side-effect of `has_content?` relying on Element#text rather than querying the DOM as is noted in the History file, but just wanted to make sure this was intentional.
",zephyr-dev,2012-11-30 10:27:36
890,2012-11-30 10:27:33,"We are aware of this change in behaviour yes, so I guess you could say it was intentional. Not in the sense that we _wanted_ it to be like this but more in the sense that this is the way Selenium behaves and there isn't much we can do about that.

Also the fact that it ""ignores any HTML tags"" is correct, it doesn't say anything about CSS.
",jnicklas,2012-11-30 10:27:36
890,2013-05-06 20:35:06,"Well this does suck, but here's my blunt workaround that might be useful for others: (not upcasing all the bloody specs, but rather...)

in .../layouts/....html.haml:

<S_CODE_TOKEN>

in .../test.css.sass:

<S_CODE_TOKEN>
",costa,2012-11-30 10:27:36
889,2012-11-27 12:59:52,"hi there. I don't understand the point of raising Capybara::Ambiguous when I do page.find(smth) with result > 1. Previously, e.g. in v 1.x.x of capybara, it hadn't act like that. I mean if I want more than one/first result, I will use `all' method instead.
",intale,2012-11-28 08:28:10
889,2012-11-27 13:03:41,"I am just saying that it will be good idea to separate `find' and `find!' methods or, at least, add option :raise => false for `find' or, raise by default if result > 1 and with some option call `first' method
",intale,2012-11-28 08:28:10
889,2012-11-27 16:46:53,"Does using the `first` method instead of `find` solve your problem?
",joliss,2012-11-28 08:28:10
889,2012-11-27 16:47:21,"(Documentation: http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Node/Finders#first-instance_method)
",joliss,2012-11-28 08:28:10
889,2012-11-28 08:28:57,"to be honest, I noticed `first' method only yestarday(I was using `find' everywhere before)
",intale,2012-11-28 08:28:10
888,2012-11-27 05:36:36,"Normally, `==` method doesn't raise any exception if passed object isn't equal object.
It's better that `Capybara::Node::Matchers` follows the convention.
",kou,2012-11-30 10:19:47
888,2012-11-27 07:33:17,"The spec is in the wrong place, it should be here: https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/node_spec.rb#L111-L117
",jnicklas,2012-11-30 10:19:47
888,2012-11-27 07:50:13,"OK. I've moved the spec.
",kou,2012-11-30 10:19:47
887,2012-11-25 23:03:47,"I've been sleuthing how simple rails projects with only a few explicit dependencies end up including many others (transitively) that in some cases aren't being used at all. This bloat is fuel for rails critics and wastes cycles each time Bundle.require is invoked.

We have been using capybara for years on possibly as many as 20 projects, and as far as I know we haven't used it with a selenium driver for at least 2 years. I have to believe we're not the only ones who always pair capybara with something else (e.g. headless-webkit or poltergeist). However, we end up dragging selenium-webkit (and libwebsocket, websocket, and rubyzip) along with us on every project.

Would you consider removing the dependency on selenium-webdriver and leaving that to the user to include, since they know which driver they want to use? Including rack-test provides an out of the box experience (without js support). I can imagine capybara throwing a warning/error if js is required and no driver is set.

If you think this is a bad idea, I would love to understand why. Thanks!
",christiannelson,2013-02-24 17:54:48
887,2012-11-26 21:59:37,"+1
",abotalov,2013-02-24 17:54:48
887,2012-11-29 12:44:11,"I came here to raise the same proposal for removal of the selenium-webdriver dependency, I've only ever used capybara-webkit on projects. :+1: 
",Odaeus,2013-02-24 17:54:48
887,2012-11-30 10:32:32,"This has come up before. I'm not against the idea, but in that case I'd rather split the selenium driver off into its own gem. But then everything becomes a lot more complicated. We would have something like capybara-core and then a capybara metagem, kind of like RSpec (though I don't like the fact that they split their gems into separate repos). I've tried to do this at some point and it's a lot of work. If anyone feels up to the challenge, then please go ahead.

I would however like that the following conditions are met:
1. One single repo
2. It must be just as easy to run the tests
3. It should not be significantly more difficult to build and distribute the gems
4. The `capybara` gem must still depend on selenium webdriver, so that we can provide an optinal out-of-the-box experience
",jnicklas,2013-02-24 17:54:48
887,2013-02-15 03:19:38,"> But then everything becomes a lot more complicated.

Why it's complicated? It's simple to add a line to Gemfile. Just mention it in README.
",wildchild,2013-02-24 17:54:48
887,2013-02-15 04:45:56,"The reason I haven't taken a stab at this is because I felt it does get more complicated given the requirements given by @jnicklas. I see where he's coming from, but have a preference for a different solution. This baby belongs to @jnicklas, so he gets to set the rules. :)

Using bundler as an example, I rather like how it handles the `bundle viz` command. It detects if the necessary gem is available and uses it if it is, or displays a message if it is not. The conditional code around whether selenium-web is available or not is easy to write, simple to understand, and pretty standard practice for ruby gems.

When someone upgrades to the new capybara-without-selenium-web, who is using selenium-web, they see a message to include one line in their Gemfile. Once done, they never think about it again. If they're not using selenium-web, then they would already have the driver they depend on in the Gemfile.

This approach would meet all requirements but 4.
",christiannelson,2013-02-24 17:54:48
887,2013-02-21 14:37:03,"Solution provided by @christiannelson looks perfect. Separate gem that connects capybara and selenium-webdriver.
Something like `sass-rails` for Sass and Rails
",morgoth,2013-02-24 17:54:48
887,2013-02-21 18:12:10,"@morgoth I think you're describing @jnicklas's solution, not mine. My recommendation does not introduce a new gem.

Ultimately, either solution would be lovely and meet the goal of not dragging in gems you don't need.
",christiannelson,2013-02-24 17:54:48
887,2013-02-22 17:17:53,"@christiannelson right, sorry for confusion.
@jnicklas Which solution would you accept?
- Separate gem (something like sass-rails)
- Wrapper for selenium still in capybara, but without requirement in gemspec also with displaying info to add selenium-webdriver when used

Both solutions require adding gem to Gemfile from user manually (capybara-selenium-webdriver or selenium-webdriver).
Solution with capybara-core and meta gem doesn't look friendly for user.
",morgoth,2013-02-24 17:54:48
887,2013-02-22 19:17:39,"I'm leaning towards the second solution, personally. Maybe make rack-test optional as well. Everyone who uses Rails has it in their Gemfile implicitly anyway, since Rails depends on it.
",jnicklas,2013-02-24 17:54:48
887,2013-02-22 19:18:07,"It's about time we stop depending on selenium-webdriver. Let's do it for Capybara 2.1.
",jnicklas,2013-02-24 17:54:48
887,2013-03-18 03:26:02,"Should it be removed from https://github.com/jnicklas/capybara/blob/master/lib/capybara.rb#L321 as well? Without selenium-webdriver in my Gemfile, I get the error just loading capybara.
",jgarber,2013-02-24 17:54:48
887,2013-03-18 08:06:22,"I think this commit is responsible for that: https://github.com/jnicklas/capybara/commit/c3e75f8988f640d3587bffbc48ead011ef2665d3
/cc @jnicklas 
",morgoth,2013-02-24 17:54:48
887,2013-03-19 19:42:38,"At the risk of piling on, I'm seeing that same issue, had to put `gem 'selenium-webdriver'` in my Gemfile too although I don't use it. 

Here's the error:

<S_CODE_TOKEN>
",olivierlacan,2013-02-24 17:54:48
887,2013-03-19 19:46:52,"My bad, this has been fixed in #1018.
",olivierlacan,2013-02-24 17:54:48
887,2013-03-27 14:58:02,"is this fix included in any version? 
",phoet,2013-02-24 17:54:48
887,2013-03-27 22:18:29,"@phoet it'll be in 2.1 which isn't released yet. It'll be released in a couple of weeks at most.
",jnicklas,2013-02-24 17:54:48
887,2013-03-28 06:58:20,":+1: i tried upgrading from 1.x but skiped that because i did not find a compatible version of capybara and capybara-webkit that did not break all of our spec...
",phoet,2013-02-24 17:54:48
887,2013-07-05 11:04:00,"I'm seeing the same error as @olivierlacan, even though I'm running 2.1.

The error only occurs on the first test in each file, when a spec file is run separately. When running the whole suite, there is no problem. Anyone have an idea what might be going on here?
",rogerkk,2013-02-24 17:54:48
887,2013-07-05 11:33:08,"@rogerkk maybe you're not running this particular spec through bundler, or something? The error that @olivierlacan was having has been fixed, so something else is probably going on. Make sure that selenium webdriver is actually installed and in the load path.
",jnicklas,2013-02-24 17:54:48
887,2013-07-05 12:04:40,"@jnicklas Thanks for pitching in! I suspect this discussion really belongs somewhere else, but:

I'm definitely running it using bundler, but I'm also trying to avoid using selenium. Thus had removed selenium-webdriver from my Gemfile, included capybara-webkit, and put ""Capybara.javascript_driver = :webkit"" in the before block of my spec_helper.rb.

I just seem to have resolved the problem by moving the ""Capybara.javascript_driver = :webkit"" out of the before block. I obviously don't know what I'm doing. ;)
",rogerkk,2013-02-24 17:54:48
887,2013-07-05 12:09:04,"@rogerkk alright, yeah, you probably want to configure that globally, since it's a global setting, unlike `Capybara.current_driver` which should be local to one particular spec. The order that before blocks run in can be a bit confusing, so the change to webkit was probably triggering too late.
",jnicklas,2013-02-24 17:54:48
887,2013-07-05 12:26:05,"@jnicklas Aha, I see. Thanks for clearing that up!
",rogerkk,2013-02-24 17:54:48
886,2012-11-25 03:59:06,"What do folks think of _something_ like this, to make capybara a bit more friendly to `Test::Unit`:
https://gist.github.com/4142336

If I missed something obvious that makes this redundant, I will not be surprised :)
",mkdynamic,2012-11-25 15:44:15
886,2012-11-25 15:44:15,"Actually, since 2.0, the Capybara DSL includes `assert_selector` and `assert_no_selector`. You can just wrap those ones for any others that you need. I don't think we'll likely include those in Capybara itself though.
",jnicklas,2012-11-25 15:44:15
885,2012-11-23 17:07:50,"Hi, I try to use save_and_open_page, but I got this error:
 cannot load such file -- capybara/util/save_and_open_page (LoadError)

And I don't see the folder ""util"" in your code, so I wonder know what I did wrong 
",dinatih,2012-11-23 17:11:02
885,2012-11-27 16:40:07,"For anyone interested, the new location is lib/capybara/session.rb
",tayloredwebsites,2012-11-23 17:11:02
885,2012-11-28 09:04:59,"thanks
",dinatih,2012-11-23 17:11:02
885,2012-11-28 09:43:00,"Just FYI, there is no need to require that file manually, it is required when you do `require ""capybara""`.
",jnicklas,2012-11-23 17:11:02
884,2012-11-22 14:36:13,,jnicklas,2012-11-28 20:09:47
883,2012-11-21 20:39:16,,mhoran,2012-11-29 01:54:02
883,2012-11-21 22:12:21,"We should probably do that here: https://github.com/mhoran/capybara/blob/62d036a102d2df27ab63cc98bbd4fb1c08075431/lib/capybara/spec/spec_helper.rb#L23, I think.
",jnicklas,2012-11-29 01:54:02
883,2012-11-21 22:44:22,"Looks like a spurious failure.  Once this is merged, capybara-webkit 2.0 will be green.
",mhoran,2012-11-29 01:54:02
883,2012-11-22 14:36:33,"Actually IIRC, that's not how `around` filters work in RSpec. `example.run` will never throw an exception. Also, after filters are always run, even if the spec fails. I think that resetting it in a before filter is actually the best option though, and consistent with how we do that for `app`. Can you try #884 and see if that works for you?
",jnicklas,2012-11-29 01:54:02
883,2012-11-22 15:10:43,"The problem we're experiencing is when the Capybara integration suite sets `app_host` and then one of our specs runs, we get a failure.  Changing this to `before` would fix this so long as the last integration test to run doesn't set `app_host`. It seems more correct to cleanup in `after`, though.

We need to set up app in `before`, else the first test won't run.  We run it in every `before`, since it could get modified.  However, `app_host` will only get modified in a test, so it makes sense to reset it in an `after` block.
",mhoran,2012-11-29 01:54:02
883,2012-11-22 15:12:27,"FWIW, this is the way we used to handle cleanup in our suite before 2.0.
",mhoran,2012-11-29 01:54:02
883,2012-11-22 21:29:36,"Just so you understand the situation, here is the spec file that introduces failures in our test suite: http://git.io/WtQMYA.  Our spec run list expands to

<S_CODE_TOKEN>

If we don't clean up `app_host` in the Capybara spec helper, then any test that runs after it will have the incorrect `app_host`.  Of course, we could add to our own spec helper to reset app_host in a `before` block, but that doesn't seem like the right thing to do.
",mhoran,2012-11-29 01:54:02
883,2012-11-28 18:56:40,"@jnicklas, thoughts?  I've confirmed that an `after` block will work even if an exception is raised.  `before` won't work if we focus on a test within the Capybara suite which sets Capybara.app_host followed by a test in our own suite.
",mhoran,2012-11-29 01:54:02
883,2012-11-28 20:13:22,"I just pushed out c65a61c6a5f91c92c474056e03c69b74e6654cd1 which resets both before _and_ after, maybe a bit overkill, but that way at least we're sure. Also note that I moved the actual RSpec config to `spec/spec_helper`, that way driver authors are free to choose if they want the standard configuration or something else.
",jnicklas,2012-11-29 01:54:02
883,2012-11-28 23:21:24,"@jnicklas, c65a61c works great, thanks.  Once this is released, we'll be ready to push capybara-webkit 2.0.
",mhoran,2012-11-29 01:54:02
883,2012-11-28 23:35:53,"Very cool. I'll try to push out a release ASAP.
",jnicklas,2012-11-29 01:54:02
883,2012-12-31 13:55:13,"Sorry for the delay, just pushed out Capybara 2.0.2, let me know if you need anything else.
",jnicklas,2012-11-29 01:54:02
883,2013-01-04 04:00:08,"Thanks, we released capybara-webkit 0.14.0 today and things are working great!
",mhoran,2012-11-29 01:54:02
882,2012-11-21 16:51:07,"When I invoke `rake g rspec:install` this error occurs (some cruft removed for brevity):

<S_CODE_TOKEN>

With version 2.0.0 there isn't a problem. Might be related to #880?

Found this while working on my rail app generator, [raygun](https://github.com/carbonfive/raygun). ~~Follow the instructions in the readme to reproduce.~~(yanked the broken gem)
",christiannelson,2013-02-16 18:07:19
882,2012-11-21 18:19:11,"Had the same problem here with our rails app (using Konacha). Looking at the Gemfile.lock, it looks like the dependencies aren't getting added correctly...?

Relevant portion of Gemfile.lock:

<S_CODE_TOKEN>

UPDATE:
Did a second bundle update and it magically fixed itself. 

I've noticed some wonky bundler activity lately. A quick look at the bundler issues didn't show anything, but there are 350+ issues there and I don't have the time to mess with it right now.
",walkeriniraq,2013-02-16 18:07:19
882,2012-11-21 18:59:53,"The second `bundle install` fixes the issue for me as well.

Really strange that v2.0.0 works fine and v2.0.1 doesn't though.
",christiannelson,2013-02-16 18:07:19
882,2012-11-21 22:09:28,"I just double checked everything that could be wrong. I downloaded the gem files for 2.0.0 and 2.0.1 and manually unpacked them and compared them, they look identical. I went through the entire diff between 2.0.0 and 2.0.1, nothing which impacts the gem build process at all. I'm fairly convinced that this doesn't have anything to do with the 2.0.1 gem.
",jnicklas,2013-02-16 18:07:19
882,2012-11-22 00:05:10,"Can confirm the “bug” and the “fix”.

Everything looks fine https://github.com/jnicklas/capybara/compare/2.0.0...2.0.1, must be a bundler problem.
",mkempe,2013-02-16 18:07:19
882,2012-11-22 01:46:26,"I've been having the same problem.  2.0.1 keeps raising nokogiri errors even after I ran bundle install multiple times.  I finally just switched to 2.0.0 and that seems to work fine.    
",kerrieyee,2013-02-16 18:07:19
882,2012-11-22 03:09:23,"FWIW, I did a manual bisect and https://github.com/jnicklas/capybara/commit/d21d6ddd8aeda7d4d2e959f151c65ef1cf02f22 is the culprit. Looks like it's not capybara, but possibly something in xpath.

I guess it could be a rubygems or bundler issue too.
",christiannelson,2013-02-16 18:07:19
882,2012-11-22 07:58:42,"@christiannelson are you sure? It seems very strange that a git submodule would affect the gem. It isn't even part of the gem package.
",jnicklas,2013-02-16 18:07:19
882,2012-11-22 08:17:49,"@jnicklas You're right... I botched my bisect.

v2.0.1 results in this issue consistently and older versions don't. I'm going through all of the changes between 2.0.0 and 2.0.1 now to see what commit really causes the issue to surface.
",christiannelson,2013-02-16 18:07:19
882,2012-11-22 08:32:39,"@jnicklas Interesting. Using ref: '537fd691a8d6045dcf44aff22c880c609fcb6ece' in my Gemfile works but '2.0.1' does not. That suggests that the gem is either bunk (which you already checked), rubygems isn't producing correct dependency data for bundler (not sure if this totally makes sense) or there's a legit bug in bundler.

Thanks for looking into it and sorry for the goose chase.
",christiannelson,2013-02-16 18:07:19
882,2012-11-22 08:47:47,"No worries, you don't seem to be the only one having this issue. It's very strange, I did everything exactly like I always do, and I've never had a problem. It sounds to me like maybe rubygems or bundler messed up somehow. Maybe the dependency API is not returning the correct result for the gem. Since I still can't replicate it myself, I don't really know how to proceed though.
",jnicklas,2013-02-16 18:07:19
882,2012-11-22 17:11:28,"I pushed on this a little harder out of curiosity. I tried reproducing the error outside of raygun, since raygun is a bit of an oddity and has a lot going on. To my surprise it happened with a straight up rails app. Here's my console output:

https://gist.github.com/4132139

Thinking maybe something is up with my machine's configuration, I spun up an ubuntu vm and followed the same steps. The error came up there as well.

My guess is rubygems is coming back with incomplete dependency information. I might try to confirm that later after our holiday festivities.
",christiannelson,2013-02-16 18:07:19
882,2012-11-22 17:21:52,"I'm also having this issue with capybara 2.0.1 with dependencies not added. Pointing my Gemfile to github fix the dependency issue.
",fabn,2013-02-16 18:07:19
882,2012-11-23 16:59:26,"- 1 Can confirm the “bug” and the “fix” (double ""bundle update"")

This is strange. In my case, the missing dependency was xpath.
",danigb,2013-02-16 18:07:19
882,2012-11-24 09:16:39,"I had a case of missing xpath, specific error `Gem::LoadError: Could not find xpath (~> 1.0.0) amongst ...`
Then I removed the gem and installed again, now I have the missing nokogiri issue :(

<S_CODE_TOKEN>

Here is my bundle list:

<S_CODE_TOKEN>

The fix for me was to `bundle update capybara` twice.
",mattheworiordan,2013-02-16 18:07:19
882,2012-11-25 00:37:21,"I just had the same problem a brand new rails app, just ran `bundle update capybara` and that installed nokogiri. 
Here is my gist of what I did:
https://gist.github.com/4141934

I'm assuming it has something to do with the way bundler loads the dependencies.
",mattsmith,2013-02-16 18:07:19
882,2012-11-25 18:08:46,"+1 double `bundle update capybara` solution.
",colvint,2013-02-16 18:07:19
882,2012-11-26 10:08:12,"running `bundle update capybara` once fixed it for me. Interesting to note, I already had nokogiri installed but the update installed other gems that seemingly should have been installed during the initial `bundle install`.

<S_CODE_TOKEN>

Something is definitely messed up with dependencies.
",emkman,2013-02-16 18:07:19
882,2012-11-27 09:57:42,"If it helps, pretty sure this was happening to me when I posted this on Stack Overflow http://stackoverflow.com/questions/13502511/rake-no-such-file-to-load-xpath
",michrome,2013-02-16 18:07:19
882,2012-11-27 16:24:30,"And this too: https://github.com/netzpirat/guard-jasmine/issues/90#issuecomment-10644208
",christiannelson,2013-02-16 18:07:19
882,2013-02-16 18:07:19,"Seems like this problem has been solved with Capybara 2.0.2. I still have no idea what caused it, but I'm sure it wasn't anything inside Capybara. Closing this down.
",jnicklas,2013-02-16 18:07:19
881,2012-11-21 15:51:45,"I'm using `capybara (2.0.1)` and I'm getting this issue whenever I write an expectation such as: 

<S_CODE_TOKEN>

However, everything works if I rewrite this to:

<S_CODE_TOKEN>

I'm not sure if this is the intended functionality or if I've misunderstood the new changes.
",tonydaly,2012-11-21 16:06:16
881,2012-11-21 16:06:15,"Sounds like you have multiple HTML tags on your page. As far as I know that's not allowed by the HTML spec. See: http://dev.w3.org/html5/spec/single-page.html#the-html-element
",jnicklas,2012-11-21 16:06:16
881,2012-11-21 16:32:59,"Done some more debugging on the issue. Did a sanity check and there aren't multiple HTML tags on the page, but it seems like having a doctype of `<!DOCTYPE html>` is causing the issue. After removing the doctype everything passes.
",tonydaly,2012-11-21 16:06:16
881,2012-11-21 16:39:21,"@tonydaly that should not affect anything.

<S_CODE_TOKEN>
",jnicklas,2012-11-21 16:06:16
881,2012-11-21 16:42:14,"@tonydaly, maybe your closing `</html>` tag is missing the slash? Though experimenting with Nokogiri doesn't appear to yield those kinds of results either, what driver are you using?
",jnicklas,2012-11-21 16:06:16
881,2012-11-27 15:01:48,"Erugh ignore this. There was a tag outside of the closing `</html>`.
",tonydaly,2012-11-21 16:06:16
881,2013-05-03 00:55:50,"@tonydaly thanks for following up. Had the same thing because another dev put extra stuff in there and it would have been the last thing I checked (Literally, it's at the end of the file!). :clap:
",jakeonrails,2012-11-21 16:06:16
881,2013-07-18 13:29:12,"For me it's this one causing the trouble:

<S_CODE_TOKEN>

As you can see even this parser recognizes that the multiple `<html>` tags are just comments and Capybara maybe shouldn't raise an Exception :) I'm using `2.1.0`
",mmzoo,2012-11-21 16:06:16
881,2013-07-18 13:30:45,"Ah, my bad. There IS another <html> between all those comments I have :)
",mmzoo,2012-11-21 16:06:16
881,2014-03-08 10:51:23,"@tonydaly nice catch.  I added some JavaScript outside of the trailing HTML tag (in HAML), and it caused the same failure. Thanks for the conversation/fix :+1: 
",calebhaye,2012-11-21 16:06:16
881,2014-05-30 14:23:24,"I had a similar problem as @calebhaye, script tag outside of the body tag.
",taylorkearns,2012-11-21 16:06:16
881,2014-08-21 20:12:13,"i was using haml....i missed indention right after %hmtl that caused it. 
",amba178,2012-11-21 16:06:16
881,2014-10-24 14:28:31,"I have the same problem because I am using Bullet gem. Bullet gem appends content outside the html make the html malformed. 
",channainfo,2012-11-21 16:06:16
881,2014-12-17 16:37:06,"@tonydaly (y) my javascript code was outside the html tag. (As slim works with indentation, so after indenting my code inside html it is fine)
",taimoor,2012-11-21 16:06:16
881,2014-12-18 10:08:20,"Just had this issue and I too had a <script> tag outside my <html> tag caused by missing HAML indentation 
",adampope,2012-11-21 16:06:16
881,2015-02-10 01:10:02,"having condition IE tags with multiple html-open tags cause this symptom as well 

 In particular this started failing on a Rails 3 -> Rails 4 upgrade. (the version of capybara in both is 2.4.4)

Ambiguous match, found 2 elements matching xpath ""/html""

my main application layout looked like this

<S_CODE_TOKEN>

The fix was to remove the extra html open tags. are there any other work arounds? 
",jasonfb,2012-11-21 16:06:16
881,2015-04-02 07:51:50,"Just in case someone hits this problem while debugging a Rails App: The [Rails web console](https://github.com/rails/web-console) was causing it in my case. When I took `console` out of my controller, the tests went green again.
",TStrothjohann,2012-11-21 16:06:16
881,2015-08-11 15:35:09,"@TStrothjohann thanks buddy, you save my day. 
",fishbullet,2012-11-21 16:06:16
881,2016-02-23 19:17:10,"@TStrothjohann That was my problem too, upgrading web-console fixes this. See [this web-console issue](https://github.com/rails/web-console/pull/162).
",mooman,2012-11-21 16:06:16
880,2012-11-21 14:15:01,"I just upgraded to 2.0.1 and got this error when I tried to run tests:

<S_CODE_TOKEN>

I was able to fix it by explicitly adding xpath to my project's Gemfile but this doesn't seem like the expected behavior
",subelsky,2012-11-22 00:05:29
880,2012-11-21 15:42:42,"Very odd, I just tried to replicate this, but was not able to. I saw someone on the mailing list who had a similar problem, but I dismissed it as an unrelated. Can you create a repo with just a Gemfile which replicates this issue?
",jnicklas,2012-11-22 00:05:29
880,2012-11-22 00:05:29,"I wasn't able to replicate it in a fresh repository. I did notice during this process that I had a dependency of @ngauthier's domino gem in my development group, which depends on Capybara. I moved it into the test group, re-bundled, and everything was fixed.

I'm closing this issue; if anyone else comes across problem this I recommend triple-checking your `Gemfile.lock` to see what other gems may be adding a capybara dependency where you're not expecting it.
",subelsky,2012-11-22 00:05:29
880,2012-11-24 11:52:46,"Same stacktrace after the upgrade. Don't have any other gems which depend on capybara.
",akshayrawat,2012-11-22 00:05:29
880,2012-11-27 15:02:07,"I ran into this problem too.  Couldn't reproduce it, though.  It went away after I emptied out my gemset and ran bundle install again.
",awead,2012-11-22 00:05:29
880,2012-11-27 16:46:09,"Same issue. xpath wasn't included as a dependency of capybara. Had to add xpath to my Gemfile manually in order to fix.
",anthonator,2012-11-22 00:05:29
880,2012-11-27 23:15:03,"Same here, xpath not getting included.
",DanielHeath,2012-11-22 00:05:29
879,2012-11-20 21:53:33,"This allows classes that aren't String but are similar enough
(like Pathname) to be used as upload paths.
",shepmaster,2012-11-20 21:54:35
879,2012-11-20 21:54:55,"Thanks!
",joliss,2012-11-20 21:54:35
879,2012-11-20 22:02:19,"Ah! I'm stupid. I typed #848, but meant #878. Silly numberpad...
",shepmaster,2012-11-20 21:54:35
879,2012-11-20 22:07:59,"Thanks, I reopened #848.
",joliss,2012-11-20 21:54:35
878,2012-11-20 21:36:21,"In Capybara 1.1.3, you could use a Pathname  for #upload_file. This is very convenient, especially inside of Rails.

<S_CODE_TOKEN>

In 2.0.0, this generates the error:

<S_CODE_TOKEN>

I think this is caused by adding support for uploading multiple files. I would suggest changing the code to use the `Array()` coercion method. If this sounds good, I can whip up a patch.
",shepmaster,2012-11-20 22:08:17
878,2012-11-20 22:08:17,"Fixed by #879.
",joliss,2012-11-20 22:08:17
877,2012-11-20 13:27:21,"Source is now an alias for `body`. RackTest no longer returns modifications to `body`. This basically codifies the behaviour which we've had for a while anyway, and should have minimal impact for end users. It is important to driver authors though.
",jnicklas,2012-11-21 08:44:42
876,2012-11-20 04:13:39,"Contrary to the claim here:

https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/finders.rb#L8

the use of :message causes an exception to be thrown from here:

https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L74

I found this being triggered (when cucumber-testing mercury) from this line:

https://github.com/jejacks0n/mercury/blob/master/lib/mercury/cucumber/step_definitions/mercury_steps.rb#L54

Can this feature be re-implemented, or removed and caught with a deprecation warning please?
",cjheath,2012-11-20 05:53:40
876,2012-11-20 05:53:40,"The documentation is incorrect, the option has been removed. I've updated the docs.
",jnicklas,2012-11-20 05:53:40
875,2012-11-20 03:45:51,"Example:

changed:

<S_CODE_TOKEN>

to:

<S_CODE_TOKEN>
",fivetwentysix,2012-11-21 05:32:41
875,2012-11-21 05:32:41,"I like the idea of making the code more readable, but I don't want to merge this for two reasons:
- `class X < Y; end` is perfectly idiomatic Ruby for defining exception classes. I haven't seen `Class.new` used a lot, on the other hand.
- Adjusting the alignment on `=` makes the code more readable, but very hard to edit. For that reason many people intentionally keep assignments unaligned. The Python folks even have this codified in their style guide.
",joliss,2012-11-21 05:32:41
874,2012-11-20 03:01:36,"The native representation of a node may not be equal across driver
implementations.  Instead, let the driver define equality.
",mhoran,2012-11-20 05:52:10
874,2012-11-20 04:22:33,"One of the builds failed running ./lib/capybara/spec/session/visit_spec.rb:81.  I got a similar failure during a spec run locally against capybara-webkit.  Rerunning the spec locally went green -- it looks like we've got a brittle test.
",mhoran,2012-11-20 05:52:10
873,2012-11-19 12:52:48,"Hi @jnicklas,

What do you think about improving the message of have_field matcher?

Currently we don't have a nice message, take a look:

<S_CODE_TOKEN>

I know it's not `35,0000`, but what value is?

I was thinking in something like:

<S_CODE_TOKEN>
",sobrinho,2012-11-19 13:04:19
873,2012-11-19 12:53:15,"If you agree, I would to submit a pull request :)
",sobrinho,2012-11-19 13:04:19
873,2012-11-19 13:01:02,"IIRC, this error is already slightly better under 2.0. Check it out and see if you still feel that it needs improvement. Even though we've made improvements to the errors, there is still much to do, but it's freaking HARD.
",jnicklas,2012-11-19 13:04:19
873,2012-11-19 13:04:19,"I can't upgrade to capybara 2 right now because my suite broke almost everything and I don't have time to solve that on my side yet :(

Thanks! :)
",sobrinho,2012-11-19 13:04:19
872,2012-11-18 00:17:37,"Previously, testing of body and source methods was meta-programmed,
providing a `method' which needed to be called.  Since this has been
removed, there is no`method' to call, so instead call source directly.
",mhoran,2012-11-18 01:09:56
872,2012-11-18 01:10:02,"Thanks!
",jnicklas,2012-11-18 01:09:56
871,2012-11-17 17:39:35,"Specs which expect content as a result of anything but a GET request
fail on drivers that define both #source and #body, when #source
retrieves content via a GET request.

Fixes issues with capybara-webkit.
",mhoran,2012-11-21 08:47:03
871,2012-11-18 01:26:04,"I'm actually quite confused about Driver#html and Driver#source.  The refactorings mention this confusion, but I can't seem to get it straightened out.  Perhaps someone could explain how these methods are intended to work?
",mhoran,2012-11-21 08:47:03
871,2012-11-18 02:04:43,"I think I've figured it out.  However, if I'm understanding correctly, all references to #body should be replaced with #html.  Also, it seems incorrect that the Selenium driver implements #source, since the driver has no way to return the unmodified source of the page.  The capybara-webkit driver does this via a GET request to the current URL, which leads to failures with specs which use #body.
",mhoran,2012-11-21 08:47:03
871,2012-11-18 03:09:38,"Actually, this raises a bigger issue, particularly for capybara-webkit, in that any usage of #body will result in an additional request, and #body will not return the expected result for non-GET requests.  Either capybara-webkit should implement #source as a delegate to #html, or the decision to delegate #body to #source should be revisited.
",mhoran,2012-11-21 08:47:03
871,2012-11-18 03:54:12,"> Specs which expect content as a result of anything but a GET request
> fail on drivers that define both #source and #body, when #source
> retrieves content via a GET request.

I'm not sure if that is sound behavior on the driver's side.

That said, these specs should in any case be changed to use `page.should have_content` instead of checking `@session.body`. `visit` is asynchronous, and `@session.body/html` doesn't wait for it. As a result we can end up with flickering tests. We have been replacing many instances of `body` with `has_content?` calls (268b7caf32e058af0da588a40f65fa1767104714), but we're not completely done. If you could submit a patch that moves us further in that direction (it might be straightforward), I'd be more than happy to merge it.
",joliss,2012-11-21 08:47:03
871,2012-11-18 03:56:25,"Btw, this commit might resolve some of your (justified) confusion about source/body/html: 954fcc69a35d351792553fcfdce30d14e96f9f10 It's included in Capybara 2.0.0.
",joliss,2012-11-21 08:47:03
871,2012-11-18 03:59:49,"As it turns out, we can't actually get a reliable handle on the unmodified source of the response.  Doing so requires that we keep an extra copy of the response data, doubling the amount of memory (and increasing time) for every request.  I assume this is why #source was originally implemented as a GET request.

I've hacked together a solution to store the body, but I'm worried that we're relying too much on the internals of how QtWebKit handles reading input streams.  I assume this will also be an issue for Poltergeist, and other QtWebKit based drivers.  QtWebKit only gives us access to the DOM or a plain-text version of it, which strips away all markup.  In either case, it does not provide the mechanism required for proper implementation of #source.
",mhoran,2012-11-21 08:47:03
871,2012-11-18 04:09:15,"> As it turns out, we can't actually get a reliable handle on the unmodified source of the response.

The Selenium driver has the same problem, and I believe it just aliases to `html`.
",joliss,2012-11-21 08:47:03
871,2012-11-18 04:09:21,"@jnicklas We could (without any change to the public API behavior) unify the spec to say: `html` (and synonymously `body` and `source`) return the state of the DOM. And in case of RackTest, we do the next most sensible thing and return the original source.

The current differentiation (original source vs. DOM) doesn't really make much sense IMO, since not one driver actually has different behavior for those methods.

Thoughts?
",joliss,2012-11-21 08:47:03
871,2012-11-18 04:20:33,"The problem with delegating `source` to `html` in the capybara-webkit driver is that it causes the body to get wrapped in an `<html>` element, which was the original complaint of #394.  So, I guess we're not any worse off than we were, but we're not really resolving any issues, either.
",mhoran,2012-11-21 08:47:03
871,2012-11-18 04:35:53,"> since not one driver actually has different behavior for those methods.

Hm, it turns out that's actually not quite correct. The RackTest browser says:

<S_CODE_TOKEN>

Is the `dom.to_xml` actually useful for anything? What stops us from always returning `last_response.body`?
",joliss,2012-11-21 08:47:03
871,2012-11-18 14:36:41,"Honestly, I'm just as confused about all of this as all of you guys. So here is the summary so far, as far as I can see:
1. No driver other than RackTest actually _can_ return the original source in any meaningful, sane way.
2. The only way the modified source in RackTest could be different from the original would be the value of fields. I'm not entirely sure if this is reflected in the difference between `html` and `source`, but I think it probably is.
3. We can't get rid of source/body for RackTest, because then there'd be a repeat of the shitstorm where people complain about the result being wrapped in `<html>` tags.

If we want to unify this behaviour, we would have to have different behaviour for RackTest and the other drivers. That sucks imo.

So here's my suggestions: have Selenium and capy-webkit and other drivers raise an exception (NotImplementedError) on `#source`. Keep the current behaviour for html.

The real issue then is, what do we do with `body`, because currently it delegates to `source`, which would raise an exception on some drivers.

This is fucking awful :(
",jnicklas,2012-11-21 08:47:03
871,2012-11-19 01:46:36,"It's probably best for capy-webkit and others to raise an exception for `#source`, as much as it sucks.  It's better for a unified behavior than issues that will just cause frustration in the future.  I may spend some more time trying to find a good way to get a handle on the source, but so far it's not looking too hopeful.

It was announced that the behavior of `#source` and `#html` was changed with Capybara 2.0, so it's probably not too late to make this change.  Better to get it figured out early than keep users in the dark as we start moving forward with capy-webkit.
",mhoran,2012-11-21 08:47:03
871,2012-11-19 08:30:19,"But then what do we do with `Session#body`?
",jnicklas,2012-11-21 08:47:03
871,2012-11-19 13:12:58,"I say we either alias it back to `#html` or leave it as is, but in either case deprecate it and say it will be going away in 2.1.
",mhoran,2012-11-21 08:47:03
871,2012-11-19 14:15:49,"Actual browsers don't return modifications from filling in forms, so it seems like the behavior can be consistent to me:
- rack-test always returns the original source, and the body that gets modified is internal to the driver
- Selenium/capybara-webkit always return the current DOM, since they can't reliably get the original source and it isn't useful anyway

Does that make sense?

Also, in terms of naming for capybara-webkit , `body` makes more sense than `html` since you can actually be returning any type of content. I think this is true of rack-test as well.
",jferris,2012-11-21 08:47:03
871,2012-11-19 14:22:24,"@jferris, the problem with this is that the toHtml method wraps the content in `<html>`.  This was the original complaint in #394.  If we have non-HTML content in the driver, it will get wrapped in HTML elements.  Forcing users to call `html` makes this behavior more apparent.
",mhoran,2012-11-21 08:47:03
871,2012-11-19 14:25:13,"@mhoran I think I must be missing something. If the rack-test driver just returns whatever it got back from the server as `body`, doesn't that mean `toHtml` won't be called?
",jferris,2012-11-21 08:47:03
871,2012-11-19 14:27:35,"@jferris, users of capybara-webkit won't call the rack-test `body`, but will call the current Session driver `body`, which is now aliased to `source`.  This is what's confusing.
",mhoran,2012-11-21 08:47:03
871,2012-11-19 15:14:41,"@mhoran if someone uses capy-webkit to test XML requests or whatever else people might use this stuff for, I think they have only themselves to blame. The behaviour as @jferris suggests makes sense to me, and it's a very minor change which I would feel comfortable pushing out in a point release as a ""bugfix"" of sorts. I can't imagine anyone has tests which actually depend on the difference between source and html under RackTest, which would be the only thing to change.
",jnicklas,2012-11-21 08:47:03
871,2012-11-19 15:32:16,"Just to be sure I understand, what I gather from the comments is that `Session#html` should remain as is, `Session#body` should be aliased to `Session#html` as before, and `Session#source` should return the original source, only under rack-test -- other drivers should raise `NotImplementedError`.

The confusion I see here is that if users do use capy-webkit to retrieve non-HTML content, as @jferris noted, it would be confusing for `Session#body` to return that content wrapped in `<html>` elements.  Instead, if `Session#body` raised an exception, it would be clear that the behavior was unsupported.  I realize that users shouldn't be using capy-webkit to test non-HTML content, but I think it's better to be clear about the issue than offer partial support.
",mhoran,2012-11-21 08:47:03
871,2012-11-19 15:56:33,"@mhoran what I'm suggesting is that all three browsers implement `body`. Drivers where the DOM actually can get modified return the current DOM (Selenium, Webkit) and rack-test always returns exactly what it got back from the server.

@jnicklas the thing I've used capybara for that requires non-HTML responses is testing stuff like CSV generators. For example, we had one application with a Backbone form to request CSV reports. The reports were generated in the background, the JavaScript polled the server until the report was ready, and the browser redirected to the finished CSV when it was ready. It was great to have a couple tests that ran through this whole stack together, all the way to the generated CSV.
",jferris,2012-11-21 08:47:03
871,2012-11-19 16:15:11,"@jferris, won't we wrap the body in `<html>` tags?  We call toHtml on the QWebFrame, which treats all content as HTML.  My argument is that this wrapping would cause confusion.
",mhoran,2012-11-21 08:47:03
871,2012-11-19 19:05:56,"This change https://github.com/mhoran/capybara-webkit/commit/3d2aa0569fca53e84464f66c5a4d0f87760fd248 might work for us.  I've delegated `Browser#source` to `Browser#body` and reimplemented `Browser#body` to return the text representation of the WebPage for non-HTML content.  With this change in place, I'm OK with leaving `Browser#body` as an alias for `Browser#html`.  However, perhaps `Browser#html` should always wrap the current WebPage content.
",mhoran,2012-11-21 08:47:03
871,2012-11-20 13:29:18,"@mhoran, @jferris (and maybe @jonleighton): can you guys take a look at this pull request #877 and see if that solves the problem.
",jnicklas,2012-11-21 08:47:03
871,2012-11-20 23:46:58,"FWIW, Poltergeist implements the ""unmodified source"" functionality by grabbing the source right after the page is loaded and storing it in a string. Seems to work okay but is a bit hacky. I wouldn't be against getting rid of this part of the capybara API (i.e. only returning modified source)
",jonleighton,2012-11-21 08:47:03
871,2012-11-21 03:01:13,"I've come up with an implementation of `#source` for capybara-webkit that is far less of a hack than what I had previously conjured up.  I'm fine leaving it in place if we'd like to move forward with different `#source` and `#html` methods.  I'm definitely for the distinction.

@jonleighton, the change could likely be merged into PhantomJS as well.
",mhoran,2012-11-21 08:47:03
871,2012-11-21 08:45:23,"I have merged #877. This way at least we're moving forward.
",jnicklas,2012-11-21 08:47:03
871,2012-11-21 11:25:26,"Could we delegate source to the browser for browsers that implement source, otherwise return html? Kind of dirty, but I do want to support that use case, now that we can.
",mhoran,2012-11-21 08:47:03
871,2012-11-21 11:41:23,"Let's just go with this for now. No unmodified source at all. It isn't particularly useful anyway.
",jnicklas,2012-11-21 08:47:03
871,2012-11-22 16:28:14,"I think ae7c564 is an excellent solution, Jonas!
",joliss,2012-11-21 08:47:03
870,2012-11-16 22:13:20,"Previously, if the input element already had focus but the cursor was somewhere other than at the end, `Selenium::Node#set` would not properly remove all of the input's previous content because the characters after the cursor were not ""backspaced.""

With this change, we first move to end of the content by hitting the right arrow key repeatedly, before hitting backspace repeatedly.
",DouweM,2012-11-20 13:42:07
870,2012-11-17 00:23:12,"That's an interesting one. Would you mind adding a test before we merge this, so it won't happen in the future?
",joliss,2012-11-20 13:42:07
870,2012-11-17 01:09:23,"But of course!
",DouweM,2012-11-20 13:42:07
870,2012-11-17 09:48:52,"I wonder if this has performance implications. I've noticed that even the backspace behaviour, which replaced `native.clear`, is a _lot_ slower, at least for the Chrome driver. It seems like the current behaviour is broken, so we should probably merge this regardless, but I do think we should test the performance of this at some point.
",jnicklas,2012-11-20 13:42:07
870,2012-11-18 04:13:13,"Yeah, I'm on the fence like @jnicklas here. We can probably merge it, but I wish we had a better solution.
",joliss,2012-11-20 13:42:07
870,2012-11-18 04:14:09,"Hey @jarib, could you take a look at the OP's bug description please? I'm wondering if there's a faster/cleaner way to fix it than sending repeated `:backspace` keys.
",joliss,2012-11-20 13:42:07
870,2012-11-18 04:18:01,"What about sending ctrl-a or  command-a  depending on platform followed by a single backspace? 
",twalpole,2012-11-20 13:42:07
870,2012-11-18 09:21:58,"Not knowing why you moved away from Element#clear, @twalpole's suggestion will be the fastest. 
",jarib,2012-11-20 13:42:07
870,2012-11-18 14:01:48,"`Element#clear` was moved away from with commit 6dc095b3faf99653e5c4723fd4b4bb2ceeeb66e5, because both `#clear` and `#send_keys` trigger an `onchange` event, which would not be how an actual user would fill a field.

Sending <kbd>Ctrl-A</kbd> or <kbd>Cmd-A</kbd> would probably be faster, and I considered doing that instead of the `:right :backspace` trick, but I'm not a fan of platform-specific code. But of course it's you guys' call.
",DouweM,2012-11-20 13:42:07
870,2012-11-18 14:38:53,"I'm thinking that maybe `Element#clear` was the lesser of all evils, it seems like it only makes a difference in a tiny minority of cases, and is _way_ faster.

As an aside, why are keystrokes so damned slow under Selenium? Especially Chromedriver. @jarib, any insight?
",jnicklas,2012-11-20 13:42:07
870,2012-11-18 14:44:09,"I'm not a fan of platform-specific code either.
",joliss,2012-11-20 13:42:07
870,2012-11-18 14:48:18,"@jarib Could it be a Selenium bug that Element#clear triggers a [change event](https://developer.mozilla.org/en-US/docs/Mozilla_event_reference/change)? With a human user, clearing an element wouldn't cause it to lose focus.
",joliss,2012-11-20 13:42:07
870,2012-11-18 19:49:43,"@jnicklas It appears to be a [known issue](https://code.google.com/p/chromedriver/issues/detail?id=90). I'm sure it'll help its progress if you can demonstrate with code that Chrome is significantly slower than e.g. Firefox.

@joliss I'm not sure what the rationale is for firing the change event, but it's [covered by our test suite](https://code.google.com/p/selenium/source/browse/trunk/javascript/atoms/test/action_test.html#118) so I assume it's intentional. You'll probably get a better explanation if you raise it on the [selenium-developers list](https://groups.google.com/forum/?fromgroups#!forum/selenium-developers).
",jarib,2012-11-20 13:42:07
870,2012-11-19 18:30:40,"Another workaround is of course to simply use `execute_script` to set the value to an empty string:

<S_CODE_TOKEN>
",jarib,2012-11-20 13:42:07
870,2012-11-19 18:32:33,"Do all drivers support JavaScript execution?
",DouweM,2012-11-20 13:42:07
870,2012-11-19 18:34:20,"All except HtmlUnit where it needs to be explicitly enabled.
",jarib,2012-11-20 13:42:07
870,2012-11-19 19:50:02,"That's problematic though because it won't trigger focus/blur events, IIRC.
",jnicklas,2012-11-20 13:42:07
870,2012-11-19 20:37:18,"If we use that to replace the previous `native.clear`, that doesn't matter since `native.send_keys` will trigger those events.
",DouweM,2012-11-20 13:42:07
870,2012-11-20 13:43:28,"I've gone with the JS clear for now. Let's see if that holds up better.
",jnicklas,2012-11-20 13:42:07
870,2012-11-20 13:45:03,":+1: 
",DouweM,2012-11-20 13:42:07
870,2012-11-22 16:41:58,"Re 08a8fd683457bc2a635756a25f250614b0163567:

> `+       driver.browser.execute_script ""arguments[0].value = ''"", native`

When the user edits a text field, the `value` attribute in the DOM actually stays unchanged. JS code might reasonably rely on `value` containing the original value. I strongly feel that this change is not a good solution to the performance issues.

(As an aside, based on my experiences with `execute_script`, I'd also be scared of weird flickering issues and horrible horrible error handling when things go wrong. Wherever I've used `execute_script` in the past, I've tried to keep its use contained, and be ready to rip it out if things go bad.)
",joliss,2012-11-20 13:42:07
870,2012-11-22 17:26:39,"> When the user edits a text field, the value attribute in the DOM actually stays unchanged. JS code might reasonably rely on value containing the original value.

How do you mean? `.value = ''` doesn't change the value attribute, just the value property, just like manually filling in the input would. See [this fiddle](http://jsfiddle.net/kEQEK/) for an example.
",DouweM,2012-11-20 13:42:07
870,2012-11-22 17:44:15,"Setting the value property is also exactly what the JS implementation of `Element#clear` does.
",jarib,2012-11-20 13:42:07
870,2012-11-22 18:19:09,"Thanks @DouweM and @jarib, I totally misread what `.value` does. That makes me feel much better.

I'm still a bit worried about the whole execute_script thing causing issues, as I wrote above:

> (As an aside, based on my experiences with execute_script, I'd also be scared of weird flickering issues and horrible horrible error handling when things go wrong. Wherever I've used execute_script in the past, I've tried to keep its use contained, and be ready to rip it out if things go bad.)

@jnicklas, what do you think?
",joliss,2012-11-20 13:42:07
870,2012-11-22 22:12:55,"@jarib interesting. I'll try to use Element#clear, maybe the issue we were having originally has been fixed.

@joliss we'll try with Element#clear and see if that works, otherwise, let's just keep an eye on it. If people have any trouble we'll have to change it again. As for the attribute changing, I don't think that's the case, we would have to do `setAttribute` for that, the change to the value property is not reflected in the value, from what I know.
",jnicklas,2012-11-20 13:42:07
870,2012-11-23 00:15:03,"@jnicklas: Ah, no - `Element#clear` still fires the change event after setting `element.value = ''`. My point was that the `execute_script` solution is essentially the same code without focus/change events firing.
",jarib,2012-11-20 13:42:07
869,2012-11-16 16:09:28,"**UPD:** I've figured out that the other bunch of code works well on the project, so i suppose i've done something bad while developing a new feature.

When i fill the form in using the code specified below (at Cucumber tests) and submit the one, my `params` hash comes with totally empty at controller. 

I've done some debugging and at some deep level of Capybara, when it does actually sending, Nokogiri nodes do not have the `value` attribute set whils before the `click_button` call they do have.

<S_CODE_TOKEN>

My `params` hash at controller:

<S_CODE_TOKEN>

The form HTML is something like this:

<S_CODE_TOKEN>

Actually, i am not sure if i should ferer this error to either **capybara** or **cucumber**.
",shybovycha,2012-11-16 16:18:21
868,2012-11-15 13:32:30,"Pull request #793 merged in 14411d438fc5f0f4c96166ed73abc782f53b34cd enables `:respect_data_method` when requiring `capybara/rspec`, making it work seamlessly with Rails projects that do use RSpec.

However, projects that do not use RSpec will end up only requiring `capybara/rails`, and won't get this functionality.

This change enables the `:respect_data_method` option from the RackTest driver for Rails projects that don't use RSpec, by moving the code that overrides the `:rack_test` driver with the `:respect_data_method` option enabled to `capybara/rails`.

I'm not sure it's required to have this code in both files, since most users will be using this option with Rails projects and probably not with projects that require RSpec only (non-Rails projects). But if you guys think it's necessary to maintain any sort of compatibility I may not be aware of, I can leave it in `capybara/rspec` as well.

Let me know if anything needs improvement, thanks!
",carlosantoniodasilva,2012-11-15 14:07:51
868,2012-11-15 14:15:02,"Thanks!
",carlosantoniodasilva,2012-11-15 14:07:51
868,2012-11-17 00:33:27,"Thanks for fixing. I don't know what I was thinking when I wrote that code.

@jnicklas, do you want to push out 2.0.1?
",joliss,2012-11-15 14:07:51
867,2012-11-15 11:22:36,"I call post request by this way:

<S_CODE_TOKEN>

And set header

<S_CODE_TOKEN>

I use 'Accept' header for API versioning as it's told [here](http://railscasts.com/episodes/350-rest-api-versioning).

Rails returns 404.
",kalys,2012-11-17 00:26:15
867,2012-11-15 11:23:47,"Problem appears in 2.0.

Everything is ok with 1.1.3.
",kalys,2012-11-17 00:26:15
867,2012-11-16 10:00:13,"I use page.driver.post, page.driver.get in 2.0, it also return 404.  Everything is ok with  1.1.2.

In 2.0, page.driver.visit seems work as page.driver.get.
",elvin-lian,2012-11-17 00:26:15
867,2012-11-17 00:26:15,"`page.driver` is internal, so you shouldn't expect it to stay the same between versions.

Instead of reaching into the driver internals, I recommend you use a better-suited tool for API testing - you don't need Capybara for that: http://www.elabs.se/blog/34-capybara-and-testing-apis
",joliss,2012-11-17 00:26:15
866,2012-11-14 20:46:01,"Ambiguous match, found 4 elements matching css "".borderbottom""

just started seeing this today after bundle updating to capybara 2.0.0

Is this intentional that the gem is throwing an error as opposed to choosing the first element found on the page when more than one is found?
",jamesmacwilliam,2012-11-14 20:56:53
866,2012-11-14 20:55:16,"2.0.0 is not backwards compatible - you might want to read the release announcement

https://groups.google.com/forum/?fromgroups=#!topic/ruby-capybara/C0O7nP2YG1A
",twalpole,2012-11-14 20:56:53
866,2012-11-14 20:56:53,"ah, thank you, closing
",jamesmacwilliam,2012-11-14 20:56:53
865,2012-11-14 19:54:24,"`select('United States', from: 'model_country')`  produces a Capybara::Ambiguous error.

I know `find(:select, 'model_country').first(:option, 'United States').select_option` works, but that seems pretty long winded.

This is because most country select dropdowns have ""United States"" and ""United States Minor Outlying Islands"". At least, from the carmen gem.
",ivanoats,2012-11-16 00:00:33
865,2012-11-14 21:58:40,"Hmm, that's strange, are you sure that ""United States"" is not appearing twice? Option matches need to be exact IIRC, see https://github.com/jnicklas/xpath/blob/master/lib/xpath/html.rb#L142
",jnicklas,2012-11-16 00:00:33
865,2012-11-16 00:00:33,"You're right. United States is appearing twice. I guess I have to use the longer expression above. 
",ivanoats,2012-11-16 00:00:33
865,2012-11-27 02:31:15,"Just hit this issue as well, is there a way it could compare the option elements it finds and if they are all exactly the same then it just uses the first one?

Readability really suffers in this instance (although I can see the end goal for not allowing ambiguous referencing). I had to change

<S_CODE_TOKEN>

to

<S_CODE_TOKEN>
",dedman,2012-11-16 00:00:33
865,2013-04-05 11:52:45,"Got exactly the same issue here. It should be pretty common since often, in country selects, United States and maybe Canada are duplicated on top of the select since most of the users will be selecting those.

Obviously both appearances have the same value ( 'US' ).
",radanskoric,2012-11-16 00:00:33
865,2013-04-05 14:22:11,"@radanskoric in Capybara 2.1 (which will be released next tuesday), you'll be able to do:

<S_CODE_TOKEN>
",jnicklas,2012-11-16 00:00:33
865,2013-04-05 14:27:45,"Thanks, great work!
",radanskoric,2012-11-16 00:00:33
865,2013-07-10 16:58:34,"@jnicklas Awesome, thanks for providing this. I just ran into this same problem as well.
",denzilv,2012-11-16 00:00:33
865,2013-08-27 19:37:42,"So, just an FYI, if you have a timezone_select with ""Samoa"" and ""American Samoa"", both will match as far as I can tell. In order to work around this, I had to drop into custom selector goo (I couldn't seem to figure out a way to get the #select method to work):

<S_CODE_TOKEN>
",dcoder2099,2012-11-16 00:00:33
865,2013-08-27 19:41:37,"@dcoder2099 Have you tried `select(new_tz, from: 'Time zone', exact: true)`?
",abotalov,2012-11-16 00:00:33
865,2013-08-27 19:44:48,"Yes, and that doesn't work because the #find under the covers attempts to find an <option> tag with 'Samoa' (or, in another case 'Cairo') as its contents (not as its value attribute). That is not what I was looking for.
",dcoder2099,2012-11-16 00:00:33
865,2013-08-27 22:16:02,"@dcoder2099 that's an entirely different issue. Capybara doesn't allow you to pick options by value, instead you must specify the text. This is intentional behaviour.
",jnicklas,2012-11-16 00:00:33
865,2013-08-29 19:08:17,"Derp. As soon as you said that, @jnicklas, I realize that makes perfect sense. Just a bit harder test to write.
",dcoder2099,2012-11-16 00:00:33
865,2014-01-14 19:43:47,":+1: 
",bbuchalter,2012-11-16 00:00:33
864,2012-11-14 16:18:25,,glebm,2012-11-14 17:26:15
864,2012-11-14 17:26:15,"Ahh, I see, no that does not make any sense at all. The title is always invisible under RackTest, since that's what browsers default to. You actually _can_ make the title visible in browsers, by setting `display:block` on it (and on the `head` element), but that's not what we're talking about here. Instead we could have an API explicitly for getting the page title, which would ignore the fact that it is not visible, but that's not what this change is doing.
",jnicklas,2012-11-14 17:26:15
863,2012-11-14 15:36:46,"Getting empty string from `first('title').text` since 2.0
Meanwhile, `first('title').native.text` works

Narrowed down to the fact that:
`first('title').base.visible?` returns false

And capybara returns """" for text for invisible elements.

Note that page title is always visible from a human perspective.
",glebm,2012-11-14 15:55:16
863,2012-11-14 15:55:15,"This is to be expected. Capybara 2 will ignore invisible text.
",jnicklas,2012-11-14 15:55:16
863,2012-11-14 15:56:40,"We should have an API for getting the page title, since that is available in pretty much all drivers. No idea why no one has ever implemented that though. I personally never assert on the title, since the user isn't particularly likely to care about it at all.
",jnicklas,2012-11-14 15:55:16
863,2012-11-14 16:00:57,"The user cares about page title, e.g. when it appears on Google results page

> Capybara 2 will ignore invisible text.

Title is visible though.
",glebm,2012-11-14 15:55:16
863,2012-11-14 16:10:51,"Is it really visible, as in visible on the page? Not just in the title bar? In that case that would be a bug in Selenium, not much we can do about that.

Also, as I said, I'm open to having that kind of API, it's just not something that I personally need, which is why _I_ haven't implemented it.
",jnicklas,2012-11-14 15:55:16
863,2012-11-14 16:19:11,"I am using Rack::Test, but the bug isn't in the driver, it's in `Simple`
Anyway, great to hear you are not against it! Pull request submitted :)
",glebm,2012-11-14 15:55:16
863,2012-11-14 17:26:00,"Ahh, I see, no that does not make any sense at all. The title is always invisible under RackTest, since that's what browsers default to. You actually _can_ make the title visible in browsers, by setting `display:block` on it (and on the `head` element), but that's not what we're talking about here. Instead we could have an API explicitly for getting the page title, which would ignore the fact that it is not visible, but that's not what this change is doing.
",jnicklas,2012-11-14 15:55:16
863,2012-12-18 23:13:49,"Well unfortunately this is causing a few problems for me because different drivers treat this differently.  If I am using RackTest I can check the title using `first('head title').native.text`, whereas with capybara webkit, when I do the same thing I am returned a string such as `3`, and each time I make a request to `.native` I get the next number in the sequence.

It would be useful for everyone I think if there was a standardised way to access this title element as I now have to write some pretty ugly code to work around this.
",mattheworiordan,2012-11-14 15:55:16
863,2013-03-01 20:14:57,"It will be fixed in Capybara 2.1. See #953 
",abotalov,2012-11-14 15:55:16
862,2012-11-14 15:14:03,,alindeman,2012-11-14 15:53:17
862,2012-11-14 15:54:03,"Thanks :)
",jnicklas,2012-11-14 15:53:17
861,2012-11-14 13:03:29,"See this gist for an example of this issue: https://gist.github.com/a1a5fe787dfc698e05ba

This seems to occur when:
- `Capybara.app` is not set or `Capybara.run_server` is false
- `Capybara.app_host` is set
- `visit` is called with a relative URL

In which case, an Exception like the following is thrown:

<S_CODE_TOKEN>
",jnicklas,2012-11-14 13:29:22
861,2012-11-14 13:22:14,"thx!
",pietia,2012-11-14 13:29:22
861,2012-11-14 13:29:52,"Pretty easy fix, I will hold off with a new gem release for a day or two, just in case any more issues show up.
",jnicklas,2012-11-14 13:29:22
861,2013-12-16 09:44:22,"I am running Capybara 2.0 with Turnip using Selenium web driver and getting these errors:

D:\Workplaces\Ruby\test>rspec spec
**\* LOG addons.manager: Application has been upgraded
**\* LOG addons.xpi: startup
**\* LOG addons.xpi: Skipping unavailable install location app-system-local
**\* LOG addons.xpi: Skipping unavailable install location app-system-share
**\* LOG addons.xpi: checkForChanges
**\* LOG addons.xpi-utils: Opening database
**\* LOG addons.xpi-utils: Creating database schema
**\* LOG addons.xpi: New add-on fxdriver@googlecode.com installed in app-profile
**\* Blocklist::_loadBlocklistFromFile: blocklist is disabled
**\* LOG addons.xpi: New add-on {972ce4c6-7e08-4474-a285-3208198ce6fd} installed
in app-global
**\* LOG addons.xpi: New add-on {BBDA0591-3099-440a-AA10-41764D9DB4DB} installed
in winreg-app-global
**\* LOG addons.xpi: Updating database with changes to installed add-ons
**\* LOG addons.xpi-utils: Updating add-on states
**\* LOG addons.xpi-utils: Writing add-ons list
**\* LOG addons.manager: shutdown
**\* LOG addons.xpi: shutdown
**\* LOG addons.xpi-utils: shutdown
**\* LOG addons.xpi-utils: Database closed
**\* LOG addons.xpi: startup
**\* LOG addons.xpi: Skipping unavailable install location app-system-local
**\* LOG addons.xpi: Skipping unavailable install location app-system-share
**\* LOG addons.xpi: checkForChanges
**\* LOG addons.xpi: No changes found
**\* Blocklist::_loadBlocklistFromFile: blocklist is disabled
F

Failures:

  1) Search Search text on youtube Allows searches for general terms
     Failure/Error: Unable to find matching line from backtrace
     Selenium::WebDriver::Error::UnknownError:
       Component returned failure code: 0x80520001 (NS_ERROR_FILE_UNRECOGNIZED_P
ATH) [nsIWebNavigation.loadURI]
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/selenium-webdriver-2.38.0/lib/seleniu
m/webdriver/remote/response.rb:51:in `assert_ok'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/selenium-webdriver-2.38.0/lib/seleniu
m/webdriver/remote/response.rb:15:in`initialize'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/selenium-webdriver-2.38.0/lib/seleniu
m/webdriver/remote/http/common.rb:59:in `new'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/selenium-webdriver-2.38.0/lib/seleniu
m/webdriver/remote/http/common.rb:59:in`create_response'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/selenium-webdriver-2.38.0/lib/seleniu
m/webdriver/remote/http/default.rb:66:in `request'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/selenium-webdriver-2.38.0/lib/seleniu
m/webdriver/remote/http/common.rb:40:in`call'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/selenium-webdriver-2.38.0/lib/seleniu
m/webdriver/remote/bridge.rb:634:in `raw_execute'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/selenium-webdriver-2.38.0/lib/seleniu
m/webdriver/remote/bridge.rb:612:in`execute'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/selenium-webdriver-2.38.0/lib/seleniu
m/webdriver/remote/bridge.rb:110:in `get'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/selenium-webdriver-2.38.0/lib/seleniu
m/webdriver/common/navigation.rb:14:in`to'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/capybara-2.2.0/lib/capybara/selenium/
driver.rb:102:in `reset!'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/capybara-2.2.0/lib/capybara/session.r
b:79:in`reset!'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/capybara-2.2.0/lib/capybara.rb:255:in
 `block in reset_sessions!'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/capybara-2.2.0/lib/capybara.rb:255:in
`each'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/capybara-2.2.0/lib/capybara.rb:255:in
 `reset_sessions!'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/capybara-2.2.0/lib/capybara/rspec.rb:
20:in`block (2 levels) in <top (required)>'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple_group.rb:471:in `instance_eval'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple_group.rb:471:in`instance_eval_with_rescue'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple.rb:242:in `instance_eval_with_rescue'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/hook
s.rb:31:in`run'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/hook
s.rb:85:in `block in run'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/hook
s.rb:85:in`each'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/hook
s.rb:85:in `run'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/hook
s.rb:446:in`run_hook'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple_group.rb:350:in `run_after_each_hooks'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple.rb:298:in`run_after_each'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple.rb:120:in `block in run'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple.rb:254:in`with_around_each_hooks'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple.rb:111:in `run'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple_group.rb:390:in`block in run_examples'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple_group.rb:386:in `map'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple_group.rb:386:in`run_examples'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple_group.rb:371:in `run'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple_group.rb:372:in`block in run'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple_group.rb:372:in `map'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/exam
ple_group.rb:372:in`run'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/comm
and_line.rb:28:in `block (2 levels) in run'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/comm
and_line.rb:28:in`map'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/comm
and_line.rb:28:in `block in run'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/repo
rter.rb:58:in`report'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/comm
and_line.rb:25:in `run'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/runn
er.rb:80:in`run'
     # C:/Ruby200/lib/ruby/gems/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/runn
er.rb:17:in `block in autorun'

Finished in 17.83 seconds
1 example, 1 failure

Failed examples:

rspec ./spec/test.feature:68 # Search Search text on youtube Allows searches for
 general terms
!!! error running onStopped callback: TypeError: callback is not a function
**\* LOG addons.manager: shutdown
**\* LOG addons.xpi: shutdown

Other things:
1.Tests are executing correctly in browser but after execution complete this error is displayed and test displayed failed.
",deepak-qasource,2012-11-14 13:29:22
861,2015-03-30 21:55:23,"@cihad Please post how to questions on the mailing list as requested in the README, rather than tacking them on to issues that have been closed for well over 2 years
",twalpole,2012-11-14 13:29:22
860,2012-11-13 21:37:44,"Matchers are supported by more than just RSpec. They are used in [minitest-capybara](https://github.com/wojtekmach/minitest-capybara) and [minitest-rails-capybara](https://github.com/blowmage/minitest-rails-capybara), for example. The matchers have no dependency on RSpec, so I'd like to see the namespace renamed. Seems like 2.0 would be a good time to make that change.

Is this a change that would be welcomed?
",blowmage,2012-11-13 23:47:49
860,2012-11-13 23:47:49,"I would be okay with this, but we need to get Capybara 2.0 out the door, and we don't have time to make these kinds of changes. I am planning to do the release _tomorrow_. I know it's a quick change, but I don't want to make last minute changes before pushing the gem out, the risk is too high for the potential gain, and I really don't want to delay the release.

We would also at least need to leave Capybara::RSpecMatchers as an alias, since there are many projects (rspec-rails comes to mind) which assume that that constant exists.

If you'd have created this issue three months ago, it would have been a different story, but for now, we can't change this. Sorry.
",jnicklas,2012-11-13 23:47:49
859,2012-11-06 23:48:47,"I'm hoping that this will make it more likely that it gets read.

View at https://github.com/joliss/capybara/blob/contributing/CONTRIBUTING.md
",joliss,2012-11-07 00:56:07
859,2012-11-07 00:56:19,"This is much better, thanks Jo!
",jnicklas,2012-11-07 00:56:07
858,2012-11-06 21:41:05,"Hi there.

First off: Thank you for an awesome gem! :+1:

Secondly: I'm having a bit of an issue closing an opened fancybox via capybara. I have created several tests that opens and clicks stuff inside the fancybox, but for some reason I cannot target the close button in the upper right corner.

[See an example of the close button here](http://imgur.com/bhYCg)

Here is an example of my spec:

<S_CODE_TOKEN>

I  have checked the dom, and `fancybox-close` is the id of that cross in the top right corner. So for some reason, capybara cannot target that dom id.

Any ideas appreciated! 

// Emil
",ekampp,2012-11-06 23:23:43
858,2012-11-06 23:23:43,"See, this pains me, because I know the answer to your question, but you're asking it in the wrong place, which you would have known if you'd have taken the time to read the Guidelines, which are clearly posted when you create a new issue. Now I'm faced with whether to be an ass and stick to principles and not answer the question, or be nice and give you an answer. I guess I'm being an ass today, sorry.
",jnicklas,2012-11-06 23:23:43
858,2012-11-06 23:36:43,"@ekampp I completely agree with Jonas that this is obviously posted in the wrong place (as happens on nearly every popular project on github because people are too lazy to read, or spend 3 minutes looking at the source, while assuming that a mature heavily used project has some simple functionality that's broken), however I'm not feeling quite as much of an ass today -    remove the # from you selector  -  as can been seen in the xpath gem the link finder compares the string directly to the id (as well as a few other things)

<S_CODE_TOKEN>
",twalpole,2012-11-06 23:23:43
858,2012-11-06 23:56:54,"Wow. You guys are asses. I read the contributing guide. I read the readme, and opened the project and looked through the parts I thought was relevant, and none of that helped me. So assuming that I didn't try to solve my problem before posting it here is just pretentious and ill-mannered. 

You (both) assume that I assume that the functionality is broken. Yet, I have never stated that any place — at all — I have on the other hand presented my issue (which is the purpose of the issue tracker, I should suppose?) in good faith and adhering to the contributing guide presented when submitting the issue. 

And in regards to the solution of removing the hash from the id, I have tried that, and that still doesn't fix the problem. The link is still not targeted correctly. So can we have a proper tone, please?
",ekampp,2012-11-06 23:23:43
858,2012-11-07 00:04:16,"Contributing guide you read - first sentence of the first section ---
""If you have questions of any kind, or are unsure of how something works, please ask on the mailing list.""
",twalpole,2012-11-06 23:23:43
858,2012-11-07 00:12:04,"Yes. It also continues to state that questions will be closed to keep the issue tracker sane. And I'm actually in the process of looking through the mailing list, and writing my issue there. But the fact that it hasn't been asked on the list doesn't invalidate the issue. 

If the need to close the issue if felt, fine, but it certainly doesn't call for the need to be uncivilized about it!

And for all the hubris and hostility I have been met with here, no one seems to have come up with a solution to the problem. 
",ekampp,2012-11-06 23:23:43
858,2012-11-07 01:07:17,"@ekampp read @twalpole's comment again, he did answer the question.
",jnicklas,2012-11-06 23:23:43
858,2012-11-07 01:10:26,"@jnicklas if you have no intention of answering the question, and have already marked this as closed, then I think you should bugger of, and let me and him figure out a solution. 

And anyway, we have shifted the correspondance to mail. So nothing more for you to see here. 
",ekampp,2012-11-06 23:23:43
858,2012-11-07 01:16:07,"Kind of funny that I just answered your question on the mailing list before receiving this comment here on GitHub. You're very welcome.
",jnicklas,2012-11-06 23:23:43
857,2012-11-04 20:02:46,"Wrong Issue!
",megabga,2012-11-04 21:22:52
856,2012-11-02 22:41:18,"In a form, you can hide the `<input>` for a radio button or check box, but still have the label visible, and the form element will be fully functional in the browser. This can be useful if you want to completely hide the browser's check box or radio button styling.

But `choose` and `check` will ignore those elements unless you pass `visible: false`.

Do you think it's hard to change the XPath for `choose` and `check` to work even when only one of `<input>` and `<label>` is visible?
",joliss,2012-11-02 23:07:26
856,2012-11-02 22:44:48,"> But `choose` and `check` will ignore those elements unless you pass `visible: false`.

It seems I spoke to soon. If I try `find(:radio_button, 'Foo', visible: false).set(true)`, I get an error from Selenium:

<S_CODE_TOKEN>

Hm. I guess we cannot solve this in Capybara, unless Selenium starts supporting this.

Or am I missing some way here?
",joliss,2012-11-02 23:07:26
856,2012-11-02 23:03:35,"I would suggest simply hiding them some other way than `display:none`. For example the classic `position: absolute; left: -20000px`. Though there are probably better ways in any given situation.
",jnicklas,2012-11-02 23:07:26
856,2012-11-02 23:07:26,"Right, that's a good strategy. Another workaround I've been using is calls like `page.execute_script(""$('input').show()"")`.

Bummer there's no way to make Selenium work with this by default.

Oh well. :-)
",joliss,2012-11-02 23:07:26
856,2013-07-24 13:05:43,"Had an issue like this with file input fields and the only solution that worked was to make style it with something like this:

<S_CODE_TOKEN>

Hope this helps somebody at some point.
Thanks for the tips guys.
",stas,2012-11-02 23:07:26
856,2013-10-15 10:12:03,"I prefer @joliss solution, since if it's going to be a hacky solution it's better for it to be on the tests. Capybara should support this though.
",zamith,2012-11-02 23:07:26
856,2014-05-16 18:34:00,"Had the same issue while trying to style a label and hide the input it was related to. So when the user clicked the label the input was selected. I had to change the styling as mentioned by @joliss to get my test to work.
",Baril27,2012-11-02 23:07:26
856,2014-05-16 19:37:04,"Why wouldnt you find the label element (which is visible) and call click on it -- just like the user would be doing??
",twalpole,2012-11-02 23:07:26
856,2014-05-16 23:35:29,"@twalpole You are correct and thats exactly what I ended up doing.
",Baril27,2012-11-02 23:07:26
856,2015-08-26 23:13:51,"It would be nice to support this. In my case I can not simply click on visible label, cause label contains a few links with `target=""_blank""` and Capybara clicks on the link, but not simple text within label. So, instead of selecting checkbox, it opens some doc in new window.
",kovpack,2012-11-02 23:07:26
856,2015-08-27 00:04:34,"@kovpack - most drivers don't support clicking on invisible elements because a user wouldn't be able to --- can you put the text within a span or something to enable you to click on that specific content?
",twalpole,2012-11-02 23:07:26
856,2015-08-27 01:25:51,"@twalpole yeap, put extra span looks like good idea
",kovpack,2012-11-02 23:07:26
855,2012-11-01 17:13:21,"Hey guys

Twitter Bootstrap renames the `title` method of any link on which its `tooltip()` method is applied to `data-original-title`, as pointed out here:

https://github.com/twitter/bootstrap/issues/5743

I wonder how I can make Capybara to look out for this custom `data-original-title` attribute instead of `title` when searching for links? This would be really helpful.

Thanks,
Josh
",jmuheim,2012-11-01 17:39:15
855,2012-11-01 17:39:14,"Seriously, you're going to change Capybara to accomodate some non-standard thing some library is doing somewhere. That seems like a pretty bad idea.
",jnicklas,2012-11-01 17:39:15
855,2012-11-02 07:12:38,"You are right. I think about disabling the `tooltip` function in test environment, this is much cleaner. Thanks.
",jmuheim,2012-11-01 17:39:15
854,2012-10-30 12:26:51,"Right now Capybara's `fill_in` method checks the id and name attributes of an input as well as its label to determine which input to fill in. But in a lot of newer sites, we're seeing people using HTML5's `placeholder` attribute to identify form fields, the result generally looks something like this:

![A form on a website I built](http://f.cl.ly/items/3u0G0F0p0I440v1Y3G37/Screen%20Shot%202012-10-30%20at%2011.23.27%20PM.png)

Right now to test that form I have to do something along the lines of

<S_CODE_TOKEN>

It'd be nice if the `fill_in` method could just pick up on the placeholder attributes instead and make that code a little nicer.
",rpowelll,2012-10-30 13:24:50
854,2012-10-30 13:12:43,"IIRC this is already fixed on master.
",jnicklas,2012-10-30 13:24:50
854,2012-10-30 13:14:17,"I had a look through the codebase just now and it doesn't seem to be anywhere in there.
",rpowelll,2012-10-30 13:24:50
854,2012-10-30 13:22:16,"Looking around it seems like it should work, `XPath::HTML#locate_field` does in fact check for placeholders, so it looks like this has actually been fixed. Feel free to close this issue.
",rpowelll,2012-10-30 13:24:50
854,2012-10-30 13:25:06,"Okay, cool. We should probably document this somewhere though ;)
",jnicklas,2012-10-30 13:24:50
854,2013-02-28 20:15:07,"Thanks for this!
",dgilperez,2012-10-30 13:24:50
853,2012-10-30 10:04:07,"I'm new to rails, using capybara to test my rails app. I want to add a header hash value like {'HTTP_ACCEPT_LANGUAGE' => 'zh-CN'}, what I do in spec_helper.rb is:

<S_CODE_TOKEN>

but  it is not working(the header value can't be assigned to request.env). And I know the rack_test driver is the default one, how can I change the header instead of register it again?
",firsthym,2012-10-30 12:00:47
853,2012-10-30 10:17:14,"I find a module method ''current_driver"", the code isn't working either

<S_CODE_TOKEN>

the errors:
:in `<top (required)>': undefined method`header' for :rack_test:Symbol (NoMethodError)
",firsthym,2012-10-30 12:00:47
853,2012-10-30 12:00:47,"The option you are looking for is called `:headers` with an `s` at the end.
",jnicklas,2012-10-30 12:00:47
853,2012-10-30 12:01:07,"Also, please ask questions at the mailing list, not on this issue tracker.
",jnicklas,2012-10-30 12:00:47
853,2012-10-31 00:45:59,"I find the header method on this link: http://rubydoc.info/github/jnicklas/capybara/Capybara/RackTest/Driver#header-instance_method
How can I call this instance method instead of registering the rack_test again?
(Sorry to put the question here.)
",firsthym,2012-10-30 12:00:47
852,2012-10-26 08:28:35,,sly7-7,2012-10-26 08:35:45
851,2012-10-25 07:49:29,"What I did: Tried to set a scenario to pending by using xscenario.

What I expected to happen: the scenario would be set to pending when I ran my specs.

What happened instead: undefined method 'xscenario.'

Since scenario is an alias for it, I figure xscenario should be an alias for xit (except xit adds some extra text, so I aliased xscenario to pending, the text-free version). Alas, I couldn't think of a better way to test this. Thoughts?
",koriroys,2012-10-30 12:26:25
851,2012-10-26 08:16:52,"I'm okay with adding this alias, but this really does NOT need to be documented in the README. Also, I don't understand why you aren't aliasing to xit.
",jnicklas,2012-10-30 12:26:25
851,2012-10-26 16:28:36,"I can take out the readme bit. You're right it's not really necessary.

I initially wanted to just alias it to xit, but doing that adds the message ""temporarily disabled with xit.""

https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/example_group.rb#L96
",koriroys,2012-10-30 12:26:25
850,2012-10-24 11:52:42,"Hello,

I have a problem, when i try to use that (when my element is not displayed) :

<S_CODE_TOKEN>

It does not seem to work, test fails.  If I display the element, this test pass ; 

<S_CODE_TOKEN>

Is it a bug? Anyone already for this problem?
",sebfie,2012-10-24 15:36:11
850,2012-10-24 15:30:39,"Which version of Capybara are you running?
",jnicklas,2012-10-24 15:36:11
850,2012-10-24 15:32:46,"I am using  capybara (1.1.2)
",sebfie,2012-10-24 15:36:11
850,2012-10-24 15:36:11,"The behaviour with visible/invisible content is very hard to define, because no matter what way you twist it, you're bound to get ir wrong/unintuitive in some cases. Some drivers, notably Selenium, aren't going to pretend that any text is invisible just does not exist, and there isn't much we can do about that. Whether this is a bug is quite subjective, but unfortunately, whether it is one or not, I don't think we can fix it. We've changed how has_content? is implemented in Capybara 2, which should give at least somewhat more consistent results.
",jnicklas,2012-10-24 15:36:11
850,2012-10-24 16:22:29,"ok, so i will do with that :) 
",sebfie,2012-10-24 15:36:11
849,2012-10-19 15:03:52,"IMO

<S_CODE_TOKEN>

Should work the same as:

<S_CODE_TOKEN>

The former of the two results in a massive failure, the first works.  To me (and this is just an opinion) there is no need to force us to constantly create strings when we can reuse a symbol that is already defined and used constantly throughout the entire code set.
",envygeeks,2012-10-19 15:09:37
849,2012-10-19 15:09:36,"It turns out that this would create weird edge cases, because we use symbols for other things too, e.g. `find(:link, 'foo')`. There has actually been some discussion on this before. We used to support symbols, but [changed](https://github.com/jnicklas/capybara/issues/783#issuecomment-8405751) it back recently, because it turned out to be a bad idea.
",joliss,2012-10-19 15:09:37
849,2012-10-22 21:23:23,"Not sure you guys are talking about the same thing. We do explicitly cast to string for everything we could think of in Capybara 2. So it would have worked just as you specified.
",jnicklas,2012-10-19 15:09:37
849,2012-10-22 21:33:32,"@jnicklas it didn't, it failed with `:first_name` but passed with `""first_name""`
",envygeeks,2012-10-19 15:09:37
849,2012-10-22 21:57:56,"Are you running on master? As I said in Capybara 1.x your example would have failed, in Capybara 2 (i.e. master branch) it wouldn't have.
",jnicklas,2012-10-19 15:09:37
849,2012-10-23 11:44:49,"@jnicklas when will you publish the version 2? Do you have any idea?
",fabianoalmeida,2012-10-19 15:09:37
849,2012-10-24 15:29:26,"@fabianoalmeida when it's done ;) Soon.
",jnicklas,2012-10-19 15:09:37
848,2012-10-17 16:35:31,"Firstly, I appreciate how hard it is to debug this issue, or even figure out if Capybara is indeed at fault, but I believe Capybara and or the Capybara-Webkit driver is the most likely culprit.  So I appreciate any help if you can help.

I am on OS X 10.8.1 with the latest version of all gems, QT webkit and Ruby 1.9.3 available.  I'll post the info further down for your reference.

I have found that recently when running a few small Cucumber tests using `rake cucumber:wip` everything tends to work fine.  However, when I run the full suite I find the tests just hang for some reason, and never fix themselves.  I have seen this in my CI environment (Mac as well, but OS OX 10.7) as well.  And I only seem to see this when Capybara-Webkit is enabled, however it does seem to hang sometimes before Capybara-Webkit is invoked.

For example, in my most recent run, I ran `rake cucumber` and 34 scenarios across 5 feature files ran OK, and then oddly when I hit the 6th feature file (one of many more), it hung on the first scenario.

Here is the output from the test on that scenario showing, and importantly it does not seem like the @javascript interpretor has yet been invoked (I use capybara-webkit) as it got stuck on the Background portion:

<S_CODE_TOKEN>

The @javascript declaration in fact comes later in the scenario declaration, not in the background section, so to be honest I'm not sure if Capybara detects that in advance and switches to the :javascript driver, or if it only switches when the Scenario starts that is tagged with @javascript.

Anyway, clearly it is hanging on the next step in the Background which is `And I am signed in as ""John""`
The code for this step is as follows:

<S_CODE_TOKEN>

Now I could include all the code for this step if you want, but it's all pretty bog standard Capybara code.  For example, here are two of the steps:

<S_CODE_TOKEN>

So why it should hang on this step confuses me.  There is certainly nothing in those steps that warrants any odd behaviour, and if I run that test individually it works just fine.

Has anyone else experienced this intermittent behaviour?  Is there some way I can start to debug the issue or provide more information?

Here is some info on my environment:

OS X Version: 10.8.1
Ruby: ruby-1.9.3-p194 using RVM
XCode version:  4.5.1

$ gcc --version
    i686-apple-darwin11-llvm-gcc-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)

$ bundle list
Gems included by the bundle:
- Ascii85 (1.0.2)
- ZenTest (4.8.2)
- actionmailer (3.2.8)
- actionpack (3.2.8)
- activemodel (3.2.8)
- activerecord (3.2.8)
- activeresource (3.2.8)
- activesupport (3.2.8)
- acts_as_list (0.1.8)
- addressable (2.3.2)
- arel (3.0.2)
- autotest (4.4.6)
- autotest-growl (0.2.16)
- autotest-rails (4.1.2)
- awesome_print (1.1.0)
- bcrypt-ruby (3.0.1)
- builder (3.0.3)
- bundler (1.2.0)
- capybara (1.1.2)
- capybara-screenshot (0.2.2)
- capybara-webkit (0.12.1)
- childprocess (0.3.5)
- chunky_png (1.2.6)
- coderay (1.0.8)
- columnize (0.3.6)
- compass (0.12.2)
- compass-960-plugin (0.10.4)
- compass-rails (1.0.3)
- cucumber (1.2.1)
- cucumber-rails (1.3.0)
- database_cleaner (0.9.1)
- debugger (1.2.0)
- debugger-linecache (1.1.2)
- debugger-ruby_core_source (1.1.3)
- deep_merge (1.0.0)
- devise (2.1.2)
- devise-encryptable (0.1.1)
- diff-lcs (1.1.3)
- ejs (1.1.1)
- email_spec (1.2.1)
- erubis (2.7.0)
- exceptional (2.0.32)
- excon (0.16.4)
- execjs (1.4.0)
- factory_girl (4.1.0)
- factory_girl_rails (4.1.0)
- ffi (1.1.5)
- foreman (0.60.0)
- fssm (0.2.9)
- gherkin (2.11.4)
- growl (1.0.3)
- haml (3.1.7)
- hashery (2.0.1)
- heroku (2.32.11)
- heroku-api (0.3.5)
- heroku_san (3.0.4)
- hike (1.2.1)
- hpricot (0.8.6)
- httparty (0.9.0)
- i18n (0.6.1)
- journey (1.0.4)
- jquery-rails (2.1.3)
- jslint_on_rails (1.1.1)
- json (1.7.5)
- kgio (2.7.4)
- launchy (2.1.2)
- libwebsocket (0.1.5)
- mail (2.4.4)
- method_source (0.8)
- mime-types (1.19)
- multi_json (1.3.6)
- multi_xml (0.5.1)
- netrc (0.7.7)
- newrelic_rpm (3.4.2)
- nokogiri (1.5.5)
- orm_adapter (0.4.0)
- pdf-reader (1.2.0)
- pg (0.14.1)
- polyglot (0.3.3)
- prawn (0.12.0)
- pry (0.9.10)
- pry-rails (0.0.4 6dd39e3)
- quiet_assets (1.0.1)
- rack (1.4.1)
- rack-cache (1.2)
- rack-force_domain (0.2.0 ff16ac9)
- rack-ssl (1.3.2)
- rack-test (0.6.2)
- rails (3.2.8)
- railties (3.2.8)
- raindrops (0.10.0)
- rake (0.9.2.2)
- rdoc (3.12)
- recursive-open-struct (0.2.2 8178fa5)
- redis (2.2.2)
- redis-namespace (1.0.3)
- rest-client (1.6.7)
- rspec (2.11.0)
- rspec-core (2.11.1)
- rspec-expectations (2.11.3)
- rspec-mocks (2.11.3)
- rspec-rails (2.11.0)
- ruby-rc4 (0.1.5)
- ruby_parser (2.3.1)
- rubyzip (0.9.9)
- sass (3.2.1)
- sass-rails (3.2.5)
- selenium-webdriver (2.25.0)
- sequel (3.20.0)
- sexp_processor (3.2.0)
- shortly (0.3.3)
- shoulda-matchers (1.4.0)
- sinatra (1.0)
- slop (3.3.3)
- sprockets (2.1.3)
- taps (0.3.24)
- thor (0.16.0)
- tilt (1.3.3)
- timecop (0.5.2)
- treetop (1.4.11)
- ttfunk (1.0.3)
- turbo-sprockets-rails3 (0.1.15)
- tzinfo (0.3.33)
- uglifier (1.3.0)
- unicorn (4.3.1)
- vanity (1.8.0 dda319f)
- warden (1.2.1)
- watchr (0.7)
- webrat (0.7.3)
- will_paginate (3.0.3)
- xml-object (0.9.93)
- xpath (0.1.4)

$ brew info qt
    qt: stable 4.8.3 (bottled), HEAD
    http://qt.nokia.com/
    /usr/local/Cellar/qt/4.8.2 (2753 files, 195M)
    /usr/local/Cellar/qt/4.8.3 (2779 files, 194M) *
    https://github.com/mxcl/homebrew/commits/master/Library/Formula/qt.rb
    ==> Options
    --developer
      Compile and link Qt with developer options
    --with-qt3support
      Enable deprecated Qt3Support module
    --with-debug-and-release
      Compile Qt in debug and release mode
    --with-qtdbus
      Enable QtDBus module
    --universal
      Build a universal binary
    --with-mysql
      Enable MySQL plugin
    --with-demos-examples
      Enable Qt demos and examples
    ==> Caveats
    We agreed to the Qt opensource license for you.
    If this is unacceptable you should uninstall.
",mattheworiordan,2013-02-25 08:03:22
848,2012-10-17 22:28:11,"Are you by chance using _both_ the selenium driver _and_ capybara-webkit in the same suite? I've had a similar problem, which only happened on some machines, where the suite would hang, but only if the entire suite was run. I eventually figured out that it was perfectly possible to run the entire suite under capy-webkit, or under selenium, it just didn't work to mix the two. I have no idea why though, and all my debugging efforts were inconclusive.
",jnicklas,2013-02-25 08:03:22
848,2012-10-17 22:52:21,"Hi @jnicklas, I am running both, because I need Selenium for some more tests which Capybara-Webkit is not capable of doing (such as drag & drop).  Interesting you had a similar issue.  I'll look into a way to run the tests independently to see what happens.  Thanks for the reply.
",mattheworiordan,2013-02-25 08:03:22
848,2012-10-23 13:07:39,"We're seeing what appears to be the same issue here. The only common thing between the two environments seems to be the version of OS X that we're working with.

We're locked into some technical debt running capybara 1.0.1 and capybara-webkit 0.11.0.

We notice the same issues when running with the selenium driver and have reinstalled QT and all gems, so it appears the issue may be lower level related to the OS somehow.

Our application uses subdomains so we've had to set the `Capybara.default_host`. Is this something you've had to do with your setup too?
",nhance,2013-02-25 08:03:22
848,2012-10-26 12:46:58,"@mattheworiordan try running rspec with `rspec -t ~driver:selenium`, this should filter out all examples which are tagged with :driver => :selenium. See if that passes.

@nhance you're running really old stuff, it's difficult to say anything if you aren't on recent versions.
",jnicklas,2013-02-25 08:03:22
848,2012-10-26 17:18:00,"Unfortunately I am using Cucumber, so that command would not work.

However, I tried with Cucumber using `cucumber --tags ~@selenium` and it still failed unfortunately i.e. no selenium tests were executed and yet Capybara still hung :(
",mattheworiordan,2013-02-25 08:03:22
848,2012-11-14 15:42:04,"I suffer from this issue as well, but interestingly I only suffer from it when I use capybara-webkit 0.13.0. When I downgrade back to 0.12.1 the problem goes away. Also, I don't use selenium as a driver anywhere, so that couldn't be the problem in my case.
",grozen,2013-02-25 08:03:22
848,2012-11-22 11:52:56,"I also have this issue and have reverted to capybara-webkit 0.12.0 (works again).

When it would hang on a test, it usually wouldn't execute anything in that test (I put in print statements). A minority of the time it would execute the first print statement before hanging.

Some webkit tests would run 100% of the time. Others would run about 20% of the time.

I'd usually run tests individually while debugging this problem, but seemed to have the same results running a whole file at once.
",bbarton,2013-02-25 08:03:22
848,2012-12-05 06:36:37,"I have the same issue and had to revert to capybara-webkit 0.12.1.

capybara-webkit 0.13.0 seems to indefinitely wait for server answer on random instructions. Tests pass almost always when I launch them one by one but `rake test:integration` almost always fails (it hangs forever) on random test.

In case it's relevant, I use Qt version 4.8.1.

PS: Thanks for you great work!
",eric-smartlove,2013-02-25 08:03:22
848,2013-01-10 11:13:40,"I've had the same issue with some tests. Reverting back to capybara-webkit 0.12.1 as eric-smartlove did solved the problem.
",cicloon,2013-02-25 08:03:22
848,2013-02-25 08:03:22,"Not sure what to do with this issue. I'm not sure everyone is having the same issue, I'm not even sure this is an issue in Capybara. We would really need something conclusive to track this down. I'm closing this issue for now, if anyone can provide further evidence of this bug, whatever it is, please open a new issue and reference this one.
",jnicklas,2013-02-25 08:03:22
848,2013-02-25 10:54:46,"I said above I had the problem with capybara-webkit 0.13.0. I used it with capybara 1.1.4.

Since I use capybara-webkit 0.14.1 (or 0.14.2) with capybara 2.0.2, I don't have the problem anymore.

I guess you're right to close this issue.
",eric-smartlove,2013-02-25 08:03:22
848,2013-04-05 12:47:01,"I just found this issue. For me, it is hanging up when I try to choose a radio button. Here:

<S_CODE_TOKEN>

I am using `capybara` and `capybara-webkit` from master. 

I tried moving back to this:

<S_CODE_TOKEN>

But it still hangs on `choose` and `:webkit_debug` shows me this:

<S_CODE_TOKEN>
",etagwerker,2013-02-25 08:03:22
848,2013-04-05 14:23:49,"Capybara has no `with_scope` method. Not sure what's going on there, but obviously you're using some kind of third party code.
",jnicklas,2013-02-25 08:03:22
848,2013-04-05 14:54:00,"Sorry about that. Here is the code for`with_scope`. It just uses [Session#within](http://rubydoc.info/gems/capybara/2.0.2/Capybara/Session#within-instance_method)

<S_CODE_TOKEN>

Thanks for your quick response!
",etagwerker,2013-02-25 08:03:22
848,2013-04-10 21:41:05,"I have exactly same problem. This problem appeared when i migrated from rails 3.2.11 to 3.2.13. I thought that problem was in Capybara so i updated it to version 2.1.0 (also i updated rspec to 2.13.0). Also i use selenium-webdriver. I noticed that `bundle install` help me to solve the problem temporaly. 
",Loremaster,2013-02-25 08:03:22
848,2013-04-23 16:13:58,"subscribe
",houen,2013-02-25 08:03:22
848,2013-04-23 18:58:59,"@houen there is actually a subscribe button FYI ;)
",jnicklas,2013-02-25 08:03:22
848,2013-04-24 05:20:44,"@jnicklas haha, yeah you're right - i feel silly now :-) sorry for polluting the thread
",houen,2013-02-25 08:03:22
848,2013-08-22 00:19:25,"I ran into this issue as well - a pretty perplexing one. But the advice on this page worked for me: http://stackoverflow.com/questions/9558777/webkit-server-hangs-periodically-when-run-from-capybara-in-ruby

Specifically, I switched to using thin:

<S_CODE_TOKEN>
",Empact,2013-02-25 08:03:22
848,2014-08-06 13:35:12,"I had this problem (running tests individually worked but running the suite hung up), ran `rspec spec -t ~driver:selenium` and it finished but only with that tag. Interestingly, the default browser on my machine was set to firefox (v.31) and when I switch the default on my machine (not capybara) to chrome the problem vanished.
selenium-webdriver (2.42.0)
rspec-core (2.14.7)
capybara (2.1.0)
rails (4.0.1)
",rreinhardt9,2013-02-25 08:03:22
848,2015-08-28 15:14:25,"Hi,

I am having this issue too. When I run an individual test, it runs fine. But when I run the whole suite it hangs 33% of the time.

capybara (2.4.4)
capybara-webkit (1.6.0)
rails (4.2.4)
qt5: stable 5.5.0

<S_CODE_TOKEN>

It hangs on a `visit('')`.
",Nerian,2013-02-25 08:03:22
848,2015-08-28 15:18:55,"@Nerian since you're using capybara-webkit as your driver you should probably look over in that project
",twalpole,2013-02-25 08:03:22
847,2012-10-17 10:24:13,"Hi all,

I am using a custom matcher in one of my applications to ease finding images in a page (I use this a lot when testing integrations with Gravatar and other sources of avatars for users.)

The matcher is pretty simple, and works well for me.

<S_CODE_TOKEN>

The reason I've opened an issue is I'd like to find out if this is something you'd consider adding to Capybara itself? I can implement it and send through a PR if you like the idea of supporting this out-of-the-box.

I can stick with the custom RSpec matcher and close this issue if not. I'm not sure whether this is something people do that often.

All the best, James.
",jcf,2012-10-26 08:23:53
847,2012-10-26 08:23:49,"I am not totally against this, it would be neat, but the way you implemented it isn't ready for inclusion into Capybara. So if you send a well tested pull request which follows the conventions set in Capybara itself, then I would merge it.

I would expect to be find images by their ""alt"" attribute as well as their source.
",jnicklas,2012-10-26 08:23:53
847,2012-10-26 08:24:38,"I am closing this issue, since I don't like having feature requests lying around on this issue tracker. If you want this feature, send a pull request and we can discuss it further ;)
",jnicklas,2012-10-26 08:23:53
847,2012-10-26 08:27:56,"Will do. :)
",jcf,2012-10-26 08:23:53
846,2012-10-14 23:02:06,"I'm testing in RSpec, and I'm testing if delete links like these:

<S_CODE_TOKEN>

have a good non-JavaScript fallback.

I read in the readme that the `:rack_test` driver doesn't have support for Javascript, so that was perfect for me. But it apparently does, because clicks on those links in the specs still issue a DELETE request, instead of a GET one.

I tried passing in `js: false` to the example, but it didn't work. Is there another way to disable JavaScript?

P.S. I checked in the example itself, just in case, the `:rack_test` is certainly being used (I called `Capybara.current_driver`).
",janko-m,2012-10-15 00:17:14
846,2012-10-14 23:42:28,"The :respect_data_method option which can be set on the driver is what you're looking for -  When the  option is false all clicks on links will send GETs, and will not set the _method parameter to the value of the data-method attribute
",twalpole,2012-10-15 00:17:14
846,2012-10-15 00:17:14,"Wow, yes, this was what I was looking for. Thanks :)
",janko-m,2012-10-15 00:17:14
845,2012-10-13 16:06:05,"When start the second `visit` always got 

<S_CODE_TOKEN>

Using Mountain Lion, Capybara-webkit 0.2.1, Qt version 4.8.3, Capybara 1.1.2
Anyone can help me? thx
",camsong,2012-10-13 16:17:56
845,2012-10-13 16:17:56,"Please ask on the mailing list, and post some more info about your test setup!
",joliss,2012-10-13 16:17:56
844,2012-10-07 18:00:51,"Capybara master has a new `has_text?` matcher which excludes invisible content such as `<title>` elements and `display: none` elements.

Its implementation uses the `Node#text` method, so the implication is that the behaviour of `Node#text` has now changed from returning all text to only returning visible text. This presents two problems:
- Users will have trouble upgrading if they are using `Node#text` directly, or `has_content?` (which is now just an alias of `has_text?`)
- There is no API for getting e.g. the text of the `<title>` element. This could be a valid user requirement and was previously supported by the `#text` method.

I propose adding a `#visible_text` method and using that to implement `has_text?`, leaving the implementations of `#text` and `#has_content?` as they are in 1.1. (`#has_content?` can be deprecated but I believe `#text` remains useful for checking e.g. `<title>` text.) WDYT?

Related: #522

cc @mkdynamic
",jonleighton,2013-02-20 13:30:58
844,2012-11-21 12:34:44,"+1 for not being able to query `<title>` after upgrading to 2.0.

`find(""title"").should have_content(""some text"")` now fails.
",ugisozols,2013-02-20 13:30:58
844,2012-11-28 15:57:35,"+1 for troubles with `<title>` in 2.0

<S_CODE_TOKEN>

will fail on `<head><title>Some Title</title></head>` 
",demetrios,2013-02-20 13:30:58
844,2012-11-28 16:11:48,"Wouldn't you guys rather have an explicit API for testing the page title, rather than changing the behaviour of #text just for this? That seems much more sensible to me.
",jnicklas,2013-02-20 13:30:58
844,2012-11-28 16:18:42,"OK with me...just point me to it.
",demetrios,2013-02-20 13:30:58
844,2012-11-28 16:21:01,"There isn't one, because no one has bothered to build one.
",jnicklas,2013-02-20 13:30:58
844,2012-11-28 16:24:01,"Wish I could help...but I've never worked on a gem and would only cause more problems...
",demetrios,2013-02-20 13:30:58
844,2012-11-28 16:25:55,"Maybe there should be a way to get content of every tag, even if it is not visible.
",Mic92,2013-02-20 13:30:58
844,2012-11-28 16:29:06,"I think the problem is that the railstutorial makes heavily use of this feature (check the title) and people tend to copy these examples.
",Mic92,2013-02-20 13:30:58
844,2012-11-28 17:01:05,"Yup, that's my problem. I learned TDD & RSpec from railstutorial.org and as such most of my projects carry with them some basic structure gleaned from there. After upgrading projects to 2.0 my title specs are failing everywhere. 

FWIW, it's a little confusing to a relative newb like me when this is happening:

<S_CODE_TOKEN>

…and according to http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Node/Matchers#has_selector%3F-instance_method we should be able to find elements containing `text:`. Now maybe those docs are for 1.x…but that's not clear either...to me anyway.

If there's an alternative way to easily test the title in a feature spec let me know and I'll go away…leaving you all to continue your great work!
",demetrios,2013-02-20 13:30:58
844,2012-12-02 07:59:08,"+1 for not being able to query <title> after upgrading to 2.0.
",anilali,2013-02-20 13:30:58
844,2012-12-02 18:29:44,"Adding a `#has_title?` matcher sounds like a decent solution to me. I'll tweet about in and see if I can get someone to step up to do the work.
",jonleighton,2013-02-20 13:30:58
844,2012-12-15 11:17:22,"IMO the behavior of 2.0 is completely broken. In 1.1.4 `page.find(""title"").text` returns the text, in 2.0 it returns an empty string. Returning an empty string is just wrong when the element does contain text.
",gucki,2013-02-20 13:30:58
844,2012-12-15 20:34:13,"My original reason for wanting the `has_text` matcher (#522) was to be able to test specifically for 'text visible to the user'.

The title tag **is** visible text, it's shown in the browser chrome.

Given that, I think it would be ideal if the title text was included.
",mkdynamic,2013-02-20 13:30:58
844,2012-12-15 21:54:33,"@gucki: the title tag _is_ an element and it is decidedly _not_ visible by default. Try adding this CSS selector to a page:

<S_CODE_TOKEN>

Boom, there is the title _element_ and it is quite distinct from the title shown in the browser chrome. This element is not visible, and if we follow the logic that the text of invisible elements is not shown, then it makes sense that the title _element_ has no text. I agree that that's a matter of debate and discussion, but I wouldn't go so far as to say that the current behaviour is broken. It's just a different interpretation.

I think the solution to this problem is two-fold:
1. Add some kind of other method which returns the text regardless of if it's visible or not. This could be an option to `#text` or a separate method.
2. Add an official API for retrieving the title of the page and querying it. Some work on this has already been done on this and I will take a closer look as soon as I have the time.
",jnicklas,2013-02-20 13:30:58
844,2012-12-15 22:38:52,"@jnicklas Well, it is visible :)
![](http://cl.ly/image/0g2E462s3Z3U/Screen%20Shot%202012-12-15%20at%202.34.51%20PM.png)

I do think it makes more semantic sense for `has_text` to include text from the title element. Since the whole idea behind `has_text` is to move away from the logical model of XML's notion of text and towards the notion of human readable text.

I think your suggested solution for #1 and #2 are a good idea, regardless.
",mkdynamic,2013-02-20 13:30:58
844,2012-12-16 10:25:15,"@jnicklas As you say, the elemenI itself is not visible - not only its content. So think it'd be more intuitive if `page.find(element)` would return `nil` if the element is not visible. But when `page.find(element)` returns an element, it should properly return its attributes and content as they are - no matter if it's visible or not.
",gucki,2013-02-20 13:30:58
844,2012-12-26 16:11:45,"It seems a bit unintuitive to me too that page.find(""title"").text shouldn't
work, but if it's architecturally messy to make it work, then we may have
to do without it. Jonas is the judge. :)
",joliss,2013-02-20 13:30:58
844,2013-01-02 10:20:41,"+1 for this problem, and also:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Which indicates the title tag is found, but the text inside it remains invisible.

Although a `page.title` would be a nice shorthand to have, it will only provide support for that one tag. How about meta tags, canonical links, etc.? In my humble opinion, `#find` etc. can return nothing when content is invisible, but xpaths should return visible and invisible content, so it can be used as a more ""advanced"" fallback for niche situations..

I'd be happy to help code it, once there is agreed on what to do with this btw!

Thanks.
",foxycoder,2013-02-20 13:30:58
844,2013-01-07 14:15:40,"Would be great to have a method that retrieves the text of an element independent of it's visibility. That method could also be used to retrieve the page title. So in my opinion no need for an extra page-title-method but wouldn't hurt of course.

If you keep the behaviour as earlier I would having #text returning always the text and e.g. #visible_text returning only text that is visible.

Best regards
Tobias
",agileapplications,2013-02-20 13:30:58
844,2013-01-07 18:13:38,"+1 can't query title text, but the following works ok:

<S_CODE_TOKEN>

Is there anything wrong with just doing that?
",murdoch,2013-02-20 13:30:58
844,2013-01-11 11:21:18,"The content of the title tag is definatively visible, so it should also be possible to check it.
",meredrica,2013-02-20 13:30:58
844,2013-01-11 12:56:20,"completely agree, the page title is the first thing checked in requests specs.
",molfar,2013-02-20 13:30:58
844,2013-01-14 10:34:34,"I also ran into this roadblock today and stumbled upon this solution; http://stackoverflow.com/a/13755730

Seems to work out pretty well for me, so lots of kudos to the creator (not me)!

I'm copy/pasting the solution because I want to save you guys a click.

---

I had the same issues when I upgraded to Capybara 2.0, and managed to solve them by creating the following custom RSpec matcher using Capybara.string:

**spec/support/utilities.rb**

<S_CODE_TOKEN>

Now, in a spec file where subject { page }, I can use:

<S_CODE_TOKEN>
",john-patrik,2013-02-20 13:30:58
844,2013-01-14 18:43:05,"+1 for not being able to query `<title>` after upgrading to 2.0.
",jsuwo,2013-02-20 13:30:58
844,2013-01-29 00:24:47,"Thanks @john-patrik. That's a great find and just what I needed. Something like this could be in Capybara by default as per @jnicklas's 2nd proposed solution above: https://github.com/jnicklas/capybara/issues/844#issuecomment-11411003
",LeahCim,2013-02-20 13:30:58
844,2013-02-08 05:38:55,"Has there been an official decision or progress made here? Both solutions would work and I feel a solution (even if it proves to be less than perfect) is better than none at all. -I hate not being able to get through a tutorial :)
",beaubrewer,2013-02-20 13:30:58
844,2013-02-18 21:02:46,"Closed by #960
",jnicklas,2013-02-20 13:30:58
844,2013-03-08 02:23:33,"I'd like to express my frustration about the breaking of backwards compatibility on the behavior of `have_selector('title', text: ...)`. As others on this thread have noted, many people use `have_selector` because of its use in the Ruby on Rails Tutorial. As the author that tutorial, it is my job to keep it up to date, and the lack of support for the previous behavior of `have_selector` is both frustrating for me and (because the necessary fix adds extra code) increases the complexity for beginning users. It is my hope that future iterations of Capybara will take more care to preserve current (and, in this case, logical) behavior.
",mhartl,2013-02-20 13:30:58
844,2013-03-08 07:52:05,"@mhartl we've gone out of our way to make this more intuitive for Capybara 2.1. We've added more control over whether to return only visible text or all text and we've added a new api for querying and asserting on the page title.

I'm sorry that behaviour broke this significantly for you, we didn't anticipate that this change would affect users. We had a lengthy beta period for Capybara 2.0, and this issue was not reported during that time. If it had, we could have done something about it sooner.

However, I don't agree that the way you are suggesting to query for the page title is a good idea. Once Capybara 2.1 is released, you should update the tutorial to suggest the use of `have_title`, which will be the official API from now on. `have_selector(""title"", text: ""something"")` might work or it might not, it depends on the driver. Imo, it's a perfectly valid interpretation for the title _element_ not to have any text.
",jnicklas,2013-02-20 13:30:58
844,2013-03-08 07:55:04,"@mhartl it just occured to me that since Capybara 2.1 will default `Capybara.ignore_hidden_elements` to `true`, and the title element is invisible, it won't be possible to query its content this way, visible text or not.
",jnicklas,2013-02-20 13:30:58
844,2013-03-08 17:03:31,"@jnicklas I actually never liked using `have_selector` in this context; in the original Rails 2.3 version of the book I used Webrat's `have_tag`, but that disappeared when Webrat was deprecated. Using `have_selector` was the closest, if imperfect, substitute. I agree that `have_title` is much better, and I'll plan to update the tutorial accordingly. Thanks!
",mhartl,2013-02-20 13:30:58
844,2013-03-18 20:06:21,"For reference, Capybara now has `have_title` in 2.1.0.beta1 as described here:

http://www.elabs.se/blog/60-introducing-capybara-2-1#asserting_against_the_page_title
",topfunky,2013-02-20 13:30:58
844,2013-03-22 00:51:50,"Awesome. I can confirm that this works with the Rails Tutorial sample app and have updated the beta book accordingly.

I noticed that the selenium-webdriver gem dependency didn't install automatically. Is that intentional? To get it to work, I had to add it explicitly to my Gemfile:

<S_CODE_TOKEN>
",mhartl,2013-02-20 13:30:58
844,2013-03-22 01:50:35,"@mhartl See issue #1018 for the Selenium fix.
",topfunky,2013-02-20 13:30:58
844,2013-04-19 05:53:53,"This work for me

get :home
assert_select ""title"", ""Ruby on Rails Tutorial Sample App | Home""

can see http://stackoverflow.com/questions/3971449/verifying-page-title-with-rspec
",husnainAshraf,2013-02-20 13:30:58
844,2013-05-29 05:52:38,"the solution @john-patrik posted above worked for me
http://stackoverflow.com/questions/13573525/rspec-capybara-2-0-tripping-up-my-have-selector-tests/13755730#13755730
",carlad,2013-02-20 13:30:58
844,2015-05-12 07:44:11,"I have one afternoon and half of the morning only with the title problem. Finally I found a solution and I just sign up to write it:

<S_CODE_TOKEN>

Good luck
",andresprogrammer,2013-02-20 13:30:58
843,2012-10-07 17:10:52,"Originally reported by jake.goulding@gmail.com in https://groups.google.com/d/topic/ruby-capybara/O3Ib6INOP58/discussion

There seems to be a race condition when nodes go away, and we filter on something (like `:text`).

Jake was nice enough to make a minimal sample app and add a `sleep` in the right place, so we can reliably reproduce this:

Demo repository for 1.1.2, with README explaining the issue: https://github.com/shepmaster/capybara-race
Just run `bundle exec rspec`.

Updated against master, or rather, 7fa75e5, the last commit before the rspec change: https://github.com/joliss/capybara-race
",joliss,2012-10-30 10:09:13
843,2012-10-07 18:26:40,"Interestingly I was just working on this issue today. @ramhoj and I discovered this a couple of weeks ago, kind of boggles my mind that no one has noticed it until now. It's damned difficult to write a test case for it though.
",jnicklas,2012-10-30 10:09:13
843,2012-10-07 18:27:39,"I know exactly what is causing the problem, but it's a bit difficult to explain and the solution is the easy part anyway ;)
",jnicklas,2012-10-30 10:09:13
843,2012-10-07 19:09:40,"I'm interested to see the solution. I had a few (bad) ideas:
1. Load all the data immediately instead of looking it up later, which seems really expensive.
2. Inform the driver what information you will want later and have it load e.g. the text, which seems to smear the logic all around the place.
3. Catch the error and retry, but then you have to catch the right error at all the right places.
",shepmaster,2012-10-30 10:09:13
843,2012-10-07 19:11:44,"> no one has noticed it until now

In our case, we've noticed the problem for weeks and/or months. Retriggering our automated build _usually_ causes the problem to go away, so we do that and move on. I'm sure lots of people have similar experiences.
",shepmaster,2012-10-30 10:09:13
843,2012-10-07 20:33:25,"We already have all the relevant logic in place. If this is the same issue that I've found, and I think it is, then this should actually be fixed on master. It also shouldn't be hard to fix for 1.1.x at all.

What's happening is that when an Element is initialized, we send in whatever selector was used to find that element. We can then use that selector to reload the Element at a later time, in case it has gone stale. Check out the implementation of first in Capybara 1.1.2:

<S_CODE_TOKEN>

The first three lines are where the bug occurs. We first extract the options from the arguments, this will actually remove them from the args array. Then we call `Capybara::Selector.normalize`, sending in all arguments, except we aren't because we just removed all the options. So effectively we are sending in the same selector, but without any options. Now #first itself will still work as intended, because we never actually use the options from the selector here. They only become useful when we try to reload the node. Which is why this appears as a race-condition/random failure, because if #first succeeds on the first try, everything is fine.
",jnicklas,2012-10-30 10:09:13
843,2012-10-09 12:59:28,"I'm trying to understand more, so just let me know when I'm too annoying and I'll stop asking questions. :-)

If the problem is because the selector doesn't have the right options, then why is a `StaleElementReferenceError` exception thrown? Wouldn't it just be an error where the node is incorrectly found or not found? At which point is the node reloaded? I've only looked at `all`, but I think the same behavior would occur in `first` if you added a sleep between `find_in_base` and `matches_options`. That would then throw StaleElementReferenceError, which would need to be handled by `wait_until`, right?
",shepmaster,2012-10-30 10:09:13
843,2012-10-09 20:03:01,"Hmm, that's a good point. The only scenario where this would throw a `StaleElementReferenceError` would be if the lack of options would cause the reload to fail, which would only occur if the lack of options would cause there to be _less_ results. AFAIK the only option which _increases_ the number of nodes found would be `visible: false` if `Capybara.ignore_hidden_elements` is set to true. I don't think that is the case here. I will investigate this further. Let me know if you come up with any further insights.
",jnicklas,2012-10-30 10:09:13
843,2012-10-19 21:02:53,"What about this idea.

from Capybara::Node::Element#reload

<S_CODE_TOKEN>

What is the expected code flow when the element appears (so `@base` is originally set), then we reload waiting for the element to disappear? If the element disappears, reloaded would be nil, so it wouldn't replace `@base`, which still points to the old element. Then we eventually run out of retry time and fail.
",shepmaster,2012-10-30 10:09:13
843,2012-10-26 12:22:26,"I finally had some time to look at this problem, and I think I understand what's happening now. Your description of the error seems spot on to me. I ran RSpec in a loop and the problem only manifested after 20 or so successful attempts, so it seems the race condition is quite rare, and that's to be expected, considering it would only occur if the element is deleted between when it is found and Capybara checks the text content.

When #text is called, it tries to reload the element it is being called on, for a period of time. Unfortunately this doesn't help us in this case, since the Element is gone, and not coming back, so #text tries in vain to reload it. In this case we would have been satisfied with the element being gone, and we could have simply returned a negative match.

We could change the behaviour of #text to return `nil` if it can't reload the element, but I'm not sure I like the implications of that. What is the content of an element that no longer exists? Is it an empty string, nil? An exception seems like the most sane response to asking for the text of an element that doesn't exist. This would also throw us into a loop of waiting for the answer until we can get a valid element, which we never will.

I'm thinking we should have some way of bypassing synchronization entirely. I don't know exactly how that would work. Maybe have a method on the session which takes a block and call it something like `without_synchronizing` or something. Then we could wrap the text comparison in this bypass block. If it would fail, it would simply return nil.

The semantics of this are pretty weird, so I'm not really sure how to make this understandable.
",jnicklas,2012-10-30 10:09:13
843,2012-10-26 17:46:07,"I'm surprised that you saw it reproduce so infrequently. The testcase I created has large sleeps that should make it very easy to trigger - I saw it reproduce 100%. In the wild it would certainly be harder to reproduce.

I agree that `#text` shouldn't be changed to return `nil`. That would confuse the semantics too much. This statement made me think though:

> What is the content of an element that no longer exists?

Existence is a first-class state of an element. Perhaps `Capybara::Node::Element` (or wherever appropriate) needs to have an `#exists?` method added. Then we can just check if the element exists. If the element doesn't exist inside `#has_selector`, then that would be a fast failure. Inside `#has_no_selector` it could be a fast success, equivalent to the current `results.empty` test.
",shepmaster,2012-10-30 10:09:13
843,2012-10-26 22:10:02,"Not a bad idea, but that would still leave us open to race conditions, what if it still exists when we call exists? and then ceases to exist just before we call #text.
",jnicklas,2012-10-30 10:09:13
843,2012-10-30 09:46:21,"This is a simplified version of the example app, in a single file, way easier to work with. https://gist.github.com/d5a497aa4a5ff52b2a8b
",jnicklas,2012-10-30 10:09:13
843,2012-10-30 10:11:11,"I couldn't come up with any way of testing this, short of running a loop until it fails, which isn't an awesome test case. So no tests for this, sorry.
",jnicklas,2012-10-30 10:09:13
843,2012-10-30 10:11:36,"Also, still working on fixing this on 1.1_stable, and we'll do a new gem release on that branch.
",jnicklas,2012-10-30 10:09:13
843,2012-10-30 10:13:14,"(forgot to change the git name on the machine I was working in, I authored that commit, not @ramhoj ;))
",jnicklas,2012-10-30 10:09:13
843,2012-12-01 12:02:16,"I get the same behaviour consistently using `expect(page).to have_css('.foo', count: 4)`
",wmadden,2012-10-30 10:09:13
843,2012-12-01 12:38:52,"In fact it occurs while generating the expectation failure message:

<S_CODE_TOKEN>
",wmadden,2012-10-30 10:09:13
843,2013-02-05 13:59:45,"I have the same problem using 
`expect(element).to have_text ""foo""`
inside synchronize method. And btw this exception appears regularly (I mean every time)
",ffess,2012-10-30 10:09:13
843,2013-02-05 16:46:52,"@ffess That's one reason you should be careful of using `synchronize`. It's a powerful methods, but it's semantics are very subtle. You will probably have to strategically call `unsychronized`, to fix these race conditions.
",jnicklas,2012-10-30 10:09:13
843,2013-02-05 16:58:25,"Hi jnicklas, I've asked on google groups how to use the synchronize method exactly, but no one answered me (I'm new to capybara and I use it about 2 months at all and lot of investigating didn't help me to learn how to use the method, but I really need it)

I found that while implementing the yield provided with synchronize method it should rescue the StaleElementReferenceError but it's not:(
",ffess,2012-10-30 10:09:13
843,2013-02-05 17:02:53,"Did you read this? http://www.elabs.se/blog/53-why-wait_until-was-removed-from-capybara

Unless you have a very good understanding of how the Capybara codebase works, I would recommend not to use `synchronize` at all, it's a very tricky method. If you really must use a waiting function, you can find one in the linked blog post, but I suggest you try to understand the point it makes and avoid using it in the first place, there are very few cases where you need to wait with Capybara.

As for the mailing list, I try to answer as many questions as I can, but sometimes I just don't have the time or energy.
",jnicklas,2012-10-30 10:09:13
843,2013-02-06 10:49:14,"Hi again,
Sorry for answering here, but I don't know how to contact you in other way.
I've read the article (not the first time but anyway) but it can't help me, I decided to avoid the synchronize method using. And now the line:
`expect(page).to have_selector(""#foo"", text: ""foo"")`
throws the

StaleElementReferenceError: findElements execution failed;
Element does not exist in cache

from the inside synchronize method. 
But am I right thinking that this particular exception should be rescued by synchronize method?
I concluded it from the line:
`raise e unless driver.invalid_element_errors.include?(e.class) || e.is_a?(Capybara::ElementNotFound)`
and
one of  `invalid_element_errors` is StaleElementReferenceError

upd: should I use the wait_until provided by you in https://gist.github.com/jnicklas/d8da686061f0a59ffdf7?
",ffess,2012-10-30 10:09:13
843,2013-03-10 00:23:13,"Yes, I have the same problem with using Selenium or Poltergeist.

I'm getting the following error

<S_CODE_TOKEN>

after using

<S_CODE_TOKEN>

Before it's triggered chosen.js' multiple select control which reloads a table. If I fire it step-by-step from pry console, there is no thrown exception :( 
",deepj,2012-10-30 10:09:13
843,2013-03-10 16:08:29,"We also have had similar issues.  However, this discussion form topic by @DimaSamodurov was helpful:

https://groups.google.com/forum/?fromgroups=#!topic/ruby-capybara/A64s_iUdSDE

In particular his fork at:
https://github.com/DimaSamodurov/capybara/tree/race-conditions

After modifying it to also check for driver-specific errors in his rescue statement, it seems like it cut down on our intermittent failures pretty significantly.  We're still seeing a couple but they now appear isolated to the same group of tests, which makes me think we either need to up the wait time on those (though I've tried that and it hasn't completely solved the problem) or that there's another lurking race condition in there somewhere that those tests trigger.  

Not sure when those changes will makes it into Capybara (I believe he's trying to provide tests before the pull request) but you might try that fork in the interim to see if it helps.
",jpurcell001,2012-10-30 10:09:13
843,2013-03-10 23:23:13,"Thank you for the tip. Unfortunately, it didn't help me. I've been trying to think how to solve this. I tried to use Jasmine and Selenium and I haven't met with this kind of problem before. Anyway, I'd like to still use RSpec and Capybara instead of Jasmine. I prefer Ruby to JavaScript.

In the past I didn't have a problem with Capybara and with testing RoR applications. It's the truth the applications haven't been so AJAX heavy as how it's current one +  it's Java enterprise application so I can't affect some things.

I tried Capybara from master and the problem is a bit more rare than with the last stable version but it still shows sometimes
",deepj,2012-10-30 10:09:13
843,2013-03-11 11:46:34,"I may know where is the problem. Unfortunately I don't know how to fix it yet.

I call before

<S_CODE_TOKEN>

my own selector which can control chosen.js' component. It makes AJAX call and load json into the grid

<S_CODE_TOKEN>

Here's the code:

<S_CODE_TOKEN>

It looks the javascript is not ""synchronized"". I believe these callings are the roots of problems :(
",deepj,2012-10-30 10:09:13
843,2013-03-11 13:06:01,"Hm, so I applied https://github.com/DimaSamodurov/capybara/commit/08f228181d44e81cf645243238572e06dff0908b to latest Capybara's master and it seems it works like a charm. I run our scenarios several times and any problem was caused. Thanks @jpurcell001 for your help! I probably don't need to change RSpec/Capybara to something else. I hope @jnicklas will take a look at the commit.
",deepj,2012-10-30 10:09:13
843,2013-03-11 16:28:48,"I haven't seen a pull request. If @DimaSamodurov wants his changes merged, then he should send a pull request. The commit in question is problematic in that it silently swallows exceptions, which is not a good thing. As far as I can see, it doesn't actually correct any incorrect behaviour, only change the failure message when something goes wrong.
",jnicklas,2012-10-30 10:09:13
843,2013-03-11 16:43:08,"@jnicklas In his comments on the forum he indicated he isn't ready for a pull request yet since he doesn't have tests, so no surprise.  And it could very well just be a placebo effect that make those changes appear to cut down on the intermittent failures.  But does the reasoning he lays out in the discussion forum (https://groups.google.com/forum/?fromgroups=#!topic/ruby-capybara/A64s_iUdSDE) make sense?  This would help those of us trying to track these issues down know whether his approach is a red herring, or whether there really are race conditions lurking there.  
",jpurcell001,2012-10-30 10:09:13
843,2013-03-11 16:56:15,"No, i don't want those changes merged. I realize that commit is a monkey patch solving my particular issue. I was not ready to propose a right solution and mentioned about. Currently i use master branch where several issues are addressed. 
",DimaSamodurov,2012-10-30 10:09:13
843,2013-03-11 19:38:54,"@deepj it's worth noting that @DimaSamodurov's changes only affect code which is only called under failure conditions anyway. The only thing the commit could have affected is that you would have been shown a different error message. It wouldn't affect whether your test passes or fails, unless you did something very, _very_ crazy.
",jnicklas,2012-10-30 10:09:13
843,2013-03-11 19:43:37,"Hmm, just saw that there was another commit on @DimaSamodurov's branch which could in fact affect success/failure. If you are actually seeing that is being beneficial, it would be excellent if you could isolate the kind of code which causes the race condition. Here's a simple template to start with: https://gist.github.com/jnicklas/5137053
",jnicklas,2012-10-30 10:09:13
843,2013-03-11 21:03:32,"Unfortunately I can't make a template from there (+ it's very hard to isolate - the page contains a lot of AJAX). But I'm trying something else. I believe the problem is the grid component. Anyway, how to choose this select: 

<S_CODE_TOKEN>

There is no `label` with `for`. I've tried something like `sess.find('ui-pg-selbox').select(with: '20')`. That's wrong. The documentation doesn't say anything how to make the similar thing. I know how to click on link but not `select` the find. Yes, it's my mistake.
",deepj,2012-10-30 10:09:13
843,2013-03-11 21:13:27,"Let's stay on point. Ask questions on the mailing list, please.
",jnicklas,2012-10-30 10:09:13
843,2013-03-11 21:19:39,"No, I need to know it to be able to prepare isolated code where is caused the problem :(
",deepj,2012-10-30 10:09:13
843,2013-03-11 21:47:29,"@jnicklas Thanks for your infinite help with the previous problem how to select the damn select. After rabid goggling how to do it I figure it out. I would appreciate you would to be more helpful. I have used Capybara from 0.2.0 version for all my Rails. It is the best tool for this. Unfortunately with testing external application I have been a bit surprised how many problems were discovered in my case.

I hope this will be helpful from me to you how to catch the problem. Unfortunately the exception is not thrown always. But you should be able to reproduce after serveral re-runs.

<S_CODE_TOKEN>

We should be both helpful together. Again, thanks for the Capybara. It helped me a lot in the past...
",deepj,2012-10-30 10:09:13
843,2013-03-11 22:11:28,"Fix you attitude or you're not going to receive any help. _I'm_ doing _you_ a favour here, not the other way around. Don't behave like you are entitled to help. You aren't.
",jnicklas,2012-10-30 10:09:13
843,2013-03-11 22:35:20,"I think I've isolated the cause of your problem, by the way. Working on a fix.
",jnicklas,2012-10-30 10:09:13
843,2013-03-11 22:43:56,"Yeah, if has_selector is called from the session there is no parent element
that has had allow_reload set on it, so the elements never actually reload

On Mon, Mar 11, 2013 at 3:35 PM, Jonas Nicklas notifications@github.comwrote:

> I think I've isolated the cause of your problem, by the way. Working on a
> fix.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/843#issuecomment-14747388
> .
",twalpole,2012-10-30 10:09:13
843,2013-03-11 22:49:37,"I believe any one of us are doing the other one a favour. You are able to try to solve more deeply my problem than me and to improve _our_ product for others and I am able to try to find the root of my problem than you (in this case). I would appreciate you consider I was trying hard\* to isolate the problem for you to be able to try solving _my_ problem. That was all what I could do in this situation. I would wish I could do more than only this. It is more effective when the both sides help together, mainly when someone has more knowledge or he/she is more able to figure it out than the other one.

From me thanks for any of your help. 

[*] I was already frustrated I couldn't be able to go through this stupid thing how to select the damn select. It's so stupid simple :( I was 100% sure I could reproduce.
",deepj,2012-10-30 10:09:13
843,2013-03-11 23:21:08,"@deepj okay, let's try to solve this together.

I've created a pull request, #1005, which I think solves the race condition you're experiencing. I ran the code you provided and could replicate the problem easily. With #1005, I let it run around 40-50 times without seeing the problem. I'm still not 100% sure what exactly caused the problem, but hopefully #1005 should prevent any similar race conditions from screwing things up in the future.
",jnicklas,2012-10-30 10:09:13
843,2013-03-11 23:35:01,"@jnicklas I dont think 1005 fixes this -- it might slow things down enough that the problem doesnt show, but I believe the real issue is that has_selector? doesnt set allow_reload on the result nodes like Finders#find does. Because of this the auto reloading doesnt actually occur.
",twalpole,2012-10-30 10:09:13
843,2013-03-11 23:45:25,"@twalpole in this case, auto reloading isn't necessary though, since the assertion is run on the session itself. Reloading the session would mean reloading the entire page. I'm not sure where you mean that has_selector? should set allow_reload, since it doesn't actually return a node.
",jnicklas,2012-10-30 10:09:13
843,2013-03-11 23:55:23,"@jnicklas correct and that I believe is actually the issue.  If  the has_selector? '#grid tbody tr', count: 20  manages to grab elements before the .click changes the page then it spins in synchronize getting the StaleElement exception and calling reload.  Unfortunately it cant reload, so does nothing and just goes until timeout.   I put two puts in Capybara::Node#reload so its whats below and its easy to see whats happening.  
      def reload
        puts ""in reload""
        if @allow_reload
          puts ""reloading""
          reloaded = parent.reload.first(@query.name, @query.locator, @query.options)
          @base = reloaded.base if reloaded
        end
        self
      end

If the line is changed to sess.find('#grid').has_selector? 'tbody tr', count: 20  then the reload can happen and the issue goes away
",twalpole,2012-10-30 10:09:13
843,2013-03-11 23:57:05,"@jnicklas In my case everything is green. The suite was re-run 20 times so I think it would be enough. Thank you
",deepj,2012-10-30 10:09:13
843,2013-03-12 00:20:30,"@jnicklas - Ah - nevermind I see how your patch fixes it.  It was an inner synchronize link that wasnt reloading, now it just fails out to the outer synchronize.
",twalpole,2012-10-30 10:09:13
843,2013-03-12 02:32:26,"@jnicklas Tried out the branch with poltergeist master and the vast majority of the failures appear to have gone away.  Now out of about 200 tests it looks like there are 2 that intermittently fail about 30% of the time (interestingly a different set than what was happening with Dima's patch).  Going to try to figure out if we can create a reproducible test case using the gist you provided.  In parallel, is an rspec -b backtrace helpful at all in potentially figuring out what's going on? 

Thanks for both the project and the ongoing assistance.

Jason
",jpurcell001,2012-10-30 10:09:13
843,2013-03-12 07:27:55,"@jpurcell001 stack traces are always helpful. The more the better :)
",jnicklas,2012-10-30 10:09:13
843,2013-03-12 14:00:17,"Trying to pull together a test case.

Here's a sample stack trace:

<S_CODE_TOKEN>

Another one, slightly different stack trace but same test failure:

<S_CODE_TOKEN>

This is a pretty basic test, so hopefully putting together a reproducible test case for you will be doable.  It is doing something like:

specify ""next button works"" do
   product_review_page.click_next_product
   product_review_page.header_name.should have_content(@products[1].name)  <= this is where it fails
end

where product_review_page.header_name is defined in a page object as 

def header_name
    within "".reviewProductRelations"" do
      find(""header h3"")
    end
end

Of course there is a lot of ajax going on, the click_next_product is causing much of the DOM to refresh, including the element found by within and by the explicit find() call (and of course the text referenced by the matcher as well).

Thanks
Jason
",jpurcell001,2012-10-30 10:09:13
843,2013-03-12 15:36:05,"@jpurcell001 there is nothing about in the stack trace that's immediately jumps out as being strange. If you could manage to write something executable that would be fantastic. Sometimes the obsolete node error could actually be legitimate, so we have to figure out if this is happening in Capybara itself or for some other reason.
",jnicklas,2012-10-30 10:09:13
843,2013-03-13 00:28:03,"@jnicklas Think I was able to put a gist together using your template that reproduces the problem.  Filed as #1009 with the gist link as a separate issue.  
That template is awesome by the way.  Removes all excuses for not putting a test case together ..
",jpurcell001,2012-10-30 10:09:13
842,2012-10-06 14:42:20,"I  have two projects which are hosted on different repos (1 private to me) the other private to a project owner whom I'm collaborating with on my first commercial project.

save_and_open_page gives me the following error:

`Genie/spec/requests/authentication_pages_spec.rb:47:in `block (3 levels) in <top (required)>': undefined local variable or method `save_and_open_page' for #<Class:0x007f89e27b9d28> (NameError)`

Here is the full stack trace.

`bundle exec rspec spec/requests/authentication_pages_spec.rb 
No DRb server is running. Running in local process instead ...
Genie/spec/requests/authentication_pages_spec.rb:47:in `block (3 levels) in <top (required)>': undefined local variable or method `save_and_open_page' for #<Class:0x007f89e27b9d28> (NameError)
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/example_group.rb:238:in `module_eval'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/example_group.rb:238:in `subclass'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/example_group.rb:224:in `describe'
    from /Users/railsdev/Development/railsprojects/Genie/Genie/spec/requests/authentication_pages_spec.rb:39:in `block (2 levels) in <top (required)>'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/example_group.rb:238:in `module_eval'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/example_group.rb:238:in `subclass'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/example_group.rb:224:in `describe'
    from /Users/railsdev/Development/railsprojects/Genie/Genie/spec/requests/authentication_pages_spec.rb:24:in `block in <top (required)>'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/example_group.rb:238:in `module_eval'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/example_group.rb:238:in `subclass'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/example_group.rb:224:in `describe'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/dsl.rb:18:in `describe'
    from /Users/railsdev/Development/railsprojects/Genie/Genie/spec/requests/authentication_pages_spec.rb:13:in `<top (required)>'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/configuration.rb:780:in `load'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/configuration.rb:780:in `block in load_spec_files'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/configuration.rb:780:in `map'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/configuration.rb:780:in `load_spec_files'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/command_line.rb:22:in `run'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/runner.rb:66:in `rescue in run'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/runner.rb:62:in `run'
    from /Users/railsdev/.rvm/gems/ruby-1.9.3-p125@genie-bb-v3-3/gems/rspec-core-2.11.1/lib/rspec/core/runner.rb:8:in `block in autorun'
Coverage report generated for RSpec to /Users/railsdev/Development/railsprojects/Genie/Genie/coverage. 192 / 409 LOC (46.94%) covered.`

I have also posted on SO under:

http://stackoverflow.com/questions/12760259/save-an-open-page-fails-to-work-error-message-indicates-method-not-found-but

What am I doing wrong, or do I need to fix this? I've been looking for a fix for 24hrs + now and its over my current level of understanding in terms of fixing it. It may not be a genuine error as I have it working on 1 project using the same rvm gemset. Having copied all the files from working project to non-working project for RSpec/Guard/spec_helper I cannot see any differences.

Can you provide me with a solution please or advise as to how to fix.

Thanks
",railyboy,2012-10-06 17:49:31
842,2012-10-06 17:49:31,"I thought closing would give me the ability to make a comment. This was a new user understanding error. I was using the method call in the wrong place outside of an 'it' block in RSpec. 
",railyboy,2012-10-06 17:49:31
841,2012-10-04 15:37:53,"I'm using capybara/poltergeist hoping there's an X-less way of scraping a javascript-driven website, so I'm executing this outside the context of a testing framework(rspec, testunit, etc)

Since I'm testing an external site, I don't have a rack app.  Is this going to be possible?

 ?> require ""capybara""
=> true

 ?> require ""capybara/dsl""
=> true

 ?> require 'capybara/poltergeist'
=> true

 ?> Capybara.javascript_driver = :poltergeist
=> :poltergeist

 ?> Capybara.app_host = ""http://www.google.com""
=> ""http://www.google.com""

 ?> p = Capybara.current_session
=> #Capybara::Session

 ?> p.visit('/')
ArgumentError: rack-test requires a rack application, but none was given
    from /Users/jsharpe/.rvm/gems/app/gems/capybara-1.1.2/lib/capybara/rack_test/driver.rb:14:in `initialize'
    from /Users/jsharpe/.rvm/gems/app/gems/capybara-1.1.2/lib/capybara.rb:247:in`new'
    from /Users/jsharpe/.rvm/gems/app/gems/capybara-1.1.2/lib/capybara.rb:247:in `block in <top (required)>'
    from /Users/jsharpe/.rvm/gems/app/gems/capybara-1.1.2/lib/capybara/session.rb:61:in`call'
    from /Users/jsharpe/.rvm/gems/app/gems/capybara-1.1.2/lib/capybara/session.rb:61:in `driver'
    from /Users/jsharpe/.rvm/gems/app/gems/capybara-1.1.2/lib/capybara/session.rb:157:in`visit'
    from (irb):7
    from /Users/jsharpe/.rvm/rubies/ruby-1.9.3-p194/bin/irb:16:in `<main>'
",josh-m-sharpe,2012-10-04 16:06:44
841,2012-10-04 16:06:44,"> ?> Capybara.javascript_driver = :poltergeist

This doesn't switch the driver. You want to switch `Capybara.current_driver` instead.

If you have more questions, please ask on the mailing list. This issue tracker is meant for reproducible bug reports only.
",joliss,2012-10-04 16:06:44
840,2012-10-03 23:53:33,"I use `let` all over the place in vanilla RSpec, but something just didn't feel right using it with the feature DSL. This pull request adds aliases for `let` and `let!` in the form of `given` and `given!`. It's only syntactic sugar but it helps remind me I'm writing acceptance tests.

Using these aliases, the DSL example in the README could be rewritten as:

<S_CODE_TOKEN>
",danryan,2012-10-04 06:04:05
840,2012-10-04 06:04:13,"I like it!
",jnicklas,2012-10-04 06:04:05
840,2012-10-04 14:20:29,"That's great @danryan. Congratulations! Simple and useful.
",fabianoalmeida,2012-10-04 06:04:05
839,2012-10-03 20:13:18,"Hello,

I am trying to make some requests tests in RSPEC, but in my project we are using font-face, but I don't know why the fonts are not showing up. Could you give me any information? I don't know if this is the right place to post this problem, but I didn't find anything on google or somewhere else. Any help will be appreciated.

thanks

[]'s
",thiagocifani,2012-10-04 13:32:06
839,2012-10-03 21:11:31,"I have no idea what you mean by ""not showing up"", but this doesn't sound like a bug to me. Why would it matter what font you are using in your tests?
",jnicklas,2012-10-04 13:32:06
839,2012-10-04 13:27:28,"Sorry, I think I've not been clear. What I was trying to say was that in my website, I am using font-face, but when I try to open the browser through capybara, every text on the site does not appear, just the images and layout, do you know what I am doing wrong? Do I need to setup some waituntil or sleep? All the links and other things are there, but the font is not rendered. I am using capybara with selenium driver.

[]'s
",thiagocifani,2012-10-04 13:32:06
839,2012-10-04 13:32:06,"Do you mean font-face, as in the CSS property? I doubt that changing the font would make all your text disappear, usually browsers fall back to a default font if they can't find what they're given. I can't tell you what's going on here, but it seems clear that this isn't a bug in Capybara. Selenium is a separate project, but to be honest, I doubt it's even a bug there. More likely it's some kind of difference with how the browser Selenium uses is configured. I'm closing this for now.
",jnicklas,2012-10-04 13:32:06
839,2012-10-04 13:38:35,"Thanks anyway for the fast answer. 
",thiagocifani,2012-10-04 13:32:06
838,2012-10-03 16:07:41,"Fixes mispelling of ""asynchronous"" in Key Benefits section.
",lukebaker,2012-10-03 16:34:14
837,2012-10-02 18:13:27,"I'm testing with cucumber, capybara and rack-test.

I want to send a delete request and then inspect the response.

I've found that the method `visit(url)` store the response in the object page which is a `Capybara::Session.`

Now I'm sending the delete request with the method `delete url` and then `follow_redirect!`. The problem here is that these methods store the response in the object `last_response` which is a `Rack::MockResponse`.

My web steps are built using the page object but I can't find the way to send a delete request with capybara and then inspect the response without using `last_response`.

Is this possible?
",bishma-stornelli,2012-10-02 18:24:34
837,2012-10-02 18:24:34,"No, that's actually not possible. Capybara cannot send delete requests.

If you are trying to test an API, check http://www.elabs.se/blog/34-capybara-and-testing-apis.

By the way, this issue tracker is meant for reproducible bugs only. If you have more question, the mailing list is a better place to ask.
",joliss,2012-10-02 18:24:34
836,2012-10-01 18:49:10,"I see that visit in this file:

<S_CODE_TOKEN>

does not support **https** as a prefix. Is there a reason?

Thanks.
",jasnow,2012-10-01 21:06:46
836,2012-10-01 19:55:11,"Are you referring to the `/^http/` match? That matches `https` as well.
",joliss,2012-10-01 21:06:46
835,2012-09-26 11:11:31,"I discovery that, if your DNS server is too slow or poor, you tests performance down drastically.

I think this is ISSUE of Capybara, because if tests is local, and all configurations of web server should tuning for local purposes and high performance.

An example, I have tests, with DNS optimization, boosted from 58 secs, to 3 secs. 

I Using MAC OS 10.7.5, and DNS router was a tplink, may be broken or overheaded network.

[stackoverflow issue](http://stackoverflow.com/questions/12588970/capybara-with-js-true-very-slow)

Thanks
",megabga,2012-09-26 14:19:00
835,2012-09-26 11:30:04,"Capybara by default runs your tests against 127.0.0.1, which, being an IP address, is not going to use DNS. If you've changed any settings and somehow have slow DNS which is slowing down your tests, I don't see how that's a fault in Capybara. Maybe I don't understand what you mean, could you provide an example of a test which is slow for you?
",jnicklas,2012-09-26 14:19:00
835,2012-09-26 13:46:47,"Ok, I will provide the test, sorry about my limited English, but still trying. I dont know what capybara do when its find ""describe ..., :js => true do"", may be starts another process of webrick to running with javascript. Thats the point, on this moment, if you have a poor DNS server, its running so slower.

Try this,

change your primary DNS for so far server, like 19.127.89.37 (Tokyo, Japan) (so far for me)

`Finished in 1 minute 48.89 seconds`

and now change again for so close server, like 8.8.8.8

`Finished in 11.85 seconds`

this is serious, caused a lot of problems for me, and 8 hours lost, but can improve capybara performance, happy side. 

Thanks
",megabga,2012-09-26 14:19:00
835,2012-09-26 14:19:00,"Hi, since Capybara doesn't use DNS at all, I can't see how this could be connected to Capybara. If you're connecting through a slow DNS server, and trying to access resources where you need to resolve hostnames, then obviously you're gonna have a bad time.

Consider that Selenium is a _real_ browser, so if you have any requests to external services, even client side requests (Google analytics for example), and your DNS is slow, the result will be a slow test. Make sure you're not hitting _any_ external resources anywhere, even client side.

Considering this I'm confident that this is not an issue with Capybara, unless you can prove otherwise. I'm closing this issue.
",jnicklas,2012-09-26 14:19:00
835,2012-09-26 14:38:27,"@megabga I can't reach the far-away DNS server you suggested. I still tried reproducing the slowness by putting a bogus DNS server. This way, any DNS requests would eat up a lot of time until they time out. On my system though, it looks like Selenium test times are not affected by it. I'm on an Ubuntu 12.04 VM on an OS X Lion host, with the host handling the networking.

I don't think it's impossible that something (like a reverse lookup on 127.0.0.1) might slow down Capybara/Selenium tests on some platforms if DNS is slow. However, we'd need more info to reproduce it - a minimal sample app for instance.
",joliss,2012-09-26 14:19:00
834,2012-09-25 09:45:34,"I'm using rspec 2.11.0 and capybara 1.1.2.

I have the following html:

<S_CODE_TOKEN>

I have the following test:

<S_CODE_TOKEN>

but I had to change it to the following to get it to pass correctly:

<S_CODE_TOKEN>

Can anyone explain why or is this a bug?

Thanks
",amnesia7,2012-09-25 11:14:15
834,2012-09-25 11:14:15,"Can you post this on the mailing list please? I'll respond there. This issue tracker is meant for reproducible bugs only.
",joliss,2012-09-25 11:14:15
834,2012-09-25 11:20:28,"D'oh! Just overwritten my own issue with a completely different one.
",amnesia7,2012-09-25 11:14:15
834,2012-09-25 11:45:52,"Here's your original text from my inbox: :)

Have_selector failing with count 

I'm using rspec 2.11.0 and capybara 1.1.2.

I have the following html:

<S_CODE_TOKEN>

I have the following test:

<S_CODE_TOKEN>

but I had to change it to the following to get it to pass correctly:

<S_CODE_TOKEN>

Can anyone explain why or is this a bug?

Thanks
",joliss,2012-09-25 11:14:15
834,2012-09-25 11:46:28,"Again, either should go to the mailing list, not this bug tracker.
",joliss,2012-09-25 11:14:15
833,2012-09-25 09:38:46,"There is a series of commits: First some minor corrections, then a test for the problem, then a patch.
",jarl-dk,2012-09-28 07:33:10
833,2012-09-25 09:40:23,"Many of the specs have been refactored.
",jarl-dk,2012-09-28 07:33:10
832,2012-09-24 22:15:47,"I cannot find a way to trigger a _CSS_ hover event. That is, if a menu shows on hover, there's no way to click the items in that menu.

I've found #116, but that seems to be about a (nonexistent) JavaScript hover event. The suggestion -- to use a `mouseover` event -- works great for JavaScript event handlers, but not `:hover` CSS styling.

The Poltergeist driver folks [think that there's merit to this](https://github.com/jonleighton/poltergeist/issues/106), but they want to hear guidance from this project.
",jamesarosen,2013-02-25 19:59:25
832,2012-10-03 09:33:30,"I have exactly the same problem with CSS menus using `:hover` to show DOM elements.
",szimek,2013-02-25 19:59:25
832,2012-10-03 13:39:44,"I think this will be tricky to get into the Capybara API, since it's not
supported in Selenium.

What I personally tend to do is something along the lines of

page.execute_script(""$('.element-that-would-be-shown-on-hover').css('display',
'block')"")

So far it works well enough.
",joliss,2013-02-25 19:59:25
832,2012-10-03 16:04:27,"@joliss is the policy that all parts of the capybara api must be supported by selenium?
",jonleighton,2013-02-25 19:59:25
832,2012-10-03 17:39:09,"I don't think there is a policy per se, but so far we've tried to only add features if we can reasonably expect them to be supported across drivers (minus RackTest). Selenium is Capybara's primary JS driver at the moment, so that's what I'd look at primarily.

Asking whether Selenium supports something is certainly a way to avoid features creeping in that turn out to be a pain to support cross-driver.
",joliss,2013-02-25 19:59:25
832,2012-10-04 17:39:34,"@joliss I guess I disagree. There are already differences between what drivers support, and this seems fine to me so long as it's clear to the user that their driver does/doesn't support something.

What seems more problematic is divergence between drivers. For example, capybara-webkit and poltergeist support several of the same things. Let's take resizing the window as an example. In capybara-webkit this is `page.driver.resize_window(x, y)` and in poltergeist it's `page.driver.resize(x, y)`. This means that if a user wants to switch from one to the other they have to change their code. Now I don't know if selenium does or doesn't support resizing the window, but supposing it doesn't I think there's still a lot of value in the capybara project deciding what the blessed API is, because then all the drivers that support that feature can implement it using the same API, increasing portability.

I have a rule that I won't allow Capybara to be monkey-patched in Poltergeist. This gives some indication to users about whether something is non-standard. So basically all non-standard stuff must be on `page.driver` rather than `page` (or a node).

So assuming Capybara doesn't standardise this feature, the only way to support it in poltergeist will be:

<S_CODE_TOKEN>

Which seems kind of a shame, really.
",jonleighton,2013-02-25 19:59:25
832,2012-10-26 08:20:04,"I'm okay with adding features to Capybara which are not supported by Selenium. But in that case I would like to have tests for it within Capybara itself. Obviously they wouldn't run for any of the bundled drivers, but at least it would be specified. So if someone can provide a pull request for hover for example, which they have run against some driver, then I would be okay with adding that.
",jnicklas,2013-02-25 19:59:25
832,2012-12-14 17:02:06,"Hey just wondering has anybody found a way to do a CSS hover using capybara (or poltergeist/phantomjs)?
",BartlomiejSkwira,2013-02-25 19:59:25
832,2012-12-15 12:08:25,"I think the problem is broader than hovering over an element. In the app that we are working on, we need to do that, move mouse to given coordinates on the page, resize the window, change scroll position... probably not a daily requirement for some, but currently using driver-specific features or injecting JavaScript to make stuff happen.

Even if not day-to-day feature for most projects, it is not uncommon that you have to make your JS aware of stuff like cursor position, window size, scrollTop etc. Maybe you would consider adding just the nice API to Capybara itself, so the drivers can catch up and implement it independently.

I would suggest ""try our best"" approach, with API similar to:

<S_CODE_TOKEN>

Maybe cursor and window objects would also have getters to find out current orientation, current cursor style, current window dimensions and scroll offsets - that would be useful for acceptance testing stuff like scrolling to given element or seeing if element behaves like a link, while being <span> for example a span (cursor change).

I probably can provide a pull request with stubs for such functionality, that then can be used by drivers to implement Capybara-compatible APIs.
",hubertlepicki,2013-02-25 19:59:25
832,2012-12-18 23:52:13,"@joliss wrote ""I think this will be tricky to get into the Capybara API, since it's not supported in Selenium.""

Why don't you like Selenium's [move_to](http://selenium.googlecode.com/svn/trunk/docs/api/rb/Selenium/WebDriver/ActionBuilder.html#move_to-instance_method)?
",abotalov,2013-02-25 19:59:25
832,2013-02-25 19:59:25,"Go, go @twalpole!
",jnicklas,2013-02-25 19:59:25
831,2012-09-24 20:05:39,"Hi,

So I found this stack http://stackoverflow.com/questions/11732400/multiple-sessions-with-rspec-and-capybara.  I tried `page.driver.post` but I get `private method 'post' called for #<Capybara::Driver::Webkit:0x007ff793edb420>`

I'm using capybara 1.1.2 and rails 3.2.8.

Any ideas on why this no longer works, or is there an alternative?

Many thanks!
",cj,2012-09-24 20:10:49
831,2012-09-24 20:09:28,"All the stuff inside of `page.driver` is not part of the public API. This particular method only exists in the RackTest driver, but not in Capybara-Webkit. I'd recommend finding some other way to accomplish what you're trying to do.

By the way, if you have more questions, please ask on the mailing list (I'm on it too). This issue tracker is meant for reproducible bugs.
",joliss,2012-09-24 20:10:49
831,2012-09-24 20:10:43,"ok, thank you.  will do.
",cj,2012-09-24 20:10:49
830,2012-09-21 03:44:52,"As detailed in the following post: http://stackoverflow.com/questions/11848688/kaminari-and-capybara-conflict/12523870

When using Capybara (1.1.2), RSpec (2.11.0) and Kaminari (0.14.1) #page(...) methods fail due to argument errors.

Essentially the Capybara::DSL method, included via RSpec#configure.include appears to be included into the Object class, and as such overrides the scope created by Kaminari - the result is that Capybara::DSL#page is called with an argument, instead of the scope being called.
",amasses,2012-09-21 08:42:15
830,2012-09-21 08:42:15,"It's only included in Object if _you_ actually include it, which you shouldn't do.
",jnicklas,2012-09-21 08:42:15
830,2012-09-23 03:32:35,"I haven't explicitly included Capybara::DSL into Object anywhere yet the #page method is still included. When I run my specs with a breakpoint accessing the #page method on the object (an ActiveRelation scope) returns Capybara::Session
",amasses,2012-09-21 08:42:15
830,2012-09-23 08:29:38,"Including Capybara::DSL in the global scope includes it in Object, that's most likely what you've done. Or you're using some gem that has done that. I promise that this wouldn't happen by itself ;)
",jnicklas,2012-09-21 08:42:15
829,2012-09-20 10:41:39,"I want to change my default drive for running tests with javascript, specific scenario with javascript, from default, :selenium, to any, like :webkit, in RSpec, just setting :js => true flag. But, trying to runing ""describe 'xxx', :js => true do"" with :webkit, and loading javascript_driver in rspec_helper, thats what happened ""Undefined method javascript_driver for Capybara:Module""

<S_CODE_TOKEN>

http://stackoverflow.com/questions/12457575/capybara-rspec-webkit-undefined-javascript-driver
",megabga,2012-09-20 10:57:38
829,2012-09-20 10:57:38,"<S_CODE_TOKEN>
",jnicklas,2012-09-20 10:57:38
829,2012-09-20 11:15:32,"thanks! its works.
",megabga,2012-09-20 10:57:38
829,2012-09-20 11:46:26,"For what it's worth, we changed how those requires work, because it was a bit confusing. DSL is now always loaded, so this should no longer be an issue.
",jnicklas,2012-09-20 10:57:38
828,2012-09-19 09:09:10,"Commit 8a9c975 wasn't 100% correct - it would always reset the memo cache, effectively preventing any selenium call from being cached.
",exviva,2012-09-19 09:20:32
827,2012-09-19 00:37:57,"...rned by tag_name and [] to speed up remote Selenium jobs
",w1150n,2012-09-19 07:15:14
827,2012-09-19 07:15:26,"Nice, thanks!
",jnicklas,2012-09-19 07:15:14
826,2012-09-18 14:21:30,"Hi! This might look like a bug in a driver, but it seems to occur in both selenium (driving chrome) and capybara-webkit.

I have something like the following JS:

<pre>

$('button.state1').live('click', function() {
  $(this).addClass('state2');
  $(this).removeClass('state1');
  $(this).html('State 2');
});
$('button.state2').live('click', function() {
  $(this).addClass('state1');
  $(this).removeClass('state2');
  $(this).html('State 1');
  alert('Not supposed to receive a click event here')
});

</pre>


And HTML:

<pre>
&lt;button class=""state1""&gt;State 1&lt;/button&gt;
</pre>


And I drive it from Cucumber:

<pre>
When I press ""State 1""
Then I should see ""State2""
# The second handler gets called, reverting the state, and messing up the rest of the scenario.
</pre>


You can watch it in Selenium quickly changing state, then changing back again. This behaviour doesn't occur in normal browsing ever. It's just when run through Capybara. And it only happens sometimes. For me, it's about 60% of the time.
",johncant,2012-09-18 14:35:34
826,2012-09-18 14:35:34,"I'm not sure what might be causing this. May I suggest you ask on the mailing list? You should have a better chance of getting help there.

If it turns out to be a bug in Capybara, we can reopen this issue.
",joliss,2012-09-18 14:35:34
826,2012-09-18 14:47:33,"OK,

I'll work around it for the time being, then do as you say when I've got time. I'll build an small rails app to replicate it.
",johncant,2012-09-18 14:35:34
826,2012-09-18 15:01:50,"That sounds great!
",joliss,2012-09-18 14:35:34
825,2012-09-17 18:08:51,"I don't know what the plans for merging from 1.1_stable to master is.

But since all focus is on master I am switching to use master as well... But I would like to see the support for multiple file upload, so here is a pull request for that. it is basically a cherry-pick from 1.1_stable
",jarl-dk,2012-09-26 12:44:16
825,2012-09-19 21:46:33,"So can we merge this in master? It's already in 1.1_stable
",jarl-dk,2012-09-26 12:44:16
825,2012-09-20 07:00:53,"Honestly I thought we had merged this to master. I'm very confused now. That's my bad for not reviewing pull requests more carefully. Give me some time to review this, please.
",jnicklas,2012-09-26 12:44:16
825,2012-09-26 12:26:13,"The pull request you are thinking of is probably https://github.com/jnicklas/capybara/issues/778 (a PR for 1.1_stable). This is an equivalent pull request, but just for master. Since all improvements are happening there I have started to use master/HEAD. So I would be happy to see support for multiple file upload there as well...

Jarl
",jarl-dk,2012-09-26 12:44:16
825,2012-09-26 12:45:02,"Okay, I merged this, and I'll revert the changes to 1.1 stable at some point. Silly me for not being more vigilant about where the pull request was sent to.
",jnicklas,2012-09-26 12:44:16
825,2012-09-26 13:02:09,"I am sorry that I didn't emphasize this in the initial pull-request (for
1.1_stable).

I didn't, at that time, know the status of master, but it seems relatively
stable...

Thanks a lot.

Jarl

2012/9/26 Jonas Nicklas notifications@github.com

> Okay, I merged this, and I'll revert the changes to 1.1 stable at some
> point. Silly me for not being more vigilant about where the pull request
> was sent to.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/pull/825#issuecomment-8888389.
",jarl-dk,2012-09-26 12:44:16
824,2012-09-16 08:43:12,"This is the equivalent of https://github.com/jnicklas/capybara/pull/821 (request to merge on master branch)
",jarl-dk,2012-09-28 14:09:44
824,2012-09-16 18:06:28,"As I mentioned in #821, that's not what Capybara's features are for, and IIRC we already have a test for that behaviour.
",jnicklas,2012-09-28 14:09:44
824,2012-09-17 07:23:08,"I agree that a cucumber test is not the right type of test. But that was just the easiest way for me to demontrate the bug (on stable branch). Every so often when creating a bug report in OS projects, the maintainers requests ""proove me with a test that demonstrates the problem"".

However for regression purposes, it may be nice to have a (spec) test for this. I can't find it...
",jarl-dk,2012-09-28 14:09:44
823,2012-09-15 06:18:16,"Apparently this change must be done on master, see http://about.travis-ci.org/docs/user/build-configuration/
",jarl-dk,2012-09-15 12:09:42
823,2012-09-15 12:09:54,"Very nice, I merged it. Thanks!
",joliss,2012-09-15 12:09:42
823,2012-09-15 12:23:17,"Actually, we have a bunch of flickering tests that are only fixed on master. I'm thinking we should perhaps disable 1.1_stable on Travis again and stick with local running for the 1.1 branch.

@jnicklas, what do you think?
",joliss,2012-09-15 12:09:42
823,2012-09-15 12:26:17,"Well.

In that case it might be difficult to ensure that 1.1_stable is actually
... stable. :-)

I think the root cause for these flickering tests should be examined...

Jarl

2012/9/15 Jo Liss notifications@github.com

> Actually, we have a bunch of flickering tests that are only fixed on
> master. I'm thinking we should perhaps disable 1.1_stable on Travis again
> and stick with local running for the 1.1 branch.
> 
> @jnicklas https://github.com/jnicklas, what do you think?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/pull/823#issuecomment-8584254.

## 

Jarl Friis
Softace ApS
Rådhustorvet 7, 2.
3520 Farum
LinkedIn: http://dk.linkedin.com/in/jarlfriis
",jarl-dk,2012-09-15 12:09:42
823,2012-09-15 14:10:51,"> I think the root cause for these flickering tests should be examined...

We have, and they are harmless (just issues in the test code) and fixed on master. I'm just not sure if anybody wants to take the time to backport the fixes onto 1.1_stable.
",joliss,2012-09-15 12:09:42
823,2012-09-15 21:29:24,"What is the the timeline to get a public gem release from master? If it is a long time > 3-6 months I will probably take the time to backport this fixes in test code... into 1.1_stable.
",jarl-dk,2012-09-15 12:09:42
823,2012-09-16 04:38:02,"A stable 2.0 release? Two months at least I guess, from how I understand Jonas. Perhaps more, you never know.

Before you go backporting stuff, there's still some issues with `body.should include` on master that need fixing (I think).
",joliss,2012-09-15 12:09:42
822,2012-09-15 05:57:35,"This pull request contains two fixes

The first one is ensuring that cucumber scenarios are also run durnig a `bundle exec rake`, this should ensure that travis is also running cucumber scenarios.

The second commit is ensuring that 1.1_stable branch is freezed to use the gem version of xpath specified in the gemspec. This is important so automated test are not run using any code (of xpath) not yet release as a gem (version)
",jarl-dk,2012-09-15 12:21:44
822,2012-09-15 06:05:05,"This Pull requests solves the problem mentioned in https://github.com/jnicklas/capybara/pull/821#issuecomment-8558670
",jarl-dk,2012-09-15 12:21:44
822,2012-09-15 06:30:35,"This pull request is not really tested at all. The following pull request seems necessary to test branches:
https://github.com/jnicklas/capybara/pull/823 but I am not sure
",jarl-dk,2012-09-15 12:21:44
822,2012-09-15 07:05:58,"It seems like commit  fc15beb may not be needed. I am a bit new to git submodules...
",jarl-dk,2012-09-15 12:21:44
822,2012-09-15 12:02:23,"I think what you're seeing is this:

Travis picks up the submodule version of xpath, whereas real users will pick up the released version of xpath.

So it would certainly be reasonable to test against the released version. We probably still want to test against the submodule, but we could make `gemfiles/Gemfile.base-versions` run against the released version.

On the other hand, this means that every change in xpath that's required for Capybara HEAD must be released, or Travis will fail. So unless Jonas wants to commit to releasing xpath _all the time_, I don't think that'll work.
",joliss,2012-09-15 12:21:44
822,2012-09-15 12:07:03,"I pulled the change you suggested for Rakefile (with minor modifications) - I think that's good.
",joliss,2012-09-15 12:21:44
822,2012-09-15 12:21:35,"Yes. I got it now (Just got some practical experience (the hard way) with git submodules). Good that you only merge b9ec26b dont merge  fc15beb.
",jarl-dk,2012-09-15 12:21:44
821,2012-09-14 06:56:32,"This patch illustrates a problem that it is impossible to match pre-formatted content.

I will create a pull request in xpath to solve the problem.

So the two pull requests should be seen as one.
",jarl-dk,2012-09-16 17:59:52
821,2012-09-14 11:41:53,"Huhh... This pull reqeust should make travis **fail!**

capybara 1.1_stable only depends on xpath version ""~> 0.1.4"" (see https://github.com/jnicklas/capybara/blob/1.1_stable/capybara.gemspec#L30). However travis pulls in the current master HEAD of xpath!, which makes this pull request succeed. I didn't expect that.

I think there is an opportunity for improoving the CI test (travis), so that it only uses the version specified in the gemspec file of capybara.

However. I am glad to see that this has been resolved in latest xpath. The test that this pull request introduces may or may not still be worth merging...

Jarl
",jarl-dk,2012-09-16 17:59:52
821,2012-09-15 06:03:54,"When pull request https://github.com/jnicklas/capybara/pull/822 is merged. This pull request will obviously show a problem (the test will show)
",jarl-dk,2012-09-16 17:59:52
821,2012-09-15 08:40:27,"Versioning is quite confussing:
- xpath is tagged 0.1.4 at [26108db2d90ca25368eb5f7b143fbce2ebec7fe9](https://github.com/jnicklas/xpath/tree/26108db2d90ca25368eb5f7b143fbce2ebec7fe9) (this is not contained in the 1.1_stable branch)
- capybara 1.1.2 gem depends on xpath 0.1.4. Them downloadable gem seems to be created from [3cc52ba2e427a0f7718213def1aff324e045eac7](https://github.com/jnicklas/xpath/tree/3cc52ba2e427a0f7718213def1aff324e045eac7) (I am not sure). So that is the code that users get if they specify `gem ""capybara""` in their Gemfile.
- capybara 1.1_stable branch is using xpath submodule at [dbc3356c1daeafd4712c7d7dd9d6a7c91deccab1](https://github.com/jnicklas/xpath/tree/dbc3356c1daeafd4712c7d7dd9d6a7c91deccab1)

`git show-branch 0.1.4 3cc52ba2e427a0f7718213def1aff324e045eac7 dbc3356c1daeafd4712c7d7dd9d6a7c91deccab1` gives

<S_CODE_TOKEN>

This pull request was added because I ran into a problem (like the test) in one of my projects. However when performing the test on capybara branch 1.1_stable the problem does not exist (because it uses another version of xpath the the version of any project will get from `gem ""capybara""`

The problem that this pull request illustrates needs a patch on xpath 0.1.4 (`dbc3356c1daeafd4712c7d7dd9d6a7c91deccab1`).
",jarl-dk,2012-09-16 17:59:52
821,2012-09-15 11:59:21,"> However travis pulls in the current master HEAD of xpath! 

I don't think it does - it should pick up whatever commit the submodule is check in at.
http://travis-ci.org/#!/jnicklas/capybara/jobs/2445824/L23 => dbc3356c1da (after 0.1.4, before 1.0.0.beta1)
",joliss,2012-09-16 17:59:52
821,2012-09-15 12:07:52,"On the actual pull request, I'll let @jnicklas handle it. I'm muting; email me if you need me.
",joliss,2012-09-16 17:59:52
821,2012-09-15 12:43:59,"Just pushed two seperate commits. One ilustrating the problem (Travis should fail because it now runs cucumber scenarios). The other one fixing it by updating the xpath module, which should make Travis happy.
",jarl-dk,2012-09-16 17:59:52
821,2012-09-15 21:27:18,"Now this PR fails because xpath PR https://github.com/jnicklas/xpath/pull/44 has not been merged. When that PR is merged into xpath. It will solve this issue.
",jarl-dk,2012-09-16 17:59:52
821,2012-09-16 17:59:51,"The only reason Capybara has cucumber features is to test the integration with cucumber itself. So these certainly aren't the right place to put tests for this kind of behaviour. Furthermore, only critical bugs will be fixed in old branches, this doesn't qualify as a critical bug to me.
",jnicklas,2012-09-16 17:59:52
821,2012-09-16 18:00:33,"Also: the ""bug"" if it can be called that, is fixed in master.
",jnicklas,2012-09-16 17:59:52
821,2012-09-17 07:15:24,"OK. I thought stable branch was for _any_ bugfixes. Just not new features. I can see it is fixed on master, but I cant see a test for it. But on the other hand... Not every corner is about to be tested...
",jarl-dk,2012-09-16 17:59:52
820,2012-09-13 08:51:45,"My current use case is that simple_form generates labels for fields that look like 

<S_CODE_TOKEN>

neither of the two lines below match the input.

<S_CODE_TOKEN>

What  about allowing regular expressions, like

<S_CODE_TOKEN>
",moretea,2012-09-13 15:14:16
820,2012-09-13 15:14:16,"Actually, both should have worked just fine, there's probably something else at play. Regarding regexps, that's unfortunately not possible from a technical perspective.
",jnicklas,2012-09-13 15:14:16
820,2012-09-13 15:14:41,"(or rather: not possible without rewriting around 90% of Capybara)
",jnicklas,2012-09-13 15:14:16
820,2012-09-13 15:17:02,"I'm using a plain capybara, without any exernal driver. Do you have any idea where I could look?
",moretea,2012-09-13 15:14:16
820,2012-09-13 15:24:52,"Could be anything. Debug.
",jnicklas,2012-09-13 15:14:16
819,2012-09-13 00:59:10,"When using Capybara to drive remote browsers I'm seeing the following to fill in a single field.  Each fill_in adds 5-17 seconds of overhead to each field filled in.  I haven't narrowed down which part of the find(...).set(...) is doing this:

POST elements
[{""ELEMENT"": ""1""}] [0.05s] 00:24
using:  xpath
value:  .//*[self::input | self::textarea][not(./@type = 'submit' or ./@type = 'image' or ./@type = 'radio' or ./@type = 'checkbox' or ./@type = 'hidden' or ./@type = 'file')][((./ (…more)
GET element/1/displayed
true [0.08s] 00:24
GET element/1/name
input [0.05s] 00:25
GET element/1/attribute/type
text [0.06s] 00:25
GET element/1/name
input [0.06s] 00:26
GET element/1/attribute/type
text [0.05s] 00:26
GET element/1/name
input [0.05s] 00:27
GET element/1/attribute/type
text [0.05s] 00:27
GET element/1/name
input [0.05s] 00:28 Repeated 2 times over 0.657s
POST element/1/clear
ok [0.06s] 00:30
POST element/1/value
ok [0.08s] 00:30
",w1150n,2012-09-19 07:15:49
819,2012-09-13 15:31:33,"5-17 seconds??? I've never seen that kind of slowdown. Are you sure this is something caused by Capybara? Please narrow it down further!
",jnicklas,2012-09-19 07:15:49
819,2012-09-13 15:49:58,"It has to be either Capybara or selenium-webdriver, I'll have to keep digging, but its happening on all of our projects that use fill_in with remote browsers.  Using a local browser is super snappy.  
",w1150n,2012-09-19 07:15:49
819,2012-09-18 15:25:16,"Yep, Capybara::Selenium::Node uses tag_name in an ifelse which makes it do many over-the-wire requests.  I added memoization and it sped things up by 27%.  Here's my local patch:

require 'capybara/selenium/node'

class Capybara::Selenium::Node
  def [](name)
    @attrs ||= {}
    @attrs[name] ||= native.attribute(name.to_s)
  rescue Selenium::WebDriver::Error::WebDriverError
    nil
  end

  def tag_name
    @tag_name ||= native.tag_name.downcase
  end
end
",w1150n,2012-09-19 07:15:49
819,2012-09-18 16:15:22,"Could you send a pull request for that?
",jnicklas,2012-09-19 07:15:49
819,2012-09-19 00:39:16,"Yep, sent.
",w1150n,2012-09-19 07:15:49
819,2012-09-19 07:15:49,"Awesome thanks! Merged.
",jnicklas,2012-09-19 07:15:49
818,2012-09-12 13:06:38,"Jonas' recent forum post concisely described Capybara's key benefits. The readme could benefit from such a list.
I've added them in this PR, although I feel sure that the list is not comprehensive. Perhaps this PR will prompt someone more knowledgeable to add to or change my list.
",lazylester,2012-09-28 14:23:47
818,2012-09-15 07:03:41,"+1
",jarl-dk,2012-09-28 14:23:47
818,2012-09-16 17:47:47,"While I agree with the general idea, the copy needs to be reworked, in my opinion.
",jnicklas,2012-09-28 14:23:47
818,2012-09-17 05:07:58,"@jnicklas I agree, I submitted the PR hoping to elicit some help. If anyone who understands this can make it better, that would be great.
",lazylester,2012-09-28 14:23:47
817,2012-09-11 20:33:20,"I am using capybara with RSpec and, being new to it, encountered a weird-looking problem.
I have spec like this:

<S_CODE_TOKEN>

while this works fine in the browser and even if I fallback to RackTest, it gives me the following in the browser started by Selenium:

<S_CODE_TOKEN>

And nothing special on the console:
    Failure/Error: page.should have_content @testCommit.hash_id.to_s
           expected there to be content ""a123"" in ""Internal Server Error\nundefined method `hash_id' for     nil:NilClass\nWEBrick/1.3.1 (Ruby/1.9.3/2012-04-20) at 127.0.0.1:55933""
         # ./spec/integration/commits_spec.rb:21:in`block (2 levels) in <top (required)>

commits_spec.rb:21 is pointing at @testCommit.hash_id.to_s in the spec.
Another thing I should mention: It even happens when I create the commit in the spec, instead of the before :each block. Plus: printing the commit prints the object, not nil.

Any idea why this happens and how I can fix it?
",AVGP,2012-09-11 20:59:09
817,2012-09-11 20:34:54,"Oh I forgot to mention, that http://stackoverflow.com/questions/9221415/cant-get-tests-working-with-selenium-capybara-webkit-racktest-works-fine didn't help me, because I am not touching the test db and not use database_cleaner
",AVGP,2012-09-11 20:59:09
817,2012-09-11 20:59:09,"Oh god I am sorry.
Turning 
    transactional_fixtures = true
into
    transactional_fixtures = false
fixed this.
",AVGP,2012-09-11 20:59:09
816,2012-09-11 20:31:00,"Hi,
I using cucumber and capybara in my testing stack, but i got this error message ""redirected more than 5 times, check for 
infinite redirects. (Capybara::InfiniteRedirectError)""

Can i get more info about this error and how to solve it?
I just submitting forms and click buttons in my testing scenario, and if there is a way to raise the number of redirects from 5 to another number.

regards.
",maboelnour,2012-09-11 21:04:49
816,2012-09-11 21:04:48,"In Capybara 2.0, the redirect limit is configurable. On 1.1.x, you're out of luck (short of monkey patching). The number 5 isn't arbitrary though. The HTTP spec says that browsers must follow 5 redirects, and after that may raise an error. So Capybara is following the spec to the letter. It gets a bit more ambiguous because the wording in HTTP 1.1 is a bit less clear, also, most browsers support around 20 redirects.

Really, though, there is no good reason to be redirecting more than once or twice, I'd try fixing your code first.
",jnicklas,2012-09-11 21:04:49
815,2012-09-11 19:12:15,"README scripting section misnamed evaluate_script as execute_script.
",bjhess,2012-09-11 20:24:29
815,2012-09-11 19:18:23,"I believe execute_script was correct there - it executes the javascript while ignoring the result
",twalpole,2012-09-11 20:24:29
815,2012-09-11 20:24:29,"Yes, the README is correct.
",jnicklas,2012-09-11 20:24:29
815,2012-09-11 20:26:34,"Sorry about this.
",bjhess,2012-09-11 20:24:29
814,2012-09-10 17:08:05,"ever since the september 7 commit de34c638354c117f20269b4fd129c2657b01ef12 we have been getting these errors in our request specs.

If I set my gem file to the previous commit everything starts to works again. Just an FYI

:gem 'capybara', git: 'https://github.com/jnicklas/capybara', :ref => 'd153635e6546ecc742e2b805390bc42a1e863d7c'
",aaronpark,2012-10-30 16:35:34
814,2012-09-10 22:12:26,"This is kind of to be expected, see #809 for an ongoing discussion. More information about how to fix this will be upcoming and there will likely be a new release of RSpec at some point.
",jnicklas,2012-10-30 16:35:34
814,2012-09-19 11:33:12,"The same issue in my demo repository. 
https://github.com/itsNikolay/error

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

$> bundle show https://gist.github.com/3749185

This issue on Stackoverflow http://stackoverflow.com/questions/12485140/capybara-nomethoderror-undefined-method-visit-for/12489571#12489571
",itsNikolay,2012-10-30 16:35:34
814,2012-09-19 11:38:51,"@itsNikolay Yours is actually not the same error as this one - you're not on Capybara master. I'll leave an answer on SO.
",joliss,2012-10-30 16:35:34
814,2012-09-19 11:43:52,"@joliss There's no problem if you see solution. Will wait it on SO =)
",itsNikolay,2012-10-30 16:35:34
814,2012-10-30 16:27:26,"I'm getting this error after updating to beta4...no error when using beta2.
",leesmith,2012-10-30 16:35:34
814,2012-10-30 16:34:42,"Did you read the release announcement? https://groups.google.com/forum/?fromgroups=#!topic/ruby-capybara/5KfxezI-U0Q
",jnicklas,2012-10-30 16:35:34
814,2012-10-30 16:35:13,"Relevant section:

> Notably, we changed the `:type` that Capybara assumes your specs run under in RSpec to `:feature` (previously it was `:request`). The latest release of `spec/features`. Alternatively you can use the Capybara Feature DSL (`feature` instead of `describe`), which should work without any additional tweaking. If you see errors like `undefined method visit`, then you're probably encountering this issue. If you're including modules into `:request` specs, you will probably need to change that to `:feature`.
",jnicklas,2012-10-30 16:35:34
814,2012-10-30 18:08:46,"Clearly I did not.  I'm now subscribed to the google group.  Thanks!
",leesmith,2012-10-30 16:35:34
814,2012-10-31 11:31:20,"An additional thing I ran into:

Route helpers from RSpec are not being included into `type: :feature` so I had to add:

<S_CODE_TOKEN>
",felipeelias,2012-10-30 16:35:34
814,2012-10-31 13:33:57,"I think there are still problems with the rspec-rails implementation, I'm in contact with David Chelimsky, trying to work this out.
",jnicklas,2012-10-30 16:35:34
814,2012-11-13 20:35:53,"This was helpful: http://alindeman.github.com/2012/11/11/rspec-rails-and-capybara-2.0-what-you-need-to-know.html
",leesmith,2012-10-30 16:35:34
814,2013-01-04 22:57:40,"@leesmith thanks for the link to that blog post. Quite a bummer that Capybara upgraders were left in the lurch like this. In my situation, I had problems with my `Gemfile.lock` and had to remove it and re-bundle, which upgraded Capybara without me even wanting it to or thinking about it.

Just my opinion that there should be some sort of deprecation warning or explanation if a library suddenly stops working when you upgrade it.  Sadly there wasn't.  But your link to that blog post was (once I eventually found it) actually helpful.  Too bad it wasn't included in deprecation warnings or something that would have been helpful to me (and surely others) when they (whether purposefully or not) upgrade Capybara and find nothing works anymore without any explanation or _hint_ as to what went wrong.
",sdhull,2012-10-30 16:35:34
814,2013-01-05 00:56:28,"@sdhull apologies that you had trouble with the upgrade. We try to follow semver, so we try to break compatibility very rarely. I would recommend adding a ""~> 1.0"" style dependency; as long as the major version number stays the same, we won't break compatibility in any way. We tried to document all changes as clearly as we could, both in the release announcement, and in the History file.

For most of the changes we made, a deprecation warning would have been impossible, but you're right that we probably could have added one in this case, somehow. We would have had to get rid of it pretty soon anyway though, since the whole point was to clean up clashes within a namespace. If we have to break compatibility again, I'll make sure we add warnings if is possible.
",jnicklas,2012-10-30 16:35:34
814,2013-01-05 18:54:31,"@jnicklas that would be really great. Personally would appreciate that consideration in the future, and I know probably all other devs using/upgrading Capybara would also appreciate it.
",sdhull,2012-10-30 16:35:34
814,2013-08-02 08:29:03,"I am aso getting same error. 

# Error

Git error: command `git clone 'git://github.com/jnicklas/capybara.git'
/.rvm/gems/ruby-1.9.2-p320/cache/bundler/git/capybara-f47214fa54f8dae1ca782e48ee86d54cdb2dc0b3"" --bare --no-hardlinks` in directory

Why is this thing happening ??
",amritdeep,2012-10-30 16:35:34
814,2013-08-07 10:32:18,"@amritdeep how in the world is that the same error? That doesn't sound like it has anything to do with Capybara at all.
",jnicklas,2012-10-30 16:35:34
814,2014-10-21 10:46:35,"With `:type => :feature` I am getting:

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>
",heaven,2012-10-30 16:35:34
814,2014-10-21 12:55:08,"Capybara doesn't have either of those methods. I think you're looking in the wrong place.
",jnicklas,2012-10-30 16:35:34
814,2014-10-21 13:17:09,"@jnicklas thx, good to know. 

I was commenting the proposed solution with `:type => :feature`. Btw,  instead of adding that setting or replacing `describe` with `feature` I added:

<S_CODE_TOKEN>

to `RSpec.configure` and that solved everything in my case.
",heaven,2012-10-30 16:35:34
813,2012-09-10 06:29:02,"Apologies if this is not the best place to post my issue.
I have a problem with acceptance tests using Capybara. All tests fail when run within a suite but pass when run separately from other tests (eg. rspec spec/features/).
Capybara session reports 404 within the suite.
Could anyone point me to where should I be looking at to fix the issue?
",iRonin,2012-09-10 15:29:54
813,2012-09-10 15:29:54,"I recommend you ask on the mailing list. We'll need more info - try posting your Capybara configuration in spec_helper.
",joliss,2012-09-10 15:29:54
813,2012-09-10 15:49:36,"I will try the mailing list. Thanks!
",iRonin,2012-09-10 15:29:54
812,2012-09-10 01:15:35,"For historical reasons, Session#html used to delegate to Driver#body,
(but Session#body & Session#source delegate to Driver#source). This
commit puts an end to this confusing state of affairs.

This change requires driver authors to update their drivers.
",joliss,2012-09-10 06:10:46
812,2012-09-10 06:10:43,"Didn't we change that behaviour back, so that #html and #body are aliases again? I'd rather people use html so, since it's less ambiguous.
",jnicklas,2012-09-10 06:10:46
812,2012-09-10 15:29:17,"> Didn't we change that behaviour back, so that #html and #body are aliases again?

We have #html and #source, with `alias_method :body, :source`.

I wonder if we should drop #body, or if that's overkill. What do you think?
",joliss,2012-09-10 06:10:46
812,2012-09-10 22:09:57,"No, let's leave it as is.
",jnicklas,2012-09-10 06:10:46
811,2012-09-10 01:04:05,"`current_url` includes the fragment (`#foo`), but `current_path` does not. Should it?
",joliss,2013-02-16 18:09:03
811,2012-09-10 06:11:56,"For which drivers? If we see Capybara as a browser simulator, then yes it should return the fragment. Imo.
",jnicklas,2013-02-16 18:09:03
811,2012-09-24 13:30:17,"> For which drivers?

It's happening for Selenium, at least.

I don't have time to fix it right now, but let's keep the issue open.
",joliss,2013-02-16 18:09:03
811,2013-02-16 13:56:49,"I think `current_path` shouldn't include query string and fragment identifier as according to RFC path doesn't include query and fragment.

Current implementation of `current_path` (`URI.parse(current_url).path`) looks good to me.
",abotalov,2013-02-16 18:09:03
811,2013-02-16 18:09:03,"@abotalov has a point. Let's close this down for now.
",jnicklas,2013-02-16 18:09:03
810,2012-09-07 18:27:16,,jnicklas,2012-09-07 18:27:26
810,2012-09-07 18:27:37,"Ooops, meant to create a Milestone.
",jnicklas,2012-09-07 18:27:26
809,2012-09-07 18:23:55,"Hey @josevalim, @dchelimsky, @sobrinho and anyone else who has had an opinion on this. When applied, this commit changes Capybara to use `:feature` as the type for its own `feature` helper, as well as only including Capybara in those steps with type `:feature`. This follows [José's suggestion](http://blog.plataformatec.com.br/2012/06/improving-the-integration-between-capybara-and-rspec/). I feel that this is a very sensible approach.

Though there is obviously a big issue: It breaks compatibility with rspec, especially with rspec-rails.

I'd like to get this into Capybara 2.0 so that we don't have to break the API post release. Can you guys let me know what you think? Should I just release this and hope for the other tools to catch up as soon as possible?
",jnicklas,2012-09-09 14:44:01
809,2012-09-07 18:25:28,"Just a note that I change the type to `:feature`, instead of `:features` (plural) as suggested by José. It seems like that follows the naming convention better, right?
",jnicklas,2012-09-09 14:44:01
809,2012-09-07 18:41:51,"@jnicklas The naming convention is a bit tricky. We have `spec/models`, `spec/views`, `spec/helpers`, so I would vote for `spec/features`. But I will leave the final decision for @dchelimsky.

I think adding support for these in rspec-rails will be trivial as well. So rspec-rails should catch up quickly. My $.02. :)
",josevalim,2012-09-09 14:44:01
809,2012-09-07 18:49:48,"I think that's a great move and won't be a big deal for other tools.

This will make the suite much more concise if we follow the convention of `spec/features`, using `:feature` type, for capybara specs and `spec/acceptance`, using `:acceptance` type, for turnip specs.

You didn't said anything about the latest one.

Are you planning to change this on turnip either?
",sobrinho,2012-09-09 14:44:01
809,2012-09-07 18:53:19,"@josevalim @jnicklas if capybara attaches itself to feature (or features) what would rspec-rails even need to do?
",dchelimsky,2012-09-09 14:44:01
809,2012-09-07 19:03:48,"@dchelimsky I think we need to attach the basic rspec-rails stuff there, like:

https://github.com/rspec/rspec-rails/blob/master/lib/rspec/rails/example/rails_example_group.rb

Or this is attached by default to all example groups? If so, I guess rspec-rails doesn't have to do anything.
",josevalim,2012-09-09 14:44:01
809,2012-09-07 19:07:25,"@josevalim not automatic for all groups, so that would need a fix in rspec-rails - need to coordinate that with a minor release of rspec-rails (eg 2.12.0)
",dchelimsky,2012-09-09 14:44:01
809,2012-09-07 19:19:52,"@sobrinho: yes, this is also in part to clear up jnicklas/turnip#66, I would personally prefer if Turnip used `:feature` as its type, and the recommendation is to use `spec/features`. After all, Gherkin files do start with the word `Feature`, and I would like to have Turnip behave as close to regular RSpec as possible.

@josevalim: It seems that the folders are plural, but the `:type` is singular, from what I can tell. At least for `:model`, `:controller`, `:request`, `:acceptance`, etc... Maybe @dchelimsky can clear this up.

@dchelimsky: I don't know the internals of rspec-rails at all, so I don't know if it does anything special at all. Maybe not. In that case, even better :)
",jnicklas,2012-09-09 14:44:01
809,2012-09-07 19:53:27,"> It seems that the folders are plural, but the :type is singular, from what I can tell. At least for :model, :controller, :request, :acceptance, etc..

Ah, right. @dchelimsky so don't we need to change rspec-rails to also map the type `:feature` to the folder `spec/features`?
",josevalim,2012-09-09 14:44:01
809,2012-09-07 19:58:41,"@josevalim if we don't care about :type => xxx, capybara can do it by directory the way rspec-rails does it:

<S_CODE_TOKEN>
",dchelimsky,2012-09-09 14:44:01
809,2012-09-09 14:43:58,"Okay, seems the general consensus is that this is a good idea. 
",jnicklas,2012-09-09 14:44:01
809,2012-09-09 14:46:02,"@jnicklas just so we're on the same page: the change you just merged will break integration with rspec-2.11. Is that your understanding/intent?
",dchelimsky,2012-09-09 14:44:01
809,2012-09-09 15:21:06,"@dchelimsky yes, I'm aware of that. I hope that doesn't screw up your release cycle too much. It'll be at least a month or two before Capybara 2.0 hits, maybe more, so you guys do have some time to prepare.
",jnicklas,2012-09-09 14:44:01
809,2012-09-09 15:23:07,"Any reason for you to not just use my suggestion above (using `:file_path` rather than `:type)?
",dchelimsky,2012-09-09 14:44:01
809,2012-09-09 15:24:57,"BTW - it's less about the release cycle than it is about forcing end-users to upgrade two libs at the same time (and some of them not understanding that that is necessary).

/cc @myronmarston, @alindeman
",dchelimsky,2012-09-09 14:44:01
809,2012-09-09 15:36:18,"It seems strange to me that Capybara would make assumptions about the file layout of the users' test suites. It makes sense for rspec-rails to do that, but not really for Capybara, imo.
",jnicklas,2012-09-09 14:44:01
809,2012-09-09 15:41:18,"I disagree in this case. ""features"" is a capybara concept, not an rspec-rails concept. Also, I think it's simpler and easier for end-users to grok ""capy will attach its behavior to files in spec/features"" than ""capy will attach its behavior to example groups tagged :feature => true"" and then have to go look at rspec-rails' docs to see that ""rspec-rails adds :feature => true to example groups declared in the spec/features directory"".
",dchelimsky,2012-09-09 14:44:01
809,2012-09-09 16:26:49,"Assuming spec/features for capybara makes sense for me.

But what about the developers that want to change this structure, @dchelimsky?
",sobrinho,2012-09-09 14:44:01
809,2012-09-09 16:41:57,"@sobrinho as things stand today in rspec-rails, integration, model, view, controller, and routing behavior are all added based on directory structure. It also supports :type => 'xxx', but I don't think any end users write `describe X, :type => 'y' do` in their specs.
",dchelimsky,2012-09-09 14:44:01
809,2012-09-09 16:42:50,"@sobrinho to align well w/ how rspec-rails works for the other types, Capy could add itself based on either :type => :feature or dir => spec/features.
",dchelimsky,2012-09-09 14:44:01
809,2012-09-09 16:46:24,"I certainly wouldn't have a problem with adding the folder based behaviour too. How does rspec-rails handle this? I can see the metadata `:type => :model` for model specs, but I don't explicitly specify it, so rspec-rails is adding this somewhere? Can we do the same thing? In that case, I think that would be good, and maybe easier to explain.

It's worth mentioning that Capybara's global `feature` method ([described here](https://github.com/jnicklas/capybara#using-capybara-with-rspec)) adds the type explicitly, so it doesn't matter what directory it's in, it will always get the correct type. The issue is mainly with behaviour that people have attached to Capybara specs themselves, and limited to only `:request` specs, that's where compatibility will most likely be affected most.

As @josevalim mentioned however, we still need to attach the base Rails behaviour stuff (routing etc.) to `:type => :feature` specs, and that is something that _will_ require a new rspec release, from what I can tell.
",jnicklas,2012-09-09 14:44:01
809,2012-09-09 16:55:30,"rspec-rails includes modules based on :type and :file_path (https://github.com/rspec/rspec-rails/blob/69a63cef280310c1164dda457bdecfd7700b10f0/lib/rspec/rails/example.rb#L10-38) and then adds :type from the extensions: https://github.com/rspec/rspec-rails/blob/69a63cef280310c1164dda457bdecfd7700b10f0/lib/rspec/rails/example/controller_example_group.rb#L120

This way end-users are able to use conventional directory structure or add :type => xxx in a non-conventional directory structure, and then extensions are able to attach their behavior based on :type.

In the case of capy, it's really adding a completely new type of example group, not extending an existing one, so I'd recommend treating it the same way as rspec-rails treats its own ControllerExampleGroup, for example.

As for including other support such as routing, all of that is in Rails' test framework, not RSpec. I wonder if this could all be managed from Capybara. I'm not trying to push extra work on Capy, just trying to reduce its dependency on RSpec to including itself via existing APIs. Thoughts?
",dchelimsky,2012-09-09 14:44:01
809,2012-09-09 16:58:47,"Correction in my last comment - it's "":type _or_ :file_path"" (not and).
",dchelimsky,2012-09-09 14:44:01
809,2012-09-09 17:32:45,"There should be no problem with emulating what rspec-rails does in Capybara, and then we can just tell people to move their specs to `spec/features` and change any includes which reference `request` or `acceptance` and it doesn't have to concern rspec-rails at all.

However, there is one hiccup. Currently, we have `capybara/rspec`, which isn't Rails specific, and `capybara/rails`, which isn't RSpec specific. I think it would make more sense to do this stuff in `capybara/rspec`, but then we'd have to do some `if defined?(Rails)` stuff, which I don't like at all. Any way we can get around that?

I guess we could have `capybara/rspec_rails` or something, but that seems ugly as well.
",jnicklas,2012-09-09 14:44:01
809,2012-09-09 17:51:46,"I don't remember to use `capybara/rails` on my rails projects.

I always required `capybara/rspec` using a spec/support/capybara.rb like this one:

<S_CODE_TOKEN>

Is this required for rails 2 apps?
",sobrinho,2012-09-09 14:44:01
809,2012-09-09 17:55:53,"> I guess we could have capybara/rspec_rails or something, but that seems ugly as well.

Why would that be ugly? I don't see any conflict or order-dependency between https://github.com/jnicklas/capybara/blob/master/lib/capybara/rspec.rb and https://github.com/jnicklas/capybara/blob/master/lib/capybara/rails.rb, so I think it's reasonable to either tell end-users to require both, or add capybara/rspec-rails.rb that simply requires the other two.
",dchelimsky,2012-09-09 14:44:01
809,2012-09-09 18:30:27,"The more I think about it, the more I feel that this should be in rspec-rails. We already integrate with Capybara from rspec-rails, so that direction is already set. From within Capybara, we can do a lot of stuff, but it's very tricky to do stuff only when _both_ RSpec _and_ Rails are loaded. Whereas that's completely natural and obvious in rspec-rails. I'd be happy to provide a pull request to rspec-rails, if you're worried about the extra work.

So yes, this would require users to upgrade RSpec, but if we just explain this clearly, then it shouldn't be a problem. Maybe we can even check the RSpec version and print a warning if it's too low, or something. What do you think?
",jnicklas,2012-09-09 14:44:01
809,2012-09-09 20:08:32,"We could just bump the rspec-rails dependency - no harm in that, especially for a major release, no?
",joliss,2012-09-09 14:44:01
809,2012-09-09 20:11:39,"Wait, of course we don't depend on rspec-rails. Ignore me please.
",joliss,2012-09-09 14:44:01
809,2012-09-12 15:46:55,"I'm OK w/ an rspec-rails release that deals with the directory paths, but it would be good if Capy could check for the rspec version in capybara/rspec.rb (will need to be >= 2.12, but that doesn't exist yet, so you probably want to wait for that release before making this change).

/cc @alindeman
",dchelimsky,2012-09-09 14:44:01
809,2012-09-13 20:08:26,"I'd be happy to review the changes for rspec-rails if you make a pull, @jnicklas.
",alindeman,2012-09-09 14:44:01
809,2012-09-13 23:12:58,"Okay, I'll try to throw together a pull request for rspec, I probably won't have time for that until next week though.
",jnicklas,2012-09-09 14:44:01
809,2012-09-25 23:08:32,"Any news? Can I do anything to make this easier?
",alindeman,2012-09-09 14:44:01
809,2012-09-26 00:22:57,"@jnicklas @alindeman I'll have time after Monday (conf preso) and happy to work w/ either one or both of you on this.
",dchelimsky,2012-09-09 14:44:01
809,2012-09-26 01:03:51,"That'd work for me; I don't feel entirely comfortable approaching this alone.
",alindeman,2012-09-09 14:44:01
809,2012-09-26 07:01:17,"I started a little on a pull request to rspec-rails, but it's a bit daunting and I don't have a lot of time at the moment.
",jnicklas,2012-09-09 14:44:01
809,2012-09-27 03:32:58,"@jnicklas don't sweat it. @alindeman and I will work on it after Monday. When are you trying to get your release out? I'd like the rspec-rails release that supports this to be out well in advance of the capy release.
",dchelimsky,2012-09-09 14:44:01
809,2012-09-27 12:24:38,"@dchelimsky we're pretty much ready to go with Capybara. I want to do another beta release, and then wait for a month before I do the final release, but aside from this issue there isn't anything stopping us. So the ideal for us would be if we do the beta release immediately after you guys do your release, and then wait a month, then final 2.0 release. Does that sound sensible?
",jnicklas,2012-09-09 14:44:01
809,2012-09-27 12:43:34,"@jnicklas sure, but it might be a couple of weeks before we're ready to go. This will be part of a minor release of the entire rspec suite so there are some things that need to be coordinated. Most likely we'll be able to get it out the door by Monday, Oct 8, but I can't promise that at this point. We'll keep you posted.
",dchelimsky,2012-09-09 14:44:01
809,2012-10-06 13:45:55,"OK - I got started on this. I've added one commit that includes `Capybara::DSL` and `Capybara::RSpecMatchers` in example groups in the spec/features directory: https://github.com/rspec/rspec-rails/commit/9332167de751e3c1c2f240e656e4a7d6e9b44bfa

There is no automated testing for this but there was none before either. I've verified that it does the right thing by ensuring that the following runs correctly (in spec/features/thing_list_spec.rb):

<S_CODE_TOKEN>

This solves for the ""features"" directory, but not the ""api"" directory. I see that as separate from this specific issue even though it's part of the wider discussion spawned by @josevalim. Agree?
",dchelimsky,2012-09-09 14:44:01
809,2012-10-06 15:56:52,"Yes agreed! Best we get the minimal solution out the door as soon as possible, then we can tweak it.
",jnicklas,2012-09-09 14:44:01
809,2012-10-06 16:00:06,"@jnicklas I'm not sure I'll be able to get a minor release out this weekend, but I can do a patch release of rspec-rails. This would be rspec-rails-2.11.1. Are you OK explaining in your release notes that capy-2 requires rspec-rails >= 2.11.1 or would you rather wait until we do the 2.12 release (which is unlikely to happen before next weekend).
",dchelimsky,2012-09-09 14:44:01
809,2012-10-06 16:09:32,"Whatever you prefer, I'm not in a rush.
",jnicklas,2012-09-09 14:44:01
809,2012-10-07 02:12:03,"Hey @jnicklas looking this over a bit more, right now capybara takes the responsibility of adding itself if type == :feature, but rspec-rails is responsible to add capybara if directory == spec/features. This feels odd to me. I'm thinking that either rspec-rails or capybara should own both. rspec-rails would still include Capybara::RSpecMatchers in other types of specs (but not DSL) either way. Thoughts?

/cc @alindeman 
",dchelimsky,2012-09-09 14:44:01
809,2012-10-07 02:14:52,"Actually, if we do it from rspec-rails, there's no reason to use :type => :feature or :type => :capybara_feature. rspec-rails would include Capybara::DSL, Capybara::RSpecMatchers, and Capybara::Features when directory => spec/features.
",dchelimsky,2012-09-09 14:44:01
809,2012-10-14 18:54:08,"@jnicklas I released rspec-rails-2.11.4 today with support for including Capybara::DSL and Capybara::RSpecMatchers in spec/features. I've tested this building a new app using capybara-head and rspec-rails-2.11.4 and files added spec/features work as expected (visit/page are available and get|post|put|delete|head are not), and spec/requests also work as expected (get|post|put|delete|head work but visit/page do not).

I was under the false impression that the capybara-2.0.0.beta release already removed support for spec/acceptance and spec/requests, so I documented that you can use rspec-rails-2.11.4 + capybara-2.0.0.beta2. This _does_ work in the sense that you can now use visit/page in spec/features, but it does _not_ solve the ""get and visit are both available"" problem. Any chance you can drop a capybara-2.0.0.beta3 release sometime soon?
",dchelimsky,2012-09-09 14:44:01
809,2012-10-14 19:09:17,"Yes, I'll do a release either today or tomorrow, need to take a look at the backlog, but I think we should be good to go.
",jnicklas,2012-09-09 14:44:01
809,2012-11-01 18:16:43,"I am using this in a new app and it is working amazingly well.
I just want to thank everyone, you all have a special place in my :heart:.
",josevalim,2012-09-09 14:44:01
809,2012-11-02 10:37:06,"Awesome :)
",jnicklas,2012-09-09 14:44:01
809,2012-11-07 03:01:36,"/cc @dchelimsky 

After @alindeman's https://github.com/rspec/rspec-rails/commit/fd25838a39321708d6cdaaeb493274f119db1a19 I think we're getting closer.

One (hopefully last) issue is that previously we'd have a `:type` set on the examples, e.g. you could do

<S_CODE_TOKEN>

Looking at https://github.com/rspec/rspec-rails/blob/master/lib/rspec/rails/vendor/capybara.rb and grepping the rspec-rails source for `:feature`, it seems that we don't really have a corresponding `:feature` type now, but instead we just go off of the spec path. Should we perhaps change that?
",joliss,2012-09-09 14:44:01
809,2012-11-07 08:44:32,"@joliss did you see rspec/rspec-rails#632?
",jnicklas,2012-09-09 14:44:01
809,2012-11-07 15:21:25,"Oh I'd missed that. Thanks!
",joliss,2012-09-09 14:44:01
809,2012-11-11 18:48:05,"I just pushed some new docs for feature specs. Reviews welcomed: https://github.com/rspec/rspec-rails/commit/6e68bdd5085802b35a2270dde574d1f0d3512a03
",alindeman,2012-09-09 14:44:01
808,2012-09-06 16:00:05,"I've spent the last ~3 weeks integrating cucumber with selenium & ie8

One of the issues I've encountered is memory leakage, a search turned up this result:

> Regardless of whether it is a Capybara or WebDriver issue, having tests run
> consecutive with Internet Explorer tends to be problematic. IE is infamous
> for memory leaks. Most people don't see it as much anymore because Windows
> Updates forces you to reboot your computer all the time. However, if you
> used one IE session as much as a test automation suite does before closing
> IE, you'll see it crash.
> 
> I'm not saying this is your issue or that you don't have multiple issues
> here. I'm just saying it is usually unwise to run a hundred consecutive
> tests without quitting and starting IE. For other reasons, I write my tests
> so they open the browser, set up the environment, run one test, clean up
> the environment, close the browser. So if I had 100 tests, I would open and
> close the browser 100 times.
> 
> I have noticed however that slowing down consecutive tests helps. It is
> almost as if IE does some sort of garbage collection but if you are using
> the browser too heavily, it does not have time for garbage collection and
> runs out of memory. If you slow down your automation to close to human
> speeds, it gives IE a chance to clean up a little.

http://grokbase.com/t/gg/webdriver/128hka6qg1/ie9-runs-out-of-memory-on-32bit-windows7/oldest
",morganchristiansson,2012-09-07 18:12:04
808,2012-09-06 19:26:57,"Did you just randomly add some code and hope that it does something? I can't see how this could possibly have _any_ kind of effect, since #quit is only called in the at_exit block, so just before _the process terminates_. Resetting an instance variable just before what would usually be the end of the test suite is not going to do anything at all, as far as I can see. Also I'm not going to merge anything that doesn't have tests. Thirdly I'd like you to consider contributing whatever fixes you want to the current development branch. This doesn't appear critical, and we're only accepting critical fixes for old branches.
",jnicklas,2012-09-07 18:12:04
808,2012-09-07 09:08:42,"I also have this code in env.rb, together with this commit they successfully restart the IE instance for every cucumber feature that runs:

<S_CODE_TOKEN>

I realize it's a bit rough, and existing tests are failing and new ones are not yet added.

I heard about the latest capybara release but I think several gems we're using are not yet updated, and we'll also need to change our test code, but I will look at reapplying this to latest capybara which we're not yet using once IE8 is running reliably.

PS. thanks for a great library :-)
",morganchristiansson,2012-09-07 18:12:04
808,2012-09-07 18:12:04,"Okay, I see now why you'd want this, and it does make some sense. However, it's clearly not a critical fix, so I won't merge this to the 1.1 branch. If you're interested, please send a pull request _with tests_ for the active development branch.
",jnicklas,2012-09-07 18:12:04
807,2012-09-05 11:57:56,"# Proposal for dedicated directory for capybara drivers

This is proposal for reorganising driver files into a driver directory. The purpose is to better emphasize the cut between capybara and the drivers. Each driver has a subdirectory under driver. And the public driver API is defined by Capybara::Driver::Base and Capybara::Driver::Node. This file organisation is also used in many other frameworks like active record, paperclip, etc.
",jarl-dk,2012-09-05 12:35:51
807,2012-09-05 12:06:50,"This pull request [passes](http://travis-ci.org/jnicklas/capybara/builds/2343753) (merged c05958a2 into d153635e).
",travisbot,2012-09-05 12:35:51
807,2012-09-05 12:22:31,"It actually used to be like this, but we changed it to the current layout, so that the internal drivers are more similar to third party drivers, like capybara-webkit in their layout, and in anticipation of them being extracted into separate gems at some point.
",jnicklas,2012-09-05 12:35:51
807,2012-09-05 12:31:21,"I see...

However I would probably tend to define the layout in the capybara project
and encourage others to follow than the other way around...

Anyway I am not religious on this points I just feel that it would have
helped foreigners (like me) to understand the design/architecture of
capybara.

I am pretty confident that thoughtbot would follow if you contacted them
and encouraged them to reorganise files (or maybe even came up with a pull
request).

Their own paperclip framework has the the layout of this pull request. with
storage drivers in the storage directory.

Jarl

2012/9/5 Jonas Nicklas notifications@github.com

> It actually used to be like this, but we changed it to the current layout,
> so that the internal drivers are more similar to third party drivers, like
> capybara-webkit in their layout, and in anticipation of them being
> extracted into separate gems at some point.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/pull/807#issuecomment-8296133.

## 

Jarl Friis
Softace ApS
Rådhustorvet 7, 2.
3520 Farum
LinkedIn: http://dk.linkedin.com/in/jarlfriis
",jarl-dk,2012-09-05 12:35:51
807,2012-09-05 12:35:50,"I guess this comes down to preference, and I prefer it the way it is now.
",jnicklas,2012-09-05 12:35:51
807,2012-09-05 19:40:20,"it certainly is.

2012/9/5 Jonas Nicklas notifications@github.com

> I guess this comes down to preference, and I prefer it the way it is now.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/pull/807#issuecomment-8296444.

## 

Jarl Friis
Softace ApS
Rådhustorvet 7, 2.
3520 Farum
LinkedIn: http://dk.linkedin.com/in/jarlfriis
",jarl-dk,2012-09-05 12:35:51
806,2012-09-05 06:58:43,"The `wait_until` method in the `Session` is now removed and the `wait_until` method for the `Node` is renamed to `synchronize`

According to this 

 https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/base.rb#L15

`synchronize` should be exposed in `Session`

But I could not find it. Is there any other way to access this method?
",avinasha,2012-09-06 15:39:56
806,2012-09-05 11:10:29,"Technically yes. It's a deliberate decision not to expose `synchronize` in the session. People are going to assume that `synchronize` is a waiting function, and use it as such. It's not. It has very specific semantics, which are _very_ different from `wait_until`. I'm afraid people are going to do `s/wait_until/synchronize/` and not realize that what they're doing is wrong/unnecessary.
",jnicklas,2012-09-06 15:39:56
806,2012-09-06 15:39:56,"Thank you for the clarification.. 
",avinasha,2012-09-06 15:39:56
806,2012-09-15 16:23:41,"How can you decide not to expose this incredibly useful function based on a possible error which some people might make? Would you consider exposing it if I made a pull request?
",johncant,2012-09-06 15:39:56
806,2012-09-16 18:11:46,"I'm open to a discussion certainly. I've seen so many people misuse wait_until though, and write silly stuff like

<S_CODE_TOKEN>

I guess some people will always simply not RTFM and I shouldn't be bothered about that. So maybe I'm wrong, I just have a feeling that it's too hard to understand what the hell `synchronize` does without some kind of understanding of the Capybara internals.
",jnicklas,2012-09-06 15:39:56
806,2012-09-18 13:50:29,"Hi jnicklas,

Not that I'm any kind of expert in the semantics of wait_until and synchronize, but I'd say that (1) It's useful and (2) They're buried deep within the documentation/code, so you'd have to RTFM to even find them!
",johncant,2012-09-06 15:39:56
806,2012-11-21 23:49:12,"Hi @jnicklas,

A philosophical point:

So I understand your arguments for why you want to hide `#synchronize`, and how the method is not simply a renaming of the capybara 1.x `#wait_until` method. It is also cool how generally in capybara you don't need to concern yourself with waiting for elements to appear due to automagic synchronizing. Kinda analogous to how OS X makes things all pretty and easy to use - lots of things happen automatically without having to concern yourself with trivial details. But... Apple still give me Terminal.app to use when I want to do something with my mac that Jonny Ive would rather I didn't. In the same spirit, if I were in your position, I'd leave `#synchronize` public.

A practical question:

With `#wait_until` gone and without access to `#synchronize`, I'm trying to work out how to allow for customized wait times. How would I convert the following capybara 1.x code to work in 2.x?

<S_CODE_TOKEN>

If I understand capybara 2.x's code right, shouldn't the following be what I want?

<S_CODE_TOKEN>

Ie: just get rid of `#wait_until` and let `#has_selector?` do the synchronizing in the background?

Regards,

Nat Ritmeyer
",natritmeyer,2012-09-06 15:39:56
806,2012-11-22 09:03:07,"@natritmeyer: you're spot on in your second example. The wait_until call there was redundant even under Capybara 1.x. It would have worked just as well without it.

It's not so much that you _can't_ manually wait. It's trivial to implement wait_until yourself: https://gist.github.com/d8da686061f0a59ffdf7, but I would consider it a last resort.
",jnicklas,2012-09-06 15:39:56
805,2012-09-05 03:36:50,"The expected content is definitelly there, I've checked with `save_and_open_page` and it's also present in the error message.

I am using Steak to do acceptance testing, and a have a custom matcher `page.should show_post Post.last` to check if the content is properly displayed, from the matcher I set my content expectations, the strange thing is that the expectation is meet when I create the model but when the model is updated it is no longer meet. I wish I could provide more detail.

<S_CODE_TOKEN>
",maca,2012-09-05 05:05:01
805,2012-09-05 05:05:01,"Please read this: http://www.elabs.se/blog/38-how-to-write-a-bug-report
",jnicklas,2012-09-05 05:05:01
804,2012-09-04 20:00:07,"Add `require 'database_cleaner'` to section 'Using Capybara with Test::Unit'
Otherwise `DatabaseCleaner.strategy = :truncation` fails :)
",tkrotoff,2012-09-05 05:02:39
804,2012-09-04 20:06:02,"This pull request [passes](http://travis-ci.org/jnicklas/capybara/builds/2335826) (merged ef02efd6 into d153635e).
",travisbot,2012-09-05 05:02:39
804,2012-09-05 00:19:25,"Hm, I wonder why this might be necessary. Normally database_cleaner should be automatically loaded by bundler.

Any ideas?
",joliss,2012-09-05 05:02:39
804,2012-09-05 05:02:39,"I think people should know how to require stuff, and how to read an error message indicating that something is not loaded. That's not exactly rocket science.
",jnicklas,2012-09-05 05:02:39
804,2012-09-05 08:53:04,"> Normally database_cleaner should be automatically loaded by bundler

You are right, I have just tested it by generating a new Rails app.
It didn't work for me without `require 'database_cleaner'` because I develop a Rails engine.

Here how I have generate a new Rails app with Capybara and Test::Unit:

<S_CODE_TOKEN>
",tkrotoff,2012-09-05 05:02:39
803,2012-09-03 12:54:36,"Little bit of background: For a touch platform only web app we're building we're using Capybara for acceptance tests, along with a js driver that is touch capable (now poltergeist, before capybara-webkit - basically any recent webkit based driver supporting touch events could be used). We're not using any click interactions at all, thus I needed to make the capybara js driver touch capable.

Here's a pull request I sent to poltergeist
https://github.com/jonleighton/poltergeist/pull/135/files

which contains an initial implementation, so far only for simple, single taps:

<S_CODE_TOKEN>

e.g.

<S_CODE_TOKEN>

@jonleighton in response asked me to start a discussion here as to (hopefully) agree on an API that could be implemented by any capable driver.  See https://github.com/jonleighton/poltergeist/issues/141

I had further methods in mind to be implement later, just as a proposal:

single_tap
double_tap
long_tap
swipe_left
swipe_right
swipe_up
swipe_down

(The names follow what Zepto.js provides for touch event abstractions.) There are also gesture events I didn't yet think about.

I'd be glad if we could get a discussion going about this and happily help with the implementation whenever required.

[Edit: swipe_bottom -> swipe_down]
",carhartl,2014-07-15 20:13:34
803,2012-09-03 14:10:45,"It sounds reasonable enough to me. The method names are descriptive and fit their purpose. I'm for it!
",jnicklas,2014-07-15 20:13:34
803,2012-09-03 20:10:25,"Cool! So would I add these methods as follows?

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",carhartl,2014-07-15 20:13:34
803,2012-09-05 12:33:47,"Yes exactly. It would make sense to add tests for them as well. This might be a bit tricky, obviously since none of the drivers in Capybara itself support it.
",jnicklas,2014-07-15 20:13:34
803,2012-09-05 12:47:02,"I am thinking: For `Node` make sure that the expected exceptions get thrown, for `Element` set a message expectation  on base. But I'll see what's there as well.
",carhartl,2014-07-15 20:13:34
803,2012-09-05 13:14:48,"The ideal solution, imo would be to have tests for the actual implementation in the Capybara suite. Selenium and RackTest could exclude those tests from their own suites.
",jnicklas,2014-07-15 20:13:34
803,2013-07-02 19:27:33,"Did this ever get made? I'd be interested in contributing to Capybara to help create this API
",MITDelian,2014-07-15 20:13:34
803,2013-07-02 22:22:55,"@MITDelian unfortunately, no. If you'd like to help, that'd be great.
",jnicklas,2014-07-15 20:13:34
803,2014-01-16 01:05:59,"This would be very helpful :+1: 
",glaksmono,2014-07-15 20:13:34
803,2014-04-08 01:43:05,"I've started implementation of a touch api in pr #1289  -   currently there are 4 methods  single_tap, double_tap, long_press, flick (based on element specific touch methods selenium webdriver provides)  -- I'm not sure what useful parameters to flick should be,  so feedback is definitely welcome, as are suggestions for any other methods we should have.  Please add suggestions/comments over in #1289. I've also added testing of them against android via saucelabs, won't work here yet due to the secure env vars being set for my repo but I'll get them fixed up at some point.
",twalpole,2014-07-15 20:13:34
803,2014-07-15 20:13:34,"Closing this as discussion should move over to pr #1289 
",twalpole,2014-07-15 20:13:34
803,2015-01-05 04:19:57,"Hey, there's this gem I have developed that adds touch gestures support to Capybara. Take a look at https://github.com/Ricardonacif/touch_action .

Thanks,
",Ricardonacif,2014-07-15 20:13:34
802,2012-09-03 09:19:13,"# Fix for issue #778

The pull requests consists of two commits following red-green-refactor flow

**Red:** A test that demonstrates the problem and the expected behaviour. The expected behavour is ""not for discussion"" since it is dictated by the CGI standard on how 'multiple' attribute shall behave on CGI level.

**Green:** An implementation (one among many). This may not be an optimal solution but it is quite minimal and it does work using the RackTest driver. Currently it is not possible to implement this for the Sellenium driver, since the Sellenium driver does not have support for this, see http://code.google.com/p/selenium/issues/detail?id=2239, but that should not prevent capybara from having this feature for other drivers.
## About the implementation

As far as I can see the RackTest driver stores information about the action to be done in a form document (Nokogiri::HTML::Document) called `native`. This means that storing an Array for an input element with attribute `multiple` is best represented as multiple identical elements only differentiating on the `value` attribute (even though they have the same `id` attribute). This is also the closest we can get to mimick the needed CGI behaviour. The Selenium driver does not at the moment support upload of multiple files, more information can be found on [this Selenium issue](http://code.google.com/p/selenium/issues/detail?id=2239)
",jarl-dk,2012-09-05 11:25:48
802,2012-09-03 09:24:58,"This pull request [fails](http://travis-ci.org/jnicklas/capybara/builds/2316763) (merged b217deef into 3a85729e).
",travisbot,2012-09-05 11:25:48
802,2012-09-03 09:36:43,"Failing for ruby 1.8.7 and 1.9.3... I have only tested for 1.9.2. I will investigate...
",jarl-dk,2012-09-05 11:25:48
802,2012-09-03 10:14:47,"This pull request [passes](http://travis-ci.org/jnicklas/capybara/builds/2317143) (merged 977f1c50 into 3a85729e).
",travisbot,2012-09-05 11:25:48
802,2012-09-03 11:47:08,"The serialisation is only internal in capybara and the only purpose of the serialization is to pass an Array from the action method to the driver; The driver should unserialise it to get the Array back. The driver shall handle the array...

I would love to see an implmentation where the Array (of paths) is passed as an Array directly, but since the Array needs to go through the Nokogiri node it must be a string. Please understand me correctly: I don't like the implementation [b217dee](https://github.com/softace/capybara/commit/b217deef4a4200a84bad61bc195dc929f00e9409) using YAML, it is more like a necessary evil to pass an Array from the action to the driver.
",jarl-dk,2012-09-05 11:25:48
802,2012-09-03 12:44:19,"It's not internal to Capybara. The driver API is a public API, which should be useable for any driver. The fact that RackTest needs to serialize and unserialize to and from YAML is besides the point. Other drivers don't. If say capybara-webkit would support this, why would it need to unserialize a YAML string? That's bad API design. The driver should be passed an array. If we really can't find a way around the YAML serialization, then it should at least be done here: https://github.com/jnicklas/capybara/blob/master/lib/capybara/rack_test/node.rb#L14-36
",jnicklas,2012-09-05 11:25:48
802,2012-09-03 13:28:44,"Sorry I didn't mean that it was deserialised in the driver, I ment that it is deserialised in capybara driver wrapper code so that the driver wrapper has the Array available when the specific Driver API is exercised from the driver wrapper code. However I will take a look at it again with your suggestion in mind...
",jarl-dk,2012-09-05 11:25:48
802,2012-09-03 14:09:04,"There's no such thing as a driver wrapper. The driver API is an abstract Interface, kind of like a Java interface. The driver is expected to respond to certain methods in certain ways, but there is nothing in between which does any translation, that's after all what the driver API is for.
",jnicklas,2012-09-05 11:25:48
802,2012-09-03 18:40:24,"OK. Then the driver is what I ment (in contrast to the 3rd party products like Selenium, RackTest which thee driver actually drives :-) ). I see what you mean now by the interface... I'll take a look at it.
",jarl-dk,2012-09-05 11:25:48
802,2012-09-03 20:11:30,"This pull request [fails](http://travis-ci.org/jnicklas/capybara/builds/2323138) (merged fb881418 into 3a85729e).
",travisbot,2012-09-05 11:25:48
802,2012-09-03 20:16:33,"Jonas, thanks for ellaborating on the design of capybara. I have removed the need for YAML. I suggest you make another review. Please review the last three commits as being one commit (for example `/lib/capybara/rack_test/form.rb` is unmodified). I am willing to make a new pull request with a nicer series of commits, i.e. the last three commits should be squashed.

It seems like Travis is not 100% stable. I have tested this on 1.8.7 as well. Timing issue maybe?
",jarl-dk,2012-09-05 11:25:48
802,2012-09-03 20:22:24,"Seems like I don't have the administrative privileges to trigger a rebuild of this pull request. Could you do that, Jonas.
",jarl-dk,2012-09-05 11:25:48
802,2012-09-05 11:26:22,"Thank you for putting in all this effort, and putting up with my complaints. You did a really good job, thank you!
",jnicklas,2012-09-05 11:25:48
802,2012-09-05 11:45:08,"Thanks. Let me know when there is a new stable gem released.
",jarl-dk,2012-09-05 11:25:48
802,2012-09-05 11:46:33,"Your complaints was very valid. It was my lack of insight in the capybara design that caused ""spaghetti"" attempts.
",jarl-dk,2012-09-05 11:25:48
801,2012-09-01 14:13:01,"I was unable to get the Selenum default driver to work in a rails 3.2.3 app. In firefox it would quickly display an error message indicating that the CSS wasn't available. The following error is reported in the terminal:

Selenium::WebDriver::Error::ElementNotVisibleError:
       Element is not currently visible and so may not be interacted with
     # [remote server] file:///var/folders/vz/cgz719tn64n_jdmzj1tcm3w00000gp/T/webdriver-profile20120901-5039-  14dubxd/extensions/fxdriver@googlecode.com/components/command_processor.js:5908:in `unknown'

There is also an error, which flew by so fast I couldn't read it in the browser. Switching to the chrome driver, caused it to hang and the following error is reported in the browser window:

Error compiling CSS asset

NameError: undefined local variable or method 'app' for #
<ActiveSpport::Cache::FileStore: xxxx>

/rack/test/methods.rb:31 in 'build_rack_mock_session'

When I switch to webkit, I get several errors in the terminal like this: 

undefined|0|Error: NameError: undefined local variable or method `app' for #ActiveSupport::Cache::FileStore:0x007ff4ac78df18
http://127.0.0.1:53889/|115|SyntaxError: Parse error
undefined|0|ReferenceError: Can't find variable: $

but the test pass! 

Any idea where to look for the issue? Is it a rack-test thing? Thanks! 
",tmancino,2012-09-01 14:23:40
801,2012-09-01 14:23:40,"Question Moved to Newsgroup......
",tmancino,2012-09-01 14:23:40
800,2012-08-31 15:20:01,"Consider these example excerpts (first of them breakes, second does not)

<S_CODE_TOKEN>

when i changed it to 

<S_CODE_TOKEN>

it worked

NOTE: this behavior appeared in rack_test;   first variant worked well with :webkit before
",idrozd,2012-09-06 07:40:00
800,2012-09-05 11:29:10,"This is a quirky side effect of rack_test not having the waiting behaviour of selenium. RackTest is unaware that the node no longer is on the page. I've noticed this behaviour myself, but since I understood why this is happening, I kind of wrote it off as expected behaviour, but you're right that it is a bit odd. I'm not sure if it's worth fixing though.
",jnicklas,2012-09-06 07:40:00
800,2012-09-05 12:18:42,"Well, I think that mentioning this in readme is enough or in some kind of
""gotchas"" page.

2012/9/5 Jonas Nicklas notifications@github.com

> This is a quirky side effect of rack_test not having the waiting behaviour
> of selenium. RackTest is unaware that the node no longer is on the page.
> I've noticed this behaviour myself, but since I understood why this is
> happening, I kind of wrote it off as expected behaviour, but you're right
> that it is a bit odd. I'm not sure if it's worth fixing though.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/800#issuecomment-8295000.
",idrozd,2012-09-06 07:40:00
800,2012-09-06 07:40:00,"I just spent some time looking at this, and I think it's possible, but quite hard to do it. I don't have the time to fix it myself at this point. Please give it a try if you feel like it.
",jnicklas,2012-09-06 07:40:00
800,2012-09-09 13:40:13,"Hey @idrozd, does `find_link('Course date').click` reloads the page for you? Otherwise I don't undestand how do you expect rows data in table to be reordered using `rack-test`.
",gmile,2012-09-06 07:40:00
800,2012-09-09 16:37:02,"It's roundtrip sort with ransack, not js-based )
Sorry, i should've specified this
",idrozd,2012-09-06 07:40:00
799,2012-08-30 18:10:05,"When writing cukes, I'd like to be able to have one Then for multiple cases of a word being in a flash. For example, I just want to make sure a flash has successful language in it. I'd like to be able to do has_content(/[Ss]uccess/).

tldr; has_content and has_text should take a /regex/ or a string arg by using === to compare.
",kurtisnelson,2012-08-30 18:24:37
799,2012-08-30 18:20:22,"@kurtisnelson The current code in master accepts a regex for has_text? (and has_content? since that's just an alias of has_text) - and as an FYI , so does the :text option passed to finders
",twalpole,2012-08-30 18:24:37
798,2012-08-29 15:28:22,"Almost every time I use `page.should have_link()` I incorrectly do:

<S_CODE_TOKEN>

Would there be any interest in supporting this as well as the 'correct' form? If so I'm happy to provide a patch.

Thanks for Capybara. It's awesome.
",jcf,2012-08-30 14:03:56
798,2012-08-30 13:50:19,"I think this would be too ambiguous.
",jnicklas,2012-08-30 14:03:56
798,2012-08-30 14:03:56,"Thanks for your response Jonas.

This is how I would like to write link matchers:

<S_CODE_TOKEN>

A new major version would be required to change the current behaviour of saying `have_link('The text inside the anchor tag')` so I'll close this issue.

Have a nice weekend. :smile:
",jcf,2012-08-30 14:03:56
797,2012-08-28 11:51:35,"Hi, got the following error when doing a gem i capybara-webkit:

C:\Users\sam.treweek>gem install capybara-webkit
Fetching: xpath-0.1.4.gem (100%)
Fetching: capybara-1.1.2.gem (100%)
Fetching: capybara-webkit-0.12.1.gem (100%)
Temporarily enhancing PATH to include DevKit...
Building native extensions.  This could take a while...
ERROR:  Error installing capybara-webkit:
        ERROR: Failed to build gem native extension.

<S_CODE_TOKEN>

On Windows 7 (sorry about that!)
",serialbandicoot,2012-08-28 11:57:45
797,2012-08-28 11:57:45,"Ok with a bit more research I can see there is more for me to do first: https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit
",serialbandicoot,2012-08-28 11:57:45
796,2012-08-28 07:48:40,"So, let me run through a quick example.

If I do something like:

<S_CODE_TOKEN>

Might produce a string like:

<S_CODE_TOKEN>

If it's output on the page and there's text such as:

<S_CODE_TOKEN>

Neither `have_content` nor `have_text` will match it.  Now of course I _could_ do:

<S_CODE_TOKEN>

But that seems like the typical case considering `have_content` is always matching against unescaped text.

Maybe I'm thinking of this incorrectly, but I couldn't find any old issues pointing to this.
",jfelchner,2012-08-31 16:33:15
796,2012-08-30 13:51:07,"I have honestly not the faintest what you mean.
",jnicklas,2012-08-31 16:33:15
796,2012-08-30 14:51:35,"> Neither have_content nor have_text will match it.

If I'm understanding you correctly, you're trying to check if `<script>` is in your page, right? It should work OK, with the current Capybara master at least:

<S_CODE_TOKEN>
",joliss,2012-08-31 16:33:15
796,2012-08-31 00:16:31,"@joliss let me try checking out master and see if that fixes the problem.  It's recently become an issue because I just now upgraded to Rails 3.1.8 and `SafeBuffer` has started to encode single quotes.  This has caused a pretty large headache.

Such that doing this:

<S_CODE_TOKEN>

Perhaps `master` has fixed this issue or there's something more insidious going on.  I'll update back here when I have time to try it this weekend.

Thanks for the feedback!
",jfelchner,2012-08-31 16:33:15
796,2012-08-31 16:33:15,"Yup, I think that's not supposed to happen. It works OK on master though.

<S_CODE_TOKEN>

I'll assume that with the improved `has_content` implementation in master, these kinds of issues are fixed. But if you still encounter problems on master, do leave a message here and we can reopen.
",joliss,2012-08-31 16:33:15
796,2014-01-01 23:49:29,"I'm running into a similar issue on Capybara 2.2.0 with Rails 4.

<S_CODE_TOKEN>

This is with data from Faker.
",zachlatta,2012-08-31 16:33:15
796,2015-06-05 18:58:39,"I've ended up monkey patching the HaveText matcher class with this:

<S_CODE_TOKEN>

I'll try to find time to send a proper PR next week.
",budu,2012-08-31 16:33:15
796,2015-06-05 19:24:46,"@budu This is an issue that was fixed/closed a long time ago with no one else reporting problems-- if you're having issues with this you may want to ask on the mailing list.
",twalpole,2012-08-31 16:33:15
795,2012-08-26 22:41:40,"Hi,

I working with rails 3.1 and with cucumber to test some of my functionality and on my view I have this:

<S_CODE_TOKEN>

and a cucumber test with this step

<S_CODE_TOKEN>

with its corresponding implementation

<S_CODE_TOKEN>

In this case, due to the amount field it's a number_field, the fill_in method didn't insert the negative sign, making my test fail then because of the sum of those amounts is something different than expected
",fespinoza,2012-09-06 07:34:37
795,2012-08-30 13:52:37,"That seems strange. Do you perchance have a table transform somewhere which casts the amount to an Integer? No idea how this would happen otherwise.
",jnicklas,2012-09-06 07:34:37
795,2012-09-06 07:34:37,"Capybara now accepts non-string values and casts them to string, which should fix this.
",jnicklas,2012-09-06 07:34:37
794,2012-08-24 19:34:04,"When using 

  page.should have_select(""some-selector"", options: [""option1""], selected: ""something that doesnt exist"")

the reported error is

  expected select ""some-selector"" to return something

where the actual error lies within the selected assertion. Executing

  page.should have_select('some-selector')

alone passes.
",gleenn,2012-08-30 13:53:01
794,2012-08-30 13:53:01,"The error message is much better in Capybara 2.0 beta.
",jnicklas,2012-08-30 13:53:01
794,2012-09-02 04:04:03,"Awesome, it was definitely a little confusing. Also, its always nice to
know people are listening to bug reports.

Thank you!

Glenn

On Thu, Aug 30, 2012 at 6:53 AM, Jonas Nicklas notifications@github.comwrote:

> The error message is much better in Capybara 2.0 beta.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/794#issuecomment-8160015.
",gleenn,2012-08-30 13:53:01
793,2012-08-21 13:59:32,"I'm writing an upgrade guide, and I find myself telling people ""Capybara 2.0 will break your test suite. To stop it from breaking your test suite, enable `:respect_data_method`."" This is something that we'll basically have to tell all users, or they'll get tripped up.

Instead, I'd suggest that we enable the right behavior by default, whenever `capybara/rails` is required.

Ignoring data-method in the RackTest driver is very reasonable when we're not testing Rails apps, for what it's worth. But in Rails apps, people will generally want to honor data-method.
",joliss,2012-08-30 13:53:20
793,2012-08-21 14:14:04,"This pull request [fails](http://travis-ci.org/jnicklas/capybara/builds/2189176) (merged 8eb42455 into 6529da73).
",travisbot,2012-08-30 13:53:20
793,2012-08-21 21:46:55,"The alternative of course is adding `js: true` to tests that require data-method, but that makes the tests much slower, and you'll likely have to take care of confirm boxes.
",joliss,2012-08-30 13:53:20
793,2012-08-23 13:57:08,":heavy_plus_sign::one:

I think a lot of people will get bad headaches when they bump into this unexpected behavior.
",colszowka,2012-08-30 13:53:20
793,2012-08-30 13:53:45,"Alright. Let's do it this way.
",jnicklas,2012-08-30 13:53:20
793,2012-08-30 13:54:22,"Cool, thanks :)
",colszowka,2012-08-30 13:53:20
793,2012-08-30 14:33:28,"Awesome, thanks for merging!
",joliss,2012-08-30 13:53:20
792,2012-08-21 10:14:50,"/cc @jarib - I think we'll need your help here, Jari!

I've been running the Capybara test suite in a loop. I could reproduce the flickering tests with Selenium that we've been seeing on Travis. I tried `rspec --order random:$i`, and it turns out that the flickeringness is not test order dependent but random (i.e. some kind of race condition).

Here is an example failure:

<S_CODE_TOKEN>

The first offending test is this:

<S_CODE_TOKEN>

My sense is that it has nothing to do with `within`, which is just a chained `find_elements` as far as I know. The flickering failure happens in other places as well: http://travis-ci.org/#!/jnicklas/capybara/jobs/2020450

I'm thinking perhaps `@session.body` (=> `browser.page_source`) is causing the problem, where other matchers (like `has_content`) would retry repeatedly and smooth over Selenium returning `""""`.

I can't reproduce it with [this gist](https://gist.github.com/3414141), however.

Any ideas?
",joliss,2012-08-30 13:59:56
792,2012-08-24 16:35:28,"I don't see anything to do about this besides waiting for the expected browser state. As mentioned in #690, WebDriver's #click is asynchronous.
",jarib,2012-08-30 13:59:56
792,2012-08-24 17:12:03,"Thanks Jari, that helps!

Jonas, I'm not sure how to best fix the tests. Should we try and use `should have_content` everywhere?
",joliss,2012-08-30 13:59:56
792,2012-08-24 17:14:50,"Yes, the right solution would be to use `should have_content` instead.
",jnicklas,2012-08-30 13:59:56
792,2012-09-09 23:43:55,"Thanks for fixing! There are a bunch of instances of `.body` in the test suite left. Did you check all of those, or should I perhaps convert them to `has_content` as well?
",joliss,2012-08-30 13:59:56
791,2012-08-18 23:26:14,"attach_file is working fine for me--that is, until I enable javascript. With :js => true, the file I attached does not show up in the params at all. I've tried using both relative and absolute paths for the file, with the same result.

Using Capybara 1.1.2 on Ubuntu
",jackdesert,2012-09-06 07:35:49
791,2012-08-19 08:02:37,"This is a well tested feature, used by thousands of people in a version which has been stable and released for a year. If you think there is a bug in Capybara, you're going to have to provide some kind of proof. It's more likely that you're doing something wrong.
",jnicklas,2012-09-06 07:35:49
791,2012-08-19 14:04:24,"You're right--I may be doing something wrong. 

I've looked into this more, and using the webkit driver, both of the following scenarios fail to set the value of the file field:

<S_CODE_TOKEN>

But without the :js => true flag, they set the value as expected. Suggestions?
",jackdesert,2012-09-06 07:35:49
791,2012-08-19 14:38:26,"Is it possible you're using a relative path? Selenium and webkit tend to want an absolute path.
",jnicklas,2012-09-06 07:35:49
791,2012-08-19 15:15:11,"I'm calling it with

<S_CODE_TOKEN>

Though I've tried it with relative paths as well. It complains if I feed it an invalid path, for example

<S_CODE_TOKEN>

but as long as I feed it a valid path (either relative or absolute) it accepts the file, but it just doesn't set the field. (Quiet failure)
",jackdesert,2012-09-06 07:35:49
791,2012-08-30 14:05:07,"I'm going to need something reproducible. This is tested thoroughly in the test suite, which currently passes. See: https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/attach_file_spec.rb
",jnicklas,2012-09-06 07:35:49
791,2012-08-30 18:48:59,"@jackdesert could the file input tag be hidden in some way? Say, it has `opacity: 0`, `visible: none` or something? I this cases there's a possibility that the js driver you are using cannot access it correctly, i.e. click it.

The driver may also consider element invisible if it is located off the screen, or is being overlapped by some other element.

And, by the way, no wonder that you are able to upload the file without `js: true`. In this case `rack-test` is responsible for rendering the page. As far as I know, `rack-test` doens't load `css` and `js` assets, but what's more important is that it doesn't do any work to interpret them, i.e. match to corresponding dom elements.
",gmile,2012-09-06 07:35:49
791,2012-09-06 07:35:49,"I'm closing this issue, since I can't reproduce it. Please reopen if you can provide a failing test case or any other reproducible proof of this issue.
",jnicklas,2012-09-06 07:35:49
791,2012-09-23 20:37:27,"@gmile, yes indeed it was hidden. So instead of hiding it, now I'm just positioning it off screen, like so:

<S_CODE_TOKEN>

and it's working with or without :js => true

Incidentally, now the upload works in Chrome, too. It wasn't before. 
",jackdesert,2012-09-06 07:35:49
791,2016-06-05 12:16:51,"I've faced with the problem of uploading file from PC via clicking Browse browser button.
I have following xml

> input id=""file_upload_input"" class=""ng-pristine ng-untouched ng-valid"" type=""file"" ng-model=""vid_input_file_field""

And I am trying to upload file in this way:

> attach_file 'file_upload_input', 'C:/Users/Kay/Videos/video_file_three_seconds.mp4'
> But it doesn't select the file from defined directory. But I see that ""Browse"" button is highlighted.
> So what I am doing incorrectly?
",kay4444,2012-09-06 07:35:49
791,2016-06-05 14:25:13,"@kay4444  Please ask howto questions on the mailing list as requested in the README, or if you believe you've found an actual problem with Capybara provide enough info to replicate, including things like the versions of gems used and the actual error messages you're getting, etc.
",twalpole,2012-09-06 07:35:49
790,2012-08-15 16:46:07,"I'm stuck with the following:
`gem 'capybara', git: 'https://github.com/jnicklas/capybara.git', ref: 'd35baaa6a59aa3449a834a574d404883ec72d813' # has_text? isn't released yet'`
because I need has_text? and use capybara-webkit which requires a version < 2. So a Release 1.1.3 would be very good for me and I think other people too.
",PizzaPill,2012-08-15 19:31:55
790,2012-08-15 19:31:55,"If there is a 1.1.3 release, it won't include has_text?, because that's a new feature. It especially won't include the fact that has_content? and has_text? now behave the same. There are a few legitimate issues that could be fixed by a 1.1.3 release, but this isn't one of them. Capybara follows [semver.org](http://semver.org), in case you're wondering why.
",jnicklas,2012-08-15 19:31:55
790,2012-08-16 14:30:57,"I see thank you very much!
",PizzaPill,2012-08-15 19:31:55
789,2012-08-14 13:54:13,"I'm on:
- Capybara head (but I tried 1.1.x)
- Selenium webdriver 2.25.0
- Firefox 14
- Ruby 1.9.3
- OSX Mountain Lion

I think I found a bug, but I haven't gotten far as to what the cause is. Basically, in a `pry` session, when I call `all('html')`, the ruby process ends up taking 100% of the CPU and takes a long time (2 to 20 minutes) before anything is returned.

I starting poking around the code and it seems the issue may be somewhere in the all method:

<S_CODE_TOKEN>

Right above `Capybara::Node::Element.new(session, node, self, query)` I inserted `binding.pry` and inspected:
- session
- node
- self
- query

And `session`, `node`, `self` all caused this slowdown. `query` was okay though.

Here is `self` (I waited about 2 minutes for this)

<S_CODE_TOKEN>

This issue didn't happen before. I tried to find a point in time in which things were working okay, but so far have failed. I went to Ruby ree, 1.8.7, 1.9.2, another project, and I saw the same problem. I'm stumped!

Thanks
",ramontayag,2012-08-15 13:26:43
789,2012-08-14 14:20:14,"Update: I just tried the `debugger` gem and the all method seems to work just fine.
",ramontayag,2012-08-15 13:26:43
789,2012-08-14 14:25:29,"Nice bug report.

I can't reproduce it with the same configuration on Ubuntu 12.04 - all('html') returns almost immediately.

My first guess is that something is going wrong in the communication between the Selenium client and the browser process.

Before I pull @ jarib into this report (he's the selenium-webdriver maintainer), could you try and get some more debug info? Paste it into a gist if it's too long. I'd also be particularly interested in what strace outputs while all('html') is running - try something like `strace -f -o strace.log bundle exec ...`.
",joliss,2012-08-15 13:26:43
789,2012-08-14 14:33:19,"Spoke too soon. There's still a slow down with the `debugger` gem, _when I'm using selenium webdriver_. When I'm running headless and using debugger, finds work okay. However, when running headless and using pry, it's slow again.
",ramontayag,2012-08-15 13:26:43
789,2012-08-14 14:37:05,"What kind of ""headless""? Selenium with Xvnc, WebKit, RackTest?
",joliss,2012-08-15 13:26:43
789,2012-08-14 14:38:47,"RackTest. :) Will get back to you on that trace. Looking for an alternative on osx.
",ramontayag,2012-08-15 13:26:43
789,2012-08-14 15:06:43,"Right, there's no strace on OS X.
",joliss,2012-08-15 13:26:43
789,2012-08-14 15:08:36,"Hey @jarib, @ramontayag is having a weird problem where the Selenium bridge seems to lock up for minutes when he calls `all('html')`. Is there something he can do to produce some trace log of the communication between Ruby and Firefox, to figure out where exactly it's going wrong?
",joliss,2012-08-15 13:26:43
789,2012-08-14 15:09:34,"Yes, run the script with `$DEBUG = true` or pass `-d` to Ruby.
",jarib,2012-08-15 13:26:43
789,2012-08-14 15:22:44,"@joliss I tried it with `dtruss` but the test does not seem to want to start.

Thanks @joliss and @jarib - I've run it with `$DEBUG` and saw a bunch of stuff. It's pretty late here, so I need to get some shut eye. I'll get back you both with what I find.

# 

**I realized** at the last minute that, because other finds worked in the spec without delay, maybe it's the way `pry` prints out stuff (it uses awesome_print). I tried doing `find('html').to_s` and I got a result immediately.  I guess that rules out selenium-webdriver? I guess `awesome_print` does some recursive hoopla to print it out with all the info you need, thus the thousand-line output.

I have yet to fully test this hypothesis though. I'll be a zombie tomorrow if I don't get sleep. Thanks again.
",ramontayag,2012-08-15 13:26:43
789,2012-08-14 15:28:31,"Yes, it could well be an interaction between pry printing out the extremely detailed output, which requires some expensive work to be done on the selenium side. Or often this sort of performance issue is caused by repeated concatenations on huge strings. If $DEBUG doesn't reveal anything I would do some work with ruby-prof.
",jfirebaugh,2012-08-15 13:26:43
789,2012-08-14 15:39:47,"I've opened [issue #690](https://github.com/pry/pry/issues/690) on pry.
",joliss,2012-08-15 13:26:43
789,2012-08-15 00:12:52,"Thanks Jo Liss!

I didn't mean to off load work. But thanks you've been very helpful.

Ramon Tayag

On Tue, Aug 14, 2012 at 11:39 PM, Jo Liss notifications@github.com wrote:

> I've opened issue #690 https://github.com/pry/pry/issues/690 on pry.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/789#issuecomment-7729839.
",ramontayag,2012-08-15 13:26:43
788,2012-08-13 17:08:52,"We'll have to get a handle on these weird build failures, some of which
seem to be flickering. But let's take it one step it at a time and focus
on getting it running reliably on at least _one_ Ruby version.
",joliss,2012-08-30 14:05:46
788,2012-08-13 17:12:47,"This pull request [passes](http://travis-ci.org/jnicklas/capybara/builds/2110228) (merged f9c9c05d into 3d158a0d).
",travisbot,2012-08-30 14:05:46
788,2012-08-21 13:53:52,"This pull request [passes](http://travis-ci.org/jnicklas/capybara/builds/2189038) (merged 95c4be24 into 6529da73).
",travisbot,2012-08-30 14:05:46
787,2012-08-13 16:56:18,"Rack-test driver should ignore the first leading newline in textarea (fixes #677)

I am requesting to get this back ported because it only exists in a major update, 2.0.0.beta1/2, and I need this fix in a current version.
",tmiller,2012-08-13 17:21:58
787,2012-08-13 16:57:31,"This pull request [fails](http://travis-ci.org/jnicklas/capybara/builds/2110092) (merged e2c76f3e into b8d35aef).
",travisbot,2012-08-13 17:21:58
787,2012-09-07 02:23:21,"Hi there, when it the next planned gem release that will include this backport?
",brendon,2012-08-13 17:21:58
786,2012-08-10 10:34:19,"Hello,

I can fill a page, where you can edit its profile settings. This went so far, so good.
Now I visit this page again and wants to assess whether the changes were adopted.
So if the field is the name user_name inside, I have before inserting.

But I just do not get it. So far I've tried it with and find_by_id page.should have_selector. Unfortunately that does not work and I get an error.

Can you help me?

(Sorry for my english)
",mwernicke,2012-08-10 10:40:36
786,2012-08-10 10:40:34,"Hey @mwernicke,

Try reposting this on the mailing list please. I'd suggest you also provide some more detail - from what you've posted, no obvious problems spring to mind.
",joliss,2012-08-10 10:40:36
786,2012-08-10 10:43:09,"(Try in particular adding some of the test code that you're having a problem with.)
",joliss,2012-08-10 10:40:36
785,2012-08-10 01:01:26,"Closes #784. I used the Forwardable module to avoid method_missing at runtime.
",adammck,2012-08-30 14:07:31
784,2012-08-09 17:55:36,"Capybara::Result [has a `first` method](https://github.com/jnicklas/capybara/blob/master/lib/capybara/result.rb#L16), but doesn't have `last`. Not a big deal, but a curious omission which would be trivial to fix.  (Aside: since the class is basically a wrapper around an array of elements, it might make sense to just delegate all unimplemented methods to the underlying `@result`.)

I'd be happy to submit a pull request if any of this is desirable.
",adammck,2012-08-10 02:42:00
784,2012-08-09 17:58:13,"Sounds good to me. We shouldn't rely on method_missing for anything that is commonly called though, for performance reasons.
",jnicklas,2012-08-10 02:42:00
783,2012-08-09 17:11:24,"I was surprised to find that `all(:checkbox)` does not return all checkboxes. It returns those with an id of ""checkbox"", because it simply [assumes that the argument is a locator](https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L18). The same applies to [most other selectors](https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb), too. I can't imagine a situation in which this would be the desired behavior.

For example, given this node:

<S_CODE_TOKEN>

The current behavior is:

<S_CODE_TOKEN>

But I think it should be changed to:

<S_CODE_TOKEN>

If this is considered a bug, I'd be happy to fix it and submit a pull request.
",adammck,2014-02-20 08:41:29
783,2012-08-09 17:35:46,"I just noticed that this is closely related to #775. That issue suggests changing the docs, but I think it'd be better to change the implementation
",adammck,2014-02-20 08:41:29
783,2012-08-09 20:43:00,"Sounds reasonable to me. Jonas?
",joliss,2014-02-20 08:41:29
783,2012-08-10 02:39:35,"Hm. Unfortunately, it doesn't appear that this is possible without breaking backwards compatibility. Finders called with just a symbol currently [assume that it's an element id](https://github.com/jnicklas/capybara/blob/master/lib/capybara.rb#L107). This seems pretty unintuitive to me, especially since `find_by_id` is already provided. Would you be interested in changing this behavior?
",adammck,2014-02-20 08:41:29
783,2012-08-10 06:40:14,"I'd really like this behaviour. I agree that the current behaviour with symbols isn't particularly intuitive, and I doubt that many people use it (though I have on occasion). I'd be okay with breaking this behaviour. A couple of problems though:

### API

What would the API for the selectors look like?

<S_CODE_TOKEN>

Or maybe we should default to a nil value and not specify a separate XPath for it, but then how do we know that the selector supports finding all elements?

### Effort

We would have to write XPath expressions for all selectors built into Capybara to find all elements of the relevant type. Then we'd have to write tests to see that they actually work. And that's aside from the engineering effort to get this behaviour in the first place. That's mostly why I've been hesitant about doing this. It's a lot of work.
",jnicklas,2014-02-20 08:41:29
783,2012-08-10 16:03:45,"To make selectors as powerful as possible, I'd probably forward the call made to [Query#initialize](https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L7) to XPath::HTML pretty much as-is. So defining simple selectors would look something like:

<S_CODE_TOKEN>

We'd need to modify [XPath::HTML](https://github.com/jnicklas/xpath/blob/master/lib/xpath/html.rb) to make those locators optional, but that seems useful anyway. And a (totally contrived, not tested) more complex example might look like:

<S_CODE_TOKEN>

I don't think I'd worry about declaring support for finding all elements. If it doesn't work, it'll can/should raise an error. And I don't foresee any of [the built-in selectors](https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb#L65) having trouble with that.

Regarding effort, yeah, this is pretty big. If you're good with the API, I'll take a stab at it in my fork and see what happens. I think that the majority of the work will be updating the test suites and docs. The actual implementation might even be simpler than we have now, since it'll be delegating more to XPath.
",adammck,2014-02-20 08:41:29
783,2012-08-11 00:15:34,"The advantage to being explicit about whether a selector supports a query for all elements is that we could use that information in generating better error messages when a find fails. e.g.:

<S_CODE_TOKEN>

That would be very cool!
",jnicklas,2014-02-20 08:41:29
783,2012-08-13 14:57:15,"Hm, that would indeed be very cool. But it's possible to achieve that implicitly, just by retrying without the query. If the selector doesn't support that (e.g. the :id selector), then it can raise an error, and not be included in the error message. This could be encapsulated by Capybara::Query, and would simplify the selectors.
",adammck,2014-02-20 08:41:29
783,2012-08-13 21:42:53,"[Here's an example](https://github.com/adammck/capybara/commit/a22bd3245acd56632de74696fd3a1583c8000e34). Please disregard the fruity implementation and check out the specs.
",adammck,2014-02-20 08:41:29
783,2012-08-13 22:05:55,"I don't think this is going to work that well implicitly. Imagine a selector which works just fine without an argument given, but returns a completely crazy result. That wouldn't be great obviously. I really like this idea, but we should be able to come up with some kind of explicit api for making this work. If we can get this in before 2.0 we can even break the selector API if we need to (we already have, with the removal of failure_message).
",jnicklas,2014-02-20 08:41:29
783,2012-08-13 22:08:52,"Like this, maybe:

<S_CODE_TOKEN>

I know it's not super pretty, but it does the job, and it allows us to continue to support both XPath and CSS.
",jnicklas,2014-02-20 08:41:29
783,2012-08-14 02:25:13,"Okay, [here's a rough implementation of that](https://github.com/adammck/capybara/compare/optional_queries_take_two). Only XPath and checkboxes are supported right now, but it's (surprisingly) 100% backwards compatible, just by aliasing the old Selector#xpath stuff to #find_xpath. Obviously the whole thing needs refactoring and better tests, but your feedback on the general direction would be appreciated.
",adammck,2014-02-20 08:41:29
783,2012-08-22 14:27:59,"Regarding compatibility, we'll have to remove `find(:my_id)`, right? It seems to me that there's two ways to do this:

(1) Deprecate it in 2.0, remove it in 2.1, and add `find(:checkbox)` and friends in 2.1.
(2) Remove it in 2.0, and add `find(:checkbox)` and friends in 2.0.

Both are compatible with semver (the way I interpret it).
",joliss,2014-02-20 08:41:29
783,2012-08-22 14:34:09,"Regarding whether we should have this feature: It seems to be a rather rare use case, for expressions like `all(:checkbox)`. For `find`, something like `find(:checkbox)` seems too brittle to be useful.

Because of that, I'm not convinced that it's worth the added complexity in the selector definitions (and other code).

The only real usability issue I see is `node.all(:checkbox).length` being 0 (confusingly), because it searches by ID. If we deprecated the symbols-as-ID feature, this problem would go away. But even that seems rare enough that I wouldn't worry about it.

So my vote is, leave it as it is. It's @jnicklas's call though, as always.
",joliss,2014-02-20 08:41:29
783,2012-08-22 16:09:20,"My rough implementation is backwards-compatible with `find(:my_id)`, because [it simply falls back to the old behavior](https://github.com/adammck/capybara/blob/e34ec60707f6832cfafd4b57bf8776fcd46a5069/lib/capybara/query.rb#L17) if the first parameter isn't a valid selector type. I recognize that this is more complex than absolutely necessary, but backwards compatibility seems more important than purity here.

I think that we should remove `find(:my_id)` anyway, since it's so easy to update to `find(:id, ""my_id"")` or `find_by_id(""my_id"")`, but this would be a backwards-incompatible change, so it would be a major version bump. I'd deprecate the old behavior in 2.0 and remove it in 3.0, but it's obviously @jnicklas' call.
",adammck,2014-02-20 08:41:29
783,2012-08-22 17:23:56,"Regarding @joliss' second point, I agree that `find(:checkbox)` is not very useful. But since `find(:x, locator)` is used so frequently, it seems reasonable to expect that `find(:x)` and `all(:x)` would work in the same way. I don't think that it should be required that all selectors expect a locator, especially not user-defined selectors.
",adammck,2014-02-20 08:41:29
783,2012-09-09 17:38:33,"@joliss and @adammck check out the commit I just pushed. I don't think we'll have time to get this into Capybara 2.0, so I preemptively broke the API. I think it's better to be unambiguous. Now `find(:foo)` will always be a custom selector with the name `:foo`, you don't have to know whether or not that is defined, which seems better to me. That leaves us the option of creating a nice consistent API for this in the future.
",jnicklas,2014-02-20 08:41:29
783,2012-09-09 19:51:03,"Great. I totally agree that it's better to be unambiguous, so long as you're happy with the compatibility breakage. I'll rebase my fork against this, which will drastically simplify things. Thanks!
",adammck,2014-02-20 08:41:29
783,2012-09-09 20:57:07,"I think that's a good move.
",joliss,2014-02-20 08:41:29
783,2012-09-09 21:25:24,"@adammck do send a pull request once you're ready!
",jnicklas,2014-02-20 08:41:29
783,2014-02-20 07:52:36,"I don't see the use case for this too. Consider the following:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

IMO we shouldn't add API that encourages people to write slower tests.
",abotalov,2014-02-20 08:41:29
783,2014-02-20 08:11:13,"@abotalov did you post this to the right issue? I agree, but I'm not sure what this has to do with this issue?
",jnicklas,2014-02-20 08:41:29
783,2014-02-20 08:33:36,"@jnicklas I think I posted to the right issue. I think adding this API will encourage people to write something like:

<S_CODE_TOKEN>

which would be bad. I don't see a way how we can write it so it won't make N+1 driver method invocation.
",abotalov,2014-02-20 08:41:29
783,2014-02-20 08:41:29,"Ahh gotcha! Hadn't considered that. Yes that's obviously not awesome. I don't think that was the original intention with the idea, but I see how it would encourage people to do that. This is a pretty old issue with no movement on it, the only reason it's still open is because it's kind of a darling of mine, I'll close this now. There's really no point in keeping this open, no one seems to be stepping up to fix this anyway.
",jnicklas,2014-02-20 08:41:29
782,2012-08-08 23:15:03,"# size is better describe what is going on here, we using it in Capybara::Result#size method and it should be a little bit faster
",ineverov,2012-08-30 14:24:25
782,2012-08-30 14:24:02,"I never realized that `.size` and `.count` are different, but apparently `.count` can take an argument, and even a block. TIL.
",jnicklas,2012-08-30 14:24:25
782,2012-08-30 14:24:22,"I can't imagine this would make any sizeable performance impact, but sure…
",jnicklas,2012-08-30 14:24:25
781,2012-08-08 12:52:14,"Do we still want 1.8.7 compatibility for Capybara 2?

There's a slew of failures on http://travis-ci.org/#!/jnicklas/capybara/jobs/2013383, and I can reproduce it on my rbenv with 1.8.7-p357.

I'm not sure where it's going wrong. Perhaps even some other gem (RSpec?) that's not playing nice with 1.8.7? Since we don't have Gemfile.lock checked in, it might have started to happen without us doing anything.

Right now I don't have time to track it down, but I figured I'd at least file an issue.
",joliss,2012-08-30 14:08:05
781,2012-08-30 14:08:03,"We agreed on the mailing list that Capybara is dropping 1.8 support.
",jnicklas,2012-08-30 14:08:05
781,2012-12-20 19:27:58,"Maybe then add some kind of warning, that platform is not supported? Just had few hours of fun.
",crawler,2012-08-30 14:08:05
781,2012-12-26 15:43:34,"> Maybe then add some kind of warning, that platform is not supported? Just had few hours of fun.

Sounds great. Do you want to send a pull request?
",joliss,2012-08-30 14:08:05
780,2012-08-07 17:33:29,"Hi,

Now I am using this for my testing stack 

Rails 3.2.7 + datamapper 1.2.0 + bacon 1.1.0 + database_cleaner (using truncation method)+ capybara. + capybarawebkit (and selenium just to test it wasn't webkit)

Now to start off I know the problems with testing javascript and having to switch off transactions in order for things to run more smoothly.

My problem is that I have gone through all the suggested work arounds that I possibly can I am still getting the issue that when I create objects within my spec and then I ""visit"" a page that uses these objects to, for example, build up form elements on that page, the objects just don't seems to exist at that time.

Funny thing is that when I was doing the same thing with Padrino and later on with Sinatra (it is the same app I just ported it to a couple of frameworks. No I am on rails), it seemed to work as I would have expected it to.

I was thinking that the problem could be datamapper, but then I have used datamapper all throughout and it always worked before. So I am kind of stuck really. I am not sure what to do.

Do you know of a way that I can force my database to sync, or some other solution that I have not thought of already?

Thanks in advance.
",philly-mac,2012-08-30 14:09:54
780,2012-08-30 14:09:54,"This is not an issue. Please ask on the mailing list.
",jnicklas,2012-08-30 14:09:54
780,2012-08-30 14:12:11,"Okay, I will repost to the mailing list and see if someone can help me out with this.

Thanks
",philly-mac,2012-08-30 14:09:54
780,2014-04-14 21:54:06,"Why not to add link to this discussion here? I've met the same situation. Thank you. 
",virvit,2012-08-30 14:09:54
779,2012-08-07 12:20:45,"This closes issue #778.
",jarl-dk,2012-08-30 14:13:42
779,2012-08-07 15:57:10,"The implementation seems weird to me for a couple of reasons. Multiple calls to Node#set, yet each subsequent call doesn't reset the field but rather add more files to it? That seems strange. In that case, why even accept an array of files to attach_file at all, when it could just be called multiple times. Also if this can't be made to work in Selenium then I'm not very happy about adding this functionality at all.
",jnicklas,2012-08-30 14:13:42
779,2012-08-08 09:54:31,"I have made a better implementation; handling over the whole array (as yaml). However the implementation is up to you...
The changes to

<S_CODE_TOKEN>

tests that the implementation works according to the CGI specification.

I have also changed the implementation so that it works with Selenium (for chrome) before the breaking change mentioned in http://code.google.com/p/selenium/issues/detail?id=2239#c4

The multiple file upload works with Chrome, Firefox, Safari and has been working with selenium (for chrome). My changes makes it work for RackTest, and is prepared for an improved Selenium implementation.
",jarl-dk,2012-08-30 14:13:42
779,2012-08-30 14:13:42,"The YAML serialization in this is just all kinds of wrong. I'm not in favour of adding this much spaghetti code, just to make this work. If you can come up with a _significantly_ cleaner solution, please send a new pull request.
",jnicklas,2012-08-30 14:13:42
779,2012-09-03 09:22:46,"I agree with you the YAML thing is ugly.

I have created a new pull request to resolve #778, please see the section about alternative implementations on [pull request 802](https://github.com/jnicklas/capybara/pull/802)
",jarl-dk,2012-08-30 14:13:42
778,2012-08-07 12:18:41,"Capybara does not support to test multiple file upload.
",jarl-dk,2012-09-06 08:58:04
778,2012-08-07 12:19:31,"Once upon a time I used webrat, and it also lacked this capability. See
https://webrat.lighthouseapp.com/projects/10503/tickets/399
",jarl-dk,2012-09-06 08:58:04
778,2012-09-06 08:58:04,"This is now merged.
",jnicklas,2012-09-06 08:58:04
778,2012-09-11 06:41:40,"Cool, I guess you merge it into master at some point as well...
",jarl-dk,2012-09-06 08:58:04
777,2012-08-06 21:45:03,"The problem I'm having is similar to issue #771 only my buttons are not disabled but have behavior(form submission) bound to it via javascript.   

My tests are passing intermittently thus leading me to believe I'm hitting a race condition.  

I'm thinking that capybara is clicking on the button and some of the time not all of the javascript  files have loaded(due to cpu and/or io conditions) and so I'm clicking on a button that isn't submitting the form and thus my test fails.  

When I switch my driver to Selenium/chrome-webdriver, it seems to pass much more consistently, but still fails from time to time.  In fact, when it fails with selenium/chrome, I can see it try to click the button while the browser is still loading...

So the question is, does capybara wait until all asset files(js, css, img) are loaded before attempting to click on or interrogate the response?
",synth,2012-08-07 05:56:48
777,2012-08-06 21:47:20,"Maybe @jarib can provide some insight here.
",joliss,2012-08-07 05:56:48
777,2012-08-06 22:17:29,"In general, after excuting `Driver#get` in WebDriver, it should wait until the `onload` event fires (that's when the browser's load indicator stops). At that point, all normal (non-XHR) scripts and stylesheets will have been loaded.

If you believe that's not the behaviour you're seeing, try using `Driver#execute_script` to poll the element's event handlers (e.g. `$(selector).data(""events"")` with jQuery) before clicking the button. 

>  In fact, when it fails with selenium/chrome, I can see it try to click the button while the browser is still loading...

If this is something you can reproduce consistently, please create a [test case](http://sscce.org/) and submit it to the [ChromeDriver tracker](http://code.google.com/p/chromedriver/issues/entry).
",jarib,2012-08-07 05:56:48
777,2012-08-06 23:42:17,"scripts are loaded with requirejs, so maybe that's the problem?
",synth,2012-08-07 05:56:48
777,2012-08-07 05:56:48,"Ok, I think I've gotten to the root of the problem.  

The short of it was that there was a problem with asynchronously loaded js files(which I was doing with RequireJS) as well as my ajax request being one where the response was javascript that redirects the page.  This combination seemed to not play so nice with Capybara.  The solution to this was to stall(aka block) Capybara in the before(:each) block after I called click_on ""Register"" so that Capybara will hold up the execution of any specs until that ajax request comes back....

As well, I ran into another weird issue with DatabaseCleaner truncating my tables, but then my ajax request would come back and insert a row into my users table, leaving my database in a weird state for my specs the next time they ran.  So in conjunction with the solution below, I had to force DatabaseCleaner to clean: before(:suite), after(:each), and after(:suite).  I wrote a full writeup of the issues here: http://p373.net/2012/08/07/capybara-ajax-requirejs-and-how-to-pull-your-hair-out-in-8-easy-hours/

So:

<S_CODE_TOKEN>
",synth,2012-08-07 05:56:48
776,2012-08-03 11:19:33,"When the `href` of the link contains `//www.example.com/foo`, this error is raised by `capybara (1.1.2)`:

<S_CODE_TOKEN>
",zndris,2012-09-06 08:47:23
776,2012-12-11 21:49:41,"Would you accept a pull request that ports this fix over to the 1.1_stable branch? If so, I'll get started on one.
",mscottford,2012-09-06 08:47:23
776,2012-12-11 22:00:39,"Yes, this is the kind of thing that I would be okay with backporting.
",jnicklas,2012-09-06 08:47:23
775,2012-08-02 21:46:09,"Hi there.

This one is relatively minor, and is probably fixable with a tweak to the readme (although I'm not rightly sure how you can make it sufficiently drool-proof). I've just been caught by the fact that essentially, when the first argument to fill_in is a symbol, it'll match all of the input elements on the page. I do realise that all of the current examples use strings, and not symbols, but for the easily confused amongst us, I'd be great if you could make that a little more blindingly obvious. 

Thanks!
",cstorey,2012-09-06 08:58:46
775,2012-08-02 21:52:38,"Make it more obvious, how?
",jnicklas,2012-09-06 08:58:46
775,2012-08-02 21:54:20,"Perhaps adding a note under ""Interacting with forms"" would suffice.
",cstorey,2012-09-06 08:58:46
775,2012-08-07 15:58:33,"Can you send a pull request with how you imaging this to look?
",jnicklas,2012-09-06 08:58:46
775,2012-09-06 08:58:46,"I just pushed a fix for this. Symbols are now allowed.
",jnicklas,2012-09-06 08:58:46
774,2012-08-01 18:51:24,"Hi,

I wonder if there is any way in capybara to say something like this:

<S_CODE_TOKEN>

In some cases I want to test if one of the links is present (new or create). How can I accomplish that?
",amejiarosario,2012-08-01 19:38:17
774,2012-08-01 19:18:05,"You can easily do that with RSpec:

<S_CODE_TOKEN>

Btw, I recommend the Capybara mailing list for questions!
",joliss,2012-08-01 19:38:17
774,2012-08-01 20:16:22,"It worked thanks!
",amejiarosario,2012-08-01 19:38:17
773,2012-08-01 18:47:28,"Say I have a link on my page with the text ""post some content""
I can use find with the :text option to get that link

<S_CODE_TOKEN>

If I pass text that does not match, the error message is confusing. 

<S_CODE_TOKEN>

This might not seem like a big deal, but it makes it much harder to debug when tests fail.

I'd be happy to submit a patch if other's agree that this is worth solving. Thoughts?
",mikegrassotti,2012-08-02 11:35:40
773,2012-08-02 11:35:40,"This error has been improved a lot. Check out the beta release.
",jnicklas,2012-08-02 11:35:40
772,2012-08-01 14:33:05,"Please refer to the rspec failures below: 

<S_CODE_TOKEN>

Note that the default selector is still `:css`, the subject is **page.body** (changed from **page** previously) and the test syntax used for [3] is:

<S_CODE_TOKEN>

While [4] is an attempt to abide by the current syntax rules (using text: instead of value: ) as indicated by the error in [5], that results in failure. 

However the syntax below is working:

<S_CODE_TOKEN>

And so are:

<S_CODE_TOKEN>

`have_selector(""a[href='#{...` is quite cumbersome, so it looks like the only choice is to switch to have_link?

Btw, have_content does not seem to coerce numbers anymore:

<S_CODE_TOKEN>
",prusswan,2012-08-02 11:34:59
772,2012-08-01 19:19:32,"> Btw, have_content does not seem to coerce numbers anymore

This particular problem should be fixed on master.
",joliss,2012-08-02 11:34:59
772,2012-08-02 11:34:58,"`have_selector` does not take `href` as an argument. You can't specify arbitrary attributes and match against them. The same is true for `value`. This isn't really a bug.
",jnicklas,2012-08-02 11:34:59
772,2012-08-03 04:19:05,"But they worked in 1.1.2, so what are the current equivalents? Anyway you did not address [4]. (text: is used but the test still fails with a strange message)

As I mentioned, xpath-ish syntax is apparently still working for value/href/text() etc, and right now there is no good way to find a link by href using have_selector any more. Same goes for input (only the xpath syntax is working, if text: is bugged)

Btw, these are just some of the more obvious failures I see, there are some others like click not triggering the action associated with it (the click step is executed without error but the test fails because no new entry is created in the db etc)
",prusswan,2012-08-02 11:34:59
772,2013-07-02 14:30:57,"11 months and no answer? Current equivalents would be nice, or at least a note in the README if the capabilities have been dropped entirely and we're expected to slice and dice with Nokogiri or whatnot.
",jdickey,2012-08-02 11:34:59
772,2013-07-02 14:53:52,"@jdickey I'm not aware that any of the current behaviour is buggy, it's quite extensively documented and tested. The behaviour that @prusswan claims has worked before, has never worked in any version of Capybara. The only change is that we now throw an error when you use an unsupported key. That's all.

The coercion issue mentioned has long been fixed.

So I'm not sure what exactly you expect, but you're certainly not being particularly courteous in asking for it.
",jnicklas,2012-08-02 11:34:59
772,2013-07-03 15:57:54,"OK, fine; no problem now… worked around it (but missed the docs; those would have been helpful yesterday). Thanks anyway. :-)
",jdickey,2012-08-02 11:34:59
772,2014-12-18 14:47:23,"I'm fixing some old code that looks exactly like prusswan's examples. I'd swear it used to be working . . .

I'm sure everyone appreciates the work that goes into Capybara. It's just that change can be hard.
",srogers,2012-08-02 11:34:59
771,2012-08-01 11:16:09,"Hi,

First of all--let me thank you for a wonderful piece of software!

I am currently creating automated integration tests for an ExtJS application, which rely heavily on Javascript and Ajax. (Maybe that's obvious.) I'm 100% dependant on the wait time defined by Capybara.default_wait_time, as elements may not be present at once, due to Ajax calls not being finished.

However, now I've encountered a similar problem, for which there does not seem to be an elegant solution to. The problem is that the button _is_ present, but it is not _enabled_ at once. So, I need something that will help me select a button from a locator string that is also enabled. I ended up monkey patching Capybara like this.

<S_CODE_TOKEN>

Do you think this is the right way to do that? Is that something that may be implemented in Capybara? (If so, I guess I could make a pull request.)
",badeball,2012-09-09 15:18:20
771,2012-08-02 11:40:48,"It does seem to make sense that we only ever want to click enabled buttons, to be honest. I don't think we should have a separate `click_enabled_button` action though. I'm torn about this. @joliss, what do you think?
",jnicklas,2012-09-09 15:18:20
771,2012-08-02 12:12:41,"Seems reasonable to me to change the default behavior of click_button/click_on to exclude disabled buttons.
",joliss,2012-09-09 15:18:20
771,2012-08-02 12:41:53,"How about something like `fill_in` then? If we disallow it in one place, we should disallow it everywhere, right?
",jnicklas,2012-09-09 15:18:20
771,2012-08-02 12:54:37,"Good point. The problem applies to anything that can be disabled, really.
",badeball,2012-09-09 15:18:20
771,2012-08-02 13:08:03,"Yes, looks like the XPaths for all [form interaction methods](http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Node/Actions) would have to be updated.
",joliss,2012-09-09 15:18:20
771,2012-08-07 13:23:02,"@synth, I'm not sure if your problem is related to this. I also have stumbled upon issues where Capybara has simulated user actions before dynamic javascripts has been loaded. I solved it by extending my step definition which navigates the browser.

<S_CODE_TOKEN>

You get the gist, right? I'm sure there's something equivalent in RequireJS.
",badeball,2012-09-09 15:18:20
771,2012-08-08 05:31:26,"@badeball you're a genius!  this has solved the remaining funky issues I was having!  I created a helper to handle the various ui cases that I needed to wait for: 

https://gist.github.com/3292441
",synth,2012-09-09 15:18:20
771,2012-08-08 12:37:18,"@synth Re your gist, you can implement wait_until_overlay_has_popped_up without resorting to evaluate_script by doing something like this (assuming RSpec; untested):

<S_CODE_TOKEN>

It will wait for the element to appear. For the other method, analogously with have_no_css.
",joliss,2012-09-09 15:18:20
771,2012-12-06 18:32:40,"I agree that you never want to press a disabled button, but it can be useful to `find` one — you may actually want to verify that a button is present but not enabled.

I don't personally have a use case for this right now, I just ran across it while updating Kelp. I'm just bringing it up for (belated) discussion.
",eostrom,2012-09-09 15:18:20
771,2012-12-06 18:49:47,"From [Kelp](https://github.com/wapcaplet/kelp)'s perspective, the problem of disabled-button invisibility appears to be due to [this xpath commit](https://github.com/jnicklas/xpath/commit/a8f970d0f) made at around the same time as the above fix; I'll open an issue over there with the details. (Edit: see [xpath issue #47](https://github.com/jnicklas/xpath/issues/47))

Regarding a use case for this, I would put forward the example where a ""Save"" button is dynamically enabled or disabled depending on user actions within a form. For instance, a Cucumber scenario might say:

<S_CODE_TOKEN>

I agree with the above, that it doesn't make much sense to click a disabled button, but even if a button (or other form element) is disabled, it still _exists_, and is _visible_.
",wapcaplet,2012-09-09 15:18:20
771,2013-01-31 09:41:03,"I am a newer. I want to verify if a button is disabled, how to do it?
",leevyzz,2012-09-09 15:18:20
771,2013-11-24 22:50:28,"How can we do this now that `wait_until` has been removed? My JS is loaded asynchronously with require and Capybara gets there before the assets are loaded... (I can use `sleep` but that's lame)
",adamwaite,2012-09-09 15:18:20
771,2013-11-24 23:06:02,"@adamwaite, given that Capybara is simply a fast user, one can assume that a regular user with a slow connection might experience similar troubles when actuating on your site before assets has finished loading asynchronously. How would you solve that? You could for instance output buttons in a disabled state and enable them with Javascript, thus forcing a user to wait until it has loaded. Or you can query some other element that you know will change once that the Javascript has loaded.
",badeball,2012-09-09 15:18:20
771,2013-11-24 23:55:55,"ah yes, good thinking. That's given me some new ideas to try out tomorrow. Thanks.
",adamwaite,2012-09-09 15:18:20
771,2013-11-26 20:05:00,"My solution, in case any stumbles upon a similar problem... 

Append class `ready` to an element in the DOM using an asynchronous module that should come last. Then query that element. I hade a helper in `support/some_helper_file.rb`:

<S_CODE_TOKEN>

and then we can:

<S_CODE_TOKEN>

Inspired by @badeball, Thanks.
",adamwaite,2012-09-09 15:18:20
770,2012-07-31 16:39:57,"Added two errors that IE9 likes to throw when under the selenium remote driver:
- Selenium::WebDriver::Error::InvalidSelectorError  -- Thrown by IEServerDriver.exe v0.25.1 when a selector is invalid or does not return any results.
- Selenium::WebDriver::Error::UnknownError -- Thrown by selenium-standalone v0.25.1 when bad things happen.  I'm getting an intermittent NPE from the bowels of selenium during a find when running IE9.  Adding this error to invalid_element_errors seems to mitigate whatever race condition is causing this to happen.

As there are currently no IE tests I didn't introduce any.  Other than that, all specs that were passing still pass (the exception being spec/rspec/features_spec.rb:32 that was failing before I made changes).

Thanks!
",hawknewton,2012-08-02 11:31:37
769,2012-07-31 15:31:43,"Hi,

i posted my problem on stackoverflow:
http://stackoverflow.com/questions/11726316/testing-with-specs-capybara-from-railstutorial-chapter-3-does-not-work-have-se

Greets
farukg
",farukg,2012-08-02 11:36:31
769,2012-08-02 11:36:31,"No. Just no. This is not a sensible way to report an issue.
",jnicklas,2012-08-02 11:36:31
768,2012-07-30 19:25:01,"Similar to issue #710

The difference with app_host is that app_host must contain the port, whereas what is being asked for here would continue to have capybara assign a port (via the usual logic in Capybara::Server#boot). When running with specjour (and, perhaps, other parallel test setups), different test workers might want capybara on different ports.

Jim and Kelly
",needfeed,2012-08-01 16:28:11
768,2012-07-30 21:16:23,"Capybara 2.0 will have:

<S_CODE_TOKEN>

should suffice, no?
",jnicklas,2012-08-01 16:28:11
768,2012-08-01 16:28:11,"Looking at master in git, it would appear that setting server_host and leaving server_port unset would accomplish what we are asking for. Thanks.
",needfeed,2012-08-01 16:28:11
767,2012-07-28 04:18:25,"[Fixed formatting -- JL]

Say I visit http://www.baidu.com.

<S_CODE_TOKEN>

works but

<S_CODE_TOKEN>

does not work.

The error message is:

<S_CODE_TOKEN>

It looks like the Chinese does not work in normalize-space.

if `.//a[./@href][(((./@id = 'MP3' or normalize-space(string(.)) = 'MP3') or ./@title = 'MP3') or .//img[./@alt = 'MP3'])]` , works.

if `.//a[./@href][(((./@id = '知 道' or normalize-space(string(.)) = '知 道') or ./@title = '知 道') or .//img[./@alt = '知 道'])]` , not.
",lihuazhang,2012-08-01 11:30:10
767,2012-07-28 10:16:45,"Afaik, Capybara should support unicode so long as the page has the proper encoding headers. I'm not really sure what you're saying since your text looks quite garbled, do you think this has anything to do with normalize-space? Why?
",jnicklas,2012-08-01 11:30:10
767,2012-07-28 19:13:42,"@lihuazhang It's conceivable that something in the stack (Ruby, Selenium, Capybara) messes up. To make sure:
- Does the page you're on have a proper encoding declaration or header?
- Are you using Ruby 1.9.x? Ruby 1.8.7 has much weaker Unicode support. Capybara supports both, but it's possible that 1.8.7 might choke on something.
- There's a space between 知 and 道. Is that intentional? Space-vs-no-space matters in Capybara.
",joliss,2012-08-01 11:30:10
767,2012-07-29 04:13:46,"@jnicklas Thanks. why I thought something wrong with normalize-space is that when I use XPATH checker (https://addons.mozilla.org/en-US/firefox/addon/xpath-checker/),

 Using this xpath:
 `.//a[./@href][(((./@id = 'MP3' or normalize-space(string(.)) = 'MP3') or ./@title = 'MP3') or .//img[./@alt = 'MP3'])]`, the XPATH checker can find the element.

But when I use:
`.//a[./@href][(((./@id = '知 道' or normalize-space(string(.)) = '知 道') or ./@title = '知 道') or .//img[./@alt = '知 道'])]`,
the XPATH checker cannot find the element.

I tried all the text link in Chinese. None can be found.

@joliss 
Thanks.
the encoding is:
`<meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312"">`

I use 1.9.3 and I tried Chinese text link without space inside.
",lihuazhang,2012-08-01 11:30:10
767,2012-07-29 04:26:02,"My feature is:

<pre><code>
Feature: Using baidu

Scenario: Check the link

Given I am on baidu.com
When I  click ""知 道""
Then I should see ""知道首页""

</code></pre>


And the step_definition is:

<pre><code>
Given /^I am on baidu\.com$/ do
  Capybara.app_host = ""http://www.baidu.com""
  visit('/')
end

When /^I  click ""(.*?)""$/ do |link|
  click_link(link) # This does not work.
  page.driver.browser.find_element(:link, link).click # This works
  puts find(:xpath, ""//a[@name='tj_zhidao']"").text == link # It's true.
end


Then /^(?:|I )should see ""([^""]*)""$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end
</code></pre>


Using the native driver can work.
",lihuazhang,2012-08-01 11:30:10
767,2012-07-31 15:37:41,"Today, I try to look into it. And I found that:

`//a[contains(text(), '知')]`

and

`//a[contains(text(), '道')]`

both can find the element.

But `//a[contains(text(), '知 道')]`

I guess it should be the whitespace issue or the encoding of www.baidu.com
",lihuazhang,2012-08-01 11:30:10
767,2012-07-31 16:12:09,"Ah, that's a bug indeed! This happens because `知 道` on baidu.com has an `&nbsp;` as space. As a workaround, try `""知\u00a0道""`.

@jnicklas I have a fix in the queue, but I need to extract #normalize_whitespace into a global method. (It doesn't use `this`.) Is there a nice place for it, like Capybara::Helpers.normalize_whitespace?
",joliss,2012-08-01 11:30:10
767,2012-08-01 11:30:46,"Okay, this is fixed on Capybara master. Thanks @lihuazhang!
",joliss,2012-08-01 11:30:10
766,2012-07-25 11:27:52,"Hey Jonas,

rake is not running the entire suite:

<S_CODE_TOKEN>

I assume you have a clue where this is happening since you edited it recently, so I won't go track it down.
",joliss,2012-07-28 13:01:08
766,2012-07-25 17:06:44,"Yes, I saw that. I fixed it, but forgot to push. Can you try it now?
",jnicklas,2012-07-28 13:01:08
766,2012-07-25 18:40:01,"@jnicklas yeah, it works.
",nashby,2012-07-28 13:01:08
766,2012-07-28 13:01:08,"Okay, closing this then.
",jnicklas,2012-07-28 13:01:08
765,2012-07-25 10:23:35,"Test case:

<S_CODE_TOKEN>

Fails:

<S_CODE_TOKEN>

However, has_selector? works fine in this case:

<S_CODE_TOKEN>
",andreychernih,2012-07-25 11:25:02
765,2012-07-25 11:25:01,"The message you're getting:

<S_CODE_TOKEN>

This is not an error that Capybara would ever generate. Some other library (my money is on Webrat) has taken control of the `have_selector` method.
",jnicklas,2012-07-25 11:25:02
765,2012-07-25 14:30:22,"Yeah, that's the reason most likely. Thanks for your help and sorry for false alarm.
",andreychernih,2012-07-25 11:25:02
764,2012-07-20 14:12:09,"This causes ""file not added for reaping"" errors with Selenium, as the
exit handler is called twice.

Thanks @jarib for tracking this one down!
",joliss,2012-07-21 20:30:43
763,2012-07-19 16:17:11,"Hey @jarib, I remember seeing this `file not added for reaping` error occasionally on Travis, but now it occurs reliably on my system. Can  you reproduce it, or is there anything I can do to debug this?

<S_CODE_TOKEN>
",joliss,2012-07-21 20:30:45
763,2012-07-19 16:41:28,"I haven't seen this anywhere outside the Capybara test suite, and can't easily see how this error is possible, so if you're able to reduce it a bit more that would help.
",jarib,2012-07-21 20:30:45
763,2012-07-20 06:11:57,"I am also getting this on my machine. Is there any way we can help you to track this down?
",jnicklas,2012-07-21 20:30:45
763,2012-07-20 09:52:01,"OK, looks like this will happen if you call `Driver#quit` twice on the same instance of the Firefox driver. [This spec](https://github.com/jnicklas/capybara/blob/master/spec/selenium_spec.rb#L30) calls `#quit` both directly from the spec and in an `at_exit` hook.
",jarib,2012-07-21 20:30:45
762,2012-07-19 15:09:38,"This is mostly for compatibility with Capybara 1.1.2.
",joliss,2012-07-19 16:07:00
761,2012-07-18 14:38:27,"Capybara should only find visible links when using the click_link action.

In a JS-app where a link is added to the DOM and later made visible, capybara will produce a failure when waiting for the element it wants to click:
`Element is not currently visible and so may not be interacted with (Selenium::WebDriver::Error::ElementNotVisibleError)
...
      (eval):2:in `send'
      (eval):2:in `click_link'
`

While it makes sense to `find_link` invisible links, the `find()` construct used by `click_link` should really specify `:visible => True` so Capybara waits until the link is visible before clicking it.
",rbu,2012-07-21 20:32:21
761,2012-07-20 06:11:17,"That is the default. Not sure why you're getting the error you're getting, maybe you've switched off the ignore_hidden_elements option?
",jnicklas,2012-07-21 20:32:21
761,2012-07-20 06:23:01,"Oh, sorry. I was wrong. `ignore_hidden_elements` is actually `false` by default. Try setting:

<S_CODE_TOKEN>
",jnicklas,2012-07-21 20:32:21
761,2012-07-20 10:25:22,"Thank you for the pointer, this is probably a good default. However, setting it breaks many of our tests (obviously, those which test that elements are invisible, but also some has_no_selector? expressions fail with an StaleElementReferenceError -- we'll have to look into that).

Generally speaking, I would expect the Capybara actions to have their own visibility defaults when the underlying driver requires the element to be visible in order to interact with it. Do you agree?

We are currently using this workaround (in a wrapper):

<S_CODE_TOKEN>
",rbu,2012-07-21 20:32:21
761,2012-07-21 20:32:21,"Well, it does depend on the driver, some drivers will allow you to click invisible links. RackTest will, for example. I think the default is probably fine as is.
",jnicklas,2012-07-21 20:32:21
761,2012-07-21 20:36:48,"I would like to point out that `wait_until` has been removed in Capybara 2.0, so your workaround will probably break shortly. I would recommend setting `Capybara.ignore_hidden_elements` to `true` as a proper workaround. If it's not possible to set it for the entire app, set it immediately prior and reset it afterwards.

I realize that that's a bit ugly and maybe we should re-think possible solutions.
",jnicklas,2012-07-21 20:32:21
761,2014-10-09 23:54:52,"@jnicklas , could you correct your comment from 

<S_CODE_TOKEN>

to 

<S_CODE_TOKEN>

? 
Somebody can have a lot of time for to find mistake in him code. Best Regards!
",byzg,2012-07-21 20:32:21
761,2015-12-14 18:30:09,"byzg +1
",asiniy,2012-07-21 20:32:21
760,2012-07-18 13:55:18,"I filed an issue with bundler, I can't run bundle update and in certain circumstances even bundle install.

This seems to be due to multiple dependencies to ffi, by capybara, guard, and tidy_ffi with capybara indirectly(!) referencing the oldest version.

https://github.com/carlhuda/bundler/issues/2027

The solution for me was to first add capybara, capybara-webkit to my Gemfile, run bundle install, then add guard and tidy_ffi. This workaround gets me a working state, but I can't just run bundle install on an empty gemset or run bundle update at all.

If you have any ideas, let me know.

Ray
",ticktricktrack,2012-07-20 06:20:19
760,2012-07-19 10:40:14,"Same here:

<S_CODE_TOKEN>
",iRonin,2012-07-20 06:20:19
760,2012-07-19 10:42:40,"Temporary solution: Specify the ffi version directly `gem 'ffi', '~> 1.0.11'` 
@iRonin does this work for you?
",ticktricktrack,2012-07-20 06:20:19
760,2012-07-19 10:44:10,"Unfortunately not.
",iRonin,2012-07-20 06:20:19
760,2012-07-20 06:20:19,"Doesn't seem like a Capybara issue.
",jnicklas,2012-07-20 06:20:19
759,2012-07-17 17:21:31,"Updates to README to clarify remote limitations of RackTest driver:
- updates to ""Drivers"" section (clarified point re: external HTTP redirects)
- updates to ""Setup"" intro section, re: JS and remote limitations of RackTest
",jeffomatic,2012-07-17 17:24:22
759,2012-07-17 17:24:29,"Thanks!
",jnicklas,2012-07-17 17:24:22
758,2012-07-17 17:06:53,"I changed the language in the ""Drivers"" section to call out the fact that RackTest doesn't talk to remote URLs at all.

I also put in a sentence near the top of the doc, at the end of the ""Setup"" section. That might be a more controversial change, but I think a lot of people will use ""Setup"" as the ""TL;DR"" section, and this one sentence will save someone a morning of hunting around the RackTest source code ;)
",jeffomatic,2012-07-17 17:14:56
758,2012-07-17 17:14:56,"OK, excellent point. I'll clear that up and submit a new pull request.
",jeffomatic,2012-07-17 17:14:56
757,2012-07-17 15:42:35,"The README says that you can't use the default RackTest driver to ""test remote applications"", but it may be good to emphasize that _any remote interaction_ will fail under RackTest, since Rack::MockSession#request only performs requests against the test Rails app. Thus, app actions that redirect to external sites will produce InfiniteRedirect exceptions, and any kind of OAuth flow will fail.

I'm not sure if it's quite this urgent, but I think it would be helpful to place a sentence about this topic in the ""Setup"" section, since I think remote interaction (especially OAuth) is probably fairly prevalent. Something like: ""if your app talks to remote services, don't forget to use a driver with this capability [link to driver section]"".
",jeffomatic,2012-07-20 06:21:08
757,2012-07-17 16:02:01,"Can you provide a pull request with you imagine this to be worded?
",jnicklas,2012-07-20 06:21:08
757,2012-07-17 16:02:42,"No problem, I'll put this together later today.
",jeffomatic,2012-07-20 06:21:08
757,2012-07-20 06:21:08,"See #759
",jnicklas,2012-07-20 06:21:08
756,2012-07-17 12:39:21,"I don't know if it's really an issue with capybara, but I suspect it catches request/response of XHR done via web worker.
The error comes only during tests, and does not occur in production.

The symptom is during test execution, the browser displays a page on a URL in response of an XHR GET sended by a web worker. (done by a previous test). I don't know if it's possible to tell capybara to ignore these request.

I've posted a related question here: http://stackoverflow.com/questions/11518362/capybara-unpredictable-test-failure-probably-due-to-interaction-with-web-worker

Feel free to close if you think it has nothing to deal with capybara.
",sly7-7,2012-07-17 14:46:39
756,2012-07-17 14:46:38,"My guess would be that Selenium doesn't handle web workers, you might have better luck taking this upstream to the Selenium project.
",jnicklas,2012-07-17 14:46:39
756,2012-07-17 14:52:08,"Ok, thanks, I will try to talk about this on the Selenium project.
",sly7-7,2012-07-17 14:46:39
755,2012-07-17 10:13:15,"I use Rails 3.3.6 + RSpec-Rails 2.10.0 + Capybara 1.1.2 + Spork
Strangely while the visit() method and the RSpec's have_selector() are OK in my rspec test, the has_table() and has_selector() appear to be undefined. 
It reports:
Failure/Error: page.should has_table 'positions'
NoMethodError:
undefined method `has_table' for #RSpec::Core::ExampleGroup::Nested_1::Nested_2:0x007fe6aa8c9888

My spec_helper.rb:

<S_CODE_TOKEN>

......

My spec/requests/portfolios_spec.rb

<S_CODE_TOKEN>
",DominicHong,2012-07-17 10:49:00
755,2012-07-17 10:49:00,"Those methods have a question mark at the end `has_selector?`, not `has_selector`. Those are called query methods, and they are quite common in Ruby.
",jnicklas,2012-07-17 10:49:00
755,2012-07-17 12:04:50,"Thank you very much.  They are all about RSpec syntax. The correct usage should be:
page.should have_table 'positions'
",DominicHong,2012-07-17 10:49:00
754,2012-07-16 23:15:51,"Added warning per this blog post
http://blog.plataformatec.com.br/2012/06/improving-the-integration-between-capybara-and-rspec/
",westonplatter,2012-07-17 02:23:24
754,2012-07-17 00:11:39,"Sorry, but those comments don't really make any sense to me.
",jnicklas,2012-07-17 02:23:24
754,2012-07-17 00:41:45,"Is the wording the issue or the place of the comments?

In the end, I think it would be helpful to know to use VISIT and **not** GET.
",westonplatter,2012-07-17 02:23:24
754,2012-07-17 01:32:15,"Both, kind of. These are internal methods, no one should read their documentation unless they are digging around the actual implementation. The `visit` method you recommend calling, should in fact never be called directly. The wording is quite confusing too, what do these methods have to do with RSpec?

I don't really understand how anyone could take even a cursory glance at the documentation and come away thinking they were supposed to call `get` anywhere. It simply is never mentioned in any of the documentation. If people can't be bothered to read the documentation in the first place, then being even more explicit about how _not_ to use Capybara will do these people no good.

I think the current documentation is quite clear that `visit` is the correct API. Let's just leave it at that.
",jnicklas,2012-07-17 02:23:24
754,2012-07-17 02:23:36,"True. https://github.com/jnicklas/capybara#navigating
",westonplatter,2012-07-17 02:23:24
753,2012-07-16 21:34:54,"Let's suppose we customize the root route to have a page param, like this:

<S_CODE_TOKEN>

When this route is set, and a flash message is displayed in the root page, Capybara will not detect it, unless we load the Chrome Selenium driver and use it.

I have built a simple example app to show the issue: https://github.com/idavemm/flash_root

It contains 2 integration tests, one checks the flash message with javascript and the other without javascript. To run it:

<S_CODE_TOKEN>
",davidmles,2012-07-17 11:48:18
753,2012-07-16 22:45:40,"I'm sorry, I don't have the time to wade through that example app. Please provide a simpler code sample.
",jnicklas,2012-07-17 11:48:18
753,2012-07-17 07:43:30,"Sure, although that app is the simpler case, as it needs to have 2 controllers, a redirection, and a custom route.

Basically, what's needed to replicate the issue is the following:
- 3 routes: the normal root, a custom root, and one for the controller that generates the flash and redirects to the root. The custom root is the key to replicate the issue. In this case it has no use, but in my real application it is used to show a paginated list.

<S_CODE_TOKEN>
- One main controller, that's showed in the root. It is void, but its view only has a link to generate a flash message:

<S_CODE_TOKEN>
- One controller that simply generates the flash message and redirects to root:

<S_CODE_TOKEN>

That's it. Now for the integration tests:

<S_CODE_TOKEN>

The test_helper.rb is configured as normal: https://github.com/idavemm/flash_root/blob/master/test/test_helper.rb
",davidmles,2012-07-17 11:48:18
753,2012-07-17 09:39:09,"There are too many things in a Rails app which could make this go wrong. I'd be extremely surprised if this was an issue with Capybara, you need to find the underlying cause of this, and this isn't getting anywhere near that. Try writing a Sinatra app, or something else simpler, which makes it more apparent what's going on. I'm sure you'll find that the issue is somewhere within your code.
",jnicklas,2012-07-17 11:48:18
753,2012-07-17 10:24:25,"The code is the most simple I can write to reproduce the issue. It's a new app initialized through ""rails new flash_root"", and I just created the two controllers and the code I posted above. There is nothing more than that, so the problem is now isolated.

If it has nothing to do with Capybara, I can post it in the Rails github issues page if you want.
",davidmles,2012-07-17 11:48:18
753,2012-07-17 10:58:38,"Look, I'm really not trying to be rude or anything, but consider the fact that Capybara has a massive test suite and is used by thousands of people. I've personally written dozens of applications which have used the RackTest driver along with Rails' flash. I find it extremely hard to believe that something so fundamentally simple would be broken. It just doesn't make any sense. I'm not saying it's impossible, just highly unlikely.

That's why I'm not going to spend my time going through your code, fixing what I'm 99% sure is your problem. I'm telling you that if you even want me to consider this as a legitimate issue, you need to give me something simpler, which explains the error more clearly. If you don't want to, or can't do that, then I'm afraid I can't help you.
",jnicklas,2012-07-17 11:48:18
753,2012-07-17 11:17:49,"Have you noticed the two routes that point to root? As I said, this is the key of the issue:

<S_CODE_TOKEN>

Without that line, it works well. But in my real application, a paginated list on root page is needed, so that route is needed, and its name is ""root"". I think that is a special case, and maybe it is not so extensively used.

I don't know what more I can do. I have uploaded a simple new app to github and explained here how to reproduce the issue. The code is simple enough.

I'm going to post this issue to the Rails devs and comment here back when it has some answer.
",davidmles,2012-07-17 11:48:18
753,2012-07-17 11:48:18,"Yeah, I don't think you should have a route named ""root"" which isn't actually the root route, that seems like a bad idea. You might want to not do that. Anyway, this isn't a Capybara issue as far as I can see. I'm closing this.
",jnicklas,2012-07-17 11:48:18
753,2012-07-17 16:49:54,"Yes, but I'm forced to do that somehow.

Nonetheless it seems to be a bug of Rails' ActionDispatch::Routing::Mapper.normalize_path. It is already reported.
",davidmles,2012-07-17 11:48:18
752,2012-07-16 08:41:47,"I'm experiencing a strange behavior with Capybara and Test::Unit under Rails 3.2.6

I'm trying to detect a text this way:

<S_CODE_TOKEN>

That text is inside some nested divs, and Test::Unit just says this:

<S_CODE_TOKEN>

So, Capybara cannot detect that text. I must say that it is a text shown in a flash[:success] that shows after clicking a button and a new page renders. I have tested it manually and it shows well.

But the strange behavior is that if I enable the javascript driver with this line at the beginning of the test:

<S_CODE_TOKEN>

Then Capybara DOES detect the text.

I have tried adding a sleep after doing the has_content, but I'm getting the same result. Of course javascript is not used in my case. I have tested it manually with javascript disabled and it works well.

Is this a known issue?
",davidmles,2012-07-16 09:28:25
752,2012-07-16 09:28:25,"This is more of a question than an issue. Try debugging what text you're actually seeing. There are ny number of factors which could be causing this, from faulty DB setup to differences in visibility due to JavaScript to minute differences in how different drivers show text. So you'll need to do some more debugging to isolate the problem more, but once you do, please ask questions like this on the mailing list.
",jnicklas,2012-07-16 09:28:25
752,2012-07-16 21:35:21,"Ok, I have isolated the problem and opened a new issue here: https://github.com/jnicklas/capybara/issues/753
",davidmles,2012-07-16 09:28:25
751,2012-07-13 08:58:55,"I made new pull request. Please review.

It is remove reset session after each step. It is not necessary, if we use automated tests and want to emulate ""real user actions""
",AlexKlim,2012-07-13 09:05:06
751,2012-07-13 09:05:06,"Errr. No.
",jnicklas,2012-07-13 09:05:06
751,2012-07-13 09:05:39,"To elaborate: Resetting the session in between steps is kind of essential.
",jnicklas,2012-07-13 09:05:06
750,2012-07-12 12:29:26,"Second attempt at resolving https://github.com/jnicklas/capybara/pull/749

From that request's description:
Given:
- a textfield or textarea with pre-populated text
- an onchange event that formats that text
- and a call to node.set(value)

It is possible to trigger the onchange event twice, thereby not actually setting the field's value correctly. 

Consider the case where the onchange event validates and reformats a textfield. If the event reformats a blank field, then the #clear is not going to work as intended, because it triggers onchange. 

Failing spec and a fix attached. 
",akasper,2012-07-12 12:33:10
750,2012-07-12 12:33:21,"Nice! That looks really good!
",jnicklas,2012-07-12 12:33:10
750,2012-07-12 12:35:41,"Yay! Thanks!
",akasper,2012-07-12 12:33:10
750,2012-07-12 12:50:29,"Hm... you know what, though? I indirectly test that it _doesn't_ trigger onchange after clearing, but I never directly test that it _does_ trigger onchange when the text is set. In fact, this implementation doesn't trigger onchange at all!

But now that I think about it, that's probably not a problem. When I read 

<S_CODE_TOKEN>

I suppose I assume the cursor stays in the ""Name"" field until I explicitly state otherwise. I wouldn't expect onchange at that point. 
",akasper,2012-07-12 12:33:10
750,2012-07-12 13:18:24,"I think the selenium driver has always behaved that way, so it's not a departure from existing behaviour at least.
",jnicklas,2012-07-12 12:33:10
749,2012-07-10 16:20:48,"Given:
- a textfield or textarea with pre-populated text
- an onchange event that formats that text
- and a call to node.set(value)

It is possible to trigger the onchange event twice, thereby not actually setting the field's value correctly. 

Consider the case where the onchange event validates and reformats a textfield. If the event reformats a blank field, then the #clear is not going to work as intended, because it triggers onchange. 

Failing spec and a fix attached. 
",akasper,2012-07-12 08:35:42
749,2012-07-10 16:25:37,"I should mention, I'm fairly certain this is a fix for a regression. dw_henry mentioned a fix two years ago in this thread: 
https://groups.google.com/forum/?fromgroups#!topic/ruby-capybara/LZ6eu0kuRY0
",akasper,2012-07-12 08:35:42
749,2012-07-12 08:35:42,"Honestly, this pull request seems pretty broken to me. Maybe there is a legitimate issue here (though your code should probably be able to handle multiple change events firing), but this is not the way to solve it.
",jnicklas,2012-07-12 08:35:42
749,2012-07-12 11:37:42,"@jnicklas Fair points, thanks for the feedback. 

Setting a textfield value via Capybara behaves differently from a human being doing so via the browser. That seems broken to me. 

Of course new code should be able to handle multiple change events firing, though that point seems irrelevant. What if I'm putting tests into place before I refactor a legacy application? What if I'm using Capybara against a staging environment that requires third-party authentication, and the third-party site is awful?

I'll remove the jQuery dependency, give the fix implementation another shot, and open a new pull request. Let me know if you have any specific ideas for the right way to do this. 
",akasper,2012-07-12 08:35:42
749,2012-07-12 12:26:43,"I'm definitely not going to accept anything which uses execute_script in any way. This should use the official Selenium API only.
",jnicklas,2012-07-12 08:35:42
749,2012-07-12 12:30:33,"Perfect. Thanks for the feedback and the quick response.

The first attempt was a naive copy-paste of something I found in the interwebz, but Capybara deserves better. How about this? https://github.com/jnicklas/capybara/pull/750
",akasper,2012-07-12 08:35:42
748,2012-07-10 05:08:53,,tricknotes,2012-07-10 07:51:17
747,2012-07-09 15:59:01,,tricknotes,2012-07-09 17:30:48
746,2012-07-08 21:14:58,"closes #740
",nashby,2012-07-13 08:41:33
746,2012-07-09 06:03:20,"Nice. There's an implementation issue though: I don't think you can simply replace `include?` with `match`, since

<S_CODE_TOKEN>

In other words, where it previously tested for substrings, it would now interpret string literals as regexes.
",joliss,2012-07-13 08:41:33
746,2012-07-09 07:17:42,"@joliss right. any thoughts how to fix it except checking for regexp and using `match` or `include` based on that check?
",nashby,2012-07-13 08:41:33
746,2012-07-09 12:13:21,"There is no nice way of doing it. I've seen people check for `String === x`, and then either use `match` vs `include?`, or quote the string with `Regexp.quote`.
",joliss,2012-07-13 08:41:33
746,2012-07-09 13:26:27,"We do essentially the same thing for the `:text` option to `has_selector?` and friends. See here: https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L34
",jnicklas,2012-07-13 08:41:33
746,2012-07-09 13:27:53,"@jnicklas right, thanks. I'll fix it tonight!
",nashby,2012-07-13 08:41:33
746,2012-07-09 15:28:09,"@jnicklas I've update the code. Not sure if about separate `escape_regexp` method though.
",nashby,2012-07-13 08:41:33
746,2012-07-13 08:41:33,"Nice! Good job! Merged.
",jnicklas,2012-07-13 08:41:33
745,2012-07-08 16:37:48,"looks like it was copypasted
",nashby,2012-07-08 17:34:02
745,2012-07-08 17:34:06,"Got it. Thanks for fixing!
",joliss,2012-07-08 17:34:02
744,2012-07-08 16:05:11,"Some drivers(Such as [capybara-webkit](https://github.com/thoughtbot/capybara-webkit) and [poltergeist](https://github.com/jonleighton/poltergeist)) supports the method for rendering screenshot.
If it is supported by `capybara`, the interface between each driver is uniform.
And I can write the spec that has highly compatibility.

I added `render` method to `Capybara::Driver::Base` as well as [capybara-webkit](https://github.com/thoughtbot/capybara-webkit) and [poltergeist](https://github.com/jonleighton/poltergeist).
",tricknotes,2012-07-10 08:25:32
744,2012-07-08 17:49:15,"I have no opinion on whether this is a good addition to Capybara (perhaps it is), but I'm thinking that regarding the method name, something like `save_screenshot` might be clearer than `render`.

Let's see what @jnicklas has to say.
",joliss,2012-07-10 08:25:32
744,2012-07-09 06:52:01,"You can currently call page.driver.browser.save_screenshot but I wouldn't mind a cleaner way. I agree with joliss re naming.
",gabrielrotbart,2012-07-10 08:25:32
744,2012-07-09 09:13:14,"The Api should be `page.save_screenshot` or something. `page.driver.whatever` is never a public API in Capybara anywhere, and it won't be in the future either.
",jnicklas,2012-07-10 08:25:32
744,2012-07-09 15:38:27,"Thank you for your deliberation.
I supported `page.save_screenshot` instead of `page.driver.render`.

Should I squash these commits?
",tricknotes,2012-07-10 08:25:32
744,2012-07-09 17:00:24,"Cool! Yup, squashing sounds like a good idea.
",joliss,2012-07-10 08:25:32
744,2012-07-10 04:55:20,"I squashed my commits.
",tricknotes,2012-07-10 08:25:32
743,2012-07-07 21:12:54,"See what I'm talking about either here: https://gist.github.com/3065811
Or here: http://screencast.com/t/wAQdkxCp

In the first scenario, an error is masked, which properly bubles up to be displayed in the second one. Is this a bug within Capybara, or something else?

I'm interested in either a permanent fix, or a my-project-only workarond.

BTW, I've been redirected here from cucumber/cucumber#296
",Wizek,2012-07-09 15:40:30
743,2012-07-09 15:40:30,"This is a well known problem, and a number of solutions have been proposed, #660 is the most promising at the moment. Since that issue has a lot more in-depth discussion of the problem, I'm closing this one down.
",jnicklas,2012-07-09 15:40:30
742,2012-07-06 00:18:51,"Corrected the grammar of descriptions to use ""should have ..."", instead of ""should has ..."".
",rshurts,2012-07-09 15:05:38
742,2012-07-09 15:05:50,"Thanks!
",jnicklas,2012-07-09 15:05:38
741,2012-07-03 21:35:41,"Hey Jonas,

Hope all is well. I just launched the free-for-OSS support for Code Climate, the product I've been working on for awhile now, and I thought Capybara would be a good repo to add. Code Climate is hosted quality metrics for Ruby. Here's what it generated for Capybara:

<S_CODE_TOKEN>

I threw together this quick pull request to add a link to Code Climate from the README, in case you want to make this available to Capybara contributors (like RSpec and Cucumber added recently).

I'll probably also do the same for CarrierWave.

Let me know if you have any questions!

Cheers,

-Bryan
",brynary,2012-07-09 15:06:17
741,2012-07-09 15:10:30,"Nice :) Merged.

I have a question though, seems like [`TestApp`](https://codeclimate.com/github/jnicklas/capybara/TestApp) gets a very bad score, but it looks alright to me. Maybe it's being unfairly judged because it is a Sinatra app?
",jnicklas,2012-07-09 15:06:17
741,2012-07-09 18:38:05,"Hi Jonas,

Yes, that's right. It doesn't know anything about Sinatra's #get API, so it considers all of the code in the actions as if they were just a bunch of code floating in the class definition -- which it doesn't care for.

In the future, you'll be able to hide a class, which is probably a good solution for TestApp.

-Bryan
",brynary,2012-07-09 15:06:17
740,2012-07-03 13:38:38,"Maybe I'm doing it wrong. I have a page that contains text like this

<li>Applicants: 25</li>

I wanted to write a cucumber step that just ensured there was the text and number there

<S_CODE_TOKEN>

Which results in 

<S_CODE_TOKEN>

Did some googling, checked my regexp in a console. Regexp is fine.

What's weird is that this works

<S_CODE_TOKEN>

So I'm pretty sure I'm misunderstanding something and that its user error. But this still fails

<S_CODE_TOKEN>

on the same page. (Same results with Regexp and // syntax)

Am I just ""doing it wrong?"" This was more to drive out the feature than to worry about details -- I don't want to match ""in this case, applicants should be 5, in this other, 15"" since that's handled in specs. 

FWIW, I can' get even this to work

<S_CODE_TOKEN>

so pretty sure have_content isn't doing something right or I'm not doing it right. No luck from the google or StackOverflow so far.
",johnpaulashenfelter,2012-07-09 15:40:48
740,2012-07-03 14:07:30,"IIRC has_content? doesn't support regexps, though maybe it should.
",jnicklas,2012-07-09 15:40:48
740,2012-07-03 14:48:11,"Agreed -- seems weird I can do it with has_css (and probably has_xpath too I'd guess) and not has_content. Is it worth looking into a patch for that -- would you be amenable?
",johnpaulashenfelter,2012-07-09 15:40:48
740,2012-07-04 00:01:41,"Yes, given the current semantics of has_content? and has_text? (they are aliases), it makes sense.
",jnicklas,2012-07-09 15:40:48
739,2012-07-02 16:07:57,"I had a little trouble understanding how to set up capybara for a non-rack application, so I decided to add this to the readme since it turned out to be way easier than I thought. Hopefully this is a helpful addition. I know that it's mentioned a little bit in the drivers section, but it felt like it needed its own section.
",andrewhavens,2012-07-09 13:24:15
739,2012-07-02 19:05:23,"There is already a section about this in the README: https://github.com/jnicklas/capybara#calling-remote-servers
",jnicklas,2012-07-09 13:24:15
739,2012-07-02 21:07:09,"I know there is already some information about ""calling remote servers"". However, for someone getting started, it was not as clear (at least to me) how to set up Capybara when you _only_ want to test a web application from the browser. This information was also towards the bottom of the Readme so it's easy to miss. I thought it was more clear and easier to find by having its own section grouped with the other configuration sections.
",andrewhavens,2012-07-09 13:24:15
739,2012-07-09 13:24:15,"I disagree. If you don't at least skim the documentation, you're not going to be able to use the tool effectively. The current section could be improved, but this just adds cruft to the README, most of which isn't really accurate anyway. Thank you for the effort though :)
",jnicklas,2012-07-09 13:24:15
738,2012-06-27 18:18:08,"I noticed while writing some high-level tests that certain conditions can cause capybara (or selenium (or firefox?)) to persist session state between examples. This issue can cause a failure in one test to fail the subsequent test under certain conditions.

More specifically, if test A modifies the browser sesssion then makes a request that times out, test B is able to observe the modified session from test A. I am not sure what other conditions can cause the session state to leak.

I am not sure where the responsibility lies with this issue, but I have reduced the issue to a test case: https://gist.github.com/3005777
",samwgoldman,2012-06-27 19:48:10
738,2012-06-27 18:50:42,"This is a kind of known limitation in selenium. Selenium will only clear cookies for the current domain. As far as I know there is no way around that. Maybe @jarib knows more.
",jnicklas,2012-06-27 19:48:10
738,2012-06-27 19:45:13,"That's right, we only support clearing cookies for the current domain. So you can either iterate through the domains leaving state and clear cookies on each, or relaunch the browser.
",jarib,2012-06-27 19:48:10
738,2012-06-27 19:48:10,"Thank you both for the rapid response! I already had an application-specific workaround, but now I have enough information to justify committing it.
",samwgoldman,2012-06-27 19:48:10
737,2012-06-27 00:08:16,"Hello

Selenium-Webdriver now throws a Selenium::WebDriver::Error::UnhandledAlertError whenever you click on a element that shows an alert or confirm dialog it seems.

In the past I've done things like this as a crude workaround:
  page.evaluate_script('window.confirm = function() { return true; }')

But now I'd like to test that the message being presented to the user matches what I expect (it's not static text).  The ruby bindings doc at [JavaScript_dialogs](http://code.google.com/p/selenium/wiki/RubyBindings#JavaScript_dialogs) say that you can do something like: 

<S_CODE_TOKEN>

But I'm never able to do something like a click_button() then switch to the alert/confirm after since the exception is thrown.

Perhaps @jarib can shed some light on the preferred method of getting by these dialog exceptions so we can handle the confirm states like in the docs?
",supairish,2012-06-27 16:30:08
737,2012-06-27 00:24:31,"If an alert is open, you can only do things to deal with the alert (one of Alert#dismiss, Alert#accept, Alert#text or Alert#text=). Any _other_ API call will raise an UnhandledAlertError. So it's the next command that raises the exception, not the click that triggers the alert.

If you can provide an example of where this is not the case, you've found a bug in WebDriver and it should be filed in the [Selenium tracker](https://code.google.com/p/selenium/issues/entry). It does appear to work well for me:

<S_CODE_TOKEN>
",jarib,2012-06-27 16:30:08
737,2012-06-27 05:52:18,"Hmm, your example works for me too.  As does rewriting it to use the Capybara DSL.  However, when I wrap the Capybara DSL in a RSpec expectation, that's when I see the exception.  Below is my simplest attempt at describing what I'm seeing.

<S_CODE_TOKEN>

Running this like 'rspec test.rb' give me this [Error Output](https://gist.github.com/3001759)
",supairish,2012-06-27 16:30:08
737,2012-06-27 10:06:11,"You need to actually handle the alert, i.e. call `a.accept` or `a.dismiss` as part of the spec.
",jarib,2012-06-27 16:30:08
737,2012-06-27 16:30:13,"Ah didn't realize it was a requirement.  Thanks for the clarification! I'll close this issue.
",supairish,2012-06-27 16:30:08
736,2012-06-25 23:19:57,"The latest version of Capybara on Rubygems is 1.1.2 which was released on November last year, yet development is active. Are you guys planning on a new release?
",oscardelben,2012-07-09 15:41:56
736,2012-06-26 19:42:12,"+1 -- a new version would be really helpful.
",magnusvk,2012-07-09 15:41:56
736,2012-07-09 15:41:54,"We are working on it. I'll probably be able to dedicate a bit of time to Capybara this week. I'm hopeful that we can have a beta release out by the end of the week.
",jnicklas,2012-07-09 15:41:56
736,2012-07-09 15:45:44,"Just a quick explanation about the long release cycle: 1.1.2 has proven extremely stable. We've had exactly _one_ actual bug which has been found since that release, and it's an edge case which not too many people should hit. So at this point there isn't a pressing need to do a release. We've broken backwards compatibility in a number of significant ways on the master branch, and following semver, the next release will be 2.0. This is our chance to clean up anything and improve everything we want to. After that, it's unlikely that there will be an API breaking release again, for a really, really long time. So if we want to change anything, we have to do it now. Which is why this release is taking a long time. We want to get it right.
",jnicklas,2012-07-09 15:41:56
736,2012-07-09 20:40:52,"Thanks for the explanation!
",oscardelben,2012-07-09 15:41:56
735,2012-06-22 18:50:24,"Environment:
- capybara v1.1.2
- selenium-webdriver v2.24.0
- rails v3.2.3, v3.1.1 (possibly others)
- ruby v1.8.7 (possibly others)
- Windows 7
- Internet Explorer 9
- IEDriverServer 32-bit v2.24.1.0

Trying to run a simple capybara spec (adaped from [here](http://www.opinionatedprogrammer.com/2011/02/capybara-and-selenium-with-rspec-and-rails-3/)) against IE:

<S_CODE_TOKEN>

It spins up IE and navigates to the page properly.  However, then it falls down:

<S_CODE_TOKEN>

The exception breaks its cleanup-- the test window is left open, where normally it closes it when the tests are finished.

Note that this same test works fine (and passes) with chrome and firefox on the same windows box (just change :ie to :chrome or :firefox in the script).
",paleozogt,2012-07-10 07:55:34
735,2012-06-22 19:01:36,"Note that this also fails with selenium-webdriver v2.22.2 and the IEDriverServer v2.22.0.0
",paleozogt,2012-07-10 07:55:34
735,2012-06-22 19:01:45,"Honestly, I think that running Selenium against IE is way more trouble than it's worth.

That said, if you really really care about getting this working, I would suggest trying to reproduce this with this template: https://gist.github.com/1024843 (simply run `ruby template.rb` to execute). Then ping @ jarib about it and/or file a report on the Selenium bug tracker.
",joliss,2012-07-10 07:55:34
735,2012-06-22 19:09:18,"Thanks.  I tried the template _and it works_.  Could this possibly be a capybara/selenium interaction problem?
",paleozogt,2012-07-10 07:55:34
735,2012-06-22 19:17:35,"Hard to tell. Could you try and get a better stack trace? I can't make out where exactly it's crashing.
",joliss,2012-07-10 07:55:34
735,2012-06-22 19:17:42,"Ah, the template may working because the script is trivial (I didn't really read it at first).  Ok, I guess I need to translate my capybara test into direct selenium commands.
",paleozogt,2012-07-10 07:55:34
735,2012-06-22 19:19:29,"Here's the stack trace:

<S_CODE_TOKEN>
",paleozogt,2012-07-10 07:55:34
735,2012-06-22 19:26:47,"Hm, I can't figure out where the `undefined method`map' for nil:NilClass` is coming from. Perhaps it's wrapped in an eval or something weird like that. I'm a bit at a loss at the moment.
",joliss,2012-07-10 07:55:34
735,2012-06-22 19:29:11,"Perhaps there's some other debugging information I can get for you?  I could put some logging into the code, perhaps.
",paleozogt,2012-07-10 07:55:34
735,2012-06-22 19:32:12,"No obvious suggestions from my end, I'm afraid.

Honestly, I'd just ""solve"" the problem by not using IE. I always run my Selenium tests only against Firefox. Testing with more browsers will uncover few cross-browser compatibility issues in your app, but lots of problems with Selenium.
",joliss,2012-07-10 07:55:34
735,2012-06-25 17:51:58,"@joliss I adapted the template.rb into an equivalent test:

<S_CODE_TOKEN>

This works fine in IE9.  It's possible that capybara is calling different selenium-webdriver apis than I am, however.  At any rate, I can't reproduce the issue using pure selenium-- there's some kind of problem between capybara and selenium.
",paleozogt,2012-07-10 07:55:34
735,2012-06-25 19:13:33,"@joliss In debugging this some more I noticed that capybara opens 127.0.0.1 rather than localhost.  While this seems innocuous, I changed my pure-selenium script to use 127.0.0.1:

<S_CODE_TOKEN>

and it fails!

<S_CODE_TOKEN>

So it's definitely not a capybara issue-- its some kind of problem with selenium + IE9.  Is it possible to workaround this issue by telling capybara to use ""localhost"" instead of 127.0.0.1?  I could use `Capybara.app_host`, but then how would I know which port capybara is running the rack host?
",paleozogt,2012-07-10 07:55:34
735,2012-06-25 19:16:02,"@jarib I've reduced this to a selenium bug [here](http://code.google.com/p/selenium/issues/detail?id=4147)
",paleozogt,2012-07-10 07:55:34
735,2012-07-10 07:55:34,"I'm closing this, since it isn't a Capybara issue.
",jnicklas,2012-07-10 07:55:34
734,2012-06-21 11:28:14,"Hi Jonas,

we just had a hard time debugging Capybara (trying to find out how to get a node's text unnormalized) because Capybara::Driver::Node#inspect returns its own class name instead of the subclasses'.
I've also seen this pattern is used in other locations as well.
Is there a specific reason for this?

Best regards
  Martin
",nightscape,2012-06-21 12:10:12
734,2012-06-21 12:10:53,"Sounds good to me :)
",jnicklas,2012-06-21 12:10:12
733,2012-06-20 10:57:42,"Has capybara been tested with the new selenium-webdriver version 2.24.0 ? 

After a bundle update today, my integration tests stopped working - checking the current page after a button click gave the previous page, not the expected new page. Not sure of the cause yet, but could be a timing issue - when I tried to debug by adding save_and_open_page, the test runs further.

Reverting to selenium-webdriver 2.22.2 solves the problem.
",sreid99,2012-07-12 15:13:21
733,2012-06-20 12:56:16,"It's working for me so far, but perhaps someone else has insight to provide. If you don't get any replies within a few days, mention @ jarib, he might have an idea.
",joliss,2012-07-12 15:13:21
733,2012-06-26 22:27:19,"Mentioning @jarib like @joliss says above as I am seeing the same issue. I see the issue in full rake run. When I setup a breakpoint before the checking the url then the tests pass so that does imply a timing issue. Interesting thing is that after I have once run with a breakpoint the next run succeeds for just that cucumber scenario but I guess such is the life with races.
",betelgeuse,2012-07-12 15:13:21
733,2012-06-26 22:37:57,"I can't recall any changes in this area between 2.22 and 2.24. 

This looks similar to #690, though comments there talk about a 2.20 -> 2.22 upgrade, not 2.22 -> 2.24. The solution is likely the same: poll for the change you expect after clicking.
",jarib,2012-07-12 15:13:21
733,2012-07-09 15:51:17,"Works fine for me. Do you have `:resynchronize` enabled?
",jnicklas,2012-07-12 15:13:21
733,2012-07-12 15:13:21,"Closing this. OP, please reopen if this is still an issue.
",jnicklas,2012-07-12 15:13:21
733,2012-07-19 12:21:20,"I have had a few tests failing with the following error after an upgrade from 2.22.2 to 2.24:

<S_CODE_TOKEN>
",prusswan,2012-07-12 15:13:21
732,2012-06-19 12:38:43,"When ever I try to use dynamically created elements with `within` I have to do a `find` before, otherwise I get an element not found exception. Is this on purpose or a bug?
",gucki,2012-07-12 08:40:00
732,2012-06-19 14:11:35,"Can you provide a code sample that fails, not sure I understand.
",jnicklas,2012-07-12 08:40:00
732,2012-07-09 15:48:48,"I wouldn't be surprised if this happens with `within_frame`, since we don't have any automatic waiting built into that method. But I'm honestly not sure how we'd do that. But `within` should wait for elements, it just does a `find` under the surface, so there should be no difference.
",jnicklas,2012-07-12 08:40:00
732,2012-07-12 08:40:00,"OP never got back to us. So I'm closing this, please reopen with a more detailed explanation.
",jnicklas,2012-07-12 08:40:00
731,2012-06-18 06:11:52,"Given this selector

<S_CODE_TOKEN>

And this HTML

<S_CODE_TOKEN>

Capybara doesn't locate the div.  I identified that it was the extra div `baz` that caused the failure.  Changing or removing the class name on the `baz` div didn't help.  Removing the whole div worked.

<S_CODE_TOKEN>

I tested `:first`, it also failed in the below situation

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I hope this is useful to someone.

Regards
Capybara fanboy
",23inhouse,2012-06-18 10:58:13
731,2012-06-18 10:58:13,"This isn't a bug, but a misconception. There is no `:last` pseudo selector in CSS, it's something the jQuery guys just made up. There is `:last-child`, which behaves quite differently: the element has to actually be the last child, which in your example it isn't (the baz div comes after). Confusingly, Nokogiri which Capybara uses to convert CSS to XPath also added a non-standard `:last` pseudo selector, which _aliases_ `:last-child`.

Note that since the `:last` pseudo selector isn't in any CSS spec, the behaviour that Nokogiri chose is just as correct as the jQuery one. So it isn't a bug, just that it behaves differently from what you expect since you've probably previously used the jQuery version. 
",jnicklas,2012-06-18 10:58:13
731,2012-06-18 14:40:05,"Ahh, thank you for the explanation!  I would have never guessed it.

It was very confusing testing the selector in jQuery and getting a different result.

Thanks again
",23inhouse,2012-06-18 10:58:13
730,2012-06-14 15:40:13,"This patch makes it possible to test scenarios where your app is redirecting to external URLs without a lot of hustle. I have a lot of trouble testing those things in our SSO server which redirects to different apps, depending on which one you choose when logging on.
",walski,2012-07-12 14:57:15
730,2012-07-09 15:16:56,"I guess I could see this as a configuration option to the RackTest driver, even though I personally think testing this kind of thing in an integration test is kind of wrong. But as implemented, this doesn't work at all for me.
",jnicklas,2012-07-12 14:57:15
729,2012-06-13 19:42:56,"Using capybara (1.1.2) 
Using capybara-webkit (0.12.1) 
Using minitest (3.0.1) 

When running my tests, javascript isn't getting executed. I tried switching from the :selenium driver to the :webkit driver, but still no luck.

It works fine in the browser. When the test runs and the page opens, the page is blank.

Also tried in another case where JQuery launches a UI Dialog when the DOM is loaded. That doesn't happen in the test either.

Is there something else I need to do to get it to execute javascript during test runs?

business_integration_test.rb

<S_CODE_TOKEN>

businesses_controller.rb

<S_CODE_TOKEN>

edit.js.erb

<S_CODE_TOKEN>
",macmartine,2012-06-13 20:20:21
729,2012-06-13 20:20:21,"You need to switch drivers like so:

<S_CODE_TOKEN>

In your test_helper.rb, set `Capybara.javascript_driver = :selenium` (default) or `:webkit`.

If you need more help, ask on the mailing list please! This issue tracker is meant for bug reports only.
",joliss,2012-06-13 20:20:21
728,2012-06-13 15:16:36,"It should be 'table', not :table.
",bitcababy,2012-07-09 15:52:35
728,2012-06-13 15:19:32,"Can you be more descript? Where is it wrong?
",jnicklas,2012-07-09 15:52:35
728,2012-07-09 15:52:34,"OP never got back to us, and the issue itself doesn't help. Closing.
",jnicklas,2012-07-09 15:52:35
727,2012-06-11 11:23:48,"I'm using capybara and json_spec to test JSON output, but when I do `save_and_open_page`, it wraps the JSON in HTML tags before saving. 

This means that when it opens in the browser, it appears as a big blob of Times New Roman. And if the JSON itself contains any HTML strings, the rendered result is a complete mess.

Ideally it should just save the source as plain text if it's a non-HTML page. Then, when it opens in the browser, it would appear in a mono font, with whitespace preserved. Plus it would also work with browser extensions that automatically detect JSON and pretty-print it.
",callumlocke,2012-06-11 11:51:05
727,2012-06-11 11:51:00,"This is basically unavoidable, as Selenium will only return HTML, as far as I know.

The canonical answer is, stop testing JSON APIs with Capybara, and use RackTest or Rails controller (functional) tests instead. See this: http://elabs.se/blog/34-capybara-and-testing-apis
",joliss,2012-06-11 11:51:05
726,2012-06-08 08:33:35,"I want to use `Capybara::Session#save_page` with **file name**.

Such as:

<S_CODE_TOKEN>

Instead of:

<S_CODE_TOKEN>
",tricknotes,2012-07-09 15:12:01
725,2012-06-08 02:51:57,"### 128-second hangs before finally failing with `ElementNotFound`

I've noticed that sometimes capybara will **appear to hang forever** (it's not actually forever but it's a really long time) when it looks for an element and can't find it. This is pretty frustrating when my cucumber test run just hangs indefinitely for no apparent reason.

A [simple test scenario](https://github.com/TylerRick/capybara_nested_synchronize_bug/blob/master/features/step_definitions/reproduce_bug_steps.rb) that _should_ only take about [`11 s`](https://gist.github.com/2893016) to fail ends up taking a whopping [`128 s`](https://gist.github.com/2892966) before it finally fails with a `Capybara::ElementNotFound` error !

(In my case, I'm actually doing something where I _expect_ it to not find the element, so I have to wait that long before I can rescue the `Capybara::ElementNotFound` error and move on with the rest of my test...)

After hours of debugging, I managed to distill this down to a [reproducible scenario](https://github.com/TylerRick/capybara_nested_synchronize_bug). But I still don't understand completely what's going on...

It seems to be the combination of `within` and a `find` that it doesn't like... although I've done  `find`s inside of `within`s  without problems before so I don't know what exactly is wrong with this scenario...
## So what's going on?

From what I can tell, it looks like this code in synchronize that is supposed to retry a search query a certain number of times (40), ends up getting called somewhat recursively and so it ends up retrying the query 40*40 times:

<S_CODE_TOKEN>

Instead of just doing `retries` number of retries (`Capybara.default_wait_time / 0.05` == `40` in my case) , it appears to be doing approximately `retries**2` (`40**2` == `1600`) number of retries!
## Debug output

You can observe this in the output from running rake cucumber with some debug output added (see [workaround.rb](https://github.com/TylerRick/capybara_nested_synchronize_bug/blob/master/lib/workaround.rb) for the debugging code that created the output and [gist](https://gist.github.com/2892966) for the full output)...

The first section (before the ""========="") shows how it is _supposed_ to work, and does normally work... You can see the retries number counting from 40 all the way down to 0.

The second section (after the ""========="") shows what happens when it _doesn't_ work how I think it's supposed to work... You can see the retries number from the **inner loop** (lines starting with 1) counting from 40 all the way down to 0. But as soon as the inner loop completes, the **outer loop** (lines starting with 0) begin counting down, each time executing the inner loop all over again...

<S_CODE_TOKEN>

Here's a [gist](https://gist.github.com/2892996) showing the relevant lines from `caller` that show where synchronize is being called.
## Workaround

My [workaround](https://github.com/TylerRick/capybara_nested_synchronize_bug/blob/master/lib/workaround.rb) basically involved preventing the **inner** loops from looping at all if it detected we were already in an **outer** synchronize retry ""loop""

Basically I just changed:

<S_CODE_TOKEN>

to:

<S_CODE_TOKEN>
## Solution?

My workaround probably isn't the correct solution to the problem, since I don't really understand what's going on but it seems to at least fix the problem for me...

Can you please provide/suggest a better solution or tell me what I'm doing wrong?

(Note: This only affects the Selenium Webdriver driver, of course, not Rack Test.)
",TylerRick,2012-07-12 14:21:35
725,2012-07-10 07:50:51,"We used to check the system time, instead of calculating the number of retries. This had the disadvantage that if someone freezes the return value of `Time.now` it would hang Capybara. Maybe we should do both. Hmm. This is tricky.
",jnicklas,2012-07-12 14:21:35
725,2013-09-18 02:41:57,"So, I was experiencing intermittent freezing with the latest(capybara v2.1.0 and capybara-webkit(v1.0.0), and this workaround works for me.  The curious bit is that it only works if line 19 of workaround.rb is included.  Commented out, it freezes.  As well, I do not experience freezing if that line is converted to a Rails.logger.debug line.  So, it seems that some sort of IO or delay is allowing the synchronization to work.  In fact, putting in an extra sleep 0.05 at line 19 instead of a puts or Rails.logger.debug also prevents the freezing.  I have no idea, just thought I'd share if it helps the bigger brains on this problem :)
",synth,2012-07-12 14:21:35
725,2013-09-18 07:06:29,"No idea what's going on. I've never heard of a problem like this. If you can find some way of replicating this, please open a new issue.
",jnicklas,2012-07-12 14:21:35
725,2013-09-20 02:42:55,"its really difficult and intermittent.  I do see in my logs that it always happens when i'm doing an action that manipulates session(eg login/out) i will keep an eye on this and let you know if i discover anything worth tracking down. EDIT: I'd like to also add that it consistently happens when I have an orphaned webkit_server process(es) which i cleanup with my nifty bash command: ps -ef |egrep 'webkit|rspec' |awk '{print $2}' |xargs kill -9
",synth,2012-07-12 14:21:35
724,2012-06-05 21:26:26,"Hey, I just came across this problem while spec'ing out authentication (with devise).  I'm pretty new to TDD so I very well could be doing something wrong but everything seems to be in it's right place.  Anyway, I can't find a way to successfully submit the registration form for devise, all attempts to click the submit button fail :\

Note: when I follow these steps manually in the browser everything works as expected (no errors).

Here's some code:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",iamveen,2012-06-05 21:31:49
724,2012-06-05 21:31:48,"This issue tracker is meant for bug reports. Could you please repost this to the mailing list?
",joliss,2012-06-05 21:31:49
724,2012-06-05 21:33:04,"Ya, of course.  This seems like a bug to me though.
",iamveen,2012-06-05 21:31:49
724,2012-06-20 10:31:43,"Same issue here, I've a link in a page, when I use click_on passing the text I get the same error:

   NoMethodError:
       undefined method `[]' for nil:NilClass

I've tried to use debugger (like ruby-debug but plays well on ruby >=1.9.2) and I see the link markup in the page (page.body) but I get that error.

Probably it could help: The link is added by the link_to_add helper provided by the simple_nested_form_for form builded provided by nested_form
",xoen,2012-06-05 21:31:49
724,2012-07-12 18:37:56,"Same issue as @xoen, link generated using link_to_add
",anu-vaid,2012-06-05 21:31:49
724,2012-10-03 11:19:11,"Link is probably depending on javascript, so you have to put add 'js: true' as an argument to your describe, context or it.

A better error message would be helpful debugging this.
",jjoos,2012-06-05 21:31:49
724,2013-04-19 06:43:01,"I am experiencing the same behaviour. My button is within my form tag within the generated HTML. The form is generated with SimpleForm and the button with f.submit. 

The tests pass when I add Capybara.current_driver = :selenium (I am using MiniTest). What I find interesting is that I have a near identical view & form which passes the test and does not give the ""undefined method or nil"" error when clicking on the button, even when not using the selenium driver. This form also uses SimpleForm and f.submit. 

At this stage my only guess is that on the selenium required form I have a datepicker field that is required. On the other form I also have a datepicker field but it is not required for form submission. Within my tests I simply fill_in the text field associated with the datepicker, I don't go through the steps of actually picking a date from the datepicker.
",MrHubble,2012-06-05 21:31:49
724,2013-04-19 07:05:38,"Stack trace please!
",jnicklas,2012-06-05 21:31:49
724,2013-04-22 05:43:34,"Below is the stack trace. Please let me know if I have provided the wrong information. Thanks.

  1) Error:
test_0001_add new service(Services integration):
NoMethodError: undefined method `node_name' for nil:NilClass
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/node/simple.rb:58:in`tag_name'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/node/simple.rb:46:in `[]'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/rack_test/node.rb:11:in`[]'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/rack_test/form.rb:81:in `method'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/rack_test/form.rb:71:in`submit'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/rack_test/node.rb:55:in `click'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/node/element.rb:118:in`block in click'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/node/base.rb:81:in `synchronize'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/node/element.rb:118:in`click'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/node/actions.rb:13:in `click_link_or_button'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/session.rb:354:in`block (2 levels) in class:Session'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/dsl.rb:51:in `block (2 levels) in <module:DSL>'
    test/integration/services_integration_test.rb:31:in`block (3 levels) in <main>'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/session.rb:224:in `within'
    /Users/Airbender/.rvm/gems/ruby-1.9.3-p392/bundler/gems/capybara-085581e28ecd/lib/capybara/dsl.rb:51:in`block (2 levels) in module:DSL'
    test/integration/services_integration_test.rb:30:in `block (2 levels) in <main>'
",MrHubble,2012-06-05 21:31:49
724,2013-04-22 15:43:45,"@MrHubble From a quick glance at the stacktrace it looks like your submit button is not actually associated with a form on the page.  Are you sure the submit is actually inside a form element in the generated html  or if outside the form does it have a form attribute that equals the id of the form you expect it to submit? - maybe posting the generated html for the form would help?  
",twalpole,2012-06-05 21:31:49
724,2013-04-23 02:39:00,"@twalpole Thank you so much for your help. Yes, as you may have expected, it was a problem with my code. I am using Bootstrap and SimpleForm and I believe my issue was I was starting a row before the start of the fieldset and then closing the row within the fieldset. The code may explain this better:

<S_CODE_TOKEN>

When I moved the row tag under the fieldset tag then my test go green without needing to use Selenium:

<S_CODE_TOKEN>
",MrHubble,2012-06-05 21:31:49
724,2014-09-01 16:18:32,"@jnicklas I appreciate your good work for creating Capybara. 
I've only been into development using ruby on rails for about 7 months, I have noticed that `click_on` produces the error that was shown in this issue, for buttons that are not in a form. However, sometimes some buttons are not in a form. e.g I have a button that simply unhides a certain `div` when it is clicked on. 

what is work around for this? by asking this I have used the different query methods and I have not been sucessful. and simply putting a button into a form so that test runs might not be very ideal.
",leonardk1,2012-06-05 21:31:49
723,2012-06-04 23:42:45,"Test for #html in session shared example group was actually calling #body. This fix corrects it to call #html, to match the name of the test. (The call to #body is in the previous spec, so it looks like a cut and paste error.)
",booch,2012-06-05 09:46:57
723,2012-06-05 09:47:04,"Thank you!
",joliss,2012-06-05 09:46:57
722,2012-06-04 10:12:00,,tslocke,2012-06-04 10:14:38
722,2012-06-04 10:14:44,"Thanks!
",joliss,2012-06-04 10:14:38
721,2012-06-01 00:19:38,"If you have 2 password fields with labels 'Password' and 'Confirm Password' then trying:
fill_in 'Password', :with => 'value' results in an error ""can't find field...'

Changing to ""Confirm password"" (note case) makes it work again.

Using ids or names of the fields works too. Only labels conflict.

I think it is related to the xpath using a contains() function and only looking for the @for attribute, instead of ensuring that the @for points to the selected element. 

I just had a cursory look at the source, so I could be wrong. I'm willing to change my wording to fix, so it's not a major pain for me. I'll return and see if I can come up with a patch, if I get some free time soon.
",mattvanhorn,2012-06-01 00:34:45
721,2012-06-01 00:34:45,"See #715! :)
",joliss,2012-06-01 00:34:45
720,2012-05-29 22:58:32,"Having issue installing capybara for 1.5.1 version. Please see below gist for error details.

https://gist.github.com/2830647

Able to install same version for jruby-1.6.7.2 version. Not sure what is causing this.

Thanks,
AK.
",anilk914,2012-05-30 00:41:33
720,2012-05-30 00:41:33,"The Capybara version you're trying to install is very old. You should try the current version ([1.1.2](https://rubygems.org/gems/capybara/versions)).
",joliss,2012-05-30 00:41:33
720,2012-05-30 01:02:54,"Hi,

Failing with the same error when I tried installing capybara latest version for jruby-1.5.1. For your information, this is happening for mac lion. 

Thanks,
AK.
",anilk914,2012-05-30 00:41:33
720,2012-05-30 14:00:01,"I see. I'm not sure what the cause is. Your stack trace doesn't have `capybara` anywhere in it, so perhaps there's some other issue.

The Capybara tests [pass](http://travis-ci.org/#!/jnicklas/capybara/jobs/1237429) on JRuby 1.6.7, but whether it's possible or not to run it on 1.5.1 I don't know.

If you need more help, I'd recommend asking on the mailing list.
",joliss,2012-05-30 00:41:33
719,2012-05-25 21:46:12,"Adds configuration variable `Capybara#redirect_limit`. Defaults to 5 (current hard default)
",lanej,2012-07-09 15:19:19
719,2012-06-18 00:54:38,"I think this fix is great. It allows configuration for advanced cases, yet retains the strict checking that is needed for casual uses.
",jjulian,2012-07-09 15:19:19
719,2012-07-09 15:20:11,"Okay, I'm merging this. Knock yourselves out with your millions of redirects ;)
",jnicklas,2012-07-09 15:19:19
719,2012-07-10 14:40:21,"@jnicklas Thanks!!
",jjulian,2012-07-09 15:19:19
718,2012-05-24 18:25:36,"I noticed that if you do a nested page.within_frame, when you get kicked out of the 2nd layer, it goes all the way back to the top.

For example if I have structure like so (doing in yaml format for ease of typing using underscores for spaces):

EXAMPLE START

page:
&nbsp;&nbsp;&nbsp;search_frame:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter_type_frame: ""has link to click""
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter_details_frame: ""has input fields to set""
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter_results_frame: ""has filtered results""

EXAMPLE END

When I say:

page.within_frame('search_frame'){

  page.within_frame('filter_type_frame'){
    #code to click link
  }

  puts page.source #shows the code of the original page

  page.within_frame('filter_details_frame'){
    #code to fill in frames <--- failing because I am not within the search frame anymore
  }

}

above is an example of where I see this ""bug"" or undesirable functionality. It would be really nice if I wasn't kicked out of search_frame when I leave filter_type_frame.

Not sure if this is enough info, I can create a template for testing if need be.
",jsmiley,2012-08-30 14:53:26
718,2012-07-09 15:58:17,"This is up to the driver to handle correctly. I'm pretty sure the Selenium driver does this right, if you have any problems with another driver you should report that to the relevant project. It might also be a good idea to add a spec to Capybara to verify this behaviour to help driver authors avoid this mistake in the future.

Just FYI: We've been discussing rewriting the window API, since within_window is kind of limiting in what it can do.
",jnicklas,2012-08-30 14:53:26
717,2012-05-24 05:49:57,"Just wanted to nudge you for a release newer than 1.1.2.   

Firefox is auto-updating itself to v12 these days, and v12 necessitates an update of selenium-webdriver to 2.21.x.     But current capy 1.1.2 breaks with selenium 2.21 if user actions create modal dialogs like delete confirmations.   (We have code that accepts the dialogs in our specs, but that code never executes because the exception gets thrown inside a wait_until block in capy's click_link method).

I noticed that this works ok in edge capybara installed from git; staff at #selenium IRC tipped me off to that.     But given that lots of people will be running into it this week since FF is auto-updating, it would be lovely to have it in a proper release.

Many thanks!
-Evan
",IdahoEv,2012-07-09 15:55:13
717,2012-05-24 07:21:40,"Edge is not in a good state to be released. In that case we would need to do a patch release. And in that case someone would have to go through all changes since 1.1.2 and cherry pick all relevant bug fixes which don't break backwards compatibility. I'm pretty sure that someone won't be me ;)
",jnicklas,2012-07-09 15:55:13
717,2012-05-24 09:59:29,"Too bad. Maybe someone (@IdahoEv?) could figure out what's causing the breakage and create a patch for 1.1.2 to backport whatever fix there is in master.
",joliss,2012-07-09 15:55:13
717,2012-05-24 10:00:37,"In other words, not backport every fix, but just the one that's necessary for Firefox 12 compatibility.
",joliss,2012-07-09 15:55:13
717,2012-05-24 11:11:41,"That sounds like a good plan.
",jnicklas,2012-07-09 15:55:13
717,2012-05-24 16:20:18,"I may see if I can look into this soon - but no promises; two clients are very urgently waiting for their weekly sprints.

But in case anyone else wants to look into it in the meantime, the stuff I was able to glean last night is that:  
   Selenium >= 2.21 is necessary to connect to FF12.
   Selenium >= 2.19 throws exceptions much more eagerly when it thinks a modal dialog isn't being handled.
   In Capy 1.1.2, the wait_until {} blocks wrapped around Node#click_link and the like  are causing those sel 2.19 exceptions to get thrown before click_link returns, if that link triggered a dialog.
",IdahoEv,2012-07-09 15:55:13
717,2012-05-25 20:52:54,"An update:  I was able to get my specs mostly working with capybara 1.1.2 and selenium 2.21.0 by removing :resynchronize => true from my selenium configs.   That seems to eliminate the ""modal dialog present"" issue.

However, _then_ I get some very strange fails where AJAX requests don't get processed - the server stops processing the request before it executes the controller method.  In these cases,   click_link ""some_ajax_link"" will fire the request, it will get routed correctly, but the controller method never gets called.    It just silently moves on to the next step in the spec, with Rails having not fully processed the action. 
",IdahoEv,2012-07-09 15:55:13
717,2012-07-09 15:55:13,"`:resynchronize` has been removed from Capybara, so this issue is moot. What you're likely experiencing is that you're performing an action without actually doing an assertion after. Doing so in the absence of `:reqynchronize` can make Capybara proceed to the next spec without waiting for the request to finish. That isn't a bug however, it's just how Capybara works in the absence of `:resynchronize`.
",jnicklas,2012-07-09 15:55:13
716,2012-05-23 20:57:25,"I just tried to setup  some rspec integration specs. My test suit has only 2 ""it"" blocks so far. The first one works fine, but the first ""visit"" call in the second spec simply doesn't open the page in firefox it opens a blank page.

I'm using Rails 3.2.3, Ruby 1.9.2, Capybara 1.1.2 and selenium-webdriver 2.21.1

Here is my spec.rb:

<S_CODE_TOKEN>

Any hints are welcome!
",ncri,2012-05-23 22:34:00
716,2012-05-23 22:34:00,"Please repost this on the mailing list, it's a better place to ask questions!
",joliss,2012-05-23 22:34:00
716,2012-05-24 07:21:27,"Okay. It might be a bug though. ;-) 
",ncri,2012-05-23 22:34:00
716,2012-05-24 09:55:41,"Certainly, but for a bug report to be useful, we'd need some kind of test case to reproduce it.

The second `visit` works for just about everybody, including Jonas and me -- in all likelihood there's some problem in the way you're using Capybara. Though _if_ there's a bug, it would at least have to be narrowed down to ""subsequent visit doesn't work under condition X"".
",joliss,2012-05-23 22:34:00
716,2012-05-24 09:56:05,"Hope this makes sense. :)
",joliss,2012-05-23 22:34:00
716,2012-05-24 10:03:49,"Well, this is a really simple setup. I gave my whole test config above. I can even make the whole app (which is also quite simple) available if that helps, as it's for an open source gem. On a side note I would assume an issue stays open, until it's certain that it's not a bug. That's how i deal with issues in my projects... ;-)
",ncri,2012-05-23 22:34:00
716,2012-05-24 10:15:58,"I posted my specs and gemfile here: https://groups.google.com/group/ruby-capybara/browse_thread/thread/412e81e499a33678
",ncri,2012-05-23 22:34:00
716,2012-05-24 10:36:31,"Yes, if you don't get a reply, pushing your app to GitHub might be helpful.

> On a side note I would assume an issue stays open, until it's certain that it's not a bug.

We can always reopen it if it turns out to be an actual bug.
",joliss,2012-05-23 22:34:00
716,2012-05-24 11:35:49,"Okay, sure.
",ncri,2012-05-23 22:34:00
716,2012-05-25 06:16:28,"Okay, got it working. Had to add: 

Capybara.default_driver = :selenium

So it seems it is not enough to set: 

Capybara.javascript_driver = :selenium 
Capybara.current_driver    = :selenium 

Why are there so many options in the first place? Confusing...  ;-)
",ncri,2012-05-23 22:34:00
715,2012-05-23 15:10:58,"I have a combined form for a user and an account. The account field is above the user field. 

This will not work. Notice there are two fields that have the word ""name in them"":

<S_CODE_TOKEN>

The method fill_in will fill in the first field it encounters (account name), but not the second, for the user.
",abitdodgy,2012-05-24 07:27:06
715,2012-05-23 16:32:58,"This is intentional, the error message is just sub-optimal/wrong. Capybara master rejects ambiguous matches, and ""Name"" will match both fields.

I think the canonical answer is to use the name or id, though perhaps Jonas has some other idea.
",joliss,2012-05-24 07:27:06
715,2012-05-24 07:27:06,"What Jo said.
",jnicklas,2012-05-24 07:27:06
714,2012-05-21 18:59:13,"I run the code using the chrome driver <--- works correctly with no errors

I run the code using the IE driver <---- fails every time with the subject error message.

I am just trying to test a website I have deployed locally (URL = localhost)

I am testing using the following settings:

Capybara.run_server = false
Capybara.default_selector = :css
Capybara.default_wait_time = 30

Capybara.register_driver :selenium_with_long_timeout do |app|
  client = Selenium::WebDriver::Remote::Http::Default.new
  client.timeout = 300
  Capybara::Selenium::Driver.new(app, :browser => :internet_explorer, :http_client => client, :resynchronization_timeout => 60)
end

Capybara.javascript_driver = :selenium_with_long_timeout
Capybara.default_driver = :selenium_with_long_timeout

I am not sure why I am getting this error but since it is working correctly in Chrome but not in IE it seems like a bug.
",jsmiley,2012-05-21 20:06:45
714,2012-05-21 20:06:45,"This is almost certainly not a bug in Capybara, but in the Selenium driver.

See if you can reproduce it with this template: https://gist.github.com/1024843
Then send the bug report to @ jarib, or file a report in the Selenium bug tracker.
",joliss,2012-05-21 20:06:45
714,2012-05-21 20:25:03,"I am confused, what am I supposed to do with this template? 
",jsmiley,2012-05-21 20:06:45
714,2012-05-21 20:29:12,"The template exercises the selenium-webdriver gem, which is the library that Capybara forwards all your calls to as well. Edit the template until it crashes the same way your larger app crashes. That way you have a one-page snippet to send as a bug report.

(You'd probably use `:internet_explorer`, and if necessary fill in code after `begin`, and set up any HTML that's necessary to trigger the crash.)
",joliss,2012-05-21 20:06:45
714,2012-05-21 20:30:03,"Here is the file to download onto your computer: https://raw.github.com/gist/1024843/87fe9675812a717e913a4b4fc5be2f8b6bd432bc/file.rb
",joliss,2012-05-21 20:06:45
714,2012-05-21 20:32:58,"just add visit ""localhost"" and there you go.
",jsmiley,2012-05-21 20:06:45
714,2012-05-21 20:33:42,"Doesn't get past the ""default webdriver page"" page
",jsmiley,2012-05-21 20:06:45
714,2012-05-21 20:40:57,"@jsmiley if you're writing a bug report you need to be as explicit as possible. Now this bug doesn't really concern Capybara, but if I were Jari, I would probably need way more information than you've given us here. Remember, these are bug trackers, not support forums, it's not our responsibility to figure out what issue you are having. The template is there to guide you in writing something the Selenium guys can use to help you.
",jnicklas,2012-05-21 20:06:45
714,2012-05-21 20:43:50,"let me rephrase my problem.

How do I use this template to provide useful info? Where does this go in the code? (first time ever being asked to do something like this)
",jsmiley,2012-05-21 20:06:45
714,2012-05-21 21:35:58,"@jsmiley it's not so much about the template itself, as _isolating_ the problem. That's what the template is useful for. Run it, verify that it works, then modify it so it more closely resembles how your code looks, until you can come up with the most minimal set of conditions for creating the error you're experiencing.
",jnicklas,2012-05-21 20:06:45
714,2012-05-21 21:37:04,"@jnicklas, it will never work. DATA doesn't exist.
",jsmiley,2012-05-21 20:06:45
714,2012-05-21 21:38:33,"I also believe that the template is not designed to debug a cucumber test script.
",jsmiley,2012-05-21 20:06:45
714,2012-05-21 21:49:13,"Also, one last thing, it never gets to my code!!!!! It even finishes executing my env file. There is something happening in a layer I do not have access to.
",jsmiley,2012-05-21 20:06:45
714,2012-05-21 22:14:53,"You have access to all layers. Capybara is open source, Selenium is open source, Cucumber is open source, hell even Ruby is open source. And it's _never_ a bug in the operating system, that's a fundamental principle of debugging ;) Start digging! Start removing layers! Debug!
",jnicklas,2012-05-21 20:06:45
714,2012-05-21 22:16:28,"Alright, I gotcha, I didn't realize you wanted me to debug the cucumber project and my test project (thought you were looking for some sort of function under the hood which is throwing the issue)
",jsmiley,2012-05-21 20:06:45
713,2012-05-21 12:37:11,"I'm using Capybara with Selenium.
I've got the code below in a request spec. Basically I'm trying to test how my dependent combo boxes behave based on how their contents change after AJAX updates.

<S_CODE_TOKEN>

This second call to `find_by_id` raises ElementNotFound, even if I pass the same ID string and `fieldset` is the same node (even the same ruby object).
I have some other code executing where the ellipses are, but I'm pretty sure `find_by_id` stops working after this specific call to `has_xpath?`.

Some notes:
1) If I replace `fieldset` with `page`, everything works
2) I haven't spent much time debugging this, but I think this has something to do with search scopes. I found out that when `find_by_id` errors out, Selenium driver receives a different parent element to execute `findElements` on. The ID of the parent in this case seems to be the last one found by `has_xpath?`.
",artem-mindrov,2012-06-11 15:30:11
713,2012-05-21 13:28:59,"This does indeed sound like a bug. I think what's happening is that Capybara's implicit reloading doesn't handle the case of elements being found with `all` very well. In this case, Capybara tries to rerun the query which found the element, but instead of picking the n-th element, it picks the first. I checked the code, and it seems like this is what Capybara is doing. 

I don't really think that there is a way to reliably re-run an `all` query, since the order of elements could have changed since the query was originally run, so Capybara probably should just not reload these elements. Unfortunately that opens up the possibility of timing errors, but as this example clearly shows, the current behaviour is simply wrong.
",jnicklas,2012-06-11 15:30:11
713,2012-05-21 13:53:58,"I'd expect the order to be the same except for when one of my scripts triggered by a user action changes it. At least I'd be frustrated if I found out that something is messing with my DOM tree under the covers, breaking my tests and making me think I've started losing my sanity. So off the top of my head, I can't think of a better way to deal with this, other than assuming that the sub-tree structure hasn't changed since it was first queried, as you suggest. I imagine it wouldn't be an easy task checking if your element references have become stale between requests, right?

OTOH, I can use `page` as search base, but I think if my DOM tree is large enough, it will become a bit expensive, so it's always nice to have a means to narrow down the scope...
",artem-mindrov,2012-06-11 15:30:11
713,2012-05-21 14:00:39,"Since the browser can execute stuff asynchronously, stuff can and will change under your feet. That's a fact of life when dealing with JS capable browsers. The question is how we handle that...
",jnicklas,2012-06-11 15:30:11
713,2012-05-22 20:23:15,"From a quick glance at Selenium driver code, it's able to compare elements using their refnums. I'm wondering if there is some driver-agnostic way to do this. If so, re-queried collection elements could be matched against the old set so you can rebuild your references in a consistent manner, or raise an exception saying that the element you're looking for is no longer there.
",artem-mindrov,2012-06-11 15:30:11
713,2012-05-24 07:30:20,"I think that even with comparing refnums and stuff, we'll never be able to accurately capture the intent of the user. I think we'll be better off just not reloading in this case.
",jnicklas,2012-06-11 15:30:11
713,2012-05-28 05:54:38,"This too seems like an OK solution. Do you think it's worth being documented?
",artem-mindrov,2012-06-11 15:30:11
712,2012-05-16 16:00:16,"Hi,

I'm using capybara 1.1.2 with selenium-webdriver 2.12.2 under cucumber 1.2.0 all stirred together in a Rails 3.2 application with ruby 1.8.7 . Using the ""visit"" method on any given scenario works, as the request reaches the server started by cucumber, it produces a template, which capybara parses. All good. As soon as I tag the scenario with ""@javascript"", it stops working. I mean, I try to ""visit"" my application's homepage, a browser pops up with the host for my cucumber environment, but neither the request reaches the server (should see it in the log) nor the page is rendered. Any idea why this might be happening? 
",HoneyryderChuck,2012-05-16 16:09:13
712,2012-05-16 16:09:13,"My only guess would be that your Webdriver isn't compatible with your Firefox. Version 2.12 is a little old -- perhaps you can try upgrading.

Other than that, I'd try to debug the problem by pausing execution after the `visit` (with pry) or using save_and_open_page. If that doesn't help, I'd recommend asking on the mailing list.
",joliss,2012-05-16 16:09:13
711,2012-05-15 15:09:52,"issue #705
",thoferon,2012-07-12 08:42:38
711,2012-05-15 15:58:10,"Some test would be useful, to tie down the behavior and to make sure that Rack::Test and 3rd-party drivers are consistent.

Perhaps tighten up the test at lib/capybara/spec/driver.rb:62 to say `== true` instead of `be_true` (which tests for truthiness).
",joliss,2012-07-12 08:42:38
711,2012-05-18 18:21:42,"As the OP of the bug I agree with this implementation.  Although tests would be nice...
",weexpectedTHIS,2012-07-12 08:42:38
711,2012-07-09 15:13:31,"I dislike the implementation too. Maybe there isn't a better way of doing this, I don't know, but enumerating the possible attributes seems pretty wrong to me.
",jnicklas,2012-07-12 08:42:38
711,2012-07-12 08:42:38,"I'm closing this pull request. I don't believe that this needs fixing at all, and this pull request is certainly incomplete.
",jnicklas,2012-07-12 08:42:38
710,2012-05-14 16:14:13,"There should be an API method for declaring that all relative URIs with absolute paths are relative to host X.

<S_CODE_TOKEN>

In this example, all drivers should understand this to take me to `http://subdomain.lvh.me:#{port}/user/sessions/new`.
",yfeldblum,2012-07-10 13:24:23
710,2012-07-10 13:24:15,"This already exists. See `Capybara.app_host`.
",jnicklas,2012-07-10 13:24:23
709,2012-05-10 22:02:58,"I want to clear out a datetime select field in a rails app.  Doing select_datetime(datetime, :from => datetime_label) breaks because datetime is """", and it eventually calls Date.parse(datetime).
",jason-o-matic,2012-05-11 00:32:29
709,2012-05-11 00:32:29,"There's no select_datetime method in Capybara.
",jnicklas,2012-05-11 00:32:29
709,2012-05-11 18:09:42,"Whoops, it was in cucumber-rails' capybara integration.  Here's the link to the issue I posted on cucumber-rails in case other people get here.

https://github.com/cucumber/cucumber-rails/issues/212
",jason-o-matic,2012-05-11 00:32:29
708,2012-05-10 17:58:36,"This is in line with what actual browsers do. See e.g.
https://github.com/jnicklas/capybara/issues/67#issuecomment-292803
",joliss,2012-07-09 15:20:25
708,2012-05-11 00:30:37,"We picked 5 because it's what the HTTP spec says. KInd of as an early warning system. I can't really imagine why anyone would need more than 5 redirects in a row, to be honest. I'm not entirely convinced.
",jnicklas,2012-07-09 15:20:25
708,2012-05-11 16:52:23,"When using omniauth and `test_mode`, more redirects happen than do in production. I'm working on an app that chains two omniauth calls together, so I need **6** redirects when testing. I was going to submit a patch to make the redirect limit configurable, but I'd prefer to just raise it. The _early warning_ for infinite redirects will still happen, but those of us with odd circumstances will no longer have to patch `Capybara::RackTest::Browser`.
",jjulian,2012-07-09 15:20:25
708,2012-05-11 22:45:15,"Just fyi that 6 redirects _is_ in violation of the HTTP spec and user agents (like Capybara) are free to treat that as an infinite redirect. So _technically_ Capybara is doing the right thing. The question is again, does pragmatism win over technical correctness?
",jnicklas,2012-07-09 15:20:25
708,2012-05-11 23:04:08,"I'd be OK letting pragmatism win.

The way I read the development of the HTML5 spec is that in many cases they basically just standardize stuff that works across moderns browsers (that's how the doctype or charset=""utf-8"" came about). Paul Irish talks about this here: http://paulirish.com/2011/primitives-html5-video/ So I'd be more than comfortable sticking with what browsers do, and ignoring a ""should"" sentence in a 15-yo RFC.
",joliss,2012-07-09 15:20:25
708,2012-05-13 10:52:02,"Actually, RFC 2616 should put your mind at ease :)

RFC 2068, 10.3:

<S_CODE_TOKEN>

but RFC 2616, 10.3:

<S_CODE_TOKEN>
",joliss,2012-07-09 15:20:25
708,2012-05-25 23:01:55,"I find this to be preferable #719
",lanej,2012-07-09 15:20:25
708,2012-05-25 23:35:30,"@lanej: Why would it need to be configurable? Surely there can't be a legitimate use case for more than 20 redirects in a row, especially since no browser even supports that.
",jnicklas,2012-07-09 15:20:25
708,2012-05-26 00:15:21,"This allows the casual user to abide by the default limit if 5, but special case tests like mine can raise the limit to exactly what is needed to assert success. +1

On May 25, 2012, at 7:35 PM, Jonas Nicklasreply@reply.github.com wrote:

> @lanej: Why would it need to be configurable? Surely there can't possibly be a legitimate use case for more than 20 redirects in a row, especially since no browser even supports that.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/708#issuecomment-5942634
",jjulian,2012-07-09 15:20:25
708,2012-05-26 03:10:25,"Working with zendesk, I have a legimate case where 6 302 requests are issued in sequence and I haven't found a browser yet that doesn't support it.

The specs were not meant say that 21 sequential redirects was a legitimate case @jnicklas, just > 5.
",lanej,2012-07-09 15:20:25
708,2012-07-09 15:20:25,"Closed in favour of #719.
",jnicklas,2012-07-09 15:20:25
707,2012-05-10 17:55:53,"I'm using Capybara + Cucumber to test [this project](https://github.com/meurio/seurio) and I got the Capybara::InfiniteRedirectError. But it's not a redirect loop actually.

I have a specific scenario which fires 6 redirects in sequence.

Feel free to pull it.

Cheers!
",nicolasiensen,2012-05-10 18:02:06
707,2012-05-10 18:01:59,"Ah, sorry, didn't see this PR until I pushed my own. #708 does the same but also updates the specs, so I'll close this one.
",joliss,2012-05-10 18:02:06
706,2012-05-10 17:23:32,"Hi!

I'm using Capybara + Cucumber to test [this project](https://github.com/meurio/seurio).

I got the Capybara::InfiniteRedirectError in one of my scenarios, but it's not a redirect loop actually.

I have a specific scenario in my app that fires 6 redirects in sequence.

Then I made this change in Capybara, and I was wondering if you want to pull it ;)

Cheers!
",nicolasiensen,2012-05-10 17:46:25
706,2012-05-10 17:31:19,"How about we just raise it to 20 instead of adding another option?

My Firefox has network.http.redirection-limit set to 20, so this might be a reasonable number.
",joliss,2012-05-10 17:46:25
706,2012-05-10 17:33:25,"Sounds good!
",nicolasiensen,2012-05-10 17:46:25
706,2012-05-10 17:35:50,"+1
",luizfonseca,2012-05-10 17:46:25
706,2012-05-10 18:00:14,"Cool. Jonas, pull #708 if you like it, please :)
",joliss,2012-05-10 17:46:25
705,2012-05-07 22:24:06,"I didn't know who to file this issue with, but it's an annoying one if you switch back and forth between the :webkit and :selenium webdrivers.

Accessing the ['disabled'] attribute of an element like so:

page.find('#some-element')['disabled']

returns true or false when using the :webkit driver

but returns ""true"" or ""false"" when using the :selenium driver.

They both seem to be returning the correct answer, just in different forms.  Who is wrong here?
",weexpectedTHIS,2012-07-12 08:42:03
705,2012-05-13 12:26:00,"According to the HTML5 Standard, I would say the correct way to do it should be to return true of false and certainly not ""true"" or ""false"" as these attributes cannot contain those values. (see http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#boolean-attributes)
",thoferon,2012-07-12 08:42:03
705,2012-05-13 13:24:49,"@thoferon Right. @jarib, here's a gist that demonstrates that selenium-webdriver returns ""true"" and ""false"" as strings for the 'disabled' attribute: https://gist.github.com/2688447 That seems odd, at least. Would you mind taking a look?

I'm closing this issue, since it's not a Capybara issue, but let's continue discussion here unless/until we have a bug report in the upstream tracker.
",joliss,2012-07-12 08:42:03
705,2012-05-13 15:10:28,"Actually, this is working as intended. Element#attribute is always either a String or nil in Webdriver, as explained in the [docs](http://selenium.googlecode.com/svn/trunk/docs/api/rb/Selenium/WebDriver/Element.html#attribute-instance_method).

Looking at the code for capybara-webkit, the conversion to a Ruby boolean appears to be done [in the driver code](https://github.com/thoughtbot/capybara-webkit/blob/master/lib/capybara/driver/webkit/node.rb#L12), with a fairly incomplete list of attribute names considered boolean. It would be pretty easy to add something like this to Capybara's Selenium driver, if that's the behaviour you want.
",jarib,2012-07-12 08:42:03
705,2012-05-13 16:04:48,"Ah, very well. Hm, I wonder what the RackTest driver does.

In any case, perhaps it would be sensible to tie down the behavior with a test, to ensure that all the drivers are consistent.

I'll reopen and leave this up to @jnicklas.
",joliss,2012-07-12 08:42:03
705,2012-05-13 17:46:56,"We've never really spec:ed the behaviour of how the drivers should return attributes. And personally I'm cool with not nailing this down too much. Leaving it up to the drivers to return something sensible. But I don't really have a strong opinion on this either way. If any of you guys want to change how it works now, feel free.
",jnicklas,2012-07-12 08:42:03
705,2012-07-12 08:42:03,"I'm closing this issue. It feels like this is out of the scope of Capybara.
",jnicklas,2012-07-12 08:42:03
704,2012-05-03 15:15:38,"The current readme implies this, but when skimming the document it's easy to miss the significance of the code sample.
",nruth,2012-05-03 16:31:01
703,2012-04-29 05:49:28,"I'm testing a Rails app with Capybara and RSpec and running into a problem trying to use a JavaScript driver in request specs. The spec in question is on line 34 in [this file](https://github.com/jimmycuadra/jimmycuadra.com/blob/a6747770c7c5ae414211c7dcf6ccfa4a21a4e3c0/spec/requests/comments_spec.rb). When running the spec with the Rack::Test driver, the `visit` call works as expected. When I use a JS driver (either the built in Selenium driver or Poltergeist), I get this error:

<S_CODE_TOKEN>

When using the Selenium driver, Firefox opens and displays a ""the connection was reset"" error page.

I'm using:
- Rails 3.2.3
- RSpec 2.9.0
- Capybara 1.1.2
- Poltergeist 0.6.0 (PhantomJS 1.5.0)

Please let me know what other information I can provide in helping to figure this out. Thanks!
",jimmycuadra,2012-07-10 13:26:59
703,2012-05-02 03:28:10,"Ran into the same issue using rspec. For better error reporting, try setting show_exceptions = true in config/environments/test.rb:

`config.action_dispatch.show_exceptions = true`

In my case, I had ActiveRecord::RecordNotFound, specifically the test data not in sync between the test suite and selenium. They run in different threads so they don't have access to the same db transaction (if you have config.use_transactional_fixtures = true). Can set to false, but more thorough solutions/info here:

http://blog.plataformatec.com.br/2011/12/three-tips-to-improve-the-performance-of-your-test-suite/ (3rd section)
http://stream.nicholasrutherford.com/post/7263338202/capybara-rspec-selenium-db-transaction-isolation-gotcha
",yomike05,2012-07-10 13:26:59
703,2012-05-02 07:08:18,"@yomike05 Awesome, that was exactly what was happening to me! I'm using @josevalim's trick and that fixed it. Thanks a bunch! I'm gonna leave this ticket open for the moment cause I'd like to see mention of this issue in the documentation. I imagine it's quite common given the simplicity of the test that surfaced it for me.
",jimmycuadra,2012-07-10 13:26:59
702,2012-04-26 04:21:59,"Using rspec, capybara, devise and chromedriver I had an issue where my second spec would fail to send authentication details in the session if the previous spec had an ajax request that hadn't finished processing.

Unfortunately I don't have a simple test case to reproduce - tho I would be happy to if there is a well known example Rails app I could modify to reproduce the issue and attach.

In any case the code below hopefully explains what I was seeing:

<S_CODE_TOKEN>

My second spec would fail (mostly - it's is timing dependant) because the server did not think I was authenticated - hence I was redirected to the login page and could not see a table with class 'tasks'.

**Workaround**

It took the better part of a day to find that if I put `sleep 5` at the end of my first spec then the second spec would work.

Because I'm using jQuery to do the ajax, I have come up with the following workaround:

<S_CODE_TOKEN>
",asdavey,2012-07-12 08:46:16
702,2012-04-26 11:27:41,"You say you use chromedriver. Does it happen with Firefox?

I wonder if this might a problem with the Selenium upstream. Can you reproduce it with this template? https://gist.github.com/1024843 Then you'd have something you can file in the Selenium tracker.
",joliss,2012-07-12 08:46:16
702,2012-04-26 11:27:46,"@jarib, OP has an issue with sessions not properly resetting when there's pending Ajax requests, perhaps related to chromedriver. Ring a bell by any chance?
",joliss,2012-07-12 08:46:16
702,2012-04-26 12:00:24,"No bell-ringing unfortunately. A reproduction using the WebDriver API as you suggest would be helpful.
",jarib,2012-07-12 08:46:16
702,2012-04-26 21:48:19,"I will try and reproduce using that template, and with firefox.
",asdavey,2012-07-12 08:46:16
702,2012-07-12 08:46:16,"@asdavey: seems like this is either an upstream issue, or more likely an issue with your code. If you figure this out and can relate it back to Capybara, I will reopen this issue.
",jnicklas,2012-07-12 08:46:16
701,2012-04-25 14:43:32,"These steps:

<S_CODE_TOKEN>

Resume of output:

<S_CODE_TOKEN>

Note: it works on selenium-webdriver (2.13.0) but is not working on (2.21.2).

What you need to trace that?

<S_CODE_TOKEN>
",sobrinho,2012-04-25 15:23:11
701,2012-04-25 15:03:55,"I have updated firefox to version 12 and nothing changes.
",sobrinho,2012-04-25 15:23:11
701,2012-04-25 15:23:11,"Got!

I used that snippet to my menu works on selenium:

<S_CODE_TOKEN>

But seems like mouseout event is triggered on click_link now.

Thanks :)
",sobrinho,2012-04-25 15:23:11
700,2012-04-25 09:49:32,"Currently when using within_frame the return value of the given block gets swallowed up, so you can't do stuff like

<S_CODE_TOKEN>

This fixes it so that the return value bubbles up.
",alishutc,2012-07-09 15:12:27
699,2012-04-23 14:25:23,"The ""Transactions and database setup"" section of the README gives a monkey-patch for sharing a connection between cucumber and web server threads. The ""use with care"" warning is insufficient; unguarded use of a single connection by two threads is nearly always going to represent a race condition. I think that you should remove the ""It is also possible to force your ORM to use the same transaction for all threads."" advice and monkey-patch.

Maybe there is some other way to work capybara with transactions. For example, write cucumber acceptance tests in a style where the implementation of steps is entirely through the UI and steps never directly touch the database. Or somehow arrange to only run the server within the main thread, while queries (Node#find, for example) are blocking.
",joshuanapoli,2012-04-23 16:01:09
699,2012-04-23 14:42:35,"I've used this hack in a dozen projects, of various sizes, with vastly different test suites. I have _never_, in _any_ of them encountered any race condition or other strange behaviour due to it. It _does_ work in a lot of cases. It's also extremely useful, since it can easily double the execution speed of your test suite and prevent strange data from entering your test DB. It's not as bad a solution as you make it out to be.
",jnicklas,2012-04-23 16:01:09
699,2012-04-23 16:01:09,"Ok - I'm glad that you had good luck and good performance with the patch! Our experience was intermittent test failure due to overlapping requests on the connection. I'll close this issue now, based on your positive experiences.
",joshuanapoli,2012-04-23 16:01:09
699,2013-01-22 22:09:57,"For those that end up here via google like I did, I want to note that we ran into issues with this as well. It seems also that @jnicklas [considers this dangerous](https://groups.google.com/forum/#!msg/ruby-capybara/sgBkBKVXf_w/N3t0cS2ODl8J) now too. It worked for us for a long time. It started being less stable as we started using the parallel_tests gem.
",aaronjensen,2012-04-23 16:01:09
699,2013-01-23 07:06:07,"Well, I've always considered it dangerous, which is why this is in the README: ""This may have thread safety implications and could cause strange failures, so use caution with this approach."". That being said, it's still very useful to know this hack, dangerous or not, because it really can be vastly superior to truncation in some cases.
",jnicklas,2012-04-23 16:01:09
698,2012-04-22 19:52:04,"With this new `Capybara. insert_port_into_portless_url` option, we won't have to worry about the port when specifying a `Capybara.app_host` or when `visit`ing a full URL.

Related to #694 here and [#87 on thoughtbot/capybara-webkit](https://github.com/thoughtbot/capybara-webkit/issues/87)
",DouweM,2012-07-04 15:42:27
698,2012-04-22 21:20:14,"I like the idea. Though can we come up with a better name for the config option?
",jnicklas,2012-07-04 15:42:27
698,2012-04-22 21:20:43,"Also just noticed this doesn't have tests. This definitely needs to be tested.
",jnicklas,2012-07-04 15:42:27
698,2012-04-22 21:25:41,"Where would you suggest putting the tests for this? I looked around but couldn't find a proper place, so I figured that because this is a very small change code-wise, tests wouldn't really be necessary. 

As far as the name is concerned, I wasn't able to think of something obviously better but still clear as to the function, but if anyone else can come up with something, be my guest!
",DouweM,2012-07-04 15:42:27
698,2012-04-22 21:29:33,"There are a lot of tests for app_host, these should probably go somewhere close to that. As I said, this _definitely_ needs tests, no question about it. I generally do not accept _any_ pull requests without tests, and this is major functionality.
",jnicklas,2012-07-04 15:42:27
698,2012-04-22 21:30:18,"Haha, no worries, I'll add them tomorrow!
",DouweM,2012-07-04 15:42:27
698,2012-04-23 20:11:42,"And there we go.
",DouweM,2012-07-04 15:42:27
698,2012-04-26 10:30:33,"we do double work?
https://github.com/jnicklas/capybara/pull/694

sort of funny .. 

to get the custom port somehow in the test itself would be nice as well.
",aka47,2012-07-04 15:42:27
698,2012-04-26 13:08:13,"Yup, I guess our pull requests do pretty much the same thing. I misunderstood your solution at first, which I why I wrote my own. I think my solution is a bit nicer and more robust as I'm using `URI.parse` instead of regular expression matching.

I don't think using the custom port in the test is necessary, as we're already checking if the port inserted into the absolute URL is the same port as the one that's used for relative URLs, which is exactly how the changed method should behave.
",DouweM,2012-07-04 15:42:27
698,2012-04-26 19:19:33,"as long as it solves the probem i am happy :)
",aka47,2012-07-04 15:42:27
698,2012-04-26 19:20:32,"That it does! Now we only need to get it pulled in... @jnicklas, you still following this?
",DouweM,2012-07-04 15:42:27
698,2012-05-16 08:44:57,"+1
",cs,2012-07-04 15:42:27
698,2012-06-11 00:56:10,"@jnicklas, can you take a look at this? I think it should be merged. 
",andmej,2012-07-04 15:42:27
698,2012-06-13 22:07:43,"+1
",Domo,2012-07-04 15:42:27
698,2012-06-17 12:53:56,"+1
",ozgor,2012-07-04 15:42:27
698,2012-07-02 14:10:38,"+1

Is there a way to customize protocol and port? 

I've a ssl-only app and a local nginx that proxies https://localhost:11443/ to http://localhost:11080/ where capybara starts the app/server at:  

<S_CODE_TOKEN>

So while capybara's own port is in my case 11080, the driver should only access :11443 as the schema requires https which is only available using the external reverse proxy.
",rmoriz,2012-07-04 15:42:27
698,2012-07-03 06:14:22,"@jnicklas @DouweM  In fact, I think the `insert_port_into_portless_url` option could be true by default. Would there be any problems if we did that? I think adding the port doesn't hurt, even if it's not needed.
",andmej,2012-07-04 15:42:27
698,2012-07-03 06:18:15,"I really, really don't think it would be good to enable this by default.
",jnicklas,2012-07-04 15:42:27
698,2012-07-03 08:41:11,"@jnicklas Why not? When we call `visit`, we always mean to navigate to a page served through Capybara (right?), so if for whatever reason we don't specify the correct port (when providing a URL with a subdomain, for example), wouldn't automatically inserting the port be the right thing to do? This way people can forget that Capybara serves the app on a randomly generated port, which really isn't that interesting to them as it's really just an implementation detail to Capybara. For people who don't want this behavior, the option can easily be turned off.
",DouweM,2012-07-04 15:42:27
698,2012-07-03 09:03:15,"> When we call `visit`, we always mean to navigate to a page served through Capybara (right?)

No, we don't. Many people use Capybara to test external applications, or to test a mixture of external and internal applications. This would be very unexpected behaviour which would even further confuse people trying to use Capybara.
",jnicklas,2012-07-04 15:42:27
698,2012-07-03 09:44:02,"@jnicklas Ah, all right. I wasn't aware Capybara was used like that, but I guess it makes sense. In that case, I definitely agree this option should not be on by default. I would still really like it to be an option, though. 
",DouweM,2012-07-04 15:42:27
698,2012-07-03 17:57:28,"I see. In that case I also agree that the option shouldn't be on by default.

Can we still merge this? I'm currently using my own fork and I'd like to see this change upstream.

@jnicklas what can we do to help with the merge? Perhaps you want more tests? Just ask :)
",andmej,2012-07-04 15:42:27
698,2012-07-04 00:24:26,"If it's because the `insert_port_into_portless_url` option name is ugly, then what about one of these variations?
- `force_port`
- `always_include_port`
- `always_use_port`
- `force_port_insertion`
- `insert_port_if_missing`
- `explicit_port`
- `insert_port_into_url_if_its_missing_so_we_can_test_subdomains_with_capybara_webkit`

I just really want to see this merged so I can't forget about my fork :)
",andmej,2012-07-04 15:42:27
698,2012-07-04 07:54:49,"I like `always_use_port`. In light of the overwhelming support here, I'd be happy to merge this with that as the name.
",jnicklas,2012-07-04 15:42:27
698,2012-07-04 09:37:23,"I think `always_use_port` is ambiguous. It's not at all clear _where_ this port will be used. Surely, we're always using a port when running a server through Capybara? For this reason I prefer `always_include_port`, as it makes it clear the port will be included somewhere, which can really only be in the visited URLs. Do you think you could live with this? If you much prefer the `use` version, I will go with that, of course.
",DouweM,2012-07-04 15:42:27
698,2012-07-04 10:35:00,"`always_include_port` is fine by me.
",jnicklas,2012-07-04 15:42:27
698,2012-07-04 14:55:43,"@jnicklas I think we're ready now!
",DouweM,2012-07-04 15:42:27
698,2012-07-04 15:42:34,"It's done.
",jnicklas,2012-07-04 15:42:27
698,2012-07-11 05:18:31,"Thanks @jnicklas!
",andmej,2012-07-04 15:42:27
698,2013-03-23 06:50:33,"Ah, I've been searching all over the internet for this option. Glad I finally found it!
",andrewhavens,2012-07-04 15:42:27
697,2012-04-22 04:43:43,"I'm trying to use the following line:

<S_CODE_TOKEN>

I'm trying to test `OPTIONS` requests. Stupid [access control](https://developer.mozilla.org/en/http_access_control) requests use the `OPTIONS` method to verify cross domain stuff. I'd like to test some of this logic, but it isn't supported by `Capybara::RackTest::Browser`.

I think the issue is that there is a method named `options` on `Capybara::RackTest::Browser` and it's calling that method instead of making a request with the `OPTIONS` method.

I realize this is probably an edge case. I hadn't even heard of the `OPTIONS` method until a few days ago. A fix would be greatly appreciated though!
",soffes,2012-04-22 10:17:55
697,2012-04-22 10:17:55,"""options"" actually should be supported as of Rack-Test 0.6.0 -- looking at the code I'd even expect the above ""process"" call to work. That said, I think you shouldn't be using Capybara for this:
- page.driver.browser is not part of the public API, so it may break at any time.
- [Capybara is not the right tool for testing APIs](http://elabs.se/blog/34-capybara-and-testing-apis)

Cheers!
",joliss,2012-04-22 10:17:55
697,2012-04-22 16:09:34,"Oh, awesome! Thanks!
",soffes,2012-04-22 10:17:55
696,2012-04-19 22:52:46,"I'm using JQuery UI Tabs, and the recommended approach to have the tab load a new page, and have it be bookmarkable, is to set a tab.  That way I can have a URL like ""doctors/1#patients_tab"" to load the the patients tab content in the doctor's dashboard.  

This works for the first visit call from Capybara, but it doesn't work to change the tab.  If one of my steps has ""visit doctor_path(1)"", and another step has ""visit doctor_path(1, :anchor => 'patients_tab')"", the second step only works if the first step hasn't been run.  Perhaps this is an optimization where the driver assumes that if the anchor is the only thing that has changed, the page can stay?
",lisad,2012-04-20 18:55:03
696,2012-04-20 07:13:14,"Interesting. Just as a sanity check: If you open /doctors/1 in a real browser and then add the hash (#patients_tab) and hit enter, it does work, right?

Can you add some sleeps into your test code and tell us what it looks like in the Selenium browser? Does Selenium correctly add the hash in the address bar? But then it doesn't open the tab like it should? Or something else?
",joliss,2012-04-20 18:55:03
696,2012-04-20 18:42:20,"Very good questions.

Does this actually differ from browser behavior?  If I type the anchor name onto the URL in the address bar and hit return, the page doesn't reload, so the javascript to load the JQuery tab is not getting called, and I stay on the wrong tab.
- In Chrome, after this happens, I can select the URL and hit return -- this seems to trigger Chrome to reload the page and get the new tab.  This behavior is probably what led me to believe that the selenium behavior was a bug, although now I can see how the selenium behavior is actually consistent with regular browser behavior.
- In Firefox, after this happens, I can hit reload in the address bar to load the correct tab.  

Is Selenium actually putting the hash into the address bar?  Yes.  Adding a sleep does not fix the problem, as you probably expected.  What it shows is that Selenium does add the anchor to the URL in the address bar, and then stay in the same tab rather than switch to the new tab.  

So I guess this might be a candidate for documentation, depending on what the user wants to test.  
- If the developer wants to test ""Does my URL with the anchor successfully load the tab"", then the test needs to load the URL with the anchor without loading the page first with another anchor.  
- If the developer wants to test ""Can the user click from one tab to another"", then the test needs to do something like 'click_link(""Patients"")'  rather than 'visit doctor_path(:anchor => ""Patients"")'.  The ""click_link"" works because JQuery UI has the tabs actually as links in the HTML.

One last note, and this may actually be a bug somewhere even if everything else is correct, I saw a difference between how javascript in my site works and how it worked under selenium.  This elsewhere in the site, eg. if the user clicks on a patient link, the script first loads the correct tab then selects the correct patient to show in that tab.  That script looks like  
    $(""#p_doctor_tabs"").tabs('select', 2);
    $.get(""/patients/"" + id, function(data) {
        $('#the_patient').html(data);
    });

But putting this in the test: 
    page.execute_script(""$(""#p_doctor_tabs"").tabs('select', 2);"")

That does not switch tabs.
",lisad,2012-04-20 18:55:03
696,2012-04-20 18:55:03,"Very interesting.

I'll go ahead and close this issue, since the behavior is likely either correct, or something that could only be changed in the Selenium upstream.

I wonder if we should start documenting edge cases like this. Perhaps it's time for a Capybara FAQ where we can collect pointers to discussions like this one. @jnicklas, what you think?

> page.execute_script(""$(""#p_doctor_tabs"").tabs('select', 2);"")
> That does not switch tabs.

This isn't valid Ruby code because of the quotes. Assuming you have single quotes, if it still doesn't work, there's perhaps something going wrong on the JS side. You could debug this by poking into the browser, perhaps with capybara-firebug. The error reporting with execute_script/evaluate_script is bad to non-existent, unfortunately. I'd recommend using execute_script very sparingly, if at all.
",joliss,2012-04-20 18:55:03
696,2012-04-21 00:24:06,"Jo is right, the bahaviour as you described it is indeed correct. If you've visited a page and only change the anchor, the page will not be reloaded.
",jnicklas,2012-04-20 18:55:03
695,2012-04-19 18:49:32,"I think it would be nice to have a little helper that see's if the page has an image. Or even better yet, I would like to see if a selector has a valid image attached to it. I know you can do this with xpaths and selectors but I think it would be nice to have something specific to the different content types since thats usually how we think about them, not as xpaths but actual content. 
",fourcolors,2012-07-10 13:15:42
695,2012-07-10 07:52:20,"While this would be nice, it won't be a part of the core Capybara gem. Though I encourage anyone who is interested to create a gem for this.
",jnicklas,2012-07-10 13:15:42
695,2013-07-01 09:34:47,"But it really would be nice to get have_image matcher in capybara (aka have_link, have_field).
",molfar,2012-07-10 13:15:42
694,2012-04-18 13:45:54,"we want to spec subdomains with capybara-webkit. Capybara-webkit always needs to add its own port into the urls of the app. 
Right now this only works with relative urls, but not with absolute urls including the subdomain. This patch fixes the problem.

The original discussion is here: https://github.com/thoughtbot/capybara-webkit/issues/87
",aka47,2012-07-09 15:37:43
694,2012-04-20 11:34:32,"+1
",glebm,2012-07-09 15:37:43
694,2012-04-22 19:02:40,"+1
",DouweM,2012-07-09 15:37:43
694,2012-04-22 19:11:56,"But why don't we just do something like this:

<S_CODE_TOKEN>

That way, the port would automatically be inserted into the url if one was not already specified manually, and there's no need for adding properties and overriding methods.
",DouweM,2012-07-09 15:37:43
694,2012-06-10 19:40:26,"+1
",andmej,2012-07-09 15:37:43
694,2012-07-09 15:34:29,"Closed in favour of #698.
",jnicklas,2012-07-09 15:37:43
693,2012-04-16 16:34:34,"If possible, can you expose the HTTP response code, so that the test could verify the validity of the request?

i.e. page.response.should be 200

Would be nice.

This would prevent me from looking up if certain elements exist in the DOM to tell if the request was a success.  Also, when building an API, I want to verify I'm getting codes like 201 for resource created among other tests.

Cheers

Robbie
",robb1e,2012-04-16 17:22:51
693,2012-04-16 17:22:51,"Oh dear!
1. That method exists [already](http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Session#status_code-instance_method)
2. It's way better to check for the existence of a DOM element than for a status code. What do you users care about status codes?
3. [Don't use Capybara to tests APIs](http://elabs.se/blog/34-capybara-and-testing-apis).
",jnicklas,2012-04-16 17:22:51
693,2012-04-16 17:59:52,"1. Thanks, unfortunately I'm using Cucumber, so no support in the driver. Never mind.
2. I wanted to check for status codes for explicit error messages, rather than being told it couldn't find say #header, I wanted a message saying the page failed to load successfully. 
3. Fair enough, I'm not using it for testing APIs, just thought that if response code was returned it might be useful for that, but as your blog pointed out, that's not the use case.

Cheers

Robbie
",robb1e,2012-04-16 17:22:51
692,2012-04-15 18:57:02,,jonleighton,2012-04-15 20:52:26
691,2012-04-14 09:41:50,"I firstly reported it on [capybara-webkit](https://github.com/thoughtbot/capybara-webkit/issues/319), but it seems like this is more of a generic problem since it also fails with poltergeist.

Conceptually it works like that for me:

<S_CODE_TOKEN>

div.something is being removed with ajax, so I'd like to know when it is not there anymore or at least not invisible.  
what the problem is:  
1. Capybara finds the div with the class field-settings-message  
2. Javascript removes this element from the DOM  
3. Capybara checks the visibility of what it found in step 1 and the underlying driver decides to die with an exception (Capybara::Driver::Webkit::NodeNotAttachedError for webkit, Capybara::Poltergeist::ObsoleteNode for poltergeist)

I assume that this isn't the intended behavior within an 'atomic' call?
",rb2k,2012-04-14 15:43:41
691,2012-04-14 11:15:47,"rb2k: You don't need the call to wait_until. Capybara does that for you. Did you switch off automatic_reload by any chance?
",jnicklas,2012-04-14 15:43:41
691,2012-04-14 11:17:09,"Also: try it with Selenium. The Selenium driver is kind of the reference implementation for other drivers, and since it is the only one bundled with Capybara, it's of most concern on this issue tracker.
",jnicklas,2012-04-14 15:43:41
691,2012-04-14 11:29:05,"I didn't touch automatic reload.
I think I have to use the wait_until in this case. When I do the initial has_no_css? call, the element is actually on the page and it is visible. I would assume that in this case, Capybara would just return ""false"".  
The element disappears probably 3-4 seconds after the call, hence I have to wait until it happens. Or is that something that should be caught by an implicit wait?

I thought this problem was more of a generic race condition between discovering the element, the element disappearing and checking the element's visibility.
",rb2k,2012-04-14 15:43:41
691,2012-04-14 11:43:42,"No, provided you set Capybara.default_wait_time high enough, this should just work, even though the element is still on the page. Capybara will wait for it to dissappear!
",jnicklas,2012-04-14 15:43:41
691,2012-04-14 11:47:33,"Oh cool!
So wait_until is mostly there for more complex combinations of events or to set a custom wait time?
",rb2k,2012-04-14 15:43:41
691,2012-04-14 12:22:41,"`wait_until` isn't really (intended to be) part of the public API. You should normally get by fine by waiting for an element to appear at the end of whatever Ajax/asynchronous call (using `page.has_css?`).
",joliss,2012-04-14 15:43:41
691,2012-04-14 12:24:20,"@rb2k, I assume this issue can be closed?
",joliss,2012-04-14 15:43:41
691,2012-04-14 15:43:41,"Yeah, the exceptions with poltergeist and capybara-webkit still seem a bit strange, but I guess they're driver specific bugs then :)
",rb2k,2012-04-14 15:43:41
690,2012-04-12 18:30:21,"I have some tests with Capybara that check if after clicking a link, the application shows the correct destination page. The tests simply click a link (a simple anchor tag, no javascript) and check current_url after that. But sometimes these tests fail, saying the current url is actually the previous page url.

If I add a ""sleep 1"" before checking current_url, all the tests work. Seems like Capybara is checking current_url before the browser changes the url to the new page, but I can't say if this is related with Capybara or selenium. Is there a solution for this?
",ggarnier,2012-07-09 15:50:48
690,2012-06-12 23:02:30,"I also have this issue after upgrading selenium-webdriver to 2.22.2 from 2.20.0, which was required for compatibility with recent versions of Firefox. Recent entries in the [changelog](http://code.google.com/p/selenium/source/browse/trunk/rb/CHANGES) for that library mention some changes to detecting page loads and that the code is 'unstable'.

I'm using this workaround for now (the project is using minitest/spec):

<S_CODE_TOKEN>

As the problem appears to be in a different library, I'm not sure this is a problem for Capybara to solve.
",jim,2012-07-09 15:50:48
690,2012-06-13 00:30:26,"Let's cc @jarib then. Jari, does this ring a bell at all?
",joliss,2012-07-09 15:50:48
690,2012-06-13 00:35:33,"The experimental load strategy mentioned in the change log is not on by default, so that's not the issue.

I believe this is caused by [this commit](https://code.google.com/p/selenium/source/detail?r=16398). @illicitonion: What's our intended behaviour here?
",jarib,2012-07-09 15:50:48
690,2012-06-13 00:37:52,"Click is asynchronous, if you're expecting something to be the case after a click, you should wait for it.
",illicitonion,2012-07-09 15:50:48
690,2012-06-15 15:18:54,"as far as I can see  there is currently no capybara function to verify whether the browser is done loading (I screened the code base but couldn't find it ; selenium seems to have a wait_for_page_to_load function but this function does not seem to be usable from within capybara ). 

One can check for a specific element to be present on the page after the click action, however this is not always possible (for example saving a form which returns to the same page and only shows a message in case of a validation issue).

Adding a hardcoded sleep also seems incorrect as the time to sleep may vary and depends on the server and network

Making the click action synchronous will always work.

@illicitonion  : do you know another way of achieving the wait action?
",pvmeerbe,2012-07-09 15:50:48
690,2012-06-18 08:01:06,"The quickfix by my collegue for the time being:

<S_CODE_TOKEN>
",niklas,2012-07-09 15:50:48
690,2012-06-18 08:13:06,"The call 'Capybara.current_url'  is not waiting for page completion, so as far as I understand the solution above will only work for click actions where the actual page and expected page differ. However in my case they are the same (saving a form with post action which returns to the same page and only shows a message in case of a validation issue). 
",pvmeerbe,2012-07-09 15:50:48
690,2012-06-18 17:31:33,"@pvmeerbe while understanding your concern - I want this fixed, too - you could test for a positive message (""successfully touched the pidgeon"") using the wait_until. The `page#has_css?` and `has_content?` already does this internally.

I consider it good practice to show the user her action succeeded.
",niklas,2012-07-09 15:50:48
690,2012-06-19 14:55:16,"@niklas I agree with you on the proposed good practice. unfortunately I have no impact on the code base and cannot add such functionality :(

I worked my way through the capybara code and found the 'resynchronize' function for the Capybara::Selenium::Driver class. This is exactly what I need. It seems to be designed for ajax, which is not the case for me, however it does what needs to be done to wait for page completion (i.e check the readyState variable). Aside from the 'click' call the following calls will also be waiting for page completion : set, select_option, unselect_option, drag_to

The README.rdoc in the code base mentions the following on the resynchronisation option:

""...Capybara can block and wait for Ajax requests to finish after you've interacted
with the page. To enable this behaviour, set the <tt>:resynchronize</tt> driver
option to <tt>true</tt>. This should normally not be necessary, since
Capybara's automatic reloading should take care of any asynchronicity problems.
See the section on Asynchronous JavaScript for details.....""

As far as I understand the  ""Capybara's automatic reloading ""  currently does not handle the 'wait for page completion' issue, but enabling the resynchronisation option seems to easily add it. Is there any reason why the resynchronize option for a new Capybara::Selenium::Driver is deactivated by default? 
",pvmeerbe,2012-07-09 15:50:48
690,2012-06-20 13:38:13,"apparently enabling the resynchronize causes the click action to  fail on elements which triggers a modal dialog (for example delete confirmation popup). Selenium 2.18.0 introduced an exception for alerts during operations, which is triggered by resynchronise polling javascript code : 

""Raise UnhandledAlertError if an alert is present during an operation. The unhandled alert is also dismissed to mitigate repeat exceptions.""

I solved my problem by :
- making my click action waiting for page completion by default
- make it non blocking by passing the option :wait => false

This seems more logic since in my experience one will almost always wait for page completion. Only some exceptional cases will fail on page completion:
- opening a modal dialog 
- browser window is closed during operation
- ...

I achieved this by doing the following :

<S_CODE_TOKEN>

custom_click(my_element)
--> waits for page completion   (max 300 seconds)

custom_click(my_element,{:wait => false)
--> does not wait for page completion
 or even
custom_click(my_element, {:resynchronization_timeout => 500})
--> waits for page completion   (max 400 seconds)

Perhaps something similar can be added to capybara?
",pvmeerbe,2012-07-09 15:50:48
690,2012-07-09 15:50:48,"If this is related to `:resynchronize` it isn't relevant, since that has been yanked.
",jnicklas,2012-07-09 15:50:48
689,2012-04-11 20:00:56,"Does people put the setup and teardown within RSpec.configure when using Capybara?  I have found a scattering of documentation but nothing concrete because the below has been pulled from several different sources.  At this time,  I have the following:

<S_CODE_TOKEN>
",conradwt,2012-04-11 21:28:33
689,2012-04-11 21:28:33,"Please ask this question on the mailing list.
",jnicklas,2012-04-11 21:28:33
688,2012-04-11 13:41:00,"I wish I'd looked into this years ago!
",tpope,2012-04-11 14:00:32
688,2012-04-11 14:00:36,"Thanks!
",joliss,2012-04-11 14:00:32
687,2012-04-09 08:27:54,"Rails recently (since v3.2.3.rc1) introduced a newline after opening <textarea> tag (https://github.com/rails/rails/pull/4000). They say the XHTML spec says to ignore this newline and all modern browsers do.

This change makes capybara rack-test driver to do the same (fixes #677)

However I have two considerations/questions:

1) `with_html.erb` file looks a bit uglier now. The reason is `textarea` tag is pretty much like `pre` where every whitespace is significant, so if you add additional newlines and indentation they are all included in the text.

2) Probably I should have patched not `Capybara::Node::Simple#value` but `Capybara::RackTest::Node#value`?
",khustochka,2012-04-09 10:19:26
687,2012-04-09 09:53:10,"The idea of the fix actually duplicates the fix to rails' `assert_select`: https://github.com/rails/rails/commit/1141f71601ff61fb299c86d814c07209f1430024
",khustochka,2012-04-09 10:19:26
687,2012-05-18 09:15:05,"@jnicklas any outlook when this will be released?
",exviva,2012-04-09 10:19:26
686,2012-04-06 14:35:53,"Hello everyone,

I'm currently using Capybara with the Selenium driver to run and analyze JSUnit tests using a [JSUnit test runner](http://jsunit.net/runner/testRunner.html?testpage=/runner/tests/jsUnitTestSuite.html).

The problem with the testrunner: It contains frames. Lots of frames. Nested within each other. It's like an inception nightmare with frames:

![JSUnit runner HTML](https://img.skitch.com/20120406-d72ir1yy7pn1fwd9pa7jxar1di.jpg)

While extracting the results of a test run, I've tried something like this:

<S_CODE_TOKEN>

Unfortunately, within_frame() works only if I select only one sub-frame within a frame. If call it more than once, the second frame isn't found.

I've managed to work around that problem by creating helper methods, but I wasn't sure if within_frame() is actually intended to work that way or if it's a bug. I certainly expected it to work as described above.
## 

Cheers,
pfleidi
",pfleidi,2013-02-24 17:30:20
686,2012-04-14 09:36:36,"I've seen that behavior before _subscribing_
",rb2k,2013-02-24 17:30:20
686,2012-09-18 22:18:29,"I'm experiencing some strange behaviour with within_frame now when using wysihtml5.  What did you use to get around your problem? 

thx!
",kbaum,2013-02-24 17:30:20
686,2012-12-12 16:37:54,"@kbaum We just added a wrapper method to execute code in the context of every sub-frame one by one.

You could just do:

<S_CODE_TOKEN>

But as described in my first post, I think that shouldn't be necessary.
",pfleidi,2013-02-24 17:30:20
686,2013-02-24 17:30:42,"I honestly didn't think this would ever get fixed. Thanks @twalpole!
",jnicklas,2013-02-24 17:30:20
686,2013-02-27 09:53:42,"I have case:
frameset
-----frame
-----frameset
----------frame id = menu
----------frame id = name

page.driver.browser.switch_to.frame 'main'

Error Info:
Selenium::WebDriver::Error::NoSuchFrameError: The frame could not be found

SOS

has anyone can help me ? thx very much

D:
",fy-kenny,2013-02-24 17:30:20
686,2013-02-27 10:07:27,"@fy-kenny please review what's previously been said in this issue, and take a look at @twalpole. If you're still having problems, please write something more coherent. I can't make any sense out of what you've written.
",jnicklas,2013-02-24 17:30:20
686,2013-02-27 10:37:36,"how can i type in html markup ?

it parsed html markup automatically

i have a frameset A, it includes a frame and another frameset B,  more, the frameset B have two frame with id = menu and main.

how can i get the frame ""main""
",fy-kenny,2013-02-24 17:30:20
686,2013-02-27 11:21:41,"This is not the place for asking questions, please post to the mailing list.
",jnicklas,2013-02-24 17:30:20
685,2012-04-05 05:12:45,"This makes it possible to use Capybara::Server directly with a specified port
number without having to make a separate assignment to Capybara.server_port.

Useful if someone (like me) wants to use Capybara::Server to spin up a Rack server outside the context of Capybara itself.

The value still defaults to Capybara.server_port if no port is specified.
",jwilger,2012-07-13 13:19:47
685,2012-04-07 20:35:43,"Anything else need to be done with this before it can either get merged or rejected outright?
",jwilger,2012-07-13 13:19:47
685,2012-07-13 13:25:22,"There were a couple of things I didn't like too much about this pull request, so I went ahead and rewrote it. I disagree with @exviva, that the port needs to update between `new` and `boot`. I think setting `Capybara.server_port` as the default is fine. The implementation was also overly complex, in my opinion, adding a lot of cruft for an essentially simple change.
",jnicklas,2012-07-13 13:19:47
685,2013-05-11 16:07:40,"I need to connect to the running test environment within the lifetime of a test. Specifically I am testing that a Git hook makes a request to the Rails app... I can't seem to figure out where to make the request to, where is the test environment available externally (host/port) to the test suite, does this patch make it possible?
",thelucid,2012-07-13 13:19:47
685,2013-05-11 16:29:30,"@thelucid Your question is better asked on the mailing list, rather than on a pull request that was closed almost a year ago.  You probably want to be looking at Capybara.server_host, Capybara.server_port, Capybara.app_host, and Capybara.default_host if you need to be setting the servers properties to something, or  current_session.server.host and current_session.server.port if you just want to know what they are while the test is running
",twalpole,2012-07-13 13:19:47
685,2013-05-11 16:58:28,"@twalpole Apologies, I thought it was related to the pull request.
",thelucid,2012-07-13 13:19:47
684,2012-04-04 21:29:37,"I'm having a bizarre issue with Capybara 1.1.2 in which the inherited layout is not heeded.

The particularly weird part is that the layout is heeded by my browser, so when I hit the path in question manually, I get the expected html, but when I hit the path in rspec, I get

<S_CODE_TOKEN>

There's a gist with most of my code here:  https://gist.github.com/2305381

As I step through the test and the controller with Pry, I'm noticing that neither the inherited layout, nor the particular view are getting hit by rspec.
",rknLA,2012-04-04 23:20:05
684,2012-04-04 21:40:35,"Rails is pretty much a black box to Capybara. I'd be very surprised if Capybara has anything to do with this, keep digging!
",jnicklas,2012-04-04 23:20:05
684,2012-04-04 22:16:58,"I'll keep digging, but it doesn't seem to be an issue with Rails, since Rails server is rendering the proper layout in both development and test environments.

Interestingly enough, adding `layout 'admin'` to the DashboardsController didn't seem to force the issue either, so it might not be an inheritance issue after all.
",rknLA,2012-04-04 23:20:05
684,2012-04-04 23:20:05,"This was user error after all.

It was unclear that capybara tests needed to be in a specific directory.
",rknLA,2012-04-04 23:20:05
684,2012-10-19 18:12:45,"@rknLA Could you please explain how you solved this issue? I just got stuck on it.
",premjg,2012-04-04 23:20:05
684,2012-10-19 18:17:10,"@rknLA Got it. Basically you need to place all your request specs in the specs/requests folder _only_
",premjg,2012-04-04 23:20:05
683,2012-04-04 09:39:55,"[Draper](https://github.com/jcasimir/draper) is a library that adds a presenter pattern to your Ruby-based web applications, with out-of-the-box support for testing your presenters with RSpec.

I opened jcasimir/draper#156 in order to suggest we include the matchers provided by Capybara if they are available.

I would like to know if there's a preferred method of mixing in this part of Capybara, so we don't delve in to any private parts of your API.

Thanks.
",jcf,2012-07-10 13:28:46
682,2012-04-01 22:14:15,"My first pull request, go easy on me :)

This is in reference to issue #681. Basically if you had something like `select '4', from 'some_select_tag'` and both `<option value=""4"">4</option>` and `<option value=""14"">14</option>`, the `#find` method of `#select` would match both and raise a `ElementNotFound` error and a message saying that no element was found. This is confusing and technically incorrect. This commit adds a `MultipleMatchesFound` error and provides a more appropriate error message.
",ghost,2012-07-09 15:21:49
682,2012-04-01 23:43:24,"This is actually quite nice. Getting decent error messages has proven to be the absolutely hardest challenge in Capybara, and so far I haven't been happy with any approach I've taken. If it's alright with you I will leave this pull request lying around unmerged until I find some more time to look at this in detail.
",jnicklas,2012-07-09 15:21:49
682,2012-04-02 12:16:23,"Of course. I basically changed the only spec I could locate that dealt with finding multiple matches to expect a better error message. But, depending on the future of `Query`, I am not sure how robust my `#failure_message` method is.
",ghost,2012-07-09 15:21:49
682,2012-04-27 15:41:35,"I'm in full support of this error message.  I see this error often enough to know I need to check for possible multiple matches, but it be very useful and much more enlightening to know exactly what problem I am experiencing (no match or multiple matches).
",knappe,2012-07-09 15:21:49
682,2012-05-15 22:50:20,"+1 for improving this error message

`Unable to find xpath ""whatever""` is extremely misleading

@tedkimble's also fixes this important omission from the method's documentation:
""find will raise an error if the element is not found **or if multiple matches are found**""

Instead of `failure_message(multiple_matches = nil)`, though, I'd recommend separate methods such as `failure_message_for_multiple_matches` and `failure_message_for_no_match`.

Also, I don't know if this would be helpful for anyone else, but I wasn't aware that you could use `first()` (or `all()`) instead of `find()` if you just want the first match returned (or all matches). That's what I ended up changing my code to use to work around this error. Perhaps this error message could give a hint to lead people to those other methods?

<S_CODE_TOKEN>
",TylerRick,2012-07-09 15:21:49
682,2012-07-09 15:21:49,"Improved error messages are now on master.
",jnicklas,2012-07-09 15:21:49
681,2012-04-01 19:07:55,"I had trouble figuring out how to best test this outside of Rails, but this is my issue in a Rails 3.2.3, Rspec, Capybara (rack-test), Turnip setup.

If I have the following HTML:

<S_CODE_TOKEN>

This step:

<S_CODE_TOKEN>

works as expected when `n >= 10` and fails when `n < 10` with the error:

<S_CODE_TOKEN>

If I replace the step with:

<S_CODE_TOKEN>

It spits out a bunch of `true`s (as I would expect).

If I have the following HTML:

<S_CODE_TOKEN>

Then the step works as expected with (`n` any of the characters).

If I have the following HTML:

<S_CODE_TOKEN>

Then the step works as expected (with `n` the result of a `date.strftime('%d')`).

If someone could point my in a better direction with regards to testing outside of Rails, I'll see if I can better locate the issue behind my problem.
",ghost,2012-07-12 14:13:23
681,2012-04-01 20:33:22,"It's because when you're trying to find `<option value=""1"">1</option>` capybara matches not only `<option value=""1"">1</option>` but `<option value=""10"">10</option>` too. And then because of https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L60 this `if` statement you're getting `Capybara::ElementNotFound` error as `results.length == 2`
",nashby,2012-07-12 14:13:23
681,2012-04-01 21:09:02,"I see, thanks. I was looking at the comments for `#find`, but it only mentioned throwing an error if the element wasn't found at all.

So, the default behavior is to match anything that contains the value (and not just starts with it, i.e. `find(:option, '4')` also matches `<option value=""14"">14</option>` ).

This doesn't seem obvious or intuitive (and perhaps that's just my xpath ignorance). But certainly a better error message can be shown when multiple matches are found. The error `no option with text '4' in the select box` sent me down all the wrong paths trying to figure this out.

But thanks again.
",ghost,2012-07-12 14:13:23
681,2012-04-01 23:34:35,"Are you using Capybara master? I would recommend sticking with the latest gem release unless you're well informed about the changes that have happened since. master is _not_ compatible with the 1.x branch.
",jnicklas,2012-07-12 14:13:23
681,2012-04-02 12:12:39,"Yes, I am. My main issue was with regards to the error messaging, which #682 may address. Regardless, I think that it makes more sense for `#select` to continue to use `#first` instead of `#find` (which I believe the current 1.x branch does). Feel free to close when necessary.
",ghost,2012-07-12 14:13:23
681,2012-04-27 19:11:48,"Now that capybara validates that just one element matches your criteria, shouldn't be good to have a default configuration where you can choose if you want an exact or a partial match for the elements?
And capybara would change the xpath expression for each case:

<S_CODE_TOKEN>

And also should have a way to override the default match type during execution if you want:

<S_CODE_TOKEN>
",greis,2012-07-12 14:13:23
681,2012-06-18 12:35:35,"+1 on @greis's suggestion.
",DouweM,2012-07-12 14:13:23
681,2012-07-10 13:23:27,"I don't like the idea of an option to specify whether the match should be exact or not. On the other hand, it seems that with the current behaviour, we should probably switch to matching exactly.
",jnicklas,2012-07-12 14:13:23
681,2013-01-08 11:55:22,"I'm having a similar issue after upgrading from Capybara 1. click_link ""Hello"" gives error. It used to find ""Hello"", but now it finds 2 elements since I also have a ""Hello world"" link. @jnicklas writes that Capybara should probably switch to matching exactly. I assume this has not been done? Or is there a setting that I can use? Selecting the first link is not appropriate as I want the exact match and the exact match might not be the first link.
",espen,2012-07-12 14:13:23
681,2013-01-08 12:26:34,"Unfortunately, there is no such option yet.
",jnicklas,2012-07-12 14:13:23
681,2013-01-08 17:19:03,"@jnicklas Do you think it will be good to have all `Actions` methods (where it makes sense) to find an exact match (if it exists) instead of the first one?
",abotalov,2012-07-12 14:13:23
681,2013-01-08 20:59:15,"Yes, but I'd rather solve this problem properly rather than breaking compatibility unnecessarily without arriving at a really good solution. I have some ideas, which I'll present to the mailing list at some point soon.
",jnicklas,2012-07-12 14:13:23
681,2013-02-13 21:38:49,"@jnicklas did you post your ideas on the mailing list? I was unable to find it. I think that exact should be the default but also happy with just being able to specify :match => :exact as @greis suggests.
",espen,2012-07-12 14:13:23
681,2013-02-14 21:18:52,"I'm also experiencing this issue:

> I'm having a similar issue after upgrading from Capybara 1. 
> click_link ""Hello"" gives error. It used to find ""Hello"", but now 
> it finds 2 elements since I also have a ""Hello world"" link. 
",kellyfelkins,2012-07-12 14:13:23
681,2013-02-14 21:25:22,"@espen See http://www.elabs.se/blog/55-a-capybara-future
",abotalov,2012-07-12 14:13:23
681,2013-02-14 21:51:04,"Thank you. Very helpful.

-Kelly

On Thu, Feb 14, 2013 at 1:25 PM, Andrey Botalov notifications@github.comwrote:

> @espen https://github.com/espen See
> http://www.elabs.se/blog/55-a-capybara-future
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/681#issuecomment-13579462.

## 

Kelly Felkins
about.me/kellyfelkins
",kellyfelkins,2012-07-12 14:13:23
680,2012-03-31 18:19:42,"Maybe I've misunderstood the docs, but seems to return nil rather than 'p':

<S_CODE_TOKEN>

I'm using the latest release.
",andyw8,2012-04-01 01:52:52
680,2012-04-01 01:52:52,"This is because Capybara.string returns a document, rather than a node. In order to get the tag name of the root node, you'll need to first find it, for example: `Capybara.string('<p>hello</p>').find('p').tag_name`, or if you don't want to be specific about the name of the tag you can use XPath: `Capybara.string('<p>hello</p>').find(:xpath, '/').tag_name`
",jnicklas,2012-04-01 01:52:52
679,2012-03-30 19:11:20,"Thanks to #643 I noticed capybara uses exceptions to manage retry control flow and I thought I'd give a crack at an alternative.

This is a partial solution which runs green and covers #has_selector?, #has_no_selector?, #has_text?, and #has_no_text?. It removes all uses of the ExpectationNotMet exception.

In this branch, synchronize is somewhat more complicated because it handles both the exception-based control flow and the alternative, but I expect that these two would be unified after a bit more work and the ultimate result would be comparable in simplicity.

At the moment I mostly just want to know if you're interested in this path or if you have any feedback.
",Empact,2012-03-31 04:23:18
679,2012-03-31 01:56:46,"The synchronize method as it is now is very concise and readable, imo. This new version isn't. We aren't likely to get away from the fact that drivers will raise errors in some circumstances, which we need to catch and handle. So we'll always be stuck with some kind of hybrid solution. I know exceptions as control flow is a code smell, but do we really need to change this just for the sake of dogma, when there doesn't, from what I can see, seem to be any downside to doing it this way.

Imo, the current solution with `yield` and `retry` is quite elegant. I don't mind it at all.
",jnicklas,2012-03-31 04:23:18
679,2012-03-31 04:23:18,"Yeah, looking over the code it seems those 4 are the low-hanging fruit, handling anything else otherwise gets hairy. There may be an elegant way to do this but I won't be the one to find it either.
",Empact,2012-03-31 04:23:18
678,2012-03-30 19:04:42,"Not sure why, but this option was removed in a1b1cc7132a2e7a
",Empact,2012-03-31 13:41:37
678,2012-03-31 01:51:27,"We should probably get rid of that entire paragraph.
",jnicklas,2012-03-31 13:41:37
678,2012-03-31 03:44:38,"There you go.
",Empact,2012-03-31 13:41:37
678,2012-03-31 13:41:46,"Cool. Merged! :)
",joliss,2012-03-31 13:41:37
677,2012-03-30 15:27:41,"Rails recently (since v3.2.3.rc1) introduced a newline after opening <textarea> tag (https://github.com/rails/rails/pull/4000). All browsers ignore this newline.

But Capybara rack-test driver does not. So if the test opens edit page with textarea, and clicks 'Save', then an additional trailing newline is added to the value, sent to the controller and saved to the DB.

The proof app is here: https://github.com/khustochka/newline_test

It has two integration tests, one driven with Selenium, another with rack-test. The first passes, the second fails.

I apologize in advance if I posted it in the wrong place. I admit it belongs to capybara while rack-test itself does not do anything with page contents.
",khustochka,2012-04-09 10:19:27
677,2012-03-30 15:33:23,"Or to put it simple, the test is:

<S_CODE_TOKEN>

Output is:

<S_CODE_TOKEN>
",khustochka,2012-04-09 10:19:27
677,2012-03-30 15:43:07,"> I apologize in advance if I posted it in the wrong place.

No, sounds like a problem in Capybara's Rack-Test driver indeed. Thanks for reporting!
",joliss,2012-04-09 10:19:27
676,2012-03-26 02:13:26,"The previous behaviour was matching any subsets of
selected options.
Now matches only the exact set of selected options.
",grzuy,2012-03-26 06:16:37
675,2012-03-24 00:13:24,"This one addresses #654
- The partial matching behaviour that had the `:options` filter was moved to a `:included_options` filter
- Change `:options` filter to match only the exact set of options
",grzuy,2012-03-24 18:22:30
675,2012-03-24 00:37:47,"I like it, but `:included_options` doesn't sound very nice to me, can we come up with a better name? Maybe `:with_options`?
",jnicklas,2012-03-24 18:22:30
675,2012-03-24 01:09:34,"Yep, sounds a bit better!
Just amended the last commit with that change.
",grzuy,2012-03-24 18:22:30
675,2012-03-24 18:22:40,"Merged, thanks!
",jnicklas,2012-03-24 18:22:30
674,2012-03-23 19:23:09,"I have a problem with cucumber. session is not loaded. session[""session_id""] == nil
- capybara (1.1.2)
- rack (1.4.1)
- cucumber (1.1.9)
- rails (3.2.2)

(...get pages...)

<S_CODE_TOKEN>
",linuxonrails,2012-03-23 19:36:08
674,2012-03-23 19:36:08,"This is not enough to reproduce the problem.

This issue tracker is meant for reproducible bugs only. I recommend you ask on the Capybara mailing list, preferably posting some more info about what's going wrong.
",joliss,2012-03-23 19:36:08
673,2012-03-23 09:35:06,"I'm having problems with Xpath in Capybara where I need to include a test of text elements in the DOM. The Xpath expressions work in Firefox and Chrome, so they're valid, but when I try them in Capybara they don't work.

For example, using Capybara in the context of a Cucumber step, which is going to the web site via Selenium on Firefox. Firefox can handle the Xpath expression, and the Selenium documentation says it uses the Firefox native Xpath parser, so the problem is probably not at that end. The Xpath expression which fails in Capybara is;

page.should have_xpath(""//div/h2[./text()='Some text']"")

Please don't reply with ""Why don't you use page.should have_xpath(""//div/h2"",:text=>'Some text')"" That's not what I want. The 'text()' element is part of the Xpath specification so it should be implemented, and also what I really want to do is ;-

page.should have_xpath(""//div/h2[text()='Some text']::following_sibling/div/h2[text()='some other text']

I.e. a simple Xpath expression to validate that 'some other text' comes after 'Some text' in the flow of the document. 

Could the problem be with Nokogiri?

Thanks

John Small
",JohnSmall,2012-06-11 15:28:18
673,2012-03-23 13:28:49,"> which fails

_How_ did it fail? I need error descriptions, stack traces, analysis. You're asking a question, not telling me about an issue. If you want help, use the mailing list, if you have found an actual issue then trace the cause as accurately as you can. This unfortunately tells me nothing.
",jnicklas,2012-06-11 15:28:18
673,2012-03-27 14:55:53,"@JohnSmall 

Is the xpath you pasted { page.should have_xpath(""//div/h2[./text()='Some text']"") } the xpath you are using?

If so, shouldn't your expression be { ""//div/h2[text()='Some text']"" }? Looks like a typo to me, but then again, maybe this is some XPath convention that I am unaware of?

Also, could it be the case that you didn't give the full text expression? You could try:
{ ""//div/h2[contains(text(), 'Some text')]"" }
",wokkaflokka,2012-06-11 15:28:18
673,2012-06-11 15:28:18,"Closing because OP never replied.
",jnicklas,2012-06-11 15:28:18
672,2012-03-23 07:12:59,"Running a standard JS-driven integration test using selenium. Eventually we read a file using ImageMagick and the following segfault occurs:

<S_CODE_TOKEN>

(There's a lot more there obviously). 

The relevant section of code looks like:

<S_CODE_TOKEN>

The `src.path` that is output seems fine and contains an image file as expected. 

Note that this code path works totally fine in development and production, there just seems to be a problem with capybara.

Probably this is a problem somewhere further down in the stack (ie. perhaps in ruby itself) but I didn't really know where to start nailing this down. Any ideas? What further investigations can I do?
",tmeasday,2012-03-23 09:31:15
672,2012-03-23 09:31:14,"This is definitely NOT an issue with Capybara. Capybara doesn't use any native code. Selenium could potentially segfault, but imo it's MUCH more likely that RMagick is segfaulting. RMagick is known to segfault.
",jnicklas,2012-03-23 09:31:15
672,2012-03-23 22:42:38,"Hi Jonas,

I didn't mean to imply that the segfault was happening in Capybara, it's clearly happening in Rmagick and either a bug in rmagick or ruby itself. 

But the issue is that that particular code path on that particular image work fine in every other situation: dev, production, even functional tests. So something that is different in the capybara test server is causing a strange situation to occur, which is triggering the bug. So I thought this would be the best spot to try and figure out what that difference is.

Cheers,
Tom
",tmeasday,2012-03-23 09:31:15
672,2012-03-23 23:10:11,"It's possible that the combination of Selenium or Webkit and RMagick causes a segfault, but I doubt it. You might consider if this is a timing issue. This is a common cause for issues only occuring in Capybara tests. Capybara can simply click a lot faster than you can. It could also be a concurrency/threading issue, but that also seems a bit unlikely to me.
",jnicklas,2012-03-23 09:31:15
672,2012-03-23 23:21:36,"Well the error occurs server side so I don't think it's a timing issue or that selenium is involved directly.

Basically what happens is a URL is POSTed in a form (via the capybara test), then the server downloads the image and does it's RMagick on it. As I mentioned the image has been downloaded with no problems, so I'm not really sure what to think. Concurrency doesn't seem likely as I am running a single test with fairly discrete steps.

What kind of server is capybara running for Selenium to connect to? How can I get a development server running in the exact same circumstances?

On 24/03/2012, at 10:10 AM, Jonas Nicklas wrote:

> It's possible that the combination of Selenium or Webkit and RMagick causes a segfault, but I doubt it. You might consider if this is a timing issue. This is a common cause for issues only occuring in Capybara tests. Capybara can simply click a lot faster than you can. It could also be a concurrency/threading issue, but that also seems a bit unlikely to me.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/672#issuecomment-4669647
",tmeasday,2012-03-23 09:31:15
672,2012-03-25 23:33:51,"Ok, I was over thinking this, there's enough info on the capybara homepage.

Turns out RMagick doesn't like running in a thread: https://github.com/rmagick/rmagick/issues/16 

Thanks for your help.
",tmeasday,2012-03-23 09:31:15
671,2012-03-21 03:46:08,"I am using RSpec2 and in the following code

<S_CODE_TOKEN>

it seems that the `:type` field doesn't work as expected: the `:type` option seems to be ignored. Furthermore, also the `:count` option seems to behave like that.

That is, those options do not raise errors, also if I use some wrong or ""crazy"" value like in the following:

<S_CODE_TOKEN>
",Backoo,2012-03-21 18:40:58
671,2012-03-21 07:26:15,"IIRC `type` has not been released yet. It's only on master.
",jnicklas,2012-03-21 18:40:58
671,2012-03-21 11:29:30,"When it is planned that you will release that?
",Backoo,2012-03-21 18:40:58
671,2012-03-21 18:40:57,"I don't know.
",jnicklas,2012-03-21 18:40:58
670,2012-03-19 15:21:20,"Something that is not widely known is that HTML specify that multipart forms should be sent with the field order matching the order of the control in the page. Quoting http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.2:

> A ""multipart/form-data"" message contains a series of parts, each representing a successful control. The parts are sent to the processing agent in the same order the corresponding controls appear in the document stream.

The following _diff_ adds a new spec to test this behaviour. It currently fails when testing the Rack::Test and works fine for the one using Selenium.

<S_CODE_TOKEN>

The issue should probably be solved in Rack::Test but testing this will help those who would like to implement new drivers.
",potager,2012-07-12 14:36:37
670,2012-03-19 16:20:13,"Please note that this spec is actually green when using Ruby version 1.9.1 or later, due to Hash insertion order being preserved.

Although that is a really unusual setup, if the `multipart_submit` field is moved to the top of the `form` it will not be sent in the correct place. Exactly because of the ""TO DO"" item in `lib/capybara/rack_test/form.rb:params`.
",potager,2012-07-12 14:36:37
670,2012-07-12 14:36:37,"I'm going to close this issue as ""won't fix"". Ruby 1.8 is on the way out, and this is a rather extreme edge case. As a workaround, use a different driver, or switch to Ruby 1.9.
",jnicklas,2012-07-12 14:36:37
669,2012-03-17 17:54:25,"Something seems to go wrong, perhaps with the RSpec exit handler:
http://travis-ci.org/#!/jnicklas/capybara/jobs/887918

---

I'm not in the mood for tracking this down, especially since it affects the tests only, and I've never seen anybody complain about Rubinius support. So unless someone else is volunteering, I say we go the easy route and remove it from the build.
",joliss,2012-03-18 16:12:32
669,2012-03-17 23:50:37,"I reproduced and filed a [Rubinius bug](https://github.com/rubinius/rubinius/issues/1618) for the ""dump_pending_example_fixed"" error.

I couldn't reproduce the ""file not added for reaping"" error, which is what actually triggers the build failure I think. Perhaps it's a follow-on from the first issue.
",jfirebaugh,2012-03-18 16:12:32
669,2012-03-18 01:40:02,"I fixed the Rubinius bug; I suspect the build will pass after the next Travis VM update.
",jfirebaugh,2012-03-18 16:12:32
669,2012-03-18 16:12:32,"Wow, that was quick. Thanks a lot!

I'm closing this. Let's live with the broken build until Travis update their VMs.
",joliss,2012-03-18 16:12:32
668,2012-03-16 20:02:13,"(An evolution of #667).

This solves the long standing issue of not being able to know what went wrong with a request that failed.

Consider this a solution for issues #629 and #508.

Thanks to @raggi (#660) for the inspiration.
",djanowski,2012-04-16 22:04:05
668,2012-03-17 16:52:55,"Please don't use abort_on_exception, it's not as predictable as join (for example, if the DSL isn't being used in Thread.main).

I'm not sure why you would want to let the server die like this, and so on.
",raggi,2012-04-16 22:04:05
668,2012-03-26 15:14:33,"@raggi: I see what you mean. I use a testing library that halts on the first assertion failure, so letting the server die wasn't a problem for me. I'll think a bit more about this. Thanks for your feedback.
",djanowski,2012-04-16 22:04:05
668,2012-03-27 01:27:44,"Any update on this? I got it somewhat working for me using djanowski's code and setting `action_dispatcher.show_exceptions = false`, but as raggi alluded, all of my Capybara tests would fail after the first one, apparently due to the server being killed. I'd like to help out in any way, as tracing these exceptions back to `test.log` really slows down the feedback loop, but unfortunately I'm not 100% on how this patch does what it does. :P
",cvincent,2012-04-16 22:04:05
668,2012-03-27 01:33:50,"@cvincent: What driver are you using?
",djanowski,2012-04-16 22:04:05
668,2012-03-27 01:46:10,"capybara-webkit
",cvincent,2012-04-16 22:04:05
668,2012-04-02 16:27:32,"@raggi: Just changed this a little bit, so now:
- It doesn't use `abort_on_exception`.
- It doesn't let the server die.
- It raises the exception on the correct thread, so can be used outside of `Thread.main`.

What do you think now?

@jnicklas: This is an alternative solution that doesn't require to actively check for errors.
",djanowski,2012-04-16 22:04:05
668,2012-04-02 17:47:30,"This looks like a _much_ cleaner solution to me. @raggi et al. what do you think? I really like the fact that the exception is just handed to the main thread. It seems like a very elegant solution. Also, I'd never seen the Queue class in Ruby core, quite neat!
",jnicklas,2012-04-16 22:04:05
668,2012-04-03 15:57:17,"This does look pretty decent to me. I didn't realise that one thread could raise an error in another.
",jonleighton,2012-04-16 22:04:05
668,2012-04-04 01:12:10,"@djanowski this still causes capybara-webkit to choke. After a spec raises an exception, it is caught and the test output shows it (nice!). However, every Capybara spec after the first one fails with `Capybara::Driver::Webkit::WebkitInvalidResponseError`, just after the console spits out `QCoreApplication::postEvent: Unexpected null receiver`.

I suspect this is an issue with capybara-webkit rather than your patch. For now I'm going to go ahead and use your patch and ignore specs failing with `WebkitInvalidResponseError` after the first failure. It's just so valuable to be able to see exceptions on the server in the spec output rather than parsing through the server log. Thanks a ton for the patch!
",cvincent,2012-04-16 22:04:05
668,2012-04-04 01:18:12,"@cvincent: I'll try to review what's going on since I'm a capybara-webkit user myself too :)
",djanowski,2012-04-16 22:04:05
668,2012-04-04 01:20:48,"@djanowski that would be sweet! Here's my Capybara config if it helps:

<S_CODE_TOKEN>

In case it makes a difference, but I'm also using Spork and Guard.
",cvincent,2012-04-16 22:04:05
668,2012-04-05 02:31:09,"Guys, the side effects of doing cross-thread raise are really hard to define. You could end up leaking all kinds of resources, corrupting data, processes, etc. Fundamentally this approach has the same potential problems as Thread.abort_on_exception = true.

Here's an example:

<S_CODE_TOKEN>

I know you're all after a nice small solution, but magic won't make this stable. You'll hurt someone, and not even in a  completely deterministic way. If they're seeing things cause this, and the issue is non-deterministic, then you can really waste tons of their time. Here's a further example of how that might happen:

<S_CODE_TOKEN>

This might seem contrived, but with all the block usage for resource management in ruby, and the depth of libraries used in for example rails environments, these kinds of things can happen, and they can happen semi-deterministically (because threads switch on MRI in _almost_ deterministic patterns).

I've seen teams try to debug issues like this, and they've spent days at it, never finding the root cause. Most people end up concluding that libraries are broken in strange ways, or ruby is broken, etc, etc.
",raggi,2012-04-16 22:04:05
668,2012-04-06 01:13:51,"@raggi: I see what you're saying. That does indeed sound pretty dangerous. But maybe we don't even really need to raise the error, just printing it to stdout would probably be enough. We could format it nicely and make it very obvious that this error was caught inside the server. That only leaves the issue of contention for IO and we could solve that with a mutex, no?
",jnicklas,2012-04-16 22:04:05
668,2012-04-06 20:50:28,"A true horror story ;-)

OK, if it can be that bad, then in my case simply printing to `$stdout` is good enough.
",djanowski,2012-04-16 22:04:05
668,2012-04-07 22:22:11,"I would much prefer the raise so other tooling can do it's job.
",raggi,2012-04-16 22:04:05
668,2012-04-09 13:53:29,"OK, so given all the arguments above, I'd close this PR in favor of something more along the lines of #660.
",djanowski,2012-04-16 22:04:05
667,2012-03-16 19:39:32,"This solves the long standing issue of not being able to know what went wrong with a request that failed.

This change introduces Thin as a requirement, but I think it's a reasonable trade off since it makes development a lot easier. If you think requiring Thin is too much, then we could still provide the WEBrick fallback (without the feature).

I believe this is a reasonable implementation which doesn't require guessing about what is or what is not an error -- it simply relies on whether the app bubbled an exception. Also it doesn't require monkey patching Thin.

Consider this a solution for issues #629 and #508.
",djanowski,2012-03-16 20:02:50
667,2012-03-16 19:44:20,"Summoning @raggi since this is an alternative implementation of #660.
",djanowski,2012-03-16 20:02:50
667,2012-03-16 19:45:23,"Thin doesn't support JRuby, so requiring it is a no-go.

Why does this depend on choosing a particular server? Can't we just wrap the application in a middleware that logs exceptions?
",jfirebaugh,2012-03-16 20:02:50
667,2012-03-16 19:50:58,"OK, I see. Then it could be something like #660. Investigating.
",djanowski,2012-03-16 20:02:50
667,2012-03-16 20:02:50,"Closing this in favor of #668.
",djanowski,2012-03-16 20:02:50
666,2012-03-16 18:08:47,,djanowski,2012-03-17 12:37:05
666,2012-03-17 12:37:25,"Huh, seems to have been some kind of load-ordering issue.

I merged this. Thanks!
",joliss,2012-03-17 12:37:05
665,2012-03-15 15:00:34,"I'm trying to check that a multi-select list is repopulated with the previously selected options after a submit. That is, I have:

<S_CODE_TOKEN>

Now I select a proper subset of them and submit:

<S_CODE_TOKEN>

The result is confusing:
- They are shown as _not_ selected in the browser window. 
- `page.has_select?('machines', :selected => [""foo"", ""bar""])` returns **`true`**, contrary to what is seen in the browser.
- In Firefox it _does_ show the items as selected. Verified with Firebug that the server sends `selected=""selected""` for the selected items.
- _Single_-select lists work fine in both browsers. That is, the selected item is retained across submits, and is detected as such by Capybara.

The next step is to verify that the selection is retained, but the same call which succeeded in the `submit the form` target (`page.has_select?('machines', :selected => [""foo"", ""bar""])`) fails in subsequent targets. I've verified lots of times that it works just fine in Firefox (and that there is no JavaScript involved in setting the `selected` attributes), but there doesn't seem to be any way to verify this in Capybara.
",l0b0,2012-07-10 13:31:08
665,2012-03-15 15:52:41,"Can you figure out what causes this? Difficult to say anything without something more isolated. There are too many factors involved here, and the error could well be somewhere else than Capybara.
",jnicklas,2012-07-10 13:31:08
665,2012-03-19 09:07:23,"This is already as much as I was able to simplify the issue, and I'm not a Ruby/Capybara/Chrome/Mechanize expert, so it's very likely beyond my scope to figure this out.
",l0b0,2012-07-10 13:31:08
665,2012-03-19 10:01:46,"This might be relevant:

<S_CODE_TOKEN>

In the first/inner Pry session `page.find(:xpath, '//select[@id = ""foobar""]/option[@selected = ""selected""]')` returns an item, and in the second/outer Pry session it returns `Capybara::ElementNotFound`. If I change the step definition as follows:

<S_CODE_TOKEN>

`page.find(:xpath, '//select[@id = ""foobar""]/option[@selected = ""selected""]')` fails again. Looks like the state of the page is not really changed until exiting a `within` block?
",l0b0,2012-07-10 13:31:08
665,2012-07-10 13:31:08,"I've been unable to replicate this and without any other verification, I have a hard time believing this is a bug. If anyone still believes this is an issue, send a pull request with a failing spec.
",jnicklas,2012-07-10 13:31:08
664,2012-03-12 10:22:13,"Originally:

https://groups.google.com/d/msg/ruby-capybara/RiT6NmPUOWQ/7-mjVfFS9UYJ

Steps to reproduce:

require 'capybara'
require 'capybara/dsl'
include Capybara::DSL
Capybara.current_driver = :selenium
visit('http://odinplusodin.ru')
click_link('Войти') # fail :-( This link is on the top right

This link has no id or css.
Actually it can'f find even body.

Checked with capybara master
",Houdini,2012-03-13 07:50:55
664,2012-03-12 11:50:15,"I'm sorry, unless you can replicate this problem on a different website this issue really doesn't tell us anything. There could be a million things wrong with that site, and from the looks of it, at least some of it is pretty non-standard. So try to find out what it actually is that's going wrong.
",jnicklas,2012-03-13 07:50:55
664,2012-03-13 07:50:55,"Problem was in header Content-Type:application/xhtml+xml
if change to text/html everything works fine
",Houdini,2012-03-13 07:50:55
664,2012-03-13 08:12:14,"Ahh, that explains it. Probably that, plus some kind of XML namespace confusion that made this not work.
",jnicklas,2012-03-13 07:50:55
663,2012-03-12 06:01:16,"First, I'm sorry for using the Issues for a question. Should I use mailing list for it?

Is there any plan to release Capybara 1.1.3?
I want to use Capybara::Query in test-unit-capybara.
",kou,2012-03-12 08:06:50
663,2012-03-12 08:06:50,"> Should I use mailing list for it?

Yes.
",jnicklas,2012-03-12 08:06:50
663,2012-03-12 08:40:47,"Thanks for your reply!
I'll post a mail to the mailing list.
",kou,2012-03-12 08:06:50
662,2012-03-07 11:12:19,,Erkan-Yilmaz,2012-03-07 11:13:59
662,2012-03-07 11:13:59,"Thanks!
",joliss,2012-03-07 11:13:59
661,2012-03-06 22:43:55,"...veness checks.

See #656 and #660.
",raggi,2012-03-06 23:51:48
661,2012-03-06 23:52:00,"Looks really good, nice job!
",jnicklas,2012-03-06 23:51:48
661,2012-03-07 18:16:37,"Thanks :)
",raggi,2012-03-06 23:51:48
660,2012-03-06 21:48:17,"Currently, people do things like make servers puts or use Thread.abort_on_exception = true to do this. That leads to other problems, so I added some code to cache the errors and re-raise in the testing thread.

In general this will display errors that are released / uncaught by frameworks (e.g. rails in test mode). Sometimes, where the first request doesn't error, but subsequent asset / ajax type requests do, it will raise those errors instead. Whilst this may be slightly odd, it will help with having a faster feedback loop most of the time.

Ideally it wouldn't rely on driver.rack_server. I'd actually prefer that session handled server booting when drivers request servers, however, this would be a larger refactor that is not appropriate for rolling up into these changes.
",raggi,2012-07-13 12:57:41
660,2012-03-06 22:44:10,"See #661
",raggi,2012-07-13 12:57:41
660,2012-03-06 23:47:06,"We need to find a better way than only checking the errors when `visit` is called. Maybe it isn't, and in that case this whole feature is of no use. Unless I misunderstand how this works.

Maybe we can just collect all errors that are raised, and then have a hook method which would allow us to re-raise those exceptions. Something like `Capybara.current_session.reraise_captured_expressions!` or something (the name is dumb). And we would call this method from hooks in `capybara/rspec` and `capybara/cucumber`. What do you think about that?
",jnicklas,2012-07-13 12:57:41
660,2012-03-07 03:46:26,"You can only raise a single exception, so trying to re-raise all simply can't be meaningful.

We could bundle them up in a single exception, and raise that, but, then the backtrace is less useful for people, and to be honest, it becomes a failed tool.

I didn't look in any detail, and I likely should, what other public API methods actually cause requests to be made? (n.b. I don't really count evaluate_script(window.location =) as something valid, as it's not portable across drivers - i.e. that'll attempt to run against about:blank in selenium).

I don't like the idea of adding hooks for specific test frameworks, that again damages portability. An exception is an exceptional condition, and should always raise. If we do something else, like ""assert capybara.last_error.nil?"" then we're just reimplementing the should not raise pattern, which is bad. It would also as mentioned above, lead to much worse UX.

The first request the browser makes is almost always the most critical. If that fails, other requests generally won't even be made. If a middling request (ajax) fails, we still need to know too.
",raggi,2012-07-13 12:57:41
660,2012-03-07 07:02:09,"`click_link` and `click_button`. Ajax requests can be caused by pretty much anything that Capybara does. Also, websockets or polling could cause an error even when the user does absolutely nothing. So it's not as simple as sticking this in `visit` and hoping for the best.
",jnicklas,2012-07-13 12:57:41
660,2012-03-07 18:14:53,"Yes and no, visit is the critical one that everyone needs. It's possible we could also add a ""server errors"" method to the DSL, and users could poll that themselves.

Alternatively we could add checks throughout the rest of the DSL. In general, tests should fail either way, but it's the initial requests failing silently that frequently burn people.
",raggi,2012-07-13 12:57:41
660,2012-03-07 18:19:28,"Ah, so.. I had a look at this.

It's easier than I thought, because of the way that DSL delegates to Session!

Thoughts on adding a check around every DSL delegate call?
",raggi,2012-07-13 12:57:41
660,2012-03-30 22:54:26,"ping to all, this would be useful to close up, happy to make any adjustments folks want.
",raggi,2012-07-13 12:57:41
660,2012-04-01 15:11:24,"+1 to this. It would be good if there was a way to also check errors when not using the DSL, but merging this for now seems good to me.
",jonleighton,2012-07-13 12:57:41
660,2012-04-01 16:30:38,"I still don't feel good about this. It feels too fragile to me. I'll ponder it for a little while longer.
",jnicklas,2012-07-13 12:57:41
660,2012-04-01 19:00:03,"Can you elaborate on what specifically seems fragile? Thanks
",jonleighton,2012-07-13 12:57:41
660,2012-04-01 23:31:55,"Just the whole approach of it. Catching errors, caching them somewhere, then at a random later point checking them and re-raising them. It just seems so wrong conceptually. I just feel _very_ unenthusiastic about this. Maybe this is as good as we're going to get, but I'd rather spend some more time thinking about the problem than merging this without exhausting other options.
",jnicklas,2012-07-13 12:57:41
660,2012-04-03 12:59:49,"Well the fact that there are two threads of execution necessitates a synchronisation point.

Would you feel more comfortable if errors were checked on test failure? Something like ""your test failed, we noticed there were some errors in the server thread, here they are: ...""
",jonleighton,2012-07-13 12:57:41
660,2012-04-03 14:58:07,"@jonleighton: See #668 for a parallel discussion.
",djanowski,2012-07-13 12:57:41
660,2012-04-05 02:34:50,"@jnicklas having done this kind of work before, doing synchronization in a deterministic way is the only path to sanity. Further discussions over the alternative solutions are discussed on the other PR.

I do understand why you feel this is fragile, I'm afraid that adding the check in the consuming thread is a necessary requirement. Welcome to multithreaded programming.

EDIT: sorry, that sounds arrogant/condescending, I don't mean to be, it's just - this is how it's solved everywhere (when solved correctly (read: deterministically)).
",raggi,2012-07-13 12:57:41
660,2012-04-06 00:23:03,"> Maybe we can just collect all errors that are raised, and then have a hook method which would allow us to re-raise those exceptions. Something like Capybara.current_session.reraise_captured_expressions! or something (the name is dumb). And we would call this method from hooks in capybara/rspec and capybara/cucumber. What do you think about that?

&nbsp;

> Would you feel more comfortable if errors were checked on test failure? Something like ""your test failed, we noticed there were some errors in the server thread, here they are: ...""

This is more along the lines of what I would expect. I think you could handle all cases mentioned in the various tickets about this (ex. covering the case of testing error-handling code) if you collected exceptions, then in ex. rspec waited for a failure, say element not found, and had an output along the lines of ""Element not found: blah\Exceptions encountered during run:\n [errors & traces]"" This isn't as clean looking as stopping everything as soon as an error happens, but probably would have about the same effect since you typically can't progress your test after an error anyways. Note that if an error occurred but the test passed, no output would be expected. If there somehow were multiple errors, it would output all.

The downside is that you're still collecting errors, is that something you feel should also not need to be done?
",woahdae,2012-07-13 12:57:41
660,2012-04-06 01:08:34,"@woahdae: that's more along the lines of what I had in mind.
",jnicklas,2012-07-13 12:57:41
660,2012-04-07 22:32:12,"i disagree with this. Silently swallowing errors is horribly evil and also leads to hidden bugs.
",raggi,2012-07-13 12:57:41
660,2012-04-07 23:42:18,"If you're talking about something like `foo rescue nil`, then most definitely. On an integration level, however, what if I wanted to test that when an error happened, a notification was sent to the developers, and users were given a pretty error page? If the middleware were to stop the app on all exceptions, you would not be able to write such a test.
",woahdae,2012-07-13 12:57:41
660,2012-04-07 23:49:24,"How is this ""silently swallowing""? If anything it's ""loudly swallowing"". Nothing changes from the current behaviour except that we insert a middleware which simply prints out errors. That's it. I think that's a pretty reasonable approach.
",jnicklas,2012-07-13 12:57:41
660,2012-04-08 02:09:30,"tests should fail if errors are happening

in a large and long running suite, stdout is not a reliable communication mechanism.

if _anything_ so unfortunate is to be the final approach, please at least use _stderr_, but I am aggressively against a solution that fails to integrate with any testing practices or tooling.
",raggi,2012-07-13 12:57:41
660,2012-04-08 02:10:13,"@woahdae the use case you describe does not raise an error out of the server
",raggi,2012-07-13 12:57:41
660,2012-04-09 02:52:25,"Hm, sorry for being dense, but would you mind unpacking that for me? If you handle an error with the default   `config.action_dispatch.show_exceptions = true` or in a `rescue_from`, and the middleware catches the error before they execute and stops the test, then you won't be able to exercise that logic. If the middleware waits for errors after those get triggered, then it will never see errors unless you skip those methods. The only errors that would stop a test would be ones that were completely unhanded, which by default in testing is none (i.e. all errors are caught with a friendly 500 page by default). For example, the popular user access library CanCan works via raising and catching `CanCan::AccessDenied` errors; should the middleware fail a test on access denied? Obviously not, so it must sit after `rescue_from`, which means you must not handle any type of 500 in order to have tests fail in the manner you propose. As a specific example of where this would be a problem, my current client has a `rescue_from` that catches application errors in the context of xhr requests and returns a `we're sorry` js message as a failsafe so that users don't get confused when javascript triggers act strangely in error cases. I would need to disable this during test for your solution, no?

With the solution I/we just proposed, it's possible that even access denied errors could get output. If the test succeeds, no feedback needed; if it fails, it lets you know that, by the way, an access denied occurred. I'm not sure if this last detail is something that would have been planned, but it's the sort of thing that falls out of the general strategy.

Again, sorry if this is something obvious I'm missing, but I don't see how you can get the behavior you desire without the requirement of the app not handling any 500 errors in your integration environment. And as someone else pointed out, where do you draw the line? What about 404, 422, etc? From the perspective of a browser, all it knows is a status code, and that's not in itself indicative of failed application logic.
",woahdae,2012-07-13 12:57:41
660,2012-04-09 10:14:40,"@woahdee: IIRC rescue_from is still run even if show_exceptions is false. We're talking about errors caught by the WebRick/Thin/whatever servers, which aren't bubbled.
",jnicklas,2012-07-13 12:57:41
660,2012-04-09 13:51:13,"@raggi: I agree that stdout/err is not reliable and doesn't play well with other tools.

Question: with this approach, would errors triggered by interactions (like `click_link`) be raised correctly? Should we check for errors _after_ delegating to the session?

All in all, I think we should try this approach first.
",djanowski,2012-07-13 12:57:41
660,2012-04-09 15:35:25,"> IIRC rescue_from is still run even if show_exceptions is false

Hm, didn't mean to imply otherwise... just to be clear, you're saying that all solutions require the error to hit webrick?
",woahdae,2012-07-13 12:57:41
660,2012-04-13 02:57:59,"@djanowski the server error would be raised first, which would prevent any interaction from actually occurring. This is essentially the same as if the error was raised by the server running synchronously as a callee of visit.

If you mean to ask about backtraces, those should be correct, so the output should not be confusing.
",raggi,2012-07-13 12:57:41
660,2012-07-13 13:08:28,"I spent some time with this pull request, and there were a couple of things about it I didn't really like, so I went in a slightly different direction with it. Let me explain what I did:

1) Moved the responsibility of starting the server to the session. As @raggi mentioned, this makes the implementation of this much easier, and it's a sensible thing to do anyway.

2) Capture error raised inside the application.

3) Re-raise those errors when `Session#reset!` is called.

The last point is obviously the controversial one, so let me explain why I did that. We obviously need some way of raising errors on the main thread, since, as @raggi explained, we would run into too many thread safety issues if we let the application thread raise those errors. So that leaves us two options:

1) require the user to manually check for and raise exceptions
2) raise exceptions automatically when some kind of user action occurs

This exception tried to go with option (2), but that has a huge problem, in my opinion: there are a huge amount of possible user actions in Capybara, and every single one of them would have to check for errors and raise them. Just jamming this in `visit` and only `visit` as this pull request did is confusing and insufficient. I considered going this route, but after realizing the sheer amount of methods I would have to add these checks to, I realized that it just isn't feasible without some crazy meta programming.

I chose to go with option (1) instead. At first I had a separate method, which I called `raise_error!`, but after spending some time with this, I realized that you always call `reset_session!` and `raise_error!` at the same time. There is no reason to call one without calling the other. Rolling this into `reset_session!` also gives us the added benefit that users of Capybara don't need to change anything about there code to benefit from this behaviour, no matter how they integrate Capybara into their workflow.
",jnicklas,2012-07-13 12:57:41
660,2013-01-20 14:48:34,"Is there a way to opt-out from this behaviour? We use dummy image url that we just test the url of that they don't really are on our server is not important. (and not realistic considering we then have to include thousands of images in our codebase) right now we get routing errors where tests fail under capybara 2 and pass under capybara 1. This prevents us from upgrading and limits us in the versions of libraries to use. I couldn't find an option in the documentation, maybe I'm missing something.
",matthijsgroen,2012-07-13 12:57:41
660,2013-01-20 18:14:51,"@matthijsgroen point the dummy image url somewhere other than your server...
",raggi,2012-07-13 12:57:41
660,2013-01-20 18:50:00,"Yeah did that now, but also ajax calls that return 500 to be resolved in the front-end seem to trigger this behaviour. But from 40 failing scenario's after the upgrade I'm now down to 13, so there is progress.
",matthijsgroen,2012-07-13 12:57:41
660,2013-09-26 13:18:53,"Currently Capybara only reraises server error when Capybara::Session.reset!() is called which means at the end of the test. When using Capybara for user stories, one typically makes successive interactions (visit, then click here, click there, fill form, click button, then make some expectations ).

If the server raises an error during the last step, then the backtrace is printed as expected but if the server raises an error during an intermediate step then the only error displayed is one about a node not being present (either because of a failed expectation or a failed interaction)

This problem is hidden when the server and the browser are in the same thread since Capybara Middleware stores the error and immediately reraise it. But when the server is another process/thread then the browser is not able to see the error reraised by the Capybara::Server::Middleware . It would be great to check for server errors (5xx) after every browser interaction.

I made the following (horrible) monkey patch to workaround the problem but I don't feel confident enough to make a PR. This patch is really awful since it redefines every DSL methods instead of only the browser interaction but it did the trick for my use case

I hope it'll help to solve the problem (I'm currently using poltergeist as driver but I'm pretty confident the problem is the same for every drivers which cannot rescue the error raised by the Capybara::Server::Middleware )

<S_CODE_TOKEN>
",Systho,2012-07-13 12:57:41
660,2013-10-13 18:40:25,"My original patch did this, but it was rejected.

On Thu, Sep 26, 2013 at 6:18 AM, Systho notifications@github.com wrote:

> Currently Capybara only reraises server error when
> Capybara::Session.reset!() is called which means at the end of the test.
> When using Capybara for user stories, one typically makes successive
> interactions (visit, then click here, click there, fill form, click button,
> then make some expectations ).
> 
> If the server raises an error during the last step, then the backtrace is
> printed as expected but if the server raises an error during an
> intermediate step then the only error displayed is one about a node not
> being present (either because of a failed expectation or a failed
> interaction)
> 
> This problem is hidden when the server and the browser are in the same
> thread since Capybara Middleware stores the error and immediately reraise
> it. But when the server is another process/thread then the browser is not
> able to see the error reraised by the Capybara::Server::Middleware . It
> would be great to check for server errors (5xx) after every browser
> interaction.
> 
> I made the following (horrible) monkey patch to workaround the problem but
> I don't feel confident enough to make a PR. This patch is really awful
> since it redefines every DSL methods instead of only the browser
> interaction but it did the trick for my use case
> 
> I hope it'll help to solve the problem (I'm currently using poltergeist as
> driver but I'm pretty confident the problem is the same for every drivers
> which cannot rescue the error raised by the Capybara::Server::Middleware )
> 
> module Capybara
>   module DSLMonkeyErrorCheck
> 
> <S_CODE_TOKEN>
> 
>   end
> end
> Capybara::DSL.send(:prepend, Capybara::DSLMonkeyErrorCheck)
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/pull/660#issuecomment-25166456
> .
",raggi,2012-07-13 12:57:41
660,2013-10-13 19:40:41,"@raggi @Systho it wasn't so much about the idea than about the implementation. I wanted something which would have made the behaviour at least somewhat predictable, but I was unable to find a sane way to do it. I think you guys may be right though that having catching errors early is better. I've run into these situations as well. So I think I'm open to adding a check to all DSL methods (which is better, before or after?). This doesn't cover everything that can be done with Capybara, but it would make raise errors earlier in _many_ cases, which is probably better than _never_, since I don't think we're going to get to _always_.
",jnicklas,2012-07-13 12:57:41
660,2013-10-14 16:58:21,"I think the rationale for catching the error early is that the error message is much more accurate than just having the following interaction or expectation crashing because some element is missing.

Therefore I would add a check after the interaction which might have failed instead of before the following interaction because the stacktrace would be misleading. If you chack for errors after interaction you can also limit the check to actions (click, visit, input manipulation, ...) and skip it for expectations. 
",Systho,2012-07-13 12:57:41
660,2013-10-14 21:40:04,"The problem with that reasoning is though that actions are often asynchronous, so the error may not have occured after the action is performed.
",jnicklas,2012-07-13 12:57:41
660,2013-10-15 07:07:01,"I didn't think of that problem.

Maybe the action methods could schedule  check and the expectations methods could perform the check after the wait but before their job. That would enable the client to handle the server error instead of the ""element missing"" error   and would not perform multiple checks when doing multiple assertions after a single interaction.
",Systho,2012-07-13 12:57:41
660,2013-10-28 23:46:52,"> @raggi @Systho it wasn't so much about the idea than about the implementation.

Sure. You may find it a good reference is all. It has the behavior you describe, but only hooks a single method - iirc. It was years ago now.

> I wanted something which would have made the behaviour at least somewhat predictable, but I was unable to find a sane way to do it.

I'm pretty sure it is predictable, if all session access causes a check. It's much like the semantics of a private errno in that regard.

> I think you guys may be right though that having catching errors early is better. I've run into these situations as well. So I think I'm open to adding a check to all DSL methods (which is better, before or after?).

Always before. The problem with after is that you can find the action causes more errors which will raise and take precedence, hiding the original error - in other words this falls back to todays harder to debug behavior. It's possible that before and after can lead to catching some more odd items, where the action causes an asynchronous error - but those are really really hard to make deterministic. As long as one can describe the behavior of when the check is done in a single sentence, and it is frequent, that's best.

> This doesn't cover everything that can be done with Capybara, but it would make raise errors earlier in many cases, which is probably better than never, since I don't think we're going to get to always.

Nod.
",raggi,2012-07-13 12:57:41
660,2013-10-28 23:50:46,"I think there's an important thing here, which is to focus on the right target. My target here is not to ""have errors always appear in the correct place"" - that's not possible, because there's no such thing as ""the correct place"" when crossing thread boundaries as this is. By contrast, what I want, is that errors are always raised before they cause a driver action to raise an only loosely related error. It is the latter that causes people to burn time into incorrect debugging, as in this case both the code position of the error and the message are invalid. We can fix one of these two items deterministically: the error message. We cannot fix the position, as already described, so making this aspect easier to understand is important. Hopefully this explains a little more why I say ""before""

I can probably expand some more on how I've observed teams and individuals approaching debugging flows in these scenarios, and how they react to the various output scenarios, if that helps.
",raggi,2012-07-13 12:57:41
660,2013-10-29 07:52:06,"The more I think about it, maybe we should somehow include this error check in the `synchronize` method. This way, it'll happen before almost everything you can do with Capybara, and we'll also raise the error if it happens after an action has been initiated. This would solve something like this:

<S_CODE_TOKEN>

If `Async action succeeded`'s check occurs right after `Cause async action`, we won't have caught the error in time, because it hasn't happened yet.
",jnicklas,2012-07-13 12:57:41
660,2015-08-03 07:32:10,"I know this issue has been officially closed but at the same time it does not yet work as expected. @jnicklas  do you have any idea on how you want to tackle this problem ? I think more and more app are using asynchronous drivers so I guess this problem will only amplify.
",Systho,2012-07-13 12:57:41
659,2012-03-05 14:29:33,"If a `Rack::Test`-based driver is registered with custom headers like this:

<S_CODE_TOKEN>

the `Accept-Language` header cannot be read on the server side in a Rack based app with the usual `request.env['HTTP_ACCEPT_LANGUAGE']`.

In order for the latter to work, the driver has to be registered like this:

<S_CODE_TOKEN>

It would be nice if we could provide headers with their intended names.

I am not sure if this is a pure Capybara (driver) issue or somehow tied into how `Rack::Test` works.

Here is a simple Sinatra based test: https://gist.github.com/1978140 .
",nmk,2012-07-10 13:32:15
659,2012-07-10 13:32:15,"I don't really think there's anything we can do about that in Capybara.
",jnicklas,2012-07-10 13:32:15
658,2012-03-03 10:41:24,"code that breaks:

<S_CODE_TOKEN>

It worked last year, but the current version fails with 

<S_CODE_TOKEN>

git bisect fingered this as the guilty commit:

https://github.com/jnicklas/capybara/commit/cc05b1d63b1201027da7b568a7bd0467df9f7e0a
",bryanlarsen,2012-03-03 10:58:12
658,2012-03-03 10:58:12,"Yes indeed, find will raise an error when there is an ambiguous match now. That CSS selector probably matches more than one item. Error messages have not caught up with this yet, which is why Capybara is not being very helpful.
",jnicklas,2012-03-03 10:58:12
658,2012-03-03 10:59:56,"The selector is ""a.task-link:first"".   If that's returning more than one item, then something else in capybara is broken.
",bryanlarsen,2012-03-03 10:58:12
658,2012-03-03 11:02:36,"Oops, didn't realize that :first was a jQuery exception.   I'll retry with :eq(0).
",bryanlarsen,2012-03-03 10:58:12
658,2012-03-03 11:08:59,"Blame jQuery and Nokogiri for not following the standard. There is no `:first` pseudo class according to the CSS3 spec, see here: http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#structural-pseudos. jQuery chooses to implement :first the way you expect it to behave, always returning the first _matched_ element. Capybara uses Nokogiri to convert CSS expressions to XPath. Your selector, `a.task-link:first` gets turned into this: `//a[contains(concat(' ', @class, ' '), ' task-link ') and position() = 1]`. Which means it will match _any_ link that has a class of task-list and is the first child of its parent. Effectively, Nokogiri implements `:first` as an alias for `:first-child` and they both generate identical XPath expressions.

I would argue that it would be more well behaved of Nokogiri not to implement selectors which aren't part of the CSS spec, but really, the behaviour they've implemented is definitely no more or less correct than the one in jQuery. Both are just shit the respective library authors made up.
",jnicklas,2012-03-03 10:58:12
658,2012-03-03 11:20:33,"Thanks for the detailed explanation.   Unfortunately I partially wasted some of your time because I noticed the same thing while you were writing up your explanation.   You do explain why I didn't get a more helpful error message though.   Rewriting my selector to use nth-child(1) fixed it, although it had to be a lot less simple to get the functionality of jQuery :first.

I'm going to open a bug against Nokogiri.
",bryanlarsen,2012-03-03 10:58:12
658,2012-03-03 13:15:35,"Not really sure that the jQuery type behaviour makes any sense in Nokogiri, you can just pick the first element. The idea in jQuery is that sometimes you really only want to work with the first match, and since jQuery only works with lists of nodes and never with single nodes, it saves you from stupid shit like `$($('a').get(0)).addClass('foo')`, instead simplifying that as `$('a:first').addClass('foo')`. In Nokogiri, that kind of selector is totally unnecessary.
",jnicklas,2012-03-03 10:58:12
658,2012-03-03 13:23:13,"Agreed -- I think :first in Nokogiri should return an error just to
prevent confusion.   People can always use :first-child.
",bryanlarsen,2012-03-03 10:58:12
658,2012-07-06 18:18:07,"Sorry to comment on a closed issue but it might be useful to people like me that will google it out in future.

This problem also happens if the html is not valid. I had `has_selector?(""#button-new-announcement"")` returning true and `should have_selector(""#button-new-announcement"")` failing. It turned out that the culprit was the surrounding `<p>` block of `<p><i><p>some text</p></i></p>` (that was created by a combo of helpers). Firefox marked it in red in View Source. Removing it made `has_selector?` and `have_selector` agree.

And yes, Nokogiri is quite picky. It doesn't like the id selectors generated by Globalize3 and , such has `announcement[translations_attributes][en]_description_editor`. The workaround was looking for the name of the element `page.should have_selector(""textarea"", :name => ""announcement[translations_attributes][#{locale}][description]"")`
",pmontrasio,2012-03-03 10:58:12
657,2012-03-03 00:04:28,"Hi 

I tried to look through the other issues to find an answer to this but couldn't so am thinking it might be a bug. Here is the ""bug"" (I think) that I found. 

I have a link that when clicked on opens a pop up box. I'm hiding the pop up box with a class of 'hide'. Something like 

<S_CODE_TOKEN>

When I create a test that looks like 

<S_CODE_TOKEN>

It fails. Now I can fix this problem by adding style=""display:none"" inline, however the css hide (which just does 'display:none') doesn't work. 

I've tried this on different applications with the same problem so I'm guessing either 1) It's a bug 2) I don't understand what .visible? is really suppose to do. 

Hope this helps. 
",fourcolors,2012-03-03 00:19:28
657,2012-03-03 00:19:28,"I'm guessing you're using RackTest. RackTest only looks at inline styles, since it does not have a CSS parser and does not check external stylesheets at all. This should work as expected in Selenium. This is really not a bug though, for performance reasons alone it doesn't make sense to have RackTest parsing CSS.
",jnicklas,2012-03-03 00:19:28
657,2012-03-03 00:22:14,"Oh I didn't know that. Good to know. So if I'm doing any testing that needs to check css elements etc, Selenium is used for that. Got it. 
",fourcolors,2012-03-03 00:19:28
656,2012-03-02 18:26:09,"Current if an exception happens while trying to start the server thread (for example the appropriate gem is not found), the user doesn't get any feedback other than ""server failed to start"".

I think the thread should set `Thread.current.abort_on_exception = true` so the user is immediately notified about such errors. Alternative, the inside of the thread could be wrapped in a `begin ... rescue ... end` that captures any error and prints out out with the ""server failed to start"" message.
",jonleighton,2012-03-07 09:07:00
656,2012-03-05 10:55:00,"http://ruby-doc.org/core-1.9.3/Thread.html#method-i-abort_on_exception-3D

I'm wondering if a failed server thread is bad enough that you'd always want to kill the main thread. Maybe it is.

We could also test for `#alive?`.

<S_CODE_TOKEN>

But I'd actually like to see a minimal example of a failing server so we can test this. I seem to recall that it's pretty hard to get the Identify server to die in the Timeout.timeout(60) part of the code, so perhaps this diff is not solving the problem at all.

Maybe we need to catch exceptions and print something helpful in the Thread.new block instead.

Let's keep this issue around until we have a failing test case for it.
",joliss,2012-03-07 09:07:00
656,2012-03-05 13:45:00,"In my case the error happened because I have a dependency in my Gemfile that depended on Thin. I upgraded that dependency, and it no longer depended on Thin. I also happened to not have Thin in my Gemfile independently. This means that the `require` in my `Capybara.server` block failed, but the only feedback I got was that the server failed to start, which made it quite hard to track down.
",jonleighton,2012-03-07 09:07:00
656,2012-03-05 20:16:24,"Interesting. Normally Capybara should fall back to Webrick if Thin isn't available, but perhaps something funny was going on.

Anyways, it sounds perfectly reasonable to have some helpful output. Perhaps a catch-all rescue in the Thread.new block and printing the exception to stdout might do the trick already.
",joliss,2012-03-07 09:07:00
656,2012-03-05 20:17:39,"Yeah - the reason it didn't fallback is because I had my own `Capybara.server` definition.
",jonleighton,2012-03-07 09:07:00
656,2012-03-06 21:51:56,"Related: #660
",joliss,2012-03-07 09:07:00
656,2012-03-06 21:56:02,"Thread.abort_on_exception is not thread safe and shouldn't be used.
",raggi,2012-03-07 09:07:00
656,2012-03-06 22:44:17,"See #661
",raggi,2012-03-07 09:07:00
656,2012-03-07 09:07:00,"Closing this then, cheers.
",jonleighton,2012-03-07 09:07:00
655,2012-03-02 09:00:05,"Posted this issue: http://stackoverflow.com/questions/9530414/capybara-timing-issue

Capybara intelligently waits to keep the sequence of test commands in sync with the UI. However, I've got a false positive from the following:
1. Fill in value to input field
2. Click link that incorrectly redirects to same page, wiping out previous value
3. Test checks value of the field. Since the redirect has not come back yet, the old value is still there, recording a false positive.

I was wondering if there is a way correctly test this case, **ensuring that incorrect case is caught**. Not surprisingly, when the code is fixed to use an ajax call, the test passes.

A more direct way to do the test would be to assert that the page did not redirect after clicking the link.
",justin808,2012-03-02 13:22:47
655,2012-03-02 13:22:47,"Not really sure what the problem is, what driver are you using? No idea what you mean with an incorrect redirect? At any rate, this is more of a question than an issue, which is better posted to the mailing list.
",jnicklas,2012-03-02 13:22:47
655,2012-03-02 18:57:42,"Incorrect redirect in that the user loses unsaved values. I wanted to use an ajax call with an omniauth authorization on a user edit page, but I couldn't figure out how to do that. Capybara sees the value in the field before the browser refreshes, so the condition passes. Thanks.
",justin808,2012-03-02 13:22:47
654,2012-03-02 02:05:02,"How about having the possibility to match the exact group of options for a select element?
Maybe the same could apply to the ones selected...
",grzuy,2012-03-26 11:09:46
654,2012-03-02 07:33:33,"Uhh, that already exists.
",jnicklas,2012-03-26 11:09:46
654,2012-03-02 07:35:29,"You can find this, unsurprisingly in the documentation for `has_select?`, http://rubydoc.info/github/jnicklas/capybara/Capybara/Node/Matchers#has_select%3F-instance_method
",jnicklas,2012-03-26 11:09:46
654,2012-03-02 18:54:48,"I was talking about being able to provide an option with the exact options you want to be matched, not a subset of them. Aren't they working that way now?
",grzuy,2012-03-26 11:09:46
654,2012-03-15 14:32:24,"No, they don't work that way now. Using it right now, all of the following return `true`:

<S_CODE_TOKEN>
",l0b0,2012-03-26 11:09:46
654,2012-03-15 15:50:52,"Hmm, that's true. Maybe we should just change that outright?
",jnicklas,2012-03-26 11:09:46
654,2012-03-15 16:06:02,"@l0b0 that's what i was trying to say, that they are matching options subsets, not the exact select options. And that it would be good to have some way to match the exact contained options.
",grzuy,2012-03-26 11:09:46
654,2012-03-16 00:24:13,"It would be good to support both matching behaviours:
- Filter to match a subset of select tag options
- Filter to match the exact group of select tag options

The question here would be whether to support a new filter (`:exact_options` ?) for the has_select matcher, or change the current api behaviour, making the current `:options` filter to match the exact set, and provide a new one to match a subset of them (maybe named `:included_options` ?)
",grzuy,2012-03-26 11:09:46
654,2012-03-19 09:21:45,"It would be very nice if this came coupled with a method which returns the current selection, perhaps as a hash with all the relevant information (`{index: 0, value: '1', text: 'First option'}`; an array of hashes for multi-selects) to enable different kinds of tests.

Another possibility would be to return _all_ options, with a `selected: [true/false]` property for each option. Contrived example:

<S_CODE_TOKEN>
",l0b0,2012-03-26 11:09:46
654,2012-03-24 21:15:44,"#675 merged, closing...
",grzuy,2012-03-26 11:09:46
654,2012-03-24 22:01:39,"Just realized when reading again that @l0b0 mentioned the `:selected` filter has the same problem the `:options` filter had :S

Maybe i'll create a new pull request to change that behaviour. I suppose it would make sense to provide `:selected` and `:with_selected` filters to keep them consistent with the `:options` and `:with_options` new filters.
",grzuy,2012-03-26 11:09:46
654,2012-03-25 02:25:45,"Actually not really sure if its worth supporting `:with_selected` filter. Maybe just fixing the behaviour of the `:selected` filter to match only the exact set of selected options could be fine. Thoughts?
",grzuy,2012-03-26 11:09:46
654,2012-03-25 10:31:25,"@grzuy I really hope there will be some way to get the selection, rather than having [a single function to validate it](https://github.com/jnicklas/capybara/issues/665). It allows testing a lot more different scenarios:
- The selection _is exactly_ a given set.
- The selection contains _at least_ a given set.
- The selection contains _one_ (or N, or minimum/maximum N) of a given set.
- The selection contains _none_ of a given set.
- The selection is empty.
",l0b0,2012-03-26 11:09:46
654,2012-03-25 14:38:29,"Getting the selection is actually fairly simple: `find_field('Some select').all('option').select(&:selected?)`

That should do the trick.
",jnicklas,2012-03-26 11:09:46
654,2012-03-26 11:09:46,"#676 merged
",grzuy,2012-03-26 11:09:46
654,2015-01-28 21:07:00,"Are there any plans to support something like `:with_selected` for a partial match?
",karlhe,2012-03-26 11:09:46
653,2012-03-01 23:32:01,"My use case is I would like actionmailer to generate sensible full-path links in emails, and I'd like to set `ActionMailer::Base.default_url_options[:host]` to `""#{Capybara.current_path}:#{Capybara.current_port}""` for js tests.

My use case seems reasonable, so is this a reasonable thing to have built in to capybara?

My current method of getting at the rack port is:

<S_CODE_TOKEN>

Thougts?
",woahdae,2012-03-02 00:00:55
653,2012-03-02 00:00:55,"After more experience with the capybara API, it turns out current_host doesn't do what I expected. I don't think this is a valid suggestion.

Thanks and sorry!
",woahdae,2012-03-02 00:00:55
653,2012-03-02 07:37:17,"You will find that this is much harder to implement than you'd might think. Capybara can use multiple concurrent sessions using either the same or different applications. A global accessor is a no-go.
",jnicklas,2012-03-02 00:00:55
652,2012-03-01 03:29:05,"Add support for `:type` option for both `has_field?` and `has_no_field?` matchers.
Closes #650
",grzuy,2012-03-01 08:16:08
651,2012-02-29 09:04:56,"Hi

Recently, when I use the latest Capybara gem from github in my Rails 3.2.0 app:

<code>gem 'capybara', :git => 'https://github.com/jnicklas/capybara.git'</code>
or
<code>gem 'capybara', :git => 'git://github.com/jnicklas/capybara.git'</code>

and I run the following test:

<pre>
<code>
before(:each) do
  @user = Factory(:user)
  @message = ""this is a message"" 
end

it ""should show the message on the senders screen"", :js => true do
  visit signin_path
  fill_in ""Name"", :with => @user.name
  fill_in ""Password"", :with  => @user.password
  click_button ""Sign In""
  fill_in ""message_content"", :with => @message
  click_button ""Send""
  page.should have_content(""#{@user.name}: #{@message}"")
end
</code>
</pre>


the test fails with the error:

Failure/Error: click_button ""Send"" Capybara::ElementNotFound: no button with value or id or text 'Send' found

However, if I change my Gemfile to use Capybara 1.1.2:

<code>gem 'capybara', ""~> 1.1.2""</code>

and run the test again with no other modifications to the app, the Send button is found and the test passes. And until recently, this test used to pass when using the latest capybara gem from github.

Notice that click_button is called twice from the test on two different buttons. The first button is found by capybara, but the second button is not found.

The HTML that contains the Send button, which capybara cannot find, is:

_'<input name=""commit"" type=""submit"" value=""Send"" />'_

However, I found that while using the latest capybara gem, if I add an id attribute to the button html:

<code><%= f.submit ""Send"", id: ""Send"" %></code>

and then replace:

<code>click_button ""Send""</code>

with

<code>find('input#Send').click</code>

with no other modifications to the app, capybara finds the button and the test then passes.

But I am wondering why click_button “Send” is not working any more. Perhaps I am over looking something or got something messed up.

I am using MRI Ruby 1.9.3p125. Some of my gems my app uses are:

Using rails (3.2.0)
Using rack (1.4.1) 
Using rack-test (0.6.1) 
Using rspec (2.8.0) 
Using rspec-rails (2.8.1)
Using selenium-webdriver (2.13.0)

Thank you!

Jack Flannery
",jmflannery,2012-02-29 09:31:38
651,2012-02-29 09:31:38,"You just posted the exact same thing to the mailing list, where I've already replied, why are you opening an issue???
",jnicklas,2012-02-29 09:31:38
651,2012-02-29 09:39:46,"Thanks! Sorry about that, for some reason I thought that my post in the mailing list did not go though.
",jmflannery,2012-02-29 09:31:38
651,2014-03-24 23:59:21,"is it possible to get the answer on here jnicklas?  I am running into the same problem with rspec reporting no button with value or id or text follow.  Thanks, been looking all over for the solution.
",tkinetik1,2012-02-29 09:31:38
651,2014-03-25 08:33:09,"@tkinetik1 if Capybara tells you there is no button, have you considered the possibility that there's no button ;) There is no  answer to this question, there are many, many reasons why Capybara might not find a button. Maybe it's invisible, maybe it's not actually there, maybe the text has different casing, is misspelled, etc...
",jnicklas,2012-02-29 09:31:38
651,2014-03-25 08:57:00,"Thank you johnathon niklas. I will look into that more.  I have asked the
question on stackoverflow. I dont have enough rep to give you credot but i
can ask someone for it. I have my code and github on there. The title is
railstutorial ajax 9.25 rspec.  Thank you for youe response. I will now
search for that.

Tkinetik1
On Mar 25, 2014 1:33 AM, ""Jonas Nicklas"" notifications@github.com wrote:

> @tkinetik1 https://github.com/tkinetik1 if Capybara tells you there is
> no button, have you considered the possibility that there's no button ;)
> There is no answer to this question, there are many, many reasons why
> Capybara canot find a button. Maybe it's invisible, maybe it's not actually
> there, maybe the text has different casing, is misspelled, etc...
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/651#issuecomment-38540471
> .
",tkinetik1,2012-02-29 09:31:38
650,2012-02-29 02:46:18,"It would be great to have matchers for email, search, phone, etc type inputs.

Could be something like:
<S_CODE_TOKEN><S_CODE_TOKEN>:type<S_CODE_TOKEN>:field<S_CODE_TOKEN>```
",grzuy,2012-03-01 12:14:38
650,2012-02-29 07:27:18,"The type option seems okay, but having separate matchers for these seems like overkill.
",jnicklas,2012-03-01 12:14:38
650,2012-02-29 14:24:48,"Yeah, could be too much...
I'll try to implement that soon
",grzuy,2012-03-01 12:14:38
650,2012-03-01 12:14:38,"Jonas just merged #652. Closing this. Thanks @grzuy!
",joliss,2012-03-01 12:14:38
649,2012-02-27 17:59:51,"I recently began getting an error when running Cucumber specs where a multipart form returned a selection_collection field with multiple => true. 

In my case, the selection_collection field relates an object to a habtm relationship.

<S_CODE_TOKEN>

where f is a form for a Cause object. 

When the spec hits the controller statement that saves the Cause object, I get the following error:

   Couldn't find Category with ID=0 (ActiveRecord::RecordNotFound)
   ./app/controllers/admin/causes_controller.rb:16:in `update'
   <internal:prelude>:10:in`synchronize'

When I run the same spec using Selenium (setting the @javascript tag) the spec passes. 

When run without selenium (and no options in the category_ids field selected), the params object contains:
    ""category_ids""=>[""[\""\""]""]

When run with selelenium, the params object contains:
    ""category_ids""=>[""""]

I have checked the params function in the Capybara::RackTest::Form class and it appears to be correctly returning an array with a single empty string. 

I also checked in the Rack::Test module, but can't discern whether the switch to an array of arrays is happening there, or within Capybara (or somewhere else, for that matter). 
",hoenth,2012-03-05 16:41:23
649,2012-02-27 18:46:14,"Are you on the latest version of everything? Rack, RackTest, Capybara, Cucumber, etc. I'm pretty sure this should be fixed.
",jnicklas,2012-03-05 16:41:23
649,2012-02-27 18:55:47,"Perhaps not. Here is what I am using. Do any seem out of date. 

rails 3.0.7

capybara (1.1.2)
cucumber (1.0.2)
cucumber-rails (1.0.2)

rack (1.2.5)
rack-mount (0.6.14)
rack-rewrite (1.0.2)
rack-test (0.5.7)
",hoenth,2012-03-05 16:41:23
649,2012-02-27 19:02:01,"I just updated to cucumber 1.0.6, but no luck. 
",hoenth,2012-03-05 16:41:23
649,2012-02-28 11:11:16,"The latest release of Rack is at 1.4.1, RackTest at 0.6.1. You're out of date on both fronts. Please upgrade these and see if that fixes anything.
",jnicklas,2012-03-05 16:41:23
649,2012-03-05 15:40:49,"Unfortunately, rails 3.0.11, which is what our project is still using, requires rack  ~> 1.2.1, so I can't yet upgrade to rack 1.4.1
",hoenth,2012-03-05 16:41:23
649,2012-03-05 16:41:23,"You should really upgrade to Rails 3.1. If you switch off the asset pipeline, there are hardly any incompatibilities. Unfortunately we can't fix this bug in Capybara, so you'll have to either upgrade or switch to a different driver.
",jnicklas,2012-03-05 16:41:23
648,2012-02-23 06:05:05,"In a recent project, I wanted to add a selector that required more than 1 argument. For example:

**sorry, I know this is a bad example since DOM elements can be found just from the id alone, but this is the best I could come up with at midnight. :)**

<S_CODE_TOKEN>

I attempted to implement it by using a splat inside [`Capybara::Query#initialize`](https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L12-21):

<S_CODE_TOKEN>

The test I wrote passed, but it broke other things. This didn't seem like a very good implementation anyway, just an attempt. What do you think?
",ordinaryzelig,2012-07-10 13:14:14
648,2012-02-23 06:12:24,"Forgot to mention that as a workaround, currently, I'm passing an array and splitting it into multiple arguments:

<S_CODE_TOKEN>

Works, but not terribly pretty.
",ordinaryzelig,2012-07-10 13:14:14
648,2012-07-10 13:14:14,"I think this would be difficult to implement without messing up all that magic going on with selectors somewhere. We might reconsider the selector API in the future, until then I don't think this makes sense.
",jnicklas,2012-07-10 13:14:14
647,2012-02-18 21:32:29,"Ok, slightly more digestible version I hope.

Tested Capybara cuke tests on Cucumber 1.1.4 and 1.1.5.

(previous pull request: https://github.com/jnicklas/capybara/pull/644)
",e2,2012-02-23 00:15:39
647,2012-02-19 16:11:20,"Closing, now that this got sorted out with Cucumber 1.1.7. Discussion at #644.

Thanks for the pull request anyway!
",joliss,2012-02-23 00:15:39
647,2012-02-19 21:31:33,"@joliss - please reopen this issue (I don't have permission, even if it's my own pull request)

The reason: patch still applies, since now people will be bothered with deprecation warnings.

Unless Capybara is going to allow only cucumber < 1.1.5 from now on, which I don't think makes sense, because of other Cucumber fixes present.

Thanks!
",e2,2012-02-23 00:15:39
647,2012-02-19 21:39:09,"@jnicklas - I don't know the policy behind closing a pull request (which I now believe means ""reject"" irrevocably), so please manually merge the commit or comment the patch.

I've created too many pull requests for this issue already to add more noise.
",e2,2012-02-23 00:15:39
647,2012-02-19 23:51:19,"(Reopening is no problem, actually -- I just reopened it for you. GitHub is just annoyingly restrictive about who gets to do that.)

I'm actually not sure though that having those kinds of conditionals is good practice. I think we _can_ if we have to, but I'd argue that it shouldn't be deprecated for this exact reason (that is, other libraries like Capybara having to do hacky conditionals).

Hm, I just noticed that Cucumber 1.1.8 re-added the deprecation warnings. :(

I think they're totally pointless -- it would be better to just remove it without warning in 2.0.0, since the warnings nag people who can't do anything about it (i.e. Cucumber users).

Oh well. Cc @aslakhellesoy in case he changes his mind.

Let's wait and see. Or maybe Jonas has an opinion.
",joliss,2012-02-23 00:15:39
647,2012-02-20 00:26:12,"Thanks, @joliss - since you were able to reopen it, I believe the restrictions make sense.

I agree about the warnings, but I don't think it should be fixed on the Cucumber side because ...

... the api changes reflect changes in Gherkin (using a Tag object instead of strings):

  https://github.com/cucumber/gherkin/blob/45335f757af46b956c8259e02875068b6a596911/spec/gherkin/tag_expression_spec.rb

The diffs are here (scroll down for Ruby api part):

  https://github.com/cucumber/gherkin/commit/45335f757af46b956c8259e02875068b6a596911

So, Capybara should either handle two api's or use the new api along with dep version bumps in cucumber-rails.

I think handling two different methods with the above hack isn't that bad, because it doesn't require reverting about 30 lines in different files in Cucumber to undo good refactoring and replacing strings with tag objects.
",e2,2012-02-23 00:15:39
647,2012-02-20 00:49:37,"Guys, Matt and I have made new cucumber releases to restore the old API, so no Capybara changes should be necessary at all. -Unless you want to get rid of the deprecation warning of course.
",aslakhellesoy,2012-02-23 00:15:39
647,2012-02-20 01:43:55,"@aslakhellesoy - yes, the deprecation warnings are the only reason this was reopened :)
",e2,2012-02-23 00:15:39
647,2012-02-23 00:15:39,"Cucumber 1.1.9 was released, removing deprecation warnings, so the patch isn't needed.

Thanks everyone and happy coding!
",e2,2012-02-23 00:15:39
646,2012-02-18 19:28:58,"Latest Gherkin update changed the method name from `source_tag_names` to `source_tags`.
",doolin,2012-02-18 19:45:17
646,2012-02-18 19:45:28,"Closed in favor of https://github.com/jnicklas/capybara/pull/644
",doolin,2012-02-18 19:45:17
645,2012-02-18 17:28:48,"I experienced an error with a latest (1.1.5) cucumber and Capybara. Tests are failing with complaining about some missing methods, what capybara uses.

Please see this paste: http://pastie.org/3408967 for details. 
",hron84,2012-02-18 17:32:50
645,2012-02-18 17:32:50,"Yup, we already have an issue for that, actually: https://github.com/jnicklas/capybara/pull/644

Thanks for reporting!
",joliss,2012-02-18 17:32:50
644,2012-02-18 05:59:45,"Cucumber 1.1.5 renames a few things, notably:

  source_tag_names

to

  source_tags

The patch allows Capybara to handle both versions.

Cheers,

Cezary
",e2,2012-02-18 21:34:06
644,2012-02-18 11:58:25,"The corresponding issue on Cucumber: cucumber/cucumber#227
",rtlong,2012-02-18 21:34:06
644,2012-02-18 12:16:15,"Cc: @aslakhellesoy

Wait, how come stuff is breaking for us at a patch-level release? Is source_tags not part of Cucumber's public API? Should we be using something different?
",joliss,2012-02-18 21:34:06
644,2012-02-18 12:32:34,"My bad, I would have bumped minor if I realised someone else used this API. It didn't occur to me that Capybara would.

This fix is broken though, source_tags returns an Array of Tag, so a #map is needed.
",aslakhellesoy,2012-02-18 21:34:06
644,2012-02-18 12:40:10,"> My bad, I would have bumped minor if I realised someone else used this API. It didn't occur to me that Capybara would.

Haha, oh well. :-)

I wonder, rather than breaking things for users of Capybara 1.1.2 and adding ugly `responds_to` hackery to Capybara 1.1.3, perhaps it's easier to re-add the source_tag_names (either using .map or using the original implementation) to Cucumber, and push Cucumber 1.1.6 this weekend? Aslak, what are your thoughts?

Thanks for all your hard work on Cucumber, by the way!
",joliss,2012-02-18 21:34:06
644,2012-02-18 12:43:14,"By the way, for anyone looking to test Capybara's Cucumber integration: There is a Cucumber feature suite in Capybara to exercise it (""rake cucumber"").
",joliss,2012-02-18 21:34:06
644,2012-02-18 19:44:35,"I missed this and submitted a not-as-good pull request, which I'll go ahead and close in favor of this one (which is better).
",doolin,2012-02-18 21:34:06
644,2012-02-18 20:21:17,"I agree with @joliss, it seems very hack-ish for us to add some kind of workaround for this, any chance cucumber can bring back the `source_tag_names` method, @aslakhellesoy?
",jnicklas,2012-02-18 21:34:06
644,2012-02-18 20:42:43,"Hi everyone!

Sorry about the sloppy, ""bogus"" fix. I just got hit by the wrong set of gems and I was in a real, hurry.

@aslak - yes, I read the code wrong and missed the tags - I thought that if I got it wrong, it would break.

I didn't see a specific test in capybara/features, so I left that till later (to avoid pulling the older gems for testing).

Basically, I just wanted to use a pull request as a quick workaround/bug report for a discussion - until I get more time to look into the problem.

Sorry about that.
",e2,2012-02-18 21:34:06
644,2012-02-18 21:34:06,"I fixed it: https://github.com/jnicklas/capybara/pull/647

The hack can be removed if Cucumber 1.1.6 renders it unnecessary and 1.1.5 can be marked as a conflict.

But since the damage is already done ...
",e2,2012-02-18 21:34:06
644,2012-02-18 21:43:20,"I've pushed a commit to Cucumber that adds #source_tag_names back, mapping over the tags to return their #name.

I can't work out how to test it (good old gnarly Cucumber codebase!) and only have a few minutes, so I'm flying blind. Can someone please either just sanity check or ideally manually test the patch?

https://github.com/cucumber/cucumber/commit/844fefea2a31bf956610e4d1ee1bca2e14e3fc53
",mattwynne,2012-02-18 21:34:06
644,2012-02-18 23:52:36,"Thanks Matt! I tested it in Capybara like so

<S_CODE_TOKEN>

and ""rake cucumber"" now doesn't choke on source_tags, but instead reports that the driver switching isn't working anymore:

<S_CODE_TOKEN>

Hm, too bad. I'm not sure off the top of my head _what's_ going wrong. Perhaps it's the updated Gherkin, even.

I tested b7d7e97 (v1.1.15^) though, and it works fine. May I suggest you revert to b7d7e97 and push v1.1.6 with that?

Then we can re-try adding 4bc5ed6 (""Upgraded to gherkin 2.3.8"") with more time to figure out what's going wrong.

Btw, re 844fefea (""Add back Scenario#source_tag_names for #227""), I wonder if source_tag_names really has to be deprecated. Semver says that you shouldn't deprecate API without bumping the minor, but even when you go to 1.2.0, is there any need to deprecate it? Capybara for instance wouldn't be able avoid those deprecations without bumping its Cucumber dependency, so they'll just clutter the terminal and annoy users.
",joliss,2012-02-18 21:34:06
644,2012-02-19 01:10:11,"expected: :selenium
     got: :rack_test

It probably means instead of a string (tag -> ""@selenium"") it got a Tag instance (<....::Tag, @name=""@selenium"">) dump as a string, so it defaulted to :rack_test.

In short, the test is using scenarios.source_tags instead of scenarios.source_tags.map(&:name).

It's strange you are getting this, @joliss. I would have expected you to get the same error as here: https://github.com/cucumber/cucumber/pull/229

P.S. With all the chaos around this, I believe @aslak will never again change anything in Cucumber without deprecation ;) Cucumber is just so cool, that people are using every dark corner of Cucumber for whatever they need. And the noise also points out how crucial Capybara is for everyday life.
",e2,2012-02-18 21:34:06
644,2012-02-19 08:48:16,"On 18 Feb 2012, at 23:52, Jo Liss wrote:

> Thanks Matt! I tested it in Capybara like so
> 
>    diff --git a/Gemfile b/Gemfile
>    index 07a1f43..32116d9 100644
>    --- a/Gemfile
>    +++ b/Gemfile
>    @@ -5,3 +5,6 @@ gemspec
> 
> <S_CODE_TOKEN>
> 
>    +
>    +@dependencies.delete_if { |d| d.name == ""cucumber"" }
>    +gem 'cucumber', :path => '~/src/cucumber'
> 
> and ""rake cucumber"" now doesn't choke on source_tags, but instead reports that the driver switching isn't working anymore:
> 
>    expected: :selenium
>         got: :rack_test (using ==)
>    ...
>    features/capybara.feature:23:in `Then Capybara should use the ""selenium"" driver'
> 
> Hm, too bad. I'm not sure off the top of my head _what's_ going wrong. Perhaps it's the updated Gherkin, even.

Thanks @joliss. Could you re-try this with the current HEAD of Cucumber? I just ran Capybara's features against that and they all passed. 

There also weren't any deprecation warnings! Perhaps the pixies fixed them?

> I tested b7d7e97 (v1.1.15^) though, and it works fine. May I suggest you revert to b7d7e97 and push v1.1.6 with that?
> 
> Then we can re-try adding 4bc5ed6 (""Upgraded to gherkin 2.3.8"") with more time to figure out what's going wrong.

You're quite right, that's what we should have done in the first place. If we haven't got this straightened out before Monday morning that's what we'll do.

> Btw, re 844fefea (""Add back Scenario#source_tag_names for #227""), I wonder if source_tag_names really has to be deprecated. Semver says that you shouldn't deprecate API without bumping the minor, but even when you go to 1.2.0, is there any need to deprecate it? Capybara for instance wouldn't be able avoid those deprecations without bumping its Cucumber dependency, so they'll just clutter the terminal and annoy users.

Hmm yes. My immediate thought is - ""but then how do we remove this kind of clutter from Cucumber?"" but of course otherwise we're expecting you guys to have to put backwards-compatiblity hacks like #647 in. I don't mind taking the deprecation warnings out - we can just flag that method up as something we remove in the next major release, I suppose.
",mattwynne,2012-02-18 21:34:06
644,2012-02-19 15:26:20,"@mattwynne the missing deprecation in outline_table.rb (my fault!) was added after 1.1.7

So most capybara users won't have deprecation warnings until the next Cucumber version bump.

Also, with such mature and popular ""gems"" (no pun intended!) as Cucumber and Capybara, it might make sense to have versioned API layers in Cucumber - and deprecate an api version as a whole.

Deprecation warnings would show on startup, while allowing you and @aslak to clean up the api as much as you please - and api users would choose if they want a ""stable/versioned api"" or ""development"" api.
",e2,2012-02-18 21:34:06
644,2012-02-19 15:56:46,"Tech first:

Matt wrote:

> Thanks @joliss. Could you re-try this with the current HEAD of Cucumber?

Yup, it works great with 1.1.7, and with HEAD 5731b64, it passes but throws deprecation warnings.

I'm not sure that source_tag_names is bad enough to be deprecation-worthy with a minor bump (I'd perhaps wait till version 2.0), but I shall not bike-shed -- it's you guys's call.

@e2 wrote:

> In short, the test is using scenarios.source_tags

(In case this still matters: I'm pretty sure I ran the test on a pristine Capybara HEAD, which uses source_tag_names, though I don't know what actually caused the issue.)
",joliss,2012-02-18 21:34:06
644,2012-02-19 16:09:57,"Talk second:

@e2 wrote:

> P.S. With all the chaos around this, I believe @aslak will never again change anything in Cucumber without deprecation ;)

Haha, yeah -- I'm glad I got to make this experience vicariously. ^_^

> Cucumber is just so cool, that people are using every dark corner of Cucumber for whatever they need. And the noise also points out how crucial Capybara is for everyday life.

Yup. Funny how reports about the breakage started coming in within hours of the release.

@mattwynne wrote:

> My immediate thought is - ""but then how do we remove this kind of clutter from Cucumber?"" but of course otherwise we're expecting you guys to have to put backwards-compatiblity hacks like #647 in. I don't mind taking the deprecation warnings out - we can just flag that method up as something we remove in the next major release, I suppose.

I agree -- I guess it's one of these unpleasant facts of open-source library maintenance that you only get to remove clutter something like once a year (at best).

@e2 wrote:

> it might make sense to have versioned API layers in Cucumber - and deprecate an api version as a whole.

I'm thinking that might actually be overkill -- I'm personally not _that_ concerned about breaking things (within reason) between majors, dropping compatibility entirely.

---

What I think this mess demonstrates is this: When we publish libraries, it really pays to be careful about deciding and communicating what is and isn't public API, and when we use other people's libraries, we should read up on the API documentation (or pester the developers) so we don't accidentally use private methods. Just as a general thought.

Anyways, glad we got this sorted out! Thanks for spending your weekend time. :-)
",joliss,2012-02-18 21:34:06
644,2012-02-19 20:32:50,"@joliss Actually, I take back what I said about the API.

Capybara is a _runtime_ _dependency_ of cucumber-rails:

  https://github.com/cucumber/cucumber-rails/blob/master/cucumber-rails.gemspec

Which means every Cucumber change should be tested against Capybara, to make sure cucumber-rails doesn't end up ""broken"".

Also, cucumber-rails is a good point to handle version conflict information between Capybara and Cucumber.

I'm not sure cucumber-rails can actually work without Rails itself (runtime), but it may be the best solution to give maintainers more development flexibility, while providing the stability through versioning in cucumber-rails.

Because of that, I was wondering if cucumber-rails could be renamed to cucumber-web to handle things like sinatra, etc.
",e2,2012-02-18 21:34:06
644,2012-02-20 10:38:08,"On 19 Feb 2012, at 16:09, Jo Liss wrote:

> What I think this mess demonstrates is this: When we publish libraries, it really pays to be careful about deciding and communicating what is and isn't public API, and when we use other people's libraries, we should read up on the API documentation (or pester the developers) so we don't accidentally use private methods. Just as a general thought.

+1. We've put very little thought or effort into this with Cucumber, as yet. Aslak's surprise that Capyara would be depending on this method demonstrates that.

> Anyways, glad we got this sorted out! Thanks for spending your weekend time. :-)

No worries. :)
",mattwynne,2012-02-18 21:34:06
643,2012-02-17 23:14:33,,joliss,2012-04-20 20:15:34
643,2012-02-17 23:16:49,"This shouldn't change anything, except that we're now returning true instead of a results Array. Test suite still passes.
",joliss,2012-04-20 20:15:34
643,2012-04-20 20:15:34,"Closing for lack of enthusiasm :)
",joliss,2012-04-20 20:15:34
642,2012-02-17 13:00:33,"I would to be able to do that:

<S_CODE_TOKEN>

My assertion should guarantee I have 3 rows in a table on my index page having the same date.

What you think about :count option on has_content?

Have another way to do that?

Currently I'm using:

<S_CODE_TOKEN>

But seems fragile...
",sobrinho,2013-03-18 13:55:37
642,2012-02-17 13:15:43,"+1 for this
",tomas-stefano,2013-03-18 13:55:37
642,2012-06-19 19:41:42,"@jnicklas would you accept a pull request with this functionality?
",sobrinho,2013-03-18 13:55:37
642,2012-06-29 10:30:29,"+1 for this too
",johnlane,2013-03-18 13:55:37
642,2012-06-29 12:00:03,"If we do this, we need to support all the other options, like `maximum`, `minimum`, etc... as well. Also it might be confusing that there are some options we really can't implement on has_content, like `visible`, that those are supported for some matchers, but not others. The fact that `has_content` currently does not take any options, works around that a little.
",jnicklas,2013-03-18 13:55:37
642,2012-07-15 03:38:53,"That's ok.
",dodops,2013-03-18 13:55:37
642,2012-09-28 07:27:21,"For the count option you would probably also expect

<S_CODE_TOKEN>

to be equivalent to

<S_CODE_TOKEN>

However that is not the case for `have_xpath` or `have_css`, IMHO that is a bug. I have created a pull request (https://github.com/jnicklas/capybara/pull/833) to make them behave like that. Please comment on that.
",jarl-dk,2013-03-18 13:55:37
642,2012-12-19 17:42:50,"@jnicklas Why `maximum` and `minimum` must be supported? They aren't supported by `has_css` so I don't know why they should be supported by has_content.

I don't think it will be bad if the only possible option for `has_content` will be `count`
",abotalov,2013-03-18 13:55:37
642,2012-12-19 18:35:35,"@abotalov they are supported by has_css.
",jnicklas,2013-03-18 13:55:37
642,2013-03-18 18:42:23,"Thanks! :heart:
",sobrinho,2013-03-18 13:55:37
641,2012-02-16 23:16:56,"## Problem

The `have_selector` method generates the following error when it cannot find a matching element for a given (in this case css) selector:

<S_CODE_TOKEN>

When using a `:count` option to the `have_selector` call (using a selector that matches elements) it generates the same error when the given count is bigger than number of found elements.
## Cause

The `error`-method on the `Query` class does not check for the presence of the `@options[:count]` (e.g. as the `HaveMatcher` class' failure message method does).
## Solution

I've added the condition to the `error`-method and I've added some tests for it (also made some changed some descriptions of specs that were not correct - couldn't help it ;)). 

FYI: I'm working on a refactoring to remove the duplication in the failure message generation - hope to be able to squeeze in some hours this weekend. 
",robinroestenburg,2012-07-09 15:21:24
641,2012-06-20 09:37:42,":thumbsup:
",flexoid,2012-07-09 15:21:24
641,2012-07-09 15:21:24,"This is obsoleted by recent changes.
",jnicklas,2012-07-09 15:21:24
640,2012-02-15 06:42:13,"With a spec:

<S_CODE_TOKEN>

I get:

<S_CODE_TOKEN>

It would be good if this would be supported since `:disabled` pseudo-class is [part of w3.org](http://www.w3.org/wiki/CSS/Selectors/pseudo-classes/:disabled).

Current workaround is to assert against a specific css class added to the element or wrapper.
",dnagir,2012-02-15 23:53:50
640,2012-02-15 06:46:51,"Alternatively we can just use the selector: `select:not([disabled])` which is almost the same as `:disabled` pseudo.
",dnagir,2012-02-15 23:53:50
640,2012-02-15 08:44:26,"Capybara uses Nokogiri to convert CSS selectors to XPath. I think
Nokogiri only support CSS2 selectors and _some_ CSS3 selectors, not
the full spec. Just FYI, :not isn't part of any CSS spec as far as I
can see, I think that's something the jQuery guys just made up.

/Jonas

On Wed, Feb 15, 2012 at 7:42 AM, Dmytrii Nagirniak
reply@reply.github.com
wrote:

> With a spec:
> 
> <S_CODE_TOKEN>
> 
> I get:
> 
> <S_CODE_TOKEN>
> 
> It would be good if this would be supported since `:disabled` pseudo-class is [part of w3.org](http://www.w3.org/wiki/CSS/Selectors/pseudo-classes/:disabled).
> 
> Current workaround is to assert against a specific css class added to the element or wrapper.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/640
",jnicklas,2012-02-15 23:53:50
640,2012-02-15 23:32:46,"Ok. So I suppose there's nothing to do with Capybara RE `:disabled`.

But since there is a way to do  it now (although it is semantically different) I guess this issue can be closed?

BTW, As far as I can see the `:not` pseudo is [part of CSS](http://www.w3.org/wiki/CSS/Selectors/pseudo-classes/:not) actually. Not sure about the details though.
",dnagir,2012-02-15 23:53:50
640,2012-02-15 23:53:50,"Ahh, my bad, sorry. Yes, I guess let's close this. If you really want it, ask the Nokogiri guys.
",jnicklas,2012-02-15 23:53:50
639,2012-02-14 19:36:40,"On Sun, Jan 22, 2012 at 23:18, Marc Schwieterman (@marcisme) wrote:

> The behavior of current_url and current_path when pushState/
> replaceState are used appears to currently be undefined in the
> Capybara specs. This allows for inconsistent behavior between
> different driver implementations. For example at the time of this
> writing the Selenium driver included with Capybara returns the value
> as modified by Javascript, but capybara-webkit does not.
> 
> I would be happy to contribute some specs, but I wanted to get input
> on where they should go, and what they should cover. It appears that
> all the Javascript related specs live in lib/capybara/spec/session/
> javascript.rb. I came up with the following to cover the specific
> cases that have been causing me trouble.
> 
> --- a/lib/capybara/spec/session/javascript.rb
> +++ b/lib/capybara/spec/session/javascript.rb
> @@ -297,6 +297,20 @@ shared_examples_for ""session with javascript
> support"" do
>         @session.should have_no_text(""I changed it"")
>       end
>     end
> +
> -    describe ""#current_path"" do
> -      it ""is affected by pushState"" do
> -        @session.visit(""/with_js"")
> -        @session.execute_script(""window.history.pushState({}, '', '/
>   pushed')"")
> -        @session.current_path.should == ""/pushed""
> -      end
>   +
> -      it ""is affected by replaceState"" do
> -        @session.visit(""/with_js"")
> -        @session.execute_script(""window.history.replaceState({}, '',
>   '/replaced
> -        @session.current_path.should == ""/replaced""
> -      end
> -    end
>     end
>    end
> 
> Is this something that should be covered in the specs?
> 
> -Marc
",joliss,2012-07-10 13:12:03
638,2012-02-10 21:16:30,"Using 1.1.2, 

<S_CODE_TOKEN>

I'm using handlebars to render some JS templates in my app but, since updating to Rails 3.1, my JS is not being loaded when root_path is visited the second time to run the 'doesnt work' spec. Is there something I am missing here? I know that Capybara had some updates made to it for the Asset Pipeline but are these fixes in 1.1.2? If not, could someone shed some light on what I am doing wrong to get this behavior?

edit: logs

<S_CODE_TOKEN>
",BrandonMathis,2012-02-10 21:23:25
638,2012-02-10 21:23:25,"I'm not sure what's going wrong there. Capybara 1.1.2 definitely plays nice with Rails 3.1/3.2's asset pipeline, so things _should_ work.

May I recommend that you ask on the Capybara mailing list? This issue tracker is meant for reproducible bugs only.
",joliss,2012-02-10 21:23:25
637,2012-02-10 11:53:22,,rohit,2012-02-10 12:21:13
637,2012-02-10 12:21:21,"It is indeed :)
",jnicklas,2012-02-10 12:21:13
636,2012-02-09 10:33:07,"Consider the following page:

<S_CODE_TOKEN>

And the following test:

<S_CODE_TOKEN>

The rendered PNG will correctly display ""clicked"" in the test DIV, while the `save_and_open_page` will re-run the initialization JavaScript and overwrite the test DIV once again with ""unclicked?"".

The expected behavior:
1. Page loads. The DIV displays ""not clicked"".
2. The initialization script runs. The DIV displays ""unclicked?"".
3. The `click_button` call is made, and the DIV displays ""clicked"".

This appears to work for the `render` but not `save_and_open_page` because the latter causes the initialization script to be re-run.

Is there a workaround to prevent `save_and_open_page` from re-running included scripts which were already run in headless mode?
",cvincent,2012-02-09 10:34:28
636,2012-02-09 10:34:28,"Apologies; this belongs to the capybara-webkit repo.
",cvincent,2012-02-09 10:34:28
635,2012-02-07 12:53:15,"When I use capybara in a cucumber step like this

<S_CODE_TOKEN>

Then it fails with

<S_CODE_TOKEN>

I'll attach a patch
",jarl-dk,2012-02-07 14:19:28
635,2012-02-07 12:57:56,"Here is a patch just copy-paste and apply `git am`

<S_CODE_TOKEN>

There you go.
",jarl-dk,2012-02-07 14:19:28
635,2012-02-07 14:19:27,"That's not an official API at all. If you want to issue HEAD requests, use a library like rack-test, which was actually built for that. Capybara is an acceptance/integration testing library, it doesn't concern itself with low-level HTTP stuff.
",jnicklas,2012-02-07 14:19:28
635,2012-02-07 14:42:17,"Thanks for the reply ...

Does that mean you completely discourage any kind of use of cucumber-api-steps (https://github.com/jayzes/cucumber-api-steps) which exploits these areas of capybara?

cucumber-api-steps cannot support HEAD (like it does for GET, POST, DELETE, PUT, etc.) because of this one line missing in capybara.

Jarl
",jarl-dk,2012-02-07 14:19:28
635,2012-02-07 14:54:19,"I'd never seen that library before. I wouldn't use it. Not only does it excessively use private APIs inside Capybara, which are liable to change and break in the future, but it's also fundamentally flawed in concept. I wrote a blog post a while ago about why I think that is: http://elabs.se/blog/15
",jnicklas,2012-02-07 14:19:28
635,2012-02-08 10:10:04,"I completely agree with you (regarding your blog), but your blog is addressing using cucumber with internally known ids and strings. What cucumber-api-steps is addressing is using cucumber for black box testing public (to the application users) HTTP APIs. You may think that

1) Cucumber is not the right tool for testing public http APIs.
2) Cucumber could be a tool for testing public http APIs, but using capybara to implement such cucumber steps (as in cucumber-api-steps) is not the right tool for implementing such steps.

I may agree with you on (2) as capybara is not intended to be used on HTTP protocol level, but merely on visual (browser) user experience level.

I still think that Cucumber is not so bad for testing public http API, though the features might be very technical, because they describe use cases on a HTTP level. But that is more a result of the fact that feature descriptions (when describing a http API) are very technical. As long as cucumber is used for black-box testing I find it not too bad, not for white-box testing as your examples do on your blog.

So as I understand you; If I would like to use cucumber for back box testing public APIs, I should implement cucumber steps using Rack::Test in stead of using capybara, right?

Anyway thanks for your comment and reason for closing this issue, I respect it.
",jarl-dk,2012-02-07 14:19:28
634,2012-02-07 03:52:54,"Hi,

So it appears there's a bug in have_*.  If I do `page.has_select? 'Staff Member'`, great it finds the select.  If I do `page.should have_select 'Staff Member'` on the other hand, not so great as it doesn't find the select.  Doing `page.should have_select 'users[id]'` which is using the name param, it finds the select no problem.  This is the same behavior for have_field.

Any ideas? (let me know if you need anything)

Many thanks
",cj,2012-02-07 04:32:13
634,2012-02-07 04:18:41,"Hm, interesting. It's possible that there is a bug in Capybara, but I suspect it's something with your code.

Are you sure `puts page.has_select? 'Staff Member'` prints true? Remember, it's not an RSpec expectation, so if you don't check the return value, it is silently discarded.

If you need more help, may I suggest that you use the Capybara mailing list? This issue tracker is meant for reproducible bugs only.
",joliss,2012-02-07 04:32:13
634,2012-02-07 04:27:29,"@joliss you're right.... that returned false.  I thought has_select checks the label of the field, according to the docs http://rubydoc.info/github/jnicklas/capybara/Capybara/Node/Matchers#has_select%3F-instance_method

![](https://dl.dropbox.com/u/71697/jing/2012-02-06_2224.png)

So why would `page.should have_select 'Staff Member'` be returning false.  A print out and `save_and_open_page` shows the html is there.....

p.s. sorry I thought it was a bug.
",cj,2012-02-07 04:32:13
634,2012-02-07 04:32:13,"Yes, from the screenshot you posted I'd say it should match the label alright. To be honest, I'm not sure what's going wrong with your app -- you'll have to do some more debugging I'm afraid.
",joliss,2012-02-07 04:32:13
634,2012-02-07 04:33:47,"@joliss why would you say it's my app?  If I do `page.should have_select 'user[acd_api_id]'` it returns true.  So surely this is a bug......

edit: typo
",cj,2012-02-07 04:32:13
634,2012-02-07 04:36:37,"Capybara is used by a lot of people, so in simple cases like this, _usually_ something is going wrong between the test code and the app -- otherwise somebody else would have likely discovered it before. Of course I'm willing to be convinced otherwise if you post a test case that I can run, demonstrating a bug.

Other than that, if you need more help, please ask on the mailing list! More people are subscribed to it, and your chances of getting help are much better than here.
",joliss,2012-02-07 04:32:13
634,2012-02-07 05:01:36,"I have created a stand alone app with the issue https://github.com/cj/possible-capybara-bug I also added a readme to get up and running.  Let me know if you need anything else.
",cj,2012-02-07 04:32:13
634,2012-02-07 08:56:43,"Your bug is here: https://github.com/cj/possible-capybara-bug/blob/master/app/views/layouts/application.html.haml#L90

The `for` attribute on your label needs to match the **id** of the field. That field doesn't even have an id. You can investigate this easily by starting the app and clicking the label. If everything is set up correctly, the field should be focused. In your app, when you click the label, nothing will happen.
",jnicklas,2012-02-07 04:32:13
634,2012-02-07 14:49:27,"@jnicklas not sure how I could miss that!  Thank you!  @joliss Thank you for all your help too.  If you both ever need anything let me know.
",cj,2012-02-07 04:32:13
633,2012-02-04 11:21:56,"Hi, I'm testing a PHP application in a subdirectory with Capybara. The local test site is in a sub-directory, for example: http://localhost/myapp

The login form action is ""/myapp/login"", which works perfectly from the browser.

However, when I test with `Capybara.app_host = ""http://localhost/myapp""` then Capybara correctly loads the home page, but when I submit the login form it submits to: http://localhost/myapp/myapp/login which is a straight concatenation of the two strings. The form action starting with a leading slash should be taken from the root of the server (unless there's a BASE tag in the head... not sure I want to think about that just this second).

All of my uses of `visit ""/some/page""` work as expected because my test code is referencing that URL relative to the app_host setting. But links followed on the site cause problems with the duplicated directory name as above.

Is this a bug in Capybara? Or am I simply missing some configuration setting?
",mattconnolly,2012-02-04 13:39:09
633,2012-02-04 11:30:56,"I just noticed in ruby you can add URIs directly, which achieves results I would expect:

<S_CODE_TOKEN>
",mattconnolly,2012-02-04 13:39:09
633,2012-02-04 11:33:39,"Oh, I also just realised that this is in the capybara-mechanize gem, not the capybara one. I'll post over there in case it is a bug and not some config thing i missed.
",mattconnolly,2012-02-04 13:39:09
633,2012-02-04 13:39:09,"Sure. There's nothing off the top of my head I can think of that might cause this. My money would be on something in your app (perhaps a problem resulting from the lack of JS?), or perhaps some really strange issue in capybara-mechanize.

If you need more help, please use the Capybara mailing list, not this bug tracker! It's meant for reproducible bugs only.
",joliss,2012-02-04 13:39:09
632,2012-02-03 17:56:22,"Hi,

I introduced some :js specs into our spec suite recently and found our spec run times increased way more than I'd expect.  After looking into it, I think it's caused by Capybara.reset_sessions! being a bit over-eager.  For example, if I run a :js test (resulting in capybara adding a Selenium session to its session_pool), any subsequent controller specs (which will call session.reset! on all session_pool sessions) result in Selenium clearing cookies and visiting about:blank, on each individual example, despite them using the regular Rack driver rather than the selenium one.

How about keeping track of which sessions have been accessed and only resetting those ones at the end of each example?  AFAICT, the only public way to access a session is via Capybara.current_session, in which case something like this would be sufficient - 

<S_CODE_TOKEN>

This cuts our 4-minute spec-suite back down to around 3 minutes, or a saving of nearly 0.1s per example.  WDYT?
",jdelStrother,2012-07-10 08:06:19
632,2012-02-09 12:40:37,"I've noticed this problem as well, will take a look at it!
",jnicklas,2012-07-10 08:06:19
631,2012-02-02 20:30:24,"Hello
I run this test: https://gist.github.com/1725501
in my environment: https://gist.github.com/1725576   + capybara-1.1.2.
and get error:
 ArgumentError: @request must be an ActionDispatch::Request

Q: Can capybara works with Rails 3.2.1  and RSpec 2.8.0? 
",JohnBat26,2012-02-02 22:59:47
631,2012-02-02 22:59:47,"Please use the mailing list for questions!

Regarding your problem, it seems that you are mixing Capybara tests (visit) with Rails controller tests (response). Don't do that, they are different systems.
",joliss,2012-02-02 22:59:47
631,2014-04-15 11:31:01,"Interesting I have the same problem
",Vasyl92,2012-02-02 22:59:47
630,2012-02-01 17:24:45,"My test for a URL is passing as:

<S_CODE_TOKEN>

but when I change it to:

<S_CODE_TOKEN>

it fails saying:

<pre>
Failure/Error: page.should have_link('Popular', :href => '/')
     NoMethodError:
       undefined method `axis' for XPath:Module
</pre>


I'm using Capybara with Capybara-Webkit driver from thoughtbot.. I also have :js => true turned on for this spec, am I doing something wrong?
",incorvia,2012-02-01 17:34:51
630,2012-02-01 17:33:07,"I just realized that this only happens when I have in my gemfile:

<S_CODE_TOKEN>

when I use

<S_CODE_TOKEN>

the error does not come up.. maybe this is a known issue, should have checked that earlier.
",incorvia,2012-02-01 17:34:51
630,2012-02-01 17:34:51,"This happens because you are using the latest capybara, but not the latest XPath. You need both.
",jnicklas,2012-02-01 17:34:51
630,2012-02-01 17:36:11,"Thank you, much appreciations.
",incorvia,2012-02-01 17:34:51
629,2012-02-01 08:03:20,"When server has an error there is usually no easy way of knowing what exactly has happened.

Most of the time we get timeout error which is indistinguishable between 5xx and 2xx responses (so we can't know if the element hasn't been render or there's an error on the server).

It would help a lot if we could fail fast with server error showing the response info.

Here's what I currently do (which is just dirty as): https://gist.github.com/1715880

This approach is too dirty and won't work with rack_test and in places where wait_for isn't used. So we need something better.
",dnagir,2012-07-12 10:16:35
629,2012-02-01 08:18:21,"This issue has been discussed a number of times, for example in #329 and I think in a couple of others as well. It's always come back to the fact that it's just a really tricky problem to solve, to show server errors in a better way, and so far no one has produced a really convincing solution.
",jnicklas,2012-07-12 10:16:35
629,2012-02-02 05:27:05,"I'm not sure about all the ins of Capybara.

But to me it looks like the main issue is that there are **no hooks (or I can't find) that are executed when response is received** (AJAX or normal ones). I would assume if such hook existed and worked accross different browsers then the issue would be solved.

We could just manually plug into that hook and do whatever we want. What I'm currently doing is just a dirty hack that works for me and probably only with capybara-webkit.

BTW, FYI the `&block` argument in the `Capybara.timeout` isn't used anywhere.
",dnagir,2012-07-12 10:16:35
629,2012-02-29 10:51:37,"@jnicklas It seems like there are two 'levels' to this issue, and they can be addressed separately:
1. Exception handling where we are testing against a rack app that exists in the same process
2. Status code handling

I have a proposal for number 2.

At the moment, Capybara doesn't care about the status code. It won't raise an error if a `visit` or a `click` produces a 500 or a 404 etc.

I think that by default Capybara should raise an error if the status code is not in the 2XX range. This would help people catch errors faster and make it more obvious what's going on. (""Received 500 response"" is more obvious than ""couldn't find 'foo' link to click"".)

This would only be possible for drivers that have status code support, and would need something to be added so that drivers can indicate their support (or not) for status codes.

Additionally, there are cases where someone might want to test their 404 or 500 pages. Therefore, there needs to be a way to disable this functionality. Suggested API:

<S_CODE_TOKEN>

What do you think?
",jonleighton,2012-07-12 10:16:35
629,2012-02-29 11:06:34,"That sounds okay. But I'm a little weary of just throwing exceptions on stuff which really isn't that exceptional. What about a 304 response? Or a 401, which is perfectly sensible on authentication failure? A 422 on failing to edit a form? Maybe if we just raise on 500 errors, but then, wouldn't that be inconsistent? This opens up a whole can of worms, imo.
",jnicklas,2012-07-12 10:16:35
629,2012-02-29 11:20:12,"Yeah, good point. On reflection I think the error should _only_ happen in the 5XX range (by default). But I don't think it needs to be inconsistent. We could consider:

<S_CODE_TOKEN>

To be sugar for:

<S_CODE_TOKEN>

And then when user gives their own `:status` option, they are being more explicit about the expected status code.
",jonleighton,2012-07-12 10:16:35
629,2012-03-01 05:51:18,"It's not only about `visit` but also AJAX requests (where supported) and probably some others too.

One option would be to introduce ""response handler"" that by default would do nothing (for backwards compatibility), but we could override it globally (and maybe in page actions too).

For example:

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",dnagir,2012-07-12 10:16:35
629,2012-04-29 15:21:01,"totally support jonleighton  on this one.. we really need a detection for status codes that simple
",jwoodlee,2012-07-12 10:16:35
629,2012-05-18 00:19:11,"I've been using this Gist https://gist.github.com/1443408  for logging if a 500, etc happen in the server thread.  Works pretty well.
",supairish,2012-07-12 10:16:35
629,2012-05-18 00:52:10,"Thanks will check it out

Sent from my iPhone

On May 17, 2012, at 8:19 PM, Chris Irish
reply@reply.github.com
wrote:

> I've been using this Gist https://gist.github.com/1443408  for logging if a 500, etc happen in the server thread.  Works pretty well.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/629#issuecomment-5777323
",jwoodlee,2012-07-12 10:16:35
629,2012-07-12 10:16:35,"Seems like solving #660 would tackle this problem as well, no need to handle errors in any special way in that case.
",jnicklas,2012-07-12 10:16:35
628,2012-01-30 12:46:46,"Via Gemnasium, to help keep up to date on the latest gem dependency versions. I hope it helps!
",laserlemon,2012-02-02 09:56:11
628,2012-02-02 09:57:27,"/cc @jnicklas 

Thanks -- I've merged this. (If we find that it's over-eager with our development dependencies, we can always change or remove it later, I guess.)

And thanks for building Gemnasium, @laserlemon! :-)
",joliss,2012-02-02 09:56:11
628,2012-02-02 10:26:39,"Thank you and you're welcome!
",laserlemon,2012-02-02 09:56:11
628,2012-02-02 10:30:35,"I should also mention that I'm currently developing runtime/development differentiation into Gemnasium. That will let you choose to reflect only your runtime dependencies with your image, if that's more your speed.
",laserlemon,2012-02-02 09:56:11
627,2012-01-30 08:36:08,"Hey 

My enviroment:
Jruby 1.6.5
Rails 3.0.11
Cucumber-Rails 1.2.1
Capybara 1.1.2
Selenium 0.2.2
Selenium-client 1.2.18
Selenium-webdriver 2.16.0

I am using a rails date kit: 
http://www.methods.co.nz/rails_date_kit/rails_date_kit.html
To create date_fields 

I am trying to select a date in my step definitions:
find(:xpath, "".//input[@id='inspection_date']"").select(date.to_s)

But i am getting a error saying the following:
cannot select option, no option with text '2011-02-14' (Capybara::ElementNotFound)

And if I try to select the date with the select_date(field, with=> date)
It gives me the following error:
 Unable to find xpath "".//label[contains(., 'inspection_date')]"" (Capybara::ElementNotFound)

Is there a way to select the date from a text_field using the rails date kit
",Gerhardk,2012-01-30 09:35:39
627,2012-01-30 09:35:39,"Please send this to the mailing list, there is a better chance you'll be able to get help there with questions like this! :-)
",joliss,2012-01-30 09:35:39
626,2012-01-27 10:08:18,"---

This works around the ""docElement is null"" problem first mentioned in #591, which Jari reproduced at http://code.google.com/p/selenium/issues/detail?id=3147. Now we get reliable green builds: See http://travis-ci.org/#!/joliss/capybara/builds #76-#90.

The code is not very pretty, but I'm OK with having temporary hackery in the test code (until Selenium gets fixed).
",joliss,2012-02-02 23:31:32
626,2012-02-02 23:32:13,"Pulling this in. Let's try to remember to yank this once the Selenium bug is fixed!
",jnicklas,2012-02-02 23:31:32
625,2012-01-24 20:40:19,"I guess it's pretty much nitpicking, but the naming seems slightly off.
A host is just the machine name without a URL schema or path, the readme suggests to put in a complete URL though.

From the readme:

<S_CODE_TOKEN>

I guess on some level that is an issue?
",rb2k,2012-02-10 00:36:52
625,2012-01-25 08:18:27,"Ahh, but it's not a fully qualified URL! It doesn't actually include the path portion. Thankfully the people who wrote RFC3986 named all the parts of a URL in excruciating detail, not so thankfully, they neglected to name what the entire first part of a URL is called. Technically we could call it ""the scheme dot slash slash the authority"". But `Capybara.app_scheme_dot_slash_slash_authority` doesn't quite have the same nice ring as `app_host`. So yes, technically it's wrong, but everyone gets what it does, and it's a somewhat sane name for something which unfortunately doesn't really have a good name.

See here for more info: http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax
",jnicklas,2012-02-10 00:36:52
625,2012-02-10 00:36:52,"I guess we can close this :)
",rb2k,2012-02-10 00:36:52
624,2012-01-23 11:27:24,"On running the following rspec  tests with javascript enabled:

  context ""on clicking command and conquer tag link"", :js => true,
    :driver => :webkit  do
      it ""should be in root path"" do
        click_link('command and conquer')
        current_path.should == root_path
      end
   end

I get: the following warnings (and although the tests eventually succeeds, it does stall for a few seconds):

<S_CODE_TOKEN>

No bp log location saved, using default.
[000:000] Browser XEmbed support present: 1
[000:000] Browser toolkit is not Gtk2 (0).
[000:001] Using Xt toolkit
*\* (<unknown>:32057): DEBUG: NP_Initialize
*\* (<unknown>:32057): DEBUG: NP_Initialize succeeded
*\* (<unknown>:32057): DEBUG: NP_Initialize
*\* (<unknown>:32057): DEBUG: NP_Initialize succeeded
*\* (<unknown>:32057): DEBUG: NP_Initialize
*\* (<unknown>:32057): DEBUG: NP_Initialize succeeded
*\* (<unknown>:32057): DEBUG: NP_Initialize
*\* (<unknown>:32057): DEBUG: NP_Initialize succeeded
      should be in root path

The only thing extra for my javascript enabled rspec tests are the gems (i) capybara-webkit 0.8.0 and (ii) databasecleaner. I am running on Ubuntu 10.  

Is there anything I can do to prevent these warnings from showing up? And what is ""bp log""?  

FYI: When I run with :driver => :selenium, I get no such warnings (i.e. Selenium loads up my firefox browser and the tests go through without warnings). The delay time for the above webkit temporary ""stall"" and selenium loading the browser is about the same.  
",centaure,2012-01-23 12:43:01
624,2012-01-23 12:43:00,"You should ask this on the capybara-webkit mailing list. capybara-webkit is a separate project, so they'll be in a better position to help you.
",joliss,2012-01-23 12:43:01
623,2012-01-21 17:21:53,"Support for symbols - fix for #312. 
",piotrj,2012-02-09 12:19:02
623,2012-01-21 17:23:49,"I am not sure whether it is necessary to put symbol related specs in every action, since find is tested so the find works as supposed and then the actions base on find. What you think?
",piotrj,2012-02-09 12:19:02
623,2012-02-09 12:19:02,"This really doesn't solve the #312 at all. This allows symbols for CSS selectors, which is both pointless, and not the issue that was discussed in #312, which was to allow symbols for fill_in and friends.
",jnicklas,2012-02-09 12:19:02
623,2012-02-09 19:05:06,"Well, what I did allows symbols to have in fill_in. Basically it enables symbols so you can use them exactly as it would be string. I don't know what #312 is about then if it is not about that.
",piotrj,2012-02-09 12:19:02
622,2012-01-21 15:51:51,"This patch documents HTTPS support.
",FooBarWidget,2012-02-09 12:19:37
622,2012-01-21 15:55:39,"Isn't this kind of obvious? Do we really need to add a huge section about this to the README?
",jnicklas,2012-02-09 12:19:37
622,2012-01-21 15:56:51,"Or rather, why would you think that Capybara defaults to using https? That doesn't seem sensible to me. The different ways of changing host are already documented.
",jnicklas,2012-02-09 12:19:37
622,2012-01-21 16:09:21,"It wasn't obvious. At first I thought I had to call `https!` like I used to in Rails integration tests. That didn't work, so I figured maybe I should try to call visit() with a complete https URL. I sort of knew that the host name is supposed to be www.example.com but I didn't know where it comes from. I also figured that there must be a better way than to hardcode full URLs everywhere. In the end I spent half an hour searching Google to find out that I had to do this.
",FooBarWidget,2012-02-09 12:19:37
622,2012-01-21 20:22:09,"Hm. Sounds like it might be sensible to mention it then. The README is already quite unwieldy though, so I think we should try hard to keep this as short as possible. Perhaps not even a section, but just a paragraph. I agree with Jonas that as it is, it looks a little verbose.
",joliss,2012-02-09 12:19:37
622,2012-01-21 23:44:43,"Maybe the right solution is to split the documentation into multiple files and have a table of contents somewhere? For example I'm really impressed by the [cancan documentation](https://github.com/ryanb/cancan). Their readme nicely documents all the basic things while all the advanced stuff and corner cases are documented in the wiki, but their wiki table of contents is so good that I can immediately find all the things I want to know.
",FooBarWidget,2012-02-09 12:19:37
622,2012-01-23 14:16:25,"Yeah, maybe. I think the RDoc API documentation is rather hard to read (and difficult to fix), so making a short README and some separate Markdown files that explain the API in detail might be a good idea. What do you think, Jonas?

Regardless of that, I still think the documentation for https requests is a good idea but should be shorter -- we should be able to add it to README as it is without at the same time undertaking a complete restructuring.
",joliss,2012-02-09 12:19:37
622,2012-01-23 14:26:14,"I really, really hate wikis as documentation. We can have separate files inside the main repo for documentation. But no wikis.
",jnicklas,2012-02-09 12:19:37
622,2012-02-09 12:19:37,"Closing this until it it reworded.
",jnicklas,2012-02-09 12:19:37
621,2012-01-20 15:38:24,"This method works fine until you add, js: true to your spec at which time it does not upload the file. 

The workaround I used was found here:

http://how.itnig.net/facts/attach-file-in-capybara---selenium-webdriver

Perhaps a similar implementation could be added to capybara? 
",duckpond,2012-07-10 13:33:21
621,2012-01-20 16:59:46,"Hmm, that's very strange. Capybara works pretty much the same way under the hood, see here: https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/node.rb#L25-28. I can't see any reason why this would work when you access Selenium directly and not in Capybara. Are you sure there isn't something else at play here?

/Jonas
",jnicklas,2012-07-10 13:33:21
621,2012-01-20 19:38:58,"Thanks Jonas, 

We just figured it out- attach_file works with a relative path when you use the rack_test driver while it requires a  full path when you use the selenium driver.

So less of a bug and more of a gotcha. 

Thanks,
Duckpond
",duckpond,2012-07-10 13:33:21
621,2012-06-22 13:20:06,"This is still happening. My test worked without "":js => true"" but when I switched back to javascript example, selenium does not attached any file.

It works using capybara-webkit or using the absolute path for the file.
",Foxandxss,2012-07-10 13:33:21
621,2013-04-07 22:06:48,"I also ran into this issue, when switching drivers, from `webkit` to `selenium`.

Using the full path solved it for me. Thanks, @duckpond! 
",etagwerker,2012-07-10 13:33:21
621,2014-05-04 22:33:34,"it doesn't work when js is true
",canercak,2012-07-10 13:33:21
621,2016-07-11 14:28:48,"Similar issue for me here. Does anyone have a copy of the workaround b/c the page has expired ?
",atodorov,2012-07-10 13:33:21
621,2016-07-11 17:40:03,"@atodorov You're posting on a closed issue from 4 years ago.  Capybara has changed a lot since then so anything to do with this issue is most likely outdated.  If you have an actual issue, that isn't solved by using an absolute path, please open a new issue with enough details to reproduce.
",twalpole,2012-07-10 13:33:21
620,2012-01-19 06:42:32,"While I use fill_in on a textarea, a change event is not triggered when the textarea loses focus. However, doing it manually in Firefox always triggers this event.

This is on version 1.1.2 with the firefox driver.
",pbiggar,2012-03-27 20:08:14
620,2012-01-19 13:29:15,"That's odd -- I would expect it to. Can you show/upload some code to reproduce this?

I wonder if this is a Selenium issue. The Capybara code that fills in textareas is pretty simple:

<S_CODE_TOKEN>

(Not cc'ing Jari yet until we have some code to reproduce.)

...

Actually, looking at the Stackoverflow answers your linked in https://github.com/derickbailey/backbone.modelbinding/issues/55, I'm increasingly suspecting it's something between Firefox and Selenium.
",joliss,2012-03-27 20:08:14
620,2012-01-19 18:41:22,"I'm having trouble extracting the code from my app, else I would provide a reduced test case. But here are the two things that failed:

<S_CODE_TOKEN>

So `click_link` is not causing the change event to be triggered. To make matters more complicated this does work maybe 25% of the time!

Similarly:

<S_CODE_TOKEN>

So in this case, when I debugged I found that other `fill_in` calls also don't cause the event to be triggered. Note that it works fine if  I reenable the `execute_script` calls.
",pbiggar,2012-03-27 20:08:14
620,2012-03-27 17:55:12,"Change events don't get triggered until fields lose focus.  I'm not sure exactly where this ought to be handled, but I'm seeing the same issue and it's confusing that calling fill_in doesn't trigger a change event.
",bilts,2012-03-27 20:08:14
620,2012-03-27 19:05:04,"I've been meaning to cc @jarib for a while. Jari, do you have any idea?
",joliss,2012-03-27 20:08:14
620,2012-03-27 19:10:32,"Sounds like [this Mozilla bug](https://bugzilla.mozilla.org/show_bug.cgi?id=566671). Is the problem reproducible if the actual window has focus? Here's a [tracking bug](http://code.google.com/p/selenium/issues/detail?id=3127) in Selenium.
",jarib,2012-03-27 20:08:14
620,2012-03-27 19:14:51,"This may help if you're on Firefox >= 12:

<S_CODE_TOKEN>
",jarib,2012-03-27 20:08:14
620,2012-03-27 20:08:14,"Oh cool, thanks Jari. I guess we can close this then and wait for the upstream bug in Firefox to get fixed. (Feel to continue discussion on this issue, obviously.)
",joliss,2012-03-27 20:08:14
620,2014-12-15 11:38:38,"It is 15 Dec 2014, and it seems like the issue not resolved yet :crying_cat_face: 
capybara (2.4.4)
capybara-webkit (1.3.0)
",907th,2012-03-27 20:08:14
620,2014-12-15 14:52:24,"@907th this issue report was about using Firefox with selenium - your whine is about capybara-WebKit and posted on an issue closed 2 years ago.  Do you think that's helpful to anyone?
",twalpole,2012-03-27 20:08:14
620,2014-12-15 17:41:58,"@twalpole At least you noticed it! Should I open another issue?
",907th,2012-03-27 20:08:14
620,2014-12-15 18:08:52,"@907th  you are using capybara-WebKit which handles all the browser interaction so if you are sure it's not user error or library interaction then you could post an issue over there. Your issue has nothing to do with the issue you commented under, or capybara - you may also want to check on the mailing list as noted in the README
",twalpole,2012-03-27 20:08:14
620,2015-12-23 00:46:01,"I'm a little confused as to why this is a capybara issue worth discussing/addressing when the underlying driver is selenium, but not when capybara-webkit is involved.  Can you please help me (and future readers arriving here via google search) understand the technical distinction?
",Sporky023,2012-03-27 20:08:14
620,2015-12-23 01:43:52,"@Sporky023 because the capybara project provides the driver for interfacing to selenium, the capybara-WebKit project is separate - I'm now going to lock this issue
",twalpole,2012-03-27 20:08:14
619,2012-01-19 00:24:54,"Currently fails with 
`expected css ""[selector]"" to return something (RSpec::Expectations::ExpectationNotMetError)`

Would be much better with 
`expected [expected count] items for css ""[selector]"", matched [actual count]`
",gavinhughes,2012-07-10 13:12:40
619,2012-01-19 01:05:33,"Thanks for reporting! I believe this was actually fixed on master in 962e160f4d.
",joliss,2012-07-10 13:12:40
619,2012-01-20 07:08:37,"Shouldn't add the actual count to the message?

https://github.com/jnicklas/capybara/commit/962e160f4d20913337ceb8df20057c97fdd87790#commitcomment-885003
",gavinhughes,2012-07-10 13:12:40
619,2012-01-20 12:56:22,"Sounds reasonable to me. I'm not quite sure whether the actual count is available in failure_message_for_should, or whether this would require changing more code.

In any case, do you want to have a go at writing up a pull request?
",joliss,2012-07-10 13:12:40
619,2012-01-26 21:37:44,"It looks like the count is not available, so it may take a bit more work.  I've got it on my todo list.  

Reopen this issue?
",gavinhughes,2012-07-10 13:12:40
619,2012-01-26 22:03:29,"Sure, I've reopened it.
",joliss,2012-07-10 13:12:40
619,2012-02-03 22:53:48,"As expected, the actual count is not readily available.  We can get it like this

https://github.com/gavinhughes/capybara/commit/944c46adaf625653595f61933fab9948f027c39a

but it's kinda ugly.  You want a pull request?
",gavinhughes,2012-07-10 13:12:40
619,2012-02-04 02:03:38,"Hm, yeah, I agree that's a bit too ugly.

The error handling would probably need changing somehow to make the count available.
",joliss,2012-07-10 13:12:40
619,2012-02-04 04:54:13,"Yes, I agree.  Unfortunately, I can't dive in on that one just now.  Feel free to close this, or leave it open for another inspired hacker.
",gavinhughes,2012-07-10 13:12:40
619,2012-07-10 13:12:40,"This error should now be way more helpful
",jnicklas,2012-07-10 13:12:40
618,2012-01-17 13:48:03,"I am trying to test tooltips that rely on javascript. The plugin that I'm using requires that I put a title attribute on elements that get a tooltip. In this case, I am dealing with a span.

I could not get my test to work and I finally figured out the problem by simply doing a `puts page.html`. When I run my test with a javascript driver (capybara_webkit or selenium), the span does not have a title. When I run it with the default driver, the span has a title as expected. 

I know it is not common to put a title on a span, but it does validate. Anyone know why using the javascript driver would strip attributes from elements? 

I looked through the source, but I couldn't find the problem. I'd be happy submit a pull request to fix this if someone could point me in the right direction.
",aokolish,2012-01-18 12:55:00
618,2012-01-18 12:55:00,"Yes, it's perfectly fine to put a title on a span, and I'd actually be surprised if Selenium or WebKit strip it. My first guess is that there's something going on with the JS on your page, or that invalid markup causes Rack::Test and Selenium/WebKit to behave differently.

This issue tracker is intended for reproducible bugs only, so if you need more help, I'd recommend that you post on the mailing list, perhaps with some code that illustrates the problem.
",joliss,2012-01-18 12:55:00
618,2012-01-18 15:18:19,"I just saw the note about the about the google group in the readme. I will have to check that out because I do have some questions. Sorry about opening an issue.
",aokolish,2012-01-18 12:55:00
617,2012-01-14 16:56:36,"I am trying to test a link, I hope I can solve this issue:

I tried to test the link like this:

<S_CODE_TOKEN>

But I get this error:

Capybara::ElementNotFound: Unable to find css ""div.page_margins div.page div#nav div.hlist ul li#2""

Although the same selector is working fine using have_selector:

response.body.should have_selector(nested_element)

Any idea please ?
",hopewise,2012-01-14 21:32:35
617,2012-01-14 21:32:35,"Looking at the strange-looking ""response"" method, I'm guessing that you are mixing controller tests (using methods like get or post) with Capybara tests (using visit).

If you need more help, please ask on the mailing list! This issue tracker is meant for reproducible bugs only.
",joliss,2012-01-14 21:32:35
616,2012-01-13 16:20:35,"I am trying to test with has_link? in my spec test, here is my test:

<S_CODE_TOKEN>

but, the test always fail, although the link with id 'next_page' dose exist!
the strange thing is that have_content always works fine, here is how I implement it:

<S_CODE_TOKEN>

Can you help me please ? what I am missing here ?
",hopewise,2012-01-13 16:40:00
616,2012-01-13 16:40:00,"My guess would be that the link is not actually on the page ;) Please post questions like this to the mailing list in the future.
",jnicklas,2012-01-13 16:40:00
615,2012-01-13 15:44:32,"When I call click_button(""Submit your review""), I got that error.
The html when I call save_and_open_page is like this:

<html><head data-hook=""inside_head""><script src=""file://dnn506yrbagrg.cloudfront.net/pages/scripts/0011/7642.js?368463"" async="""" type=""text/javascript""></script><script type=""text/javascript"" async="""" src=""http://www.google-analytics.com/ga.js""></script>
<title>Lvlup - Celebrate Your Inner Gamer</title>
<meta content=""text/html; charset=UTF-8"" http-equiv=""Content-Type"">
<meta content=""lvlup - the best gaming apparel in the world."" property=""og:title"">
<meta content=""website"" property=""og:type"">
<meta content=""http://www.lvlup.com"" property=""og:url"">
<meta content=""http://profile.ak.fbcdn.net/hprofile-ak-snc4/373007_182260851868085_926885533_n.jpg"" property=""og:image"">
<meta content=""lvlup"" property=""og:site_name"">
<meta content=""36104149"" property=""fb:admins"">
<link href=""/public/assets/store/all.css"" media=""screen"" rel=""stylesheet"" type=""text/css"">
<link href=""http://fonts.googleapis.com/css?family=Droid+Sans:400,700"" rel=""stylesheet"" type=""text/css"">

<script id=""facebook-jssdk"" src=""//connect.facebook.net/en_US/all.js#xfbml=1&amp;amp;appId=70770557249""></script><script type=""text/javascript"" async="""" defer="""" src=""file://c.jirafe.com/jirafe.js""></script><script src=/public/assets/store/all.js"" type=""text/javascript""></script><link href=""https://d3j15y3zsn7b4t.cloudfront.net/assets/widget_embed.cssgz?1324537562"" media=""screen"" rel=""stylesheet"" type=""text/css"">
<!-- If you already have fancybox on the page this script tag should be omitted --><script src=""https://d3j15y3zsn7b4t.cloudfront.net/assets/widget_embed_libraries.jsgz?1324537564"" type=""text/javascript""></script><link href=""/public/assets/reviews.css"" media=""screen"" rel=""stylesheet"" type=""text/css"">
<script src=""/home/willing/Workspace/outter/Onyx-consultant/lvlup/public/assets/jquery.rating.js"" type=""text/javascript""></script><script type=""text/javascript"">
//<![CDATA[
$(document).ready(function(){$('.stars').rating({required:true});});
//]]>
</script><script>
  //<![CDATA[
    var jirafe= {""id"":""25861"",""baseUrl"":""data.jirafe.com"",""product"":{""name"":""Sponged"",""price"":""22.0"",""sku"":""GAM-WHT-00002"",""categories"":[]}} ;
    (function(){
    var d=document,g=d.createElement('script'),s=d.getElementsByTagName('script')[0];
    g.type='text/javascript',g.defer=g.async=true;g.src=d.location.protocol+'//c.jirafe.com/jirafe.js';
    s.parentNode.insertBefore(g, s);
    })();
  //]]>
</script><!-- Spree Analytics has not been initialized correctly -->
</head>
<body id=""reviews"">
<div id=""fb-root""></div>
<script>
  //<![CDATA[
    (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = ""//connect.facebook.net/en_US/all.js#xfbml=1&amp;appId=70770557249"";
    fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
  //]]>
</script><header class=""dk-grad-bg clearfix""><ul class=""top-nav"">

<li>
<a class=""dk-btn-bg callout"" href=""/cart"">
<span class=""icon cart cart-items"">0</span>
</a>
</li>
<!-- %li -->
<!-- %a.dk-btn-bg.{ href: ""#{destroy_user_session_path}"" } Sign Out -->
<li>
<a class=""dk-btn-bg"" href=""#"">Blog</a>
</li>
<li>
<a class=""dk-btn-bg"" href=""http://support.lvlup.com"">Support</a>
</li>
<li>
<a href=""/account"" class=""dk-btn-bg"">My Account</a>
</li>
</ul></header><div id=""container"">
<div class=""clearfix"" id=""main"" role=""main"">
<nav id=""main-nav""><form accept-charset=""UTF-8"" action=""http://www.example.com/products.get"" method=""post"">
<div style=""margin:0;padding:0;display:inline""><input name=""utf8"" type=""hidden"" value=""✓""></div>
<input class=""empty"" id=""s1"" name=""keywords"" placeholder=""Search"" type=""search""><button class=""search""></button>
</form>

<a href=""/static/about_us"">About Us</a>
<a href=""/static/manifesto"">Manifesto</a>
<a href=""/static/community"">Community</a>
<a href=""http://www.example.com/"" class=""selected"">Store</a>
<a href=""http://www.example.com/"" class=""main-logo""><img alt=""Logo"" id=""logo"" src=""/home/willing/Workspace/outter/Onyx-consultant/lvlup/public/assets/store/logo.png""></a>
</nav><div id=""content"" role=""main"">
<h1>Product review submission</h1>

<h2> <span class=""translation_missing"" title=""translation missing: en.leave_us_a_review"">Leave Us A Review</span> ""Sponged"" </h2>
<form accept-charset=""UTF-8"" action=""/products/sponged/reviews"" class=""new_review"" id=""new_review"" method=""post"">
<div style=""margin:0;padding:0;display:inline""><input name=""utf8"" type=""hidden"" value=""✓""></div>
  <input id=""review_product_id"" name=""review[product_id]"" type=""hidden"" value=""2""><input id=""review_user_id"" name=""review[user_id]"" type=""hidden"" value=""8""><table cellspacing=""0"" cellpadding=""2""><tbody>
<tr valign=""top"">
<td style=""padding-top: 5px; padding-bottom: 5px;"" class=""fieldtitle right nowrap"">
      Rating
        </td>
        <td style=""padding-top: 5px; padding-bottom: 5px;"">
              
  <span class=""star-rating-control""><div class=""rating-cancel""><a title=""Cancel Rating""></a></div><div class=""star-rating rater-0 star star-rating-applied star-rating-live star-rating-on""><a title=""1 star"">1 star</a></div><div class=""star-rating rater-0 star star-rating-applied star-rating-live star-rating-on""><a title=""2 stars"">2 stars</a></div><div class=""star-rating rater-0 star star-rating-applied star-rating-live star-rating-on""><a title=""3 stars"">3 stars</a></div><div class=""star-rating rater-0 star star-rating-applied star-rating-live star-rating-on""><a title=""4 stars"">4 stars</a></div><div class=""star-rating rater-0 star star-rating-applied star-rating-live star-rating-on""><a title=""5 stars"">5 stars</a></div></span><input name=""review[rating]"" type=""radio"" class=""star star-rating-applied"" value=""1 star"" style=""display: none; ""><input name=""review[rating]"" type=""radio"" class=""star star-rating-applied"" value=""2 stars"" style=""display: none; ""><input name=""review[rating]"" type=""radio"" class=""star star-rating-applied"" value=""3 stars"" style=""display: none; ""><input name=""review[rating]"" type=""radio"" class=""star star-rating-applied"" value=""4 stars"" style=""display: none; ""><input name=""review[rating]"" type=""radio"" class=""star star-rating-applied"" value=""5 stars"" style=""display: none; "" checked=""checked"">
</td>
    </tr>
<tr valign=""top"">
<td class=""fieldtitle right nowrap"">
        <label for=""review_title"">Review title</label>
        </td>
        <td>
            <input id=""review_title"" maxlength=""255"" name=""review[title]"" size=""50"" type=""text"" value=""title_review"">
</td>
    </tr>
<tr valign=""top"">
<td class=""fieldtitle right nowrap"">
        <label for=""review_review"">Review text</label>
        </td>
        <td>
        <textarea cols=""50"" id=""review_review"" name=""review[review]"" rows=""10"" wrap=""virtual"">text_review</textarea>
</td>
    </tr>
<tr>
<td> </td>
        <td style=""padding-top: 5px;"">
        <input class=""button bg_darkfirst"" name=""commit"" type=""submit"" value=""Submit your review"">
</td>
    </tr>
</tbody></table>
</form>


</div>
<p class=""clear""></p>
</div>
</div>
<footer data-hook=""footer""><div class=""outer"">
<div class=""inner"">
<img id=""mascott"" src=""/home/willing/Workspace/outter/Onyx-consultant/lvlup/public/assets/store/mascott.png""><div id=""about-lvlup"">
<div>
<p>
<span>
<strong>lvlup</strong>
isn't your ordinary e-commerce store. &nbsp;Like all gamers, all customers are not created equal. &nbsp;We get that. &nbsp;That’s why we make your experience exponentially more awesome as you lvl up.
<a href=""/static/community"">Learn More</a>
</span></p><div class=""fb-like"" data-font=""segoe ui"" data-href=""https://www.facebook.com/pages/Lvlup/182260851868085"" data-send=""false"" data-show-faces=""false"" data-width=""450""></div>

<p></p>
</div>
</div>
<div id=""helpful-links"">
<div>
<h3>Helpful Links</h3>
</div>
<div>
<ul>
<li>
<a href=""http://www.example.com/"">Store</a>
<br>
</li>
<li>
<a href=""/static/manifesto"">Manifesto</a>
<br>
</li>
<li>
<a href=""/static/about_us"">About Us</a>
<br>
</li>
</ul>
</div>
<div>
<ul>
<li>
<a href=""/login"">Login / Register</a>
<br>
</li>
<li>
<a href=""/account"">My Account</a>
<br>
</li>
<li>
<a href=""/account"">My Wishlist</a>
<br>
</li>
<li>
<a href=""/cart"">Shopping Cart</a>
<br>
</li>
</ul>
</div>
<div>
<ul>
<li>
<a href=""/static/community"">Community</a>
<br>
</li>
<li>
<a href=""#"">Community Photos</a>
<br>
</li>
<li>
<a href=""#"">Design Ideas</a>
<br>
</li>
</ul>
</div>
<div>
<ul>
<li>
<a href=""#"">Blog</a>
<br>
</li>
<li>
<a href=""#"">Faqs</a>
<br>
</li>
<li>
<a href=""http://support.lvlup.com"">Customer Support</a>
<br>
</li>
<li>
<a href=""/static/contact_us"">Contact Us</a>
<br>
</li>
<li>
<script>
  //<![CDATA[
    new ASSISTLY.Widget({ 
            version: 1, 
            site: 'support.lvlup.com', 
            port: '80', 
            type: 'chat', 
            displayMode: 1,  //0 for popup, 1 for lightbox
            features: {  
                    offerAlways: true, 
                    offerAgentsOnline: false, 
                    offerRoutingAgentsAvailable: false,  
                    offerEmailIfChatUnavailable: false 
            }
    }).render();
  //]]>
</script><span class=""assistly-widget"" id=""assistly-widget-1"">                          <a href=""http://support.lvlup.com:80/customer/widget/chats/new?"" style=""text-decoration:none;width:65px;display:inline-block;min-height:22px;background: url(http://assets0.assistly.com/images/customer/widget/chat/launch_chat_sprite.png) no-repeat scroll 0 0px transparent;"" onmouseover=""this.style.backgroundPosition='0 -20px'"" onmouseout=""this.style.backgroundPosition='0 0px'"">&nbsp;</a></span>
</li>
</ul>
</div>
<div class=""last"">
<ul>
<li>
<a href=""#"">Payment Policy</a>
<br>
</li>
<li>
<a href=""/static/shipping_information"">Shipping Information</a>
<br>
</li>
<li>
<a href=""/static/privacy_policy"">Privacy Policy</a>
<br>
</li>
<li>
<a href=""/static/return_policy"">Return Policy</a>
<br>
</li>
</ul>
</div>
</div>
<p class=""clear""></p>
<div id=""buttom-panel"">
<div class=""group"" id=""news-letter"">
<h3>Newsletter Sign Up</h3>
<input type=""text""><button>Sign up</button>
</div>
<div class=""group"" id=""social"">
<h3>Follow Us On</h3>
<p>
<a href=""http://www.facebook.com/pages/Lvlup/182260851868085?sk=app_290627604302893"" id=""facebook"">
<span>Facebook</span>
</a>
<a href=""http://feeds2.feedburner.com/lvlup.com"" id=""rss"">
<span>RSS</span>
</a>
<a href=""http://twitter.com/lvlup_com"" id=""twitter"">
<span>Twitter</span>
</a>
</p>
</div>
<div class=""group"" id=""copyright"">
<h3>Legal Stuff</h3>
<div>
© Copyright 2012 Lvlup
</div>
<div>All rights reserved</div>
<div>
<a href=""http://privacy-policy.truste.com/click-to-verify/lvlup.com"" target=""_blank"" title=""Privacy Policy by TRUSTe"">
<img alt=""Privacy Policy by TRUSTe"" src=""/home/willing/Workspace/outter/Onyx-consultant/lvlup/public/assets/store/icons/truste-badge-99px.png"" style=""border: none""></a>
</div>
</div>
<div class=""last group"" id=""logo"">
<img alt=""Logo_light"" src=""/home/willing/Workspace/outter/Onyx-consultant/lvlup/public/assets/store/logo_light.png"">
</div>
<!-- Begin DigiCert/ClickID site seal HTML and JavaScript -->
<div id=""DigiCertClickID_LAeZjcVD""><div style=""text-decoration: none; text-align: center; display: block; vertical-align: baseline; font-size: 100%; font-style: normal; text-indent: 0px; line-height: 1; width: auto; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; position: relative; top: 0px; right: 0px; bottom: 0px; left: 0px; clear: both; float: none; cursor: default; background-position: initial initial; background-repeat: initial initial; "" id=""DigiCertClickID_LAeZjcVDSeal""><img style=""text-decoration: none; text-align: center; display: block; vertical-align: baseline; font-size: 100%; font-style: normal; text-indent: 0px; line-height: 1; width: auto; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; position: relative; top: 0px; right: 0px; bottom: 0px; left: 0px; clear: both; float: none; cursor: pointer; background-position: initial initial; background-repeat: initial initial; "" src=""file://seal.digicert.com/seals/cascade/?s=LAeZjcVD,12,l,""></div><span style=""text-decoration: none; text-align: center; display: block; vertical-align: baseline; font-size: 100%; font-style: normal; text-indent: 0px; line-height: 1; width: auto; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; position: relative; top: 0px; right: 0px; bottom: 0px; left: 0px; clear: both; float: none; color: black; cursor: default; background-position: initial initial; background-repeat: initial initial; "">
<a href=""http://www.digicert.com/ev-ssl-certification.htm"" style=""text-decoration: none; text-align: center; vertical-align: baseline; font-size: 100%; font-style: normal; text-indent: 0px; line-height: 1; width: auto; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; position: relative; top: 0px; right: 0px; bottom: 0px; left: 0px; clear: both; float: none; cursor: pointer; color: black; display: inline; background-position: initial initial; background-repeat: initial initial; "">SSL Certificate</a>
</span></div>
<script>
  //<![CDATA[
    var __dcid = __dcid || [];__dcid.push([""DigiCertClickID_LAeZjcVD"", ""12"", ""l"", ""black"", ""LAeZjcVD""]);(function(){var cid=document.createElement(""script"");cid.type=""text/javascript"";cid.async=true;cid.src=(""https:"" === document.location.protocol ? ""https://"" : ""http://"")+""seal.digicert.com/seals/cascade/seal.min.js"";var s = document.getElementsByTagName(""script"");var ls = s[(s.length - 1)];ls.parentNode.insertBefore(cid, ls.nextSibling);}());
  //]]>
</script><script type=""text/javascript"" async="""" src=""http://seal.digicert.com/seals/cascade/seal.min.js""></script><!-- End DigiCert/ClickID site seal HTML and JavaScript -->
</div>
</div>
</div>
</footer><script>
  //<![CDATA[
    setTimeout(function(){var a=document.createElement(""script"");
    var b=document.getElementsByTagName('script')[0];
    a.src=document.location.protocol+""//dnn506yrbagrg.cloudfront.net/pages/scripts/0011/7642.js?""+Math.floor(new Date().getTime()/3600000);
    a.async=true;a.type=""text/javascript"";b.parentNode.insertBefore(a,b)}, 1);
  //]]>
</script><script>
  //<![CDATA[
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', "" tracker.analytics_id ""]);
    _gaq.push(['_trackPageview']);
    
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  //]]>
</script>


<div id=""fancybox-tmp""></div><div id=""fancybox-loading""><div></div></div><div id=""fancybox-overlay""></div><div id=""fancybox-wrap""><div id=""fancybox-outer""><div class=""fancy-bg"" id=""fancy-bg-n""></div><div class=""fancy-bg"" id=""fancy-bg-ne""></div><div class=""fancy-bg"" id=""fancy-bg-e""></div><div class=""fancy-bg"" id=""fancy-bg-se""></div><div class=""fancy-bg"" id=""fancy-bg-s""></div><div class=""fancy-bg"" id=""fancy-bg-sw""></div><div class=""fancy-bg"" id=""fancy-bg-w""></div><div class=""fancy-bg"" id=""fancy-bg-nw""></div><div id=""fancybox-inner""></div><a id=""fancybox-close""></a><a href=""javascript:;"" id=""fancybox-left""><span class=""fancy-ico"" id=""fancybox-left-ico""></span></a><a href=""javascript:;"" id=""fancybox-right""><span class=""fancy-ico"" id=""fancybox-right-ico""></span></a></div></div><div id=""humane"" class=""humane""></div></body></html>
",nguyenhuynhut,2012-01-13 19:43:35
615,2012-01-13 19:43:35,"It's impossible to tell what's going wrong from you posted. There's way too much HTML code, and no stack trace.

If you still need help, please ask on the mailing list!
",joliss,2012-01-13 19:43:35
614,2012-01-12 17:31:23,"Some drivers (like WebKit) apparently do this. Suggested by
@jonleighton in #611.
",joliss,2012-01-12 17:45:31
613,2012-01-12 17:13:07,"Per f4360f60998ea4805dfba89a1613939d054975c4, #body should return the
unmodified source, just like #source. However, in Selenium it doesn't,
which is why this test was passing, even though it is incorrect.

I have corrected the spec for #body to match #source (as it is just an
alias), and changed the original spec for #body to be the spec for #html.

(The #body spec fails against Poltergeist before this fix.)
",jonleighton,2012-01-12 17:50:47
613,2012-01-12 17:49:47,"@joliss any chance you can merge this one too? then poltergeist will be green against caypbara master :) thanks
",jonleighton,2012-01-12 17:50:47
613,2012-01-12 17:52:38,"Yup, done. Thanks for fixing!

(For posterity: I was going to complain that `[:body, :source].each do |method|` is a bit excessive for an aliased method, but given the recent change in semantics, I think it's best to be thorough with the specs.)
",joliss,2012-01-12 17:50:47
612,2012-01-12 17:08:25,,michaelklishin,2012-01-12 17:56:30
612,2012-01-12 17:56:23,"Great, thanks for the patch -- merged it!

I'll later add rbx-19mode too, if it passes on my fork.
",joliss,2012-01-12 17:56:30
612,2012-01-12 18:05:56,"> I'll later add rbx-19mode too, if it passes on my fork.

No dice, Nokogiri isn't friends with rbx-19mode yet. http://travis-ci.org/#!/joliss/capybara/jobs/512767

We'll try again in a few months I guess.
",joliss,2012-01-12 17:56:30
612,2012-01-13 01:54:52,"`rbx-19mode` is still rough around the edges. We upgrade it roughly once a week (actually, when Rubinius folks ask us to). A lot of issues are being fixed every month, so lets see how it goes in a month or two.
",michaelklishin,2012-01-12 17:56:30
611,2012-01-12 16:35:46,"WebKit will append a '?' to the URL when submitting a form via GET, even
if there is no actual form data. (Firefox does not.) This causes a couple
of tests to fail for the Poltergeist driver, because the tests do not
expect there to be a '?'. Presumably it would also affect
capybara-webkit.

I am not sure which behaviour is 'correct' but it would seem a bad idea
to mess with the URL that the browser is actually providing, so changing
to test like this just allows the results to be consistent.
",jonleighton,2012-01-12 17:01:45
611,2012-01-12 16:36:34,"You can see an example of the test failure here: http://travis-ci.org/#!/jonleighton/poltergeist/jobs/512205/L79
",jonleighton,2012-01-12 17:01:45
611,2012-01-12 17:32:40,"Not to bikeshed, but how about #614 instead (includes a revert; diff at https://github.com/joliss/capybara/commit/be6c1a02c4672496cd86c64e02850a3831815cc7)?

That might be a simpler solution. Does it solve your problem too, Jon?
",joliss,2012-01-12 17:01:45
611,2012-01-12 17:38:35,"Yep I'm sure that would solve the problem. Really don't mind if that's implemented instead, so long as my tests pass :)
",jonleighton,2012-01-12 17:01:45
611,2012-01-12 17:46:00,"Done :)
",joliss,2012-01-12 17:01:45
610,2012-01-12 01:02:41,"I sometimes come across a situation where it would be convenient to supply an already-found element to actions such as `fill_in`. For example:

<S_CODE_TOKEN>

I could write `search_field.set(""test"")` or set the field names only but both options seem less elegant.

I was wondering if this is a bad approach or if it's functionality you'd be willing to accept a patch for?
",Odaeus,2012-07-10 13:15:29
610,2012-07-10 13:15:29,"I don't see the advantage over `search_field.set(""test"")` at all. `fill_in` is just syntax sugar for `find(:field, foo).set(bar)`.
",jnicklas,2012-07-10 13:15:29
609,2012-01-11 22:47:12,"Adds Capybara.asset_servers: is a hash of url => [path prefixes] which will be written analogously to directories in asset_root.  capybara/rails is extended with a sensible default.

Upshot is: use save_and_open_page in a run, run 'rails server', and asset pipeline resources will get served by localhost:3000.
",nyarly,2012-07-09 15:31:08
609,2012-01-12 10:44:18,"Your patch doesn't apply cleanly on master. You should `git rebase master`, fix the conflicts, and then `push -f`.
",joliss,2012-07-09 15:31:08
609,2012-01-12 12:04:33,"You could also squash the two commits into one, using `git rebase --interactive`, by the way.
",joliss,2012-07-09 15:31:08
609,2012-01-12 20:38:40,"Okay, I believe I've accomplished that rebase and squash.  Specs pass.
",nyarly,2012-07-09 15:31:08
609,2012-01-23 19:33:27,"Any work on retrying this pull?
",nyarly,2012-07-09 15:31:08
609,2012-01-24 11:10:57,"I've been meaning to try but haven't gotten around to it so far. Assuming it works the way I understand it from reading your text and the code, I'm conflicted: On the one hand, it solves a bothersome problem. On the other hand, it's a pretty ugly hack (solving an admittedly ugly problem). And I suspect it will cause funny things to happen when you start a JS app with a prepopulated DOM.

So I'm on the fence.
",joliss,2012-07-09 15:31:08
609,2012-01-24 18:15:49,"I'll admit, I wish you'd been more explicit about your concerns when I suggested the change on the mailing list.

My reasoning is that, with the Rails 3.1 asset pipeline, there's no other reasonable way to get assets injected into save_and_open pages.  The alternative is to precompile assets in dev env, but that completely bollixes the normal dev env server as soon as any assets change.  (There was another problem with precompiling in development, but it's subtle and I don't remember what it is until it bites me.)

Part of the reason that I put in the extra time on making the addition configurable is that, on the one hand, different devs might have different development servers set up (e.g. Apache local servers instead of 'rails server'), but I don't see why if there was an issue with a prepopulated DOM, the solution couldn't be to configure Capybara.asset_server = {} to disable it.
",nyarly,2012-07-09 15:31:08
609,2012-01-24 23:45:41,"> I'll admit, I wish you'd been more explicit about your concerns when I suggested the change on the mailing list.

Right. Sorry about that.

> ... there's no other reasonable way to get assets injected into save_and_open pages.

Hm. _nods_

> I don't see why if there was an issue with a prepopulated DOM, the solution couldn't be to configure Capybara.asset_server = {} to disable it.

Sure. Perhaps my issue stems from the fact that I mostly test single-page apps, where I think this change is actually making things more confusing (and by default so). E.g. in my Backbone app here, if I save_and_open_page, it's now styled alright, but the JS app instantly reinitializes and overwrites the app div, essentially resetting the state to what it was at load time. So if say an element was renamed, it visually appears reset to the original state, until you View Source and discover that the DOM has indeed changed.

I can see that it's an improvement for multi-page apps though.

Anyways. These are just my (confused, rambling ^^) thoughts. I think Jonas has better judgement on this. Let's see what he has to say.

P.S. I just tested it in my Rails app and it appears to be working fine.
",joliss,2012-07-09 15:31:08
609,2012-01-24 23:47:40,"Seems like the simplest thing in the world to change the default to {} and let capybara/rails.rb set up a sensible default.
",nyarly,2012-07-09 15:31:08
609,2012-01-24 23:52:50,"Oh, that's a single-page Rails app I was talking about, actually. :) Defaulting to {} (or nil) and setting it up in rails.rb is exactly what your patch is doing (and rightly so), isn't it?
",joliss,2012-07-09 15:31:08
609,2012-01-24 23:53:48,"I think it is, actually.  It's been a little while since I looked at it :)
",nyarly,2012-07-09 15:31:08
609,2012-01-24 23:55:17,"So, next thought: how general a case is single-page Rails?  Because I'm the ""use apache for dev"" guy, which I didn't consider the common case, either.

And: are you using precompiled assets, or what?  How do your saved pages working without this?
",nyarly,2012-07-09 15:31:08
609,2012-01-24 23:58:58,"I don't know how common it is, actually. Re assets, I'm not precompiling in dev/test mode. With your patch applied it just pulls the live-compiled JS files from the dev server. (Without it applied, I see a black-and-white page showing the DOM state, and no JS is working obviously. The black-and-white rendering is pretty useless too, though perhaps less confusing for newbies.)
",joliss,2012-07-09 15:31:08
609,2012-02-08 02:52:21,"Any word from Jonas on this?  I'd like to stop having to monkey patch in my apps :)
",nyarly,2012-07-09 15:31:08
609,2012-02-08 09:50:48,"Let's cc him: @jnicklas, care to take a look?
",joliss,2012-07-09 15:31:08
609,2012-02-09 12:40:11,"My suggestion is this: yank the whole asset rewriting completely.

1) It's never quite worked
2) There are better ways of debugging Capybara tests
3) It's such a horrible hack

Thoughts?
",jnicklas,2012-07-09 15:31:08
609,2012-02-09 19:51:45,"At this moment, I'd be disappointed and distressed to see asset rewriting
removed from Capybara.

Re: 2) I actually find asset rewriting to be a really useful way to debug
Capybara tests.

I'd be interested to hear about the better ways, but am having a hard time
picturing what they could be.  Maybe ""pause on fail"" or something, in
concert with better docco about how to get Firebug into the Selenium
browser.  Even so: having to use Firebug would be unfortunate (much prefer
the Webkit devtools)

1) The whole purpose of this patch was to improve how well they worked, and
I've had good results with it so far.

3) It's no more horrible than half a dozen Rack Middleware in use.

On Thu, Feb 9, 2012 at 4:40 AM, Jonas Nicklas <
reply@reply.github.com

> wrote:
> 
> My suggestion is this: yank the whole asset rewriting completely.
> 
> 1) It's never quite worked
> 2) There are better ways of debugging Capybara tests
> 3) It's such a horrible hack
> 
> Thoughts?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/609#issuecomment-3886644
",nyarly,2012-07-09 15:31:08
609,2012-02-10 01:58:07,"> I'd be interested to hear about the better ways

I like to use `binding.pry`, so I get a Ruby shell and I can also interact with the browser.

> having to use Firebug would be unfortunate 

I assume once you've paused the test with binding.pry, pasting the current URL into a Chrome browser should work too.
",joliss,2012-07-09 15:31:08
609,2012-02-10 02:02:58,"The other thing that makes save_and_open appealing (or: what I do which is
inject the save_page path into the exception message) is that at the end of
a long set of test runs, I can review each fail individually, rather than
have to go into a debugger on a particular spec.  Sometimes the debugger is
the right approach, but it's really nice to have a snapshot of a failure as
it occurred in the browser.

TL;DR: I get a lot of value out of save_page, which is why I submitted a
pull request to improve it.
",nyarly,2012-07-09 15:31:08
609,2012-02-25 22:27:30,"I applied the diff to my installed gem in a Rails 3.2 environment. It didn't appear to work at first, but after starting Rails Server it did.  Now running rspec with Rails S running or not, I seeing my assets displayed as I expect.

Would enjoy reading ptrs to other techniques for debugging.
",kkelly18,2012-07-09 15:31:08
609,2012-02-25 22:34:10,"Kevin, are you running a local Rails server for development?  This patch does the same sort of rewriting that save_and_open does, but adds 127.0.0.1:3000 (by default) for URLs whose path starts ""assets"" (by default).  

So: you might not be running 'rails server' on port 3000.  Or there might be a problem - check the source of the files that result and confirm that assets paths are rewritten?
",nyarly,2012-07-09 15:31:08
609,2012-02-26 16:42:09,"Hi Judson,
Thanks for contacting me.  

I wish i could objectively explain why, but after a server reset my issues went away.
Yes i'm running a local rails server.

Thx for making the patch.

-kevin

On Feb 25, 2012, at 5:34 PM, Judson Lester wrote:

> Kevin, are you running a local Rails server for development?  This patch does the same sort of rewriting that save_and_open does, but adds 127.0.0.1:3000 (by default) for URLs whose path starts ""assets"" (by default).  
> 
> So: you might not be running 'rails server' on port 3000.  Or there might be a problem - check the source of the files that result and confirm that assets paths are rewritten?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/609#issuecomment-4176829
",kkelly18,2012-07-09 15:31:08
609,2012-03-15 06:42:29,"Any chance this'll be merged?  @jnicklas ?  Or are the save_and_open just going away?
",nyarly,2012-07-09 15:31:08
609,2012-04-13 16:19:40,"What's the status on this? I can't get js or css to load on my Rails 3.2.3 app. I have a feeling this is related to this issue? I get 404 errors when it tries to fetch the resources.
",EricR,2012-07-09 15:31:08
609,2012-07-09 15:31:08,"I am making an executive decision here by virtue of my status as Benevolent Dictator for Life of Capybara:

Asset rewriting has got to go. It is seriously the worst part of the entire Capybara code base. It's a terrible hack which has never worked right in the first place and the slim benefit it gives us can easily be achieved by superior debugging methods, like running the same test in Selenium and halting execution via e.g. `sleep`, `gets` or `binding.pry`.

I'm sorry if this annoys some of you, but it's my job to make the tough decisions about what goes in and what stays out. If I don't do that job and simply accept everything, we will not end up with a good result. So I hope that you can accept this decision even though you may disagree with it.
",jnicklas,2012-07-09 15:31:08
609,2013-01-04 22:47:11,"FWIW, @jnicklas I think you should care more about how people need to use Capybara than having Capybara's code itself look good.

I've only _just_ gotten `capybara-firebug` working, but prior to today I literally had _no_ feasible way to debug js issues in my request (now ""feature"") specs.  And even at that, my workflow sucks for debugging js issues (run specs, edit failing tests to change them to `:driver => :selenium_with_firebug` and add a debugger in each failing example, re-run failing examples & poke around in firebug).

Compare this with simply accepting this PR, which would enable developers -- regardless of whether they are using Selenium or not -- to actually be able to debug their js.  I'm mainly discussing WRT to rails devs, as it's my opinion that the asset pipeline causes most of the headaches.

At the end of the day, the 20+ developers in my office would have benefitted from this functionality, as would (I'm sure) many many others.  There are enough stackoverflow questions and at least 2 issues (if you count this one) on the Capybara repo itself about issues with assets and `save_and_open_page`.  Surely you've heard about the user researcher at Yahoo! that found there were 50,000 people who experienced a given problem for every ONE that complained about it...

Just my 2c.  I guess we'll continue working around the limitations of the tool.
",sdhull,2012-07-09 15:31:08
609,2013-01-05 00:35:10,"@sdhull you're right, I do care a lot about how the code looks. Fiercely. But you know what, for a tool as widely used as this one, we have surprisingly few actual bugs reported. This is a library that people use to write tests, which means we have a responsibility not to fuck shit up, so I'm not going to apologize for the fact that I am pedantic and that I throw out stuff which is crap.

You know save_and_open_page still _works_, right? You can open the page in a browser and take a look around, browse the source, etc… If you add CSS and JS and you're using RackTest, you're making it _worse_, because RackTest doesn't have CSS and JS, so now you're seeing the page differently from how Capybara would. How is that better?

How would completely altering all paths to all linked files _help_ people debug stuff which is broken in the asset pipeline. Under RackTest, assets aren't even loaded, what possible effect could they even have on why your tests are breaking?

(Also, look into Pry, it's the bomb for all kinds of debugging)
",jnicklas,2012-07-09 15:31:08
609,2013-01-05 00:50:27,"Sure, that's accurate for those only using capybara to test with with rack test.  Perhaps you should remove support for other drivers?  :trollface: 

Fact of the matter is, websites do depend CSS & JS. The webkit driver (or similar) is much more useful for writing specs that will test _real user experiences_.  Most of our specs are written with the webkit gem, as most of our user interactions depend on javascript.

So. When capybara can't find content on the page that ""clearly shows up on the page!"", it is actually helpful when you save_and_open_page and CSS renders and you see ""oh. that content is hidden with css"".

And when my js-dependent specs don't pass, it would be nice to be able to poke around in webkit developer tools javascript console and see ""Oh, my js didn't execute because of this js exception.""  Or whatever the case may be.

I would guess that more than 1/2 of developers using Capybara use it with a driver that allows them to test javascript.  Of course, that's just a guess.

All that said, please don't misunderstand.  I love capybara and believe that it's a great tool.  It's just caused me a lot of pain in the past couple of months and I can't just continue plugging along anymore without at least voicing my opinions.  Also if you were to actually remove support for drivers other than RackTest, every project I've ever worked on that used Capybara would immediately stop using it and find something that did support drivers that can execute js.  I'm just one person but I've worked at quite a few different startups here in SF.

I like Pry, though I don't know as much about it as I'd like to.  Can it help me debug javascript on my pages when it only seems to be failing in specs (eg, non-reproducible in dev or staging environments)?
",sdhull,2012-07-09 15:31:08
609,2013-01-05 01:13:25,"Hmm, I misread your comment.

Of course we aren't going to remove support for other drivers. That's the reason I wrote Capybara in the first place, after all.

I always use Selenium with Chrome, instead of Firefox, for debugging purposes, since its built in developer tools are far superior, it's a lot easier to debug. No messing around with Firebug.

As for using Pry, just add `binding.pry` right before whatever your failure is, and then use `find`, `all`, `html`, `find(""foo"").visible?`, `find(""foo"").text` or whatever else gets you closer to figuring out why your test is failing. If that doesn't work, I would switch to Selenium and take a look at it in a real browser.

If you're dissatisfied with the state of the project, then please, _please_ help us out. We're just two people running this show, and it's a lot of work. But don't come here and threaten and accuse and point fingers, because that won't help anyone in any way.
",jnicklas,2012-07-09 15:31:08
609,2013-01-05 20:26:17,"I apologize for comments that came off as threatening/accusatory.  Yesterday was the culmination of months of frustration with Capybara & the asset pipeline.  I certainly did not intend to be threatening or accusatory, and I think that my frustration translated poorly in my comments.

Aha!  Didn't realize I could use Selenium with Chrome!  That will be a great improvement; I also prefer it's developer tools over Firebug.

Pry is cool, but I don't think it will help me debug broken javascript.  In your example of usage, there's nothing really to set it apart from a debugger.

As for contributing, it is extremely disheartening to see this PR.  This PR, as well as #485, #373 as well as [various](http://stackoverflow.com/questions/9356398/save-and-open-page-not-picking-up-scss-markup) [discussions](https://groups.google.com/forum/#!msg/ruby-capybara/SBCor8UUj7w/hv97EgUQ1P4J) on the [web](https://gist.github.com/1144277) seem to indicate that developers want to use `save_and_open_page` for debugging that goes beyond simple content & markup.

Someone even went so far as to submit a PR to make it work and it was unceremoniously rejected. This does not inspire me to submit my own PRs. This pretty much makes me despair.
",sdhull,2012-07-09 15:31:08
609,2013-01-05 20:34:13,"The reason `save_and_open_page` is better for debugging than going full-blown Selenium + debugger or pry is that in most cases I simply want to do a post-mortem on failing specs.

So in my `spec_helper.rb` I have:

<S_CODE_TOKEN>

And I can run my specs, grab some coffee while they run, and if something fails -- whether it's content, markup, CSS, or JS that went awry -- I can come back and examine the pages and the error messages that were left for me.

If something has truly gone bad, then a more interactive debugging session with Selenium (driving Chrome) will be excellent.
",sdhull,2012-07-09 15:31:08
609,2013-01-06 02:27:16,"@sdhull if you can come up with something that isn't as much of a hack as this is, then I'd be okay with accepting a pull request like that. My issue with this pull request isn't what it's trying to fix, My personal opinion aside, if you can come up with a solution which gives a better debug experience then that's great, and I'd be happy to merge it, but it needs to be not terrible.

Some pull requests get rejected, that's the natural order of things. As maintainer, I have to make decisions, I can't just blindly merge everything. If you send me something I promise I'll consider it, but I can't promise I'll merge it, that's just a risk you have to take.
",jnicklas,2012-07-09 15:31:08
609,2013-01-08 19:02:32,"Fair enough.

Just to be clear, what specifically did you take issue with?  The implementation of `#rewrite_css_and_image_references` or the fact that it exists?
",sdhull,2012-07-09 15:31:08
609,2013-01-08 21:02:57,"One huge no-no about this pull request was that it made the assumption that there is a development server running at localhost:3000. Ideally we would make no assumption about any other server processers being started. If we need a server running, we should start it ourselves, or use the existing Capybara::Server somehow.

Also, we should use a proper HTML parser in order to inject the new asset paths, instead of relying on regexps. Parsing HTML with regexps is stupid.
",jnicklas,2012-07-09 15:31:08
609,2013-01-11 19:04:52,"So... if I were to revisit this PR and have it make no assumptions about dev servers and to use a proper HTML parser in order to inject new asset paths, you would reconsider this?
",sdhull,2012-07-09 15:31:08
609,2013-01-12 11:46:01,"Yes.
",jnicklas,2012-07-09 15:31:08
609,2013-02-09 10:52:12,"Took awhile for me to get around to it, but finally got something to show: #958 

Again -- apologies for my outrage. Capybara is like miles better than Webrat and I'm very happy it exists.  :wink:
",sdhull,2012-07-09 15:31:08
608,2012-01-11 17:15:35,"The build is still too unreliable (mostly due to ""docElement is null""
errors) to make this useful.
",joliss,2012-01-26 11:52:01
608,2012-01-11 18:17:34,":( Can't we live in hope?
",jnicklas,2012-01-26 11:52:01
608,2012-01-11 18:30:22,"If you like :)

I'm personally not so convinced that the build will be passing reliably any time soon. The build _matrix_ is still very useful IMO, but as for a ""passing/failing"" image that's red half the time for flickering tests, I'm not so sure. ;-)

Feel free to close though if you like to have the status image on the GitHub page.
",joliss,2012-01-26 11:52:01
608,2012-01-26 11:52:01,"(I take it you're not convinced... ^^ Closing to keep the lingering pull requests in check.)
",joliss,2012-01-26 11:52:01
607,2012-01-10 22:00:12,"select_date arguments should be reversed.  It's a verb, like select:

`select ""car"", from: ""Vehicles""`

and analogously

`select_date ""January 1, 2012"", from: ""Date""`

and not

`select_date ""Date"", with: ""January 1, 2012""`
",gavinhughes,2012-01-10 22:42:30
607,2012-01-10 22:22:08,"Perhaps I'm being an idiot somehow, but I'm pretty sure there's no `select_date` method in Capybara.
",jnicklas,2012-01-10 22:42:30
607,2012-01-10 22:42:29,"Oops, my bad.  This issue belongs in cucumber-rails.  
",gavinhughes,2012-01-10 22:42:30
606,2012-01-10 17:34:07,"---

`instance_variable_set(:@last_request, nil)` is rather ugly, but Rack::Test does not expose a writer for `@last_request` in lib/rack/mock_session.rb.

Do you think this is too ugly? It won't fail outright if `@last_request` ever goes away in Rack::Test, but the referer behavior will break.
",joliss,2012-02-01 10:05:04
606,2012-01-20 12:47:41,"@jnicklas 

I'm starting to think that this is actually not the right way to do it.

I've repushed a better fix with a cleaned up (shorter) implementation of referer handling. Instead of always sending referers and special-casing visits and redirects, we now explicitly send a referer along with links (follow) and form submissions (submit), like a real browser.

I've also added a test so we now cover everything (visit, link, redirect, submit).

See if you like it! :)
",joliss,2012-02-01 10:05:04
606,2012-02-01 00:12:18,"@jnicklas I'm pretty confident that the repushed code is good. Mind if I self-merge?
",joliss,2012-02-01 10:05:04
606,2012-02-01 08:14:10,"Looks good! Feel free!
",jnicklas,2012-02-01 10:05:04
605,2012-01-10 13:34:57,"This way users of Capybara 1.1.2 will not be confused. We could start
preferring has_text in the README once 2.0.0 is out.

@hardbap in #580 and @mipearson in #604 ran into this -- thanks to
both for the reports!
",joliss,2012-01-10 14:59:25
605,2012-01-10 14:59:57,"As much as I'd like to get people to read the documentation for the gem they are actually using, it seems like I'm fighting a lost cause :(
",jnicklas,2012-01-10 14:59:25
605,2012-01-10 22:31:12,"@jnicklas it's difficult - there isn't, afaik, a good way to serve README.md et al from your bundled gems, and the (incorrect) assumption is made that if you're on the latest version of a gem then whatever is on github's default branch is correct.
",mipearson,2012-01-10 14:59:25
604,2012-01-10 04:47:15,"In the AJAX section:

<S_CODE_TOKEN>

a variant of this:

<S_CODE_TOKEN>

Gives me

<S_CODE_TOKEN>

Appending puts above it shows that the element is found and that it has text.

Investigation of the API docs shows that `Capybara::Node::Element` does not mix in `Matchers`, hence no `has_text?` method.

Workaround is `find(#title).text.should include?(@advert.title)`

Using REE 1.8.7, Rails 3.0.11, Capybara 1.1.1, rack-test 0.5.7, Cucumber 1.1.4
",mipearson,2012-01-10 04:53:43
604,2012-01-10 04:53:43,"Er, oops. Turns out that's in master, and not in the gem version.
",mipearson,2012-01-10 04:53:43
603,2012-01-09 18:31:25,"Not sure if I created the test at the right place...
Cheers,
Rob
",robvandijk,2012-01-10 16:39:59
603,2012-01-10 00:41:38,"Very cool. Quick sanity check: This _is_ how real browsers behave, right?

I'll leave some comments in the code.
",joliss,2012-01-10 16:39:59
603,2012-01-10 16:10:59,"Hi Jo,

Thanks for the feedback! Yes, this is how browsers behave (thanks for pointing out that the link should be followed). Refactored to a shared_examples_for, and added it to the tests for the rack_test and selenium drivers.

Rob
",robvandijk,2012-01-10 16:39:59
603,2012-01-10 16:58:35,"Awesome, thanks a lot! I just merged it.
",joliss,2012-01-10 16:39:59
602,2012-01-09 12:20:18,"It's a relatively common misconception that you can use :content as a key - e.g.

<S_CODE_TOKEN>

which would silently pass, even when 'wooo!' is nowhere to be found.  This change should make that error much more obvious.

Related issues : https://github.com/jnicklas/capybara/issues/525

It would be nice to raise an error on passing a block in - eg 

<S_CODE_TOKEN>

which seems to be a common error on people switching to capybara via webrat.  However, that's a bit more tricky and would probably need fixing at the rspec-matcher level, since the block doesn't make it as far as has_selector? and gets silently discarded.
",jdelStrother,2012-02-09 12:21:34
602,2012-01-09 16:53:34,"I like the idea, but the implementation is lacking. ValidKeys on selector is mutable global state which is bad. It should be moved to the instance instead. Also, the implementation for checking the query keys should be moved to Query, not node/matchers.
",jnicklas,2012-02-09 12:21:34
602,2012-01-09 19:17:51,"ValidKeys on Selector could be replaced with something like this : 

<S_CODE_TOKEN>

?

I'm not sure what you mean about the implementation for checking query keys, though.  There's 3 places that keys passed to has_selector?() are used - node/matchers.rb, query.rb, and selector.rb.  Whichever one is responsible for checking the keys will have to also check the keys of the other 2.  I could move `Capybara::Node::Matchers#assert_valid_options` to `Capybara::Query.assert_valid_options` if you like?
",jdelStrother,2012-02-09 12:21:34
602,2012-02-09 12:21:34,"Closing this pull request, we already have an open issue for this in #525, and I don't like this implementation
",jnicklas,2012-02-09 12:21:34
601,2012-01-08 23:26:14,"Thanks to Adam Cigánek for his helpful input and the original patch!

---

Jonas, what do you think?
",joliss,2012-01-09 07:00:22
601,2012-01-09 07:00:41,"Let's go for this. Too many config options is not a good thing.
",jnicklas,2012-01-09 07:00:22
600,2012-01-08 22:23:50,"<S_CODE_TOKEN>

---

Rack::Test through Nokogiri gives us all the whitespace in #text, which I think is not very helpful for testing, and more importantly it's incompatible with Selenium. This patch fixes that.

I'm actually not convinced that this should be merged into master, since I think it might break existing test code and make people unhappy. My sense (which quite possibly could be off) is that it's more beneficial to be disciplined and wait with this change until version 2.0.

How do you feel about this?
",joliss,2012-01-08 23:08:49
600,2012-01-08 23:07:58,"As I mentioned in the mail I sent out to the mailing list a while ago, master is now moving towards Capybara 2.0, there are breaking changes on there already.
",jnicklas,2012-01-08 23:08:49
600,2012-01-08 23:17:09,"> As I mentioned in the mail I sent out to the mailing list a while ago, master is now moving towards Capybara 2.0, there are breaking changes on there already.

Oh, right. For some reason I thought there was going to be another 1.x release.
",joliss,2012-01-08 23:08:49
599,2012-01-08 14:07:52,"Those changes suppress warnings under lib/capybara/ expect lib/capybara/spec/.

Suppressed warnings:

<S_CODE_TOKEN>

You can see all warnings with the following patch:

<S_CODE_TOKEN>
",kou,2012-01-08 14:09:46
598,2012-01-08 13:32:44,"Rails boot-up time is a [hot topic](http://www.rubyinside.com/ruby-1-9-3-faster-loading-times-require-4927.html) these days, and I got curious why my small application was taking a long time to start on Rails 3.1 and Ruby 1.9.3.  I tried running `time rails r 1` repeatedly, each time adding gems to or trimming gems from `Gemfile` to see their relative impact, and it seems that capybara is a worse offender than most, weighing in around a cost of around 0.4 seconds on my fairly old machine.  Is there anything obvious which can be done to improve this?
",aspiers,2012-07-10 13:34:18
598,2012-02-14 16:23:59,"If you're just worried about bootup time for your unit specs (which should never need capybara), put `:require => false` after the `gem 'capybara'` bit in your gemfile.
",tcrayford,2012-07-10 13:34:18
598,2012-07-10 13:34:17,"I don't think there is. And 0.4s on an old machine in Ruby land ain't half bad.
",jnicklas,2012-07-10 13:34:18
598,2012-07-11 16:16:50,"Hmm.  My tiny Rails app has about 100 gems.  If every gem took 0.4s to load, that would be a _start-up_ time of 40s.  And my ""old"" machine is still a dual-core 2.2GHz, so unless each gem is contributing CPU cycles to the SETI project on boot, I really can't see any justification for the slowness ;-)  Maybe the problem is with Ruby itself.

However I appreciate that we all have limited time, so until I am able to do some profiling and help fix this, I won't complain about it any more ;-)
",aspiers,2012-07-10 13:34:18
598,2012-07-11 16:24:09,"I agree it's important that gems load up fast. That said, as Jonas pointed out, there's no really obvious way to make it faster. Capybara should normally only be added to the :test group, so there's not _that_ much point in lazy-loading Capybara, since you are probably going to use it anyway. Also, the `selenium-webdriver` hog is already lazy-loaded -- it loads only when a test actually uses the Selenium driver (as I just verified). So I can't think of a really easy way to improve performance.

I'm sure Jonas would be receptive to pull requests though, if you want to tackle bootup performance.
",joliss,2012-07-10 13:34:18
598,2012-07-11 16:24:41,"@aspiers 40s seems about right to boot a large rails app these days. Man, and the early days of rails there was lots of crowing about rails booting faster than java. lulz
",tcrayford,2012-07-10 13:34:18
598,2012-07-11 16:33:27,"@joliss The way to improve performance is to profile and find out wtf it's using several million CPU cycles just to start up ;-)  I mean, what can it really need to do which requires all that work?

@tcrayford 40s may be a _standard_ boot-up time these days, but that doesn't mean it's _right_, it just means that as a community we're getting sloppy and our expectations are too low ;-)  You only need to look at what programmers used to do with 64k of RAM and a 50MHz CPU to be reminded of that.  Or what Google achieved with Go's compilation times.  Anyway, I do not want to turn this issue into a nostalgia-fest or flame war, so let's not discuss further until someone has done some profiling or coding ;-)
",aspiers,2012-07-10 13:34:18
597,2012-01-08 12:28:13,"Hi there!

This is a duplicate of issue https://github.com/jnicklas/capybara/issues/570 , but I am attaching a failing spec and I'll try to explain why I think this is a real issue.

I've attached a failing spec here: https://gist.github.com/1578175

In that issue, @jnicklas closes the issue telling that browsers won't bother about that.

The problem is that because of Nokogiri (or Capybara interacting with it, i am not sure where is the real problem) inserts that xml declaration, Capybara parsing breaks and some of my specs are failing.

Every spec where we test that we have some content, and this content contains accented characters (áéíóú), or where we test that we have a html tag (for example, <iframe></iframe>) that with the xml declaration get converted to <iframe />.

The attached spec works  properly in my laptop (capybara 1.1.1, nokogiri 1.5.0, rack 1.2,5, rack-test 0.5.7, ruby 1.9.2p180), but fails in my CI server (same version of every gem, ruby, etc, only difference is that is a 64 bit machine).

I'll try to find the problem.
",gaizka,2012-01-08 14:24:32
597,2012-01-08 14:05:15,"I disagree. Capybara has ways of asserting that the stuff you want to be on the page, actually is on the page. There's `has_selector?`, `find`, `all` and a number of other useful tools, just read the README. Regexp matching against the output of `page.body` is **not** how you're supposed to use Capybara. If you're unsure why, please read this thread: http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags. You should regard the output of `page.body` as debug information for the current state of the DOM. Nothing more.
",jnicklas,2012-01-08 14:24:32
597,2012-01-08 14:24:31,"My mistake then, sorry for the noise. I was used to spec this way sometimes.

The README says:

<S_CODE_TOKEN>

Maybe you could consider that this is only a debugging information, and avoid building specs this way.

Also, thanks a lot for Capybara, it helps so much building robust web apps!!!
",gaizka,2012-01-08 14:24:32
597,2012-01-08 18:56:37,"> The README says: ...

Good point, that's a bit misleading there. I've fixed it in c4247f9.
",joliss,2012-01-08 14:24:32
597,2012-01-08 19:14:16,"Thanks Jo!
",jnicklas,2012-01-08 14:24:32
596,2012-01-07 20:18:25,"Grammatical error in README.md
",snuggs,2012-01-07 20:21:00
596,2012-01-07 20:21:00,"Merged it. Thanks!
",joliss,2012-01-07 20:21:00
595,2012-01-07 15:09:22,"I'm doing some request spec'ing with RSpec and Capybara 1.1.2 using the default driver.

I've got this piece of HTML:

<S_CODE_TOKEN>

When I submit it in the browser I get params like:

<S_CODE_TOKEN>

But in the test it submits:

<S_CODE_TOKEN>

Setting a value="""" does not change anything.
",jacobat,2012-01-12 08:10:34
595,2012-01-07 16:18:55,"I can't reproduce this (with Capybara 1.1.2 or master) on Rack::Test or Selenium -- they always come out as `""menu_item""=>{""role_ids""=>[""""]}`. Could you submit some kind of test case?
",joliss,2012-01-12 08:10:34
595,2012-01-07 22:18:52,"I've setup a demo app showing the problem here:

https://github.com/jacobat/capybara-nested-array-bug

It seems that it's related to having a file field in the form. Removing the file field resolves the issue.
",jacobat,2012-01-12 08:10:34
595,2012-01-11 19:16:04,"It's `rack-test` bug and it was fixed here https://github.com/brynary/rack-test/commit/7edd5bcb98a57686f015c26fc6c0c3dbdc3319d8 I guess. So, `rack-test` > 0.6.0 should fix this.
",nashby,2012-01-12 08:10:34
595,2012-01-12 08:10:34,"Indeed, upgrading to rack-test 0.6.1 solves the issue, thanks!
",jacobat,2012-01-12 08:10:34
594,2012-01-06 18:37:29,"The resulting capybara-1.1.2.gem file contents look OK. I'm just not sure if there was some reason why we'd want to include the spec files.

Excluding spec files would slim the distribution by almost 1MB.
",joliss,2012-04-11 14:09:17
594,2012-01-06 23:12:02,"It seems to be common to include the spec files, though I'm not sure if that's actually useful to anyone. Hmm..
",jnicklas,2012-04-11 14:09:17
594,2012-01-07 03:18:34,"Just checked with the Rails sources, e.g. https://github.com/rails/rails/blob/master/activerecord/activerecord.gemspec They don't include their test directory.

I assume if a popular project doesn't have the tests included, then nobody cares. Or else someone would've sent them a pull request by now.

Though maybe I'm missing something, I don't know all that much about gem maintenance.
",joliss,2012-04-11 14:09:17
594,2012-01-07 03:46:03,"FWIW, I can see a couple arguments for keeping the spec files:
- It allows end users to run the tests when they install your gem, to verify that it works on their OS/ruby installation, and report the results to http://test.rubygems.org/. (test.rubygems.org was launched a while ago, and I thought it was a cool concept, but it seems to have achieved almost no use in the ruby community, sadly).
- Given the fact that tests/specs often document (or at least demonstrate) how to use a gem's API, they occasionally come in handy for end users.  For example, earlier this week, I was trying to figure out how the redis gem exposed all the options for the `zrangebyscore` command, and it was simplest just to pop open that gem and find the tests for that command.  The fact that the tests were included in the gem was nice.

I think the main argument against including tests/specs is that they're not usually intended to be used by end users and it adds bloat to the gem.  But given how much hard drive space we all have these days, I don't think anyone actually cares. 
",myronmarston,2012-04-11 14:09:17
594,2012-01-07 14:04:29,"Wanting to look into the tests sounds reasonable. I'll close this then.

For what it's worth, I'm not sure we'll be able to have Capybara tested with test.rubygems.org, as much as it sounds like a cool idea. Capybara's test suite requires an X server and a Firefox compatible with the selenium-webdriver gem, and there are several flickering tests.
",joliss,2012-04-11 14:09:17
594,2012-01-07 20:50:36,"> For what it's worth, I'm not sure we'll be able to have Capybara tested with test.rubygems.org

Yeah, I wasn't suggesting that--I was just pointing out one general argument people may put forth in favor of keeping the tests in a gem's distribution.
",myronmarston,2012-04-11 14:09:17
594,2012-02-27 01:16:56,"Hm, Capybara is downloaded 3k times per day: https://rubygems.org/gems/capybara/stats
So reducing the gem size by 1MB means 3GB or $.30/d saved on the Rubygems side alone.

So now I'm wondering if perhaps removing the specs would be a good idea after all. What do you think?

(I'm reopening this.)
",joliss,2012-04-11 14:09:17
594,2012-02-27 01:21:00,"Hm, it's just 150KB compressed (1MB would be uncompressed). Not as much, but still, $.05/d in bandwidth.
",joliss,2012-04-11 14:09:17
594,2012-03-13 18:17:02,"@joliss -- Sounds fine.  It didn't even occur to me to think about the additional costs to rubygems.
",myronmarston,2012-04-11 14:09:17
594,2012-04-11 14:09:17,"Closing for lack of enthusiasm. :-)
",joliss,2012-04-11 14:09:17
593,2012-01-06 14:49:22,"Just so we have some code to test with our real-life apps. :)

An ""unambiguous"" match is one with exactly one matching node or exactly
one matching visible node.

Error messages are not updated, it just says ""not found"" if there is
more than one match.

The test suite of course does not pass with this.

[Apply and run against your own app: https://github.com/jnicklas/capybara/pull/593.diff]
",joliss,2012-01-06 14:52:22
593,2012-01-06 14:52:22,"Closing immediately -- this is not actually for merging into master.
",joliss,2012-01-06 14:52:22
592,2012-01-06 14:30:33,"I'm running a remote test with capybara 1.1.2 and a standalone selenium server 2.16.1 and I receive an ElementNotFound exception when the `:desired_capabilities => :internet_explorer`, although when the `:desired_capabilities => :firefox` is able to find that element.

In debug mode and `:internet_explorer` I can see the element in the result of `page.html` method call. I simple call `page.click_link(id)` where the `id` is the `<a id=""id"">`

Any ideas? Or is there anything else I could do for the investigation?
",ZsoltFabok,2012-01-06 14:55:48
592,2012-01-06 14:55:48,"This is almost certainly a Selenium problem. From what I hear, the IE driver is not a mature as the Firefox driver. I'd recommend running all your tests with Firefox unless you absolutely need a different browser.

To debug this, you could try interactively toying around with all('...') calls to try zeroing in on your element (using ruby-debug or pry).

I recommend using the mailing list for questions like this, by the way!
",joliss,2012-01-06 14:55:48
592,2012-01-09 09:55:08,"Thanks, I'll dig deeper and write an issue on the IE driver.
",ZsoltFabok,2012-01-06 14:55:48
591,2012-01-04 18:27:50,"/cc @jarib

Sometimes (very rarely), running the Capybara test suite yields failures with a weird ""docElement is null"" error message.
On my system (MRI 1.9.2 I'm pretty sure): https://gist.github.com/1560935
Or Travis: http://travis-ci.org/#!/jnicklas/capybara/jobs/475145

The offending test code is here: https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/within_spec.rb#L22 ff.

Any ideas as to what might be going on?
",joliss,2012-01-05 10:34:34
591,2012-01-04 19:36:18,"I have no idea what that error even means. Haven't ever seen it locally on my machine either, which is strange. Maybe @jarib knows? Sorry for linking you in all the time Jari, I'll buy you a beer to make up for it next time we meet ;) At least we know that it's not completely random, since it seems to be failing with the same spec.
",jnicklas,2012-01-05 10:34:34
591,2012-01-04 19:37:10,"Just saw that you already cc:d him ;)
",jnicklas,2012-01-05 10:34:34
591,2012-01-04 19:38:13,"Beer for Jari, definitely.
",joliss,2012-01-05 10:34:34
591,2012-01-04 21:23:50,"No worries about the cc'ing. 

I have a trick for tracking down this type of bug: meta refresh. This script will reproduce the problem:

<S_CODE_TOKEN>

I've filed [a bug](http://code.google.com/p/selenium/issues/detail?id=3147) for this in the Selenium tracker.
",jarib,2012-01-05 10:34:34
591,2012-01-05 10:34:34,"Wow, that's very cool.

I'll close this issue for now. I'm subscribed to the Selenium bug report and I'll keep an eye on it. If we still have a timing problem or somesuch in the within_spec after this gets fixed upstream (or if they decide it's wontfix/invalid), we can reopen this issue.
",joliss,2012-01-05 10:34:34
590,2012-01-04 00:02:31,"Update Readme to use markdown syntax. GF Markdown simply looks better. Merge or close this at will.
",gmile,2012-01-04 08:02:09
590,2012-01-04 00:14:53,"Great! The RDoc syntax is seriously unwieldy. I like (GitHub-flavored) Markdown better as well.

Rendering: https://github.com/gmile/capybara
Diff: https://github.com/gmile/capybara/commit/8f39e56e7071ce7d7b44fd6782bae83e56576c84

Looks good to me. Jonas?
",joliss,2012-01-04 08:02:09
590,2012-01-04 08:02:26,"That's awesome, been meaning to do this myself, thank you!
",jnicklas,2012-01-04 08:02:09
589,2012-01-03 20:29:23,"/cc @madadam

Quoting my commit message in c444d336:

> Remove broken tests for server_boot_timeout
> 
> When they were added in 09d6335, responsive? already only hit `/__identify__`, which does not hit the server, but gets special-cased in Capybara's Identify server class (and runs instantly). 
> 
> So it's not clear what constitutes a ""slow"" server that might time out at boot, and thus why server_boot_timeout needs to be configurable. A server that is slow to respond to HTTP requests would not trigger the boot timeout. All we really seem to be waiting for within the timeout window is for Thin or WEBrick to come up.

It's not clear to me at this point that this was ever a useful option. Should we perhaps remove it for Capybara 2.0? If it comes up for anyone, we can re-add it in 2.x, this time with proper tests to show why it's needed.
",joliss,2012-01-09 07:00:23
589,2012-01-03 20:50:54,"Hey there. The motivation for introducing this option was this:

When your app is huge, it may take some time to boot. Then Capybara would timeout during booting the app up. This option was a solution (actually, a workaround) to this problem. I know that it's crappy solution, but it was quick to hack and it solved the problem I had. The tests are shit, though - they don't show the purpose of the feature properly.

Just wanted to clarify this. I don't use Capybara anymore, so don't care too much. Feel free to remove it if you think it's the right thing to do.
",madadam,2012-01-09 07:00:23
589,2012-01-03 20:57:00,"Thanks for chipping in! I realize you probably don't have your app around anymore, but do you happen to know what specifically the huge application would have doing while the server booted?

I would expect that require'ing all the source files would have been done by this time, and all of it happens before the first HTTP request.

Another question: what value did you have to put for server_boot_timeout to make it work? I'm wondering if we could just set the timeout to 60 seconds (up from 10) and remove the option without making people unhappy.
",joliss,2012-01-09 07:00:23
589,2012-01-03 21:04:05,"It was a rails app with shitload of gems and plugins initializing stuff. Sorry I can't be more specific, I don't work on the app anymore so can't check. Neither do I remember the exact value we used. I'm almost sure it was less than 60.

I can imagine hardcoding a ridiculously high timeout value would work for most people. Or maybe removing the timeout completely and let Capybara wait until the app boots up, no matter how long it takes? In case it gets stuck, the user can always hit Ctrl-C or something. Not sure this is feasible/good idea though. 
",madadam,2012-01-09 07:00:23
589,2012-01-09 14:44:23,"Thanks Adam, that was really helpful!

(Closed by pull request #601: Remove Capybara.server_boot_timeout, hard-code 60 seconds.)
",joliss,2012-01-09 07:00:23
588,2012-01-03 18:16:22,"I'm update master branch of capybara and run my requests specs. And fails on everyone, where used has_selector? and related find_link, find, all and etc. The error was:

<S_CODE_TOKEN>

After spending some time with source code I find a problem. It was in lib/capybara/selector.rb 34 line

<S_CODE_TOKEN>

Instead of putting all params, I'm passed only first and error gone.

Or maybe better remove xpath_options below in method ""call""

<S_CODE_TOKEN>

I didn't find where them applied, but them also create warning 

<S_CODE_TOKEN>
",jalkoby,2012-01-03 19:07:08
588,2012-01-03 18:38:14,"Thanks for the great report! A fix is in the queue -- I'll push it within the next hour.
",joliss,2012-01-03 19:07:08
588,2012-01-03 19:07:51,"Okay, pushed the fix. Thanks again!
",joliss,2012-01-03 19:07:08
587,2012-01-03 16:45:53,"Our issue:

<S_CODE_TOKEN>

The matcher we are using is

<S_CODE_TOKEN>

This uses the method:

<S_CODE_TOKEN>

Which generates an xpath matcher using normalize-space:

<S_CODE_TOKEN>

Use Case: 
Using Date.to_s(:long) can generate a string with 2 spaces in it. 

I apologize if this has already been reported.  When searching we found a lot of issues referring to the has_content? matcher but nothing with this specific problem.

If this is indeed an issue, we are open to providing a solution but we do not want to dive into it if it has already been addressed.

Thanks.
",coffeencoke,2012-01-03 17:00:28
587,2012-01-03 17:00:28,"Pretty sure this has been fixed.
",jnicklas,2012-01-03 17:00:28
586,2012-01-03 14:54:51,"Shortening the README a bit more.
",joliss,2012-01-03 15:08:17
585,2012-01-03 09:29:21,"After forking & cloning the repo and running `bundle && rake` as described in `CONTRIBUTING.md` I’m running into the following error:

<S_CODE_TOKEN>

It looks like `spec_helper.rb` also requires capybara’s `spec_helper.rb` which isn’t there. How can I resolve this?
",clemenshelm,2012-01-03 12:38:30
585,2012-01-03 11:36:08,"Did you mean to file this for capybara-webkit? They have their own issue tracker.
",jnicklas,2012-01-03 12:38:30
585,2012-01-03 12:18:23,"What Jonas said.

For what it's worth, I have a hunch that you might need to run `bundle exec rake` instead of `rake`. Does that help?
",joliss,2012-01-03 12:38:30
585,2012-01-03 12:38:33,"@jnicklas Yes, you are right. I had a tab of both projects open and confused it.

@joliss Thanks, that did the trick!
",clemenshelm,2012-01-03 12:38:30
584,2011-12-31 00:58:44,"Call reset_sessions! and use_default_driver in sample code, and explain
driver switching.

Be opinionated and recommend using DatabaseCleaner with the truncation
strategy. (Selective switching to transaction cleaning for Rack::Test is
hard to do without metadata, and the shared connection thing feels a bit
hackish -- you never know when it might break in the future.)

The instructions require Rails. Generic instructions are difficult to
write (we can't even use ""teardown"" with a block callback, and we don't
know the database situation), but are easy to figure out based on the
comments in the code, so I'm leaving them out, at least for now.

---

The code is what I am using in my own app.

You can read the new section here: https://github.com/joliss/capybara/tree/test-unit-docs , section ""Using Capybara with Test::Unit""

This might be worth extracting into library code, but I think it's a big improvement to even have it in the README for now, and it's a good starting point.
",joliss,2012-01-02 16:06:32
584,2012-01-01 19:59:09,"I like it, but maybe a downside that we're now exclusively focusing on Rails?
",jnicklas,2012-01-02 16:06:32
584,2012-01-02 15:02:34,"Sure, I've repushed it (see at https://github.com/joliss/capybara/tree/test-unit-docs) with generic instructions added.

Happy 2012!
",joliss,2012-01-02 16:06:32
584,2012-01-02 16:06:43,"Nice job! Happy 2012 to you to!
",jnicklas,2012-01-02 16:06:32
583,2011-12-30 17:31:15,"Do not require ""capybara/dsl"" in capybara.rb (reverting 1192ea34),
because it crashes from load-ordering issues. However, we now autoload
Capybara::DSL.

---

I was sloppy with #582. This fixes it properly, and this time ""rake"" passes too.

capybara.rb is perhaps starting to get a little long (365 lines), but dsl.rb looks much better now: https://github.com/joliss/capybara/blob/dsl-cleanup/lib/capybara/dsl.rb
",joliss,2011-12-30 17:50:38
582,2011-12-30 02:16:20,"See discussion in #565. I don't think this is easily testable, is it?
",joliss,2011-12-30 09:04:43
581,2011-12-25 22:59:02,"Hi,

I am stuck with a very weird issue and was wondering whether anybody here could give some help.
I am using cucumber (1.1.4), cucumber-rails (1.2.1), capybara (1.1.2) with capybara-webkit (0.7.2) for the @javascript enabled scenarios, and the default rack_test driver for all the other scenarios. 

The weird thing is that, give one sample feature with just one normal scenario (rack_test) and another @javascript enabled scenario, the following happens:

1) if I run each scenario individually, both run fine;
2) if I run the whole feature, and the @javascript scenario is the last one/follows the rack_test one, all is OK.
3) BUT if I invert the order and have the @javascript scenario first and then the normal one, the JavaScript scenario passes while the second one fails with ""Capybara::InfiniteRedirectError"".

Any idea? I have been looking for wrong redirections etc in my app but I can't find anything that would explain this behaviour and anyway, as said, the problem only happens unless the @Javascript scenarios follow the normal ones, in which case all scenarios pass.

What could possibly change depending on whether @javascript tagged scenarios come first or after? 
I could post some code snippets if you suggest what you would need to check.

I've also posted the same issue to the Capybara-Webkit project (https://github.com/thoughtbot/capybara-webkit/issues/232) as I am not sure of where this would belong.

Thanks in advance!
",vitobotta,2011-12-26 12:09:11
581,2011-12-26 01:45:21,"This is going to sound crazy... Could jQuery's autocomplete possibly be the cause of this issue? It doesn't happen if I ignore some steps to fill an autocomplete field from within the @javascript scenario. Any idea?
",vitobotta,2011-12-26 12:09:11
581,2011-12-26 12:09:11,"Very probably this is an issue with your database. Data is not being setup or cleared the way it is supposed to, please check the README. Please post this to the mailing list instead if you still have problems, this tracker is for verified, repeatable issue only.
",jnicklas,2011-12-26 12:09:11
581,2011-12-26 15:08:17,"Hi Jonas,

thank you. You were right in that it had something to do with the database (or so it seems). I have DatabaseCleaner.strategy = :transaction in my env.rb, and if I leave it as it is the problem persists and, from looking at the test.log, it seems like all tables get truncated after the @javascript scenario although I have set the strategy to transaction.

I can't remember in which gem's code I found this, but apparently with the gems I am currently using the database strategy is automatically defaulted to :truncation for the JavaScript enabled scenarios. 

With the capybara-webkit driver I am using this doesn't seem to work for some reason, while everything works well if I am using the :transaction strategy for both the js and non-js scenarios; from looking into the code it seems -unless I have misunderstood it- that now the db connection is automatically shared between rack_test based scenarios and the capybara based ones, correct?
So I guess this is why apparently there is no need any more to switch database strategy between transaction and truncation depending on the driver?

Anyway, the problem disappeared when I explicitly set Cucumber::Rails::Database.javascript_strategy = :transaction.
No more truncated tables and everything works great and fast.

Thank you :)
Vito
",vitobotta,2011-12-26 12:09:11
581,2011-12-27 14:34:35,"> from looking into the code it seems -unless I have misunderstood it- that now the db connection is automatically shared between rack_test based scenarios and the capybara based ones, correct?

The ""shared DB connection"" thing means that the connection is shared between the main thread and the server thread. (This would be necessary for `@javascript` scenarios, i.e. when Capybara uses Selenium instead of Rack::Test -- Rack::Test doesn't use a separate thread.) The :transaction strategy can't work with Selenium unless you have shared DB connections.

Grepping the cucumber-rails source (for `_strategy` and `share`) it seems to me that it doesn't use sharing by default and instead uses the truncation strategy, but I may be wrong. I'm not a cucumber expert.

Hope this clears things up a bit!
",joliss,2011-12-26 12:09:11
581,2011-12-27 15:13:31,"Surely it does, thank you for the clarification!

On 27 Dec 2011, at 14:34, Jo Liss wrote:

> > from looking into the code it seems -unless I have misunderstood it- that now the db connection is automatically shared between rack_test based scenarios and the capybara based ones, correct?
> 
> The ""shared DB connection"" thing means that the connection is shared between the main thread and the server thread. (This would be necessary for `@javascript` scenarios, i.e. when Capybara uses Selenium instead of Rack::Test -- Rack::Test doesn't use a separate thread.) The :transaction strategy can't work with Selenium unless you have shared DB connections.
> 
> Grepping the cucumber-rails source (for `_strategy` and `share`) it seems to me that it doesn't use sharing by default and instead uses the truncation strategy, but I may be wrong. I'm not a cucumber expert.
> 
> Hope this clears things up a bit!
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/581#issuecomment-3281777
",vitobotta,2011-12-26 12:09:11
580,2011-12-22 14:37:55,"http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Node/Matchers 

doesn't include #has_text?.
",hardbap,2011-12-22 18:08:36
580,2011-12-22 18:08:39,"it just hasn't been released in a gem yet.
",jnicklas,2011-12-22 18:08:36
579,2011-12-21 17:17:49,"<S_CODE_TOKEN>
",joliss,2011-12-21 22:41:23
579,2011-12-21 17:30:49,"Added another one: 

<S_CODE_TOKEN>

That'll be it for today. :-)

The changed README can be seen at https://github.com/joliss/capybara/tree/doc
",joliss,2011-12-21 22:41:23
579,2011-12-21 22:20:02,"> I haven't needed to install this, pretty much ever.

Cool, I've dropped the libffi note. Squashed everything into the first commit and repushed.

> The mailing list is hugely important, did you drop any reference to it?

It's still there, under _Need help?_ at the top (see https://github.com/joliss/capybara/tree/doc). I'm hoping that the prominent placement will lure people away from the issue tracker. ;-)
",joliss,2011-12-21 22:41:23
579,2011-12-21 22:41:51,"Ahh, missed the link to the mailing list. This is very good, merged it!
",jnicklas,2011-12-21 22:41:23
578,2011-12-21 11:00:15,"When running a test where an element is deleted by Javascript after a brief delay, I am getting occasional Selenium::WebDriver::Error::StaleElementReferenceError. My test is using #has_no_css with the :visible => true option.

I am surmising that in one of the passes, the element is found to exist, and then its visibility is checked, but the JS removed the element in the mean time, and this exception is explicitly being passed through immediately rather than causing a retry like other exceptions do (since just wrapping in an explicit #wait_until block didn't resolve it).

I was only able to work around the problem by wrapping the code in a wait_until, and then rescuing the stale reference exception therein, doing `next false` when the exception is rescued.
",stevecj,2012-02-20 06:57:05
578,2011-12-21 11:34:28,"Never seen StaleElementError before, perhaps it should be added here: https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/driver.rb#L124-126, could you try that and see if it solves your problem?
",jnicklas,2012-02-20 06:57:05
578,2012-01-03 12:50:05,"Any news on this? Otherwise I will close this issue.
",jnicklas,2012-02-20 06:57:05
578,2012-01-03 13:29:56,"Quoting http://selenium.googlecode.com/svn/trunk/rb/CHANGES

<S_CODE_TOKEN>

This was done to bring the exception names more in line with the rest of the Selenium project (not sure why/when they diverged).
",jarib,2012-02-20 06:57:05
578,2012-01-08 23:11:19,"Huh, good to know. @jnicklas Luckily, the renamed exceptions are aliased under their old names:

<S_CODE_TOKEN>

So we should leave the old exception names in the code to keep compatibility with selenium-webdriver ~> 2.0.

@stevecj So, back to your original issue, could you perhaps provide some condensed failing test that demos the problem? It's quite possible that there are issues in Capybara with stale element handling -- Selenium can be a hairy beast. But from your description alone it's very hard to reproduce.
",joliss,2012-02-20 06:57:05
578,2012-02-05 10:22:05,"I'm also seeing the StaleElementReferenceError in my test case. For this particular test case, I'm looping over a list of div elements that are in a pagination construct. Currently, it is also intermittent for me. 

Output:

Element not found in the cache - perhaps the page has changed since it was looked up (Selenium::WebDriver::Error::StaleElementReferenceError)
[remote server] resource://fxdriver/modules/atoms.js:9557:in `unknown'
[remote server] file:///tmp/webdriver-profile20120205-11461-1aero1h/extensions/fxdriver@googlecode.com/components/driver-component.js -> file:///tmp/webdriver-profile20120205-11461-1aero1h/extensions/fxdriver@googlecode.com/components/wrappedElement.js:375:in`unknown'
[remote server] file:///tmp/webdriver-profile20120205-11461-1aero1h/extensions/fxdriver@googlecode.com/components/command_processor.js:10219:in `unknown'
[remote server] file:///tmp/webdriver-profile20120205-11461-1aero1h/extensions/fxdriver@googlecode.com/components/command_processor.js:10224:in`unknown'
[remote server] file:///tmp/webdriver-profile20120205-11461-1aero1h/extensions/fxdriver@googlecode.com/components/command_processor.js:10175:in `unknown'
(eval):2:in`find'

I will try adding the error to the specified portion of code and see if that helps.
",thecodenomad,2012-02-20 06:57:05
578,2012-02-05 11:25:50,"@rrgomez: which version of Capybara are you using? Are you using `.native`? Please provide a full stack trace!
",jnicklas,2012-02-20 06:57:05
578,2012-02-20 02:11:54,"Hey, sorry it took so long for me to respond, I'm using capybara 1.1.2. 

As of right now, I'm actually having a fairly hard time trying to recreate the problem. 

And no, I haven't been using the .native feature in the test case that this was showing up on. I'll repost to this thread if/when I see the problem again. Thanks!
",thecodenomad,2012-02-20 06:57:05
578,2012-02-20 06:57:05,"Okay, I'm closing this for now then. Feel free to reopen when you've found a way to recreate it.
",jnicklas,2012-02-20 06:57:05
578,2013-04-05 11:01:45,"necro-bump XD

we're getting a lot of:

<S_CODE_TOKEN>

filling a form and looking for changes on the (reloaded) page.

adding an ugly `sleep 2` between the form filling and the expectation fix the issue... but I'm looking for a more robust solution.

<S_CODE_TOKEN>

Any hint?

thanks!
",enricostano,2012-02-20 06:57:05
578,2013-12-10 16:02:54,"it keeps happening:
C:\Ruby193\bin\ruby.exe -EUTF-8 -e $stdout.sync=true;$stderr.sync=true;load($0=ARGV.shift) C:\Ruby193\bin/cucumber C:/Users/arnaudl/RubymineProjects/Test/features/performance.feature --format Teamcity::Cucumber::Formatter --expand --backtrace --verbose --color -r features
Testing started at 15:55 ...
Code:
- features/support/env.rb
- features/support/pages/BuyoutPage.rb
- features/support/pages/PerformancePage.rb
- features/step_definitions/my_steps.rb

Features:
- C:/Users/arnaudl/RubymineProjects/Test/features/performance.feature
  Parsing feature files took 0m0.024s

Selenium::WebDriver::Error::StaleElementReferenceError: Element not found in the cache - perhaps the page has changed since it was looked up
[remote server] resource://fxdriver/modules/web_element_cache.js:7615:in `fxdriver.cache.getElementAt'
[remote server] file:///C:/Users/arnaudl/AppData/Local/Temp/webdriver-profile20131210-1384-1qkm9fj/extensions/fxdriver@googlecode.com/components/command_processor.js:7233:in`Utils.getElementAt'
[remote server] file:///C:/Users/arnaudl/AppData/Local/Temp/webdriver-profile20131210-1384-1qkm9fj/extensions/fxdriver@googlecode.com/components/command_processor.js:10374:in `WebElement.isElementDisplayed'
[remote server] file:///C:/Users/arnaudl/AppData/Local/Temp/webdriver-profile20131210-1384-1qkm9fj/extensions/fxdriver@googlecode.com/components/command_processor.js:10844:in`DelayedCommand.prototype.executeInternal_/h'
[remote server] file:///C:/Users/arnaudl/AppData/Local/Temp/webdriver-profile20131210-1384-1qkm9fj/extensions/fxdriver@googlecode.com/components/command_processor.js:10849:in `DelayedCommand.prototype.executeInternal_'
[remote server] file:///C:/Users/arnaudl/AppData/Local/Temp/webdriver-profile20131210-1384-1qkm9fj/extensions/fxdriver@googlecode.com/components/command_processor.js:10791:in`DelayedCommand.prototype.execute/<'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/response.rb:51:in `assert_ok'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/response.rb:15:in`initialize'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/http/common.rb:59:in `new'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/http/common.rb:59:in`create_response'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/http/default.rb:66:in `request'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/http/common.rb:40:in`call'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/bridge.rb:634:in `raw_execute'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/bridge.rb:612:in`execute'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/remote/bridge.rb:553:in `isElementDisplayed'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/selenium-webdriver-2.37.0/lib/selenium/webdriver/common/element.rb:171:in`displayed?'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/selenium/node.rb:74:in `visible?'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/node/element.rb:145:in`block in visible?'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/node/base.rb:81:in `synchronize'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/node/element.rb:145:in`visible?'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/query.rb:44:in `matches_filters?'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/result.rb:27:in`block in initialize'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/result.rb:27:in `select'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/result.rb:27:in`initialize'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/node/finders.rb:159:in `new'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/node/finders.rb:159:in`resolve_query'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/node/finders.rb:129:in `all'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/session.rb:354:in`block (2 levels) in class:Session'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/capybara-2.1.0/lib/capybara/dsl.rb:51:in `block (2 levels) in <module:DSL>'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/site_prism-2.5/lib/site_prism/page.rb:60:in`find_all'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/site_prism-2.5/lib/site_prism/element_container.rb:14:in `block (2 levels) in elements'
C:/Users/arnaudl/RubymineProjects/Test/features/step_definitions/my_steps.rb:133:in`block in <top (required)>'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/core_ext/instance_exec.rb:48:in `instance_exec'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/core_ext/instance_exec.rb:48:in`block in cucumber_instance_exec'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/core_ext/instance_exec.rb:69:in `cucumber_run_with_backtrace_filtering'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/core_ext/instance_exec.rb:36:in`cucumber_instance_exec'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/rb_support/rb_step_definition.rb:97:in `invoke'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/step_match.rb:25:in`invoke'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/step_invocation.rb:60:in `invoke'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/step_invocation.rb:38:in`accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:106:in `block in visit_step'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:170:in`broadcast'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:105:in `visit_step'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/step_collection.rb:19:in`block in accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/step_collection.rb:18:in `each'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/step_collection.rb:18:in`accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:100:in `block in visit_steps'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:170:in`broadcast'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:99:in `visit_steps'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:15:in`block in execute'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime.rb:83:in `block (2 levels) in with_hooks'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime.rb:99:in`before_and_after'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime.rb:82:in `block in with_hooks'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime/support_code.rb:120:in`call'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime/support_code.rb:120:in `block (3 levels) in around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/language_support/language_methods.rb:9:in`block in around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/language_support/language_methods.rb:91:in `call'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/language_support/language_methods.rb:91:in`execute_around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/language_support/language_methods.rb:8:in `around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime/support_code.rb:119:in`block (2 levels) in around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime/support_code.rb:117:in `call'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime/support_code.rb:117:in`around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime.rb:94:in `around'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime.rb:81:in`with_hooks'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:13:in `execute'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/scenario.rb:32:in`block in accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/scenario.rb:79:in `with_visitor'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/scenario.rb:31:in`accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:58:in `block in visit_feature_element'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:170:in`broadcast'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:57:in `visit_feature_element'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/feature.rb:38:in`block in accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/feature.rb:37:in `each'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/feature.rb:37:in`accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:27:in `block in visit_feature'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:170:in`broadcast'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:26:in `visit_feature'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/features.rb:28:in`block in accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/features.rb:17:in `each'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/features.rb:17:in`each'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/features.rb:27:in `accept'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:21:in`block in visit_features'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:170:in `broadcast'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/ast/tree_walker.rb:20:in`visit_features'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/runtime.rb:49:in `run!'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/lib/cucumber/cli/main.rb:47:in`execute!'
C:/Ruby193/lib/ruby/gems/1.9.1/gems/cucumber-1.3.9/bin/cucumber:13:in `<top (required)>'
C:/Ruby193/bin/cucumber:23:in`load'
C:/Ruby193/bin/cucumber:23:in `<top (required)>'
-e:1:in`load'
-e:1:in `<main>'
C:\Users\arnaudl\RubymineProjects\Test\features\performance.feature:25:in`Then i buy  collectfrom tickets'
1 scenario (1 failed)
2 steps (1 failed, 1 passed)
0m28.661s

Process finished with exit code 1
",arnaud-co-uk,2012-02-20 06:57:05
577,2011-12-20 23:49:25,"As suggested by @mcmire and @gorn in #483.

---

(Just updated this for a more extensive rewrite of the RSpec section.)

I went through it sentence by sentence and found that none of all those details really added anything. So now we're left with two short paragraphs.

You like?
",joliss,2011-12-21 16:03:13
576,2011-12-20 19:53:38,"Hi,

Is there any default configuration to set a default scope to the session like 

<S_CODE_TOKEN>
",sbounmy,2011-12-20 20:33:13
576,2011-12-20 20:33:12,"No. Please post questions like this to the mailing list.
",jnicklas,2011-12-20 20:33:13
576,2012-06-26 00:50:17,"For anyone else running across this via google: try my janky solution!

<S_CODE_TOKEN>
",shawndrost,2011-12-20 20:33:13
575,2011-12-19 21:42:36,"Closes #572
",sobrinho,2011-12-20 08:27:59
575,2011-12-20 08:28:07,"Thanks!
",jnicklas,2011-12-20 08:27:59
575,2011-12-22 18:16:30,"Hi,

Akephalos is being maintained here:  https://github.com/Nerian/akephalos2
",Nerian,2011-12-20 08:27:59
575,2011-12-22 18:22:05,"Hmm, that's cool. I think we will hold off on adding information about it to the README, but very good that you're putting in the effort of updating Akephalos, it still remains a very good choice, especially for people on JRuby.
",jnicklas,2011-12-20 08:27:59
574,2011-12-19 10:59:40,"Hi all,

I have an issue, which is probably related to ""I don't understand what is going on""

This is what happens:
I'm using Capybara with Cucumber and have a page that requires a lot of processing.
I didn't have any problems with this before, Capybara always seemed to 'wait' for the page.
...Until... I switched from hardware....

Capybare doesn't seem to wait anywhere (before this issue, I always expected it would call '#timeout' somewhere, but it doesn't).
So what is happening? How could it have gone ok (and still does) on some hardware while failing on other hardware?

Thank you in advance
",lenntt,2011-12-19 11:45:53
574,2011-12-19 11:45:52,"Execution speed maybe? Capybara waits for 2 seconds by default. If it takes longer than that, it'll fail. Try increasing Capybara.default_wait_time.

Please post questions like this to the mailing list in the future, this issue tracker is for reproducible issues only.
",jnicklas,2011-12-19 11:45:53
574,2011-12-19 13:59:31,"Thanks for your reply.
Sorry for the inconvience, I've mailed my response.
I don't think it has something to do with the default_wait_time
",lenntt,2011-12-19 11:45:53
573,2011-12-17 16:05:50,"https://gist.github.com/1490592

Test only works if @browser.navigate.to('about:blank') was commented in the reset method of Capybara's driver.rb.
Is there a workaround than blanking out the line ?
",kkganesan,2012-02-03 03:17:34
573,2012-01-03 12:52:14,"Interesting. Why would reset be called there at all? Do you think you could try to distill this into a failing spec in Capybara? It's somewhat tricky to figure out what exactly is going on.
",jnicklas,2012-02-03 03:17:34
573,2012-02-01 22:09:20,"I've been having a similar issue. I have a test suite that uses Rspec, Capybara and Selenium-Webdriver. Each test file used to run in a single browser window, but now after one test the browser navigates to about:blank and the rest fail. Here's an example of a failing test:

https://gist.github.com/1719776
",smills24,2012-02-03 03:17:34
573,2012-02-02 22:08:37,"Nevermind. It seems like resetting the browser between individual tests is intentional? Makes sense, I guess, but in the interest of saving time I've bypassed it by not using capybara/rspec.
",smills24,2012-02-03 03:17:34
573,2012-02-02 22:58:30,"Yes, opening about:blank between tests is intentional -- it stops them from interfering. (E.g. opening ""/page#foo"" and then ""/page#bar"" wouldn't reload the page, so we need to open about:blank in between.)
",joliss,2012-02-03 03:17:34
573,2012-02-03 03:17:34,"Thanks, I now get the reason behind the blank page. I have also moved away from clicking the link thats pops up a window instead I navigate to the popup url in the parent page. 
",kkganesan,2012-02-03 03:17:34
573,2012-02-03 12:18:31,"Hm, interesting. I guess this is a variation of the ""popups are hard to test"" theme.
",joliss,2012-02-03 03:17:34
573,2014-09-04 22:13:00,"Assuming you have a suite that exclusively tests a remote site (though I understand that being unusual), it seems like this kind of interferes, especially if you have to login to that site. It would be ideal to do so in a before(:all) and just login once, but it seems that because of this you have to login between each example using a before(:each) which makes tests run a lot slower. Any thoughts?
",hillmandj,2012-02-03 03:17:34
572,2011-12-15 20:38:47,"These projects are not maintained anymore and can be removed from README.

What you think?
",sobrinho,2012-01-03 12:49:26
572,2011-12-18 00:53:48,"+1. Also found akephalos supports older version of Capybara (0.4) as dependency.
",kkganesan,2012-01-03 12:49:26
572,2011-12-19 08:56:44,"Agree completely. Can you send a pull request?
",jnicklas,2012-01-03 12:49:26
571,2011-12-15 10:23:26,"<S_CODE_TOKEN>

And actually, in my tests, the billing application is not external but faked in a embed Sinatra app, so the host doesn't even change. This worked with previous versions of Capybara.
",bastien,2011-12-19 09:50:46
571,2011-12-15 12:06:54,"I've just created a simple rails app to illustrate the problem: https://github.com/bastien/cucumber_session_test
",bastien,2011-12-19 09:50:46
571,2011-12-15 12:09:42,"Why did you post Gherkin? Please post an example using the actual Capybara API. Also, most likely this is an issue within your application, make sure you aren't doing something crazy.
",jnicklas,2011-12-19 09:50:46
571,2011-12-15 12:29:27,"I've added the following test to the app:

<S_CODE_TOKEN>
",bastien,2011-12-19 09:50:46
571,2011-12-15 12:34:13,"This still tells us nothing. Look at it from my perspective, if I sent you that piece of code, would you have any idea what's going on, would you have any idea where to even look for a potential error? I assure you, sessions work just fine with Capybara 1.1. Thousands of people are using it and not having this problem. Please investigate until you find _what_ the problem is, then once you've isolated it, and confirmed that it is in fact not something you're doing wrong _then_ and _only then_ post it here. If you need help, ask the mailing list, but don't create issues unless you are _sure_.
",jnicklas,2011-12-19 09:50:46
571,2011-12-15 12:46:26,"I understand that, that is why I created a simple app that only does that and posted the link above: https://github.com/bastien/cucumber_session_test that example shows you that session doesn't _work just fine_, but that when switching host, the session data is lost.

I'll post it to the mailing list right away.
",bastien,2011-12-19 09:50:46
571,2011-12-19 09:14:55,"I just looked into this, and I cannot explain the behaviour you are seeing in your example app, it does indeed appear to be a bug. I am truly sorry I judged this issue to quickly, and dismissed you too easily. My outburst above was totally uncalled for and unprofessional, I'm sorry, I will try to be more patient in the future.

I will look into this as soon as I can and see if I can get it fixed.
",jnicklas,2011-12-19 09:50:46
571,2011-12-19 09:27:53,"Hmm, here's a thought: the `FakeBillingApp` directs to `/purchases`, a relative URL. That would mean that the user stays on that host, and the host isn't changed back to the original one (which is `Capybara.default_host`, i.e. `http://www.example.com`). Changing the redirect to be an absolute URL makes the test pass:

<S_CODE_TOKEN>

As a point of interest, it actually violates the HTTP spec to redirect with a relative path (though browsers still accept it). Which is why it's best practice to use `*_url` helpers instead of `*_path` with redirects in Rails.
",jnicklas,2011-12-19 09:50:46
571,2011-12-19 09:28:39,"That's allright. I should have posted to the mailing list first anyway.
",bastien,2011-12-19 09:50:46
571,2011-12-19 09:28:47,"I think this explains the problem, is it okay if I close this issue again?
",jnicklas,2011-12-19 09:50:46
571,2011-12-19 09:41:41,"That was the problem indeed. Thanks a lot for your time.
",bastien,2011-12-19 09:50:46
570,2011-12-15 04:56:21,"Under JRuby 1.6.5 (1.9 mode) the `page.html` returns something that looks like:

<S_CODE_TOKEN>

We can clearly see that `<?xml version=""1.0"" encoding=""UTF-8"">` has been inserted which is just plain wrong.
Also the DOCTYPE is transitional HTML 4.01, but this is not correct either because the page was generated with DOCTYPE for HTML5.

This doesn't happen on MRI 1.9.3.

Any clues how to fix/workaround it?

(using rack driver).
",dnagir,2012-01-03 13:04:29
570,2011-12-15 12:06:42,"Why is it a problem? Are you doing something which checks the XML instruction or Doctypes? If so, why?
",jnicklas,2012-01-03 13:04:29
570,2011-12-15 12:24:16,"Because it is not displayed by a browser. When using launchy, for example
On Dec 15, 2011 11:06 PM, ""Jonas Nicklas"" <
reply@reply.github.com>
wrote:

> Why is it a problem? Are you doing something which checks the XML
> instruction or Doctypes? If so, why?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/570#issuecomment-3160188
",dnagir,2012-01-03 13:04:29
570,2011-12-15 12:28:38,"I still don't understand, the problem is that it is _not_ shown, how is that a problem?
",jnicklas,2012-01-03 13:04:29
570,2011-12-15 12:57:43,"The generated HTML cannot be displayed by the browser because the first line is XML declaration.
Thus the document is treated as XML. But the 2 nd line is HTML doctype which makes the whole HTML invalid in all formats and thus browser cant display the page.

Even more than that, the doctype is not the same as declared I the views.

Have I explained the problem?

This is definitely a bug which doesn't seem to happen on MRI.

On 15/12/2011, at 23:28, Jonas Nicklasreply@reply.github.com wrote:

> I still don't understand, the problem is that it is _not_ shown, how is that a problem?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/570#issuecomment-3160365
",dnagir,2012-01-03 13:04:29
570,2011-12-19 09:03:19,"Hmm, strange. Browsers should generally ignore an XML declaration, except that it may throw the browser into quirks mode IIRC. Have you tried this in multiple browsers?
",jnicklas,2012-01-03 13:04:29
570,2011-12-19 09:35:19,"I don't know why browsers should ignore that. Why are we even discussing that...
It's obviously just plain wrong and incorrect. Not the browsers to blame for that.

And it doesn't seems to work in Chrome, Safari and FF.

On 19/12/2011, at 20:03, Jonas Nicklasreply@reply.github.com wrote:

> Hmm, strange. Browsers should generally ignore an XML declaration, except that it may throw the browser into quirks mode IIRC. Have you tried this in multiple browsers?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/570#issuecomment-3200769
",dnagir,2012-01-03 13:04:29
570,2012-01-03 13:04:29,"No, it's not obviously just plain wrong. In fact the HTML5 specification requires HTML documents using the XML syntax to specify an XML declaration at the top of the document. See: http://www.w3.org/TR/html-markup/syntax.html#character-encoding.

Now in this case, the doctype is HTML 4.01 Transitional, which is not an XML based format. However in some old browsers, adding the XML declaration had some effect on quirks/standards mode, I think it still does, but I can't remember.

Furthermore, Capybara has nothing to do with adding this XML declaration, that's Nokogiri's doing. It seems a bit idiotic for Nokogiri to add this xml declaration, but I don't think they are _wrong_ in adding it. In any case, this is not something we can fix in Capybara.
",jnicklas,2012-01-03 13:04:29
570,2012-01-03 21:28:33,"Maybe you can help guys at Nokogiri to solve [this issue](https://github.com/tenderlove/nokogiri/issues/590) by explaining better where it misbehaves?
",dnagir,2012-01-03 13:04:29
570,2012-01-05 00:05:03,"@jnicklas actually it is a problem with Capybara.

I was trying to make a minimal repro for Nokogiri, but it just worked.

The issue is this:

<S_CODE_TOKEN>

And the `save_and_open_page` method is using `body`, instead of `source` which wraps it with the XML declaration.
I think `Capybara.save_page` should use `source` instead of body. We really want to save the whole page not only what's inside the body.
",dnagir,2012-01-03 13:04:29
570,2012-01-05 00:28:58,"The workaround is NOT to use `page.save_and_open_page`. Instead one should do:

<S_CODE_TOKEN>

To fix it, I believe `source` should be used instead of `body` calling `Capybara.save_page`.
",dnagir,2012-01-03 13:04:29
570,2012-01-08 11:15:01,"Hi there!

This is happening to me, too. I just upgraded from Capybara 0.4 to 1.1. Everything works OK in my laptop (ruby 1.9.2p180), but my spec fail in my CI server (ruby 1.9.2-p0, 64 bits machine). I'll try to make a simple failing test.

The problem, as you said, is that there's an extra ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"", so some parsing by capybara breaks.

Nokogiri has been kept at the same version (1.5.0), so I think this is something related with Capybara.
",gaizka,2012-01-03 13:04:29
569,2011-12-15 01:43:07,"The readme currently recommends Akephalos as the best HtmlUnit driver, which is probably not accurate any more given how long that project has been idle.
",jslag,2011-12-15 12:07:39
569,2011-12-15 12:07:59,"I'm a little sad to be merging this, but you're right :(
",jnicklas,2011-12-15 12:07:39
569,2011-12-22 18:41:52,"@jslag Check this out https://github.com/Nerian/akephalos2
",Nerian,2011-12-15 12:07:39
568,2011-12-14 21:00:13,"Completely flubbered on this one... not finding references to this error.  Capybara is working just fine with my rpsec setup, but when setting the :js => true option on a test, this error occurs:  

<S_CODE_TOKEN>

Maybe my brain just borked, but I don't even know where to start :-(
",leequarella,2011-12-14 22:14:15
568,2011-12-14 22:14:15,"I think you're trying to call a `post` method from your test -- there is no such method in Capybara (apart from an internal Rack-Test method). Use the `visit` method instead. See the README at https://github.com/jnicklas/capybara, section The DSL, for more info.
",joliss,2011-12-14 22:14:15
568,2011-12-14 22:14:51,"By the way, the mailing list is a better place for questions like this -- this issue tracker is meant for reproducible bugs with Capybara.
",joliss,2011-12-14 22:14:15
568,2014-09-30 10:21:04,"Hi Guys
 I have a strange issue with 'remote: true' links on my side
 I use link_to to send post request on view:

<S_CODE_TOKEN>

 In config/routes.rb I have:

<S_CODE_TOKEN>

this my test

<S_CODE_TOKEN>

 And then I see fail in log

<S_CODE_TOKEN>

Seems, that on click to link to it always sends GET
 Thanks for any help)
",g-ilham,2011-12-14 22:14:15
567,2011-12-14 19:00:28,"i know this is a nightmare of a debug... but I thought i may as well report it since i cannot for the life of me figure it out:

I am running a rails 2 integration test suite which switches User Agents (creating a new selenium driver)

It goes something like this:

<S_CODE_TOKEN>

with initializer:

<S_CODE_TOKEN>

and inline javascript calls on each request are getting fired twice.

I am at a loss for why that is, any ideas?
",chaffeqa,2011-12-14 19:41:32
567,2011-12-14 19:41:32,"Why don't you repost this on the mailing list? This issue tracker is intended for reproducible bugs in Capybara only.

(I'm not sure what you mean with ""inline calls"", by the way ...)
",joliss,2011-12-14 19:41:32
566,2011-12-14 13:52:53,"I have a cucumber step that check the number of elements corresponding to a given css rule on a page:

<S_CODE_TOKEN>

Here's where I use it:

<S_CODE_TOKEN>

Clicking the ""Add pages"" button will make a ajax request and the response will add 10 '.page' elements.

Since I upgraded to 1.1.2 from 1.0.1 this scenario fails. Adding a `sleep 1` fixes the problem, but it's obviously not a good solution.

I've observed the same problem with a dialog windows. This code now fails because it's executed before any dialog has appeared on the page:

<S_CODE_TOKEN>
",bastien,2011-12-14 16:24:28
566,2011-12-14 16:24:28,"replace the first one with

<S_CODE_TOKEN>

The second one is trickier. No real good solution there as Capybara doesn't support clicking on alert dialogs (note that you're using an undocumented, private API for this). Can't really help you there.
",jnicklas,2011-12-14 16:24:28
566,2011-12-15 09:35:23,"Thanks. That works.
I'm still curious as why `page.all(selector)` doesn't work though.

I'm well aware that clicking on alert dialogs is not documented. But since I still need to close some dialogs, this nasty code will do for the time being:

<S_CODE_TOKEN>
",bastien,2011-12-14 16:24:28
566,2011-12-15 12:05:40,"It's because `page.all` returns instantly, whereas `has_selector` waits for the result to appear. In Capy 1.1 we no longer block when AJAX requests happen, instead we keep trying to find the correct content. However you need to tell Capybara what that content is. If you're using `page.all` it has no idea what you want to do with that later on, so it just returns the results as they are right now.
",jnicklas,2011-12-14 16:24:28
566,2011-12-15 12:10:53,"Great. Thanks for the clarification.
",bastien,2011-12-14 16:24:28
565,2011-12-12 16:46:08,"Configuration for webkit driver in README said:

Capybara.javascript_driver = :webkit

...which had no effect when I added it to spec_helper.rb. When I adjusted it to match the config instructions for selenium:

Capybara.default_driver = :webkit

Everything worked as expected. I updated the README to reflect the change.

Thanks for the great tool!

-- Bill
",billgathen,2011-12-12 17:12:20
565,2011-12-12 16:59:06,"Most likely you don't want to run _everything_ in capybara-webkit. Most people will want to keep the default driver as `:rack_test` and use capybara-webkit only for scenarios tagged with `javascript`. The README could be more explicit about this, but this change would be confusing as well. Honestly, I personally feel that it's fine as is, and if you'd read the README more thoroughly and understood the purpose of `javascript_driver`, you wouldn't have had a problem.
",jnicklas,2011-12-12 17:12:20
565,2011-12-12 17:12:20,"Thanks for your prompt response.
",billgathen,2011-12-12 17:12:20
565,2011-12-13 00:03:56,"javascript_driver doesn't do anything unless you use RSpec or Cucumber, right? Perhaps we should write something like this?

<S_CODE_TOKEN>

I can make a pull request if you like.
",joliss,2011-12-12 17:12:20
565,2011-12-29 02:29:10,"@joliss +1. I agree. Being new to Capybara, that totally tripped me up until I stumbled onto your comment just now!

I kept getting errors like: 

<S_CODE_TOKEN>

Looks like it's a simple fix – once you realize RSpec is required you can run code like this:

<S_CODE_TOKEN>

But, that wasn't obvious to me when I first read the README.
",audionerd,2011-12-12 17:12:20
565,2011-12-30 02:21:00,"> @joliss +1. I agree. 

I'm not sure if _I_ still agree with my previous statement. :-) We probably should endorse Capybara.javascript_driver regardless of the testing framework. I have a documentation patch for Test::Unit coming up in a day or so.

You are right though that Capybara.javascript_driver should be available.

<S_CODE_TOKEN>

@jnicklas, that shouldn't happen, should it? I made a pull request at #582 to automatically require 'capybara/dsl'. (I thought about simply moving things out of dsl.rb up into capybara.rb, but I wasn't really sure if they best belong there.)
",joliss,2011-12-12 17:12:20
564,2011-12-09 21:56:34,"The Capybara bindings to WebDriver have fallen slightly behind the current functionality of WebDriver.

In particular, the WebDriver#execute_script function has the capability of acting on a WebDriver::Element object as follows: 

  button = driver.find_element(:id, ""plainButton"")
  driver.execute_script(""return arguments[0].innerText;"", button)

This is because the WebDriver#execute_script method is defined as:

  def execute_script(script, *args) 
      ... #stuff
  end

I added the following functionality (note, wherever something was applied to evaluate_script, it was applied to execute_script as well): 
In capybara/session.rb -> 
    ##
    #
    # Evaluate the given JavaScript and return the result. Be careful when using this with
    # scripts that return complex objects, such as jQuery statements. +execute_script+ might
    # be a better alternative.
    #
    # @param  [String] script   A string of JavaScript to evaluate
    # @param  [Array]  *args    An optional array of arguments to feed the script
    # @return [Object]          The result of the evaluated JavaScript (may be driver specific)
    #
    def evaluate_script(script, *args)
      driver.evaluate_script(script, *args)
    end

In capybara/selenium/driver.rb:

  def execute_script(script, *args)
    browser.execute_script(script, *args)
  end

  def evaluate_script(script, *args)
    browser.execute_script(""return #{script}"", *args)
  end

In capybara/driver/base.rb:

  def execute_script(script, *args)
    raise Capybara::NotSupportedByDriverError
  end

  def evaluate_script(script, *args)
    raise Capybara::NotSupportedByDriverError
  end

I am in the process of running the test suite on Capybara to see if my changes messed with any functionality, but I suspect not. If it does, we can simply back it out to just change the Selenium bindings to evaluate_script/execute_script?

Thanks,
Em
",wokkaflokka,2011-12-30 16:22:00
564,2011-12-09 22:21:52,"I ran the 'specs' at the toplevel of the capybara directory. There was a folder inside capybara/lib/capybara as well, but I couldn't get that to execute. It seems that folder may have been a temporary location for the specs at the toplevel?

In any case, the results indicate that the change to the ""evaluate_script"" appear to not have any unintended consequences. In other words, it seems to work fine. There were 10 failures, all of which appear to be with the ""check"" method (and further, it seems to be that they are due to the ElementOutOfBoundsError...see issue #2700 on the WebDriver issue queue if you are unclear on what I am referencing...). Attached below is the output of the RSpec run.

https://gist.github.com/1453858 [edit: moved to Gist -- Jo]
",wokkaflokka,2011-12-30 16:22:00
564,2011-12-09 23:58:25,"@wokkaflokka, you should probably use git rebase -i to squash the commits, and then push -f again. The pull request will update automatically.

The tests still pass with your branch merged on my system, so I'm pretty sure your test failures are unrelated.

I'll try and test this out against my app today or tomorrow -- it seems like a useful change.
",joliss,2011-12-30 16:22:00
564,2011-12-10 00:17:18,"Okay, this is working good so far, but there's a couple of issues:
1. How about cross-driver compatibility? Any opinions, @jnicklas? (Perhaps this relies too much on Selenium features?)
2. It would need documentation, I think. Probably tests as well.
3. As it is you'd have to use .native, like so: `page.execute_script('... arguments ...', el.native)` That seems awkward. We'd probably have to auto-convert nodes into native objects.
",joliss,2011-12-30 16:22:00
564,2011-12-10 00:41:20,"@joliss 
Wow, quick turn around. Exciting.

1) I agree that this is a valid concern. This was a very rough/quick patch job on my part, and should not necessarily be definitive. On the other hand, by using the *args notation, is it not the case that all existing functionality remains precisely the same? 

I agree that other browsers - if they do not support passing elements to the script in question - should perhaps raise an error (like the WebDriver bindings to Capybara do when you call functions such as 'trigger' 'Node#path'), or further, perhaps this should only be included in the Selenium driver's evaluate_script/execute_script. Would be interesting to hear other people's opinions.

Also, there is always the option that other driver's simply drop the arguments. If the script passed to them relied on it, it would probably fail. Again, a relevant error message would explain (and rectify) the offending code. 

I don't necessarily think it is the end of the world if different drivers have some differing implementations of the API and functionality. In fact, I would argue strongly that this already occurs - I often find myself writing certain sections of my test code with a conditional that checks for the current driver, treating :selenium on way and others differently.
2) Again, agreed. 

3) Good point, and again, agreed.

I will point out the following: I came upon this while trying to access the raw Javascript contained in a script element. I ended up opening an issue on the Selenium queue to the extent of ""why doesn't the ruby binding to webdriver have the same functionality as the Java version?"" They schooled me proper, and basically told me I was an idiot (...I kind of am ;) From there, I figured: why doesn't Capy have this? Which has brought us here....
",wokkaflokka,2011-12-30 16:22:00
564,2011-12-30 16:22:00,"/cc @jnicklas 

I think as it is, this is not mergeable, so I'll go ahead and close this for now. If you repush new code, just leave a comment and we can reopen it. :)
",joliss,2011-12-30 16:22:00
563,2011-12-09 20:55:57,"In WebDriver, one can call the 'execute_script' method as follows:
button = driver.find_element(:id, ""plainButton"")
driver.execute_script(""return arguments[0].innerText;"", button)      

In Capybara with driver set to :selenium, the following method's of execution return a ""Wrong # of Arguments (2 for 1)"" error:
1) 
scripts = page.all(:xpath, ""//script[contains(@type,'text/javascript') and contains(text(),'Highcharts.StockChart')]"")
scripts.each { |chart|
  code = evaluate_script(""return arguments[0].innerHTML"", chart)
}

2) 
scripts = page.all(:xpath, ""//script[contains(@type,'text/javascript') and contains(text(),'Highcharts.StockChart')]"")
scripts.each { |chart|
  code = page.driver.execute_script(""return arguments[0].innerHTML"", chart.native)
}

Currently, the only way to achieve this is by directly accessing the WebDriver object itself, as follows:

webdriver = page.driver.instance_eval(""@browser"")
code = webdriver.execute_script(""return arguments[0].innerHTML"", chart.native)

It would be nice if the bindings could be brought up to speed.

Many thanks!
",wokkaflokka,2011-12-10 00:20:23
563,2011-12-09 21:37:45,"To update on this, it seemed like pretty low hanging fruit, so I went ahead and forked the repo/added the necessary functionality. Initially, I just added it to the Selenium Driver bindings, which worked. Then, I figured it probably wouldn't be the end of the world if I just added it to the ""evaluate_script"" method itself. It seems to work, but hey: I could be wrong. I might get around to running the test suite, but my understanding is that using the ""*args"" methodology should only add functionality, not break existing functionality. Also, FYI - the code below returns true - every time.

<S_CODE_TOKEN>
",wokkaflokka,2011-12-10 00:20:23
563,2011-12-10 00:20:23,"> Currently, the only way to achieve this is by directly accessing the WebDriver object itself, as follows:
> webdriver = page.driver.instance_eval(""@browser"")

You can just use page.driver.browser here, by the way.

> To update on this, it seemed like pretty low hanging fruit, so I went ahead and forked the repo/added the necessary functionality.

Great! Let's continue the discussion at #564. :)
",joliss,2011-12-10 00:20:23
562,2011-12-08 23:14:21,"Launchy versions older than 2.0.0 (like 0.4.0) are not compatible.
Capybara now complains if it finds such a Launchy version. (I tested all
of this.)
",joliss,2011-12-09 08:29:19
562,2011-12-09 08:29:15,"Nice!
",jnicklas,2011-12-09 08:29:19
561,2011-12-08 10:51:54,"I start a test by using Capybara's DSL in this way:

<S_CODE_TOKEN>

and then I do a simple:

<S_CODE_TOKEN>

which is a link pointing to ""/auth/developer"". I would expect capybara to do a request to ""http://tenant1.example.com/auth/developer"", but it seems to be ignoring the current host and instead using the default one, ending with a request to http://example.com/auth/developer.

I'll try to get more information about this issue and I'll post it here.
",pupeno,2011-12-08 12:04:09
561,2011-12-08 11:41:45,"Are you sure you're using the latest version of Capybara? We had a lot of issues like this before, but afaik they were all solved, and I haven't heard anyone complain since 1.0.
",jnicklas,2011-12-08 12:04:09
561,2011-12-08 11:43:28,"I am using the latest and indeed it seems the issue is coming from somewhere else... Capybara seems to be following a redirect that is wrongly generated but only during test. Most likely this isn't a Capybara issue, I'm debugging it right now, so I expect to have a definite answer in an hour or so.
",pupeno,2011-12-08 12:04:09
561,2011-12-08 12:04:09,"Yes, it wasn't a Capybara issue, closing.
",pupeno,2011-12-08 12:04:09
561,2012-04-27 11:44:52,"@pupeno How did you manage to resolve this?
",darthdeus,2011-12-08 12:04:09
561,2012-04-27 14:43:32,"@darthdeus I don't remember, from the comments it seems I was generating the wrong address to redirect to. I was probably generating a partial url and I started generating a full one.
",pupeno,2011-12-08 12:04:09
560,2011-12-07 04:04:57,"Previously the `Capybara::RackTest::Driver` would follow all redirects even those to external URLs. This would cause exceptions to be raised if the path of the URL didn't match a route in the application being tested. This is because rack-test can't hit external URLs. The expected usage here is that the developer just wants to test that the redirect went to the correct external location not test anything about it. If they actually want to make assertion about the content at the external URL or interact with the external page in some way they should use an alternate driver. So what this now does is just not continue to process requests after we reach a redirect to an external URL.

This new behavior can be changed back to the old behavior by passing `false` to the `:follow_external_redirects` option to the `Capybara::RackTest::Driver`:

<S_CODE_TOKEN>

This also adds the `#redirect_url` method to the `Capybara::Session` object. This way the developer can test that the app redirected to the correct location:

<S_CODE_TOKEN>
",brianjlandau,2011-12-07 07:29:49
560,2011-12-07 07:29:49,"Sorry, I don't like this _at all_. Not only does it break an existing API, it also silently ignores errors, and on top of that it disables a very useful functionality by default. A lot of people are consciously using different hosts to test stuff like subdomains, this pull request kills that functionality.

Huge -1.
",jnicklas,2011-12-07 07:29:49
560,2011-12-07 16:10:47,"This doesn't silently ignore any errors actually. Also, we could flip default of the `:follow_external_redirects` option to be `true`. Thus leaving the functionality as is.
",brianjlandau,2011-12-07 07:29:49
560,2011-12-07 16:35:20,"Jonas -- Brian and I discussed various scenarios yesterday for doing this in the application we are testing.  We ended up mixing in a module for RSpec's request specs that looked like this:

<S_CODE_TOKEN>

And would be used like this:

<S_CODE_TOKEN>

Is there a better way to do this with the lower-level API that Capybara provides?  We didn't like how we referenced the browser, or that we had to duplicate the `reset_host!` line that was in the original definition of `visit`.

Thanks.
p.
",reagent,2011-12-07 07:29:49
560,2012-08-29 21:08:57,"I'm affected by this issue as well, and it would be nice to have an option to disable external redirects.  I have a button on an internal site that redirects to an external site that Rack::Test should not attempt to access, and I just want to check that the redirect is what I expect.  It's not hard for me to work around, though:

<S_CODE_TOKEN>
",jeremyevans,2011-12-07 07:29:49
560,2012-08-29 21:37:16,"RackTest will have an option not to follow redirects in Capybara 2.0, that should cover most of what you want this to do. I still think it's a bad idea to test this kind of stuff with Capybara though.
",jnicklas,2011-12-07 07:29:49
559,2011-12-06 20:45:18,"IE does not fire the readystatechange event for synchronous XHR requests.  Capybara resynchronization relies on that event firing (with readyState == 4).  Under Capybara, a synchronous XHR request in IE results in window.capybaraRequestsOutstanding being incremented but never decremented, and eventually in a Capybara::TimeoutError error.

As a workaround, I'm manually decrementing window.capybaraRequestsOutstanding in my test page's javascript immediately after making any synchronous ajax request:

<S_CODE_TOKEN>
",rfletcher,2011-12-08 18:41:43
559,2011-12-07 07:30:49,"Synchronization is deprecated anyway and should not be necessary if you're using Capybara 1.1. Please document any case where you're still finding it necessary.
",jnicklas,2011-12-08 18:41:43
559,2011-12-08 18:41:47,"Thanks, I didn't realize I was locked at 1.0.x.  You're right.  It's not a problem after upgrading to 1.1.2.

Also, just for the record, it wasn't quite a universal problem for IE with 1.0.x.  It didn't occur in IE 9 while in standards mode, presumably because readystatechange would fire.
",rfletcher,2011-12-08 18:41:43
558,2011-12-05 23:44:06,"As I'm monkeypatching in some extensions to Capybara, I find myself wishing that there was a DSL of the form:

click.on link(""Click here"")
or
type.at field(""Labelled like this"")

So expanding that actions you can take was one touch point, and finding targets was another.  I'm finding that locating anything even slightly complex means I have to revert to using XPath::HTML directly, and doing much more than clicking requires patching 4 classes to drill down to the driver.

(Yes, it would be best if I could locate elements by id all the time, but sadly, that would mean rewriting a lot of jquery plugins...)
",nyarly,2011-12-06 08:53:32
558,2011-12-06 08:53:32,"I am closing this, as it's not really an issue. I'm not really sure what you're suggesting, so I'd suggest you expand your thoughts and post this to the mailing list. I think this would be a much more interesting discussion if you propose a solution, rather than just complain about a problem.
",jnicklas,2011-12-06 08:53:32
557,2011-12-02 15:10:56,,joliss,2011-12-02 15:15:24
556,2011-12-01 17:21:33,"I thought this might be nice little enhancement. I was confused when I first used capybara because selectors were matching but not the correct number of times. This would make things clearer I think :)
",jordelver,2011-12-02 07:08:45
556,2011-12-01 18:06:43,"+1, I just got confused by this too.

It would be extra cool if the failure message included the actual number of matches.
",jfirebaugh,2011-12-02 07:08:45
555,2011-12-01 11:42:19,"Hi and thanks for Capybara!

Because I'm testing a legacy project, I'm writing integration specs which check database value. So I know this is not the real purpose of Capybara.

Anyway, I wonder why this kind of situation happens:

<S_CODE_TOKEN>

Should I deduce the controller's action hasn't ended in Case 1 so I have to query some other page to be sure it has been completed?

Thanks in advance

Benjamin
",apneadiving,2011-12-01 12:18:48
555,2011-12-01 12:18:48,"Please post this question to the mailing list.
",jnicklas,2011-12-01 12:18:48
555,2011-12-01 13:04:16,"ok done! 

http://groups.google.com/group/ruby-capybara/browse_thread/thread/dbd33df92f9b37dd
",apneadiving,2011-12-01 12:18:48
554,2011-11-30 00:08:01,"Seems like this is related to #541 - at least with Chrome/chromedriver, trying to fill in a date or time input results in a WebDriver exception:

Element cannot contain user-editable text (Selenium::WebDriver::Error::InvalidElementStateError)

Adding a similar switch to not call #clear on date/time elements seems to fix it.  I'll try to put together a patch/pull request together for this tonight.
",jayzes,2012-07-12 08:33:00
554,2012-01-03 13:06:10,"Very strange, why would these behave differently?

@jarib: is it not possible to clear date and time fields?
",jnicklas,2012-07-12 08:33:00
554,2012-01-03 13:16:59,"If by date/time elements you mean `<input type=""date"">` or `<input type=""time"">`, then this works well for me in Firefox/Chrome using the latest selenium-webdriver gem and chromedriver binary.

<S_CODE_TOKEN>

@jayzes: If you can provide a failing example, I'd be happy to take a look.
",jarib,2012-07-12 08:33:00
554,2012-01-03 16:19:48,"Interesting, maybe it's a Chromedriver bug.  I'll give the latest version a try and post an update.
",jayzes,2012-07-12 08:33:00
554,2012-01-03 18:23:27,"@jarib, out of curiosity, do you know which chromedriver version you ran that example under?
",jayzes,2012-07-12 08:33:00
554,2012-01-03 18:25:56,"It works for me with both the previous (16.0.902.0) and current release (17.0.963.0) + beta channel Chrome (16.0.912.63) on OS X.
",jarib,2012-07-12 08:33:00
554,2012-07-10 13:35:10,"Is this still an issue for anyone?
",jnicklas,2012-07-12 08:33:00
554,2012-07-12 08:32:59,"Closing this, please reopen if it's still an issue.
",jnicklas,2012-07-12 08:33:00
553,2011-11-29 23:50:44,"Rails 3.1.2 app.  I can do a new action go to the show page and find elements not problem.  when I have an object then go to the edit screen the matcher does not find the text.  I can do a save_and_open_page and the text is in the view.

scenario ""Problem Edit"" do
    @problema = Factory.create(:problem, :name => 'Type II Diabetes')
    visit edit_problem_path(@problema)
    save_and_open_page
    page.should have_content(""Type II Diabetes"") --> Not seeing it even though the save and open shows it.
end
",chabgood,2011-11-30 00:56:59
553,2011-11-30 00:56:59,"I think the problem you are having might be that has_content ignores the values of input boxes, if I recall correctly. You should probably `find` the input field and then call the .value method on it.

If you need more help, I recommend asking on the mailing list. This issue tracker is meant for reproducible bugs only.
",joliss,2011-11-30 00:56:59
552,2011-11-29 05:16:54,"HTML

<S_CODE_TOKEN>

CSS

<S_CODE_TOKEN>

Capybara

<S_CODE_TOKEN>

Result

<S_CODE_TOKEN>

From rdoc.info

<S_CODE_TOKEN>

Documentation suggestion:

There are expected to be slight differences in what different drivers return as the text. Selenium chooses to return the text formatted with CSS, RackTest doesn't.
",hedgehog,2011-11-29 08:00:50
552,2011-11-29 08:00:50,"This is expected behaviour. There will be slight differences in what different drivers return as the text. Selenium chooses to return the text formatted with CSS, RackTest doesn't. Documenting that it is one way or another doesn't make sense.
",jnicklas,2011-11-29 08:00:50
552,2011-11-29 08:38:14,"Please reopen as documentation issue.  
I think it does matter if it is one way or another when your tests fail solely because the docs describe one thing and reality is another.  
It is also important to indicate to people that if they develop against anything involving `Rack::Test`, then _they_ take responsibility for having to rewrite, or put up with unexpected results in production.  If you refuse to document these issues then people can rightly attribute some blame on Capybara, and then any blowback is not unjustified but quite reasonable.
",hedgehog,2011-11-29 08:00:50
552,2011-11-29 09:00:16,"Send a pull request with a doc patch.
",jnicklas,2011-11-29 08:00:50
551,2011-11-28 10:08:42,"When true the current behavior is exhibited.  When false the browser is not closed

Some initial implementation details:

http://stackoverflow.com/a/7562250/152860
",hedgehog,2011-11-29 05:02:25
551,2011-11-28 10:24:09,"Not really sure how this would be useful? Why would you want the browser hanging around?
",jnicklas,2011-11-29 05:02:25
551,2011-11-28 10:45:08,"When you are developing it is useful to see the state under certain conditions.  Arises in rapidly debugging 'raw' use cases, i.e. not yet fully baked.  Most useful when retro specifying/describing legacy web appd/pages that you have just landed on.  Your next spec often isin a similar context to, but is independent of, the last feature, you need the browser up so you can experience what your are abbout to try and write a feature for...

convincing?
",hedgehog,2011-11-29 05:02:25
551,2011-11-28 10:49:54,"Fleshing out a possible API:

Closes the browser when called:

<S_CODE_TOKEN>

Indicates if Capybara should auto close at the end of a script

<S_CODE_TOKEN>

Documenting use cases where this would assist:
- Retrofit BDD into legacy apps [0] 
- Multiple users (users live interaction)[1]

[0] My description above
[1] http://imanel.org/2010/03/cucumber-testing-for-multiple-users-continuation/
",hedgehog,2011-11-29 05:02:25
551,2011-11-28 11:44:18,"<S_CODE_TOKEN>

problem solved?
",jnicklas,2011-11-29 05:02:25
551,2011-11-28 21:47:47,"Not sure what that refers to.  I can't see anything in the Capybara rdocs...?

Anyway, As a partial workaround (i.e. fail/pass state) that would help.  Unfortunately that is only a very small number of the instances when I would use it.  Specifically, when a feature/example is failing I find  RSpec and Cucumber debug output very good, and conveneintly integrated into my IDE.  It is once I've finished working on a feature/example, e.g. the page object is done/refactored, etc. _Then_ I move onto deciding what behavior to describe next.  Ack that Rspec/Cucumber tags, profiles and option files allow me to shoehorn my workflow into Capybara, it'd be nice to keep Capybara specifics to Capybara.  In my case I'd use the above method in the Page Object undergoing work, nothing would leak into the feature/example files.
",hedgehog,2011-11-29 05:02:25
551,2011-11-28 21:53:41,"On Mon, Nov 28, 2011 at 22:47, Hedgehog
reply@reply.github.com
wrote:

> Not sure what that refers to.  I can't see anything in the Capybara rdocs...?

The pry gem. See https://www.google.com/search?q=binding.pry ;-)
",joliss,2011-11-29 05:02:25
551,2011-11-28 21:54:12,"Honestly I have a really hard time understanding what you're trying to explain.

The code I wrote above suspends execution by opening a Pry read-eval loop after a failing spec in RSpec, it could of course be adapted to halt execution after a spec with certain metadata or something. The same is easily possible in cucumber, both halting after failure and halting at the end of a specifically tagged scenario. You should be able to figure this out fairly easily.

Suspending execution at the end is much **better** than simply not closing the browser, since it not only still keeps the browser around, like you want, but also gives you an interactive prompt to play around with, to check what went wrong or how to proceed from here. Once you're done, hit ctrl+d and everything is cleaned up for you. This is really a lot better the option you are suggesting.
",jnicklas,2011-11-29 05:02:25
551,2011-11-28 22:18:24,"Ack that with Ruby everything is possible given enough time and effort - the idea here is to arrive at a simple way of providing functionality that I and others are currently overloading Capybara classes/methods to arrive at. 

Perhaps pry is the best solution, I'll look into it.  
However I dislike my feature/example files getting littered with BDD scaffolding, what I have in mind are one or two methods that I use in helpers, nowhere near my feature/example files. One question I have is how do I conditionally determine which session to close when describing multi-user cases - again maybe Pry _is_ the bees knees.

Thanks @joliss
",hedgehog,2011-11-29 05:02:25
551,2011-11-28 22:59:10,"That's exactly the point of the kind of code I pasted. You can put it in your spec_helper or env.rb and it will work everywhere, that's the whole point.
",jnicklas,2011-11-29 05:02:25
551,2011-11-29 05:02:25,"OK thanks @jnicklas, I think I can make Pry do what I want, if I find some convenience behaviors, likely in the multiple user behavior use-case, I'll make a pull request.  
",hedgehog,2011-11-29 05:02:25
550,2011-11-27 02:52:00,"The following   

<S_CODE_TOKEN>

returns true, when it should be false, i.e the title is not visible.

The issues/techniques for testing visible elements in Capybara need to be brought into the readme.
This comment indicates some unnecessary blow back is developing[0]

[0] http://testobsessed.com/blog/2011/03/01/checking-invisible-elements/comment-page-1/#comment-10666
",hedgehog,2011-11-28 09:47:26
550,2011-11-28 08:49:13,"`:visible => false` is kind of a bad name, and it trips many people up. It's would really be easier to understand if it were `:only_visible => false`. I do believe the functionality is the right one, but the naming and documentation is a bit confusing.
",jnicklas,2011-11-28 09:47:26
550,2011-11-28 09:18:19,"Sorry to be dense, but I don't yet see the difference.  What does `only_visible` mean that is different from `visible`?
Specifically, if you say the behavior is correct, but the documentation is ambiguous then in my example, I would still get `true` when I still expect to have `false` returned - correct?

There are several blog posts/gists out there trying to get this behavior, I've seen at least four.  Could it be that the behavior people are implementing themselves is not in Capybara?
",hedgehog,2011-11-28 09:47:26
550,2011-11-28 09:30:50,"`:visible => false` finds _all_ elements, regardless if they are visible or not. You will have to do what you are trying to do manually, since Capybara does not have an API for that built in.
",jnicklas,2011-11-28 09:47:26
550,2011-11-28 09:35:23,"Isn't that a bug then?  I'm trying to understand why you say 'I do believe the functionality is the right one'
",hedgehog,2011-11-28 09:47:26
550,2011-11-28 09:47:26,"Closing this as a duplicate of issue #544
",hedgehog,2011-11-28 09:47:26
550,2011-11-28 09:47:43,"No, it's an intentional feature. This behaviour is _way_ more useful than checking for only invisible elements. Why would you ever care if an element is invisible in an acceptance test? But sometimes elements are invisible for some obscure reason and still need to be checked (though even that should be avoided imo).

Just realized, I misread the question above though, so apologies, my answer didn't really make sense.

The reason that `:visible => true` doesn't work in this case is because RackTest doesn't parse CSS and doesn't have any default browser stylesheets. `Element#visible?` in `RackTest` and `Capybara.string` only checks inline styles, and not styles applied through external stylesheets or browser default styles. Which, btw, is the reason that `Capybara.ignore_hidden_elements` is still set to `false` by default.

Does this mean we should add a CSS parser to Capybara, add default stylesheets and make sure this method works in 100% of cases?

No.

Why? 
1. It misses the point of Capybara, you shouldn't care about these kinds of details when you write an acceptance test. 
2. It would have atrocious performance. 
3. It likely still wouldn't work in absolutely all cases.

So for most intents and purposes you can simply consider that `RackTest` and `Capybara.string` don't really support `:visible => whatever` and just deal with that.

That blog post is pretty bad, imo. The suggested solution is even more deficient than Capybara's current behaviour.
",jnicklas,2011-11-28 09:47:26
550,2011-11-28 09:55:17,"""Why would you ever care if an element is invisible in an acceptance test?""
To make sure that it is invisible and not leaking into the users experience.

For cases such as Capybara.string (simple node) shouldn't an exception be raised when unsupported behavior is invoked - or at least a stderr report that all is not well?
",hedgehog,2011-11-28 09:47:26
549,2011-11-26 23:52:57,"From [Stack Overflow](http://stackoverflow.com/questions/8282399/capybara-field-has-css-matcher/8282478#8282478) - shouldn't this be working?

<S_CODE_TOKEN>
",ream88,2011-11-28 08:21:29
549,2011-11-28 08:21:27,"Please repost this to the mailing list, where it belongs, and I will answer your question.
",jnicklas,2011-11-28 08:21:29
548,2011-11-21 12:16:42,"There is an important bug fixed regarding `MoveTargetOutOfBoundsError` on that version.
Would be nice to update the dependency.
",masylum,2011-12-01 09:54:59
548,2011-11-21 12:59:10,"As you can see in the capybara.gemspec, there is a loose dependency on selenium-webdriver:

s.add_runtime_dependency(""selenium-webdriver"", [""~> 2.0""])

Just run 'bundle update selenium-webdriver' in your project and you'll get the latest selenium-webdriver version.
",weidenfreak,2011-12-01 09:54:59
548,2011-12-01 09:54:59,"cool, thanks
",masylum,2011-12-01 09:54:59
548,2011-12-09 19:27:20,"I am experiencing the same bug, but my version of selenium-webdriver is at 2.15.0 in my Gemfile.lock.  The problem only occurs when I'm on my notebook display, where the FF window is too short for the link I'm trying to click to be visible.
",stevecj,2011-12-01 09:54:59
548,2011-12-14 02:29:39,"My version of selenium-webdriver is also at 2.15.0 and I am also experiencing the same bug.
",jaywengrow,2011-12-01 09:54:59
548,2011-12-15 11:00:44,"I'm at 2.15.0 as well - same problem here:

<S_CODE_TOKEN>
",natritmeyer,2011-12-01 09:54:59
548,2011-12-20 16:05:53,"Can this issue be reopened please?

Just updated to 2.15 to resolve some other issues and now I'm stuck.

Has anyone worked out a possible workout?

Element cannot be scrolled into view:[object HTMLInputElement](Selenium::WebDriver::Error::MoveTargetOutOfBoundsError)
",despo,2011-12-01 09:54:59
548,2011-12-20 16:12:43,"It's most likely a problem with Selenium, not with Capybara, for what it's worth. I'm not sure there's anything we can do.

Even when this is fixed on the Selenium side, Capybara most likely won't bump the dependency. It's best not to force people to upgrade.
",joliss,2011-12-01 09:54:59
548,2011-12-20 16:17:16,"@joliss Do you know where selenium-webdriver is hosted so I can raise the issue there? We had to upgrade to get support for FF9 (we were on 2.10 before), but I set my selenium-webdriver version to 2.14.0, which resolves both issues.

Thanks
",despo,2011-12-01 09:54:59
548,2011-12-20 16:21:06,"(In other words, you'll have to wait for a new version of the selenium-webdriver gem: http://rubygems.org/gems/selenium-webdriver.)

@despo, sure: The selenium-webdriver gem is part of the official Selenium SVN repository, and it's maintained by jarib (I'm not @'ing him because I don't think there's anything he can do in this case -- let's not spam the busy maintainers).

For your reference, here is the bug report:
http://code.google.com/p/selenium/issues/detail?id=2700
It is fixed in 2.15.0 according to http://selenium.googlecode.com/svn/trunk/java/CHANGELOG, but people are still reporting problems on the issue page.

Glad to hear that 2.14.0 is working for you!
",joliss,2011-12-01 09:54:59
548,2012-02-05 10:29:39,"Yeah, 2.14 was the last one that didn't have this bug: https://code.google.com/p/selenium/issues/detail?id=3075
",rb2k,2011-12-01 09:54:59
548,2012-02-06 13:28:29,"Running bundle update selenium-webdriver fixed it for me, thanks!
",micho,2011-12-01 09:54:59
548,2013-05-21 03:22:35,"@despo ,This issue seems nothing to do with selenium-webdriver version,Maximize the browser window when you run your test case.I got a test today,when I run my test case,I make the browser window be minimum size and I catch the error (MoveTargetOutOfBoundsError),but if I make the browser window be maximum size,the test case is pass (sorry for my poor english,I hope you can read it. 汗......)
",anshaoyuan,2011-12-01 09:54:59
547,2011-11-21 12:06:31,"Just like #511 but for links.

I have two links on my page:

<S_CODE_TOKEN>

My scenario start with that:

<S_CODE_TOKEN>

Checking on local machine using linux and another using mac os x, the link `Condomínios` is clicked but on integration server (linux), the link `Tipos de Condomínios` is clicked.

Note I'm using JRuby 1.6.5 on CI and local machines.

This can be related to different encodings.

How can I debug the reason of this issue?
",sobrinho,2011-12-10 14:13:46
547,2011-11-21 20:36:02,"Some news...

Works:

Mac OS X Lion - JRuby 1.6.5 (1.8 mode, apple's jdk 1.6.0_29)
Mac OS X Lion - MRI 1.9.3-p0

Ubuntu i386 - JRuby 1.6.5 (1.8 mode, openjdk 1.6.0_20)
Ubuntu i386 - MRI 1.9.3-p0

Do not works:

CentOS 5.7 amd64 - JRuby 1.6.5 (ruby 1.8 mode, openjdk 1.6.0_23)
CentOS 5.7 amd64 - JRuby 1.6.5 (ruby 1.8 mode, sun 1.6.0_29)
CentOS 5.7 amd64 - MRI 1.9.3-p0

Maybe something related to amd64 architecture?

Everything is ok with application, only the click_link of capybara is going crazy :(
",sobrinho,2011-12-10 14:13:46
547,2011-11-23 11:50:53,"Do not works on CentOS 5.7 i386 and debian lenny amd64, both using JRuby 1.6.5.

Something I can check?
",sobrinho,2011-12-10 14:13:46
547,2011-12-09 16:11:47,"While this isn't the Capybara way to do it, if you want a bit more precision, you can always use xpath:
`find(:xpath, ""a[.='Condomínios']).click` to get it to always select the right target. I wouldn't mind a way to toggle the Capybara selectors to look for an exact match instead of a partial match, though.
",GlyphGryph,2011-12-10 14:13:46
547,2011-12-10 14:13:45,"It was a problem with server encoding.

Only capybara was affect by that.

I created a `/etc/environment`:

<S_CODE_TOKEN>

And now, the full link is matched before the partial.

It was the cause of #511 too.

Maybe this can be on wiki for others ;)

Thanks
",sobrinho,2011-12-10 14:13:46
547,2012-12-06 01:08:56,"I am having a similar issue, capybara raises an Ambiguous match error for these links:

   <a href=""/courses"">Ver todos los cursos</a>
   <a href=""/members"">Ver todos</a>

using

   click_link 'Ver todos'

Even though one link is a full match and another a partial one. I have my locale set to english UTF-8

On my arch linux machine:
  $ cat /etc/locale.conf
  LANG=""en_US.UTF-8""
  LC_TIME=""en_US.UTF-8""
  LC_ALL=""en_US.UTF-8""
  LC_COLLATE=""C""

It raises the same error on a Mac too. My hunch is that the system locale has nothing to do with this.
",maca,2011-12-10 14:13:46
547,2012-12-06 07:06:45,"@maca: that is expected behaviour.
",jnicklas,2011-12-10 14:13:46
547,2012-12-06 07:07:53,"@maca: to ellaborate, we changed the behaviour. Please read the release announcement for 2.0.0 for further details.
",jnicklas,2011-12-10 14:13:46
547,2012-12-23 21:31:28,"@jnicklas Which entry is that in History.md? I tried looking for this change in Changed section but nothing connects for me to this one.
",betelgeuse,2011-12-10 14:13:46
547,2012-12-23 23:32:43,"@betelgeuse: https://groups.google.com/forum/?hl=en_US&fromgroups=#!topic/ruby-capybara/C0O7nP2YG1A
",jnicklas,2011-12-10 14:13:46
547,2012-12-23 23:37:46,"@jnicklas yeah that's more clear. I am still trying to figure out how to best handle cucumber where you want to use the labels. I guess it's best to modify the step so that it matches the label fully.
",betelgeuse,2011-12-10 14:13:46
546,2011-11-19 00:04:09,"With driver wait set to false the changes in the HTML made by an AJAX call will never be seen by the Capybara object page, even though Capybara.default_wait_time is set. Make sure the driver waits that amount of time to see those changes.
",zamith,2011-11-19 00:23:44
546,2011-11-19 00:06:39,"This a patch for tag 0.4.0. I think this problem has been addressed in more recent versions.
",zamith,2011-11-19 00:23:44
546,2011-11-19 00:23:44,"Hmm, there are a number of problems with this pull request.

I'm not sure what the issue is you're trying to address, but whatever it is, you'll need to prove that it exists through specs.

That being said, I don't think this change fixes much of anything, unless you are using a really obscure Capybara driver and the author of that driver was wildly incompetent, in which case, _that guy_ should fix his shit. Note that Selenium overrides this method, [here](https://github.com/jnicklas/capybara/blob/0.4.0/lib/capybara/driver/selenium_driver.rb#L121) and that RackTest doesn't execute JavaScript.

In general I am very, very wary of pulling in bug fixes to old releases of Capybara. You should really upgrade to the latest version.

Capybara has a ""no tests = no merge"" policy, if you want you pull requests to be merged, they need to have tests.
",jnicklas,2011-11-19 00:23:44
546,2011-11-19 00:55:05,"Well, I am using Capybara with Selenium to do some integration test. Here is the code that was not working:

page.find(""#edit_#{to_do.id}"").click        # Does an AJAX request that changes the HTML
assert_equal(""01/10/2010"",page.find(""#todo_due_date_#{to_do.id}"")[""value""])  # Finds an element introduced after the AJAX

In order to make it work I could either do 

page.find(""#edit_#{to_do.id}"").click
sleep(1)
assert_equal(""01/10/2010"",page.find(""#todo_due_date_#{to_do.id}"")[""value""])  

or

class Capybara::Driver::Base
  def wait?;true;end
end

This happens, as I said with version 0.4.0 (which I need to use because of legacy code), with the following configs:

Capybara.default_driver = :selenium
Capybara.default_selector = :css
Capybara.default_wait_time = 30

This patch solves my problem, but still I am going to try and do a test.
",zamith,2011-11-19 00:23:44
546,2011-11-19 02:33:52,"Ok, so I have been probing the code again, and that patch doesn't actually solve the problem, which brings me back to the begining, to using the sleep(). Don't understand why, though... 
",zamith,2011-11-19 00:23:44
545,2011-11-18 12:29:40,"I have a very strange problem with capybara at the moment. My situation is the following:
1. I run my tests using cucumber
2. My default driver is akephalos
3. For some of the tests, I added a @selenium tag
4. I use this before hook to start a XVFB using the headless gem:

<S_CODE_TOKEN>

This seems to work fine initially.  
When my first @selenium scenario comes up, I get this output:

<S_CODE_TOKEN>

After the scenario, firefox will still stay launched (as seen in ps aux), but akephalos will be the default driver again.  
A few scenarios later, often when calling ""Capybara.reset!"", I will receive an exception.
I caught this exception and added some additional output:

<S_CODE_TOKEN>

The result:

<S_CODE_TOKEN>

The full stacktrace looks like this:

<S_CODE_TOKEN>

This DOESN'T happen during a @selenium scenario. This is in an akephalos one!
Any idea why the after hook in cucumber might try to call the non-current driver?

Could it have something to do with https://github.com/jnicklas/capybara/commit/2cfb73320fb64f189e57f15b681b48ac03608bce ?
",rb2k,2012-01-03 14:58:10
545,2011-11-19 10:55:01,"I updated to the current git master branch and while this seems to solve SOME of the problem, I occasionally still get an error:

<S_CODE_TOKEN>

Notice how we get into this at the ""Before"" call, this is because of the changes to [cucumber.rb](https://github.com/jnicklas/capybara/commits/master/lib/capybara/cucumber.rb) , I think [this one](https://github.com/jnicklas/capybara/commit/87f470ed2f023cb349cbe769cafc922b83aea40a#lib/capybara/cucumber.rb) to be exact

Note:
At this point the environment looks like this:
Capybara.current_driver is :akephalos
Capybara.default_driver is :akephalos
",rb2k,2012-01-03 14:58:10
545,2012-01-03 13:09:07,"Capybara.reset! will reset all active sessions, including those started in e.g. Selenium or Akephalos, even if they aren't actually used inside this scenario. If the browser has somehow died since then, trying to reset would likely cause an error.
",jnicklas,2012-01-03 14:58:10
545,2012-01-03 14:58:10,"Oh, forgot about this one :)  
I think it might have had something to do with headless/xvfb and how they behave in general (at_exit hooks in particular).

I think the solution was to just use the current Process ID as the display number.  
When that doesn't work, switching to xvfb might be a good choice.

I'll close this for now
",rb2k,2012-01-03 14:58:10
544,2011-11-18 02:45:21,"When "":visible => false"" is given as an option for ""all"" finder, is intuitive that it matches only invisible elements.
",grzuy,2011-12-28 21:40:30
544,2011-11-18 07:53:17,"I agree that the behaviour is unintuitive, but I think the behaviour of finding only invisible nodes is pretty useless. Ignoring the visibility settings is _way_ more useful. So maybe the name needs to be changed, or the documentation, but I think the behaviour is fine as is.
",jnicklas,2011-12-28 21:40:30
544,2011-11-18 15:07:11,"Thanks for the quick response.
I really don't know if this option would be useful or not for people in general. Personally, i had encountered some situations where i need it.

Thinking about a solution, maybe changing the option key to `:visible_only` would be more intuitive. And then provide a new option like `:hidden_only`.

That makes sense?
",grzuy,2011-12-28 21:40:30
544,2011-11-28 09:44:47,"This is a widespread issue, I've seen at least 4 instances of people trying to implement the behavior they think Capybara provides, but they can't get working.  In all cases they try to do achieve the same behavior, some via css, others via xpath.  Anyway, there does seem to be a common understanding of the desired behavior.

@grzuy, my understanding of `visible => false` is the same as yours.  From what I've seen of the solutions people have offered up others have a similar understanding.

Maybe for an collective method like `all`, the keys `:select_visible` or `:exclude_visible` are more descriptive of what is intended to happen?  Other more explicit key names are `:if_visible`, `:is_visible` or `:is => :visible|:invisible` and `if => :visible|:invisible`

I'm not being argumentative when I say I really don't understand why @jniklas claims the current behavior is expected.  Almost nobody else seems to think so, and if we took the new name the current behavior would surprise people:

<S_CODE_TOKEN>

When really it should be false.
",hedgehog,2011-12-28 21:40:30
544,2011-11-28 09:53:29,"I agree that the current behaviour isn't what people expect when they read `visible => false`, but it **is** more useful once you understand what it does.
",jnicklas,2011-12-28 21:40:30
544,2011-11-28 10:26:12,"You want an element, but you don't care if it's invisible or not. However, Capybara.ignore_hidden_elements is set to true, so without `:visible => false` it is _impossible_ to find this element. This is a far more serious problem than the find returning _too many_ elements, which you could always filter out later. 
",jnicklas,2011-12-28 21:40:30
544,2011-11-28 10:27:07,"Trust me that this was a very real problem before :visible => false existed, and I got a _lot_ of complaints about it.
",jnicklas,2011-12-28 21:40:30
544,2011-11-28 10:53:10,"Revisiting what is a self explanatory expression of what behavior is being set/unset:

<S_CODE_TOKEN>

Examples, `Capybara.ignore_hidden_elements = true`:

<S_CODE_TOKEN>

Then the return value of `Capybara.ignore_hidden_elements`, _inside/in-the-scope-of_ these methods would be:

<S_CODE_TOKEN>

This would be a mechanism whereby all `Capybara.<option>` could be massaged on the fly, e.g. within a Page Object class.  Example `Capybara.close_on_exit(false, session3)` discussed in issue #551
",hedgehog,2011-12-28 21:40:30
544,2011-12-09 16:15:40,"I think the biggest problem/easiest fix here would be the name change. It took me forever to realize the intended behaviour was different form the intuitive behaviour, and I still occasionally forget and try to use it the wrong way, because the name just doesn't match the behaviour. Visible=false seems like it should match elements that are not visible.

I think its just a naming issue, though its one that trips up lots of people so a change would be appreciated.
",GlyphGryph,2011-12-28 21:40:30
544,2011-12-28 15:56:21,"Semi-related: I tried improving the documentation for :visible, but then I discovered that YARD swallows the option documentation on http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Node/Finders:all (compare https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/finders.rb#L105). How frustrating.

I opened an issue at https://github.com/lsegal/yard/issues/439. Let's see what they say.
",joliss,2011-12-28 21:40:30
544,2011-12-28 21:49:10,"So I fixed this.  The finder documentation is still spread across `find` and `all`, but the experience has been sufficiently frustrating that I'm leaving the issue for now. At least the :visible thing is cleared up on the rubydoc page now (when it updates, that is).
",joliss,2011-12-28 21:40:30
543,2011-11-15 17:14:08,"I'm writing a test that checks for the inclusion of a give javascript file. So I have a constant containing a google code. 

When I check for that javascript to be present in the page, test fails even if string is there in the body. I found two problems: 

1) first, the string in the page has \n return chars in it that differ from the ones in my constant
2) an IMG tag has been stripped from the ending / slash closing the tag! (i.e. <img /> in the script becomes <img> in page.body

This way I cannot perform such check on the page body. Why is it transforming the output? Any clue on how to workaround this problem? I'd rather not change my constant.
",freegenie,2011-11-15 17:43:43
543,2011-11-15 17:43:43,"page.body gives you the page as it looks in the browser's DOM, which can be different from how it was served out. Try using page.source instead.

http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Session#html-instance_method
http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Session#source-instance_method

(Hm, I'll try to clarify the documentation on this if I get around to it.)
",joliss,2011-11-15 17:43:43
542,2011-11-15 11:32:11,"Given the following HTML :

<S_CODE_TOKEN>

Then the following should ideally be true :

<S_CODE_TOKEN>

This would allow also the following test helper to work

<S_CODE_TOKEN>

Is there any particular reason that this is currently not supported, is it because or technical limitations or is it just because no-one actually thought of it before? Would you like a failing test / feature scenario to work against?
",nikosd,2012-07-12 15:12:08
542,2011-11-15 11:34:53,"For the record, I'm not sure whether this actually returns true currently :

<S_CODE_TOKEN>
",nikosd,2012-07-12 15:12:08
542,2011-11-15 11:54:10,"Honestly, I think it's just that no one has thought of this before. I actually think the implementation could be a bit tricky though. Do give it a shot if you feel like it.
",jnicklas,2012-07-12 15:12:08
542,2011-11-15 13:35:19,"I was thinking the same about the implementation. If I manage to find some time I will start with the tests and then we can see what it takes for the implementation (given that all these different drivers exist...)
",nikosd,2012-07-12 15:12:08
542,2012-01-03 13:32:00,"WebDriver guarantees that element equality in Ruby is consistent with the DOM.
",jarib,2012-07-12 15:12:08
542,2012-01-03 13:50:23,"Interesting. Then we should probably pass the `==` operator through to the `native` element.

<S_CODE_TOKEN>

So we might make Capybara::Node::Element#== forward to Capybara::Selenium::Node#== forward to Selenium::WebDriver::Element#==.
",joliss,2012-07-12 15:12:08
542,2012-01-03 15:06:59,"Something like that, yes. My guess would be that it'll work the same in RackTest.
",jnicklas,2012-07-12 15:12:08
541,2011-11-14 09:38:56,"Calling attach_file in capybara 1.1.1 in combination with selenium-webdriver 2.12.2 fails. In selenium-webdriver 2.10 this was still working correctly.

Stacktrace from my specs:

<S_CODE_TOKEN>
",thijsc,2011-11-15 16:07:18
541,2011-11-15 14:47:03,"Getting the same error when I run the Capybara test suite. @jarib, any insight on this?
",jnicklas,2011-11-15 16:07:18
541,2011-11-15 15:14:24,"Looking.
",jarib,2011-11-15 16:07:18
541,2011-11-15 15:42:53,"Right. Capybara shouldn't call Element#clear on a file input. We used to silently ignore it, but don't anymore.
",jarib,2011-11-15 16:07:18
541,2011-11-15 16:08:20,"Fixed it and just released a new gem.
",jnicklas,2011-11-15 16:07:18
541,2011-11-15 16:13:43,"Just tested it in my project and the issue is fixed, thanks!
",thijsc,2011-11-15 16:07:18
541,2011-11-15 16:31:01,"Well that was quick. ^_^
",joliss,2011-11-15 16:07:18
541,2011-11-17 16:17:10,"Thanks guys, you saved me hours of dumb frustration... I <3 you
",dimacus,2011-11-15 16:07:18
540,2011-11-09 22:03:36,"I use this to retry click when selenium throws an error trying to click on an element that momentarily covered by another element. generally due to an animation
",deadlyicon,2011-11-15 14:48:38
540,2011-11-09 23:14:59,"I can't really think of how this can hurt, but I'd be more comfortable merging this if you could provide a test case showcasing a failure that this solves.
",jnicklas,2011-11-15 14:48:38
540,2011-11-09 23:57:22,"I would be happy too.

I cannot get the test suite to pass locally, is there a specific version of FireFox that is known good on OS X Lion?
",deadlyicon,2011-11-15 14:48:38
540,2011-11-10 00:54:12,"Can't comment on OS X, but Firefox up to version 7 is reported to work.
",joliss,2011-11-15 14:48:38
540,2011-11-15 14:49:03,"Alright, I changed my mind, just want to get rid of some pull requests ;) Merged.
",jnicklas,2011-11-15 14:48:38
540,2011-11-17 18:27:19,"awesome! thanks =)

On Tue, Nov 15, 2011 at 6:49 AM, Jonas Nicklas <
reply@reply.github.com

> wrote:
> 
> Alright, I changed my mind, just want to get rid of some pull requests ;)
> Merged.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/540#issuecomment-2745762

## 

Jared
",deadlyicon,2011-11-15 14:48:38
539,2011-11-09 19:23:06,"Everything works good in FireFox7. I don't change my code. After that i update my FireFox from 7 to 8. Then attach_file doesn't works for me. 

hers is the error:

<S_CODE_TOKEN>

any ideas?

OS: Mac OS Lion 10.7.2
My gem versions
- capybara (1.1.1)
- cucumber (1.1.1)
- selenium-webdriver (2.10.0)
",wjp2013,2011-11-09 19:32:35
539,2011-11-09 19:26:54,"This might be a problem with Selenium or selenium-webdriver, I think. Cc @jarib. :)
",joliss,2011-11-09 19:32:35
539,2011-11-09 19:31:33,"Firefox 8 support will be in the next selenium-webdriver release (probably pushing tomorrow).
",jarib,2011-11-09 19:32:35
539,2011-11-09 19:32:35,"I'll go ahead and close this then. Feel free to re-open if the next update doesn't fix it. :)
",joliss,2011-11-09 19:32:35
538,2011-11-03 10:09:33,"Instead of writing:

<S_CODE_TOKEN>

we could:

<S_CODE_TOKEN>

Implementation is rather straightforward.

Any thoughts?
",wojtekmach,2011-11-03 11:56:32
538,2011-11-03 11:56:32,"Capybara is not going to add any Rails specific code. This should be fairly easy to implement in your app, something like:

<S_CODE_TOKEN>

(I haven't tested this, but it should work)

It's a neat idea, it's just not a good fit for Capybara as a library.
",jnicklas,2011-11-03 11:56:32
538,2011-11-03 12:37:31,"That's cool.

For future reference, I actually used:

<S_CODE_TOKEN>
",wojtekmach,2011-11-03 11:56:32
537,2011-11-02 16:29:07,,marcofognog,2011-11-02 19:32:40
536,2011-11-02 12:43:07,"running 

<S_CODE_TOKEN>

with capybara used says that the capybara methods are undefined.How do I fix this?
",trvrplk,2011-11-02 13:55:44
536,2011-11-02 13:55:44,"By reading the documentation.
",jnicklas,2011-11-02 13:55:44
536,2011-11-02 20:58:07,"@jnicklas where in the docs does it cover this issue (link please)?
",trvrplk,2011-11-02 13:55:44
536,2011-11-02 21:54:06,"Read the README. There is a section about integrating with RSpec, do what that section says and you should be good to go.
",jnicklas,2011-11-02 13:55:44
536,2011-11-02 23:38:28,"@jnicklas I read that, but it solves nothing
",trvrplk,2011-11-02 13:55:44
536,2011-11-03 07:07:38,"then give a _way_, _way_, _way_ better description of your error. This bug report is so vague, it is wasting everyone's time. This issue is for veryfied bugs _only_. If you have a question, please use the mailing list.
",jnicklas,2011-11-02 13:55:44
536,2011-11-03 11:57:08,"@jnicklas Here is the spec:

<S_CODE_TOKEN>

and the output:

<S_CODE_TOKEN>
",trvrplk,2011-11-02 13:55:44
536,2011-11-03 12:02:28,"Did you `require 'capybara/rspec'`?
",jnicklas,2011-11-02 13:55:44
536,2011-11-03 12:03:37,"@jnicklas yes.
",trvrplk,2011-11-02 13:55:44
536,2011-11-03 13:48:50,"I don't believe you. You're missing something, maybe you didn't require the spec helper or something. But you did _not_ require capybara/rspec in the same Ruby process as the above code. I even tried this on my machine, it works just fine.
",jnicklas,2011-11-02 13:55:44
536,2013-01-23 21:27:48,"You may have forgotten to do the following. (I know I did.)

`If you are using Rails, put your Capybara specs in spec/features.`
",gruen,2011-11-02 13:55:44
535,2011-10-31 16:40:39,"I am using Capybara with selenium driver, and doing require 'capybara/cucumber' to reset my session after every scenario. I am running tests in FireFox.

If I debug I can trace that after every scenario Capybara calls the _Capybara.reset_sessions!_ in After do hook, which further down calls  @browser.manage.delete_all_cookies in selenium/driver.rb. However it doesn't seem to actually clear the cookies and no exception is thrown as well.

Could this be because Capybara doesn't launch FireFox with Administrator privilege? or there is something else wrong, any ideas?

OS: Windows 7 64 bit.
My gem versions
- capybara (1.1.1)
- cucumber (1.1.0)
- selenium-webdriver (2.8.0)
",uahmed,2012-01-03 13:10:52
535,2011-10-31 18:43:37,"I'm also seeing this issue with the same selenium-webdriver and capybara for firefox 7 on a mac
",cldwalker,2012-01-03 13:10:52
535,2011-10-31 21:59:36,"Yeah forgot to mention, mine is Firefox 7.0.1 as well.
",uahmed,2012-01-03 13:10:52
535,2011-11-16 08:00:39,"Could you try updating to the latest selenium-webdriver and see if the issue persists?
",jnicklas,2012-01-03 13:10:52
535,2011-11-17 22:55:25,"Yes, problem still persists with selenium-webdriver 2.12.2.
",uahmed,2012-01-03 13:10:52
535,2011-11-18 07:51:23,"Very odd, I can't replicate this, can you provide a repeatable test case that fails for you, and I will try and see if it breaks for me as well?
",jnicklas,2012-01-03 13:10:52
535,2011-11-18 10:18:18,"I will try to over the weekend. Thanks.
",uahmed,2012-01-03 13:10:52
535,2011-11-18 23:03:34,"The latest webdriver does delete all cookies. However, I noticed that for webdriver doesn't detect all cookies, which gave me the impression that #delete_all_cookies doesn't work. @uahmed you may want to check that you're not running into the same issue. Seems the issues I have now are more with selenium webdriver + firefox itself
",cldwalker,2012-01-03 13:10:52
535,2011-11-19 00:12:55,"@cldwalker do you mean it works for you with latest release of selenium web driver? The problem as I described was always with selenium + firefox.
",uahmed,2012-01-03 13:10:52
535,2011-11-19 00:25:18,"Yes, the latest selenium + firefox 7 works in that the driver deletes
all the cookies it knows about. However, what seems to be buggy is
that the selenium web driver isn't returning all the cookies I see.
I'll have to file that bug in selenium, not here.

On Fri, Nov 18, 2011 at 7:12 PM, Usman Ahmed
reply@reply.github.com
wrote:

> @cldwalker do you mean it works for you with latest release of selenium web driver? The problem as I described was always with selenium + firefox.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/535#issuecomment-2796217
",cldwalker,2012-01-03 13:10:52
535,2011-11-19 00:51:26,"Okay, Kindly post a link here after you file the bug with selenium. Thanks
I also found this issue http://code.google.com/p/selenium/issues/detail?id=615 not sure if that is different?
",uahmed,2012-01-03 13:10:52
535,2012-01-03 13:10:52,"Since this is a Selenium issue, I will close it here.
",jnicklas,2012-01-03 13:10:52
535,2012-05-18 19:24:39,"Why would reset_sessions reset the cookies also? Cookies != Sessions. What if I want to just reset my session but not my cookies to simulate a browser window being closed and then reopen.

You would need to do this to test a cart or login persistance across multiple sessions of the app within the same browser?
",BrandonMathis,2012-01-03 13:10:52
535,2013-01-30 16:14:44,"I would just like to add that there are other cases where you can't clear all the cookies by directly using Capybara.reset_session!

If you're authenticating against an OAuth provider such as Facebook, Google, Twitter, etc. **you need to first visit their respective website and while there you should call Capybara.reset_session!** since there are some ""invisible"" cookies which can only be cleared with Capybara.reset_session! while on the OAuth provider's website (no idea why). It doesn't look like a Capybara issue, not sure if it's a driver issue (tried both with Selenium and Webkit drivers, same result) but I spent a few hours pulling my hair on this. I hope I save you precious hours of your life with this and it'd be great if someone could explain more about why this happens at all.

I found about this here: http://www.glennposton.com/posts/cant_delete_cookies_with_cucumber_capybara_and_selenium
",mgogov,2012-01-03 13:10:52
535,2013-11-15 18:25:33,"like @mgogov I would also like to add another case that have similar symptoms as this bug (user is not logged out between scenarios). Namely the case where the web app is using HTML5 local storage instead of ordinary cookies to store sessions. In such case there is another bug for that situation: #1001 
",jarl-dk,2012-01-03 13:10:52
535,2014-07-26 17:49:44,"reset_session! : ""Reset sessions, cleaning out the pool of sessions. This will remove any session information such as cookies.""

I on the other hand is looking for a way to clear the session and not the cookies.
",espen,2012-01-03 13:10:52
535,2014-07-26 20:12:16,"@espen  Adding a request for how to do something to an issue that was closed over 2 years ago is unlikely to get you help.  Try posting to the mailing list as indicated in the README
",twalpole,2012-01-03 13:10:52
535,2014-07-27 10:49:32,"Was mainly just wanting to clarify what the code does as this issue was the first result on Google. I did however find a solution to my problem using this gem which clears expired cookies include session cookie but keeps other cookies. https://github.com/nruth/show_me_the_cookies
",espen,2012-01-03 13:10:52
535,2016-03-30 00:08:52,"Ran into this issue, after all this time. As @mgogov mentioned, you must visit the site to access the cookie for that site, before calling `reset_session!`

For my use case, it looks like:

<S_CODE_TOKEN>
",georgeu2000,2012-01-03 13:10:52
535,2016-11-28 14:30:14,@georgeu2000's point seems very important and fixed the problem for us. Could that be documented somewhere? ,wrtsprt,2012-01-03 13:10:52
535,2016-11-28 18:13:44,"@wrtsprt @twalpole - I would be happy to update the docs, if that is desired.",georgeu2000,2012-01-03 13:10:52
535,2016-11-29 16:08:20,"@georgeu2000 The behavior is driver dependent - selenium only allowa to clear cookies for the current domain, other drivers allow to just clear all cookies IIRC.  Therefore this should not be documented in Capybara.reset_session!.  Not sure where would be correct currently though.  Maybe just a gotchas section in the README",twalpole,2012-01-03 13:10:52
534,2011-10-29 01:27:08,"Whenever I call link_to with :method => ""POST"", capybara raises an error. At first I thought it was my app, took me a while to figure out, so I hope this spare someone the same trouble.
",marcofognog,2011-10-29 01:58:37
533,2011-10-27 11:06:18,"This is based on https://github.com/jnicklas/capybara/pull/182, but I also added support for rack-test. Please let me know if any changes are needed.
",david,2011-10-28 06:42:18
533,2011-10-28 06:42:18,"There have been discussions surrounding this, somewhere on another issue or on the mailing list before. We came to the conclusion that it's not a good idea to add this.
",jnicklas,2011-10-28 06:42:18
533,2012-05-11 19:01:28,"Can you provide a link to this discussion?

The pages with these closed pull requests and issues are at the topic of the front page in the google search for 

""capybara contenteditable""
",williscool,2011-10-28 06:42:18
533,2012-07-17 16:31:37,"+1 for a link to the discussion, cant find it by google myself, it seems like we should be able to edit the content of these elements... 
",JonRowe,2011-10-28 06:42:18
533,2012-07-17 17:04:12,"I can't remember where the discussion took place, and google and github didn't help me either. But regarding this pull request, the question is: what would you _do_ with this functionality. As far as I can see `contenteditable` really has no purpose in a driver which doesn't support JavaScript. `contenteditable` elements aren't treated as form elements, and thus aren't submitted along with form data.

I tried really hard to come up with a case where changing an element due to it having `contenteditable` would cause any kind of effect at all in the absence of JavaScript, and the only thing I could come up with is something like this:

<S_CODE_TOKEN>

A `contenteditable` button. Curisouly, I tried this in Chrome and yes, it does work, but it's a pretty ludicrous edge case isn't  it?

Why then support something which doesn't make any sense. Note that Selenium already supports it, it just isn't tested.
",jnicklas,2011-10-28 06:42:18
533,2012-07-17 17:13:02,"I agree it makes no sense in drivers that don't support JS (other than uniformity maybe) but it does make sense for the JS drivers. Looking at the head it doesn't look like the selenium driver would support it as `set` doesn't do anything for element's it doesn't know how to manipulate, and `content-editable` is never mentioned, so you'd have to drop down to native and `send_keys` yourself... which makes me sad...

I'd be open to writing some tests for and making it work on selenium if the behaviour is agreeable but as the previous two PR's with this functionality have been rejected and I'm using a different driver anyway (poltergeist)...
",JonRowe,2011-10-28 06:42:18
533,2012-07-17 17:16:04,"@JonRowe I'm working on a major refactor of the test suite, which will affect how these tests would be written. I should be able to finish that up in the next couple of days. I'd suggest holding off until then, if you're interested in making this work in Selenium.
",jnicklas,2011-10-28 06:42:18
533,2012-12-15 00:15:46,"See pull request #911
",JonRowe,2011-10-28 06:42:18
532,2011-10-24 05:54:18,"Otherwise, running `bundle exec rake ...` will lead to an error:

<S_CODE_TOKEN>
",mkdynamic,2011-10-24 09:55:49
531,2011-10-24 01:58:52,,mkdynamic,2011-10-24 09:56:04
530,2011-10-24 00:26:39,"This works around the issue described in #501. The repo case in that issue is also reproducible for me, see comments for version info:
https://gist.github.com/11681383c6779ad15ce9

Been using this fix on a fairly large acceptance suite for a few weeks and it's been working well. In practice, it seems to only happen when using `Element#text`. I suspect, it may be related to the complexity of that method in Selenium:
http://code.google.com/p/selenium/source/browse/trunk/javascript/selenium-atoms/text.js#43
",mkdynamic,2011-10-24 09:58:26
530,2011-10-24 09:58:26,"I don't like adding workarounds for other projects' bugs to Capybara. This should really be fixed in Selenium.
",jnicklas,2011-10-24 09:58:26
530,2011-10-24 22:26:49,"Fair enough, I think that makes sense.
",mkdynamic,2011-10-24 09:58:26
529,2011-10-21 18:52:26,"based on that gist https://gist.github.com/989533
",ozeias,2011-10-21 19:02:27
529,2011-10-21 19:02:27,"I've previously been asked for this feature and have repeatedly denied it. Just add a submit button to your form. Some browsers will not submit forms without submit buttons even on pressing enter, so it's good practice anyway.
",jnicklas,2011-10-21 19:02:27
529,2011-11-19 01:52:31,"Please add my name to the list of people requesting this feature.

BTW, I welcome tools that encourage good practices but I would respectfully disagree when they force these practices down everybody's throat.

It unwise to assume that all webapps are designed to be used by everybody or to be compatible with all browsers; in some cases, webapps may fall outside the norm, can be specialised for a very few specific users or to run only on a small set of chosen browsers.

Thanks
",marcandre,2011-10-21 19:02:27
529,2011-11-19 09:55:55,"Well, the problem is that we _can't_ implement it in any meaningful way. It's illogical to expect all drivers to implement something which _does not work_ in many browsers. Conceptually it just doesn't make sense. What kind of user action is ""submit_form"" equivalent to? Hitting enter? What if the user has attached a keydown event handler to this form? It just doesn't make any sense.

Just add the damn button, hide it if you need to (though you probably really shouldn't) and be done with it. It'd be much more interesting to add a send_keys method, and we have had discussions to that effect, but again, the problem was cross-driver compatibility.
",jnicklas,2011-10-21 19:02:27
529,2011-11-19 16:30:23,"Thanks for the reply; I understand better the objection.

Indeed, a ""press enter"" / ""send keys"" would be more appropriate, at least for javascript capable drivers. I imagine this is already possible with an `execute_script`.

So maybe `submit_form` could be defined as firing off an enter key event for drivers that can do this, and simply submitting the form for others that can't?

Thanks.
",marcandre,2011-10-21 19:02:27
529,2013-10-25 20:10:36,"My use case is testing an implementation of heroku Add-ons SSO. My page contents look something like this:

<S_CODE_TOKEN>

If I were using a backend more advanced than rack:test then I wouldn't have to submit the form.  But in this case I see no other choice but to monkey patch Capybara.  Adding a submit button would make it appear to the user.  I suppose I could render a submit button only in test, but that feels like a worse Hack, no?

![Monkey Patch Capybara](http://farm5.staticflickr.com/4115/4897274643_94deddd620_z.jpg)

<S_CODE_TOKEN>
",jacobo,2011-10-21 19:02:27
528,2011-10-21 13:54:07,"Linking to the Google hosted jQuery makes running the specs vulnerable
to network issues / requires network connectivity. It's also probably
faster to have it locally.
",jonleighton,2011-10-30 10:51:06
528,2011-10-21 13:59:13,"Some background: The reason why I removed the local jQuery back in fcdeeca0d9 was that it clutters the grep output. I have no real objections to adding it back in though. :)
",joliss,2011-10-30 10:51:06
528,2011-10-28 20:05:53,"The specs don't run without a net connection anyway, all the remote stuff needs to talk to the Heroku app. Is this really that big of an issue? 
",jnicklas,2011-10-30 10:51:06
528,2011-10-30 10:27:21,"Hiya,

I have been developing my own Capybara driver (https://github.com/jonleighton/poltergeist - not properly released yet). I want this change merged for two reasons:
1. Sometimes my internet connection can be flakey and this causes fluctuations in the time that the specs run. This makes it harder to realise if a certain change has inadvertantly reduced performance.
2. Whilst I accept that the remote specs would not run without a connection, if this patch was merged, _most_ of them would run without a connection. Without this patch, it's not really realistic to develop without a connection, but with it, it would be possible, just a few of the specs wouldn't work.

Thanks
",jonleighton,2011-10-30 10:51:06
528,2011-10-30 10:51:27,"I'm convinced
",jnicklas,2011-10-30 10:51:06
527,2011-10-20 16:52:52,"We're using Evergreen for JS testing on our Rails app, and it uses Capybara internally.  We have one of the largest Rails apps out there, and 10 seconds was barely enough to boot it (sometimes not).

When Capybara hit the timeout during our test:javascripts task, it would output this message and exit the entire Rake process (successfully), which (in our automated testing environment) made the entire test run ""succeed"" — when in fact it had failed to run the JS tests or anything after them.

The simple fix is just to re-raise with a more useful message rather than merely puts'ing the message and exiting with a successful code (0).  (Obviously we also increased the timeout on our end.)
",wisq,2011-10-20 20:41:48
526,2011-10-20 16:48:10,"I have a particular form that is configured to submit via ajax.  This works properly when I test the page in chrome, however, capybara-webkit submits the form via a regular post.  I've tried increasing the time waited after each click, thinking that perhaps the ujs callback wasn't being registered in time.  Unfortunately this didn't solve the issue.  If the solution is not clear, does anyone have any ideas as to how I could debug this further?

<S_CODE_TOKEN>
",awt,2011-10-20 20:40:53
526,2011-10-20 20:40:53,"That's really more of an issue for capybara-webkit, but I doubt they'll be able to help you unless you manage to close in on the problem a bit more.
",jnicklas,2011-10-20 20:40:53
526,2011-10-20 21:13:11,"Gah!  I meant to post on -webkit.
",awt,2011-10-20 20:40:53
525,2011-10-19 17:43:34,"Heya,

I discovered a couple of points in our tests where we weren't testing what we thought we were.  Along the lines of : 

<S_CODE_TOKEN>

or 

<S_CODE_TOKEN>

Both of which silently pass - however, capybara doesn't support a :content option (it should be :text), and it doesn't support passing blocks to have_selector (a common mistake from Webrat switchers).

Any thoughts about making capybara warn or even raise an error on unexpected input here?
",jdelStrother,2012-07-13 13:37:15
525,2011-11-13 14:15:07,"I had the same problem with :content passing silently. Would be useful to have a warning.
",VetriVellore,2012-07-13 13:37:15
525,2012-01-09 06:20:54,"Ditto here. It's worth noting that the rspec docs specifically use the :content option in an example of FactoryGirl/Capybara, implying that it works.
",boringusername99,2012-07-13 13:37:15
525,2012-01-09 11:14:09,"@jnicklas apologies about that. I'm pretty sure RSpec's doco is not the only source of confusion here, but we didn't help matters by posting an incorrect example in the RDoc. The doc error is fixed (thanks to @jwow313), but won't be reflected on rubydoc.info until the next rspec-rails release.
",dchelimsky,2012-07-13 13:37:15
525,2012-01-09 12:23:03,"How about this pull request? https://github.com/jnicklas/capybara/pull/602
",jdelStrother,2012-07-13 13:37:15
525,2012-07-13 13:37:15,"Closed by 21fad63bc2813959b0f5dedae8c0254646fd30b6
",jnicklas,2012-07-13 13:37:15
524,2011-10-17 12:37:11,"Detect if Content-Type is XML and then use Nokogiri::XML instead of
Nokogiri::HTML to parse the content. This fixes two issues.

Firstly it stops XML being wrapped with an HTML doctype and body tags.

Secondly it stops tags being normalised to lower case and allows tags
with colons like media:author.
",johnf,2011-10-20 15:18:36
524,2011-10-17 13:34:52,"Not really sure if I see the point of this. Why are you using Capybara to check XML responses in the first place?
",jnicklas,2011-10-20 15:18:36
524,2011-10-17 13:40:23,"Mainly because I'm using cucumber with a slight modification of the original web steps. Which I'll probably be moving away from at some stage soon seeing as it is considered an antipattern now.

You're right though capybara probably isn't the right tool for this.
",johnf,2011-10-20 15:18:36
524,2011-10-20 14:15:57,"Just ran across this issue.  What should I use to get an XML request from my app?  I'm used to Capybara, but I realize I'm just using the page.body and parsing the XML in the test
",cheerfulstoic,2011-10-20 15:18:36
524,2011-10-20 14:18:47,"I just noticed that I can use ""page.source"" rather than ""page.body"" which solves my issue for now, but I'm still curious on what the best practice might be
",cheerfulstoic,2011-10-20 15:18:36
524,2011-10-20 15:18:36,"Generally I'd recommend everyone _not_ to use Capybara to test XML requests. Use plain RackTest for that. Capybara does not have an API which is well suited to doing API tests, and whatever you come with is inevitably going to be pretty hackish. Note that there's no problem in mixing RackTest and Capybara in the same test:

<S_CODE_TOKEN>

As long as they are working against the same app, and there are no issues like DB transactions, then this should just work.
",jnicklas,2011-10-20 15:18:36
524,2011-10-20 16:01:32,"Gotcha, that's what I didn't understand, that the post/get methods were not using Capybara and that the visit is.  Thanks!
",cheerfulstoic,2011-10-20 15:18:36
524,2011-11-19 11:19:08,"Now that RSpec includes Capybara matchers for view specs, would you reconsider accepting this patch? I would love to be able to drop Webrat, but right now I have to matchers for matchers that work with XML.
",indirect,2011-10-20 15:18:36
524,2011-11-20 11:34:13,"Still no, you can achieve the same thing very easily using an XML parser such as Nokogiri, and they you are not abusing Capybara for a purpose it was never meant to serve.
",jnicklas,2011-10-20 15:18:36
524,2011-12-14 20:04:29,"Hmm, I am using rspec, with a Rails view test. Without capybara... I can't figure out the easiest way to test XML, do it all manually in nokogiri, or write my own rspec matchers that use nokogiri direct?  If capybara isn't the right tool, anyone know if anyone has a good tool?
",jrochkind,2011-10-20 15:18:36
523,2011-10-16 10:35:57,"I have this ERB snippet
<S_CODE_TOKEN><S_CODE_TOKEN>5: select 'p1', :from => :school_level
6: select '2011', :from => :school_year
<S_CODE_TOKEN>

Cucumber always shows error 
<S_CODE_TOKEN>
But if I comment out line 1,2,5, the test is pass.

Any suggestions on this?
```
",visibletrap,2011-10-16 15:49:37
523,2011-10-16 15:01:25,"I'm gonna bet two cows on the fact that this is a problem with your app code. Please investigate further ;)
",jnicklas,2011-10-16 15:49:37
523,2011-10-16 15:29:12,"Thanks for you response. I'm also try to investigate. I have more information I forgot to tell you.

If I modify line 2 to be like this

<S_CODE_TOKEN>

The test also pass.
",visibletrap,2011-10-16 15:49:37
523,2011-10-16 15:33:02,"Try using Strings instead of Symbols in `select`, Capybara doesn't officially support using Symbols there, so that could cause problems.
",jnicklas,2011-10-16 15:49:37
523,2011-10-16 15:49:37,"You probably right. I change to Strings and it works.

Previously I use Symbols instead of Strings because form_for will modify Strings and Symbols also work for other type of inputs. 
However, I solve problem by using label's text instead.

Thank you very much.
",visibletrap,2011-10-16 15:49:37
522,2011-10-15 09:18:39,"TL;DR Let's add a new `has_text?` matcher that will only match displayable **and** visible text on the page (i.e. stuff users can actually see with their eyeballs).

I have found in practice that the `has_content` matcher leads to false positives. Specifically, in the scenario of ""I want to check that the page is displaying this text"".

The main issue if that it matches text in any node, anywhere on the page. This includes JSON, content in the head, inside script tags (javascript, mustache templates etc.) for example.

I have found and am strongly convinced that there is a different scenario where I want to only check text that is displayed to the user, and not the pure XML notion of text in any node anywhere in the document.

Given that `has_content` has a different but also valuable usage, I propose that we add another matcher to cover the scenario above.
",mkdynamic,2011-11-15 14:51:12
522,2011-10-15 19:18:59,"I agree with the idea, but not the implementation. I think we should have matcher that checks Element#text, and leaves that up to the driver to implement. I've wanted to change has_content? implementation to that, but I'm afraid of breakage. Adding a has_text? matcher might be a good step, that way we can deprecate has_content?, since, I agree with you, its semantics are kind of weird.
",jnicklas,2011-11-15 14:51:12
522,2011-10-15 20:57:22,"Yea, I agree that changing `has_content?` would lead to breakage so I like the idea of having a separate matcher for it.

Can you elaborate on the implementation you're suggesting, not sure I understand fully? If you ignore the crappy inline xpath expression in this current implementation and imagine it is built cleanly using the XPath API (as with the other matchers) would you still think it's a bad approach?

Also worth clarifying that one of the crucial things I have found in practice is the need for excluding text contained in script tags since you rarely (if ever) want to do that. Do you think it's reasonable to hard code that behaviour into the matcher. Philosophically it feels a bit off, but I think it's so often the case in practice that I am persuaded to hardcode that behaviour in the matcher.
",mkdynamic,2011-11-15 14:51:12
522,2011-10-16 00:37:50,"Imo, the matcher should basically look like this:

<S_CODE_TOKEN>

That is it uses Element#text, see here: http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Node/Element:text. It would then be up to the driver to decide what is and isn't text. I think Selenium for example is not going to include anything in script tags if you call #text. We might need to tweak the results manually in RackTest. The problem with using XPath for this, is that for most drivers, the result is going to be flawed, as the visible text is going to be different from what is in the HTML and we can at best make a half-arsed guess.
",jnicklas,2011-11-15 14:51:12
522,2011-10-16 00:59:06,"Got it. Makes sense. I can take a stab at spec'ing that out for Selenium + RackTest, unless you're already on the case?
",mkdynamic,2011-11-15 14:51:12
522,2011-10-16 14:59:44,"Please, go ahead!
",jnicklas,2011-11-15 14:51:12
522,2011-10-16 23:49:22,"@jnicklas I have updated the implementation based on Element#text. Definitely agree it makes more sense this way, and it came together pretty quickly, which is always a good sign. Let me know your thoughts on how this looks?
",mkdynamic,2011-11-15 14:51:12
522,2011-10-17 04:30:28,"FYI. Still working on this, spotted a few false positives in the RackTest specs that I'm addressing. Also adding more specs to clarify the difference between `has_text?` and `has_content?`.

Also, providing I solve these issues, this patch should also address the following pull request, which is very closely related: https://github.com/jnicklas/capybara/pull/388.
",mkdynamic,2011-11-15 14:51:12
522,2011-10-17 06:15:47,"Inspecting how Selenium implements what gets called by capybara's Element#text method, it basically does what we were discussing manually:
http://code.google.com/p/selenium/source/browse/trunk/javascript/selenium-atoms/text.js#43

I'm going to use these rules as a basis for the RackTest implementation.
",mkdynamic,2011-11-15 14:51:12
522,2011-10-24 05:56:02,"@jnicklas OK, so `has_text` is now implemented to use `Element#text`. It worked out the box with the `Selenium` driver for all cases (head, script, hidden text etc.). For `RackText` driver, as you hinted, I had to tweak the behaviour of `Element#text` to behave correctly.

Please scope, and let me know what you think?
",mkdynamic,2011-11-15 14:51:12
522,2011-10-24 09:55:28,"Good job man, looks really nice. Just have a few minor reservations, and I think we can get this pulled in.
",jnicklas,2011-11-15 14:51:12
522,2011-10-24 22:25:15,"Great, will have a think about how to solve those issues you flagged.
",mkdynamic,2011-11-15 14:51:12
522,2011-11-15 14:51:21,"I'm convinced. Merging this now. Good job!
",jnicklas,2011-11-15 14:51:12
522,2011-11-30 00:01:11,"Still, this doesn't normalize `&nbsp;`. Before any of you cry ""nbsp?? that's from the '90s!"" let me remind you that a non-breaking space is a perfectly valid and useful space character for web pages.

For instance, you may want to write `“Buy&nbsp;now!”` to prevent a line break occuring between ""Buy"" and ""now"" during normal text wrapping. However this HTML entity isn't decoded into a normal space, and won't be matched by `\s+` in regular expressions.

Users will see “Buy now!”, but the test `has_text?(""Buy now"")` will fail.
",mislav,2011-11-15 14:51:12
522,2011-11-30 00:21:37,"nbsp?? that's from the '90s!
",mkdynamic,2011-11-15 14:51:12
522,2011-11-30 00:28:17,"I think Selenium does actually attempt to remove non-breaking spaces by the looks of things:
http://code.google.com/p/selenium/source/browse/trunk/javascript/selenium-atoms/text.js#43

Not sure about RackTest...

Either way, I agree it makes sense to normalize non-breaking spaces the same way as normal spaces.
",mkdynamic,2011-11-15 14:51:12
522,2012-11-06 18:10:15,"I just stepped on the ""foo&nbsp;bar"" != ""foo bar"" mine myself.  Spent an enjoyable afternoon trying to figure out why only that one test failed.  Sadly, ""foo&nbsp;bar"" != ""foo&nbsp;bar"" as well.  Do I need to change my UI design to work with Capybara?  That seems... wrong.
",cybersquid,2011-11-15 14:51:12
522,2012-11-06 19:04:38,"@cybersquid I this about nbsp? I recently updated the normalize_whitespace method to deal with Unicode whitespace.

Is the problem you are seeing still an issue with Capybara 2.0 (see [how to update](http://techblog.fundinggates.com/blog/2012/08/capybara-2-0-upgrade-guide/))?
",joliss,2011-11-15 14:51:12
522,2012-11-06 20:31:40,"Oh, I was unaware of the 2.0 beta.
I just updated as per the instructions.  After some wait_until removal fun, my tests now pass.
""foo bar"" == ""foo&amp;nbsp;bar"". 
Thanks for the excellent work.
I'll be watching for the final 2.0 release.
",cybersquid,2011-11-15 14:51:12
521,2011-10-14 19:12:49,"has_content? should ignore any whitespace in the content being compared (the matcher text) so that comparing whitespace sensitive text i.e. content in a /pre/ tag will be matched properly.
",rmontgomery429,2011-11-15 14:57:34
521,2011-10-14 19:14:35,"Wouldn't it be better to use something like `/\s/` instead of `""\n""`?
",joliss,2011-11-15 14:57:34
521,2011-10-14 19:49:15,"@joliss that change made more tests fail. The important thing would be to match however the XPath::HTML.content is ignoring whitespace. It looks like content is using an xpath `contains` which may be where whitespace is being ignored. I didn't dig much further but I believe that would be handled by Nokogiri and in turn LibXML. I'm not 100% sure though.
",rmontgomery429,2011-11-15 14:57:34
521,2011-10-15 19:15:54,"I agree with Jo that _if_ we do this, the regexp should be something like /\s/m or whatever that modifier is that switches to multiline mode.
",jnicklas,2011-11-15 14:57:34
521,2011-10-16 21:05:58,"> the regexp should be something like /\s/m or whatever that modifier is that switches to multiline mode.

The m modifier only matters for /./ (so that the dot matches newlines), not for /\s/, so far as I know.

Jo,
still recovering from the shock that the MULTILINE option is written /m in Ruby, not /s like the [rest of the world](http://perldoc.perl.org/perlre.html#Modifiers)
",joliss,2011-11-15 14:57:34
521,2011-10-17 01:08:33,"I think this change makes sense, since in my experience you basically never care about whitespace when using content matchers. The only downside to this is that the one time you do care about it, you're screwed.

Re: the regex issue, in this case, the /m option makes no difference. It only affects the behaviour of ^ and $:

<S_CODE_TOKEN>

We could use a regex for consistency, but it doesn't actually make any difference in this case either.
",mkdynamic,2011-11-15 14:57:34
521,2011-10-17 01:09:47,"It turns out that XPath::HTML normalizes content through xpath function `normalize-whitespace`. This doesn't behave exactly the same as `gsub(/\s/m, """")`. The `normalize-whitespace` function works by ""stripping leading and trailing whitespace and replacing sequences of whitespace characters by a single space"". http://www.w3.org/TR/xpath/#function-normalize-space

What I ended up doing to make this behave more like the `normalize-whitespace` function was to replace any one or more matched whitespace character with a single space.

I think the /\s/ suggestion was a good one and I've just pushed a change to make it work better in all cases. 

Thanks for the feedback @joliss and @jnicklas.
",rmontgomery429,2011-11-15 14:57:34
521,2011-10-17 01:13:50,"We probably want to normalize whitespace vs. just removing newlines, like so:

<S_CODE_TOKEN>

This is symmetrical with how the XPath `normalize-space` function works.
",mkdynamic,2011-11-15 14:57:34
521,2011-10-17 01:16:33,"@mkdynamic that makes sense. I must have pushed just as you commented. :) The latest change (removing the /m modifier) if pushed.
",rmontgomery429,2011-11-15 14:57:34
521,2011-10-17 01:44:55,"@mkdynamic do you know if it is preferable within capybara to make something like `gsub(/\s/, "" "").strip` a call to a function like `normalize_whitespace(content)` or leave it in-line?
",rmontgomery429,2011-11-15 14:57:34
521,2011-10-17 02:37:11,"Since you'll need to call this from both `has_content?` _and_ `has_no_content?` I would move it into it's own (probably private) method.
",mkdynamic,2011-11-15 14:57:34
521,2011-11-15 14:57:43,"Good job!
",jnicklas,2011-11-15 14:57:34
520,2011-10-10 20:35:50,"I often find myself wanting to write code like the following:

<S_CODE_TOKEN>

Is that something that you would accept in Capybara, or would you view it as to tight an integration into the testing framework?  If you would accept a patch to that effect i would be willing implement it for Rspec, TestUnit, and MiniTest.
",pezra,2011-10-11 15:17:23
520,2011-10-11 07:20:14,"In Capybara 1.1, you should be able to do:

<S_CODE_TOKEN>

That should do what you want, I think.
",jnicklas,2011-10-11 15:17:23
520,2011-10-11 14:37:58,"Hmm... I don't think that is exactly what i want.  I would like to be able to reload the page, and such, so that it works for rack test too.
",pezra,2011-10-11 15:17:23
520,2011-10-11 15:17:23,"In that case, I don't think this is a common enough use case to warrant inclusion in Capybara. Sorry.
",jnicklas,2011-10-11 15:17:23
519,2011-10-10 18:39:26,,jc00ke,2011-10-28 20:07:15
518,2011-10-09 14:02:56,"In Ruby 1.9.2-p290 / Rails 3.1, when I add capybara/rails tests fail with

<S_CODE_TOKEN>

my test_helper.rb

<S_CODE_TOKEN>

Gemfile

<S_CODE_TOKEN>
",ghost,2011-10-13 21:03:30
518,2011-10-10 07:10:10,"Try requiring capybara _after_ requiring your environment.rb file.
",jnicklas,2011-10-13 21:03:30
518,2011-10-13 21:03:28,"thanks
",ghost,2011-10-13 21:03:30
517,2011-10-07 12:34:12,"Updated docs to include crucial information for those using capybara-webkit.  Without these steps, capybara-webkit will not be able to see any fixtures loaded into the db.
",awt,2011-11-15 15:06:55
517,2011-11-15 15:06:55,"Closing this, since I think these statements are either factually wrong, or already covered by the README.
",jnicklas,2011-11-15 15:06:55
516,2011-10-05 19:24:37,"Hey @jnicklas!

In order to run Selenium via Capybara on my virtual machine running IE (kill me), you need to be able to bind the server IP to a net interface on the same subnet as the VM.

This patch exposes an configuration variable to allow you to bind the test server to any net interface on your local machine.

It falls back to 127.0.0.1 if the config var is not set.

Thanks!
",dbalatero,2011-10-28 20:10:11
515,2011-10-05 18:59:18,"Fixed Broken link 'https://github.com/aslakhellesoy/cucumber/wiki/tags' to 'https://github.com/cucumber/cucumber/wiki/tags'
",anthonylebrun,2011-10-06 08:46:57
514,2011-09-30 12:48:52,"Hi i am not able to populate a file field using attach_file or native webdriver send_keys functions. The problem is the file field is hidden beneath the label. This is the HTML  
<input id=""thumbnail_file"" name=""thumbnail_file"" type=""file"">
              <label for=""thumbnail_file"">Browse thumbnail</label>
 I get this error 'Element is not currently visible and so may not be interacted with' when i try to use above methods. Even JS injection gives me security error. 

How do i approach it ?
",kjayamit,2011-11-15 17:09:28
514,2011-11-15 17:09:27,"Difficult. In general, Selenium makes it pretty impossible to interact with hidden elements. You could try using a different way of hiding the field (e.g. moving it off the screen).

Please post questions like this to the mailing list in the future, it might take less than three months for someone to reply then ;)
",jnicklas,2011-11-15 17:09:28
513,2011-09-29 20:23:44,"Hi,

I thought it would be nice to have the ability to add a custom matcher using CSS a bit more easily. So instead of this:

<S_CODE_TOKEN>

you can do this:

<S_CODE_TOKEN>
",ordinaryzelig,2011-11-15 14:59:32
513,2011-11-15 15:00:03,"Totally awesome idea, good job!
",jnicklas,2011-11-15 14:59:32
512,2011-09-28 21:40:38,"I just upgraded our testing machine to Firefox 7 from Firefox 4 (using Selenium 2.7.0), and there current_url returns just the URL without the fragment.

To reproduce in cucumber:

Have a step:

<S_CODE_TOKEN>

Add a paths.rb clause ""home page with a fragment"" => ""/#somewhere""

Have a feature scenario like this:

<S_CODE_TOKEN>

Using the selenium adapter with Firefox 7, this fails because current_url reports only URLs up to the path.

I verified that current_url does return the URL with the fragment in IE, chrome and Firefox 4 (using both selenium 2.0 and 2.7.0).
",antifuchs,2011-11-15 17:10:18
512,2011-11-15 17:10:18,"It doesn't do this in RackTest either, afaik. Doesn't really make sense to assert on fragments to begin with imo.
",jnicklas,2011-11-15 17:10:18
512,2011-11-15 17:21:55,"It doesn't make sense to assert on them if you're not using browser-side JavaScript, I'll give you that. But it's not too uncommon to have #! paths on web sites (even Gawker does that nowadays) or web apps.
",antifuchs,2011-11-15 17:10:18
512,2011-11-16 09:00:14,"Imo, asserting on any kind of URLs doesn't make sense. You are making your test suite unnecessarily brittle and are asserting on something neither your stakeholders nor your users actually care about.
",jnicklas,2011-11-15 17:10:18
512,2011-11-16 17:17:38,"I agree that for most newly-conceived web apps, it makes no sense. But the one I'm testing is pretty old, and people have bookmarks. They expect them to continue working, and that's what the fragment asserts are for.
",antifuchs,2011-11-15 17:10:18
512,2011-11-16 17:49:28,"Then you should write unit tests asserting that those work as intended. Capybara is not the right tool for this job, imo.
",jnicklas,2011-11-15 17:10:18
512,2012-01-10 02:58:56,"This does make sense in cases like OAuth2 authentication tests with user-agent authentication flow where the access token is returned as a fragment of the return_url. 
",donaldpiret,2011-11-15 17:10:18
512,2012-02-18 21:58:08,"I'm writing a jquery-mobile app, and it would be handy (even crucial) to be able to determine the page by the fragment.  In this situation the fragment basically _is_ the current_path since the path never changes in this single-page app (so testing the fragment is at least as appropriate or inappropriate as testing the current_path).
",ahamid,2011-11-15 17:10:18
512,2012-04-20 18:49:16,"Edit: just realized that donaldpiret said exactly what I said more concisely, so I'll +1 him. I think fragment is valid to assert against in the case of OAuth2.
",MichaelXavier,2011-11-15 17:10:18
511,2011-09-28 18:24:32,"Hey @jnicklas,

I have two inputs on my form, ""Nome da Fórmula"" and ""Fórmula"".

My scenario is like this:

<S_CODE_TOKEN>

But the second line is filling ""Nome da Fórmula"" instead of ""Fórmula"".

I guess we should check first for label using full match and after the partial match.

Something like: ""label[equals(., ""Fórmula"") | contains(., ""Fórmula"")]"".

I don't know the XPath language, so is not exactly that.

What you think?
",sobrinho,2011-11-15 17:07:55
511,2011-11-15 17:07:55,"We're doing this already. The label probably isn't an exact match.
",jnicklas,2011-11-15 17:07:55
511,2011-11-15 17:12:20,"Are you sure?

<S_CODE_TOKEN>

The field `Name of Formula` is filled with `something else` because `Formula` matches with `Name of *Formula*`.
",sobrinho,2011-11-15 17:07:55
511,2011-11-16 08:54:43,"Capybara _should_ do the right thing. One common problem here is that people have an asterisk to mark the field as required, so if you have, `Formula*` and `Name of Formula`, Capybara doesn't know which to choose, if the label would be _exactly_ ""Formula"", then it should work. From having seen similar issues a number of times, I suspect that your label is not an exact match.
",jnicklas,2011-11-15 17:07:55
511,2011-11-16 09:50:24,"I don't have the spec anymore but seems you right, I'm using simple form.

<S_CODE_TOKEN>

Thanks for explanation :)
",sobrinho,2011-11-15 17:07:55
510,2011-09-26 13:50:23,"I just wrote a gem called capybara_minitest_spec (https://github.com/ordinaryzelig/capybara_minitest_spec) that adds MiniTest::Spec expectations like RSpec node matchers. It was tested by copying your spec/rspec/matchers_spec.rb and changing it to use MiniTest::Spec. Thought it might be worth mentioning. Thanks.
",ordinaryzelig,2011-11-15 14:59:08
509,2011-09-26 13:37:57,"I am testing a rails app, and in one test (Using a rSpec request spec), I am using javascript since the link is a link to delete an object.

When using Selenium (Which is what I am using currently since akephalos does not support the newer Capybara's), I get this error: 

3) SessionsController signing out shows Sign In and Sign Up in user-bar
     Failure/Error: page.driver.delete
     NoMethodError:
       undefined method `delete' for #<Capybara::Selenium::Driver:0xad3d484>
     # ./spec/requests/sessions_spec.rb:19:in`block (4 levels) in <top (required)>'
     # ./spec/requests/sessions_spec.rb:18:in `block (3 levels) in <top (required)>'

The link looks like: rel=""nofollow"" data-method=""delete"" href=""/sign-out""

Gems are: 

selenium-webdriver 2.7.0
capybara 1.1.1
",ghost,2011-09-26 14:02:15
509,2011-09-26 14:02:15,"Argh... page.driver.delete is _not_ part of Capybara's API. It's not going to work with anything else than RackTest, which is why it's a hack that's not documented _anywhere_.
",jnicklas,2011-09-26 14:02:15
509,2015-04-04 12:11:49,"@jnicklas Then what we should do, in order to logout a devise user.
",mohsinali,2011-09-26 14:02:15
508,2011-09-26 12:03:25,"Months ago I started using the new capybara's DSL for acceptance tests, however every time a spec fails I have to reproduce the problem by hand in order to determine what is happening because capybara is unable to catch the exception and the message is printed on response body. So the rspec output/backtrace is pretty useless because it just tells which spec fails instead of the broken app piece. How do you deal with this situation?
",knoopx,2012-01-03 15:07:49
508,2011-09-26 13:13:45,"Never had this problem before. Which driver are you using? Which server?
",jnicklas,2012-01-03 15:07:49
508,2011-09-26 13:37:58,"I'm using `capybara 1.0.1` default `:js => true` driver (aka `Capybara::Selenium::Driver`), `mongrel 1.2.0.pre2` as dev server and `rack 1.2.4` as test server (I don't think I can change this as it's part of `Capybara::Server`). `ruby 1.9.2` and `rails 3.0.10`.

When acceptance specs fail are due they fail DOM assertions then I know there's an app problem. If I look at the firefox zombie executing the specs I can see the exception messages are being returned as response bodies but not the backtrace. Obviosly capybara is completly unaware that there was an app exception rather than an failed DOM assertion and the rspec output is completly uninformative about the real problem.
",knoopx,2012-01-03 15:07:49
508,2011-09-26 14:27:19,"...and this is happening me since the early implementation of the DSL on the master branch, before it was pushed to rubygems and in different projects/gemsets . I thought this was a known fact, so I was asking for advice.
",knoopx,2012-01-03 15:07:49
508,2011-11-02 19:35:58,"#358 looks like a duplicate.
",joevandyk,2012-01-03 15:07:49
508,2011-11-02 19:39:41,"I have the same problem using the rack driver.
",joevandyk,2012-01-03 15:07:49
508,2011-11-03 23:44:08,"@jnicklas does this not happen to you?  When Rails raises an error (from a controller or view or something), the backtrace is not displayed in the test output.
",joevandyk,2012-01-03 15:07:49
508,2011-11-07 03:32:27,"This definitely seems like what I was dealing with in #329. 

As a monkey-patch-hack, I put something like this in either `spec/support` or `features/support`

<S_CODE_TOKEN>
",agibralter,2012-01-03 15:07:49
508,2011-11-07 03:33:09,"That is, if you're using Capybara's `Thin` app server... you could probably do something similar for mongrel.
",agibralter,2012-01-03 15:07:49
508,2011-11-07 03:35:10,"I don't use thin or mongrel -- rack-test doesn't use a webserver -- and I still get this backtrace-hiding problem.
",joevandyk,2012-01-03 15:07:49
508,2011-11-07 03:58:07,"@joevandyk -- I think that's a separate issue.

There are two outstanding issues regarding exceptions in Capybara. One has to do with webservers.

The other... well I haven't looked too deeply into it, but it sounds like it has something to do with how rails rescues from exceptions in controllers. I know with previous versions of rails/rspec/cucumber, you used to have to manually specify when you want Rails to handle errors and when to not.

E.g., in Cucumber, you can set a tag `@allow-rescue` before a scenario so you can test Rails's internal handling of exception handling: https://github.com/cucumber/cucumber-rails/blob/master/lib/cucumber/rails/action_controller.rb

https://github.com/rails/rails/blob/v3.1.1/actionpack/lib/action_controller/test_case.rb#L510
",agibralter,2012-01-03 15:07:49
508,2011-11-07 04:05:48,"Awesome, using this code made capybara start showing exceptions during acceptance tests with rack-test: https://github.com/cucumber/cucumber-rails/blob/master/lib/cucumber/rails/action_controller.rb

Any reason why capybara doesn't do something like that automatically?
",joevandyk,2012-01-03 15:07:49
508,2011-11-07 04:53:52,"Well it really doesn't have much to do with Capybara at all. It's something that both RSpec and Cucumber deal with, and they make you deal with it manually. The reason it is not automatic is that sometimes you want Rails to spit the error back at you and sometimes you want to see how rails will deal with the error. There's no one-size-fits-all solution to this.

For example, if you put this in your Cucumber env.rb file:

<S_CODE_TOKEN>

and you're testing this controller:

<S_CODE_TOKEN>

you'll find that if your code tests `FooController#some_action`, which raises `ActiveRecord::RecordNotFound`, Cucumber will spit the error back to the screen. Now, let's say you want to actually test the code that happens in `# Some cool logic you want to test`. In order to do this, you'll have to override the `ActionController::Base.allow_rescue = false` setting you have in env.rb by tagging the `Scenario` with `@allow-rescue`.

Of course, you can do things the other way around, and start with `ActionController::Base.allow_rescue = true`...

In the case of RSpec, please refer to: https://www.relishapp.com/rspec/rspec-rails/docs/controller-specs/bypass-rescue
",agibralter,2012-01-03 15:07:49
508,2011-11-07 05:24:55,"I know we went through this in #329... but I'm thinking the only way for Capybara to gracefully handle this is to insert a piece of middleware similar to `Capybara::Server::Identify` like this:

<S_CODE_TOKEN>

And then have the `visit` method check for the error saved by `Capybara.save_error`. But that certainly does not cover the case of when ajax is triggered by JS on a page and generates an exception in the app. Perhaps there's a better place than `visit`? It's hard to say the best way to do this. I mean Capybara could handle the first have -- the error capturing, and then the developer could handle where she might want to access any saved errors. E.g. when using RSpec,

<S_CODE_TOKEN>
",agibralter,2012-01-03 15:07:49
508,2011-11-07 06:24:25,"Ok. So I have a proof of concept here: https://gist.github.com/1344306

Here's the problem though. We run into the same issue with `@allow-rescue`. Sometimes, you _want_ your app to return a 500 error and you want to test how your JS deals with that situation. Ugggg. It seems like this is something that's going to have to be handled in both Capybara and RSpec/Cucumber if it's handled at all ""officially."" I'm probably going to tweak my example to allow for tagged examples to bypass the exception catcher.
",agibralter,2012-01-03 15:07:49
508,2011-11-09 18:42:17,"agibralter that code works nicely for me. thanks, this issue has been driving me crazy.

EDIT: scratch that, it causes capybara to freak out and spawn many instances of firefox which all then hang. :(
",JonnieCache,2012-01-03 15:07:49
508,2012-01-03 13:46:30,"I don't really think this is fixable in Capybara. It's a tough call whether this is desirable behaviour or not. The proposed solutions seem way too brittle and overengineered to me. I would really just like to close this. What do you guys think?
",jnicklas,2012-01-03 15:07:49
508,2012-01-03 13:53:34,"@JonnieCache are you sure that causes firefox to hang? I found that usually happens when my version of `selenium-webdriver` is outdated or is not compatible with my version of FF. Anyway... that hack has worked quite nicely for me for a while.

And, yes @jnicklas -- there doesn't seem to be an elegant way to handle this... Maybe it's worth putting a note in the README/wiki saying that exceptions raised in the application will not be raised while running the test suite and link to a gist like mine or something similar?
",agibralter,2012-01-03 15:07:49
508,2012-01-03 14:02:29,"I agree this should probably be closed, at least as long as there is not a neat solution. In general, I just use `save_and_open_page` or open the URL in my browser when the app raises an exception.

And as @agibralter said: ""Sometimes, you _want_ your app to return a 500 error and you want to test how your JS deals with that situation."" So we'd need to add more logic to allow _some_ error pages to pass through.

So I'd say we close this. If someone comes up with a sensible solution for this, we can revisit the issue.
",joliss,2012-01-03 15:07:49
507,2011-09-26 10:18:17,"I’m using capybara (1.1.1) through cucumber (1.1.0) and rails 3.0.7 with ruby 1.9.2.
My features run fine except when submitting a form with the GET method. When it is the case, it raises an invalid byte sequence in US-ASCII (ArgumentError).
",Flink,2011-09-26 12:04:06
507,2011-09-26 10:58:43,"Sounds more like an issue in your application. Could your provide a full stack trace?
",jnicklas,2011-09-26 12:04:06
507,2011-09-26 11:22:00,"Yes, here it is:

<S_CODE_TOKEN>
",Flink,2011-09-26 12:04:06
507,2011-09-26 12:04:06,"Ok, found the culprit: it is escape_utils https://github.com/brianmario/escape_utils
Sorry for the noise ;)
",Flink,2011-09-26 12:04:06
506,2011-09-26 09:50:18,"All my checks for `have_field` fail.

For example, when I run

<S_CODE_TOKEN>

I get the following error message:

<S_CODE_TOKEN>

The matcher `have_checked_field` works as expected.
",tmaier,2011-12-02 18:50:57
506,2011-11-26 09:22:25,"Are you using `mongoid-rspec` gem? 

I had similar issue and the problem was in `capybara` and `mongoid-rspec` both having `have_field` matcher. I solved it by restricting usage of `Mongoid::Matchers` to model specs using 

<S_CODE_TOKEN>

in rspec config. If that doesn't help you can run rspec with `-b` option to see full backtrace. That can give some idea about what's wrong in your case.
",KL-7,2011-12-02 18:50:57
506,2011-12-02 18:50:55,"Hi Kirill,

you were right.
Thanks for your help.
",tmaier,2011-12-02 18:50:57
506,2012-12-24 12:33:09,"Thanks @KL-7 . I might mention that this line of code should be in `spec/support/mongoid.rb`.
",hosamaly,2011-12-02 18:50:57
506,2013-09-11 15:28:11,"Thanks, saved my day!
",gurix,2011-12-02 18:50:57
506,2013-11-15 01:09:52,"It does´t work for my, then I used the ""page.has_field? notation""

page.has_field?(""field_name"").should == true
",vlaguzman,2011-12-02 18:50:57
505,2011-09-24 18:21:48,"It seemed Capybara lacked a simple way to get an element's parent ( http://stackoverflow.com/questions/4861863/how-to-get-parent-node-in-capybara ) so I've added support for this.
",andyw8,2011-11-15 15:00:51
505,2011-11-15 15:00:51,"Just do `find(:xpath, '..')`. No need to expose these kinds of traversal methods in Capybara.
",jnicklas,2011-11-15 15:00:51
505,2012-03-07 16:20:31,"@jnicklas is there a way to do that but lazy find the body?  I'm trying to get back to the body from inside a within, so that I can check it loaded a popup....
",cj,2011-11-15 15:00:51
505,2012-03-07 16:22:49,"@jnicklas looks like find(:xpath, '//body') works :D
",cj,2011-11-15 15:00:51
505,2012-06-24 23:54:16,"How is this not a useful addition?   Not everyone is comfortable with xpath... I'd prefer to have a jquery like navigation available.  Even more useful would be something like http://api.jquery.com/closest/
",dgm,2011-11-15 15:00:51
505,2012-10-09 14:42:09,"Sorry for dragging an old issue up.

I don't agree with jnicklas. capybaras purpose is to allow us to test against a page, which may include finding an element then traversing to another element to check something. It may be slightly less common than click ""somebutton"" but its still valuable. 
",mikebaldry,2011-11-15 15:00:51
505,2012-10-09 22:12:33,"+1 I would like this feature too, even if it's just syntactic sugar
",dfl,2011-11-15 15:00:51
505,2012-10-09 23:04:18,"I'm not against this feature, though it _is_ just syntactic sugar, so I find it a bit redundant. This pull request though is just completely wrong. So if someone wants this, please send a better pull request.
",jnicklas,2011-11-15 15:00:51
505,2015-04-07 21:05:29,"What does `Capybara::Node::Base#parent` attribute currently do? It seems to be always returning `Capybara::Document` instead of the actual tag's parent.
",janko-m,2011-11-15 15:00:51
505,2015-04-07 21:13:51,"@janko-m Its the context for the find which located the current element.
",twalpole,2011-11-15 15:00:51
505,2015-04-07 21:15:04,"@janko-m `Base#parent` is internally used to get an ancestor using which the current element was located. For example in:

<S_CODE_TOKEN>
",abotalov,2011-11-15 15:00:51
504,2011-09-23 19:05:25,"The env method in Capybara::RackTest::Browser sets the env[""HTTP_REFERER""] value to last_request.url.

In case of a redirect it should be set to last_request.env[""HTTP_REFERER""] instead.

I monkey-patched my own environment with the following, perhaps it is useful for you as well:

<S_CODE_TOKEN>
",robvandijk,2012-01-11 23:36:13
504,2011-09-24 08:56:26,"Hmm, I've never checked how browsers actually behave here, what happens if the redirect is a multiple redirect? If you could write a test case for this and verify the behaviour in Selenium, that would be super!
",jnicklas,2012-01-11 23:36:13
504,2011-09-24 13:37:46,"It seems that most (all?) browsers keep the original referer when redirecting. I assume even in case of multiple redirects this should hold.

I'll provide you a testcase as well. Ok if I just post it here? It is not a lot of code ;-) 
",robvandijk,2012-01-11 23:36:13
504,2012-01-03 13:12:25,"Any progress on this? Post it anywhere, but obviously a pull request is best ;)
",jnicklas,2012-01-11 23:36:13
504,2012-01-05 10:21:45,"Hmmm, sorry for the delay. I never got around writing that test case I promised ;-(  I'll try to do this next week.
",robvandijk,2012-01-11 23:36:13
503,2011-09-21 10:33:51,"We recently updated our stack to capybara 1.x and webdriver 2.5 for a testsuite that runs against a remote server.

We started to get random failures of ""element not found"" in some pages. After adding screenshots of the page for failed scenarios we realized it was on the wrong page.

The page has lot of links, one is called ""Repositories"" and the other is called ""Manage Repositories"". When the scenario failed, it was like it clicked the second, even if the step said

<S_CODE_TOKEN>

So I went and added some debug output:

<S_CODE_TOKEN>

When the scenario succeeds:

<S_CODE_TOKEN>

When the scenario fails:

<S_CODE_TOKEN>

I can't reproduce this with Firefox 6.0.
",dmacvicar,2011-09-21 15:47:15
503,2011-09-21 15:47:14,"Capybara will try to use find the link with the exact text match, failing that it will use the first occurrence, and it won't complain if the match is ambiguous. So you should disambiguate these links, or you should make sure the Repositories link has _exactly_ that text or that it always appears first.
",jnicklas,2011-09-21 15:47:15
503,2011-09-22 06:34:48,"I don't understand. Your explanation does not explain why Capybara is not finding the exact match: the link with the exact text ""Repositories"", but sometimes finding first the non-exact match ""Manage Repositories"".
",dmacvicar,2011-09-21 15:47:15
503,2011-09-22 09:11:00,"Sadly we also reproduce this on Firefox 6.0 now, and the failed testcases went from random(6..25) to random(20..40).

I can't agree this is expected behavior, capybara is returning one link or the other randomly, and this did not happen with capybara 0.x, webdriver 0.x (at least in our testsuite).
",dmacvicar,2011-09-21 15:47:15
503,2011-09-22 10:13:05,"The match probably _isn't_ exact.
",jnicklas,2011-09-21 15:47:15
503,2011-09-22 12:54:53,"Looking at the generated xpaths in Capybara::Node::Finders#first(*args) and adding some output

<S_CODE_TOKEN>

When I run the test once (and passes), I see the following xpath being printed:

<S_CODE_TOKEN>

When I do a for loop in the console and run the test 10 times, the failed test shows more than one xpath:

<S_CODE_TOKEN>

And as it is not printing ""--"", it is returning the last one in the array, which is the one with ""contains()"" instead of ""=="".

How can it randomly generate two different sets of xpath expressions?
",dmacvicar,2011-09-21 15:47:15
503,2011-09-22 13:14:39,"In both cases (failed, passed) first() is called with *args

<S_CODE_TOKEN>

Capybara::Selector.normalize turns it into a selector with two xpaths, basically one for the == version, and another for the contains version. In the ""pass case"" find_in_base finds one for the first case, in the fail case, none. So in the failed case the first match of the xpath expression is returned (in this case, that expression uses contains and it is matching the two links)

So the problem is find_in_base, which is failing randomly for the expression using == and returning no matches (sometimes).
",dmacvicar,2011-09-21 15:47:15
503,2011-09-22 13:48:58,"I also tested with the xpath that fails sometimes on firebug, and it is found in the firebug console:

http://imageshack.us/photo/my-images/689/capybarabug.png/
",dmacvicar,2011-09-21 15:47:15
503,2012-05-22 18:14:57,"Has anything been updated on this? I'm also seeing something similar. I have two links on a page ""DDS"" and ""DS"". ""DDS"" is listed before ""DS"" when I go looking for ""DS"" the ""DDS"" link is inconsistently returned. 
",thecodenomad,2011-09-21 15:47:15
502,2011-09-21 03:40:46,"What would you say to a more dynamic set of matchers for checked/unchecked fields whose names don't require you to know if the field is checked/unchecked beforehand?

So
- has_check_field?
- has_no_check_field?

instead of
- has_checked_field?
- has_no_checked_field?
- has_unchecked_field?
- has_no_unchecked_field?

Then you can test for the existence of a field and **optionally** dynamically specify whether or not it also should be checked or not.

So Instead of doing this:

<S_CODE_TOKEN>

do this:

<S_CODE_TOKEN>

The checked argument would be optional. If omitted, it would not stop the matcher from at least testing the existence of the field whether it be checked or not.

If you like this idea, I'll write it up and test it.
",ordinaryzelig,2012-01-03 13:14:13
502,2012-01-03 13:14:13,"There's already:

<S_CODE_TOKEN>
",jnicklas,2012-01-03 13:14:13
501,2011-09-20 18:16:47,"Generating SVG via JS (such as using Raphael to draw charts) causes Selenium xpath text selectors to raise a WebDriverError.

I have created a minimal failing case here: https://gist.github.com/11681383c6779ad15ce9

Two suggested solutions:
- Rescue this error in `lib/capybara/driver/selenium_driver.rb` and return """"
- Send the problem upstream? (I can do this if you think it's appropriate)
",xaviershay,2012-01-03 13:12:54
501,2011-09-20 18:40:14,"Looks like a Selenium bug to me, so I'd go with solution #2.
",jfirebaugh,2012-01-03 13:12:54
501,2011-10-24 09:57:46,"Yes, agreed, this needs to be fixed in Selenium.
",jnicklas,2012-01-03 13:12:54
500,2011-09-19 21:07:47,"I added support for the Rails 3.1 asset pipeline to `save_and_open_page`.

It's pretty straight forward. Currently, the method rewrites local asset paths to absolute filesystem paths in the rendered HTML. So, I basically just added a check to see if `::Rails` is defined, if the version is 3.1 or greater, and if the asset pipeline is enabled. If so, it loads the asset manifest file to grab the asset fingerprints for each file, and then rewrites the fingerprints into the rendered HTML.

I have not yet extensively tested this, or had a chance to think about what a test case would look like, but it works very well with my app.
",JangoSteve,2011-11-15 15:03:34
500,2011-09-19 21:08:12,"Oh, btw, this relates to #485.
",JangoSteve,2011-11-15 15:03:34
500,2011-09-22 23:09:26,"Works great - thanks very much for this.  Css displays perfectly, some pictures don't display as normal but it's more than adequate for save_and_open_page.
",tracedwax,2011-11-15 15:03:34
500,2011-09-28 15:24:01,"@tracedwax, are you able to figure out why some images aren't displaying as normal? They should all work. Maybe check your manifest.yml file to make sure they're getting included in there, and then make sure the image `src` matches in the generated page. It may be that those images aren't configured properly in the asset pipeline.
",JangoSteve,2011-11-15 15:03:34
500,2011-10-28 12:23:35,"Thanks for this! I get the following error (Ruby 1.8.7, Rails 3.1.1)

<S_CODE_TOKEN>
",jfi,2011-11-15 15:03:34
500,2011-11-01 12:46:02,"JangoSteve, plz replace in lib/capybara/util/save_and_open_page.rb:58 ""Dir.exists?()"" to "".File.directory?()"" for compatibility with ruby 1.8.7
is there an easier way to solve this problem?
with selenium javascript_driver styles work correctly when browsing. fall only when viewing the page. Does it make sense to compile assets only for single using save_and_open_page method?
",dom1nga,2011-11-15 15:03:34
500,2011-11-02 02:43:51,"Hey @dom1nga good  point about 1.8.7, I guess I've been using 1.9.2 for so long I forgot that was a new thing.

I was wondering the same thing when I started working on a fix. Trust me, requiring an asset precompile was not my first choice. 

The issue is that, with the asset pipeline enabled, assets are now part of the app; javascripts, stylesheets, and images are no longer static files that bypass the rails stack, they actually go through the rails process and get interpreted at runtime just like views.

The only way we could get them to render in the `save_and_open_page` template would be to rewrite all asset paths to point to the localhost domain/port spawned by capybara when running the test suite, so that the asset requests will  get properly piped through sprockets allowing the assets to be compiled.

However, that would require the localhost app to still be running _after_ our `save_and_open_page` tmp page has rendered to the browser (since that's when the asset requests would actually start). By this time, our server instance is probably already gone. I'm assuming this is the reason `save_and_open_page` even creates a tmp cached static file in the first place instead of just opening the current host/port URL in a new window (but I may be wrong).

This was easy before, because all assets were just rendered as static files from the public directory anyway, so there was no difference if you loaded them from the dev server path or from a file page. And so `save_and_open_page` simply rewrote relative domain paths to be absolute file paths. This is no longer possible since those static files don't necessarily exist anymore.

The only other option would be to make `save_and_open_page` compile the assets and then cache all of them to the same tmp location as the html page. In fact, that's basically the ""solution"" mentioned in #485, except that it ignored images and javascripts. However, this results in `save_and_open_page` taking a long time to run and creating a ton of tmp files (one for each javascript, stylesheet, and image on the page).

Taking all fo these considerations into account, this was the best solution I could come up with.
",JangoSteve,2011-11-15 15:03:34
500,2011-11-02 02:48:00,"@jfi, if you open `RAILS_ENV=test rails console`, what are the values of:

<S_CODE_TOKEN>

The only time I know of that the latter would be `nil` would be if the former was `false`. But if if `assets.enabled` is false, then that line shouldn't be called. Definitely weird.
",JangoSteve,2011-11-15 15:03:34
500,2011-11-02 02:49:38,"@tracedwax, I've encountered a few times where certain images or stylesheets weren't being rendered properly, and it was because I had forgotten to actually  add those files to the asset pipeline (meaning they weren't being rendered properly in production either, only I hadn't known that because they were fine in dev).
",JangoSteve,2011-11-15 15:03:34
500,2011-11-15 15:03:34,"Sorry to take so long to weigh in on this. I am never going to accept a patch which does anything Rails specific, even if you put it in a conditional. I honestly think this is a lot of overhead, for very little gain. If you desperately need this, temporarily switch to selenium instead. 
",jnicklas,2011-11-15 15:03:34
500,2011-11-15 17:44:55,"@jnicklas, am I correct in the reasoning for why `save_and_open_page` copies the page and changes all of its asset references, rather than just simply opening the page it's currently on as-is?
",JangoSteve,2011-11-15 15:03:34
500,2011-11-16 09:04:12,"Pretty much. Copying all the assets seems like overkill. I think we shouldn't overengineer this, there are better alternatives when this kind of precision is required.
",jnicklas,2011-11-15 15:03:34
500,2011-11-16 17:19:26,"> Copying all the assets seems like overkill.

Agreed. That's why my patch here **does not** copy any assets.

> I think we shouldn't overengineer this, there are better alternatives when this kind of precision is required.

Any suggestions? The problem is that, in Rails 3.1 and later, assets are no longer static files, they are compiled as a part of the asset pipeline. That means either: 

a) They are not precompiled, and thus, rely on the Sprockets middleware running with the rails server.

b) They are compiled, in which case, the filenames are different, and the rewritten paths from `save_and_open_page` will be wrong.

Either way, it doesn't work.

Capybara's solution to the page requiring the server to render was to copy the html over to a tmp directory. I didn't want to use that same solution for the assets that require the server, because that would require copying all the assets over too (and like you said, that would seem overkill).

So, instead, _this patch_ just rewrites all the asset paths to the precompiled asset paths, instead of blindly rewriting the paths to the `/public` directory.

There may be a way we could do this without requiring Rails-specific code, though. I'm going to try something else, and if it works, I'll open a new ticket. In the meantime, everyone who needs to use `save_and_open_page` with Rails 3.1 is still welcome to use my fork.
",JangoSteve,2011-11-15 15:03:34
500,2011-11-16 17:29:16,"@JangoSteve +1
",dom1nga,2011-11-15 15:03:34
500,2011-11-16 17:48:42,"I just don't see this as a big issue, and I disagree that it needs fixing at all. Switch to selenium, use pry and you'll have a debug environment which is 100 times better than save_and_open_page. And even if you use it as is, you can still probably see most of the relevant markup just fine, even if CSS and JS are stripped.
",jnicklas,2011-11-15 15:03:34
500,2011-11-16 18:11:01,"@jnicklas, better to open a page, than every time to think about whether enough seconds set for sleep. Why watch ""cartoon"" of, for example, twenty episodes, if you want to watch only twenty-first? Let's all give up the use of webkit. More cartoons! More selenium!
",dom1nga,2011-11-15 15:03:34
500,2011-11-16 18:11:58,"@jnicklas, that's the point, you _can't_ see most of the relevant markup just fine. Everyone on my team has stated that `save_and_open_page` became useless in Rails 3.1 (and I've heard it from a lot of people outside of my team as well), and it made simple debugging (short of switching to selenium/pry) very difficult. Trust me, I wouldn't be spending my time on it if it wasn't a big issue.
",JangoSteve,2011-11-15 15:03:34
500,2011-11-16 20:06:13,"The fork from @JangoSteve has worked well for me and I will continue to use it if that is the best option.  That being said, I would just as soon not see Capybara be fragmented into multiple branches if @JangoSteve is willing and able to work towards a solution compatible with the vision and constraints of the project.  @jnicklas - Since this does not seem to be a core concern for you and already depends on launchy, are you thinking that save_and_open_page should be pulled out into a separate gem?
",baldwindavid,2011-11-15 15:03:34
500,2011-11-17 01:55:49,"So um, can everyone having problems with this try something? After spending half the day combing the source for sprockets and sprockets-rails, I think I may have found a simpler solution. 

Add this to config/environments/test.rb:

<S_CODE_TOKEN>

Then run:

<S_CODE_TOKEN>

By default `rake assets:precompile` runs in the `production` mode, not `development` as you'd expect, and production usually has digest enabled, so you only get digested filenames when compiled into your public directory. However, if you explicitly run the precompile task in an environment which has `digest=false`, it will actually create two sets of assets, one with the digested filenames, and one with undigested filenames.

And with that, capybara's default path rewriting will match the undigested filenames and things will work.

If you want to get rid of all of these files when you're done debugging, you can run:

<S_CODE_TOKEN>

If you call `save_and_open_page` and notice some CSS, or JS missing, it's probably because those weren't included in your sprockets load paths. Be sure to either `require` them in your `application.[cs|js]`, or add them to `config.assets.precompile` and/or `config.assets.paths`. If this was the problem, it would have become apparent in production when your assets didn't show up there either.

Perhaps we could add something to the readme or something that tells people to run precompile in test mode before using `save_and_open_page` with Rails 3.1.
",JangoSteve,2011-11-15 15:03:34
500,2011-11-30 09:59:01,"Hey @JangoSteve, your last tip (precompiling) did the trick for me, and I think it's the cleanest way to do so! Thanks!
",pietere,2011-11-15 15:03:34
500,2011-11-30 16:08:26,"@pietere, the only problem is that, since it's creating precompiled assets without the digest, your development environment will actually serve those instead of the live ones in your app directory, which can really mess things up when developing. So, in order to use `save_and_open_page`, you must precompile, do your thing, and then always clear the assets before going back to developing.

But I agree, it's the cleanest way to do so (just not the most convenient).
",JangoSteve,2011-11-15 15:03:34
500,2011-11-30 18:34:34,"@JangoSteve, yes I realised that after posting my message here. I will try to find a workaround for this to automate this clean up, and post it here if I did find anything good to share
",pietere,2011-11-15 15:03:34
500,2011-12-01 09:10:39,"@JangoSteve I think I have a quite clean solution
- we tell the test environment to use the precompiled assets, but to use another folder to server the assets from. Add this in the file config/environments/test.rb

<S_CODE_TOKEN>
- we want to automatically precompile assets when we run cucumber, so we add this at the bottom of the hooks.rb file from cucumber:

<S_CODE_TOKEN>

Now, each time that we run cucumber, the assets are precompiled in a folder called public/cucumber_test_assets, and development environment is not affected, so no need to clean up those assets. 
- For completeness, I added this to my .gitignore

<S_CODE_TOKEN>
",pietere,2011-11-15 15:03:34
500,2011-12-03 11:34:21,"This works fine with simple asset directory structure   ( application.css ), but I am working on  a multi-layout app, and I my application.css is not used ... rather I have 2 css assets files referenced  in my layouts :
application_admin.css
application_users.css   

each one requiring different css files ....  it works fine in dev / prod ..
I guess it's a matter of doing a correct recompilation .... ?   %x[bundle exec rake assets:precompile] should be modified ?
",erwin16,2011-11-15 15:03:34
500,2011-12-03 11:37:06,"found it :  adding other files .... config.assets.precompile += ['admin.js', 'admin.css', 'swfObject.js']
",erwin16,2011-11-15 15:03:34
500,2011-12-16 12:21:24,"Combining @pietere solution with https://github.com/dnagir/guard-rails-assets works like a charm :)
",Nerian,2011-11-15 15:03:34
500,2012-06-06 20:45:12,"Why not release a gem named capybara-rails that adds the rails-specific logic, just like many other gems out there? cc @JangoSteve
",maxim,2011-11-15 15:03:34
500,2012-06-06 20:57:45,"@maxim, the biggest factor is that the original solution requires re-writing parts of `#rewrite_css_and_image_references`, since capybara doesn't provide event hooks within the method. This means that an external gem would have to track capybara and merge the method with any changes capybara makes in core, which usually just results in an outdated gem.

But if one of the newer solutions can solve the problem without rewriting the internal methods, then I'd say yes, creating a separate gem would be a good approach.
",JangoSteve,2011-11-15 15:03:34
500,2012-06-06 21:16:49,"@JangoSteve I'm sure @jnicklas wouldn't mind adding an extension point where one is useful. On the other hand, I don't see a problem overriding a method in capybara as long as dependencies are correctly specified. We can just add `gem ""capybara-rails""` to Gemfile, which depends on its compatible version of capybara, and remove `gem ""capybara""` itself. Then hopefully update capybara-rails often enough until @jnicklas has a chance to add a cleaner way to change that stuff, like injecting a proc.

Regarding the feature being Rails-specific — this pull request would be, but a generic extension point would not. Rails is nothing more than a very popular type of Rack app that has some special handling of assets. I see it as a good enough reason to add an extension point to inject ""special handling of assets"". There are rack apps in the wild that depend on it.

Whether or not `save_and_open_page` a best way to debug is a separate conversation. Feature exists, I love using it, many others do. It's quicker for me than to switch to a terminal and ""sense"" my surroundings with pry, or setup selenium.
",maxim,2011-11-15 15:03:34
500,2012-06-06 21:25:51,"@maxim Agreed on all points.

By the way, IIRC, when I originally wrote this, I actually was going to just extend `#rewrite_css_and_image_references` to call e.g. a `#post_rewrite` method which could just be defined to return true in core capybara, and then could be overwritten in a gem or app. The reason I didn't is because, it would have required me to separate out this new functionality from capybara's core functionality, which would then require us to have two separate regexes that loop through all the asset directory entries, which would have been twice as slow.

But maybe that's not a bad tradeoff to gain the extensibility and modularity, especially considering this is a debug function that's not going to be used inside loops or in production apps.
",JangoSteve,2011-11-15 15:03:34
500,2012-07-18 05:45:31,"FWIW, :+1: for `gem ""capybara-rails""`
",sdhull,2011-11-15 15:03:34
500,2012-07-27 06:14:19,"try the capybara-screenshot gem. Works well.
",gaffo,2011-11-15 15:03:34
500,2013-02-09 07:05:02,"Was this ever further developed? I don't see a (working) `capybara-rails` gem, and I too miss this feature. Sure `capybara-screenshot` is nice and all, but I like to inspect my elements, plus, the screenshots only work when using `webkit`, which I only use for my Javascript tests (due to it being slower than basic `Rack::Test`.

Also, unfortunately @JangoSteve 's [solution](https://github.com/jnicklas/capybara/pull/500#issuecomment-2771147) doesn't seem to work for me. I can see the assets being pre-compiled in in the `public/assets` (or `test_assets`) directory. And I can see the reference to them in the compiled html file:

<S_CODE_TOKEN>

But the css simply isn't loaded. Perhaps, I need the full path in there for it to work, because the base-path is probably incorrect when opening the html page with Capybara?

**EDIT**

My huch was correct, the following _does_ work:

<S_CODE_TOKEN>

But I only tested this using the _Chrome inspector_ and editing the path manually. Now I need to find a way to make this change permanent. Although I don't understand why others don't have this issue.
",JeanMertz,2011-11-15 15:03:34
500,2013-02-09 07:20:45,"@JeanMertz I don't believe it has been developed.  I might put in some work on this tonight, however.
",sdhull,2011-11-15 15:03:34
500,2013-02-09 07:22:15,"@sdhull Thank you for your input. As long as the above asset-precompile option works (hint: for me it doesn't, see my above updated post), I guess the need is a bit less relevant. Still, a gem would make it easier for most.
",JeanMertz,2011-11-15 15:03:34
500,2013-02-09 07:25:59,"@JeanMertz `rake assets:precompile` doesn't work for you?  Or when you `save_and_open_page`, it doesn't have CSS & JS?
",sdhull,2011-11-15 15:03:34
500,2013-02-09 07:31:21,"@sdhull precompiling works, but the path to the precompiled assets is ""wrong"". It would not be wrong, _if_ the page was to be opened using a web-server, which root path would be set to `/public`, but Capybara opens the page like this for me:

<S_CODE_TOKEN>

And then the assets are linked like this:

<S_CODE_TOKEN>

Obviously, that isn't going to work, because there is nothing setting the _root path_ to `file://localhost/Users/Jean/Projects/test_app/public`. In my situation, the root path is actually `file://localhost/Users/Jean/Projects/test_app/tmp/capybara/`, so thats why (manually) prepending `../../public` worked for me, because I change the root path to the correct location.

So again, not sure why others have gotten this to work, but I don't see how this would work without a change to the root path? (I am not using the fork in this PR, but it was my understanding that using the asset precompiling solution doesn't require a fork, correct?)
",JeanMertz,2011-11-15 15:03:34
500,2013-02-09 08:24:05,"Ahhh, yes ok that makes sense. Not sure what the recommended solution is at this point. I'm running capybara 1.1.4 which rewrites asset paths to file paths like (in OSX):

<S_CODE_TOKEN>

You must be running a more recent version of Capybara, in which this capability has been removed.  I guess perhaps the recommended solution is to switch to Selenium driver and throw a debugger in your example to pause execution so you can inspect & debug your page in the browser window that pops up during execution.

Also, FWIW, I prefer debugging in Chrome, so we have this in our `spec_helper.rb` file (this defaults selenium to use Chrome, prereq is that you do `brew install chromedriver` first assuming you use Homebrew):

<S_CODE_TOKEN>
",sdhull,2011-11-15 15:03:34
500,2013-02-09 08:31:14,"Ah, right, that makes sense. I was actually debugging by looking at the [Capybara method documentation](http://rubydoc.info/gems/capybara/0.3.9/Capybara/SaveAndOpenPage#rewrite_css_and_image_references-instance_method) but only now do I realize that documentation is for version `0.3.9` (!!) which still had this method in.

One question: I was considering doing something like that, but I feel like I might lose a lot of performance using any other driver than `Rack::Test` for simple non-javascript tests. Is this hunch correct? If so, I might simply overwrite the default Capybara behavior and add back the path rewriting.
",JeanMertz,2011-11-15 15:03:34
500,2013-02-09 08:40:25,"If you choose to embark on that journey of adding back asset rewriting, you should consider going whole-hog and adding [asset server support](https://github.com/nyarly/capybara/commit/6562e0aec8219b817c097abd81ddcd177675dd5e).  Maybe via a `capybara-rails` gem?  :smiley_cat: 

Of course, I'm working on adding it as a new PR, following the guidelines outlined by @jnicklas in #609 (after my brief but furious outrage about the asset situation in `save_and_open_page`).

And if my PR doesn't get merged, then I figured I'd release it as a gem that monkey-patches it in.
",sdhull,2011-11-15 15:03:34
500,2013-02-09 09:04:54,"That seems like a great solution. I'll be sure to chime in if you have anything to go with (just ping me at Github). For now, I'll use a dirty method overwrite to at least get me on the road again.

Finally, about the slower test suite when swapping `Rack::Test` for non-javascript tests, is this something you concur with? It seems your team uses Selenium even for non-javascript tests, this feels like it might slow you down a lot during development.
",JeanMertz,2011-11-15 15:03:34
500,2013-02-09 09:12:02,"Nope, we use `Rack::Test` for non-js specs. Though for now our test suite is small enough that it probably doesn't matter _too_ much. But of course, `save_and_open_page` still loads assets for us (as long as we've precompiled them)  ;)

Also worth noting is that for non-js specs, assets really don't matter that much for us anyway.  If a spec fails, it's generally because something wasn't output on the page (or was output when it wasn't supposed to be), in which case assets don't matter much.

Only final annoyance for us is that we like to grab screenshots using `save_and_open_page` (after setting up some crazy states), but old asset rewriting only worked for like 99% of stuff so some stuff was still off.

We were previously trying to use `capybara-webkit` for js specs, but we're using some js that isn't supported by that driver (not sure what exactly), so these specs only pass with Selenium anyway.
",sdhull,2011-11-15 15:03:34
500,2013-02-09 09:14:35,"Thank you for your input.

Did you check out [jonleighton/poltergeist](https://github.com/jonleighton/poltergeist)? Maybe that would solve your problems, it seems like a nice alternative to `capybara-webkit`, including screenshot support.
",JeanMertz,2011-11-15 15:03:34
500,2013-02-09 09:17:04,"Holy crap, `page.driver.debug` sounds awesome!  I'll have to give this a try.  Thanks for the suggestion  :smile: 
",sdhull,2011-11-15 15:03:34
500,2013-02-09 09:46:06,"For future reference, here's the method I added back from earlier Capybara versions:

<S_CODE_TOKEN>

Simply add it in some file like `features/support/capybara_assets_patch.rb`.

This overwrites the default `save_page` method (I tried using `super`, but couldn't get it to work). Here's the diff:

<S_CODE_TOKEN>
",JeanMertz,2011-11-15 15:03:34
500,2013-02-09 10:50:03,"@JeanMertz Woot! Check me out: #958
",sdhull,2011-11-15 15:03:34
500,2013-05-02 11:50:57,"@JeanMertz You cannot use super, cuz it's not inheritance. But there's another option - alias_method_chain. Something like:

<S_CODE_TOKEN>

Or without active_support:

<S_CODE_TOKEN>
",joxxoxo,2011-11-15 15:03:34
499,2011-09-19 17:25:08,"I have this empty template which I was writting tests for and here is what I got : 

<S_CODE_TOKEN>

The so called template : 

<S_CODE_TOKEN>

And the results : 

<S_CODE_TOKEN>

Maybe I did something wrong because when I dig deeper I see that these has_field? methods return false so there is nothing wrong with this value ... 

I'm quite lost with the understanding of this behaviour. (If this is just a noob related problem, sorry for bothering. I'm learning)
",Shahor,2012-01-03 13:16:35
499,2012-01-03 13:16:35,"Please use the mailing list for questions. Usually it's quite a lot quicker to get a response there. Just fyi, `has_field?` returns a boolean, you need to use this with some kind of assertion if you want it to work in a test. In RSpec that would be `page.should have_field('..')`. But again, use the mailing list!
",jnicklas,2012-01-03 13:16:35
499,2012-01-10 00:18:49,"Oh snap ! 

I'm sorry ! This was a noobie mistake, thank you for taking the time to answer me !
",Shahor,2012-01-03 13:16:35
498,2011-09-18 01:56:43,"I got these warnings when I ran rake... perhaps these may be useful to you?

Pending:
  Capybara::Server should wait specified time for the app to boot
    # this test does not work: https://groups.google.com/d/msg/ruby-capybara/QrSKTbjh5rY/egvcVFYiWZMJ
    # ./spec/server_spec.rb:65
  Capybara::Server should raise an exception if boot timeout is exceeded
    # this test does not work: https://groups.google.com/d/msg/ruby-capybara/QrSKTbjh5rY/egvcVFYiWZMJ
    # ./spec/server_spec.rb:77
  Capybara::Session with selenium driver it should behave like session with javascript support all JS specs#find should allow triggering of custom JS events
    # cannot figure out how to do this with selenium
    # ./lib/capybara/spec/session/javascript.rb:80
  Capybara::Session with selenium driver it should behave like session with javascript support all JS specs#source should return the original, unmodified source of the page
    # cannot figure out how to do this with selenium
    # ./lib/capybara/spec/session/javascript.rb:97

Finished in 151.94 seconds
1595 examples, 0 failures, 4 pending
",SixArm,2012-01-03 13:17:45
498,2012-01-03 13:17:44,"Yes, unfortunately we have some pending specs. Any help in fixing these would obviously be great, but it's not really important, imo.
",jnicklas,2012-01-03 13:17:45
498,2012-01-03 20:37:22,"Hah, I just fixed them all. :-)

And by ""fixed"" I mean ""removed"" (4da5ca03 and c444d336). ;-)
",joliss,2012-01-03 13:17:45
498,2012-01-04 02:15:00,"Thanks Jo, that's great!
",SixArm,2012-01-03 13:17:45
497,2011-09-18 01:35:20,"I just cloned the capybara repo, and got this error when ran bundle install:

<S_CODE_TOKEN>

I do have xpath:

<S_CODE_TOKEN>

Git submodule seems to solve this:

<S_CODE_TOKEN>

I'm curious, why does capybara behave this way instead of requiring a rubygems version of xpath?

Thanks,
Joel
",SixArm,2011-11-15 15:36:28
497,2011-11-15 15:36:28,"This is because XPath and Capybara are kind of developed in tandem. So we need to be able to work with XPath easily, and having it as a submodule is a very convenient way of working on both. 
",jnicklas,2011-11-15 15:36:28
497,2011-11-15 15:36:51,"Also, the README mentions that you need to do this ;)
",jnicklas,2011-11-15 15:36:28
496,2011-09-16 15:44:57,"Let's throw a 't' in there.
",r00k,2011-09-16 19:12:46
495,2011-09-16 02:37:40,"I'm getting this error consistently on ubuntu, and my rails dev environment is set up by a script to use the same rvm environment, and the same database. I really don't see how they could be different, but appearantly they are. 
My environment:
      Rails:  3.1.0
      RVM: 1.7.1
      GEMS:
                Using rake (0.9.2) 
                Using multi_json (1.0.3)  
                Using activesupport (3.1.0) 
Using bcrypt-ruby (3.0.0) 
Using builder (3.0.0) 
Using i18n (0.6.0) 
Using activemodel (3.1.0) 
Using erubis (2.7.0) 
Using rack (1.3.2) 
Using rack-cache (1.0.3) 
Using rack-mount (0.8.3) 
Using rack-test (0.6.1) 
Using hike (1.2.1) 
Using tilt (1.3.3) 
Using sprockets (2.0.0) 
Using actionpack (3.1.0) 
Using mime-types (1.16) 
Using polyglot (0.3.2) 
Using treetop (1.4.10) 
Using mail (2.3.0) 
Using actionmailer (3.1.0) 
Using arel (2.2.1) 
Using tzinfo (0.3.29) 
Using activerecord (3.1.0) 
Using activeresource (3.1.0) 
Using ansi (1.3.0) 
Using bson (1.3.1) 
Using bson_ext (1.3.1) 
Using bundler (1.0.18) 
Using nokogiri (1.5.0) 
Using ffi (1.0.9) 
Using childprocess (0.2.2) 
Using spruz (0.2.13) 
Using json_pure (1.5.4) 
Using rubyzip (0.9.4) 
Using selenium-webdriver (2.5.0) 
Using xpath (0.1.4) 
Using capybara (1.1.1) 
Using coffee-script-source (1.1.2) 
Using execjs (1.2.4) 
Using coffee-script (2.2.0) 
Using rack-ssl (1.3.2) 
Using rdoc (3.9.4) 
Using thor (0.14.6) 
Using railties (3.1.0) 
Using coffee-rails (3.1.0) 
Using diff-lcs (1.1.3) 
Using factory_girl (2.1.0) 
Using factory_girl_rails (1.2.0) 
Using guard (0.6.3) 
Using guard-rspec (0.4.3) 
Using jquery-rails (1.0.14) 
Using mongo (1.3.1) 
Using mongoid (2.2.0) 
Using pg (0.11.0) 
Using rails (3.1.0) 
Using rspec-core (2.6.4) 
Using rspec-expectations (2.6.0) 
Using rspec-mocks (2.6.0) 
Using rspec (2.6.0) 
Using rspec-rails (2.6.1) 
Using sass (3.1.7) 
Using sass-rails (3.1.0) 
Using turn (0.8.2) 
Using uglifier (1.0.3)
",zolzaya,2011-09-16 09:08:56
495,2011-09-16 07:19:18,"Stack trace please!
",jnicklas,2011-09-16 09:08:56
495,2011-09-16 08:34:02,"Here is the my code:
it ""should pop-up a confirm dialog when we click delete"" do
      page.click_link(""Destroy"")
      page.driver.browser.switch_to.alert.accept
      dialog.text.should = ""Are you sure?""
      dialog.dismiss
    end

and stack trace:
.......F

Failures:

  1) Categories on the index page should pop-up a confirm dialog when we click delete
     Failure/Error: page.driver.browser.switch_to.alert.accept
     NoMethodError:
       undefined method `switch_to' for #<Capybara::RackTest::Browser:0xbfdc928>
     # ./spec/requests/categories_spec.rb:62:in`block (3 levels) in <top (required)>'

Finished in 5.36 seconds
8 examples, 1 failure

Failed examples:

rspec ./spec/requests/categories_spec.rb:60 # Categories on the index page should pop-up a confirm dialog when we click delete
",zolzaya,2011-09-16 09:08:56
495,2011-09-16 09:06:06,"You're using an undocumented selenium specific API, which accepts a
dialog which won't be shown anyway in rack-test since it doesn't
execute JavaScript.

/Jonas

On Fri, Sep 16, 2011 at 10:34 AM, Zolzaya Erdenebaatar
reply@reply.github.com
wrote:

> Here is the my code:
> it ""should pop-up a confirm dialog when we click delete"" do
>      page.click_link(""Destroy"")
>      page.driver.browser.switch_to.alert.accept
>      dialog.text.should = ""Are you sure?""
>      dialog.dismiss
>    end
> 
> and stack trace:
> .......F
> 
> Failures:
> 
>  1) Categories on the index page should pop-up a confirm dialog when we click delete
>     Failure/Error: page.driver.browser.switch_to.alert.accept
>     NoMethodError:
>       undefined method `switch_to' for #<Capybara::RackTest::Browser:0xbfdc928>
>     # ./spec/requests/categories_spec.rb:62:in`block (3 levels) in <top (required)>'
> 
> Finished in 5.36 seconds
> 8 examples, 1 failure
> 
> Failed examples:
> 
> rspec ./spec/requests/categories_spec.rb:60 # Categories on the index page should pop-up a confirm dialog when we click delete
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/495#issuecomment-2112897
",jnicklas,2011-09-16 09:08:56
495,2011-09-16 09:08:56,"Ok thank you.
",zolzaya,2011-09-16 09:08:56
494,2011-09-14 12:28:48,"I am using Cucumber, Capybara and Selenium with Spork with Factory Girl creating records that are needed in the background steps. I discovered that the @selenium tag on a test caused my RSpec Factory created records to not be seen by the selenium instance, while (after 2 days of debugging...) I found out that using the @javascript tag causes selenium to see the database.

I have no idea why, but it would be good if the README reflected that e.g. Factory Girl cannot interact with the database used by the @selenium tag-fired selenium instance.

Anyway, now it works, and thank you for a great library. I hope someone else can save this time I spent literally wading through forums ;-)
",houen,2012-01-03 13:41:15
494,2011-09-14 15:23:01,"Actually... it does.
",jnicklas,2012-01-03 13:41:15
494,2011-09-14 15:24:15,"On second thought, that documentation could definitely be improved.
",jnicklas,2012-01-03 13:41:15
493,2011-09-12 17:57:33,"Hey guys,

I wanted to test that if I have several articles I can vote on, and I click on one's vote button, the other ones remain the same.

So I wrote this :

<S_CODE_TOKEN>

But the spec just kept failing with this message :

<S_CODE_TOKEN>

I tried some things and found out that this is working just fine :

<S_CODE_TOKEN>

So apparently the within method doesn't reload the scope content after something happened in it.

I don't know if it is really an issue, but it bothered me for a while as I would have expected the within method to work the first way.

Cheers, and thanks for this awesome lib ;)
Jeremy
",jerefrer,2011-09-13 11:39:01
493,2011-09-12 21:20:05,"which version of Capybara are you using? If you are using < 1.1, try upgrading and see if that fixes it.
",jnicklas,2011-09-13 11:39:01
493,2011-09-12 23:03:34,"I was already using 1.1.0. Tried to update to 1.1.1 but still get the same error.

I also just noticed that I get no error when running the spec through Selenium.
",jerefrer,2011-09-13 11:39:01
493,2011-09-13 06:04:35,"Ah yeah, that's because you're moving to a different page then. Capybara can't handle that in rack-test, since rack-test doesn't have the waiting behaviour of e.g. Selenium. That's why it works under Selenium, but not rack-test. Not sure if this is worth fixing, it'd be kind of a complicated fix, for a rather edge-case scenario. What do you think?
",jnicklas,2011-09-13 11:39:01
493,2011-09-13 11:29:24,"Well after having slept on it, I realize I was so into my ajaxy behavior that I didn't even noticed that without ajax the page would entirely be reloaded ...

This may be because testing with and without AJAX is so close that I did this :

<S_CODE_TOKEN>

So maybe a fix would be convenient is such cases where you want to test that a feature degrade gracefully without JS on.

But on the other hand the easy fix of calling 'within' again may be just fine :)
",jerefrer,2011-09-13 11:39:01
493,2011-09-13 11:39:01,"Hmm, I think I'm going to leave this alone for now. It's too invasive a change for a pretty harmless problem, imho.
",jnicklas,2011-09-13 11:39:01
492,2011-09-11 21:07:31,"The following fails to verify that the content has been updated appropriately via AJAX

<S_CODE_TOKEN>

Adding `sleep` before this line allows the test to pass. For example:

<S_CODE_TOKEN>

Using `capybara` 1.0.0 and `capybara-webkit` 0.6.1
",johnnyicon,2011-09-11 21:28:15
492,2011-09-11 21:28:15,"I'd suggest upgrading to Capybara 1.1.1, since it has much improved support for asynchronicity. Also, this isn't really a bug report. The issue tracker is for verifiable issues only. Please post to the mailing list instead.
",jnicklas,2011-09-11 21:28:15
492,2011-11-18 10:28:38,"Got the same issue.
",geoffroymontel,2011-09-11 21:28:15
491,2011-09-09 09:33:10,"When using Capybara in very long pages, the performance of `fill_in ""Label"", :with => ""Value""` can be quite bad due to the xpath generated by `fillable_field`. We can work around this performance issue by using IDs directly with the find method: `find(""ID"").set(""Value"")`. Using the ID is not ideal but we could reduce specific tests time from 20s to 2s.

That said, I would like to propose a shortcut syntax for `fill_in` and friends. For example:

<S_CODE_TOKEN>

Will always lookup by the ID, generating a shorter xpath. Optionally, we could provide a syntax for forcing only label or name lookup, as you seem fit.

If you guys think this is a good idea, please let me know and I will provide a pull request.
",josevalim,2011-11-15 15:39:54
491,2011-09-09 11:44:48,"Confirm, we had a form with more than 10 fields and a test for submitting this form was taking about 20s. When I changed everything to find('#...').set(...), the test time reduced to 1.4s.
",vinibaggio,2011-11-15 15:39:54
491,2011-11-15 15:39:54,"As @vinibaggio mentioned, you should just be able to do `find('#foo').set(...)`, or even `find(:foo).set(...)`. The performance issue is interesting. Never realized that these methods have such a performance impact. I think the XPath queries we are generating aren't super efficient, so maybe that's another way of approaching the problem.
",jnicklas,2011-11-15 15:39:54
491,2011-11-15 18:41:37,"Yes, @vinibaggio works with us, I was aware of the solution. ;) Unfortunately writing find().set all the time is not as readable, thus the feature proposal.
",josevalim,2011-11-15 15:39:54
491,2011-11-16 08:58:53,"Hmm, I've previously proposed to make symbols match only on ids when using `fill_in`, as 

<S_CODE_TOKEN>

But people seemed to hate the idea.
",jnicklas,2011-11-15 15:39:54
491,2011-11-16 09:22:42,"I am honestly fine with the symbols approach. It is backward incompatible but it could be handled in two stages: one deprecating symbols as args, another adding the feature.

I think people in general don't like strings and symbols with different behaviors probably because of older versions of Rails, but Rails 3 is doing it, as in the router and callbacks API. So maybe people would be more prone to accept it now when more APIs are relying on it? And if you use performance as one of the reasons, they will certainly _love_ it. ;)
",josevalim,2011-11-15 15:39:54
490,2011-09-09 02:42:37,"This introduces a debug mode that can be enabled either via configuration or Cucumber tag. Right now debug mode only does one thing: automatically call save_and_open_page if a finder fails or an Rspec matcher fails. I want to get some feedback on this before I add anything else.

Here are a couple other debug mode features I'd like to add, based on my own experiences fumbling with failing integration tests:
- Fail or log a warning message if a finder matches more than one element (ambiguous selector)
- Log each action, finder, and wait (may bring some timing issues to light; addresses #377)
",adamlogic,2011-11-15 15:05:47
490,2011-09-09 13:36:39,"I really like the idea of a debug mode, especially, the second point you brought up, logging any action finder and waiting. That being said, I'm not sure about this patch. I don't really use save_and_open_page a lot anymore, I prefer to just halt the execution, usually via `binding.pry` and poke around, especially in capy-webkit and selenium, this gives much more understandable output.
",jnicklas,2011-11-15 15:05:47
490,2011-11-15 15:05:47,"This really doesn't do anything compelling atm. It just adds a debug mode which does nothing. I still like the idea, and if you can work it to something more useful, we can discuss it further, but I'm closing this for now.
",jnicklas,2011-11-15 15:05:47
490,2011-11-26 08:00:22,"@jnicklas, can you be a little bit more in details on how you avoid using `save_and_open_page` and halt the execution for debugging?
",gmile,2011-11-15 15:05:47
490,2011-11-28 07:58:40,"Require [pry](https://github.com/pry/pry), add this to your code:

<S_CODE_TOKEN>

Boom, execution halted, instant debug environment.
",jnicklas,2011-11-15 15:05:47
489,2011-09-08 16:11:35,"Using Capybara 1.0.1 and Nokogiri 1.5.0 with Ruby EE 1.8.7 2011.03 on Mac OS X 10.6.8:

I'm using Capybara to check an RSS feed. So `response.body` is something like

<S_CODE_TOKEN>

(other elements omitted for brevity).

And yet:

<S_CODE_TOKEN>

Same results with `have_xpath`. What gives?
",marnen,2011-11-15 17:01:53
489,2011-11-15 17:01:53,"This is because Capybara uses an HTML parser, and since HTML is case insensitive,HTML parsers will usually simply downcase all tag names for simplicities sake. You should really be using an XML parser to parse XML.
",jnicklas,2011-11-15 17:01:53
489,2011-11-15 18:28:07,"Ah, quite right. Don't know why I didn't think of that.
",marnen,2011-11-15 17:01:53
489,2011-11-15 18:28:40,"...except that XHTML is case-sensitive, because it's XML.
",marnen,2011-11-15 17:01:53
489,2011-11-16 09:01:10,"The HTML parsers don't care. Since most XHTML is malformed, they'll parse it with an HTML parser anyway.
",jnicklas,2011-11-15 17:01:53
488,2011-09-08 14:47:38,"Moved session cleanup to before the test so that i still have browser state when debuging a faild test, (I reuse the Selenuium/Firefox instance by starting it in the prefork part of spork)

As i can't think of anything negative of doing the cleanup before the test i thought maybe you could accept this small change.
",bjornblomqvist,2011-11-15 15:15:38
487,2011-09-06 15:16:09,"I have been trying to make capybara use the new chromedriver for selenium but i dont know where selenium is expecting the binary to be. I tried to pass down the DesiredCapabilities to set the binary path but i havent found a way, it would be helpful if it was posible to pass this option down to selenium.
",rbritom,2011-10-17 14:17:06
487,2011-10-17 14:17:04,"Ok the new chrome server listens to the webdriver on localhost no need to pass any data to it but the binary should be executed before running the test.
",rbritom,2011-10-17 14:17:06
486,2011-09-06 09:58:04,"I had some urls which were using Japanese characters as query params that were failing because they were passed without encoding to URI.parse. Most ""western"" urls will have no change, but this may help people who use foreign characters in their urls..
",minikomi,2011-09-07 03:25:43
486,2011-09-06 10:18:45,"One consequence is the current_url which is passed back to your test will also be escaped.. 

Unfortunately this does not work with unescaped redirects ... follow_redirect! uses the raw, unescaped uri

So, perhaps the correct action is not to escape within the test, but to redirect to an escaped URI.. 

I welcome your comments...
",minikomi,2011-09-07 03:25:43
486,2011-09-06 10:53:41,"This needs tests ;)
",jnicklas,2011-09-07 03:25:43
486,2011-09-06 11:58:52,"Indeed. I will endeavor to add them tomorrow morning. Thanks.
",minikomi,2011-09-07 03:25:43
486,2011-09-07 03:17:37,"Unfortunately, this breaks some other tests - those which use # as an anchor as it encodes it to %23...

Sorry for the messy commit ..
",minikomi,2011-09-07 03:25:43
485,2011-09-05 17:14:21,"I worked around it by including the following gist in an initializer, so it only triggers in the cucumber or test environments. 
https://gist.github.com/1144277

Is there an easier or more standard way to get the asset pipeline css to show up?

I have Launchy 2.0.5.

Thanks!
",tracedwax,2012-07-10 13:41:41
485,2011-09-05 20:22:46,"I believe there is an issue with javascript as well.
",awt,2012-07-10 13:41:41
485,2011-09-19 21:08:35,"I couldn't get the workaround linked to above to work for me. Also, taking a look at the code in that gist, I didn't like the way it worked; it was copying all CSS assets to the capybara tmp directory, and it wasn't doing anything for javascripts or images.

So, I created a patch that adds full asset pipeline support (I think), see #500.
",JangoSteve,2012-07-10 13:41:41
485,2011-11-01 12:55:35,"it makes me cry
",dom1nga,2012-07-10 13:41:41
485,2011-11-01 12:57:50,"It's really problem. I can't debug tests in my project.
",IgorDobryn,2012-07-10 13:41:41
485,2011-11-01 12:58:37,"+1
",katsgeorgeek,2012-07-10 13:41:41
485,2011-11-01 13:00:31,"Fix it please...
",ValeriiVasin,2012-07-10 13:41:41
485,2011-11-01 13:01:51,"+1. It's really needed!
",oleksiilevzhynskyi,2012-07-10 13:41:41
485,2011-11-01 13:19:10,"I'm not the maintainer, but ... If your entire team is needing this fixed, why don't you guys get one of you hacking on the source and see if you can come up with a fix? Even if it's not polished, sending a pull request as a discussion starter might be the best way to move this forward (as Jonas tends to be quite a busy guy).
",joliss,2012-07-10 13:41:41
485,2011-11-01 15:45:58,"I agree with joliss.

Also, I wonder if it's ""really needed""? To my mind it's a quick visual debugging tool; we're testing dom elements not how they are decorated. E.g. ""whoops, forgot to log in"". Getting the right styling in the dumped html file seems like a luxury.
",nruth,2012-07-10 13:41:41
485,2011-11-01 16:16:05,"It's absolutely needed - often tests fail and you need to see at a glance
why they're failing.  Much easier to see, debug, and fix it when looking at
it with the proper styling.

On Tue, Nov 1, 2011 at 11:45 AM, Nicholas Rutherford <
reply@reply.github.com>wrote:

> I agree with joliss.
> 
> Also, I wonder if it's ""really needed""? To my mind it's a quick visual
> debugging tool; we're testing dom elements not how they are decorated. E.g.
> ""whoops, forgot to log in"". Getting the right styling in the dumped html
> file seems like a luxury.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/485#issuecomment-2591899
",tracedwax,2012-07-10 13:41:41
485,2011-11-01 16:19:50,"While I agree that it's easier I don't agree that it's _needed_, given that this feature hasn't worked for a far greater period of time than it has. The main benefit is being able to see the page, styled or not, and fire up the browser's dom inspector.

Still, as mentioned, I'm sure it'd be a welcome patch.
",nruth,2012-07-10 13:41:41
485,2011-11-02 02:13:16,"@joliss, I have a pull request already submitted, see #500.

@nruth, I think that it is needed. Capybara comes into play when we're testing content rendered with our views, and at least half the time (for me anyway), it's  with js turned on. If I have an action that hides  content, and then I have a test that says `page.should have_no_content 'blah'`, and that test is failing, I'm going to put `save_and_open_page` right before it and see if the content really isn't there, or if maybe it's duplicated elsewhere on the page, or if maybe I used a lowercase instead of uppercase in the test, or whatever.

If my javascript and stylesheets (and images) don't work, then the page often isn't anything near what's actually  seen in the app. In other words, `save_and_open_page` is useless for Rails 3.1 apps using the asset pipeline, which I'm guessing will become more and more relavent as a sizable portion of capybara's users migrate in that direction.
",JangoSteve,2012-07-10 13:41:41
485,2012-01-12 12:04:52,"Related: #609
",joliss,2012-07-10 13:41:41
485,2012-02-25 21:44:36,"+1 on JangoSteve's comment ""save_and_open_page is useless for Rails 3.1 apps using the asset pipeline, which I'm guessing will become more and more relavent as a sizable portion of capybara's users migrate in that direction""

I just made the jump from 3.0 to 3.2 and ran into same issue.
",kkelly18,2012-07-10 13:41:41
485,2012-03-28 17:39:19,"+1
",ashrocket,2012-07-10 13:41:41
485,2012-07-10 13:41:41,"As I explained on #609, the asset rewriting has got to go. See my comment there for further explanation why I am closing this.
",jnicklas,2012-07-10 13:41:41
485,2015-03-12 22:11:49,"I just wanted to say, that if you can't/don't want to specify `Capybara.asset_host = ""http://localhost:3000""`from #958 then you can always have a bookmarklet in your browser's bookmark bar with something like

<S_CODE_TOKEN>

It's a bit hacky, but you can use it any rails app.
",daveharris,2012-07-10 13:41:41
484,2011-09-04 11:38:22,"When testing has_content against that which has been transformed using css 'text-transform' property, the error message displays the transformed text, but the check is made against the original text.

Seems that the test and the error message are using different strings.

For exmaple:

<S_CODE_TOKEN>

but this test passes:

<S_CODE_TOKEN>

Using 1.0.1 and cucumber 1.0.2
",dandehavilland,2012-01-03 13:25:43
484,2012-01-03 13:25:43,"This should now be fixed by the `has_text?` matcher which uses the same method for both. `has_content?` is now simply an alias for `has_text?`
",jnicklas,2012-01-03 13:25:43
484,2012-01-27 15:01:49,"Hi Jonas,

This still occurs on capybara 1.1.2
",suweller,2012-01-03 13:25:43
484,2012-01-27 15:40:21,"@suweller: yes it does, this change is only on master.
",jnicklas,2012-01-03 13:25:43
484,2012-01-31 15:03:22,"cool, i needed this, thanks.
",elgalu,2012-01-03 13:25:43
483,2011-09-04 10:22:28,"I have just set up Capybara with RSpec in a new Rails 3.1 app and added a simple test to spec/acceptance.

But unfortunately I get the error:

<S_CODE_TOKEN>

If I rename `spec/acceptance` to `spec/requests` or manually add `:type => :request`, then it works as expected.

According to reademe:

> A good place to put these specs is spec/requests, as rspec-rails will automatically tag them with :type => :request. (In fact, spec/integration and spec/acceptance will work just as well.)

So either README or the automatic tagging of acceptance directory should be fixed.
",dnagir,2011-12-14 20:11:15
483,2011-09-22 20:54:39,"+1
",rafamvc,2011-12-14 20:11:15
483,2011-09-22 21:00:44,"agreed, automatic tagging of acceptance would be nice, as well as ability to configure to which directory this is automatically applied to if you want something besides acceptance or requests
",zwickilton,2011-12-14 20:11:15
483,2011-12-04 21:32:16,"+1 
- the same thing with integration directory for me, where evens specifying :type => :request would not help
",gorn,2011-12-14 20:11:15
483,2011-12-04 21:41:37,"@gorn: Weird. Perhaps you are missing something? Check the README again, or take a look at http://opinionatedprogrammer.com/2011/02/capybara-and-selenium-with-rspec-and-rails-3/ .

@ everyone else: This _should_ be working. I have it working in a Rails 3.1 app, and grepping rspec-rails (which sets the :request type) for 'acceptance' yields:

<S_CODE_TOKEN>

If anyone wants to dig, feel free. :-)
",joliss,2011-12-14 20:11:15
483,2011-12-14 15:16:56,"It works now. For future reference: I did fresh install following the http://opinionatedprogrammer.com/2011/02/capybara-and-selenium-with-rspec-and-rails-3/ tutorial. Originally I have only followed the README.rdoc. Unfortunately I am unable to track down the step which made broke it. I think it is workt mentioning the tutorial in README.rdoc as it nicely sums up everything needed for capybara on rails as opposed to README.doc which is more general.
",gorn,2011-12-14 20:11:15
483,2011-12-14 15:55:39,"I agree with this issue. However if you use the acceptance testing DSL (""feature"" instead of ""describe""), it works fine. You don't even have to require any capybara files in the spec_helper, it seems that they are required automatically.
",jarijokinen,2011-12-14 20:11:15
483,2011-12-14 16:24:06,"@joliss: I don't see ""acceptance"" there (line 30):
https://github.com/rspec/rspec-rails/blob/master/lib/rspec/rails/example.rb

Or am I missing something?
",jarijokinen,2011-12-14 20:11:15
483,2011-12-14 20:12:14,"I feel like an idiot right now. I had a local commit adding ""acceptance"" in my rspec-rails clone, hence my grep result -- you guys are completely right, it doesn't actually recognize ""acceptance"" for the directory name. I fixed the README, and my blog post as well.

I'm sorry my thinko in the README caused such trouble and confusion for you guys! I'll be more careful next time I edit. Thanks everyone for the report and the insistence. :-)
",joliss,2011-12-14 20:11:15
483,2011-12-16 02:04:47,"@joliss Sorry to hijack this but I wonder if that section needs to be rewritten, again. I think that's part of the problem here. I know I rewrote it a while back, but it could be abbreviated still. This is how I imagine people reading it currently:

> You can make an example group and tag it :type => :request. Oh by the way, :type => :acceptance works too. These are RSpec versions of Rails integration tests Capybara request specs blah blah. So actually scratch what I just said about :type => :request, stick your tests in spec/requests. Or spec/integration. See, easy!!

I mean I get why all that is there, because we're assuming that people aren't using Rails, and then we say ""oh but if you do use Rails, then you can do this instead"". Maybe it would be a good idea to move the Rails stuff down to the Rails section?
",mcmire,2011-12-14 20:11:15
483,2011-12-16 03:56:04,"My confusion was for the same reason from the other point of view - I use RoR and I somewhat did not pay attention that the README is NOT only for Rails so I did not even seeked for RoR section ;-) ... well this is called languagecetrism ;-) ... however maybe the RoR should be separated to its own section maybe even repeating some general info. 

Thanks for great code BTW.
",gorn,2011-12-14 20:11:15
483,2011-12-21 00:14:48,"@mcmire wrote:

> @joliss Sorry to hijack this but I wonder if that section needs to be rewritten, again.

Right. I made a pull request at #577. Do you think that's better?
",joliss,2011-12-14 20:11:15
483,2011-12-21 00:29:38,"@gorn wrote:

> I use RoR and I somewhat did not pay attention that the README is NOT only for Rails so I did not even seeked for RoR section ;-)

Actually, I think a lot of people get tripped up by this and forget to
include 'capybara/rails'.

@jnicklas, back when you added rails.rb, was there something that
stopped you from autodetecting Rails (like `defined? Rails.version`)?

I'm thinking that we could require capybara/rails.rb at load-time for
Capybara, and wrap it in an `if defined? Rails.version` block.

One thing we'd have to deal with is deferring these lines in rails.rb
until the Rails app has been loaded, or Rails.root won't be defined:

<S_CODE_TOKEN>
",joliss,2011-12-14 20:11:15
483,2011-12-21 08:07:54,"The reason we don't autodetet Rails is because `if defined?(Foo)` is generally considered bad practice. Yehuda has written a couple of blog posts about this, and I agree with him. I don't think it's too much to ask of people to read through the README for a new project.
",jnicklas,2011-12-14 20:11:15
483,2011-12-21 16:12:19,"> The reason we don't autodetet Rails is because if defined?(Foo) is generally considered bad practice. 

Well, now that you put it that way, yes, it seems like a really bad idea. :-)
",joliss,2011-12-14 20:11:15
483,2011-12-22 07:51:43,"> Right. I made a pull request at #577. Do you think that's better?

Yeah, much better :)
",mcmire,2011-12-14 20:11:15
482,2011-09-03 18:01:57,"This section of the README is no longer valid. The following lines should be functionally equivalent, since both will end up calling `has_no_xpath?`.

<S_CODE_TOKEN>
",adamlogic,2011-09-09 13:37:21
482,2011-09-04 18:18:14,"Well, it's only incorrect if people are using the RSpec matcher, perhaps this should be reworded, rather than yanked entirely.
",jnicklas,2011-09-09 13:37:21
482,2011-09-09 02:08:27,"Good point. Is this better?
",adamlogic,2011-09-09 13:37:21
482,2011-09-09 13:37:31,"Indeed. thank you!
",jnicklas,2011-09-09 13:37:21
481,2011-09-03 17:52:19,"This is a refactor that centralizes all calls to XPath and reduces duplication between node actions, matchers, and finders. It also exposes more finder power to the end user. For example, the following was previously not possible without knowledge of the XPath library:

<S_CODE_TOKEN>

More than anything, though, I think centralizing XPath logic and failure messages will make it easier to introduce more descriptive and helpful error messages, which I hope to work on if this pull request is accepted.
",adamlogic,2012-01-02 12:07:43
481,2011-09-03 18:22:25,"I'm starting to dig into failure_messages now, specifically understanding the difference between how they are treated in HaveSelector versus HaveMatcher. It appears the direction I'm moving in is a bit at odds with 70c4f196, but I don't really understand the intent of that commit. Seems to me if everything is a selector, there is no need for two matcher classes, and the selector can be responsible for providing a meaningful failure_message.

@jnicklas - Can you help me understand the intent of that commit so I don't stray too far in a direction you've already chosen to avoid?
",adamlogic,2012-01-02 12:07:43
481,2011-09-04 18:14:58,"Open source is so awesome! I've been meaning to make this change for a _really_ long time, but never had the patience to actually do it. One little nitpick is that maybe if we expose these selectors publically, we should have some tests for them?

As for 70c4f196, I'm not 100% sure anymore, but it was something along the lines of there being a mismatch between the options that the different matchers take, and what would be possible to add through selectors. For example, the has_select? matcher takes an option :selected, which is supposed to make sure the correct option is selected, this option isn't available to selectors, so has_select? with its current API can't be implemented as a pure selector. You've solved this quite elegantly by passing through the options to the selector. I think that shouldn't break the API, right? since blocks can be called with the wrong arity of arguments without an error being raised?
",jnicklas,2012-01-02 12:07:43
481,2011-09-05 16:12:09,"Argh! Speaking of tests, it looks like I didn't run the full suite before pushing. I've got failures in the has_select_spec on Selenium. I'll take a look at those.

I totally agree that the new selectors should be tested, but I was curious to get your input on how to go about it. Right now they are all tested indirectly through their associated finder or matcher. For example, has_select_spec covers a lot of the territory I'd like to cover in the specs for the :select selector. I'd hate to essentially duplicate all of these specs. What I'd like to do is have the selectors be heavily tested, and the finders and matcher (which are all one-liners now) be tested lightly with one or two happy-path specs. Any thoughts on this?
",adamlogic,2012-01-02 12:07:43
481,2011-09-05 16:43:55,"Still trying to fix the has_select_spec on Selenium. I have relatively little experience with raw Xpath or Selenium, but it appears to me that Selenium doesn't like the generated Xpath when it factors in the :selected option. @jnicklas does this sound like anything you've encountered before?

Here is a snippet of my debugger session that shows what I'm seeing:

<S_CODE_TOKEN>
",adamlogic,2012-01-02 12:07:43
481,2011-09-05 17:01:07,"It may be that while the xpath gem actually supports a selected option, we don't want to use it, since dynamic content changes could not be supported. I seem to remember something along those lines. You want to make sure that the :selected option is sent through to find, and not to the selector, IIRC.
",jnicklas,2012-01-02 12:07:43
481,2011-09-05 21:32:45,"Jonas is right on, see 9d6aebdea890216fe37236b78844838d7eaeccd1. The distinction for options passed to find and options passed to the XPath selector is also important for `has_field?`, `has_checked_field?`, and `has_unchecked_field?` (and their inverses).
",jfirebaugh,2012-01-02 12:07:43
481,2011-09-06 01:04:36,"@jfirebaugh I'd love to buy you a beer for that detailed commit message. Makes total sense now. I'm going to see about moving that logic into the selectors, because right now it feels a bit scattered to me. I'll push what I come up with to see what you guys think.
",adamlogic,2012-01-02 12:07:43
481,2011-09-06 03:10:20,"As you can see from these two commits, I'm torn between where to put the property filter logic. It felt wrong in Selector so I moved it to Finders. Unfortunately, moving it out of Selector makes those property options unavailable for a detailed failure_message (which was my ultimate goal of this refactor). I think I'd still like to find a way to keep it in Selector, but I wasn't happy with my implementation. I pushed both commits up for the sake of discussion.
",adamlogic,2012-01-02 12:07:43
481,2011-09-06 18:50:30,"The first commit feels like the right approach to me. Post XPath-evaluation filtering seems like a natural extension of the duties of a selector, and it would be great to have more detailed failure messages (I'd love ""expected select 'foo' to have the 'bar' option selected, but 'baz' was selected instead"" for example).

So I'd say let's work on refactoring from the first of those two commits. And my first thought there is that selectors should have instance-specific filtering capabilities. E.g. only the `:select` selector needs to have the `has_selected_options?` behavior, and only the checkbox and radio button need the `:checked`/`:unchecked` behavior.
",jfirebaugh,2012-01-02 12:07:43
481,2011-09-06 21:25:02,"@jfirebaugh: a while ago, I started sketching on a DSL to allow options for selectors. The problem was that the thing quickly became a grotesque monster, with dozens of different methods to construct the selectors. This seemed like overengineering to me. Not sure it makes sense to move this stuff to selectors if it isn't configurable per selector _somehow_ though.
",jnicklas,2012-01-02 12:07:43
481,2011-09-09 01:58:26,"@jnicklas @jfirebaugh Curious to get your thoughts on [this approach](https://github.com/adamlogic/capybara/compare/custom_selectors...new_selector_api). I removed the add_selector DSL in favor of each selector being a Ruby class. In my mind this is a more straightforward approach and also more flexible. To be honest I never really understood the purpose of having a DSL for creating new selectors.

I realize this completely breaks the selector API and would have to wait for Capybara 2, if it goes anywhere at all. It's also a rough spike -- no tests, all in one file, etc. I really just wanted to throw it out there to see what you guys think.
",adamlogic,2012-01-02 12:07:43
481,2011-09-09 17:47:00,"I like it. It's pretty close to what I had in mind, though I would use `Selector` itself for the base class instead of a separate `Base` class. I don't think it requires an API change, as we could continue to support something like:

<S_CODE_TOKEN>
",jfirebaugh,2012-01-02 12:07:43
481,2011-09-10 12:48:08,"I'm not sure about this. This is quite a big change, and I don't really see the benefit so far. Sure, it's nice to get the filters in a selector, but it seems to me that there must be a less invasive way of doing this. Then maybe later we can consider allowing classes as selectors. This diff would be getting kind of out of hand.
",jnicklas,2012-01-02 12:07:43
481,2012-01-02 12:07:43,"It's been a while but I finally got around to working on this a bit. I added the ability to define filters on custom selectors, that way we can define stuff like `href` and `options` as filters, and we don't need to send any options to XPath anywhere. I've removed all of those options in the XPath library as well. This change allowed me to remove `split_options` entirely, which is awesome. There's still some refactoring to be done, as there is more stuff we can make into filters now, such as `selected`, but we can do that later.

Thank you so much for your hard work on this Adam, this is a hugely important and long overdue change!
",jnicklas,2012-01-02 12:07:43
481,2012-01-02 12:08:20,"Oh yeah, I merged it, in case that wasn't clear ;)
",jnicklas,2012-01-02 12:07:43
481,2012-01-02 20:15:02,"@jnicklas Excellent! I'd been procrastinating writing specs for all of this because I wasn't quite sure how to go about it. I'm glad to see you merged it in, and I like where you've gone with the filters.
",adamlogic,2012-01-02 12:07:43
480,2011-09-03 17:41:05,"Existing specs are only testing the use of `#within` with actions. This additional spec just shows that it also works with matchers.
",adamlogic,2011-09-04 18:17:02
479,2011-08-31 08:41:14,"We recently upgraded capybara from 0.4.1 to 1.0, and selenium-webdriver from 0.0.28 to 2.5

We have a table with two columns and a header. One of the column has checkboxes and the checkbox in the header means select ""all"" elements.

<S_CODE_TOKEN>

We have a step definition to check one of the elements in those tables:

<S_CODE_TOKEN>

Since the upgrade this broke, and the header checkbox is selected (which with javascript causes all elements to be selected). If I change the find '//' to './/' it starts to work.

So, if I change

<S_CODE_TOKEN>

To

<S_CODE_TOKEN>

It works. While the selector makes sense, the whole point of within was to scope to the given selector and make everything relative to it.
",dmacvicar,2011-08-31 09:30:08
479,2011-08-31 09:30:08,"this worked identically in 0.4.1. It might actually have been the selenium upgrade, since selenium-webdriver used to have a bug where it returned incorrect results for the // case. There actually is a section about this in the Capybara README.
",jnicklas,2011-08-31 09:30:08
479,2011-08-31 09:30:40,"In other words. What you're seeing is the desired and correct behaviour according to the XPath spec. This is not a bug.
",jnicklas,2011-08-31 09:30:08
478,2011-08-30 09:22:26,"The :respect_data_method should be false by default in Capy 2.0, see #184.
",jnicklas,2012-07-12 12:39:01
478,2013-04-04 04:38:39,"Why we had those two changes after the default being set to false? I would never expect a non-js driver to respect any js convention.
",filipegiusti,2012-07-12 12:39:01
478,2013-04-04 06:52:56,"Pragmatism essentially. People just expect this to work for historical reasons. Pretty much everyone ended up re-activating it anyway. I kinda dislike it too, but that's just what we ended up with.
",jnicklas,2012-07-12 12:39:01
478,2013-04-04 19:25:27,"Can you (or I) add a small note in the Gotchas section or right after the phrase ""It is written in pure Ruby and does not have any support for executing JavaScript.""?
",filipegiusti,2012-07-12 12:39:01
477,2011-08-29 15:13:11,"Hi there,

I just noticed that drag_to doesn't seem to work well with a scrolled screen in firefox. I.e I have  a parent element in firefox which is  almost as high as the screen, and the screen is slightly scrolled to show all of it.

when I now do a drag_to operatoon of one child of that div to another child, it fails. Looking at the results in firefox (by replicating the step many times) it looks like the offsets are calculated wrong, that is they are calculated in relation to the top of the page, not in relation to the window borders. Thus the drag_to destination is way below where it should be and thus the drag_to fails to achieve the result it should.

Does that make sense?
",dwt,2011-09-01 17:35:17
477,2011-09-01 17:35:16,"[Cc @jarib; see GitHub for the original report.]

It does make sense, though what you describe seems to be a problem with Selenium, not Capybara. Capybara just forwards the call:

<S_CODE_TOKEN>

I'll close this issue, but perhaps either of you want to bump this problem upstream to Selenium (if it's not a known bug already).
",joliss,2011-09-01 17:35:17
477,2011-09-01 19:22:21,"@dwt: If would be helpful if you could open a bug in the [Selenium tracker](http://code.google.com/p/selenium/issues/entry) and include a reduced example of HTML/JS/CSS that demonstrates this issue. It'll get fixed a lot quicker if we have [a simple way](https://gist.github.com/1024843) to reproduce the problem.
",jarib,2011-09-01 17:35:17
476,2011-08-29 15:06:02,"I saw a lot of tests failing in the akephalos' test suit I tracked down the issue to `lib/capybara/spec/session`

<S_CODE_TOKEN>

It was failing to load the string properly:

<S_CODE_TOKEN>

It seems that the problem was the leading whitespace, as it was fixed adding `lstrip`.

<S_CODE_TOKEN>
",Nerian,2011-11-15 15:09:54
476,2011-09-01 18:00:09,"Jonas, I'm guessing that the reason why this is not a problem when you run `rake` on the Capybara sources is that Psych happens to not be loaded. The YAML module has some awful implicit behavior where it switches the engine depending on load order. See e.g.

http://opinionated-programmer.com/2011/04/parsing-yaml-1-1-with-ruby/
http://pivotallabs.com/users/mkocher/blog/articles/1692-yaml-psych-and-ruby-1-9-2-p180-here-there-be-dragons
",joliss,2011-11-15 15:09:54
476,2011-09-01 18:00:50,"In other words, I think this might be caused by an environment where Psych is loaded early.
",joliss,2011-11-15 15:09:54
476,2011-11-15 15:09:54,"Just merged this, not sure why that's not showing up here.
",jnicklas,2011-11-15 15:09:54
475,2011-08-29 12:46:12,"When I use :before { content: ""some text"" } to add text to the page capybara doesn't see it when using the selenium driver.

Thus I get the situation where the user sees a string, but I can't test for it with capybara. :-/

I tested this by asking for page.text, and indeed it didn't include the stuff inserted with content()
",dwt,2011-08-29 14:49:02
475,2011-08-29 14:49:02,"Ask the Selenium guys, this is not really a problem in Capybara.
",jnicklas,2011-08-29 14:49:02
475,2011-08-31 07:14:14,"Filed here: http://code.google.com/p/selenium/issues/detail?id=2379
",dwt,2011-08-29 14:49:02
474,2011-08-27 13:40:11,"I have an application that at some point it redirects to a different host, so you do something like:

<S_CODE_TOKEN>

and everything is ok. On that second page now there's a form that has an action of, let's say, ""/blah"", so I trigger it:

<S_CODE_TOKEN>

and one would expect a hit to ""http://second.example.com/blah"" but Capybara instead hits ""http://main.example.com/blah"".
",pupeno,2011-08-30 06:52:34
474,2011-08-27 14:41:26,"You may want to test this on master as it might have been fixed already.
",ngan,2011-08-30 06:52:34
474,2011-08-28 10:23:14,"Yes, as @ngan said, try it on master and see if it's fixed there. Hopefully we'll have a new release soon!
",jnicklas,2011-08-30 06:52:34
474,2011-08-30 06:52:34,"Yes, looks fixed on master. I tried it and it worked.
",pupeno,2011-08-30 06:52:34
473,2011-08-26 17:42:15,"Sometimes you have already found a node, or finding the right node is no doable in a selector.  In either case this allows one to add a bit more clarity to the tests.
",pezra,2011-08-30 07:49:45
472,2011-08-26 09:58:12,"I'm seeing a problem with the Selenium driver under Capybara 1.0.1, with selenium-webdriver 2.5.0.

When using the `has_no_css?` method it raises an InvalidSelectorError, complaining that no element with the provided ID could be found, which is far from an error in the context of checking that an element isn't present.
",jellybob,2011-08-26 10:13:50
472,2011-08-26 10:13:50,"Updating my selenium-client gem seems to have resolved this, sorry for the noise.
",jellybob,2011-08-26 10:13:50
471,2011-08-26 08:09:19,"I have a problem that cucumber gets stuck with nothing visible happening:

<S_CODE_TOKEN>

I am not really sure who to blame here but I am taking a guess and starting with capybara so please direct me to other parts of the stack if you think this is best reported there. Here's relevant parts of test.log for the last request sanitized:

<S_CODE_TOKEN>

I think the interesting thing here is that database cleaner gets to the log in the middle of the execution of the action so I am guessing that with selenium there should be a After hook waiting for requests to finish before starting to clean the database?

Gems
- capybara-1.0.1
- cucumber-rails-1.0.2
- cucumber-1.0.2
- selenium-webdriver-2.5.0
- rails-3.1.0.rc6
",betelgeuse,2011-11-15 17:06:42
471,2011-08-26 10:34:23,"Is it possible you're using FakeWeb? It has a tendency to cause Capybara to hang for long periods. Use the latest WebMock instead, it has solved this issue.
",jnicklas,2011-11-15 17:06:42
471,2011-08-26 10:59:47,"I am not using FaceWeb. I think one piece of the puzzle is that I have dom loaded firing an ajax request so the normal capybara waiting doesn't apply to it. I think this piece of code has helped me to solve the problem.

<S_CODE_TOKEN>
",betelgeuse,2011-11-15 17:06:42
471,2011-11-15 17:06:42,"I think this should probably be fixed by the better session clearing we are seeing. If not, then there's probably very little we can do about it anyway. Closing. Please reopen if this issue is still relevant.
",jnicklas,2011-11-15 17:06:42
471,2012-11-07 14:42:50,"@jnicklas Ah! I got bit by the FakeWeb problem (yes, it's still a problem a year later).

Tomorrow I'll take a few minutes to mention the issue and the solution in the README. Ok with you?
",webmat,2011-11-15 17:06:42
471,2012-11-07 15:06:12,"I don't know, send a suggestion and we'll discuss it :)
",jnicklas,2011-11-15 17:06:42
471,2012-11-07 15:40:20,"Actually I realized that I was doing something dumb. I was trying to assert on the state of the DB (I don't have the DB hack in place).

So the problem may not have been FakeWeb. I still switched to WebMock, though. Much better API :-)
",webmat,2011-11-15 17:06:42
471,2012-11-07 15:43:36,"> I still switched to WebMock, though. Much better API :-)

Even WebMock has issues, like flickering segfaults. I recommend staying away from HTTP mocking libraries if you can.
",joliss,2011-11-15 17:06:42
470,2011-08-26 07:43:22,"I just updated my Gemfile with the latest rails, rspec, cucumber and capybara but now a lot of my tests keep failing in both Rspec and Cucumber:

Both regular string input and I18n input seem to produce this error. Every single click_\* method in my test suite is now causing this.

Any clues?

<S_CODE_TOKEN>
",JeanMertz,2011-08-26 11:06:30
470,2011-08-26 07:55:37,"Can you provide a full stack trace please!
",jnicklas,2011-08-26 11:06:30
470,2011-08-26 08:02:05,"Sure, and thank you for the quick reply!

Here is a request spec that works up until the ""click_button"" part:

<S_CODE_TOKEN>

And here is the stack trace for this request spec:

<S_CODE_TOKEN>
",JeanMertz,2011-08-26 11:06:30
470,2011-08-26 10:33:10,"doesn't really sound like a Capybara issue. Obviously there's something with cookies broken. Maybe something in the interaction between rack-test and rack. You'll have to dig a bit deeper and isolate the cause, I think.
",jnicklas,2011-08-26 11:06:30
470,2011-08-26 10:33:23,"Or create something reproducible.
",jnicklas,2011-08-26 11:06:30
470,2011-08-26 11:06:30,"Actually, I found the issue to be in `session_store.rb`

In rails 3.1.0.rc6 this line:

<S_CODE_TOKEN>

causes the issue, specifically the `domain: :all` part. Seems something is broken in my app or in Rails.

I already reported this here: https://github.com/rails/rails/issues/2483 but it never got any attention so I guess it must be just me. I'll just use `domain: "".manager.dev""` for now.
",JeanMertz,2011-08-26 11:06:30
469,2011-08-26 02:08:55,"hi guy,
 As we know, in selenium RC age we have to add some mock file in test/mocks to mock external resource for selenium launching another process to run server , But when I use capybara to run webdriver test. I find i can mock external resource and webdriver can know this mock. I dont know the operating mechanism . When webdriver load a browser to run test senario, how it launch the server sevring the browser and catching the mock.

Thanks 
",zealot2007,2011-08-26 06:36:33
469,2011-08-26 06:36:33,"I don't understand this question at all. But this is not the right place to ask it anyway. Please post your question to the mailinglist, or even better yet, to the _selenium_ mailing list.
",jnicklas,2011-08-26 06:36:33
468,2011-08-25 20:30:43,"After i've upgraded to capybara 1.0.1 from 1.0.0, i get undefined method error for any path/url helper in my capybara tests. I'm using capybara with steak. Here is a backtrace:

<S_CODE_TOKEN>

I have the same error when I run this test with bare capybara, without steak, so i think that it is a capybara bug.
",szymon-przybyl,2011-08-25 20:57:40
468,2011-08-25 20:57:40,"oh, i see that it is not actually a problem with capybara, i think it is releated to issue https://github.com/jnicklas/capybara/pull/368 with steak.

I will move my acceptance specs from steak to capybara :)
",szymon-przybyl,2011-08-25 20:57:40
468,2011-08-25 21:21:43,"ok, i get it - i have one request spec ""describe"" instead of ""scenario"" and this is why url and path helpers haven't worked :)
",szymon-przybyl,2011-08-25 20:57:40
468,2013-03-14 21:10:25,"I'm using 'scenario' but my url helpers are not working
",abacha,2011-08-25 20:57:40
468,2013-03-14 21:25:20,"@abacha of all possible ways of filing a bug report you've chosen probably the worst. This is a _two year old_ issue. It's _closed_. After being withdrawn by the author himself, because it wasn't related to Capybara. You've included no detail as to what actually went wrong, no stack trace, no mention of your environment, what version of Capybara you're using. [Please read this](http://www.elabs.se/blog/38-how-to-write-a-bug-report).
",jnicklas,2011-08-25 20:57:40
467,2011-08-25 19:16:33,,jmccartie,2011-08-26 06:33:07
466,2011-08-24 19:29:01,"Is there any way within Capybara / Selenium to specify the path to the chromedriver executable? On various CI servers (we have a cluster) I have to either log in by hand and add chromedriver somewhere on the path, which is not scaleable, otherwise I have to write custom deploy scripts to make sure to download, extract, parse $PATH, etc. and shove the appropriate chromedriver bin the appropriate location (also a pain in the rear).

I'd rather have the selenium-webdriver rubygem install the platform-specific chromedriver, but it doesn't appear to do so. My Plan B would be to include platform specific bins (luckily we only have linux64 and OSX to deal with) in my repo and then, in Capybara's startup, tell it the path to chromedriver. But, it doesn't appear that's exposed anywhere or even an option. Am I missing something?

Thanks,
## 

Matt
",MattRogish,2011-08-24 20:30:31
466,2011-08-24 20:30:31,"I think in general it's expected that you install the chromedriver binary yourself, just like you need to install Chrome. Since it doesn't yet tend to come packaged with Linux distributions, I would say that downloading chromedriver and moving it to /usr/bin in your deployment script might in fact be the best option.

(I think the chromedriver binary interacts rather closely with Chrome, so it seems sensible that whatever installs Chrome should install chromedriver as well.)

You can probably override the location if you really need to: http://code.google.com/p/selenium/wiki/ChromeDriver#Overriding_the_Chrome_binary_location But I'm not sure how to do this in Ruby.

By the way, the mailing is generally a better place for questions like this. :-)
",joliss,2011-08-24 20:30:31
466,2011-08-24 20:32:14,"Thanks! Sorry for putting it here, I will make sure to put it in the mailing list next time :)
",MattRogish,2011-08-24 20:30:31
465,2011-08-24 13:43:27,"Hi! When I use the `:selenium` or `:webkit` drivers, all my scenarios fail with ""Internal Server Error"". When using racktest, they work just fine. Example:

<S_CODE_TOKEN>

produces

<S_CODE_TOKEN>

both times. On other actions, I get ""Connection refused - connect(2)"" instead of ""interning empty string"".

When I include `thin` in my Gemfile, the error becomes this (with capybara-webkit):

<S_CODE_TOKEN>

while the selenium driver renders a completely empty page.

Any ideas? Are these errors written in a log file anywhere? Is there a way to get a full stack trace out of capybaras server?

I am using `ree-1.8.7-2011.03` via rvm, `capybara-1.0.0` on Mac OS X 10.7 (Lion)
",lorenzk,2011-08-24 20:17:38
465,2011-08-24 20:17:37,"I'm not sure what's going wrong in your case, but in general the mailing list is better suited for questions like this. The issue tracker is best used for reproducible bugs with Capybara. May I recommend you repost this on the mailing list?
",joliss,2011-08-24 20:17:38
465,2011-09-28 08:44:18,"Just a +1 that I'm running into the same issue. I don't see any discussion on the mailing list, trying to find a solution...
",jcasimir,2011-08-24 20:17:38
465,2011-09-29 19:29:13,"+1
",jpemberthy,2011-08-24 20:17:38
464,2011-08-23 00:18:50,"I'm doing something like this to simulate an authenticated (kerberos) user:

<S_CODE_TOKEN>

It works fine _unless_ I visit a url with a redirect. Then the header is lost and I'm no longer authed.

I wrote a failing test that illustrates the problem. See here:

https://github.com/simonbaird/capybara/commit/cdc7ad7fc312b3ccfe9ee09c0eac8bf3353ccd00

I'm not sure how to fix this, but I'd give it a try given a small amount of encouragement...

Ps, anyone know a way to work around this issue?
",simonbaird,2011-08-30 08:20:50
464,2011-08-23 00:39:59,"Maybe implement a follow_redirect! method instead of using the rack method?
",simonbaird,2011-08-30 08:20:50
464,2011-08-23 01:30:29,"Maybe this is really a bug in rack-test...
",simonbaird,2011-08-30 08:20:50
464,2011-08-26 10:47:02,"you're really not supposed to set headers this way. The Rack-Test driver has a headers option which you can use. Like this:

<S_CODE_TOKEN>

however, that actually might have the same issue. Try it out and let me know how it goes.
",jnicklas,2011-08-30 08:20:50
464,2011-08-26 10:50:06,"Ahh, never mind my comment, just understood why you're doing what you're doing. This does indeed appear to be a bug.
",jnicklas,2011-08-30 08:20:50
464,2011-08-31 00:24:44,"Great stuff. Thanks very much.
",simonbaird,2011-08-30 08:20:50
464,2011-08-31 03:16:25,"Here's a workaround for anyone waiting for the updated gem.

<S_CODE_TOKEN>

Disclaimer: This is not pretty. Since you will be visiting everything twice there might be some unintended side-effects. Use at your own risk, etc.
",simonbaird,2011-08-30 08:20:50
463,2011-08-22 08:17:16,"If you run the rspec test suite with capyabara with selenium driver it will always return exit status code 0.
I have fixed the `at_exit` part in selenium driver the same way that it is fixed in https://github.com/colszowka/simplecov/issues/5
",ebeigarts,2011-08-30 08:26:47
463,2011-08-22 08:40:17,"Do you have something which can verify that this was broken and is now fixed? Doesn't have to be a unit test, a shell script or soemthing would be fine.
",jnicklas,2011-08-30 08:26:47
463,2011-08-22 09:30:05,"At least for me these test cases fail without my patch on Ruby 1.9.2-p290 under OS X.
",ebeigarts,2011-08-30 08:26:47
463,2011-08-22 09:55:18,"I just found out that it has already been reported - #178.
And it is fixed in rspec side https://github.com/rspec/rspec-core/pull/410
",ebeigarts,2011-08-30 08:26:47
463,2011-08-23 12:20:19,"It's not fixed on the RSpec side. There's a giant thread of how RSpec is failing to fix it (the nested at_exit blocks are causing all kinds of pain with rspec autorun). +10 to merge this!
",dblock,2011-08-30 08:26:47
463,2011-08-23 13:06:08,"Ehh, guy, I'm confused. I have no idea what's going on. Do I merge this? Feels like a hack upon a hack, and I don't like that. I don't like how this whole situation is risking getting even more convoluted.
",jnicklas,2011-08-30 08:26:47
463,2011-08-23 13:14:29,"As I understand it, `quit` calls `@browser.quit`, which stops the child process if it's still running. This code bypasses that call, which means child processes would be left running. I may be wrong, but that would clearly be an unacceptable outcome.

That said, we've been unable to find an acceptable solution within rspec for this, so it would be great to see it addressed in Capybara (or in Childprocess). Of course, I have no ideas on how :)
",dchelimsky,2011-08-30 08:26:47
463,2011-08-23 13:18:30,"@jnicklas: I'll try to help.

The root failure is rspec + capybara + selenium driver eats the process exit code. So when a spec fails rspec says `exit 1`, then on cleanup capybara says `no, no, exit 0`. This is happening in `@browser.kill`, although I am not sure how. IMO, it's a bug.

In RSpec we tried a workaround of saying `capybara sets exit code last, nomatter what`. It worked around this particular problem, but broke existing functionality. We can't figure out a fix that works for all scenarios. Saying `my exit code is last` is tough because we end up in a nested `at_exit` block that execute in some weird order in Ruby.

You're the boss to Capybara to figure out what the best way to proceed is. I think this or a variant of this fix should be committed, Capybara shouldn't be setting the process exit code ever, it's not in the business of doing that.
",dblock,2011-08-30 08:26:47
463,2011-08-23 13:21:27,"@dchelimsky: the code in this patch saves the old exit code and restores it afterwards, it does quit the browser
",dblock,2011-08-30 08:26:47
463,2011-08-23 13:21:51,"I just tested this and the browser is closing on exit.
",ebeigarts,2011-08-30 08:26:47
463,2011-08-23 13:22:55,"To be clear, it is Childprocess that is actually setting the process exit code, not Capybara. That said, it seems reasonable to me that Childprocess _should_ be in the business of setting process exit codes, and that Capy has a responsibility to prevent that. Maybe Childprocess is missing an API for this?
",dchelimsky,2011-08-30 08:26:47
463,2011-08-23 13:24:22,"@dblock - ah, yes - I misread the patch.
",dchelimsky,2011-08-30 08:26:47
463,2011-08-23 14:52:56,"I did some digging around and it seems that ruby doesn't like that childprocess uses `raise` and `rescue` within `at_exit` so I opened a new issue at http://redmine.ruby-lang.org/issues/5218

I don't know if this is intended, but it looks like a ruby bug to me.
",ebeigarts,2011-08-30 08:26:47
463,2011-08-24 07:21:55,"To fix ruby 1.9 I came up with this workaround and added this to my `spec_helper.rb` and it works

<S_CODE_TOKEN>
",ebeigarts,2011-08-30 08:26:47
463,2011-08-24 12:35:04,"@ebeigarts - I don't think the redef on Kernel belongs in Capybara as it has wide-reaching impact on the runtime and Capybara users would be unable to control it. It might, however, make sense as an at-exit-fix gem (especially in light of the fact that it's being fixed in future versions of Ruby). WDYT?

@jnicklas - does @dblock's explanation help you to understand this patch any better?
",dchelimsky,2011-08-30 08:26:47
463,2011-08-25 07:08:20,"I think there is no easy/clean solution for this, it will be a hack anyway.
1. Create an at-exit-fix gem and add this to capybara dependancies (this will also have wide-reaching impact on the runtime)
2. Create an at-exit-fix gem and leave this up to users to include this additional gem if they are using MRI ruby 1.9 and add some note about this in the README
3. Just merge this pull request
",ebeigarts,2011-08-30 08:26:47
463,2011-08-30 02:10:50,"I am a _huge_ fan of monkey patching. I say hack it (3). I think @jnicklas should spend a few minutes understanding what's at stake here (poor users can't get CI to work properly) and decide what to do. In the meantime @ebeigarts could make a gem, but I would call it _at-exit-code-warrior_ - the real functionality of this code is not to overwrite the previous exit code if set to non-zero. 
",dblock,2011-08-30 08:26:47
463,2011-08-30 08:26:41,"Okay, I will merge this. If the shit hits the fan, we can always pull this later on.
",jnicklas,2011-08-30 08:26:47
463,2012-07-28 14:03:43,"I am having this problem using Capybara 1.1, RSpec 2.11.1 and poltergeist 0.7.0. Problem is I have no idea where to start looking I just know that the exit code is zero and I can't figure out why. I collected a few links where of the top one is for an issue with RSpec that was closed.

Could someone push me in the right direction of finding out what is causing the exit code to always be zero?
- RSpec issue https://github.com/rspec/rspec-core/issues/640#issuecomment-7331861 (though not sure it's an RSpec fault) 
",mhenrixon,2011-08-30 08:26:47
463,2012-07-28 14:09:08,"Have you tried searching for ""at_exit"" in poltergeist and also in the dependent gems or maybe its not poltergeist?

I am also using poltergeist, but the exit codes are correct.

On 28 Jul 2012, at 17:03, Mikael Henrikssonreply@reply.github.com wrote:

> I am having this problem using Capybara 1.1, RSpec 2.11.1 and poltergeist 0.7.0. Problem is I have no idea where to start looking I just know that the exit code is zero and I can't figure out why. I collected a few links where of the top one is for an issue with RSpec that was closed.
> 
> Could someone push me in the right direction of finding out what is causing the exit code to always be zero?
> - RSpec issue https://github.com/rspec/rspec-core/issues/640#issuecomment-7331861 (though not sure it's an RSpec fault)
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/463#issuecomment-7333239
",ebeigarts,2011-08-30 08:26:47
463,2012-07-28 14:12:11,"@ebeigarts sorry about being daft but I'm not following. Are you referring to log output or source code?
",mhenrixon,2011-08-30 08:26:47
463,2012-07-28 14:22:50,"In the sorce code, this is the actual bug - http://redmine.ruby-lang.org/issues/5218

On 28 Jul 2012, at 17:12, Mikael Henrikssonreply@reply.github.com wrote:

> @ebeigarts sorry about being daft but I'm not following. Are you referring to log output or source code?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/463#issuecomment-7333307
",ebeigarts,2011-08-30 08:26:47
463,2012-07-28 14:29:24,"I get it, just add the monkey patch to the spec_helper. 
Thanks for that! I truly love working in dynamic and open platforms! :)
",mhenrixon,2011-08-30 08:26:47
462,2011-08-19 21:34:59,"This is in response to the suggestion from @betelgeuse [1] -- I see what you mean. 

I was going to change that test's description, but then it got long, and then I was going to add a comment, but I'm not a big fan of comments when code could speak for itself, so I split the previous test whose description was ""should reset the driver using Capybara.use_default_driver, even if an exception occurs"" into two tests.

One test shows that the driver will be reset to default if it wasn't set to anything before #using_driver, the other test makes sure that it's reset even if there's an exception, and I assigned the driver before the block to a variable to remove the confusion with default_driver altogether, hopefully.

Again, please let me know if there are any improvements I can make to this patch; I will be more than happy to do so. Thanks!

[1] - https://github.com/clnclarinet/capybara/commit/9b0447f203978bf5ad8259574f60801d442aad53#commitcomment-541398
",carols10cents,2011-11-15 15:10:41
461,2011-08-19 01:52:44,"Closes issue #452. #using_driver now restores the driver to what it was before the block rather than default_driver.

Please let me know if there are any improvements I can make to this patch.

I use capybara in my work and personal projects every single day, and I'm really thankful for all the work that @jnicklas and other maintainers have done. Please consider this a very tiny token of my appreciation!
",carols10cents,2011-08-19 06:36:16
461,2011-08-19 06:36:39,"Thanks a lot!
",jnicklas,2011-08-19 06:36:16
460,2011-08-18 18:23:09,"I found that capybara had installed selenium-webdriver version 0.2.2 as a dependency. This caused problems when trying to use firefox 6. The commit changes the dependency to 2.4.0 of selenium-webdriver.
",ramblex,2011-08-19 06:31:09
460,2011-08-18 21:12:39,"+1 would love to see this working with FF6
",raid5,2011-08-19 06:31:09
460,2011-08-19 06:31:09,"No, the dependency is correct. As is, it will not match 0.2.2, since the dependency essentially boils down to `>=2.0.0 && <3.0`. Depending on `~>2.4.0` would be overspecifying the dependency. Just do a `bundle update selenium-webdriver` and you should get the latest version.
",jnicklas,2011-08-19 06:31:09
460,2011-08-19 06:32:11,"This dependency has been confirmed and encouraged by @jarib, btw.
",jnicklas,2011-08-19 06:31:09
460,2011-08-19 09:10:06,"Yes, I was using version 1.0.0 of capybara so the solution was just to do a bundle update to use 1.0.1. Thanks.
",ramblex,2011-08-19 06:31:09
460,2011-08-25 21:40:42,"weird, I've the same problem:

In my gemspec:       

<S_CODE_TOKEN>

In your code: 

<S_CODE_TOKEN>

When I get directly the gem from git, it works
",apneadiving,2011-08-19 06:31:09
460,2011-08-26 06:34:43,"@apneadiving: those two dependencies are incompatible, you can't satisfy both.
",jnicklas,2011-08-19 06:31:09
460,2011-08-26 06:54:00,"@jnicklas: Of course :)

I didn't touch anything though. That's why I deduce '2.0' is sometimes interpreted as '0.2.0'.
",apneadiving,2011-08-19 06:31:09
460,2011-08-26 07:56:03,"@apneadiving: it's not ;)
",jnicklas,2011-08-19 06:31:09
460,2011-08-26 09:01:18,"@apneadiving The dependency in capybara 1.0.0 was 0.2.0 so I suspect you were just using that.
",ramblex,2011-08-19 06:31:09
460,2011-08-26 09:11:54,"@ramblex: correct! thanks :)
",apneadiving,2011-08-19 06:31:09
459,2011-08-18 07:24:48,"Hello,

I found out about Capybara through [Railscasts](http://railscasts.com/episodes/275-how-i-test). I am just getting the hang of TDD and this gem is awesome stuff!

When I have plain links in a demo Rails 3.1.0rc6 application, `click_link` works as expected. I have a:
Test spec: https://gist.github.com/1153560
Simple link: https://gist.github.com/1153515

However, when I use `render` or `each` the spec with `click_link` fails.

Using `render`:
The same test spec: https://gist.github.com/1153560
Page calling render: https://gist.github.com/1153554
Rendered page: https://gist.github.com/1153556

Using `each`:
The same test spec: https://gist.github.com/1153560
Page using each: https://gist.github.com/1153581

Is this the expected behaviour? If so, how do I get Capybara and `click_link` to get at the nested link?

Thanks in advance.

Silumesii
",smaboshe,2011-08-18 07:28:52
459,2011-08-18 07:28:52,"Hi @smaboshe, please ask questions like this on the Capybara mailing list. We try to only have reproducible issues on the issue tracker.
",jnicklas,2011-08-18 07:28:52
458,2011-08-18 02:42:50,"Running the given step with Cucumber causes this error to occur. It's extremely puzzling, and I've tried three different versions of Firefox, and additionally tried Chrome, all to no avail in solving it.

`Private method 'select' called for #<Selenium::WebDriver::Element:0x1112c1e80> (NoMethodError)
      ./features/step_definitions/web_steps.rb:73
      ./features/step_definitions/web_steps.rb:14:in 'with_scope'
      ./features/step_definitions/web_steps.rb:72:in '/^(?:|I )select ""([^""]*)"" from ""([^""]*)""(?: within ""([^""]*)"")?$/'`
",mus0u,2011-08-19 11:19:22
458,2011-08-19 09:25:17,"Is it possible that you are using a new selenium-webdriver (> 2.0) with an old capybara version (1.0.0)? 

I was playing around with different versions of capybara and selenium-webdriver to find out why Capybara 1.0.1 is buggy in some projects and got this error as well. 

You shouldn't get this error if you don't change the dependencies. If you didn't change any dependency you could try running 'bundle update capybara'.
",weidenfreak,2011-08-19 11:19:22
458,2011-08-19 11:19:22,"I think Meike might be right about that. If that doesn't help, I would recommend you try the Capybara mailing list for help with getting it running. We try to only have reproducible issues on this issue tracker.
",joliss,2011-08-19 11:19:22
458,2011-10-26 12:21:31,"FWIW I can confirm I saw this when I had selenium-webdriver 2.9.1 and capybara 0.4.1.2, which is obviously a bad idea ;)
",jasonm,2011-08-19 11:19:22
457,2011-08-17 21:59:55,"This fixes the case when you are redirected to an SSL page and then click on a form submit button with the form action being a relative URL. Closes #370.
",ngan,2011-08-21 06:16:18
457,2011-08-18 07:12:16,"this needs tests.
",jnicklas,2011-08-21 06:16:18
457,2011-08-21 06:16:18,"Nevermind, this appears to be fixed in 1.0.1
",ngan,2011-08-21 06:16:18
457,2011-08-21 08:18:13,"It's not and I created a demo app to test this before I found this pull request:
https://github.com/betelgeuse/capybara-ssl-problem
",betelgeuse,2011-08-21 06:16:18
457,2011-08-21 14:34:47,"I misspoke, this isn't fixed on 1.0.1, but I believe it is fixed on master:
https://github.com/jnicklas/capybara/commit/4cd4b5c76a4bd95c585cd70036ab2d5df86d000d

@betelgeuse Can u verify?
",ngan,2011-08-21 06:16:18
457,2011-08-21 14:48:03,"@ngan master does pass my test case
",betelgeuse,2011-08-21 06:16:18
456,2011-08-17 12:55:47,"In my html:

<S_CODE_TOKEN>

In my tests:

<S_CODE_TOKEN>

This yields:
Failure/Error: foo_div = page.find(""#foo[1]"")
     Capybara::ElementNotFound:
       Unable to find css ""#foo[1]""
",ghost,2011-08-17 13:41:01
456,2011-08-17 13:36:46,"Afaik `foo[1]` is not a valid ID for HTML elements.
",jnicklas,2011-08-17 13:41:01
456,2011-08-17 13:41:05,"Oops, you are correct. Thanks for the quick reply...
",ghost,2011-08-17 13:41:01
455,2011-08-17 06:14:43,"I seem to be receiving a timeout error after upgrading to Firefox 6.

`unable to obtain stable firefox connection in 60 seconds (127.0.0.1:7055) (Selenium::WebDriver::Error::WebDriverError)`
",raid5,2011-08-17 11:37:48
455,2011-08-17 06:26:05,"Looks like the issue is in Selenium driver, not in Capybara
",guilleiguaran,2011-08-17 11:37:48
455,2011-08-17 11:37:48,"indeed.
",jnicklas,2011-08-17 11:37:48
455,2011-08-17 14:30:19,"Ah, I see. Where is the issue/ticket system with regards to that project?
",raid5,2011-08-17 11:37:48
455,2011-08-25 16:09:32,"Update to selenium-webdriver 2.5.0 and it will be fixed.
",RobotGetsBored,2011-08-17 11:37:48
455,2011-08-26 09:20:34,"Thanks for the info, this just saved my day!
",awendt,2011-08-17 11:37:48
455,2011-09-02 04:27:19,"I'm using rails 3.0.10, capybara 1.0.1 and selenium-webdriver 2.5.0 and it still doesn't work. 
When I try to run a scenario with the @javascript tag it returns:

Rack application timed out during boot
exit (SystemExit)

Am I missing something? Like a require or something. It works fine without the @javascript, though.
",matiasleidemer,2011-08-17 11:37:48
455,2011-09-02 16:03:29,"From the error message, I'd guess you are having a different problem.

But if it _is_ a compatibility issue, I'd suggest you try again with the freshly-released Capybara 1.1.0 gem. I had Firefox 6 not working the other day with 1.0.1, even though I'm pretty sure I updated to webdriver 2.5.0, and upgrading Capybara to 1.1.0 today fixed it for me. (But perhaps I did something wrong. It's pretty odd.)
",joliss,2011-08-17 11:37:48
455,2011-09-02 16:11:18,"Yes, I think is something with the Server class, and not with the selenium/firefox. I'm trying to figure it out. My rack server doesn't boot, thats the issue. Even with Capybara.server_boot_timeout = 60...
",matiasleidemer,2011-08-17 11:37:48
455,2011-09-02 16:31:08,"Well, it worked. Maybe my macbook is too slow, or ruby 1.8.7 takes a little more to boot Rack, I don't know. 
Anyway, setting the server_boot_timeout to a very high value (300) made it work.
",matiasleidemer,2011-08-17 11:37:48
455,2011-09-03 15:53:07,"Hm, it's odd that your application would take so long to boot. Perhaps something funny is going on? I'd recommend you try interrupting it while it boots and getting a back trace so you can see what it spends all this time with.
",joliss,2011-08-17 11:37:48
455,2011-09-05 12:14:41,"Working for me with selenium-webdriver 2.5.0 and FF 6.0.1
",juanjo,2011-08-17 11:37:48
455,2012-11-22 07:01:13,"I used capybara-webkit instead. worked for me locally on my MacOSX and on my Ubuntu+JenkinsCI server
Capybara.javascript_driver = :webkit
",ramonrails,2011-08-17 11:37:48
454,2011-08-16 18:13:54,"If I do the following:

<S_CODE_TOKEN>

I get the following exception and message:

<S_CODE_TOKEN>

If, instead, I do this:

<S_CODE_TOKEN>

It works.

I tracked it down to [this line](https://github.com/jnicklas/capybara/blob/1.0.1/lib/capybara/rack_test/browser.rb#L47).  

`folders` is `[]` because `request_path` is ""/"".  Therefore, we get a NoMethodError on the `<<` operator.
",BrianGenisio,2011-08-30 08:54:47
454,2011-08-30 08:55:48,"I've fixed this for click_link et al, however, the official line is that visit does _not_ support relative URLs (it should _work_ in rack-test now, but note that it doesn't work in e.g. Selenium).
",jnicklas,2011-08-30 08:54:47
453,2011-08-16 08:04:15,"When I'm using capybara, session between tests is persisted.
Running manually `Capybara.reset_sessions!` before each test helps, however it should be default behaviour.

You can check sample app, which describes problem better:
https://github.com/morgoth/integration-test-session-bug
",morgoth,2011-08-16 08:38:36
453,2011-08-16 08:38:36,"Capybara does not include any out of the box integration with ActiveSupport::TestCase or Test::Unit, see the README for help on setting those up.
",jnicklas,2011-08-16 08:38:36
453,2011-08-16 08:54:42,"I alerady added:

<S_CODE_TOKEN>

But the question is - should session be persisted between tests?
",morgoth,2011-08-16 08:38:36
453,2011-08-16 09:27:40,"No, but you need to solve that on your own. As I said, Capybara does not integrate with Rails integration tests or Test::Unit. If you want more polished integration, use RSpec instead.
",jnicklas,2011-08-16 08:38:36
452,2011-08-16 06:28:56,"http://groups.google.com/group/ruby-capybara/browse_thread/thread/fe602997161fadaa

Summary: Capybara.using_driver should restore what was in use at call time instead of the default_driver.
",betelgeuse,2011-08-30 08:03:39
451,2011-08-15 23:09:39,"here's the offending code:

<S_CODE_TOKEN>

error:

  1) Admin should be able to upload an organization logo
     Failure/Error: upload_organization_logo
     Internal Chrome error during 'DragAndDropFilePaths': (Unknown command. Options: AcceptOrDismissAppModalDialog, ActivateTab, CaptureEntirePage, CloseTab, DeleteCookie, ExecuteJavascript, GetAppModalDialogMessage, GetChromeDriverAutomationVersion, GetCookies, GetIndicesFromTab, GetTabIds, GetTabTitle, GetTabURL, GoBack, GoForward, IsTabIdValid, NavigateToURL, Reload, SendOSLevelKeyEventToTab, SendWebkitKeyEvent, SetCookie, UpdateExtensionsNow, WaitForAllTabsToStopLoading, WebkitMouseButtonDown, WebkitMouseButtonUp, WebkitMouseClick, WebkitMouseDoubleClick, WebkitMouseDrag, WebkitMouseMove, AddHistoryItem, AddOrEditSearchEngine, AddSavedPassword, AutofillAcceptSelection, AutofillHighlightSuggestion, AutofillTriggerSuggestions, AwaitSyncCycleCompletion, AwaitSyncRestart, ClearBrowsingData, CloseNotification, DisablePlugin, DisableSyncForDatatypes, EnablePlugin, EnableSyncForDatatypes, FillAutofillProfile, FindInPage, GetActiveNotifications, GetAutofillProfile, GetBlockedPopupsInfo, GetBrowserInfo, GetDownloadsInfo, GetExtensionsInfo, GetHistoryInfo, GetInitialLoadTimes, GetInstantInfo, GetLocalStatePrefsInfo, GetNTPInfo, GetNTPMenuMode, GetNTPThumbnailMode, GetNavigationInfo, GetOmniboxInfo, GetPluginsInfo, GetPrefsInfo, GetSavedPasswords, GetSearchEngineInfo, GetSyncInfo, GetThemeInfo, GetTranslateInfo, ImportSettings, KillRendererProcess, LaunchApp, LoadSearchEngineInfo, MoveNTPMostVisitedThumbnail, OmniboxAcceptInput, OmniboxMovePopupSelection, PerformActionOnDownload, PerformActionOnInfobar, PerformActionOnSearchEngine, RemoveNTPMostVisitedThumbnail, RemoveSavedPassword, RestoreAllNTPMostVisitedThumbnails, SaveTabContents, SelectTranslateOption, SetAppLaunchType, SetLocalStatePrefs, SetNTPMenuMode, SetNTPThumbnailMode, SetOmniboxText, SetPrefs, SetWindowDimensions, SignInToSync, UnblockAndLaunchBlockedPopup, UninstallExtensionById, UnpinNTPMostVisitedThumbnail, WaitForAllDownloadsToComplete, WaitForNotificationCount, ). Request details: ({""command"":""DragAndDropFilePaths"",""paths"":[""/Users/username/appname/public/images/rails.png""],""tab_index"":0,""windex"":0,""x"":534,""y"":339}).
     # (eval):2:in `attach_file'
     # ./spec/support/capybara/admin_organization_helpers.rb:62:in`upload_organization_logo'
     # ./spec/requests/admin/admin_spec.rb:21:in `block (2 levels) in <top (required)>'
",szTheory,2011-08-24 20:21:17
451,2011-08-16 04:50:03,"Could you check your Gemfile.lock and tell us what versions of capybara and selenium-webdriver you are using, please?
",joliss,2011-08-24 20:21:17
451,2011-08-16 14:24:41,"capybara (1.0.0)
selenium-webdriver (2.3.2)
",szTheory,2011-08-24 20:21:17
451,2011-08-17 20:53:31,"I'm pretty sure this is problem with Selenium. I would try their mailing lists.

Keep in mind that their Chrome driver has recently been rewritten, so
there might be some kinks -- in general I'd recommend using Firefox
with Selenium.
",joliss,2011-08-24 20:21:17
451,2011-08-24 18:37:42,"Looks like there's an issue marked on the Chromium project, here: http://code.google.com/p/chromium/issues/detail?id=93909

Not sure if that's the direct cause
",szTheory,2011-08-24 20:21:17
451,2011-08-24 20:21:17,"Interesting -- thanks. Hm, I think I'll go ahead and close this issue. Unless it happens with Firefox too, it's most likely not something that Capybara can fix, so there should be no need to keep it open here. Feel free to reopen though.
",joliss,2011-08-24 20:21:17
451,2011-09-10 11:19:30,"At the end of the chromium project tracker it says that the bug was fixed (30th August):

http://code.google.com/p/chromium/issues/detail?id=93909

""Fix file uploads in chromedriver. It should not be assumed that multiple file
names are separate elements in the input array.
BUG=92911,93909
TEST=none""

How can we get this patch into the new selenium driver and has anyone tried this?
",wakiki,2011-08-24 20:21:17
451,2011-09-12 11:10:50,"> How can we get this patch into the new selenium driver and has anyone tried this?

You should have it with the next release of the [selenium-webdriver](http://rubygems.org/gems/selenium-webdriver) gem.
",joliss,2011-08-24 20:21:17
451,2013-08-05 17:29:38,"Just started getting this error today. Possibly a regression?
",volkanunsal,2011-08-24 20:21:17
450,2011-08-12 21:58:52,"To get transactional fixtures to work with Selenium I used [solution 3](http://pastie.org/pastes/1745020) which makes all connections be the shared connection. I ran into problems though when using Spork, e.g. sqlite would abort with “prepare called on a closed database”. Similar for Postgres.

On the [thread in solution 2](http://opinionated-programmer.com/2011/02/capybara-and-selenium-with-rspec-and-rails-3/#comment-349) Hannes Benson proposes a simpler change:

<S_CODE_TOKEN>

Using this method instead, everything worked perfectly with Selenium+RSpec+Spork+Guard. Is there any reason not to use this method? And if it's good, can it be integrated into capybara as a config option?
",turadg,2011-11-15 17:03:56
450,2011-08-19 20:48:20,"I'm having similar problems, though this seems to be a problem with spork, and not with capybara @turadg, have you tried filing an issue with [spork](https://github.com/timcharper/spork) ?
",schneems,2011-11-15 17:03:56
450,2011-08-20 19:43:04,"Nope, I haven't. What should Spork be doing differently?

More importantly, is there anything wrong with the method above? If not, problem solved, right?
",turadg,2011-11-15 17:03:56
450,2011-08-23 19:26:17,"@turadg, i misread your original post. Sorry for the confusion. I've tried your/Hannes Benson's solution, but when i run it without clearing out my database manually (was doing a `User.destroy_all ...`) Tests pass the first run through, then fail on the second with validation errors. 

Can you give me some more info on where exactly you put those lines of code? did you put it inside the prefork section? Did you need any other code in addition to this? 
",schneems,2011-11-15 17:03:56
450,2011-08-23 19:46:41,"I just put in the prefork section and made no other changes. It's been working for me.

Here's it is in the context of `spec_helper.rb`:

<S_CODE_TOKEN>
",turadg,2011-11-15 17:03:56
450,2011-11-15 17:03:56,"Not really a Capybara issue.
",jnicklas,2011-11-15 17:03:56
449,2011-08-12 17:17:00,"Hi jnicklas,

Wonder if  you do a quick pull for the capybara.gemspec. I think you intended the version to be 2.0.0, however, during bundle install - it installs 0.2.0. I did the small changes and updated it.

It hasn't been updated since July though.
",detrain,2011-08-12 20:43:13
449,2011-08-12 20:43:13,"I believe the version is correct as is -- see http://robots.thoughtbot.com/post/2508037841/twiddle-wakka. You probably need to do `bundle update capybara` instead of `bundle install`.
",jfirebaugh,2011-08-12 20:43:13
449,2011-08-12 23:58:54,"It installed the 0.2.0 instead of the 2.0.0 and above.

On Fri, Aug 12, 2011 at 1:43 PM, jfirebaugh <
reply@reply.github.com>wrote:

> I believe the version is correct as is -- see
> http://robots.thoughtbot.com/post/2508037841/twiddle-wakka. You probably
> need to do `bundle update capybara` instead of `bundle install`.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/449#issuecomment-1794631
",detrain,2011-08-12 20:43:13
449,2011-08-13 00:04:23,"So the reason, I asked for a pull change, was because when I did a bundle
update capybara, it installed capabara 0.2.0 instead.

We are using rubygems 1.8.6 and 1.3.7
The bundler version that we are using are 1.0.15

-Terence Goh

On Fri, Aug 12, 2011 at 4:57 PM, Terence terence.goh@gmail.com wrote:

> It installed the 0.2.0 instead of the 2.0.0 and above.
> 
> On Fri, Aug 12, 2011 at 1:43 PM, jfirebaugh <
> reply@reply.github.com>wrote:
> 
> > I believe the version is correct as is -- see
> > http://robots.thoughtbot.com/post/2508037841/twiddle-wakka. You probably
> > need to do `bundle update capybara` instead of `bundle install`.
> > 
> > ## 
> > 
> > Reply to this email directly or view it on GitHub:
> > https://github.com/jnicklas/capybara/pull/449#issuecomment-1794631
",detrain,2011-08-12 20:43:13
449,2011-08-13 09:09:05,"I think you're not using Capybara's master branch from GitHub, but a regular release, which might depend on 0.2.x. Try updating to Capybara 1.0.1 please, it should solve your problem.
",joliss,2011-08-12 20:43:13
448,2011-08-12 00:13:47,"Capybara 1.0 (also tried HEAD). Selenium driver, Firefox 5, Ubuntu Natty. Selecting items in a dropdown with `page.select(value, :from => ""id"")` is broken. It looks like it selects something, but when the UI posts, the value is not chosen. Calling .select on the option has been seen to work, inconsistently.

As a workaround, a JQuery selection always works, `page.execute_script(""$('#widget_size').val('5')"")`.

A few more details and screenshot here: http://code.dblock.org/selecting-items-from-a-dropdown-with-capybara-selenium-firefox-jquery
",dblock,2011-08-17 11:41:05
448,2011-08-12 11:29:19,"Hmm, not sure if this is something that Capybara is doing wrong, sounds more like a Selenium issue.

This code was recently changed in Capybara due to deprecations in Selenium. It now looks like this: https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/node.rb#L33-35. @jarib, does that seem correct?
",jnicklas,2011-08-17 11:41:05
448,2011-08-13 01:59:17,"Capybara is doing the right thing there. @dblock, would you be able to provide a reduced case - perhaps using [this template](https://gist.github.com/1024843)?
",jarib,2011-08-17 11:41:05
448,2011-08-16 14:46:29,"I tried to repro this in something simpler without any success. It just works - [my gist](https://gist.github.com/1149247). If noone else is having this issue I think it can be closed. Our workaround with JQuery works well.
",dblock,2011-08-17 11:41:05
448,2011-08-17 11:41:05,"Sounds like this is probably something in your application code. I'm closing this issue, if anyoen can reproducs it, I'll reopen.
",jnicklas,2011-08-17 11:41:05
448,2011-08-18 16:30:05,"I've seen the same issue when using chromedriver and the following webrat step.

<S_CODE_TOKEN>

Interestingly the form elements are not in the page when it's loaded, instead they are injected using jQuery and `.html()`. I'm not sure if this is causing the problem but I imagine the issue is likely coming from Selenium and not Capybara.

**BTW** The jQuery approach works for me too.
",jcf,2011-08-17 11:41:05
448,2011-08-19 11:13:31,"> Interestingly the form elements are not in the page when it's loaded, instead they are injected using jQuery and `.html()`. I'm not sure if this is causing the problem

It might be if the jQuery code is being executed too late (so you have
some kind of asynchronicity issue), but apart from that I would expect
it to work fine in general. You could try save_and_open_page to make
sure it does what you expect it to though.

> but I imagine the issue is likely coming from Selenium and not Capybara.

That's right. Perhaps even the Chrome driver (you should try the
Firefox driver just to make sure).
",joliss,2011-08-17 11:41:05
448,2011-08-19 12:03:23,"Thanks for your response.

I've watched Capybaba and selenium and can see the select does not change using `select(option, from: selector)`. And selenium doesn't work with the current version of Firefox, which is what I have on my Mac.

The jQuery based `.val()` approach is fine for now.

On 19 Aug 2011, at 12:13, jolissreply@reply.github.com wrote:

> > Interestingly the form elements are not in the page when it's loaded, instead they are injected using jQuery and `.html()`. I'm not sure if this is causing the problem
> 
> It might be if the jQuery code is being executed too late (so you have
> some kind of asynchronicity issue), but apart from that I would expect
> it to work fine in general. You could try save_and_open_page to make
> sure it does what you expect it to though.
> 
> > but I imagine the issue is likely coming from Selenium and not Capybara.
> 
> That's right. Perhaps even the Chrome driver (you should try the
> Firefox driver just to make sure).
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/448#issuecomment-1850055
",jcf,2011-08-17 11:41:05
448,2015-06-17 08:00:58,"The main problem here is that `val` and `value` are different things.

`val` is a property of the element, accessed with `.val()` and setted with `.val('X')`
`value` is an attribute of the element (in the DOM), accessed with `.attr('value')` and setted with `.attr('value', 'X')`

And we are mixing both here.
",fuzzyalej,2011-08-17 11:41:05
447,2011-08-10 12:29:34,"I use plain Rails test, I open one page which have instance variable and this variable should have list of model but I get empty list.
",wafcio,2011-08-10 15:18:00
447,2011-08-10 15:18:00,"Please use the mailing list for problems which are not verified issues.
",jnicklas,2011-08-10 15:18:00
446,2011-08-10 02:00:20,"This is a hack to fix occasional timing errors related to Selenium. Due to sporadic nature of error, testing may not be possible

I realize the importance of testing... the added sleep, only when necessary, should pass all current tests. I fully understand if this is not the kind of testing rigour that you need.

When this is eventually fixed in Selenium, my hack can remain as it becomes totally benign.
",lazylester,2011-08-11 15:26:43
446,2011-08-11 15:26:43,"Never seen this issue. I'm not going to add any kind of hack like this, unless it's understandable what problems it fixes and is accompanied by tests. Sorry.
",jnicklas,2011-08-11 15:26:43
446,2011-08-11 17:15:07,"Your response is understandable and expected. Do you have any suggestions how to write a test for this? Given that it occurs only sporadically and the root cause is not known. FYI the selenium issue is reported here https://code.google.com/p/selenium/issues/detail?id=2099. Fixing the root cause in Selenium is of course the best solution, but how would you suggest proceeding until that fix is in? I'm at a bit of a loss for ideas.
",lazylester,2011-08-11 15:26:43
446,2011-08-11 17:44:09,"While I feel your pain on the bug, I think this is probably exactly what monkey patches were made for ;) Incorporating this in Capybara isn't really a good solution. The issue should be tracked down and fixed in Selenium.
",jnicklas,2011-08-11 15:26:43
445,2011-08-07 15:00:46,"title says it all
",ahawkins,2011-08-11 17:47:46
445,2011-08-11 17:48:24,"I'd like this to be worded a bit more neutral, it reads like an advertisement, but I've merged it anyway, just to get some docs in there that we can iterate on.
",jnicklas,2011-08-11 17:47:46
444,2011-08-07 13:23:11,"Hi

it would be great if a method to click the submit button of a form could be added, as I tend to often change the value of my submit buttons. So a click_submit or something would be nicer than having all submit buttons with id=submit and using this.
",ghost,2011-08-09 18:01:32
444,2011-08-09 18:01:32,"Not gonna happen. Use `find('#submit').click` instead.
",jnicklas,2011-08-09 18:01:32
443,2011-08-04 21:52:56,"I'd love to see an updated gem release that includes commit e9efc80. (update to allow selenium ~> 2.0 rather than 0.2.0).   Selenium >= 2.3 fixes a lot of bugs, some of which we are depending on.  

Depending on capybara from git (with :git => 'git://github.com/jnicklas/capybara' in Gemfile) is great great in development, but breaks deployment because of a known issue with Bundler and git sources.  (specifically, https://github.com/carlhuda/bundler/issues/67)    The bundler team has sat on that bug for 17 months, so I doubt a fix is in sight.

There are of course workarounds, but an updated capybara would make me happy.  :-)    Thanks for the great work.
",IdahoEv,2011-08-16 22:54:59
443,2011-08-06 21:15:58,"Yeah, the whole bundler thing is very unfortunate.

I'll remember to nudge and prod Jonas about a new release.
",joliss,2011-08-16 22:54:59
443,2011-08-07 03:37:12,"Thanks.   In case anyone else is reading this, the workaround i'm using is to clone capybara in a local directory (I use vendor/git/capybara) and link it in Gemfile with:

 gem 'capybara', :path => 'vendor/git/capybara'

Bundler package (in current versions) handles :path correctly, even though it can't do :git.
",IdahoEv,2011-08-16 22:54:59
443,2011-08-07 03:55:21,"oops, didn't mean to close it.
",IdahoEv,2011-08-16 22:54:59
443,2011-08-16 22:54:59,"Thanks for the release of 1.0.1 ... works great!  Closing the issue.
",IdahoEv,2011-08-16 22:54:59
442,2011-08-03 15:19:46,"<S_CODE_TOKEN>

`:from` and `:with` are the single options these methods accept. And they are required, you cannot omit them. So what is the point to use them instead of just another one argument? And is there a point to shuffle field name and value between these methods? I think the following syntax will be much more consistent and easier to use.

<S_CODE_TOKEN>

The implementation will be simplified too.
",semaperepelitsa,2011-08-11 17:51:42
442,2011-08-03 18:29:18,"I think I would prefer to keep the existing convention. Reasons being that it reads more naturally, is easier to extend in the future should more options be added, and that changing imposes a cost on current users.
",jfirebaugh,2011-08-11 17:51:42
442,2011-08-11 17:51:42,"Agree with @jfirebaugh. These APIs are taken verbatim from Webrat. I think they read quite nicely tbh.
",jnicklas,2011-08-11 17:51:42
441,2011-08-02 02:11:05,"I want to support visitors without javascript, so I've added a 'delete' member to my  resource routes. My non-js links look like /posts/3/delete. These then present a form to the user which then does a post request to the destroy action. I'm using extra javascript to strip off the /delete so that the links still work correctly for those who have it turned on.

The problem I've run in to, is that Capybara wants to follow the /posts/3/delete links using an HTTP DELETE request, but it doesn't support the javascript which strips off the /delete. Is there a way I can tell Capybara to just follow all links with HTTP GET?

Edit: Sorry, I just realized I should've posed this on the mailing list.
",scottmartin,2011-08-02 03:51:02
440,2011-07-30 10:38:54,"Actually, it's this request - https://github.com/jnicklas/capybara/pull/434 I just screwed up that one.
",nashby,2011-11-15 15:13:58
440,2011-08-10 15:58:51,"I see how this could be useful, but I'm not 100% sure this is the right approach. We should probably explicitely cast #to_s, but this isn't about just integers, there are any number of objects which could be sent in here. I think the tests should reflect that.
",jnicklas,2011-11-15 15:13:58
440,2011-11-15 15:13:58,"As I mentioned in #312, I'd really like to see a pull requests which addresses this problem everywhere. Closing this in favour of #312.
",jnicklas,2011-11-15 15:13:58
439,2011-07-27 06:13:00,"I think something broke the post method in between versions 0.4.1.2 and 1.0 in regards to the post method.

I have a simple spec similar to the following:

<S_CODE_TOKEN>

With version 0.4.1.2, I expected to see a last response with the status and the body, similar to this:

<S_CODE_TOKEN>

This seems to have change as my spec now returns this error:

<S_CODE_TOKEN>

Switching back to Capybara 0.4.1.2 seems to fix the issue.
",eddorre,2011-08-10 16:04:10
439,2011-08-10 16:04:10,"Capybara doesn't have a #post method, it never has. You are not using Capybara if you're calling #post. Capybara doesn't have #last_request either for that matter. These look like rack-test methods to me.
",jnicklas,2011-08-10 16:04:10
438,2011-07-26 21:59:04,"It took me a while to figure this one out. I had a custom step that was working fine while not using selenium, and then it broke with it, giving me the error

<S_CODE_TOKEN>

Here is a simplified version of my step definition

<S_CODE_TOKEN>

I couldn't find anything on this error, but in debugging mode I noticed that when I tried to grab find_field(label), it had a path attribute while not running with javascript and returned path correctly. Running javascript, it did not show the attribute when I inspected the element (find_field(label)), and when I asked for path gave me the error above. 

After playing for a while with the methods I found in Capybara::Element#methods, I found that has_content? still worked and did what I needed it to. So I have this now

<S_CODE_TOKEN>

which works, and is much more concise anyway. Still, I'm wondering why Capybara elements don't have paths when in javascript mode and if this is something that should be changed for better consistency between running with and without javascript. Any thoughts?
",metasoarous,2011-08-10 16:02:56
438,2011-07-29 22:29:02,"> <S_CODE_TOKEN>

Just a heads-up for your code: This is a no-op and doesn't test anything. I think you mean `select.should have_content option`. As for your actual question, I have no idea, but Jonas might.
",joliss,2011-08-10 16:02:56
438,2011-07-29 22:40:50,"Ah, yes - thank you.
",metasoarous,2011-08-10 16:02:56
438,2011-08-10 16:02:56,"Selenium doesn't support retrieving the #path from elements. That's pretty much all there is to why we don't support it in Capybara.

You want this btw:

<S_CODE_TOKEN>
",jnicklas,2011-08-10 16:02:56
438,2011-08-11 07:10:57,"That makes sense. I guess I could make a suggestion or request on their end, as that would certainly be nice.

And thanks for the have_select suggestion. That is more appropriate.

Cheers
",metasoarous,2011-08-10 16:02:56
437,2011-07-26 17:51:51,"Fix the warning that appears when running the capybara tests

DEPRECATION WARNING: you are using deprecated behaviour that will
be removed from RSpec 3.

You have set some configuration options after an example group has
already been defined.  In RSpec 3, this will not be allowed.  All
configuration should happen before the first example group is
defined.  
",twalpole,2011-07-29 22:38:53
437,2011-07-29 22:38:53,"Thanks! Pulled in 891eb9e10. For clarity I've added a comment saying

<S_CODE_TOKEN>
",joliss,2011-07-29 22:38:53
436,2011-07-26 17:13:28,"All tests pass under the new webdriver 2.2 and issue #425 was fixed there
",twalpole,2011-07-29 23:10:22
436,2011-07-27 20:55:34,"nguyenchiencong: I'm not really sure what this stack dump is from or showing me -  issue #425 had to do with the Webdriver iphone bridge not being initialized correctly - and was fixed in selenium-webdriver 2.2. 
",twalpole,2011-07-29 23:10:22
436,2011-07-27 21:06:57,"nguyenchiencong:  You're running a really outdated version of cucumber-rails - and are running into an issue with when capybara changed its namespace organization months ago - this was fixed in cucumber-rails on may 9th
",twalpole,2011-07-29 23:10:22
436,2011-07-29 22:45:12,"I'm not sure that we should be bumping the webdriver dependency for bugfixes that have nothing to do with Capybara -- obviously every webdriver update has bugfixes, and if you want them you'll have to `bundle update`. So as long as we're not actually testing against the iPhone driver in the Capybara test suite, I think there's no need to force people to upgrade.
",joliss,2011-07-29 23:10:22
436,2011-07-29 23:13:30,"Wait, actually `bundle update` won't pull webdriver 2.2, since we were specifying `~> 2.0.0`. So I guess it _is_ reasonable to bump the dependency to the newest release. I just merged this pull request.

@jarib, should Capybara be using `~> 2.0` instead? How likely do you think is the API to break in backwards-incompatible ways between minor release in the 2.x branch?
",joliss,2011-07-29 23:10:22
436,2011-07-29 23:19:42,"Not very likely at this point, and with our current policy of having A.B versions follow the Java releases and keep C for Ruby-specific releases, `~> 2.0` makes a lot of sense for Capybara I think.

The Selenium project will be doing weekly bug fix releases for about a month (bumping B each time) going forward, so you'll probably miss out on a bunch of stuff with a stricter dependency.
",jarib,2011-07-29 23:10:22
436,2011-07-30 01:07:00,"Cool, I've changed the dependency spec to point to `~> 2.0`.

I'm a bit worried that we might start relying on features in later versions of webdriver (like 2.2) and not notice when things stop working with the older version (2.0). But I wonder, maybe it's really time for a build server with a build matrix. I've been trying to get Travis-CI working but I'm stuck waiting for this change to go live: https://github.com/travis-ci/travis-worker/pull/5
",joliss,2011-07-29 23:10:22
435,2011-07-25 20:51:01,"Capybara should update the gem dependency to get 2.0.4 in https://github.com/jnicklas/capybara/blob/master/capybara.gemspec

Re: https://github.com/jnicklas/capybara/pull/420#issuecomment-1647096 (and other issues)
",trevorturk,2011-07-25 20:53:07
435,2011-07-25 20:53:07,"Fixed in https://github.com/jnicklas/capybara/commit/6641fddcfc337a3ddaa84ac59272e884090332c3
",trevorturk,2011-07-25 20:53:07
435,2011-07-25 20:53:49,"Pushed the very same minute. ^_^ Thanks!
",joliss,2011-07-25 20:53:07
435,2011-07-25 20:55:10,"Talk about a speedy response! :thumbsup:
",trevorturk,2011-07-25 20:53:07
434,2011-07-25 18:34:35,"Add ability to use integer in the fill_in :with param. It can be useful when filling inputs with ids from the model like:

<S_CODE_TOKEN>
",nashby,2011-07-30 10:17:59
434,2011-07-25 21:19:01,"Hm, I wonder, what about Selenium, does it accept ints? We should probably try not to be inconsistent here.

And aren't there are other types of inputs that also should allow integers for consistency?
",joliss,2011-07-30 10:17:59
434,2011-07-27 05:41:34,"According to this code

<S_CODE_TOKEN>

which is invoking when we using `fill_in`, selenium-webdrive accepts ints. (`arg.to_s`)
With regard to other inputs, I think I should fix `select` method. 

<S_CODE_TOKEN>

and when I'll try to get this value form the page like 

<S_CODE_TOKEN>

it'll be String. I think it's ok. What do you think?
",nashby,2011-07-30 10:17:59
434,2011-07-29 22:25:40,"> With regard to other inputs, I think I should fix `select` method.
> 
> <S_CODE_TOKEN>
> 
> and when I'll try to get this value form the page like
> 
> <S_CODE_TOKEN>
> 
> it'll be String. I think it's ok. What do you think?

Yup, I think that'd be OK.

I don't have an opinion about the change as a whole, but I reckon
Jonas will when he gets back. :-)
",joliss,2011-07-30 10:17:59
434,2011-07-30 11:32:31,"====> Discussion continues in #440.

(Hm, funny how the commits broke when you repushed -- shouldn't normally happen. For what it's worth, I think you might have an easier time maintaining and repairing pull requests if you use feature branches instead of master. It works pretty well for me anyway.)
",joliss,2011-07-30 10:17:59
433,2011-07-25 07:38:18,"When running a simple test:

<S_CODE_TOKEN>

I get

<S_CODE_TOKEN>

(when running this locally Google actually returns page with 13 inputs - YMMV).

The point is, to me the message _expected css ""input"" to return something_ is very confusing. I would expect this message when page has _no_ input-elements at all. In my case, I'd rather have error like 

<S_CODE_TOKEN>
",merryprankster,2011-08-10 15:55:59
433,2011-07-25 10:27:13,"I experimented a bit and came up with a custom RSpec matcher:

<S_CODE_TOKEN>

I'm not sure if this is the way to go, though, as for instance, it does not cover cases where you want to do XPath selection (and probably some others).

Also, I think it really should be Capybara providing this kind of functionality (as opposed to a project defining as custom matcher). There is no reason for obscure error messages.
",merryprankster,2011-08-10 15:55:59
433,2011-07-25 11:03:18,"Ah..I guess this would be a duplicate of https://github.com/jnicklas/capybara/issues/331
",merryprankster,2011-08-10 15:55:59
433,2011-07-25 21:51:09,"Hey Janne, thanks for the report. Hm, I wonder if it _is_ a dup. I don't understand the intricacies of RSpec failure messages (and Jonas's plans for them) well enough to tell for sure, so I think I'll just reopen this so Jonas sees it -- if he thinks it doesn't need a separate issue, he'll just close it.
",joliss,2011-08-10 15:55:59
433,2011-08-10 15:55:59,"Better error messages for options such as :count, and :visible are definitely part of #331. Make no mistake though #331 is a major engineering effort, and it's going to take a lot of dedication to do it right.
",jnicklas,2011-08-10 15:55:59
432,2011-07-24 00:00:29,"I was finding that save_and_open_page was giving me headaches when used under Rails - when asset_root is set, it was doing string manipulations and then trying to treat them as directories.  That and adding a file protocol to the path passed to Launchy.
",nyarly,2011-11-10 04:32:54
432,2011-07-25 20:51:12,"This is not necessary. See https://github.com/jnicklas/capybara/issues/435
",trevorturk,2011-11-10 04:32:54
432,2011-07-25 21:13:28,"The file: protocol is only part of the request.  Line 36 of save_and_open_page is more important.
",nyarly,2011-11-10 04:32:54
432,2011-07-30 01:01:30,"If I try to just apply that chunk, like here ...
https://github.com/joliss/capybara/commit/6a151828668fdeb157cf1ce3bd80eda94bf83ad6
... I still get the following errors:

<S_CODE_TOKEN>

(2) is easily fixable in the test code, but (1) looks like some functionality is breaking.

The failing test doesn't go away even if instead of using `File.directory?`, I just force asset_root to be a Pathname object, like in the following diff. (I tried that because I expect that the issue you are seeing happens when asset_root is a plain string instead of a Pathname object like normally.)

<S_CODE_TOKEN>

So for now I'm not sure what's going on, but I obviously can't merge this as it is. Would you mind trying to figure out in what specific cases the existing code is failing for you, and how to fix it while keeping the test suite passing?
",joliss,2011-11-10 04:32:54
432,2011-11-10 04:32:54,"I'll close this for inactivity -- feel free to reopen of course, if you have any insights on what's causing the test to fail.

/cc @jnicklas
",joliss,2011-11-10 04:32:54
431,2011-07-22 13:25:10,"Hi,

Have whipped up a mechanize driver for Capybara (with tests) based off the 1.0.0 tag! 

There is a catch though, I found a false positive in the RackTest driver (it was incorrectly matching the string it was looking for in a Sinatra error backtrace). So, although all the Mechanize driver tests are green there is a single failure in the app.

Cheers,
Chris
",clowder,2011-08-12 07:40:08
431,2011-07-26 20:45:27,"Are you familiar with [capybara-mechanize](https://github.com/jeroenvandijk/capybara-mechanize)?

Can you speak to the merits of this implementation over the capybara-mechanize gem?
",robolson,2011-08-12 07:40:08
431,2011-07-27 14:43:52,"Hi Rob,

I guess the main advantage of my driver, and the reason I wrote it, is that all the specs are passing on the one above (with the exception of clowder/capybara@392dfa88c4bbc46b24331f01f54c27e844fb158e, where the rack-test specs are incorrectly matching against a Sinatra backtrace). 

The capybara-mechanize driver comes with the caveat that it ships with specs commented out.

I also thought that it would be good to get something into Capybara core and leverage the community round Capybara to help maintain the code.

Cheers,
Chris
",clowder,2011-08-12 07:40:08
431,2011-07-29 23:48:05,"Hm, this is very interesting. Let's Cc @jeroenvandijk (of capybara-mechanize) on the discussion as well.

When I merge your branch on master, I see _two_ failing tests right now:

<S_CODE_TOKEN>

(2) is the false negative you mentioned -- perhaps it's reasonable to mark it `pending` for now, as long as it's broken?

(1) only happens when I merge on master, not in your repo. Would you mind taking a look?
",joliss,2011-08-12 07:40:08
431,2011-07-30 08:16:17,"@clowder Wow great work!

I would be glad if this would be merged (assuming everythings works fine) into master. This might sound weird from the guy who wrote the 'competing' driver, but the following explains it quite well I think. I have built my capybara-mechanize driver with a specific use case in mind. I didn't have a non-ruby or remote application that I wanted to test with Capybara. My goal was to test the interaction between sites like facebook and my local application. And although I wanted to support the non-ruby case I never found the need and therefore enough time to figure out how I could make those commented out specs passing.

A few things are on my mind right now. If this is gonna be merged I'll need to consider some practicalities as updating the mechanize dependency, renaming the library to something like Capybara-Connect (*). However I also should consider the case where it might be better to shut down my version. If @clowder's version covers my personal use case I'll probably do that. The only advantage of my driver would then be that things are a bit faster for the local part of local-to-remote case (no http just RackTest in memory), but I'm not sure if that performance advantage is enough of a reason to maintain a seperate driver and it would also confuse the community.

@clowder I would appreciate if you could indicate whether or not you think my use case would be covered by your driver? If not, I would like see if we could work together to support that.

All in all I'm very happy to see this pull request. It will be a great addition for the non-ruby applications since I have never have been able to tackle that part perfectly.

(*) Which is actually a pretty good name now I come to think of it, right? :)
",jeroenvandijk,2011-08-12 07:40:08
431,2011-08-02 09:53:02,"Morning Guys!

@jeroenvandijk This should defiantly sort you out. I'm using it for a similar reason at the moment! RackTest was taking the external links to our payment processor and forwarding them to Rails (_KaBOOM!_). I'm using this driver and FakeWeb to stub out and test responses from the processor. 

@joliss I'll rebase my feature branch off HEAD and get that sorted out! I'll have to give it a `push -f` to get this pull request updated. Can you make sure you delete any versions of the mechanize branch that you have.

Cheers,
Chris
",clowder,2011-08-12 07:40:08
431,2011-08-02 23:07:43,"On Tue, Aug 2, 2011 at 11:53, clowder
reply@reply.github.com
wrote:

> @joliss I'll rebase my feature branch off HEAD and get that sorted out! I'll have to give it a `push -f` to get this pull request updated. Can you make sure you delete any versions of mechanize the branch that you have.

Great, thanks. Feel free to rebase as much as you want -- I don't
expect to be able to work on top of other people's feature branches
(unless I'm prepared to deal with incessant `push -f`'ing). I don't think
most people would. :-)

Jo
",joliss,2011-08-12 07:40:08
431,2011-08-10 15:53:46,"This is very good work imo. The only problem I see is the addition of dependencies. Not sure how I feel about that, since we're already getting heat for the selenium and rack-test dependencies. What do you guys think?
",jnicklas,2011-08-12 07:40:08
431,2011-08-11 08:44:29,"I agree with @jnicklas that it adds yet another dependency. As an application developer however I normally don't mind having some extra dependencies in the test part of my application as long as they don't conflict with application gems, but chances are they will.

I am more than willing to rename or deprecate (one of the two, depending on the feature set) the capybara-mechanize gem so that it can be used by this work instead. As long as we mention the driver in the Readme people should be able to find it. Another choice could be to make a move like RSpec where you start with Capybara-Core Capybara-Selenium etc etc.
",jeroenvandijk,2011-08-12 07:40:08
431,2011-08-11 09:24:10,"Morning all. Given the current trend of decoupling software to allow developers to pair their applications down to the most minimum set of requirements, it might be best for this to exist separately from capybara. 

I have currently got an gemified version of this code [clowder/mechwarrior](https://github.com/clowder/mechwarrior) that I have been using in my apps and was planning to deprecate once this had been merged. But maybe it would be best for it to live there for now.
",clowder,2011-08-12 07:40:08
431,2011-08-11 17:46:59,"I'm currently considering if we should have a capybara-core gem, with no drivers and a separate capybara gem which includes selenium and rack-test, maybe then we could add mechanize as well. For the time being, maybe a separate gem would be better though.
",jnicklas,2011-08-12 07:40:08
431,2011-08-12 07:40:08,"Sounds like a plan mate. Cheers!
",clowder,2011-08-12 07:40:08
430,2011-07-22 11:00:00,"_(this could be related to #376, not sure though)_

I've been having a problem with capybara, cucumber and my multi-domain app.

When I try to go through the process of logging in, I get an unexpected error related to the routing:

<S_CODE_TOKEN>

resulting error (caused by the click_button action): `No route matches [POST] ""/aanmelden"" (ActionController::RoutingError)`

This is caused by the `login_path` used in the form. However, when I change the form to use `login_url`, the test suddenly works.

It seems as though capybara somehow loses the relevant host part and simply submits the form without any host data (or perhaps the default capybara host, instead of the host of the current page), which would explain why the test works when using `login_url`, because the host data is included.

Any information on this, or a possible solution/workaround that doesn't involve me using `*_url` everywhere in my views?
",JeanMertz,2011-08-11 15:11:30
430,2011-07-22 11:28:44,"After looking into this some more, I think this problem is related to this rack-test pull request: **[Subdomain / Host awareness](https://github.com/brynary/rack-test/pull/23)** _(which was denied, stating that this should be solved by Capybara instead of rack-test)_. I also now believe this is 100% related to the above mentioned issue #376.

I wonder if this has been addressed already, I haven't found anything in the commits so far, and I still haven't found a sure-fire way of solving this issue without changing all path's to url's in the views.

**edit**
I can solve it by using `Capybara.default_host = ""mydomain.dev""` each time I need Capybara to use a different domain, but I still don't see why it wouldn't be better to simply use the host of the current page when a relative path is clicked.

For now I solved it by adding this to my `env.rb`:

<S_CODE_TOKEN>

I won't close this just yet, like to know what @jnicklas thinks of this.
",JeanMertz,2011-08-11 15:11:30
430,2011-08-05 06:42:22,"Actually, the above doesn't work for `POST` actions, I set the `default_host` variable right before the `click_button` action, but it still doesn't use that domain. For now using `login_url` instead of `login_path` works, I still hope someone can respond with a possible solution for this.
",JeanMertz,2011-08-11 15:11:30
430,2011-08-10 15:50:43,"Which version of Capy are you using? AFAIK this is fixed in 1.0.
",jnicklas,2011-08-11 15:11:30
430,2011-08-11 15:11:11,"Okay, wow. Not sure how or what, but `gem ""capybara""` installed an older 0.4 version of Capybara. I just changed it to `gem ""capybara"", ""~> 1.0.0""`.

It's working now. Thank you for pointing this out, better watch out for other outdated gems as well, I always figured adding `gem xxx` without any version number always gets the latest version of that gem. Guess not?
",JeanMertz,2011-08-11 15:11:30
430,2011-08-11 19:22:47,"Perhaps you forgot to `bundle update [capybara]`? Bundler doesn't automatically update your gems.
",joliss,2011-08-11 15:11:30
430,2011-08-11 19:28:40,"Doesn't `bundle update` update all gems? If that is the case then yes, I updated all gems almost daily.
",JeanMertz,2011-08-11 15:11:30
430,2011-10-20 11:26:50,"I think I have same issue with Capybara 1.1.1 when using external URL.

View:

<S_CODE_TOKEN>

Spec:

<S_CODE_TOKEN>

Error:

<S_CODE_TOKEN>

Setting default_host or app_host doesn't help.
",jarijokinen,2011-08-11 15:11:30
430,2011-10-20 12:43:36,"@jarijokinen: You can't access external URLs with RackTest, you need to use another driver. Please use the mailing list for these kinds of question in the future.
",jnicklas,2011-08-11 15:11:30
429,2011-07-22 09:21:01,"I have a test defined like this:

<S_CODE_TOKEN>

its a pretty simple that that sets customer to my customer factory and then fills in the new actions form with the data from that factory (what my factory_to_form macro does) and the clicks the submit button. 

My problem is that the submit button never seems to touch the create action, its going to ""/customers"" and not saving the customer.

The form is a standard `form_for(@customer)` and the button is just `f.submit`, I can't think of any reason why this form would work fine in the browser but not in this test.

Why would capybara not be posting to the right place?

I've written the test for another controller and the same thing happens.
",Arcath,2011-07-29 23:02:56
429,2011-07-29 23:02:56,"This is not the best place to post questions like this -- I recommend you repost this on the mailing list.

My first random idea would be synchronization issues (because Customer.last hits the DB), but I'm not sure what's going on with your test.
",joliss,2011-07-29 23:02:56
428,2011-07-21 23:59:25,"I was pulling my hair out for 3 hours today trying to figure this out. I realise that Timecop is not really related to Capybara and I would understand your hesitation to pulling this in, but it is an awkward bug to discover.

I was blaming versions & incompatibilities between Cucumber, Capybara, Firefox - and all the time it was Timecop doing what it was meant to be doing.

What do you think?
",olly,2011-07-25 21:08:47
428,2011-07-22 09:26:08,"OK, fair enough. I'll write up a patch for Timecop to get a supported API.

I don't know whether you want to close this in the meantime and then I'll re-open it when I've got a patch in.
",olly,2011-07-25 21:08:47
428,2011-07-25 21:08:47,"I'll close this in the meantime -- feel free to reopen when you repush (or leave a comment if GitHub won't let you reopen it).
",joliss,2011-07-25 21:08:47
428,2011-08-10 15:48:30,"Use Timecop.travel and not Timecop.freeze with Capybara.
",jnicklas,2011-07-25 21:08:47
427,2011-07-21 23:43:39,"Both of these should be optional.  If you only plan on using capybara with the default rack-test driver, there is no reason you should be forced to install selenium-webdriver (and vice versa).  I could see keeping a runtime dependency on rack-test since it's the default and it's small and self contained, but I definitely think the selenium-webdriver runtime dependency should go.
",jeremyevans,2011-07-22 09:42:52
427,2011-07-22 09:42:52,"This is a duplicate of #386 -- the answer is that Jonas (sensibly, IMO) doesn't agree that the selenium-webdriver dependency should be dropped.

Is it causing any issues for you, besides pulling a few gems onto your system?
",joliss,2011-07-22 09:42:52
427,2011-07-22 15:48:13,"For one thing, it makes it impossible to install capybara on a system without a compiler, since selenium-webdriver requires ffi which requires a C compiler to install.  Second, it's just a good practice to not require things that are technical optional (in this case, it adds 5 extra gem dependencies).  No big deal though, I just cloned the repo, modified the gemspec to remove the dependency, and build and installed the gem.
",jeremyevans,2011-07-22 09:42:52
427,2011-08-10 15:46:41,"@jeremyevans: I agree that less dependencies is a good thing, but in this case the usability really trumps, imho. And unless Rubygems integrates a way to specify optional dependencies we'll have a hell of a time with compatibility to different versions of our dependencies.

The alternative is to extract all drivers into separate gems, and I'm currently not really willing to do that.
",jnicklas,2011-07-22 09:42:52
427,2011-08-10 16:01:52,"If you want an easy (if ugly) way to fix this, just ship two gems.  Add a capybara-core gem that doesn't have the optional dependencies.  Make capybara depend on capybara-core and the optional dependencies.  That's backwards compatible for users, installs the optional dependencies by default, while still allowing users to use capybara without installing the optional dependencies.
",jeremyevans,2011-07-22 09:42:52
426,2011-07-21 15:59:09,"Hi, in issue #312 @priit comment the possibility of use symbols for fill_in, (https://github.com/jnicklas/capybara/issues/312) I think that this is a more natural form instead of use strings because we are already using symbols in forms to designate controls as   `f.text_field :something`   and use   `fill_in :something, :with => ""anything""`   its more clear. 
",csegura,2011-08-10 15:43:17
426,2011-08-10 15:43:17,"So why did you open a new issue? I think a pretty good discussion on the subject has been held under #312. If you have anything else to say on the subject, please contribute there.
",jnicklas,2011-08-10 15:43:17
425,2011-07-20 21:31:46,"Not sure if this belongs against capybara, or against http://code.google.com/p/selenium/wiki/IPhoneDriver, but in selenium-webdriver, Selenium::WebDriver::IPhone::Bridge expects to be instantiated with nil or a hash of options:

http://code.google.com/p/selenium/source/browse/trunk/rb/lib/selenium/webdriver/iphone/bridge.rb

Capybara instantiates it with an empty hash, by default:

https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/driver.rb#L15

this means that (in the first linked file), super is called without the DEFAULT_URL, so it tries to access the IPhoneDriver at localhost:4444 (selenium default) instead of localhost:3001/hub (correct URL for IPhoneDriver).
",jasonm,2011-07-21 12:42:09
425,2011-07-20 21:32:32,"It's possible that selenium-webdriver should be more open about the args it accepts, and e.g. merge a default hash with opts.
",jasonm,2011-07-21 12:42:09
425,2011-07-21 11:08:38,"Hm, seems a little peculiar on selenium-webdriver's side, though not obviously wrong. Before we go fixing the Capybara code, let's have @jarib weigh in. What do you think, Jari?
",joliss,2011-07-21 12:42:09
425,2011-07-21 11:51:29,"Yeah, that's my fault. I've fixed it here:

  http://code.google.com/p/selenium/source/detail?r=13019
",jarib,2011-07-21 12:42:09
425,2011-07-21 12:42:09,"Sweet -- thanks Jari! I'm closing this.

Jason, feel free to comment or reopen if there are any issues left!
",joliss,2011-07-21 12:42:09
425,2011-07-26 16:58:03,"This change was released today as part of selenium-webdriver 2.2.0
",twalpole,2011-07-21 12:42:09
424,2011-07-20 19:57:37,"Since the deprecation warning will not be available until release 1.0.1, I created a branch call 1.0.0_patched which is 1.0.0 plus the one commit that fixes that issue.

Anyone using Capybara between now and the 1.0.1 release can point their Gemfile to the 1.0.0_patched branch to eliminate the deprecation warnings easily.
",derekcroft,2011-07-26 11:20:12
424,2011-07-26 11:20:12,"I´m on holiday right now, there will be a point release when I get back. In the meantime, I think it´s pretty safe to use master.
",jnicklas,2011-07-26 11:20:12
423,2011-07-20 08:16:46,,fivetwentysix,2011-07-25 20:47:42
423,2011-07-21 18:48:07,"Isn't https://github.com/jnicklas/capybara/pull/420 enough?
",trevorturk,2011-07-25 20:47:42
423,2011-07-25 20:47:42,"I think this is now unnecessary since it has been fixed in launchy: https://github.com/copiousfreetime/launchy/issues/28
",joliss,2011-07-25 20:47:42
422,2011-07-20 00:27:41,"Currently if an application changes it's host or protocol through the use of a redirect capybara doesn't correctly update the current_host for subsequent requests. This behavior is useful for sites which use redirects to transfer users to an SSL version of the page they attempted to visit.

This pull request contains a test case exhibiting the behavior and the changes to correct it. There is a failing test on the selenium driver side but I believe it's because the updated test application isn't running on heroku (and SSL must be enabled on it) before it will pass. What is the process for updating that app?

I tried my best to follow the style of the rest of the project, if something is amiss let me know and I'll do my best to fix it.
",mcolyer,2011-08-11 15:25:05
422,2011-07-25 20:00:32,"This is a dup of #409, but I'm not sure which one is better at the moment. Let's continue the discussion at #409 so we have it in one place (see my message there).
",joliss,2011-08-11 15:25:05
422,2011-07-27 17:16:36,"I am writing an app that enforces SSL throughout. My capybara tests were breaking but were all fixed once I switched to mcolyer's branch. +1 for me, except for one thing: the fix seems to have changed the signature of page.current_url to know longer include the query string. May want to change that one part.
",subelsky,2011-08-11 15:25:05
422,2011-07-27 17:26:57,"if anyone else has this problem, here's the workaround that I'm using:

<S_CODE_TOKEN>
",subelsky,2011-08-11 15:25:05
422,2011-07-29 21:15:01,"@subelsky Thanks for catching that, I went ahead and fixed last_request to return the query parameters as well.
",mcolyer,2011-08-11 15:25:05
422,2011-07-29 22:17:58,"So why are we changing current_url at all? I read the commit message,

<S_CODE_TOKEN>

but it's not used in the test you added, is it?
",joliss,2011-08-11 15:25:05
422,2011-07-29 23:15:55,"@joliss a fair point. I went ahead and reverted to the original implementation.
",mcolyer,2011-08-11 15:25:05
422,2011-07-29 23:19:56,"I think you can just use `rebase -i` and remove the commits, by the way. (For less clutter in the history and more glory for you. ^^)
",joliss,2011-08-11 15:25:05
422,2011-07-29 23:22:19,"I try to avoid rebasing public branches as it causes much sadness to others
who have pulled from you.
",mcolyer,2011-08-11 15:25:05
422,2011-07-29 23:42:17,"Idk, I'm not so worried about rebasing for these kinds of transient feature branches. Usually people don't expect to be able to build on them, I think. (Cleaning up the history makes it easier to review, on the other hand, which I think is much more important.)
",joliss,2011-08-11 15:25:05
422,2011-08-11 01:04:07,"I removed ruby-debug as requested.

FYI there is ruby-debug19 which will work with ruby 1.9 and you can combine that with the :platform option in the Gemfile to conditionally include it.
",mcolyer,2011-08-11 15:25:05
421,2011-07-19 19:32:45,"So this is a pretty big limitation... We have a lot of tests of logged-in functionality at our company, and it would make our test suite run significantly faster if we could get to a logged-in state without having to navigating to and submit the login form for each test.

So I wanted to brainstorm a bit about how this could be worked around, even if only for a subset of the drivers. Basically we need to figure out the contents of the cookie that the Rails app would send to the client, and give it to the client directly, right? I assume that `rack-test` could be hacked into doing this somehow, but do you know if Selenium can ""feed the browser a cookie""?
",levity,2011-07-20 07:00:18
421,2011-07-20 07:00:18,"If you´re using Devise or something similar, you can use the token authentication to login on your first request, we´re doing his in an app with a slow suite so we don´t have to spend so much time logging in. But manipulating the cookies directly would be exceedingly difficult.

Also, please post questions like this to the mailing list.
",jnicklas,2011-07-20 07:00:18
421,2012-01-16 23:01:37,"https://github.com/railsware/rack_session_access
",ayanko,2011-07-20 07:00:18
420,2011-07-19 12:39:48,"Added ""file: "" as a prefix to the path in ""open_in_browser"" to make it work with Launchy/Cucumber again.
",johanb,2011-07-25 20:45:41
420,2011-07-21 18:56:56,"+1
",trevorturk,2011-07-25 20:45:41
420,2011-07-21 21:18:07,"+1 also. I had thought this was a launchy bug (https://github.com/copiousfreetime/launchy/issues/28) but it looks to me as if the fix needs to be here in capybara.
",skaufman,2011-07-25 20:45:41
420,2011-07-22 12:54:51,"+1
",kimf,2011-07-25 20:45:41
420,2011-07-25 16:38:52,"This is definitively fixed now in Launchy 2.0.4: https://github.com/copiousfreetime/launchy/issues/28
",skaufman,2011-07-25 20:45:41
420,2011-07-25 20:45:41,"Good to see this fixed in launchy -- I guess we can go without file URLs then, so I'm closing this. (It's actually slightly better to have plain paths in my view, because things can go wrong when you try to to convert paths to URLs across platforms).
",joliss,2011-07-25 20:45:41
420,2011-07-25 20:47:46,"Capybara should update the gem dependency to get 2.0.4. 

https://github.com/jnicklas/capybara/blob/master/capybara.gemspec
",trevorturk,2011-07-25 20:45:41
420,2011-07-25 20:52:23,"Good idea -- done.
",joliss,2011-07-25 20:45:41
420,2011-07-25 21:01:09,"Actually, this is only a development dependency, so you'll have to update your Gemfiles yourselves. I wonder if Capybara should just add launchy as a runtime dependency?
",joliss,2011-07-25 20:45:41
420,2011-07-25 21:02:58,"I wouldn't since it's optional. 
",trevorturk,2011-07-25 20:45:41
420,2011-07-25 21:03:16,"Yeah if people ask, they should ""bundle update launchy"" basically.
",trevorturk,2011-07-25 20:45:41
420,2011-07-28 20:37:57,"Just an FYI:

Developers with Omniauth and Capybara won't be able to use Launchy 2.0.4, as there's a gem dependency conflict with the addressable gem:

<S_CODE_TOKEN>

I know this isn't a bug with Capybara.  Just putting it here to hopefully save some people time.
",eric-hu,2011-07-25 20:45:41
420,2011-07-29 20:39:06,"> Just an FYI:
> 
> Developers with Omniauth and Capybara won't be able to use Launchy 2.0.4, as there's a gem dependency conflict with the addressable gem:
> 
>    omniauth depends on
>      addressable (= 2.2.4)
> 
>    launchy (>= 2.0.4) depends on
>      addressable (2.2.6)

That's icky. Good thing launchy is not a runtime dependency then, huh.

@intridea, perhaps the omniauth dependencies should be relaxed a bit?
",joliss,2011-07-25 20:45:41
420,2011-07-29 21:39:13,"That's icky. Good thing it's not a runtime dependency then, huh.

The dependency has actually been relaxed on omniauth's master, btw, so it should play with launchy again. https://github.com/intridea/omniauth/pull/373
",joliss,2011-07-25 20:45:41
419,2011-07-18 21:51:09,"Closes issue #418.

Allows user to set Capybara.reset_session_after_each = false.
This will prevent the session from being cleared after each rspec test.
",kberridge,2011-08-30 07:50:41
419,2011-07-25 22:04:37,"From #418:

> But there are times when I would prefer that management of the session state was left up to me (ex: to avoid the need to login before every test).

Aren't tests supposed to be independent? That is, aren't you introducing subtle dependencies on the execution order of your tests if you rely on your session persisting?
",joliss,2011-08-30 07:50:41
419,2011-07-25 23:03:01,"Yes!  But I'm controlling the scope of those side effects using a wipe => :true selector on my describe blocks.  I have a config.after(:all, :wipe => :true) hook that clears the database and wipes the session.  

This allows me to not have to login (for example) before every single test.

It certainly gives me the power to shoot myself in the foot if I'm not careful, so I can understanding leaving capybara's default reset_session_after_each to true.  But it also gives me the power to control exactly when state gets wiped, which is useful for improving test run times, and for writing nested describes.
",kberridge,2011-08-30 07:50:41
419,2011-07-28 12:51:56,"I would like to use areset_session_after_each config option as well for the same reasons @kberridge mentioned. 
",weidenfreak,2011-08-30 07:50:41
419,2011-07-29 20:54:45,"I like the use case -- speeding up tests is always good -- but I wonder if it's not something that belongs into RSpec.

After all, there may be other gems (like DatabaseCleaner) registering before/after hooks that you'd also have to stop from running. Plus perhaps even your own context-specific setup and teardown code. I think this could reasonably be handled in a central place by RSpec.

I also wonder if there isn't a better alternative to the :wipe => true syntax, by the way. For example, you could write it this way:

<S_CODE_TOKEN>

Where :readonly indicates that a test doesn't modify its environment. This way the default behavior is still ""safe"", and you can't accidentally forget to set :wipe. So if B stands for all before hooks (both context-specific and anything registered by libraries like Capybara), and A for after hooks, then this might example be run as:

<S_CODE_TOKEN>

thereby saving one A B (teardown and setup) cycle.

Hm. Just brainstorming.
",joliss,2011-08-30 07:50:41
419,2011-08-02 13:25:49,"The way we've been writing our rspec acceptance tests, all the it blocks are ""readonly"" and the describe blocks are what are what modify state.  So that's why we put the :wipe => true on the describe block.  

This allows you to nest describes and have the outer one do the wipe while the inner ones modify different state.
",kberridge,2011-08-30 07:50:41
419,2011-08-10 15:34:00,"I'm not 100% convinced of this. It's a pretty uncommon usecase, and in case you really need it, you can hook Capybara into RSpec yourself, it's not a lot of code, and you can get full control over everything.

For the record, I solved the same problem by using token authentication, as opposed to username/password. On the first request, you just send the token and boom, you're logged in, no extra requests necessary. Sped up a test suite by almost 30%.
",jnicklas,2011-08-30 07:50:41
419,2011-08-30 07:50:41,"Closing this. I just don't think it's necessary.
",jnicklas,2011-08-30 07:50:41
419,2014-12-31 21:05:16,"Can this be reconsidered? [rspec-rails includes vendor/capybara(https://github.com/rspec/rspec-rails/commit/d0e790e9cd8d63115a6bcf523a11f56c5f1adb79), and that means hooking RSpec into Capybara ""by ourselves"" isn't possible. 
",siruguri,2011-08-30 07:50:41
419,2015-01-07 21:44:52,"I would also like this to be reconsidered.  There are times when it would be preferable to not have the session reset after each spec.

I don't understand why you wouldn't want to give users more configuration options. 
",sethuster,2011-08-30 07:50:41
419,2015-01-08 06:13:49,"+1
User may want to use another mechanism to make sure that tests are relatively independent (https://github.com/rspec/rspec-core/issues/1811)
",abotalov,2011-08-30 07:50:41
419,2016-12-26 10:46:06,"Migrating from page-object to site-prism, getting into this issue. Monkey patching again is my tool, that's pity.",z41,2011-08-30 07:50:41
419,2016-12-26 11:11:34,"One of scenarios when having such an option can really help: 
I have pages with loading time about 30 seconds or even more (search results pages) and this would hardly be improved. So instead of loading the page every time I just reset its state. And the only option I have with capybara is to monkey patch it =(",z41,2011-08-30 07:50:41
418,2011-07-18 21:43:44,"By default capybara always resets the session after each test.  But there are times when I would prefer that management of the session state was left up to me (ex: to avoid the need to login before every test).
",kberridge,2011-07-25 20:40:12
418,2011-07-25 20:40:08,"Closing in favor of the pull request #419 (which Jonas will have to take a look at). Thanks for sending the pull request!
",joliss,2011-07-25 20:40:12
417,2011-07-18 20:32:30,"Tagging a scenario with @javascript @wip causes it to throw the following error:

 `undefined method 'tag_names' for nil:NilClass (NoMethodError)
  /Users/arr/.rvm/gems/ruby-1.8.7-p334@ratereport/gems/activesupport-3.0.7/lib/active_support/whiny_nil.rb:48:in 'method_missing'
  /Users/arr/.rvm/gems/ruby-1.8.7-p334@ratereport/gems/cucumber-1.0.0/bin/../lib/cucumber/ast/feature_element.rb:70:in 'source_tag_names'
  /Users/arr/.rvm/gems/ruby-1.8.7-p334@ratereport/gems/capybara-1.0.0/lib/capybara/cucumber.rb:18:in 'Before'`

Removing the @wip tags causes it to work correctly.
",mus0u,2011-11-15 15:41:04
417,2011-07-25 20:38:49,"Very strange. It's happening here: https://github.com/jnicklas/capybara/blob/master/lib/capybara/cucumber.rb#L18

Maybe one of the Cucumber folks sees some obvious problem... I'll go ahead and Cc @mattwynne -- hi Matt, any ideas?
",joliss,2011-11-15 15:41:04
417,2011-07-25 20:57:23,"I'd like to see the scenario that caused this. It looks like a bug in Cucumber to me.

@a-ryan-reynolds could you please gist the Gherkin that caused this?
",mattwynne,2011-11-15 15:41:04
417,2011-08-01 16:28:32,"I get this as well, but actually not @wip. Here's my feature:
Feature: Device Preview
  In order to better design their tours
  an Author
  can preview their tour as it would appear on a device

  Background:
    Given I am logged in as an author for ""SampleOrg""
    And Organization:SampleOrg has Tour:My Tour
    And I am working on the ""Home"" node of ""My Tour""

  @javascript
  Scenario: A user has attached body text
  ...

  @javascript
  Scenario: A user has set the phone background image for the tour
  ...

  @javascript
  Scenario Outline: Choosing device types
..

and the cucumber -f pretty output:

Feature: Device Preview
  In order to better design their tours
  an Author
  can preview their tour as it would appear on a device

  Background:                                         # features/device_preview.feature:6
  undefined method `tag_names' for nil:NilClass (NoMethodError)
   gems/activesupport-3.0.9/lib/active_support/whiny_nil.rb:48:in`method_missing'
   gems/cucumber-1.0.2/bin/../lib/cucumber/ast/feature_element.rb:70:in `source_tag_names'
   gems/capybara-1.0.0/lib/capybara/cucumber.rb:18:in`Before'
    Given I am logged in as an author for ""SampleOrg"" # features/step_definitions/user_steps.rb:23
    And Organization:SampleOrg has Tour:My Tour       # mattscilipoti-model_steps-b417cd708d9e/lib/model_steps/step_definitions.rb:97
    And I am working on the ""Home"" node of ""My Tour""  # features/step_definitions/tour_steps.rb:34

I'm actually not running javascript tests, so it appears (in my case) it's the Background that is triggering some processing...

Marking the whole feature as @javascript fixed it.
",MattRogish,2011-11-15 15:41:04
417,2011-08-10 15:30:58,"What version of cucumber are you using, not sure if Capybara works with older versions of Cukes.
",jnicklas,2011-11-15 15:41:04
417,2011-08-10 15:32:42,"  gem 'capybara', '1.0.0' 
  gem 'cucumber-rails', '1.0.2' 
",MattRogish,2011-11-15 15:41:04
417,2011-08-29 20:15:25,"I was having this issue but with @javascript at the root Feature level and then arbitrary tag below that on the Scenario level @justin @skip_ci in this case. Removing that and flagging @javascript @wip at the Feature level fixed the issue.
",jsmestad,2011-11-15 15:41:04
417,2011-09-23 19:35:53,"I ran into this too...

**Workaround**: A workaround is to add a rescue in gems/capybara-1.1.1/lib/capybara/cucumber.rb:

<S_CODE_TOKEN>

When I did that, the feature ran fine.

Then I noticed: it was _only_ executing the `Background` and not any of the `Scenario`s!

This is consistent with what @corroded noted in https://github.com/cucumber/cucumber/issues/107:

> NOTE just double checked this and this consistently happens when I trying to run the specific line for a BACKGROUND, instead of a SCENARIO(which has tags?).

**Solution**: Make sure you're running at least one scenario in your feature!

I hadn't realized it at first, but I had tagged all of my scenarios in the feature as `@wip`, and then since the default profile excludes those scenarios with `--tags ~@wip` it now makes sense why there were no scenarios being executed!
",TylerRick,2011-11-15 15:41:04
417,2011-11-15 15:41:04,"Seems like this is more cucumber's fault and we shouldn't really do anything here.
",jnicklas,2011-11-15 15:41:04
416,2011-07-18 12:05:04,"I recently installed your gem. I got stuck for a little bit, trying to use selenium with chrome until I realised Capybara::Driver::Selenium worked where Capybara::Selenium::Driver didn't. I've updated the readme to save others having the same problem.

Apologies if I've gone about this the wrong way - it's the first time I've performed a fork, let alone a pull request.
",mailerhq,2011-07-20 07:01:44
416,2011-07-19 21:12:08,"The class name is correctly `Capybara::Selenium::Driver` as declared in [Capybara::Selenium::Driver](https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/driver.rb).
Got it working as described on readme.
",marlonandrade,2011-07-20 07:01:44
416,2011-07-20 07:01:44,"@mailerhq you are using an old version of Capybara, the name of that class changed in Capybara 1.0.
",jnicklas,2011-07-20 07:01:44
415,2011-07-18 01:00:07,"I have updated launchy and the api that capybara was using is no longer in existence. 

This pull requests should update capybara to the latest version of launchy and utilize the appropriate launchy api.

enjoy,

-jeremy
",copiousfreetime,2011-07-18 10:41:35
415,2011-07-18 10:45:41,"Merged -- thank you!
",joliss,2011-07-18 10:41:35
415,2011-11-21 23:49:38,"Is this in a release yet? I'm pinning to git head to prevent this error.
",krisleech,2011-07-18 10:41:35
415,2011-11-21 23:53:31,"Yes, it's in all recent Capybara releases.
",joliss,2011-07-18 10:41:35
415,2011-12-08 22:46:08,"Capybara should check that the version of Launchy is new enough; I was just running into a bug where `save_and_open_page` wasn't working because v0.4.0 doesn't support file URLs without ""file:///"". Not sure this should be a runtime check (i.e. `Launchy::VERSION.split('.').first.to_i < 2`) or if it would be acceptable to require Launchy ~> 2 as a non-development dependency.
",levity,2011-07-18 10:41:35
415,2011-12-08 23:16:26,"It's best not to require Launchy at runtime (to keep dependency proliferation in check), but I added a runtime check in #562.
",joliss,2011-07-18 10:41:35
414,2011-07-16 12:29:09,"Hi.

If I try to preload some data when using the Selenium driver the data doesn't appear in my Cucumber steps and they are failed. The steps are passed if I use RackTest instead of Selenium.

Here's an example:

**Feature**

<S_CODE_TOKEN>

**Steps**

<S_CODE_TOKEN>

**Result**

<S_CODE_TOKEN>

How can I force Selenium to use my preloded data in steps?

Thanks.

Debian GNU/Linux 6.0.1;

Ruby 1.9.2;

Ruby on rails 3.1.0.rc4;

Cucumber 1.0.2;

Cucumber-Rails 1.0.2;

Capybara 1.0.0;

Selenium-Webdriver 0.2.2;

SQLite 1.3.4;

SQLite-Ruby 1.3.3.
",Shamaoke,2011-07-25 20:09:03
414,2011-07-17 12:13:50,"I tackled the problem. The thing was I have to set the **truncation** strategy for the Database cleaner instead of **transaction** in the Cucumber configuration file.

<S_CODE_TOKEN>
",Shamaoke,2011-07-25 20:09:03
414,2011-07-25 20:09:24,"Funny -- I seemed to recall that Cucumber would do that automatically. Are you sure you have the most recent version of Cucumber? Maybe it's a regression with Rails 3.1? Very strange. I'll close this issue for now, but please feel free to leave a comment!
",joliss,2011-07-25 20:09:03
414,2011-07-26 14:18:50,"I have the most recent version of Cucumber and Cucumber-Rails (for now it's 1.0.2). If I add the **transaction** strategy or don't add any strategy at all to the env.rb file, Selenium doesn't see the data and the test is failed. I want to note that in the case when I don't specify the strategy explicity, the DB is cleared anyway (it seems that Cucumber use the default strategy which is **transaction**).
",Shamaoke,2011-07-25 20:09:03
414,2011-07-29 22:48:12,"Hm, I see. If you are curious about some background, see this comment and the explanation linked from there:

http://opinionated-programmer.com/2011/02/capybara-and-selenium-with-rspec-and-rails-3/#comment-220

It's about RSpec, but the same basic issue applies to Cucumber (except that I seem to recall Cucumber automatically taking care of this so it Just Works -- weird).
",joliss,2011-07-25 20:09:03
413,2011-07-15 23:37:21,"Seeing failures when a get redirects to a form on a different site, the form incorrectly posts to the original url not based on the base url of the new site.

I should probably write a test... but playing with this new Github ""pull request without even cloning the repo"" thing.
",jacobo,2011-07-25 19:54:27
413,2011-07-25 19:54:27,"I think this is a dup of #409 and #422. Since this one doesn't have tests (which is kindof a problem for a fix like this), I'll go ahead and close this one. Could you please try #409 and/or #422 and see if merging them solves your problem? I would expect so.
",joliss,2011-07-25 19:54:27
412,2011-07-15 17:33:11,"to test a form (with action action='/follows?follow[followable_id]=#{user.id}'])

In the debugger, I can call find(""form[@action='/follows?follow[followable_id]=#{@user2.id}']"") correctly to get the form element.

However, if I choose save_and_open_page, the generated page will transform the action to 
action='/follows?follow%5Bfollowable_id%5B=3']
escaping the [].

It's a minor issue as it does not effect test cases (presumably)
",brueckenschlaeger23,2011-07-18 10:36:21
412,2011-07-18 10:36:21,"That's how it comes out of the browser. I don't think there is anything Capybara can do about this.

For what it's worth, I think escaping the brackets is correct (and should not affect the functioning of your web page) and perhaps even [necessary](http://labs.apache.org/webarch/uri/rfc/rfc3986.html#reserved). Is there a specific reason why you don't want them to be escaped, besides making it a little harder to read?
",joliss,2011-07-18 10:36:21
412,2011-07-20 10:13:00,"No, that's not the point:

If I run the rails server, action='/follows?follow[followable_id]=#{user.id}' is created correctly. I can open the page with any browser, show the source, and that's what you find there; that's how it comes out of the browser!

If I open the page with capybaras save_and_open_page, I get action='/follows?follow%5Bfollowable_id%5B=3' (in source view). Isn't this inconsistent? Shouldn't it be created the same way as the rails server does it? A post to /follows?follow%5Bfollowable_id%5B=3 would not work.

This is a minor issue, as internally everything is right and save_and_open_page is just used to check or confirm right rendering etc. Still it may be a bit confusing as an application with this code would be broken. 
",brueckenschlaeger23,2011-07-18 10:36:21
412,2011-07-20 10:16:08,"Could you please re-open the issue or shall I open a new one?
",brueckenschlaeger23,2011-07-18 10:36:21
412,2011-07-20 12:28:10,"> If I open the page with capybaras save_and_open_page, I get action='/follows?follow%5Bfollowable_id%5B=3' (in source view). Isn't this inconsistent?
> A post to /follows?follow%5Bfollowable_id%5B=3 would not work.

No, it's not inconsistent as far as I can tell, and a post to that
page _should_ work. The server should simply decode the %5B for you.
This is simple [percent-encoding](http://en.wikipedia.org/wiki/Percent-encoding);
in fact, unencoded square brackets are theoretically wrong to have in
a query string, though in practice I'm pretty sure that brackets work
fine in all browsers even when they are unencoded.

> Shouldn't it be created the same way as the rails server does it?

Actually, it shouldn't -- save_page (and save_and_open_page) pull the
page _as it is right now_ out of the browser. I believe browser simply
dump out their DOM tree. In particular, it may have been modified by
JS, and the browser may have applied transformations, e.g. change in
letter case, white space, fixing markup errors, and (you guessed it)
encoding characters in URLs where necessary.

> Could you please re-open the issue or shall I open a new one?

If we end up finding a bug in Capybara we can always reopen this
issue. As I explained, I don't believe that there is a bug at the
moment; it's fine to have this discussion in a closed issue though.

Jo
",joliss,2011-07-18 10:36:21
411,2011-07-15 02:41:13,"Hi there,

Thank you all for your hard work on this gem.
It's really nice that capybara can help us to use different web drivers seamlessly as needed.

We are trying to get some integration testing done with cucumber + capybara + selenium/capybara-webkit for our existing app.
Capybara seems to work fine with capybara-webkit-0.5.0 although there are some issues along the way.

We have an issue when we try to use selenium to see what's really happening when we run tests.

This is the error message I'm getting:

<S_CODE_TOKEN>

This is the installed gems which you might need to know:
  rails-2.3.11
  bundler-1.0.12
  cucumber-1.0.1
  cucumber-rails-0.3.2
  capybara-0.4.1.2
  capybara-webkit-0.5.0
  selenium-webdriver-2.0.1

If I use capybara-0.4.0 and selenium-webdriver-0.1.3 , they seem to work fine but I don't think I can use capybara-webkit with that version of capybara.

It seems like there is an unspecified dependency behind the scene.
It's a pain that cucumber-rails doesn't officially support rails 2.x anymore and I hope that's not the case with capybara.
I googled quite a bit for last few days, but it wasn't very successful.

Can anyone give me any suggestion for the working combination of gems or workaround at least?
Thank you for your help in advance.
",dskim,2011-07-15 16:18:09
411,2011-07-15 16:18:09,"The gemspec in Capybara 0.4.x was a bit too optimistic, because it specifies `>= 0.0.27` instead of `~> 0.2.0` (as in Capybara 1.0.0) or `~> 2.0.0`) (as in master) for the Webdriver dependency. I'd suggest one of these:
- Try downgrading your selenium-webdriver gem to one of the 0.2.x versions (that's the beta releases that led into 2.0).
- Or try upgrading Capybara to the current master from GitHub; it works with selenium-webdriver-2.0.1.

Let me know if that helps! By the way, the mailing list tends to be the better place for getting help with questions like this. The issue tracker is best used if you've pinned down a specific bug in Capybara.
",joliss,2011-07-15 16:18:09
411,2011-07-19 01:16:31,"Hi joliss,

Thanks for your kindness for providing me with your suggestions.

First of all, I'm sorry if I made an unnecessary issue.
I missed reading the development part of README which states that I need to use mailing list.
I will use mailing list next time if I every need to ask something.

We needed to use selenium-webdriver-2.0.1 so I tried the current master from github and it seems to be working.
I also had to use the current master of capybara-webkit from git as well since capybara-webit-0.5.0 wants capybara-0.4.1.
So far so good.
Thank you for your help once again and I hope someone find it useful.
",dskim,2011-07-15 16:18:09
411,2011-07-25 20:42:39,"Haha, no problem! :-) Glad it's working for you now.

Jo

> Hi joliss,
> 
> Thanks for your kindness for providing me with your suggestions.
> 
> First of all, I'm sorry if I made an unnecessary issue.
> I missed reading the development part of README which states that I need to use mailing list.
> I will use mailing list next time if I every need to ask something.
> 
> We needed to use selenium-webdriver-2.0.1 so I tried the current master from github and it seems to be working.
> I also had to use the current master of capybara-webkit from git as well since capybara-webit-0.5.0 wants capybara-0.4.1.
> So far so good.
> Thank you for your help once again and I hope someone find it useful.
",joliss,2011-07-15 16:18:09
411,2011-11-17 01:32:59,"For anyone that is not able to upgrade capybara beyond 0.4.1.2, the following monkey patch should work (put it in a file in `features/support/` if you are using cucumber):

<S_CODE_TOKEN>
",bowsersenior,2011-07-15 16:18:09
411,2012-01-24 12:11:05,"thank you @bowsersenior that works a treat! :D
",sermoa,2011-07-15 16:18:09
411,2013-04-04 06:04:19,"Thanks for this I got an idea on fixing the uninitialized constant Capybara::TimeoutError (Anticipate::TimeoutError)
",rolandoalvarado,2011-07-15 16:18:09
411,2013-04-17 21:47:31,"Thanks @bowsersenior , that was a great workaround
",matt-hwy1,2011-07-15 16:18:09
410,2011-07-14 15:45:48,"Through the `page.should have_css` technique, Capybara has the nice ability to wait for element's to exist, before proceeding with more tests.

It would be nice if Capybara could do the same for a JavaScript. 

Currently, Capybara doesn't wait for jsonp type requests (and I do not expect it to). However, this means that you have to do certain things to make Capybara wait for the script to be loaded and processed.

In one jsonp callback, I've had to insert an element just to let Capybara wait for it's existence. So, I'm adding element's only useful to Capybara, just to make some tests pass.

In another jsonp situation, inserting a `sleep` of some duration tends to give enough time for the response, but sometimes it still fails.

If Capybara could wait for a JavaScript expression to return true, with maybe an API like: `page.should have_javascript(""'maps' in window.google"")`, then tests would be more bulletproof.
",deleteme,2011-08-10 15:19:24
410,2011-08-10 15:19:24,"I think you should always test for the effect of the jsonp callback, if it doesn't affect the page at all, why wait for it to complete at all?
",jnicklas,2011-08-10 15:19:24
409,2011-07-13 03:34:11,"When a redirect is followed to a different host, the value of @current_host is not updated. This commit fixes that.

I wasn't sure how to add a spec for this though. I think the best place would be an addition to current_host_spec.rb, where say e.g. page http://capybara-testapp.heroku.com/redirect_to_other would redirect to http://capybara2.elabs.se. The spec would then be something like:

<S_CODE_TOKEN>

Just don't know how to get a /redirect_to_other page hosted on that site ;-)
",lawrencepit,2011-08-10 15:26:01
409,2011-07-25 20:02:31,"#422 is a dup of this one, I think. I looked at the code for each one, but I don't know Capybara's ins and outs well enough to tell which one is better, or if they even do the same thing. (I'm just a contributor -- Jonas is the maintainer, but he's on vacation at the moment.)

@lawrencepit and @mcolyer, would you guys be so kind as to take a look at each other's pull requests and tell me which of the two you think is better?

> Just don't know how to get a /redirect_to_other page hosted on that site ;-)

I think lib/capybara/spec/test_app.rb is where it's coming from, though you'd need Jonas to actually deploy it on heroku. (It's kindof suboptimal, I know...)
",joliss,2011-08-10 15:26:01
409,2011-07-25 23:50:04,"@joliss thanks for responding I was beginning to wonder what was going on. 

Unfortunately I didn't see this pull request when I made mine. However I would rather we use #422 as it includes the code for the test server and it also handles changing the host upon each redirect as opposed to the last redirect. 
",mcolyer,2011-08-10 15:26:01
409,2011-08-10 15:26:01,"Imho #422 is superior, we're still waiting for a fix there, but I'll close this in favour of #422 for now.
",jnicklas,2011-08-10 15:26:01
408,2011-07-11 15:35:45,"Hi,
My integration tests include a step that involves - 
- visit a page with an iframe
- submit a form in that iframe
- the iframed response uses javascript to reload the parent window to a new url.

All of which is fine in Firefox 3.6, or in Chrome.  However, under Firefox 4 & 5, trying to submit the form results in capybara hanging for a second or two, then producing the following error:

<S_CODE_TOKEN>

I have a script that [demos the problem](https://gist.github.com/1076062/870eae0eafcd0401adac65b36025e71193bbc7c9), while jarib in #selenium [re-wrote it to just use selenium-webdriver](https://gist.github.com/1076062/aab619958a2c7dfdc40ef999741b430a09d99e8f).  The problem is only apparent in the capybara version.

jarib proposed that something [along these lines](https://gist.github.com/1076034) might help.  It does fix the problem for me, though I suspect it won't work for people juggling more that 1 iframe at a time.

Let me know if I can do anything to get this fixed.
",jdelStrother,2012-01-08 23:02:28
408,2011-07-11 15:56:41,"I was just about to suggest upgrading selenium-webdriver, since FF4/5 support was only added recently, but then I noticed you're using webdriver 2.0.0 with capybara 1.0.0. That's odd, because Capybara 1.0.0's gemspec says `""selenium-webdriver"", [""~> 0.2.0""]`. Or are you actually on Capybara's master branch, and it just happens to say ""1.0.0"" in your backtrace?
",joliss,2012-01-08 23:02:28
408,2011-07-11 16:01:47,"Argh.  Sorry, I temporary hacked my rubygems to ignore the version check because I wanted to see if webdriver 2.0 made any difference.  Here's the real backtrace from using capybara's master branch (6a17be47958e), and the regular 2.0 selenium-webdriver : 

<S_CODE_TOKEN>
",jdelStrother,2012-01-08 23:02:28
408,2011-11-17 15:00:23,"I hava a problem with iframe too. But in my case, the field in the form inside the iframe is not found.
I am suspecting that capybara only sees the HTML with the empty iframe tag, and doenst follow the src attr of the iframe to include the iframe HTML code.

Is that right?
",marcofognog,2012-01-08 23:02:28
408,2012-01-08 23:02:28,"/cc @jnicklas 

> I have a script that [demos the problem](https://gist.github.com/1076062/870eae0eafcd0401adac65b36025e71193bbc7c9)

This is printing ""yay, it worked"" with Capybara 1.1.2, selenium-webdriver 2.16.0, and Firefox 8.0.

So I'm assuming that whatever/wherever the problem was, it has been fixed in the meantime. If anyone is still seeing issues with iframes, please leave a comment (or even better, post a failing test) and I'll reopen this.
",joliss,2012-01-08 23:02:28
407,2011-07-09 08:09:22,"<S_CODE_TOKEN>

Failure/Error: page.click_on(""通过电话认证"")
     Capybara::ElementNotFound:
       no link or button '通过电话认证' found

My capybara is 1.0
",qichunren,2011-07-09 08:22:32
407,2011-07-09 08:22:32,"Please ask questions like this on the mailing list, this issue tracker is for reproducible issues. There is most likely something wrong with your application or your setup. You'll need to provide way more information than you gave us, I assure you that clicking on links is not broken.
",jnicklas,2011-07-09 08:22:32
406,2011-07-08 17:11:28,"drag_and_drop_on was deprecated and has now been removed from selenium-webdriver 2.0.0 .  selenium-webdriver 2.0.0 has also added synthetic mouse support so that mouse actions can be used on platforms without native event support
",twalpole,2011-07-11 13:50:20
406,2011-07-11 13:53:07,"Tested and merged -- thanks! :)

@jnicklas, FYI, this just bumped the webdriver dependency from ~> 0.2.2 to ~> 2.0.0 (the gem for the official Selenium 2.0 release).
",joliss,2011-07-11 13:50:20
405,2011-07-08 11:56:25,"This way you don't get minified JS garbage when you grep the source.
",joliss,2011-07-08 13:05:07
404,2011-07-08 01:24:59,"When I call `find('#mySelectBox').select 'value'`, I get this deprecation warning:

<S_CODE_TOKEN>

This seems to be referring to other uses of #select, on inputs that are not select boxes; perhaps a workaround should be made for select boxes to avoid the message?
",levity,2011-07-08 06:38:50
404,2011-07-08 06:38:50,"This has been fixed on master
",jnicklas,2011-07-08 06:38:50
404,2011-07-12 21:02:25,"Hi I don't see following changes, in my local gem file node.rb
def select_option
    resynchronize { native.click } unless selected?
  end

I have uninstalled and installed the gem 2 times, the changes are not there. I am still getting deprecation message.
",ashtija,2011-07-08 06:38:50
404,2011-07-12 22:06:53,"You need to run Capybara from git for this message to disappear, it's on _master_ not in any gem release.
",jnicklas,2011-07-08 06:38:50
403,2011-07-06 17:21:53,"fix for #370
If you request non-ssl and the server redirects you to the ssl page, then the links and form aren't resolved to ssl.
it might be better to respect relative path at submitting.
",os0x,2011-07-08 01:18:40
403,2011-07-08 01:18:40,"sorry this patch is wrong...
",os0x,2011-07-08 01:18:40
402,2011-07-01 20:26:01,"More details:
https://groups.google.com/forum/#!starred/rubyonrails-talk/kTYyHs_Ehrs

I followed the directions in the README about putting ""require 'capybara/rspec'"" in the spec_helper, but I still can't use the ""within"" method.
",dmonopoly,2011-07-01 21:50:12
402,2011-07-01 21:50:12,"Read the instructions again, your specs need to have the one of the :request or :acceptance types.
",jnicklas,2011-07-01 21:50:12
402,2011-07-01 23:39:44,"The 'within' is still not identified if I I try :type => :request or :type => :acceptance... apologies:

<pre>
require 'spec_helper'

describe ""superadmin/organizations/index.html.erb"", :type => :request do # specify this type when you use Capybara here
  
  before(:each) do
    3.times { Factory.create(:organization) }
    assign(:organizations, Organization.all)
    @organization_count = Organization.count
  end
  
  it ""shows the title"" do
    within(""div#organization_index"") do # not working
      render
    end
    rendered.should have_content(""Organizations"")
  end
  
  context ""shows a list of all organizations"" do
    it ""shows the list headers"" do
      render
      rendered.should have_selector(""ul#organization_list li ul#organization_list_headers"", :count=>1)
    end
    
    it ""shows a row for each organization"" do
      render
      rendered.should have_selector(""ul#organization_list li ul.items_within_organization"", :count=>@organization_count)
    end
    
    it ""shows the name for each organization"" do # use within later?
      render
      Organization.all.each do |o|
        rendered.should have_content(o.name)
      end
    end
    
    context ""shows the controls for each organization"" do # should probably narrow this with ""within""
      it ""displays the show link"" do
        render
        rendered.should have_link(""Show"", :count=>@organization_count)
      end
      
      it ""displays the edit link"" do
        render
        rendered.should have_link(""Edit"", :count=>@organization_count)
      end
    end
      
    # within(""ul#organization_list"") do
    #       rendered.should have_selector(""li"")
    #     end
    
  end
end
</pre>
",dmonopoly,2011-07-01 21:50:12
401,2011-06-30 01:21:23,"Howdy howdy,
I have an issue with Capybara (I think) escaping my arrays when a form has multipart enabled, here's some snippets:

Working form on another page (UsersController#_form)
   `""user_ids""=>[""[\""\"", \""2\""]""] # cucumber
    ""user_ids""=>["""", ""1""] # in browser test`

Non working form (OutletsController#_form)
 `""outlet_ids""=>["""", ""1""] # cucumber
  ""outlet_ids""=>["""", ""1""] # in browser test (the same)`

User form (working fine)
    `<%= semantic_form_for @user do |f| %>
      <h3>User Permissions</h3>
      <%= f.input :outlet_ids, :as => :check_boxes, :collection => @account.outlets %>
      <%= f.submit %> or <%= link_to ""Back to dashboard"", dashboard_path %>
    <% end %>`

Outlet form (le broken)
   `<%= semantic_form_for @outlet, :html => { :multipart => true } do |f| %>
      <h3>User Permissions</h3>
      <%= f.input :permissions, :as => :check_boxes, :collection => User.all %>
      <p><%= f.submit %> or <%= link_to ""Back to dashboard"", dashboard_path %></p>
    <% end %>`
",anathematic,2011-07-07 23:01:06
401,2011-06-30 13:12:53,"Which version of Capybara and rack-test are you using, afaik this has been fixed, try upgrading to the latest version.
",jnicklas,2011-07-07 23:01:06
401,2011-06-30 13:42:13,"I think I'm seeing something similar.
In a selenium javascript test, I have a page.body that has all the double-quotes escaped with a backslash. e.g.

<S_CODE_TOKEN>

When my test does does <code>page.should have_content(""2008-12-15"")</code>, it fails to ""see"" it.

capbara-1.0.0
rack-1.2.3
rack-test 0.5.7
",gberenfield,2011-07-07 23:01:06
401,2011-07-06 23:31:44,"Howdy,
Sorry about the delay.
I've bumped up to Capybara 1.0.0 and RackTest 0.6.0 and I'm still experiencing this issue - I'm on Rails 3.1 rc4 beta.

I'll organise a test project today to make sure it's not an issue with our app.

Cheers!
Thomas
",anathematic,2011-07-07 23:01:06
401,2011-07-07 23:01:06,"I've found the problem! You're completely right Jonas this issue has been resolved in rack-test, the catch is the latest 0.6.0 does not contain this bug fix so you need to point at master in your Gemfile:

  `gem ""rack-test"", :git => ""git://github.com/brynary/rack-test.git""`

:-D
",anathematic,2011-07-07 23:01:06
401,2011-07-08 06:39:59,"Ahh, sorry, I thought it was released. We should probably bug Brian to do a gem release of rack-test ;)
",jnicklas,2011-07-07 23:01:06
401,2011-07-08 13:05:00,"*bugs @brynary* ;-)
",joliss,2011-07-07 23:01:06
401,2011-07-08 13:05:57,"(For a new release of rack-test, that is.)
",joliss,2011-07-07 23:01:06
401,2011-08-18 13:20:16,"I'm not certain of the dependencies but it seems that rails 3.0.10 still depends on rack-test 0.5.7. I guess until rails-core changes that we're stuck? (rack-test 0.6.1 available)
",gberenfield,2011-07-07 23:01:06
401,2011-08-18 15:24:59,"pretty much, yeah. You can use a git version of rack-test which is patched, or you can upgrade to Rails 3.1, once it's released :(
",jnicklas,2011-07-07 23:01:06
400,2011-06-29 12:05:23,"Hi

I am currently working on a large suite of acceptance tests that originally consisted of webrat + some hand rolled stuff. We long ago upgraded to Capybara, but the hand rolled stuff is still there even though Capybara does most of what we need - so we have been ripping it out.

We have found that the one thing we need is more fine grained control over Capybara's wait behaviour than is afforded by switching drivers. ( ie we want to be able to tell Capybara not to wait for some selectors even when we are using the selenium driver ). I can go into more detail on exactly why this is useful to us if you would like.

Anyway, here is a patch that allows the user to specify that Capybara should not wait on individual calls to has_selector? Default behaviour is left unchanged.

cheers
Perryn
",perryn,2011-08-30 09:08:09
400,2011-06-29 14:00:50,"Could you describe the use case in more detail, not sure I understand when this would be useful.
",jnicklas,2011-08-30 09:08:09
400,2011-06-30 00:53:33,"Ok lets see if I can explain:

1) We want our cucumber scenarios to be grouped by concepts that make business sense rather than technical decomposition based on wether the page elements are updated by asynchronous javascript or not. This means that we have many '@javascript' scenarios that also need to interact with both 'static' and 'asynchronously updated' elements.

2) When dealing with the 'static' elements in these scenarios, the default waiting behaviour is unnecessary and a bit of a pain. You have to be careful with the whole should/should_not has_selector?/has_no_selector? thing or you will find that your test passes, but waits unnecessarily, because nothing about that element is going to change. We have a large team with differing levels of comfort with BDD and automation, and I'd rather be able to say 'if the element you are testing is not updated via JS, then you don't need to worry about this stuff, just turn off waiting for that element;

3) The above is exacerbated by the fact that we want to build an abstraction layer for our app on top of the basic capy stuff.

For example, out app has the concept of listings - we want to be able to talk about the business rules around wether a listing is 'new' in our code 

<S_CODE_TOKEN>

and encapsulate the fact that this is indicated in the ui by a 'img #new_icon' for example.

<S_CODE_TOKEN>

This works nicely until people try to do something like

<S_CODE_TOKEN>

As this will wait around unnecessarily to make sure the selector isn't going to turn up later. To avoid this I need to explain to people that they should define is_new? and is_not_new? methods and use them in different situations depending on what they expect. This is a hard sell when we _know_ that the element is not updated asynchronously. I'd much rather be able to define

<S_CODE_TOKEN>

and save the harder explanations for the harder cases.

Up until now we have dealt with this ( and other things ) by parsing the HTML body at a point in time into a NokoGiri doc, and then making assertions against that when we didn't want waiting behaviour. With the growing maturity of Capybara I'd really like to be able to rip all that out and just use capy, but the inability to turn off waiting in our situation is causing reluctance in the team.

Hope that helps
Perryn
",perryn,2011-08-30 09:08:09
400,2011-08-30 09:09:41,"Went down a slightly different path with this. Since pretty much _everything_ now waits in Capybara, _everything_ would have to take an extra parameter for this, which seems very inconvenient. Added a block method which fixes this.
",jnicklas,2011-08-30 09:08:09
400,2011-09-06 03:33:29,"so instead of    

<S_CODE_TOKEN>

I would do this?

<S_CODE_TOKEN>
",perryn,2011-08-30 09:08:09
400,2011-09-06 06:47:52,"yes, exactly. I know it's not as pretty an API, but I think it makes more sense ATM.
",jnicklas,2011-08-30 09:08:09
400,2011-09-06 06:48:38,"actually, I probably wouldn't mind to have the wait option for find and has_selector? and friends as well, now that I think about it. What do you think?
",jnicklas,2011-08-30 09:08:09
400,2011-09-15 03:32:51,"well it would certainly help us with migration away from our current monkey patch... :)
",perryn,2011-08-30 09:08:09
399,2011-06-29 09:45:32,"I maintain Terminus, a Capybara driver for cross-platform testing. When running in Chrome, forms with '#FFF' as the value for the color field fail to submit, since Chrome raises a validation failure. This commit fixes it -- just `cherry-pick` it rather than using `merge`.

https://github.com/jcoglan/capybara/commit/cafca77f1f5d01742f2879ee09fe0c5dd4b0bdbb
",jcoglan,2011-06-29 11:11:34
399,2011-06-29 11:11:34,"Nice, thanks! I cherry-picked this, and reworded the commit message slightly (it's not just Chrome, it's the spec, as it turns out).
",joliss,2011-06-29 11:11:34
398,2011-06-28 03:52:36,"I'm getting this happening, for some insane reason. I was using 0.4.1.2 earlier, upgraded to 1.0 today, and the error message became a lot less clear.

my error message went from something along the lines of `expected has_content?('foobar') to return true, got false` to `Unable to find xpath ""/html""`. I personally am reasonably fluent with xpath, and had spent enough time tearing my hair out over this to become aware of Capybara's XPath internals, but I think people without that perspective might find the error cryptic.
",gilesbowkett,2011-08-30 07:52:27
398,2011-06-28 04:00:28,"I suppose I should add that, to my deep embarrassment, I figured out the solution for this: use render_views. It might actually be nice to mention that in the error message too. very newb-friendly that way.
",gilesbowkett,2011-08-30 07:52:27
398,2011-08-30 07:52:27,"I don't like the way this error message is just tacked on. I know that error messages are a weak point in Capybara. In the future we'll have better errors, but for now, this is too much of a hack.
",jnicklas,2011-08-30 07:52:27
397,2011-06-27 11:46:04,"<pre>
/Library/Ruby/Gems/1.8/gems/capybara-1.0.0/lib/capybara $ diff node/finders.rb.orig node/finders.rb
18c18
&lt;       #     page.find(:xpath, '//div[contains(""bar"")]')

---
&gt;       #     page.find(:xpath, '//div[contains(.,""bar"")]')
</pre>


the former, original version gives me:

<pre>
Invalid number of arguments: //div[contains(""bar"")] (Nokogiri::XML::XPath::SyntaxError)
</pre>

while the latter example works as expected
",tpo,2011-06-27 23:04:04
397,2011-06-27 23:06:54,"Fixed -- thanks for reporting!

Did you know you can just use the web interface to fix bugs like this, btw? E.g. on https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/finders.rb there is a ""Fork and edit this file"" button you can use to edit files through the web and submit a pull request all without cloning the project to your hard disk.
",joliss,2011-06-27 23:04:04
396,2011-06-27 09:26:31,"First of all I have to say I'm not 100% sure if this is a problem with my tests or whether it's capybara. After having updated Capybara to v1 (I was using 0.4 before) it seems 3 of my tests fail. The problem is caused because Capybara is for some reason unable to properly fill the field with the label text ""Spec field"". The HTML for this spec looks like the following (I've removed everything that wasn't important):

<S_CODE_TOKEN>

Note that the `div` elements around the input fields are required as they're used to show/hide fields based on a certain element's state (in this case a tab based menu). What I noticed is that while Capybara is able to find the element (since it doesn't trigger any warnings for it) it somehow fails to fill the field properly. The code for this test is the following (again stripped down to the essentials):

<S_CODE_TOKEN>

Dumping the POST data in this test shows that the field ""custom_field_values[13]"" has no value while others have, this causes the form validation system I'm using to show an error and thus the test fails. I'm not entirely sure what might cause this, it runs fine in 0.4 but fails in 1.0 so this makes me wonder if something in Capybara was either changed or broken. Also note that not using the label text but the name (or ID) makes no difference, the field still remains empty.

System specs:
- ruby 1.9.2p180 (2011-02-18 revision 30909) [x86_64-darwin10.7.0]
- Mac OS X 10.6.7
- RSpec 2.6.0
- Capybara 1.0.0 (0.4.1.2 works just fine)
",YorickPeterse,2011-07-08 10:58:02
396,2011-06-28 22:14:58,"That's very odd. Can you track down what's different between the 'Spec field' field and the 'title' field that makes it work in the latter case but not the former?

(These kinds of issues, where you can't point at a specific bug in Capybara, are generally better suited for the mailing list, by the way.)
",joliss,2011-07-08 10:58:02
396,2011-06-29 08:22:32,"The main difference between the ""title"" field and the field with the label ""Spec field"" is that the first one is selected by name. Because of this I thought Capybara may be unable to find the label (for whatever the reason). However, selecting the field by it's name makes no difference either. 

I tried finding the element using `page.find` which does result in the label (and the input) element being found. However, scoping the matchers using `within()` on the containing div (`group_13` in this case) makes no difference. What may be a possibility is that due to the ""maxlength"" attribute having an empty value either Capybara or Nokogiri ignores it as it may think an empty string equals a maximum length of zero characters. I'll take a quick look to see if this is the case.
",YorickPeterse,2011-07-08 10:58:02
396,2011-06-29 08:32:15,"After forcing the `maxlength` attribute to a value of ""100"" my specs pass just fine and thus I can confirm it's caused by an empty value for this attribute. Now the main problem at this point is that I have no idea where to look for a possible explanation of this error as it can either be a problem in Rack::Test, Capybara or XPath.
",YorickPeterse,2011-07-08 10:58:02
396,2011-06-29 11:21:50,"Nice catch! Indeed this seems to be because Rack::Test calls .to_i on empty maxlength attributes.

<S_CODE_TOKEN>

HTML4 says maxlength must be number:
http://www.w3.org/TR/html401/interact/forms.html#adef-maxlength
HTML5 says it must be positive number:
http://www.w3.org/TR/html-markup/input.text.html#input.text.attrs.maxlength

@jnicklas, should we ignore maxlength=""""? Even if it doesn't conform, I would expect that ignoring it is what most UAs do. But I guess maxlength=""0"" should still be honored, even though it's not valid HTML5 (and perhaps not sensible)?
",joliss,2011-07-08 10:58:02
396,2011-06-29 13:58:33,"@joliss: I think we should do whatever the UAs are doing. If they ignore it, we should too. Same goes for maxlength=""0"", imho.
",jnicklas,2011-07-08 10:58:02
396,2011-06-29 14:32:16,"Sounds good. Chrome ignores maxlength="""" and maxlength=""0"" on <!DOCTYPE html>. I'll fix Rack::Test's behavior later tonight, or tomorrow if I don't get around to it. I'll close this issue when I'm done.

Thanks Yorick!
",joliss,2011-07-08 10:58:02
396,2011-06-29 14:59:28,"@joliss: thanks!
",jnicklas,2011-07-08 10:58:02
396,2011-06-29 16:58:18,"Thanks for the work! :]
",YorickPeterse,2011-07-08 10:58:02
395,2011-06-26 08:30:27,"Here's a fix for the [issue](https://github.com/jnicklas/capybara/issues/331) dchelimsky filed in April. When a element with particular text isn't found using RSpec's have_selector, the actual text is now included in the failure message. This has been added to `failure_message_for_should` and `failure_message_for_should_not`. Specs are have been modified to include the actual text.

<S_CODE_TOKEN>
",vrish88,2011-06-26 09:03:35
395,2011-06-26 09:03:35,"This is not at all enough. This will give us decent error messages in one particular case, where one particular kind of error occurs, that's not good enough. The errors generated by this will be meaningless, if not downright wrong if we pass in some other strange kind of selector. IMHO this problem need a way more comprehensive approach than this.
",jnicklas,2011-06-26 09:03:35
395,2011-06-26 13:29:41,"moving discussion back to issue [#331](https://github.com/jnicklas/capybara/issues/331).
",vrish88,2011-06-26 09:03:35
394,2011-06-25 11:09:01,"When requesting a page in json format from a rails 3 application via cucumber-rails 1.0 with capybara 1.0, I get the following response:

<S_CODE_TOKEN>

This had worked with capybara 0.4.x and cucumber-rails 0.5.x. I'm not entirely certain as to which gem introduced the error though.
",sriedel,2011-11-15 16:08:02
394,2011-06-25 11:12:50,"Hrm, the markdown interpreter either swallows the surrounding doctype tag and html stuff when embedding the response quote in pre or kills my comment halfway through if I just treat it as a quote. 

So even though it's not visible the [] is surrounded by doctype, html, body and p tags.
",sriedel,2011-11-15 16:08:02
394,2011-06-25 11:26:22,"Sorry, I just realized I left out an important piece of information: this is when accessing the result via page.body.
",sriedel,2011-11-15 16:08:02
394,2011-06-25 17:50:04,"+1, this affects me too. It also prevents any of our API-related tests from properly working.

I get:

<S_CODE_TOKEN>
",fj,2011-11-15 16:08:02
394,2011-06-26 09:16:40,"As a workaround for those affected: replace page.body by page.source and things work again.
",sriedel,2011-11-15 16:08:02
394,2011-07-15 16:45:05,"I wonder if [page.body](http://rdoc.info/github/jnicklas/capybara/master/Capybara/Session:body) makes sense with a JSON request at all. I see two ways out of this:
- We could document that page.body only works with HTML pages.
- We could detect non-HTML pages in page.body, and either throw an error or return the original source.
",joliss,2011-11-15 16:08:02
394,2011-07-15 17:55:37,"They way I read the linked information, it means page.body returns the HTML document in the HTTP response; thus page doesn't refer to the HTML page, but the HTTP response and body thus means the part after the HTTP headers. And thats the way page.body behaved with pre-1.0 capybara (at least for JSON).

That being said, I'm perfectly fine with using page.source. However since this change breaks existing tests, a change in semantics should be visibly documented for people updating. Maybe in the error message of the exception thrown point them to page.source instead, if you decide to go that way.
",sriedel,2011-11-15 16:08:02
394,2011-07-17 21:23:06,"Even if `page.body` is the wrong thing to use in this case, that doesn't change the fact that the value of `page.body` itself is still wrong. What is _actually returned_ as the HTTP body of the page (a JSON string) is _not_ what Capybara is reporting (a JSON string wrapped in an HTML document).
",fj,2011-11-15 16:08:02
394,2011-07-25 21:59:33,"> Even if page.body is the wrong thing to use in this case, that doesn't change the fact that the value of page.body itself is still wrong. What is actually returned as the HTTP body of the page (a JSON string) is not what Capybara is reporting (a JSON string wrapped in an HTML document).

page.body is somewhat misnamed -- its purpose is not to return the HTTP body (as you write, and as one might expect), but to return the browser's current DOM tree.

(It's aliased to page.html for exactly that reason, but I seem to recall that actually renaming the method to #html and phasing out #body would be difficult, as all drivers would have to rename it at the same time, so we'd be breaking a lot of compatibility. Unless @jnicklas has a good idea how to rename it in a more painless fashion.)
",joliss,2011-11-15 16:08:02
394,2011-07-25 22:04:24,"Gotcha. If that's the case, though, does that mean that `page.body` has been wrong all this time for JSON documents? Alas. I think switching to page.source is a fine alternative, though.
",fj,2011-11-15 16:08:02
394,2011-08-08 17:00:57,"yeah, the naming of those methods is a bit confusing. #html and #source is much better. I think we should probably deprecate #body, but I fear that a lot of people are using it, and so deprecating it might just piss a lot of people off.
",jnicklas,2011-11-15 16:08:02
394,2011-09-02 23:30:05,"wow, this page.body thing really chewed up a big chunk of my time today. Glad that I found it eventually
",jmccaffrey,2011-11-15 16:08:02
394,2011-09-26 10:54:49,"+1, this affects me too. Thanks for the workaround using page.source instead.
@jnicklas: Please deprecated #body, and just leave #source and #html. This has cost med ours testing an XML application.
",jarl-dk,2011-11-15 16:08:02
394,2011-11-01 15:00:30,"+1.  Just hit this when updating cap here.  
",tatyree,2011-11-15 16:08:02
394,2011-11-10 07:47:35,"+1
",ChuckJHardy,2011-11-15 16:08:02
394,2012-12-23 18:46:44,"+1 for deprecating body
",abotalov,2011-11-15 16:08:02
393,2011-06-23 20:27:49,"when I run

<S_CODE_TOKEN>

and have following

<S_CODE_TOKEN>

I've got following error:

_no link with title, id or text 'dodaj książkę' found (Capybara::ElementNotFound)_

when i change html to

<S_CODE_TOKEN>

then it all goes ok

the _#find_ is called in ""I follow xxx""  cucumber step

I think it is xpath related issue but there is no issue module on xpath github page so I post it here - maybe some of you know where to look in order to fix it?

used gems:
- capybara (0.4.1.2)
- xpath (0.1.4)
- selenium-webdriver (0.2.1) (for chrome)
",jumski,2011-06-24 14:53:04
393,2011-06-24 14:53:04,"This is not a bug. See #379 for an explanation! :-)
",joliss,2011-06-24 14:53:04
393,2011-06-25 10:28:49,"this makes sense!
thanks and sorry for not spotting existing issue
",jumski,2011-06-24 14:53:04
392,2011-06-23 18:48:13,"Selenium::WebDriver::Element#select and #toggle are deprecated - replace with click
This requires updating the minimum version of selenium-webdriver to 0.2.2 since it adds special handling for click on multiple select listboxes that appears to negate the need for modifier keys when clicking on options to make multiple selections.  Also added a test to make sure options remain selected if select is called on them twice
",twalpole,2011-06-25 10:54:12
392,2011-06-24 16:25:13,"Please add this pull request. I'm getting 

<pre>Selenium::WebDriver::Element#select is deprecated. Please use Selenium::WebDriver::Element#click and determine the current state with Selenium::WebDriver::Element#selected?</pre>


for the following test

<pre>
When /^I do a javascript select of ""([^""]*)"" from ""([^""]*)""$/ do |value, field|
  page.find_by_id(field).select(value)
end
</pre>
",gberenfield,2011-06-25 10:54:12
392,2011-06-25 10:53:14,"Shouldn't the if statement be inside the resynchronize block?
",jnicklas,2011-06-25 10:54:12
392,2011-06-25 10:54:52,"Just realized that I was being a dumbass and that the code as written is correct, the if statement should indeed be outside the resynchronize block. Merged!
",jnicklas,2011-06-25 10:54:12
392,2011-07-12 22:28:42,"@jnicklas any idea when a Capybara 1.0.1 will be out which includes this fix? Unfortunately selenium-webdriver has been updated on July 7th and so this is a real problem now (not able to use git source). Appreciate you're probably busy :-)
",parndt,2011-06-25 10:54:12
392,2011-07-15 16:25:25,"I agree pushing out 1.0.1 just to get compatible with Webdriver 2.0 might be a good idea. I just had to refer someone to the master branch (#411) because there is no release that supports 2.0.

The test suite passes fine with 2.0.0 and 2.0.1.
",joliss,2011-06-25 10:54:12
392,2011-08-05 01:45:35,"+1 for interim release
",schof,2011-06-25 10:54:12
391,2011-06-20 21:44:05,"This is to allow resynchronization to work in the case where ajax requests are delayed slightly from the user interaction that triggers them.  In my case it was a search box that waited 200 ms after the user typed the last key before triggering the search.  
",twalpole,2011-06-21 10:36:08
391,2011-06-21 10:36:08,"This seems very specific to your particular problem, You should add a sleep(whatever) to your own code, imo.
",jnicklas,2011-06-21 10:36:08
391,2011-06-21 14:54:58,"The problem is getting the delay between the fill_in, click, etc and the resynchronization checks.  I assumed others would have had the issue too, if not that's fine, I'll just monkey patch for my own needs
",twalpole,2011-06-21 10:36:08
391,2011-06-28 22:10:42,"Perhaps you can even just call the resynchronize method (of the Selenium driver) yourself, after a sleep?
",joliss,2011-06-21 10:36:08
391,2011-06-28 22:26:23,"calling the resynchronize method after a sleep won't work because the javascript that tracks the starting of the ajax calls needs to already be loaded before the wait, so the sleep needs to be within the resynchronize block.   I ended up just doing this in my code

<S_CODE_TOKEN>
",twalpole,2011-06-21 10:36:08
390,2011-06-19 14:55:56,"For background see: https://github.com/rspec/rspec-rails/issues/387

I originally submitted this issue to rspec-rails because it only relates to view specs, but it would be nice to be able to pass a block to have_selector so you could do things like assert a partial is rendered under a particular id e.g. assert _products.html.haml is rendered under #products, or to simply simplify selectors. e.g. The following would fail correctly in Webrat but it silently passes using Capybara

<S_CODE_TOKEN>
",dwilkie,2011-06-19 21:35:21
390,2011-06-19 21:35:20,"This _exact_ same issue got filed 5 days ago. Please check https://github.com/jnicklas/capybara/issues/384. My comment is the same as for that issue: Capybara is not Webrat, semantically it makes no sense for have_selector to take a block, there are better tools in Capybara for achieving the same thing.
",jnicklas,2011-06-19 21:35:21
390,2011-06-20 01:25:01,"@jnnicklas thanks and sorry about the duplicate issue
",dwilkie,2011-06-19 21:35:21
389,2011-06-19 08:37:39,"I know you're working on it, but wanted track down the issue here to have more infos about the work in progress :)
",stefanoverna,2011-06-19 12:14:35
389,2011-06-19 12:14:35,"This is really an issue with selenium-webdriver, nothing we can do about it in Capybara.
",jnicklas,2011-06-19 12:14:35
389,2011-06-19 22:23:35,"You can watch this issue:

  http://code.google.com/p/selenium/issues/detail?id=1838
",jarib,2011-06-19 12:14:35
388,2011-06-17 21:27:25,"Fix for issue #365:

This changes has_content and has_no_content to only select elements that contain the content but whose children do not.  This way the code that ignores invisible elements can function correctly.  Specs also added
",twalpole,2011-11-15 15:22:38
388,2011-07-08 19:16:27,"Any thoughts on this pull?  Would love to see this make it in.
",cmeiklejohn,2011-11-15 15:22:38
388,2011-07-08 20:22:52,"I just confirmed that this fixes the problem I'm experiencing with hidden div elements being matched.
",cmeiklejohn,2011-11-15 15:22:38
388,2011-07-16 20:40:14,"+1 We've been using it for a month and it fixed the problem perfectly!
",danielmorrison,2011-11-15 15:22:38
388,2011-08-30 12:08:23,"+1. Would love to see this in the 1.1.0 release.
",bryckbost,2011-11-15 15:22:38
388,2011-08-30 13:03:06,"Yeah, anything we can help do to get this in?
",danielmorrison,2011-11-15 15:22:38
388,2011-09-30 15:35:33,"+1. Would also love to see this in soon!
",JaredSartin,2011-11-15 15:22:38
388,2011-09-30 15:59:00,"I assume the reason this hasnt been included is that it doesnt handle the edge cases (text split between one visible and non-visible element, etc).  That being said, I'm not really sure how relevant the edge cases are to most peoples testing
",twalpole,2011-11-15 15:22:38
388,2011-10-17 04:05:59,"I think there is a more fundamental issue with the semantics of `has_content?` matcher that I'm trying to solve by adding a new `has_text?` matcher. 

Currently trying to figure out a way to address the issue in this pull request too, since it's basically all related imo.

It's not finished yet but would love to get your folks' input:
https://github.com/jnicklas/capybara/pull/522
",mkdynamic,2011-11-15 15:22:38
388,2011-11-15 15:22:38,"I dislike this pull request for a number of reasons. I think trying to figure out what is and isn't text of an element in xpath is really difficult, and we should leave it up to the drivers to do this. We got a `#has_text?` matcher recently which should handle these cases nicely. I think that `#has_content?` might become an alias to `#has_text?` in Capybara 2.0.
",jnicklas,2011-11-15 15:22:38
387,2011-06-17 19:14:59,"I use RSpec-Rails 2.6.1 together with Capybara 1.0.0.

Whenever I start my integration (request) tests I get the following
error (using the Selenium driver):

<S_CODE_TOKEN>

It seems that it can't find jQuery somehow. 
The strange thing is that when I switch back to RSpec 2.5 everything runs fine again. Any suggestions what could be wrong?

Here is also the spec_helper I use for my integration tests:

<pre>
ENV[""RAILS_ENV""] ||= 'test'
require File.expand_path(""../../config/environment"", __FILE__)
require 'rspec/rails'
require 'webrat'
require 'capybara/rspec'
require ""database_cleaner""

Dir[""#{File.dirname(__FILE__)}/support/**/*.rb""].each {|f| require f}

RSpec.configure do |config|
  config.filter_run :focus => true
  config.run_all_when_everything_filtered = true
  config.filter_run_excluding :exclude => true
  config.use_transactional_fixtures = false
  config.mock_with :rspec

  config.before(:all) do
    DatabaseCleaner.strategy = :truncation
    DatabaseCleaner.clean
  end

  config.after(:each) do
    DatabaseCleaner.clean
    Sunspot.remove_all!
  end
end

Webrat.configure do |config|
  config.mode = :rails
end
</pre>
",medihack,2011-06-17 21:18:37
387,2011-06-17 21:18:37,"David Chelimsky solved this problem in the RSpec Google group. There is a conflict when using Capybara together with Webrat that only shows up when using RSpec > 2.6. After removing the Webrat stuff everything worked fine again. Closing this issue.
",medihack,2011-06-17 21:18:37
387,2012-03-18 02:40:50,"How did you solve the $ is not defined error? that doesn't work for me with chromedriver.
",pencilcheck,2011-06-17 21:18:37
386,2011-06-16 16:14:19,"We ran into an issue in our app where json_pure was being required and was causing issues because some of the parsing aspects are not fully fleshed out. I tracked down the dependency chain to selenium-webdriver -> capybara. Being that the selenium driver is not the default driver for capybara it seems like it should be removed as a runtime dependency that is required when installing the capybara gem. Maybe it's moved into some sort of capybara extension gem eg. capybara-selenium. 
",ryanbriones,2011-06-16 22:37:42
386,2011-06-16 22:37:42,"One of the biggest selling points of Capybara is that it does JavaScript testing out of the box. Everything everywhere somehow depends on some version of the json gem, the whole json library thing is a terrible thing in the ruby community, the fact that Capybara depends on selenium is not the problem.
",jnicklas,2011-06-16 22:37:42
386,2011-06-19 22:31:21,"@ryanbriones: If you believe selenium-webdriver should handle its JSON dependency differently, please file an issue in our tracker: 

  http://code.google.com/p/selenium/issues/entry
",jarib,2011-06-16 22:37:42
386,2011-06-19 22:58:53,"Thanks jarib. I will pass this on to the person on my team that was closest to this bug. In a fit of frustration with the dependency isse I found, and was annoyed by the fact, that capybara was loading selenium-webclient as part of it's core, which is why I filed that particular issue here.

Cheers!
",ryanbriones,2011-06-16 22:37:42
385,2011-06-14 22:24:05,"Selenium webdriver has an issue in FF4 that's apparently a bug originating in Mozilla.  http://code.google.com/p/selenium/issues/detail?id=1438

Annoyingly, I'm not sure what produces this problem - just that I generally don't see it in my tests, but I do see it when I try to drive capybara from an interactive IRB session.  The fix is to tell the driver ""driver.switch_to.default_content"".  Not sure if it's appropriate to have capybara incorporate this workaround, or where it should go if it should, but having this just in there would make my life easier.
",mgiambalvo,2011-11-15 17:04:49
385,2011-10-31 17:11:50,"I have this issue as well, it only happens while during debugging I switch focus from browser to some other application. To fix it during debugging session I normally do Capybara.current_session.driver.browser.switch_to.window(Capybara.current_session.driver.browser.window_handles.last)
",uahmed,2011-11-15 17:04:49
385,2011-11-15 17:04:49,"Since this is fixed in Selenium, I am closing this issue.
",jnicklas,2011-11-15 17:04:49
385,2011-12-06 01:17:35,"Just tested this with firefox 8.0.1 and selenium-webdriver-2.14.0. This appears to be fixed. 
",uahmed,2011-11-15 17:04:49
384,2011-06-13 22:24:08,"Capybara's have_selector matcher does not support nesting.

Example:

<pre>
    require 'spec_helper'
    describe ""messages/new.html.erb"" do
      let(:message) do
        mock_model(""Message"").as_new_record.as_null_object
      end
      before do
        assign :message, message
      end
      it ""renders a form to create a message"" do
        render
        rendered.should have_selector(""form"",
          :method => ""post"",
          :action => messages_path
        ) do |form|
          form.should have_selector(""input"", :type => ""submit"") # this should fail because no submit button is in the view, but it silently passes
        end
      end
</pre>

This doesn't work with Capybara, but would work correctly if with Webrat. In any case, shouldn't Capybara support nesting just like Webrat does?

This issue becomes more prominent with something like this:

<pre>
    rendered.should have_selector(""form"") do |form|
        form.should have_selector(""input"",
            :type => ""submit"",
            :name => ""message[title]"",
            :value => ""the title""
        )
    end
</pre>


because many of the checks are in the nested area.
",dmonopoly,2011-06-14 06:40:56
384,2011-06-14 06:40:56,"The fact that have_selector takes a block in Webrat has never made sense to me. Just change it to something like:

<S_CODE_TOKEN>

Note that Capybara never claims to be API compatible with Webrat, they are different libraries with _similar_ but not compatible APIs.
",jnicklas,2011-06-14 06:40:56
384,2011-06-14 14:50:55,"Alright - thanks for the tip about APIs.

But I really just want a clean way to test this, and ""within"" actually isn't available in view specs.
",dmonopoly,2011-06-14 06:40:56
384,2011-06-14 15:08:27,"Actually, there's nothing wrong with letting Webrat and Capybara coexist in one project, is there?  So I could have both webrat and capybara in my Gemfile?
",dmonopoly,2011-06-14 06:40:56
384,2011-06-14 15:19:09,"This isn't a support forum, but a quick hint:

<S_CODE_TOKEN>

This works in view specs, and does much the same thing. In fact you can call almost all methods you can call on the top level for any node returned from find, including stuff like click_link and has_selector?. Another good way to do this is using Object#tap:

<S_CODE_TOKEN>
",jnicklas,2011-06-14 06:40:56
384,2011-06-28 04:13:33,"This is not working with Capybara 1.0 and rspec-rails 2.6.1. I even tagged the example group with `:type => :request` still no joy

<S_CODE_TOKEN>
",dwilkie,2011-06-14 06:40:56
384,2011-06-28 10:32:37,"@jnicklas, since lots of people are switching from webrat and this is a mistake people often make, perhaps it would be nice for us to give them a warning when passing ignored options or a block to #have_selector ?
",gunn,2011-06-14 06:40:56
384,2011-07-20 18:24:23,"Strangely, with rspec & rails in controller tests, `within` is available as a method but it doesn't find things properly.

I have:

<S_CODE_TOKEN>

And it errors with `Unable to find css ""form""` but replacing the above with just `response.body.should have_css('form input')` works just fine.

(Any ideas or should I open a new bug?)
",contentfree,2011-06-14 06:40:56
384,2011-07-21 12:50:42,"@contentfree, your setup seems a little odd -- while there is a response method somewhere deep inside the Capybara code, it shouldn't normally be exposed in your tests. Calling `response` just gives me `undefined method`.

Are you having webrat or something else lurking about, perhaps? Those interactions can be nasty. Try `p method(:response)` to figure out where that method comes from.
",joliss,2011-06-14 06:40:56
384,2011-07-22 18:28:24,"@joliss: I'm not sure what's odd about it. This is in a controller spec (not a cuke feature), so response is an available method and used all over the place.

The docs for capybara explicitly state: ""rspec-rails will also automatically include Capybara in :controller and :mailer example groups."" and `within` is definitely available as a method in the specs. The problem is that `within` doesn't find the content in `response.body` that matches the selector while `response.body.should have_css('the same selector')` does.
",contentfree,2011-06-14 06:40:56
384,2011-07-22 22:11:32,"[Cc @dchelimsky. Some context: @contentfree was trying to mix Capybara and ActionController::TestCase methods like so:]

<S_CODE_TOKEN>

---

Re @contentfree: Oh, that's a controller test -- now I see.

I think the reason why it doesn't work is that `within` is part of Capybara, whereas `response` is part of ActionController::TestCase. (That's two completely separate testing systems: Capybara exercises the entire stack, and ActionController::TestCase only calls the controller.) As a result, `within` uses Capybara's current `page` to find and set a new scope, which is then used by the methods in Capybara's DSL (unless you call them on specific nodes). But `response` does not care about Capybara's scope.

@dchelimsky, should rspec-rails really include the Capybara::DSL in :controller specs? What was the reason behind that? I'm wondering (in a _just putting the thought out there without a technical clue_ kind of way) if rspec-rails should rather include some subset (or nothing at all) for :controller specs to avoid confusion like this.
",joliss,2011-06-14 06:40:56
384,2011-07-27 21:02:23,"I was able to modify the work-around provided by @jnicklas so that it works in my view specs under capybara 1.0.0 and rspec-rails 2.6.1:

<S_CODE_TOKEN>

The trick here was to expose the Capybara DSL by wrapping RSpec's `rendered` string in a `Capybara::Node::Simple` object.
",Tekhne,2011-06-14 06:40:56
384,2012-12-14 19:14:38,"Is there a solution for this? None of the examples above work for me with capybara 2.0.1 and rspec 2.12.0, and this just feels wrong:

<S_CODE_TOKEN>

compared to this:

<S_CODE_TOKEN>
",jaredmoody,2011-06-14 06:40:56
384,2013-04-12 12:01:49,"i use capybara 2.0.0.beta2 and rspec 2.10.0 (i'm stuck on this not by my own choice)

and use what Tekhne has shown in my view spec with a function:

<S_CODE_TOKEN>

As you can see, you can use all finders on the form object, also find_field and check all attributes afterwards.
works like a charm :)
",shotty01,2011-06-14 06:40:56
384,2013-04-24 19:42:13,"I'm not satisfied with this issue having been closed. I run into jaredmoody's example all the time. Why should I have to duplicate my CSS finders in every call to #have_selector? What's so harmful about allowing blocks? I just don't get why you wouldn't want to offer this functionality.
",pelargir,2011-06-14 06:40:56
384,2013-04-24 20:40:45,"There are about a bajillion options to choose from documented in this thread. The block API in Webrat for have_selector is pretty dumb, if you really think about it, it does not make any sense at all. How about an example like this:

<S_CODE_TOKEN>

What the hell does that mean? I don't even know. have_selector is an assertion, it's either pass or fail, it has the semantics of an assertion. Using it to scope something on the page is just a flawed idea.

If you're using Capybara for integration tests, this is a complete non-issue, since you can simply use `find` or `within` instead of `have_selector`, which actually makes sense and isn't completely confusing. If you're writing view, or helper specs, all you need to do is wrap the output in `Capybara.string` and you can scope to your hearts content.

If you're still not satisfied, then write your own `have_selector` method. This is Ruby after all, just override the method to behave in whatever way you want.

As long as I'm dictator of this project, `have_selector` will never accept a block.
",jnicklas,2011-06-14 06:40:56
384,2013-04-24 21:34:15,"To people that request it. @jaredmoody's example can be rewritten to:

<S_CODE_TOKEN>

I don't get why you don't like it
",abotalov,2011-06-14 06:40:56
384,2013-04-29 02:27:55,"We have a simple disagreement then. The #have_selector with a block makes total sense to me, as does scoping something on a page. I do it all the time. Giving an example of a confusing scoping is just setting up a straw man. I can give an equally valid example where the scoping makes sense.

That said, the example using #within actually isn't half bad and seems to work for me so I'll be using that. Thanks!

I still have what I think is a valid concern over not raising some type of warning when a block is passed to #have_selector. After upgrading my project from Webrat to Selenium, my tests that were using scoped #have_selector blocks continued passing. However, they weren't checking what I thought they were checking any longer. It was literally months later before I discovered that #have_selector wasn't handling blocks. So my tests that were previously valid under Webrat were no longer checking what they were supposed to be checking under Capybara. And there was nothing to warn me about this in the Capybara README or the docs.

So basically, by not surfacing some kind of warning to the user that blocks aren't being respected in Capybara, you're potentially causing a world of hurt to anyone who is transitioning from Webrat. Silent failure is rarely a good idea. I'm not sure why you wouldn't want to warn if a block is passed to #have_selector?
",pelargir,2011-06-14 06:40:56
384,2013-04-29 05:08:02,"From the first sentence of the project's description:

<S_CODE_TOKEN>

Thus, I tend to use Capybara to simulate the user's action and the associated response from invoking that action.  For example, when a user enters an e-mail address and clicks the submit button on a 'Join Mailing List Form', the user should see 'You have been added to the mailing list.' or 'Please confirm by clicking on the link in the e-mail that we sent to bob@example.com.'.  In the past when I worked at a lower level of granularity (i.e. talking about the structure of the page), these type of tests would be brittle because the designers are constantly modifying both CSS and HTML.  Yes, there may be cases where there are multiple forms on the page but I tend to keep this to a minimum because many times this can be confusing to the user as it would be more development for an automated test.  Next, would a user ever check the CSS styling or HTML structure of a form or would they simply navigate to a page and complete the form fields that appear on the screen?  I believe that the user would tend to do the latter because the former tends to be more of a view related spec.  Last but not least, I only write unit, acceptance, and sometimes controller/helper specs when developing pages for a website.  If I'm developing REST APIs, then I would only write both controller and unit specs.
",conradwt,2011-06-14 06:40:56
384,2013-10-11 15:54:33,"I very much like the 'within' method solution proposed here, however it doesn't appear to work for view specs which is primarily where I want to be testing this sort of behaviour!

As I also get:
<code>NoMethodError:
   undefined method `within' for #<RSpec::Core::..blahblah>... </code>

See: https://github.com/rspec/rspec-rails/issues/387
",IAmFledge,2011-06-14 06:40:56
384,2013-10-11 16:08:29,"@IAmFledge as I mentioned in my comment, you'll need to wrap your response in `Capybara.string`. If this is something you do a lot, you could do:

<S_CODE_TOKEN>

Or if you want to get really fancy:

<S_CODE_TOKEN>
",jnicklas,2011-06-14 06:40:56
384,2015-07-25 17:16:10,"Hey guys, I just started ""appreciating"" view specs and needed some of the scoping of Capybara in there so inspired in this ""conversation"" and other resources I created 

https://gist.github.com/hisapy/0cbd7898334b386afa84

This appreciation came after finally finding a robust and agile Rails BDD flow from Cucumber to RSpec which I'll try to describe in a future blog/tweet post (https://twitter.com/hisa_py).

I hope you enjoy it. 
",hisapy,2011-06-14 06:40:56
383,2011-06-12 17:07:05,"A follow-up to issue #381.  Might be overkill, but I did something similar in a project where I had to test a bunch of different (but small) file uploads and I found it to be useful.  It would also make it easy to adjust file contents on-the-fly, e.g. if you have a generated User and you want to include that user name or id in the uploaded file without having to actually hard-code that ID in a test file.

Comments and criticisms welcome.
",tvon,2011-12-28 16:01:01
383,2011-06-13 10:23:30,"I like the functionality, but I dislike the API. Not sure how we'd improve it, but the block stuff seems strange to me, it should just be a normal param somehow.
",jnicklas,2011-12-28 16:01:01
383,2011-06-13 13:51:20,"It is a bit of an abuse of the block, it could just be a string param, eg:

<S_CODE_TOKEN>

I will say that the block is useful because it's presence tells us how attach_file is being used, it also would allow any logic used to generate the file to be nicely encapsulated (if generating an image or a file with dynamic content).

That said, if this is to be without a block maybe it makes sense to leave attach_file alone and just add attach_file_with() or attach_file_containing(), eg:

<S_CODE_TOKEN>

What do you think?
",tvon,2011-12-28 16:01:01
383,2011-06-13 15:49:05,"I agree with Jonas that this should just be a normal string parameter, not a block. If you insist on having logic in your parameter, you can do

<S_CODE_TOKEN>

I don't have an opinion on the naming, I've never used the attach_file API.
",joliss,2011-12-28 16:01:01
383,2011-06-13 15:50:43,"(It does seem like a good idea in general, so far as I can judge.)
",joliss,2011-12-28 16:01:01
383,2011-06-13 15:53:22,"Oh, one more thing (sorry for spamming!): Isn't the file name important sometimes? Perhaps there should be an optional parameter to specify the name, so it doesn't end up as a weird temp-file name in cases where it makes a difference.
",joliss,2011-12-28 16:01:01
383,2011-06-14 00:49:53,"Okay, I'll go with something along the lines of:

<S_CODE_TOKEN>
",tvon,2011-12-28 16:01:01
383,2011-06-14 13:02:11,"Why don't we get full control over the file name, like passing in 'foo.txt'?

I think you can more easily use default values (or an option Hash in theory) instead of *args, by the way.
",joliss,2011-12-28 16:01:01
383,2011-06-14 13:26:26,"You can't pick a filename when using Tempfile (it would sort of defeat the purpose), and specifying the exact filename didn't seem important enough to me to use something else.

Do you have a specific use-case in mind?
",tvon,2011-12-28 16:01:01
383,2011-06-14 14:55:47,"Re use case: Well, web applications get the file name, not just the contents of the file, right? So maybe you also want to test for has_content('foo.txt was successfully uploaded'), or test that the file name shows up in some list.

Just configuring the extension is perhaps not even that useful by itself. But you are right, Tempfile won't do let you control the entire file name. Maybe one could just create a tmpdir and drop the file there?

Anyway, I don't want to bikeshed -- I think it's fine to not have control over the file name. It can always be added later if it someone cares enough.
",joliss,2011-12-28 16:01:01
383,2011-06-14 15:17:56,"Actually I think it's simple enough to add that functionality now, I'll go ahead and switch to Dir.mktmpdir

_edit: scratch that, requires cleaning up the temporary directory manually, which I'm not into._
",tvon,2011-12-28 16:01:01
383,2011-06-14 15:23:25,"I'm a bit late to the party, but I dislike moving this to a separate method, maybe something like:

<S_CODE_TOKEN>

What do you guys think?
",jnicklas,2011-12-28 16:01:01
383,2011-06-14 15:57:26,"Hmm... doesn't it seem a bit odd to have either a path _or_ an option hash as the first parameter? Also, perhaps it's slightly confusing that the first form actually reads a file from disk, whereas the second form just specifies any name for the HTTP request.

So I'd perhaps have a slight preference for the more explicit attach_file_containing(s), which we can later extend with options. I'll leave it up to you though -- you probably have the better taste for method signatures. ;)
",joliss,2011-12-28 16:01:01
383,2011-06-14 18:29:02,"You'd have the locator too, so It would be:

<S_CODE_TOKEN>

The sniffing looks like this (which I'm including because I'm not a good enough Rubyist to know if I'm doing bad things here or not):

<S_CODE_TOKEN>

I opted for sticking with Tempfile but accepting a prefix so you could still test for a confirmation, (though not as cleanly as if the entire filename were settable).  I'm open to Dir.mktmpdir if there is a simple way to clean it up.
",tvon,2011-12-28 16:01:01
383,2011-06-23 01:50:45,"Note that the Tempfile can be GC'd as soon as attach_file exits (since the handle isn't being stored anywhere), so this is currently useless.
",tvon,2011-12-28 16:01:01
383,2011-12-28 16:01:01,"/cc @jnicklas 

It seems there has been no progress on this for a while, and there are still synchronicity issues for the temp file cleanup that prevent us from adding this feature. I'll close this pull request for now. Feel free to reopen if there's new code.

Jonas, is it OK if I close old pull requests like this?
",joliss,2011-12-28 16:01:01
382,2011-06-12 03:46:03,"I've got a commit here to add a user agent for the rack_test browser. While I was in there I noticed the http referer code didn't have any spec coverage so I added an example for that too.
",joho,2011-11-15 15:19:53
382,2011-06-12 23:22:30,"Wait, you're setting `""Capybara/SomeUserAgentCrap""` as the default user agent for all rack-test requests? That doesn't seem right. ;-)
",joliss,2011-11-15 15:19:53
382,2011-06-13 10:22:07,"1) Why would we need a default user agent anyway?
2) While I like the humor, can we use something more neutral?
3) Pretty sure those tests fail for drivers other than RackTest
",jnicklas,2011-11-15 15:19:53
382,2011-06-14 01:27:27,"1) Because I'm pretty sure browsers always supply it - and code i've got that ""works"" in reality fails under rack test
2) Sure, I was at railscamp and was a few scotches down by that point, and I'm not fussed about what the user agent is, I just want one.
3) Whoops sorry about that - I don't have firefox on my machine. Maybe the test should be that the referrer is not nil in general, and then move the expectation about what it is to a specific rack-test spec.

If you're not in general opposed to having this code I'll spend some time tonight after work getting the pull request into better shape.  
",joho,2011-11-15 15:19:53
382,2011-06-14 06:37:41,"@joho: I'm not opposed at all to this pull request, if you can get it into better shape, I'd be glad to merge it. I'd agree that it would be best to have a test which just checks that it isn't nil, that seems sensible.
",jnicklas,2011-11-15 15:19:53
382,2011-06-14 12:40:54,"I ran the suite with firefox installed and everything passed. The shared example group I added it to was only for drivers that allow you to change request headers - excluding selenium.

I've made the test a little less specific as mentioned above, and changed the user agent.
",joho,2011-11-15 15:19:53
382,2011-06-14 12:57:37,"On Tue, Jun 14, 2011 at 03:27, joho
reply@reply.github.com
wrote:

> 1) Because I'm pretty sure browsers always supply it - and code i've got that ""works"" in reality fails under rack test

I'm not sure that's a good reason -- I think many browsers can easily
be configured to not send a User-Agent, FWIW, and it's definitely
valid by the HTTP RFC. If your code crashes if there is no UA, that's
enough of an idiosyncrasy (if not bug) that you should be manually
setting it in your tests. And in those cases you'll usually need to
manually pick one of the ""major"" UA strings anyway, I'm guessing.

Not that I'm fundamentally against setting a default UA, but changing
Capybara just to make it work with funny webapps just seems a bit
excessive to me.
",joliss,2011-11-15 15:19:53
382,2011-06-14 13:05:09,"I mostly considered it a violation of the principle of least surprise: it's there far, far more often than it's not.

I'd think the inverse approach would be sensible: assume there will always be a user agent, and if you care enough about the corner case, remove it from request.env on a test marked something like ""ensure blah still works when someone disables their user agent""
",joho,2011-11-15 15:19:53
382,2011-06-14 14:39:24,"Huh, I guess. I don't _really_ care to be honest. ;)

One more technical thing though, it should probably use Capybara::VERSION, not hard-code 1.0 I think.
",joliss,2011-11-15 15:19:53
382,2011-06-14 15:27:36,"@joho: just realized that those tests are not run by Selenium, since it doesn't include the header support module in its suite (Selenium doesn't have support for reading HTTP headers). That's why it's passing, these will still fail with any other driver (e.g. Akephalos) which implements the headers, but doesn't have the same API as RackTest. Please rewrite these tests to use the official Capybara driver API only (see Capybara::Driver::Base). 
",jnicklas,2011-11-15 15:19:53
382,2011-06-15 04:03:13,"Cool, will do.

Is there an easy way to run the tests with Akephalos etc?
",joho,2011-11-15 15:19:53
382,2011-06-15 05:45:45,"@joho: pull down the Akephalos source, change the Gemfile to point at your Capybara fork on Github, bundle install and run.
",jnicklas,2011-11-15 15:19:53
382,2011-10-25 13:13:35,"At the mean time, for the rest of us

<S_CODE_TOKEN>
",speedmax,2011-11-15 15:19:53
382,2011-11-15 15:19:53,"Closing due to inactivity, if someone still wants this, provide a better test case. The code is fine as is.
",jnicklas,2011-11-15 15:19:53
381,2011-06-10 18:25:58,"For example, say you want an acceptance test for uploading and doing whatever to a YAML file, you could write it as:

<S_CODE_TOKEN>

The code would look something like this:

<S_CODE_TOKEN>

I'm relatively new to ruby, but to me this seems a nice way to test attaching text files without having to actually add the test files to the project.
",tvon,2011-06-13 23:36:07
381,2011-06-13 23:36:07,"--> Followed up by pull request #383.

(Closing.)
",joliss,2011-06-13 23:36:07
380,2011-06-10 15:20:09,"We're having problems on 2 Windows machines where the page gets created, but isn't being launched properly. Manually launching the pages using Launchy works, as well as opening the pages directly from the temp folder.

Any ideas? We're not sure how to debug this.
",surajreddy,2011-11-15 17:02:48
380,2011-06-10 16:05:45,"We added this to the save_and_open_page method in save_and_open_page.rb, and it seems to work:

<S_CODE_TOKEN>

Not sure what's wrong with using tempfile.path.
",surajreddy,2011-11-15 17:02:48
380,2011-07-25 20:52:00,"This should be fixed in Launchy now. See https://github.com/jnicklas/capybara/issues/435
",trevorturk,2011-11-15 17:02:48
380,2011-07-25 21:15:31,"I'm not sure if this is the same problem, though it might be. @surajreddy, can you try if upgrading to launchy 2.0.4 solves the problem for you?
",joliss,2011-11-15 17:02:48
380,2011-11-15 17:02:48,"Since this is presumed fixed, and the @surajreddy didn't say otherwise, I am closing this. Please reopen if it's still relevant.
",jnicklas,2011-11-15 17:02:48
380,2011-11-15 18:00:16,"Been doing most of my dev on a mac. I'd say it's fixed - if I come across it again I'll start a new issue.
",surajreddy,2011-11-15 17:02:48
379,2011-06-10 01:24:33,"Running click_link 'Title View' against 

<S_CODE_TOKEN>

results in  Capybara::ElementNotFound: no link with title, id or text 'Title View' found . Adding an empty href -

<S_CODE_TOKEN>

works.

So, is the code testing for links by looking for a elements with href attributes? If so, shouldn't it drop the href attribute as mandatory?
",nicholasf,2011-06-10 05:49:46
379,2011-06-10 05:49:46,"`a` tags without an `href` are not links, they are placeholders for links. That's how the HTML spec defines it, that's how every modern browser treats them. Capybara does indeed only click on links which have the `href` attribute, and imho, that's sensible behaviour.
",jnicklas,2011-06-10 05:49:46
379,2011-06-10 06:01:41,"Yes, agreed. I read the HTML 5 spec about it. 

Perhaps a better approach would be something like

<S_CODE_TOKEN>

where there'd be some jquery eventing on the span element, but how would capybara simulate clicking/selecting that text?

For the moment I've lapsed into using href=""#"", which feels like a bad practice but it's working.

Thanks for response and capybara - great stuff.
",nicholasf,2011-06-10 05:49:46
379,2011-06-11 13:00:16,"I have never tried this, but I think you might be able to do `find(:css, '#foo').click`.
",joliss,2011-06-10 05:49:46
379,2011-06-11 17:55:12,"Jo is right, that should do the trick. Personally, I'd just add the href=""#"" to the links, I don't think that's bad practice at all.
",jnicklas,2011-06-10 05:49:46
379,2011-06-24 15:06:45,"Adding `href=""#""` is the right concept, but is actually bad practice for the general case:
http://www.javascripttoolbox.com/bestpractices/#onclick

Unless you intend to use the effect of `href=""#""`, which is to force the user to jump back to the top of the page if they are below the fold, it should always be avoided.  Also when used in conjunction with the `<base>` tag, these `href=""#""` links will navigate away from the current page to the base URL.

The 'best-practice' syntax is:

<S_CODE_TOKEN>
",pboling,2011-06-10 05:49:46
379,2013-01-03 20:25:09,"Another way to do this is to first find link than ""click"" on it with keyboard

<S_CODE_TOKEN>

Hope it helps somebody.

Regards
",tomazzlender,2011-06-10 05:49:46
379,2013-03-07 18:40:43,"@jnicklas I've tried adding href='#' to my links but I run into the same issue as @pboling - my pages jump to the top when the user clicks them. Without a hack like @tomazzlender suggested, Capybara won't click something that isn't a link, and using inline javascript as @pboling suggested mixes your concerns and is generally frowned upon these days. 

What I've finally settled on is having a real link that is used if a browser doesn't support JS, and using `preventDefault()` to keep the link from actually being followed if the browser does support JS. 

But I actually got the practice of using `a` without the `href` from the Jquery UI documentation (http://jqueryui.com/sortable/). If Jquery UI is using this practice, it seems to me that it's standard enough to support it.

Thanks for all your good work on Capybara.
",michaelrkn,2011-06-10 05:49:46
379,2013-03-07 18:51:12,"@michaelrkn standard is kind of a binary concept, it either is standard or it isn't. In this case, standard means the [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/text-level-semantics.html#the-a-element). This is the relevant section:

> If the a element has an href attribute, then it represents a hyperlink (a hypertext anchor) labeled by its contents.
> 
> If the a element has no href attribute, then the element represents a placeholder for where a link might otherwise have been placed, if it had been relevant, consisting of just the element's contents.

I don't think this can be much clearer. ""then it represents a hyperlink"". otherwise is does not.

Capybara will happily click on anything you can throw at it, by the way, it just won't _find_ it as a link, if you do `click_link`. `find(""a"", :text => ""whatever"").click` will work just fine, `href` or not.
",jnicklas,2011-06-10 05:49:46
379,2013-03-09 07:00:09,"`find(""a"", :text => ""whatever"").click` :thumbsup: 

Thank you
",Petercopter,2011-06-10 05:49:46
379,2013-04-22 14:18:59,"We've just stumbled upon exactly the same issue. However, <pre>find(:css, ""id-of-a-tag"").click</pre> does _not_ work for us. We're using Selenium as web driver (and Javascript driver).
",anpr,2011-06-10 05:49:46
379,2013-04-22 14:25:45,"@anpr it needs to be a valid CSS selector

<S_CODE_TOKEN>
",twalpole,2011-06-10 05:49:46
379,2013-04-22 14:31:58,"We do that - sorry that my comment wasn't clear on that part. To reiterate: we have a case where
<pre>find(:css, ""#id-of-a-tag"").click</pre> doesn't work.
",anpr,2011-06-10 05:49:46
379,2013-04-22 14:36:56,"@anpr ok, then a stack trace would be helpful, and probably opening a new issue since this one specifically has to do with click_link
",twalpole,2011-06-10 05:49:46
379,2013-04-22 15:44:42,"@twalpole: In the meantime, we found out that there was a bug so that the link-without-href couldn't be clicked upon. So sorry for the spam, there's no Capybara issue here.
",anpr,2011-06-10 05:49:46
379,2013-04-29 10:40:06,"<S_CODE_TOKEN>

Does not seem to work? Is `title` a valid option? If not, why?
",jmuheim,2011-06-10 05:49:46
379,2013-04-29 13:59:31,"@jmuheim 
1. Why would you add this to a closed issue?
2. After reading the readme why post to an issue on github rather than the mailing list?
3. No title is not an option because its not needed since the locator will match a title for a link
4. ""Does not seem to work"" is a useless description of an issue
5. find(:link, ""whatever"").click or click_link(""whatever"") are 2 options for what you probably want
6. and if its not actually a link (no href) then you can just use css find(""a[title=whatever]"").click
",twalpole,2011-06-10 05:49:46
379,2014-06-01 23:46:23,"@jnicklas your suggestion of `find(""a"", :text => ""whatever"").click` is nice -- however I think I'm finding that capybara will visit ""/"" if it doesn't find a href.
",jjb,2011-06-10 05:49:46
379,2014-06-02 22:48:42,"@jjb yep - apparently theres a bug there
",twalpole,2011-06-10 05:49:46
379,2017-03-18 01:53:27,Seems it works on my Mac but failed on my Linux box with Firefox. On Linux it went to '/'.,terryyin,2011-06-10 05:49:46
379,2017-03-18 04:51:50,@terryyin This is an old closed issue - if you have a reproducible example of a problem please create a new issue with enough detail to reproduce,twalpole,2011-06-10 05:49:46
378,2011-06-09 19:59:59,"Hey guys,

Not sure if this is the place to do this, or how you add items to your project.

Basically I needed to deal with JS alerts, closing them and such, and saw there was no way to do so with capybara and selenium.

I found that functionality exists in webdriver to deal with JS alerts, but it's not exposed in the brdige. So I overwrote the Selenium::WebDriver::Driver class to expose the 4 methods which allow you to interact with JS alerts.

In my case I was able to do this
page.driver.browser.accept_alert()

I'm wondering if you are interested in having this? I will also submit a bug (http://code.google.com/p/selenium/issues/detail?id=1807) to webdriver project, but in any case, if they fix it you would need a way to use these methods.

More info on how i did this locally

http://agilesoftwaretesting.com/?p=230

Hope this helps
",dimacus,2011-06-09 20:56:17
378,2011-06-09 20:56:17,"Not going to accept a pull request which basically monkey patches another library. Selenium actually already supports working with alerts/prompts through the window API. For the time being we're not going to add support for that in Capybara though, want to wait a bit for a best practice to establish itself.
",jnicklas,2011-06-09 20:56:17
377,2011-06-09 17:45:17,"It would be nice if Capybara had a debug mode which printed out all actions it takes and shows all pages it visits (in RackTest) and so on.
",adelcambre,2012-01-08 22:54:09
377,2012-01-08 22:54:09,"/cc @jnicklas

Hm ... Pull request #490 (""Debug mode"") didn't yield any results. I'll go ahead and close this until we have some more specific ideas (or preferably, code) to work with.
",joliss,2012-01-08 22:54:09
377,2012-01-08 23:06:24,"Agreed.
",jnicklas,2012-01-08 22:54:09
376,2011-06-09 17:37:30,"According to the HTTP spec, all redirect URLs should be fully qualified, this is not always followed in practice, and all modern browsers will allow a relative URL. Capybara should handle this case and preserve the same host, as long as the URL is relative, currently it reverts to no host.
",adelcambre,2011-08-30 08:05:09
376,2011-08-30 08:05:09,"This is now fixed, I think.
",jnicklas,2011-08-30 08:05:09
375,2011-06-09 06:37:34,"I update Capybara from 1.0.0.beta1 to 1.0.0.rc1, and now in all my Cucumber features rack's warnings appear in stdout:

<pre><code>
rack-1.2.3/lib/rack/utils.rb:16: warning: regexp match /.../n against to UTF-8 string
</code></pre>
",Mik-die,2011-06-09 07:30:53
375,2011-06-09 07:30:53,"As I mentioned in the release announcement, if you're running Ruby 1.9.2 and Capybara 1.0.0.rc1 you need to update to Rack 1.3.0 or later, that should fix this issue.
",jnicklas,2011-06-09 07:30:53
374,2011-06-09 01:10:03,"Currently it returns a huge blob of information, which is pretty useless, it should just show the driver name, and/or something.
",adelcambre,2011-06-09 20:12:30
374,2011-06-09 20:12:30,"I think this is more of a feature request than a bug report, so I'll take the liberty to close this.

Pull requests are always welcome though. ;-)
",joliss,2011-06-09 20:12:30
374,2011-07-20 21:01:37,"I just fixed this on master. :-)
",joliss,2011-06-09 20:12:30
373,2011-06-07 02:33:55,"I am not sure whether this is an issue that needs to be addressed for capybara or not and did post to the mailing list but have received no response anyway please refer to this link https://groups.google.com/forum/#!topic/ruby-capybara/SBCor8UUj7w .

If someone could clarify whether this is a compatibility issue or how I can address this please let me know.
",dbkbali,2011-06-07 17:20:07
373,2011-06-07 17:20:07,"This is unfortunate, but unfortunately unfixable. We're generating static files, which can't very well use the asset pipeline.
",jnicklas,2011-06-07 17:20:07
373,2011-06-08 04:17:26,"Understood, was just a little shocked when I saw no formatting on the ""screenshot"", but will not have any impact on testing, may have to search the pages a little harder to debug!

Thanks for the response.

David Krett

On Wednesday, June 8, 2011 at 1:20 AM, jnicklas wrote:

> This is unfortunate, but unfortunately unfixable. We're generating static files, which can't very well use the asset pipeline.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/373#comment_1318590
",dbkbali,2011-06-07 17:20:07
373,2011-06-11 11:35:19,"@dbkbali, I showed you the possible way to fight this problem in the mailing list. Did that help you?
",nashbridges,2011-06-07 17:20:07
373,2011-06-11 13:13:11,"Thanks Nash, I will probably try and implement this but for now am able to handle testing without the images! also, will wait to try your monkey patch once rails stabilizes.
",dbkbali,2011-06-07 17:20:07
373,2011-08-13 21:56:42,"I expanded upon @dbkbali's solution to support recursive subfolders in assets, and also rewriting css packages and asset_paths within those. So far its all working pretty good for me. Gist is here:

https://gist.github.com/1144277

You just need to run rake assets:precompile before you run your test suite. I'm also running on the latest rails 3-1-stable branch as I was having some inconsistency issues with precompiling across different machines on rc5.

Not sure what you think @jnicklas about asset pipeline save_and_open_page support ever going into Capybara, but this is a good starting point. I'm sure a lot of people will want this feature, so if you think it doesn't belong in Capybara, we can create a separate gem.
",snelson,2011-06-07 17:20:07
372,2011-06-04 00:27:04,"I am wondering what is a good way to print out the ful html of the selected tag,  e.g.:

i run into an issue where I am trying to do a xpath matching on a img tag based on it's src content, but the test keeps on failing.  so i want to print out the html content which i am selecting on and make sure i am getting the correct content.

my img tag:

<img id='test_id' src='/upload/box/1/test.png'>
(notice the src part is dynamically updated, and what i expect it to be, also what i want to confirm)
now the check always fails:

page.should have_xpath '//img[contains(@src, ""test.png"")]'

so I'd like to be able to print out the content of teh html so i can confirm i am getting the right value set. can i do something like:

STDOUT.write find(:xpath, '//img[contains(@src, ""test.png"")]').?????

thanks,
sean
",swang54,2011-06-04 00:31:34
372,2011-06-04 00:31:34,"Please post this question to the mailing list. The issue tracker is for reproducible bugs.
",jnicklas,2011-06-04 00:31:34
371,2011-06-04 00:18:20,"i am using carrierwave to do file uploads. as part of the feature, i set a trigger on 'change' event to detect file update and do a ajax form submission so i have the picture uploaded for preview. 

short story is, I have two such file fields, when i run test, i noticed only one callback happened, while i would expect two for each 'change' event. 

not sure this is a capybara problem or selenium problem.  guess it is worth checking here.

thanks,
",swang54,2011-06-04 00:32:32
371,2011-06-04 00:32:32,"Unless you can provide a concrete bug report, preferably with a reproducible test case, please post these kinds of questions to the mailing list.
",jnicklas,2011-06-04 00:32:32
370,2011-06-02 17:11:47,"Hi,
I'm using Cucumber, Rails, Capybara, and RackTest for integration tests.  If I test the user visiting an SSL login page and submitting the form found there (whose action is just ""/login""), the form data is posted to http://www.example.com/login, which my app rejects because it's not done over SSL.

Is it possible to resolve paths relative to the current protocol?  And is this Capybara's responsibility,  or RackTest?  I got a little confused when trying to trace which bits were responsible for what...

-Jonathan
",jdelStrother,2011-08-22 17:34:45
370,2011-06-02 17:30:00,"Which version of Capybara are you using? This should be solved in the 1.0 beta.
",jnicklas,2011-08-22 17:34:45
370,2011-06-02 17:59:25,"Huh, really?  I seem to be seeing this in 0.4.1, the 1.0 beta, and the latest version from github.
",jdelStrother,2011-08-22 17:34:45
370,2011-06-02 19:51:34,"This _should_ be fixed post 1.0 beta. Will have to dig a bit, if you can provide a failing test case, that would be hugely helpful.
",jnicklas,2011-08-22 17:34:45
370,2011-06-03 09:29:01,"Ah, I think I have the problem.  If you request an ssl page, then links on that page will correctly resolve to ssl.  It seems like if you request non-ssl, and the server redirects you to the ssl page, then the links aren't resolved to ssl.

I have a commit here demonstrating the problem - https://github.com/jdelStrother/capybara/commit/d47ff36f00ece310e279169b5136586e65fe51e9 - if you run ""rspec spec/session/rack_test_session_spec.rb"" you should see it.  Let me know if it's not clear.
",jdelStrother,2011-08-22 17:34:45
370,2011-08-17 19:54:00,"Any plans on fixing this?  Do you guys have a patch already?
",listia-liti,2011-08-22 17:34:45
370,2011-08-17 22:18:50,"There's a pull request for this...
https://github.com/jnicklas/capybara/pull/457
",ngan,2011-08-22 17:34:45
370,2011-08-21 15:01:56,"@jdelStrother I believe this has been fixed on master, can you double check and close.
",ngan,2011-08-22 17:34:45
370,2011-08-22 17:34:45,"Yep, looks good.
",jdelStrother,2011-08-22 17:34:45
369,2011-06-02 13:35:23,"Hi ,

I have a file dialog where I can enter the name of a magazine Issue in title field and associate an image(upload an image) with it.

Below is my html code in my rails3 application.

<div class=""fld_list_admin"">

            <span class=""form_label"">Issue Title : </span>
               <input type=""text"" size=""35"" id=""issue_name"" name=""issue_name"">

         <span class=""form_label"">Upload Issue Image: </span>
         <input type=""file"" size=""35"" id=""issue_image"" name=""issue_image"">
           
         <span class=""form_but1"">
         <input type=""image"" src=""/images/button_submit.png?1306254996"" name=""submit"" id=""issue_submit"">&nbsp;
            <a href=""/admin/issues/new?onclick=this.form.reset%28%29""><img border=""0"" width=""62"" height=""23"" src=""/images/button_reset.png?1306254996"" alt=""Button_reset""></a></span>
                     
</div>


I am trying to automate my UI test using capybara and selenium, the code I have written in my test/integration/issue_flow_test.rb are as follows

class IssueFlowTest < ActionDispatch::IntegrationTest
  fixtures :all

 def setup
    #Capybara.default_driver = :selenium
    Capybara.app_host = ""http://localhost:3000""
  end

test ""Magazine issue creation"" do

<S_CODE_TOKEN>

  end

In the above code, the issue_image is of input type 'file', when I try to access the same using Capybara with my default driver as selenium,
I am getting the following error,

Loaded suite /usr/local/lib/ruby/1.9.1/rake/rake_test_loader
Started
E.
Finished in 21.735446 seconds.

  1) Error:
test_login_issue_and_abstract_creation(IssueFlowTest):
Capybara::ElementNotFound: cannot fill in, no text field, text area or password field with id, name, or label 'issue_image' found
    /usr/local/lib/ruby/gems/1.9.1/gems/capybara-0.4.1.2/lib/capybara/node/finders.rb:33:in `find'
    /usr/local/lib/ruby/gems/1.9.1/gems/capybara-0.4.1.2/lib/capybara/node/actions.rb:54:in`fill_in'
    /usr/local/lib/ruby/gems/1.9.1/gems/capybara-0.4.1.2/lib/capybara/session.rb:264:in `method_missing'
    /usr/local/lib/ruby/gems/1.9.1/gems/capybara-0.4.1.2/lib/capybara/dsl.rb:104:in`fill_in'
    test/integration/issue_flow_test.rb:29:in `block in class:IssueFlowTest'

2 tests, 3 assertions, 0 failures, 1 errors, 0 skips

Test run options: --seed 24422
rake aborted!
Command failed with status (1): [/usr/local/bin/ruby -I""lib:test"" ""/usr/loc...]
/usr/local/lib/ruby/1.9.1/rake.rb:993:in `block in sh'
/usr/local/lib/ruby/1.9.1/rake.rb:1008:in`call'
/usr/local/lib/ruby/1.9.1/rake.rb:1008:in `sh'
/usr/local/lib/ruby/1.9.1/rake.rb:1092:in`sh'
/usr/local/lib/ruby/1.9.1/rake.rb:1027:in `ruby'
/usr/local/lib/ruby/1.9.1/rake.rb:1092:in`ruby'
/usr/local/lib/ruby/gems/1.9.1/gems/railties-3.0.3/lib/rails/test_unit/testing.rake:26:in `block (2 levels) in define'
/usr/local/lib/ruby/1.9.1/rake.rb:1110:in`verbose'
/usr/local/lib/ruby/gems/1.9.1/gems/railties-3.0.3/lib/rails/test_unit/testing.rake:11:in `block in define'
/usr/local/lib/ruby/1.9.1/rake.rb:634:in`call'

If some one could let me know how to use/test Capybara integrated with selenium for File Uploads and as well as Selecting a date from Javascript Calendar, that would favor me a lot and your help is appreciated
",hariharank12,2011-06-02 21:03:10
369,2011-06-02 21:03:10,"Closing this, please post to the mailing list _only_ not to two places at once.
",jnicklas,2011-06-02 21:03:10
368,2011-06-01 21:34:47,"People wanting to use Capybara as a replacement of Steak, or wanting to keep using Steak with the new version of Capybara, will have to update its includes from `:type => :acceptance` to `:type => :request` because the rspec example created by Capybara's `feature` method sets the type of the example group to `:request` (relating to the rather unused rspec-rails request specs, I suppose)

I've always found `request` a completely misleading name for this type of specs and I can't see any practical reason to prefer `request` over `acceptance` in Capybara's features. So I'd like you to consider using `acceptance` instead of `request` to make the upgrade for Steak users as smooth as possible.
",cavalle,2011-10-15 14:09:15
368,2011-06-01 22:28:50,"I don't really mind either way. I asked David Chelimsky, and he said the type should be :request for the best compatibility with RSpec, I don't know why, and I just went with it. We should involve him in this discussion imo. 
",jnicklas,2011-10-15 14:09:15
368,2011-06-01 22:31:18,"I have no comment off the top of my head on the actual patch, but I recommend that we check on the list before this is merged, since it likely interacts with rspec-rails.
",joliss,2011-10-15 14:09:15
368,2011-06-02 14:54:25,"The newest versions of rspec-rails use a spec/requests folder to hold acceptance tests. I don't know why the name was changed, but it was.
",steveklabnik,2011-10-15 14:09:15
368,2011-06-02 14:54:57,"Oh, and to get @dchelimsky involved, we should mention him.

Oh wait, I just did. :)
",steveklabnik,2011-10-15 14:09:15
368,2011-06-04 04:06:25,"Wow - I just wrote a treatise on why integration and acceptance are the wrong names and then promptly closed the browser before sending. If anybody is interested, I'll recompose, but here's the short version:

I'm opposed to changing request specs to acceptance specs in rspec, but there's no reason that capy can't configure rspec to include request spec behavior in an acceptance directory and hook the features DSL based on it's directory location instead of type.
",dchelimsky,2011-10-15 14:09:15
368,2011-06-04 09:45:22,"What @dchelimsky suggests is exactly [what Steak does](https://github.com/cavalle/steak/blob/master/lib/rspec-2/steak.rb#L11). I can help if you think it would make sense to port that logic to capybara.

Regarding the original motivation of this pull request (making the upgrade for steak users as smooth as possible), it seems that there'd be no problem [overwriting the type](https://github.com/cavalle/steak/blob/steak-2/lib/steak/acceptance_example_group.rb) of capybara features to `acceptance` in steak. So there's a workaround for that original issue that I can include in the next version of steak if you decide not to merge this pull request.
",cavalle,2011-10-15 14:09:15
368,2011-10-15 09:30:13,"@dchelimsky I am definitely interested in the treatise version. I actually think the terms 'integration' and 'acceptance' are very fuzzy. They are not mutually exclusive plus the meaning is dependent on perspective and context. I think they are often unhelpful. 

You could argue that all tests are integration tests. It's debatable. You could also say all acceptance tests are integration tests. Then again, you could have acceptance tests for a class' unit tests. You could have integration tests that are not acceptance tests (say, Rails' functional tests). In fact, functional tests is another term that is ambiguous. Anyway, this is a little OT, but I'd love for the community to have a discussion about these terms and bring some clarity.

On this specific matter, I would stick with request specs over acceptance specs in this case, if not only to follow RSpec conventions.
",mkdynamic,2011-10-15 14:09:15
368,2011-10-15 11:57:10,"> > but I'd love for the community to have a discussion about these terms and bring some clarity.

That is exactly the opposite of what such a discussion would bring :)

I think you've nailed it on the head: ask 10 different people to define unit, integration, functional, system, smoke, and acceptance tests (to name a few) and you'll get 100 different answers. In rspec-rails, we use the component names for most things (model, view, controller, helper, mailer), so that's easy to match up to what's being specified and at what level.

The fact that many developers write ""acceptance tests"" that their customers never even see, much less participate in writing, misses the meaning of the word ""acceptance"". Similarly, ""integration"" tests used to mean tests for combinations of behaviors. By that definition, what Rails dubs unit tests are integration tests.

I'm not sure that ""request specs"" solves the problem, but at least it doesn't have the baggage and many different meanings that ""acceptance"" and ""integration"" do.
",dchelimsky,2011-10-15 14:09:15
368,2011-10-15 14:09:15,"Agreed on the futility of such a discussion. I just opened this ticket to try to make the upgrade for steak users as smooth as possible. Since I found a workaround for the original issue I'm closing this now.
",cavalle,2011-10-15 14:09:15
367,2011-06-01 21:10:56,,cavalle,2011-06-01 21:11:25
366,2011-05-30 15:43:53,"I'm setting up a clean new project in Rails 3, and using capybara instead of webrat. But when I try to get Cucumber to go to the home page then it dies while running the steps. The full message is

undefined method `visit' for #Cucumber::Rails::World:0x3fe3a1a1fcd8 (NoMethodError)

There are a lot of postings about this on various forums, but the solutions all refer to WebRat, not Capybara. So I'm puzzled how I get this error when I've set things up with Capybara.

Basically the claim ;-

> > Capybara is built to work nicely with Cucumber. Support for Capybara is built into cucumber-rails. In your Rails app, just run:

<S_CODE_TOKEN>

And everything should be set up and ready to go.

> > Is false, because it isn't set up and ready to go. There's a secret step known only to the initiated. Could someone please tell me what it is.
",JohnSmall,2011-06-01 17:36:58
366,2011-05-30 16:25:19,"There is no secret step, and maybe the fact that Capybara is used by thousands of people, none of whom have experienced this problem might mean that the problem is on your end?
",jnicklas,2011-06-01 17:36:58
366,2011-06-01 17:36:58,"Hm, I have never seen this problem before, but I was able to set up Cucumber with Capybara on a Rails 3 project with no problems. My only idea is: Are you using the most recent versions of all packages?

I'm closing this issue. Issues are best used for specific bugs, by the way -- if you need general help setting things up, the mailing list is a better place (feel free to ask there if you need more help).

If you figure out what went wrong, please do leave a comment on this issue though! :-)
",joliss,2011-06-01 17:36:58
366,2011-06-13 16:53:48,"I had something similar on Rails 3.1.rc4. I has to include require 'capybara' in env.rb (cucumber) and then I get this error. I have inverted the require statements:

from

require 'cucumber/rails'
require 'capybara'

to 

require 'capybara'
require 'cucumber/rails'
",rtacconi,2011-06-01 17:36:58
366,2012-04-10 03:41:55,"Had the same issue. See more info and workarounds in https://github.com/rspec/rspec-rails/issues/360
",marcandre,2011-06-01 17:36:58
365,2011-05-27 20:21:36,"has_no_content? appears to look at all parents of the element that contains the content, and returns false if any of those parents are visible even if the actual element containing the content is hidden
",twalpole,2012-01-03 13:42:10
365,2011-06-01 13:43:10,"same problem here
",tomkurt,2012-01-03 13:42:10
365,2011-06-17 19:53:44,"We're seeing this on 1.0.0, when using selenium. We're still digging for a fix, but haven't found one yet.
",danielmorrison,2012-01-03 13:42:10
365,2011-06-17 21:28:18,"I filed a pull request with a fix for this
",twalpole,2012-01-03 13:42:10
365,2011-06-18 13:34:18,"At #388 for everyone's reference. :)
",joliss,2012-01-03 13:42:10
365,2011-10-31 20:35:39,"Is there anything preventing this from being merged?
",bkeepers,2012-01-03 13:42:10
365,2012-01-03 13:42:10,"Should be fixed by 6f420d024608510cc7b17bb005a0cc202dd49b87
",jnicklas,2012-01-03 13:42:10
364,2011-05-26 19:48:17,"This replaces #362 - I have removed the tests as discussed. Cheers.
",jonleighton,2011-06-01 20:36:33
363,2011-05-26 10:52:51,"First of all I'm not entirely sure if this issue is related to Capybara or Selenium itself but since Selenium doesn't interact with Rack and I'm not sure what Selenium client is used I figured it would be best to report this issue here.

The problem is that recently Rack released a new version, 1.3, this version however will generate a ""Rack application timed out"" error whenever using Selenium as the Capybara driver. I've played around with changing the boot timeout but even setting it to a few minutes doesn't make a difference. As soon as I downgraded to Rack 1.2.3 Selenium kicked back in just fine. I've looked through the Git commits of the Rack repository but I can't seem to locate anything that may cause this issue to occur.

My setup is as following:
- Rack 1.3 (1.2.3 works fine)
- Ruby 1.9.2 using RVM
- Mac OS X 10.6.7 (the issue is not affected by using a different OS)
- Firefox 4.0.1
",YorickPeterse,2011-06-09 17:51:28
363,2011-05-26 17:15:41,"Hmm, interesting, I've run the Capybara spec suite against Rack 1.3 and it worked just fine, will need to do some investigating.
",jnicklas,2011-06-09 17:51:28
363,2011-05-26 19:11:45,"If you need more information feel free to ask :)
",YorickPeterse,2011-06-09 17:51:28
363,2011-05-28 04:54:49,"It's timing out because rack 1.3 now requires an iterable response from an endpoint, which `Identify` does not provide. As such, the `responsive?` check in `capybara/server` continues to fail because a 500 error is returned.

Note that the rack test driver works fine. Haven't investigated why this is the case.

Here is a fixed implementation of `Identify`:

<S_CODE_TOKEN>
",xaviershay,2011-06-09 17:51:28
363,2011-06-09 17:51:28,"Thiu has been fixed on master.
",jnicklas,2011-06-09 17:51:28
363,2011-06-09 17:53:14,"Was the issue caused by what @xaviershay thought or was it something else?
",YorickPeterse,2011-06-09 17:51:28
362,2011-05-26 10:21:48,"The second parameter must be a host string with no scheme component, so I have fixed this.

Also added some tests which show up the bug. They use manual cookie setting through the browser instance, which I realise is not part of the public API so feel free to take or leave these as you see fit.
",jonleighton,2011-05-26 19:48:23
362,2011-05-26 19:48:36,"Closed in favour of #364
",jonleighton,2011-05-26 19:48:23
361,2011-05-25 22:34:04,"For some reasons Capybara doesn't recognize links anymore.

[Gem list](https://gist.github.com/ac6ab60aadc6f9c9f42b)

[Failing feature](https://gist.github.com/d6c6f3cbc3e8dded6a93)

When I 'puts' page.body right before the failing step: https://gist.github.com/33850183a016be701d6f

Most of my features are failing for exactly the same reason, links are not followed.

Seems a bug to me ...
",ngw,2011-06-07 17:22:06
361,2011-05-26 16:33:38,"@ngw, You can trace it by ""Then show me the page"" step. put it after ""And I go to the homepage"" line.
",ganeshkumar,2011-06-07 17:22:06
361,2011-06-07 17:21:59,"Reproducible test case or bust! This stuff is _heavily_ tested in the Capybara test suite, and by a huge number of users, it's 99% likely that this is a bug in your testing code. DB transactions and case sensitivity are the usual culprits.
",jnicklas,2011-06-07 17:22:06
360,2011-05-25 18:16:30,"I've looked around to see if this has been reported, if it's truly a bug or just not supported yet, etc. and haven't found much info. 

I've created an example app with a request spec. For some reason, the driver that capybara is using thinks there's no response body, and thus you can't do things like assert text in a response. This seems common across a couple drivers I tried which made me think it's more a capybara issue. 

I also tried switching over to webrat and the basic spec worked right away. 

So, I'm not sure exactly where the issue is, but I've been beating away at it for a bit and am hoping to have some help on figuring this out. Example app is here:

https://github.com/jackdempsey/integration-tests-3.1

The project has an rvmrc to help get gems installed in a clean setting. 

Hopefully this is just stupid user error, but I can't see what I'm doing wrong. Any tips at this point would be much appreciated. 
",jackdempsey,2011-05-26 18:24:42
360,2011-05-26 17:54:16,"Please use ""visit users_path"" instead of ""get users_path"" it works fine. 
",ganeshkumar,2011-05-26 18:24:42
360,2011-05-26 18:24:42,"Ahh man, THANK you. I never would have seen that. @jnicklas would you be interested in a patch where stupid people like me who mistakingly mix rspec and capybara methods get a warning raised? Something like ""if this result is nil, make sure they didn't use get instead of visit?""
",jackdempsey,2011-05-26 18:24:42
360,2011-05-26 20:04:40,"Not sure, this comes up once in a while, and people usually figure it out pretty quick. I'm hesitant to start messing with the methods defined by other libraries, and I don't think there's any good way for us to detect what happened before.
",jnicklas,2011-05-26 18:24:42
360,2011-05-27 06:38:42,"Yep, thought about it some more and nothing I could imagine wouldn't be hackish and ugly. I've had other simple screwups with capybara that might be nice to call out in the README? For instance, right now RSpec requires capybara for us, so we don't need the 'require ""capybara/spec""' line in a spec helper. 

Maybe i'll just collect some tips and write them up. Either way, good stuff! Wanted to say hi/thanks in person at Railsconf but didn't get a good chance. 
",jackdempsey,2011-05-26 18:24:42
359,2011-05-25 13:56:19,"Using the JQuery mobile framework with Rails, one would expect to be able to click on a button during a step.  It works fine with Capybara's default driver, but when using Selenium it says the button is not visible.

I spent a good four hours looking at this and gave up.  It appears it should work fine.
I have a created a ""greenfield"" repo illustrating this exact point:

https://github.com/jevy/JQuery_Mobile_Capybara

The error:

<S_CODE_TOKEN>
",jevy,2011-05-26 17:29:09
359,2011-05-26 17:29:09,"Probably jQuery mobile is hiding the button and creating some kind of shim for it, which redirects the click at the button. Selenium will not interact with invisible elements, so you're going to have to work around this somehow.
",jnicklas,2011-05-26 17:29:09
358,2011-05-24 02:09:43,"When using Capybara with RSpec and rack-test, Rails catches exceptions thrown by controllers, and you end up running your Capybara matchers against the Rails error page. This makes errors very hard to track down. (Assuming your spec fails, you need to do a save_and_open_page to read the error.)

This is easily fixed by putting the following in a file in spec/support:

<S_CODE_TOKEN>

I think this should be the default behaviour, but it's not clear where it should live. Should it be part of RSpec? Part of Capybara?

Cucumber gets around the question by having the cucumber-rails gem, and putting some similar code in there.

Any thoughts?
",notahat,2012-01-03 13:47:19
358,2011-06-01 21:01:18,"Duplicate or related: #329
",joliss,2012-01-03 13:47:19
358,2011-11-02 19:34:57,"I don't think #329 is related.
",joevandyk,2012-01-03 13:47:19
358,2011-11-02 19:35:44,"#508 looks like a duplicate one though.
",joevandyk,2012-01-03 13:47:19
358,2011-11-07 04:01:48,"Have you seen https://www.relishapp.com/rspec/rspec-rails/docs/controller-specs/bypass-rescue
",agibralter,2012-01-03 13:47:19
358,2012-01-03 13:47:19,"That's really something for Rails or rspec-rails or whatever to handle. This is not really Capybara's business, imo.
",jnicklas,2012-01-03 13:47:19
358,2012-01-03 13:54:47,"@jnicklas totally agree.
",agibralter,2012-01-03 13:47:19
357,2011-05-23 10:28:11,"Hi,

This is something I had previously been patching in but seeing as there is now a discussion on [issue #327](https://github.com/jnicklas/capybara/issues/327) I thought I would share this.

I feel that there are valid use cases for checking the state of the cookies, for example my team builds core components which will be shared across many sites...we still want to do full stack testing on our reference applications/example pages but we need to be absolutely sure the state of cookies we add is exactly as we expect as this will impact many other teams.

Have only added querying at the moment, maybe the argument for setting and deleting cookies is a little less strong...but as people have said on [#327](https://github.com/jnicklas/capybara/issues/327) I can see scenarios where you might want to.

So...feel free to reject this if you are planning to implement something more structured in a future release.  I can see an argument that it would be better to change/improve the Rack Test api than maybe hack out the cookies as we have to now.

Cheers,

Matt.
",mcrmfc,2011-05-26 21:53:06
356,2011-05-22 20:05:40,"Since I updated the gem, I get the error, when I run a scenario wth :driver => :selenium:
Selenium::WebDriver::Error::WebDriverError: Unable to find the executable chromedriver.

Any idea about what's wrong?
",lucascaton,2011-06-01 21:17:56
356,2011-05-22 20:06:29,"I'm using the version 1.0.0.beta1.
",lucascaton,2011-06-01 21:17:56
356,2011-06-01 21:17:56,"You have to install the chromedriver binary from http://code.google.com/p/selenium/downloads/list (Doesn't the error message actually say this?)

In any case, this is not a Capybara bug, just a Webdriver wart. ;-)

For what it's worth, the new Chrome driver errors on a lot of tests for me. I would wait for the next update.
",joliss,2011-06-01 21:17:56
356,2011-06-01 21:21:56,"In the previous version, I didn't need to install the chromedriver binary...
",lucascaton,2011-06-01 21:17:56
356,2011-06-01 22:29:21,"Yup, that's right. There's been a rewrite of the Chrome driver in the Selenium project. Don't ask me why the chromedriver binary is required now. Capybara is really just calling into the selenium-webdriver gem -- whatever they do is their thing. ;-)
",joliss,2011-06-01 21:17:56
356,2011-06-01 23:03:15,"Ok then, I'll try. Thanks!
",lucascaton,2011-06-01 21:17:56
355,2011-05-22 08:43:38,"I was using capybara to add a bunch of regression tests to a legacy app I inherited... and it included quite a few forms posting either to a relative url, or to the page it was on itself.

Capybara::RackTest::Browser#process does a bit of URL manipulation (i'm assuming to pretend to be a browser) before handing off to rack test, but it wasn't properly handling the relative urls, and its error message was a pretty unhelpful ""bad component(expected host component): http://www.example.com (URI::InvalidComponentError)""

So I've written code to cover the two failing situations for me, there may be other ways that are still broken but just wanted to patch my current pain.
",joho,2011-05-26 18:03:31
354,2011-05-22 04:37:05,"It would be nice if rspec-rails is present and I run `rails g rspec:install` that the acceptance test directory, acceptance helper, paths file, support directory, etc.. get generated if Capybara is present. I suspect there should be a way to hook into rspec-rails generator and add the Capybara templates. In addition there should also be a generator for adding a new acceptance test file.

If this makes sense I can work on this. I would just like to know what should/shouldn't get generated.
",bcardarella,2011-05-29 04:55:30
353,2011-05-21 04:51:32,"I have a integration spec for testing a Devise signup:

<S_CODE_TOKEN>

In a browser, this process fill out a form and redirects to the root_path.   In this spec, however the email and password fields are left blank when the form is posted, resulting in validation errors.  I know they are getting filled in to the field as when I save_and_open_page before the click_button they are all there.     

I've tested this in Rails 3.0.7 and Rails 3.1.0.rc1    with both rack-test 0.5.7 and rack-test 0.6.0 with the same error
",robzolkos,2011-05-23 00:16:55
353,2011-05-23 00:16:55,"This was a problem in my app.  All good.
",robzolkos,2011-05-23 00:16:55
353,2011-10-28 18:49:04,";m having the same issue as above

not sure if this is capybara specific or not?
",cheeyeo,2011-05-23 00:16:55
352,2011-05-21 01:24:52,"Hello,

I can`t run ""javascript features"" with Capybara+Rails3.1beta with Selenium or capybara-webkit

<S_CODE_TOKEN>
",diegorv,2011-05-21 01:40:36
352,2011-05-21 01:40:36,"Hm... sorry, apparently no problem with 1.0.0.beta1 ;)
",diegorv,2011-05-21 01:40:36
352,2011-05-27 09:49:32,"I'm seeing this bug with Rails 3.1.0 rc1 and capybara 1.0.0.beta1
",Empact,2011-05-21 01:40:36
352,2011-05-28 08:10:04,"But not on current master, so I guess we're good. :-)
",Empact,2011-05-21 01:40:36
352,2011-06-07 07:17:06,"Thanks for this info Empact! I had the same problem with Rails 3.1.0.rc1 and Capybara 1.0.0.beta1.
Now everything works fine again.
",tbor,2011-05-21 01:40:36
352,2011-06-28 16:02:25,"I encounter this bug with cucumber (0.10.2), cucumber-rails (0.4.1), capybara (0.4.1.2), selenium-webdriver (0.1.4) and Rails (3.0.4). Only the first feature fails with this error; 13 subsequent features are executed successfully, then one fails with

<S_CODE_TOKEN>

and subsequently the remaining 22 fail with 

<S_CODE_TOKEN>
",Confusion,2011-05-21 01:40:36
352,2011-07-03 19:15:33,"I'm having this issue as well.

rails 3.0.7, capybara 1.0.0, selenium-webdriver 0.2.2
",adamalbrecht,2011-05-21 01:40:36
352,2011-07-04 06:12:10,"I think it's a setup related problem, where the default 10 seconds boot time out sometimes just isn't enough. I've resolved the problem by increasing 

<S_CODE_TOKEN>

in Cucumbers env.rb. 

The second part of my problem, other failing tests, probably had nothing to do with this issue. It was resolved by upgrading to Capybara 1.0.0, Cucumber 1.0.0, selenium-webdriver 0.2.2
",Confusion,2011-05-21 01:40:36
352,2013-02-18 08:12:55,"I have this problem too and the solution is not work!!

I use 

<S_CODE_TOKEN>

and default driver beyond [README](https://github.com/jnicklas/capybara/blob/master/README.md)

But When I run js feature with `js: true`, it raise `Rack application timed out during boot`

I tried http://docs.tddium.com/troubleshooting/browser-based-integration-tests and google ""capybara js Rack application timed out during boot"" but no useful solution

Can anyone help me?  Heartfelt thanks.
",zlx,2011-05-21 01:40:36
351,2011-05-18 02:04:16,"I require the ability to send keypress events to elements using capybara to test a number of widgets in the Dojo framework, I've added methods to do this to capybara which just use the native selenium send_keys method, but I'd like to add this to the capybara-webkit driver as well. Was not sure how to achieve this with the rack-test driver, looks like it could be a bit more involved.
",j16r,2011-07-11 19:19:33
351,2011-05-18 02:51:34,"Since we're just sending the arguments straight through to Selenium, whatever Selenium's API is for this effectively becomes Capybara's API. That kind of worries me, tbh.
",jnicklas,2011-07-11 19:19:33
351,2011-05-18 02:56:36,"Me too, though their particular API for send_keys seems reasonable enough I'm not sure we'd need to improve upon it. If it changes in the future we could add a wrapping layer to shield users.
",j16r,2011-07-11 19:19:33
351,2011-05-18 11:27:39,"It's just that the full extent of that API isn't documented here, so driver authors will have a tough time knowing exactly what to implement.
",jnicklas,2011-07-11 19:19:33
351,2011-05-18 23:48:15,"+1 for some sort of key sending support.
",raid5,2011-07-11 19:19:33
351,2011-05-20 13:58:43,"I'm not so sure if this is a good idea, seeing as to how it requires JS-capable drivers. Is it even possible with HtmlUnit?

Perhaps it's better to keep using the `native` object than to clutter the API.

Just my 2 cents.
",joliss,2011-07-11 19:19:33
351,2011-06-08 15:23:53,"I'm also very +1 on sending any kind of key support. This is actually the whole reason I need selenium at all...
",steveklabnik,2011-07-11 19:19:33
351,2011-06-15 00:52:18,"I'm also +1 on this—it's absolutely necessary for testing something like an autocomplete dropdown. With just `fill_in` there's no way to test that the list is properly updating on backspaces or that the arrow keys are properly selecting elements up and down in the list.
",codyrobbins,2011-07-11 19:19:33
351,2011-06-15 15:34:30,"I don't get it -- why don't you all use the `native` method and send the `send_keys` directly to the Selenium driver?

I'm not sure how Capybara's support for send_keys might get any better than what we have already -- at best you might save a few keystrokes on the `.native` if it was part of the Capybara API, but you're still dependent on the Selenium API, and don't get support for any other drivers besides Selenium. Except now Capybara has more clutter in its API.

Or is there some objective here that I am missing?
",joliss,2011-07-11 19:19:33
351,2011-06-15 16:00:28,"@joliss: Why even have a Capybara API at all then—why not just send everything through to the native drivers? You need to be able to send keystrokes to interact with and test modern web applications, so don’t see why `send_keys` would ‘clutter’ the API any more than you could say `fill_in` does.
",codyrobbins,2011-07-11 19:19:33
351,2011-06-15 16:06:49,"Yep. I ended up using native, but the whole point of capy is to abstract
these sorts of things away.
",steveklabnik,2011-07-11 19:19:33
351,2011-06-15 17:19:47,"Right, but we don't want abstraction for abstraction's sake, do we? `fill_in` for instance is useful because it is supported on Rack::Test, Selenium, and just about every other driver, so there's a solid reason to add another layer of complexity in the form of Capybara's API. I don't see that with `send_keys`.
",joliss,2011-07-11 19:19:33
351,2011-06-15 18:24:54,"Frankly, I was kinda surprised `fill_in` doesn't send keypresses in the
first place.
",steveklabnik,2011-07-11 19:19:33
351,2011-06-15 18:31:16,"Underlyingly it does for Selenium, but I have no idea about the other drivers. The problem is that it `to_s`’s the argument first so you can’t use it as a pass-through to Selenium for non-character keys.
",codyrobbins,2011-07-11 19:19:33
351,2011-06-15 18:39:26,"It does not for selenium.
",steveklabnik,2011-07-11 19:19:33
351,2011-06-15 18:48:05,"@steveklabnik: Yes it does—`Capybara::Node::Actions#fill_in` uses `Capybara::Selenium::Node#set`, which calls the driver’s `send_keys` implementation:

https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/node.rb#L28
",codyrobbins,2011-07-11 19:19:33
351,2011-06-15 18:50:12,"My tests fail without doing native. So...somebody's wrong somewhere. Ill
look into it.

If fill_in always sent keypresses, id be -1 and not +1 on this patch.
",steveklabnik,2011-07-11 19:19:33
351,2011-06-16 01:15:50,"I originally posted this feature because I had no idea about access to the native driver, and I wanted to add send_keys functionality to the capybara-webkit driver. Since I switch back and forth between Selenium and Capybara-webkit drivers it made sense to have an abstraction layer rather than 'if driver == :selenium else ' littered throughout our tests. It was also necessary for the particular javascript widgets I'm using (an auto-completing search field), which didn't work with capybara-webkit's fill_in because it always sends a blur event to the node.

I do agree with people that we don't need to clutter the API, but to me sending keypresses to elements seems like an entirely fundamental part of of interacting with a web page so I was entirely surprised that it didn't exist. If an abstraction layer doesn't provide methods for some of the most commonly used functions that what kind of abstraction layer is it? 

Anyway, maybe as a start we could make it more apparent that you can access the native driver very easily, and with it you can do typical things like use selenium keypress. This might solve the problem for most people.
",j16r,2011-07-11 19:19:33
351,2011-07-11 19:19:33,"It seems to me that there is no consensus for adding `send_keys` right now, so I'll go ahead and close this issue -- feel free to reopen if you disagree, of course.

There seems to be a lot of movement with JS-capable drivers other than Selenium (Webkit, HtmlUnit, perhaps even Envjs), so perhaps we should wait a few months and revisit the question then, when we'll have some more experience to tell whether it's necessary? In the meantime, anyone needing cross-driver send_keys support can easily add it to the Capybara API for their own tests.
",joliss,2011-07-11 19:19:33
351,2011-10-25 13:45:21,"This also has +1 from me. I do understand that some drivers may not support it but this is also the case with JS behaviour in general. So if your test needs it, select the appropriate driver. I do believe though that capybara-webkit supports this behaviour (not 100% sure though)
",nikosd,2011-07-11 19:19:33
350,2011-05-17 19:31:25,"Sorry for the noise, we made the fix in the wrong place in previous pull request.  Fixed again, chromedriver + Chrome 12 YELLS tag names in UPPERCASE.  We still don't know where to test this exactly, so this pull request only includes code change.
",pivotal,2011-05-17 19:42:20
349,2011-05-14 19:02:42,"There is a deprecation warning about rspec 3 that says that no configuration option should be set after defining a group of specs. This commit fix the issue by moving the setting of options to a position before the specs are required loaded.
",Nerian,2011-05-14 20:50:41
348,2011-05-13 21:52:49,"We just found that Chrome 12's new automation interface + the chromedriver binary YELLS tagnames back to the Selenium driver.

This appears fine except in Node#set where tag_name is expected to be downcased. We're not quite sure with all the 1.0 refactorings where/how the best place to test this is. Or if the correct fix is actually back on the Webdriver or Chrome teams.  But this fixes set w/ Chrome 12 so this works for us and it might help the project.
",pivotal,2011-05-14 08:34:28
347,2011-05-13 12:25:30,"I have some tests, unrelated to Capybara, which need to test what happens when two processes try to do the same thing at once. For this I am using `Kernel#fork`.

When I run these tests alongside my Capybara tests, the `at_exit` hook which Capybara registers ends up executing when these forked processes exit as well.

So this patch ensures that the `at_exit` hook only executes for the main Capybara process.
",jonleighton,2011-05-23 23:14:15
347,2011-05-13 15:28:33,"@jnicklas I wonder if this is going to make the test suite brittle?
",joliss,2011-05-23 23:14:15
347,2011-05-14 08:36:34,"@joliss why would it make the test suite brittle?
",jnicklas,2011-05-23 23:14:15
347,2011-05-14 11:52:47,"Because it forks during the test -- so it might break on Windows, or if there is any interaction with the at_exit handler in future RSpec versions.  But I'm probably too worried -- feel free to ignore me. :)
",joliss,2011-05-23 23:14:15
347,2011-05-14 20:52:09,"Ahh right, I don't really know too much about this stuff. If you feel that the test is too brittle maybe we should hold off on this for a while?
",jnicklas,2011-05-23 23:14:15
347,2011-05-15 07:25:27,"When I have a chance I'll crack out a windows install and make sure it doesn't break on there. At the very least we can just disable the test/functionality on windows.
",jonleighton,2011-05-23 23:14:15
347,2011-05-23 22:06:19,"@joliss Is capybara currently being tested against windows? I.e. is anyone (perhaps yourself) running tests successfully on that platform? I've just spent a couple of hours trying to get it set up in a VM. I have got as far as the following error, which leaves me stumped (it's not my usual platform as you can imagine):

<S_CODE_TOKEN>

It seems like a good idea to preserve Windows compatibility if that's currently already working, but if it's more of a hypothetical concern because nobody actually knows if it works on Windows then it would be good to just merge this IMO.
",jonleighton,2011-05-23 23:14:15
347,2011-05-23 22:51:42,"It turned out that my problem was solved by nokogiri 1.4.4.1, however I would note that to get this working it's necessary to delete the `Gemfile.lock` if that's already been generated on a different platform, and then to a fresh `bundle install`.

Anyhow, it was all quite a pointless exercise because what I ended up doing in the end was simply disabling the test on Windows.

I've updated the patch and rebased. Let me know if there are further issues.
",jonleighton,2011-05-23 23:14:15
347,2011-06-01 21:07:00,"On Tue, May 24, 2011 at 12:06 AM, jonleighton
reply@reply.github.com
wrote:

> @joliss Is capybara currently being tested against windows?

Not by me, and I don't know if anyone has successfully run the tests
on Windows, to be honest.

> PS E:\Code\capybara> bundle exec rspec .\spec\driver\selenium_driver_spec.rb
> C:/Ruby192/lib/ruby/gems/1.9.1/gems/nokogiri-1.4.4-x86-mingw32/lib/nokogiri/nokogiri.rb:1:in `require': 127: The specified procedure could not be found.   - Init_nokogiri (LoadError)

Interesting.  Thanks a lot for trying -- I'm not sure what's going on
there.  At least now we can say ""smart people have tried and failed"".

> if it's more of a hypothetical concern because nobody actually knows if it works on Windows then it would be good to just merge this IMO.

I agree, actually.  Sorry for holding up the merge!

Jo
",joliss,2011-05-23 23:14:15
347,2011-06-01 21:11:40,"On Tue, May 24, 2011 at 12:51 AM, jonleighton
reply@reply.github.com
wrote:

> It turned out that my problem was solved by nokogiri 1.4.4.1

I should really read the whole thread before replying. :)  Anyways,
did the spec suite actually run with that?  Did it pass (I barely dare
to hope)?

> Anyhow, it was all quite a pointless exercise because what I ended up doing in the end was simply disabling the test on Windows.

I think that's a good solution. :)
",joliss,2011-05-23 23:14:15
347,2011-06-01 21:35:51,"@joliss I didn't run the full test suite, but that specific test file ran successfully, and selenium worked etc.
",jonleighton,2011-05-23 23:14:15
346,2011-05-12 22:14:39,"`:visible => false` doesn't work at all how someone might think it does. But that aside, here is a more logical `:hidden => true` option for only selecting elements that are hidden.
",KieranP,2011-05-14 12:15:30
346,2011-05-12 22:28:48,"Have changed the logic so `:visible => false` works the way people would expect it to, find hidden elements.
",KieranP,2011-05-14 12:15:30
346,2011-05-13 15:48:52,"We kind of need the functionality of selecting a node whether it is hidden or not though. That's what visible => false does now. If we consider this, we need to at least have a replacement, though I'm a bit uncofnfortable with simply changing the API like this. I know _I_ at least depend on the current behaviour in a number of applications.

Also, If you want this applied, you should add some tests, I'm not going to apply it without any ;)
",jnicklas,2011-05-14 12:15:30
346,2011-05-13 19:59:49,"Understood. Will work on something better next week.
",KieranP,2011-05-14 12:15:30
346,2011-05-14 12:15:32,"(Closing in the meantime.  Feel free to reopen anytime.)
",joliss,2011-05-14 12:15:30
345,2011-05-12 22:04:59,"When a test doesn't past because the text doesn't match (using the :text option) the error message is weak.

<S_CODE_TOKEN>

I'd find it much more helpful for debugging to have an error message that outputs what text is actually there. ie: 

<S_CODE_TOKEN>

Is this feasible? Useful for others? I've already forked the project and have begun to hack around with it.

Thanks!
",vrish88,2011-05-19 16:26:05
345,2011-05-19 16:26:04,"This is a duplicate of #331
",jnicklas,2011-05-19 16:26:05
344,2011-05-12 15:55:05,"Hi there,

I am working on an application using Capybara in a fairly odd way, to test a remote server, using `Rack::Test` as the driver. To do this I am using `Rack::StreamingProxy` to create a Rack app which acts as a proxy to the remote server.

I ran into some trouble with cookies not being set correctly, which turned out to be fixed by giving the `Rack::MockSession` an explicit default host, taken from `Capybara.app_host`. This can be done by overriding [this method](https://github.com/brynary/rack-test/blob/master/lib/rack/test/methods.rb#L30) like so:

<S_CODE_TOKEN>

So, I realise this is a super-edge use case, but perhaps it would be worth defining that method in Capybara?

Thanks,
Jon
",jonleighton,2011-05-19 15:50:11
344,2011-05-13 12:54:07,"+1

I wrote the same thing in a comment on a closed issue three weeks ago.  One quible, I used `current_host` instead of `Capybara.app_host`

https://github.com/jnicklas/capybara/issues/36#issuecomment-1086728
",leshill,2011-05-19 15:50:11
344,2011-05-14 08:38:35,"Hmm, current_host sounds good. Is this working well for you @leshill?
",jnicklas,2011-05-19 15:50:11
344,2011-05-14 08:50:22,"Yep, I agree it should be current_host. Cheers.
",jonleighton,2011-05-19 15:50:11
343,2011-05-12 15:09:06,"Hi,

I'm trying to test some AJAX behavior in an acceptance test. Unfortunately, it seems that the AJAX requests I'm making never actually finish. More precisely, I can see that they complete successfully server-side in the test log, but no callback is called client-side. I'm using jQuery, and I can see that $.active stays > 0 forever.

I've tried setting the ""resynchronize"" option to false, tweaking the value of ""resynchronization_timeout"", but nothing worked.

Am I doing something wrong ? I'd be more than willing to provide a test application to try and reproduce the issue, but basically even the simplest ajax requests fail, so there might be some problem with my configuration, as I can't believe this hasn't been tested thoroughly. Especially as work has been done on Ajax-synchronization for Selenium...
",gdeest,2011-05-13 12:53:49
343,2011-05-13 12:53:49,"OK,

I figured out what happened.

As built-in resynchronization didn't seem to work, I had added ""async: false"" to the jQuery Ajax parameters. The real culprit wasn't capybara, but the jQuery plugin I'm using (jQuery Token Input), which wraps its Ajax requests in Timeout calls - which I had to remove. However, I forgot to delete ""async: false"", which doesn't seem to play nice at all with Webdriver, whatever the reason.

So my tests now pass. Yeah !
",gdeest,2011-05-13 12:53:49
342,2011-05-10 21:16:07,,joealba,2011-05-11 01:07:27
342,2011-05-11 01:07:27,"Squashed and merged -- thanks!
",joliss,2011-05-11 01:07:27
342,2011-05-11 01:08:32,"(In case you're curious, it's very easy to squash several related commits into one using the git rebase --interactive tool.)
",joliss,2011-05-11 01:07:27
342,2011-05-11 01:17:44,"Ohhh, that's the quick-edit thing. Never mind me. ^_^
",joliss,2011-05-11 01:07:27
342,2011-05-11 02:21:35,"Thanks. I was trying out github's in-place fork-and-edit feature. I didn't find an easy way to get multiple file changes into one commit that way.

On May 10, 2011, at 9:08 PM, jolissreply@reply.github.com wrote:

> (In case you're curious, it's very easy to squash several related commits into one using the git rebase --interactive tool.)
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/342#issuecomment-1135018
",joealba,2011-05-11 01:07:27
341,2011-05-10 21:14:45,,joealba,2011-05-11 01:07:30
340,2011-05-07 22:45:38,"Fix for #339:

Add support for Rack::Test::UploadedFile for to_binary so that file uploads aren't map'd 'accidentally'
",radar,2011-05-19 16:18:47
340,2011-05-10 13:33:42,"I can't comment on the specifics of this, but I think `object.is_a? Rack::Test::UploadedFile` is the better way to write this.  Also, I think this will need tests before we can merge it...
",joliss,2011-05-19 16:18:47
340,2011-05-10 13:35:51,"I am not sure how you would go about testing something like this with Capybara. Any tips?

On 10/05/2011, at 23:33, jolissreply@reply.github.com wrote:

> I can't comment on the specifics of this, but I think `object.is_a? Rack::Test::UploadedFile` is the better way to write this.  Also, I think this will need tests before we can merge it...
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/340#issuecomment-1130874
",radar,2011-05-19 16:18:47
340,2011-05-10 13:42:18,"I was just trying to figure out where to add tests within the Capybara
test suite, but grepping the source does not yield any tests that
specifically test `to_binary`.

@jnicklas, what do you think?
",joliss,2011-05-19 16:18:47
339,2011-05-07 22:38:08,"Whoops, meant to add a description to this. The method is currently defined as this:

<S_CODE_TOKEN>

The final `elsif` you have there matches not only the `Array` object, but also `Rack::Test::UploadedFile` objects, which (now?) respond to `each` as well. The solution is to change this method to support those objects too, and to do precisely nothing with them:

<S_CODE_TOKEN>

I will submit a pull request for this too.
",radar,2011-05-10 13:32:37
339,2011-05-10 13:30:26,"Can't comment on the specifics of this, but I think `object.is_a? Rack::Test::UploadedFile` is the better way to write it this.  A pull request would be great, I'm sure.
",joliss,2011-05-10 13:32:37
339,2011-05-10 13:32:37,"Ah, just noticed #340 -- closing this.
",joliss,2011-05-10 13:32:37
338,2011-04-28 22:17:12,"Okay, turns out I was using an older version of rspec-rails. The issue I alluded to in #326 has since been handled -- tagging an example group with a :type of :request will now properly make it a request spec just as placing the file in spec/requests will, so everything is fine in Capybara-land. There were a couple of minor changes in my original commit I wanted to keep though, so I've left those.
",mcmire,2011-04-29 00:08:09
338,2011-04-29 00:09:11,"Sweet, thanks for cleaning this up!  The README is looking better by the day. :)
",joliss,2011-04-29 00:08:09
337,2011-04-28 18:08:35,"Hi,

Element#value is deprecated in the latest version of selenium-webdriver. This patch replaces its usage with Element#attribute(:value). Behaviour should be the same.

Jari
",jarib,2011-05-02 22:58:00
337,2011-04-28 19:21:25,"Duplicate of: https://github.com/jnicklas/capybara/pull/336
",agibralter,2011-05-02 22:58:00
337,2011-04-28 19:22:26,"But this is a little cleaner... we just need to update the gem dependency to either >= 0.1.4 or ~> 0.2.0
",agibralter,2011-05-02 22:58:00
337,2011-04-28 23:08:12,"Ah, should have checked the pending requests. Feel free to do whatever suits you the best.
",jarib,2011-05-02 22:58:00
337,2011-05-02 21:50:20,"Ticket #336 looks more complete now.
",KieranP,2011-05-02 22:58:00
337,2011-05-02 22:58:00,"Indeed it does. I'm closing this.
",jarib,2011-05-02 22:58:00
336,2011-04-27 22:18:02,"As of selenium-webdriver 0.2.0:
""Selenium::WebDriver::Element#value is deprecated, please use Selenium::WebDriver::Element#attribute('value')""
",agibralter,2011-05-03 14:40:51
336,2011-04-28 12:19:17,"Is this compatible with older versions of selenium-webdriver? If not, we should probably update the version requirement in the gemspec too.
",jnicklas,2011-05-03 14:40:51
336,2011-04-28 17:06:43,"I'm testing various versions now. I can't even get selenium-webdriver 0.0.27 to control FF... maybe it has to do with FF4?

In any case, it seems like `>= 0.1.4` works. But I think it would be safer to do `~> 0.2.0` going forward. What do you think?
",agibralter,2011-05-03 14:40:51
336,2011-04-28 19:14:18,"I guess it's quite easy to accidentally break backwards-compatibility, so I agree it's probably safer to require 0.2.0.  (Upgrading to selenium-webdriver 0.2.0 went without a hitch for me, by the way.)

I like the diff in this dup better, by the way: https://github.com/jnicklas/capybara/pull/337
",joliss,2011-05-03 14:40:51
336,2011-04-28 19:24:52,"@joliss I like the diff in pull 337 to except it should probably be: `n[:value]` in the `each`...
",agibralter,2011-05-03 14:40:51
336,2011-04-28 19:33:19,"Ok, updated the patch and gemspec.

Wow, github is so cool (fork+edit + edit files in the browser)  Now I just wish you could run the test suite from the web browser with a button. Or at least it would be awesome if it had ""integrate and merge pull request"" that would run all specs.
",agibralter,2011-05-03 14:40:51
336,2011-05-02 21:51:36,"+1 This is surprisingly annoying. It's amazing how many times the 'value' method is called. There is more of those deprecation warnings in total than the amount of scenarios I have running.
",KieranP,2011-05-03 14:40:51
335,2011-04-27 10:41:35,"I want to add a `submit` method like that:

<S_CODE_TOKEN>

But putting this into a module and including it into `Capybara::Node::Actions` before `require ""capybara/rspec""` does not work. How can we add our own methods?
",jazen,2011-04-27 10:50:15
335,2011-04-27 10:50:11,"Please post your question to the mailing list.
",jnicklas,2011-04-27 10:50:15
334,2011-04-26 10:42:42,,drogus,2011-04-26 10:58:41
333,2011-04-26 10:08:33,"When one of capybara rspec matchers is used in an example without a String, you get message like this:

<S_CODE_TOKEN>

So, I added description method for them.
",hiroshi,2011-04-26 11:00:43
333,2011-11-17 00:41:00,"@benissimo,
I can't remember what the opinion about how I choose ""has"" instead of ""have"". As you point, ""... should has ..."" seems to be wrong in sense of English grammar.
",hiroshi,2011-04-26 11:00:43
332,2011-04-25 19:44:23,"I've tried the latest version of Capybara 0.4.1.2 and the previous version I have installed on other computers (0.4.0) and I have the same problem with both.  The attach_file method does not work with Firefox 4.  I have Firefox 3 on other computers and it works fine.
",dlaterza,2011-04-25 19:55:04
332,2011-04-25 19:55:04,"Nevermind.  It was a fileshare on the network and the problem was credentials.
",dlaterza,2011-04-25 19:55:04
332,2011-05-05 13:01:05,"Could you elaborate on your fix? I am having the same issue. I thought it was a cucumber-rails issue: https://github.com/aslakhellesoy/cucumber-rails/issues/118#issuecomment-1102021
",reedlaw,2011-04-25 19:55:04
332,2011-05-05 13:29:22,"Nevermind, I fixed it with this:

<S_CODE_TOKEN>
",reedlaw,2011-04-25 19:55:04
332,2013-09-23 21:08:43,"My code was:

<S_CODE_TOKEN>

Which worked for the poltergeist driver, but not the default firefox driver.  After changing it to @reedlaw's fix:

<S_CODE_TOKEN>

It works with both drivers.  Perhaps the driver interface needs to be more clearly defined.
",asselstine,2011-04-25 19:55:04
331,2011-04-25 12:30:41,"I'd like the `failure_message_for_should` in https://github.com/jnicklas/capybara/blob/master/lib/capybara/rspec/matchers.rb#L22 to include `page.text.inspect` like https://github.com/jnicklas/capybara/blob/master/lib/capybara/rspec/matchers.rb#L114 does. I'm happy to patch when I have time, but wanted to get the request documented.
",dchelimsky,2012-07-10 13:35:35
331,2011-06-26 08:33:38,"I've submitted a [pull request](https://github.com/jnicklas/capybara/pull/395) to fix this issue. Let me know if you have any suggestions (mostly because this is my first open source contribution... woot!)
",vrish88,2012-07-10 13:35:35
331,2011-06-26 13:29:02,"@jnicklas closed the pull request [citing](https://github.com/jnicklas/capybara/pull/395#issuecomment-1440456): ""this problem need a way more comprehensive approach"". What is meant by this? Is a rewrite of error reporting in Capybara::Node::Finders required?
",vrish88,2012-07-10 13:35:35
331,2011-06-26 14:18:37,"Sorry to be a bit hard on you @vrish88 ;) In an ideal world, I would want the matchers to give sensible error message depending on their context, for example, the has_link? matcher could return something like:

<S_CODE_TOKEN>

This would actually be way more helpful than just ouputting the text on the page. Since this is quite a big undertaking and would require some rather tricky additions to the XPath gem, I was willing to push this off for some more generic error messages for 1.0. Since we just released 1.0, and are not in a rush anywhere, I'd rather get this fixed properly though.
",jnicklas,2012-07-10 13:35:35
331,2011-06-27 00:48:57,"@jnicklas it is quite alright. I honestly would have been very surprised if that patch had gone through as it was.

I agree some sort of contextual error message would be awesome. But are you talking about putting this sort of error handling in the [XPath gem](https://github.com/jnicklas/xpath)? Or would each error be handled differently for each matcher?

Finally, where do we go from here? I'm not too familiar with contributing to open source projects and so I don't really know what I can/should do now.
",vrish88,2012-07-10 13:35:35
331,2012-07-10 13:35:35,"We now finally, finally have somewhat decent error messages.
",jnicklas,2012-07-10 13:35:35
331,2012-07-25 23:37:17,"The good news is, the error messages are arguably somewhat decent. :-)

The bad news is `page.should have_selector 'title', text: expected_title` does not work any more. Even when expected_title is copied and pasted directly from view source, Capybara fails with `expected to find css ""title"" with text ""Ruby on Rails Tutorial Sample App"" but there were no matches. Also found """", which matched the selector but not all filters.`

As you can probably guess, this is happening in Chapter 5 of Hartl's Rails Tutorial... so it should be easy to reproduce... and capybara 2.0.0.beta2.
",alexch,2012-07-10 13:35:35
331,2012-07-26 00:08:38,"My guess would be that the element in question is invisible. We've changed some stuff with how `#text` works under RackTest which is likely affecting this too. You can see that there is an element, but it doesn't have any text on it. Probably because the text is invisible.
",jnicklas,2012-07-10 13:35:35
331,2012-07-26 22:35:05,"I hope that's not the desired behavior! CSS selectors are supposed to
work on an HTML document, not just on some subset of an HTML document
that happens to currently be visible. (Especially since there's no
standard definition of ""visible"".)
",alexch,2012-07-10 13:35:35
331,2012-07-26 23:38:37,"There is a standard definition of visible. Elements which don't have `display:none`. And note that this isn't about a CSS selector at all, but rather the text of an element, which we're matching against.

This issue is further complicated by the existence of `Capybara.ignore_hidden_elements`, which is `false` by default. You could make a case that this setting should affect the return value of `Node#text`, it currently does not. The problem is that checking the value of that config setting inside the driver breaks the encapsulation of the drivers entirely, so I'm not comfortable doing that.

If you can find a way of keeping the drivers encapsulated, but still passing down that setting, and getting the behaviour consistent on both RackTest and Selenium, then I'd be very happy to merge that in.
",jnicklas,2012-07-10 13:35:35
331,2012-07-27 00:13:21,"> There is a standard definition of visible. Elements which don't have `display:none`.

Not to pick nits, but that's one definition; others include
visibility: hidden, white-on-white text, off-screen elements, elements
inside a 0-pixel high element... but sure, that definition works for
me.

> And note that this isn't about a CSS selector at all, but rather the text of an element, which we're matching against.

So then are we agreeing that it _is_ a bug that

<S_CODE_TOKEN>

does not match

<S_CODE_TOKEN>

?

> This issue is further complicated by the existence of `Capybara.ignore_hidden_elements`, which is `false` by default.

That sounds correct to me. Although double negatives are not unconfusing. ;-)
",alexch,2012-07-10 13:35:35
331,2012-07-27 00:16:17,"FYI, I think ""`display: none` or `visibility: hidden`"" is the standard definition used by jQuery and Selenium. Everything else (outside of head, script, etc. of course) is considered visible.
",joliss,2012-07-10 13:35:35
331,2012-07-27 00:18:58,"Or alternately, is there a better way to ask ""what is the text inside
this element"" and/or ""assert that the text inside this element matches
this string or regexp""? Cause that's the 95% use case for has_selector
in RSpec+Capybara these days.
",alexch,2012-07-10 13:35:35
330,2011-04-22 20:21:21,"When running acceptance tests on Rails (v3.0.6) projects with RSpec (v2.5.1), Capybara (v0.4.1.2) seems to ignore the presence of files (HTML only?) in the ""public/"" directory. For example, on a brand new Rails project, if ""public/index.html"" is present, and a root route has been installed going to a valid controller action with a valid view, I think the following RSpec request example should fail, but it doesn't:

<S_CODE_TOKEN>
",Tekhne,2011-04-23 11:04:41
330,2011-04-23 00:19:45,"Hmm I was wondering if `Rails::Rack::Static` (https://github.com/jnicklas/capybara/blob/master/lib/capybara/rails.rb#L9) is missing arguments... Could that be it?
",agibralter,2011-04-23 11:04:41
330,2011-04-23 00:45:54,"@agibraiter Well, I'm not sure about the relevance of the Static class for this problem, but it looks like the code you referenced would only come in to play for Rails v2, whereas I'm having the problem on Rails v3.0.6.
",Tekhne,2011-04-23 11:04:41
330,2011-04-23 00:47:06,"Ah, true! Sorry, disregard my comment.
",agibralter,2011-04-23 11:04:41
330,2011-04-23 11:04:41,"Regardless of the setup of your app and static files, `page.has_content?(""My custom test content"")` only ever returns true or false (which then gets discarded the way you are using it), so it does not do anything.  You need to use RSpec's [predicate matchers](http://relishapp.com/rspec/rspec-expectations/v/2-6-rc/dir/built-in-matchers/predicate-matchers) with `should` in order to actually test anything.

In other words, so long as `visit ""/""` succeeds, the test is guaranteed to pass.

I am closing this (cc @jnicklas).  If I misunderstood you, feel free to reopen it. :)
",joliss,2011-04-23 11:04:41
329,2011-04-21 23:14:43,"So I was running my cucumber features and kept seeing 502 gateway errors in Firefox... I tracked it down to the fact that `thin/connection.rb:87`'s `rescue Exception` block was silently logging the errors and closing the connection. Shouldn't Capybara monkey patch Thin to have it's `handle_error` method instead raise that error?
",agibralter,2011-04-22 10:55:05
329,2011-04-22 10:55:04,"> Shouldn't Capybara monkey patch Thin to have it's handle_error method instead raise that error

No it shouldn't. Monkey patching other libraries is evil, and should only be done when absolutely necessary. Open an issue for Thin instead.
",jnicklas,2011-04-22 10:55:05
329,2011-04-22 14:09:51,"Not always evil... But ok.

There are many places that cucumber monkey patches Rails to have it behave a certain way. E.g. `rescue_action`... Anyway I'll open a Thin issue.

On Apr 22, 2011, at 6:55, jnicklasreply@reply.github.com wrote:

> > Shouldn't Capybara monkey patch Thin to have it's handle_error method instead raise that error
> 
> No it shouldn't. Monkey patching other libraries is evil, and should only be done when absolutely necessary. Open an issue for Thin instead.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/329#comment_1043507
",agibralter,2011-04-22 10:55:05
329,2011-05-18 15:51:37,"Thin peeps don't seem to want to add a configuration option. Any chance you'd be open to a patch with middleware that catches errors built into Capybara's Thin server? https://github.com/macournoyer/thin/issues/50#comment_1197768

Is it just me, or is it a problem now that errors that happen in the app when running cucumber tests just spit out a unhelpful 500 error pages?
",agibralter,2011-04-22 10:55:05
329,2011-06-02 00:03:33,"Maybe we need a capybara-rails project, in the same way there's a cucumber-rails project.
",notahat,2011-04-22 10:55:05
329,2011-06-02 00:21:43,"@notahat: hmm, this is the code that Capybara currently has for Rails support: https://github.com/jnicklas/capybara/blob/master/lib/capybara/rails.rb, note that half of that is to support both Rails2 and Rails3. It doesn't seem worthwhile to split that into a gem to me.

The problem here isn't that Capybara doesn't monkeypatch Thin, the problem lies within Thin. I'd rather drop Thin support than add the monkey patch or add a capybara-rails gem.

Since people can configure Capybara to use whatever server they want, that actually wouldn't be a huge loss, still it's a shame.

If someone can work up a pull request for Thin, I'm sure they'd be happier at the prospect of merging this.
",jnicklas,2011-04-22 10:55:05
329,2011-06-07 00:57:47,"@jnicklas: I'm beginning to agree with the Thin people. As I wrote my [reply](https://github.com/macournoyer/thin/issues/50#issuecomment-1312946) to the Thin thread, I realized that the only difference between Thin and WEBrick in Capybara is that WEBrick's 500 error page includes a backtrace. That's probably not ideal either... here's the pertinent part of my post:

> Anyway, as your tests run, you will expect to see some tests fail due to failed assertions (i.e. failed RSpec expectations); however, it is also possible that your app will have its own internal errors which need solving. WEBrick's 500 error response includes a stack trace... I guess that's not the same as what I was asking for in the original post... perhaps there's a better way as you suggest that involves a failsafe piece of rack middleware that captures app errors... perhaps Capybara's Identify rack app could serve this purpose.

Don't you think Capybara should handle internal app errors? `Identify` could capture exceptions to some sort of global variable/queue. Then Capybara could check for the presence of a `@@last_error` after app requests. What do you think?
",agibralter,2011-04-22 10:55:05
329,2011-08-27 21:18:33,"Here's the piece of code in capybara.rb that runs the default server:

<S_CODE_TOKEN>

In both cases (whether it uses thin or webrick), it's passing in essentially a nil logger, which is where these backtraces would normally go.

To solve this for myself, I'm explicitly setting up the server and passing in a log file of log/capybara_test.log:

<S_CODE_TOKEN>

I haven't tried it, but I suspect the same thing can be done with thin. Hopefully this helps anyone running into the same frustrating problem if trying to get a simple backtrace from exceptions happening within the application being served by Capybara.server.
",rubiety,2011-04-22 10:55:05
329,2011-08-27 23:23:38,"I will echo Jonas' sentiment, the problem lies with Thin not being HTTP-compliant and returning a 500 status.

Given Thin's response, +1 for removing Thin support.
",leshill,2011-04-22 10:55:05
329,2011-08-28 06:41:38,"Does Webrick raise errors nicely?

I actually think that Capybara should insert a piece of middleware to
catch application errors and display them. That way, any rack server
would work. And Capybara could handle the raised exception exactly how
it wants to...

On Aug 27, 2011, at 19:23,
leshillreply@reply.github.com
wrote:

> I will echo Jonas' sentiment, the problem lies with Thin not being HTTP-compliant and returning a 500 status.
> 
> Given Thin's response, +1 for removing Thin support.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/329#issuecomment-1921932
",agibralter,2011-04-22 10:55:05
329,2011-08-28 10:25:36,"Never had a problem with this with WebRICK, but I haven't really investigated this very thoroughly. I'm kind of inline with @leshill. Since the server is configurable anyway, I think we could just as well remove thin support. And people who want it as an optimization can be explicit about it. Less magic = good.
",jnicklas,2011-04-22 10:55:05
329,2011-08-29 08:16:20,"@rubiety: Thanks! That log idea finally allowed me to find an unrelated but frustrating bug! I also think, capybara should display driver errors.
",lorenzk,2011-04-22 10:55:05
329,2011-08-29 14:56:37,"So with webrick, if the app code raises an exception, that exception and its
backtrace are displayed when running request specs/cucumber features? With
Thin it's just a bland 500 error.
",agibralter,2011-04-22 10:55:05
329,2011-08-29 22:01:29,"@jnicklas Would you consider accepting a patch that inserted one more piece of middleware `Capybara::Server::ExceptionCatcher` (much like `Capybara::Server::Identify`) that handles exceptions raised in the app?
",agibralter,2011-04-22 10:55:05
329,2011-08-29 22:22:19,"@agibralter: providing it is well written, it's purpose well defined and it has no annoying side effects, then yes. Oh and well tested too! ;)
",jnicklas,2011-04-22 10:55:05
329,2012-07-16 20:16:53,"@rubiety thanks for that solution, that's going to help us a ton.
",brianhempel,2011-04-22 10:55:05
329,2012-08-28 20:02:23,"FYI, Thin 2 will report a 500 status on error.
",leshill,2011-04-22 10:55:05
329,2013-04-10 22:14:27,"@rubiety this helped me out on a rails 2 app. Thanks!
",sfsekaran,2011-04-22 10:55:05
328,2011-04-21 17:33:28,"I am building a Rails 3 app which renders different views for mobile devices (using jQuery Mobile) and regular desktop browsers. I am testing with Cucumber/Capybara, and have separate test suites for mobile and browser. I am able to set a mobile User-Agent string in the request's HTTP header just fine using the ‘headers hack’ found here…

http://stackoverflow.com/questions/3399156/using-cucumber-capybara-in-rails-3-how-do-i-set-a-custom-user-agent-string

The Problem...

Most of my mobile Cucumber steps work fine (e.g., I set the mobile header in a step, thereafter the mobile views render). However after a form submit, the test then renders a browser view of the next step (not the mobile view I want). I think this may be because Capybara is dropping the header after a form submit action.

I tried to test this by adding a logger to my controller action so I could look at the user_agent headers, as follows:

def show
    # …
    logger.info(""Headers: #{request.user_agent}"")
    # …
end

I used an iPhone header (Buyer is the resource). In my test.log I see:

For the create action…

Started POST ""/buyers"" for 127.0.0.1 at 2011-04-19 16:49:18 -0700
Processing by BuyersController#create as HTML
  #...
Headers: Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7
  #...
Redirected to http://www.example.com/buyers/1
Completed 302 Found in 7ms

For the subsequent show action (note ‘Headers:’ is blank)…

Started GET ""/buyers/1"" for 127.0.0.1 at 2011-04-19 16:49:18 -0700
Processing by BuyersController#show as HTML
 #...
Headers: 
 #...
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 1.4ms)

As one would expect, the a ‘show me the page’ step then renders the browser page, not the mobile page I want.

How can I preserve the header so all my mobile steps run in my mobile test suite? 
",PeterBloom,2011-04-25 09:36:24
328,2011-04-22 10:52:33,"This is more of a question than an issue, tbh. In Rack-Test there is currently there no way of achieveing this short of monkey patching that I am aware of. I've been thinking about adding a header option to the rack-test driver, which would allow the passing in of different header options. If you're using a lot of JavaScript, Selenium might be a better fit anyway and allows you to set the user agen freely, IIRC.

/Jonas
",jnicklas,2011-04-25 09:36:24
327,2011-04-20 18:33:23,"Would it make sense/be possible to support an API for cookie manipulation?

<S_CODE_TOKEN>

I don't know if it would work for all drivers... but it would certainly work for Rack, Selenium, and Webkit.
",agibralter,2012-07-12 10:15:35
327,2011-04-25 21:50:28,"I would like to see this too. I used to be able to use this to get the cookies:

`Capybara.current_session.driver.current_session.instance_variable_get(:@rack_mock_session).cookie_jar`

But that seems to be broken in 1.0.0.beta1?

**Edit:** Got it working by using `Capybara.current_session.driver.browser.current_session` instead of `Capybara.current_session.driver.current_session`. But it would still be nice to have an easier way to access these.
",dmarkow,2012-07-12 10:15:35
327,2011-04-26 03:43:22,"And one that is standard across drivers...
",agibralter,2012-07-12 10:15:35
327,2011-04-29 11:01:33,"https://github.com/nruth/show_me_the_cookies is an attempt at this, but driver support varies.
",nruth,2012-07-12 10:15:35
327,2011-04-29 20:47:48,"dmarkow thanks for the pointer re: racktest cookie jar, saved me half an hour or so. I've updated the gem/project mentioned to work with edge capy but had some strange behaviour from selenium to investigate. Contributions welcome if anyone thinks a gem is a good fit for this. 

I think it'd be better in core but on the mailing list there was little/no response to a post about it. Maybe a pull request would get more attention?
",nruth,2012-07-12 10:15:35
327,2011-05-01 00:49:18,"I think both pull requests or list posts are good ways to Jonas's attention.  Just don't be surprised if he takes a few days to get back -- he seems to work in spurts. ;-)

Pull requests are good for working code that's ready to be merged.  (And, this being open source, a pull request is generally a lot more effective than writing a feature request and waiting for someone else to implement it.)

On the other hand, to start a discussion, the mailing list is the better place -- you can paste a diff (or link to GitHub) to discuss specific work-in-progress or proof-of-concept code.
",joliss,2012-07-12 10:15:35
327,2011-05-19 16:30:38,"Really delayed comment on this: I don't think we'll do this for 1.0 but maybe for 1.1 it would be okay. I'm a bit worried though, because it goes a little bit against the user centric nature of Capybara. I guess it would be convenient for some use cases though, could someone write up an example where this feature would be useful?
",jnicklas,2012-07-12 10:15:35
327,2011-05-19 16:42:45,"My use case was testing ""Remember me"" functionality provided by Devise. 
I wanted a stepdef for the user quitting their browser (clearing the session cookie).
Other than that it's just debugging info really.
There's an example for rspec/cucumber in the linked repo's readme.
",nruth,2012-07-12 10:15:35
327,2011-05-19 16:52:55,"Malicious and ""curious"" users are uses too. It's quite easy for a user to
manipulate her cookies using firebug or the webkit inspector. I write tests
to ensure that most behavior is accounted for. In particular, I'm testing an
embeddable widget that requires that certain cookies are present an intact
to function...

On Thu, May 19, 2011 at 12:42 PM, nruth <
reply@reply.github.com>wrote:

> My use case was testing ""Remember me"" functionality provided by Devise.
> I wanted a stepdef for the user quitting their browser (clearing the
> session cookie).
> Other than that it's just debugging info really.
> There's an example for rspec/cucumber in the linked repo's readme.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/327#comment_1204711
",agibralter,2012-07-12 10:15:35
327,2011-05-23 10:30:44,"Have added a 'query only' possible api as a pull request, see [pull #357](https://github.com/jnicklas/capybara/pull/357).  May be many good reasons why this is not a good approach so feel free to comment negatively...no hard feelings!
",mcrmfc,2012-07-12 10:15:35
327,2011-08-22 18:11:09,"This is hugely useful for testing affiliate cookie functionality:
- User comes to site with a referral parameter
- Server drops cookie into browser
- User visits registration page and signs up.
- Cookie is promoted into the database with the new user record.

This is an integration spec and right where Capybara is most useful.
",mperham,2012-07-12 10:15:35
327,2011-08-23 19:15:41,"+1 for this, I'm using it in a similar scenario to Mike and have to hack quite a bit to get it working
",subelsky,2012-07-12 10:15:35
327,2011-11-09 00:29:34,"+1 Ive been hacking around these issues as well.
",jeshuaborges,2012-07-12 10:15:35
327,2011-11-11 10:21:27,"Thanks for the get_cookie gist, but did anyone manage to do the set_cookie ?
",geoffroymontel,2012-07-12 10:15:35
327,2011-11-11 11:07:58,"I don't think so
There is a gem now but the main change was expire cookies rather than set.

I guess it's easy to do once you get hold of the cookie representation (or right api method for the driver) but haven't seen anything used.
",nruth,2012-07-12 10:15:35
327,2011-11-11 11:22:53,"mmm, too bad.
The problem is that the login process takes something like 1 minute in my application, and it's so loooong to repeat it at each scenario... And I can't mock up this part on server side.
I will try to find the right api for the chromium driver!
best
",geoffroymontel,2012-07-12 10:15:35
327,2011-11-14 13:17:07,"+1
",matthiasjakel,2012-07-12 10:15:35
327,2011-12-15 03:39:14,"I tried using this in a spec (the driver in this case is :rack_test):

<S_CODE_TOKEN>

But after much debugging discovered that the `set_cookie` call runs against a different Rack::MockSession and therefore in a different CookieJar than the call to `get`.  What works right now is this:

<S_CODE_TOKEN>

Although an API might be slightly more readable, I think it might be better to just widely document that this second form is the way to test cookies.

Details about my adventure debugging this one can be found here:
http://dobbse.net/thinair/2011/12/capybara-racktest-rspec-cookies-2of2.html
",dobbs,2012-07-12 10:15:35
327,2012-01-04 17:29:16,"**+1** I have several Rails apps that shares a single sign on solution using cookies.  Since the authentication function is tested elsewhere, I don't need to test it again in my app.  I just need to set the cookie with the token that I need to log in and and go right into my app.  Right now I have to write a little fake login screen just so I can get RSpec/Capabara requests tests to work.

I tried:

<S_CODE_TOKEN>

But it's using **get** instead of **visit** so I can't do things like:

<S_CODE_TOKEN>

Having the ability to view and setting the cookies would be a great option.  I checked out **show_me_the_cookies** gem but it doesn't have a way to set it.
",blindninja,2012-07-12 10:15:35
327,2012-01-04 19:42:57,"@lsj256go You should be able to adapt this piece of code I use to make login faster in tests to your problem:

<S_CODE_TOKEN>

I have this in features/support/quick_login.rb here I sign the user in to an app using Devise but you should be able to set a cookie just as well.
",betelgeuse,2012-07-12 10:15:35
327,2012-03-09 14:54:31,"Here's another use case. We're writing cucumber integration tests for a PHP-based web app. We want to get code coverage reports for our cucumber/capybara tests. To do this, our code coverage tool needs us to set a header or cookie with a session ID that will stay the same over multiple requests. If we put this in a header, we might miss coverage for some ajax calls, but if we put it in a cookie it will work even for ajax calls.
",cayblood,2012-07-12 10:15:35
327,2012-03-11 22:39:57,"@betelgeuse Thanks for the tip.  I actually did something similar, except that I set up a specific session controller and enabled only for test.  That way no one can just put in a parameter and get access to your system in production.

For example, if I visit http://myapp.com/login/username, the system will login as that user.  But it only works when RAILS_ENV=test.
",blindninja,2012-07-12 10:15:35
327,2012-04-17 10:59:12,"+1 We need a standard cookie api.
",ahawkins,2012-07-12 10:15:35
327,2012-05-04 08:59:51,"+1
",dentarg,2012-07-12 10:15:35
327,2012-05-04 11:23:54,"Let's see some pull requests if people want this ;) Though I suspect that changes need to happen in RackTest if Capybara wants to implement this in a non-silly way.
",jnicklas,2012-07-12 10:15:35
327,2012-07-12 10:15:34,"No pull requests yet. I'm closing this issue. _I_ don't need it. _I'm_ not going to fix it. Though if someone can provide a decent pull request I'd be happy to merge it.
",jnicklas,2012-07-12 10:15:35
326,2011-04-18 19:32:13,"In the README, with regard to using the Steak syntax for writing integration/acceptance tests, it says that spec/acceptance is aliased to spec/requests in that `:type => :request` is set automatically in both areas. However, this is not _quite_ correct. It's true that Capybara includes itself in `:request` and `:acceptance` example groups automatically; it's true that ""feature"" blocks get a `:type` of `:request` and so you have access to Capybara methods in them; and it's also true that if you use the regular RSpec syntax instead of the Steak syntax and put your tests in either spec/requests or spec/acceptance, you will have access to Capybara methods there as well. What is not true is that if you have tests in spec/acceptance, you will not have access to named route helpers. This is because RSpec only includes `ActionDispatch::Integration::Runner` within tests that are in spec/requests (not tests that are marked with `:type => :request` -- I don't know why), and it's that module that provides the named route helpers. I know this was probably intentional, because I think there was the same caveat with Steak. I think it's worth clarifying these details in the README, though, because they're not really documented anywhere (not even in rspec-rails), and I think that people should know about it. So this patch attempts to do that.
",mcmire,2011-04-25 09:08:34
326,2011-04-28 19:56:34,"> This is because RSpec only includes ActionDispatch::Integration::Runner within tests that are in spec/requests (not tests that are marked with :type => :request -- I don't know why)

I realize I'm late to the party, but is this still the case with Capybara 1.0.0.beta1 and rspec-rails 2.6.0.rc2?

Grepping around in rspec-rails yields:

<S_CODE_TOKEN>

So reading the source, it seems to me that `ActionDispatch::Integration::Runner` is (or is _intended_ to be) included on all examples with `:type => :request`.  Am I mistaken?
",joliss,2011-04-25 09:08:34
326,2011-04-28 21:50:53,"Ah. No... you're right, actually. Now that I look at it, that `:type => :request` stuff has been there [since rspec-rails 2.4.1](https://github.com/rspec/rspec-rails/commit/fc5cdbb603f0e66f9f3d19a0a60a775e124fb218). Of course, I am still using 2.2.0, so what I noticed totally makes sense there. So yeah... with rspec-rails HEAD and Capybara HEAD, it looks like everything is okay -- spec/acceptance will work just like spec/requests.

(Actually, now I'm completely confused as to how these folder aliases even work anymore... it looks like the code in rspec-rails that matched `spec/*` to `:type => *` has also been removed.)

I can update the README again and submit another pull request.
",mcmire,2011-04-25 09:08:34
326,2011-04-29 00:13:59,"Okay, just merged the other pull request -- thanks again.

In case you care, the mapping from types to paths in rspec-rails works like this:

<S_CODE_TOKEN>

Cheers. :)
",joliss,2011-04-25 09:08:34
325,2011-04-14 03:11:11,"I updated the gem to the git version I'm getting this message:

<S_CODE_TOKEN>

Since I'm not including Capybara explicitly I guess it is happening within:

<S_CODE_TOKEN>

Inside my spec_helper.rb
",escobera,2011-05-13 15:00:15
325,2011-04-14 13:09:02,"Cc @jnicklas

I think the 'rspec-rails' gem it the culprit. As of the edge version from github:

<S_CODE_TOKEN>

I wonder how it will be possible to make rspec-rails work with both 0.4.1.2 and newer versions of Capybara at the same time.
",joliss,2011-05-13 15:00:15
325,2011-04-15 10:45:40,"I think we'll have to live with the deprecation warning for a while. After all, it's not broken just deprecated, so let's leave it as is for now.
",jnicklas,2011-05-13 15:00:15
325,2011-04-15 10:46:03,"Leaving this issue open for now, so people are aware of the problem.
",jnicklas,2011-05-13 15:00:15
325,2011-04-19 18:21:48,"After I updated the Capybara, that deprecated message was shown.

In addition, on my test where there's a click_button method, the follow error was shown:
uninitialized constant NewController

(https://gist.github.com/929137)
",lucascaton,2011-05-13 15:00:15
325,2011-04-20 07:56:28,"I have similar problem, everything happend after update. 
All tests with nested controllers broken now.
Capybara::ElementNotFound:
       Unable to find css ""#464""
also I've got broken JS tests with AJAX requests.
",amalkov,2011-05-13 15:00:15
325,2011-04-20 09:03:29,"@lucascaton don't think the second error is related.

@amalkov this is not the place to report these problems. It would be fantastic if you could describe them in _detail_ and send them to the mailing list, or open an issue if you're confident of the cause.
",jnicklas,2011-05-13 15:00:15
325,2011-04-25 12:28:04,"FYI - the deprecation warnings are gone in rspec-rails in git, to be released with the 2.6.0 release (coming soon). I'd recommend leaving this open until that release (or a 2.6.0.rc3 if I do one first).
",dchelimsky,2011-05-13 15:00:15
325,2011-05-13 01:02:14,"FYI - This issue could be closed because rspec-rails 2.6.0 is released. Also I confirmed that the deprecation warning is gone.
",hiroshi,2011-05-13 15:00:15
325,2011-05-13 15:00:15,"Sweet -- and thanks to David for updating rspec-rails.

I'm closing this. :)
",joliss,2011-05-13 15:00:15
324,2011-04-13 21:57:56,"similar to what is described here: http://blog.ardes.com/2010/4/28/capybara-and-rack-test-sessions-and-http-methods

I have a few cases where capybara losses my session and signs my user out.
for example: scenario 1 and scenario 3 pass here, but not scenario 2 fails on the last step. the sign in step did not work

<S_CODE_TOKEN>

with the following step definitions:

<S_CODE_TOKEN>

I also had a similar problem twice before when I defined a new POST method on a controller. and posting to that url got me to the sign in page. when I changed the POST to GET. it worked fine. but with post it signed me out!

any idea why capybara lost my session data or how to handle that?
",giladbu,2011-04-16 14:45:51
324,2011-04-13 22:06:58,"I'm having the same problems with 0.4.1.1 (tracking master, commit ef3a4d6c25e5) where capybara loses my session. Using Rspec, no cucumber. If I sign in in the background then visit a path in the scenario, my session is lost. Please let me know if there's any other info I can provide.
",jc00ke,2011-04-16 14:45:51
324,2011-04-13 22:11:31,"Seen this problem as well.  In particular, noticed it when performing a POST/PUT against a resource member.  When I switched the route to GET, the session wasn't lost.
",elight,2011-04-16 14:45:51
324,2011-04-15 10:48:12,"I've never seen this issue before, and I've never experienced Capybara dropping sessions. Could any of you guys provide a replicatable example demonstrating this issue? (A spec would be best, but an exmaple app on GitHub is cool too)
",jnicklas,2011-04-16 14:45:51
324,2011-04-15 17:01:08,"I'll throw together an example app real quick.
",jc00ke,2011-04-16 14:45:51
324,2011-04-15 18:02:12,"So, I was bummed to see that my example app worked as expected. I then went back to my real app and updated my bundle which updated capybara from 1b44e0b to 4483061 and then all my specs work. Looks like closing #323 with 256e2ec also closes this issue.
",jc00ke,2011-04-16 14:45:51
324,2011-04-16 14:45:51,"Ahh, that makes sense. I guess that could have been the cause. Closing this then.
",jnicklas,2011-04-16 14:45:51
324,2011-04-21 07:06:04,"worked for me as well. thanks
",giladbu,2011-04-16 14:45:51
323,2011-04-13 21:54:21,"See my comments inline: https://github.com/jnicklas/capybara/commit/31f1ac3ccb5b173456a2f592f9ecc8c99a4c0694#undefined
",bcardarella,2011-04-15 10:01:58
323,2011-04-13 21:55:28,"To be more specific, it wasn't the DSL refactor but the addition of the :reset! method
",bcardarella,2011-04-15 10:01:58
323,2011-04-14 07:24:35,"I had some success by updating spec_helper to include...
  config.include Rails.application.routes.url_helpers, :type => :request
...and  config/environments/test.rb to include
  routes.default_url_options = { :host => ""test.host"", :protocol => 'http' }
",andywatts,2011-04-15 10:01:58
323,2011-04-14 13:42:47,"@andywatts I tried that as well and it didn't work. The problem here is that when you call the path helper it is a method missing call, then the Rails integration method_missing method calls reset!, before this commit that method would have set an instance variable and method missing would continue to see if the instance variable responds to the path helper then call it. Now because of the new reset! method it sets the @browser instance variable to nil.
",bcardarella,2011-04-15 10:01:58
322,2011-04-13 06:13:28,"Docs are excellent for Rspec setup, but there isn't anything for Test::Unit.
",chrisolsen,2011-04-13 21:53:09
322,2011-04-13 14:37:40,"Does this work for you (for test_helper.rb)?

<S_CODE_TOKEN>

(@jnicklas, I don't know about your Test::Unit fu, but do you think this is a good way to do it?)
",joliss,2011-04-13 21:53:09
322,2011-04-13 21:08:40,"Below is what worked for me.

require 'capybara/rails'
include Capybara::DSL
class ActionDispatch::IntegrationTest
  include Capybara::DSL
end
",chrisolsen,2011-04-13 21:53:09
322,2011-04-13 21:18:44,"Huh, thanks.  I am curious, why did you have to include it in the `main` object?  What are you doing that can't be solved by including Capybara::DSL in the appropriate test base classes?
",joliss,2011-04-13 21:53:09
322,2011-04-13 21:25:04,"@joliss
I am not totally sure what you mean.  What I posted above was inserted into the test_helper.rb file.  The reason I included the DSL module was that I was getting deprecation warnings with `include Capybara`.
",chrisolsen,2011-04-13 21:53:09
322,2011-04-13 21:30:12,"You are right about the DSL module.  What I meant was though, you have an extra include at the top level, not just inside the `class`. Why did you end up needing that?
",joliss,2011-04-13 21:53:09
322,2011-04-13 21:42:21,"Without it I was getting errors when trying to call the commonly used `visit` method (that was the only one I tested when trying to get things working).  Is there a different way to fix this?
",chrisolsen,2011-04-13 21:53:09
322,2011-04-13 21:53:09,"Huh, that's funny.  Perhaps if your test class derives from something other than `ActionDispatch::IntegrationTest`, you should include it in _that_ class.

(I actually got the snippet I posted off the web ;-) -- I don't use Test::Unit myself, so I am a bit fuzzy on the exact class names.)

I'll close this issue for now, and I'll add a section to the README next time I edit it.  Thanks for the note.
",joliss,2011-04-13 21:53:09
322,2011-04-14 08:23:26,"Yeah, you should never include Capybara (or now Capybara::DSL) in the global scope. It'll break a ton of stuff.
",elabs,2011-04-13 21:53:09
322,2011-04-14 15:53:53,"Are there any other suggestions at how to make the methods available without including it?
",chrisolsen,2011-04-13 21:53:09
322,2011-04-14 20:33:04,"You _should_ include them, but in the classes you use (as in my snippet above), not at the top level. :)
",joliss,2011-04-13 21:53:09
321,2011-04-11 10:30:43,"If you do a replaceHtml with an element, Capybara still references the old element(it doesn't refresh) so it throws out the `Element is no longer attached to the DOM (Selenium::WebDriver::Error::ObsoleteElementError)`

Example:
    @javascript
    Scenario: ttest
      I should see ""Hello World"" witihin ""#test""

my javascript for this is basically when you click a link, #test becomes replaced with another #test partial with different content(""Hello World 2"") or something. I think it references the old one because if I use a different selector(say a span inside #test, named #mr-span), it returns true.

I'm not sure if this is a capybara or selenium issue though
",corroded,2011-04-11 13:54:59
321,2011-04-11 13:54:59,"This is a very complicated issue, and there have been some attempts to solve this. I think we've done what we can for now, in master, do try to run edge, and search for previous issues on this, if you're interested in the background.
",jnicklas,2011-04-11 13:54:59
320,2011-04-10 17:16:30,"Hello, I updated my tests to the current branch and I was facing with some i18n issues. In older releases, I was setting up my tests with:

page.driver.header 'Accept-Language', 'pt-br'

Now I saw that header was removed from this branch, according to driver.rb file. Then I had to code a little workaround, based on @aslakhellesoy code:

 def set_headers(headers)
    driver = Capybara.current_session.driver.browser 
    def driver.env
      @env.merge(super)
    end
    def driver.env=(env)
      @env = env
    end
    driver.env = headers
  end

Does exist any implementation in capybara to easily setup http headers that I could help?
",abstractj,2011-04-10 20:55:51
320,2011-04-10 17:34:20,"I think we should make this a configuration options of the rack-test driver, that would be a very neat thing. Something like:

<S_CODE_TOKEN>

What do you think?
",jnicklas,2011-04-10 20:55:51
320,2011-04-10 18:10:20,"Great! I'll send my pull request asap 
",abstractj,2011-04-10 20:55:51
320,2011-04-10 20:55:51,"(We can close this, right Jonas?  I'll take the liberty...)

(By the way, Bruno, I think the mailing list may generally be a better place to discuss ideas like this.)
",joliss,2011-04-10 20:55:51
320,2012-01-16 20:27:03,"I also felt the need of this something like jnicklas suggested while trying to mimic mobile devices via User-Agent.
It was tagged as Feature request, so I would like just to express my interest on it.
",marcofognog,2011-04-10 20:55:51
320,2012-01-16 20:56:35,"This feature is implemented. Check the README.
",jnicklas,2011-04-10 20:55:51
320,2012-01-16 21:37:12,"Oh, sure. Thanks.
",marcofognog,2011-04-10 20:55:51
319,2011-04-07 19:45:35,"Hello,
This is a small correction for select() and unselect() documentation.

Emilien
",etaque,2011-04-08 18:45:11
319,2011-04-08 18:45:11,"Nice catch, thanks! Merged (and while we're at it, changed ""locator"" to ""value"" so as to have the docs consistent with the method signature).

@jnicklas Closing.  Would you like me to ping you like this whenever I close a pull request?
",joliss,2011-04-08 18:45:11
318,2011-04-05 18:21:25,"This could be exclusive to using akephalos (ive posted a similar bug there). When having a step that, lets say sets up a user, then logs in the user, then switches to using @javascript the session and information is not carried over.
",jsmestad,2011-04-06 06:57:30
318,2011-04-05 19:37:43,"Seems to have something to do with Capybara.javascript_driver getting changed after its set. Not sure why it worked but I removed gem 'cucumber' (because I had 'cucumber-rails' already included) so I am not sure if that was messing with the class level variables that capybara is using.

Found it by having errors when using @javascript tag, but worked when using the drivername tag. This behavior happened with both @zombie and @akephalos.

Maybe we can add a check or something for this...
",jsmestad,2011-04-06 06:57:30
318,2011-04-06 06:57:30,"This is intended and unavoidable behaviour. You can't just switch in the middle of a session. Capybara uses different sessions for each driver. If you want to be logged in in Akephalos, you need to actually log in in Akephalos. 
",jnicklas,2011-04-06 06:57:30
317,2011-04-05 08:30:54,"It is currently common for web applications to use the ""fragment"" part of the URL to provide navigation within Javascript applications. For example ""/user#profile"", ""/user#settings"", etc.

Suppose we have two tests: one does `visit ""/user#profile""` and one does `visit ""/user#settings""`.

Running these two in succession will only load the page once. The second time the browser will change the hash and trigger a hashchange event, but not make a new HTTP request. This breaks test isolation.

I've tried a few things to work around the problem, but my current best solution is to put `page.driver.browser.get(""about:blank"")` in my `background` code.

Perhaps it would be a good idea if Capybara did this automatically when it resets the session?
",jonleighton,2011-04-10 17:26:21
317,2011-04-10 17:26:21,"This is not fixed. Thanks for the suggestion!

EDIT: What a difference a letter makes, I meant ""This is **now** fixed.""
",jnicklas,2011-04-10 17:26:21
316,2011-04-04 15:24:03,"I have an app where I have a set of radio buttons with respective `label`s. The actual `input` elements themselves are hidden, but the labels are visible.

If I do `choose 'label text'`, Selenium will throw an error saying ""Element is not currently visible and so may not be interacted with"". This is because Capybara finds the `input` using the label text or otherwise, and then changes the state of the input itself.

Perhaps it would be possible to simulate a click on the label instead of changing the input, if a label is found. (And then keep the current behaviour in other cases.)

For now I can get around it with `find('label', :text => 'label text').click`.

Thanks
",jonleighton,2011-04-05 08:10:32
316,2011-04-04 22:03:02,"What's wrong with `find('label', :text => 'label text').click`? I think that is a very clear and consise API. I wouldn't expect the choose method to click on the label instead of the input field, and even worse, only do so under certain edge case circumstances.

I think the API is fine as is.
",jnicklas,2011-04-05 08:10:32
316,2011-04-05 08:10:32,"Ok, fair enough. Thanks for your response.
",jonleighton,2011-04-05 08:10:32
316,2012-03-26 11:31:27,"Thanks jonleighton, your solution helped me even after a year ..!! 
",DSushil20,2011-04-05 08:10:32
316,2014-06-05 07:02:44,"+1
",wasimakram,2011-04-05 08:10:32
316,2014-07-25 00:53:48,"Spent some time trying to figure this out then stumbled upon this. Thanks @jonleighton! :smiley_cat: 
",rickarubio,2011-04-05 08:10:32
316,2016-07-13 18:50:31,"Helped me too!
",waynebontrager,2011-04-05 08:10:32
315,2011-04-03 20:47:41,"I am running a Debian 5 (Lenny) server (64-bits)... 
I can install the capybara gem without any problem w Ruby 1.8.7(p344) but cannot install with Ruby 1.9.2...  
the libffi library is installed :
On my local Mac OSX I have no problem to install it... with Ruby 1.9.2 
",erwin16,2011-04-04 10:47:34
315,2011-04-04 10:47:34,"Why did you create two issues for this, as well as your post to the mailing list? Please stick to one thread, and please stick to the mailing list for these kinds of questions.
",jnicklas,2011-04-04 10:47:34
314,2011-04-03 17:15:04,"I am using RVM..
I can install it with Ruby 1.8.3-p334 but cannot install with Ruby  1.9.2-p180
-- ERROR: Failed to build gem native extension.

<S_CODE_TOKEN>

/home/kadoudal/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/site_ruby/1.9.1/rubygems.rb:407:in `bin_path': can't find gem rake (["">= 0""]) with executable rake (Gem::GemNotFoundException)
    from /home/kadoudal/.rvm/gems/ruby-1.9.2-p180@global/bin/rake:19:in`<main>'

same issue with Spork(0.8.4)  & Childprocess(0.1.8) ....  installing w 1.8.7 , not w 1.9.2 
....
",erwin16,2011-04-04 10:46:34
314,2011-04-04 10:46:34,"Capybara does not have native extensions. This is not an issue with Capybara, but seemingly an issue with your system dependencies and installing one of Capybara's dependencies.
",jnicklas,2011-04-04 10:46:34
314,2011-04-04 15:49:33," I should have thought about it as installation with ruby 1.8.7 is fine... thanks for your feedback .. I may focus on other point ...
",erwin16,2011-04-04 10:46:34
313,2011-04-02 00:19:45,"I received this error with firefox4, when I switched back to firefox 3.6 it worked.

<S_CODE_TOKEN>
",jamescway,2011-04-02 09:04:20
313,2011-04-02 07:47:51,"This should really be reported to the [Selenium tracker](http://code.google.com/p/selenium/issues/entry), as it's very unlikely to be a bug in Capybara.

That being said, this is a great example of a really bad bug report - you haven't provided any info about your environment that we can use to further investigate the issue.
",jarib,2011-04-02 09:04:20
313,2011-04-02 09:04:20,"My apologies, ruby 1.9.2p180, Rails 3.0.3, Capybara 0.4.1.2, Firefox 3.6.12, Firefox 4, OSX 10.5.8.  I created a bare bones test and added the :js => true and saw the error above.  I found a an issue on the selenium tracker which reports something similar to this (http://code.google.com/p/selenium/issues/detail?id=1438&q=firefox%204&colspec=ID%20Stars%20Type%20Status%20Priority%20Milestone%20Owner%20Summary)
",jamescway,2011-04-02 09:04:20
313,2011-04-02 19:33:44,"Hi,

The linked issue is unrelated to launching Firefox.
- Is the problem consistent- i.e. does it fail every time, or just sometimes?
- What version of the selenium-webdriver gem do you have installed? (0.1.4 adds Fx4 support)
- Please attach the full output from running this script https://gist.github.com/899798 (either in a gist or inside a &lt;pre&gt; element here).  
",jarib,2011-04-02 09:04:20
313,2011-04-02 22:48:49,"1. Yes it fails every time (including from running your test script).  Browser has never opened with the exception of switching down to FF3.6
2.  Using selenium-webdriver 0.1.4, tried to uninstall and reinstall just in case, no luck
3. https://gist.github.com/899980   I think you may have suggested to someone else to disable native events and I tried to do a test run, it shows the script I used in the gist.  I also added some getsockaddr commands that were suggested just in case.
4. I doubt this will help but I have no antivirus software.

Thanks for your help, please let me know if I'm barking up the wrong tree.
",jamescway,2011-04-02 09:04:20
313,2011-04-02 23:09:34,"Hi,

<S_CODE_TOKEN>

Looks like you're hitting [this issue](http://asqueella.blogspot.com/2010/12/dyld-unknown-required-load-command.html).

You should be able to reproduce the problem outside WebDriver by launching Firefox from the shell directly, i.e.:

<S_CODE_TOKEN>

I can't really tell what the proper solution would be without getting my hand on a Leopard machine, but one possible workaround would be to strip the x86_64 parts from the firefox-bin binary, which should be possible with the [ditto command](http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/ditto.1.html).
",jarib,2011-04-02 09:04:20
313,2011-04-02 23:17:39,"Looks like this has been WONTFIXed by Mozilla

  https://bugzilla.mozilla.org/show_bug.cgi?id=602049
",jarib,2011-04-02 09:04:20
313,2011-04-02 23:40:25,"It worked!  Thanks!  Firefox comes up in the rspec test now.  I was able to confirm the problem from the command line.

cd /Applications/Firefox.app/Contents/MacOS
mv firefox-bin firefox-bin.original
ditto --arch i386 firefox-bin.original firefox-bin
",jamescway,2011-04-02 09:04:20
313,2011-04-13 22:57:52,"Yeah!! That solution worked for me too! Thanks!!
",danigb,2011-04-02 09:04:20
313,2011-06-11 00:33:31,"The following work-around does not require touching the Firefox binary.
Create an executable shell script with the following contents.

<S_CODE_TOKEN>

Then add the following to features/support/env.rb, replacing 'path_to_script' with the location of the above script.

<S_CODE_TOKEN>
",edsimpson,2011-04-02 09:04:20
312,2011-04-01 15:11:15,"Hi!

First thanks for creating amazing tool!

I would like to add one feature, so capybara would honor symbols like following:

fill_in :user_email, :with => 'user@example.com'
fill_in :user_password, :with => 'example'
click_button :user_submit

However, it does not work and should replace with strings as for example:

fill_in ""user_email"", :with => 'user@example.com'
fill_in ""user_password"", :with => 'example'
click_button ""user_submit""

Does anybody else would like to see symbol feature implemented? 
If needed, I can investigate into code-base and provide batch?

Priit
",priit,2012-01-03 13:19:14
312,2011-04-01 15:19:01,"Why not just use strings?
",jnicklas,2012-01-03 13:19:14
312,2011-04-02 07:34:29,"I have stumbled into not working tests at least 3 times because of using symbols. Probably it's matter of taste at the moment however let's see if there is more people asking symbols. 
",priit,2012-01-03 13:19:14
312,2011-04-03 16:16:41,"It doesn't seem entirely unlikely that in the future we'd like to have Symbols have a different meaning in this context. They already do for selectors (e.g. `find(:id)` versus `find(""#id"")`). So for the time being, I think we'll skip the support for Symbols until we have a better idea of how they fit in here, or there is some major outcry.
",jnicklas,2012-01-03 13:19:14
312,2011-07-21 15:45:06,"I think that using symbols instead strings should be more clear. 
By the way think that everybody use symbols to designate controls in forms as `f.text_field :something`  and use  `fill_in :something, :with => ""anything""`  as a natural form. 
",csegura,2012-01-03 13:19:14
312,2011-07-25 21:07:01,"> By the way think that everybody use symbols to designate controls in forms as `f.text_field :something`  and use  `fill_in :something, :with => ""anything""`  as a natural form. 

Yup, I ran into this before as well -- I agree symbols seem fairly natural in that case.

Jonas wrote:

> So for the time being, I think we'll skip the support for Symbols until we have a better idea of how they fit in here

I agree that letting this gestate for a while is probably a good idea -- no hurry.
",joliss,2012-01-03 13:19:14
312,2011-07-30 15:37:18,"I'm also a little against symbols aesthetically. IMO, it's way superior to use labels, instead of IDs, symbols look good with IDs, but terrible with labels. The fact that we only accept strings is a subtle nod towards labels.
",jnicklas,2012-01-03 13:19:14
312,2011-10-20 19:25:56,"Another salient argument for the use of symbols here, is that it is what people coming over from Webrat expect. And given that Capybara is presented as an evolution of Webrat, I think it is responsible to honor the expected behavior and build on top of that rather than altering it in such a way that is clearly causing confusion and waste.
",andyferra,2012-01-03 13:19:14
312,2011-10-20 19:41:24,"Instead of ""capybara honor[ing] symbols"" I would call this ticket ""update fill_in to accept any #to_s""

Some people want to pass symbols to fill_in, which that are a number of arguments for and against.  Someone else might want to pass another object to fill_in.  IMHO, I think it would be reasonable to update the signature from `fill_in(String, ...)` to `fill_in(#to_s, ...)`

Note: I've personally lost lots of time trying to figure out why `fill_in(:foo, :with => 5)` wasn't working ... it is kind of annoying that it's not supported, because it's so natural, as you often use symbols for field names in Rails (etc).  You write `f.text_field :name` so it's very easy to accidentally also write `fill_in :name`
",remi,2012-01-03 13:19:14
312,2011-10-20 19:41:28,"+1 for symbol implementation
",gregfu,2012-01-03 13:19:14
312,2011-10-20 19:44:44,"+1 for https://github.com/jnicklas/capybara/issues/312#issuecomment-2473361
",andyferra,2012-01-03 13:19:14
312,2011-10-20 20:12:50,"It seems like there are some good arguments for supporting symbols and not much to the contrary. +1 for symbol support.
",ecavazos,2012-01-03 13:19:14
312,2011-10-20 20:44:47,"So do you guys think the following should be allowed:

<S_CODE_TOKEN>

that seems very unintuitive to me. Obviously this is a contrived example, but there could easily be fields which have a label which matches a normal symbol. Should that be allowed, or should it only be IDs?
",jnicklas,2012-01-03 13:19:14
312,2011-10-20 21:20:20,"I don't think it's matter of what should be ""allowed"", because I want tools to let me to do what feels right and just be supportive.

I think it should take what you give it, #to_s it and handle it like it would handle any other locator -- find the first thing with that label, title, id, etc.
",andyferra,2012-01-03 13:19:14
312,2011-10-20 21:24:21,"Okay then let me rephrase that: would it feel right and be supportive of Capybara to find anything if you sent in a symbol, or would you expect it to only find elements by ID?
",jnicklas,2012-01-03 13:19:14
312,2011-10-20 21:24:48,"I've reopened the issue btw.
",jnicklas,2012-01-03 13:19:14
312,2011-10-20 21:27:43,"Thanks for re-opening the issue. :)

I think it should handle it exactly the same way it handles a string.
So no, not just limited to IDs.
",andyferra,2012-01-03 13:19:14
312,2011-10-20 21:28:38,"Although, I think it's safe to say that people will be expecting to match an ID 99% of the time when they provide a symbol.
",andyferra,2012-01-03 13:19:14
312,2011-10-20 21:38:49,"+1 for handling it the same as a string, inotherwords: https://github.com/jnicklas/xpath/blob/master/lib/xpath/html.rb#L214  (id or name or label ...)

<S_CODE_TOKEN>

I definitely wouldn't expect it to just fill_in a field with the provided ID, I would at _least_ expect it to locate by name too
",remi,2012-01-03 13:19:14
312,2011-10-20 22:52:56,"+1 for #to_s
",mikehoward,2012-01-03 13:19:14
312,2011-10-20 23:05:34,"+1 for #to_s as well
",rjungemann,2012-01-03 13:19:14
312,2011-10-20 23:55:30,"+1 for #to_s
",BM5k,2012-01-03 13:19:14
312,2011-10-21 07:27:42,"So lots of +1's, I'll yield to you guys and we'll go for `#to_s`. Can someone work up a pull request? #440 might provide a starting point, but I think it's not generic enough. Also I'd really like to see that if we allow this in _one_ place, we allow it in _all_ places, so I'll be reluctant to accept a pull request which doesn't attemp to add this in _all_ places where it might be relevant.
",jnicklas,2012-01-03 13:19:14
312,2011-11-15 15:12:47,"Guys. Progress is not made by commenting with +1. I don't want this, I'm not going to do it, **but** I'll yield to the majority opinion, **if** someone actually sends me a pull request. Show me the code!
",jnicklas,2012-01-03 13:19:14
312,2012-01-03 13:19:14,"I am closing this issue again. If someone still wants this, please send a pull request. Please _don't_ whine or simply comment with +1.
",jnicklas,2012-01-03 13:19:14
312,2012-01-16 10:12:53,"![Challenge Accepted](http://1.bp.blogspot.com/-waJ19yJLLqM/TZW7WMCN2aI/AAAAAAAAATY/cNrYnid3RBI/s1600/challenge%2Baccepted.png) ;)
",piotrj,2012-01-03 13:19:14
312,2012-01-16 16:03:16,"Quick question. Should the symbol and to_s thing be available only in `fill_in` or in other actions as well?
For me, the only place where I stumbled upon the situation that I used symbol and then it didn't work which resulted with big WTF was actually in `fill_in`.

I think it is because you set up fields with symbols ie:

`= f.text_field :name`

and that's why you are tempted to do

`fill_in :user_name, :with => ""trumpet""`

That's why I think for now on we can just put this functionality in `fill_in`. What you guys think? 
",piotrj,2012-01-03 13:19:14
312,2012-01-16 16:32:48,"Hey, great that you're digging into this :) I would really prefer this to work the same for all actions. Either they allow non-strings, or not. Something in-between doesn't seem ideal.
",jnicklas,2012-01-03 13:19:14
312,2012-01-21 20:36:41,"Hm. I was just wondering whether perhaps symbols should only refer to ids and names, and not to labels (which I would find a little counterintuitive). But then I realized that labels tend to be capitalized, so there's little risk of accidentally matching a label. So I guess it's OK to just treat symbols like strings...
",joliss,2012-01-03 13:19:14
311,2011-03-30 20:42:07,"After updating I'm getting

<S_CODE_TOKEN>

— Did I miss something?
",polarblau,2011-03-31 15:58:41
311,2011-03-31 15:58:41,"Put save_page and save_and_open_page in the right place, closed by dd877b8cc6cff2536fd2af2cbd807773169631ae
",elabs,2011-03-31 15:58:41
310,2011-03-28 23:45:26,"I'm not sure what the correct way is to do this, but I want to be able to set the content of a contenteditable node during a spec.

The XPath repo has both a pull request (https://github.com/jnicklas/xpath/pull/9) and an issue (https://github.com/jnicklas/xpath/issues#issue/12) re: this. The pull request says it was merged in but I don't see the code.

What is the right way to do this?
",infews,2011-03-29 11:46:36
310,2011-03-29 11:46:36,"I eventually reverted the commit that added this in the XPath gem. There was a discussion, and consensus seemed to be that it wasn't a sensible feature to add in core Capybara. Note that you can always manually find the node (via find) and set it's content.
",elabs,2011-03-29 11:46:36
310,2011-09-22 14:58:37,"@elabs how whould you do this?
",nerdyglasses,2011-03-29 11:46:36
310,2011-09-22 16:05:41,"@infews: do you understand what elabs is implicating? Do you know how to fill content editable divs?
",nerdyglasses,2011-03-29 11:46:36
310,2016-09-12 18:48:26,"The problem with the set approach is that it doesn't set off JavaScript events. Which is my issue. Also I have tried `set` to no avail. I know this is old.. but if anyone comes across this and there is an update... Would love to know about it please. 

`<Textarea>` being a valid form element should get the same behaviour as `<input>`  I would think. 
",david-dcp,2011-03-29 11:46:36
310,2016-09-12 19:32:28,"@david-dcp You're commenting on an issue closed over 5 years ago, that was referring to contenteditable nodes (i.e. elements with the contenteditable attribute).

As far as &lt;textarea> and &lt;input> elements  (which aren't ""contenteditable"")- they're basically treated identically and calling `find` and then `#set` on an element is the same as using `#fill_in` and will generate the same events.  

If you have an actual bug please create a new issue, if you just want to know how to do something please post to the mailing list as requested in the README.  In either case make sure you identify what version of Capybara you are using as well as which and which version of driver you are using.
",twalpole,2011-03-29 11:46:36
309,2011-03-28 18:27:38,"Page with two simple forms like
form1: email ""EMail"", password ""Passwort""
form2: email ""eMail-Address"", ...

If you fill_in ""eMail-Address"" and submit form2, the value is not submitted (empty string). It seems that the input with the name ""email"" from form1 gets submitted. When I rename the email field in form1 to email1, it works.

In the browser it's always working, the html is 100% valid.
",gucki,2011-03-28 18:37:46
309,2011-03-28 18:37:48,"Ok, it seems capybara messes up only when the two inputs have the same id (which is invalid). Anyway, it would be better to make capybara detect this and report an error instead of messing up the form data.... :)
",gucki,2011-03-28 18:37:46
309,2011-03-28 22:37:30,"Actually what you're seeing doesn't work in a browser either. Try adding two fields with the same id to a page and add labels for each of them (using the for attribute). If you click either label you'll see the first field being highlighted, never the second. The second label is not connected to the right field.
",jnicklas,2011-03-28 18:37:46
308,2011-03-28 17:26:23,"If you have inputs named ""Passwort"" and ""Passwort bestätigen"", when you do a fill_in ""Passwort"", :with => ""..."" (only) the second input get's filled in. Instead only the only the first input should get filled in. 

When I remove the first ""Passwort"" field and only keep ""Passwort bestätigen"", the call still works. But shouldn't it fail because there's no lable exactly matching the string (not only containing it)?
",gucki,2011-03-28 22:33:17
308,2011-03-28 22:33:17,"Actually, Capybara does prefer labels which match exactly, yours probably doesn't match exactly. A common cause for that is if you have an asterisk indicating that the field is required in the label.

The XPath spec doesn't actually specify in which order elements are returned, but _most_ implementations choose to return them in the order they appear on the page. Since Capybara always picks the first returned element, results may differ across drivers. Afaik only capybara-envjs returns them in a different order than document order.

As for matching via ""contains"" rather than ""equals"", this is a very deliberate design decision, and I think a very good one. Capybara would be very frustrating to use otherwise.

I don't see anything wrong with the current behaviour, and this is the wrong forum for a discussion anyway. Please post your concerns to the mailing ist if you feel strongly about this. I am closing this issue.
",jnicklas,2011-03-28 22:33:17
307,2011-03-25 07:07:22,"I've been struggling with subdomains for a few days, not so much with the default rack test driver, but more so with the envjs driver. With rack-test I was using the Capybara.default_host hack, which I've read isn't supposed to be the correct way to do it, but rather you should just be able to do visit('http://subdomain.example.com'). I totally agree that visit() should be the way to do it, but it wasn't working correctly.

This pull request adds a shared example group for ""driver subdomain support"" that has been applied to the rack-test driver. It tests that when you visit() a subdomain, and then you visit() a path, that the current_url is of the subdomain and not the default_host.

This is just a start to fully resolve this issue, as it will need to be applied to the other drivers and such. Anything else that needs to happen, just let me know, and I'll get it done.

Thanks for all the work you've done ... Capybara is awesome.
",snelson,2011-03-25 13:24:42
307,2011-03-25 13:24:42,"I've started working on this, and have added some specs which already pass in RackTest and should hopefully work in Selenium soon. We'll soon have consistent behaviour for this!
",jnicklas,2011-03-25 13:24:42
307,2011-03-25 20:58:56,"Fantastic ... if there's anything I can help out with, just let me know ...
",snelson,2011-03-25 13:24:42
306,2011-03-21 21:07:34,"Hey,

I'm redirected to this page (http://www.iana.org/domains/example/) when I do a 'visit login_path'

I see you fixed that for rack_test but see nothing when it @javascript tag.

It's weird, 'cause I installed libffi this afternoon and after that, my tests passed (no redirection).

I just tried now, and same problem..

hope you see something !

thanks,
Jerome
",jeromelefeuvre,2011-03-21 22:01:24
306,2011-03-21 22:01:24,"I answer : should use login_path and not login_url
",jeromelefeuvre,2011-03-21 22:01:24
305,2011-03-18 15:07:47,"I'm moving from 0.3.6 to 0.4.x

Noticed that session locate is no longer available in 0.4.x however, still shows up in DSL_METHODS section
https://skitch.com/dimacus/ric5w/session.rb-capybara-0.4.1.2
",dimacus,2011-03-18 15:27:32
305,2011-03-18 15:20:18,"It was deprecated in 0.4.0 and finally removed in 0.4.1. Unfortunately we seem to have missed it in the DSL_METHODS, good catch!
",elabs,2011-03-18 15:27:32
305,2011-03-18 15:27:32,"I've removed :locate (along with :drag and :click, which are old too) in 549e67.  Thanks, Dima!
",joliss,2011-03-18 15:27:32
305,2011-03-18 15:31:00,"Dang... that was fast bug fix... now can yo fix my windows xp?

:-P
",dimacus,2011-03-18 15:27:32
304,2011-03-17 19:03:07,"If lets say one wants to check that a masked credit card number ""************1111""is in a text field, then the rendered regular expression is invalid with this error:

RegexpError: invalid regular expression; there's no previous pattern, to which '*' would define cardinality at 1

Perhaps one could just check for inclusion in the string:
<code><pre>
if field_value.respond_to? :should
  field_value.should include value
else
</pre></code>
",jonsgreen,2011-03-17 22:28:16
304,2011-03-17 22:28:16,"This is really an issue in cucumber-rails, not Capybara.
",jnicklas,2011-03-17 22:28:16
304,2011-03-18 00:38:22,"Good point. Sorry for the bother. Thanks for the redirection.
",jonsgreen,2011-03-17 22:28:16
303,2011-03-16 00:16:04,"On master, if an acceptance test fails due to a bug while the server is rendering the page, the only thing that shows up is the error message. Having the whole stack trace show up like it does for the Rails development server would be much more useful. 
",levity,2011-03-16 08:45:29
303,2011-03-16 08:45:29,"I have no idea how this is a Capybara issue. You'll want to configure this in whatever framework you're using or in your testing framework or whatever.
",elabs,2011-03-16 08:45:29
303,2011-03-16 14:50:39,"I filed this for Capybara because I'm referring to the test server that Capybara starts up to run acceptance tests.

I've only ever seen the server provide this kind of output when Capybara runs it. If this is actually something I can configure in my Rails environment/test.rb, great; do you happen to know how? :)

On Mar 16, 2011, at 4:45 AM, elabsreply@reply.github.com wrote:

> I have no idea how this is a Capybara issue. You'll want to configure this in whatever framework you're using or in your testing framework or whatever.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/303#comment_879649
",levity,2011-03-16 08:45:29
303,2011-05-03 23:50:21,"I also have this issue, I have configured it to show the full stack trace but it doesn't seem like the server which Capybara starts up uses those settings.

There is also no error message in any of the log files.  Very hard to debug issues.
",jordandcarter,2011-03-16 08:45:29
303,2011-05-03 23:57:14,"This seem to fix it for me,

Capybara.server do |app, port|
  require 'rack/handler/mongrel'
  Rack::Handler::Mongrel.run(app, :Port => port)
end
",jordandcarter,2011-03-16 08:45:29
303,2011-05-04 00:01:01,"Cool, thank you for the tip.

On Tue, May 3, 2011 at 7:57 PM, jordandcarter <
reply@reply.github.com>wrote:

> This seem to fix it for me,
> 
> Capybara.server do |app, port|
>  require 'rack/handler/mongrel'
>  Rack::Handler::Mongrel.run(app, :Port => port)
> end
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/303#comment_1097198
",levity,2011-03-16 08:45:29
303,2013-01-18 18:17:35,"Just FYI, the Capybara.server mod mentioned above did not help me.  My server specs complained 

<S_CODE_TOKEN>

Instead, I was able to get a poorly formatted but much more informative message by adding this:

<S_CODE_TOKEN>

in my config/environments/test.rb
",bunnymatic,2011-03-16 08:45:29
302,2011-03-14 03:37:01,"Here are some tests showing that right now Capybara doesn't click on buttons given their title.

They work by patching XPath as shown in: https://github.com/jnicklas/xpath/pull/17

Thanks!
",javierv,2011-04-17 12:00:14
302,2011-04-17 12:00:40,"Thanks man! Good job!
",jnicklas,2011-04-17 12:00:14
301,2011-03-13 13:48:27,"Another backport from Steak. 

It's necessary to pass the caller of the `feature` to the `describe` method in order to avoid filtering by file_path to not work (see the test case in the commit)
",cavalle,2011-03-31 15:59:29
301,2011-03-31 15:59:40,"Sorry for the delay, thank you so much for fixing this!
",jnicklas,2011-03-31 15:59:29
300,2011-03-12 11:51:00,"Besides it's more polite, this turned out to be a real issue in Steak, causing Cucumber to break: https://github.com/cavalle/steak/issues/closed/#issue/19
",cavalle,2011-03-31 16:06:16
300,2013-11-27 02:30:38,"I ran into this issue as well.  Tried to call `feature` (to create a Capybara feature example group) from within another example group (a `describe` or `context` block) and got this error.

Oh well, I guess I can just manually pass in `type: :feature` — I was just looking for a shorter way to do that from spec files that aren't under `spec/features` (it automatically adds that to those examples groups that _are_ under that dir)...
",TylerRick,2011-03-31 16:06:16
299,2011-03-11 02:04:50,"I am using capybara (0.4.1.2). When I swap the driver, for example:

<S_CODE_TOKEN>

it should swap the driver, but it doesn't. Using :js=>true as the same effect: nothing happens.

Now, if I use Swinger (https://github.com/jeffkreeftmeijer/swinger) it does the swaping.

I am using Spork.
",Nerian,2011-03-11 21:02:10
299,2011-03-11 13:00:35,"On Fri, Mar 11, 2011 at 3:04 AM, Nerian
reply@reply.github.com
wrote:

> I am using capybara (0.4.1.2). When I swap the driver, for example:
> 
>    context 'Creating a school', :driver=>:selenium do
> 
> it should swap the driver, but it doesn't. Using :js=>true as the same effect: nothing happens.

There have been some changes since version 0.4.x, so you'll need to
use the current tree from GitHub for this to work, not the gem.

Jonas, how about quickly pushing out 0.5 before the 1.0 beta release,
so people won't get confused?

## 

Jo Liss
http://opinionated-programmer.com/
",joliss,2011-03-11 21:02:10
299,2011-03-11 13:02:10,"[Closing.]
",joliss,2011-03-11 21:02:10
299,2011-03-11 15:15:39,"We're really not in a good state for a release right now. Maybe we could do a release without the RSpec matchers, but those are really not nearly done.
",jnicklas,2011-03-11 21:02:10
299,2011-03-11 15:19:22,"It's not a big deal, I am fine using Swinger in the mean time. No need to rush things. 
",Nerian,2011-03-11 21:02:10
298,2011-03-11 00:02:57,"This is pulled out from my last pull request.  I needed this because I work on an application that connects accounts from google, twitter, and facebook with oauth.  I don't really have a name on the popups - it's just much more convenient to use the title or url of the window I want.
",mgiambalvo,2011-03-11 15:17:00
298,2011-03-11 15:17:00,"Thanks!
",jnicklas,2011-03-11 15:17:00
297,2011-03-10 15:19:11,"Hi,

I had specs which passed options to have_css:

<S_CODE_TOKEN>

They were not failing when they should.

Thanks!
Mike
",mikem,2011-03-11 02:07:44
297,2011-03-10 18:07:44,"Thanks for catching this!  The options should not have been passed as an array in the first place -- I've applied your tests and fixed the code in a slightly different way.
",joliss,2011-03-11 02:07:44
297,2011-03-10 22:30:44,"Thanks! I originally tried to make that change in `#matches?` and `#does_not_match?` but my attempts broke many more other tests.
",mikem,2011-03-11 02:07:44
296,2011-03-08 19:57:40,"Hi jnicklas,

About this topic: https://groups.google.com/d/topic/ruby-capybara/0ziQ8pJtJnA/discussion

I extracted celerity and culerity drivers respectively:

https://github.com/sobrinho/capybara-celerity
https://github.com/sobrinho/capybara-culerity

You still need to explain this on next release and I need to write a great README.

What you think?
",sobrinho,2011-03-10 21:49:42
295,2011-03-06 18:48:18,"I made this quick patch to be able to spawn Firefox in the `Spork.prefork` block.

It's quite simple: 

<S_CODE_TOKEN>

then in tests the Selenium driver reuses the preloaded browser instead of creating a new one.

Upside: shave seconds off test startup time.
Downside: Firefox takes up memory all the time.

This goes well with running [headless](http://github.com/leonid-shevtsov/headless) to background the browser; I initially planned to add it to the preloader as an option, but decided that's out of the driver's responsibility.
",leonid-shevtsov,2011-03-11 05:15:22
295,2011-03-07 01:23:13,"That's a great idea, though there's actually three serious-ish problems right now:
- If I hit Ctrl+C twice on the client (I always need to press Ctrl+C twice for some reason -- the first one doesn't do anything), the browser terminates, so now spork needs to be restarted.  That's not very helpful behavior.  It seems to be the at_exit hook that's being run if the client terminates due to SIGINT.  I think we shouldn't be setting up at_exit like that if we're preloading.
- When I Ctrl+C the spork server, the browser gets killed, but now I have a stale 7MB `webdriver-profile20110307-16263-1dnr07s` directory lingering in `/tmp`.  These accumulate after a while, so that's a problem -- we should be handling termination (i.e. SIGINT) properly on the server and cleanly quit the browser instance.
- If I initialize a Driver::Selenium instance (e.g. to use Chrome) but also call `preload_browser`, the options (like `:browser => :chrome`) will be silently ignored.  Maybe this can be a documented shortcoming, but I wonder if there's a better way to handle this -- perhaps a cache mapping option hashes to browser instances or so.
",joliss,2011-03-11 05:15:22
295,2011-03-07 08:19:43,"Thanks for the comments, I'll look into it. 
",leonid-shevtsov,2011-03-11 05:15:22
295,2011-03-10 21:15:22,"I actually think that the last issue Jo pointed out is quite serious. We can't preload the browser like this, because it's actually not a very realistic way of opening the browser. Considering that, I'm against this getting merged.

I played with Spork a bit recently, didn't really get it all to work, due to some database transaction issues. But I came up with something like:

<S_CODE_TOKEN>

Obviously this isn't something we can add to Capybara, since it's very specific to a particular application and to using Spork, but it's not a lot of code, and kind of a simple concept.

I'll close this for now, but I'm open for a continued discussion.
",jnicklas,2011-03-11 05:15:22
295,2011-03-10 23:35:46,"Well actually I ended up with about the same solution at first, but it didn't work out so well. Somewhy capybara doesn't reuse the browser after the fork.

I'll create a blank rails app and test the whole setup there.

Regarding the Ctrl+C issue: the problem is not `at_exit`, it's probably the consequences of interrupting Webdriver. The temp files don't get cleared because the browser isn't terminated properly.
",leonid-shevtsov,2011-03-11 05:15:22
295,2011-03-10 23:37:22,"You need to make sure it's the same session object, which is why something like `Capybara::Session.new(:selenium, Capybara.app).visit('/')` which seems like the obvious solution isn't going to work.
",jnicklas,2011-03-11 05:15:22
295,2011-03-11 14:08:23,"Ah, thanks for posting this, Jonas -- that's much better and simpler of course.

It still suffers from the problem that interrupting the client kills the browser, like the original patch, which makes it pretty unusable even as a hack.

In case anyone cares about pursuing this further:

It seems that when you interrupt the client, the browser is indeed getting yanked by the `at_exit` handler.  Removing the at_exit handler in Capybara allows the browser to continue to run even after the spork client was interrupted.  However, the next time you run the tests, the browser gets reused but the tests still fail because, for some reason, the JavaScript doesn't run in the browser anymore.  Manually navigating around in the browser instance reveals that JS only gets executed if I hit the reload button, but not if I navigate to a page by hitting enter in the location bar or by clicking a link.  It's totally weird, I've never seen anything like this.

Unrelatedly, I tried trapping SIGINT, and it doesn't work at all if I'm running spork, neither in the client nor in the server.  (Without spork, it works fine.)  I think Spork overrides the signal handler after I define it.

At this point, I'm not inclined to dig deeper, but I just thought I'd post this anyway in case someone else wants to.
",joliss,2011-03-11 05:15:22
294,2011-03-06 00:48:59,"- Added text method to DSL.

As I suggested on the list: https://groups.google.com/d/topic/ruby-capybara/5Xr4ulBoRX8/discussion

I have no clue if this is the best way to fix it, but since I had it in my repo I figured I'd send you a pull request.  Feel free to just close if you're at all unsure whether this is sensible.
",joliss,2011-03-07 08:38:55
294,2011-03-06 00:51:22,"(An obvious alternative would be to just for now rip out the offending parts of the test added in 17224be.)
",joliss,2011-03-07 08:38:55
294,2011-03-07 00:38:56,"Closing per your message on the list. :)
",joliss,2011-03-07 08:38:55
293,2011-03-04 21:30:32,,marcusmateus,2011-03-04 21:31:31
293,2011-03-04 21:31:31,"Accidentally created blank issue... & it won't let me delete... sorry.
",marcusmateus,2011-03-04 21:31:31
292,2011-03-02 04:16:24,"On most browsers, when checkboxes are disabled, then user won't be able to check or uncheck those boxes.

Thought you might include this to mimic the same behavior.

Cheers.
",khoan,2011-03-05 22:47:39
292,2011-03-02 16:24:51,"Needs more tests and needs to work across drivers.
",jnicklas,2011-03-05 22:47:39
292,2011-03-05 22:47:39,"Does it need to work across drivers?  I would assume that the Rack::Test driver is the only one that's affected by this.

But I agree it needs tests.  Also, the current implementation only works for checking, not for unchecking, and I don't know whether it's correct to just silently ignore #set if the checkbox is disabled (is this how Selenium behaves?).

I'll close this for now; feel free to repush and reopen, Khoan!
",joliss,2011-03-05 22:47:39
291,2011-03-01 07:27:45,"The documentation on http://rubydoc.info/github/jnicklas/capybara/master seems to be broken or moved. 

Keep up the good work! 
",aslakjo,2011-03-02 07:59:22
291,2011-03-01 17:47:32,"What's broken about it? Seems to work fine.
",jnicklas,2011-03-02 07:59:22
291,2011-03-02 07:59:22,"Sorry, about that. Now it seems to work just fine. I must have been there it at a bad time.
",aslakjo,2011-03-02 07:59:22
290,2011-02-28 23:05:11,"Hi,
I posted on the [mailing list](https://groups.google.com/group/ruby-capybara/browse_thread/thread/e2f4df9c29deb727/90b8a9a94f5f0eaa) about this a while ago, but didn't get any feedback, so I thought I'd just submit this for discussion.

Jonas, I've also seen your amazement on the mailing list that capybara works on windows at all, so I understand if you aren't concentrating on Windows support and thus aren't interested in this patch.

However, capybara _does_ work on windows, just not attach_file. I'm not sure why, but when capybara attaches the file, the path has forward slashes and file attachment fails. If I attach the file manually through firefox, the path has back slashes and the file attachment succeeds.

This patch just replaces / with \ if the path contains C:/. If there is a better way to fix this issue, I would be happy to modify the patch.

I ran the it_should_behave_like ""attach_file"" specs and they fail before my change ([output](https://gist.github.com/848212)) and pass after.

Please let me know if there is anything else I can test or do in regards to this issue. Thanks!
",carols10cents,2011-03-02 15:55:59
290,2011-03-01 17:52:14,"Does this fail only for Selenium or for other drivers as well? If it's only Selenium I'd rather push this to the driver. Also, isn't there some more generic way of discovering if the file is on Windows, seems like detecting the `C:` is very error prone, what if the file is on the `D:` driver?
",jnicklas,2011-03-02 15:55:59
290,2011-03-02 01:40:44,"I've posted about this [on the list](https://groups.google.com/d/topic/ruby-capybara/4vTfnCnetyc/discussion).  I suggest we continue there till there's some consensus?  These pull request things are kinda inconvenient for discussion.
",joliss,2011-03-02 15:55:59
290,2011-03-02 15:55:59,"The tests pass with celerity without my change, so I'll look into fixing this with selenium-webdriver. Thank you for your help, Jonas and Jo!
",carols10cents,2011-03-02 15:55:59
289,2011-02-28 22:25:28,"- Added #dsl anchor in README

Figured this would be very useful for linking.

(We can't have quotes around `dsl`, they'll get mangled.)
",joliss,2011-03-01 22:19:49
288,2011-02-28 10:16:56,"Having form with checkboxes like:
bar[city_ids][]

Capybara sends params (debugged in controller) :bar => { :city_ids => [""[\""\""]""] }, which fails in Active Record query.
Actual sent params (in development) are: :bar => { :city_ids => [""""] }
",morgoth,2011-03-10 23:25:55
288,2011-02-28 20:17:30,"I'm getting this error as well, but not every time. One form works fine, another near identical form fails. The difference is that the failing form has file fields as well. As soon as I remove the file fields, the checkbox params are sent correctly.

I'll investigate more to see if I can find out anything else.
",bostonou,2011-03-10 23:25:55
288,2011-03-01 02:28:08,"After some digging, figured out this is a bug in Rack-Test, not Capybara. It's addressed <a href=""https://github.com/brynary/rack-test/issues#issue/12"">here</a>.
",bostonou,2011-03-10 23:25:55
288,2011-03-01 09:20:59,"This commit (which is not merged in yet) fixes above problem:
https://github.com/brynary/rack-test/commit/7edd5bcb98a57686f015c26fc6c0c3dbdc3319d8
",morgoth,2011-03-10 23:25:55
288,2011-03-10 23:25:55,"Closing this then.
",jnicklas,2011-03-10 23:25:55
287,2011-02-26 22:44:31,"Hi guys, I'm facing with current issue at capybara:

I have i18n as default to pt-br, when I open the page with fields like password(Senha) and email, the are correctly spelled in pt language.

When I write my tests with capybara setting lang

 background do
    page.driver.header 'Accept-Language', 'pt-br'
    visit ""/users/login""
 end

And try to fill form:

  fill_in 'Email', :with => 'guest@test.com' 
  fill_in 'Senha', :with => 'guestguest'

  click_button ""Login""

I receive a capybara message that element ""senha"" wasn't found.

this is an issue?
",abstractj,2011-02-27 23:23:07
287,2011-02-27 01:10:45,"No, something else is wrong. I guarantee you whatever your problem is, it has nothing to do with i18n. Common things to check are case sensitivy (Capybara is always case sensitive) and database contents. Make sure the element is actually on the page (via save_and_open_page or some other mechanism) and appearing exactly as you intend it to.

If you're unsure if something actually is an issue, please ask the mailing list first, as there is a much larger overhead to issues here on GitHub.
",jnicklas,2011-02-27 23:23:07
287,2011-02-27 15:23:07,"Thanks a lot Jonas.
",abstractj,2011-02-27 23:23:07
287,2011-02-28 15:45:23,"Did you figure it out?
",jnicklas,2011-02-27 23:23:07
287,2011-04-21 02:39:59,"I'm with same problem, but only I'm using Selenium driver...
",lucascaton,2011-02-27 23:23:07
287,2011-04-21 06:34:20,"lucascaton: mailing list! With a detailed description of the problem.
",jnicklas,2011-02-27 23:23:07
287,2012-11-25 16:15:08,"For those coming here in the future looking for an answer:

<S_CODE_TOKEN>
",mhenrixon,2011-02-27 23:23:07
286,2011-02-25 02:37:36,"I have very simple feature with one scenario and one step

my env.rb has 

Capybara.default_selector = :css

when I run cucumber I get this error https://gist.github.com/a64e432c1d0c1a2930ea 

the way I have been able to fix this and move ahead is specifying the following

autoload :XPath, 'xpath'

obviously this means the issue is not with require and I am not sure why a TypeError is being thrown ""XPath is not a module (TypeError)""

*\* System Info:
cucumber (0.10.0)
cucumber-rails (0.3.2)
capybara (0.4.1.2)
rails (2.3.8)
ruby (1.8.7-p302)
OS SnowLeopard 10.6.6
",daya,2011-03-10 23:25:02
286,2011-02-25 08:23:31,"Maybe you have something else called XPath loaded? Do a `p XPath` at
the top of your file.

/Jonas
",jnicklas,2011-03-10 23:25:02
286,2011-02-25 17:48:01,"yes you are right, the XPath that was getting loaded was from REXML namespace.

I fixed it by explicitly require 'xpath' as the first line in support/env.rb ... i will check if I need to still have autoload :XPath, 'xpath' in capybara.rb
",daya,2011-03-10 23:25:02
285,2011-02-23 08:31:19,"In the doc it says: At the moment, Capybara supports Webdriver, also called Selenium 2.0, not Selenium RC. Provided Firefox is installed, everything is set up for you, and you should be able to start using Selenium right away.

However, bundling the selenium-webdriver gem and setting Capybara.javascript_driver = :selenium doesn't do anything. When running my integration test firefox is not starting. 

I'm on a mac with a rails 2.3.5 app. I'm not using Cucumber.

Regards,
Nico
",ncri,2011-02-23 12:00:32
285,2011-02-23 11:18:49,"You need to provide more details than this, and probably do some debugging on your own. Most likely it's a problem with Selenium anyway and not with Capybara.
",jnicklas,2011-02-23 12:00:32
285,2011-02-23 11:27:07,"Hi jnicklas, 

I'm using selenium-webdriver 0.1.2, and capybara 0.4.1.1. I don't have a clue where to start debugging. My capybara integration test runs fine, it just doesn't open a browser. No errors, nothing.

Any hints? Any more info that you need which would help?

Nico 
",ncri,2011-02-23 12:00:32
285,2011-02-23 11:52:05,"What do you mean it runs fine? You need to actually switch to the Selenium driver for it to be used. You probably want to set Capybara.current_driver, and not Capybara.javascript_driver.
",jnicklas,2011-02-23 12:00:32
285,2011-02-23 12:00:32,"Ah, okay, now it works! ;-) The test fails where it shouldn't, but I can work with this. Thx! 
",ncri,2011-02-23 12:00:32
284,2011-02-22 19:15:51,"I get this error in a simple step like:

<S_CODE_TOKEN>

The same step works when I put the `@javascript` tag to run the scenario with Selenium.
",thmzlt,2011-02-22 19:18:22
284,2011-02-22 19:18:22,"this is a known issue in cucumber, please use the search.
",jnicklas,2011-02-22 19:18:22
283,2011-02-22 14:36:05,"recently when I upgrade to ruby 1.9.2p180 the rack test server doesn't handle the array data from the HTML form correctly. instead of passing an array to the test server, it pass the array.to_s to the server, so I got a string form of the array. I use Rails 3.0.4 by the way.
",jiongye,2011-03-11 23:13:27
283,2011-02-22 15:06:02,"Are you saying this is a regression from p0 to p182 or where did you upgrade from?
",jnicklas,2011-03-11 23:13:27
283,2011-02-22 17:11:55,"yes, when I upgrade from p0 to p182, I got that behavior.
",jiongye,2011-03-11 23:13:27
283,2011-03-02 04:13:45,"I found the same bug, using ruby-1.9.2-p0, rails 3.0.3, and capybara-0.4.1.2.

I have a (rails-generated) checkbox that looks like this:

<S_CODE_TOKEN>

When submitted through the browser, the app sees this:

<S_CODE_TOKEN>

But, using Capybara, the app sees this:

<S_CODE_TOKEN>

Edit: Re-reading your original post, I'm not 100% this is the same bug, as I am getting an array which contains the array.to_s, whereas it sounds like you're just getting the array.to_s by itself. It also sounds like yours was working fine with p0, whereas mine is not. I'm guessing it's at least the same root cause though.
",JangoSteve,2011-03-11 23:13:27
283,2011-03-02 22:47:02,"That is the same bug I have as you described, but it did work fine with p0.
",jiongye,2011-03-11 23:13:27
283,2011-03-02 22:51:28,"When you upgraded ruby, is it possible you also upgraded the capybara gem?.
",JangoSteve,2011-03-11 23:13:27
283,2011-03-02 22:57:06,"no, I didn't upgrade the capybara gem at that time. 
",jiongye,2011-03-11 23:13:27
283,2011-03-10 23:26:39,"Could this be the same problem as this one: https://github.com/jnicklas/capybara/issues/288
",jnicklas,2011-03-11 23:13:27
283,2011-03-11 05:06:16,"Yes that is exactly the problem I'm having. I hadn't seen that, thanks Jonas!
",JangoSteve,2011-03-11 23:13:27
283,2011-03-11 15:13:26,"Seems like this is the a problem in rack-test then. I'm closing this issue, since there is an open pull request for this to be fixed in rack-test.
",jnicklas,2011-03-11 23:13:27
283,2011-03-11 17:04:40,"Yes, and I can confirm that pull request on rack-test fixed my problem, though I guess I can't speak for the creator of this ticket.
",JangoSteve,2011-03-11 23:13:27
282,2011-02-21 20:02:33,"Adding a verification to check if the argument passed to fill_in respects the text/password field's maxlength attribute. Removed unnecessary code added by me on selenium_driver.rb
",gvc,2011-03-06 07:54:20
282,2011-03-05 23:54:20,"I've pulled this (squashed and with slight modifications) into my queue, which I'll send to Jonas momentarily. Thanks!

By the way, in general I'd recommend using `git commit --amend` or `git rebase --interactive` to just fix commits yourself before sending them out -- they're very helpful commands!
",joliss,2011-03-06 07:54:20
282,2011-03-06 00:01:05,"Thanks joliss, I wasn't aware of them!
",gvc,2011-03-06 07:54:20
281,2011-02-21 19:20:31,"Adding a verification to check if the argument passed to fill_in respects the text/password field's maxlength attribute.
",gvc,2011-02-21 19:47:51
281,2011-02-21 19:30:48,"The rack-test driver change makes sense, but if selenium allows `send_keys` to enter more than maxlength characters in a field, that's a bug in selenium and should be fixed there, IMHO.
",jfirebaugh,2011-02-21 19:47:51
281,2011-02-21 19:32:18,"I'll look it up. I'll try to remove the conditions I added and see if the test still passes
",gvc,2011-02-21 19:47:51
281,2011-02-21 19:47:51,"Alright, you're right, the code in selenium_driver.rb is completely useless. I'll close this pull request and do another one! Thanks, John!
",gvc,2011-02-21 19:47:51
280,2011-02-21 01:02:24,"It's pretty common to have cucumber steps that look like this:

Then /^I should see (\d+) post summaries$/ do |n|
  page.should have_css("".post_summary"", :count => n)
end

You'll notice my mistake above. I didn't convert n to an integer. The resulting error is:

Then I should see 3 post summaries     # features/step_definitions/posts.rb:6
      expected #has_css?("".post_summary"") to return true, got false (RSpec::Expectations::ExpectationNotMetError)
      ./features/step_definitions/posts.rb:7:in `/^I should see (\d+) post summaries$/'
      features/user_views_posts.feature:15:in`Then I should see 3 post summaries'

This led me to look at the page in a browser, confirm that the markup was correct, and forcefully remove some hair. I found my mistake a few minutes later, but if I had been new to ruby/rails/cucumber, I wouldn't have caught my mistake and wouldn't have had a helpful error message to guide me out of it.

Since Integer.to_i is so cheap, I didn't see any harm in sprinkling in to_i for count, minimum, and maximum (along with the relevant tests). I think it's a win for making the path for programmers new to the stack as smooth as possible.

Tests are included. Let me know if you have any feedback.
",kamarcum,2011-03-06 06:56:52
280,2011-03-02 04:01:35,"Seems reasonable to me.  I think the underlying issue is that '3' == 3 fails silently.  It's not as bad for '3' >= 3 (that one will complain about incompatible types), but then again I'm not against sprinkling to_i on :minimum and :maximum as well.

The patch applies fine on master and passes.  (There's missing quotes in the last chunk, but no need to repush -- we can fix it when we merge.)

Jonas, what do you think?
",joliss,2011-03-06 06:56:52
280,2011-03-05 22:56:53,"I've pulled this into my queue, which I'll send to Jonas momentarily.  Thanks!
",joliss,2011-03-06 06:56:52
280,2011-03-05 22:58:37,"(I've amended the commit to include the missing quotes, btw.)
",joliss,2011-03-06 06:56:52
279,2011-02-19 22:10:34,"When I add the driver option to any part of a spec, it has no effect.

<S_CODE_TOKEN>

But when I put it explicitly set the current_driver, it does work:

<S_CODE_TOKEN>

The README indicates that :driver option above would work. I've installed the gem via git `master` branch.
",turadg,2011-02-21 02:59:46
279,2011-02-19 23:25:19,"it only works if your spec has a :type => :request or :type => :acceptance. IIRC this is indicated in the README. Could that be your problem?
",jnicklas,2011-02-21 02:59:46
279,2011-02-20 03:01:03,"Thanks for your attention to this. Yes, that is indicated in the README. In this case, the spec is in `spec/requests`. I've also tried adding the `type` metadata as in this example:

<S_CODE_TOKEN>

I put that in `spec/requests/issue_spec.rb` and run `rspec spec requests/issue_spec.rb`. Chrome doesn't open. If I add this line anywhere in the file before `visit` then it does:

<S_CODE_TOKEN>
",turadg,2011-02-21 02:59:46
279,2011-02-20 09:46:14,"Another possibility: did you require 'capybara/rspec' ?
",jnicklas,2011-02-21 02:59:46
279,2011-02-21 02:59:46,"Aw dang, that was it. Thanks for solving my problem.
",turadg,2011-02-21 02:59:46
278,2011-02-18 21:42:39,"The Document#text method was broken.  Here are some tests and a fix for it.  I found this issue while looking at the failure message of the have_content matcher, so there is also a test for that. 
",scytacki,2011-02-28 11:57:08
277,2011-02-18 20:12:51,"- Made save_and_open_page spec less brittle
- Allow for more than one save_and_open_page call per second

""Made save_and_open_page spec less brittle"" was prompted by a test failure.

I don't know if the second change is necessary, but it seemed sensible?
",joliss,2011-03-01 22:20:05
276,2011-02-17 23:01:50,"- Added Session#html as alias for Session#body, and some documentation
",joliss,2011-03-01 22:20:13
276,2011-02-18 14:37:56,"Could you add a quick and simple test for this? Would be awesome!
",jnicklas,2011-03-01 22:20:13
276,2011-02-18 18:18:03,"Right, of course.  I've repushed it, adding a test for #html identical to #body:

<S_CODE_TOKEN>
",joliss,2011-03-01 22:20:13
275,2011-02-16 19:37:20,"`Capybara::Driver::Selenium::Node#text` now returns `""""` and `Capybara::Driver::Selenium::Node#visible?` returns `false` if the native driver raises `Selenium::WebDriver::Error::ObsoleteElementError`.

This change address [an issue](http://groups.google.com/group/ruby-capybara/browse_thread/thread/76c194b92c58ecef) where tests attempting to use the has_no_selector helper to verify an element has been removed from the DOM would intermittently fail due to a `Selenium::WebDriver::Error::ObsoleteElementError` complaining about an attempt to access a node which is no longer in the DOM. 
",micahalles,2011-03-06 06:53:52
275,2011-03-05 22:01:03,"(This still applies pretty cleanly on master, but as a general hint, I suggest working against the master branch rather than release branches to make sure that your patches apply cleanly.)
",joliss,2011-03-06 06:53:52
275,2011-03-05 22:53:52,"I've posted about this on the list at https://groups.google.com/d/msg/ruby-capybara/dsGUuSxY7O8/NUXcVsPmPecJ .  I'll close this pull request for now; feel free to reopen (and leave a comment for notification) if you think it's still needed.  (Perhaps you could address my concern [about silently ignoring errors] on the list beforehand, though?  Not sure how Jonas feels about this.)
",joliss,2011-03-06 06:53:52
275,2011-03-08 15:02:49,"Thanks for the heads up! The fixes Jonas mentioned on the list seemed to alleviate our ObsoleteElementError woes.
",micahalles,2011-03-06 06:53:52
274,2011-02-15 19:23:03,"hi, I have about 100 scenarios with javascript and after 90-th I get 

NativeException: java.lang.OutOfMemoryError: Java heap space (Culerity::CulerityException)
      features/profile.feature:390:in `Given I am logged in as ruslan@example.com'

and the tests are failing
",eugenekorpan,2011-03-10 23:23:04
274,2011-02-16 12:27:42,"Which driver are you using, Celerity?
",jnicklas,2011-03-10 23:23:04
274,2011-03-10 23:23:04,"This is a problem with Celerity/Culerity, not with Capybara, closing.
",jnicklas,2011-03-10 23:23:04
273,2011-02-13 22:15:42,"I added `Capybara.save_page` to save the page without opening it, `Capybara.save_and_open_page` calls that method and opens the url it returns. This closes #215 :)
",jeffkreeftmeijer,2011-02-18 14:49:30
272,2011-02-08 14:50:22,"This broke Capybara::Driver::Selenium.new(app, :browser => :firefox).

There's no obvious way to test this right now, since Capybara::Driver::Selenium.new (which is where we could set options) doesn't get called from the test suite.  So I figured I'd rather just submit the fix without a test for now -- hope that's OK?
",joliss,2011-02-09 09:48:04
272,2011-02-08 23:59:19,"This was also fixed here https://github.com/jnicklas/capybara/pull/264

The browser.delete option doesn't work because of the fix for this https://github.com/jnicklas/capybara/issues/issue/200 so I made a compromise of both worlds with my patch.
",yairgo,2011-02-09 09:48:04
272,2011-02-09 01:48:04,"Ah, you are right -- how thoughtless of me. :)  (Closing.)
",joliss,2011-02-09 09:48:04
272,2011-02-09 01:58:07,"Hey I didn't say it was thoughtless of you!! I just saw the othe bug fix first!
",yairgo,2011-02-09 09:48:04
271,2011-02-07 16:41:14,"Two miscellaneous commits.  These don't conflict with the other `:type => :request` pull request; apply in any order.

Removing the fuubar formatter from .rspec is so contributors with failing spec suites can easily run `rake &> rspec.log` -- fuubar prints control characters even when piped.  (It took yours truly a few minutes to figure out that she had to run `rspec -fp spec &> rspec.log` instead).  Anyone who prefers fuubar can just put `--format Fuubar` in their ~/.rspec.
",joliss,2011-02-09 23:54:27
271,2011-02-07 16:42:56,"I've still left the fuubar development dependency in capybara.gemspec, by the way; else `rspec --format Fuubar` won't work.
",joliss,2011-02-09 23:54:27
271,2011-02-07 21:38:35,"Hmm, I really like Fuubar, putting it in `~/.rspec` doesn't work, because then I'd have to add it to _every_ project. I suppose we could ignore `.rspec`, but is it really necessary? You can always override the options by passing --format specdoc, or something.
",jnicklas,2011-02-09 23:54:27
271,2011-02-07 22:13:58,"Regarding fuubar, I guess the ""proper"" way (in order to keep individual developer preferences out of the source tree) would be to have a Bash wrapper function on your system that calls rspec and decides which formatter to use.  That said, I shall not bikeshed, so I've removed the commit.  It's in my 'trash' branch, in case you ever change your mind. ;-)

I've also deleted the note on XPath slowness.  (Perhaps we could benchmark some time if using native CSS instead of converting it to XPath would be faster, provided that it's easy enough to try.  Or not...)

I pushed the changes; please pull? :-)
",joliss,2011-02-09 23:54:27
271,2011-02-09 15:58:32,"Looks good now! Merged.

Regarding using CSS instead of XPath, it would be very difficult to achieve with Capybara's current architecture and probably not worth it for what I assume is a rather small performance gain.
",jnicklas,2011-02-09 23:54:27
271,2011-02-10 11:48:04,"Yeah, I too would've expected the difference in performance to be rather small -- but then I came across http://seleniumhq.org/docs/04_selenese_commands.html , which says: ""Most experienced Selenium users recommend CSS as their locating strategy of choice as it’s considerably faster than XPath and can find the most complicated objects in an intrinsic HTML document.""  But perhaps those ""experienced Selenium users"" just have a crazy amount of CSS/XPath expressions in their tests. ^_^
",joliss,2011-02-09 23:54:27
270,2011-02-07 16:25:05,,joliss,2011-02-07 21:31:45
269,2011-02-05 20:22:36,"Issue: https://github.com/jnicklas/capybara/issues/232
I took the solution for RackTest from https://github.com/jnicklas/capybara/pull/234 (and most of the tests)
and added compatibility for the other drivers.
I added tests only for ""local drivers"" because I couldn't find a simple way to decouple the state which says if the driver should use the port from the server or not.

Any sugestions to improve it or any comments about this solution?
",jbarreneche,2011-04-10 17:29:36
269,2011-02-18 14:57:24,"Sorry for the delay in response. I think one sensible plan would be to use the Heroku app as the app_host, that way we can see it working the same with all drivers. WDYT?
",jnicklas,2011-04-10 17:29:36
269,2011-02-19 03:05:24,"I'm not quite sure if I understand you. The fix I most care about it's the RackTest driver, if you make the tests against heroku will it test the RackTest driver? 
Currently all the drivers are being tested locally (using the server capybara starts), I couldn't make it work with heroku because the idea it's to change the app_host during the test (something useful when you want to use a subdomain) and there's only one domain for that. I think a specific subdomain can be added for free in heroku, with that change also the ""remote"" could be tested (using the tests already written).
One last thing to keep in mind is that I added another action to the test app which is used by the specs and should be uploaded to the heroku app for the tests to work.

Please tell me if something is unclear (I'm not a native english speaker)
Thanks!
",jbarreneche,2011-04-10 17:29:36
269,2011-03-08 21:49:23,"Rather than Heroku, or whichever.
What do you think of having such live tests run against a local VM?
This could be started and configured with `vargant up`.  
Of course this introduces a dev dependency on Vagrant + Chef gems and the VirtualBox application, but at least everything is local.

The side effect is to start to ween people away from thinking that because Rack-Test delivers your app features, it means you are not digging yourself some terrible hole, which you'll only notice late in the piece.  It is a side effect, not the primary intention :)

This would mean that capybara's repo would contain some Chef cookbooks, etc, and a vagrant file, but really not too much for what it buys you.

Thoughts?
",hedgehog,2011-04-10 17:29:36
269,2011-03-08 22:19:17,"No, this is way too complex. People should be able to run the Capybara tests without having to mess around with all this VM setup. We are putting the barrier to entry for working on Capybara _way_ too high with that, and that's a price I'm not willing to pay.

Essentially this is a rather simple problem. It's high on my radar and I know exactly how to do it, I'm just very busy at the moment. I'll get to this eventually, and we'll have well tested consistent behaviour.
",jnicklas,2011-04-10 17:29:36
269,2011-03-08 22:43:37,"Isn't that a strawman?  This concerns developing capybara, not using Capybara.
Of course once some one develops capybara they may of may not carry that practice over to when they _use_ capybara.

finally what is complicated, for a Capybara dev, in:
    gem install chef
    gem install vagrant
    git clone ...capybara
    cd .../capybara/vm
    vagrant up
    cd ..
    cucumber features

I accept there are more gems required for dev's, and getting the config right might take some iterations.
But I think you have conflated capybara devs with capybara users?
",hedgehog,2011-04-10 17:29:36
269,2011-03-08 22:48:10,"No definitely not. Getting devs to enhance and improve Capybara is critical for the well being of the project. I don't want to force them to set up a VM, just so that we can test a rather simple feature, which could easily be tested without all of this.
",jnicklas,2011-04-10 17:29:36
269,2011-03-08 22:49:43,"Sidenote: The Capybara test suite already runs a few tests agains a Heroku app, I have _never_ heard anyone complain about this, and those tests have existed pretty much since the project was started.
",jnicklas,2011-04-10 17:29:36
269,2011-04-10 17:29:36,"We now have consistent behaviour across drivers, and it seems to work pretty well.

https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/current_host_spec.rb

What do you guys think, good enough? I'm closing this issue for now.
",jnicklas,2011-04-10 17:29:36
269,2011-04-10 17:59:24,"Great for me! 
Thanks!!!
",jbarreneche,2011-04-10 17:29:36
268,2011-02-04 19:16:39,"When I do

<S_CODE_TOKEN>

in a test that runs in remote IE, the blur event is triggered on the 'foo' field before the text is filled in. This is problematic because I have validation scripts that run on blur, and they fail because the text hasn't been filled in yet. Maybe this is a WebDriver bug, but I figured I'd ask here first.
",levity,2011-02-05 14:03:16
268,2011-02-05 14:03:16,"Sounds more like a webdriver bug, yes.
",jnicklas,2011-02-05 14:03:16
267,2011-02-04 14:28:43,"Also, improved README.
",joliss,2011-02-04 14:37:52
267,2011-02-04 14:37:52,"Whoops, this was too early.  Don't apply this yet, we should wait for David's comments on the weekend.  I'll resend the pull request if necessary.
",joliss,2011-02-04 14:37:52
266,2011-02-02 16:18:13,"Hello 

I'm facing a problem when using capybara with iframes. When I'm using the steps below:

Given /^que estou logado com usuario ""([^""]_)"" e senha ""([^""]_)""$/ do |login, password|
    visit '/Login.aspx'
    sleep 5
    within_frame('pageFrame') do 
        fill_in 'ctl00$b$txtLogin', :with => login
        fill_in 'ctl00$b$txtPassword', :with => password
        find('imbLogin').click
    end
end

The login page (Login.aspx) is within an iframe (see the html code at the end of this message).  If I remove the ""sleep 5"" statement, the test sometimes ""skip"" the first input control - simply does not fill in this field.

I've included the settings below in my env.rb, but this problem continues to happen:

Capybara.default_wait_time = 30 # seconds

It seems that this settings affects only the high level page, not the frames of my application.
The HTML of the main page of my application is the following:

<frameset onload=""setFrameSource()"" rows=""0%,100%,0%"" border=""0"">
        <frame name=""logoutFrame"" noresize=""1"" unselectable=""1"" border=""0"" frameborder=""0"" style=""margin:0;padding:0;border:0;"" marginheight=""0"" marginwidth=""0""/>
        <frame name=""pageFrame"" border=""0"" frameborder=""0"" style=""margin:0;padding:0;border:0;"" marginheight=""0"" marginwidth=""0""/>
        <frame name=""flashSocketFrame"" src=""FlashSocket.html"" border=""2"" frameborder=""1"" marginheight=""0"" marginwidth=""0""/>
</frameset>

The same problem happens when I'm using the steps below:

When /^clico na opcao do menu ""([^""]*)""$/ do |pageName|
    sleep 5
    within_frame('pageFrame') do
        within(:xpath, ""//div[@class='menuborder_middle']"") do
            click_link pageName
        end
    end

end

I must use the ""sleep 5"" else somtimes (that's weird) the link is not found.

Let me know if you need further information.

Thanks in advance

João Talles
",joaotalles,2011-02-03 00:24:17
266,2011-02-02 16:24:17,"I forgot to mention something important in the first message: I'm using Windows 7, Ruby 1.9.2 and capybara 0.4.1.1.
",joaotalles,2011-02-03 00:24:17
266,2011-02-02 16:40:23,"If I'm understanding this correctly, you're using _actual_ frames, not iframes?

I've never heard of anyone trying to use Capybara to test an app with actual frames, not sure if it even works. Honestly, I have no idea what's going to happen here. Can't really help you :(
",jnicklas,2011-02-03 00:24:17
266,2011-02-02 17:12:40,"Yes, we are using frames.The frame ""pageFrame"" is the one which contains the ""true"" page.
Actually, it's working but I have to use the ""sleep seconds"" workarround. I just would like to know if there is a better solution for this issue.
Thanks
João Talles
",joaotalles,2011-02-03 00:24:17
265,2011-02-01 01:01:36,"- The Rack section is guesswork -- please review!
- I removed a few lines I think don't belong, but please review the patch to make sure:
  -    Capybara.app = MyRackApp
  -    require 'capybara/rails'
  -    require 'capybara/cucumber'
- I verified that the following is true at least as of rspec-rails 2.2 (checked the source):
  
    (Note that if you use the <tt>rspec-rails</tt> gem,
    Capybara is also included in controller, request, and mailer examples.)

Hope this patch is useful!
",joliss,2011-02-02 16:47:18
265,2011-02-02 16:47:17,"Merged, thanks!
",jnicklas,2011-02-02 16:47:18
264,2011-01-31 17:05:48,"Fixing an issue introduced in commit e514f2e99cceb3db5be2a6fef8fdfd9a2cb74e2d for issue 200

After upgrading capybara to 0.4.1.1 and attempting to run our tests, the fix for issue 200 no longer deletes :browser from the options.  This does fix that issue, but options is now passed to Selenium::WebDriver.for with the :browser key still in the options which then throws an argument error.  The code is in Selenium::WebDriver::Firefox::Bridge:18
",yairgo,2011-02-11 00:17:36
264,2011-02-10 16:23:23,"Pull request is applied, and a patch release has been pushed to gemcutter, sorry for the delay!

http://groups.google.com/group/ruby-capybara/browse_thread/thread/3ec66a9f031d139a
",jnicklas,2011-02-11 00:17:36
263,2011-01-28 04:05:12,"Using ruby 1.9.2 with rvm, capybara from git and akephalos (javascript driver for capybara) from my git repo.

The problem comes up when you called show me the page in a cucumber step.  When capybara gets the response body from akephalos it is a utf8 string with its encoding set as ""ASCII-8BIT"".  This causes problems when capybara tries to write the page to a File that is expecting UTF8 because Ruby will try and #encode!(""UTF-8"") the string which raises a conversion error.

This set of specs verifies that a driver is sending back a string that can be safely #encode!(""UTF-8"")    The drivers in the capybara repository do not fail these set of specs but akephalos will (before my changes to fix it).

My reasoning for including these specs in capybara is so all drivers (assuming they use the shared specs) will send back response bodies with the correct encoding.  Otherwise capybara will fail when doing save_and_open_page because of the conversion issue.  This makes the drivers themselves do the right thing instead of cleaning up everything in capybara.

If you want you can do:

<S_CODE_TOKEN>

in a ruby 1.9 console.  ""\xe2\x80\x94"" is the ""&mdash;"" html entity in unicode.  The above code is taking a utf8 string with the converted html entity, forcing it to ""ASCII-8BIT"" which is what akephalos has its response body set to and then trying to encode it back to UTF8.

This may affect capybara-mechanize due to issue https://github.com/jeroenvandijk/capybara-mechanize/issues#issue/12   but I have not yet verified that.
",asceth,2011-02-02 16:55:55
263,2011-02-02 16:55:54,"I'll merge this on good faith, since encodings are a mystery to me, even after reading about them extensively. Seems like the spec is sane, so I'll trust that this is doing something sensible ;)
",jnicklas,2011-02-02 16:55:55
262,2011-01-27 20:02:30,"this is a fix for a bug I encountered while working with selenium-webdriver 0.1.2. it should be self-explanatory with the commit comment and diff.
",levity,2011-02-18 15:02:58
262,2011-02-18 15:02:58,"This has been fixed. Thank you!
",jnicklas,2011-02-18 15:02:58
261,2011-01-24 01:55:19,"The Interwebs say Capybara lacks a built-in way to click ""OK"" for a JS alert or confirm:
http://stackoverflow.com/questions/2828342/capybara-selenium-and-javascript-destroy

I've coded up some simple helpers for my own purposes, and I thought I'd share them with you. I think this or something similar would make a nice addition to the gem.
    # If you do something that triggers an alert, do it inside an accept_js_alert block
    def accept_js_alert
      page.evaluate_script 'window.original_alert_function = window.alert;'
      page.evaluate_script 'window.alert = function(msg) { return true; }'
      yield
      page.evaluate_script 'window.alert = window.original_alert_function;'
    end

<S_CODE_TOKEN>
",jarrett,2011-04-03 16:20:04
261,2011-04-03 16:20:04,"I usually do something similar, but I think for the time being, we'll leave this to the users to handle. Selenium has some other facilities for dealing with alerts which are really nice. If and when the different drivers have settled on a sensible way of handling this we'll revisit it.
",jnicklas,2011-04-03 16:20:04
261,2012-12-19 00:18:21,"@jnicklas Seems like Capybara-webkit and Poltergeist solved this problem by automatic accept of all alerts.

Do you think Capybara should provide alert support by itself? i.e.
`page.alert.confirm` will work like `page.driver.browser.alert.confirm` if driver is Selenium and do nothing if Poltergeist

It will make switching between drivers easier
",abotalov,2011-04-03 16:20:04
260,2011-01-21 20:15:54,"cant do  visit login_url  anymore because the url  (http://subdomain.example.com/login) gets a / prepended onto it and then that is made into a url -  http://www.example.com/http://subdomain.example.com/login
",twalpole,2011-01-21 20:59:12
260,2011-01-21 20:59:12,"Thank you for finding this and reporting it. Sorry for the inconvenience. I've pushed a new point release and yanked the 0.4.1 from rubygems.

More details here: http://groups.google.com/group/ruby-capybara/browse_thread/thread/859df2263580fc02
",jnicklas,2011-01-21 20:59:12
259,2011-01-20 12:55:17,"RackTest driver should retain document order when parsing parameters from form fields.

It doesn't currently which breaks the encoding of complex field names, like array[][value] where the field names are built from different types of input

Fix and failing spec can be found at econsultancy/capybara@ 7df21483fffd47970fb77ec3c8e29ecbbe6779f7
",mocoso,2011-01-21 22:17:14
259,2011-01-21 14:17:14,"Thank you! seems to work very nicely, good job!

It's somewhat easier for me if you put separate features into topic branches, that way I can pull them in individually, and you can get them applied faster ;)
",jnicklas,2011-01-21 22:17:14
259,2011-01-21 14:22:21,"Will do (in future).

Thanks for merging these changes in.

J.
",mocoso,2011-01-21 22:17:14
258,2011-01-19 21:37:55,"This patch adds an option to Capybara to save the HTML-Documents automatically when a Cucumber Scenario fails. This is very handy when developing new features because you always have a reference to the state where your scenario failed.
Another use-case is a CI-Server. It is great to keep the failed HTML-Documents form your CI builds and archive them as artifacts. This way you can always pull up the state where the CI-Server failed.

I changed the involved specs and added a Capybara.save_failed_scenarios option.

Cheers
-- Yves
",senny,2011-03-06 05:49:34
258,2011-03-05 21:49:34,"This has a bunch of conflicts against master, and there's still the implementation issue with the global variable, so I'll go ahead and close this pull request for now -- feel free to repush and reopen, of course.

By the way, I'm actually not convinced that this is a good idea at all (though I'm not the maintainer).  For one, it's plenty of complexity for what I presume to be a fairly peculiar workflow, and then there's the problem of adding a global Capybara option for one specific testing framework.  Yves, if you still care about pursuing this, how about bringing it up on the mailing list?
",joliss,2011-03-06 05:49:34
258,2011-03-06 10:51:36,"I see the problem with the global-variable and the global capybara configuration options just for a single framework. I don't think it's a peculiar workflow tough. Nearly all the times, when a scenario fails it comes in handy to access the html of the failed scenario, without having to rerun it.

Im ok, if this won't be in the capybara gem. I'll just add it to my projects. Since it saved me a lot of time, I just thought it might be of great help for others using capybara and cucumber.
",senny,2011-03-06 05:49:34
258,2011-03-07 00:54:52,"Really?  That's funny, I rarely look at the pages.  (If I do, it's typically in the browser against the app in development mode -- I only look at the static save_and_open_page dump when things go _really_ wrong and I have no idea what's going on. ^^ )  But usually the failure messages tell me enough to know what to implement next.

But in any case, even if it won't be included in Capybara, perhaps you can write up a snippet that people can drop in `features/support` (as opposed to patching the Capybara source) and post it on your blog?  (I'll be happy to let you guest-post on mine if you don't have your own blog.)  I recommend pulling the newest master beforehand though, since there's been some recent improvements to save_and_open_page.
",joliss,2011-03-06 05:49:34
258,2011-03-07 14:10:45,"After considering this a bit, I agree with Jo on this one. It just doesn't seem like this should be part of Capybara. But please do write up that snippet, I think some people might find it very useful.
",jnicklas,2011-03-06 05:49:34
257,2011-01-19 13:39:52,"Fix for issue 213 (https://github.com/jnicklas/capybara/issues/#issue/213)

J.
",econsultancy,2011-01-21 14:14:30
256,2011-01-19 11:52:50,,neerajdotname,2011-01-21 14:08:14
255,2011-01-19 10:22:16,"As discussed in #249. :)
",jeffkreeftmeijer,2011-01-21 16:11:44
254,2011-01-17 19:47:57,"These commits add a new command called 'wait_for_ajax', which executes a block expected to fire off some Ajax requests, and will then block until these requests finish.  I've found that I need something like this since the response time of my asynchronous calls can vary wildly in my test environment. 

Also, there's some stuff I added to 'within_window' to let you switch to a window by title or url.
",mgiambalvo,2011-02-22 23:04:25
254,2011-01-19 10:19:46,"Awesome work! We've been using some javascript hack to get functionality like this. :)
",jeffkreeftmeijer,2011-02-22 23:04:25
254,2011-02-18 15:01:36,"Not so sure about this one. Couldn't you just increase default_wait_time, or even change it for different features (via tags or metadata)?

As for the other change (please send separate pull requests in the future, btw), can you explain the use case for this?
",jnicklas,2011-02-22 23:04:25
254,2011-02-22 15:04:25,"I took your code for the ajax waiting and worked it a bit to make the selenium driver automatically resynchronize. This should fix most of the ""Element no longer attached to the DOM"" issues that have been pissing me off a lot lately. Good job on the pull request!

Unfortunately I didn't take the entire commit, so you have lost attribution in the commit. I've mentioned you in the History file, hope that's okay.
",jnicklas,2011-02-22 23:04:25
254,2011-02-22 18:27:16,"Ah, thanks, glad I could help.

For posterity's sake, my reasoning here was that I have one particular ajax call I want to test.  I know the call is in flight because a ""loading"" div becomes visible.  However, I found that sometimes the request could return before I could check if the div was visible, thus I had a race condition where I may not know if the request was sent yet.  Increasing the wait time wasn't appealing - some of my requests are instant, some take a couple minutes.  Plus, the page could (depending on the test) be the same before and after the request, just not while its in flight.  I wanted a more explicit way to declare ""this action should invoke an ajax request and I need to wait for it to come back"".  

Did you also pull in the window stuff?  Sorry, I can split that out if need be - the case is we have some oauth popup windows with twitter and facebook - I found it much more convenient to refer to them by window title or URL.
",mgiambalvo,2011-02-22 23:04:25
254,2011-02-22 18:58:39,"I didn't pull in the window stuff, if you could make a separate pull request for it that'd be excellent.
",jnicklas,2011-02-22 23:04:25
253,2011-01-17 11:18:02,"https://github.com/jnicklas/capybara/issues#issue/248. :)
",jeffkreeftmeijer,2011-01-17 16:08:04
252,2011-01-14 21:21:34,"Is there any option or plan support fill_in :search, :with => ""blah"" and the XPath consider the email_field, search_field and other html5 especial fields?

Thanks.
",danielvlopes,2011-01-15 09:21:26
252,2011-01-14 22:23:57,"Sorry, could you rephrase that, I don't understand the question.
",jnicklas,2011-01-15 09:21:26
252,2011-01-15 01:21:26,"Sorry, I typed too fast.

Rails3 has support for some new HTML5 fields like email_field_tag and search_field_tag. 

If we use fill_in the XPath.fillalable_fields will consider only text_fields and password_fields and report that this fields can be filled.

What do you think? I should send a patch?
",danielvlopes,2011-01-15 09:21:26
252,2011-01-15 08:51:34,"I'm pretty sure it will consider pretty much any field which appears as a text field in browsers as fillable, check out these specs:

https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/fill_in_spec.rb#L24-30
https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/fill_in_spec.rb#L60-72

It doesn't explicitly mention those two, but I'm pretty sure they should work.
",jnicklas,2011-01-15 09:21:26
251,2011-01-14 01:23:22,"I'm using default Cucumber with capybara with Selenium, but it gives me the following error.

Could not find Firefox binary (os=macosx). Make sure Firefox is installed or set the path manually with Selenium::WebDriver::Firefox::Binary.path= (Selenium::WebDriver::Error::WebDriverError)

My version of Firefox was installed in a different path than specified by Selenium 2.  I got it working by editing cucumber's env.rb, under the includes I added:

require 'selenium-webdriver'
Selenium::WebDriver::Firefox::Binary.path='/Applications/Firefox 3.6.app/Contents/MacOS/firefox-bin'

Is there a better place for these settings?  
",jeremygpeterson,2011-01-14 04:27:49
251,2011-01-14 04:27:49,"Found the problem, I renamed my firefox browser to ""Firefox 3.6"" while testing ""Firefox 4"".  So, renaming the application to  ""Firefox"" it is in the default path expected by Selenium 2.
",jeremygpeterson,2011-01-14 04:27:49
250,2011-01-13 19:27:41,"Hello

I'm using cucumber and capybara for testing a web application. This application contains text with accentuation (e.g.: á, ã, é, õ, etc). The language that is being used is Portuguese. How an I set capybara to work with UTF-8 encoding?

Thanks in advance

João Talles
",joaotalles,2011-01-14 12:24:57
250,2011-01-13 23:10:46,"I've never had a problem with UTF-8 pages.
",jnicklas,2011-01-14 12:24:57
250,2011-01-14 12:24:56,"My fault. I think cucumber is my problem.
Thanks once more
João Talles
",joaotalles,2011-01-14 12:24:57
249,2011-01-13 18:07:58,"This is a very subtle bug (I think) but it threw me for hours as a new user.

<pre>visit ""my_controller/page""</pre> 


works fine in the simulated browser.  

When you put the '@javascript' tag for your feature to load it in firefox, it will try to load  ""/page"" in the browser, shaving off the controller

I fixed it with a leading slash.

<pre>visit ""/my_controller/page""</pre> 


A very minor bug and not a big deal, but it seems to me like they should work the same in simulated and real browser and the simulated browser is correct.
",kennystone,2011-01-21 20:43:46
249,2011-01-21 20:43:46,"Revert &quot;Make sure the paths passed to visit are prefixed with slashes (closed by 5c251671cb5330f948f7af8fa64b898bcf35f9bb)&quot;

This reverts commit 7f10a7485397c15883cae955fbe752f6606ef2c7.
",jnicklas,2011-01-21 20:43:46
248,2011-01-12 20:07:37,"setting up new environment (rails 3), and attempting to use save_and_open_page resulted in error ""Sorry, you need to install launchy to open pages""

the actual situation was that launchy was installed but not specified in my Gemfile.  I think for new users (especially those new to bundler), they could use a hint here.
",afex,2011-01-17 16:08:02
248,2011-01-13 08:50:34,"While I agree this message could be improved, I don't think Capybara should assume you're using Bundler. It should, in my opinion, not have a check to see if you're using Bundler either. That's not Capybara's business.

The problem it runs into here is that it can't require Launchy. Instead of saying it should be |installed, it might say something like ""Launchy should be available"" or something.

What do you think? :)
",jeffkreeftmeijer,2011-01-17 16:08:02
248,2011-01-13 10:04:59,"yeah agreed.  just enough to remind them :]
",afex,2011-01-17 16:08:02
248,2011-01-17 16:08:02,"Add a more accurate error message for the Launchy LoadError (closed by a04e0b4d1d75811fae440b8579a4586c5b7c299e)
",jeffkreeftmeijer,2011-01-17 16:08:02
247,2011-01-12 10:20:02,,dereke,2011-02-10 08:29:03
247,2011-01-31 21:51:25,"This was changed because of https://github.com/jnicklas/capybara/issues/closed#issue/200 I've added a fix that solved both cases here : https://github.com/jnicklas/capybara/pull/264
",yairgo,2011-02-10 08:29:03
247,2011-02-09 23:37:16,"Please accept this pull request and release soon. 
",techwhizbang,2011-02-10 08:29:03
247,2011-02-10 08:29:03,"Please apply yairgos pull request as it is a better fix than this one.
https://github.com/jnicklas/capybara/pull/264
",dereke,2011-02-10 08:29:03
246,2011-01-10 15:36:04,"Hello,

I'm doing acceptance testing in a rails project with capybara (and [akephalos](https://github.com/bernerdschaefer/akephalos) as the driver).
My applications is heavily using [backbone](https://github.com/documentcloud/backbone)'s controllers. Therefor all my URIs look like the same : `/#/path/after/the/hash`

I write basic tests for now :

<S_CODE_TOKEN>

However it seems the page is not refreshed well when I do ""visit"".
The first request works well (the test passes correctly).
But any other one fails because I guess, as only the hash has changed, the page is not really refreshed.

I guess the problem could either come of the `visit` method, which should force the page to reload even if only the hash has changed.  
Or maybe I would just need to reset the session after every request ? But I've tried doing a `Capybara.reset_sessions` without any success.
",dmathieu,2011-01-11 02:35:34
246,2011-01-10 18:35:34,"Capybara and selenium both assume that if you just changed the hashtag you didn't actually want to refresh the page, much like an actual browser would.

Where this becomes really tricky is that reset_sessions actually won't do anything about which page you're currently on, so the first scenario might affect the following scenarios. I've got no real good way of fixing this except for throwing in a `visit('/')` before navigating to whatever hashtag URL you want.

I don't really consider this a bug, since in most cases what you're seeing is actually the desired/expected behaviour, and is consistent with the behaviour of all web browsers. I realize that it's not exactly ideal in your case though. I'm closing this issue, but please feel free to come with suggestions how your kind of use case can be simplified.
",jnicklas,2011-01-11 02:35:34
246,2011-01-11 17:18:19,"Even though you don't refresh the page, you change the hash.
If, in my tests, I display the value of the current hash, it never changes for the browser.
Even if the page is not reloaded, the page should know the hash has changed.
",dmathieu,2011-01-11 02:35:34
246,2011-01-11 19:02:31,"Now I'm not following, sorry. Could you explain that again?
",jnicklas,2011-01-11 02:35:34
246,2011-01-12 08:55:56,"Even though the page is not reloaded, the value of `window.location.hash` for the interpreter should be changed. It is not. It always remains the same when hitting visit.
It's only changed whenever we click on a link.
",dmathieu,2011-01-11 02:35:34
245,2011-01-10 13:59:36,"We just tried to write a ""run once and throw away script"" with capybara. Since we don't need any rspec or cucumber our test.rb script looked like this:

<S_CODE_TOKEN>

This script is working with 0.3.9 but not with 0.4.0 and 0.4.1. 

<S_CODE_TOKEN>

Our normal capybara + rspec setup is working as expected. Thanks for that!
",weidenfreak,2011-01-11 00:11:08
245,2011-01-10 16:11:08,"It's working inside a class, so I close this issue.

<S_CODE_TOKEN>
",weidenfreak,2011-01-11 00:11:08
245,2011-01-10 18:39:16,"I think I should probably put ""DON'T INCLUDE CAPYBARA IN THE GLOBAL NAMESPACE"" in giant fat letters in the README somewhere ;) You're not exactly the first to run into this problem.

Even better: I'll have to investigate if it's possible to raise an error if someone tries to do this.
",jnicklas,2011-01-11 00:11:08
244,2011-01-09 22:50:24,"This is particularly useful for testing interactions between two sessions. See my [Multiple Sessions in Cucumber & Selenium](http://tristandunn.com/2010/10/21/multiple-sessions-cucumber-selenium.html) post for an example.
",tristandunn,2011-01-28 16:08:54
244,2011-01-10 06:52:57,"Very nice idea! Maybe we could implement it slightly different though. If we have an attribute called something like `session_name` we could use that in what you called `session_namespace`, that way we don't always have to use a block to switch sessions, which is useful for example for cucumber. E.g.:

<S_CODE_TOKEN>

Or something like that. `Capybara.in_session` would then only be syntactic sugar on top of this implementation.

What do you think?
",jnicklas,2011-01-28 16:08:54
244,2011-01-18 04:27:13,"Sounds reasonable to me. I'll update it this week. Thanks for the feedback.
",tristandunn,2011-01-28 16:08:54
244,2011-01-26 14:31:15,"Are the latest changes closer to what you were thinking?
",tristandunn,2011-01-28 16:08:54
244,2011-01-26 21:49:30,"This is starting to look really nice! I don't really see the need for the if-statement in current_session though, couldn't we just always include the session_name in the session_namespace?
",jnicklas,2011-01-28 16:08:54
244,2011-01-26 21:57:52,"I noticed that when I commented. I think I originally left it so it wouldn't change the default namespace, but I suppose it doesn't matter that much. I'll update it soon.
",tristandunn,2011-01-28 16:08:54
244,2011-01-28 05:48:21,"Definitely looking nice now.
",tristandunn,2011-01-28 16:08:54
244,2011-01-28 08:10:18,"Thank you so much! Just pushed it. Very good work, and thank you for keeping at it when I was being whiny ;)
",jnicklas,2011-01-28 16:08:54
244,2011-01-28 22:05:41,"Thanks for merging.
",tristandunn,2011-01-28 16:08:54
243,2011-01-08 02:36:03,"rack escape uses '/u' flag - https://github.com/rack/rack/blob/master/lib/rack/utils.rb#L16
but capybara to_binary method forces utf8 hidden field value to '\xE2\x9C\x93'. 

because of this escape method fail with 'incompatible encoding regexp match (UTF-8 regexp with ASCII-8BIT string) (Encoding::CompatibilityError)'
",slbug,2011-05-19 16:18:09
243,2011-01-09 10:33:26,"Ohh god, not the encoding issues again. Sorry, I know nothing of this stuff. Please provide a patch and I'll take a look, but I'm afraid I can't help you with this.
",jnicklas,2011-05-19 16:18:09
243,2011-01-09 16:41:47,"i'm not sure if my patch won't break anything, but it works for me. just add one line in to_binary method. 

<pre>
def to_binary(object)
  return object if Rails.version.to_f >= 3.1
  #rest code
end
</pre>
",slbug,2011-05-19 16:18:09
243,2011-01-10 06:55:05,"Hmm, I don't think that's the right way. We want to do something that works universally, and we definitely don't want to code anything about Rails into Capybara.
",jnicklas,2011-05-19 16:18:09
243,2011-02-13 01:51:24,"Yep, on rails 3.1 here and having same issue fwiw. I'm just bundling against a locally hacked capyabara for the time being. Hope to have a sec to think more about this, but I'm in the same boat as you jonas--just don't know much about this stuff. 
",jackdempsey,2011-05-19 16:18:09
243,2011-04-10 18:00:45,"I've made some headway on this issue. I recently encountered it myself, and tried to figure it all out. Here's how it is now, as best as I can figure:
1. Capybara gets a UTF-8 string as a param, that string contains a multibyte char (say `å`)
2. Capybara forces this string into binary encoding, essentially leaving it unencoded
3. Capybara passes this string into Rack-Test
4. Rack-Test tries to escape the string via Rack::Utils.escape
5. Rack::Utils tries to find all non-alphanumeric characters and URL encode them, it uses a UTF-8 regexp for this
6. Matching the UTF-8 regexp against the binary string fails, probably because Ruby can't figure out what the hell to do with the unencoded `å`.

So this presents a pretty tricky problem. The idea up until now has been that, since a browser would not be sending the strings in a specific encoding, and instead it would be up to the framework to figure out how they are encoded, Capybara has stripped off all encodings. However, since rack-test is trying to escape the params it gets confused by a string that is seemingly encoded incorrectly.

I'm not sure that rack-test is doing something wrong here, though it seems that using the UTF-8 regexp is just asking for trouble honestly, what if someone sends in a string with a _completely_ different encoding, surely that would break stuff?

Is Capybara doing the rick thing? Is rack-test? Shit, I have no idea :(
",jnicklas,2011-05-19 16:18:09
243,2011-04-10 21:00:32,"Actually, a browser _would_ be sending the strings in a specific encoding -- either the page encoding or that specified by the `accept-charset` attribute of the form. This is important, because the percent-encoding done for application/x-www-form-urlencoded is sensitive to the encoding of the form data: for each non-alphanumeric character, take the bytes representing that character in the desired encoding, and percent encode each of them.

This implies two things:
- `Rack::Utils.escape` must support strings in any encoding. ([Here's how.](http://stackoverflow.com/questions/1942148/ruby-1-9-regular-expressions-with-unknown-input-encoding))
- Capybara should pass along the string in its existing encoding, rather than forcing a binary encoding.

Most of the time, folks will only be interested in testing with ASCII or UTF8 strings. But both Capybara and Rack should support other encodings as well -- that's where the above points matter.

So it looks likes there's bugs on both sides.
",jfirebaugh,2011-05-19 16:18:09
243,2011-04-10 22:28:55,"Agreed that the browser would send them in a specific encoding, but they would not be tagged as such in Ruby, until the server figures out what the proper encoding is, no? That is, the Rack server would have to work out what kind of encoding has been submitted and mark the strings sent in as encoded in that encoding.

If Capybara already marks the strings as UTF-8 encoded, that is not how a browser would behave (they know nothing about Ruby after all, and in the end only send binary data).

Or am I wrong about this? My undestanding of this whole issue is rather vague ;)
",jnicklas,2011-05-19 16:18:09
243,2011-04-10 22:43:36,"[Here's the spec](http://dev.w3.org/html5/spec/Overview.html#url-encoded-form-data).

Think of URL-encoding as being a function of text in a particular encoding. Since it operates at the byte level, the output depends on both the text and the encoding. Ruby strings conveniently carry their encoding along with them, so the natural interface for the URL-encoding function in Ruby is to take a single string parameter. But it does need to know the encoding in order for it to do its job correctly; we can't go stripping the encoding off beforehand (which is what forcing a binary encoding is essentially doing).

It's true that the original encoding can't be reconstructed solely from the URL-encoded bytes sent over the wire. The server needs to know what the original encoding was somehow. Typically it uses the charset from the request's content-type header, or it might assume a fixed encoding in situations where that's reasonable (e.g. if it serves all the forms with accept-charset=utf-8 [modulo browser bugs that the Rails ""snowman"" is meant to solve]).
",jfirebaugh,2011-05-19 16:18:09
243,2011-04-10 23:14:56,"Here's my pull request for Rack: https://github.com/rack/rack/pull/140

Want me to fix the Capybara side too?
",jfirebaugh,2011-05-19 16:18:09
243,2011-04-11 03:39:45,"I encountered this issue today and ended up with the same CGI.escape fix as @jfirebaugh down in Rack::Util. 
",mculp,2011-05-19 16:18:09
243,2011-04-11 08:07:34,"@jfirebaugh: that makes perfect sense. I think I understand now. If you'd like to fix the Capybara side of this issue, that'd be fantastic, and maybe we can figure this out once and for all.
",jnicklas,2011-05-19 16:18:09
243,2011-04-25 09:12:00,"@jfirebaugh: any progress? if you don't have time to fix this, could you explain what you intended to change? Really want to get this fixed.
",jnicklas,2011-05-19 16:18:09
243,2011-04-25 18:15:30,"The capybara side of the fix is simply to remove `Capybara::Driver::RackTest#to_binary` and all its usages.

However, that depends on the bug being fixed Rack. If it isn't, you could either get an encoding warning (with Rack 1.2.2) or the incompatible encoding exception (with Rack master if you pass non-UTF8 encoded strings). I'm not sure what to do about that, nor what the timeline is for a new Rack release.
",jfirebaugh,2011-05-19 16:18:09
243,2011-05-16 18:20:28,"What's the status of this.  I'm trying to move an app to Rails 3.1 beta and haver run into it.

I can't tell if the current rack has a variant of @jfirebaugh's pull request. I see that the pull request was accepted but the code looks a bit different.
",rubyredrick,2011-05-19 16:18:09
243,2011-05-16 18:26:06,"To answer part of my own question.

I monkey-patched  Capybara::Driver::RackTest#to_binary to always just return it's argument, but I still am getting the timeout.  So, I guess not.  Feels like I might have to temporarily back out of upgrading to rails 3.1 for this app.
",rubyredrick,2011-05-19 16:18:09
243,2011-05-16 18:27:13,"Rack 1.3.0 beta includes a fix (a followup to my initial pull request). Has anyone tested capybara with it yet? (I haven't had a chance.)
",jfirebaugh,2011-05-19 16:18:09
243,2011-05-19 16:21:49,"After going through this once again, it seems that the reason we originally added to_binary was just a hack around the fact that Rack was doing something inherently broken. The issue seems to be fixed in Rack master and everything works fine under the Rack 1.3.0.beta.

I've removed to_binary and this should fix the issue.

So for the time being people will have to upgrade to the latest Rack on 1.9. I thought about some kind of backwards compatible fix, but I just couldn't figure out how to do it :(
",jnicklas,2011-05-19 16:18:09
243,2011-06-27 16:40:21,"I tried to upgrade my Rails 3.0.9 app to Rack 1.3, but both Rails and Rspec-Rails both claim to require Rack 1.2.6, although I don't see it explicity listed in rspec-rails. Has anyone else run into this?
",jschairb,2011-05-19 16:18:09
243,2011-06-27 19:08:58,"@jschairb: that is the reason we did not put in a dependency on Rack 1.3. You'll probably have to upgrade to Rails 3.1 in order to dim the warnings.
",jnicklas,2011-05-19 16:18:09
243,2011-06-28 01:09:02,"@jnicklas thanks for the response!
",jschairb,2011-05-19 16:18:09
243,2011-09-15 17:26:22,"In the meantime, if you can't update to rack 3 b/c you don't want to upgrade to rails 3.1, you can put this in an initializer or in a support file:

<S_CODE_TOKEN>

<3
",mischa,2011-05-19 16:18:09
243,2012-02-22 10:23:01,"@mischa I had to add a couple of lines to your fix

<S_CODE_TOKEN>
",remen,2011-05-19 16:18:09
242,2011-01-07 15:51:46,"Hi Jonas,

I added a link to the RubyBindings page on the Selenium wiki. People asking the same questions over and over about things that are explained there.

Jari
",jarib,2011-01-09 18:32:15
242,2011-01-09 10:32:17,"Pushed, thanks!
",jnicklas,2011-01-09 18:32:15
241,2011-01-07 00:04:16,"After migrating from version 0.3.9 to 0.4.0, I had some specs fail because the Capybara::Document::Class is being returned when I call Document (which should reference my ActiveRecord::Base::Document).

The workaround is to de-namespace document (::Document), but this collision should either be fixed or noted in the documentation to beware of using class names which match descendants of the Node module.
",apolzon,2011-04-11 08:10:30
241,2011-01-09 10:31:13,"Huh, intersting. I guess the fix for this is to not include the entire Capybara module and instead Capybara::DSL or something. IIRC Capybara::Document has been renamed to Capybara::Node::Document, so it likely won't be a problem for you in the future, but still, Capybara shouldn't add random classes to your namespace.
",jnicklas,2011-04-11 08:10:30
241,2011-04-11 08:10:30,"Closed by ef3a4d6c25e55f94bd87b3844bf22be8a0da788d
",jnicklas,2011-04-11 08:10:30
240,2011-01-06 11:10:56,"I got into the problem of trying to use some rails assert methods, but they require @request to be an `ActionDispatch::Request`. 

As at the point of the test @request seems to be unused, I just search for the underlying `ActionDispatch::Request` used by capybara and put it into @request. Like this:

<S_CODE_TOKEN>

Now I can use methods like assert_template, and everything seems ok. 

<S_CODE_TOKEN>

I guess everything should work fine, until the actual route to the request `page.driver.request.env['action_controller.instance'].request` changes. 

The question: Anyone knows if capybara will always place the request on the same place?

Thanks
",rubencaro,2011-01-09 10:26:07
240,2011-01-09 10:26:07,"This will only work under rack-test, other drivers do not have access to the request object, which is why we don't have a request object in Capybara (or a response object for that matter).

Also, Capybara is an integration testing framework. If you need to test which template is used, use a unit test.
",jnicklas,2011-01-09 10:26:07
239,2011-01-05 21:55:36,"I am using capybara with selenium testing internet explorer and have found an unfortunate behavior.

When I attempt to click on a button through selenium when that button is not in the visible area (for example: if it is down far enough to have to scroll) selenium will find the button but will not click it.

We have found that we can scroll down to the element using an element id and executing some javascript, but this is not a desired solution.

The selenium driver has a focus method located on line 212 of file selenium-client-1.2.18/lib/selenium/client/legacy_driver.rb

Questions:
1. is there a method in capybara to delegate to the selenium focus method?
2. is there a better way to handle clicking a button that is not in the viewable area in IE using selenium?
",coffeencoke,2011-03-10 23:28:04
239,2011-01-09 10:20:40,"That's weird, it should work to click a button even if it is visible in the viewport. (It won't work however if the button is actually hidden via display:none).
",jnicklas,2011-03-10 23:28:04
239,2011-01-11 16:18:48,"It is indeed.  I put a ticket into selenium and have not heard back from them yet.  

http://code.google.com/p/selenium/issues/detail?id=1165&q=matt&colspec=ID%20Stars%20Type%20Status%20Priority%20Milestone%20Owner%20Summary

However it would still be nice to have support to invoke focus for selenium.  Right now we have in our cucumber steps ""And I scroll to #some_anchor_tag"" which we really want to get rid of.

If I get some time I'll put together something to reproduce it.
",coffeencoke,2011-03-10 23:28:04
239,2011-03-10 23:28:03,"Closing this for now. If you do come up with a solution, please send a pull request!
",jnicklas,2011-03-10 23:28:04
238,2011-01-03 13:14:30,"After updating from 0.3.9 to 0.4.0 a line such as 
    And I should not see ""Foo"" within ""li""
in a Cucumber feature will throw a `Capybara::ElementNotFound`
Exception in my setup. The element is btw. definitely existing.

— Cheers!
",polarblau,2011-01-03 14:14:30
238,2011-01-03 14:14:30,"Uups, gave up too qickly: http://groups.google.com/group/ruby-capybara/browse_thread/thread/b129067979df21b3
",polarblau,2011-01-03 14:14:30
237,2011-01-02 14:19:55,"Hi, I'm using Cucumber+Capybara+Selenium to test the app that relies on HTTP Basic Authentication. There is a way to use this kind of auth by calling page.driver.basic_authorize(user, pass) method.

But when I mark the Scenario with @javascript tag (enabling Selenium driver) I get an error:
    undefined method `basic_authorize' for #Capybara::Driver::Selenium:0x000000041ea880 (NoMethodError)
",astyagun,2011-01-09 18:16:22
237,2011-01-09 10:16:22,"You're accessing a private API and calling through to a method which is specific to the rack-test driver. Selenium doesn't support basic authentication other than through the URL afaik, which is why we don't have an API for it in Capybara in the first place.
",jnicklas,2011-01-09 18:16:22
237,2011-01-11 16:30:01,"It's a pity. It would be nice to have a cross-driver way of using basic auth.

But, anyway, I solved the problem in my case by using URL to identify current user and session to persist current user between requests (when Selenium is active only).

Thanks for the reply.
",astyagun,2011-01-09 18:16:22
236,2011-01-01 11:46:37,,josevalim,2011-01-01 17:35:06
235,2010-12-31 01:50:59,"When I follow a link, I get the following error:

<S_CODE_TOKEN>

at `features/step_definitions/web_steps.rb` line 34:

<S_CODE_TOKEN>

Environment:
- ruby 1.9.2 p136
- REE
- rails 3.0.3
- rack driver
- cucumber 0.10.0

Affected versions:
- 0.4.0
- master

Not affected:
- 0.3.9
",iain,2010-12-31 16:38:17
235,2010-12-31 16:38:17,"This is a duplicate of #156. It's a bug in cucumber-rails. Upgrade to 0.4.0.beta.1 and later or remove `require ""cucumber/rails/capybara_javascript_emulation""` from env.rb.
",jfirebaugh,2010-12-31 16:38:17
234,2010-12-26 05:19:06,"Issue: https://github.com/jnicklas/capybara/issues/232

Thread discussing this: http://groups.google.com/group/ruby-capybara/msg/5f9a726bc4de0b7d

I closed the previous pull request that I made because it was coming from my personal master branch of Capybara, instead of a feature branch: https://github.com/jnicklas/capybara/pull/233
",remi,2011-04-10 17:30:06
234,2010-12-26 05:21:49,"Ignore the link to issue #232 ... When I created the pull request, this issue was automatically created.  I didn't see an option to link the pull request to an _existing_ issue?
",remi,2011-04-10 17:30:06
234,2011-01-09 09:58:28,"Sorry for the late reply, I've been on holiday. I like this in general, however I think the most important thing to get out of this patch is to get _consistent_ behaviour across drivers. Considering that I think that the specs for this should be somewhere in the session specs, so that they are shared across all drivers. This way we can be sure that the behaviour in rack-test is consistent with the behaviour in other drivers.
",jnicklas,2011-04-10 17:30:06
234,2011-01-27 14:39:22,"We really need this for our app (multiple domains).  Is there a way to get this working on the latest version of capybara? We're currently using remi's fork.
",jfernandez,2011-04-10 17:30:06
234,2011-01-27 15:08:38,"I'll merge as soon as my concerns I outlined above are fixed. That being said, you most likely don't actually _need_ it. Afaik there is nothing you can complish with this patch you can't already do just by navigating to a fully qualified URL.
",jnicklas,2011-04-10 17:30:06
234,2011-01-27 15:16:54,"The problem that I encountered when visiting the full URL, was that redirects after submitting a form would not use the domain name.  This was with the version of capybara that remi forked, not sure if it has been fixed in the latest 0.4\* release
",jfernandez,2011-04-10 17:30:06
234,2011-02-02 15:39:30,"Also, I use: 

<S_CODE_TOKEN>

In order to have working Selenium stories. I wish the RackTest driver would pick this up. 
",mlangenberg,2011-04-10 17:30:06
234,2011-02-07 23:14:09,"I forgot to comment in this pull (shame on me)...
I took the solution from remi in rack-test and added a fix to work in a similar way with other drivers (Remi: I didn't branch from your commits, as I was testing the idea, but if you want I can branch from this commit - as you are the real author of the fix for rack-test-). 
I added tests for all the drivers which are running locally (ie. not driving the heroku page)
The pull is here:
https://github.com/jnicklas/capybara/pull/269
",jbarreneche,2011-04-10 17:30:06
234,2011-04-10 17:30:18,"This is now fixed, thanks guys!
",jnicklas,2011-04-10 17:30:06
233,2010-12-24 20:13:43,"Issue: https://github.com/jnicklas/capybara/issues/232

Thread discussing this: http://groups.google.com/group/ruby-capybara/msg/5f9a726bc4de0b7d

I'm not sure if this change will fix what everyone else wants, but it probably will?  This was enough for me to write specs against my own app which uses different subdomains.
",remi,2010-12-26 05:14:22
233,2010-12-26 04:53:38,"Capybara::Driver::RackTest calls the native get/post/put/delete Rack::Test::Methods from 2 places, #process and #submit.  The previous commit added Capybara.app_host support to #process.  This commit adds support to #submit too (so forms post to the appropriate host)

https://github.com/remi/capybara/commit/494df23d75a77ddf26adb76acbf9e76f28a2b672
",remi,2010-12-26 05:14:22
233,2010-12-26 04:55:44,"As you can see from comments left on the latest commit and on the issue, I missed 1 of the places that Capybara::Driver::RackTest calls the Rack::Test::Methods methods (#submit).  The second commit fixes this so forms now post to the appropriate host.
",remi,2010-12-26 05:14:22
233,2010-12-26 05:14:22,"Forgot to make a feature branch for pull request ... closing.  Will make a new pull request coming from a new branch.
",remi,2010-12-26 05:14:22
232,2010-12-24 20:09:59,"Setting Capybara.app_host does not have any effect on the HTTP_HOST used in the Rack-Test request.

More information can be found in this thread in the Capybara google group: http://groups.google.com/group/ruby-capybara/msg/5f9a726bc4de0b7d
",remi,2010-12-26 05:20:51
232,2010-12-24 20:14:30,"Pull request has been sent.  Diff: https://github.com/remi/capybara/commit/1383d7e928070e1872826d72ed43de35d520d45c
",remi,2010-12-26 05:20:51
232,2010-12-26 05:20:51,"Ugh, I'm not used to the new Pull Request system.  I didn't know that it makes an issue.  I didn't see a way to attach an existing issue instead of making a new one?  So I'm closing this.
",remi,2010-12-26 05:20:51
231,2010-12-23 03:32:00,"This provides a 10% speed improvement on selenium_driver_spec.rb. The improvement would be greater on suites that use Capybara.ignore_hidden_elements = true.

Would you accept it, properly documented and tested, of course?
",jfirebaugh,2011-01-01 17:37:08
231,2010-12-23 03:57:28,"Another potential approach is to have #all return a lazy Enumerator rather than an Array. That would cover cases like `all(selector).first` in user code as well.
",jfirebaugh,2011-01-01 17:37:08
231,2010-12-23 09:33:50,"Sounds good to me!
",jnicklas,2011-01-01 17:37:08
231,2011-01-01 11:45:44,"+1. Yield a good improvement here as well!
Also, I have found has_content to be very slow. I will provide a patch to improve it as well soon.
",josevalim,2011-01-01 17:37:08
231,2011-01-01 17:37:08,"Cool, I will push this (the #first addition) when completed.
",jfirebaugh,2011-01-01 17:37:08
230,2010-12-22 20:43:15,,jfirebaugh,2010-12-23 05:04:33
230,2010-12-22 20:57:09,"You can push it yourself now, I've given you commit access. Please run any API breaking changes or large additions by me, but otherwise feel free to push freely.

Thank you for helping out and contributing!
",jnicklas,2010-12-23 05:04:33
230,2010-12-22 21:06:37,"Awesome, thanks!
",jfirebaugh,2010-12-23 05:04:33
229,2010-12-22 02:32:36,"I am currently using Cucmber with capybara to test uploading of files to a website (using paperclip on the server side). These files have Japanese Kanji in them and I have to do processing based on the names 

Once thing I have to do is extract a number using /\d+/.match(filename)

Now this works when I test manually but fails when I use cucumber / capybara. Further investigation leads me to the fact that when I test manually with a browser the filename variable in the code contains:

<S_CODE_TOKEN>

Which is the correct name however when I look at the same variable called during cucumber testing the filename is:

<S_CODE_TOKEN>

Which is obviously wrecking the regex (It matches the first 5 in %E5). I am not sure if this is a cucumber or capybara issue (Or if I am missing something obvious), any pointers would be much appreciated.

This is being tested on a Kubuntu linux 10.04 64bit installation with Ruby 1.8.7, Rails 2.3.5, Cucumber 0.8.5 and Capybara 0.3.9
",rurounijones,2012-01-03 13:42:45
229,2010-12-22 15:29:57,"Unfortunately my grasp of character encodings is very weak. It sounds like a bug. LEt me know if I can help in tracking it down somehow.
",jnicklas,2012-01-03 13:42:45
229,2010-12-27 00:37:30,"If you could give me a pointer to the code that simulates the file uploading that would be uesful.
",rurounijones,2012-01-03 13:42:45
229,2011-01-04 01:37:35,"Well the problem isn't in 

<S_CODE_TOKEN>

So I assume the problem lies in the driver somewhere. I assume the default driver is rack/test right?
",rurounijones,2012-01-03 13:42:45
229,2011-01-04 01:51:08,"I also cannot find any problems with the params(button) method which is called during form submit. I am at a bit of a loss here now. debugger commands in the rack-test gem itself do not appear to be called.
",rurounijones,2012-01-03 13:42:45
229,2011-01-28 06:05:30,"The filename you are seeing is the the original filename escaped for http use (forget correct terms) and it is broken down into bytes.  If you take the first three bytes of the filename in the variable ""%E5%BA%97"" and do  ""\xe5\xba\x97"" you get ""店"".  However this is in a 1.9 irb session... in 1.8.7 I get ""\345\272\227"".  You can try CGI.unescape(filename_you_are_getting) but I'm not sure if the regex will properly match still.
",asceth,2012-01-03 13:42:45
229,2011-01-31 05:58:28,"Aha, thank you, I shall look into it.
",rurounijones,2012-01-03 13:42:45
229,2011-05-19 16:27:02,"Can you try this with the latest Capybara and Rack >= 1.3.0.beta? I think this should be fixed now.
",jnicklas,2012-01-03 13:42:45
229,2011-05-20 09:22:52,"I will be able to look at it early next week hopefully. Thanks for the update.
",rurounijones,2012-01-03 13:42:45
229,2012-01-03 13:42:45,"Closing this, should be fixed.
",jnicklas,2012-01-03 13:42:45
228,2010-12-15 13:09:07,"<S_CODE_TOKEN>

When moving to Cucumber 0.10.0 I had the same errors within my env.rb file. As there is no Cucumber version requirement in Capybara Bundler didn't resolve this. Dropping back a version helps.
",sorentwo,2010-12-15 21:35:43
228,2010-12-15 13:35:43,"Nevermind. Akephalos is the culprit here. Conflicting dependencies in the triangle of Capybara, Cucumber, Akephalos and Evergreen.
",sorentwo,2010-12-15 21:35:43
228,2011-01-31 16:10:49,"@sorentwo have you resolved this somehow?
",dombesz,2010-12-15 21:35:43
228,2011-01-31 16:44:19,"Yes, but it is Akephalos specific. Check out my fork if you like: https://github.com/sorentwo/akephalos

I should really open a pull request for it bernerdschaefer's branch, but he hasn't updated since late November.
",sorentwo,2010-12-15 21:35:43
227,2010-12-09 23:01:16,"This would allow us to scope to visible elements, since css :visible selectors don't work with certain drivers.
",dlee,2010-12-22 15:15:13
227,2010-12-22 15:15:13,"Within now accepts same args as other finders. closed by 96782a0b223b23b0ce24daf1772d50711d659d86
",elabs,2010-12-22 15:15:13
226,2010-12-08 21:41:31,"The example code was for #uncheck, not for #select.  This fixes it.
",myronmarston,2010-12-10 14:55:40
225,2010-12-07 21:42:16,"Anytime I try to use ""Then show me the page"" in Cucumber, I get this error.

Can't convert Pathname to String
",ryanbillingsley,2010-12-22 14:54:07
225,2010-12-22 14:54:07,"I think this is fixed.
",jnicklas,2010-12-22 14:54:07
224,2010-12-06 08:02:52,"When using Capybara::Driver::RackTest, submitting a form which has an 'enctype' value of 'multipart/form-data', and which contains an empty file field, causes the CONTENT_TYPE header to be set by Rack::Test to x-www-form-urlencoded.  This prevents Rack from being able to recognize and remove empty file fields from incoming request params, since it requires that the content type in that case to be multipart/form-data.

This pull request is fully tested, and is a good first step towards a more standardized behavior in these cases.  RFC1867 does not explicitly state that a form's 'enctype' should be honored by clients when provided by a system, but I think that it's a reasonable assumption by a system that clients will honor provided request parameters like 'enctype'.  This assumption is supported by all major browsers.
",ryankinderman,2010-12-22 22:48:00
224,2010-12-14 14:26:15,"I'm just wondering whether this will be making into core?
",tsdbrown,2010-12-22 22:48:00
224,2010-12-14 15:22:14,"I haven't heard anything back yet.
",ryankinderman,2010-12-22 22:48:00
224,2010-12-22 14:48:23,"Sorry for the delay, this is now pushed.
",elabs,2010-12-22 22:48:00
223,2010-12-05 12:40:22,"I have a feature 
    @wip
    Scenario: Cancel user account
       Given I am an authenticated user
       And I am on the edit user credentials page
       Then show me the page

the link is this one :  ( standard Rails delete ... with js confirmation)
    <a href=""/Users/yves/Developpement/Projects/MONGODB/videoseve/public/users?locale=en"" data-confirm=""Are you sure?"" data-method=""delete"" rel=""nofollow"">Cancel my account</a>

trying to follow the link raises an error :
    @wip
    Scenario: Cancel user account
    Given I am an authenticated user
    And I am on the edit user credentials page
    #Then show me the page

When I follow ""Cancel my account"", it raises an error
    When I follow ""Cancel my account""          # features/step_definitions/web_steps.rb:33
    undefined local variable or method `node' for #<Capybara::Driver::RackTest::Node:0x000001027e9818> (NameError)
    ./features/step_definitions/web_steps.rb:35:in`block (2 levels) in <top (required)>'
    ./features/step_definitions/web_steps.rb:14:in `with_scope'
    ./features/step_definitions/web_steps.rb:34:in`/^(?:|I )follow ""([^""]_)""(?: within ""([^""]_)"")?$/'
    features/devise/3-update_user.feature:41:in `When I follow ""Cancel my account""'

web_steps definitions are the standard ones :

web_steps.rb 12-17
    module WithinHelpers
       def with_scope(locator)
          locator ? within(locator) { yield } : yield
       end
    end
    World(WithinHelpers)

web_step.rb: 33-35
    When /^(?:|I )follow ""([^""]_)""(?: within ""([^""]_)"")?$/ do |link, selector|
       with_scope(selector) do
          click_link(link)
       end
    end

what's wrong ?
",erwin16,2010-12-05 20:59:52
223,2010-12-05 12:59:52,"This issue is well known. It's a bug in cucumber, there's an open issue here. Search for it.
",jnicklas,2010-12-05 20:59:52
223,2010-12-05 15:39:52,"do you mean the click_link(link)
1/ is a bug whatever link used or 
2/ it's a bug because of the js confirmation panel ?
I tried again suppressing the confirmation panel, and same issue..., so I guess 1/ but just want to be sure ...
",erwin16,2010-12-05 20:59:52
223,2010-12-05 18:36:50,"No it's to do with javascript emulation being on in env.rb of cucumber
",parndt,2010-12-05 20:59:52
223,2010-12-22 07:33:12,"Thanks... I disabled :  require 'cucumber/rails/capybara_javascript_emulation' 
back to normal business... 
",erwin16,2010-12-05 20:59:52
222,2010-12-04 00:24:29,"if an app use JQuery sortable method to do Drag&Drop job the ""drag_to"" method seem's doesn't work, I tried defferent approaches but didn' work.

there is a solution ? 
",Heavyblade,2010-12-22 15:28:50
222,2010-12-22 15:28:50,"Most likely drag_to won't work with a sortable list, since you aren't actually dragging the element _to_ anywhere, you're dragging it a set distance, which can be accomplished by selenium's drag_by, which capybara doesn't have a nice wrapper for. There's an open patch being considered for that, see: https://github.com/jnicklas/capybara/issues#issue/119

Sortable lists are a pain though, and this most likely won't get you all the way there. Personally I've given up on testing them in a meaningful way.
",jnicklas,2010-12-22 15:28:50
221,2010-12-01 16:13:13,"There was an error introduced with the most recent commit involving the fix for paths added to self-closing tags (#188).

I was getting a `can't convert Pathname into String (TypeError)` error any time I tried to `save and open page`.

Small fix and I tried to run through the test to see why it was passing and the implementation was failing but I couldn't find anything.  The test in question has a lot of mocking and stubbing going on and just looking at it, it smelled bad.

It seems that at this point, it might be nice to have a `PathResolver` or something of the kind to abstract that away.  Just a thought.  Hope this helps.
",jfelchner,2010-12-10 15:01:11
221,2010-12-01 19:45:58,"I agree with you, those tests are really, really bad. I was aware of that when I merged them, but time constraints for both me and the author of the patch didn't allow us to improve on them. I guess there's a lesson to be learned here.
",jnicklas,2010-12-10 15:01:11
221,2010-12-01 19:50:50,"np Jonas, I completely understand and appreciate all the work you guys do.  If I get some time, I might extract some of that functionality out so it's easier to test.
",jfelchner,2010-12-10 15:01:11
221,2010-12-02 20:14:33,"This is the same pull request as mine (http://github.com/jnicklas/capybara/pull/217), but contrary to Jeff, I had failing tests when I ran the suite on my machine. Maybe some environmental stuff.
",gvc,2010-12-10 15:01:11
221,2010-12-02 22:10:55,"You rock Guilherme, sorry I missed your PR.
",jfelchner,2010-12-10 15:01:11
221,2010-12-05 21:17:47,"I wrote the original fix - sorry for this issue.  I'm totally mystified as to why that `to_s` is required though however; it worked perfectly in my environment without it, and the specs certainly passed for me before I submitted the pull request.

Regarding the bad smells in the specs, as I already explained in the pull request, against my better instincts I went the mocking and stubbing route rather than using real directories, in order to maintain consistency with the previously existing specs.  It was only after a discussion with Jonas that I realised I should have trusted my initial instincts.
",aspiers,2010-12-10 15:01:11
221,2010-12-10 15:01:11,"This is all of very confusing, but I _think_ everything is pushed now.
",jnicklas,2010-12-10 15:01:11
220,2010-12-01 04:50:46,"I'm sure someone else can give me some pointers on a better implementation but this is my basic idea.

There are often times when you're creating tests when you don't care what item you're selecting from a `select` element.  Here's an extremely simple and somewhat illogical example to help illustrate:

<S_CODE_TOKEN>

I don't care if the `And a color exists` step creates ""Green"", ""Blue"" or whatever, I just need a color to select.

So after these modifications, you can do:
    select :anything, :from => ""Color""
    select :first_item, :from => ""Color""

The only difference being that if there's an empty value, `:anything` would return the second option and `:first_item` would return the first (empty) option.

So here's my first pass; the web steps will also need to be modified but I'd like to get comments first.
",jfelchner,2010-12-16 15:41:19
220,2010-12-16 15:41:19,"Sorry, I dislike both the idea and the implementation. There are better ways of achieving what you want without cluttering the DSL, like

<S_CODE_TOKEN>
",jnicklas,2010-12-16 15:41:19
219,2010-11-29 12:05:03,"Hi

I am using Cucumber + Capybara and want to change the http request headers, if it is possible.
Specially the value of 'User-Agent'. 

thanks 
Leo
",leonardoanalista,2010-11-29 20:54:52
219,2010-11-29 12:34:10,"One more thing, I am using selenium:
in my env.rb:
Capybara.default_driver = :selenium
",leonardoanalista,2010-11-29 20:54:52
219,2010-11-29 12:54:52,"Selenium has no facility for setting headers afaik. In Culerity/Celerity it is possible to set _some_ headers, I think accept is one of them, take a look. RackTest can do it. Please search the issue and mailing list archives for more info.
",jnicklas,2010-11-29 20:54:52
219,2010-11-30 14:18:34,"ok... I managed to set up a Firefox profile for Selenium web driver and override user agent. 
Now I have the selenium driver and need to find a way to set up this Capybara. This is my spiky adhoc ruby code without Capybara: 

require ""rubygems""
require ""selenium-webdriver""
include Selenium

profile = WebDriver::Firefox::Profile.new

profile['general.useragent.override'] = ""Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.1""
profile['general.description.override'] = ""Mozilla"" # appCodeName
profile['general.appname.override'] = ""Netscape""
profile['general.appversion.override'] = ""5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16""
profile['general.platform.override'] = ""iPhone""
profile['general.vendor.override'] = ""Apple Computer"" #
profile['general.vendorsub.override'] = ""Subvendor"" #

driver = WebDriver.for :firefox, :profile => profile
driver.navigate.to ""http://google.com""

puts driver.title
sleep 10
driver.quit

Is it possible to use this code and set up Capybara to use my new driver in my env.rb?

thanks again jnickias

Leo
",leonardoanalista,2010-11-29 20:54:52
219,2010-11-30 16:25:39,"Yes, you should be able to do something like:

<S_CODE_TOKEN>

I had no idea this was possible, very cool indeed!
",jnicklas,2010-11-29 20:54:52
218,2010-11-28 01:48:47,"I noticed that when I looked at the source of files saved with save_and_open_page, any self-closed tags had their closing ""/"" replaced with the apps' root directory. I see why the replace is happening, but it shouldn't apply to the ""/"" in tags like <br />. I've solved this by adding a negative lookahead after the ""/"" that ensures that it's not followed by a "">"".

I don't have tests for this change. I'm honestly not sure how to test it. However, in my app it works, leaving the self-closed tags intact while continuing to make the other public content refs (stylesheet, scripts, images, etc) pull from the right place.
",sbleon,2010-12-06 02:00:21
218,2010-12-05 21:22:09,"This _sounds_ identical to [issue 188](https://github.com/jnicklas/capybara/issues/issue/188) which I already fixed and extended the specs for (although unfortunately that caused [another issue](https://github.com/jnicklas/capybara/pull/221)). But I can't be sure, because you made the exact same mistake I did when reporting issue 188, i.e. embedding raw example HTML in the issue text, which Markdown unfortunately swallows :)

Please could you reply to this, reposting your example HTML using your Markdown?  I thought quite hard before writing the fix for 188, so I'd like to understand what detail I missed which is causing your problem.  Thanks ...
",aspiers,2010-12-06 02:00:21
218,2010-12-05 21:23:30,"By the way I should clarify that your pull request is based off a commit which already has my fix in, so it's definitely not just a case of you rediscovering issue 188.
",aspiers,2010-12-06 02:00:21
218,2010-12-06 02:00:08,"@aspiers, thanks for correcting me on this! This was actually me rediscovering #188 and failing to work through the tests. I was actually manually testing my change against the current gem version of capybara, and I blindly copied my fix into the github HEAD version.

This comes of me not upgrading my project to Bundler and not knowing how to use git versions instead of the officially versions of the gems.

I'm going to close this pull request, as it now appears unnecessary. Thanks again!
",sbleon,2010-12-06 02:00:21
217,2010-11-26 20:09:56,"Hi there, I noticed that after a commit (link below) on 11/21, save_and_open_page stopped working properly, and I noticed that it was due to a simple <em>to_s</em> that was missing in save_and_open_page.rb. There was also a failing spec, so I did the fix and all specs are passing now (I'm using Ruby 1.9.2p0 MRI). 

Hoping to be useful,

Guilherme

Commit:
SHA: 6fa8a5652c6ebf2eea4847928dfe55cd39a1b241
",gvc,2010-12-10 14:55:12
216,2010-11-24 13:34:01,"Or in all likelihood I'm screwing something up. Here's my step definition:

<S_CODE_TOKEN>

This ""passes"" (meaning I get no errors), but I don't actually see the drag happen in the firefox window that pops up and it doesn't have the result I know it should have. That is, when I actually do the same drag and drop in my app, the draggable stops being in the origin and shows up at the destination.

<S_CODE_TOKEN>

This works when I use it, but not when Selenium/Capybara uses it.
",chadoh,2010-12-22 15:25:26
216,2010-11-24 16:41:58,"I'm using drag and drop successfully in a number of application. See https://github.com/elabs/front_end_testing (the dragdrop branch) for a working example. Could you try to pinpoint the cause of this?

BTW: imho, your cucumber features are seriously ugly. I formulated my thoughts as to why in a blog post a while ago, you might find it interesting: http://elabs.se/blog/15-you-re-cuking-it-wrong 
",jnicklas,2010-12-22 15:25:26
216,2010-11-24 17:00:27,"Yeah, I'll happily try to pinpoint the cause of this. Won't have time today.

I'm interested to see how you implement drag & drop. I read your article a few weeks ago and agree, this particular cucumber feature is quite ugly. I generally dislike using element IDs and ""within"" in my features, but I wasn't sure how else to test for this one. ""When I drag and drop a composition from the unscheduled area to a meeting Then it should no longer show up under Unscheduled And it should show up under the meeting"". I guess I could do that. I just need to be more long-winded in my step definitions. Hmm. I'll work on that, too.

Thanks for the reference, I'll be in touch when I've discovered something.
",chadoh,2010-12-22 15:25:26
216,2010-12-02 14:09:26,"I figured out that the problem is a drag-handle. Instead of using the whole li, I'm using one span within the element as [a drag handle](http://cl.ly/3Tuu). When I changed my javascript and commented out that line so that the li can be dragged from anywhere:

<S_CODE_TOKEN>

my tests pass. However, I really like having the dragging limited to the handle. My best attempt to get this working was like so:

<S_CODE_TOKEN>

But the test still fails. Ideas on how to get it working? I'm thinking I might try using [akephalos](https://github.com/thoughtbot/akephalos) instead of Selenium, as [thoughtbot seems to have had better luck with that](http://robots.thoughtbot.com/post/1658763359/thoughtbot-and-the-holy-grail).
",chadoh,2010-12-22 15:25:26
216,2010-12-02 15:12:08,"Afaik drag drop is not supported by akephalos at all. Just FYI. Closing this, since it seems like it was a problem with your code, rather than Capybara being broken, is that fair?
",jnicklas,2010-12-22 15:25:26
216,2010-12-02 15:54:32,"It's not quite fair, as I still have the problem. I can't get drag drop to work with the drag-handle. My javascript works, and can be used by a human, but I can't figure out how to get capybara's selenium driver to drag the li using the drag-handle. So I would now very much appreciate some help getting that working.
",chadoh,2010-12-22 15:25:26
216,2010-12-02 16:47:38,"Alright, I've reopened the issue.

> So I would now very much appreciate some help getting that working.

Sorry, dude, that's the surest way to not get any help at all, at least from me. I don't owe you anything, I'm not going to volunteer my time to help you if you're being rude. If it doesn't work for you, dig down, figure out why on your own.
",jnicklas,2010-12-22 15:25:26
216,2010-12-02 18:08:31,"Oh! I assure you that I did not intend to be at all rude. I was trying to word that in the nicest way possible. I actually tried to choose words that conveyed that you don't owe me anything, and that I very much appreciate all of the help you've already given me. I clearly failed! Let me try again:

Thank you for making Capybara and for all of the hard work you put in. It's fabulous. Thank you for taking time out of your busy life to answer questions, and for providing great working examples as a resource. I've looked around in the RDocs for a while now and I've cloned your example-project-tests and looked at it, but I haven't seen any mention of how to drag an element that uses a drag handle. It's very possible that I missed it, and I'll keep looking when I have time, but if you could help point me in the right direction (again!), that would be wonderful.
",chadoh,2010-12-22 15:25:26
216,2010-12-02 21:28:59,"Clearly a failure in communication then. Thank you for the kind words.

I don't think that there would be a significant difference between using drag handles and just dragging the element itself, the example you wrote above with finding the drag handle and then dragging it to whatever _should_ work, imho. There's something else at play here.
",jnicklas,2010-12-22 15:25:26
216,2010-12-03 14:17:15,"I think this is a bug!

I removed all but one `li` of interest, turned off the drag-handle, and then finding it like this gave a passing test:

<S_CODE_TOKEN>

However, finding it like this didn't:

<S_CODE_TOKEN>

So I decided to put them on equal footing, but this failed too:

<S_CODE_TOKEN>

However! When I rearranged the elements, so that the span was before the footer in the markup, then the above snippet passed, and finding the footer didin't. That is, when arranged like this:

<S_CODE_TOKEN>

then finding the span.drag-handle works and finding the footer does not. Switching the order of the last two gives the opposite result.

Strangely, though, when there are only three direct children of the `li` and `span.drag-handle` is within `footer`, finding by the footer works but going one more level down to the drag-handle does not.
",chadoh,2010-12-22 15:25:26
216,2010-12-04 14:48:34,"My original method of finding it,

<S_CODE_TOKEN>

works if the drag-handle is moved to one of those other places.

So there definitely is something else at play here, but I'm not sure where to begin looking in order to fix it. I'm of course willing to help where I'm able to. Thank you.
",chadoh,2010-12-22 15:25:26
216,2010-12-04 21:24:47,"Hmm. Actually, I figured out that it has to do with where the element actually is on the page. When the elements are arranged like this:

<S_CODE_TOKEN>

but I float the drag-handle so it's on the far right where I want it, it doesn't work. If it stays in the middle, it does.

So I've restyled the page so that the drag-handle is on the far left. The test passes, and I think I like this style more anyhow.

So my problem is solved. 

But there still seems to be an odd dependency on page-width. It seems like the Selenium driver can't drag using an element that's too great a distance to the right.
",chadoh,2010-12-22 15:25:26
215,2010-11-24 09:55:28,"When running automated tests you are more likely to just want to save a snapshot of the failed page for an email report, instead of also opening it locally.
",raine,2011-02-18 14:49:27
215,2010-12-22 15:20:22,"Sounds reasonable, I'll accept a patch, but I have no need for this myself, so I won't be adding it myself.
",jnicklas,2011-02-18 14:49:27
215,2011-02-13 22:17:02,"I added `Capybara.save_page` in #273 :)
",jeffkreeftmeijer,2011-02-18 14:49:27
215,2011-02-18 14:49:27,"Add Capybara.save_page. closed by 09ed419f44cd38bde8b3ec2b0f975fd3fd0170ef
",jeffkreeftmeijer,2011-02-18 14:49:27
214,2010-11-23 23:05:41,"For my [VCR gem](https://github.com/myronmarston/vcr), I have [something similar](https://github.com/myronmarston/vcr/blob/master/spec/support/vcr_localhost_server.rb) that I use for the specs and cukes.  It's based on Capybara::Server but is a little different to use forking instead of threading in some situations.  [David Balatero](https://github.com/dbalatero), one of the maintainers of [Typhoeus](https://github.com/pauldix/typhoeus), has mentioned to me that he'd like to use something similar in the Typhoeus specs, but would like to use it via a gem rather than copying the code in to that project.

So...would you consider extracting Capybara::Server into a standalone gem?  Or, if I extracted it, would you consider using it?  It's nice to have a simple, standard way to start a rack server that automatically shuts down.
",myronmarston,2012-01-03 13:48:25
214,2012-01-03 13:48:24,"Hmm, old issue. I looked into this way back when, and the thing quickly started to become way too generic. I don't think it's worthwhile to split this out.
",jnicklas,2012-01-03 13:48:25
213,2010-11-22 21:44:18,"I have an application that sets the locale based on the domain and features cover that. It seems the rack driver does not reset the host between scenarios. I think it should reset back to default_host at the beginning of each scenario. Here's an example feature that fails:

<S_CODE_TOKEN>
",betelgeuse,2011-04-07 15:36:50
213,2011-01-19 13:37:48,"We had the same problem and have fixed up the rack driver in this commit https://github.com/econsultancy/capybara/commit/5dd82fa1e3523f0ad58bc68f4145190733ea6def

J.
",econsultancy,2011-04-07 15:36:50
213,2011-04-07 15:36:50,"This should now be fixed even better on master. We should now have total isolation between tests as long as #reset! is called (which it is on cucumber and rspec)
",jnicklas,2011-04-07 15:36:50
212,2010-11-22 15:09:06,"I have a feature testing stuff around logging out of the backend of the application. One part of the tests is looking at flash flash messages. It worked fine with webrat but I can't get it to work with capybara. My best guess is that flash messages don't work together with stuff that calls reset_session as in other features flash messages are working.
",betelgeuse,2011-04-11 08:14:10
212,2010-11-22 15:26:18,"Capybara.reset_session! clears all cookies. That's its purpose. The flash uses cookies. This is pretty much intended behaviour.
",jnicklas,2011-04-11 08:14:10
212,2010-11-22 15:31:26,"I am talking about reset_session of Rails API. You argue that it's expected behavior for Capybara to work differently from what you see on the screen when developing?
",betelgeuse,2011-04-11 08:14:10
212,2010-11-22 15:55:00,"Ahh, sorry, I misunderstood. It's not supposed to behave differently no, but it seems pretty unlikely to me that it would. Capybara knows nothing of the Rails internals and doesn't touch them at all, so it shouldn't really affect this. Can you dig a little more and pinpoint the cause?

I've reopened this for now.
",jnicklas,2011-04-11 08:14:10
212,2010-11-23 11:07:35,"My quick fix was switching to the selenium driver and it worked. I couldn't pin point the exact cause with rack driver but after logout on the next request there are no cookies coming in with the request.
",betelgeuse,2011-04-11 08:14:10
212,2011-04-11 08:14:09,"Since we never found out what was causing this, and I can't reproduce it, I'm closing this issue.
",jnicklas,2011-04-11 08:14:10
211,2010-11-22 13:16:15,"I got hit when migration from webrat that capybara is case sensitive but webrat is not. Took me quite a while to realize why my feature was failing. I don't think there's much value in requiring the matching to be case sensitive.
",betelgeuse,2010-11-22 21:46:23
211,2010-11-22 13:46:23,"Unfortunately this is impossible. We rely heavily on XPath and XPath does not support case-insensitive queries. We're going to have to live with this one.
",jnicklas,2010-11-22 21:46:23
211,2010-11-22 14:05:45,"Isn't there functions for lower or upper casing strings in XPath that could be used to implement this?
",betelgeuse,2010-11-22 21:46:23
211,2010-11-22 15:27:04,"Unfortunately not. Believe me, I've tried. It can't be done.
",jnicklas,2010-11-22 21:46:23
211,2010-11-22 23:11:48,"Hacked some example code together for you:

ree-1.8.7-2010.02 > doc = Nokogiri::XML('<foo>BAR</foo>')
ree-1.8.7-2010.02 > doc.xpath(""/foo[translate(text(),'#{('A'..'Z').to_a.join}','#{('a'..'z').to_a.join}') = 'bar' ]"")
 => [#<Nokogiri::XML::Element:0x856efb88 name=""foo"" children=[#<Nokogiri::XML::Text:0x856ef908 ""BAR"">]>]

This only supports case insensitivity for ASCII but that's better than nothing.
",betelgeuse,2010-11-22 21:46:23
211,2010-11-22 23:15:41,"of course github stripped my tags away but the doc is just a foo root element with BAR text contents
",betelgeuse,2010-11-22 21:46:23
211,2010-11-23 09:03:02,"I know of that trick. Hell, I've read the entire XPath spec looking for a solution. The translate trick is slow, unreliable, hackish and prone to errors (you have to actually remember to use it every time for any kind of query).

Webrat was internally inconsistent, some things were case sensitive, others weren't. At least Capybara is consistent.
",jnicklas,2010-11-22 21:46:23
211,2010-11-23 09:04:17,"Also, the only time I've ever found the case-sensitivity to be a problem, was when moving from Webrat to Capybara, if you start with Capybara from scratch, it never seems to come up.
",jnicklas,2010-11-22 21:46:23
211,2010-11-23 09:49:34,"Slow and unreliable implementations can be fixed. Granted it's not just as easy as flipping a switch.
",betelgeuse,2010-11-22 21:46:23
211,2010-11-23 09:58:44,"It also seems Nokogiri supports defining custom xpath functions:
http://nokogiri.org/Nokogiri/XML/Node.html#method-i-xpath
",betelgeuse,2010-11-22 21:46:23
211,2010-11-23 10:02:17,"Also if you decide that case insensitivity is not worth it could you update README to reflect the fact that it's not because it would be impossible but because we want to keep the code simpler.
",betelgeuse,2010-11-22 21:46:23
211,2010-11-23 11:36:20,"Nokogiri's XPath extensions are nice, but they don't work under Selenium or Culerity or any other driver that doesn't support them. We have to stick to the XPath standard for cross-driver support.

Using translate is fundamentally broken, just think: it has to substitute all letters for all text for any node it finds, it'll never be fast. It also doesn't work with non-ASCII characters, which makes it very unintuitive for people who use languages other than English. It's simply not a solution.

I think the README is quite correct, XPath doesn't support case insensitivity. If we change it to ""well we don't _want_ to do it"", which simply isn't the case, we _can't_ do it, then we'll have this discussion one million times again.

So: Capybara is case sensitive. It's not going to change. Deal with it.
",jnicklas,2010-11-22 21:46:23
210,2010-11-21 16:39:17,"Given this html:

@@@
<input class=""input_text_box"" id=""input_cctn"" maxlength=""10"" 
@@@

and this input:

fill_in( selector, { :with => ""     12345678901234567890 } )

We should have ""     12345"" but instead see ""     12345678901234567890""
",byrnejb,2011-04-11 08:17:09
210,2010-11-21 18:29:52,"Interesting issue. Do you think you can provide a patch?
",jnicklas,2011-04-11 08:17:09
210,2010-11-21 20:32:48,"I am about to do a deploy so it will take sometime before I can get to it. But, certainly I will take  look.
",byrnejb,2011-04-11 08:17:09
210,2011-02-13 19:25:58,"@byrnejb will you implement this feature any time soon? If you won't I can give it a try
",gvc,2011-04-11 08:17:09
210,2011-02-14 14:52:25,"Go right ahead.  I have never found the time to return to this issue.  Thanks.
",byrnejb,2011-04-11 08:17:09
210,2011-02-20 20:35:21,"Jonas and James, I think that there are other constraints (and types) that are not being observed, such as HTML 5 'number' type input, and the 'readonly' attribute on text and password fields under rack-test. Their implementation seems pretty straightforward, and can be easily done.

But something is bothering me, even though I implemented it on the drivers (Capybara::Driver::RackTest, Capybara::Driver::Selenium and Capybara::Driver::Celerity) it seems to me that this constraint checking code should sit on Capybara::Node::Element because it's part of the HTML specification.

What are your thoughts on this?
",gvc,2011-04-11 08:17:09
210,2011-03-11 17:34:06,"This issue was solved by db053fd32f72a3fa21e2865c87a446365bebe6ca, but I'd still like to hear your thoughts on the issues above.

Thanks!
",gvc,2011-04-11 08:17:09
210,2011-04-11 08:17:09,"Sorry for the late reply. I think I'd rather prefer the drivers to handle this, but I'm open for discussion.

I think we can probably drive ourselves nuts by trying to implement all of these constraints. I'll welcome any pull requests towards these goals, but I don't think it should be our design goal, or an obstacle towards any release. I'm closing this issue.
",jnicklas,2011-04-11 08:17:09
209,2010-11-19 14:16:42,"If there's a link, for instance in Google-style autocomplete, something like:
    <li>
      <a>
        <b>R</b>uby
      </a>
    </li>

click_link(""Ruby""), or click_link(""<b>R</b>uby"") (i mean with bold tag) says no link with title, id or text found (Capybara::ElementNotFound)
",ifesdjeen,2010-11-19 16:22:17
209,2010-11-19 15:22:02,"which version of Capybara are you using? We saw this bug in Capybara before 0.4.0 was tagged, it shouldn't have happened since.
",jnicklas,2010-11-19 16:22:17
209,2010-11-19 15:28:51,"That's my Gemfile.lock grep: 
    capybara (0.4.0)
      celerity (>= 0.7.9)
      culerity (>= 0.2.4)
      mime-types (>= 1.16)
      nokogiri (>= 1.3.3)
      rack (>= 1.0.0)
      rack-test (>= 0.5.4)
      selenium-webdriver (>= 0.0.27)
      xpath (~> 0.1.2)

Wierdly, I tried to modify the capybara specs in order to reproduce, and modified:
        lib/capybara/spec/views/with_html.erb
        15:  quis nostrud exercitation <a href=""/foo"" id=""foo""><b>u</b>llamco</a> laboris nisi

Specs were still passing. Although, that's on master branch. Some specs were skipped since i don't have a whole environment installed, but until now i couldn't find a source of a problem.

UPD: on 0.4.0 specs are passing too. although, I may have modified an incorrect piece of source.

UPD2: That works just perfectly (one line before the selector) 
    Then I should see the following:
          | Ruby  |
          | Rails |
",ifesdjeen,2010-11-19 16:22:17
209,2010-11-19 16:22:17,"UPD: link didn't have ""href"" attribute.
Sorry for inconvenience.
",ifesdjeen,2010-11-19 16:22:17
208,2010-11-19 05:52:41,"My cucumber database wasn't migrated. When I executed cucumber it tells me that it skipped all the steps in failed on the scenario. No specific error of any kind was reported. Not even when I used -b and --verbose

Please let the exception failure message be shown in the console.
",gregwebs,2010-11-21 18:01:36
208,2010-11-21 18:01:36,"This sounds more like a cucumber issue, than a Capybara issue, closing.
",jnicklas,2010-11-21 18:01:36
207,2010-11-18 23:13:41,"Added support for has_link? to check href values as discussed in this thread http://groups.google.com/group/ruby-capybara/browse_thread/thread/5ad7f46a2b14469a This commit also requires the HTML#link changes in the pull request I sent for the xpath project: https://github.com/jnicklas/xpath/pull/14

Steve
",dnd,2011-01-17 16:01:50
207,2010-12-21 20:26:02,"I like this feature, however I wouldn't bother with #set_link_options, just require the :href option and pass directly through to XPath::HTML as has_select?, has_unchecked_field?, etc do.
",jfirebaugh,2011-01-17 16:01:50
207,2010-12-21 20:27:55,"I.e.:

<S_CODE_TOKEN>
",jfirebaugh,2011-01-17 16:01:50
207,2010-12-22 14:49:50,"Agreed, I think the second form, as in

<S_CODE_TOKEN>

without the :href key is unnecessary and confusing.
",elabs,2011-01-17 16:01:50
207,2010-12-22 14:50:42,"^^ that was me ;)
",jnicklas,2011-01-17 16:01:50
207,2011-01-15 16:53:42,"+1 for putting this in rc0.4.1
",johnpaulashenfelter,2011-01-17 16:01:50
207,2011-01-16 04:00:39,"I opted to add support for both because the seemingly most likely reason for a second property would be to verify the link path. In doing this it eliminates a bunch of tedious ':href =>  '. It hardly seems confusing as it would be quite apparent that the second parameter is a url path of some kind.
",dnd,2011-01-17 16:01:50
207,2011-01-16 22:48:04,"Hmm, I disagree, the `:href =>` is not superfluous, imho, since it is added information about what the parameter stands for. A bit like `fill_in 'foo', :with => 'bar'`.

I'd love to pull this in if you can find the time to remove the form without the :href key, it's a nice feature and it would be good to have.
",jnicklas,2011-01-17 16:01:50
207,2011-01-16 23:09:40,"Yes, and for the record, that syntax annoys me too. :) Nice when first starting, but after a while I know what the field means, and I'm not gaining that much from it. Just getting annoyed every time I forget the :with => . I have updated and pushed the changes as requested.
",dnd,2011-01-17 16:01:50
207,2011-01-17 08:18:15,"Thanks :) I've pushed it now. You really did a good job, sorry for being so nit-picky.
",jnicklas,2011-01-17 16:01:50
207,2011-01-17 20:06:20,"No problem, it's just part of the OSS process. The part I really wanted got included, and the other bit was nice to have.
",dnd,2011-01-17 16:01:50
206,2010-11-18 21:34:27,"find_field(label)[:type] should return ""checkbox"" for an <input type=""checkbox"">, but it instead returns the type of the object instead (Culerity::RemoteObjectProxy).

I need this to assert that a found field has ""checkbox"" in its ""type"" attribute. I was able to use [:type] when using the envjs driver, but not when using Culerity. The behavior should be made consistent between the two drivers.
",sbleon,2010-11-22 02:00:36
206,2010-11-21 18:00:35,"Better implementation of attributes for celerity, closed by b022ca9926bfd0ad7afe2c9f722b2f8a7300f8af
",jnicklas,2010-11-22 02:00:36
206,2010-11-28 01:37:36,"Cool, thanks!
",sbleon,2010-11-22 02:00:36
205,2010-11-18 20:03:52,"We would like to being using capybara for integration tests on a rails 2.3.5 project with rspec 1.3.0. No cukes. I've followed Paul's instructions here to get everything all wired up: http://codingfrontier.com/integration-testing-setup-with-rspec-and-capy. But, we're getting some errors, with what appears to be session-related stuff. Then I saw this in the Readme:

<S_CODE_TOKEN>

It seems that access to Rails specific stuff (such as controller) is unavailable, since we’re not using Rails’ integration testing. I don't understand -- are we doing something wrong here? It's seems like some people are using capybara for rails integration testing without cucumber, but it says in the Readme that capybara does not have session access. 

Any help here would be much appreciated. Thanks.
",ajsharp,2010-11-19 06:36:16
205,2010-11-18 21:09:38,"There's a mailing list for asking these sorts of questions, it's generally a better place since there are more people there answering questions.

What the section in the README means is that you cannot access any property of the session, such as the session id from within Capybara. Coming from testing with Webrat which integrates very tightly with Rails' integration tests people might expect that to work, hence the note.

I'm having trouble understanding what your issue is here, what you're trying to achieve and what isn't working? Maybe it's just a misconception you have about Capybara? If you can provide some insight, maybe we can tweak that text so it doesn't confuse people in the future.
",jnicklas,2010-11-19 06:36:16
205,2010-11-18 21:24:36,"I think you're right: I probably had a misunderstanding of what capybara provides. I think I'm understanding now that capybara is simply a dsl for querying the response body, is that right? It doesn't actually do session management that an integration suite, such as steak or cucumber provides, right? 

If this is the case, it might be helpful to newcomers to say very clearly that capybara is _not_ an integration testing suite, it is meant for use with other suites. The impression I got when I read through the readme is that capybara is meant to be used with cucumber, and there isn't much detail in terms of using it with other integration suites. My bias/unbias towards cucumber aside, it would be nice to see how capybara plugs in with other integration suites. I hope all of this...editorializing is helpful to you. I like the project a lot, but have just had a hell of a time using it with rails 2.3. 

To clarify the problem -- we were trying to use capybara and rspec with just the plain rails integration suite in rails 2.3, but it seemed we were not able to get sessions working properly. This was very frustrating because it works somewhat easily in rails 3. Basically, in rails 2.3, we were able to have capybara navigate to a login page, fill in the details, click login, but after that everything blew up. Empty response and controller objects, or something to that effect. Is this making more sense? 

Also, fwiw, I posted something to the google group a few weeks ago (http://groups.google.com/group/ruby-capybara/browse_thread/thread/c0e969fed9a1888a/e5201783824903e8?lnk=gst&q=ajsharp#e5201783824903e8) so yea, at this point, I'm being a bit of a nag ;)
",ajsharp,2010-11-19 06:36:16
205,2010-11-18 22:36:00,"Totally wrong dude ;) Capybara _is_ in an integration testing tool. It _does_ handle sessions. The only thing it _doesn't_ allow you to do is allow you to look inside the session cookie and see what properties exist on it and what their values are, which you shouldn't be doing in an integration test anyway.

Steak's entire source code can be basically summarized as:

<S_CODE_TOKEN>

For most intents and purposes Steak _is_ Capybara. Neither Cucumber nor Steak are integration tools, Capybara and Webrat are integration testing tools.

There should be no difference between using Capybara on Rails 2 or Rails 3. Capybara doesn't concern itself with frameworks at all, it only cares about Rack.

The response object comes from Rails' integration tests, which Capybara _doesn't_ integrate with, there's no concept of a response object in Capybara. Which is why it isn't mentioned in the documentation anywhere.

So yeah: RTFM
",jnicklas,2010-11-19 06:36:16
205,2010-11-18 22:52:29,"BTW: we'll probably soon have all that setup stuff bundled in a capybara/rspec file you can include to setup Capybara with RSpec automatically. Not that that would solve whatever problems you're having with Rails2 ;)
",jnicklas,2010-11-19 06:36:16
204,2010-11-18 19:23:12,"Hello,

This fixes a subtle, but critical bug with `has_selector?` and `has_no_selector?` not waiting for the content to appear/disappear. It was because of a confusing ruby behaviour with `return` inside of a block. There are no specs attached, but it fixes some that were already failing.
",madadam,2010-11-19 05:25:22
204,2010-11-18 22:38:30,"Thanks! Good catch, and shame on me for leaving red specs lying around for so long.
",jnicklas,2010-11-19 05:25:22
203,2010-11-18 07:18:42,"I am using jQuery to bind a text field to the keyUp event. A `fill_in ""field_id"", with => ""test""` works as expected (keyUp is triggered), but clearing the field with `fill_in ""field_id"", with => """"` does not trigger that event.
",medihack,2010-11-22 07:56:50
203,2010-11-18 08:40:02,"Which driver?
",jnicklas,2010-11-22 07:56:50
203,2010-11-18 09:06:47,"The selenium driver. Is it a selenium problem then? I am still not sure about the internals of Capybara ... it simply works ... and that's great :-)
",medihack,2010-11-22 07:56:50
203,2010-11-21 17:46:30,"setting a field's value is implemented like this in Capybara, simplified:

<S_CODE_TOKEN>

My guess would be that if you're setting the value to """", no keys are ever actually sent, hence no key up event. Not really sure how to fix that. There's a gem called [send_keys](https://github.com/markgandolfo/send-keys) which might give you more control over this, or you could send a string with a single space or something.

It might be possible to fix it in Capybara, but I'm afraid that we'd just add more unexpected, ambiguous behaviour (_which_ key should have been pressed, backspace, space?). So I think it's probably better to leave it as is.
",jnicklas,2010-11-22 07:56:50
203,2010-11-22 07:51:33,"Ok, no problem for me as I simply workaround that by sending Javacript. Thanks for the info Jonas.
",medihack,2010-11-22 07:56:50
203,2010-11-22 07:56:50,"Closing this then.
",jnicklas,2010-11-22 07:56:50
203,2011-05-27 18:47:36,"Here's another workaround:

<S_CODE_TOKEN>

I realize Control+A might be OS-specific but at least it works even when evaluate_script doesn't (for me with FF evaluate_script was timing out).
",BMorearty,2010-11-22 07:56:50
203,2013-01-24 11:39:40,"To work around this I use fill_in to clear the input field, and then manually trigger a keyup event on the field. I am using capybara via cucumber, so the below is the helper method I use for triggering events, and the cucumber step that I use when I need to clear a field:

<S_CODE_TOKEN>
",nickstreet,2010-11-22 07:56:50
203,2014-06-22 22:49:10,"I was having a similar problem.
fill_in doesn't trigger 'change' event.
@nickstreet  hack is working like a charm for me. 
Thanks!

<S_CODE_TOKEN>
",abinoam,2010-11-22 07:56:50
203,2016-09-23 17:31:30,"@BMorearty  When I use your suggestion, I get undefined method `send_keys' for #Object:0x007fc979f730d8 (NoMethodError)  
Using this
page.find(:xpath, ""//input[@placeholder = 'Prefix']"").set """"
      send_keys [:control, ""a""]

since the Prefix field does not have an id (it's React) so I am trying to access a field with its placeholder text.  It works fine to set it to a value but even though I see the set command above clear the field, the original value is still in the field once I save the form.
",DougMaisells,2010-11-22 07:56:50
203,2016-09-23 17:53:00,"@DougMaisells send_keys needs to be called on an element - you probably want something like

<S_CODE_TOKEN>

of you could just do something like

   find_field('Prefix').send_keys([:control, ""a""], :backspace)

which should have a similar effect (assuming ctrl-a selects all contents in the platform you're testing on).
",twalpole,2010-11-22 07:56:50
203,2016-09-23 18:00:53,"@twalpole Unfortunately this field doesn't have an id, it's react and I had to access with page.find(:xpath) method
",DougMaisells,2010-11-22 07:56:50
203,2016-09-23 18:02:04,"@nickstreet Thanks but doesn't work.   I can see the field clear when the script runs but when as the script runs and focus travels to other fields, the former value is restored....
fill_in 'person-form-title', with: """"
      trigger_event_for('person-form-title', :keyup)
      #send_keys [:control, ""a""]

<S_CODE_TOKEN>
",DougMaisells,2010-11-22 07:56:50
203,2016-09-23 18:04:00,"@DougMaisells  find_field finds by id, name or placeholder text - so `find_field('Prefix')` should find the element with matching placeholder text rather than needing xpath.
",twalpole,2010-11-22 07:56:50
203,2016-09-23 18:06:41,"@twalpole  so do I replace the page.find up above with find_field?
",DougMaisells,2010-11-22 07:56:50
203,2016-09-23 18:10:54,"<S_CODE_TOKEN>

gives error:   no implicit conversion of Symbol into Integer (TypeError)
",DougMaisells,2010-11-22 07:56:50
203,2016-09-23 18:17:41,"@DougMaisells  try

<S_CODE_TOKEN>

If that still errors - tell me which line it's erring on
",twalpole,2010-11-22 07:56:50
203,2016-09-23 18:25:09,"@twalpole Thanks, got by run-time error but still does not persist with the zapped value.  It zaps the field as I run the scripts but the value is restored as the script travels through other fields on the form.  It must be a React thing; I'll have to get with my developer.  (I am QA)
",DougMaisells,2010-11-22 07:56:50
203,2016-09-23 18:32:02,"@DougMaisells  Ok -- it all depends on which event React is looking for to trigger it's model updates.  You might want to try just doing the single line (rather than separately setting and then trying to trigger the needed events)

<S_CODE_TOKEN>

and see if that triggers the needed events - since that should trigger key events and the change event
",twalpole,2010-11-22 07:56:50
203,2016-09-23 18:41:38,"@twalpole Tom, you are talking over my head now.  My extent of understanding of React is it's a javascript framework which my app and others like Facebook is written in.  I'll get with my dev.  BTW, what you suggested above didn't work either.  This time, it doesn't even render the field as zapped and it stays with its value where the other tries at least zapped the field in real-time but then it restored a moment later as it went through other fields.    But with manual testing, I can highlight the value, hit the delete key, and tab (or use mouse to move focus to another field) and the zapped value persists.  If you have a quick and dirty way to emulate the manual actions above, I'm all ears.
",DougMaisells,2010-11-22 07:56:50
203,2016-09-23 18:58:37,"@DougMaisells - As I stated previously, my example assumed ctrl-a was selecting the contents of the field on your platform -- if howeever you're on OS X it would be cmd-a  - so then your test could use

find_field('person-form-title').send_keys([:command, ""a""], :backspace)  

ie - send cmd-a to select everything then hit backspace to delete it all - anyway it may be best if you did talk with a developer about what events are required to complete the action with React
",twalpole,2010-11-22 07:56:50
203,2016-09-23 19:05:40,"@twalpole Ooh, I missed that connection.  Yes, I am on OSX and yes that works.   I glanced over that detail above because I wasn't sure what was being talked about.
",DougMaisells,2010-11-22 07:56:50
202,2010-11-17 22:31:47,"Capybara includes [some basic support for cucumber](https://github.com/jnicklas/capybara/blob/master/lib/capybara/cucumber.rb). Would you accept a patch that adds the same support for RSpec 2 (hence Steak)? 

I'd would be happy to code it. 
",cavalle,2010-12-11 13:37:04
202,2010-11-17 23:15:50,"Yes, in fact there's already a patch flying around for doing driver switching in RSpec, but the implementation was a bit sketchy. capybara/rspec would be fantastic!
",jnicklas,2010-12-11 13:37:04
202,2010-11-17 23:21:38,"right, jeff's patch about driver switching, I forgot it. I was thinking about something less ""magical"", more like the basic cucumber support already present in Capybara. Anyway I'll check it out and see what I can propose
",cavalle,2010-12-11 13:37:04
202,2010-12-11 13:37:04,"Duplicate of #187. Closed by aa46894ce79af589fa5148bba2533e05a7f6e910
",cavalle,2010-12-11 13:37:04
201,2010-11-17 15:53:08,"Hello,

This patch makes the server boot timeout configurable (`Capybara.server_boot_timeout`). Previously it was hardcoded to 10 (seconds I guess). I needed it, because our app is quite fat and needs time to boot. Without this, I'd have to monkey-patch Capybara.
",madadam,2010-11-21 17:38:52
200,2010-11-17 14:43:23,"I configured my capybara like this:

Capybara::Driver::Selenium.new(app, :browser => :remote, :url => SELENIUM_REMOTE_URL )

But because of a mistake, selenium server on SELENIUM_REMOTE_URL was not reachable. I saw that error message at the first scenario, but all other scenarios told me, that :url is an unknown key.
I made some research, and this issue is because at selenium_driver.rb line 86 browser key is deleted from options. If Selenium::WebDriver.for() gives back nil for a reason (in my case, remote url was not reachable), next time Selenium::WebDriver creates a firefox browser because at that point, options[:browser] is deleted, and default :firefox value is used.
",whatwho,2010-12-22 15:51:16
200,2010-11-21 17:31:49,"Wait, `Selenium::WebDriver.for()` can return nil?? That seems all kinds of wrong. It should probably raise an exception in that case. Could you try if this is still the case with the latest selenium-webdriver? If it is, we should probably file an issue with them.
",jnicklas,2010-12-22 15:51:16
200,2010-11-29 12:03:12,"I'm using the latest selenium-webdriver, which is 0.1.0. It raises an exception, when an invalid url is used (both URI are relative (URI::BadURIError)), but only for the first time (as I mentioned before). Because this exception is not rescued anywhere in capybara, it triggers itself up to application level, and it can be seen in cucumber's output.
",whatwho,2010-12-22 15:51:16
200,2010-12-22 15:51:16,"Don&#39;t delete browser from options, closed by e514f2e99cceb3db5be2a6fef8fdfd9a2cb74e2d
",jnicklas,2010-12-22 15:51:16
199,2010-11-17 13:41:47,"I have a form on page:
      <form action=""/action"" method=""get"">
        <input value=""OK"" type=""button"">
      </form>
And I want capyabra to click on button and submit the form. Capybara clicked on the button, but form wasn't submitted. For example, click by such button submit form in Firefox and other browsers...

Capybara 0.4.0, Ruby 1.9.2
",petRUShka,2010-11-22 01:27:48
199,2010-11-17 15:45:15,"I think I saw this problem at some point. 

Try setting the type of your input to tag to image or submit. I don't think it works w/ button.
",DCarper,2010-11-22 01:27:48
199,2010-11-17 17:16:37,"Yes, afaik this is consistent with browser behaviour. A browser won't submit the form if you click that button either.
",jnicklas,2010-11-22 01:27:48
199,2010-11-17 17:43:02,"For example, firefox behaviour different than capybara behaviour. Firefox submit form via such button.
",petRUShka,2010-11-22 01:27:48
199,2010-11-21 17:27:48,"Okay, I've looked it up in the spec, and it seems like I'm right so I'm closing this issue.

See: http://www.w3.org/TR/html5/number-state.html#button-state

Relevant section:

> When an input element's type attribute is in the Button state, the rules in this section apply. The input element represents a button with no default behavior. [...] The element's activation behavior is to do nothing.
",jnicklas,2010-11-22 01:27:48
199,2010-11-21 17:29:37,"Yeah, you are right. Sorry.
",petRUShka,2010-11-22 01:27:48
198,2010-11-15 10:22:47,"OK, take 2 :-)  This is a much better approach, and should be fairly self-explanatory now that I have provided specs.  If you run the new spec against the existing save_and_open_page.rb (the version prior to this commit), you will see it fail both of the new examples, and it should be clear by comparing the ""expected"" HTML against the ""got"" HTML why the existing version is buggy.
",aspiers,2010-11-21 17:40:06
197,2010-11-14 06:03:32,"It seems that the seesion cookies are not cleared between tests when using the selenium driver. I have to explicitly call `Capybara.reset_sessions!` after a test. Is this intended? I am using Capybara 0.4.
",medihack,2010-11-14 08:06:27
197,2010-11-14 07:58:59,"How are you running your tests? If you're using rspec, then yes, you do need to manually call Capybara.reset_sessions. The cucumber integration stuff in capybara/cucumber sets this up for you though.
",jnicklas,2010-11-14 08:06:27
197,2010-11-14 08:06:27,"Indeed, I am not using Cucumber (just Steak). Thanks Jonas.
",medihack,2010-11-14 08:06:27
196,2010-11-12 17:09:43,"This is a really tricky one, and I'm not sure I did the best possible job, but I wanted to add a note about a gotcha that I ran into. As discussed in this thread:

http://groups.google.com/group/ruby-capybara/browse_thread/thread/b13370f52e9f4194

...you really need to be careful when attempting to visit absolute URLs in tests. In this case, it was unavoidable because I need to use URLs in outgoing emails (as opposed to paths) and I found a relatively easy way to make it work. Put simply, the hosts all had to match up. 

Anyway, this doc note might help point someone in the right direction if they hit the same problem. 

Thanks!
",trevorturk,2010-12-10 15:29:10
196,2010-11-21 17:51:21,"While I agree with the note in general, I have a few issues with the wording. I don't want to mention Capybara.default_host any more than necessary, people should _not_ be touching that, no reason to make them even more aware of it, even though in this case, it is actually one of the few cases where the usage is correct. Also, this note is very specifically about rack-test, the behaviour is drastically different in Selenium for example, yet the note makes no mention about being specific to rack-test.
",jnicklas,2010-12-10 15:29:10
196,2010-11-22 10:55:14,"Thanks for the feedback. I'm new to this space, so I didn't know this was specific to rack-test. I've updated the wording as you suggested. Please let me know if this is OK. Thanks!
",trevorturk,2010-12-10 15:29:10
195,2010-11-12 14:50:46,"Currently when Capybara instantiates an instance of the Celerity browser it does not allow options to be passed down:

<S_CODE_TOKEN>
",mcrmfc,2010-11-17 08:37:15
195,2010-11-17 08:37:15,"Celerity driver now passes through options, closed by 5304a3367e4768a4a5643d3a1efbcb189589b398
",jnicklas,2010-11-17 08:37:15
194,2010-11-11 11:27:40,"Hello there,

Capybara is great, but there is one issue that I keep constantly hitting on. When I have code like this:

<S_CODE_TOKEN>

and a document like this:

<S_CODE_TOKEN>

Then the assert fails, even though it seems it should pass. Once one understands the behaviour of `within`, it's clear what's wrong. But I think the current behaviour makes capybara actually less useful that it could be. Also it is in contrary to the famous principle of least surprise.

So I suggest a change. I haven't looked at the source code too closely, but what I believe is happening, is this: `within` finds the first element matching the given selector (""tr"" in this case) and remembers it. Then methods like `has_css?` get scoped to this element. So the above code does actually this:

<S_CODE_TOKEN>

I suggest this change: Instead of remembering the found element, `within` remembers just the selector. Then `has_css?` (and his friends) inside the block will merge this selector with their argument. In case of css selectors, I think this would involve just string concatenation. Not sure about xpath, as I'm not familiar with it. So the above code would be effectively equivalent to this:

<S_CODE_TOKEN>

Comments?
",madadam,2010-11-17 08:05:30
194,2010-11-12 17:26:16,"This change seems to confuse a lot of people, so I'll elaborate a little more about why I decided that it was necessary.

First of all, I see a lot of people using the within method like you're showing in your example. I don't think that this is an appropriate way to use this method. Your example could have been written as:

<S_CODE_TOKEN>

as you can see, within was not necessary here. Instead, I find that within is much more useful when using actions, such as clicking a link or filling in a form element, in order to limit the action to _one_ element, when it otherwise would be ambiguous. For example:

<S_CODE_TOKEN>

I disagree with the use case of using within to scope for a particular kind of element.

Your proposed solution on how within could work, through string concatenation, is exactly what Capybara did in 0.3.9. This approach is deeply flawed, which is why we're no longer doing it. In order to understand why, read the section in the README on the // trap in XPath. Basically what it boils down to is that the following two statements are not even close to equivalent in xpath:

<S_CODE_TOKEN>

In 0.3.9 we were violating the XPath spec in a big way, now we're following the spec even though the behaviour is somewhat unintuitive. I think that is the _right_ call.
",jnicklas,2010-11-17 08:05:30
194,2010-11-17 08:05:30,"I'm closing this as a ""won't fix"".
",jnicklas,2010-11-17 08:05:30
194,2011-07-08 16:20:12,"We have started to collect Cucumber step definitions that work with all matching elements, instead of just the first: http://makandra.com/notes/1340-capybara-steps-to-match-stuff-within-any-selector
",triskweline,2010-11-17 08:05:30
194,2011-07-09 08:27:06,"@henning-koch: Oh dear. I would encourage you to really learn the Capybara API instead of creating steps like these, Cucumber/Gherkin is not a programming language. I wrote a blog post about this a while back: http://elabs.se/b/15.
",jnicklas,2010-11-17 08:05:30
194,2011-07-09 10:47:49,"@jnicklas: I'm aware of your stance on this, it's just that I don't agree. Keeping scenarios as free of implementation details as possible is a worthwhile quest, but the way you're recommending with hundreds of hand-crafted, single-use steps doesn't hit the sweet spot for us. We enjoy having reusable steps that take us most of the way (and they [don't](http://github.com/makandra/cucumber_factory) have to be ugly), and write custom steps when using a generic step would make a scenario too hard to read.
",triskweline,2010-11-17 08:05:30
193,2010-11-09 19:02:48,"Is there anyway to make Capybara render relative paths for the images? I'm trying to test for an image w/ a certain URL - but all img src's are absolute. 

If I debug within the view template itself, I can run the image_tag method and it produces relative paths. But when I show the page all images are absolute.

Thanks,
Dan Carper
",DCarper,2010-11-09 19:23:05
193,2010-11-09 19:23:05,"Leaving this up in case someone else does exactly what I did. As soon as I posted this I started browsing the source and found that paths are only rewritten when you do a #save_and_open_page. 

My test was failing because of a bad xpath and nothing more.

thanks / happy testing!
",DCarper,2010-11-09 19:23:05
192,2010-11-09 17:30:48,"I recented upgraded to capybara 4.0, but had to go back to 3.9 because 4.0 would not write text into a File field.  My automated tests fill_in the field with the full server name and path to the file and they stopped working.
",dlaterza,2010-11-17 21:18:48
192,2010-11-17 08:02:45,"why not use attach_file, since it's built into Capybara?
",jnicklas,2010-11-17 21:18:48
192,2010-11-17 21:18:47,"That worked.  Thanks!  I did not know about that method before.
",dlaterza,2010-11-17 21:18:48
191,2010-11-09 01:28:43,"For my acceptance tests I use Steak and Capybara (+ Envjs). When trying to find an element like this `find(""#ticker"").find(""li:eq(0)"")` it tells me `Unable to find 'li:eq(0)'`, but `find(""#ticker"").find(""li:eq(1)"")` return the correct first li element in the list. I am used to that eq selector starts with 0 (jQuery). Why does eq selector in Capybara starts with 1? Bug or feature?
",medihack,2010-11-09 16:24:34
191,2010-11-09 08:24:34,"I've never seen that selector before. It seems like you're trying ton achieve something like `nth-child` see: http://www.w3.org/TR/css3-selectors/#nth-child-pseudo

It looks like `:eq` is something weird that jQuery adds which isn't in any standard.
",jnicklas,2010-11-09 16:24:34
191,2010-11-09 12:07:27,"So it seems that `:eq` is an (unofficial) equivalent to `:nth-child`. Both start with index 1. Thank you Jonas.
",medihack,2010-11-09 16:24:34
190,2010-11-08 20:26:05,"Capybara::Node::Finders#find has an ensure block which discards any exception which is raised when the driver tries to locate an element. The exception from the driver generally contains information which is actually useful in figuring out why the element wasn't located, but Capybara throws this away and returns its own wholly uninformative message and a Capybara::ElementNotFound error. 

This behavior makes debugging much more difficult, and the ensure block should not exist. The Capybara::ElementNotFound exception should only be raised if no elements are returned from #all - if the driver raises some other exception, that should not be caught by #find. 
",vapir,2010-12-10 21:27:39
190,2010-11-08 21:40:59,"Ideally Capybara should wrap the underlying driver well enough for this never to be an issue. I find it very important to raise consistent errors, if we don't do the ensure thing, we risk raising any number of weird different erorrs, which makes it that much harder to recover from them in an application using Capybara.
",jnicklas,2010-12-10 21:27:39
190,2010-12-10 13:27:39,"Don&#39;t swallow errors in find, closed by 05d969756f4cfe586872c47a140849fd912c51ef
",unders,2010-12-10 21:27:39
190,2010-12-10 13:27:46,"Changed my mind about this one.
",elabs,2010-12-10 21:27:39
189,2010-11-08 11:22:33,"This is a suggested fix for [issue 188](https://github.com/jnicklas/capybara/issues#issue/188) and one other minor self-explanatory tweak.  Adding '=' to the beginning of the gsub pattern does the trick when the paths are attributes within HTML elements, although it might miss some other cases which haven't occurred to me - I'll leave that decision to you :)

Thanks!
",aspiers,2010-11-09 12:54:47
189,2010-11-08 15:14:14,"Can you explain how save_and_open_page was broken before, I don't really get it, and I don't understand how this helps :S
",elabs,2010-11-09 12:54:47
189,2010-11-08 16:22:41,"Please see [this thread](http://groups.google.com/group/ruby-capybara/browse_thread/thread/6ab9acb563007a4a) which I linked to from issue 188.
",aspiers,2010-11-09 12:54:47
188,2010-11-08 10:03:23,"(Originally reported in [this thread](http://groups.google.com/group/ruby-capybara/browse_thread/thread/6ab9acb563007a4a))

When I use save_and_open_page, the resulting HTML is completely
corrupted due to the absolute filesystem path to the root of my Rails
project appearing just before the end of any self-closing elements.
The culprit is this line within the rewrite_css_and_image_references
method in save_and_open_page.rb:

  response_html.gsub(/(""|')\/(#{directories.join('|')})/, '\1' + Capybara.asset_root.to_s + '/\2')

Unfortunately this turns HTML like this:

  <SCRIPT type=""text/javascript"" src=""/javascripts/prototype.js?1238580466""/> 

into HTML like this:

  <SCRIPT type=""text/javascript"" src=""/path/to/my/project/public/javascripts/prototype.js?1238580466""path/to/my/project/public//>

I have a patch which I will post here shortly.
",aspiers,2010-11-09 20:57:08
188,2010-11-08 16:32:34,"Damn, the Markdown preprocessor swallowed my example HTML.  It should have read:

Unfortunately this turns HTML like this:

<S_CODE_TOKEN>

into HTML like this:

<S_CODE_TOKEN>

See the original thread (linked above) for a full example.
",aspiers,2010-11-09 20:57:08
188,2010-11-09 12:57:08,"I'm still apprehensive about this, since I just can't wrap my head around what exactly was broken, I've merged this now though, on good faith that this actually does fix some problem. Failing specs in the future though, please!
",jnicklas,2010-11-09 20:57:08
188,2010-11-12 23:05:32,"OK you were right to be apprehensive, because I've taken another look and realised that I was fixing a symptom not the underlying cause.  I have a proper fix which I'll submit once I've learnt how to write a failing spec :)
",aspiers,2010-11-09 20:57:08
188,2010-11-15 10:25:10,"I've just issued a pull request which includes the proper fix and failing specs.
",aspiers,2010-11-09 20:57:08
187,2010-11-07 14:55:14,"I built a really simple extension to Capybara called [Swinger](http://jeffkreeftmeijer.com/2010/capybara-driver-swapping-on-rspec-with-swinger) to allow quick driver swapping using RSpec's new metadata feature last week. You can read more about it in the article.

I wanted to just get it out there to use it myself and see if it needs any improvement before turning it into a patch for Capybara, so I released it as a gem first. After some small fixes, I turned it into a patch. What do you think? :)
",jeffkreeftmeijer,2010-12-10 21:54:56
187,2010-11-08 16:18:47,"Is monkey patching RSpec the only/right way of achieving this? Seems a bit potentially dangerous.
",jnicklas,2010-12-10 21:54:56
187,2010-11-08 16:39:06,"I wanted to use RSpec's around filter to do something like this at first:

<S_CODE_TOKEN>

But since the `example` above is a proc and not an actual `RSpec::Core::Example` or `RSpec::Core::ExampleGroup`, I couldn't find a way to get the `metadata` to get the `:driver`. 

Extending `RSpec::Core::Example#run` _did_ allow me to get the metadata.

I'd love to know if anyone has a better way to solve this, though. :)
",jeffkreeftmeijer,2010-12-10 21:54:56
187,2010-11-09 13:25:31,"First let me put a disclaimer in place, I do _not_ use RSpec, but I _assume_ that whether or not it provides a ‘around-run’ hook has been investigated and the answer is ‘no’.

I personally think this kind of monkey-patching is safe enough, however I do understand your concern. This is what I would do:
- accept the monkey-patch, for now
- create a patch for RSpec adding a way to add a ‘around-run’ hook, which can then be discussed with the actual use case that’s in Capybara
- remove monkey-patch from Capybara

Obviously the work should probably be done by Jeff, as he is the one using it :)
",alloy,2010-12-10 21:54:56
187,2010-11-09 13:27:04,"Ok, I tried to fix the list formatting, but I fail… :-/
",alloy,2010-12-10 21:54:56
187,2010-11-09 13:49:38,"Someone posted this on twitter: https://gist.github.com/669072

Seems like a much more elegant solution, unless I'm missing something? We could use this to enable both:

<S_CODE_TOKEN>

From what I can see.
",jnicklas,2010-12-10 21:54:56
187,2010-11-09 14:04:09,"If Swinger also only allows you to set a driver for a complete group, instead of per-example, then yes.

In your example you are using `it ""foo"", :driver => :akephalos', but that does not work if you add before and after hooks. I.e. they would run for _each_ example in a group.
",alloy,2010-12-10 21:54:56
187,2010-11-09 14:15:04,"alloy: ye, but unless the example was tagged with the appropriate metadata they wouldn't actually do anything, no?
",jnicklas,2010-12-10 21:54:56
187,2010-11-09 14:19:46,"Ah yeah, you’re right, I looked to quick.

However, now that David has already picked it up, it’s probably better to do it that way, even if it internally would use the example from the gist. https://github.com/rspec/rspec-core/issues/issue/221
",alloy,2010-12-10 21:54:56
187,2010-11-09 14:50:53,"@jnicklas I'm not sure that will work, since I don't think it's able to access the `example.metadata`, which is the why Swinger can't use the around block: https://github.com/jnicklas/capybara/pull/187#issuecomment-526439

@alloy Swinger allows you to set the driver per example and per group. :)

I'll send in a new pull request when RSpec has metadata in its around blocks: https://github.com/rspec/rspec-core/issues#issue/221 :)
",jeffkreeftmeijer,2010-12-10 21:54:56
187,2010-12-10 13:54:56,"Add RSpec support in Capybara itself, closed by aa46894ce79af589fa5148bba2533e05a7f6e910

Just the basics of including Capybara and setting
up some metadata to switch between drivers.
",unders,2010-12-10 21:54:56
187,2010-12-10 14:02:41,"So I just added some basic rspec support. It's pretty simple and doesn't freedom patch RSpec in any way. I'm pretty sure this should work as you intended. I've also merged and pushed the addition of using_driver, since it seemed just generally useful (though it isn't actually used by the rspec driver switching).

P.S.: The name on the commit is wrong, I forgot to switch my git info, I am the author.
",jnicklas,2010-12-10 21:54:56
187,2010-12-11 13:54:18,"Good one. The only problem I see is that `capybara/rspec` will include capybara for any spec (i.e. in Rails, any model, controller or helper spec will include Capybara) which is not completely polite and might cause issues. In Steak, scenarios have the `type` metadata value set to `acceptance`, so you can include modules and configure hooks only for that type of specs. 

Some discussion about this issue in Steak's mailing list: http://groups.google.com/group/steakrb/browse_thread/thread/28fa2b843e0239fd
",cavalle,2010-12-10 21:54:56
187,2010-12-11 17:33:58,"Ahh, that seems like a good idea. Will have to fix that!
",jnicklas,2010-12-10 21:54:56
186,2010-11-07 13:49:16,"Strangely Webrat has the same problem :

https://webrat.lighthouseapp.com/projects/10503-webrat/tickets/298-webrat-includes-an-empty-file-field-as-part-of-the-fom-submission#ticket-298-3

With BrowserCMS, in forms with an image attachment, if the file input is left blank, the paramaters look like the following. File flelds look like ""work_image_attributes""=>{""attachment_file""=>""""} when they should not be included at all, or be an empty hash.
This causes a silent fail for browsercms that I haven't been able to fix.

{""artist""=>{""work_image_attributes""=>{""attachment_file""=>""""}, ""connect_to_page_id""=>"""", ""publish_on_save""=>""true"", ""sort_order""=>""0"", ""shop_id""=>"""", ""lock_version""=>""0"", ""last_name""=>""Flintstone"", ""description""=>""I like art"", ""has_profile""=>""0"", ""profile_image_attributes""=>{""attachment_file""=>""""}, ""connect_to_container""=>"""", ""email""=>""freda@flint.com"", ""first_name""=>""Freda""}, ""dhtml_selector""=>""disabled""}

when they should be :

{""artist""=>{""work_image_attributes""=>{}, ""connect_to_page_id""=>"""", ""publish_on_save""=>""true"", ""sort_order""=>""0"", ""shop_id""=>"""", ""lock_version""=>""0"", ""last_name""=>""Flintstone"", ""description""=>""I like art"", ""has_profile""=>""0"", ""profile_image_attributes""=>{}, ""connect_to_container""=>"""", ""email""=>""freda@flint.com"", ""first_name""=>""Freda""}, ""dhtml_selector""=>""disabled""}

This hack fixes it (only for BrowserCMS) :

# requires buzzcore gem (https://github.com/buzzware/buzzcore)

# hack to stop Capybara putting empty strings for file fields in the params

<pre>
Capybara::Driver::RackTest::Form.class_eval do 
    alias_method :orig_params, :params
    def params(button)
        result = orig_params(button)        
        result = MiscUtils.filter_multilevel_hash(result,nil,nil) do |hash,key,value| 
            hash.delete(key) if (key=='attachment_file') && (value=='')
        end
        result
    end
end
</pre>


I believe the problem is that the line 116 in rack_test_driver.rb :

native.xpath("".//input[not(@disabled) and (not(@type) or (@type!='radio' and @type!='checkbox' and @type!='submit' and @type!='image'))]"").map do |input|

selects file inputs when it shouldn't as there is code below to handle them.
",buzzware,2010-12-22 15:45:09
186,2010-11-25 15:21:03,"I've just discovered same problem.
",tsdbrown,2010-12-22 15:45:09
186,2010-12-08 01:38:26,"I believe this is caused by the fact that the CONTENT_TYPE of multipart forms with no (or empty) file fields is changed to 'x-www-form-urlencoded', which causes Rack to bypass its explicit exclusion of empty file upload params (introduced in Rails commit rails/rails@eced3d8c55c1bbae6915d7c6523c341bc682509a, and later merged back into Rack).

I've created a pull request (https://github.com/jnicklas/capybara/pull/224) that fixes this issue for Capybara, with some pointers for a more general solution.  If you want it to get commited back, let the team know!
",ryankinderman,2010-12-22 15:45:09
186,2010-12-22 15:45:09,"Pull request has been merged.
",jnicklas,2010-12-22 15:45:09
185,2010-11-06 20:06:05,"When server#boot fails on this line:

<S_CODE_TOKEN>

It raises a TimeoutError. But the line after this is:

<S_CODE_TOKEN>

Which fails to catch the error. Simple fix: change Timeout::Error to TimeoutError and Capybara will correctly report that it's not getting an answer from the server.
",swombat,2010-11-09 13:06:10
185,2010-11-09 13:06:10,"catch correct error, on server timeout, closed by b4c228f799fc0a7c738e980c8c9d7c8bb72d58a5
",jnicklas,2010-11-09 13:06:10
184,2010-11-05 14:49:37,"Kalv raised this[1] recently and I know you responded in the comments there.  I'd just like to add my voice and say that I really disagree with Capybara knowing anything about Rails 3 behaviour.  I can understand that it might not be desirable to just remove it (although that'd be my preference) but I'd at least like to be able to discuss it.  Where's the best place for that?

Cheers, Chris

[1] http://kalv.co.uk/2010/10/27/stop-being-clever-capybara/
",chrisroos,2011-08-30 09:20:38
184,2010-11-05 15:09:32,"I agree, but last time this discussion came up I was the only one objecting and a _lot_ of people wanted this. I think that since this is now the expected behaviour we shouldn't just randomly break it. I think the sensible way would be to make this a driver configuration option for the rack-test driver, so to switch it off you'd have to do (wordy, I know):

<S_CODE_TOKEN>

If we find that there is support for this, we'll change the default.

Thoughts?
",jnicklas,2011-08-30 09:20:38
184,2010-11-05 15:46:17,"Would you be able to point me to the relevant discussions you've had in the past please?

As for your suggestion, I think that'd definitely be a start, and it would give people that were aware of the issue a chance to have their tests fail rather than magically pass.  I wonder if we could take that slightly further and emit a warning if respect_data_method is set to true.  Or be slightly clever and only warn if it's set to true yet rails.js is missing (not foolproof by any means I realise).

Actually, I've just had another thought.  Could we introduce a specific Rails 3 driver that knows about these special attributes?  I'm still not massively keen even on that idea because if someone uses that and doesn't have the stock rails.js file they're still not testing against a realistic environment.

I've created a simple test to expose one side of the problem - where another rack app uses data-method in a way that's incompatible with the Rails 3 use[1]

[1] https://github.com/chrisroos/capybara-data-method-naughtiness
",chrisroos,2011-08-30 09:20:38
184,2010-11-09 13:09:11,"Well, we already have a capybara/rails file, so we could set `:respect_data_method` to true, and leave it false when not in a Rails environment. Care to cook up a patch for all this? (with specs please of course)
",jnicklas,2011-08-30 09:20:38
184,2011-08-02 18:42:57,"I have run into a similar situation which I submitted as an issue but then found this one already open.
https://github.com/jnicklas/capybara/issues/441

I ended up having to patch the Capybara::RackTest::Node.click method in order to get Capybara to ignore data-method. I too think there should be some kind of option to turn this behavior off.
",scottmartin,2011-08-30 09:20:38
184,2011-08-30 09:21:16,"This will be the default in Capybara 2.0
",jnicklas,2011-08-30 09:20:38
184,2011-08-30 09:22:48,"See also #478
",jnicklas,2011-08-30 09:20:38
183,2010-11-05 11:27:42,"Support for set() in html5 contenteditable nodes.
",phaza,2010-12-10 15:02:16
183,2010-11-08 16:20:19,"Why only Selenium? Does this not work on Culerity? I guess it doesn't really make sense on rack-test, but what is the behaviour going to be like for it?
",jnicklas,2010-12-10 15:02:16
183,2010-11-08 17:17:23,"I have no experience with Culerity, so I couldn't say. We just needed this for a project, so I figured I could ""Do the right thing""™ and fork, patch, test and send pull request.
I did however write a shared test so someone else could write the support for other drivers. I can't from the top of my head see any reason as to why rack-test can't support this.
",phaza,2010-12-10 15:02:16
183,2010-11-09 13:12:26,"I'm a little concerned how this would affect tests written in rack_test. Grated, contenteditable is still pretty rare, so it'd not really be a problem, but it seems like this patch leaves the behaviour ""undefined"" which is never a good thing. We should be clear about what's happening. Also it doesn't sound like this needs to be a shared behaviour at all, and making it work on Celerity should probably be trivial. Could you give it a shot?
",jnicklas,2010-12-10 15:02:16
183,2010-11-11 11:17:04,"I'm sorry, but I don't have the time. We're past this feature now and working on other parts.
",phaza,2010-12-10 15:02:16
183,2010-12-10 15:02:16,"I'm closing this then unfortunately. If someone can come up with a good implementation, which works across drivers, let me know.
",jnicklas,2010-12-10 15:02:16
182,2010-11-05 10:26:11,"Please note:
The selenium webdriver doesn't properly support clearing out contenteditable nodes, so basically set() is more like prepend than set.
Also note that I wasn't quite sure how to express in the gemspec a dependency on another git repostory(xpath), so I moved it into the Gemfile. I need the xpath repository because I had to make some changes to xpath to make it recognize contenteditable as a fillable field too. There's a pull request for that too.

Sorry about the mess, but I'm not sure how this could have been done any different. (Except simply providing patches)
",phaza,2010-11-05 11:28:30
182,2010-11-05 10:47:02,"Not really sure how to handle the XPath stuff, it's a deficiency in bundler that the Gemfile can't override gemspec dependencies, imho. I just posted a message about this to the bundler list: http://groups.google.com/group/ruby-bundler/browse_thread/thread/d4215c4930a63ffc

BTW: it's my policy to not increase the version number until a new version is released, I just find it easier to handle this way.

Could you redo the pull request without the version number bump and the changes to the gemspec and gemfile (I'll fix that).
",jnicklas,2010-11-05 11:28:30
181,2010-11-04 15:53:49,"All the changes are refactoring of existing code. No new feature is added . 

Take a look. 

Thanks
",neerajdotname,2010-11-04 23:36:08
181,2010-11-04 16:36:08,"Since I've titled myself the leader of a (possibly) growing crusade against the ugly, ugly ternary operator I'm going to have to say no to those changes, I also greatly prefer and/or/not over &&/||/!, it just reads nicer, and I actually think it's _more_ rubyesque.

Agreed on the whitespace patch though ;)
",jnicklas,2010-11-04 23:36:08
181,2010-11-04 16:53:03,"No problem. 

Also thanks for pointing to correct spelling of rubyesque. I struggled with it :-)

Thanks for the feedback.
",neerajdotname,2010-11-04 23:36:08
180,2010-11-03 23:28:26,"Hello,

I am trying to use capybara with cucumber and gem install is hanging when I try to install it. 

Like this:

[etagwerker@gesell project]$ gem install capybara -v=0.3.5
/Users/etagwerker/.rvm/rubies/ruby-1.8.7-p249/lib/ruby/site_ruby/1.8/rubygems/spec_fetcher.rb:254: warning: getc is obsolete; use STDIN.getc instead

Any ideas? What could be wrong? 

Thanks!
",etagwerker,2010-11-04 16:38:00
180,2010-11-04 16:38:00,"This sounds more like a Rubygems issue than anything related to Capybara, unless there's some kind of error in the gemspec, which I can't really imagine.
",jnicklas,2010-11-04 16:38:00
179,2010-11-03 18:23:17,"Hello, i`m from Brazil and i make cucumber features in Portuguese with UTF8 encode.

After version 0.4.0, all my features broken..

My ruby version, 1.9.2p0 (2010-08-18 revision 29036) [x86_64-darwin10.4.0]

<pre>
$ cucumber --backtrace --verbose --tags @bank_accountUsing the default profile...
Code:
  * features/support/env.rb
  * features/support/paths.rb
  * features/step_definitions/base_steps.rb
  * features/step_definitions/web_steps.rb
  * features/step_definitions/web_steps_pt-br.rb

Features:
  * features/admin/admin_bank_accounts.feature
Parsing feature files took 0m0.093s

.F--.F------------------------------------------------------------------------------

(::) failed steps (::)

incompatible encoding regexp match (UTF-8 regexp with ASCII-8BIT string) (Encoding::CompatibilityError)
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-1.2.1/lib/rack/utils.rb:16:in `gsub'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-1.2.1/lib/rack/utils.rb:16:in `escape'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test/utils.rb:23:in `build_nested_query'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test/utils.rb:18:in `block in build_nested_query'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test/utils.rb:17:in `each'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test/utils.rb:17:in `map'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test/utils.rb:17:in `build_nested_query'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test.rb:270:in `params_to_string'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test.rb:189:in `env_for'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test.rb:65:in `post'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/driver/rack_test_driver.rb:243:in `post'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/driver/rack_test_driver.rb:221:in `submit'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/driver/rack_test_driver.rb:153:in `submit'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/driver/rack_test_driver.rb:76:in `click'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-rails-0.3.2/lib/cucumber/rails/capybara_javascript_emulation.rb:15:in `click_with_javascript_emulation'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/node.rb:144:in `click'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/node/actions.rb:37:in `click_button'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/session.rb:273:in `method_missing'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/dsl.rb:93:in `click_button'
/Users/diegorv/Documents/rails/work/phenix/features/step_definitions/base_steps.rb:87:in `block in <top (required)>'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:48:in `instance_exec'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:48:in `block in cucumber_instance_exec'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:69:in `cucumber_run_with_backtrace_filtering'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:36:in `cucumber_instance_exec'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/rb_support/rb_step_definition.rb:62:in `invoke'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/step_match.rb:26:in `invoke'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/runtime/support_code.rb:138:in `invoke'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/rb_support/rb_world.rb:22:in `__cucumber_invoke'
/Users/diegorv/Documents/rails/work/phenix/features/step_definitions/base_steps.rb:17:in `block in <top (required)>'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:48:in `instance_exec'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:48:in `block in cucumber_instance_exec'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:69:in `cucumber_run_with_backtrace_filtering'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:36:in `cucumber_instance_exec'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/rb_support/rb_step_definition.rb:62:in `invoke'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/step_match.rb:26:in `invoke'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/step_invocation.rb:63:in `invoke'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/step_invocation.rb:42:in `accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:99:in `block in visit_step'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:98:in `visit_step'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/step_collection.rb:15:in `block in accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/step_collection.rb:14:in `each'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/step_collection.rb:14:in `accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:93:in `block in visit_steps'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:92:in `visit_steps'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/background.rb:38:in `block in accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/background.rb:48:in `block in with_visitor'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/scenario.rb:106:in `with_visitor'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/background.rb:47:in `with_visitor'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/background.rb:36:in `accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:57:in `block in visit_background'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:56:in `visit_background'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/feature.rb:33:in `accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:20:in `block in visit_feature'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:19:in `visit_feature'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/features.rb:29:in `block in accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/features.rb:17:in `each'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/features.rb:17:in `each'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/features.rb:28:in `accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:14:in `block in visit_features'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:13:in `visit_features'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/runtime.rb:43:in `run!'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/cli/main.rb:48:in `execute!'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/cli/main.rb:21:in `execute'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/bin/cucumber:8:in `<top (required)>'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/bin/cucumber:19:in `load'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/bin/cucumber:19:in `<main>'
features/admin/admin_bank_accounts.feature:11:in `Dado que o usuario tem a permissao'

Failing Scenarios:
cucumber features/admin/admin_bank_accounts.feature:15 # Scenario: Acessar a tela gerencia de usuarios

8 scenarios (1 failed, 7 skipped)
117 steps (1 failed, 115 skipped, 1 passed)
0m1.476s
</pre>
",diegorv,2011-04-25 09:09:49
179,2010-11-04 16:40:19,"It's interesting that we've had the exact same problem in 0.3.9 and it was fixed by sending as ASCII instead of as UTF-8 (so the other way round of what you're seeing). I'd try not adding the utf-8 header to your files (it's not necessary unless Ruby loudly complains it is). Other than that I'll leave this to the people who have any idea what they're doing with regards to encodings (i.e. not me).
",jnicklas,2011-04-25 09:09:49
179,2011-04-25 09:09:49,"This is probably the same issue as #243, closing.
",jnicklas,2011-04-25 09:09:49
178,2010-11-01 18:29:42,"When some specs using Selenium fails, the runner don't return 1 as status code, it returns 0 (but some test failed, it should return 1).

I confirmed with a little application, I will post here the used files to reproduce the bug:

Gemfile
    source 'http://rubygems.org'

<S_CODE_TOKEN>

spec/spec_helper.rb
    ENV[""RAILS_ENV""] ||= 'test'
    require File.expand_path(""../../config/environment"", **FILE**)
    require 'rspec/rails'
    require 'capybara'
    require 'capybara/dsl'

<S_CODE_TOKEN>

spec/failed_spec.rb
    require File.expand_path(""../spec_helper"", **FILE**)

<S_CODE_TOKEN>

try to run:
    RAILS_ENV=test rspec spec/failing_spec.rb

them:
    echo $?

the result should be 1, but returns 0.
It only happens when using Selenium driver, if change to default driver (config on spec_helper) it returns 1, as it should.
",wilkerlucio,2011-03-10 23:19:30
178,2010-11-01 21:12:56,"That's very odd, unfortunately I know next to nothing about the RSpec internals and have no idea what could be causing this :S
",jnicklas,2011-03-10 23:19:30
178,2010-11-01 22:13:05,"maybe the opening of firefox is causing the selenium to return the exit code of firefox (which should be 0) and replacing the exit code of program.

maybe Im totally wrong too... its just a theory...
",wilkerlucio,2011-03-10 23:19:30
178,2010-11-09 13:14:02,"That's not entirely unreasonable. It might have something to do with threading issues as well, since we're launching the Rails app on a separate thread. Any chance you could investigate this further?
",jnicklas,2011-03-10 23:19:30
178,2010-12-10 12:50:05,"I have the same issue but using test::unit

File test/capybara_helper.rb :

<pre>
require File.expand_path(File.join(File.dirname(__FILE__), ""test_helper""))

require 'capybara/rails'
require ""selenium-webdriver""
require 'capybara/dsl'

class CapybaraTest &lt; ActionController::IntegrationTest
  include ActionController::RecordIdentifier
  include Capybara
  Capybara.default_driver = :selenium
  Capybara.default_selector = :css
  Capybara.default_wait_time = 5

  self.use_transactional_fixtures = false

  def login
    visit(new_user_session_path)

    within(""#user_new"") do
      fill_in 'Login', :with => 'a'
      fill_in 'Password', :with => 'b'
    end
  end
end
</pre>


File: test/integration/login_test.rb

<pre>
require 'capybara_helper'

class LoginTest &lt; CapybaraTest

  test ""I can login and log out"" do
    login() # Comment and uncomment to see the difference in runner exit code
    assert_equal 1,2
  end

end
</pre>


Commenting calling the ""login()"" method in the test leads to runner returning 1 which means error. Running selenium however (uncommmented line) leads to returning 0.
",paneq,2011-03-10 23:19:30
178,2010-12-10 14:32:21,"I checked that using selenium webdriver without capybara does not cause this problem. Oh and btw I'm using capybara 0.3.9

This works fine:

test/capybara_helper.rb :

<pre>
require File.expand_path(File.join(File.dirname(__FILE__), ""test_helper""))

require ""selenium-webdriver""

class CapybaraTest &lt; ActionController::IntegrationTest
  self.use_transactional_fixtures = false
  def login
    f = Selenium::WebDriver.for(:firefox)
    f.navigate.to(""http://google.com"")
    f.close
  end
end
</pre>


test/integration/login_test.rb :

<pre>
require 'capybara_helper'
class LoginTest &lt; CapybaraTest
  test ""I can login and log out"" do
    login
    assert_equal 1,2
  end
end
</pre>
",paneq,2011-03-10 23:19:30
178,2010-12-10 14:36:35,"Running this way:

<pre>
require 'capybara_helper'
class LoginTest &lt; CapybaraTest
  before do
    @f = Selenium::WebDriver.for(:firefox)
  end

  test ""I can login and log out"" do
    @f.navigate.to(""http://google.com"")
    assert_equal 1,2
  end

  after do
    @f.close
  end
end
</pre>


also returns proper error code (1) so probably it is a capybara bug.
",paneq,2011-03-10 23:19:30
178,2010-12-10 15:03:19,"I looked at capybara/driver/selenium_driver.rb :

<pre>
  def self.driver
    unless @driver
      @driver = Selenium::WebDriver.for :firefox
      at_exit do
        @driver.quit
      end
    end
    @driver
  end
</pre>


and was able to reproduce the bug:

<pre>
require 'capybara_helper'

class LoginTest &lt; CapybaraTest

  test ""I can login and log out"" do
    @driver = Selenium::WebDriver.for :firefox
    at_exit do
      @driver.quit
    end
    @driver.navigate.to(""http://google.com"")
    assert_equal 1,2
  end
end
</pre>


This is more or less what capybara does, doesn't it ?

I hope it will be useful for you.
",paneq,2011-03-10 23:19:30
178,2010-12-11 16:04:48,"Running it with minitest returns wrong exit code:

<pre>
require 'rubygems'
require 'selenium-webdriver'
require 'minitest/autorun'
class TestMeme &lt; MiniTest::Unit::TestCase
  def test_flunk
    @driver = Selenium::WebDriver.for :firefox
    at_exit do
     @driver.quit
    end
    @driver.navigate.to(""http://google.com"")

    flunk(""no reason"")
  end
end

17:00 <ruby-1.9.2-head> ~/develop/gavdihrpif (masterpatch) > ruby x.rb 
Loaded suite x
Started
F
Finished in 5.544404 seconds.
  1) Failure:
test_flunk(TestMeme) [x.rb:15]:
no reason

1 tests, 1 assertions, 1 failures, 0 errors, 0 skips
17:01 <ruby-1.9.2-head> ~/develop/gavdihrpif (masterpatch) > echo $?
0
</pre>
",paneq,2011-03-10 23:19:30
178,2010-12-11 17:07:04,"Selenium webdriver starts a new firefox process using ChildProcess gem. Using it we can reporoduce the bug:

<pre>
require 'minitest/autorun'

require 'rubygems'
require 'childprocess'

class TestMeme &lt; MiniTest::Unit::TestCase

  def test_flunk
    @process = ChildProcess.build(""sleep 100"")
    @process.start

    at_exit do
      begin
        @process.poll_for_exit 5
      rescue ChildProcess::TimeoutError
        @process.stop 5
      end
    end
    flunk(""no reason"")
  end
end
</pre>


If we lower the sleep time of subprocess to 0 then the return code is 1 which is ok. When it sleeps for 100 second then there is timeout after 5 seconds and the return code of the whole programm is unfortunately 0.
",paneq,2011-03-10 23:19:30
178,2010-12-11 17:36:08,"Wow, what a weird bug. This is all a bit over my head, do you have a suggestion how we can get this fixed?
",jnicklas,2011-03-10 23:19:30
178,2010-12-11 17:51:00,"I'm going to create a bug for minitest. I'm not sure we can fix this easily unless there is some hook in testing framework that is run after all tests are finished. That could be used instead of at_exit(){}. Let's see what people from ruby think about it. Maybe it is even deeper bug in ruby that the error code is returned wrongly when another subprocess is closed in at_exit hook. Who knows... :-)
",paneq,2011-03-10 23:19:30
178,2010-12-12 17:31:30,"http://redmine.ruby-lang.org/issues/show/4153
",paneq,2011-03-10 23:19:30
178,2010-12-12 23:08:04,"This is a bug in selenium or capybara calling exit in an at_exit handler (I haven't tracked it down, but above it looks like @driver.quit prolly does it). Libraries shouldn't do that 99% of the time (test runner frameworks being an obvious exception). I have a workaround for minitest that I'm testing, but you'll have this problem with all testing frameworks out there that don't anticipate bugs like this.
",zenspider,2011-03-10 23:19:30
178,2010-12-12 23:20:21,"I just committed a fix to minitest. Please test.

This still won't change things with rspec and others. I suggest you track down the real problem and fix it too.
",zenspider,2011-03-10 23:19:30
178,2010-12-13 09:01:30,"I would be glad to test it however i do not know where to find your patch.
",paneq,2011-03-10 23:19:30
178,2010-12-13 09:11:31,"All our stuff is in our seattlerb group.

https://github.com/seattlerb/minitest
",zenspider,2011-03-10 23:19:30
178,2010-12-13 09:28:39,"Wow! This magic really works. Could you tell what should I do to start using this patch across all computers right now ? Is there an easy way to use minitest from gem or git instead of minitest included with ruby 1.9.2 ? I'm not sure how to do that ? I tested the fix using monkey-patching but I do not want to relay on that in the long term.
",paneq,2011-03-10 23:19:30
178,2010-12-13 09:40:56,"MiniTest has been fixed and I created the ticket for rspec runner with links to this discussion and the solution that they could use to fix the same issue. https://github.com/dchelimsky/rspec/issues/issue/12
",paneq,2011-03-10 23:19:30
178,2010-12-13 10:13:22,"Guys... the bug is in capybara or selenium. Don't push this out on all the testing frameworks out there. It doesn't scale. Please identify the root cause and fix it.

paneq: you can use minitest as a gem by activating it using the 'gem' method before you require minitest.
",zenspider,2011-03-10 23:19:30
178,2010-12-13 10:38:46,"I have trouble finding an error in capybara/selenium with that. As you can see at : https://github.com/jnicklas/capybara/issues#issue/178/comment/605003 new process is spawned and then kill at at_exit hook. I could not find any code calling exit from the same process. I'm trying to reproduce the bug without using 'childprocess' library (which is used by selenium).
",paneq,2011-03-10 23:19:30
178,2010-12-13 10:48:16,"This is getting stranger with every minute.

This works fine:

<pre>
class TestMeme &lt; MiniTest::Unit::TestCase
  def test_flunk

    pid = fork do
      exec(""sleep 100"") # firefox in reality
    end
   
    at_exit do
        ::Process.kill ""TERM"", pid
        sleep 2
        ::Process.kill ""KILL"", pid
        sleep 2
    end

    flunk(""no reason"")
  end
end
</pre>


This not:

<pre>
class TestMeme &lt; MiniTest::Unit::TestCase
  def test_flunk
    pid = fork do
      exec(""sleep 100"") # firefox in reality
    end
   
    at_exit do
      begin
        ::Process.kill ""TERM"", pid
        raise ""blah""
      rescue
        sleep 2
        ::Process.kill ""KILL"", pid
        sleep 2
      end
    end

    flunk(""no reason"")
  end
end

</pre>


Ruby bug?
",paneq,2011-03-10 23:19:30
178,2010-12-13 10:51:55,"And capybara => selenium-driver => childprocess uses this version with begin/rescue/end block under the hood to manage firefox process of courese.
",paneq,2011-03-10 23:19:30
178,2010-12-13 10:53:30,"My previous example was tested on the unpatched minitest. It works fine with the patched version.
",paneq,2011-03-10 23:19:30
178,2010-12-13 11:05:11,"@zenspider - Do you still think that this is a bug in capybara/selenium ? Because i think is more ruby/minitest thing. Your patch is fine. I do not think that we do something wrong here that could be patched in capybara/selenium. And i have no idea why begin/rescue/end block makes the difference.
",paneq,2011-03-10 23:19:30
178,2010-12-13 16:38:26,"@zenspider - how to bundle 'minitest' ?

<pre>
Updating https://github.com/seattlerb/minitest.git
Fetching source index for http://rubygems.org/
Could not find gem 'minitest (>= 0, runtime)' in https://github.com/seattlerb/minitest.git (at master).
Source does not contain any versions of 'minitest (>= 0, runtime)'

</pre>
",paneq,2011-03-10 23:19:30
178,2011-01-06 20:37:17,"I added the following debugging code at the top of my `test/test_helper.rb` in my Rails app:

<S_CODE_TOKEN>

This showed me that:
1. Minitest registers its at_exit hook.
2. Minitest's at_exit hook is triggered, causing all tests to be run.
3. When the first page.visit() call occurs in my capybara test, the selenium webdriver is activated.  As part of this activation, the following new at_exit hooks are registered:
   
   #Proc:0x00000003eb1510@/home/sunny/.rvm/gems/ruby-1.9.2-p136@rails3/gems/selenium-webdriver-0.1.0/lib/selenium/webdriver/common/file_reaper.rb:38
   
   #Proc:0x00000005314bd8@/home/sunny/.rvm/gems/ruby-1.9.2-p136@rails3/gems/capybara-0.4.0/lib/capybara/driver/selenium_driver.rb:87
4. My capybara test and all other tests finish running.
5. Minitest's at_exit hook finishes, setting the proper value for Ruby's exit status.
6. The _new_ at_exit hooks (registered in step #3) are run in the following order.  They screw up Ruby's exit status that was set by Minitest in step #5.
   
   #Proc:0x00000005314bd8@/home/sunny/.rvm/gems/ruby-1.9.2-p136@rails3/gems/capybara-0.4.0/lib/capybara/driver/selenium_driver.rb:87
   
   #Proc:0x00000003eb1510@/home/sunny/.rvm/gems/ruby-1.9.2-p136@rails3/gems/selenium-webdriver-0.1.0/lib/selenium/webdriver/common/file_reaper.rb:38

In summary, I observed that child at_exit hooks registered within the execution of a parent at_exit hook are executed after the parent and all of its siblings are executed.  Perhaps this is a bug in Ruby?  (I would expect all child hooks to be executed just before their parent returns.)

For the time being, the workaround seems to be to force capybara's at_exit hooks (see step #3) to be registered just after step #1 and before step #2.  Is this possible?
",sunaku,2011-03-10 23:19:30
178,2011-02-15 06:58:10,"I reported the [issue of nested at_exit hooks running in strange order](http://redmine.ruby-lang.org/issues/show/4400) on the Ruby issue tracker.
",sunaku,2011-03-10 23:19:30
178,2011-02-15 20:06:23,"[Matz just approved](http://redmine.ruby-lang.org/issues/show/4400#note-6) a fix for the [nested at_exit execution order](http://redmine.ruby-lang.org/issues/show/4400) issue, so we'll be seeing a fix for this problem in Ruby itself in the near future.  Hurray!
",sunaku,2011-03-10 23:19:30
178,2011-03-10 15:20:53,"It seems to me that _if_ there should be an interim fix to support Ruby <1.9.3, that fix should probably be in the testing frameworks, not in Capybara (unless someone wants to submit a patch).  May I suggest that we close this issue?
",joliss,2011-03-10 23:19:30
178,2011-03-10 15:23:41,"I think we can. It was fixed in other libraries.
",paneq,2011-03-10 23:19:30
178,2011-03-10 18:31:26,"@paneq what ""other libraries"" are you referring to?
",sunaku,2011-03-10 23:19:30
178,2011-03-10 23:09:06,"I just meant ruby and minitest :-)
",paneq,2011-03-10 23:19:30
178,2011-03-10 23:19:30,"Closing this.
",jnicklas,2011-03-10 23:19:30
178,2011-06-22 14:56:37,"Workaround in rspec-core, https://github.com/rspec/rspec-core/pull/410.
",dblock,2011-03-10 23:19:30
178,2011-06-22 16:25:29,"@dblock:

In your Gemfile:
<S_CODE_TOKEN>
```
",paneq,2011-03-10 23:19:30
178,2011-06-22 16:26:30,"@paneq: i am not using minitest, made a pull request in rspec-core copying from minitest tho - thanks.
",dblock,2011-03-10 23:19:30
178,2011-06-22 16:31:24,"@dblock  - sorry, I didn't notice that the original bug is about rspec. Do you use 1.9.2 ? Does the problem occur on patchlevel 180 ?
",paneq,2011-03-10 23:19:30
178,2011-06-22 17:02:34,"@paneq: yes to both
",dblock,2011-03-10 23:19:30
178,2011-06-22 21:08:20,"Unfortunately 1.9.2.p180 does not contain the fix for nested at_exit execution :-( 

The workaround could be to use 1.9.2.p180 as a base and cherry-pick this commit :  https://github.com/ruby/ruby/commit/36a0a1a3f3d6ede4c8d42c3beb2e5c24ea649f3c but I don't know if it applies cleanly.

If it does then installing such custom ruby build with rvm should not be that hard. 
",paneq,2011-03-10 23:19:30
178,2011-06-22 22:01:47,"@paneq: or take my pull request! https://github.com/rspec/rspec-core/pull/410 
I think it's innocent as far as rspec goes, no?
",dblock,2011-03-10 23:19:30
178,2011-06-22 22:08:57,"@dblock - innocent as lamb :-)
",paneq,2011-03-10 23:19:30
178,2011-08-23 12:21:06,"The workaround in RSpec is having other ugly consequences. Looks like https://github.com/jnicklas/capybara/pull/463 might fix this, please consider merging.
",dblock,2011-03-10 23:19:30
178,2011-09-25 21:01:02,"I'm late to the game, but the problem boils down to this - a begin/rescue inside the at_exit resets $! from SystemExit to nil. ChildProcess doesn't mess with the process' exit codes, but it does have inevitable begin/rescue blocks as part of reliably killing the child.

<S_CODE_TOKEN>

1.8.7 gets it right (IMHO):

<S_CODE_TOKEN>

But even after @sunaku's [issue](http://redmine.ruby-lang.org/issues/show/4400) fixed at_exit ordering, the begin/rescue issue is still in 1.9.3:

<S_CODE_TOKEN>

Rubinius gets it right:

<S_CODE_TOKEN>

As does JRuby:

<S_CODE_TOKEN>

This is a nasty one for sure. I'm tempted to file it as a bug in 1.9.

cc: @dchelimsky, @paneq
",jarib,2011-03-10 23:19:30
178,2011-09-25 21:04:54,"Looks like it was already filed against 1.9 [here](http://redmine.ruby-lang.org/issues/5218)
",jarib,2011-03-10 23:19:30
177,2010-11-01 04:36:14,"We need to exclude file inputs with multiple (HTML5) i.e. <input type='file' name='image[file][]' multiple /> from this check because it will cast the value to_s which totally kills file uploads when inside an array (array is required for multiple files).

All my patch does is exclude (@type='file' and @multiple) from the first xpath check on the rack_test_driver which solves all the issues for me. All tests pass as before.

Thanks!
",parndt,2010-12-10 15:04:14
177,2010-11-06 12:10:16,"Hello? This is a relatively important change for anybody using `<input type='file' multiple>` :-)
",parndt,2010-12-10 15:04:14
177,2010-11-08 16:27:22,"It seems like it should probably exclude all input fields with @file, since those are handled further down, if I'm  reading this right. Any reason it's singling out just file fields with multiple? Also, I'd feel much better about this change if you could include a spec for the bug this is supposed to be fixing, since I've never seen that issue before.

Also: every change is important for someone. It's open source. I put in as much time as I _like_ and as I can spare. Sometimes it's going to take me a couple of days or maybe even a couple of weeks to deal with an issue. Sorry, that's just the way it is.
",jnicklas,2010-12-10 15:04:14
177,2010-11-10 01:48:47,"Cool - I'll give it a try without being so specific about @multiple and see about writing a spec or two for this.
",parndt,2010-12-10 15:04:14
177,2010-11-10 22:46:31,"Jonas, you were (of course) right! @multiple is not required in the exclusion test. I've updated this with another commit and added specs per request.
Hope this helps to show what I was yabbering on about :-)

Thanks again for Capybara, it certainly makes our lives easier.
Phil
",parndt,2010-12-10 15:04:14
176,2010-10-29 16:18:37,"I have added the :between, maximum and :minimum matcher conditions to has_css? and has_no_css?  These make Capybara's matcher syntax more closely approximate Rails TestUnit assert_select and Webrat's have_selector.

Complete RSpec tests are provided and all pass in Rack Session.  I do not have the other environments available.  However, I do not believe that this lack is a material defect for this change.  I had to make additions to the sample html file used in the tests.  

I separated the .gitignore change to not track vim .swp files into a separate commit.
",byrnejb,2010-11-09 12:35:32
175,2010-10-28 02:58:10,"Followup to discussion at http://github.com/jnicklas/capybara/commit/ac4a340d04831630629aa4a23d1d8e139f5a8d5f

For example, to use mongrel rather than thin or webrick:

<S_CODE_TOKEN>
",jfirebaugh,2010-10-29 18:55:40
175,2010-10-29 11:55:43,"Really nice job, well done!
",elabs,2010-10-29 18:55:40
175,2016-10-20 20:48:54,"this is a great feature.
is there documentation somewhere so can configure it using unicorn, or puma or thin without knowing the ins and out of each?

thanks
",mathieujobin,2010-10-29 18:55:40
175,2016-10-20 21:47:34,"@mathieujobin puma is already there, just set `Capybara.server = :puma` - https://github.com/jnicklas/capybara/blob/master/lib/capybara.rb#L481 - for unicorn or thin that would be up to you - see the docs for Capybara::register_server.  In the future please ask howto questions in the mailing list or on gitter as requested in the README
",twalpole,2010-10-29 18:55:40
174,2010-10-27 16:54:35,"I found that in version ""0.4.0.rc"" ""within"" method changed and now executes within first instance of the selector, not in all of them. This function was changed a lot of times in this release, and I couldn't find the right commit, but why behavior of this function was changed?

In some situations it introduced few complications. For example here:
        <h3>Fax / Phone</h3>
        <div><label>Phone</label><span>0-12 345-678-90</span></div>
        <div><label>Fax</label><span>0-12 345-678-90</span></div>
        <div><label>Mobile</label><span>0-12 345-678-90</span></div>

I would check existance of word ""Fax"" with this step:
        Then I should see ""Fax"" within ""label""
Before, it worked, but now only first label is checked.

Or in this situation:

<S_CODE_TOKEN>

I would check if letters are shown with the following steps
        Then I should see ""A"" within "".letter""
        And I should see ""B"" within "".letter""
After release of ""0.4.0.rc"" second step will fail.
",netizer,2010-10-27 22:30:25
174,2010-10-27 22:30:24,"This is a documented change, which is in the History file and the release notes for Capybara 0.4.0. It's not like this is a regressions, it was a conscious choice to change the behaviour this way. There are better ways for achieving the things you want to achieve, don't depend on the default cucumber web steps, they suck anyway. Something like:

<S_CODE_TOKEN>

would work perfectly fine for the second example, for instance. within is supposed to be used for restricting actions to one specific area of the page. Stuff like a row in a table, the sidebar, the footer, a particular list item, that kind of thing. I think that using within to refer to multiple elements on the page is a misuse of its intended function.

I'm closing this issue, since it definitely is not a regression, if you want to take this discussion further, please post to the mailing list.
",jnicklas,2010-10-27 22:30:25
173,2010-10-27 14:41:42,"is there some way to check that a form/link has been opened in a new target/tab?

i found this on stackoverflow, so i guess it would be, at least in selenium: 
http://stackoverflow.com/questions/3282043/how-to-verify-a-target-blank-link-using-selenium
",phoet,2010-10-27 18:56:31
173,2010-10-27 15:07:28,"Capybara already has some limited support for switching between windows, did you try it out and see if it works to solve this problem?
",jnicklas,2010-10-27 18:56:31
173,2010-10-27 15:23:01,"can you give me some pointers where to find documentation or examples for that? i did not find anything on google.
",phoet,2010-10-27 18:56:31
173,2010-10-27 15:29:08,"http://rdoc.info/github/jnicklas/capybara/master/Capybara/Session#within_window-instance_method

Since it doesn't give you a list of current handles, it might not work so well for you, but worth a try.
",jnicklas,2010-10-27 18:56:31
173,2010-10-27 18:56:31,"thanks for the pointer, i solved it this way:

<S_CODE_TOKEN>
",phoet,2010-10-27 18:56:31
173,2013-04-26 19:12:47,"@phoet did that actually solve your problem?  It doesn't seem like poltergiest supports window_handles.  See https://github.com/jonleighton/poltergeist/issues/178
",drewB,2010-10-27 18:56:31
173,2013-04-27 08:31:12,"@drewB i do not remember, actually :smile_cat: 
",phoet,2010-10-27 18:56:31
172,2010-10-27 11:52:07,"I'm using Selenium-WebDriver.
I tried to double-click with two calls to click(), but that didn't work (Ext JS Framework). Manually double clicking in Firefox works though.
Also i need a way to right click stuff - I didn't find anything in the docs.
",pschyska,2010-11-09 13:15:24
172,2010-10-27 15:18:37,"Capybara doesn't expose that functionality. Unfortunately, just scanning the selenium docs quickly it doesn't look like they expose this either. Culerity/celerity do have right and double click options. I think you should start by looking into if selenium supports this, and if not if they'll ever add it.
",jnicklas,2010-11-09 13:15:24
172,2010-11-09 13:15:15,"Closing this for now. If someone wants this, please send a pull request that works at least in Selenium and Celerity.
",jnicklas,2010-11-09 13:15:24
172,2013-05-10 08:15:11,"FYI Selenium does now support double clicks. I have a monkey patch that I use: 

<S_CODE_TOKEN>
",kippr,2010-11-09 13:15:24
172,2013-10-18 07:35:31,"Hi all,
could someone please tell me whether is there right-click already available in selenium/capybara?
",sashabanani,2010-11-09 13:15:24
172,2013-10-22 13:52:56,"Hi Guys,
this one works for me:

<S_CODE_TOKEN>
",sashabanani,2010-11-09 13:15:24
171,2010-10-27 03:51:46,"In Chrome and Firefox, the XPath .//select//option[@selected] will return only the _original_ option selected in the select (i.e. the one that has selected=""true"" or selected=""selected"" in the HTML), not the option currently selected by the user. This means that the following will fail unless `value` was the originally selected item:

<S_CODE_TOKEN>

The following works as expected (but requires selenium driver):

<S_CODE_TOKEN>
",jfirebaugh,2010-12-31 19:07:02
171,2010-12-21 07:37:08,"A similar problem will exist with `has_checked_field?`/`has_unchecked_field?` and `has_field?(locator, :with => value)`. The `checked`, `selected` and `value` _attributes_ do not dynamically reflect their respective DOM _properties_, hence there's no way to implement these matchers entirely via XPath in a way that reflects user input. (This is why jQuery has custom selectors such as `:checked` and `:selected`.)
",jfirebaugh,2010-12-31 19:07:02
171,2010-12-22 15:34:38,"It's unlikely that this is fixable at all, unfortunately.
",jnicklas,2010-12-31 19:07:02
171,2010-12-22 18:48:52,"Not at the XPath level, but it should be fixable at the matcher level. Instead of passing the :with, :selected, and :checked options on to XPath::HTML, they should retrieve all inputs and filter based on Element#value and new Element#selected? and Element#checked? methods that make driver-specific checks.

I can work on a patch for this.
",jfirebaugh,2010-12-31 19:07:02
171,2010-12-22 20:33:46,"Ahh, that sounds like a great idea. It'll also remove some uncomfortable logic from the XPath gem, maybe.
",jnicklas,2010-12-31 19:07:02
171,2010-12-31 19:07:02,"Ensure that matchers work correctly after actions, closed by 9d6aebdea890216fe37236b78844838d7eaeccd1

With browser-based drivers, the has_value?, has_select?, and
has_checked_field? matchers (and their negative counterparts)
did not always work correctly. It is not possible to determine
the dynamic state of inputs purely with XPath, because XPath
has access only to the value, selected, and checked _attributes_,
and only the corresponding _properties_ change in response to
user input. This commit replaces the pure XPath implementation
with one that retrieves all matching inputs and then filters the
results using driver-specific means that do reflect user input.
",jfirebaugh,2010-12-31 19:07:02
170,2010-10-26 18:30:34,"Sorry if its already solved, but I can't found how to deal with dialogs while using Selenium, for example, a delete button that shows a confirmation dialog, there is a way to automatic click in OK or Cancel on these dialogs? Or I really need to do it by hand while test is running?
",wilkerlucio,2010-10-27 02:46:03
170,2010-10-26 19:46:03,"Unfortunately there is currently no way of handling these in Selenium. Culerity does have some facilities, but it's not very extensive. If you want this fixed, talk to the selenium people ;)
",jnicklas,2010-10-27 02:46:03
170,2010-10-31 13:17:59,"I have a tip about it (for confirmations and alerts), one through to make the test don't stop at them, you can do the following on your layouts:

<S_CODE_TOKEN>

This way all the confirmations will automatic return true, without popping up, this is a fast solution, a better one can be using custom dialogs in Javascript, so you can confirm and remove them.
",wilkerlucio,2010-10-27 02:46:03
170,2011-01-05 00:18:03,"the weired thing is that selenium webdriver states that any confirm is overwritten by selenium and will always return true and not show up. 

in selenium webdriver you can find this in the docu for the choose_ok_on_next_confirmation method in lib/selenium/client/legacy_driver.rb

<S_CODE_TOKEN>

but it does not work like it says it does. Too bad.
",aka47,2010-10-27 02:46:03
170,2011-01-09 10:18:26,"I usually fake this by doing something like:

<S_CODE_TOKEN>

or something like that. seems to do the trick.
",jnicklas,2010-10-27 02:46:03
170,2011-03-24 14:25:23,"I do the whole fake thing like @jnicklas does as well - however with the recent upgrade to FF4 these all break.  Anyone have an alternative?
",thechrisoshow,2010-10-27 02:46:03
169,2010-10-26 05:34:30,"Not sure if this is a rails bug or a capybara bug...

get :signin, :to => 'devise/sessions#new', :as => ""new_user_session"", :format => :iphone, :constraints => {:user_agent => /iPhone/}

When rails try to test this constraint it calls match on a nil object.
",quasor,2011-05-19 16:25:11
169,2010-10-26 06:07:33,"Sounds legitimate. But this should probably be fixed in rack-test. Care to file an issue on their tracker?
",jnicklas,2011-05-19 16:25:11
169,2011-05-19 16:25:11,"Closing this since it isn't really a Capybara issue, and can probably be worked around with the new headers option for the rack-test driver.
",jnicklas,2011-05-19 16:25:11
168,2010-10-25 16:48:55,"The readme mentions that if you are testing a non-Rails app, you need to set the Rack app manually. I'm trying to test a PHP application using cucumber. Is Capybara an appropriate solution? Or should I be looking elsewhere?
",andrewhavens,2010-10-26 03:16:00
168,2010-10-25 20:15:43,"Yes it does work, but not with the rack-test driver (for obvious reasons ;)). Check out the README section on how to work with remote servers. You need to take care of starting the server yourself of course.

This is most definitely not a bug or feature request though, please use the mailing list for these kinds of questions!
",jnicklas,2010-10-26 03:16:00
168,2010-10-26 03:13:32,"Thanks! I've joined the mailing list, so you may see my questions there. I wish github had a Question and Answer feature kind of like Stack Overflow. =/
",andrewhavens,2010-10-26 03:16:00
167,2010-10-25 16:47:56,"Howdy - 

Noticed in the latest capybara that my select tags comparisons via cucumber-rails (step_definitions/web_steps.rb) started failing. 

With the updated code in rack_test_driver.rb, there was no easy way to produce the content of the selected option within a select field. node[:value] produces the value, but for testing purposes I needed to check the displayed text content, not the value, of the selected option. 

For example, within the cucumber-rails default web_steps.rb:
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
But now I can now do:
    field_value = (field.tag_name == 'textarea') ? field.text : (field.tag_name == 'select') ? field[:content] : field.value

to allow checking the actual text content of the selected option, while still allowing the value to be checked as well. 

Hope it helps, great gem!
--Ben
",bmishkin,2010-10-25 20:21:27
167,2010-10-25 20:21:27,"Hi Ben,

thanks for the pull request. I'm not sure about the API, I'd prefer something like Element#selected_options, or something. The [] method should really work with element attributes. Also, for this to be considered at all, it needs to work across all drivers, and be backed up by some nice tests ;)

/Jonas
",jnicklas,2010-10-25 20:21:27
166,2010-10-25 15:43:55,"In 0.3.9, the XPath#link method matches links that have the locator argument in the id, text, title attr, or image alt tag, but not in the actual href field. Am I fairly new to capybara so I might be missing something about either the intent of this method or a different part of the api. Still, it would be nice to do something like page.should have_link posts_path. Thanks.
",ajsharp,2010-10-25 16:59:10
166,2010-10-25 16:03:07,"Hmm, I disagree with this. I can't see very little reason to ever test where a link goes (or even worse to find it by its href attribute in e.g. click_link), why not just click on it and see what happens? After all, the user doesn't care about URLs, right?
",jnicklas,2010-10-25 16:59:10
166,2010-10-25 16:59:10,"Ah, good point, I agree wrt to just clicking on the link and seeing where you end up. See, I knew I was missing something ;)
",ajsharp,2010-10-25 16:59:10
165,2010-10-25 08:52:52,"Hi,

I've tried to update capybara to 0.4.0 but ran into the following issue: 

<S_CODE_TOKEN>

I have web_steps.rb file unmodified,it's generated by cucumber-rails 0.3.2. Any ideas?
",vidmantas,2010-12-27 15:13:46
165,2010-10-25 10:49:58,"could you post the complete stacktrace? (run cucumber with -b)
",antonysastre,2010-12-27 15:13:46
165,2010-10-25 11:25:26,"Sure: http://gist.github.com/644807
",vidmantas,2010-12-27 15:13:46
165,2010-10-29 12:12:48,"This is a really weird error, it seems like Capybara is finding a constant named Capybara::XPath::HTML instead of XPath::HTML, any chance you've defined such a constant, maybe for some monkey patch or something?
",jnicklas,2010-12-27 15:13:46
165,2010-11-02 08:52:23,"No, just updated version in bundler (rails 2.3.5), updated and... this message. With version 0.3.9 works fine. Didn't patch anything in capybara...
",vidmantas,2010-12-27 15:13:46
165,2010-11-09 12:59:22,"I've tried to replicate this, but can't. Could you try isolating a failing spec?
",jnicklas,2010-12-27 15:13:46
165,2010-11-11 11:06:48,"This happens on any spec I have, just at first step. 

I have bundler in this project, perhaps this changes situation somehow? 
",vidmantas,2010-12-27 15:13:46
165,2010-12-22 15:24:18,"Unfortunately I've still never been able to replicate this. I'll be leaving this open for another short while, but unless we can get something repeatable I'll be forced to close this soon.
",jnicklas,2010-12-27 15:13:46
165,2010-12-27 15:13:46,"I've found the issue - I was using old way of defining custom XPath helpers like

<S_CODE_TOKEN>

Replaced them with Capybara.add_selector and now it seems to be running fine. So, totally my fault :-)

Thanks for your work on this awesome gem!
",vidmantas,2010-12-27 15:13:46
164,2010-10-21 23:29:54,"rack-driver

If you do visit('/users?page=2') it works, but then if you do visit('/users') it does nothing because path returns '/users', so it thinks it's already there.

I'm too tired to think about a way to fix it :(
",darkhelmet,2010-11-04 22:13:45
164,2010-10-22 07:41:07,"This sounds more like a rack-test problem. Afaik Capybara doesn't keep track of which URL you're on at all.
",jnicklas,2010-11-04 22:13:45
164,2010-10-22 13:22:13,"I'll investigate that more
",darkhelmet,2010-11-04 22:13:45
164,2010-11-03 17:52:59,"After going through the rack-test driver, methods.rb and mock_session.rb in rack-test, and finally request.rb in rack, it appears capybara should _probably_ use fullpath instead of path. Fullpath includes the query string if there is any query string to include, else, it is the same as calling path.
",darkhelmet,2010-11-04 22:13:45
164,2010-11-03 17:55:16,"And that's in the request_path method BTW.
",darkhelmet,2010-11-04 22:13:45
164,2010-11-03 21:38:02,"Capybara doesn't do any checking of the URL you are currently in. So whatever issue you are seeing, that is not the cause best I can tell. Please tell us where in the capybara code you think the comparison is made.
",robholland,2010-11-04 22:13:45
164,2010-11-03 22:15:31,"The fix I used is https://github.com/codebaby/capybara/commit/f965c4d452d611ef52f7fc655b92727f423d817c and that method gets called in https://github.com/codebaby/capybara/blob/f965c4d452d611ef52f7fc655b92727f423d817c/lib/capybara/driver/rack_test_driver.rb#L202
",darkhelmet,2010-11-04 22:13:45
164,2010-11-04 09:41:15,"The fix you've used doesn't reflect the issue you describe to me. The line who's behaviour you are trying to adjust only kicks in with URLs which use anchors. Are you using anchors in the links? Also, please note that your fork is of an older version of capybara, there is now a little more logic related to query strings. It might be worth trying a more recent version.

https://github.com/jnicklas/capybara/blob/master/lib/capybara/driver/rack_test_driver.rb#L187
",robholland,2010-11-04 22:13:45
164,2010-11-04 22:04:15,"Holy crap I'm an idiot. I am just noticing the # in that regex now. I could have sworn it was breaking out of there when I was debugging, but I was pretty tired, so that probably had something to with it.

Nevermind...nothing to see here! Sorry guys!
",darkhelmet,2010-11-04 22:13:45
164,2010-11-04 22:13:45,"heh, ok.
",robholland,2010-11-04 22:13:45
163,2010-10-21 13:25:07,"Capybara does not natively support multiple Selenium sessions. This makes it very hard to test website features that require multiple users logged in simultaneously.

One straight-forward solution would be to modify Capybara::Session to include an option for a new Selenium session.
",aubreyrjones,2010-10-21 13:43:48
163,2010-10-21 13:41:10,"Not sure what you mean, on master Capybara does support multiple selenium sessions.
",jnicklas,2010-10-21 13:43:48
163,2010-10-21 13:43:48,"Oh, my mistake. Lemme close this up for you.
",aubreyrjones,2010-10-21 13:43:48
162,2010-10-20 04:51:11,"cucumber error:
    When I edit the 2nd company                                             # features/step_definitions/company_steps.rb:14
    scope '//table' not found on page (Capybara::ElementNotFound)
    ./features/step_definitions/company_steps.rb:16:in `/^I edit the (\d+)(?:st|nd|rd|th) company$/'
    features/manage_admin_companies.feature:73:in`When I edit the 2nd company'

Step code:
    When /^I edit the (\d+)(?:st|nd|rd|th) company$/ do |pos|
      visit admin_companies_url
      within(""table"") do
        click_link ""edit""
      end
    end

html source:
    <div class=""body"">
    <table class=""companies block"">
      <thead>
        <tr>
          ...
        </tr>
      </thead>
    </table>
</div>
",petRUShka,2010-12-22 15:21:19
162,2010-10-22 11:48:48,"It seems to me to be very unlikely that this is caused by Capybara. Most likely it's some kind of problem in your application. If you're sure this is an issue in Capybara, could you crete a repeatable test case for it?
",jnicklas,2010-12-22 15:21:19
162,2010-12-22 15:21:19,"Closing due to inactivity.
",jnicklas,2010-12-22 15:21:19
161,2010-10-18 15:22:04,"Sometimes, I get TimeoutError when opening selenium/akephalos/culerity on slow machines. We need to have an option to allow us to set timeout duration for slower machines or faster machines as well.

current server_timeout is 10 seconds as default.

 Example:

<S_CODE_TOKEN>

Tests included.
",bry4n,2010-11-11 19:52:55
161,2010-10-19 20:08:55,"Looks good now, except that the timeout_spec change doesn't make sense. server_timeout isn't related to Capybara.timeout's behaviour, it's only ever passed as an argument to it.
",robholland,2010-11-11 19:52:55
161,2010-10-19 21:18:58,"Ok, I am going to remove the addition in timeout_spec and commit. Anything that I need to know before I make the change?
",bry4n,2010-11-11 19:52:55
161,2010-10-19 23:06:45,"Ok updated!

fa33543f0f7c2666330fa0b20d8d63d8d9931785
",bry4n,2010-11-11 19:52:55
161,2010-11-11 19:52:10,"just realized that pull request was wrong for a different branch, will send another pull request again.

https://github.com/jnicklas/capybara/commit/fa33543f0f7c2666330fa0b20d8d63d8d9931785 

not sure how its got in your repo.
",bry4n,2010-11-11 19:52:55
160,2010-10-16 05:59:08,"Using Capybara 0.4.0.rc with Rails 3.0.0. I've been using the new :domain => :all option for the Rails cookie store:

config.session_store :cookie_store, :domain => :all

I decided to try Selenium, but found the cookie-based session wasn't working under either Firefox and Chrome - I'd log in in a test but they wouldn't keep the cookie for the next request.

This never occurred in development because there I use the lvh.me domain name (which is an alias for localhost) - however, the :domain => :all option apparently causes cookies to not work at all when the browser uses 127.0.0.1 for all of its requests.

I'm not sure what the best solution is, but it wasted several hours of my time figuring it out, so I wanted to bring it up. Maybe default Selenium to use localhost instead of 127.0.0.1?
",chanks,2010-10-26 00:53:00
160,2010-10-22 11:50:33,"We just switched to 127.0.0.1 for various reasons, you can always set Capybara.app_host to localhost (you'll probably need to set a fixed port though). Not sure how that would help though.
",jnicklas,2010-10-26 00:53:00
160,2010-10-26 00:49:32,"How would I set a fixed port? It looks like Selenium chooses one at random each time the tests are run.
",chanks,2010-10-26 00:53:00
160,2010-10-26 00:53:00,"Never mind. Simpler to just use :domain => :all in production only.
",chanks,2010-10-26 00:53:00
159,2010-10-15 23:03:01,"Hello.

I am getting a strange error with select.

This is the code:
select(""Life Sciences"", :from => ""division"")

This is the resulting error:
No such option 'Life Sciences' in this select box. Available options: 'Please Select...', 'Life Sciences', 'Engineering' (Capybara::OptionNotFound)

It may have to do with the markup, which I have included below (I do see some spacing issues, and also this field is a dependent dropdowns, though the criteria has been met for the selection):

I should note that I tried to pull in the exact text to select with xpath as well.

Thanks for you time,
Chris

<S_CODE_TOKEN>
",cbradbury,2010-10-18 20:53:36
159,2010-10-15 23:15:02,"I am wondering if a simple work around would be to select on the value instead (which I can pull with find/xpath), but I could not figure out or locate any means to do that.  

Also, I should note this seems to be the only time (so far) I have had issues with 'select'... so this is a unique situation with this particular field (and one other like it)
",cbradbury,2010-10-18 20:53:36
159,2010-10-16 15:03:00,"We've seen issues like this before, but no one has been able to show anything reproducible. Anyway, the code for select has changed a lot since 0.3.9, would you mind giving it a try again and seeing how it works now?
",jnicklas,2010-10-18 20:53:36
159,2010-10-18 16:42:32,"Thanks for the super fast reply.  I think the update did the trick and is something I should have tried.  I will follow up if I notice any further issues.
",cbradbury,2010-10-18 20:53:36
159,2010-10-18 20:53:25,"Alright, closing this then.
",jnicklas,2010-10-18 20:53:36
159,2011-10-11 19:15:38,"Updating to the latest capybara and webdriver will fix this. The cucumber wiki suggests using old versions of capybara when working with Rails 2.x; it seems ok to use the latest. See this ticket: https://github.com/cucumber/cucumber/issues/152
",ragaskar,2010-10-18 20:53:36
158,2010-10-15 16:20:44,"Currently Capybara doesn't report when a Javascript error occurs on a page through one of the ""actual browser"" (aka not rack test) drivers.  It would be nice to have that bubbled up instead of having the assert fail.

See this google groups thread for more information:
http://groups.google.com/group/ruby-capybara/browse_thread/thread/d08576cbbc90d282/3ff1e2724c5dd024
",mikegehard,2010-10-16 01:42:46
158,2010-10-15 18:42:45,"If you read the discussion it's clear that this should be left up to the driver. It's generally not desired for JS errors to bubble up. C[eu]lerity has an option for switching this on, if you really want, for example.

I don't see a point in handling this in Capybara in any way.
",jnicklas,2010-10-16 01:42:46
158,2010-10-16 03:09:10,"Sorry...I misread the thread.

I'll check out the various drives to see how I might be able to get them to report JS errors.
",mikegehard,2010-10-16 01:42:46
157,2010-10-14 12:37:38,"Line 109 - creates a culerity driver evern though you are registering a celerity driver.
",mcrmfc,2010-10-22 11:49:05
157,2010-10-22 11:49:05,"Fixed.

http://github.com/jnicklas/capybara/commit/8ef7fb86d36e80ffbdfce3379807ae8f7a61154c
",jnicklas,2010-10-22 11:49:05
156,2010-10-12 13:48:04,"Specifically ""When I follow ... within ...""
It gives error: undefined local variable or method `node' for #Capybara::Driver::RackTest::Node:0x109a1b968 (NameError)
I tried regenerating the web_steps file, and the problem persisted.
",wjdix,2010-10-19 16:07:54
156,2010-10-12 13:54:00,"Yes, this needs to be fixed in cucumber-rails. I'll take a stab at it, maybe this weekend. That evil monkey patch should be removed for good, imho.

I'm leaving this open, since it affects Capybara, even though it's not really a Capybara issue.
",jnicklas,2010-10-19 16:07:54
156,2010-10-12 15:47:20,"I've committed a fix to cucumber-rails, if you could test it works for you, that'd be great.
",robholland,2010-10-19 16:07:54
156,2010-10-19 15:41:58,"this fixed the problem for me, thanks rob.
",scottkf,2010-10-19 16:07:54
156,2010-10-19 16:07:54,"Closing this then.
",jnicklas,2010-10-19 16:07:54
155,2010-10-12 11:47:54,"I have a page which sends a redirect to a URL that contains a URL fragment eg. /studies/1/#users

When capybara makes a request to rack-test, it sends the fragment correctly
When Rack/Rack-test forms the environment hash from the URI, it discards the URL fragment. This is probably correct too.

When I request the current_url from the driver, it uses request.url - which has no knowledge of the URL fragment.

We've currently monkeypatched a low-level request method in MockSession to record the URL before it was parsed, and changed current_url to return this.

Obviously this isn't particularly nice.
",glenjamin,2011-05-19 16:27:52
155,2010-10-12 11:50:21,"Actually that seems about right to me. The server has no knowledge of URL fragments, since current_url asks the server, it kind of makes sense for the fragment to not be included, imho.
",jnicklas,2011-05-19 16:27:52
155,2010-10-12 11:55:36,"My point is that current_url shouldn't ask the server. It should be whatever the ""browser"" thinks the current URL is (ie. what the user would see in the address bar).

If this is a misunderstanding on my part - can you suggest how I might check that the user is redirected the correct portion of the page?
",glenjamin,2011-05-19 16:27:52
155,2010-10-12 13:58:15,"Hmm, that's actually a valid point. I never looked at it like that. I have no idea though how hard it is to get this to work. I'd assume that rack-test somewhere cuts of the fragment path, so I'm not sure we even have it still available to us (without modifying rack-test)

I personally never do assertions on URLs anyway, so I'm probably the wrong person to ask.
",jnicklas,2011-05-19 16:27:52
155,2010-10-19 20:18:13,"I'll take a stab at fixing this.
",robholland,2011-05-19 16:27:52
155,2011-05-16 14:32:34,"Any update on your progress @robholland? It looks like rack-test doesn't make this information available and hence a different driver would be required in order to facilitate acquiring the URI fragment.
",jcf,2011-05-19 16:27:52
155,2011-05-19 09:07:28,"On Mon, May 16, 2011 at 3:32 PM, jcf <
reply@reply.github.com>wrote:

> Any update on your progress @robholland? It looks like rack-test doesn't
> make this information available and hence a different driver would be
> required in order to facilitate acquiring the URI fragment.

I'm no longer working on capybara I'm afraid.
",robholland,2011-05-19 16:27:52
155,2011-05-19 16:27:52,"Closing this due to lack of activity. If someone really wants this, please send a pull request.
",jnicklas,2011-05-19 16:27:52
155,2017-02-20 09:57:16,"Wow, this is a nasty bug!
+1 for including the hash fragment of the URL in current_url",aminariana,2011-05-19 16:27:52
155,2017-02-20 18:44:39,@aminariana You just commented on an issue closed in 2011 - If you're having an issue that you think is actually a bug in capybara please create a new issue with enough information to reproduce it rather than commenting on things closed 6 years ago.,twalpole,2011-05-19 16:27:52
154,2010-10-11 12:16:44,"I would like to test scenarios where the user hits the browser 'back' button and revisits an old page (and possibly re-submits an old form). The prime candidate is testing a checkout process and preventing double charging.

Can the capybara DSL get methods for navigating back and forwards like a browser?
",yob,2010-12-10 13:21:01
154,2010-10-11 12:18:59,"I don't think we have anything like that currently, but I think it's a useful thing to add. Assuming Jonas is ok with it I can have a go at implementing that.
",robholland,2010-12-10 13:21:01
154,2010-10-11 13:05:07,"It seems reasonable, but it might be pretty difficult to implement consistently across drivers. Let's see a patch so we can discuss it further ;)
",jnicklas,2010-12-10 13:21:01
154,2010-10-11 15:40:36,"I use these steps. Obviously they require a javascript-capable driver.

<S_CODE_TOKEN>
",jfirebaugh,2010-12-10 13:21:01
154,2010-12-10 13:21:01,"2 months and no patch. Closing this for now, if someone still wants this, please reopen with a patch.
",elabs,2010-12-10 13:21:01
153,2010-10-06 14:38:40,"Using capybara (0.3.9), cucumber (0.8.5), rails (3.0.0) and selenium-webdriver (0.0.28)
on Ubuntu 10 with firefox 3.6.10 and JQuery (1.4.2)

Just started to write scenario's for javascript testing, but I am hitting a brick wall.

In the scenario I am testing whether my javascript code will calculate a value for a field
and updates the field accordingly i.e.
an input field with id ""calc_value"" is set to the value 100.00 after my javascript code 
completes (using JQuery live function hooked up to the ""blur"" event). 

In my cucumber scenario I specify
Then I should see the input field ""calc_value""  with value ""100.00""

And the step definition 
Then /^I should see the input field ""(.+)"" with value ""(.+)""$/ do |id,value|
  page.should have_xpath(""//input[@id='#{id}' and @value='#{value}']"")
end

Running the scenario fires up a thin server on port 9887 and displays firefox
and in the browser I see the new value set for id ""calc_value"". But 
the above test fails. 

Not knowing what I am doing wrong here or even if it is possible to 
test this ??
",gummybears,2010-10-06 23:57:31
153,2010-10-06 16:57:30,"Asking questions is generally better done on the mailing list. Not saying there isn't an issue here, there might be, but it hasn't been identified, which makes it useless to have it on the issue tracker.

My guess would be that the blur event is never fired for some reason. I can't tell you why though. It's most likely an issue with selenium-webdriver though.

I'm closing this. Please open a new issue when you've identified the problem.
",jnicklas,2010-10-06 23:57:31
153,2010-10-06 20:18:31,"Sorry for using git for this, but found it is a JQuery problem. JQuery does not update
the DOM when changing input values. Thanks for your time and advice.
",gummybears,2010-10-06 23:57:31
152,2010-10-06 02:12:48,"Hi,

Capybara currently doesn't support clicking on a button element that has no type attribute. According to the HTML4/5 specifications, the type attribute defaults to submit, so I added a spec and changed the code to support this.

Thanks,
Bodhi
",bodhi,2010-10-08 20:24:00
152,2010-10-08 13:24:09,"Thanks a lot! Merged.
",jnicklas,2010-10-08 20:24:00
151,2010-10-02 19:40:43,"Currently, to check a value of a field, it is necessary to first get its value and use should with equality, like this:
    find_field('Name').value.should == 'John'
Why not make it more direct and add a method `has_value?`, so one could simply do:
    find_field('Name').should have_value('John')
This is, well, much more direct and it is a common case, so I think it's worth the effort (and I imagine it would be very easy to implement). What do you think?
",lailsonbm,2012-01-08 22:37:23
151,2010-10-02 23:39:04,"What about a more general approach like:
     find_field('Name').should have_attribute('value','John')

This way all tag attributes (value,id,name,type,...) can be checked...

BR
Bart
",boeboe,2012-01-08 22:37:23
151,2010-10-03 00:08:53,"I don't know. I think this defeats the purpose of the matcher: being direct and make the test more readable. And this is what RSpec is all about.
But `have_attribute` is nice as one more option. I discovered just after a looong time that I could use the indexing operator `[]` to access attributes on node.
",lailsonbm,2012-01-08 22:37:23
151,2010-10-04 20:21:49,"Might be worth asking on the mailing list if other people would like this?
",robholland,2012-01-08 22:37:23
151,2010-10-05 01:38:17,"I actually prefer the existing syntax in terms of readability.

For asynchronous javascript, I could see have_value/have_attribute being useful if they used wait_until internally, like have_css/have_xpath do.
",jfirebaugh,2012-01-08 22:37:23
151,2010-10-19 20:16:43,"Went to implement this and then wasn't sure on expected behaviour, continued the discussion on the mailing list.
",robholland,2012-01-08 22:37:23
151,2012-01-08 22:37:23,"/cc @jnicklas 

I'll go ahead close this feature request, since there hasn't been any activity for more than a year. ;-)
",joliss,2012-01-08 22:37:23
151,2013-04-20 10:27:50,"I'd propose reopening this issue regarding #1061.

This is how I worked around it: https://gist.github.com/ohcibi/5425528
",ohcibi,2012-01-08 22:37:23
150,2010-10-02 19:08:42,"Consider this select:

<S_CODE_TOKEN>

When Capybara is using the rack-test driver, the returned value is the option's text:

<S_CODE_TOKEN>

But when the Selenium driver is used, it returns the options's value:

<S_CODE_TOKEN>

I think the rack-test behavior is wrong. What do you think?

(I'm using the bleeding-edge version, directly from Github.)
",lailsonbm,2010-10-05 03:20:29
150,2010-10-04 20:20:28,"I agree that this was broken, it's now fixed in git. Please check it behaves as you expect now.
",robholland,2010-10-05 03:20:29
150,2010-10-05 00:08:06,"Nice Rob. Thanks for your fast correction.
The behavior is correct now (and suddenly many of my tests are failing now). =)
",lailsonbm,2010-10-05 03:20:29
149,2010-10-01 07:45:30,"undefined local variable or method `node' for #<Capybara::Driver::Node tag=""a"" path=""/html/body/a"">
./features/step_definitions/web_steps.rb:35 :in`block (2 levels) in '
./features/step_definitions/web_steps.rb:14 :in `with_scope'
./features/step_definitions/web_steps.rb:34 :in`/^(?:|I )follow ""([^""]_)""(?: within ""([^""]_)"")?$/'
/Users/bvl/Sites/racks/features/manage_datacenters.feature:8 :in `When I follow ""New Datacenter""'

Got this when I try to 'follow a link'
It only occurs when using the latest capybara release (from github).
But everything is fine when I use the release from rubygems...
Any ideas?
",Reprazent,2010-10-01 15:21:40
149,2010-10-01 08:21:40,"Please use the search function. This issue has been reported numerous times, it's a problem in cucumber-rails, not Capybara.
",jnicklas,2010-10-01 15:21:40
149,2010-10-05 15:22:42,"Ok. Thx, i'll see if I can find something there.
",Reprazent,2010-10-01 15:21:40
148,2010-09-30 23:03:10,"Whereas when run without the tag @selenium, all the pickle steps are found.  Is there something obvious I am missing here?

K.
",kmussa,2010-10-02 00:25:31
148,2010-10-02 00:25:30,"My sincere apologies, I was missing a space.  All is well.
",kmussa,2010-10-02 00:25:31
147,2010-09-30 10:16:39,"if i include the @culerity (or one of the other driver tags) into a feature, my fixtures won't get loaded into the database!

this is the trace, any idea?

$ rake cucumber:wip --trace
(in /Users/phoetmail/Sites/tolingo-site)
*\* Invoke cucumber:wip (first_time)
*\* Invoke db:test:prepare (first_time)
*\* Invoke db:abort_if_pending_migrations (first_time)
*\* Invoke environment (first_time)
*\* Execute environment
*\* Execute db:abort_if_pending_migrations
*\* Execute db:test:prepare
*\* Invoke db:test:load (first_time)
*\* Invoke db:test:purge (first_time)
*\* Invoke environment 
*\* Execute db:test:purge
*\* Execute db:test:load
*\* Invoke db:schema:load (first_time)
*\* Invoke environment 
*\* Execute db:schema:load
*\* Execute cucumber:wip
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby -I ""/Library/Ruby/Gems/1.8/gems/cucumber-0.8.5/lib:lib"" ""/Library/Ruby/Gems/1.8/gems/cucumber-0.8.5/bin/cucumber""  --profile wip
Using the wip profile...
I am included****************
/Users/phoetmail/Sites/tolingo-site/lib/v2.rb:12: warning: already initialized constant CONFIG_GATEWAY
@support @selenium @wip
Feature: user obligations
  In order to use the software
  As a user
  I have to set settings

  Scenario: timezone setting for user                                           # features/testo/testooo.feature:8
****************\* ENV is test selenium
****************\* ENV is test
****************\* ENV is test
****************\* ENV is test
    Given the user with fixture_name ""translator_two"" in scenario ""translators"" # features/step_definitions/custom_steps.rb:1
      You have a nil object when you didn't expect it!
      You might have expected an instance of ActiveRecord::Base.
      The error occurred while evaluating nil.[](NoMethodError)
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in `users_without_scenarios'
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in`**send**'
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in `users'
      ./features/step_definitions/support_methods.rb:5:in`load_user'
      ./features/step_definitions/custom_steps.rb:3:in `/^the user with fixture_name ""([^""]*)"" in scenario ""([^""]*)""$/'
      features/testo/testooo.feature:9:in`Given the user with fixture_name ""translator_two"" in scenario ""translators""'
    When I go to the job allocation page                                        # features/step_definitions/web_steps.rb:23
    Then show me the page                                                       # features/step_definitions/web_steps.rb:217
    And I should be on the login user page                                      # features/step_definitions/web_steps.rb:195

Failing Scenarios:
cucumber -p wip features/testo/testooo.feature:8 # Scenario: timezone setting for user

1 scenario (1 failed)
4 steps (1 failed, 3 skipped)
0m0.094s

The --wip switch was used, so the failures were expected. All is good.
",phoet,2010-09-30 21:52:41
147,2010-09-30 14:52:41,"Yes, fixtures and database_cleaner don't like each other. If your database is truncated (emptied) after each scenario, like it is in the standard cucumber setup with database_cleaner if you use Capybara's tags, then that will remove your fixtures too.

Just FYI: Fixtures suck. Don't use them. Use something like machinist instead. If you absolutely must, try to find José Valims hack to make transactions work with Capybara, that might help you. Don't remember the link, pdi.
",jnicklas,2010-09-30 21:52:41
147,2010-09-30 15:46:40,"i want to integrate capybera into an existing rails project with fixtures. so i guess i will have to try the hack.
",phoet,2010-09-30 21:52:41
147,2010-09-30 17:54:10,"Found the link: https://gist.github.com/470808/0a56f46a159b2b631ef3d1b35a906566ed32be0b
",jnicklas,2010-09-30 21:52:41
146,2010-09-30 07:09:54,"i add the gem to environments/test.rb by hand

  $ rake cucumber
  (in /Users/phoetmail/Sites/tolingo-site)
  /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby -I ""/Library/Ruby/Gems  /1.8/gems/cucumber-0.8.5/lib:lib"" ""/Library/Ruby/Gems/1.8/gems/cucumber-0.8.5/bin/cucumber""    --profile default
  Using the default profile...
  Missing these required gems:
    database_cleaner  >= 0.5.0
",phoet,2010-09-30 14:11:21
146,2010-09-30 07:11:21,"Actually, this is a problem with cucumber-rails. Capybara has no reason to depend on database_cleaner, cucumber-rails should, but apparently doesn't.
",jnicklas,2010-09-30 14:11:21
146,2010-09-30 07:24:37,"ok, i will have a look there
",phoet,2010-09-30 14:11:21
145,2010-09-29 23:12:09,"Jasmine http://github.com/pivotal/jasmine seems like a nice new entry into the Javascript testing world. It's backed by Google's V8 Javascript and comes from the pivotal guys. Moreover it's not dependent on jruby, so running in headless mode might be much easier to manage and easier to trace bugs.
",leei,2010-09-30 12:33:36
145,2010-09-30 04:20:23,"Jasmine isn't backed by V8 -- in fact, in headless mode, it runs the specs via selenium.

I love Jasmine but it doesn't make sense as a capybara driver.
",jfirebaugh,2010-09-30 12:33:36
145,2010-09-30 05:33:35,"Yup, Jasmine is not a JavaScript runtime, it's a testing framework. Doesn't make sense.
",jnicklas,2010-09-30 12:33:36
145,2010-09-30 19:10:43,"Sorry, my misreading of the following post: http://www.benrady.com/2010/08/testing-client-side-javascript-with-jasmine-and-nodejs.html The key there is the reference to Node.js, which _is_ V8 Javascript-backed. So I guess Jasmine isn't the target but perhaps Node.js? 
",leei,2010-09-30 12:33:36
145,2010-09-30 20:15:04,"No, that doesn't make sense either. Embedding V8 in _Ruby_ like therubyracer does, and then combining it an emulated DOM (env.js), has potential as a Capybara driver, but that's basically the same as capybara-envjs (except for V8 over spidermonkey).
",jnicklas,2010-09-30 12:33:36
145,2010-10-01 01:37:49,"I am starting to get this ;-) My frustration over tracing and debugging the JS mounts and the jRuby barrier definitely makes things harder.  I've tried installing capybara-envjs, bit it craps out massively trying to compile johnson-2.0.0.pre3 with Ruby 1.9. Sigh.
",leei,2010-09-30 12:33:36
145,2010-10-01 06:02:50,"capybara-envjs doesn't work on 1.9, only 1.8.7.
",jnicklas,2010-09-30 12:33:36
144,2010-09-25 11:25:42,"Hi all,

Sometimes we (see issues#issue/141) have problems with the button and table methods defined in the Capybara::Xpath class. Our products seem to have the habit of producing tables and buttons like shown below:
    <table style=""width: 100%;"" class=""dynatable"">

<S_CODE_TOKEN>

Therefor we have adjusted the Xpath methods a bit like this:
    module Capybara
        class XPath
            def button(locator)
                xpath = append(""//input[@type='submit' or @type='image' or @type='button'][@id=#{s(locator)} or contains(@value,#{s(locator)})]"")
                xpath = xpath.append(""//button[@id=#{s(locator)} or contains(@value,#{s(locator)}) or contains(.,#{s(locator)})]"")
                xpath = xpath.prepend(""//input[@type='submit' or @type='image' or @type='button'][@value=#{s(locator)}]"")
                xpath = xpath.prepend(""//input[@type='image'][@alt=#{s(locator)} or contains(@alt,#{s(locator)})]"")
                xpath = xpath.prepend(""//button[@value=#{s(locator)} or text()=#{s(locator)}]"")
                xpath = xpath.prepend(""//img[@alt=#{s(locator)}]"")
                xpath = xpath.append(""//input[@id=#{s(locator)} and contains(@value,'Submit') and contains(@alt,'Submit')]"")
            end

<S_CODE_TOKEN>

This prevented us from using raw XPath statements in our Cucumber step definitions using Capybara.

Kindly,
Bart 
",boeboe,2010-10-02 23:55:08
144,2010-09-28 15:22:11,"Could you describe clearer what the desired behaviour was, how Capybara deviates from it and what you changed to make it work for you.
",jnicklas,2010-10-02 23:55:08
144,2010-09-28 17:33:42,"Hi jnicklas,

I don't think I can describe it in more detail then above.
1. For tables: often tables are not unique on @id (since they often don't have any at all), so that is why we also check for @label.
2. For buttons: same story.The X-path templates provided miss some common buttons like: //img[@alt] and //input[@id @value=submit @alt=submit]
",boeboe,2010-10-02 23:55:08
144,2010-09-28 21:12:50,"1. Capybara doesn't look at classes anywhere, if it started doing that in this one particulat case, it'd be pretty inconsistent.
2. `//img[@alt]` isn't a button, it's an image. Afaik only an `<input type=""image"">` can have an `alt` attribute. `<input type=""submit"">` doesn't really make sense with an `alt` attribute (an alternative to what?). Or am I wrong? 
",jnicklas,2010-10-02 23:55:08
144,2010-10-02 23:04:36,"I have to agree with you that these html look a bit weird and I am not an HTML syntax expert. We have some nice written websites in rails which all cleanly pass with using standard Capybara. Unfortunately, on the other hand we also have two products with a lot of perl and other scripting languages to generate web pages. The latter forces us to use some click_xpath method:
        def click_xpath(locator)
          msg = ""no self defined xpath element '#{locator}' found""
          locate(:xpath, (locator), msg).click
        end
But at some point it seemed to make more sense to integrate them into Capybara::Xpath.
",boeboe,2010-10-02 23:55:08
144,2010-10-02 23:55:08,"Capybara has to assume that the markup it's running against is at least somewhat reasonable. It does make it possible to work with weird stuff, so I don't think it's a good idea to cover every conceivable edge case.

Maybe there's a point to be made about making the Capybara actions more customizable, but that's another discussion, and this probably isn't the place for it.

Closing this as 'won't fix'.
",jnicklas,2010-10-02 23:55:08
143,2010-09-25 11:11:26,"Hi all,

We (see issues#issue/141) have been looking for an elegant solution to locate/click elements in tables. Consider the following table containing rows with firewall rules:

<S_CODE_TOKEN>

What we want to do now in this table is clicking the last column of a certain row in this table. The last column is a link to delete the firewall rule in this webGUI. As an extra constraint we only know the user friendly name of the rule we are going to delete: ""int-ipsec-1"". You can write your own small method using xpath selectors to do the job,but you know... this is one table and the next for sure looks just a bit different and you can start xpath-ing all over again... :). We want to avoid this.

How:
    module Capybara
        class Session
         DSL_METHODS_EXTRA = [ :within_row ]
            def within_row(table,rowoption)
                within :xpath, XPath.row(table,rowoption) do
                    yield
                end
            end
        end

<S_CODE_TOKEN>

Step definition usage:
    Then /^I delete rule ""([^""]*)"" from firewall$/ do |rule|
        within_row(""dynatable"", :link => rule ) do
            click_link(""Delete"")
        end
    end

<S_CODE_TOKEN>

You can use this new within_row locator with :link, :text and :button options. A more clean implementation of this idea is possible, because i find it a bit dirty to spit Xpaths and recombine them again. Some more Xpath helper functions can be implemented to intermix multiple ""OR'ed"" Xpaths (now you can only append and prepend), but I don't know if others feel the same about it. For now it works just fine as implemented above :).

Also note the small add-on for the table selector ( or @class=#{s(tablelocator)} ) . I'll submit a separate request for some extra Xpath appends for table and button.

Kind regards,
Bart
",boeboe,2011-04-10 18:25:27
143,2011-04-10 18:25:27,"This issue has been open for a while and there has been no activity. I think there would be room for creating a separate gem to handle tables and rows, if people find it compelling enough, we can add that functionality to Capybara proper at a later point. I'm closing this issue for now.
",jnicklas,2011-04-10 18:25:27
142,2010-09-25 09:53:37,"Hi,

In our products (see issues#issue/141 for some background), we often need to browse through some drop down menu's. The problem is that the buttons in those drop-down menu's don't always have a unique name, text, id or value on those particular pages. That's why we need to contain our search within certain lists, defined on the page.

How:
    module Capybara
        class XPath
            def list(locator)
                append(""//li[@id=#{s(locator)}]"")
            end
        end

<S_CODE_TOKEN>

We also defined a similar solution to find elements within a table, based on a unique row match, but I'll put that one in a next ticket, to keep things seperated...

Kindly,
Bart    
",boeboe,2010-09-28 15:21:01
142,2010-09-25 11:28:51,"This one is very tricky. It's very useful, but _very_ hard to get right. Consider the following markup:

<S_CODE_TOKEN>

And then doing something like:

<S_CODE_TOKEN>

Where do you expect to end up? If you answer `/page1` you'd be correct. within will find the first `li` which contains ""Second Page"" and follow the first link labelled ""Go"" in that `li`. Problem is, the first `li` which contains ""Second Page"" is the outer `li`, the one also containing the text ""Some Category"" and the other `li`s. And the first link labelled ""Go"" in that `li` leads to `/page1`, not where we want to end up.

I've previously come to the conclusion that there's no ""one-size-fits-all"" solution to this particular problem. Unless you can convince me otherwise, I don't think this is a good idea.

/Jonas 
",jnicklas,2010-09-28 15:21:01
142,2010-09-25 12:08:33,"Hi Jonas,

I think .//self::li[contains(.,""Second Page"")] should do the trick... not?

Bart
",boeboe,2010-09-28 15:21:01
142,2010-09-25 12:09:16,"No they're essentially the same thing.
",jnicklas,2010-09-28 15:21:01
142,2010-09-28 15:20:54,"Closing this, since I don't believe that the functionality is going to work in an ""unsurprising"" way.
",jnicklas,2010-09-28 15:21:01
141,2010-09-25 09:32:01,"Hi all,

Let me first start to express my admiration and respect for the Ruby Capybara project. I am / have been working in the automated system and user acceptance testing departments of Thomson Telecom (they make xDSL and Cable modems with a webGUI) and Vasco Data Security (they make Security Appliances like Firewalls and Authenticator Service Providers with a webGUI) for the last 5 years. It was only until I discovered things like Capybara ontop of Selenium or other drivers, that I started to believe the benifit and maintainabilty of also automating the GUI interface the applications under test. 

Currently I am building together with my colleague a huge amount of Cucumber steps, written in Capybara, to automate all GUI user interactions towards most of our products. Where our Software engineers are Rake/Rspec to do Unit testing, we are now opening the door for the next cycles (system integration, network integration and user acceptance) of testing using the same terminology and tools as them, which I believe is the way to go. It would be really nice if in the future we can (re)use there scenario's and steps they developed in the Unit level to apply them on the system level (typically through a real browser like Firefox with selenium Web-driver) and Vice Versa. Once you're set of steps is big enough, it is so easy to write complex scenario's or performance and endurance tests... and many more.

So far my background and interests in this Capybara Project. Let me now try to introduce some local modification and add-ons we made so far (so far being around one month that we are working with it now) and try to explain why we did them and hopefully also convince the rest of it so they maybe can get integrated in a next release of Capybara. 
## Modification 1:  Adding easy taking screen-shot support

Why: 

We noticed that after having around 50+ steps and having our scenario's using many of them (some of them as steps re-used in other steps), that it becomes difficult to see what went wrong (in case some link was not found, or some text was not visible, and so on). So we thought of catching the error exceptions thrown by Capybara::Session::has_xpath? , Capybara::Session::has_no_xpath? and Capybara::Session::locate to take a screenshot of the current page. The Selenium driver supported screen-shots, but this functionality was not yet brought to the Capybara class so we added it.

How:

<S_CODE_TOKEN>

Step definition:

<S_CODE_TOKEN>

So far our first local modification to increase debugging speed and clarity. I'll post other suggestions in next topics, to keep one subject per topic.

Kind regards,
Bart
",boeboe,2011-04-07 15:38:39
141,2010-09-25 11:17:26,"Hey Bart,

thanks for taking an interest in Capybara, always nice to hear people outside the normal Ruby on Rails sphere using the project.

Regarding your suggestion: I'm always careful in accepting features which only work on one particular driver, and also anything that increases the complexity of the interface between DSL and driver.

I'd like to hear from other people if they would find this useful, even though it feasibly only works on Selenium.

/Jonas
",jnicklas,2011-04-07 15:38:39
141,2010-09-25 11:18:41,"Maybe it's a good idea to post a message to the mailing list asking if people would support this addition.

If you can provide a patch (with tests, preferably), it'd be much easier for me to accept this, too.

/Jonas
",jnicklas,2011-04-07 15:38:39
141,2010-09-25 11:32:03,"Ok Jonas,

Got that. I am just working a few weeks with Ruby and Git (I come from a TCL and CVS environment...), so give me some time to try to pull the git and make a proper patch in a branch. Same for the other requests I posted earlier today.

/Bart
",boeboe,2011-04-07 15:38:39
141,2010-10-28 16:04:47,"Hey Bart, I think this is a good idea, I had the same a while ago. Take a look at http://github.com/mocoso/cucumber-screenshot to see how to package it as a gem.

I am thinking to add the screenshots to my pet projecthttp://21croissants.github.com/courgette/  (original idea comes from Jonas ;-))
",jmgarnier,2011-04-07 15:38:39
141,2011-02-18 15:31:21,"Screenshots would be very helpful to me also.  I'm finding I also wish for a way to stop playback so I can see the app as the app does and try clicking what it would have clicked. I've lost a couple hours just today trying to iron out an issue that this might have helped with.
",ericbeland,2011-04-07 15:38:39
141,2011-02-18 15:38:03,"Have you tried ruby-debug? It's perfect for just that ;)

This ticket has had no activity in a while, unless someone actually provides a patch I'll probably close this.
",jnicklas,2011-04-07 15:38:39
141,2011-02-18 16:57:55,"Hey Jonas, I am using  boeboe code to save some screenshots using selenium. I use it in courgette to add screnshots for each scenario ;-)

If you feel like this feature is needed in capybara, I can provide a patch. Otherwise, I am happy with monkey-patching
",jmgarnier,2011-04-07 15:38:39
141,2011-04-07 15:38:39,"Closing this, please reopen with a patch if there is interest.
",jnicklas,2011-04-07 15:38:39
141,2011-09-22 05:51:28,"@21croissants I would be interested in seeing your patch for capybara. Where is the boeboe code you are referring to? screenshots are a great idea...
",TylerRick,2011-04-07 15:38:39
141,2011-09-22 07:33:56,"when using the selenium driver, u can monkey patch capybara to add following method

def take_screenshot(output)
    browser.save_screenshot(output)
end

I am using an old version of capybara in my current project so u'll have to write the monkey yrself for latest
",jmgarnier,2011-04-07 15:38:39
141,2011-09-22 23:53:05,"Thanks for the reply! For some reason I didn't notice boeboe's code or realize that was the code you were referring to. I will give that a try...
",TylerRick,2011-04-07 15:38:39
141,2011-09-26 21:11:59,"Looks like selenium-webdriver gives that to us, this works out of the box:

page.driver.browser.save_screenshot(""path/to/your/pic.png"")
",w1150n,2011-04-07 15:38:39
141,2011-10-20 07:58:41,"@w1150n Yes this is what I was using since the beginning
",jmgarnier,2011-04-07 15:38:39
140,2010-09-23 16:29:45,"Having a maddening problem. The first time I call ""visit"" in a Selenium driven scenario, as below, I receive a Capybara::TimeoutError. All subsequent calls in the feature to the _same_ step pass without incident. I have taken to having a dummy scenario that fails first so all subsequent scenarios pass...

<S_CODE_TOKEN>

with the step:
    When /^I visit ""([^""]*)""$/ do |path|
      visit path_to(path)
    end

If I put the _same_ scenario two times in a row, the first fails with a timeout, the second fires up Firefox and passes without incident. Any ideas?
",lightscalar,2010-10-19 20:02:51
140,2010-09-23 16:33:14,"Are you possibly using a _reaaaaally_ old version of selenium webdriver (lik 0.0.3 or something)?
",jnicklas,2010-10-19 20:02:51
140,2010-09-23 19:09:45,"Using latest version, v0.0.28.
",lightscalar,2010-10-19 20:02:51
140,2010-09-28 21:08:38,"Pretty weird. Could you try seeing if you get the same problem using just plain webdriver or if the problem seems to be related to Capybara?
",jnicklas,2010-10-19 20:02:51
140,2010-10-16 14:57:29,"I am experiencing the same issue: 
Capybara::TimeoutError (Capybara::TimeoutError)
./features/step_definitions/authentication_steps.rb:6:in `/^I visit '\/session\/new'$/'
with:
selenium-webdriver (0.0.28) also tried 0.0.29 without luck
capybara  (0.3.9)
",anibal,2010-10-19 20:02:51
140,2010-10-16 15:00:26,"Same as I said before, could you try replicating this with just webdriver, not going through Capybara, so we know at least where the problem lies. It sounds more like a Selenium problem to me, but we can't know until we try.
",jnicklas,2010-10-19 20:02:51
140,2010-10-16 15:02:50,"Been trying to do this. Have not been able to figure out how to get plain webdriver running. Will keep trying.  
",lightscalar,2010-10-19 20:02:51
140,2010-10-16 15:03:50,"It's tricky, because unless we can make this reproducible, it'll be very hard for us to fix it :(
",jnicklas,2010-10-19 20:02:51
140,2010-10-16 15:07:27,"Forget it, the problem, at least in my case, is associated to netrecorder 
",anibal,2010-10-19 20:02:51
140,2010-10-19 20:02:51,"ok, closing.
",robholland,2010-10-19 20:02:51
139,2010-09-19 18:12:35,"Please add support for has_css? and has_xpath? (and their negative counterparts) on arbitrary strings. This would allow rspec-rails users to use have_css and have_xpath in their view specs.
",dchelimsky,2010-10-05 03:42:45
139,2010-09-21 15:54:51,"This is preventing me from using capybara alone at the moment.

Just bumping this issue because it'd be nice to not need both webrat and capybara.

Thanks!
",devn,2010-10-05 03:42:45
139,2010-09-28 21:07:37,"I'm not sure about this, actually. Capybara is an integration framework, it does that one thing really well, it seems a bit of a stretch to use it to test views. It also feels kind of uncomfortable to add random methods on strings just because it seems convenient for one particular use case.

Implementing these methods is actually pretty easy, so if this is all you need, I think you're better off just adding them to rspec-rails.

A simplistic implementation:

<S_CODE_TOKEN>

The way Capybara is built simply isn't well suited to testing stuff which isn't a rack app. Maybe some components could be cobbled together into some kind of Frankensteinish creation which would sort of serve these purposes, but I honestly don't believe this is going to get us a decent solution.
",jnicklas,2010-10-05 03:42:45
139,2010-10-04 20:23:48,"I agree with Jonas that this is a bit much to go into capybara proper, and rather belongs in rspec-rails. I will discuss it with Aslak and see if he'll take a patch.
",robholland,2010-10-05 03:42:45
139,2010-10-04 20:31:30,"Isn't this what custom RSpec matchers are for? Why not just include such matchers inside rspec-rails? -Or even in rspec-expectations (so they can be used for non-Rails projects)
",aslakhellesoy,2010-10-05 03:42:45
139,2010-10-04 20:41:34,"In rspec, if you say `string.should have_xpath`, it delegates to `string.has_xpath?`. So a custom matcher is not what's really called for here.

I could extend String with `has_xpath?` and `has_css?` in rspec-rails, but I'd rather not do that because rspec-rails users who use capybara want to use the same expectations in view specs as they do anywhere (cukes, request specs). If we add these to rspec-rails to support view specs, and then capybara changes anything about its functionality, we'll have a divergence that will be confusing for end users.

Not sure what better options we have.
",dchelimsky,2010-10-05 03:42:45
139,2010-10-04 20:42:45,"I'm convinced that this shouldn't be in capybara, closing the issue. Please re-open if you feel strongly otherwise.
",robholland,2010-10-05 03:42:45
139,2010-10-04 20:48:37,"I'm closing this issue, I think aslask is right, this should be in rspec somewhere.
",jnicklas,2010-10-05 03:42:45
139,2010-10-04 21:08:05,"@dchelimsky: ensuring API compatibility is nice, but it's just too many moving parts from Capybara that would have to be hacked together to make this work. Unlike Webrat, Capybara is heavily layered, and there is a clear line drawn between the DSL and the drivers underneath. In order to make this work we'd have to pick pieces from both and somehow build a new stack with them. I'm convinced that such a solution would be very fragile.
",jnicklas,2010-10-05 03:42:45
138,2010-09-18 02:01:28,"This is my attempt to deal with issue http://github.com/jnicklas/capybara/issues/#issue/121

I've implemented attach() and click_and_attach().  I haven't actually used watir before, so I don't know how similar it is to their approach, but it works well for my needs.  I've also looked at HTMLUnit and I think I can implement this for akephalos ( I don't use Celerity, but it shouldn't be too hard to add there ) as well.
",mgiambalvo,2010-10-01 14:16:44
138,2010-09-28 20:52:37,"Hmmm, missed this somehow. suhrwardi's fork was merged. Do you think attach is worthwhile having even now that we can switch between different windows?
",jnicklas,2010-10-01 14:16:44
138,2010-09-29 23:17:21,"I think it might be.  I added it so I could support the OAuth signup flow on our site - I find click_and_attach and being able to attach based on url works better for me than within_window.
",mgiambalvo,2010-10-01 14:16:44
138,2010-10-01 14:16:44,"I've thought about this a little more and I think this API is too confusing. The within_window thing is just simpler. So I think I won't merge this for now. Sorry. Thanks for your excellent work though!
",jnicklas,2010-10-01 14:16:44
137,2010-09-18 01:35:11,"Jonas --

Wanted to get your opinion on this. I went through and updated capybara to use rspec2 for development, and in so doing simplified and fixed some bugs with celerity/culerity using rspec's new metadata features. Are you comfortable switching to rspec2 (I'm using it on all of my current projects) for development?
",bernerdschaefer,2010-09-18 17:47:08
137,2010-09-18 08:32:29,"I've been wanting to switch to rspec2, so this is excellent. Good job on the metadata stuff, looks pretty neat! Feel free to push it!
",jnicklas,2010-09-18 17:47:08
136,2010-09-16 13:36:27,"Getting the following stacktrace when running a feature under Rails 3, Ruby 1.9.2:

You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.[](NoMethodError)
./features/step_definitions/web_steps.rb:35:in `block (2 levels) in <top (required)>'
./features/step_definitions/web_steps.rb:14:in`with_scope'
./features/step_definitions/web_steps.rb:34:in `/^(?:|I )follow ""([^""]*)""(?: within ""([^""]*)"")?$/'
features/profile_picture_uploads.feature:13:in`And I follow ""Change Picture""'

any idea how to fix this?
",fbjork,2010-09-29 16:02:31
136,2010-09-25 11:49:28,"What is the complete definition if the step you used? Seems like it cannot find the scope or the element Change Picture in this scope...
",boeboe,2010-09-29 16:02:31
136,2010-09-27 09:26:12,"This is the web step I used:
http://gist.github.com/598803

The link looks like this:
<a href=""javascript:void(0)"" onclick=""$('#picture_upload, #profile_information').toggle();"">Change Picture</a>

Gems used:
capybara 0.3.9
cucumber-rails 0.3.2
cucumber 0.9.0
",fbjork,2010-09-29 16:02:31
136,2010-09-27 11:44:28,"with_scope is not a standard Capybara method. Try within() or within_frame instead, depending on what you want to do...
",boeboe,2010-09-29 16:02:31
136,2010-09-27 12:10:02,"I changed with_scope to within, but i'm still getting this error:

You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.[]
./features/step_definitions/web_steps.rb:35 :in `block (2 levels) in '
./features/step_definitions/web_steps.rb:34 :in`/^(?:|I )follow ""([^""]_)""(?: within ""([^""]_)"")?$/'
features/profile_picture_uploads.feature:11 :in `And I follow ""Change Picture""'
",fbjork,2010-09-29 16:02:31
136,2010-09-27 15:37:08,"Now I see the problem:

You want to use:
And I follow ""Change Picture""

> > This results in |link, selector| == |""Change Picture"", nil|
> > within (nil) do
> >   click_link(""Change Picture"")
> > end

Better to check for the value of selector and based on the (nil?) you can choose to scope or not to scope. We have defined a super step to cover all this:

<S_CODE_TOKEN>

Hope this helps,
Bart
",boeboe,2010-09-29 16:02:31
136,2010-09-28 14:18:12,"I finally found the issue!

it was href=""javascript:void(0)"" that cause it to fail. Replacing it with href=""#"" and adding return false; to the end of the onclick event fixed this.
",fbjork,2010-09-29 16:02:31
136,2010-09-28 20:50:23,"Weird that void(0) would be having problems, but from what I understand it's quite an odd function in JavaScript, so it might not be properly implemented.

Which driver are you using? It's probably up to them to fix this. Doesn't sound like it's something we can do something about in Capybara. Can we close this?
",jnicklas,2010-09-29 16:02:31
136,2010-09-29 09:02:31,"I'm using the rack-test driver. you know anyone on their team I could contact?
",fbjork,2010-09-29 16:02:31
136,2010-09-29 10:35:32,"Actually in that case, it's probably a Capybara bug. The RackTest driver should ignore javascript links. I don't think it does.
",jnicklas,2010-09-29 16:02:31
136,2011-06-14 23:31:46,"Why should Capybara ignore javascript links?

click_link ""Login"" fails to recognize an anchor tag where href=""javascript:void(0)""

Apologies if my methodology is wrong somewhere, but shouldn't there be a way to test for this? (What's the rationale?) Thanks.
",dmonopoly,2010-09-29 16:02:31
136,2011-06-15 05:44:34,"@dmonopoly: it should ignore JS links, because RackTest doesn't execute JS, thus it would have no idea what to do with them. It's bad practice anyway to add void(0) to links, just change it to '#'. Or if you really care, submit a patch which makes Capybara ignore these links.
",jnicklas,2010-09-29 16:02:31
135,2010-09-15 17:22:08,"failing test with fixture demonstrating that links with markup are not clickable when finding by text
",kevinolsen,2010-09-28 20:47:02
135,2010-09-28 20:47:01,"This is a dup of: http://github.com/jnicklas/capybara/issues/#issue/127

The issue is resolved in xpath, we'll release a new version of that gem soon, hopefully.
",jnicklas,2010-09-28 20:47:02
134,2010-09-15 17:09:28,,kevinolsen,2010-09-15 17:13:29
133,2010-09-15 15:21:12,"When a test is on ""/somepage"" click_link on an anchor element with an href of ""?some=value"" should direct to ""/somepage?some-value"" but instead it winds up on ""/"".

Example link:
<a href=""?some=value"">Link</a>
",mikesten,2010-10-22 14:45:39
133,2010-09-15 17:27:17,"Is this behaviour that browsers guess, or is it part of the spec?
",jnicklas,2010-10-22 14:45:39
133,2010-09-15 17:41:13,"I _think_ it's part of the spec... From rfc1808 on Relative Uniform Resource Locators:

""<scheme>://<net_loc>/<path>;<params>?<query>#<fragment>
each of which, except <scheme>, may be absent from a particular URL.""
http://www.ietf.org/rfc/rfc1808.txt

Which suggests that http://?query should be valid.

I don't know the specs, to be honest, but the behaviour seems to be consistent across browsers.
",mikesten,2010-10-22 14:45:39
133,2010-10-22 14:45:39,"Handle naked query string, closed by 3f688b0723c9251cf853a04b3faf29ccbcdd6054
",jnicklas,2010-10-22 14:45:39
132,2010-09-14 23:19:47,,kevinolsen,2010-10-29 11:42:09
131,2010-09-14 23:18:24,"has_content should only find content that is visible to the end user, respecting hidden elements. currently it finds content regardless of the display state of its containing element(s).

i wrote some tests illustrating this behavior:

http://github.com/kevinolsen/capybara/commit/c5d689e8bd4006e3b788bbcf425528b8c75ae056

i can forsee an issue with needing to find content within hidden elements, but i don't think the primary use case should assume hidden content to be viable
",kevinolsen,2012-01-03 13:26:28
131,2010-09-14 23:44:53,"it appears the the current has_content/has_no_content functionality works as i would expect with regard to hidden elements when executed from within a with_scope block.

i'll add a test in a moment
",kevinolsen,2012-01-03 13:26:28
131,2010-09-15 17:27:23,"this inconsistent behavior was only seen in code running 0.3.9 . tests within master appear consistent with themselves, but do not work as expected: hidden text is still found by has_content/has_no_content irrespective of the value of ignore_hidden_elements.
",kevinolsen,2012-01-03 13:26:28
131,2010-09-15 17:30:22,"Hmm, this looks really tricky to fix. Any ideas on implementation?
",jnicklas,2012-01-03 13:26:28
131,2010-09-15 19:08:33,"I'll take a look at it with a mind to a potential implementation. I was mostly attempting to isolate the issue with some tests. If you have any initial thoughts regarding an implementation I would be happy to attempt a fix.
",kevinolsen,2012-01-03 13:26:28
131,2010-09-15 19:31:12,"The tricky thing is that we need to find the innermost node which contains the text and see if it is hidden. Also, what happens if we have markup like:

<S_CODE_TOKEN>

 and we do `has_content?('Foo Bar Baz')` admittedly it's an edge case, but if we head down this road, we should probably at least consider it.
",jnicklas,2012-01-03 13:26:28
131,2010-09-17 15:56:16,"I'm on board with this line of thinking and would make the case that the statement you have there should be false. To the end user Foo Bar Baz would not be shown.

I'm working through the codebase to get up to speed. I'll try and have something to move forward with by the end of the day.
",kevinolsen,2012-01-03 13:26:28
131,2010-10-04 20:28:18,"Kevin, any joy with this? Want any help?
",robholland,2012-01-03 13:26:28
131,2010-10-06 20:03:42,"Sadly no joy. I have some code/tests that are a step in the right direction at least with regard to the Selenium driver. I would love some assistance if you're interested. Let me make sure what I have is pushed up into a branch and I'll ping you with an update.
",kevinolsen,2012-01-03 13:26:28
131,2010-10-19 19:59:26,"Sure I can help (sorry, forgot to reply to this). Just let me know where to look.
",robholland,2012-01-03 13:26:28
131,2010-12-14 23:24:17,"I too am running into the ""has_no_content"" returning false for hidden elements.  Any progress on this one?  Any ideas on a workaround?  

I'd offer to help, but as a newbi I may do more damage than good.
",planglue,2012-01-03 13:26:28
131,2012-01-03 13:26:25,"Should be fixed by 6f420d024608510cc7b17bb005a0cc202dd49b87
",jnicklas,2012-01-03 13:26:28
130,2010-09-13 02:38:30,"I'm having a hard time getting a simple file upload test working.  I'm using Rails 3.0.0 on ruby 1.9.2.

View:
    <%= form_tag ""/upload/create"", :multipart => true do %>
        <label for=""file"">File to Upload:</label>
        <%= file_field_tag ""file"" %>
        <%= submit_tag ""Upload"" %>
    <% end %>

Cucumber Step:
    When /^I upload the basic file$/ do  
        visit path_to(""upload"")
        path = File.join(::Rails.root, ""somefile"") 
        attach_file(""file"", path)
        click_button(""Upload"")
    end

In my controller, i have commented out everything except for:
    def create
        file = params[:file]
    end

When I try to run the test, I receive:
    (::) failed steps (::)
    bad content body (EOFError)
    internal:prelude:10:in `synchronize'

I appreciate any help or insight.  Thanks.

Gemfile snippet:
    group :development, :test do
        # testing with specs
        gem ""ZenTest"", "">= 4.3.3""
        gem ""autotest""
        gem ""rspec-rails"", "">= 2.0.0.beta.19"", :git => ""git://github.com/rspec/rspec-rails.git""
        gem ""rspec"", :git => ""git://github.com/rspec/rspec.git""
        gem ""rspec-core"", :git => ""git://github.com/rspec/rspec-core.git""
        gem ""rspec-expectations"", :git => ""git://github.com/rspec/rspec-expectations.git""
        gem ""rspec-mocks"", :git => ""git://github.com/rspec/rspec-mocks.git""
        # cucumber stuff
        gem 'capybara'
        gem 'database_cleaner'
        gem 'cucumber-rails'
        gem 'cucumber'
        gem 'spork'
        gem 'launchy'    # So you can do Then show me the page
        gem 'escape_utils' # needed to fix Cucumber - http://crimpycode.brennonbortz.com/?p=42
    end
",astjohn,2010-09-17 02:18:20
130,2010-09-17 02:18:20,"This was an issue with rack-test.
See:
http://groups.google.com/group/cukes/browse_thread/thread/5028306893c2c54a
",astjohn,2010-09-17 02:18:20
129,2010-09-11 03:17:18,"Seems like Capybara has everything it needs to handle subdomain testing. Just needs a helper

Here's what I added to my env that seemed to work:

<S_CODE_TOKEN>

This allows code like:

<S_CODE_TOKEN>

Probably needs to be a bit cleaner though. Maybe capybara can use the Rails convention of `host!` for setting it?
",jacquescrocker,2010-09-11 10:24:21
129,2010-09-11 10:24:21,"This only works with RackTest, which is why Capybara doesn't currently implement host! If you still want this, I think doing what you did and adding your own helper is a nice solution. One of the guiding principles in Capybara is not to add features which lock people into a particular driver, I'm following that principle and closing this as ""won't fix"".
",jnicklas,2010-09-11 10:24:21
128,2010-09-07 20:21:30,"It's common for Rails to add a 'value' attribute to an option to later identify the option that was selected by the ID.  It seems that using the value method on a field will return that value, not the text of the option.  I don't think this is the desired effect. 

A similar example to the Capybara spec:

<S_CODE_TOKEN>

A common rails example.  Notice a different effect with the same method.

<S_CODE_TOKEN>
",jevy,2010-10-03 06:50:34
128,2010-09-28 20:44:50,"The .value method should return ""2"" in the second vase. If it doesn't I'd consider that a bug, but it's not quite clear to me what you are saying the problem is.
",jnicklas,2010-10-03 06:50:34
128,2010-10-02 10:48:32,"I also don't see what the issue is. Capybara's behaviour is correct in both examples.
",robholland,2010-10-03 06:50:34
128,2010-10-02 23:50:33,"Closing this as incorrect. It seems to me that Capybara is doing the right thing.
",jnicklas,2010-10-03 06:50:34
128,2010-10-02 23:52:26,"Sorry about that folks.  I haven't had time to test it out recently.  Could be I was doing something wrong.  I'll try it again.  Cheers!
",jevy,2010-10-03 06:50:34
127,2010-09-06 16:59:55,"eg, `<a href=""""><span>find this</span></a>`

I'm not sure if this is a bug in capybara itself or the new xpath dependency. See http://gist.github.com/567261 for a full example. This works fine with 0.3.9 but not master.
",dstrelau,2010-10-08 13:20:41
127,2010-09-28 20:40:39,"This is now fixed in xpath master. Leaving this open for now, until we release a new xpath gem.
",jnicklas,2010-10-08 13:20:41
127,2010-10-08 13:20:39,"New xpath gem is released. Problem should be solved.
",jnicklas,2010-10-08 13:20:41
126,2010-09-06 05:40:26,"Are there any plans to merge in the changes from this fork http://github.com/moowahaha/capybara ?

Some of us really need the Mechanize support in order to test non-Ruby apps. :D
",fredwu,2010-09-06 12:55:03
126,2010-09-06 05:55:02,"I haven't received a pull request for it. Also Jeroen van Dijk has been developing a separate mechanize driver. This will probably be merged back, once everyone feels that it's stable enough.

Do check it out: http://github.com/jeroenvandijk/capybara-mechanize 
",jnicklas,2010-09-06 12:55:03
126,2010-09-06 07:33:29,"Thanks jnicklas. Yeah I checked out that project, unfortunately as of now it can only be used for rack_test apps. I will definitely keep an eye on it though. :)
",fredwu,2010-09-06 12:55:03
126,2010-09-06 13:00:43,"Not sure what you mean?
",ramhoj,2010-09-06 12:55:03
125,2010-09-04 23:00:13,"Hi,
Rails 3 rc 1, latest cucumber (0.8.5) and capybara  (0.3.9) 
I think I found a bug. In a simple test I am checking whether 
some text exists(as a table header) with the following code

Then /^I should see the text ""(.+)""$/ do |headertext|
within(""tr th"") do
    page.should have_content(headertext)
end

In my cucumber scenario I would then say
Then I should see the text ""Some text""

1) The text ""N"" is **not** present on the page
the test succeeds <<< but it should fail
a false positive

2) The text ""Nr"" is (and should be) present on the page
the test succeeds <<< this is expected, and correct

Don't think the above is the expected behavior.
",gummybears,2010-09-05 23:47:47
125,2010-09-05 21:32:14,"As I said on the mailing list:

""If the text ""Nr"" is on the page, then surely ""N"" is on the page as well, it's a substring after all. Or am I missing something?""

If that's not the case, then please post your HTML code and exactly what you did, or even better, produce a failing spec!
",jnicklas,2010-09-05 23:47:47
125,2010-09-05 23:47:46,"Well, that is true.
But I thought page.have_content(sometext) should exactly match ""N""
and not ""Nr"" i.e ""N"" != ""Nr""

Thanks 
",gummybears,2010-09-05 23:47:47
124,2010-09-03 21:31:16,"I have an issue that when I call find on the result of a all result it returns nil even though the element is present. I've put a simplified example here:
http://gist.github.com/564591

The error this produces is ""undefined method `text' for nil:NilClass (NoMethodError)""; i.e. the find on the instance of some_lovely_element returned by all().each is returning nil.

Am I doing something wrong/have an incorrect assumption or should this find and return the nested internal element?

Thanks,
Steve
",stephenallred,2010-09-06 04:39:26
124,2010-09-03 21:44:56,"When I call some_lovely_element.class it returns 'Capybara::Driver::RackTest::Node' as I would have expected.
",stephenallred,2010-09-06 04:39:26
124,2010-09-05 21:39:26,"I've replied on the mailing list. Please use either or, not both, it's kind of annoying. I know it might take a while for me to reply, but I'm only human and I do my best. Mailing list is always better unless you're _sure_ it's a bug.
",jnicklas,2010-09-06 04:39:26
124,2010-09-05 21:51:41,"Yeah, sorry, I noticed the mailing list after I'd posted this and thought it was the more appropriate place.
",stephenallred,2010-09-06 04:39:26
123,2010-09-02 13:05:51,"As outlined in http://github.com/jnicklas/capybara/issues#issue/120

Not sure about the `server_port` name. There's also one tiny issue with the spec: let's say I hadn't made the implementation, the test _could_ still pass if the server was randomly started at the port I specified in the spec.
",vangberg,2010-09-29 03:38:30
123,2010-09-13 22:26:03,"Any feedback?
",vangberg,2010-09-29 03:38:30
123,2010-09-28 20:39:38,"Sorry for the delay. Looks good! Merged.
",jnicklas,2010-09-29 03:38:30
122,2010-09-02 12:38:31,"I am using cucumber+capybara to test my project with ""Capybara.default_wait_time = 5"".

It seams for me like have_content dosent wait for 5 sec before throwing an exception at my cucumber test.

Theas are the exceptions i get.
Capybara::ElementNotFound and Selenium::WebDriver::Error::ObsoleteElementError

I have monkey patched this so it works for me but it would be nice to get some kind of fix into capybara.

-- Monkey patch

module Capybara
  class WaitUtil

<S_CODE_TOKEN>

  end
end
",bjornblomqvist,2011-03-11 07:21:46
122,2010-09-28 20:34:27,"This probably needs to be fixed at a higher level. This is not the right place to catch selenium related exceptions. Not sure under which conditions Selenium throws that ObsoleteElement exception though. Can we get a test case?
",jnicklas,2011-03-11 07:21:46
122,2010-11-08 17:56:58,"This error pops up inconsistently for me too, (I don't have a default_wait_time set). Sometimes when using has_xpath?. It always goes away the second time thorugh though, as though Capybara/Selenium has some cached data that it manages to use...
",suan,2011-03-11 07:21:46
122,2011-03-10 23:21:46,"The ObsoleteElementError should be fixed by recent changes. I really don't know what else it is you're experiencing, so I'm closing this. If you're still having trouble, please create a new issue with a reproducible test case.
",jnicklas,2011-03-11 07:21:46
122,2011-03-11 12:56:30,"I am still using my monkey patch.. But next time i hit this i will write a test. Hopefully i wont hit it =). 

On writing a test. It would be really nice with a short text in the readme on how you want feedback/patches bug reports. Also a empty template test where a bug reporter could put a test would be nice.

Anyway next time i will do better =) 

PS. Capybara is great! Thanks!!
",bjornblomqvist,2011-03-11 07:21:46
121,2010-09-02 12:24:56,"I am testing some stuff that deals with switching to a newly opened popup and waiting for it to close. I have hacked Selenium to do that, by doing something like this:

<S_CODE_TOKEN>

While this works:
1. It's hardly optimal
2. It doesn't work across drivers

Maybe some API for doing this kind of stuff would be a nice addition?
",vangberg,2010-09-28 20:32:40
121,2010-09-14 11:01:49,"suhrawardi has a fork with support for other windows. This commit details the changes:

http://github.com/suhrawardi/capybara/commit/85c0895abe354f452fde9645f9b814bf5f211752

But there are a few later commits as well.

Works well for me, would love to see it merged into the official gem.
",karl,2010-09-28 20:32:40
121,2010-09-28 20:32:39,"suhrawardi's fork has been merged.
",jnicklas,2010-09-28 20:32:40
120,2010-09-01 13:24:50,"I am using Capybara and Selenium to test some OAuth interaction with external services. I have to hardcode the callback URL at the service provider (e.g. Facebook) so I can't have my server running on random ports. As far as I can tell there is no way to do so. At the moment I am resorting to overriding `Capybara::Server#find_available_port`.
",vangberg,2010-09-11 11:24:31
120,2010-09-01 15:03:23,"Hmm, kind of makes sense, can you provide a patch?
",ramhoj,2010-09-11 11:24:31
120,2010-09-01 15:09:11,"Yeah. Will do it tonight.
",vangberg,2010-09-11 11:24:31
120,2010-09-05 16:54:36,"+1
",iamnader,2010-09-11 11:24:31
120,2010-09-11 11:24:30,"Duplicate. http://github.com/jnicklas/capybara/issues#issue/123 has pull request.
",vangberg,2010-09-11 11:24:31
119,2010-08-30 20:05:24,"In Selenium Capybara supports dragging one DOM element onto another with `Node#drag_to(element)`. After calculating positional differences, that method delegates to `Selenium::WebDriver::Element#drag_and_drop_by(right_by, down_by)`

I've implemented `Node#drag_by(right_by, down_by)` for the capybara selenium driver which delegates to `#drag_and_drop_by` directly since there are instances where you don't have a specific DOM element to drop something on, for example moving a draggable marker in Google Maps.

Passing test included at runeb/capybara@ce9eaaa0cf
",runeb,2013-02-16 18:01:58
119,2010-08-30 20:11:21,"Awesome!

I have an immediate need for this. 
",deleteme,2013-02-16 18:01:58
119,2010-08-30 21:22:51,"Interestingly I've actually been needing this as well. Hacked around it by going through the Selenium node.

I'm a little concerned that other drivers would have great difficulty implementing this feature, since it needs very complete CSS support to work properly. A headless driver is never going to work with this. It could well be optional, but then it would somehow have to be separated in the spec, so that driver authors could choose not to include this method in their drivers,
",jnicklas,2013-02-16 18:01:58
119,2010-08-31 10:48:52,"I see the problem. But you raise NotSupportedByDriverError on some methods?

I think there should be an opt in possibility of doing these things, with the understanding that not every driver is capable of doing it. All three of us actually needs this method.

What about layering the spec and raising an exception informing you need to move to a higher level (full browser) for certain methods? If you were using Cucumber, that would simply involve re-tagging your scenario with @selenium (or @browser etc).
",runeb,2013-02-16 18:01:58
119,2010-08-31 15:29:33,"It's not about the implementation, it's about the _specs_. Authors of other drivers need to be able to opt out of having this feature, because it won't be possible to support it in many of them.
",ramhoj,2013-02-16 18:01:58
119,2011-04-10 08:54:00,"I definitely would need this feature. I don't see how adding this is any different from javascript heavy features. Developers already have to use @javascript tag in their cucumber tests when a headless browser is not enough. I don't see why it is a problem that some drivers raise a NotSupportedByDriverError when they cannot implement the feature.
",tunylund,2013-02-16 18:01:58
119,2011-04-10 09:42:18,"It's about the **SPECS**, not the implementation. Driver authors need to be able to opt out of it. It has nothing to do with you as a user.
",jnicklas,2013-02-16 18:01:58
119,2011-04-10 09:53:42,"ok ok sure the speficitations need to be universally agreed upon but there's always going to be features that headless browsers cannot support and selenium and similar drivers that utilize the browser are able to offer. And as testers, it's only natural that we want those features for example when creating an application with heavy javascript requirements.

If the specifications need to be minimal then how about following runeb's suggestion on adding layers to the specs? Would it complicate the design too much?
",tunylund,2013-02-16 18:01:58
119,2011-07-03 19:55:06,"If drag_by will not make it into Capybara, is there a way to interact directly with selenium webdriver to do this?
",deleteme,2013-02-16 18:01:58
119,2011-07-19 22:39:09,"@jnicklas, can we see how you hacked around it accessing the Selenium node?
",bbuchalter,2013-02-16 18:01:58
119,2011-07-19 23:20:51,"Here's my attempt at the hack, but it's not working...
https://gist.github.com/1093989
",bbuchalter,2013-02-16 18:01:58
119,2013-02-16 18:01:58,"Two years and no updates on this issue. Closing it doen.
",jnicklas,2013-02-16 18:01:58
118,2010-08-30 08:30:34,"has_content? and has_no_content? do not work if I pass scope to search within. They just search within whole document.
",andriusch,2010-12-10 13:13:44
118,2010-10-19 19:56:53,"Please provide an example of this breaking, we have a spec which tests for this case which passes.
",robholland,2010-12-10 13:13:44
118,2010-10-27 15:09:22,"I'm seeing this same issue in 0.4.0. Old versions (0.3.x) work fine

I'll try to come up with a repro
",jacquescrocker,2010-12-10 13:13:44
118,2010-10-27 15:38:10,"Ok, I was able to repro this bug in a spec
http://github.com/railsjedi/capybara/commit/8d04bbd674a3f4a90070bcffa70b60461677f780
",jacquescrocker,2010-12-10 13:13:44
118,2010-11-03 12:36:50,"same issue

Example:

<S_CODE_TOKEN>

I get this error:

<S_CODE_TOKEN>

but this works well:
    page.should have_css(""h1"", :text => ""Japan"")
",boblin,2010-12-10 13:13:44
118,2010-11-03 15:00:17,"+1
Having this issue too
",benhutton,2010-12-10 13:13:44
118,2010-11-03 20:26:46,"railsjedi, your issue is different, this is an expected change in behaviour. Please see the capybara mailing list for discussion.
",robholland,2010-12-10 13:13:44
118,2010-11-03 20:32:09,"boblin/benhutton, please include a stack trace for the argument error you're seeing. Also note that the page.should have_css(""h1"", :text => ""Japan"") version is now safer, as the first version only passes as long as the first h1 on the page contained Japan, which is possibly not what you wanted.
",robholland,2010-12-10 13:13:44
118,2010-11-03 21:36:52,"@robholland: I've switched to using have_css as a workaround. 

However, to me it makes no sense for have_content to be so broken. Might as well remove it from capybara if it doesn't work with `within` . The broken case is even included within the generated cucumber step definitions, so this is going to trip up many, many people down the line.

I'll look through the mailing list for explanation
",jacquescrocker,2010-12-10 13:13:44
118,2010-11-04 09:33:22,"Sorry, I should have been clearer. have_content does work inside a within. The issue is that within() only runs the block against the first match for a selector now, so it will never run against the second error block, hence the failure.

If you were to do:

within('.errors') { have_content('Error 2') }

i.e. checking the outer container.

That would pass.
",robholland,2010-12-10 13:13:44
118,2010-11-10 08:50:59,"<S_CODE_TOKEN>

This is not right test, because it will pass always. 
Method _has_content_ just return matcher:

<S_CODE_TOKEN>

It should return true or RSpec::Expectations::ExpectationNotMetError
",boblin,2010-12-10 13:13:44
118,2010-11-16 00:11:36,"I am having the same issue using with_scope when there are two elements on the page that match the selector and one is hidden via an animation. In my instance the with_scope is finding the hidden selector first which is unexpected. I have no way to make this pass unless I force (via monkey patching) the within method to pass the :visible => true option into find. I think that within and thus with_scope should have the ability to have options passed through to find so that we can modify this behavior in our step definitions.
",gvarela,2010-12-10 13:13:44
118,2010-12-10 13:13:44,"gvarela: They do have that option. within will pass through all options to #all, as for with_scope, that's part of cucumber and not something we can control.

I'm closing this issue, since it seems to be people confused by the change in behaviour to #within.
",elabs,2010-12-10 13:13:44
117,2010-08-23 19:13:53,"Hello people,

I was testing my application with capybara and rspec, but when I try to setup my form with a date field I get a error message! I tried to put select( 'option', :from => 'date_field'), but it didn't work sucessfully!

If anyone here knows how to setup it I would thank you if you help me!

I am a rookie and need some information!

I´ve tried google it, but I didn't find anything!

best regards!
",thiagocifani,2010-08-24 03:26:25
117,2010-08-23 20:26:25,"For support questions, it's really better to use the mailing list. There was a thread about this a while ago, which you may find interesting: http://groups.google.com/group/ruby-capybara/browse_frm/thread/121052d670c17fef/e7a6f60181d10a74

I'd generally recommend not using the date helpers in Rails. Use a text field and a JavaScript date picker. That's far more useable. If you absolutely _must_, there are ways around it, but you're probably going to have to write your own CSS selectors to make it work.
",jnicklas,2010-08-24 03:26:25
117,2010-08-24 01:28:11,"thanks!
",thiagocifani,2010-08-24 03:26:25
116,2010-08-23 13:28:29,"just noticed this following bit of code i have
  page_link = page.locate(:css , menu)
  page_link.trigger(:hover)

is now broken in 0.3.9 release however its fine below that
",ssmithstone,2010-08-23 16:45:49
116,2010-08-23 16:45:49,"I think that would depend on whether the driver supports an event
called hover. Afaik there's no such event in browsers, so you
shouldn't rely on it. Use mouseover instead.

/Jonas
",jnicklas,2010-08-23 16:45:49
116,2011-06-29 17:18:02,"How to simulate mouseover using selenium webdriver?
",lthomaz,2010-08-23 16:45:49
115,2010-08-18 16:39:40,"This issue is happening when I'm searching using page.find for a visible element but the page contains hidden elements while using the Selenium webdriver. Selenium does not allow you to even retrieve the text for a node that is not visible and instead throws an exception (""message"").

ex:
    <a style=""display:none"" class=""link"">Hidden Link</a>
    <a class=""link"">Visible Link</a>

Calling `page.find('.link', :text => 'Visible Link')` will throw an error with unmodified Selenium/Capybara. I've created a workaround on my local system with:

<S_CODE_TOKEN>

You may note that I also inverted the check for visible to before the text check, which would solve the problem as well, so long as I haven't turned ignore_hidden_items off. As an aside, it would be nice if `options[:visible]` was able to override `ignore_hidden_items == true`, as that would give a lot more flexibility to those who are using a mixture of visible and hidden items.

And finally, forgive me if I'm totally off-base with anything I've done, I'm fairly new to the world of Ruby.
",kayakyakr,2010-08-19 04:34:20
115,2010-08-18 21:34:20,"Self-closing this. It's an older version of selenium webdriver that throws the exception. The most recent webdriver returns text = """" when the node is hidden.

I think the check against visibility should still go first, but the actual matching has been cleared up.
",kayakyakr,2010-08-19 04:34:20
114,2010-08-12 08:25:09,"Selecting fields by labels is awesome! It enabled Q&A to write acceptance_tests concentrating on visible aspects of the application (field labels rather than ids or names). I wanted to push this further and test for selected options' labels, rather than values.

For now I added something like this to my test helper:

<S_CODE_TOKEN>

...so that now I can do:

<S_CODE_TOKEN>

rather than:

<S_CODE_TOKEN>
",WojtekKruszewski,2010-08-21 14:25:41
114,2010-08-21 14:25:40,"I think this is not a sufficiently common need to warrant the extra method. You can already do:

<S_CODE_TOKEN>

by the way. Closing as wontfix.
",jnicklas,2010-08-21 14:25:41
113,2010-08-11 17:01:41,"The fix described in http://github.com/jnicklas/capybara/issues/issue/35#issue/35/comment/133422 only fixes it in rack-test and it is still broken in selenium.  I have done my best to track down the issue but can't seem to figure it out.
",Dishwasha,2010-08-13 20:59:33
113,2010-08-13 20:59:32,"Not actually an issue.  Apparently calling visit doesn't set the HTTP_REFERER to the current page.
",Dishwasha,2010-08-13 20:59:33
112,2010-08-01 11:33:19,"I'm having major issues with capybara at the moment. The crux of it: the request object coming through to my Rails app is majorly screwed up. When I `visit ""/hello-world""`:

<S_CODE_TOKEN>

Tried on both Capybara 0.3.9 and master. Using Rails3 RC1

I have Capybara.default_host set to ""test.example.com"". However, grepping in the capybara codebase, ""default_host"" is used in only one spot: within the `build_rack_mock_session` method. This method however is not actually used anywhere.
",jacquescrocker,2010-10-01 04:56:31
112,2010-08-07 11:05:36,"It is used by RackTest. We're kind of hacking the rack-test internals here actually. I haven't had any problems with this so far however. Could you try creating some kind of replicable test case for this?
",jnicklas,2010-10-01 04:56:31
112,2010-09-28 20:30:09,"Is this still an issue? Can we close this?
",jnicklas,2010-10-01 04:56:31
112,2010-10-01 04:56:30,"sorry, yeah you can close this
",jacquescrocker,2010-10-01 04:56:31
111,2010-07-31 05:22:53,"<S_CODE_TOKEN>

I am using capybara 0.3.9 with rails 2.3.5, and jruby 1.2.0 with the celerity 0.7.9 gem

I think its a bug with the select option parser, but i dont know how to distinguish if the bug is from capybara, culerity, celerity, or htmlunit. Its a long chain to debug...

Heres the markup of the select tag (just your average tag, really..) :

<S_CODE_TOKEN>

Thanks!
",ndbroadbent,2011-05-19 16:22:42
111,2010-07-31 09:24:56,"I have put a debugger in 'capybara-0.3.9/lib/capybara/driver/celerity_driver', at line 31 where the 'select' method rescues an error. 

I have run the following lines, which returned the following:

(rdb:1) all(:xpath, ""//option"").map { |o| ""'#{o.text}'"" }.join(', ')
    ""'', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''        etc etc
(rdb:1) all(:xpath, ""//option"").first.text
    """"
(rdb:1) all(:xpath, ""//option"").first.node.text
    """"
(rdb:1) all(:xpath, ""//option"").first.node.object.text
    ""Afghanistan""
",ndbroadbent,2011-05-19 16:22:42
111,2010-07-31 09:31:54,"(rdb:1) all(:xpath, ""//select"").first.node.html 
    ""<select class=\""required\"" id=\""checkout_shipment_attributes_address_attributes_country_id\"" name=\""checkout[shipment_attributes][address_attributes][country_id]\"" style=\""width:150px;\"">\n  
    <option value=\""1\"">\n    Afghanistan\n  </option>\n  <option value=\""2\"">\n    Albania\n  </option>\n  <option value=\""3\"">\n    Algeria\n  </option>\n  <option value=\""4\"">\n    American Samoa\n  </option>\n  
    <option value=\""5\"">\n    Andorra\n  </option>\n  <option value=\""6\"">\n    Angola\n  </option>\n  <option value=\""7\"">\n    Anguilla\n  </option>\n  <option value=\""8\"">\n    Antigua and Barbuda\n  </option>\n  
    <option value=\""9\"">\n    Argentina\n  </option>\n  
    <option value=\""10\"">\n    Armenia\n   etc etc etc

HTMLUnit seems to be dynamically formatting the option tags and inserting new-lines. Is this whats causing the blank text?
",ndbroadbent,2011-05-19 16:22:42
111,2010-08-08 15:18:41,"Very odd stuff. So why would HTMLUnit return something different than culerity? That's just very strange. It seems a bit hackish to call down to node.object.text, do we have any other possible solutions?
",jnicklas,2011-05-19 16:22:42
111,2010-12-07 08:48:27,"We get the same thing with Akephalos (which also uses HTMLUnit).
",ivor-michael,2011-05-19 16:22:42
111,2010-12-31 19:11:36,"This may have to do with a bug I recently came across in celerity: https://github.com/jarib/celerity/issues/#issue/45
",jfirebaugh,2011-05-19 16:22:42
111,2011-04-16 14:47:38,"Is this  still an issue for people?
",jnicklas,2011-05-19 16:22:42
111,2011-05-19 16:22:42,"Closing this since the culerity driver is no longer part of Capybara
",jnicklas,2011-05-19 16:22:42
110,2010-07-30 12:42:37,"I was having trouble getting click_link to work.
Digging around, I found that ""base.click"" in node.rb:139 was failing to call the click method from the drivers (eg. rack_test_driver.rb:82), which is weird, since it was working for buttons.

Renaming ""base.click"" to call a different method name (eg. base.click!) and creating an alias in the drivers (eg. alias :click! :click) seems to work.

This is the original error I had:

undefined local variable or method `node' for #<Capybara::Driver::RackTest::Node:0x7fe748ce9758> (NameError)
      /home/mho/.bundler/ruby/1.8/capybara-c6edcf7/lib/capybara/node.rb:143:in`click'
      /home/mho/.bundler/ruby/1.8/capybara-c6edcf7/lib/capybara/node/actions.rb:29:in `click_link'
      /home/mho/.bundler/ruby/1.8/capybara-c6edcf7/lib/capybara/session.rb:261:in`send'
      /home/mho/.bundler/ruby/1.8/capybara-c6edcf7/lib/capybara/session.rb:261:in `method_missing'
      /home/mho/.bundler/ruby/1.8/capybara-c6edcf7/lib/capybara/dsl.rb:93:in`click_link'
",ijin,2010-08-27 22:43:10
110,2010-08-08 15:19:21,"Any chance you're including Capybara in the global namespace?
",jnicklas,2010-08-27 22:43:10
110,2010-08-24 08:50:44,"I've just switched from v0.3.9 to master branch (to get rid of unicode warning in Rack after switching to Rails 3) and now I got the same error.
",szimek,2010-08-27 22:43:10
110,2010-08-24 08:54:13,"Are you guys using cucumber? Could be that cuke's evil monkey patching is screwing this up. Try removing the line:

<S_CODE_TOKEN>

From env.rb and see if it still fails.
",jnicklas,2010-08-27 22:43:10
110,2010-08-24 09:00:49,"Yeah, I'm using cucumber. Removing this line fixes the problem. Thanks!
",szimek,2010-08-27 22:43:10
110,2010-08-27 10:57:23,"Yes, I am also using cucumber.

I ended up forking the project with the alias patch just to get it run, but after updating both cucumber and capybara to the newest commit, click_link seems to be working now.
",ijin,2010-08-27 22:43:10
110,2010-08-27 15:43:09,"Yes, I think this should be fixed under master. I've readded and deprecated the method that cucumber was monkey-patching.
",jnicklas,2010-08-27 22:43:10
110,2010-10-29 04:12:23,"Cucumber is still monkey-patching that method. Aslak doesn't have the option to add issues :(
",zealoushacker,2010-08-27 22:43:10
110,2010-10-31 16:53:54,"It breaks for me when I upgraded to  0.4.0
",briancolfer,2010-08-27 22:43:10
110,2010-10-31 22:41:32,"Vote +1
",zealoushacker,2010-08-27 22:43:10
110,2010-10-31 22:43:27,"Complain to cucumber-rails, they're the ones not getting a release out. There's really nothing Capybara can do about this unfortunately.
",jnicklas,2010-08-27 22:43:10
110,2010-10-31 22:54:26,"Thanks, I've posted an issue on cucumber-rails: http://github.com/aslakhellesoy/cucumber-rails/issues/issue/77
",zealoushacker,2010-08-27 22:43:10
110,2010-11-18 20:33:18,"Yup, getting the same issue while running the tests for a new suspenders app. Bundle list:
- RedCloth (4.2.3)
- abstract (1.0.0)
- actionmailer (3.0.1)
- actionpack (3.0.1)
- activemodel (3.0.1)
- activerecord (3.0.1)
- activeresource (3.0.1)
- activesupport (3.0.1)
- arel (1.0.1)
- bourne (1.0)
- builder (2.1.2)
- bundler (1.0.3)
- capybara (0.4.0)
- celerity (0.8.4)
- childprocess (0.1.4)
- clearance (0.9.0.rc9)
- columnize (0.3.2)
- configuration (1.2.0)
- cucumber (0.9.4)
- cucumber-rails (0.3.2)
- culerity (0.2.12)
- database_cleaner (0.6.0)
- diff-lcs (1.1.2)
- dynamic_form (1.1.3)
- erubis (2.6.6)
- factory_girl (1.3.2)
- factory_girl_rails (1.0)
- fakeweb (1.3.0)
- ffi (0.6.3)
- flutie (1.1.2)
- formtastic (1.2.0)
- gherkin (2.2.9)
- haml (3.0.24)
- high_voltage (0.9.2)
- hoptoad_notifier (2.3.12)
- i18n (0.4.2)
- json (1.4.6)
- json_pure (1.4.6)
- launchy (0.3.7)
- linecache (0.43)
- mail (2.2.10)
- mime-types (1.16)
- mocha (0.9.8)
- mysql (2.8.1)
- nokogiri (1.4.4)
- paperclip (2.3.5)
- polyglot (0.3.1)
- rack (1.2.1)
- rack-mount (0.6.13)
- rack-test (0.5.6)
- rails (3.0.1)
- railties (3.0.1)
- rake (0.8.7)
- rspec (2.1.0)
- rspec-core (2.1.0)
- rspec-expectations (2.1.0)
- rspec-mocks (2.1.0)
- rspec-rails (2.1.0)
- ruby-debug (0.10.4)
- ruby-debug-base (0.10.4)
- rubyzip (0.9.4)
- selenium-webdriver (0.1.0)
- shoulda (2.11.3)
- term-ansicolor (1.0.5)
- thor (0.14.4)
- timecop (0.3.5)
- treetop (1.4.9)
- tzinfo (0.3.23)
- will_paginate (2.3.15)
- xpath (0.1.2)
",avocade,2010-08-27 22:43:10
110,2010-11-25 18:08:37,"@jnicklas Removing the 'capybara_javascript_emulation' fixed the problem for me.

  require 'cucumber/rails/capybara_javascript_emulation' 
",jspooner,2010-08-27 22:43:10
110,2010-11-27 21:33:50,"Hey everyone, @botandrose and I submitted a pull request for the fix for this in cucumber-rails.  I'll post back here if/when it's accepted.
",jfelchner,2010-08-27 22:43:10
110,2011-02-08 22:24:22,"still no fix for this?
",rguggemos,2010-08-27 22:43:10
110,2011-02-08 22:31:17,"rguggemos: it's not a problem in Capybara. The bug was in cucumber, and afaik has been fixed.
",jnicklas,2010-08-27 22:43:10
110,2011-02-08 23:18:16,"rguggemos: My patch has been implemented in cucumber-rails which fixes this problem but a new gem version has not been released.  You'll either need to specify a 4.0 prerelease in your Gemfile or source from the master branch.
",jfelchner,2010-08-27 22:43:10
109,2010-07-29 21:56:26,"cucumber features/

<pre><code>
Using the default profile...
/usr/lib/ruby/gems/svn/gems/rspec-expectations-2.0.0.beta.16/lib/rspec/expectations/version.rb:4: warning: already initialized constant STRING
no such file to load -- nokogiri/version_warning (LoadError)
/usr/lib/ruby/gems/svn/gems/activesupport-3.0.0.rc/lib/active_support/dependencies.rb:219:in `require'
/usr/lib/ruby/gems/svn/gems/activesupport-3.0.0.rc/lib/active_support/dependencies.rb:219:in `block in require'
/usr/lib/ruby/gems/svn/gems/activesupport-3.0.0.rc/lib/active_support/dependencies.rb:205:in `block in load_dependency'
/usr/lib/ruby/gems/svn/gems/activesupport-3.0.0.rc/lib/active_support/dependencies.rb:570:in `new_constants_in'
/usr/lib/ruby/gems/svn/gems/activesupport-3.0.0.rc/lib/active_support/dependencies.rb:205:in `load_dependency'
/usr/lib/ruby/gems/svn/gems/activesupport-3.0.0.rc/lib/active_support/dependencies.rb:219:in `require'
/usr/lib/ruby/gems/svn/gems/nokogiri-1.4.3/lib/nokogiri.rb:34:in `<top (required)>'
/usr/lib/ruby/gems/svn/gems/activesupport-3.0.0.rc/lib/active_support/dependencies.rb:219:in `require'
/usr/lib/ruby/gems/svn/gems/activesupport-3.0.0.rc/lib/active_support/dependencies.rb:219:in `block in require'
/usr/lib/ruby/gems/svn/gems/activesupport-3.0.0.rc/lib/active_support/dependencies.rb:205:in `block in load_dependency'
/usr/lib/ruby/gems/svn/gems/activesupport-3.0.0.rc/lib/active_support/dependencies.rb:570:in `new_constants_in'
/usr/lib/ruby/gems/svn/gems/activesupport-3.0.0.rc/lib/active_support/dependencies.rb:205:in `load_dependency'
/usr/lib/ruby/gems/svn/gems/activesupport-3.0.0.rc/lib/active_support/dependencies.rb:219:in `require'
/usr/lib/ruby/gems/svn/gems/capybara-0.3.9/lib/capybara.rb:2:in `<top (required)>'
/usr/lib/ruby/gems/svn/gems/bundler-1.0.0.rc.1/lib/bundler/runtime.rb:64:in `require'
/usr/lib/ruby/gems/svn/gems/bundler-1.0.0.rc.1/lib/bundler/runtime.rb:64:in `block (2 levels) in require'
/usr/lib/ruby/gems/svn/gems/bundler-1.0.0.rc.1/lib/bundler/runtime.rb:62:in `each'
/usr/lib/ruby/gems/svn/gems/bundler-1.0.0.rc.1/lib/bundler/runtime.rb:62:in `block in require'
/usr/lib/ruby/gems/svn/gems/bundler-1.0.0.rc.1/lib/bundler/runtime.rb:51:in `each'
/usr/lib/ruby/gems/svn/gems/bundler-1.0.0.rc.1/lib/bundler/runtime.rb:51:in `require'
/usr/lib/ruby/gems/svn/gems/bundler-1.0.0.rc.1/lib/bundler.rb:109:in `require'
/home/petrushka/webdev/my_app/config/application.rb:7:in `<top (required)>'
/home/petrushka/webdev/my_app/config/environment.rb:2:in `require'
/home/petrushka/webdev/my_app/config/environment.rb:2:in `<top (required)>'
/home/petrushka/webdev/my_app/features/support/env.rb:6:in `require'
/home/petrushka/webdev/my_app/features/support/env.rb:6:in `block in <top (required)>'
/usr/lib/ruby/gems/svn/gems/spork-0.8.4/lib/spork.rb:23:in `prefork'
/home/petrushka/webdev/my_app/features/support/env.rb:5:in `<top (required)>'
/usr/lib/ruby/gems/svn/gems/cucumber-0.8.5/lib/cucumber/rb_support/rb_language.rb:141:in `require'
/usr/lib/ruby/gems/svn/gems/cucumber-0.8.5/lib/cucumber/rb_support/rb_language.rb:141:in `load_code_file'
/usr/lib/ruby/gems/svn/gems/cucumber-0.8.5/lib/cucumber/step_mother.rb:108:in `load_code_file'
/usr/lib/ruby/gems/svn/gems/cucumber-0.8.5/lib/cucumber/step_mother.rb:100:in `block in load_code_files'
/usr/lib/ruby/gems/svn/gems/cucumber-0.8.5/lib/cucumber/step_mother.rb:99:in `each'
/usr/lib/ruby/gems/svn/gems/cucumber-0.8.5/lib/cucumber/step_mother.rb:99:in `load_code_files'
/usr/lib/ruby/gems/svn/gems/cucumber-0.8.5/lib/cucumber/cli/main.rb:53:in `execute!'
/usr/lib/ruby/gems/svn/gems/cucumber-0.8.5/lib/cucumber/cli/main.rb:25:in `execute'
/usr/lib/ruby/gems/svn/gems/cucumber-0.8.5/bin/cucumber:8:in `<top (required)>'
/usr/bin/cucumber:19:in `load'
/usr/bin/cucumber:19:in `<main>'
</code></pre>

ruby 1.9.3dev (2010-05-08 trunk 27674) [x86_64-linux]
Rails 3.RC (upgrade from beta4)
",petRUShka,2010-08-02 06:16:03
109,2010-08-01 22:04:14,"It seems that this is an issue originating in the nokogiri source 1.4.3 gem.

Try to ""gem install nokogiri --version=1.4.3.1""
",ldenman,2010-08-02 06:16:03
109,2010-08-02 06:16:02,"I'm trying to change something and found that this is issue of new bundler. The solution is ""erase Gemfile.lock and bundle install""
",petRUShka,2010-08-02 06:16:03
108,2010-07-28 21:45:59,"Hi

I'm using capybara 0.3.9 with Rails 3 rc, Cucumber 0.8.5 and Ruby 1.9.2 rc2.

I'm getting a cucumber failure which I've tracked down to the a call to attach_file method of capybara. The file I am attaching is a small jpg.

The failure looks like this:

(::) failed steps (::)

incompatible character encodings: UTF-8 and ASCII-8BIT (Encoding::CompatibilityError)
./features/step_definitions/web_steps.rb:29:in `block (2 levels) in <top (required)>'
./features/step_definitions/web_steps.rb:14:in`with_scope'
./features/step_definitions/web_steps.rb:28:in `/^(?:|I )press ""([^""]*)""(?: within ""([^""]*)"")?$/'
features/example.feature:11:in`And I press ""Create example""'

I have tried the create action manually on the browser and is working as expected.

The error started when I upgraded my app from rails 3 beta 4 to release candidate, but I don't think is a bug in Rails as the application is working correctly.

I've tried attaching the debugger in the controller action but is not hitting it so I think the error must be happening somewhere between capybara or maybe rack-test.

I've also been able to reproduce the error on a new Rails 3 rc throw away app, just to make sure that the other app didn't have anything that interfered.

Alan
",alan,2010-07-30 17:37:06
108,2010-07-30 10:37:06,"I'm closing this as it is not a problem with capybara.

The bug is in rack-test because of the new snowman character in rails 3 rc.

I submited a patch to rack-test to fix this.
",alan,2010-07-30 17:37:06
108,2010-09-13 11:48:51,"Thanks, alan.  Would you have any idea as to the status of said patch?
",brennon,2010-07-30 17:37:06
108,2010-09-15 20:18:38,"I have the same issue too...

ruby 1.9.2-head
rails 3.0.0.0 stable
",lichtamberg,2010-07-30 17:37:06
108,2010-09-15 21:06:44,"Use rack-test master. The patch is there.
",alan,2010-07-30 17:37:06
108,2010-09-15 21:28:12,"But how do i accomplish this? 

<S_CODE_TOKEN>

doesn't work...? THX!
",lichtamberg,2010-07-30 17:37:06
108,2010-09-15 21:49:10,"Ok, fixed it with a initializer:

<S_CODE_TOKEN>
",lichtamberg,2010-07-30 17:37:06
107,2010-07-20 21:51:36,"When trying to click a node, Capybara complains with:

<S_CODE_TOKEN>

I have not figured out what's really going wrong here, but apparently the class_evaled methods from `dsl.rb` shadow the `node#click` method which should be called.

For details see [http://gist.github.com/483642].
",bracki,2010-07-21 12:22:30
107,2010-07-20 22:15:52,"Is this using edge Capybara? Did you by chance include Capybara in the global namespace?
",jnicklas,2010-07-21 12:22:30
107,2010-07-21 07:57:53,"No, I'm using 0.3.9. What do you mean by including ""in the global namespace""? I just used a setup as generated by ""cucumber-sinatra"".
",bracki,2010-07-21 12:22:30
107,2010-07-21 10:33:39,"It seems like they fixed this just recently, maybe you're using an old version? See this commit:

http://github.com/bernd/cucumber-sinatra/commit/ad023d77db942b7df7fda4734e9d3c72e89aab92
",jnicklas,2010-07-21 12:22:30
107,2010-07-21 11:08:17,"Yes, thank you. Found that out earlier. Would be nice to see a warning logged stating ""Don't do this"". 
",bracki,2010-07-21 12:22:30
107,2010-07-21 12:22:29,"Unfortunately I don't think we can create a warning like that through any way know of.
",jnicklas,2010-07-21 12:22:30
106,2010-07-19 22:26:11,"Using Capybara 0.3.9 with Cucumber 0.8.5, there is incorrect behavior with the following step:

<S_CODE_TOKEN>

The checkbox will be toggled regardless of current state (either check->uncheck or uncheck->check).

In selenium_driver.rb, Node#set:

<S_CODE_TOKEN>

The problem is that `node.attribute('checked')` will (or can) return `nil` instead of `false` with the current version of cucumber.
",karlhe,2010-08-26 06:31:57
106,2010-08-26 06:31:57,"This should be fixed by: http://github.com/jnicklas/capybara/commit/41b3a0ac4c9a3eaad10dcb645c11c4c8da6eac53
",jnicklas,2010-08-26 06:31:57
105,2010-07-14 15:55:57,"The following step doesn't function correctly when using webdriver (not tested in celerity/culerity)

And I attach the file ""features/support/images/foo.jpg"" to ""Photo""

Visually the step passes, but the file path populating the field in the browser session isn't expanded to be a full path, so Firefox doesn't know where the file is (It's relative to RAILS_ROOT, but of course the browser has no concept of this). This results in nothing being uploaded, but as far as capybara is concerned, its job is done. Using rack-unit, this step works fine.
",jhenderson,2010-07-14 17:08:43
105,2010-07-14 16:04:34,"On further discussion about this with Rob Holland, we've figured this isn't really a Capybara issue. It needs fixing in the place that knows where the file is (ie. cucumber-rails in this instance).
",simmerz,2010-07-14 17:08:43
105,2010-07-14 17:08:43,"Yes, indeed. Closing this.
",jnicklas,2010-07-14 17:08:43
105,2011-05-05 13:08:49,"@simmerz can you elaborate on how to fix this? I'm having a similar problem.
",reedlaw,2010-07-14 17:08:43
105,2011-05-05 13:14:43,"Nevermind, I fixed it with this:

<S_CODE_TOKEN>
",reedlaw,2010-07-14 17:08:43
104,2010-07-13 20:38:31,"I have experienced the next problem (with capybara 0.3.9):
- `page.should have_content` matches text inside hidden elements (even when you set `Capybara.ignore_hidden_elements=true`).
- `page.should have_xpath('//*', :text => regexp)` only finds visible elements (even when you set `Capybara.ignore_hidden_elements=false`) 

As a side effect, the behaviour of the next steps inside `web_steps.rb` is inconsistent:
- `I should see...` with normal text doesn't distinguish between visible and hidden elements.
- `I should see...` with regular expression always try to look for visible elements.
",jorgemanrubia,2010-12-10 13:10:05
104,2010-07-13 21:38:36,"may be related to #81 ?
",nruth,2010-12-10 13:10:05
104,2010-07-13 21:45:31,"Absolutely. Sorry for not checking it before.

Anyway, the problem with `have_xpath` ignoring the parameter `Capybara.ignore_hidden_elements=false` wasn't reported in #81
",jorgemanrubia,2010-12-10 13:10:05
104,2010-10-14 17:31:52,"I concur... page.has_xpath?() has the same problems as page.should have_xpath. And page.has_css? has the same problem as page.should have_content.
",suan,2010-12-10 13:10:05
104,2010-12-10 13:10:05,"Closing this since it is a duplicate
",elabs,2010-12-10 13:10:05
103,2010-07-12 11:39:35,"I tried fill_in disabled texts, choose disabled radios and select disabled selects with several types of driver. And all of them where unexpectedly worked (I mean, ""enabled"" in fact).
Also, while submitting the form containing these disabled fields, all these values where illegally posted to the web server.

Does current Capybara (0.3.9) not yet support disabled=""disabled"" input fields, or am I missing something?
",grooves,2010-09-25 05:24:42
103,2010-07-12 17:50:18,"Culerity and Selenium should work fine with disabled fields, but in fact, RackTest will not work properly with disabled fields, afaik.
",jnicklas,2010-09-25 05:24:42
103,2010-07-15 06:06:28,"Thank you for the advice! (I'm the same person with the original questioner tho the account name differs)
I tried again with envjs driver and it worked correctly. I think I was just misconfiguring something...
But, just out of curiosity, is there any plan for the default driver to support disabled fields, or should I better keep on using different type of driver for those kind of purpose?
",amatsuda,2010-09-25 05:24:42
103,2010-07-15 07:10:37,"Yes, there are plans. It's actually not very hard to implement, but I want to make sure it really works, so the issue is really that we should have tests. Writing those takes a long time, because there are a lot of different kinds of fields ;) Any help would be appreciated!
",jnicklas,2010-09-25 05:24:42
103,2010-08-09 20:28:33,"We've been using this fork at my work for a while now.

http://github.com/relevance/capybara/commit/dc1389e3a47c911d8aae86b44029fbe310ab550d

It would be nice if this would get pulled in so we could upgrade.
",jdpace,2010-09-25 05:24:42
103,2010-08-09 22:14:52,"Interesting, I don't think I've received a pull request for this actually. I can't look at it closer right now, but I'll get to it in the next couple of days.
",jnicklas,2010-09-25 05:24:42
103,2010-09-24 18:12:46,"This was merged. I think Jonas can close this. C/d?
",josevalim,2010-09-25 05:24:42
103,2010-09-24 22:25:06,"Yes, this was merged. Issue closed.
",jnicklas,2010-09-25 05:24:42
102,2010-07-11 20:53:20,"<pre>
page.all(:css, ""h1, h2, h3, h4, h5, h6"")
</pre>


or using the within-block:

<pre>
within(""h1, h2, h3, h4, h5, h6"") do
  ...
end
</pre>


...should match all header styles (H1-H6), but it only finds the first specified element (before the first comma). This must be a bug, as CSS selectors is designed to work like that. I bet something is going wrong with the CSS-to-XPath conversion - XPath.from_css(scope). ?
",grimen,2010-07-11 21:26:22
102,2010-07-11 21:26:22,"I think this should be fixed by 42aa6615b23234a3b2b4716c827362b4f5057986
",jnicklas,2010-07-11 21:26:22
101,2010-07-08 14:14:08,"Right now the rdocs are pretty useless, and the readme helps but it doesn't cover everything either. I don't mind opening up the code every now and then since I'm used to looking at other people's code, but I know other people at work aren't quite so patient. So I think it's safe to say Capybara needs to have _some_ sort of documentation. Once I get some time, I'd be willing to take a stab at this since I work with Capybara pretty much every day anyway.
",mcmire,2010-08-24 17:38:31
101,2010-07-11 21:36:47,"I've started adding some documentation, help would certainly be appreciated!
",jnicklas,2010-08-24 17:38:31
101,2010-08-24 10:38:30,"I think that I've just pushed the last missing documentation for anything that's in the public API. Let me know if anything is missing/wrong, or better yet, send pull requests ;)
",jnicklas,2010-08-24 17:38:31
101,2010-08-24 17:05:55,"I don't think I helped you at all, heh ;) That's awesome, though. I'll definitely check it out.
",mcmire,2010-08-24 17:38:31
100,2010-07-07 23:17:28,"I just realized that there are two versions of ""wait_until"" in the code. There's the wait_until in the public API that takes a block. Then there's the wait_until on the driver level that _doesn't_ take a block (called by the public wait_until). I realize that the private API doesn't really matter, but it would sure be easier to know what is going on at a glance if the private one were renamed to ""wait_for"", or even just ""wait"" (to be consistent with stuff like Process.wait). At the same time it might also make more sense if wait? were renamed to can_wait? (unless I am misunderstanding what that method in particular does). I realize that this means that things like the envjs driver have to be updated, but I am happy to take care of that. What do you think?
",mcmire,2010-10-08 13:19:22
100,2010-07-11 21:27:57,"Makes sense. There is too much stuff called wait in Capybara. I've taken a first step with removing the WaitUntil module and renaming the file to timeout. The driver level method should really be called something else.
",jnicklas,2010-10-08 13:19:22
100,2010-07-12 14:36:09,"Yeah, I think if it were just ""wait"" on the driver level it would help things. I can't think of a better name. 

But going back to Driver#wait?, I notice the only place it's used is in Finders#wait_conditionally_until. It seems kind of weird that we even have a wait? method, since 1) Capybara.timeout already waits, to an extent and 2) both the Selenium and Celerity drivers have wait? returning true, yet neither actually implements a wait_until. So in that light, I'm not even sure what the point of Driver#wait_until is. 
",mcmire,2010-10-08 13:19:22
100,2010-07-12 14:38:16,"And actually, as far as the Celerity driver is concerned, it already has a wait_until method, which would probably work better than Capybara's.
",mcmire,2010-10-08 13:19:22
100,2010-07-12 17:59:22,"Driver#wait? only returns true for the rack test driver. The idea is that because there are no asynchronous processes under rack-test (no JavaScript) it doesn't make any sense to wait. Therefore it's just a waste of time to wait for two seconds before failing. Driver#wait_until is something completely different. It's currently only used by the envjs driver. Steven Parkes needed it for something, it was something to do with triggering the event loop for JavaScript under envjs, I think. So it's purpose is very specific to the envjs driver.

Hope that clears it up a bit?
",jnicklas,2010-10-08 13:19:22
100,2010-10-08 13:19:22,"Some of this is cleaned up now, I think it's okay as it.
",jnicklas,2010-10-08 13:19:22
99,2010-07-07 14:37:16,"Just noticed this hanging issue with the new Celerity prerelease (the 0.8.0 beta):

http://github.com/jarib/celerity/issues/#issue/23

The workaround is apparently to add `@_browser.close` in the `at_exit` handler for the Culerity driver.

Do you think we should apply this to Capybara now? Or wait for an upstream fix? (No comments on the HtmlUnit ticket, so not even sure if they consider it a bug or not.)

Cheers,
Wincent
",wincent,2010-08-23 22:05:35
99,2010-07-11 21:29:57,"I'm very confused as to what's going on here and where exactly the problem lies :S
",jnicklas,2010-08-23 22:05:35
99,2010-07-11 22:18:20,"Apparently, the root problem is [this bug](http://sourceforge.net/tracker/?func=detail&aid=2985827&group_id=47038&atid=448266) in HtmlUnit. As you know, Celerity is a wrapper for HtmlUnit and it comes with a bundled snapshot of the HtmlUnit jars, which means that in a recent update to Celerity, when the latest HtmlUnit was pulled in from upstream, the bug started to manifest itself.

I see it in my RSpec/Steak/Capybara/Culerity/Celerity workflow as spec runs which complete successfully (0 failures) but never actually fully exit because the JVM just sits hanging, waiting for something...

The workaround is to call `@_browser.close` explicitly in the `at_exit` handler. The Celerity author thinks that the right place to put the workaround is not actually in Celerity, but possibly in either Capybara or Culerity. I myself am not sure.

All I know is that if I change this in Capybara's Culerity driver from:

<S_CODE_TOKEN>

To:

<S_CODE_TOKEN>

Then the hanging goes away.

It seems a workaround of some kind needs to go in somewhere, because the HtmlUnit team seems pretty slow to respond on this issue (look at the date on that issue tracker ticket linked above, and the lack of response).

I don't know. Do you think this extra `@_browser.close` call should go in Capybara's Culerity driver? Or should it be happening somewhere inside Culerity itself?
",wincent,2010-08-23 22:05:35
99,2010-07-11 22:27:11,"Does this break when used with the current stable version of celerity? If it doesn't, then there's no harm in adding that extra call, imho.
",jnicklas,2010-08-23 22:05:35
99,2010-07-11 22:32:30,"Let me just check now...
",wincent,2010-08-23 22:05:35
99,2010-07-11 22:39:37,"Ok, just rolled back from Celerity 0.8.0.beta.1 to Celerity 0.7.9 and it seems that the extra `@_browser.close` doesn't do any harm. Let me know if you want me to push a patch for it; already got one here in my local fork. It's just that one line addition.
",wincent,2010-08-23 22:05:35
99,2010-07-11 22:45:21,"Pushed it here in case you want it:

http://github.com/wincent/capybara/commits/hanging-culerity-fix
",wincent,2010-08-23 22:05:35
99,2010-08-23 22:05:35,"This was pushed a long time ago, but I seem to have forgot to close this issue.
",jnicklas,2010-08-23 22:05:35
98,2010-07-02 14:05:14,"I need Capybara to pass this argument to selenium-webdriver: 
'profile.load_no_focus_lib = false'

Can I do this in the env config for rails/cucumber?

Toolchain:
Capybara 0.3.8 Gem 
- selenium-webdriver 0.0.24 Gem 
- cucumber 0.6.3 Gem

Package:        firefox-3.5.10-1.fc12
Command:        /usr/lib64/firefox-3.5/firefox -no-remote --verbose --silent
Reason:         Process /usr/lib64/firefox-3.5/firefox was killed by signal 11 (SIGSEGV)
",emergentdomain,2010-10-08 13:18:56
98,2010-07-02 15:33:09,"Related issue on selenium google code:
http://code.google.com/p/selenium/issues/detail?id=591
",emergentdomain,2010-10-08 13:18:56
98,2010-07-02 16:19:18,"I had this kind of monkeypatch for setting a profile value to disable offline-browsing recently (in a features/support file), might help:

<S_CODE_TOKEN>
",nruth,2010-10-08 13:18:56
98,2010-07-02 18:28:05,"Would you mind giving an example of the usage in features/support? (see above)
",mblongii,2010-10-08 13:18:56
98,2010-07-02 22:02:37,"Put that code (by itself) in a file e.g. features/support/monkey_patch_capybara_webdriver_driver.rb and it will be loaded by cucumber and change the behaviour (analogous to a rails initialiser?) of capybara scenarios which use selenium (@javascript by default) in the tests. 

I don't think this is the best way to solve the problem (since it involves copy-paste & hacking the capybara internals) but until someone suggests a better approach it might help?
",nruth,2010-10-08 13:18:56
98,2010-07-07 22:09:34,"Thanks. This works with the following modification: 
profile.load_no_focus_lib = false
",emergentdomain,2010-10-08 13:18:56
98,2010-10-08 13:18:53,"An API for configuring drivers was added recently. Should solve this.
",jnicklas,2010-10-08 13:18:56
97,2010-07-02 13:40:13,"HTML
    <div class='flash'>
      <div class='notice'>
        <p>Visit has been added</p>
      </div>
    </div>

step
    Then %r(I should see an? ""([^""]*)"" notification$) do |string|
      regexp = /#{string}/i
      page.should have_xpath('//div[@class=""flash""]/div[@class=""notice""]/p', :text => regexp)
    end

feature
    Then I should see a ""Visit Added"" notification

result:
    expected #has_xpath?(""//div[@class=\""flash\""]/div[@class=\""notice\""]/p"") to return true, got false (RSpec::Expectations::ExpectationNotMetError)

This would be nicer if it could show that the element matched, but the text didn't match.
",glenjamin,2011-03-10 23:32:15
97,2010-07-03 13:49:03,"There's been some discussion on this on the mailing list, can't seem to find the discussion, but the gist of the proposed idea was the following:

For each `has_*?` method add an `assert_*` method, which raises an error instead of returning false. That way we can get more informative error messages. Then add rspec matchers `have_*` which call `assert_*` under the hood.

/Jonas
",jnicklas,2011-03-10 23:32:15
97,2010-11-04 16:49:04,"Hi Jonas,

I took a stab at this one. Here is the commit https://github.com/neerajdotname/capybara/commit/37a0e3cecee7306c0ec13c0c760c591f8df44de9

With this commit you will get following error message if the selector does not find any element

<S_CODE_TOKEN>

However if the text did not match then error message would be 

<S_CODE_TOKEN>

Couple of things.

This is my first day looking at the source code of capybara. So please do provide feedback.

I used puts because when I used assert false, 'msg' then I got error message that assert is not defined. Not sure how you want that to be handled.

Thanks for all the good work. I am trying to learn and to contribute at the same time. :-)
",neerajdotname,2011-03-10 23:32:15
97,2010-11-04 18:37:05,"@Neeraj

thanks for taking the time to provide the patch, however, I don't think this is the right way to solve this problem. It's not even 100% certain that the method has_xpath is going to be used in a ""test"", Capybara could well be used for other things. Just printing out to standard out is too much of a side effect.

This is actually a pretty tricky problem. As I said in my original reply, I don't think that has_xpath even _can_ be used this way, since it will only ever return true or false, we need separate methods for this, I think.

Please also check the guide on contributing, it's a work in progress, which is why it isn't linked to from anywhere yet: https://github.com/jnicklas/capybara/wiki
",jnicklas,2011-03-10 23:32:15
97,2010-11-04 18:52:15,"Thanks for the prompt feedback. 

Read the wiki. I guess the message you wanted to pass on to me was to post something like this on message board so that more people can comment on it. I will do so. I did not write test because it is still work in progress. Also assert was not 
working and was not sure how you would like that issue to be handled.

Coming back to the original issue. The way I see it, the problem with my proposed solution is that has_xpath must return only true or false .

I have two questions:

1) I don't think I fully understood what you mean by :It's not even 100% certain that the method has_xpath is going to be used in a ""test"", Capybara could well be used for other things.  As far as I can see most of the assertion statements do call <tt>has_selector?</tt> .

2) In the original reply you said ""For each has__? method add an assert__ method, which raises an error instead of returning false. "". Does that mean I should raise an exception instead of puts.

Again thanks for the feedback. I am just started and if you could provide me a direction I would like to help resolve this issue.

Thanks.
",neerajdotname,2011-03-10 23:32:15
97,2011-03-10 23:32:15,"We've now started working on RSpec matchers, which will provide a rather nice solution for this. For people not using RSpec it still won't be ideal, but for now this should be good enough.
",jnicklas,2011-03-10 23:32:15
96,2010-06-30 17:09:55,"Running `session.locate(:xpath, '//div[@id=""nosuchthing""]')`
currently yields an error message of 'xpath', which sucks. I'd prefer ""Unable to locate '//div[@id=\""nosuchthing\""]'"", but most anything would be more meaningful.
",josephholsten,2010-07-01 04:41:46
96,2010-06-30 19:07:40,"fixed in http://github.com/josephholsten/capybara/commit/8ea5719ebd677f0c9f7a914a269939652b42e8ab
",josephholsten,2010-07-01 04:41:46
96,2010-06-30 21:42:48,"Merged, thanks!
",jnicklas,2010-07-01 04:41:46
95,2010-06-30 16:38:14,"I was trying to add a patch this morning and I had a bit of a headache getting all the right dev dependencies installed with regular gems. With a Gemfile, all you'd need to do is run `bundle install` in the repo and you'd have all your deps installed.
",josephholsten,2010-07-20 06:08:32
95,2010-06-30 17:07:37,"this patch works for me: http://github.com/josephholsten/capybara/commit/5aae7dee180f73659978cfa687319f61d3ebc57a
",josephholsten,2010-07-20 06:08:32
95,2010-06-30 21:38:33,"well ideally, all you'd need to do is

<S_CODE_TOKEN>

or something. For some reason though, development dependecies don't seem to work for me lately, I always get a rather cryptic error. Any ideas?
",jnicklas,2010-07-20 06:08:32
95,2010-07-01 02:01:12,"I prefer to avoid the conventional way build into rubygems because I'm never quite sure if I required the version I'm developing or the version installed as a gem.

But I've recently wanted to understand the RVM and rip ways of managing environments, maybe delving deeper into them will help me figure out something that doesn't add a new dependency.

The nice thing about bundler is that its use is entirely optional, so adding a Gemfile makes bundler fans happy, while everyone else can entirely ignore it. Not that I want to endorse having stuff in the repo that people should ignore.
",josephholsten,2010-07-20 06:08:32
95,2010-07-01 06:53:21,"I'm just afraid that the Gemfile will get out of sync, and that it'd be a headache to maintain two separate lists of gems.
",jnicklas,2010-07-20 06:08:32
95,2010-07-19 23:08:31,"No reason to keep this open if there isn't interest. Won't fix is fine by me.
",josephholsten,2010-07-20 06:08:32
95,2010-07-20 06:43:36,"I'm actually more and more inclined to do this, I even created a branch with bundler, it works quite nicely.
",jnicklas,2010-07-20 06:08:32
94,2010-06-29 16:20:59,"There's a conflict between rails 2.3.8 and rack-test versions prior to 0.5.4, causing errors along the lines of ""undefined method `downcase' for nil:NilClass (NoMethodError)"" when running tests, as described here: http://github.com/jnicklas/capybara/issues#issue/82 and here: http://github.com/brynary/rack-test/issues#issue/7

The issue was resolved in rack-test and released in version 0.5.4, but capybara is depending on >= 0.5.2.  I just had a colleague run into the problem today because he had an outdated version of rack-test installed.

Any chance that the rack-test dependency could be upgraded to be >= 0.5.4?

-John
",johnreilly,2010-06-30 02:24:59
94,2010-06-29 19:24:59,"Fixed by: http://github.com/jnicklas/capybara/commit/f25e751d204d4c083fdd477742767b5724aa944c
",jnicklas,2010-06-30 02:24:59
94,2010-06-29 20:37:12,"Thank you! :-) 

-John
",johnreilly,2010-06-30 02:24:59
93,2010-06-26 04:54:49,"I'm doing some validations with coordinates in DMS, so they look like that: 27°23'57""W

With a coordinate such as the one above, I found out that this test would pass for 27°23'57""N if I use has_content?

Then /^I should see ""([^\""]*\""[N|S|E|W])""$/ do |coordinates|
  page.has_content?(coordinates)
end

But it doesn't (which is the expected behavior) if I use the rspec should have_content instead.

Then /^I should see ""([^\""]*\""[N|S|E|W])""$/ do |coordinates|
  page.should have_content(coordinates)
end
",sowenjub,2010-06-26 16:55:53
93,2010-06-26 11:08:33,"That's... impossible :S

They're the same method. There's no have_content method anywhere in Capybara, it's dynamically generated by RSpec, and all it does is call page.has_content?

Something _very_ weird is going on here.
",jnicklas,2010-06-26 16:55:53
93,2010-06-26 12:54:13,"Well, don't know what to say, I tested again and was ready to be a fool but no:
- run tests with has_content? => pass whereas it's N instead of W
- change for should have_content => fail as expected

I have no idea where to look :/
",sowenjub,2010-06-26 16:55:53
93,2010-06-26 13:17:46,"well, note that `has_content?` is not an assertion. It will return `false` if the content is not there. It _won't_ raise an error message. So the step as written above will actually do nothing.
",jnicklas,2010-06-26 16:55:53
93,2010-06-26 16:55:48,"OK, I was missing an assert before the page.has_content?... Sorry you lost time on that, maybe it could help to add that in the readme/querying
",sowenjub,2010-06-26 16:55:53
92,2010-06-25 20:19:09,"I had an input field that looked like this

<input name='searches[capacity]' />

fill_in('searches[capacity]', :with => '5') didn't work until I changed my input field to this:

<input type='text' name='searches[capacity]' />
",michaelglass,2010-06-29 19:45:31
92,2010-06-29 19:45:31,"This is a dupe of #75, See: http://github.com/jnicklas/capybara/issues/closed#issue/75
",jnicklas,2010-06-29 19:45:31
91,2010-06-21 09:25:14,"When I run an individual test that fills in and then clicks the Ok button on a jQuery-generated dialog, I get really inconsistent results. Without changing any of my code, Capybara/Selenium-Webdriver will be either completely blind to the Ok button, or find and click it. I've run the same six line test over and over again for the past 30 mins and sometimes it works, sometimes it doesn't. Anyone have an ideas? The relevant step ""I press Ok within .ui-dialog-buttonpane"" is a standard method in web_steps.rb.

<S_CODE_TOKEN>
",infinitely,2010-10-08 13:18:08
91,2010-06-21 09:33:39,"Have you tried running it in a different driver? This might tell you if it's your code or something in Selenium/Capybara.
",jnicklas,2010-10-08 13:18:08
91,2010-07-07 14:11:15,"This might be a strange request, but would you mind if I used the cucumber feature you wrote above in a blog post. It's interesting from a philosophical point of view. I kind of disagree with the way it is written, so I'd be a bit critical, would that be okay for you?
",jnicklas,2010-10-08 13:18:08
91,2010-07-08 18:35:50,"Infinitely, I _might_ have run into the same issue you are and it was fixed for me if I completely removed FakeWeb or WebMock.  I tried both, and neither worked.  They each have a method to allow requests to go through, but even turning that on caused timing issues.  Only the full removal of them from the codebase (ie, no requires) worked for me.  

FYI.
",skippy,2010-10-08 13:18:08
91,2010-10-08 13:18:07,"Closing this since there hasn't been any activity here and the problem afaik has never been replicated.
",jnicklas,2010-10-08 13:18:08
90,2010-06-21 00:35:56,"I noticed a weird behavior with capybara 0.3.8 and rspec-rails 2.0.0.beta.12. When calling visit multiple times within a rspec describe block, all XPath/CSS-path queries began to fail after the second visit. I then found that page.body was being set to ""RSpec-generated template"".
",postmodern,2010-06-21 01:22:15
90,2010-06-21 01:22:14,"Oops. This is because rspec-rails-2 does not render views by default, and one needs to specify `render_views` in all Controller specs to re-enable the views.
",postmodern,2010-06-21 01:22:15
89,2010-06-09 18:45:10,"Let's say you have a form that has one image submit tag, and a regular submit tag. If you tell Capybara to click the submit tag, the image submit tag gets passed along as one of the parameters -- basically it's like both buttons are being clicked. Hence, if the action that your form goes to is trying to determine which button was clicked, it's always going to think one or the other is clicked.

I noticed that in the rack_test_driver.rb file, in the Form#params method, you've got this:

<S_CODE_TOKEN>

I'm really wondering if that should be this instead:

<S_CODE_TOKEN>

I don't have time right now but I can submit a proper failing test later.
",mcmire,2010-06-19 14:53:46
89,2010-06-12 17:39:03,"Yeah, that's definitely wrong, it shouldn't be submitting those.
",jnicklas,2010-06-19 14:53:46
89,2010-06-15 14:42:31,"Here's a patch w/ test if you want to check it out: http://github.com/mcmire/capybara/commit/8bc40bf5e0c9d3b4a478671f5944f9b7279f6cc6
",mcmire,2010-06-19 14:53:46
89,2010-06-19 14:53:44,"Awesome, merged!
",jnicklas,2010-06-19 14:53:46
88,2010-06-04 16:39:34,"When attempting to select the only remaining option in a drop-down menu, I get:

No such option 'Billy' in this select box. Available options: '', '', '' (Capybara::OptionNotFound)

However, if I just bypass a select step and immediately go to submit the form, without doing anything to the select box, it succeeds and goes through (because if there is only one option, it is already selected).

At first I thought maybe behavior to select an item more than one time was broken, but if there are multiple items in the select box, I can select one of them multiple times without a problem.

Also, the fact that it gives three available options that are all the null string is weirding me out.

One even weirder thing is that, in a seemingly random fashion, these errors sometimes become Culerity::CulerityExceptions that point to a java.lang.NullPointerException.
",davidcelis,2010-10-08 13:17:30
88,2010-06-05 17:58:01,"are you sure your markup is valid? Could you post it please?
",jnicklas,2010-10-08 13:17:30
88,2010-06-29 21:02:01,"Any more information on this?
",jnicklas,2010-10-08 13:17:30
88,2010-07-06 21:10:34,"Just to add I'm seeing this behavior in 0.3.9 with a basic form (rails3)

<S_CODE_TOKEN>

<pre>
No such option 'al.davis' in this select box. Available options: '', '', 'al.davis', 'fred.smith', 'wendell.owens' (Capybara::OptionNotFound)
</pre>
",gberenfield,2010-10-08 13:17:30
88,2010-07-06 21:22:16,"Which driver are you using? If you have the time, could you try isolating this into a failing spec, it's really hard to know what's causing this, since I can't seem to reproduce it.

/Jonas
",jnicklas,2010-10-08 13:17:30
88,2010-07-06 21:50:58,"Using the default driver. I'll take a look at it and try to create a spec. Using ruby-1.9.2-preview3 btw
",gberenfield,2010-10-08 13:17:30
88,2010-07-17 14:12:40,"I solved this for myself by creating a step as follows

<S_CODE_TOKEN>
",gberenfield,2010-10-08 13:17:30
88,2010-08-05 19:19:22,"We are seeing this issue using Selenium and Firefox. When we switch to Chrome, the issue disappears.

We tried the suggestion from gberenfield, but that didn't fix the issue.
",pivotal-avery,2010-10-08 13:17:30
88,2010-10-04 20:39:37,"Is this still an issue?
",robholland,2010-10-08 13:17:30
88,2010-10-04 20:49:37,"I've never been able to replicate this, unless someone can come up with a failing spec, I think we should close this issue.
",jnicklas,2010-10-08 13:17:30
88,2010-10-08 13:17:30,"Closing this, please reopen with a failing spec!
",jnicklas,2010-10-08 13:17:30
87,2010-06-04 14:15:06,"Hey there,

In one of my specs I'm getting several warnings because of this line:

click 'Enviar instruções de redefinição de senha'

gems/rack-1.1.0/lib/rack/utils.rb:15: warning: regexp match /.../n against to UTF-8 string
gems/rack-1.1.0/lib/rack/utils.rb:15: warning: regexp match /.../n against to UTF-8 string
gems/rack-1.1.0/lib/rack/utils.rb:15: warning: regexp match /.../n against to UTF-8 string
gems/rack-1.1.0/lib/rack/utils.rb:15: warning: regexp match /.../n against to UTF-8 string

In case it helps, here is my Gemfile content https://gist.github.com/c0e8f04433cf1affcf84

Thanks,
Marcelo
",mhfs,2010-06-30 03:00:40
87,2010-06-04 14:16:17,"Oops ... forgot to mention I'm using ruby-1.9.2-preview3.
",mhfs,2010-06-30 03:00:40
87,2010-06-12 17:50:44,"sounds like this is coming from inside rack, any evidence this is a Capybara problem?
",jnicklas,2010-06-30 03:00:40
87,2010-06-19 16:08:34,"I'm also using Capybara and I'm having exactly the same problem, but I can't tell you it is a Capybara problem. I don't know what is the cause... I'm also having this warnings:

Non US-ASCII detected and no charset defined.
Defaulting to UTF-8, set your own if this is incorrect.

These are probably related to mail delivering...
",rosenfeld,2010-06-30 03:00:40
87,2010-06-19 16:12:18,"God I hate Ruby 1.9 charset issues :(
",jnicklas,2010-06-30 03:00:40
87,2010-06-19 17:52:30,":)
",rosenfeld,2010-06-30 03:00:40
87,2010-06-29 20:00:40,"I find it very unlikely that this is a Capybara issue. Closing this. If someone can prove to me otherwise, please reopen!
",jnicklas,2010-06-30 03:00:40
87,2010-07-09 14:21:43,"Yes, Rack::Utils.escape uses an ascii regural expression on unicode data, notice the '/n'

<S_CODE_TOKEN>

But I have no idea where this gets called :|
",ctrochalakis,2010-06-30 03:00:40
87,2010-08-16 19:13:12,"Its because of the _snowman ...
",e2,2010-06-30 03:00:40
87,2010-08-16 19:49:35,"http://github.com/rack/rack/issuesearch?state=open&q=warning#issue/41
",e2,2010-06-30 03:00:40
87,2010-08-16 20:06:04,"Here is a extremely bad patch for capybara/driver/rack_test_driver.rb:

<pre>
  def process(method, path, attributes = {})
    return if path.gsub(/^#{request_path}/, '') =~ /^#/

    if Kernel.const_defined?(:Encoding)
      att = {} 
      attributes.each_pair do |k,v|
        key = k.dup.force_encoding(Encoding::ASCII_8BIT)
        att[key] = v.dup.force_encoding(Encoding::ASCII_8BIT)
      end
      path = path.dup.force_encoding(Encoding::ASCII_8BIT)
    else
      att = attributes
    end

    send(method, path, att, env)
    follow_redirects!
  end
</pre>


The same goes for the submit method.
",e2,2010-06-30 03:00:40
87,2010-08-16 21:26:14,"I don't know much about encodings, but that seems completely wrong to me. Unless the attributes are _actually_ in ASCII_8BIT, then force encoding them there seems like a bad idea, and if they're not ASCII, then why cast them? Wouldn't that just lead to encoding errors? I think in effect we are removing the encoding information from the Strings for no gain. The problem lies deeper than this. I'm not sure how to fix it, but I'm pretty sure this isn't it.
",jnicklas,2010-06-30 03:00:40
87,2010-08-17 13:23:00,"ASCII_8BIT is an alias for binary and 'force_encoding' does _exactly_ what you mentioned: it removes the encoding. You cannot ""encode"" to binary, and as for speed, this doesn't have overhead, apart from looking very ugly. The fact is that frameworks such as cucumber don't guarantee binary strings, and they don't seem to belong to rack.

Why Capybara? Because rack works on binary data and is optimized for real world applications, where parameters are binary, because you cannot effectively make assumptions about the encoding (what about UTF-16? Shift-JIS? - they will crash on the /u parameter). Capybara has a driver that passes utf-8 strings that occur only because the parameters are crafted in the cucumber tests and never cast to binary.

In summary, the warning is there because making thing assume utf-8 is fundamentally wrong and suggests a deeper problem, as you have described.

Summary: In my opinion Capybara should simulate the real world by passing unencoded strings (ASCII_8BIT as named in ruby), instead of getting rack to work around acceptance tests, which provide non-binary strings and grow encoding handling functionality.

Also, note that the US_ASCII is the only exception that is compatible with ASCII_8BIT ('binary' in normal people's terms) and ruby handles automatic conversion as a special case. Thats why it works without warning until utf-8 characters are used (_snowman in this case).

I deeply recommend the following: http://yehudakatz.com/2010/05/17/encodings-unabridged/

You can read through ruby-core (especially Yui Naruse's comments) on why ruby works this way and there is no ""binary"" encoding.
",e2,2010-06-30 03:00:40
87,2010-08-19 12:24:04,"That was a case well made, I'm actually convinced. Can you provide a patch with tests? That'd be absolutely awesome! This whole encoding thing is giving me headaches (and yes, I've read through Yehuda's article, and a number of others), so I feel ill equipped to tackle this.
",jnicklas,2010-06-30 03:00:40
87,2010-08-19 20:06:34,"Rushed patch with tests here:

http://github.com/e2/capybara/commit/c8a55c4011c2f91943ee9aeebe3b81a4420c3ecf

I don't like the solution and you can completely redo it without crediting me at all - and I will be completely happy. Just let me know once you have patched it so I can nuke my fork...

Thanks :)

P.S. Sorry about ""bonus"" indenting - I just didn't want to rebase+squash AGAIN...
",e2,2010-06-30 03:00:40
87,2010-08-20 13:06:57,"Good job e2! I actually thought that solution was pretty decent. I've merged it in, if someone wants to improve on it, they're welcome, but this looks good for now.
",jnicklas,2010-06-30 03:00:40
87,2010-09-28 00:12:18,"Humm, I upgraded to this while using (ruby 1.9.2, Rails 3.0.0). While I don't get the warning, things are worse off. My tests fail with a :

<pre>
undefined local variable or method `node' for #<Capybara::Driver::Node tag=""a"" path=""/html/body/div/a""> (NameError)
./features/step_definitions/web_steps.rb:35:in `block (2 levels) in <top (required)>'
./features/step_definitions/web_steps.rb:14:in `with_scope'
./features/step_definitions/web_steps.rb:34:in `/^(?:|I )follow ""([^\""]*)""(?: within ""([^\""]*)"")?$/'
</pre>


When I try to use Spork, I get this:

<pre>
/home/jwilson/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/drb/drb.rb:573:in `load': too large packet 67654656 (DRb::DRbConnError)
    from /home/jwilson/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/drb/drb.rb:632:in `recv_reply'
    from /home/jwilson/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/drb/drb.rb:918:in `recv_reply'
    from /home/jwilson/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/drb/drb.rb:1197:in `send_message'
    from /home/jwilson/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/drb/drb.rb:1088:in `block (2 levels) in method_missing'
    from /home/jwilson/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/drb/drb.rb:1172:in `open'
    from /home/jwilson/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/drb/drb.rb:1087:in `block in method_missing'
    from /home/jwilson/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/drb/drb.rb:1105:in `with_friend'
Exception encountered: #<TypeError: incompatible marshal file format (can't be read)
    format version 4.8 required; 0.0 given>
backtrace:
</pre>
",jwilsonsprings,2010-06-30 03:00:40
87,2010-09-28 00:13:23,"To be fair, I just pulled edge from github, so possible this is something else... Falling back to released 0.3.9
",jwilsonsprings,2010-06-30 03:00:40
87,2010-09-28 06:53:13,"You shouldn't be getting that error on the latest master. It's a problem where cucumber monkey-patches a Capybara method which no longer exists. There's a line in env.rb along the lines of:

<S_CODE_TOKEN>

or something to that effect. Remove it and the error will go away.
",jnicklas,2010-06-30 03:00:40
87,2010-09-28 14:15:19,"Yep, that did it! Thanks.
",jwilsonsprings,2010-06-30 03:00:40
87,2010-11-11 19:15:14,"Deleting this makes clicking normal links work, but for me at least then links with onclick's (generated from link_to ... :method => :post) fails..

Any ideas?
",DCarper,2010-06-30 03:00:40
87,2011-01-15 17:26:14,"Having the same problem. Any resolution?
",leebyrd,2010-06-30 03:00:40
87,2011-06-09 10:22:16,"whatever happened to this issue?
",jeroenhouben,2010-06-30 03:00:40
87,2011-06-09 10:26:11,"OK seems to be continued here: https://github.com/jnicklas/capybara/issues/243
",jeroenhouben,2010-06-30 03:00:40
87,2011-06-09 17:12:23,"tl;dr: upgrade to Rack 1.3.0
",jnicklas,2010-06-30 03:00:40
87,2011-09-15 17:27:00,"tl;dr 2:

A lot of things don't support Rack 1.3.0 yet (formtastic, rails 3.0.9, sendgrid-rails, etc). For now, you can put this in an initializer or support file:

<S_CODE_TOKEN>
",mischa,2010-06-30 03:00:40
86,2010-06-03 08:24:56,"With capybara 0.3.8, cucumber 0.7.3 and rspec-rails 1.3.2, when I run the features in a Rails 2.3.8 app (I'm upgrading an old cucumber setup), I get the following error: http://gist.github.com/423640

It doesn't happen if I revert Rails version to 2.3.4.

Also one person reported this in http://groups.google.com/group/cukes/browse_thread/thread/5bafc077b11b014d/73ca7457b48bb7e0?lnk=raot&pli=1
",markoa,2010-06-04 00:09:02
86,2010-06-03 17:09:02,"Try upgrading to the latest rack-test, it should fix it.
",jnicklas,2010-06-04 00:09:02
86,2010-06-04 09:27:12,"I've installed rack-test-0.5.4, but I'm still getting the same error message.
",markoa,2010-06-04 00:09:02
86,2010-08-30 12:59:54,"i have this issue with facebooker gem
",denro,2010-06-04 00:09:02
85,2010-06-02 19:56:53,"Capybara does not play nice with sites that have some actions protected by SSL, some not. A popular way to implement this in Rails is using the ssl_requirement plugin by DHH, which redirects a requests from HTTP to HTTPS if the requested action requires SSL and vice versa.

Capybara follows the redirect, but seems to forget the changed protocol for the next request. The only workaround right now is to use URLs in lieu of paths everywhere (links, form actions).
",triskweline,2011-05-19 16:23:59
85,2010-06-03 06:50:47,"Which driver is this in? That's not really something Capybara handles itself, my guess would be that this is a rack-test problem?
",ingemar,2011-05-19 16:23:59
85,2010-06-03 09:24:51,"Thanks for getting back to me. I'm using the default driver script/generate cucumber --capybara gives me. I'm guessing this is Rack::Test?

Can you point me at the vague direction of source code that might be at fault? I checked http://github.com/brynary/rack-test and it only seems to be a thin layer over functionality provided by Rack.

I also uploaded a demo Rails application that exposes the issue to http://github.com/henning-koch/capybara-ssl-issue .
",triskweline,2011-05-19 16:23:59
85,2010-07-05 12:55:03,"The root of the problem, as I see it, is that capybara + rack test do not emulate the way a browser handles a request url, when a browser sees ""/users/signin"" on a form it will send it to the pages current host.

 e.g. on https://example.com/ it will send the request to https://example.com/users/signin which rack/rails picks up and sets the appropriate information in request 

RackTest is necessarily short-circuiting this process and as such capybara isnt sending the host information necessary to make rack understand wether a request is https or http. 

This, http://gist.github.com/464185,  is my original gist that attempts to solve the problem based upon the previous request's destination, which I found to be flawed.

This, http://gist.github.com/464323, is a slightly improved if more complex version. In my belief the best way to solve the problem would be to root all requests through a process method similar to that found in capybara 0.3.9, http://github.com/jnicklas/capybara/blob/0.3.9/lib/capybara/driver/rack_test_driver.rb#L201, and have that prepend a host and protocol defined to them.  
",JonRowe,2011-05-19 16:23:59
85,2010-07-07 07:22:36,"Thank you for the patches, Jon. I prepared a version that should work with all versions of Capybara and should be resilient against future changes in the Rack::Test driver: http://gist.github.com/466411

I took your suggestion about overriding a central method. process didn't work, so I overrode :get, :post, :put and :delete.
",triskweline,2011-05-19 16:23:59
85,2010-07-22 12:26:33,"I tried the latest version of henning-koch and that solved the problem for my setup (capybara 0.3.9, rails edge, cucumber 0.8.5 )

Thanks everyone
",jeroenvandijk,2011-05-19 16:23:59
85,2010-09-08 18:03:09,"Confirming that henning-koch's last gist works for me too. The main issue I had with this was discovering that following requests didn't not respect the previous ssl redirects. Looking at the logs you can see that the driver is following the ssl redirects, so it takes some time working out what is wrong. Even more so when it all the standalone rspec tests a confirm the action should be working.
",cehoffman,2011-05-19 16:23:59
85,2010-10-27 20:31:02,"+1 This also fixes when you're testing subdomains and want to maintain the host without magically inserting the host before each request path. Per Jonas suggestion to (instead of mucking with Capybara.default_host or app_host):

<S_CODE_TOKEN>

Applying this fix allows one to `visit 'http://host.to'` and, until you visit another full URL, send subsequent requests to that path.

Any idea whether this can be accepted or not? Does it need to take the form of a pull request to be truly considered?
",doxavore,2011-05-19 16:23:59
85,2010-11-03 20:36:37,"No, it doesn't need to be a pull request. I'll try and write some failing specs for that, and then integrate the patch.
",robholland,2011-05-19 16:23:59
85,2011-03-24 22:43:25,"I had the same problem too, and the last gist is working fine so far.
",freegenie,2011-05-19 16:23:59
85,2011-05-06 23:11:30,"+1 I had this problem as well and the gist worked for me too.
",cjamison,2011-05-19 16:23:59
85,2011-05-19 16:23:59,"This should be fixed by the latest changes to how rack-test driver remembers the host.
",jnicklas,2011-05-19 16:23:59
85,2011-05-21 00:01:37,"jnicklas -- sorry, what commit fixed the problem?
",joevandyk,2011-05-19 16:23:59
85,2011-05-21 00:43:53,"@joevandyk: 29319c0546982fb589aebff270521bcec7289a49
",jnicklas,2011-05-19 16:23:59
85,2011-08-17 19:56:00,"This still isn't fixed.  After a redirect from http to https, relative paths still go to http.
",listia-liti,2011-05-19 16:23:59
85,2011-08-18 07:11:35,"@listia-liti: can you produce a test case for this?
",jnicklas,2011-05-19 16:23:59
84,2010-06-01 17:39:38,"system running capybara 0.3.8 and ruby REE 1.8.7

in save_and_open_page.rb
...
        list << name if File.directory?(name)) and not name.to_s =~ /^./
...

never seems to work correctly but if I change it to:

<S_CODE_TOKEN>

then it works. The name local in the scope of that block has no context if asset_root since you are not in chdir block

Did this ever work before?
",schubert,2010-06-30 04:01:04
84,2010-06-02 17:15:20,"save_and_open_page works reliably for me, never had any problems.
",jnicklas,2010-06-30 04:01:04
84,2010-06-29 21:01:03,"I've used save_and_open_page reliably on a number of machines, closing this, please reopen if you have further information.
",jnicklas,2010-06-30 04:01:04
84,2010-09-08 09:09:40,"I've encountered the same issue running Capybara 0.3.9 and Ruby 1.9.2-p0. The above change indeed fixes the problem. I haven't investigated this, but since it was working reliably before, it might have something to do with changes in Ruby 1.8.7/1.9. Is Dir.new supposed to set the current directory for the block it is passed?
",martijnwalraven,2010-06-30 04:01:04
84,2011-07-22 19:27:10,"If Capybara.asset_root is set, then:

(root+name).directory? and not name.to_s =~ /^./'
raises: NoMethodError: undefined method `directory?' for ""asset_root."":String
at lib/capybara/util/save_and_open_page.rb:32:in`rewrite_css_and_image_references'

If asset_root isn't set then the method returns before it gets to the problem line.

It's possible that someone somewhere monkeypatches String with #directory? but it's not true here in this Rails 3.0.9 project.

You want a pull request?
",nyarly,2010-06-30 04:01:04
83,2010-05-26 11:20:05,"Hi

I'm successfully using capybara to test a cucumber feature with selenium in firefox (on mac).

I've created a 2nd feature and was hoping that it would be run without issue. However, when cucumber finishes testing the first feature and starts testing the 2nd, I get an error:

  undefined method `call' for nil:NilClass

I guess that the selenium server is being closed and as such it fails to test the 2nd feature.

Any advice welcome :)

Andy
",andygoundry,2010-05-26 14:30:11
83,2010-05-26 14:22:55,"Hard to tell without a stack trace, but my guess would be that the second scenario is running under rack-test for some reason, yet no rack app is set!

/Jonas
",jnicklas,2010-05-26 14:30:11
83,2010-05-26 14:29:49,"Thanks for the reply. Yep, in fact i discovered that in env i'd set this:
Capybara.current_driver = :selenium
and i should have set this:
Capybara.default_driver = :selenium

Easy one :)
",andygoundry,2010-05-26 14:30:11
83,2010-05-26 14:30:11,"Closing
",andygoundry,2010-05-26 14:30:11
81,2010-05-24 02:13:36,"Since discovering how easy @javascript makes it to test js I've started doing some PE of an existing app with prototype/scriptaculous/lowpro, but have come upon some issues with hidden elements. 

Following up from [this group posting](http://groups.google.com/group/ruby-capybara/browse_thread/thread/5ecea8e8c5b82a77/c6acc143b7e603b9?lnk=gst&q=hidden#c6acc143b7e603b9) and my own troubles with [this feature/scenarios/stepdefs](http://gist.github.com/411453) on selenium, I have produced [a feature branch w/ 2 failing specs](http://github.com/nruth/capybara/commit/358b09a30582157b7aa5c5e79992d315dd502f8d) tested in the rack-test and selenium session specs (I don't have the other bits and bobs installed, sorry). 

I'm going to have a poke about the capybara code, but not sure whether I'll get very far with it.

I wonder if it's just a setting not being passed somewhere or other for has_content, since the find matchers seem to be working as expected when turning ignore_hidden_elements on/off.
",nruth,2011-04-10 18:27:31
81,2010-08-02 18:14:18,"ignore_hidden_elements doesn't seem to change anything for my tests using @selenium. While I do see the element disappear in the browser as the test runs the test fails on ""And I should not see ""Billing Address"". Changing this to ""And I should see ""Billing Address"" passes. I've yet to find a solution.
",tinomen,2011-04-10 18:27:31
81,2010-09-02 09:06:48,"Same here, ignore_hidden_elements setting doesn't make any change in this situation. Looking for a solution

EDIT: I've investigated a bit - it filters visible/not visible elements actually GOOD, BUT that selector of content returns bunch of nodes that don't contain the text that we're matching. It returns that node too but filters out as invisible, other shouldnt-be-there nodes are left out so are not counted correctly
",vidmantas,2011-04-10 18:27:31
81,2010-10-14 17:31:37,"Yeah ignoring hidden elements is a big reason why I wanted to use integration testing and Capybara. Hopefully it gets fixed soon.
",suan,2011-04-10 18:27:31
81,2010-11-04 03:05:39,"Today I came across https://github.com/alexdunae/premailer/blob/master/lib/premailer/html_to_plain_text.rb . premailer internally uses https://github.com/alexdunae/css_parser to bring all the css properties inline.

Right now the issue with ""display:none"" through css is that capybara only looks for ""display:none"" as inline style.

With premailer/css_parse all the css properties are brought to inline and then check for ""display:none"" will render right result.

Just a thought that popped up in my head when I saw premailer. What say.
",neerajdotname,2011-04-10 18:27:31
81,2010-11-10 15:24:18,"If any one is interested, this is my quick fix.

<S_CODE_TOKEN>
",bjornblomqvist,2011-04-10 18:27:31
81,2010-11-11 11:09:19,"But have to use selector which is not ""human-friendly""... so cucumber steps one step further from its one of purposes :-)
",vidmantas,2011-04-10 18:27:31
81,2010-11-11 12:02:04,"My quick fix doesn't need a selector. If thats what you are commenting on.
",bjornblomqvist,2011-04-10 18:27:31
81,2010-11-18 13:30:23,"@bjornblomqvist your quick fix works perfectly. Thanks for that :)
",sriprasanna,2011-04-10 18:27:31
81,2010-11-30 02:58:43,"The workaround has a couple of issues.  It doesn't correctly handle cases where two elements have the same text but only one is visible.  Also, I ran into cases where jQuery was mis-reporting elements as being ':visible' in the same way as celerity.  This is the workaround that I ended up with.  I realize it's hideous.

<S_CODE_TOKEN>

In English: filter locator and all of the elements under locator, looking for elements containing the search string.  We only care about the lowest nodes, so remove any parent nodes from the search.  Filter that list down to the list of visible nodes containing the search text.  Finally, to work around the Celerity bug, filter out ""visible"" nodes which have an ancestor which is hidden.

_edit_ Performance was too slow on huge pages when the caller doesn't provide a locator.  Updated the code so its performance is better.
",bilts,2011-04-10 18:27:31
81,2011-04-10 18:27:30,"I don't think there is any really good way of handling this right now. This issue doesn't really help us, unless someone can provide any working fix. If you really want this, please reopen with a pull request.
",jnicklas,2011-04-10 18:27:31
81,2012-03-05 16:39:33,"It looks like we need to be passing Capybara.ignore_hidden_elements along to XPath::HTML.
In XPath 0.1.4, see lib/xpath/html.rb:40.  That's where attribute 'hidden' is hardcoded into an xpath 'not()'.

I can hack around this with something like:

<S_CODE_TOKEN>

but that's not pretty at all.
",twcamper,2011-04-10 18:27:31
81,2012-03-05 16:42:55,"Check Capybara's master, we've improved on this a lot, and it's now a lot less inconsistent.
",jnicklas,2011-04-10 18:27:31
81,2012-06-06 21:37:26,"Hidden elements are properly ignored by have_content in `capybara/master`, regardless of ignore_hidden_elements setting, at least using the `capybara-webkit` driver. This seems like the semantically-correct behavior, since have_content seems to address what the user sees, not what elements are in the DOM.

@jnicklas perhaps a new release is in order? This is a blocker for me using Capybara for JS testing, and while I can just use the :git option in Gemfile, the Capybara repo is 6.2MB and [Bundler doesn't do --depth](https://github.com/carlhuda/bundler/issues/228) so I hesitate to foist it on my teammates.
",edrex-janrain,2011-04-10 18:27:31
81,2012-06-13 01:46:25,"+1 for a release. I wasted hours trying to understand why `have_{no}_content` was seeing invisible text and trying to circumvent that. Only upside is I now know more about XPath...
",marcandre,2011-04-10 18:27:31
81,2012-06-14 16:23:35,"I was _not_ successful in upgrading to current master. I had to also upgrade `capybara-webkit`, as the last official release appears to not be compatible with capybara master. I don't know which of the two is responsible, but I was getting intermittent errors.

I focused on a ultra basic integration spec with 5 scenarios. All five begin by calling the same `login` helper. I turned of the layout for that login screen, so no javascript whatsoever is taking place. Most of the times, but not all the time, the last two would fail to login. No error, fields are filled in but form is not posted. Sometimes all 5 pass, sometimes the last 2 fail.

After reverting to the last official version (1.1.2 and 0.12.1), I never get a failure.

So my dream at this point is an official release of capybara that provides exactly one thing: `has_{no_}_content?` which checks for the visibility of the content.

BTW, the doc in master still states there is a difference between `has_content?` and `has_text?`.

Thanks
",marcandre,2011-04-10 18:27:31
81,2012-06-14 16:24:40,"Could you please reopen this issue, or else should I follow another issue? Thanks.
",marcandre,2011-04-10 18:27:31
81,2012-06-14 21:29:01,"I too would be interested in a solution to this issue.
",chazu,2011-04-10 18:27:31
81,2012-06-14 21:45:52,"@chazu For now, you can copy paste the `has_{no_}text` methods from https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/matchers.rb , along with `normalize_whitespace` and things should work
",marcandre,2011-04-10 18:27:31
81,2012-06-22 19:41:23,"The code for has_{no_}text methods include the following comment:

  # Unlike has_content this only matches displayable text and specifically
  # excludes text contained within non-display nodes such as script or head tags.

And then has_{no_}content is aliased to has_{no_}text. Was that an oversight?
",outerim,2011-04-10 18:27:31
81,2012-06-22 21:23:19,"Yes, that's an oversight.
",jnicklas,2011-04-10 18:27:31
80,2010-05-22 22:35:23,"I'm working on a webapp for iPhone. Safari supports HTML5's type=""url"" for input fields which I use mainly because it changes the iPhone keypad accordingly. Capybara is running Firefox though.

In this case, fill_in fails silently. This may also apply to other input field types, I didn't check those.
",awendt,2010-06-30 02:59:06
80,2010-05-23 00:04:44,"Capybara supports type=""url"" and friends, this is covered by the test suite. Please provide a failing test or something.
",jnicklas,2010-06-30 02:59:06
80,2010-05-24 20:12:28,"The tests cover serialization of a value attribute, but not filling in. I've pushed a test case to my fork that fails. It tests `fill_in`, see awendt@3e80738c74382d8ccdb09c1a4a7abbcdbc1c1027
",awendt,2010-06-30 02:59:06
80,2010-06-29 19:59:06,"Added spec which proves that URL fields work, closed by d72d9998ff6c9510cefbfe535c594a1e3e0d7cc0
",jnicklas,2010-06-30 02:59:06
80,2010-06-29 19:59:57,"Your test case is wrong, it pushes the wrong button. I think this may actually have been broken and fixed ""accidentally"" at some point. I've added a test to prove that it works now.
",jnicklas,2010-06-30 02:59:06
79,2010-05-22 19:24:26,"OS: Arch linux
Ruby:  ruby 1.9.3dev (2010-05-08 trunk 27674) [x86_64-linux]

bundle show:

<pre>
  * capybara (0.3.7)
  * configuration (1.1.0)
  * cucumber (0.7.3)
  * cucumber-rails (0.3.1)
  * rails (3.0.0.beta3)
  * railties (3.0.0.beta3)
  * rake (0.8.7)
  * rspec (2.0.0.beta.8)
  * rspec-core (2.0.0.beta.8)
  * rspec-expectations (2.0.0.beta.8)
  * rspec-mocks (2.0.0.beta.8)
  * rspec-rails (2.0.0.beta.8)
</pre>


_index.html.erb_ code:

<pre><code>
<!-- company -- >
la-la-la
<!-- company -->
</code></pre>

First line with --[space]>

Mozilla recognise this code and browser render is ""la-la-la"".

But cucumber fails:

<pre><code>And I should see ""la-la-la""                  # features/step_definitions/web_steps.rb:107
      expected #has_content?(""la-la-la"") to return true, got false (Rspec::Expectations::ExpectationNotMetError)
      ./features/step_definitions/web_steps.rb:110:in `block (2 levels) in <top (required)>'
      ./features/step_definitions/web_steps.rb:14:in `with_scope'
      ./features/step_definitions/web_steps.rb:108:in `/^(?:|I )should see ""([^\""]*)""(?: within ""([^\""]*)"")?$/'
      features/manage_companies.feature:31:in `And I should see ""la-la-la""'
</code></pre>


But 

<pre><code>
<!-- company -->
la-la-la
<!-- company -->
</code></pre>

works fine.

P.S. I spend very much time to find where is the trouble/bug :)
",petRUShka,2010-05-23 00:02:52
79,2010-05-23 00:02:52,"Errr... interesting, but I don't see how this bug is really a, hmm, bug? Capybara is failing to parse incorrectly formatted HTML?

Besides, you'd need to get this fixed in Nokogiri (and therefore libxml), and not in Capybara. Honestly, I don't think they will though ;)
",jnicklas,2010-05-23 00:02:52
78,2010-05-21 14:24:18,"I have a cucumber feature which uses culerity. I've installed celerity as recomended (jruby -S gem install celerity). I've installed jruby using rvm and created a symlink in /usr/bin/jruby to the jruby rvm path.

When I try to run my tests (cucumber features/myexample.feature --tags @culerity), I get this error:

/usr/local/rvm/rubies/jruby-1.5.0/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in `require': no such file to load -- celerity (LoadError)
    from /usr/local/rvm/rubies/jruby-1.5.0/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in`require'
    from /usr/local/lib/ruby/gems/1.8/gems/culerity-0.2.10/lib/culerity/celerity_server.rb:2
    from /usr/local/lib/ruby/gems/1.8/gems/culerity-0.2.10/lib/culerity/celerity_server.rb:2:in `require'
    from /usr/local/lib/ruby/gems/1.8/gems/culerity-0.2.10/lib/../bin/run_celerity_server.rb:2
F--------------

What is wrong? If I run a 'jruby -S gem list' I get the celerity gem listed, so it's properly installed in the jruby environment.

Thanks for any help

Daniel
",danicuki,2010-05-22 01:45:11
78,2010-05-21 18:45:11,"Found the problem: I was using rvm with a root account. For a normal user, it worked.
",danicuki,2010-05-22 01:45:11
78,2010-06-09 17:08:17,"I'm having exactly the same issue, only that I'm not using rvm. Jruby is located in /opt/jruby and /opt/jruby/bin added to the PATH. I can install and list the gems without issues, but running my spec file will throw the LoadError on celerity. Would you mind describing the steps you did to fix it, exactly?

Thanks,

Marcelo.
",fullofcaffeine,2010-05-22 01:45:11
77,2010-05-20 13:32:58,"I am writing an app that accepts post requests from flash. Therefore I have to use the page.driver#post method. One of the actions performs a redirect and it is not followed automatically and therefore the cucumber breaks.

My workaround has been to explicitly call the private page.driver#follow_redirects! which is not ideal.

I think the post should follow redirects out of the box, or at least the follow_redirects! method should be available as a public method from my step.
",tomtt,2010-05-20 20:50:37
77,2010-05-20 13:50:36,"By using page.driver.post you are using an undocumented driver specific function, which works according to the rules provided by the driver. Rack-test does not automatically follow redirects, so neither should Capybara, imho.
",jnicklas,2010-05-20 20:50:37
77,2010-05-20 14:06:43,"Could you make follow redirects public though? It seems silly to make people duplicate that code if that's the behaviour they want.
",robholland,2010-05-20 20:50:37
77,2010-05-20 14:28:10,"I guess there'd be no harm in that.
",jnicklas,2010-05-20 20:50:37
77,2010-06-29 21:33:09,"It's public now.
",jnicklas,2010-05-20 20:50:37
77,2015-09-13 04:22:05,"FYI could not find it ... using this now :(

<S_CODE_TOKEN>
",grosser,2010-05-20 20:50:37
76,2010-05-17 08:02:52,"Our page uses jQuery events. Using capybara+selenium we're triggering the events using evaluate_script. The web driver makes some complaint about recursion and then returns an error.

Our call is something like this: page.evaluate_script(""$(#some input).change()"")

Our fix is to do this: page.evaluate_script(""$(#some input).change() && false"")

There's something about the implicit ""return"" in the evaluate_script method in capybara that is causing the script to run over and over again (I think).

I had a quick look but couldn't create a proper test. I wanted to document the issue here as I've seen others with similar problems.
",alexpooley,2010-06-29 20:57:20
76,2010-05-17 08:11:25,"There already was an issue for this: http://github.com/jnicklas/capybara/issues/closed#issue/71

I closed it, because the problem lies in webdriver and not in Capybara. I'm going to leave this issue open for now, just as a flag to people that this is a problem.
",jnicklas,2010-06-29 20:57:20
76,2010-06-29 20:57:20,"I added a separate execute_script method which is to be used for this sort of thing, working around the issue.
",jnicklas,2010-06-29 20:57:20
75,2010-05-14 20:54:40,"When the property type is not declared in the HTML, Capybara can't fill_in the input element. As the browsers assume and render input elements without the type property set as if they were ""text"", I think it's reasonable to make capybara fill_in work in this scenario, it can assume that when the type is not declared a text input will be rendered by the browser. Just to be clear:

<pre><code>
input type=""text"" value=""this one has type text - fill_in works""
input value=""this one has not type text but it's rendered as a regular text input field - I can't use fill_in to change this value""
</code></pre>
",adolfosousa,2010-06-19 22:48:44
75,2010-05-22 22:36:06,"See also #80 - fill_in fails silently on input type=""url""
",awendt,2010-06-19 22:48:44
75,2010-05-24 14:35:27,"I think usrm has solved this issue:
http://github.com/ursm/capybara/compare/input-without-type

http://groups.google.com/group/ruby-capybara/browse_thread/thread/8e746cbca55e85b2?pli=1

I think the patch is well tested and right. Let's see if it jnicklas approves it :)
",adolfosousa,2010-06-19 22:48:44
75,2010-06-19 15:48:43,"It took a looong while, but the patch is approved now!
",jnicklas,2010-06-19 22:48:44
75,2010-06-19 16:02:17,"Glad to know, Jonas! Thanks to @usrm
",adolfosousa,2010-06-19 22:48:44
74,2010-05-08 04:40:30,"I'm not using the culerity, celerity or selenium drivers at all.  I'm just using rack-test and the new envjs driver.  It's a little annoying that capybara causes some extra gems to be installed that I don't need (including culerity and selenium-webdriver).  Now that capybara includes support for external drivers, would it be feasible to extract any of the drivers that rely on gems into their own gems?  Or at the least, could you remove the dependency on the other gems from the gemspec since they are really optional dependencies?
",myronmarston,2010-05-09 14:02:52
74,2010-05-09 14:02:51,"At some point the Culerity/Celerity and Selenium drivers are going to be extracted into their own gems. Until then, I'm not really bothered by the fact that a few extra gems are installed, makes it way easier for people to get started.
",jnicklas,2010-05-09 14:02:52
73,2010-05-07 21:41:13,"For some reason after the 1st scenario runs successfully, all subsequent scenarios fail on the first step when running cucumber/capybara.

i get the following error message for each scenario:

undefined method `call' for nil:NilClass (NoMethodError)

I have set up a feature outside of a rails project, so that i can simulate through the the web pages as if i was an end user.

Included is a sample where i search on google, where there are 2 scenarios only. the first succeeds, but the second fails (which is failing on my current implementation). Any ideas?

*.feature:
Feature: Search Google
  In order to make sure people can find my documentation
  I want to check it is listed on the first page in Google

  Scenario: Searching for JS.Class docs
    Given I have opened ""http://www.google.com/""
    When I search for ""JS.Class""
    Then I should see a link to ""http://jsclass.jcoglan.com/"" with text ""JS.Class - Ruby-style JavaScript""

  Scenario: Searching for The Dark Knight
    Given I have opened ""http://www.google.com/""
    When I search for ""batman""
    Then I should see a link to ""http://www.imdb.com/title/tt0468569/"" with text ""The Dark Knight (2008)""

*_step.rb:

Given /^I have opened ""([^\""]*)""$/ do |arg1|
 visit(arg1)
end

When /^I search for ""([^\""]*)""$/ do |term|
  fill_in 'q', :with => term
  click('Google Search')
end

Then /^I should see a link to ""([^\""]_)"" with text ""([^\""]_)""$/ do |link,txt|
  page.should have_xpath(""//a[@href='#{link}']"")
  page.should have_content(txt)
end

env.rb:

ENV[""RAILS_ENV""] ||= ""cucumber""
require File.expand_path(File.dirname(**FILE**) + '/../../config/environment')

require 'cucumber/formatter/unicode'Unicode support
require 'cucumber/web/tableish'
require 'capybara/cucumber'
require 'capybara/session'
require 'cucumber/rails/capybara_javascript_emulation' Capybara.run_server = false 
Capybara.default_selector = :xpath
Capybara.default_wait_time = 2 Capybara.ignore_hidden_elements = false Capybara.current_driver = :culerity
",rubyskies,2010-05-10 06:18:25
73,2010-05-07 23:04:58,"stack trace plz ;)
",jnicklas,2010-05-10 06:18:25
73,2010-05-07 23:19:11,"here you go!

testqa@testqa-desktop-vm:/home/automation/google-test2$ cucumber features/search.feature 
Using the default profile...
Feature: Search Google
  In order to make sure people can find my documentation
  I want to check it is listed on the first page in Google

  Scenario: Searching for JS.Class docs                                                                    # features/search.feature:5
    Given I have opened ""http://www.google.com/""                                                           # features/step_definitions/search_step.rb:1
    When I search for ""JS.Class""                                                                           # features/step_definitions/search_step.rb:5
    Then I should see a link to ""http://jsclass.jcoglan.com/"" with text ""JS.Class - Ruby-style JavaScript"" # features/step_definitions/search_step.rb:10

  Scenario: Searching for The Dark Knight                                                                 # features/search.feature:10
    Given I have opened ""http://www.google.com/""                                                          # features/step_definitions/search_step.rb:1
      undefined method `call' for nil:NilClass (NoMethodError)
      ./features/step_definitions/search_step.rb:2:in`/^I have opened ""([^\""]*)""$/'
      features/search.feature:11:in `Given I have opened ""http://www.google.com/""'
    When I search for ""batman""                                                                            # features/step_definitions/search_step.rb:5
    Then I should see a link to ""http://www.imdb.com/title/tt0468569/"" with text ""The Dark Knight (2008)"" # features/step_definitions/search_step.rb:10

Failing Scenarios:
cucumber features/search.feature:10 # Scenario: Searching for The Dark Knight

2 scenarios (1 failed, 1 passed)
6 steps (1 failed, 2 skipped, 3 passed)
0m11.760s
",rubyskies,2010-05-10 06:18:25
73,2010-05-07 23:21:04,"the structure of my directory is:

features/
    search.feature
    step_definitions/
        search_steps.rb
    support/
        env.rb

as you can see i am keeping it skeletal for now.
",rubyskies,2010-05-10 06:18:25
73,2010-05-09 14:03:58,"That is not a stack trace. Sorry, but I can't tell you anything without a proper stack trace.
",jnicklas,2010-05-10 06:18:25
73,2010-05-10 05:43:55,"you're absolutely right, here's the full stack trace when using the '-b' flag:

  Scenario: Searching for The Dark Knight                                                                 # features/search.feature:10
    Given I have opened ""http://www.google.com/""                                                          # features/step_definitions/search_step.rb:1
      undefined method `call' for nil:NilClass (NoMethodError)
      /var/lib/gems/1.8/gems/rack-test-0.5.3/lib/rack/mock_session.rb:30:in`request'
      /var/lib/gems/1.8/gems/rack-test-0.5.3/lib/rack/test.rb:207:in `process_request'
      /var/lib/gems/1.8/gems/rack-test-0.5.3/lib/rack/test.rb:57:in`get'
      /var/lib/gems/1.8/gems/capybara-0.3.7/lib/capybara/driver/rack_test_driver.rb:226:in `get'
      /var/lib/gems/1.8/gems/capybara-0.3.7/lib/capybara/driver/rack_test_driver.rb:195:in`send'
      /var/lib/gems/1.8/gems/capybara-0.3.7/lib/capybara/driver/rack_test_driver.rb:195:in `process'
      /var/lib/gems/1.8/gems/capybara-0.3.7/lib/capybara/driver/rack_test_driver.rb:190:in`visit'
      /var/lib/gems/1.8/gems/capybara-0.3.7/lib/capybara/dsl.rb:55:in `visit'
      /home/automation/google-test2/features/step_definitions/search_step.rb:2
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/core_ext/instance_exec.rb:48:in`instance_exec'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/core_ext/instance_exec.rb:48:in `cucumber_instance_exec'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/core_ext/instance_exec.rb:69:in`cucumber_run_with_backtrace_filtering'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/core_ext/instance_exec.rb:36:in `cucumber_instance_exec'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/rb_support/rb_step_definition.rb:54:in`invoke'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/step_match.rb:26:in `invoke'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/step_invocation.rb:62:in`invoke'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/step_invocation.rb:41:in `accept'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:99:in`visit_step'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:98:in`visit_step'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/step_collection.rb:15:in `accept'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/step_collection.rb:14:in`each'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/step_collection.rb:14:in `accept'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:93:in`visit_steps'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:92:in`visit_steps'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/scenario.rb:53:in `accept'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/step_mother.rb:316:in`before_and_after'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/scenario.rb:51:in `accept'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/scenario.rb:106:in`with_visitor'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/scenario.rb:45:in `accept'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:51:in`visit_feature_element'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:50:in`visit_feature_element'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/feature.rb:35:in `accept'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/feature.rb:34:in`each'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/feature.rb:34:in `accept'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:20:in`visit_feature'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:19:in`visit_feature'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/features.rb:29:in `accept'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/features.rb:17:in`each'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/features.rb:17:in `each'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/features.rb:28:in`accept'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:14:in `visit_features'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:164:in`broadcast'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/ast/tree_walker.rb:13:in `visit_features'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/cli/main.rb:66:in`execute!'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/../lib/cucumber/cli/main.rb:25:in `execute'
      /var/lib/gems/1.8/gems/cucumber-0.7.2/bin/cucumber:8
      /home/testqa/.gem/ruby/1.8/bin/cucumber:19:in`load'
      /home/testqa/.gem/ruby/1.8/bin/cucumber:19
      features/search.feature:11:in `Given I have opened ""http://www.google.com/""'
    When I search for ""batman""                                                                            # features/step_definitions/search_step.rb:5
    Then I should see a link to ""http://www.imdb.com/title/tt0468569/"" with text ""The Dark Knight (2008)"" # features/step_definitions/search_step.rb:10

Failing Scenarios:
cucumber features/search.feature:10 # Scenario: Searching for The Dark Knight

2 scenarios (1 failed, 1 passed)
6 steps (1 failed, 2 skipped, 3 passed)
0m9.127s
",rubyskies,2010-05-10 06:18:25
73,2010-05-10 06:18:25,"actually, this detailed trace stack helped me figure out that i was using the rack_test_driver and not the culerity driver. update the env.rb file with: 

capybara.default_driver= :culerity

and it works fine now.
",rubyskies,2010-05-10 06:18:25
72,2010-05-06 07:45:46,"Info.ongoing (or whatever scope method on Info < AR )

Where ever that piece of code is called this is what i get this in my error stack :

/Users/charly/.rvm/gems/ruby-1.8.7-p248/gems/capybara-0.3.7/lib/capybara/dsl.rb:55:in `find'
/Users/charly/.rvm/gems/ruby-1.8.7-p248/gems/activerecord-2.3.5/lib/active_record/named_scope.rb:132:in`first'
/Users/charly/Sites/cc/app/controllers/news/infos_controller.rb:7:in `index'
",charly,2010-05-06 07:57:10
72,2010-05-06 07:49:37,"forgot to mention i am using it with steak if that changes anything
",charly,2010-05-06 07:57:10
72,2010-05-06 07:57:10,"You are most likely including Capybara in the global scope, like the README used to recommend.

Don't. ;)
",jnicklas,2010-05-06 07:57:10
72,2010-05-06 08:32:53,"thanks for the answer.
actually it's in the acceptance_helper.rb generated by steak :
require File.dirname(**FILE**) + ""/../spec_helper""
require ""steak""
require 'capybara/rails'
include Capybara

but then where should i put it so it doesn't collide with activerecord ?
",charly,2010-05-06 07:57:10
72,2010-05-06 10:24:37,"I don't know steak, so I can't tell you. But probably some class/module which represents the spec context.

/Jonas
",jnicklas,2010-05-06 07:57:10
72,2012-04-17 00:53:39,"To anyone else who comes across this problem, I was able to solve it by putting the include statement within the describe block.
",cooperq,2010-05-06 07:57:10
72,2012-07-25 21:08:42,"You can also move fix it by moving the include statement to the Rspec config block 

<S_CODE_TOKEN>
",wordofchristian,2010-05-06 07:57:10
72,2012-07-25 21:50:34,"@wordofchristian: jsut fyi that these days you can `require ""capybara/rspec""` which does this for you.
",jnicklas,2010-05-06 07:57:10
71,2010-04-29 16:02:12,"Selenium can't return complex Javascript objects, so when you try to execute short scripts that return objects (jQuery objects are an excellent example), the driver breaks with ""too much recursion"".

Can be fixed by replacing ""return #{script}"" with ""#{script}"" in Capybara::Driver::Selenium.execute_script 
",jamuraa,2010-05-06 11:41:04
71,2010-05-04 03:24:48,"Thanks for highlighting this issue!  Had this same problem, but it is hard to track down because it was causing firefox to hang so you have no idea what kind of error is actually happening... trick was opening the error console manually before the evaluate_script gets called.

Thanks jamuraa.  i voted up this issue and hope somebody merges your patch soon.
",joshuacronemeyer,2010-05-06 11:41:04
71,2010-05-04 10:04:52,"fyi, it has come up on the mailing list that this is an upstream defect with selenium when it tries to convert complex javascript objects to ruby. if they are fixing this upstream then that will address this.
",joshuacronemeyer,2010-05-06 11:41:04
71,2010-05-06 11:41:04,"Problem is that we are losing valuable functionality by not returning from the call. I'd rather see this fixed upstream. Closing this since it's not a Capybara bug, if someone wants to tackle this, please open a ticket on the Selenium tracker.
",jnicklas,2010-05-06 11:41:04
71,2010-05-06 13:44:09,"This is fine, but it may be a long time before Selenium has a fix for this issue.  It took me about 2 hours to figure out the cause because of the bad error, and the hidden return.  I did open a [bug](http://code.google.com/p/selenium/issues/detail?id=498) on the selenium tracker for the error message being quite confusing.

You can still return the value (if it is returnable) by returning from the script itself.  I guess the issue is more that the javascript being executed is not what I was expecting - I expected the script I passed to capybara to be executed, and instead ""return #{script}"" was executed instead. 

I haven't tested this, but does this break code that you would otherwise expect to run, like execute_script(""item = add_item(); set_default_properties(item)"")?  Will item get returned?  will set_default_properties() get called? 

Also, the culerity driver doesn't return the value, so there is at least a consistency issue. 
",jamuraa,2010-05-06 11:41:04
71,2010-05-09 14:27:18,"Afaik the culerity driver does return the value. At least there's a test case for it that's currently passing.
",jnicklas,2010-05-06 11:41:04
71,2010-05-31 18:52:45,"What valuable functionality is lost by not adding the return?

Also, what would you expect back from Selenium in this case? What would be a sane ruby representation of a JQuery object? I'm afraid returning anything that can't be passed through JSON.stringify() will be quite difficult in a real browser. 

In Celerity, the situation is a little different since all JS objects are already in memory as Java/Rhino objects, so HtmlUnit simply returns a reference to that.
",jarib,2010-05-06 11:41:04
71,2010-06-19 15:38:56,"What about the following solution, we have evaluate_script, how about adding a second method called execute_script, which does not add the return. That way people can choose which one they want to use and use evaluate_script when they do need the return value. I think it makes sense from a naming point of view?
",jnicklas,2010-05-06 11:41:04
71,2010-06-21 13:38:43,"That would be fine for making things work, but I am wondering why you are against the idea that the user could just include a ""return"" of their own in the script that they pass to evaluate_script in order to retrieve a value.  Does the culerity driver make it impossible to not return the value?

My major concern was that there was hidden javascript being executed which I didn't know, and that caused a loss of about an hour of digging trying to find a bug in my code that wasn't even the problem before I even thought it might be something with Selenium and capybara.
",jamuraa,2010-05-06 11:41:04
71,2010-06-21 20:16:04,"My concern is that it would be more difficult to get consistent behaviour across drivers. Some drivers may always return, while others won't. The solution with adding a return to the script works for Selenium, afaik it doesn't do anything on Celerity and we have _no idea_ how it would behave on hypothetical other drivers.

Imho the return statement does _not_ make sense from a JavaScript point of view. You are not executing a function. That is the only place where return is used in JavaScript. To have it used in this way does not make semantic sense to me, and is at best unexpected. Can you honestly say that your first instinct upon discovering that no value was returned would have been to add the return statement to the JavaScript? Mine definitely wouldn't have.

All of you are not surprised that the script returns a value, you are all surprised by the bug encountered in Selenium. If that didn't exist you wouldn't have thought twice about this.
",jnicklas,2010-05-06 11:41:04
71,2010-06-23 17:41:49,"My first instinct was that there would be no connection at all from the JavaScript back, and I was very surprised to find that the JavaScript that I was passing to execute (evaluate, whatever they are synonyms to an extent) wasn't being passed verbatim.

At this point the google results for ""capybara too much recursion"" pointing here as well as Issue #76 is probably enough until Selenium figures something out. 
",jamuraa,2010-05-06 11:41:04
70,2010-04-22 08:54:38,"This my view html:
    <p>
    <label for=""campaign_client_id"">Client</label>
    <br>
    <select name=""campaign[client_id]"" id=""campaign_client_id"" class=""client_list""><option value="""">Please select the client</option>
    <option value=""10"">Uni Liver</option>
    <option value=""11"">Dabur</option>
    <option value=""12"">NCell</option></select>
    </p>

When I run the feature, why its not catching the element?

<S_CODE_TOKEN>
",millisami,2010-04-23 21:33:55
70,2010-04-23 18:22:27,"I see a problem where selecting an options with an apostrophe in the string causes a problem with select. For example, capybara cannot select ""Son's car"" from a dropdown, but has no problems selecting ""My car"" option from the same dropdown.
",gylaz,2010-04-23 21:33:55
70,2010-04-23 21:33:55,"Thanks for the reply. But there isn't any such mark. Later I figured out that when running the cuke feature, I hadn't generated any client on the test database. I fixed it creating it.
",millisami,2010-04-23 21:33:55
69,2010-04-21 14:43:54,"I can't see how to access the @driver variable in order to tell selenium webdriver to use chrome instead on firefox. 

It seems to be set in the self.driver method here:
http://github.com/jnicklas/capybara/blob/master/lib/capybara/driver/selenium_driver.rb

But how can I override it in my Cucumber env.rb for example? I currently have:

require 'capybara/cucumber'
Capybara.default_driver = :selenium

And am attempting to test an external webapp (i.e. not a rack-based one). 
",chrislo,2010-09-17 02:59:36
69,2010-04-21 15:06:09,"In your env.rb file do this after setting the default_driver to selenium

  require ""selenium-webdriver""
  Selenium::WebDriver.for :chrome
",jonathan,2010-09-17 02:59:36
69,2010-04-21 15:06:34,"the markup made this ugly. anyway, that should be 2 lines
",jonathan,2010-09-17 02:59:36
69,2010-04-21 15:16:34,"Thanks Jonathan ... still no luck though, it's still opening up firefox. I have the following in env.rb:

require 'capybara/cucumber'
Capybara.default_driver = :selenium

require ""selenium-webdriver""
Selenium::WebDriver.for :chrome

and am calling the visit method with an explicit URL in my step. 
",chrislo,2010-09-17 02:59:36
69,2010-04-22 21:05:20,"I created a patch that allows us to specify the browser used by the selenium driver, as we had no success with the above instructions either.

http://github.com/primedia/capybara/commit/b601bc2ec1973073f7cb20e46c92ea94b9c6e400

Usage (in env.rb):
Capybara::Driver::Selenium.browser = :chrome
",jaswope,2010-09-17 02:59:36
69,2010-04-27 18:42:22,"I've also created a patch for this, but I put the option in Capybara.browser_name, so it can be used in culerity and celerity drivers as well. You can also pass additional options for the driver using Capybara.driver_options:

Usage (in env.rb):

<pre>
  Capybara.browser_name = :chrome
</pre>


The additional options are used when you want to use a remote server to run tests, like running tests from a Unix machine but actually opening browsers in a Windows machine:

<pre>
  Capybara.browser_name = :remote
  Capybara.driver_options = { :url => 'http://mywindowsmachine:4444/wd/hub', :capabilities => :internet_explorer }
</pre>


The patch is in the master branch of my fork http://github.com/vicentemundim/capybara
",vicentemundim,2010-09-17 02:59:36
69,2010-04-29 12:00:19,"Both patches don't work on Ruby 1.9.2-head.
Only the fork of github-user primedia works for me only on Ruby Enterprise Edition, not 1.9.2-head. (I haven't tested any other Ruby versions so far).
",iain,2010-09-17 02:59:36
69,2010-07-08 00:22:43,"What's the status of this?
Does not work with htmlunit either!
",cpg,2010-09-17 02:59:36
69,2010-07-12 11:32:16,"+1
",bjeanes,2010-09-17 02:59:36
69,2010-07-15 20:04:00,"+1
",trym,2010-09-17 02:59:36
69,2010-07-20 01:21:38,"The README is definitely wrong in this case - the driver instance returned from the for() call is not kept. If this somehow works for anyone, it's by pure luck since the Chrome and Firefox internals are somewhat similar (both will be listening on port 7055). 

This can probably be solved by having a setter for the @driver class ivar in Capybara::Driver::Selenium, allowing the user to do:

<pre>
  Capybara::Driver::Selenium.driver = Selenium::WebDriver.for :chrome
</pre>
",jarib,2010-09-17 02:59:36
69,2010-07-20 21:33:52,"Yeah, monkey-patching did it for me:

http://gist.github.com/483638
",cpg,2010-09-17 02:59:36
69,2010-08-03 22:30:04,"Selenium::WebDriver.for :chrome

This opens chrome then runs the tests in firefox for me. I can't get the patch to work on version 0.3.9
",tinomen,2010-09-17 02:59:36
69,2010-08-10 14:11:22,"I hope this issue is resolved in a way that allows for Safari to be used as well.
",deleteme,2010-09-17 02:59:36
69,2010-08-13 23:12:54,"@deleteme: Safari is not yet supported by selenium-webdriver - you can track its progress here: http://code.google.com/p/selenium/issues/detail?id=599
",jarib,2010-09-17 02:59:36
69,2010-08-27 19:18:52,"Yeah... it appears that there is no way to set `@driver` in lib/capybara/driver/selenium_driver.rb ... I had to change `:firefox` to `:chrome` manually in that file.
",agibralter,2010-09-17 02:59:36
69,2010-09-03 08:37:21,"+1
",thijsc,2010-09-17 02:59:36
69,2010-09-16 19:59:34,"It's finally, finally fixed. Sorry for the long delay, and sorry for the multitude of pull requests I turned down. I had a clear vision, and it just took a while to get there. I hope you all like the new API, feedback welcome!

http://github.com/jnicklas/capybara/commit/d536eea864a6ed7e9e0032ec9d61edaadba6a375
",jnicklas,2010-09-17 02:59:36
68,2010-04-16 13:44:40,"I get next error with Cucumber - ""no button with value or id or text 'submit' found (Capybara::ElementNotFound)""

I tried to assign 'submit' text to id, title, alt, value .. no luck

Mentioned HTML snippet:

input type=""image"" title=""submit"" alt=""submit"" id=""submit"" value=""submit"" src=""/images/add_to_cart.png""
",skudryk,2010-04-26 21:44:39
68,2010-04-16 17:29:49,"Considering how heavily this is tested in the Capybara test suite, and how many people actively use Capybara, I have a hard time believing that something so essential could be broken. Are you sure you're on the right page?

Could you investigate and try to trace where the problem is coming from?
",jnicklas,2010-04-26 21:44:39
68,2010-04-26 20:22:39,"This does work. Use:

click_button ""Some alt text for my button""
",initforthe,2010-04-26 21:44:39
68,2010-04-26 21:44:38,"Closing this for now. If someone still feels this is broken, please reopen.
",jnicklas,2010-04-26 21:44:39
68,2012-03-20 05:14:09,"@jnicklas 
I  am facing following problem when I run cucumber test :
no button with value or id or text 'Save' found (Capybara::ElementNotFound)
      (eval):2:in `click_button'

I tried to trace also but it is not giving any clear picture...
Plz help... 
",adityaswaroop,2010-04-26 21:44:39
68,2012-08-08 12:09:37,"I have the same issue as @skudryk  had. But I have <input type=""image"" align=""absmiddle"" src=""/images/login_btn.png?1341897505""> only. So how can I select it and click it for submitting the form
",RajRoR,2010-04-26 21:44:39
67,2010-04-14 19:17:16,"The rack test driver's [infinite redirect detection](http://github.com/jnicklas/capybara/blob/0.3.7/lib/capybara/driver/rack_test_driver.rb#L246-254) is not working well for me.  The current implementation uses a simple 4 second timeout.  However, sometimes I set breakpoints in my controllers or models while running cucumber to troubleshoot something.  In this case, the 4 second timeout occurs and I get an infinite redirect error even though it wasn't actually an infinite redirect.

Maybe this would be a better approach?  Track all the redirect URLs since the last user-initiated request, and if a redirect occurs to the same URL more than twice, consider it an infinite redirect.
",myronmarston,2010-06-30 03:07:37
67,2010-04-21 11:13:37,"Yeah, the infinite redirect detection is extremely primitive. I don't actually know how browsers do this, but just going by URL seems dangerous, what if the session state has changed?
",jnicklas,2010-06-30 03:07:37
67,2010-04-21 14:58:25,"Hmmm, this is definitely a thornier problem than I first thought.  I did some research and ran across [RFC 2068](http://www.ietf.org/rfc/rfc2068.txt), which, in section 10.3, states:

<S_CODE_TOKEN>

So you'd have warrant for raising an infinite redirect error after 5 redirects.  You could probably beef it up a bit and make it 5 redirects to the same URL, or you could make it configurable, so that apps that really need capybara to redirect 15 times (for whatever reason) could configure it to allow that.
",myronmarston,2010-06-30 03:07:37
67,2010-06-24 14:32:16,"We've also been bitten by this, exceeding the 4 second timeout on requests that simply timed out in there. Swapping out the 4 with Capybara.default_wait_time was a small improvement.
",daveyeu,2010-06-30 03:07:37
67,2010-06-29 20:07:37,"Redirect a maximum of 5 times instead of time limit, closed by 2e6745e67699eb4458c2966f86ab9ab70fc7fac4

This is as per http://www.ietf.org/rfc/rfc2068.txt

""A user agent SHOULD NOT automatically redirect a request
more than 5 times, since such redirections usually indicate an
infinite loop.""
",jnicklas,2010-06-30 03:07:37
67,2010-06-29 21:40:23,"FWIW, Chrome, Safari and Firefox all allow more than 5 redirects, in spite of the RFC.  I realized that the [/redirect/:times/times route](http://github.com/jnicklas/capybara/blob/5b72525a96f3df229fd876671884e81be99e82fd/lib/capybara/spec/test_app.rb#L25-32) can easily be used to test the browser limits just by visiting `/redirect/100/times`.
- Chrome follows 21 redirects.
- Safari follows 16 redirects.
- Firefox follows 20 redirects.

I haven't tested it on other browsers since I don't have any others installed.

I think the limit of 5 is fine (IMHO, you're building your app wrong if it ever requires more than 5 redirects to work properly), but I thought it might be useful to document the browser behavior for if/when this issue is discussed further in the future.
",myronmarston,2010-06-30 03:07:37
67,2010-06-29 21:47:52,"How do you think we should document this?

Maybe a more descriptive error message, as in ""Capybara only allows five consecutive redirects"" or something?
",jnicklas,2010-06-30 03:07:37
67,2010-06-29 21:49:23,"I don't know...I just put it here since I figured anyone having issues with the infinite redirect detection would probably search and find this ticket.  If you think it's appropriate to add comments to the code containing this info, feel free.
",myronmarston,2010-06-30 03:07:37
67,2010-06-29 21:54:45,"Yeah, the error message would be nice.
",myronmarston,2010-06-30 03:07:37
66,2010-04-11 17:36:00,"The number type (part of html5 - http://www.w3.org/TR/html-markup/input.number.html ) is not one of the fillable_fields on the XPath module method.  There are a few other html5 types on there, so it seems appropriate it should be.
",namelessjon,2010-04-11 21:31:58
66,2010-04-11 21:31:57,"Fillable field has been changed so that now all fields are fillable except for checkboxes, radio buttons and hidden fields. This should no longer be a problem since 0.3.6.
",jnicklas,2010-04-11 21:31:58
65,2010-04-09 13:49:24,"http://github.com/josevalim/capybara/commit/c2c8d68f58d7cdd12a0717e970b9e88aaf7b3f86
",josevalim,2010-04-09 14:42:42
65,2010-04-09 14:42:42,"Thanks!
",jnicklas,2010-04-09 14:42:42
64,2010-04-08 16:50:05,"Rails 3 uses data-method=""delete"" in link tags to mark the request method. Is it desirable to change Capybara Rack-Test driver to take it into account? This allows us to still use Rack-Test in app's early stages.
",josevalim,2010-04-09 12:30:52
64,2010-04-09 11:00:59,"Now this I can get behind. This is sufficiently generic that other web frameworks could feasibly implement the same thing. I'd merge this into the mainline rack-test adapter.
",jnicklas,2010-04-09 12:30:52
64,2010-04-09 12:04:06,"Here is a patch:

http://pastie.org/911300
http://pastie.org/911300.txt
",josevalim,2010-04-09 12:30:52
64,2010-04-09 12:06:38,"Could you do a fork and pull request? I hate applying patches ;)
",jnicklas,2010-04-09 12:30:52
64,2010-04-09 12:09:20,"Done:

http://github.com/josevalim/capybara/commit/58d4d0caf7d4fad5519033e9bfd0786146750a13
",josevalim,2010-04-09 12:30:52
64,2010-04-09 12:13:51,"Btw, we can change the browser used for Selenium::Webdriver, like this:

<S_CODE_TOKEN>

Do you think it's a good idea to add it to the README?
",josevalim,2010-04-09 12:30:52
64,2010-04-09 12:30:51,"Thanks José!

That's a neat trick with selenium webdriver, might be nice to add this to the README, yes!
",jnicklas,2010-04-09 12:30:52
64,2010-04-09 13:15:06,"Can you switch browsers in Selenium during a test? I need to write some Cucumber tests that use several (real, not simulated) browsers at once, so would be great if Selenium supported this.

I'm currently going down the route of spiking a driver whose logic is mostly on the client side -- see http://github.com/jcoglan/terminus. Not much to it yet.
",jcoglan,2010-04-09 12:30:52
64,2010-04-09 13:20:14,"Theoretically: yes you could have different drivers for different webdriver backends, and then you'd be able to switch between them seemlessly with tags the same way.
Practically though this is not currently implemented.
",jnicklas,2010-04-09 12:30:52
63,2010-04-01 07:38:43,"<S_CODE_TOKEN>

With Capybara 0.3.6 running the above script yields this error when the last line is run:

<S_CODE_TOKEN>
",iconara,2010-04-09 13:17:53
63,2010-04-04 07:38:21,"I should add that you can run the script above as is, the URL exists, and points to a minimal HTML page with more or less only a label and a select tag.
",iconara,2010-04-09 13:17:53
63,2010-04-09 13:17:53,"don't suggest including Capybara in the global object, closed by 360088a3692b73725102ae26dab4cf9852340fa6
",jnicklas,2010-04-09 13:17:53
63,2010-04-09 13:18:27,"It's generally not a good idea to include things in the global object. I did this in the README as an example, which probably wasn't so smart. The README has been changed.
",jnicklas,2010-04-09 13:17:53
63,2010-04-09 14:38:50,"That explains it. However, I see nothing wrong with including things in the global scope in a simple script like the one above, especially when using a DSL.
",iconara,2010-04-09 13:17:53
62,2010-03-31 18:24:32,"In the README there is a wait_for method in the AJAX section. However it is not available in 0.3.0. It seems like wait_until is the new thing but it seems to be used differently. I am confused by the README.
",webandy,2010-04-09 13:28:16
62,2010-04-09 13:28:16,"changed outdated API in README, closed by 14e08240ca9f3c6cc79fd0b818e68e4a9144686c
",jnicklas,2010-04-09 13:28:16
62,2010-04-10 19:33:26,"Thanks.
",webandy,2010-04-09 13:28:16
61,2010-03-30 20:09:51,"This works as expected:
    page.should have_xpath('id(""foo"")', :value => 'bar')
It matches only elements with id=""foo"" value=""bar"" in the html.

These don't work, however. They match any id=""foo"" no matter the content of value="""":
    page.should have_css('#foo', :value => 'bar')
    page.should have_no_css('#foo', :value => 'bar')
    page.should have_no_xpath('id(""foo"")', :value => 'bar')

I'm using the latest git snapshots of Capybara, Rails 3 and RSpec 2.
",Tuxie,2010-05-09 14:43:44
61,2010-03-30 20:30:18,"If any of this works, it's incidental. I'd like for there to be a comprehensive set of standard options, which work across all of these matchers, but I haven't had the time. I'm leaving this issue open, just be aware that this is a feature request and not a bug ;)

/Jonas
",jnicklas,2010-05-09 14:43:44
61,2010-03-30 21:12:58,"Being completely new to Capybara I had missed the much better way:
    find('#foo')[:value].should == 'bar'

No need to implement this for my sake, I'll use the find syntax instead :)
",Tuxie,2010-05-09 14:43:44
60,2010-03-23 12:13:55,"When fields have very complicated names such as:

<S_CODE_TOKEN>

especially when there is a an array included in the middle, Capybara gets very confused under the rack-test driver.

It seems like the way Capybara interacts with rack-test is very inefficient. In effect we are parsing these names into a nested structure of hashes and arrays in Capybara and then from what I understand, rack-test is converting them back into params, which look identical to what we had in the beginning.

Rack-test doesn't seem to support just passing through the keys unchanged sufficiently well, most likely this will require some changes in rack-test itself. It's especially tricky for multipart uploads.
",jnicklas,2010-10-20 02:47:56
60,2010-04-15 16:28:57,"I'm running into a similar problem right now. We've got an array of states like this:
{{{
state[]=Draft
}}}

When there is only one element, capybara seems to handle it ok, passing the single-element array on the request:
{{{
Parameters: {""action""=>""show"", ""controller""=>""searches"", ""state""=>[""Draft""]}
}}}

But when there are more than one:

{{{
state[]=Draft&state[]=Canceled
}}}

then state=[nil, nil] is passed on the request, like
{{{
Parameters: {""action""=>""show"", ""controller""=>""searches"", ""state""=>[nil, nil]}
}}}

Note that if we add the @javascript tag (we're using capybara in cucumber features), then it works correctly.

HTH
",dchelimsky,2010-10-20 02:47:56
60,2010-04-29 16:42:41,"The issue occurs when using rack-test driver. It's a problem with rack-test and not Capybara. I've forked rack-test, fixed the problem and submitted a pull request. You can view the solution at http://github.com/ttdonovan/rack-test/commit/c1953b03e3d0d4311528e5912b6b01d50785682b in lib/rack/test/utils.rb.
",ttdonovan,2010-10-20 02:47:56
60,2010-06-29 17:38:05,"Still having a problem with this. I think params that have a [] at the end are okay, but params that have a [] in the middle still seem to be a problem. For instance, say you have something like this

<S_CODE_TOKEN>

The params that are being passed to rack-test are

<S_CODE_TOKEN>

Not sure what that should be. Actually... I wonder if it's better for the params method in the Form class to build a string instead of a hash. I'm sure there's some method in Rack that takes a string and converts it to a hash. So we just use that and pass the resulting hash to Rack::Test. It's still inefficient but that may do until there's a way to give Rack::Test a straight string. WDYT?
",mcmire,2010-10-20 02:47:56
60,2010-06-29 17:40:59,"Hmm, if there is such a method in Rack, that might work, but the problem is that we really don't want the params to be modified in any way at all. Different frameworks might deserialize them in very different ways.
",jnicklas,2010-10-20 02:47:56
60,2010-06-29 18:52:15,"Okay, I tried to play around with it a bit. It looks like a potential problem is that the params method doesn't loop through the form elements in the same order as they appear in the form. Hence, even if there were a way to build a hash to give to Rack::Test, the resulting hash wouldn't even be correct, since if you have multiple field types in your form those are all grouped together, which changes how stuff is grouped together in the resulting hash completely.
",mcmire,2010-10-20 02:47:56
60,2010-07-01 14:01:55,"Anyway, I'll see if I can screw around with the params() method -- would you be opposed to me changing it to loop through elements in order? I think once that happens it will be possible to figure out how to convert it to a hash (I think I'll have to copy some stuff from Rack or Rack::Test, I don't think I can call anything straight).
",mcmire,2010-10-20 02:47:56
60,2010-07-03 18:49:15,"That sounds like a good idea, yes. It really should loop through them in order.
",jnicklas,2010-10-20 02:47:56
60,2010-10-10 08:53:37,"This is an issue in Capybara::Driver::RackTest::Form#merge_params!, it can work with names like `array[]` but not like `user[pictures][][path]`.
I added test to catch this issue http://github.com/lysenko/capybara/commit/5bbcf7d6a00b1ec8bf2c8878117d4529bbf21f2a
And fix it http://github.com/lysenko/capybara/commit/a1112d7a76e6e500acae8f4113e1d61ed2572384
I divided test and fix because I'm not sure that my fix is the best solution. Rack will call Rack::Utils.normilize_params inside if you pass query string to it. 
But I'm too lazy, just two line fix looks better for me.   
",lysenko,2010-10-20 02:47:56
60,2010-10-19 19:47:55,"This is now merged, jnicklas just didn't update the issue to check I'm paying attention ;)

Fix looks just fine to me.
",robholland,2010-10-20 02:47:56
60,2010-10-19 20:15:59,"Hah, and I almost got you too! ;)
",jnicklas,2010-10-20 02:47:56
59,2010-03-22 23:34:06,"Pavel writes on the mailing list:

---

Hi all,

I have this preprocessing and versions in my uploader: http://pastie.org/814075

This used to work in this way:

Original upload has been FIRST:
1) auto oriented
2) all metadata stripped
3) cropped to biggest square possible
4) resized to 400x400

Than this preprocessed 400x400 image was processed by each version so
you got:
321x321 and 90x90 images with rounded corners.

And you got 3 files in this case: 400x400, 321x321, 90x90.

Unfortunately this doesn't work anymore how it behaves is that it runs
the preprocess stuff and saves image 400x400 with original name.

Versions behaves strangely as well:
:full - saves ORIGINAL upload with the name full_original name.
:full/:web - process ORIGINAL upload not the preprocessed one and
saves 321x321 but not autooriented or stripped

and so on.

So now I end up with 400x400, full_ORIGINAL, full_web, thumb_original,
thumb_web...

Basically the preprocess doesn't work at all or I do something wrong.

Any help really appreciated, my processing code: http://pastie.org/814076

Pavel
",jnicklas,2010-03-23 12:17:03
59,2010-03-23 12:17:23,"errr, oops. wrong issue tracker.
",jnicklas,2010-03-23 12:17:03
58,2010-03-17 20:37:55,"Would be nice if Capybara was less strict in it's driver support. Would like to run community developed drivers such as capybara-envjs. The capybara-envjs developer already has a capybara patch to do just this.

http://github.com/smparkes/capybara/commit/e8846fb48834744eb3bd1410be2f496f4108bcfc
",shayarnett,2010-03-18 12:10:50
58,2010-03-18 12:10:50,"I've merged Steven's changes now.
",jnicklas,2010-03-18 12:10:50
57,2010-03-16 21:59:34,"I can't seem to install capybara via gems or the plugin installer. Is it temporarily down? Thanks!
",kendagriff,2010-03-17 07:33:22
57,2010-03-16 22:00:23,"Nevermind...got it taken care of. Sorry about that!
",kendagriff,2010-03-17 07:33:22
56,2010-03-10 10:41:32,"BTW, http://github.com/keithpitt actually posted this, but I forgot to log out of the work account as I wrote this :D

Take the following html:

<S_CODE_TOKEN>

The following cucumber test fails.

`And I should see ""Keith is writing a bug report""`

I've nailed it down to the new line ""\n"". The original webrat cucumber tests solve this problem by doing something like this:

`html.inner_text.gsub(/\s+/, ' ').include?(""Keith is writing a bug report"""")`

Where are the capybara cucumber steps use XPath - which from what I can see - screw up when there is a new line.

I've solved it by doing this:

<S_CODE_TOKEN>

Its not a great solution, but its fixed for my local version.
",gagglehouse,2010-03-22 22:21:27
56,2010-03-22 22:21:27,"I acknowledge that this is a problem, but I don't think your solution is the right workaround. With the current implementation of scopes, this is actually a bit tricky. The current implementation has weaknesses any way, and I might get around to fixing it at some point, but for the moment, I'm reluctant about changing anything here. I'm closing this issue for now. If you can provide a good patch, please reopen the ticket and I'll consider merging it.
",jnicklas,2010-03-22 22:21:27
56,2010-03-22 22:44:26,"Aww, shut down. I know my solution was crappy. I was hoping to open a discussion for other alternatives fixes because the majority of my tests are failing. I want to move to Capybara but this bug is a deal breaker for me.

I'm happy to submit another, correct patch, but before I do I'll need you to point me in the right direction.
",keithpitt,2010-03-22 22:21:27
56,2010-03-22 23:07:21,"I actually just took a look at the XPath spec and found the beautiful gem that is the normalize-space function. Turns out this was actually fairly easy to implement!
",jnicklas,2010-03-22 22:21:27
56,2010-03-22 23:10:26,"Share? ;)
",keithpitt,2010-03-22 22:21:27
56,2010-03-22 23:11:44,"I was hoping for GitHub to add the link for me, but it seems like it doesn't do that if the issue is already closed. Here you go: http://github.com/jnicklas/capybara/commit/dbe7d8ad2251049088f0a4e24398abb7c8584b19
",jnicklas,2010-03-22 22:21:27
56,2010-03-22 23:13:32,"Yay! Cheers for looking into that.
",keithpitt,2010-03-22 22:21:27
56,2011-11-16 00:15:09,"http://praktikanten.brueckenschlaeger.org/2011/11/15/working-in-cucumber-with-new-lines-and-have_content
",suung,2010-03-22 22:21:27
55,2010-03-09 14:04:42,"the above selector is returning true but the code is checking for true

Then /^the ""([^\""]_)"" checkbox(?: within ""([^\""]_)"")? should be checked$/ do |label, selector|
  with_scope(selector) do
    if defined?(Spec::Rails::Matchers)
      find_field(label)['checked'].should == 'checked'
    else
      assert_equal 'checked', field_labeled(label)['checked']
    end
  end
end

this has become broken in the 0.3.5 release as remove 0.3.5 and using 0.3.0 works fine
",ssmithstone,2010-03-22 23:13:43
55,2010-03-22 23:13:43,"This is an issue in Cuke Rails and not Capybara.
",jnicklas,2010-03-22 23:13:43
54,2010-03-05 17:49:41,"When using culerity without capybara we were able to navigate to external urls. It would be great to be able to do this directly inside capybara. Is there any existing functionality that would allow us to do this? We aren't necessarily stuck on using culerity either, selenium would work for us too. If there isn't support for this, we would be willing to work on a patch with some direction.

thanks
Bobby & Jonathan (entryway fellows)
",bobbywilson0,2010-03-05 20:20:34
54,2010-03-05 20:20:33,"Hey guys,

this should already work, as is. Check the section in the README called ""Calling remote servers"".

/Jonas
",jnicklas,2010-03-05 20:20:34
53,2010-03-05 17:16:47,"I know that selenium can do double clicks but it's missing from capybara. I tried to hack my way around it: 
selenium-webdriver: selenium/webdriver/firefox/bridge.rb

def doubleClickElement(element)
   execute :doubleClick,:element_id => element
end

then in my steps :

def raw_bridge
  page.driver.browser.bridge
end

raw_bridge.doubleClickElement('new-post')

But I'm getting: Unrecognised command: doubleClick (Selenium::WebDriver::Error::WebDriverError)

My web app uses double clicks a lot so I need to find a way to do this.

Regards,

Saimon
",saimonmoore,2010-03-05 20:23:46
53,2010-03-05 20:23:46,"Seems like too much of an edge case to me. If you can provide a well tested patch I'll merge it, but I don't think I'll be able to devote any time to this at the moment. Closing this as ""won't fix"".
",jnicklas,2010-03-05 20:23:46
53,2010-03-05 20:31:01,"Fine...I'll provide a patch...
",saimonmoore,2010-03-05 20:23:46
53,2010-03-11 14:56:45,"Maybe i can help you with this cos i'm recently seeing this quite more often!
",denro,2010-03-05 20:23:46
53,2010-03-11 14:59:45,"I worked around it by executing some custom js (currently ff specific). In any case double-click is also missing from selenium-webdriver so until that's there there's not much that can be done unless we use custom js. If you have another solution I'd love to hear it though.
",saimonmoore,2010-03-05 20:23:46
53,2010-03-11 15:06:46,"yeah that is how i've had to solved before, ill look into it (again) to see if there is something that will do the job
",denro,2010-03-05 20:23:46
53,2010-04-14 02:33:19,"I'd like to see this feature…if anyone has pursued it.
",miwillhite,2010-03-05 20:23:46
52,2010-03-05 12:46:26,"Hi,

Flash messages created by InheritedResources controller methods don't appear to get rendered while running features - so steps such as:

I should see ""Contents of flash message from InheritedResources""

fail while running features but the flash messages are displayed when manually viewed in browser.

If I manually create a controller method and set the flash, capybara picks it up and the steps pass.

Any ideas how to fix this? Thanks.
",simonbennett,2010-03-23 12:16:31
52,2010-03-05 13:23:31,"It doesn't seem very likely that this is a Capybara issue, probably something with inherited resources.
",jnicklas,2010-03-23 12:16:31
52,2010-03-05 13:50:40,"Fair enough. Just thought it might be a Capybara issue since everything works fine in the browser but fails while running features/steps.
",simonbennett,2010-03-23 12:16:31
51,2010-02-27 06:31:34,"I've recently become a fan of the new [HTML5 input types](http://diveintohtml5.org/forms.html), most especially **email** (because it looks so much better on my iPhone).  Capybara, though, doesn't know about the extended input family yet.

The easy way would be to extend the hardcoded set of input types in `Node#set` to include the HTM5 types.  The even _easier_ way would be to do what browsers do, and treat every input type you don't know about as if it were a `text` type.  (I.e., only test for radio buttons and checkboxes, and make everything else behave as if you were just sending keystrokes.)
",SFEley,2010-02-27 11:45:24
51,2010-02-27 11:45:24,"Afaik we support all HTML5 input types already. But yeah, doing what you suggest is a good idea. Patches welcome ;)
",jnicklas,2010-02-27 11:45:24
50,2010-02-26 03:09:47,"Using capybara 0.3.0 and selenium-webdriver 0.0.17, clicking a checkbox does not seem to fire a JS event bound to that checkbox. More detail in this thread: http://groups.google.com/group/ruby-capybara/browse_thread/thread/83d29ae321793542

Changing node.toggle to node.click seems to fix the problem. I have not yet run significant tests, but it doesn't cause any issues in my app's test suite. A gist is here: http://gist.github.com/315348

When I have some time I'll see if I can submit a patch.
",tjstankus,2010-02-27 18:27:13
50,2010-02-27 18:27:13,"Use #click instead of #toggle for Selenium, Closed by d298f4dc8c5030db1708fa3c10cc45afca2f9b23
",jnicklas,2010-02-27 18:27:13
49,2010-02-24 09:07:47,"With Rails3 coming, the use of gem bundle will become more common, installing gems from a Gemfile:

<pre>
gem ""capybara"" , :git => ""git://github.com/jnicklas/capybara.git""
</pre>


And the command:

<pre>
bundle install
</pre>


However, this requires a .gemspec file to be present in the root directory. Capybara currently doesn't have one. I recommend Capybara switch from Hoe to Jeweler for this. Jeweler adds a gemspec task to generate this file, and as a bonus it also comes with handy tasks to push gems to gemcutter and tag releases. (I switched Cucumber from Hoe over to Jeweler a while back and it has really simplified my workflow).
",aslakhellesoy,2010-02-25 16:26:07
49,2010-02-24 13:54:48,"I needed to be able to pull my tree from github with bundle install for Rails 3, so I went ahead and did this for my fork.  Feel free to use the changes if you like.  I am not very familiar with creating gems but I think I did everything correct.

http://github.com/tmilker/capybara
",tmilker,2010-02-25 16:26:07
49,2010-02-24 14:32:23,"tmilker: your patch looks good: http://github.com/tmilker/capybara/commit/fcd47787250e6be35202135a898e1c3c74cbd8d2
",aslakhellesoy,2010-02-25 16:26:07
49,2010-02-25 16:26:07,"Actually, Hoe allows me to generate gemspecs. I generated [this one](http://github.com/jnicklas/capybara/blob/master/capybara.gemspec) by running `rake gemspec`.

I kind of dislike Jeweler, and have found Hoe to be much nicer to work with (especially with the newgem extensions). Thanks for the suggestion, but I think I'll stick with Hoe for the time being.
",ingemar,2010-02-25 16:26:07
49,2010-02-25 16:32:06,"Ok, as long as we have a gemspec that's cool with me :-)
",aslakhellesoy,2010-02-25 16:26:07
49,2010-02-25 17:49:01,"That was me talking before, seems like I was logged into ingemar's account (who I was pairing with today)
",jnicklas,2010-02-25 16:26:07
48,2010-02-23 22:34:21,"Xpath is hardcoded as Capybara selector for selenium-webdriver.

In other words you can't change it with Capybara.default_selector or specifying :css as first argument
to find().
",rolfb,2010-02-25 17:31:17
48,2010-02-23 22:44:51,"I might have been wrong, but find(:css, ""table"") doesn't work with cucumber as is. It returns nil. I'll look further.
",rolfb,2010-02-25 17:31:17
48,2010-02-25 17:20:04,"Are you sure about this? The specs cover this quite extensively.
",jnicklas,2010-02-25 17:31:17
48,2010-02-25 17:29:22,"I haven't looked much further, but I got it to work by making my css selector into xpath before sending it to find(). 

element = find(:css, ""table#steps tr:nth-child(3) td:first-child a"") => nil

element = find(Capybara::XPath.from_css(""table#steps tr:nth-child(3) td:first-child a"")) => works
",rolfb,2010-02-25 17:31:17
48,2010-02-25 17:31:17,"I'm closing this issue for now. If it happens again, please try to isolate a repeatable test case, and we'll try to get it fixed.
",jnicklas,2010-02-25 17:31:17
48,2010-02-25 17:34:09,"quick update :)
",rolfb,2010-02-25 17:31:17
48,2010-02-25 17:34:59,"this is from within cucumber btw.
",rolfb,2010-02-25 17:31:17
48,2010-06-15 02:37:23,"I can verify this ... sort of.

Given this path "".list-item:first-child a"":

find("".list-item:first-child a"")
gives me: xmlXPathCompOpEval: function first-child not found

find(Capybara::XPath.for_css("".list-item:first-child a"").paths)
gives me this xpath: //*[contains(concat(' ', @class, ' '), ' list-item ') and first-child(.)]//a
and this error: unexpected '//' after '' (Nokogiri::CSS::SyntaxError)

In IRB everything clears fine with the second example. It only errors like this in a step. Why would the string be a valid xpath in one and not the other?

As for these specs you talk about, they cover no css conversion as far as I can see.

**Update:** This seems to be nokogiri, not capybara, causing this. I even updated to 1.4.2 and used Nokogiri::CSS::Parser.new.xpath_for("".list-item:first-child a"").first and got the same error as the second example.

**Final Update:** Moved back to first css example with the latest Nokogiri and all works fine. You might want to make a note about this in the README
",m3talsmith,2010-02-25 17:31:17
48,2010-06-15 07:24:41,"So what are you saying is actually wrong? I'm not really following :(

Make sure you have Capybara.default_selector set to :css, it seems
like Capybara is trying to interpret what you passed into find as an
XPath expression. That's not going to work. Also if you want to pass
an object of class Capybara::XPath into find, you should _not_ call
paths on it first. Just pass in the XPath object and Capybara will
work it out.

/Jonas
",jnicklas,2010-02-25 17:31:17
48,2010-06-23 01:30:21,"Ack! So what's really going on is that if you have nokogiri 1.4.1 installed

find("".list-item:first-child a"")

Gives me a nokogiri XPath error (shown above). Installing nokogiri 1.4.2 cleared it up.

I'm on OS X 10.6.4 and using the default ruby 1.8.7. So my last update was basically explaining that capybara installers might want to make sure they have version 1.4.2 (or later presumably) of nokogiri installed as well.
",m3talsmith,2010-02-25 17:31:17
47,2010-02-22 20:44:29,"I'm not sure if this is a Capybara issue or not, but I find that I cannot do XPath queries on content served as xhtml, i.e., with Content-type: application/xhtml+xml, using either Selenium or Celerity. Is this known behavior?
",jorahood,2010-02-22 20:48:23
47,2010-02-22 20:48:23,"I think Dennis Rogenius had similar problems. Not sure how/if he solved this. It's not really a Capybara specific issue, you should probably ask the respective projects.
",jnicklas,2010-02-22 20:48:23
46,2010-02-19 19:55:48,"We almost have a working version of cucumber-rails for Rails 3. See github repo of tmilker.

http://github.com/tmilker/cucumber-rails

Was wondering if capybara is ready for use with Rails 3 or how much it would have to be patched in order to work in this context?
Thanks!
Kristian
",kristianmandrup,2010-02-25 17:19:21
46,2010-02-20 01:29:03,"Capybara is _very_ framework agnostic, it's all built on pure Rack. Check out this file, which contains _all_ the rails specific code in Capybara:

http://github.com/jnicklas/capybara/blob/master/lib/capybara/rails.rb

As you can see, it's not a lot. Some changes would be necessary to that file for Rails 3 support, I think, since the Rack app for Rails has changed.

/Jonas
",jnicklas,2010-02-25 17:19:21
46,2010-02-20 13:41:18,"My thoughts here:

http://gist.github.com/309684

Thanks.
",kristianmandrup,2010-02-25 17:19:21
46,2010-02-20 16:58:44,"Does ActionController::Dispatcher.new still work in Rails 3? Afaik all dispatching has moved to ActionDispatch, right? Wouldn't we need to grab MyApp::Application or something?
",jnicklas,2010-02-25 17:19:21
46,2010-02-20 20:22:05,"I've been using rails 3 beta by defining my own integration test with:

<S_CODE_TOKEN>
",badcarl,2010-02-25 17:19:21
46,2010-02-24 10:01:07,"I have another fix on my issue-46-rails3 branch. The simple fix is here:

http://github.com/aslakhellesoy/capybara/commit/e6ed2cd8b04916ee89e88fef2fdf6502da93ef15

I made it a little smarter with:

http://github.com/aslakhellesoy/capybara/commit/dba9a0421c4a7f99d77f9761424d7489fdc799cd
",aslakhellesoy,2010-02-25 17:19:21
46,2010-02-25 16:35:23,"aslakhellesoy's fix is working for me.
",tmilker,2010-02-25 17:19:21
46,2010-02-25 17:19:21,"Nice work Aslak! Merged.
",jnicklas,2010-02-25 17:19:21
46,2010-02-25 22:08:10,"But not pushed?
",aslakhellesoy,2010-02-25 17:19:21
46,2010-02-25 22:48:02,"Hmm, something went wrong there. Pushed now.

BTW. who is ""robotarmy"", for attribution purposes.
",jnicklas,2010-02-25 17:19:21
46,2010-02-25 23:49:31,"Now I guess we just need the Rails 3 UJS unobtrusive javascript simulation to work in Capybara too? Progressing nicely! :)
",kristianmandrup,2010-02-25 17:19:21
46,2010-02-25 23:56:59,"@jnicklas: no idea who robotarmy actually is. I'd just attribute robotarmy then.
",aslakhellesoy,2010-02-25 17:19:21
45,2010-02-19 15:49:30,"I'm currently working on rails project that uses juggernaut, and need to run two browsers in cucumber to test communication between them. Is it just my lack of understanding of code, or in currently version it's simply impossible? (If I understand good Capybara::Server.find_available_port is designed that trying to use Capybara::Session.new(Capybara.current_driver, Capybara.app) two times return the some browser each time instead of new instance of browser)
Is there any way to bypass that?
",imanel,2010-02-19 16:13:54
45,2010-02-19 16:13:54,"It should work out of the box under C[eu]lerity, but by design, will
probably never work with Selenium.

/Jonas

P.S.: please use the mailing list for these kinds of questions in the future.
",jnicklas,2010-02-19 16:13:54
44,2010-02-19 08:18:39,,jnicklas,2010-05-09 15:00:43
44,2010-04-27 19:19:00,"I've had this issue when running capybara in selenium mode under rails. Sometimes the browser just hangs for a while and a weird error is raised:

<pre>
  Connection reset by peer (Errno::ECONNRESET)
  /usr/lib/ruby/1.8/net/protocol.rb:135:in `sysread'
  ...
</pre>


When WaitUntil#timeout method is called it enters in a loop and it keeps running the given block, which have calls to Selenium::WebDriver API, which in turn communicates with the browser using HTTP requests. It appears that doing these requests too often causes this.

I've managed to fix this by defining a wait_until method in Capybara::Driver::Selenium, which sleeps for a little while. This way we give some time for the next attempt to execute the block, which is what we generally want (for exemple, when waiting for ajax calls to finish). Here is the method:

<pre>
  def wait_until(*args)
    sleep(0.05)
  end
</pre>


I've tried to put lower values but anything lower than 0.03 still resulted in the above error. I think that 50ms is enough, though.

Hope this helps!
",vicentemundim,2010-05-09 15:00:43
44,2010-04-27 23:31:24,"This happens for me too.

end of file reached
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/protocol.rb:135 :in `sysread'
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/protocol.rb:135 :in`rbuf_fill'
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/timeout.rb:62 :in `timeout'
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/timeout.rb:93 :in`timeout'
",cmdrkeene,2010-05-09 15:00:43
44,2010-05-09 15:00:43,"Sleep a little while, closed by b74d6cf8293bee287f16ff9b859d383bd54bd8fb
",jnicklas,2010-05-09 15:00:43
44,2011-05-19 18:01:38,"This is still happening, fairly randomly, on HEAD.
",retospect,2010-05-09 15:00:43
44,2011-05-19 18:28:24,"@retospect this is a really old issue, if you're experiencing something similar now, it's most likely a different problem. Can you investigate a bit more what is happening and if you think you've found a cause, open a new issue?
",jnicklas,2010-05-09 15:00:43
44,2011-08-05 13:09:57,"@jnicklas, @retrospect : I just ran into the same problem, but realized that freezing date/time with Timecop was responsible of the issue.

I think Timecop messes up with Capybara's timeout function. I don't think there is any real fix here... Clearly, ""freezing"" time is dangerous, and I would recommend using this trick with caution.
",gdeest,2010-05-09 15:00:43
44,2011-08-11 17:49:41,"@gaeldeest: this caveat is mentioned at the bottom of the Capy README, you should use Timecop.travel and not Timecop.freeze.
",jnicklas,2010-05-09 15:00:43
43,2010-02-18 14:23:32,"I fixed it in my web steps, but perhaps it should be fixed in rack test driver.

something like:

<S_CODE_TOKEN>

from web_steps.rb:

<S_CODE_TOKEN>
",alovak,2010-02-19 16:36:49
43,2010-02-18 21:12:12,"Interesting, so which is correct? Seems like both have a point, to the browser it doesn't matter what the value is, as long as there is one, but the actual content is 'checked' so Selenium has a point too. hmmm.
",jnicklas,2010-02-19 16:36:49
43,2010-02-18 22:03:50,"I think that current state of the checkbox is not equal to the 'checked' attribute. After page was loaded with checked checkbox the  'checked' attribute value will be 'checked'. When you uncheck then this attribute still have 'checked' value.

Here: http://www.w3schools.com/jsref/dom_obj_checkbox.asp we can read that
- **checked** property sets or returns whether or not a checkbox should be checked (boolean) [example](http://www.w3schools.com/jsref/prop_checkbox_checked.asp)
- **defaultChecked** property returns the default value of the checked attribute (boolean) [example](http://www.w3schools.com/jsref/prop_checkbox_defaultchecked.asp)

So the rack test driver uses the attribute value instead the **checked** property value which are true/false. Am I right?
",alovak,2010-02-19 16:36:49
43,2010-02-18 22:07:05,"The Rack-Test driver doesn't have a DOM, so it doesn't know/care about defaultChecked, it just manipulates the attribute directly.
",jnicklas,2010-02-19 16:36:49
43,2010-02-18 22:15:09,"I want my scenarios to work with Rack-Test and Selenium at the same time. What should I do? :) I can ask Rack-Test driver to give me true/false instead checked ;)
",alovak,2010-02-19 16:36:49
43,2010-02-18 22:20:02,"If you don't mind running edge, there's a has_checked_field? and a has_unchecked_field? method now ;) YMMV

/Jonas
",jnicklas,2010-02-19 16:36:49
43,2010-02-19 08:50:20,"I fixed it. Now find('checkbox')['checked'] returns true/false.

Can I remove a has_checked_field? and a has_unchecked_field? methods?

alovak/capybara@4ada108bb668f8ae8a62cb484d836b0fbae440da
",alovak,2010-02-19 16:36:49
43,2010-02-19 16:36:49,"Merged. Why would you want to remove the has_(un)checked_field? methods?
",jnicklas,2010-02-19 16:36:49
43,2010-02-19 20:25:05,"I don't know exactly the purpose of these methods. They are not used in capybara. May be we can remove them? :)
",alovak,2010-02-19 16:36:49
42,2010-02-16 21:40:07,"I see that lib/capybara/driver/selenium_driver.rb, line 72, closes the browser on exit.  It would be convenient to have a command line argument that would not do the close so that you could see the results of method calls such as 'save_and_open_page'.
",oldfartdeveloper,2010-03-16 06:48:59
42,2010-02-18 22:13:51,"Interesting. Not very useful for the other drivers, but could be neat for Selenium. Especially if it can be done automatically with that failed scenario hook in cucumber.
",jnicklas,2010-03-16 06:48:59
42,2010-03-05 11:05:51,"This is a major pain. When starting to use capybara, I'm getting many situations where the test passes fine with webrat, but something goes wrong with Selenium, and I have no good way of debugging what's wrong with selenium. Perhaps there should be some sort of built in convention to configure the drivers through capybara. support/drivers/webrat|selenium|... or something?
",livedo,2010-03-16 06:48:59
42,2010-03-16 06:43:33,"Debug using selenium test is painful. Is there a way to stop selenium(not stop the server),then we can play with the application in the server cucumber started figure out what's wrong with it.
",allenwei,2010-03-16 06:48:59
42,2010-03-16 06:48:59,"I usually just put a debugger breakpoint right before it fails. I don't see the problem at all. I'm closing this until someone provides a patch.
",jnicklas,2010-03-16 06:48:59
42,2012-02-03 15:16:01,"For anybody who doesn't want to or can't use a debugger, `$stdin.gets` works just as well to pause execution of the test while the browser stays open and responsive
",neilsarkar,2010-03-16 06:48:59
42,2012-08-31 08:29:55,"I elaborated a little on the $stdin.gets suggestion and ended up with the code at http://stackoverflow.com/a/12211500/1505304
This is for capybara 1.1.2
",pmontrasio,2010-03-16 06:48:59
41,2010-02-11 06:15:17,"If an error is raised inside a `within` block, all following tests in the session are scoped incorrectly.  The popping of the scope should happen inside `ensure`.

I've added a spec and fix on a topic branch:
http://github.com/badcarl/capybara/tree/fix_raised_error_in_within

Here is the relevant commit:
badcarl/capybara@d6930a8c6013a63c1c77bca9536c34149b51d8f1
",badcarl,2010-02-18 22:34:44
41,2010-02-11 20:13:26,"Good idea, but wouldn't `locate` raising errors when the element create the same problem only the other way around (i.e. we'd pop a scope even though none was ever pushed). We'd probably need to add a `begin` after the locate, I think.
",jnicklas,2010-02-18 22:34:44
41,2010-02-11 20:48:17,"You're right.  I've updated to code to reflect this.  I hope the spec isn't too unintelligible :).

relevant commit:
badcarl/capybara@d9fc5da606f71e69043a0fe31b24191816a012d5
",badcarl,2010-02-18 22:34:44
41,2010-02-18 22:34:43,"Awesome work! Merged.
",jnicklas,2010-02-18 22:34:44
40,2010-02-08 20:06:30,"Posted to the google group, no answer yet so posting here
Im running os x 10.6.<latest> and i've updated my ruby from ports and installed libffi however when tagging a scenario with @selenium the feature is just stalling and not launching a browser instance, i am able to create a new browse using the selenium-webdriver api, is there anything i can check or do to get this working cheers

Stephen
",ssmithstone,2010-02-25 17:29:32
40,2010-02-08 22:58:30,"I've replied to the google group post. I try to reply as quickly as I can, but I do get a lot of email, so it can sometimes take me a couple of days to find the time.

/Jonas
",jnicklas,2010-02-25 17:29:32
39,2010-02-08 18:45:03,"If you want to use capybara with selenium on windows you will need the win32-process gem. Please add this gem as a dependency.
",atambo,2010-02-08 23:01:39
39,2010-02-08 23:01:39,"If this is required for selenium-webdriver to run, then this should be a dependency in that project, please file a ticket at the [webdriver issue tracker](http://code.google.com/p/selenium/issues/list).

That being said though, that gem fails to compile quite horribly on OSX, which probably means that adding it as a dependency might not work.
",jnicklas,2010-02-08 23:01:39
38,2010-02-07 17:33:15,,jnicklas,2010-02-20 02:19:30
38,2010-02-17 23:57:41,"I've added support for multiple select and tested it on rack-test on this branch: http://github.com/badcarl/capybara/tree/add_multiple_select

Are there any additional specs I should add?
",badcarl,2010-02-20 02:19:30
38,2010-02-18 21:29:05,"Very, very awesome work! I think the specs should be enough. Thanks so much!

Of course, if you're bored, you could take a stab at Webrat's ""unselect"" method ;)
http://github.com/brynary/webrat/blob/master/lib/webrat/core/scope.rb#L115-126
",jnicklas,2010-02-20 02:19:30
38,2010-02-19 22:38:41,"Why not? :)  I've added unselect to my add_multiple_select branch and also updated the value of multiple select fields.

I decided to raise a `Capybara::UnselectNotAllowed` error when calling unselect on a single select to avoid any unexpected behavior.
",badcarl,2010-02-20 02:19:30
38,2010-02-20 02:15:49,"Went ahead and hacked together support for celerity driver on the branch
",badcarl,2010-02-20 02:19:30
38,2010-02-20 02:19:30,"Wow! Awesome!
",jnicklas,2010-02-20 02:19:30
37,2010-02-07 02:11:33,"Hi,

I have a file upload field called ""attachments[]"" which I'm trying to test using capybara.

The field name works fine in the browser and passes the attachment back to Rails as part of an array ""attachments"" ... however, when the form is submitted via capybara, it appears as this:

""attachments""=>[{""text\n""=>""""}]

I'd appreciate any insight,

Cheers,

—Paul
",paulca,2010-10-08 13:14:24
37,2010-02-07 12:44:12,"Which driver are you using for this? Rack-test's support for file
uploads doesn't seem to be entirely correct, so that might be an
issue. Try running it under Culerity and see if it works.

/Jonas
",jnicklas,2010-10-08 13:14:24
37,2010-02-08 03:10:21,"Hi,

I was just using the default rack-test. Culerity was perfect. Should I file an issue with rack-test?

—P
",paulca,2010-10-08 13:14:24
37,2010-03-23 12:16:12,"This is another issue caused by http://github.com/jnicklas/capybara/issues/#issue/60
",jnicklas,2010-10-08 13:14:24
37,2010-04-16 15:49:55,"I'm running a forked rack-test and capybara that supports multiple uploads with the rack-test driver:

http://github.com/louismrose/rack-test
http://github.com/louismrose/capybara

I'm waiting to see whether the rack-test changes are pulled, as the support in capybara relies on this.
",louismrose,2010-10-08 13:14:24
37,2010-06-29 20:56:30,"@luismrose any update on what happened to the rack-test patch?
",jnicklas,2010-10-08 13:14:24
37,2010-06-30 13:07:36,"The patch made it into rack-test. Here's the commit:
http://github.com/brynary/rack-test/commit/a7a059fd266d7add5b24444b4b0c65916eca36f7

I was waiting for a new gem version of rack-test before sending the pull request for the capybara patch. Would it help if I sent the pull request now?
",louismrose,2010-10-08 13:14:24
37,2010-07-03 19:00:30,"It depends, is it broken with the current version of rack-test?
",jnicklas,2010-10-08 13:14:24
37,2010-07-05 08:38:54,"Actually, it looks as though the patch just made it into rack-test 0.5.4. I'll send a pull request for the patch.
",louismrose,2010-10-08 13:14:24
37,2010-07-26 15:29:51,"The patch I refer to above is here:
http://github.com/louismrose/capybara/commit/ae94cbab5b4548726fb5abbe95b05d1f1f71ac00#commitcomment-116893

This works only with Rack::Test, and not, for example, Culerity. As such it won't be pulled into Capybara. If somebody wishes to extend the patch to support Culerity, please feel free to extend the above patch, if you wish.
",louismrose,2010-10-08 13:14:24
37,2010-10-08 13:14:22,"Seems like activity here has been low. I'm closing this issue, please reopen if someone feels strongly about this.
",jnicklas,2010-10-08 13:14:24
37,2011-09-13 12:56:22,"i'm at a point where i could use that patch. unfortunately it looks like @louismrose deleted his fork.
",langalex,2010-10-08 13:14:24
37,2011-09-13 16:05:58,"@langalex I'm sorry about that: I did a bit of spring cleaning earlier in the year, and didn't realise this might still be useful. If it's any consolation, I wasn't keeping the fork up-to-date so I doubt very much that the patch would have applied cleanly.
",louismrose,2010-10-08 13:14:24
37,2012-03-18 16:36:27,"I would love to be able to test multiple files upload too. You guys have any hints on how to do that or what needs to be ""fixed""?
",jipiboily,2010-10-08 13:14:24
37,2012-06-10 20:23:01,"I'm also trying to test multiple files upload. Does anyone have a hint on how to write an `attach_files` method that works simliar to `attach_file` but receives an array instead of a single file?
",andmej,2010-10-08 13:14:24
37,2012-09-14 18:08:41,"Another vote for this to be reopened. Thanks
",obie,2010-10-08 13:14:24
37,2012-09-18 21:36:43,"+1 to opening this again to test multiple files upload
",DanCoughlin,2010-10-08 13:14:24
37,2013-01-19 15:36:25,"+1 to adding posibility to attach few files!
",Loremaster,2010-10-08 13:14:24
37,2013-02-23 11:01:06,"+1
",biske,2010-10-08 13:14:24
37,2013-03-19 19:30:53,"+1
",wzcolon,2010-10-08 13:14:24
37,2013-03-19 21:25:12,"[Attaching several files isn't supported by Selenium](https://code.google.com/p/selenium/issues/detail?id=2239) so I doubt Capybara will have support for it through `page`
",abotalov,2010-10-08 13:14:24
37,2013-03-20 00:47:37,"The patch to allow this in Selenium with firefox is pretty simple, preparing a pull request for selenium - just trying to figure out where the tests for file upload are in selenium  (Its selenium PR 34 - https://github.com/SeleniumHQ/selenium/pull/34  - still cant find the tests though)
",twalpole,2010-10-08 13:14:24
36,2010-02-05 18:13:24,"## Rick DeNatale posted this to the mailing list:

More progress, but I'm still not there.

After a day of debugging, I discovered that the host name being used
is inconsistent.  Sometimes it's www.example.com, and other times it's
example.org.

The problem seems to be that capybara is leaving rack-tests' default
host unchanged. Rack-test's default is example.org

The urls generated by the url helpers in my app in the cucumber
environment seem to use the host www.example.com, but anywhere a path
helper is used instead of a url helper, the host on the request is
being set to example.org, so the cookies don't match.

In my case my session new form was using session_path as the uri for
submit, so the create set the cookie for example.org rather than
example.com.  I changed the uri in the form to use session_url and the
next request (which also was changed to use a url rather than a path
helper) gets through.

So this looks like a serious bug.  I can't use capybara with rack-test
if I mix url and path helpers in the app.

I'm not sure whether this is properly a capybara bug, a rack-test bug,
or both?  But I need a fix.
",jnicklas,2010-02-26 17:57:25
36,2010-02-05 22:23:52,"Jonas,

I just sent you a pull request for a simplest thing which could work fix.
",rubyredrick,2010-02-26 17:57:25
36,2010-02-18 22:51:08,"Seems like I left this issue dangling, sorry for the delay. Pushed your fix.
",jnicklas,2010-02-26 17:57:25
36,2010-02-19 08:40:43,"Had to revert this, it caused all kinds of issues with rack-test.
",jnicklas,2010-02-26 17:57:25
36,2010-02-26 17:57:24,"Re-reverted it, it's part of Capybara 0.3.5 now
",jnicklas,2010-02-26 17:57:25
36,2010-02-26 18:15:12,"Thanks Jonas!
",rubyredrick,2010-02-26 17:57:25
36,2011-04-09 10:15:58,"This bug might be back in master. I didn't have the chance to investigate further, but I've experienced similar issues to the ones described here using capybara master. With 0.4.1.2 everything seems to work for me.
",cavalle,2010-02-26 17:57:25
36,2011-04-20 21:41:02,"I am seeing this in master too. In my case I'm using OmniAuth the callback it uses goes to `example.org` so it loses the session. Any idea how to fix it?
",ryanb,2010-02-26 17:57:25
36,2011-04-21 00:26:10,"My (temporary) hack solution is this.

<pre>
module Rack
  module Test
    DEFAULT_HOST = ""www.example.com""
  end
end
</pre>


Maybe we can get Capybara to use example.org instead of example.com? Or should I open a ticket on rack-test?
",ryanb,2010-02-26 17:57:25
36,2011-04-21 06:36:12,"@ryanb that's what the super misused Capybara.default_host is for. You should be able to set that to whatever you want and it will default to that domain unless you specify anything else.
",jnicklas,2010-02-26 17:57:25
36,2011-04-21 06:38:03,"@cavalle there have definitely been changes to how this behaves, it's not impossible that we messed something up in the process. What is it setting the host name to for you?
",jnicklas,2010-02-26 17:57:25
36,2011-04-21 07:12:15,"@jnicklas I tried setting the `default_host` but it still seemed to use `www.example.com`. Not only that, but the `visit` call no longer worked when using a path (instead of the full url).
",ryanb,2010-02-26 17:57:25
36,2011-05-02 05:52:17,"Hi Jonas,

I also ran into this tonight and tracked it down -- no test yet so I put up a gist for you to peruse https://gist.github.com/951208

What is happening is that during a redirect to say '/auth/twitter/callback', the host is defaulted in rack-test via the mock session, whereas during the preceding (or following) direct requests (say visit '/') the host is defaulted in Capybara and put in the URI. Each has a different idea of what the default host should be (org vs com).

Depending on how long my MBP is out getting fixed I may put together a pull request in the next day or so.
",leshill,2010-02-26 17:57:25
36,2011-06-14 13:29:16,"I can confirm this behavior on Ruby 1.9.2, cucumber-rails 0.5.2 and capybara 1.0.0rc1 - can this issue be reopened? 

When I set a default host it gets appended to the path.
",dpickett,2010-02-26 17:57:25
36,2011-06-14 15:29:30,"@dpickett: I really don't know what the issue here is anymore, so I can't really fix it. Everything works fine for me. Can you provide a failing test illustrating the problem? That would help a lot!
",jnicklas,2010-02-26 17:57:25
36,2011-07-15 14:53:19,"I'm on 1.0.0.beta1 and have this problem (using the omniauth mock mode and testing twitter authentication).  

My temporary solution was to use

<pre>Capybara.default_host = ""http://example.org""</pre>
",joshcrews,2010-02-26 17:57:25
36,2011-08-10 15:21:22,"@joshcrews: if you're having problems, I really need at least a failing test to fix anything, I've tried this any number of ways and it all works fine for me.
",jnicklas,2010-02-26 17:57:25
36,2014-12-12 14:02:42,"For those that are looking for solution how to change Rack Test default host (the anoying `example.org`) and google somehow shown you this post (like it did to me) you can do this like this :

<S_CODE_TOKEN>

http://ruby-on-rails-eq8.blogspot.co.uk/2014/12/if-youre-using-rack-test-test-requests.html
",equivalent,2010-02-26 17:57:25
35,2010-02-04 05:57:01,"No HTTP_REFERER was set in the request to this action, so redirect_to :back could not be called successfully. If this is a test, make sure to specify request.env[""HTTP_REFERER""]. (ActionController::RedirectBackError)

See a fix here, which works for me: http://github.com/drogus/capybara/commit/3cb84f9114ae4329ea734fe473554aad88cfa7d4
",Empact,2010-02-12 13:43:47
35,2010-02-04 05:59:36,"I've cherry-picked it onto current master here: http://github.com/Empact/capybara/commit/a34b4bccec8a140174430eee208295ed0da4427c
",Empact,2010-02-12 13:43:47
35,2010-02-05 18:03:39,"Any chance you could write a spec for this? Would be very awesome!
",jnicklas,2010-02-12 13:43:47
35,2010-02-12 13:43:47,"Added specs and merged.
",jnicklas,2010-02-12 13:43:47
34,2010-01-31 18:39:45,"My app is specifically built for Ruby 1.9, and when running Capybara in Selenium mode I was having significant issues with its attempts to run the Mongrel Rack handler.  (The 'rescue LoadError' was not being caught for some reason.)  Mongrel of course does not run in Ruby 1.9.  And Webrick is timing out on my 2.4 GHz Macbook Pro even with the 10 second wait loop.

When I was doing standalone Culerity, I had great success with Thin instead of Mongrel.  It's fast and easy.  Could the Capybara server be built to either try Thin _then_ Mongrel _then_ Webrick (as Sinatra does), or else take a configuration option to select the server?
",SFEley,2010-02-07 17:59:00
34,2010-02-07 17:59:00,"Prefer thin over mongrel, Closed by a906e6b1fcb7f4485eba6c4a7f4584b9ad72206e

For Ruby 1.9 compatibility
",jnicklas,2010-02-07 17:59:00
33,2010-01-26 08:57:50,,jnicklas,2010-01-30 00:05:15
32,2010-01-22 16:03:41,"Fixed locally, will spec and push to my branch this weekend.
",robholland,2010-02-07 17:49:18
32,2010-01-30 19:58:50,"Great suggestion, any chance you could push this (even only  the implementation would be helpful ;)
",jnicklas,2010-02-07 17:49:18
32,2010-02-03 13:43:22,"Committed to my branch at last.
",robholland,2010-02-07 17:49:18
32,2010-02-05 18:48:08,"Seems that the spec fails in Selenium :(
",jnicklas,2010-02-07 17:49:18
32,2010-02-07 17:49:17,"Thanks Rob! Great work, as always! Merged.
",jnicklas,2010-02-07 17:49:18
31,2010-01-19 12:57:23,"Says:

<S_CODE_TOKEN>
",jnicklas,2010-01-29 23:15:37
30,2010-01-18 20:24:03,"I came across a situation in which the page presents two input fields with the same label 'Foo' but with different visibility status (i.e. one is visible one is hidden). I'm not interested to interact with the hidden one. BTW, using selenium driver and issuing a mere

<S_CODE_TOKEN>

results in an exception raised by the driver:

<S_CODE_TOKEN>

I tried to investigate the issue and I end up understanding that capybara is interacting with the hidden element rather than the visible one. It would be nice if capybara interacts by default with visible elements only discarding hidden ones.
",remogatto,2010-02-25 17:31:31
30,2010-01-18 20:37:58,"I proposed a solution to the issue but it's still under discussion.

http://github.com/remogatto/capybara

I'll try to summarize my approach here so that things don't get lost.

First of all I think we should assume this one:

_Capybara should raise an exception if the user tries to interact with a hidden element._

With the word _interaction_ I mean using #click, #fill_in, #choose, etc. but not #locate. In fact, the user should be free to locate hidden elements. But how to discriminate when capybara should or should not locate hidden elements? Using the global setting: locate_hidden_elements that by default is false. Use cases follow:

<S_CODE_TOKEN>
",remogatto,2010-02-25 17:31:31
30,2010-05-31 10:05:02,"i get the same errors on my current project, but what i would like capybara to do is wait until the element is visible...
",langalex,2010-02-25 17:31:31
29,2010-01-18 19:14:22,"Figure out how to make them work in all drivers with a consistent API.
",jnicklas,2010-03-23 12:19:03
29,2010-01-18 19:41:55,"I'm not sure if it's relevant, but Cucumber-Rails already mimics simple ""Rails"" javascript for forms:

http://github.com/aslakhellesoy/cucumber-rails/blob/master/lib/cucumber/rails/capybara_javascript_emulation.rb

Just linking to it in case it can be used for inspiration
",aslakhellesoy,2010-03-23 12:19:03
29,2010-03-23 12:19:03,"There's no support for this at all in Selenium, seems like. Closing this for now, since I don't really care about it anyway.
",jnicklas,2010-03-23 12:19:03
29,2010-04-22 07:53:54,"In Selenium rc there was, not sure about webdriver 2, this is a real pain for us at the moment, and it would seem others too.
",Jimflip,2010-03-23 12:19:03
29,2010-05-18 18:40:28,"This is relevant to my interests.
",vlazzle,2010-03-23 12:19:03
29,2010-06-26 18:08:14,"What about for culerity?
",NullVoxPopuli,2010-03-23 12:19:03
29,2010-06-26 18:27:04,"Celerity supports it at least, so I assume Culerity does too. It seems like Celerity automatically clicks OK on all alert/confirm dialogs though, not sure if it's worth adding an API for what I'm guessing is a very rare case where you want to click cancel on a confirm dialog.
",jnicklas,2010-03-23 12:19:03
29,2010-06-26 18:35:14,"Well, I would like to verify text displayed on the alert. Is that possible?
",NullVoxPopuli,2010-03-23 12:19:03
29,2010-06-29 19:42:28,"No, unfortunately it isn't in any driver I know of.
",jnicklas,2010-03-23 12:19:03
29,2011-01-14 11:19:56,"In case anyone comes across this it is now supported:

a = page.driver.browser.switch_to.alert
if a.text == 'something'
 a.dismiss
else
 a.accept
end
",dereke,2010-03-23 12:19:03
29,2011-01-14 20:11:47,"^ nice
",vlazzle,2010-03-23 12:19:03
29,2011-04-12 07:52:19,"@dereke: this does not work for me. 

a = page.driver.browser.switch_to.alert
a.text => nil
a.accept => Selenium::WebDriver::Error::UnhandledError
",gucki,2010-03-23 12:19:03
29,2011-04-12 07:56:22,"@gucki probably best you [raise a ticket](http://code.google.com/p/selenium/issues/entry) with selenium with some details of the problem.
",dereke,2010-03-23 12:19:03
29,2011-04-12 08:13:30,"@dereke: sorry, I just noticed it does work!! :) I just had some timing issues..
",gucki,2010-03-23 12:19:03
29,2012-07-12 09:28:58,"In selenium this `page.driver.browser.switch_to.alert` works fine, but in capybara-webkit doesn't.
I've just found a cross-driver implementation that works fine and tests the expected text of the alert.
I have that method in helpers.rb

<pre>
  def check_alert(text)
    page.evaluate_script ""window.original_alert_function = window.alert""
    page.evaluate_script ""window.alert = function(msg) { window.lastAlertMsg = msg; }""
    yield
    last_alert_msg = page.evaluate_script ""window.lastAlertMsg""
    last_alert_msg.should == text
  ensure
    page.evaluate_script ""window.alert = window.original_alert_function""
  end
</pre>


I hope someone find it useful.
",cibernox,2010-03-23 12:19:03
29,2014-07-21 18:45:22,"Thank you @cibernox that's POETRY IN LOGIC!  It's AWESOME!

check_alert(""You need to accept that measurements are 'cm'"") {find(:id, 'add-to-cart-button').click}

worked a treat for me with 'Capybara.current_driver: webkit'.
",doughazell,2010-03-23 12:19:03
29,2014-07-21 18:58:53,"@doughazell  This is in capybara core as accept_alert (added in 2.4).  Drivers are in the process of adding support.
",twalpole,2010-03-23 12:19:03
29,2014-07-21 23:43:32,"Glad to see this finally in the core
",cibernox,2010-03-23 12:19:03
28,2010-01-15 18:45:54,"Add support for css selector use in all/find methods. Right now, xpath is the only option.
",tpitale,2010-01-17 18:03:24
28,2010-01-15 21:26:12,"It's a good idea. I'd like for find/all/locate to have the same API as within, so we can do:

<S_CODE_TOKEN>

and so on. Sounds good?

/Jonas
",jnicklas,2010-01-17 18:03:24
28,2010-01-15 21:33:43,"That works for me!

Even simpler would be just checking the default selector. I just switched from webrat to capybara (it's been great, btw) and I use CSS everywhere. I can't think of why I would switch back and forth, even on a very complex project like this one.
",tpitale,2010-01-17 18:03:24
28,2010-01-17 18:03:24,"selector as first argument to find/all, Closed by 05fd0d3f06afb99807c440b441e6eaab23816d1e

Just as with within, the default is changed by
setting Capybara.default_selector.
",jnicklas,2010-01-17 18:03:24
27,2010-01-12 11:37:36,"I have, among others, two fields in a form, the first is an input called 'de' (from) and the latter is a text area called 'Endereço' (address) (the application is in portuguese). The input comes first in the html.

After upgrading for capybara 0.3.0, I had an error in tests who is filling in always 'Endereço' when I call fill_in 'de', due to 'de' be part of 'En""de""reço' name. Taking a look into the code it seems to be this line in the fillable_field method, that is injecting a text_area as first element to lookup:

http://github.com/jnicklas/capybara/blob/master/lib/capybara/xpath.rb#L41

Perhaps reversing the input types and then reversing the result of inject should do the trick, I haven't tested.
Any thoughts?
",carlosantoniodasilva,2010-01-18 18:56:04
27,2010-01-12 11:59:14,"Hmm, Capybara _should_ always prefer exact matches over partial matches, due to the way the add_field method works in XPath, see:

http://github.com/jnicklas/capybara/blob/master/lib/capybara/xpath.rb#L121

If this is not the case, then this is a definite bug, and should be fixed.
",jnicklas,2010-01-18 18:56:04
27,2010-01-12 12:08:37,"I see that.. anyway, it seems the text_area partial matches first then the text input exact match, as the text_area is the first one being called in the fillable_field call, when the find method do something like all(*params).first... but please correct me if I'm wrong.
",carlosantoniodasilva,2010-01-18 18:56:04
27,2010-01-12 22:11:51,"I just pushed a spec which I think proves that a partial text area match is not preferred over an exact input match: 2ff6e65b2c1ef247a3c72b8b91518190213771f5

As you can see, the field labelled `Name` is filled in, despite there being fields called `Last Name` and `Explanation of Name` (which is a textarea), which come first in the code.

Maybe I'm not understanding your problem correctly? If you could provide a failing spec, that would make it much easier to diagnose.
",jnicklas,2010-01-18 18:56:04
27,2010-01-13 11:18:25,"Right, I see your spec. I'm gonna take a look again into my code and see if I can create a failing spec ok.
Thanks.
",carlosantoniodasilva,2010-01-18 18:56:04
27,2010-01-18 10:46:21,"I've been doing some debug around this issue and actually find out my label won't do an exact match because I'm using a form builder which adds the \* mark to required fields (plataformatec/simple_form), (sorry, forgot to mention that). So my labels actually are:

<S_CODE_TOKEN>

This way, I'm not sure how to force using the first one ""de"" as an exact match, as the logic still matches the textarea as a partial match. I've tried adding different texts to the label, no luck. Any idea?
Thanks, Carlos.
",carlosantoniodasilva,2010-01-18 18:56:04
27,2010-01-18 18:56:03,"You could patch the form builder to place the asterisk outside of the label tag, but that might mess up formatting too much.

As is, I'm not sure how to fix it. It seems that if we somehow ignore abbr tags or something to that effect, that just leads down a dangerous road. I don't want to bake too many special cases into Capybara, but I do realize that this might be a common issue with people using Formtastic and the like especially.

I'm closing this issue for now, since it's not technically a ""bug"", the mailing list might be better if you want to discuss this further.
",jnicklas,2010-01-18 18:56:04
27,2010-01-18 19:05:07,"Right, I'm gonna work a bit more on this to see if I can find a good solution.
Thanks Jonas.
",carlosantoniodasilva,2010-01-18 18:56:04
27,2011-05-10 15:18:06,"@carlosantoniodasilva, just faced this same issue. out of curiosity, how did you work around it?
",mhfs,2010-01-18 18:56:04
27,2011-05-13 00:27:51,"@mhfs sorry, I really don't remember.. it's been some time since this issue, the code has changed a lot, and I'm not in the same project anymore. I'll try to check here if I can find sth and will let you know if I do.
",carlosantoniodasilva,2010-01-18 18:56:04
27,2011-05-13 14:05:02,"@carlosantoniodasilva np. thanks anyway. =)
",mhfs,2010-01-18 18:56:04
26,2010-01-08 05:31:08,"Just some basic methods of the new Html5 input types :email, :url, :search, :tel, :color

I have implemented this feature at: bb887c5d1d22e4ba5ecd881dafc5179205153157
",negonicrac,2010-01-11 22:19:06
26,2010-01-11 22:19:06,"Merged.
",jnicklas,2010-01-11 22:19:06
25,2010-01-06 17:20:44,"Hi,

I found a problem with Capybara today. I'm using Rack test driver and when I'm attaching a file, an image file to be specific, on to a form it gets passed to the application with the wrong content type. It will always be 'text/plain', even though it should have been 'image/jpeg' and so on.

I have forked and written a couple of rspec tests which describes the problem. The commit can be found here: http://github.com/thhermansen/capybara/commit/66ce3e61fa7650cf8b6b593ef85d02e8ff5427ab. I have also wrote a quick and (really) dirt fix for it which can be found in the next commit in that repository: http://github.com/thhermansen/capybara/tree/improve_rack_test_content_type

I hope you can look into this one and fix it in a way that.. well, works for everyone and is not dependent of a Linux shell command ;-)
",thhermansen,2010-01-07 22:54:25
25,2010-01-07 22:54:24,"This is now fixed by: 43f39b99796672b7d28d21d24dbb285a4cc9cd88

Used the MIME::Types library, which isn't very accurate, but should suffice in most cases, I think.
",jnicklas,2010-01-07 22:54:25
25,2010-01-08 08:19:46,"Thank you! Seems to work as it should; my Cucumber tests which were dependent on this now passes as expected.
",thhermansen,2010-01-07 22:54:25
24,2010-01-05 21:08:50,"We notice that there is a web_step 'I should be on' that uses current_url in the current release of Capybara and Cucumber-Rails. However, we get this error: 'undefined local variable or method `current_url' for #Cucumber::Rails::World:0xceb95e'. 
It looks like the method has been created for some drivers but is not released yet in the gem. Any sense of when this will be released?
",jonsgreen,2010-01-11 22:18:52
24,2010-01-07 22:35:16,"As soon as possible, but there are a couple of things that still need to be fixed.
",jnicklas,2010-01-11 22:18:52
24,2010-01-11 22:18:48,"It's now released.
",jnicklas,2010-01-11 22:18:52
23,2010-01-05 09:23:16,,jnicklas,2010-01-07 22:54:37
23,2010-01-07 22:54:37,"Fixed
",jnicklas,2010-01-07 22:54:37
22,2009-12-21 12:13:23,"At the moment the example below should fail because #has_content? doesn't wait for an element to appear.

  describe '#has_content?' do
      it ""should wait for asynchronous load"" do
        @session.visit('/with_js')
        @session.click_link('Click me')
        @session.has_content?('Has been clicked').should be_true
      end
    end

It doesn't actually fail because the xpath

<S_CODE_TOKEN>

is too greedy since it selects the script tag witch contains the 'Has been clicked' string:

<S_CODE_TOKEN>

Is this the intended behaviour of #has_content?
",remogatto,2010-02-25 17:30:20
22,2009-12-21 15:39:00,"I'm not sure actually, purely from a technical point of view, it makes sense that it would pick this up, but from a user experience point of view, it makes more sense to either filter out script and style tags, or to only look at the body tag. Option two has the problem though that leaving out the body tag is perfectly valid HTML. Most people will have script/style in an external file anyway, so I'm not _that_ bothered by it. What do you think?
",jnicklas,2010-02-25 17:30:20
22,2009-12-22 08:32:08,"I think that the method name #has_content? could be surprising for the user. As an user I'd expect that #has_content? matches the content of the body tag only IMHO. Perhaps we could add another method with another name that will match the whole html?

As a side note - at the moment - if I want to test #has_content? waiting for asynchronous events I have to pull up the javascript within with_js.erb in a separate js file or doing some hack like:

<S_CODE_TOKEN>
",remogatto,2010-02-25 17:30:20
22,2009-12-25 16:50:11,"Agreed, however, how do you think this should work from a purely technical point of view? I think excluding script and style tags is the only viable solution, but how can we write an XPath for that? Is it even possible?
",jnicklas,2010-02-25 17:30:20
22,2010-02-25 17:30:20,"Closing this ticket, since there hasn't been any activity here. If you care about this ticket and want to get it fixed, please reopen.
",jnicklas,2010-02-25 17:30:20
21,2009-12-18 16:19:17,"These should trigger onchange events.

We have to emulate mouse interaction, rather than keyboard interaction, given that mouse interaction is the thing that people will usually be doing, and the only thing we can realistically do.

We shouldn't have to write tests to click a select box, select an option, and then click away - this should be done automatically. Also for radio/checkboxes/input, onchange should be triggered after the action of clicking/filling in.

Specific events to be triggered for different form elements:

Radio: click
Checkbox: click
Select: change
Multiple select: click, change (after all selected)
Text Input: change (only after fill_in)
",initforthe,2010-06-30 03:55:44
21,2009-12-18 18:39:24,"I'm working on spec'ing and fixing this.
",robholland,2010-06-30 03:55:44
21,2010-02-03 21:01:45,"how far along is this fix?
",plukevdh,2010-06-30 03:55:44
21,2010-02-04 17:23:49,"I'm working on getting the selenium driver under Mac OS X to support events well enough to get this running. I'd hope to have this stuff fixed in a week or so, but I'm not making any promises as it involves working on the selenium-webdriver code as well as capybara, and I'm not familiar with selenium-webdriver code yet.
",robholland,2010-06-30 03:55:44
21,2010-02-05 14:32:08,"Issue filed for selenium webdriver: http://code.google.com/p/selenium/issues/detail?id=368
",robholland,2010-06-30 03:55:44
21,2010-03-16 16:48:51,"Please fix soon, this is just annoying
",jweiss,2010-06-30 03:55:44
21,2010-03-16 17:44:56,"As per my comment, I'm at the mercy of the selenium people. I can't fix any of this stuff on my machine until selenium actually supports properly firing the events required to trigger native events.
",robholland,2010-06-30 03:55:44
21,2010-03-17 09:10:14,"Is there no way to implement a temporary workaround like doing the click in, select click out? From the comments on the selenium issue it doesn't sound like there is a solution coming soon....
",jweiss,2010-06-30 03:55:44
21,2010-03-23 12:07:12,"Will we need to change anything in Capybara once this becomes fixed in Selenium? Otherwise we should probably close this issue here.
",jnicklas,2010-06-30 03:55:44
21,2010-03-23 12:11:23,"I think this should stay open or at least be documented. I've spend myself several hours debugging errors because of this and I bet others had similar experiences.

Same goes for double click...
",jweiss,2010-06-30 03:55:44
21,2010-03-23 12:15:14,"Where should we document this? And what's the point of leaving this open if it's not a bug in Capybara?
",jnicklas,2010-06-30 03:55:44
21,2010-03-23 12:19:35,"If it is documented (like somewhere in the Readme under caveats or so), we don't need to leave this open. But without any documentation many will spend hours debugging a problem in their code only to find out that this is a problem in the stack their are using. 

I know that the bug is not in Capybara, but from the user's perspective it is.
",jweiss,2010-06-30 03:55:44
21,2010-06-29 20:55:43,"There has been no activity on this, and there likely won't be. Don't see the point of leaving this open.
",jnicklas,2010-06-30 03:55:44
21,2010-08-17 11:43:31,"I had the same problem
",nilsdyn,2010-06-30 03:55:44
20,2009-12-15 22:14:12,"donald-balls-macbook-pro:serp dball$ sudo gem install capybara
Building native extensions.  This could take a while...
Building native extensions.  This could take a while...
ERROR:  Error installing capybara:
    ERROR: Failed to build gem native extension.

/opt/local/bin/ruby extconf.rb
checking for ffi.h in /usr/local/include,/opt/local/include... no
checking for ffi_call() in -lffi... yes
checking for ffi_prep_closure()... yes
checking for ffi_raw_call()... no
checking for rb_thread_blocking_region()... no
creating extconf.h
creating Makefile

make
/usr/bin/gcc-4.0 -I. -I. -I/opt/local/lib/ruby/1.8/i686-darwin9 -I. -DRUBY_EXTCONF_H=\""extconf.h\"" -I/opt/local/include -D_XOPEN_SOURCE -D_DARWIN_C_SOURCE  -I/opt/local/include -fno-common -O2  -fno-common -pipe -fno-common  -Werror -Wunused -Wformat -Wimplicit -Wreturn-type   -c AbstractMemory.c
In file included from AbstractMemory.h:37,
                 from AbstractMemory.c:36:
Types.h:74:17: error: ffi.h: No such file or directory
In file included from Types.h:75,
                 from AbstractMemory.h:37,
                 from AbstractMemory.c:36:
Type.h:44: error: syntax error before ‘ffi_type’
cc1: warnings being treated as errors
Type.h:44: warning: no semicolon at end of struct or union
In file included from AbstractMemory.c:36:
AbstractMemory.h: In function ‘memory_get_op’:
AbstractMemory.h:115: error: dereferencing pointer to incomplete type
In file included from AbstractMemory.c:38:
Function.h: At top level:
Function.h:45: error: field ‘type’ has incomplete type
Function.h:52: error: syntax error before ‘ffi_type’
Function.h:52: warning: no semicolon at end of struct or union
Function.h:53: warning: type defaults to ‘int’ in declaration of ‘ffiParameterTypes’
Function.h:53: warning: data definition has no type or storage class
Function.h:54: error: syntax error before ‘ffi_cif’
Function.h:54: warning: type defaults to ‘int’ in declaration of ‘ffi_cif’
Function.h:54: warning: data definition has no type or storage class
Function.h:59: error: syntax error before ‘abi’
Function.h:59: warning: type defaults to ‘int’ in declaration of ‘abi’
Function.h:59: warning: data definition has no type or storage class
Function.h:66: error: syntax error before ‘}’ token
make: **\* [AbstractMemory.o] Error 1

Gem files will remain installed in /opt/local/lib/ruby/gems/1.8/gems/ffi-0.5.4 for inspection.
Results logged to /opt/local/lib/ruby/gems/1.8/gems/ffi-0.5.4/ext/ffi_c/gem_make.out
",dball,2009-12-19 10:42:42
20,2009-12-15 22:35:42,"This seems like one of Capybara's dependencies depends on the 'ffi' gem, my guess would be on selenium-webdriver. I have no idea why it fails to build. My machine is a MacBook running Snow Leopard, so it's not an OS X specific issue.
",jnicklas,2009-12-19 10:42:42
20,2009-12-16 20:56:59,"My machine is a MacBookPro running Snow Leopard, an I've got same issue :-(
",fuzziness,2009-12-19 10:42:42
20,2009-12-16 21:00:13,"It does seem to be the ffi gem; sadly I've gotten no love yet from my post on their mailing list. I went ahead and port upgraded my system, including ruby, but to no avail.
",dball,2009-12-19 10:42:42
20,2009-12-16 21:10:50,"installing libffi (via porticus | fink) has solved the problem for me.
",fuzziness,2009-12-19 10:42:42
20,2009-12-19 10:42:41,"This doesn't really seem to be related to Capybara, I'm closing this issue, if anyone disagrees, please let me know.
",jnicklas,2009-12-19 10:42:42
20,2010-01-17 08:58:18,"Worked for me:
$ sudo port install libffi
$ sudo gem install capybara
",alilee,2009-12-19 10:42:42
20,2010-01-17 15:41:55,"I added a note about this to the README now, so that it doesn't trip up any more people.
",jnicklas,2009-12-19 10:42:42
20,2011-04-07 20:08:49,"Installing libffi with MacPorts didn't help me, so I fixed the problem in the ffi gem (btw I am not sure if the problem I was having is exactly the same, since this is 1 year later, but it was similar, also from the ffi gem). If anyone wants it, it's here (based on ffi 1.0.7): https://github.com/mrbrdo/ffi

I've also given a pull request to the official ffi maintainer, I hope it will be fixed there soon too.
",mrbrdo,2009-12-19 10:42:42
19,2009-12-15 18:11:44,"Dealing with rich internet application we often have to wait for an element to disappear from the page. For example, after removing an item from a grid, we have to wait for that element to be removed from the DOM (and this doesn't happen immediately). At the moment, capybara lacks of an API that can handle situations like this.

This is a possible solution:
1. Make has_css?/has_xpath?/have_content? wait for elements to appear
2. Add has_no_css?/has_no_xpath?/has_no_content? methods, which wait for the element to _dis_appear

So we can do:

<S_CODE_TOKEN>

It contradicts RSpec convention a little bit, but I can't see any other way to get the desired result.

Another possibility could be:
    wait_to_disappear(locator)

<S_CODE_TOKEN>

To test that an element is disappeared from the page:

<S_CODE_TOKEN>

Of course, after a given timeout, if the element is not disappeared the method above should return true.
",remogatto,2010-01-01 19:17:53
19,2010-01-01 19:17:52,"This is now fixed, by: http://github.com/jnicklas/capybara/commit/89cd9803b620f5c85299e2ba0be03932bf7ad1c6
",jnicklas,2010-01-01 19:17:53
18,2009-12-15 13:58:35,"Webrat works correctly with labels without 'for' attribute:

<label>Field name: <input type=""text"" name=""field_name"" /></label>

fill_in 'Field name', :with => 'value'

Capybara doesn't find the input. I've prepended find_by_label with:

<S_CODE_TOKEN>

I know it is not a definitive solution, specially because it ignores the kinds passed as parameter. But I don't know what would be the best way to handle this since FIELD_PATHS proc values require an id.
",rosenfeld,2009-12-15 22:32:03
18,2009-12-15 14:18:40,"Are you sure ou've got the latest source? There's now an XPath class which generates all xpaths. Adding support for this should be a lot easier now.
",jnicklas,2009-12-15 22:32:03
18,2009-12-15 22:15:40,"I've just grabbed the latest source and just changed the workaround to include the following inside add_field(locator):

<S_CODE_TOKEN>

But the main problem remains and I still don't know how to correctly patch, since the proc yielded depends on the id attribute, which is absent inside the input field.

I just noticed that the example code (first message) was not shown as expected. Trying again:

  <label>Input field: <input type=""text"" name=""input_field"" /></label>
",rosenfeld,2009-12-15 22:32:03
18,2009-12-15 22:16:30,"Once more (missing Redmine's preview ability):

<pre>
  <label>Input field: <input type=""text"" name=""input_field"" /></label>
</pre>
",rosenfeld,2009-12-15 22:32:03
18,2009-12-15 22:18:54,"One more time:

  &lt;label&gt;Input field: &lt;input type=""text"" name=""input_field"" /&gt;&lt;/label&gt;
",rosenfeld,2009-12-15 22:32:03
18,2009-12-15 22:19:28,"Finally! :)
",rosenfeld,2009-12-15 22:32:03
18,2009-12-15 22:32:03,"Added support for labels without 'for' Closed by ce914ed48ec11bd952a6679a3793947f0e841292
",jnicklas,2009-12-15 22:32:03
18,2009-12-16 00:06:54,"Thank you very much!
",rosenfeld,2009-12-15 22:32:03
17,2009-12-14 21:22:31,"Need to figure out exactly how the Webrat version works.
",jnicklas,2010-03-23 12:06:27
17,2010-03-23 12:06:27,"Closing this for the time being, I just don't think it's possible on non rack-test drivers.
",jnicklas,2010-03-23 12:06:27
17,2010-03-29 22:04:57,"can we provide it only for the rack:test driver ? 
",rishav,2010-03-23 12:06:27
17,2010-03-29 22:22:06,"It seems to have become a standard that behaviours which are not common for all drivers need to be run through `page.driver`, such as `page.driver.get`, etc… This is already possible with headers, through `page.driver.request.headers`. Not the pretties API, and maybe we should shorten it to `page.driver.headers`, but other than that, it's already possible.

I urge everyone to avoid using this though, this is going to lock you into using the RackTest driver. Which is also why I don't want to provide a high level API for it, to really drive home that you're doing something potentially problematic.
",jnicklas,2010-03-23 12:06:27
17,2010-05-11 16:03:17,"But for http authentication this makes a lot of sense, don't you think?
",Papipo,2010-03-23 12:06:27
17,2010-05-11 20:18:12,"Not all drivers support http authentication. So I don't think it makes sense to lull people into thinking that they have a working setup, only to have their tests fail once they switch driver. It is _possible_ to do basic auth in Capybara (search the mailing list!), it's not _easy_ though, and that's a good thing, imho.

It's all about encouraging good practices.
",jnicklas,2010-03-23 12:06:27
17,2010-09-08 22:10:16,"I know this issue is closed, I just wanted to add another use-case: shared cookie auth. We have several apps, but the login form is only on one, which sets a domain cookie that is read by the other apps. With the Rack driver, the specs in the other apps can't #visit another app to fill out the login form, and get the cookie set. I have to manually set the cookie (or an rack env setting).
",paul,2010-03-23 12:06:27
17,2010-11-05 19:07:09,"so... has anyone settled on a driver(s) that do support http basic auth and forked and got this working?  I don't get if every single driver works with http basic auth, just as long as one of them works.
",movingelectrons,2010-03-23 12:06:27
17,2010-11-25 09:56:06,"Adding another use-case: simulated HTTP_ACCEPT_LANGUAGE. 

I've tried setting it through page.driver.request.env[""HTTP_ACCEPT_LANGUAGE""] but it doesn't seem to work.
",jaimeiniesta,2010-03-23 12:06:27
17,2011-08-11 02:11:04,"Can we revisit this?

In the specs, we already have:

<S_CODE_TOKEN>

Why not have?:

<S_CODE_TOKEN>

> ... it's not easy though, and that's a good thing, imho. It's all about encouraging good practices.

I disagree with this. HTTP Auth, including Basic Auth, has appropriate use cases.
",nicholaides,2010-03-23 12:06:27
16,2009-12-14 21:22:00,,jnicklas,2009-12-17 17:41:51
15,2009-12-11 12:44:02,"Tries to create a fake upload file without a path and doesn't succeed
",jnicklas,2009-12-13 13:42:35
15,2009-12-13 13:42:34,"So apparently this has already been fixed by someone. I'm dumb.
",jnicklas,2009-12-13 13:42:35
14,2009-12-09 16:27:13,"Fix on my no-db-knowledge branch. The commit: http://github.com/aslakhellesoy/capybara/commit/bb6051078a4ac645f607fd0003b8280f33e8c353

I have added support for DatabaseCleaner in Cucumber (enabled for @javascript, @culerity, @selenium and @no-txn tags only), which lets users enjoy the same ""it just works"" experience as before. -And now they can more easily opt out of DatabaseCleaner if they don't want/need it. 

Previous discussion here: http://groups.google.com/group/ruby-capybara/browse_thread/thread/e43522c3e4808d95
",aslakhellesoy,2009-12-12 21:16:11
14,2009-12-09 16:30:40,"FYI: Here is how DatabaseCleaner is enabled in Cucumber-Rails: http://github.com/aslakhellesoy/cucumber-rails/blob/master/lib/cucumber/rails/active_record.rb
",aslakhellesoy,2009-12-12 21:16:11
14,2009-12-10 01:49:32,"I've made a separate file to require of you dont want to use DatabaseCleaner :
http://github.com/denro/capybara/commit/db64f1b7aee95548e85ec49eefb3e5011d2a6cea
",denro,2009-12-12 21:16:11
14,2009-12-10 06:07:01,"denro: I see a few problems with your approach:

1) If I use Sinatra+DataMapper I don't want to require 'rails' stuff.
2) database_cleaner/cucumber is being used - which adds global hooks - bad (see below).
3) More files that just require each other. Let's not help people do require - they know how to do that.

My fix is simpler. Simply remove 3 lines of code. The commit in my second comment shows how an equivalent setup is now moved to Cucumber-Rails. This setup (using tagged Before and After hooks) also allows DatabaseCleaner to kick in on a per-scenario basis. The current code (and dentro's) don't allow for this kind of per-scenario control.

For people using Capybara, but not Cucumber I recommend a similar approach. Let people do their own setup of DatabaseCleaner. It's just 3 lines of code anyway.
",aslakhellesoy,2009-12-12 21:16:11
14,2009-12-12 21:16:10,"I pulled in your change that removes the Database cleaner code.
",jnicklas,2009-12-12 21:16:11
13,2009-12-09 16:22:55,"Rails in @culerity mode often puts in absolute URIs, such as http://host.example.com/foo

My absolute-uri-fix branch makes Capybara able to cope with that. The commit: http://github.com/aslakhellesoy/capybara/commit/61338d0786e64adf8d78c10831c3480fc67e6e5d
",aslakhellesoy,2009-12-12 21:17:02
13,2009-12-12 21:17:02,"Merged, though I'm not 100% sure of what the problem was ;)
",jnicklas,2009-12-12 21:17:02
13,2009-12-13 12:24:10,"Without my fix Capybara would try to go to http://localhost:8080http://host.example.com/foo
",aslakhellesoy,2009-12-12 21:17:02
12,2009-12-03 16:43:28,"Hard to know how to handle this. Webrat does some magic to check if a link has javascript to send ""_method=delete"" and sends a different HTTP verb based on that. In capybara context that feels a little ""dishonest"" to me. If something doesn't work without javascript it shouldn't work in the plain rack driver so people know that javascript is actually required for the thing to function (in my opinion). The question is, is that going to frustrate a lot of people? I presume most Rails users are now doing restful routes and using ""link_to 'Delete', :method => :delete"" in their views. That won't work as expected under the capybara rack driver. Thoughts?

Should we just leave things as they are and suggest that people tag deletion scenarios as @javascript so it's clear there is a requirement there? I think that is my preference.
",robholland,2009-12-11 12:44:35
12,2009-12-03 17:46:33,"If people are using `link_to 'Delete', :method => :delete` then imho they're doing it wrong. This is quite easily solved with some unobtrusive JavaScript. We really shouldn't be catering to bad practices.

The first time I encountered Webrat actually doing a 'delete' when following a :method => :delete link it freaked me out. If you are aware what :method => :delete is doing it should come as no surprise that it doesn't work without JS.

I say leave it as is.
",jnicklas,2009-12-11 12:44:35
12,2009-12-04 10:31:51,"Yep, that was my feeling. For the record, should anyone else stumble across this ticket, if you aren't using a confirmation prompt you can just tag the scenario as @javascript to have it work. If you do use a confirmation prompt you'll need to use culerity (so use the @culerity tag) as that's the only javascript-capable driver that capybara supports that currently knows how to handle confirmation dialogs (it just hits ""Yes"" on all confirmations).
",robholland,2009-12-11 12:44:35
12,2009-12-07 20:48:52,"I agree that Capybara shouldn't implement support for bad HTML idiosyncrasies in specific web frameworks like Rails.

Being purist however (@javascript, @culerity) has drawbacks - the most important one being slowness.

Would you be open for adding an API for plugging in custom strategies? Example usage:

<pre>
Capybara.add_strategy(:click, RailsClicker.new)
</pre>


This would keep Capybara clean, while still providing some level of pragmatism, allowing people to plug in their own strategies if they want to trade standardness for speed.
",aslakhellesoy,2009-12-11 12:44:35
12,2009-12-07 21:04:41,"Seems strange to me. I know it's not good for the testing tools to suggest code changes, but I really believe that a solution with unobtrusive JavaScript is the best. It works out of the box with rack_test, no special magic needed, and as an added bonus it also provides a fallback in case JavaScript is disabled.

This is one way of doing this in case you're wondering:

<S_CODE_TOKEN>
",jnicklas,2009-12-11 12:44:35
12,2009-12-07 21:21:28,"I think Aslak's idea is nice. It seems unrealistic to make it impossible for default Rails code to run quickly. We all know it's a hack, but it is a pragmatic one.
",robholland,2009-12-11 12:44:35
12,2009-12-07 21:23:43,"Also, I should add that I think ""best"" is subjective. People may have no requirement to support non-javascript users.
",robholland,2009-12-11 12:44:35
12,2009-12-07 21:58:40,"One way or another, you're using JavaScript, why choose the bad way of doing it, when the good way is just as simple? There is nothing pragmatic about the :method => :delete hack, it's just marginally (as in not pasting in some code) simpler.

If your page purposefully doesn't work without JavaScript, you shouldn't be testing it with a tool that doesn't support JavaScript.

All that being said, I'm open to a solution which adds support for this without negatively affecting the readability/cleanliness of the code too much. If Aslak's solution can provide that, I'll merge it in.
",jnicklas,2009-12-11 12:44:35
12,2009-12-07 22:52:27,"Re: Why choose the bad way of doing it? A: Becaue a lot of people are using Rails, and many of those people use scaffolding.

I'm not one of those people though - I write my views by hand, and I often use buttons like you described. Cucumber has a ""feature"" generator that will generate a feature for a scaffolded resource. It's something I was reluctant to put in, because it's not the ""right"" way. I added it anyway because it gives newbies a head start (the docs say use lightly). Rails scaffold is similar - it's for newbs.

So while we are all enlightened people who know the right way to do things, there are still tons of people who just choose the simple path when they are learning - generating stuff. And I think it's worthwhile stretching a little to accomodate these people, as long as the drawbacks aren't too big.

The best way to deal with this would probably be patching Rails' scaffold generator, but it can take a while before that is prioritised and merged into Rails - if ever.

I'll follow up here if I can come up with a simple and clean way to plug in a strategy. The Rails strategy itself would live in cucumber-rails, so you wouldn't have to worry about it :-)
",aslakhellesoy,2009-12-11 12:44:35
12,2009-12-07 23:53:05,"Alright, sorry to be so dogmatic, I see your point and I'll accept a solution. It might actually be less obtrusive to just apply it in Capybara directly though, the way you originally suggested, building the whole strategy infrastructure just for this one simple case might be overengineering. I'll think about this some more.
",jnicklas,2009-12-11 12:44:35
12,2009-12-08 00:12:27,"Even though adding a @javascript tag to affected features will make them run more slowly, seems to be the obviously correct thing to do. Your app is using JavaScript, albeit JavaScript generated by Rails, so it should be properly tested using a browser driver that handles JavaScript IMO.

W
",wincent,2009-12-11 12:44:35
12,2009-12-08 00:12:57,"Dogma is necessary in order to create something good. Capybara will be great.
",aslakhellesoy,2009-12-11 12:44:35
12,2009-12-09 16:20:16,"Ok, I'm convinced. Please don't merge in my code for this. I have added it to cucumber-rails instead: http://github.com/aslakhellesoy/cucumber-rails/blob/master/lib/cucumber/rails/capybara_javascript_emulation.rb (Rob Holland extracted it from my initial code)
",aslakhellesoy,2009-12-11 12:44:35
12,2009-12-11 12:44:34,"Awesome, I'll close this issue then
",jnicklas,2009-12-11 12:44:35
12,2017-01-26 11:06:09,Just stumbled on this issue. Can't believe it's still a thing in 2017. I wrote an article way back in 2006 on how this could be solved: http://thelucid.com/2006/07/26/simply-restful-the-missing-action/,thelucid,2009-12-11 12:44:35
12,2017-01-26 17:05:33,@thlucid Entitled much?  and with a link to an article where the server is down too.  Also this has been supported for years so not really sure what your problem is - https://github.com/teamcapybara/capybara/blob/master/lib/capybara/rails.rb#L18 - Locking this thread,twalpole,2009-12-11 12:44:35
11,2009-12-02 17:19:21,"Because session.rb is autoloaded rather than required the .default_selector method is not included into the Capybara module unless Session is used somehow. This means you can't use default_selector until a session has already been created, which doesn't really make sense.

I would have fixed this myself, but I'm not sure what approach you'd prefer. I can always require 'capybara/session' specifically myself in the high level code, although that feels wrong. It could be included in capybara/dsl or capybara/rails, or you could switch the autoload itself to a require.

However it's fixed, I hope you agree that it doesn't make much sense to need a session to have been created before setting a default_selector...
",robholland,2009-12-03 17:50:12
11,2009-12-03 17:50:12,"Move default_selector out of session. Closed by 3f9950e09ddcb99bcb0deb63ce7c66aabafa22b8
",jnicklas,2009-12-03 17:50:12
10,2009-12-02 08:23:18,"When dealing with JavaScript frameworks that build rich internet application (e.g. ExtJS) we may need to click on any html element that is visible on the page. At the moment capybara's DSL doesn't allow this sort of interaction. It allows only to click on buttons and links through #click_link and #click_button methods. It would be nice to give the users the freedom to click on any elements that can be selected through XPath or CSS selectors. Two possibilities raised after a discussion [1] on ML:

Raise the visibility of Session#find method from private to public so that one could do:

<S_CODE_TOKEN>

Add a #click method that allows to click on a button, on a link or on a generic element:

<pre>
<code>
 def click(locator)
   (find_link(locator) || find_button(locator) || find(locator)).click
 end

 click('Click me!') # click on a button or link

 # click on the expand button of an ExtJS ComboBox
 click(""//img[@class='x-form-trigger x-form-arrow-trigger']"")
</code>
</pre>


[1] - http://groups.google.com/group/ruby-capybara/browse_thread/thread/f6c7c5b80aaa09c9
",remogatto,2009-12-13 14:05:40
10,2009-12-13 14:05:39,"This is now solved in two ways:
1) The 'find' method is now public, so clicking any element given a selector is possible. 
2) There is now a 'click' method which clicks on either a link or a button, but _not_ on a generic xpath/css selector.
",jnicklas,2009-12-13 14:05:40
9,2009-11-29 10:18:45,"Looks like a ""git push --tags"" might be needed.

Cheers,
Wincent
",wincent,2009-11-29 20:17:24
9,2009-11-29 20:17:24,"Sorry, always annoys me when that happens on other projects, I'll try to do better. Should be fixed now.
",jnicklas,2009-11-29 20:17:24
8,2009-11-28 09:20:24,"Trying to run the examples against the current master branch I've got two failing specs and a runtime error:

<pre>
<code>
andrea@ganimoide:~/src/capybara$ rake --trace
(in /home/andrea/src/capybara)
** Invoke default (first_time)
** Invoke spec (first_time)
** Execute spec
.............................................................................................................................................................................................................................................................................................................FF.................................................................................

1)
Culerity::CulerityException in 'Capybara::Session with culerity driver#fill_in should fill in a password field by id'
NativeException: java.lang.StringIndexOutOfBoundsException: String index out of range: 8
/home/andrea/src/capybara/spec/session_spec.rb:200:

2)
Culerity::CulerityException in 'Capybara::Session with culerity driver#fill_in should fill in a password field by label'
NativeException: java.lang.StringIndexOutOfBoundsException: String index out of range: 8
/home/andrea/src/capybara/spec/session_spec.rb:206:

Finished in 58.33266 seconds

384 examples, 2 failures
(eval):1:in `initialize': can't convert String into Integer (TypeError)
rake aborted!
Command /usr/bin/ruby1.8 -I""spec:lib""  ""/usr/lib/ruby/gems/1.8/gems/rspec-1.2.9/bin/spec"" ""spec/dsl_spec.rb"" ""spec/session/rack_test_session_spec.rb"" ""spec/session/selenium_session_spec.rb"" ""spec/session/culerity_session_spec.rb"" ""spec/drivers_spec.rb"" ""spec/save_and_open_page_spec.rb"" ""spec/driver/firewatir_driver_spec.rb"" ""spec/driver/culerity_driver_spec.rb"" ""spec/driver/selenium_driver_spec.rb"" ""spec/driver/safariwarit_driver_spec.rb"" ""spec/driver/rack_test_driver_spec.rb"" ""spec/session_spec.rb""  failed
/usr/lib/ruby/gems/1.8/gems/rspec-1.2.9/lib/spec/rake/spectask.rb:177:in `define'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:1112:in `verbose'
/usr/lib/ruby/gems/1.8/gems/rspec-1.2.9/lib/spec/rake/spectask.rb:153:in `define'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:636:in `call'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:636:in `execute'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:631:in `each'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:631:in `execute'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:597:in `invoke_with_call_chain'
/usr/lib/ruby/1.8/monitor.rb:242:in `synchronize'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:590:in `invoke_with_call_chain'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:607:in `invoke_prerequisites'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:604:in `each'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:604:in `invoke_prerequisites'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:596:in `invoke_with_call_chain'
/usr/lib/ruby/1.8/monitor.rb:242:in `synchronize'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:590:in `invoke_with_call_chain'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:583:in `invoke'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:2051:in `invoke_task'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:2029:in `top_level'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:2029:in `each'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:2029:in `top_level'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:2068:in `standard_exception_handling'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:2023:in `top_level'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:2001:in `run'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:2068:in `standard_exception_handling'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake.rb:1998:in `run'
/usr/lib/ruby/gems/1.8/gems/rake-0.8.7/bin/rake:31
/usr/bin/rake:19:in `load'
/usr/bin/rake:19
</code>
</pre>


My testing environment:

<pre>
<code>
andrea@ganimoide:~/src/capybara$ gem list -d culerity

*** LOCAL GEMS ***

culerity (0.2.4)
    Author: Alexander Lang
    Homepage: http://github.com/langalex/culerity
    Installed at: /usr/lib/ruby/gems/1.8

    Culerity integrates Cucumber and Celerity in order to test your
    application's full stack.
andrea@ganimoide:~/src/capybara$ jruby -S gem list -d celerity

*** LOCAL GEMS ***

celerity (0.7.5)
    Authors: Jari Bakken, T. Alexander Lystad, Knut Johannes Dahle
    Rubyforge: http://rubyforge.org/projects/celerity
    Homepage: http://github.com/jarib/celerity
    Installed at: /home/andrea/src/jruby/lib/ruby/gems/1.8

    Celerity is a JRuby library for easy and fast functional test
    automation for web applications.
andrea@ganimoide:~/src/capybara$ ruby --version
ruby 1.8.7 (2008-08-11 patchlevel 72) [i486-linux]
andrea@ganimoide:~/src/capybara$ jruby --version
jruby 1.5.0.dev (ruby 1.8.7 patchlevel 174) (2009-11-25 353a73a) (Java HotSpot(TM) Client VM 1.6.0_10) [i386-java]
</code>
</pre>
",remogatto,2009-11-28 22:47:33
8,2009-11-28 22:47:32,"Celerity 0.7.5 has a bug that causes this failure, it's been reported to HTMLUnit (where the bug originates), you should use 0.7.4 for the time being. There's a note about this in the README, unfortunately we can't specify that as a gem dependency.
",jnicklas,2009-11-28 22:47:33
7,2009-11-26 23:04:28,"Just noticed this while trying to use:

<S_CODE_TOKEN>

To find the string ""Can't log out (weren't logged in)"" using Culerity.

The single-quotes cause the feature to barf:

<S_CODE_TOKEN>

Error message when using Selenium driver is slightly different:

<S_CODE_TOKEN>

But I guess the underlying cause is the same; it's probably getting reduced to the following XPath:

<S_CODE_TOKEN>

With the unescaped single quote and the imbalanced quotes giving invalid syntax.

Anyway Capybara could automatically escape this? (don't know much about XPath myself). I tried manually escaping from within my features but it doesn't work.

Cheers,
Wincent
",wincent,2009-11-30 20:51:26
7,2009-11-26 23:11:35,"Err, yeah, that's kind of dumb :D I'll fix it ASAP, need to read up on escaping XPath...

/Jonas
",jnicklas,2009-11-30 20:51:26
7,2009-11-26 23:16:08,"Here's a start:

http://stackoverflow.com/questions/188834/cleaning-sanitizing-xpath-attributes

W
",wincent,2009-11-30 20:51:26
7,2009-11-28 20:30:56,"Got a working implementation here, but got to go out now. Will publish it via fork or whatever when I get back (probably tomorrow).

W
",wincent,2009-11-30 20:51:26
7,2009-11-29 09:59:52,"Published the fix here:

  http://github.com/wincent/capybara/commits/bugfix-issue-7

Here's the alternative version of the fix that I mentioned in my pull request: simpler code but uglier sanitized strings:

  http://github.com/wincent/capybara/tree/alt-bugfix-issue-7

W
",wincent,2009-11-30 20:51:26
7,2009-11-29 10:17:16,"One other cleanup added on top of the bugfix-issue-7 branch:

http://github.com/wincent/capybara/commit/849e78c62a5b27f031aafdc800d0301cb989c8c2

W
",wincent,2009-11-30 20:51:26
7,2009-11-30 20:51:25,"I pulled in the simple solution, it's now published in 0.1.3
",jnicklas,2009-11-30 20:51:26
7,2010-09-07 00:07:58,"I am having the same problem with rails 3.0, capybara-0.3.9, rspec-2.0.0.beta.20, cucumber-0.8.5
expected #has_content?(""Name can't be blank"") fails even though this string exists in the page. 
",bitcoiners,2009-11-30 20:51:26
7,2010-12-01 04:10:25,"This is the same issue I am facing now with Rails 2.3.10, Capybara 0.4.0 and Web Driver 2. 
",ozzyaaron,2009-11-30 20:51:26
6,2009-11-25 19:37:40,"I've got issues using save_and_open_page: Launchy doesn't open the browser. To fix it I needed to join tempfile.path with 'file://' string in save_and_open_page.rb:

<S_CODE_TOKEN>

I'm using firefox 3.0.14 on ubuntu 8.10. I don't know if this hack is portable across browsers though.
",remogatto,2009-11-27 21:46:24
6,2009-11-26 22:33:56,"Doesn't seem to work for me on Firefox 3.5 / OS X 10.6.2. I'm hesitant to add  platform specific hack for this. Maybe this is something that should be fixed in Launchy instead?
",jnicklas,2009-11-27 21:46:24
6,2009-11-27 21:45:17,"Ok.. the issue seems to be solved by 6f0661cc8758e66dbf07e1125cf8be7ec312e943 that adds html extension to the saved file
",remogatto,2009-11-27 21:46:24
6,2009-11-27 21:46:24,"Cool!
",jnicklas,2009-11-27 21:46:24
5,2009-11-24 22:52:50,"Currently Selenium/Culerity _have_ to run against a Rack app, even though they are perfectly capable of running against a remote server. Selenium and Culerity sessions should be able to work with any site:

<S_CODE_TOKEN>
",jnicklas,2009-12-20 01:48:58
5,2010-02-05 03:04:29,"Great that you addressed this. Could you explain how I would set up the Capybara session with Cucumber using the Culerity driver to run against a remote server? I can't quite put it together myself.
Thanks
",jorahood,2009-12-20 01:48:58
5,2010-02-05 17:51:14,"Woo, figured it out: set Capybara.app_host in my env.rb. Capybara is awesome, btw.
",jorahood,2009-12-20 01:48:58
5,2010-02-05 17:52:35,"Excellent, Joseph Wilk provided some documentation about this, which I hope to be able to merge soon!
",jnicklas,2009-12-20 01:48:58
4,2009-11-24 22:41:44,"Since the port is set to a fixed port number, it will spin up the rack app at the same port. If another process then wants to run the test, it will see that rack app and try to run tests against it.
",jnicklas,2009-12-13 13:33:33
4,2009-12-13 13:33:33,"Server is smarter about choosing open port, Closed by a996d5eba6c863327cdba7119c0cecf28e4d9d9a
",jnicklas,2009-12-13 13:33:33
3,2009-11-22 10:14:23,"So far the default JavaScript driver (which is FireWatir I guess?) has performed flawlessly. Worked first time and every other time I have tried it.

Selenium is by far the worst. In 6 runs, I got 3 different results:

First run (failure):

<S_CODE_TOKEN>

Second run (success):

<S_CODE_TOKEN>

Third run (different type of failure):

<S_CODE_TOKEN>

Fourth, fifth, and sixth runs: success

So it's behavior is totally erratic (different results on successive runs with no changes at all to the codebase) and basically I don't want to touch Selenium with a barge pole. (Selenium's flakiness is the main reason that I've been looking to alternatives such as Culerity, and to Capybara because it should isolate me from the pain of moving from one flakey driver to a more robust one).

With the Culerity driver I am getting a weird failure. It ""works"" in the sense that the Cucumber features execute, but it fails in the sense that the results of JavaScript aren't reflected in the result.

I did some testing to see where the failure was.

First test, using JRuby's irb and driving Celerity manually, it works:

<S_CODE_TOKEN>

Inspecting the result, I can see that JavaScript has run and modified the DOM.

Second test, using Culerity from irb and driving it manually, it works:

<S_CODE_TOKEN>

Again, inspecting the result, I can see that JavaScript has run and modified the DOM.

For my third test, I'd like to fire up irb and manually drive Capybara, but I couldn't really figure out how to do that. All I can really do is run it from inside Cucumber, and there it doesn't work.

I can see it pause while it sets up Culerity behind the scenes, and I can see ""java"" in the process listing, so I know it actually is going through Culerity and not the default rack-test driver. But the feature in question fails and when I print out the ""page.body"" from within the feature so that I can inspect it, I can see that the DOM wasn't modified.

It's as though either the JavaScript didn't run at all, or ""page.body"" was captured too soon, before the ""onload"" JavaScript had finished modifiying the DOM. And as I said, it works fine when manually driving Celerity or Culerity; this only happens when Capybara is driving Culerity.

Anything I can do to do a manual test from an irb console? I tried following the ""Using the DSL outside cucumber"" section of the README, but can't get it to work:

<S_CODE_TOKEN>

Anything else I can do to help troubleshoot this?

Cheers,
Wincent
",wincent,2009-11-26 22:27:13
3,2009-11-22 14:07:14,"The default javascript driver is Selenium, so it's strange that that would work fine for you, yet using selenium explicitely would cause problems. Can you provide a full stack trace for the error?

If you want to test Capybara manually, you need to hand it a Rack app:

<S_CODE_TOKEN>

Something like that.

The reason page.body prints the unmodified HTML is because it works the same as viewing the page source in a browser, it will not show you anything modified by JavaScript. This is also the reason Rails' ""have_tag"" matcher and friends are useless with JavaScript.

Sorry for the issues you're having, let me know if you need further help,

/Jonas
",jnicklas,2009-11-26 22:27:13
3,2009-11-22 19:33:23,"It could be just luck then. With explicit "":selenium"" setting I've had 3 random success and 3 random fails, and without it I've had only successes. Just a coincidence perhaps?

As for full stack traces... let me just run this a few times and see what pops out...

With default driver (no explicit ""javascript_driver"" setting):

First run: success

Second run: success

Third run: success

Fourth run: success

Fifth run: success

Sixth run: success

Seventh run: success

Eighth run: success

Ninth run: success

Tenth run: success

Now with explicit ""Capybara.javascript_driver = :selenium"" setting:

First run: success

Second run: failure

<S_CODE_TOKEN>

Third run: failed again, same backtrace

Fourth run: failed again, same backtrace

Fifth run: success

Sixth run: success

Seventh run: success

Eighth run: success

Ninth run: success

Tenth run: success

So it's quite erratic...

Thanks for clarifying what ""page.body"" actually returns. I mistakenly thought it was like calling ""browser.text"" in Celerity (which returns the HTML representation of the DOM, including any JavaScript-based changes to the DOM).

Is there any way to get at that content? I see I could do ""page.driver.send(:browser).text"", which is pretty hideous (calling a private method and all). 

(Reason I want this: I have a matcher which runs the HTML through ""HTML::FullSanitizer"" so that I can look for ""foo bar baz"" and a page that has ""foo <em>bar</em> baz"" will satisify it; in some of my features I just want to specify the words that the user will see on the page, and I don't want to clutter them up specifying details like what styling they have applied to them.)

Cheers,
Wincent
",wincent,2009-11-26 22:27:13
3,2009-11-22 21:58:14,"Very strange that the behaviour is so erratic, I have no idea what might be causing this. Maybe some kind of timing issue, where calling 'body' at a strange time will cause the problem?

Have you tried using

<S_CODE_TOKEN>

It should (hopefully) do exactly what you want.

Hope that helps, I'll look into this a bit further and see if I can replicate the issue.

/Jonas
",jnicklas,2009-11-26 22:27:13
3,2009-11-22 22:15:59,"Yes, that works, and that's what I'm going with for now. I don't actually care about the Selenium breakage for the time being as I actually prefer to use Culerity if I can. Will only pop out to Selenium for those specific cases where Culerity/Celertity/HtmlUnit can't handle the JavaScript (and I don't actually have any cases like that so far in my features).

Cheers,
Wincent
",wincent,2009-11-26 22:27:13
3,2009-11-26 22:15:48,"Selenium is rock solid stable for me, since I can't reproduce this, I want to close this issue. If it's still broken for you, a failing spec might make it easier to troubleshoot.
",jnicklas,2009-11-26 22:27:13
2,2009-11-21 11:58:00,"All my features that use the standard rack-test driver have ported across from webrat without any real difficulties, but I'm having some issues with Culerity-based features.

Here's an example:

<S_CODE_TOKEN>

And the corresponding step definition:

<S_CODE_TOKEN>

Here's a stripped down version of the login form:

<S_CODE_TOKEN>

I'm getting an exception on hitting the ""fill_in"" line:

<S_CODE_TOKEN>

If I comment out that line for testing purposes then I get a similar exception on hitting the ""click_button"" line:

<S_CODE_TOKEN>

Gem versions I'm working with:
- capybara (0.1.1)
- cucumber (0.4.3)
- culerity (0.2.3)
- nokogiri (1.3.3)
- rack (1.0.1)
- rack-test (0.5.2)
- database_cleaner (0.2.3)
- rails (2.3.4)

And I'm using jarib-celerity (0.0.7.1) from GitHub as noted in the ""Gotchas""; celerity (0.7.5) from GemCutter fails too.

JRuby is 1.4.0, installed and with its ""bin"" directory exported via the PATH environment variable.

All references to webrat remove from ""features/support/env.rb"" and have:

<S_CODE_TOKEN>

The scenario in question basically works if I remove the @javascript tag, but to properly test I do need JavaScript because the ""Successfully logged in"" flash message is actually shown using JS.

Not sure if I am overlooking anything obvious, perhaps just another case of PEBKAC...   Let me know if you need any further information.

Cheers,
Wincent
",wincent,2009-11-24 20:51:26
2,2009-11-21 12:27:56,"Could you try running the Capybara specs and see if those run on your system?
",jnicklas,2009-11-24 20:51:26
2,2009-11-21 12:36:00,"Something definitely missing on my system I'd say; output of ""spec spec/driver/culerity_driver_spec.rb"":

<S_CODE_TOKEN>

Will keep digging and see if I can find out what.
",wincent,2009-11-24 20:51:26
2,2009-11-21 12:59:05,"Did a run of the full spec suite. In order to get that to run needed to install a few more gems (which should probably be added to the spec as development dependencies):
- sinatra
- firewatir
- safariwatir (not sure if this was needed or not but installed it anyway)
- rb-appscript

Here is the output from the full ""spec spec"" run:

<S_CODE_TOKEN>
",wincent,2009-11-24 20:51:26
2,2009-11-21 14:17:16,"I just reinstalled the Culerity gem and that gives me the same failures, then I remembered that I was running edge Culerity from GitHub, try installing that and see if it fixes your problems.
",jnicklas,2009-11-24 20:51:26
2,2009-11-21 20:11:33,"Yes, just installed it and it does indeed fix things.

There have hardly been any commits since the release of Culerity 0.2.3, and the only one which touches proxies is 4ee1726, so perhaps that's the important one.

Might be a good idea to update the README with instructions on how to use the HEAD version of Culerity. I guess there are multiple ways of doing it but I chose to clone the repo and build a gem from it:

<S_CODE_TOKEN>

So I bumped the version number from 0.2.3 to 0.2.3.218f631 so that when 0.2.4 is released it will supersede my intermediate version.

Cheers,
Wincent
",wincent,2009-11-24 20:51:26
2,2009-11-22 12:05:15,"BTW, have opened a ticket on the Culerity tracker noting this issue and requesting a new gem release:

http://github.com/langalex/culerity/issues#issue/10
",wincent,2009-11-24 20:51:26
2,2009-11-22 19:16:04,"Culerity 0.2.4 is now out.
",wincent,2009-11-24 20:51:26
2,2009-11-24 20:51:26,"Depend on Culerity 0.2.4, Closed by 51a5a2efa22c980f4a9dd5df00618709ec45fd06
",jnicklas,2009-11-24 20:51:26
1,2009-11-20 23:01:43,"In the Rakefile, an entry for rack-test should probably be added to the extra_deps list:

<S_CODE_TOKEN>

I didn't have it installed, so was getting this on my first test run:

<S_CODE_TOKEN>
",wincent,2009-11-20 23:06:16
1,2009-11-20 23:06:16,"Added rack-test to dependencies, Closed by 36ac4993458c0798f66dca9c8fbbe86374355aab
",jnicklas,2009-11-20 23:06:16
