issue_num,datetime,body,login,mention_login
1847,2017-03-16 22:52:17,@roberts1000 Not really,twalpole,roberts1000
1846,2017-03-15 16:39:20,@Aqualon  Thanks for that - investigating,twalpole,Aqualon
1846,2017-03-15 16:51:07,@Aqualon  What driver are you using?,twalpole,Aqualon
1846,2017-03-15 17:09:41,"@Aqualon I think it looks like your inclusion of Capybara::Node::Matchers is overriding the == method of nil, or Symbol ? --  Capybara::Node::Matchers is only for inclusion into  Capybara::Node::Base and Capybara::Node::Simple - so I think this is user error and you're going to have to figure out why you're including Capybara::Node::Matchers anywhere else.",twalpole,Aqualon
1845,2017-03-11 23:02:15,"@twalpole Thanks a lot for your quick feedback. I have corrected affected drivers. You are right, originally I tested on phantomjs driver (selenium-webdriver gem). You also are right regarding edge case when a title is missing in a frame. I proposed a raw code.

If the bug is fully connected with selenium-webdriver gem, I suggest to post the corresponding issue there and close this one. At least other users will have an ability to find this conversation about the problem.",romikoops,twalpole
1845,2017-03-13 20:13:25,"@romikoops Yes there is currently some inconsistency between drivers behavior in this but since we generally tend to lean towards the webdriver definition of things we'll probably end up making the current selenium behavior the ""correct"" one - which is that title and current_url refer to the top level browsing context and not the frames as specified here - https://w3c.github.io/webdriver/webdriver-spec.html#get-current-url - which correspond to what users can actually see in the browser.   Monkey patching different behavior into Capybara is a terrible idea, you'd be much better off adding methods like `frame_url` and `frame_title` or something",twalpole,romikoops
1845,2017-03-13 22:29:16,"@mhoran Yeah -- I'm wavering between whether Capybara should add `frame_url` and `frame_title` driver methods (and then maybe allow a parameter for assert_current_path, assert_title to choose that the user wants frame level) or make seleniums `title` and `current_url` return the frames info when in the frame context.   The first would more align with the webdriver spec (and I prefer to go towards that), but I'm having a hard time coming up with a case where it makes sense to want to check the pages URL from inside a frame context.",twalpole,mhoran
1845,2017-03-14 03:40:49,"Yeah, I agree. I think the top frame makes sense.

On Mon, Mar 13, 2017 at 03:29:21PM -0700, Thomas Walpole wrote:
> @mhoran Yeah -- I'm wavering between whether Capybara should add `frame_url` and `frame_title` driver methods (and then maybe allow a parameter for assert_current_path, assert_title to choose that the user wants frame level) or make seleniums `title` and `current_url` return the frames info when in the frame context.   The first would more align with the webdriver spec, but I'm having a hard time coming up with a case where it makes sense to want to check the wholes pages URL from inside a frame context.
> 
> -- 
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub:
> https://github.com/teamcapybara/capybara/issues/1845#issuecomment-286263845

-- 
Matt Horan matt@matthoran.com http://matthoran.com/
",mhoran,mhoran
1845,2017-03-14 17:01:24,"@route - yes there is.  

Ok, so I think the consensus is that current_url and title when called on the session should return the top level context url and title (that which would be shown in the browser) which is how selenium currently works. For Capybara 2.14, not the 2.13 release going out today/tomorrow, I'll add tests for that (will require changes in poltergeist and capybara-webkit) and look at possibly adding some frame specific title and url methods.  Sound good?",twalpole,route
1845,2017-03-14 18:09:15,@twalpole yep perfect,route,twalpole
1845,2017-03-14 18:39:44,@twalpole Amazing! Let me know if I can help you with something.,romikoops,twalpole
1843,2017-03-07 16:49:12,@twalpole thanks for the feedback - I brought back a `Test::Unit` specific section to the README and left the Rails/Minitest after it.,lucasmazza,twalpole
1839,2017-02-28 19:14:29,@rugill If that is this issue then it would be a selenium bug (or possibly geckodriver/chromedriver) and not much Capybara can do about it - although I don't know why adding sleeps would make it pass then (unless the page is animating something as selenium scrolls it so the click ends up in the wrong place - would still be a selenium bug),twalpole,rugill
1839,2017-02-28 20:43:58,"@rugill I just noticed the point (35, 24) that it's trying to click at.  That point would put it behind the fixed header so I would expect another element to receive the click, i.e. it's behaving correctly.  The thing is that when an element needs scrolling to be seen selenium attempts to scroll it to the top of the page, there's a capability 'elementScrollBehavior' that you can set to 1 which will make it scroll to the bottom of the page (if chromedriver has implemented that capability), although that may not help here either due to the fixed footer in the section which it would probably end up behind.  Your only option may be to scroll the section of the page to where you need it using `execute_script` and then click the link

Either way this isn't the same problem as the current issue.",twalpole,rugill
1839,2017-02-28 21:12:31,I've been doing more testing with this and I agree with @twalpole conclusion. I'll check into his suggestion about elementScrollBehavior with FF and see if it helps my test. Thanks.,rugill,twalpole
1839,2017-03-01 11:50:37,"@twalpole thanks for the feedback. While the page I linked has animations, I have been able to reproduce this issue on a page that has no animated menu as well, but since it's not a public application, I cannot share that link unfortunately.

The reason this is confusing to me is that even if the animation is running slower, I would expect it to *not find* the link. On the other hand, if the link is actually found and clicked, why is the click not being triggered?

In our local example, we were able to reproduce this in Xvfb and a ratpoison window manager which automatically full-screens the Firefox. Then we would:
1. Open Firefox A, navigate to a page
2. Open Firefox B, this hides Firefox A completely
3. In Firefox A session, navigate to another page, then click a link.

The result will be: The click brings Firefox A into the foreground (!) and there is a hover effect over the link/button. But it was not clicked.",rbu,twalpole
1839,2017-03-01 17:04:50,"@rbu I can't say 100% for sure without a lot more debugging of that page but it appears the menu is swallowing all other clicks while it's animating, so the click is actually happening it's just not triggering any actions.  Then adding a sleep delays enough that the animation has finished and the click is no longer swallowed by the menu.

Your second description would most likely be a geckodriver/marionette issue if the browser is behaving differently when in the foreground or not, and Capybara probably can't do anything about it.  One thing you could try is making sure the 'focusmanager.testmode' preference is set to 'true' in the firefox profile.  I know Selenium used to set that, but I don't think it does since the swap to using geckodriver/marionette, and am not sure whether firefox even supports it anymore but doesn't hurt to try it.",twalpole,rbu
1839,2017-03-06 12:05:30,"@twalpole, Thank you for the feedback. As I mentioned, I was not able to reduce the core Firefox/Selenium issue further so it could become a good bug report. I'll close this for now, as you point out it is not a Capybara issue.

As a sidenote, do you know if Selenium accepts bugs written using the Capybara API?",rbu,twalpole
1831,2017-02-13 20:51:08,@nateberkopec Any update on a puma 3.7.1 release?,twalpole,nateberkopec
1830,2017-01-27 21:52:57,@abotalov No - it supports returning AN element -- It's not going to run through objects to figure out whether or not they have elements in them at the current time.  If you want to implement that and submit a PR - feel free,twalpole,abotalov
1830,2017-01-28 22:36:46,@abotalov Actually - I've implemented full unwrapping for selenium - Just need to check it can work with Poltergeist and CapybaraWebkit too,twalpole,abotalov
1827,2017-01-13 22:44:09,"@twalpole Yeah I hadn't either until we experimented moving our suite to BrowserStack. I've noticed a lot of latency in general. Regardless, I figured it wouldn't hurt to prevent this issue from raising an exception in Capybara.

Thanks for the suggestion! I've updated the mock, squashed commits, and updated.

@abotalov I'll take a look into this.",dylanlive,abotalov
1827,2017-01-13 22:44:09,"@twalpole Yeah I hadn't either until we experimented moving our suite to BrowserStack. I've noticed a lot of latency in general. Regardless, I figured it wouldn't hurt to prevent this issue from raising an exception in Capybara.

Thanks for the suggestion! I've updated the mock, squashed commits, and updated.

@abotalov I'll take a look into this.",dylanlive,twalpole
1826,2017-01-10 19:02:31,@abotalov  Yeah - I think I'm just going to mark 2.4.0 as allowed failures on travis and ignore it for now - 2.4.0 is basically unusable if anything included into a project uses delegators from forwardable.,twalpole,abotalov
1824,2017-01-03 22:02:21,"Thanks @twalpole - I'm not entirely sure of the expected behavior yet (I just inherited this codebase and I don't have anyone that I can ping questions to). I'll continue to explore it and if it turns out to be unexpected, then I'll be back. Thanks for the follow up- that makes sense to me!",davidwparker,twalpole
1823,2017-01-05 07:57:49,@abotalov Which version of selenium?  That would violate the definition of interactibility from the webdriver spec https://www.w3.org/TR/webdriver/#element-interactability,twalpole,abotalov
1823,2017-01-05 22:48:57,"@abotalov Ok -- that example does fail when testing Selenium with Firefox without marionette (<= 2.47) - with a Selenium::WebDriver::Error::ElementNotVisibleError eror, but it looks like geckodriver and chromedriver support attaching a file to non visible file inputs",twalpole,abotalov
1821,2017-01-07 16:11:46,@twalpole Do we have both in poltergeist?,route,twalpole
1821,2017-01-07 16:29:51,"@route - Yes, I implemented both in Poltergeist (not released yet though), it should be passing all the capybara master branch tests.  ",twalpole,route
1820,2017-01-03 09:29:47,"@abotalov `page.assert_all_of_selectors(:css, '#my_div', 'a.not_clicked') ` is slightly less typing and reads fine - see the rails PR linked above ",twalpole,abotalov
1818,2017-01-03 09:25:00,"@abotalov Yeah - I originally had it as :style_change but didn't like that -- I'm not sure I like `preset_style`, maybe `set_style` -  I'll think about it",twalpole,abotalov
1818,2017-01-03 09:30:46,@strika - no there isn't due to the many ways an element can be hidden,twalpole,strika
1818,2017-01-03 19:00:27,"With a night of sleep on this, I like the idea put forward by @strika, with a minor extension.  We could have a `make_visible: true` option that defaults to setting something like `opacity: 1, display: block`  - and if that doesn't work for a specific users site they can set it to a hash of settings to change.",twalpole,strika
1816,2016-12-30 09:33:08,"Thank you for the kind words @twalpole, its the least I could do as a longtime user of Capybara, - and thank you even more for the fix.

I've realized my reproduction case above is incomplete, it doesn't cover ancestor fieldsets that aren't direct parents. I'm unsure if the changes at https://github.com/teamcapybara/capybara/pull/1817/files#diff-7064352df631f346ca44fb93af7af952R96 will cover this scenario:


",eliotsykes,twalpole
1815,2016-12-29 23:53:45,"@strika Rather than saying ""If the application that you are testing is a Rails app"" say something like ""If you have required capybara/rails Capybara.save_path will default to ...""",twalpole,strika
1815,2016-12-30 20:39:37,@strika save_and_open_page_path is deprecated so it doesn't matter,twalpole,strika
1814,2017-01-05 21:40:03,"@abotalov The issue this is proposed to solve is really the `within` issue when RSpecs matchers override Capybaras version of the method.  In all the other cases of `all` and `within` the user ends up with some sort of error which allows them to, eventually, work out that it's calling the wrong method.  With RSpecs `within` overriding Capybaras though it just ends up with the test silently ignoring a block of code

    within(element) do
      expect(page).to have_content('Some test')  # ends up not being run if RSpecs `within` has shadowed Capybara's 
    end

which leads to false passing of tests (the worst possible outcome)

Since RSpecs `within` matcher doesn't take a block, but Capybaras version always does, I proposed having RSpec flag that as an error which would at least have warned users - but that was not acceptable.  I don't have time to continue proposing other changes to RSpec that may or may not be acceptable, and the maintainers of RSpec don't seem to really consider it to be an issue that needs flagging,  so I'm looking to do anything I can purely in Capybara to at least give users notice that things may not be as expected.  Adding `within_element` is definitely a possibility but, as you said, doesn't solve usage in existing tests.

Either way they are both available to be used in the same test, either via  RSpec.all/RSpec.within, or page.all/page.within but without any indication that the wrong one is being used (silent ignoring) the user isn't notified in any way",twalpole,abotalov
1814,2017-02-23 07:36:20,"@axlekb Yeah -- it's still being considered, want to make sure it doesn't potentially create issues for people who aren't having the problem to start with.",twalpole,axlekb
1812,2016-12-23 16:11:30,"@abotalov Yes it was, because it was reported to not be possible (or very difficult) in other drivers.  What has changed is that I went ahead and implemented it for Poltergeist - https://github.com/teampoltergeist/poltergeist/pull/838 - so it's not a Selenium specific feature anymore",twalpole,abotalov
1810,2017-01-03 22:06:03,"@abotalov Definitely seems that it's not removed.  This PR doesn't really do anything that will break things so it should be safe to merge, just waiting for a response from the OP of Issue #1809 to make sure if fixed the issue for them.  There's also the question of whether or not there's much use in trying to use Capybara with Chrome when javascript is disabled -- Haven't really tried anything to find out.",twalpole,abotalov
1809,2016-12-19 22:24:38,"@wildlyinaccurate about:blank is preferred because the empty HTML document caused all sorts of issues with other browsers in selenium, and isn't necessarily available when Capybara is set to not run its own server.  Not sure how having an extra iframe in the about:blank page could be considered a ""feature"", it's completely against the idea of about:blank.  

Anyway, try the extra_dummy_frame branch and see if that works for you, there's no guarantee all the other features of Capybara will work correctly when JS is disabled either, since things like returning non-visible text depend on execute_script, which used to not work when JS was disabled in the browser.  It's possible JS is now allowed to be executed from chromedriver even when JS is disabled, but it's not tested)",twalpole,wildlyinaccurate
1809,2016-12-21 20:57:06,@wildlyinaccurate Any feedback on the branch?,twalpole,wildlyinaccurate
1809,2017-01-03 18:54:27,@wildlyinaccurate Any update on this?,twalpole,wildlyinaccurate
1804,2016-12-14 18:16:51,"Thank you @twalpole  for your fast reply.


> [...] changing the page isn't really something I consider desirable

This is the reason why in my last comment I suggested to add an option to enable/disable it.

> We do provide the asset_host setting which can be set so you can load up the saved page and load the assets from a different base url ...

This option require to have a running server, where my feature doesn't, which ease the life of developers.

> [...] if you really want to see what the page looked like in the browser there is save_screenshot.

As far as I know, this requires to have a JavaScript driver which is slow. (Correct me if I'm wrong).
Also this prevent developers to inspect the page and see the CSS rules for example.

The added code is really small, and with an option to enable it (disabled by default) would give us the best of both worlds.",zedtux,twalpole
1804,2016-12-14 20:14:13,"@zedtux Why don't you create your own gem -  name it  capybara-finalize-page or something and release that, rather than trying to get it included into another gem? ",twalpole,zedtux
1801,2016-11-30 17:07:40,@mduqueoviedo What framework are you using that ends up producing technically invalid URLs?,twalpole,mduqueoviedo
1798,2016-11-23 09:08:37,"@twalpole I haven't debugged how it happens. `quit` is being called by Capybara and it raises an exception. I noticed that the same exception, with a different message is being handled already in Capybara code, so I updated the code to preserve the same behaviour against the latest versions of Firefox/geckodriver. All I can add is that Firefox is shut down without any processes hanging around after the test suite finishes, same goes for the geckodriver process.",psyho,twalpole
1796,2016-11-20 22:11:05,"Thanks for this @twalpole .

For those who may visit this issue in the future having a similar problem, be sure to:
- Set default_driver as selenium
- If you want to replicate the functionality of save_and_open_page with `save_screenshot`, I found `save_and_open_image` from the [capybara-screenshot](https://github.com/mattheworiordan/capybara-screenshot) gem helpful. 
",Schwad,twalpole
1796,2016-11-21 02:45:17,@Schwad There is also `save_and_open_screenshot` which doesn't need the capybara-screenshot gem.,twalpole,Schwad
1788,2016-11-09 20:19:32,"Appreciate the insight @twalpole .  I wasn't familiar with the `Capybara.string` behavior.

Note to anyone else reading this issue: `has_content?` throws a `NoMethodError` on a string, but `have_content` converts it to an element.
",ronwsmith,twalpole
1788,2016-11-09 20:45:01,"@ronwsmith Yes because `has_content?` is a method on Capybara::Node::Element - `have_content` is a Capybara provided RSpec matcher - they're completely different things.  If you're working with strings you should just be using the normal string methods and/or RSpec matchers designed for working with strings
",twalpole,ronwsmith
1787,2016-11-09 19:18:35,"Thanks for the quick review @twalpole 

> in the current form it will attempt to call set on a non-visible element if allow_label_click is false (default) which is not acceptable.

Where `allow_label_click` is false the implemention in this PR will raise at [line 156](https://github.com/mrloop/capybara/blob/d8d57df8bef11ddf674e3a6f9f5a89b6fd576acb/lib/capybara/node/actions.rb#L156)
`cbox = find(:checkbox, locator, options.merge({visible: (allow_label_click ? :all : true)}))`

This scenario is tested for [here](https://github.com/mrloop/capybara/blob/d8d57df8bef11ddf674e3a6f9f5a89b6fd576acb/lib/capybara/spec/session/check_spec.rb#L160) , maybe the ternary operator doesn't help readability, also not sure if it's in keeping with the project style. Let me know if it's acceptable in it's current form or if it needs changed.
",mrloop,twalpole
1787,2016-11-09 20:08:14,"@twalpole great I'll try out #1789 with test suite tomorrow. (UTC+00:00)
",mrloop,twalpole
1787,2016-11-09 20:11:42,"@mrloop Thanks -- let me know if it behaves basically equivalent to this PR and then I'll have to decide which way to go.
",twalpole,mrloop
1787,2016-11-10 08:36:02,"@twalpole #1789 working as expected. I'll close this PR in favour of yours. Thanks for coming up with better solution and I now know capybara internals a little bit better :) 
",mrloop,twalpole
1782,2016-11-01 18:00:48,"@luke-hill There's nothing Capybara can do -  If you've changed the selenium timeouts to 120s and when you tell selenium to quit it's taking around 120s I think it's pretty clear selenium is using the timeout you've set to attempt to talk to the driver again -  You should probably file an issue with selenium - but again they've moved on to v3.0+ so not sure if they'll really do much.
",twalpole,luke-hill
1777,2016-10-18 20:16:24,"@dvandersluis You're welcome, thanks for pointing this out.  On a side note, rather than `all('input[type=checkbox]')` Capybara does provide a [:checkbox selector](https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb#L298) , so you could just do `all(:checkbox)`  which also supports a number of filter options too
",twalpole,dvandersluis
1776,2016-10-14 17:15:06,"@pkmiec The problem is there really is no way to know when maximize has finished.  Your method assumes the size has started changing within .05 seconds and will never spend more than .05 seconds without changing.  Those might be valid assumptions but I'm not convinced of that.  Since you're calling maximize you're obviously interested in some change that occurs when the window size changes, so the proper solution for this is to wait for that change.  What change are you expecting in your page when maximized and is it something you Capybara will wait for?
",twalpole,pkmiec
1776,2016-10-26 22:07:04,"@pkmiec Please give the window_size_change_wait branch a try and see if that would work for you
",twalpole,pkmiec
1776,2016-10-26 22:08:40,"@twalpole will do .. thanks
",pkmiec,twalpole
1776,2016-10-30 20:46:38,"@twalpole i tested it on my giant monitor and it works.
",pkmiec,twalpole
1775,2016-10-13 18:46:34,"@twalpole Tested and verified this will catch the case of a user closing the browser on Grid.

Unfortunately I don't believe it will catch other Grid connection issues, such as an SO_TIMEOUT. SO_TIMEOUT's also fall under `Selenium::WebDriver::Error::UnknownError`, but have a different exception message.

The easy solution would be to add another expected message to catch, but I fear the maintenance of string matching... what are your thoughts?

Exception:



For brevity of this comment, I made a gist containing the backtrace:
https://gist.github.com/dylanlive/df4645d54cdaa21c170c9fec1e62cc3a
",dylanlive,twalpole
1775,2016-10-13 19:08:59,"@dylanlive  Ugh -- and this is the problem with UnknownError - I'm not interested in maintaining the strings and really don't want to just ignore all the errors - how often are you getting these errors?  There's an argument to be made that SO_TIMEOUT is an error some people would actually want to know about since the timeouts could potentially be adjusted.
",twalpole,dylanlive
1775,2016-10-13 19:46:16,"@twalpole I concur :P

Reasonable argument that people would want to know about it; however, the exception will likely still be raised during test execution (which can be caught in an rspec around block).

If the session was already terminated, does it make sense for quit to raise an exception? Likely the same argument could be used for `Errno::ECONNREFUSED`.

As for my experience with the SO_TIMEOUT's, they're occurring around some of our bandwidth throttling scenarios. Need to spend time researching prevention, but in the interim, was looking at recovery. The at_exit logic to quit is killing recovery efforts.
",dylanlive,twalpole
1774,2016-10-13 16:50:23,"@dylanlive  Please try the selenium_quit_error branch/PR #1775 and see if that solves the issue you're having  -  Closing this in favor of the more limited error ignoring (assuming it works)
",twalpole,dylanlive
1766,2016-09-30 15:43:55,"@twalpole also I found this but not sure if it's a bug or not supported (hidden field):


",vizcay,twalpole
1766,2016-09-30 16:29:17,"@vizcay  The :field selector - https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb#L53 - is specifically defined not to include fields of type 'hidden'.  To test for that you'd need to do something like



or if you're doing it a lot, create your own custom selector



which you could then use as 



The need to pass 'visible: false' to that is unfortunate so I should probably implement a way for selectors to override the default visibility setting in a future release
",twalpole,vizcay
1766,2016-09-30 17:10:46,"@twalpole yes but usually I'm checking the value of a field:

`expect(page).to have_css('input[type=""hidden""][value=""xxx""].retencion_ganancias_destroy', visible: false)`

that looks like too much.. so I will explore the custom selector route.. this will be ideal:

`page.has_selector?(:hidden_field, class: 'retencion_ganancias_destroy', with: 'xxx')`

Thanks
",vizcay,twalpole
1766,2016-09-30 17:59:20,"@vizcay to  add value checking to the custom selector, just add a 'with' filter (or import it from the field filter set)



or


",twalpole,vizcay
1766,2016-09-30 18:06:16,"@vizcay Just as a note -- the reason to implement the :with filter through a filter rather than through the xpath/css expression (like the :name expression filter in the example above) is that you usually want to be testing the current value property whereas the xpath/css query would test the attribute as it was set when the page loaded.
",twalpole,vizcay
1765,2016-09-30 04:42:56,"@elliterate you need to use different text for your added button so it doesn't cause ambiguous issues with the other tests. Other than that this looks good.
",twalpole,elliterate
1763,2016-09-29 16:26:41,"@abotalov It was an intermediate step while I thought about whether it made sense to have on all the specialized matchers/finders or only on the general versions
",twalpole,abotalov
1761,2016-09-15 14:06:07,"Hi @twalpole 
I'm using Selenium as the driver. The failing test code looks like this:



and passes when I add `page.execute_script(""$('#scheduled_report_hour_of_day_to_send').blur()"")` before the assertion. Really nothing noteworthy about the HTML this tests...

There should be no conflicting listeners on the select. If this is not the standard/expected behavior from capybara (leaving the dropdown open), then I'll just live with this fix for now. I created this issue under the assumption that it was.
",phillipspc,twalpole
1761,2016-09-15 16:35:45,"@phillipspc That is definitely not the expected behavior since selecting the option clicks on the option it should behave just like with a user.  I'm actually a little surprised that your tests work at all since `click_button` occurs asynchronously (doesn't wait for the click to submit a request, etc) so I would expect assert_difference to routinely fail - unless you're doing something like sharing a database connection between the threads from a connection pool (mutex protected) which could then pause whichever thread doesn't get the connection first and would lead to intermittent failures.  For robustness your test really should be something like the following to make sure the action has actually completed before checking for the updated count


",twalpole,phillipspc
1761,2016-09-15 21:21:00,"@phillipspc Also, what browser are you using with Selenium?
",twalpole,phillipspc
1761,2016-09-19 16:56:11,"@twalpole using firefox with selenium
",phillipspc,twalpole
1761,2016-09-19 17:10:11,"@phillipspc Without a reproducible example I don't think there's much we can do here. We have a number of tests -  like https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/select_spec.rb#L43 - that are run against selenium w/firefox (and chrome) which select items and then click buttons and they pass every time.
",twalpole,phillipspc
1761,2016-09-19 19:29:01,"@twalpole thats fine. thanks for taking a look. We're also on an older version, so that may be a factor.
",phillipspc,twalpole
1755,2016-09-13 14:31:21,"@twalpole:

Great, I think that 

`expect(page).to have_field(class: 'subtotal', with: '125.00')`

is by far the best syntax.. that will be on 2.8.2 ?
",vizcay,twalpole
1755,2016-09-13 14:53:52,"@vizcay  It's a new feature so it will be in 2.9.0
",twalpole,vizcay
1746,2016-08-26 10:57:23,"@twalpole 
Thank for reply!, 
Sorry for incomplete information.
Problem already solved, I just give up on using placeholder, Just use the ID of the <input> element



This work for me

one of my html



Thanks again
have a nice day :D
",1c7,twalpole
1744,2016-08-23 04:36:27,"@titusfortner Unless I missed a recent commit, Selenium 3 (selenium-webdriver 3.x) is currently feature incomplete (when used with marionette) -  There is no way to request the current value or any other property of a Selenium::WebDriver::Element -  In Selenium 2.x requesting the value of an ""attribute"" of a Selenium::WebDriver::Element would give you the property if it existed and was a simple type (and boolean attributes were converted to true/false) otherwise it returned the attribute value.  In Selenium 3 all we have access to on Selenium::WebDriver::Element are attribute values - that makes it unusable with Capybara for any sort of dynamic page.
",twalpole,titusfortner
1744,2016-08-23 05:28:47,"@titusfortner I'm not conflating everything as Selenium, I fully understand the lines between them  and I'm up to date on the spec changes going on in Webdriver.  W3CBridge provides an #element_value method which I don't believe is exposed through Selenium::WebDriver::Element (implemented via the W3C getProperty API which geckodriver supports) but would solve the value issue  - and I believe I saw commits in other parts of selenium (non-ruby)  recently implement shims to emulate the 2.x behavior using the W3C getAttribute and getProperty methods which geckodriver has implemeted.  It would seem to me it's  currently selenium-webdriver that is deficient on that functionality?
",twalpole,titusfortner
1744,2016-08-31 23:52:31,"@titusfortner Is a nightly build of the selenium-webdriver gem generated anywhere that can be downloaded for our automated tests?  I was using it directly from the selenium github repo but since the switch to using the atom for getAttribute that's no longer possible.  I would like to be able to notify remove the disclaimer as soon as our tests pass with it, which will hopefully be soon with the switch to using the atom for getAttribute and FF fixing the select behavior in 49
",twalpole,titusfortner
1744,2016-09-01 03:52:01,"@titusfortner Thanks - I'll give something like that a try - on a side note I'm slightly shocked by the size of the atom produced - 37k over the wire every time the value of an ""attribute"" is requested seems a tad excessive although it does keep it down to one request.
",twalpole,titusfortner
1744,2016-09-01 19:13:04,"@titusfortner Ok - building the current selenium-webdriver and testing with FF 49 gets Capybara down to 13 test failures - mostly sending keys to prompt modals (keySequence.join is not a function), missing mouse move action, sending ""special"" keys (:space & :backspace - ignored, shifted keys - the shift is not released when sent as an array of multiple key combos), and extra key events with code of 0 being generated) that all used to work correctly.  The missing actions are definitely a geckodriver issue and I'm guessing the key issues probably are too.  
",twalpole,titusfortner
1744,2016-09-01 20:22:46,"@titusfortner Actually it appears the shifted keys issue is a selenium-webdriver issue.  [Current versions](https://www.w3.org/TR/webdriver/#element-send-keys) of the webdriver spec appear to have removed the NULL resetting key modifiers that used to be in the  [spec](https://www.w3.org/TR/2015/WD-webdriver-20150803/#sendkeys) .  It would appear selenium-webdriver needs to either stop accepting accepting nested arrays  ( send_keys([:shift, 'a'], ""bcdef"")  used to produce Abcdef ) or split out any such passed arrays and send them to w3c compliant drivers as separate sendKeys calls - https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/common/keys.rb#L114

Of course I think either way of fixing this will break the ability to send something like  [:ctrl, a], :backspace, 'abcd'  to select everything in a field, clear it, and then type new contents,  since calling separately to send_keys will change the selection and reset the insertion caret - so maybe the current webdriver spec is deficient

create selenium issue - https://github.com/SeleniumHQ/selenium/issues/2704
",twalpole,titusfortner
1744,2016-09-01 21:58:35,"@twalpole - 3.0.0.beta3 is now released with the latest updates
Simon suggested he'd follow up on this tomorrow as far as what the w3c spec should do for the send keys.

Speaking of Capybara tests. How do I run a single selenium test, I couldn't find documentation on it? I miss the ability to right click in Rubymine and run a single spec. :)
",titusfortner,twalpole
1744,2016-09-02 00:14:32,"@titusfortner Because of the way most of Capybaras tests are included in the project so the other driver authors can run them against their own drivers the easiest way to run a single test is to tag it and then use the -t flag with rspec



since you probably want to be running against marionette something like below should work


",twalpole,titusfortner
1744,2016-09-02 00:29:32,"@twalpole, Thanks! Yeah the Watir project currently uses a submodule for running watirspecs with different projects. Submodules are kind of a pain, though, so we are considering the option of something similar to what Capybara does. It seems to be substituting one type of pain for another, though. :)
",titusfortner,twalpole
1744,2016-09-04 19:49:18,"@twalpole - fwiw, getAttribute is down to 7KB in beta3.1 :)
",titusfortner,twalpole
1744,2016-09-05 20:59:52,"@titusfortner that's much better :)
",twalpole,titusfortner
1736,2016-08-09 19:51:53,"@danielwestendorf   It's such a simple use case it's way more likely to be a configuration issue on your end than a bug in Capybara.
",twalpole,danielwestendorf
1728,2016-07-30 09:03:02,"@twalpole  Hi!  I updated the doc for the find_field, has_field?, and has_no_field? methods and changed the tests to use some Regexp features.
",donv,twalpole
1728,2016-08-01 20:31:19,"@twalpole Thanks for the tip.  I changed the type identifier separator to comma with a trailing space.
",donv,twalpole
1724,2016-07-22 16:38:59,"@amingilani I notice from your code sample that you are loading all files in spec/support/*_/_.rb but you list your filename as rspec/support/capybara.rb (rspec vs spec) is that just a typo?  Also, are you changing RSpecs new shared_context_metadata_behavior setting?
",twalpole,amingilani
1724,2016-07-22 18:46:01,"@twalpole sorry, that was a typo, fixed, everything is in `spec/`

And YES! I had `config.shared_context_metadata_behavior = :apply_to_host_groups` because the comment above said:



Changing it back fixed it!

I'm closing this issue, but can you please explain what happened? And if this will be a problem with Rspec 4 comes out?
",amingilani,twalpole
1724,2016-07-22 19:28:31,"@amingilani The way Capybara includes the aliases into the tests uses shared contexts which in previous versions of RSpec would automatically get included based on metadata. If  shared_context_metadata_behavior == :trigger_inclusion (default in 3.5) that behavior continues, however if changed to :apply_to_host_groups that behavior changes and the automatic inclusion no longer happens.  The change in behavior makes sense for RSpec since it makes the API more in line with all the other places in the API metadata is used, and I'm working on a fix for it currently which will be included in Capybara 2.8
",twalpole,amingilani
1724,2016-07-22 19:29:35,"@twalpole: Makes sense! Thank you for the explanation!
",amingilani,twalpole
1724,2016-07-22 20:05:09,"@amingilani 09138cdcd74db3b3928d67ffbbc8010f860658f2 is the fix being merged into master, if you want to give it a try
",twalpole,amingilani
1721,2016-07-29 01:03:03,"@mhoran Would you prefer I push a release until the beginning of next week?
",twalpole,mhoran
1721,2016-07-29 18:47:28,"@mhoran  Okay - I'll delay until the beginning of next week - let me know if there are any issues.
",twalpole,mhoran
1721,2016-07-29 20:06:53,"@mhoran I understand Chromium is being investigated for the next development of capybara-webkit but any chance of capybara-webkit doing a release that requires Qt 5.5+ , gets rid of the font override hack, etc -- People using older versions of Qt really seem to be the major source of issues with capybara-webkit.
",twalpole,mhoran
1721,2016-07-30 13:25:06,"@twalpole we had intended to release 2.0 at some point and drop support for Qt 4.8, but had no intentions of requiring a certain Qt 5 version. Unfortunately, I think a number of users are still on Qt 5.2 (Ubuntu trusty). Debian jessie provides 5.3, and to get 5.4, Ubuntu wily is required. 5.5 is only available in Ubuntu xenial, and Debian unstable includes 5.6 (which no longer includes the QtWebKit module).

Then there are the official binary releases from the Qt Project, which we've always recommended to our users. Unfortunately, most folks don't bother using these packages.

Based on the above, I have the feeling a version lock to 5.5 would be more trouble than it's worth.
",mhoran,twalpole
1721,2016-08-01 16:23:33,"@headius I don't think it's a JRuby issue, but rather a Travis-CI issue with JRuby configuration.  @mhoran Yeah I gave up on trying to get the JRuby travis config to work.
",twalpole,mhoran
1721,2016-08-01 16:23:33,"@headius I don't think it's a JRuby issue, but rather a Travis-CI issue with JRuby configuration.  @mhoran Yeah I gave up on trying to get the JRuby travis config to work.
",twalpole,headius
1718,2016-07-03 18:49:27,"@amitz  - Not in any kind of reliable supported manner -  Really bundler/gem should add a feature to not consider gems that specify a ruby version above what you're running, but as of now thats not there.  Same issue occurred with mime-types 3 -- There's nothing Capybara can do about it, and the version is not a dependency of Capybara so it shouldn't be specified as one.  It's a dependency of your projects decision to stay with 1.9.3 (which is really really out of date).
",twalpole,amitz
1718,2016-07-03 20:16:43,"@twalpole - Fair enough. Thanks for detailed answer.
I'll state anyhow that the rack version that support Ruby 1.9.3 and should be forced in the Gemfile is ""**1.6.4**"" -(in-case someone will stumble upon this thread in the future with the same problem).

Thanks.
",amitz,twalpole
1716,2016-06-30 14:56:53,"@jonleighton Great that someone else is looking at this, since we've had some people who think it's causing issues (Issue #1715) but I don't see how it could be (maybe they have order issues with the database_cleaner fater block too).  An important thing to notice is that wait_for_pending_requests is only called after the session has set the page back to about:blank so there really shouldn't be any more requests started after that.
",twalpole,jonleighton
1716,2016-06-30 17:26:04,"@jonleighton Just to point out -- using `append_after` is the recommended standard config - https://github.com/DatabaseCleaner/database_cleaner#rspec-with-capybara-example
",twalpole,jonleighton
1715,2016-06-28 20:06:17,"@jasonfb This is probably a better question for SO. That being said, are you checking the database for a record after creating that record through the UI?
",adsteel,jasonfb
1715,2016-06-28 20:58:00,"@jasonfb There is no way for premature truncation to occur while you're still in a test (unless you've really screwed up your database_cleaner config somehow, or you're doing parallel tests on the same database).  What could happen prior to 2.7.0 is the test could finish and the database gets cleaned while there were still unfinished (and not waited for the visible results of) requests being executed.  Since you are still in the test (waiting for ""1x Blue Night 18 Hour Jersey has just been added to your cart"" to appear) then waiting at the end isn't going to do anything.

If it was left over requests from the previous test, then sleeping 5 at the beginning of the test (rather than the end) that always fails might would potentially make a difference.

This really looks more like it's an issue with the mocking/doubling being done in a feature test (which is usually frowned upon)
",twalpole,jasonfb
1715,2016-06-28 21:01:45,"@jasonfb Also I'm a little shocked that after running a bunch of tests your test would still be referencing a Spree::Variant with 'id'=2, since a few tests in I would expect to see ids higher than 2 - or is that seed data created with fixed ids or something?
",twalpole,jasonfb
1715,2016-06-28 21:10:22,"@jasonfb  Also are there tables you've excluded from being cleaned by database cleaner --  are you sure                                                                         `variant: boxer_briefs_18_hour.variants.first`  is actually returning a variant with a null deleted_at?
",twalpole,jasonfb
1715,2016-06-29 00:20:19,"@twalpole thanks for all that attention, much appreciated. I think the auto-increment isn't reset on the test dbs, thus causing the growing id numbers as you pointed out. Will go through your other points as well one-by-one. Thanks.

It certainly feels like something is funky with the db cleaner setup. as well, I will try to see if I can re-do those mocks and just do proper log-ins. 
",jasonfb,twalpole
1715,2016-06-29 00:35:58,"@jasonfb  Just to clarify -- If a bunch of previous tests had occurred I would expect a number higher than 2 (so its the fact the number is so low that makes me question whats going on)-- Not resetting the auto-increment helps mitigate caching issues since each test ends up accessing resources with unique ids
",twalpole,jasonfb
1715,2016-06-30 21:00:36,"We solved this ---- it was _really_ hard. @twalpole You were right, the problem was in our setup.

Specifically, and importantly (documenting here), capybara-webkit will hold onto a cache of endpoints that are set to cache (makes sense, sort of). That means that even if you `Rails.cache.clear` on the server (which we tried), the headless driver has already cached our endpoint from a previous spec.

On the 2nd (subsequent) spec, the same endpoint is not fetched again by the headless driver, because it believes it already has it in the (headless driver's) web cache. Unfortunately for us, that important endpoint (which is just a giant JSON dump) is actually specific to our data, which was changing from spec to spec. 

So that's why on subsequent run my front-end was sending variant_id(s) to my backend that weren't in the database, because those old veriant IDs had already been deleted by database cleaner. 

So basically if you have endpoints that have cache-control headers on them (like, non-zero cache-control headers) you have to remember that the headless driver (webkit or poltergeist) will cache those responses inside of itself, even if you clear your Rails cache. This is why they pass individually but failed when run as a group. 

For now, we're going to `if Rails.env.test?` the cache control header, so that in test it will respond with 0 minutes (normally it responds with a 3 minute cache). However, is there any way to tell the driver (webkit or poltergeist-- we switch between them) not to hang onto the cache of endpoints it hits from spec-to-spec? That way, I could avoid the ugly `if Rails.env.test?`  in my app.
",jasonfb,twalpole
1715,2016-06-30 21:21:34,"@jasonfb The poltergeist 1.10.0 I released the other day added `driver.clear_memory_cache` which will clear out the cache - you could try calling that in a before block - not sure if capybara-webkit has a similar option or not
",twalpole,jasonfb
1715,2016-06-30 21:31:20,"@reidcooper @jasonfb :mountain_railway:
",jasonfb,jasonfb
1710,2016-06-16 18:44:12,"@juanibiapina good point, I got that error too!  I haven't found a workaround for specifying a profile yet. (In our case, we're using a profile to set a custom user-agent).
",gmcnaughton,juanibiapina
1710,2016-06-16 19:21:17,"@juanibiapina Looking through the selenium and geckodriver code it looks like profile is now supposed to be passed through firefox_profile in the capabilities --- https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/remote/capabilities.rb#L245   and  https://github.com/mozilla/geckodriver/blob/4cbbc79ad487a7b1d8defd66be2923af6febf33e/src/marionette.rs#L331  -- unfortunately the special handling (encoding) for firefox_profile doesn't appear to have made it into the W3CCapabilities class, which I believe needs to be used for capabilities when using marionette - https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/remote/w3c_capabilities.rb#L187  so you may need to encode them yourself
",twalpole,juanibiapina
1710,2016-06-23 18:40:08,"@twalpole Thanks! 👍 
",gmcnaughton,twalpole
1710,2016-07-13 03:00:23,"@mockdeep That really just means they won't fix any issues that only occur with 47 -  It ""works"" with 47, if we define ""works"" as starts up firefox and some things happen, but it's definitely not fully functional with the latest selenium-webdriver on any current version of firefox (47, 48 beta, 49 alpha) at the moment.
",twalpole,mockdeep
1710,2016-07-13 14:45:12,"@twalpole unfortunately it doesn't do much for me. It boots up the browser and doesn't get past the login page. Do we have any sense at what point there will be a stable alternative?
",mockdeep,twalpole
1710,2016-07-13 18:28:09,"@mockdeep That really depends on the selenium-webdriver release schedule.  From looking at the code I assume it will come in selenium-webdriver v3 which I would expect to be released relatively soon after Firefox 48 if that really no longer works with FirefoxDriver.  For now you should just stay with FF 47.0.1 and selenium-webdriver 2.54.3 and not use marionette/geckodriver
",twalpole,mockdeep
1710,2016-07-13 18:36:21,"@twalpole selenium-webdriver 2.54.3 doesn't work for me with FF 47. I get an unable to connect error:


",mockdeep,twalpole
1710,2016-07-13 19:03:01,"@mockdeep Whoops typo -- it's selenium-webdriver 2.53.4 - and FF 47.0.1 .  The .0.1 is very important 47.0.0 doesn't work -- It's what the capybara tests are currently run with and works fine - works locally too.
",twalpole,mockdeep
1710,2016-08-23 01:41:07,"@titusfortner It's independent of the Selenium release cycle if we write a driver directly against geckodriver.  If we continue using Selenium then a lot of it is still dependent on the Selenium release cycle.  My personal view is that releasing Selenium 3 before it has comparable feature support with the Selenium 2.x and FirefoxDriver is just a recipe for tons of bug reports, but thats not my decision to make :)
",twalpole,titusfortner
1710,2016-08-23 04:42:58,"@titusfortner The issue is that while geckodriver can change how its features work, unless Selenium 3 is providing access to them then we are tied to the selenium releases - as per my comment on PR# 1744  -  Providing access to the element value and the element properties would actually make marionette eminently more usable (although the select issues would still be a problem until the next FF release).  Also, I'm not in any way arguing that the move to marionette isn't a good thing - it definitely is - i'm  just stating that it's not yet really usable for most people with Capybara.
",twalpole,titusfortner
1710,2016-10-11 01:04:37,"@titusfortner The only issue I stated I hoped would be fixed before Selenium 3 release is the system prompt modal text - which is defined in the w3c spec to pass the text as a ""value"" parameter - https://w3c.github.io/webdriver/webdriver-spec.html#dfn-send-alert-text .  Appears selenium-webdriver doesn't do that.  The other issues are all dependent on FF feature implementation - hence the ""timeframe unknown""
",twalpole,titusfortner
1710,2016-10-11 21:02:17,"@titusfortner While the mozilla bug is part of the issue, I believe the current issue being seen is that selenium-webdriver passes the text as  a ""text"" parameter - https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/remote/w3c_bridge.rb#L174 - rather than a ""value"" parameter as the spec requires and it appears geckodriver expects.  That then produces a ""Missing 'value' parameter"" error.  Not sure whether changing that key from ""text"" to ""value"" would break the other drivers though.
",twalpole,titusfortner
1710,2016-10-14 17:18:22,"@lucascaton Yep - and if you want to use it with Chrome it should work fine.  If you want to use it with new versions of Firefox (>= 48) then the limitations of no system prompt modals, mouse interaction more than a standard left click, or complex sets of characters including modifier keys being sent to elements still apply and there's nothing Capybara can do about it.  Apparently you should be able to use it with Firefox 45ESR and 47.0.1 by specifying the marionette: false option in the capabilities
",twalpole,lucascaton
1710,2016-11-16 00:58:41,"I figure since the question of porting the old FireFox profile config to Marionette was brought up in this thread it couldn't hurt to follow up on what happened. 

@gmcnaughton did you ever get the profile options working? I am having trouble determining if I am passing through the profile options correctly. The old way of configuring the browser using Capybara was the following:



now with marrionette set as true (as you know) the above code no longer works. So I am trying the following code:



I use a javascript in the page to see if the user agent has changed:

`alert(navigator.userAgent.toLowerCase())`

How did you encode the prefs to work like before with profile?
",dunban1,gmcnaughton
1710,2016-11-16 18:52:15,"@dunban1 Try something like 


",twalpole,dunban1
1710,2016-11-17 18:28:44,"@dunban1 Good question! I haven't had a chance to try again.  Personally we're still blocked by https://github.com/mozilla/geckodriver/issues/93 (support for self-signed certificates), so we're still running our test suite under FF 45.

@twalpole Thanks for the sample code (and all your work on this)!
",gmcnaughton,dunban1
1710,2016-11-17 18:28:44,"@dunban1 Good question! I haven't had a chance to try again.  Personally we're still blocked by https://github.com/mozilla/geckodriver/issues/93 (support for self-signed certificates), so we're still running our test suite under FF 45.

@twalpole Thanks for the sample code (and all your work on this)!
",gmcnaughton,twalpole
1710,2016-11-22 01:21:49,"Thank you for your responses @twalpole and @gmcnaughton 

I get the following error with the code snippet:

when I add this line `Capybara.default_driver = :selenium` at the top. I get the following error instead:

The registration of the driver seems to be failing and it tries to use the fall back default which fails as well without proper configuration?

Perhaps there is another way that I should be looking at instead? For example, I have explored getting this to work is by referencing a pre-made FireFox profile. Is there a way to do this in Capybara with Marrionette?

I have been able to configure FireFox directly using selenium by linking the correct FireFox profile in the following code:



But I have no idea how to register the driver once I configured it directly. I imagine Capybara is designed to instantiate the driver only inside the register_driver. If not is there a way to get this working should passing the firefox_options object ultimately not work? 
",dunban1,gmcnaughton
1710,2016-11-22 01:21:49,"Thank you for your responses @twalpole and @gmcnaughton 

I get the following error with the code snippet:

when I add this line `Capybara.default_driver = :selenium` at the top. I get the following error instead:

The registration of the driver seems to be failing and it tries to use the fall back default which fails as well without proper configuration?

Perhaps there is another way that I should be looking at instead? For example, I have explored getting this to work is by referencing a pre-made FireFox profile. Is there a way to do this in Capybara with Marrionette?

I have been able to configure FireFox directly using selenium by linking the correct FireFox profile in the following code:



But I have no idea how to register the driver once I configured it directly. I imagine Capybara is designed to instantiate the driver only inside the register_driver. If not is there a way to get this working should passing the firefox_options object ultimately not work? 
",dunban1,twalpole
1710,2016-11-22 01:51:05,"@dunban1 This is getting well off topic for the issue at hand.  The README has a number of examples for calling `register_driver`, if those aren't enough please ask your howto questions on the mailing list as requested in the README.",twalpole,dunban1
1710,2016-11-22 22:33:50,"For anyone that finds this thread and was looking for an answer to how to use firefox_options to configure the FireFox profile. The conversation shall be continued here: https://groups.google.com/forum/#!topic/ruby-capybara/AyAcBX9-lIE

@gmcnaughton FYI if you're eventually going to stop using FF47 once Marrionette stabilizes I would imagine you will need this answer as well.",dunban1,gmcnaughton
1710,2017-01-11 07:23:12,"@rafiqdeen ??? Do you have a problem using that?  Yes it will ""work"" but the features mentioned previously will not work (i.e.. no hover, no drag_to, no right_click, no double_click, etc, etc)",twalpole,rafiqdeen
1710,2017-02-03 00:30:23,"@titusfortner how do you install `geckodriver`? 
Here is what I tried in vain:
1. Download Geckodriver from here: https://github.com/mozilla/geckodriver/releases
2. Unzip and run the executable (geckodriver)
3. Run export PATH=$PATH:downloads/geckodriver

I also tried renaming `geckodriver` to `wired` (and updating path accordingly)",jeremylynch,titusfortner
1710,2017-02-03 03:43:54,"Thanks @titusfortner, got it working (thanks to option 3)
It seems very buggy. 


Do you know when chrome will be supported? ",jeremylynch,titusfortner
1710,2017-02-03 04:32:52,"@mrjlynch  You need to specify :chrome for the browser, and install chromedriver.  The only features that currently fail with Capybara and the newest version of selenium-webdriver with the newest version of FF  are

1.  system prompt modals  -  fixed in the master branch of selenium, will be in the next release
2. mouse interaction more than a standard left click - as @titusfortner mentioned it's coming alone
3. complex sets of characters including modifier keys being sent to elements - the spec has been finalized and as soon as geckodriver matches that spec it should be ok.
4. A recently discovered one that only affects Capybara master - equality with elements returned from `evaluate_script` - being worked on currently, would expect it to be fixed in the next selenium-webdriver release",twalpole,titusfortner
1709,2016-06-16 22:51:12,"@QuotableWater7 What other problems did you have -- you should be able to rollback to FF 46, turn off updates and be good to go.  This Issue was put here as an informational item to explain the current issue -- hopefully they release 47.0.1 soon
",twalpole,QuotableWater7
1709,2016-06-16 23:28:40,"@QuotableWater7 It's probably due to window size - so on your machine the default window size is different than on the CI setup and that leads to elements overlapping others (fixed header/footer, etc) - try resizing your window for that test.
",twalpole,QuotableWater7
1709,2016-06-22 23:03:49,"@rafiqdeen It depends on what particular flavor of Linux you're using and which package manager.
",twalpole,rafiqdeen
1709,2016-06-23 04:36:10,"@twalpole I am using ubuntu 14.04 LTS and I tried Synaptic package manager but it shows only 28.0 version.
",rafiqdeen,twalpole
1709,2016-06-23 16:44:03,"@rafiqdeen  http://askubuntu.com/questions/428772/how-to-install-specific-version-of-some-package/428778
",twalpole,rafiqdeen
1705,2016-05-18 18:59:45,"@tibastral it doesn't have to be your code -- it could be middleware installed by some other gem -- the `env` referred to in the method in Capybara is a local variable hash that is passed in so there's no reason for that to output a deprecation notice, which would mean it has to be coming from some code called from the `send` - one last thing to try would be to open your copy of the actionpack gem and break when env is called and look at the stacktrace there -- I guess it's probably the env defined in  `actionpack/lib/action_controller/metal.rb`
",twalpole,tibastral
1702,2016-05-17 01:10:53,"@taw  The fact that this has come up a couple of times in the last 3 years shows how little it actually affects people.  The ""hacky""??? after hook is exactly how it would be implemented in Capybara if it ever was, so I'm not really sure what your issue with that is.  

As stated in the Session#reset documentation - the decision was made not to reset localstorage since Capybara has no way of knowing everything that an app would need to have reset between tests, so the developer has to make that decision.  If that doesn't work for you, you are free to use any other free testing framework you feel like.   If instead you want to make it clearer to others by submitting a PR for the README about session resets that would be considered.
",twalpole,taw
1701,2016-05-17 09:21:59,"@twalpole : 
No, no `within` in this case. I actually tried to use `#app-navigation` as selector for a `within` initially and then realized the error pops up even for a plain `find(:xpath,'//html')`.
I'm not sure how to proceed with minimal reproducible debug. Between submitting the sign-in form and the attempt to access the dashboard page there is a lot of proprietary code at work.
",akseiya,twalpole
1698,2016-05-10 17:36:12,"@jnicklas - Updating the defaults seemed like the easiest way to make sure it was set all the time (unless overridden by the users options) - there really doesn't seem to be another place in the selenium API to do it nicely.
",twalpole,jnicklas
1697,2016-05-09 19:05:34,"I think the root cause of this is that selenium (with firefox at least) is dismissing the unhandled alert itself and no longer raising the error it used to (99% sure it used to).  Dismissing the alert rather than accepting it appears to prevent the location change so everything fails.  @jnicklas  - could you try setting the desired capability ""unexpectedAlertBehaviour"" (note English spelling of behaviour with a u) to ""ignore"" and see if your issue goes away, it fixes things in my tests and may be a preferable default since we are managing the alerts ourselves
",twalpole,jnicklas
1697,2016-05-09 22:22:24,"@jnicklas  Please look at PR #1698 and give your thoughts on that as opposed to this one.
",twalpole,jnicklas
1692,2016-04-28 17:54:56,"@jnicklas I think this may need more analysis -  The way it works currently - Session#reset! calls driver.reset!  which should be synchronous and not return until the browser has moved from the current page to about:blank (or equivalent).  There should be no way for the browser to initiate another request after this (if it is happening then I would think thats a driver bug).   Then wait_for_pending_requests is called to wait for any orphaned requests still being processed by the app to finish.  Once they are done then reset! finishes.   If the new request is coming from a second session that should also be fine because all sessions get reset before the test ends and DatabaseCleaner starts up.  
If this is happening because someone is manually managing sessions and calling DatabaseCleaner after resetting only one session but keeping another session running there is nothing we can do about that, it's user error.
",twalpole,jnicklas
1692,2016-04-28 19:02:43,"@jnicklas Do you happen to be opening multiple windows in the session (and not closing them) where this is happening (as opposed to multiple sessions) ?  I think only the currently active window gets navigated to about: blank on driver#reset! (in selenium) which means you could potentially be getting a request initiated from another window.
",twalpole,jnicklas
1692,2016-04-29 17:46:11,"@jnicklas Found it - each session creates it's own instance of Server, but doesn't actually start it up when it's sharing between sessions, this means it actually ends up looking at the wrong request counter when trying to close the second session.  I thought I had made sure this case was taken care of, but I guess not.  A potential solution would be to just reset sessions in the reverse order they were created but they're currently stored in a hash so we don't have that info.  A short term fix for your use case would be to specify `Capybara.reuse_server = false`  which would fix the issue, but use a bit more memory.
",twalpole,jnicklas
1692,2016-04-29 18:25:27,"@jnicklas Please try PR #1693 and see if it fixes the issue on your real app (without Capybara.reuse_server = false).  If so it'll be a good enough fix for 2.7 and for 2.8 I think I'll look at making it so there is an instance of Counter per app instance and the sessions access the correct one.
",twalpole,jnicklas
1688,2016-04-26 19:37:48,"@twalpole thanks for the response.  To save me trawling through the changes in 2.7, any chance you can suggest what needs to change to be compatible then?
",mattheworiordan,twalpole
1688,2016-04-26 19:57:54,"@mattheworiordan The first thing save_page and save_screenshot do is call [prepare_path](https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L729) passing in the filename/path passed to them and the default extension types (html/png).  If Capybara.save_path is defined Capybara should handle relative filenames correctly and you should be able to just pass a relative filename/path and it should save in the right place (or use Capybara.save_path to build an absolute path), if save_path is not defined and the previous Capybara.save_and_open_page_path is non nil you need to do what you were previously doing.
",twalpole,mattheworiordan
1678,2016-04-06 20:34:40,"@chadoh add a tag to the test you want to run separately 



then you can do



to run just that test - remove the tag before committing
",twalpole,chadoh
1678,2016-04-06 21:28:11,"@chadoh - Here is the link to the HTML spec about the contenteditable attribute - https://w3c.github.io/html/editing.html - Not specifying any value leads to ""the inherit state, which is the missing value default (and the invalid value default).""  - so it is not the same as contenteditable=""true"" and the element should only be editable if it has an editable parent - I think this PR is probably invalid
",twalpole,chadoh
1678,2016-04-07 02:12:25,"Ah, good catch @twalpole! Thanks!
",chadoh,twalpole
1674,2016-04-05 09:17:54,"@twalpole thanks for heads up, agree on middleware wanna see it in action.
",route,twalpole
1672,2016-04-04 22:39:01,"@jnicklas you're welcome -- I tried it with capybara-webkit and poltergeist and the removal of the assert_no_selector in Session#reset! didn't appear to affect them, so hopefully it doesn't --- I'm sure we'll hear if it does :)
",twalpole,jnicklas
1670,2016-03-30 21:56:59,"@jnicklas Does the change in the selenium_driver_reset_synchronous branch fix your issue?
",twalpole,jnicklas
1670,2016-03-31 16:18:54,"@twalpole I believe that poltergeist works properly on this
",route,twalpole
1670,2016-12-23 22:13:24,"@mhoran Thanks for mentioning capybara-webkit is moving to use CEF. Just to report that we did run into the async session reset issue with capybara-webkit (sometimes session wasn't reset in time and leaked into the following spec). Adding back the single `assert_no_selector` line in capybara seems to solved it.

I am not sure if it's worth digging into the root cause at this point, but wonder if you have any insights. Thanks!",starsirius,mhoran
1670,2016-12-23 22:22:40,"@starsirius Do you happen to be using database_cleaner, and are triggering clean with an `after` block, rather than an 'append_after' block as database_cleaner recommends? - https://github.com/DatabaseCleaner/database_cleaner#rspec-with-capybara-example",twalpole,starsirius
1670,2016-12-23 23:30:33,"@twalpole No. My app doesn't have a database so we don't use database_cleaner.

By the way, the temporary fix in my own [fork](https://github.com/starsirius/capybara/commit/c056ddb7979804d5ef4fdf31eca2621a9889886d) (capybara 2.7.1, because of capybara-webkit, + that single `assert_no_selector` line) seems to fix the issue. :(",starsirius,twalpole
1667,2016-03-19 19:28:21,"@sodabrew  As @jnicklas pointed out, this would be a breaking change - so I'm not going to merge it.  I did however cherry pick the second commit which makes find_available_port check for a port on the correct interface.  For your team to maintain the same behavior it should just be a matter of you setting `Capybara.server_host = 'localhost'` now
",twalpole,jnicklas
1667,2016-03-19 19:28:21,"@sodabrew  As @jnicklas pointed out, this would be a breaking change - so I'm not going to merge it.  I did however cherry pick the second commit which makes find_available_port check for a port on the correct interface.  For your team to maintain the same behavior it should just be a matter of you setting `Capybara.server_host = 'localhost'` now
",twalpole,sodabrew
1665,2016-03-17 00:21:33,"@Tmee jnicklas doesn't really work on Capybara anymore - I'm the person doing most development nowadays.  My concern is whether `#last` justifies expanding the API .  Often while testing one wants to access the first element (or at least an element if any matches exist), I'm not sure how often last would be used, and it's already easy enough to just do `all(...).last`
",twalpole,Tmee
1661,2016-04-13 17:35:28,"@kofronpi - so if you had an app dealing with rodents that happened to have a Capybara model in it, you would require Capybara to change its class/module names so you can use it to test? 
",twalpole,kofronpi
1660,2016-02-27 22:34:08,"@twalpole, thanks for the feedback (and the tip about `[ci skip]`). I've updated the PR based on your feedback.

One thing I wasn't entirely sure about was what the default value for `multiple` is. From what I understand about [how the Selector is loaded](https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb#L283), it appears to be `true`, but let me know if I've got this wrong.
",alextaylor000,twalpole
1660,2016-02-28 18:11:22,"@alextaylor000 From https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb#L287 you can see the `multiple` option doesn't have a default, so it's ignored unless passed in.  A `default` option would be passed in if there was a default value (like the `disabled` filter above) --  `boolean: true` is just a syntactic sugar instead of passing `valid_values: [true,false]` to the filter 
",twalpole,alextaylor000
1659,2016-02-26 01:36:57,"Great, thanks @twalpole! PR is cookin'.
",alextaylor000,twalpole
1652,2016-02-08 22:27:30,"Yeah -- it's unfortunate naming since Capybara.app_host (as shown in the readme) really is more of a base_url than a hostname -- change it to what @abotalov has specified and the issue should go away - If not we can reopen this
",twalpole,abotalov
1645,2016-01-28 15:32:25,"@chalmagean You'll have more luck with questions on either the mailing list or stackoverflow.
",adsteel,chalmagean
1644,2016-01-27 23:32:15,":speech_balloon: @rezadehganpour 

> I just had a same issue, I resolved it by requiring addressable/uri in /lib/capybara/queries/current_path_query.rb:1
> 
> this is because the addressable is not a file

It _is_ a file in addressable 2.4.0. The issue is that Capybara 2.6.1 created a dependency on addressable 2.4.0 but its gemspec allows any version of addressable (including 2.3.8, which I had, which brought me to this issue :) ).

Changing the `require`  statement in current_path_query.rb, like you did, seems a better solution than constraining the version of addressable in the Capybara gemspec.

Thanks for reporting this @hb9358, and for starting to work on a fix, @twalpole!
",mjgiarlo,twalpole
1644,2016-01-27 23:32:15,":speech_balloon: @rezadehganpour 

> I just had a same issue, I resolved it by requiring addressable/uri in /lib/capybara/queries/current_path_query.rb:1
> 
> this is because the addressable is not a file

It _is_ a file in addressable 2.4.0. The issue is that Capybara 2.6.1 created a dependency on addressable 2.4.0 but its gemspec allows any version of addressable (including 2.3.8, which I had, which brought me to this issue :) ).

Changing the `require`  statement in current_path_query.rb, like you did, seems a better solution than constraining the version of addressable in the Capybara gemspec.

Thanks for reporting this @hb9358, and for starting to work on a fix, @twalpole!
",mjgiarlo,rezadehganpour
1644,2016-01-27 23:32:15,":speech_balloon: @rezadehganpour 

> I just had a same issue, I resolved it by requiring addressable/uri in /lib/capybara/queries/current_path_query.rb:1
> 
> this is because the addressable is not a file

It _is_ a file in addressable 2.4.0. The issue is that Capybara 2.6.1 created a dependency on addressable 2.4.0 but its gemspec allows any version of addressable (including 2.3.8, which I had, which brought me to this issue :) ).

Changing the `require`  statement in current_path_query.rb, like you did, seems a better solution than constraining the version of addressable in the Capybara gemspec.

Thanks for reporting this @hb9358, and for starting to work on a fix, @twalpole!
",mjgiarlo,hb9358
1644,2016-01-27 23:51:20,":clap: @twalpole 
",mjgiarlo,twalpole
1644,2016-01-28 04:39:48,"2.6.2 fixed the issue for me, thanks @twalpole and @hb9358 for reporting.
",chrismitchell,hb9358
1644,2016-01-28 04:39:48,"2.6.2 fixed the issue for me, thanks @twalpole and @hb9358 for reporting.
",chrismitchell,twalpole
1642,2016-01-22 17:49:24,"@syndbg The reason Capybara doesn't already have a have_status_code matcher is because it doesn't really make a lot of sense to check in feature tests (rather in controller tests where capybara isn't used).  

There are two reasons for this:
1. Capybara attempts to emulate a user as much as possible and users don't really see response codes.
2. Browsers automatically follow redirects, etc - so you can't really check for a large portion of the codes you'd want to be testing for.

Instead, in feature tests you should be testing for content that appears on pages, which indirectly is testing the status codes, i.e. if the correct content appears you know the response was a 2xx 

To answer your question though, driver feature specific tests are handled through :requires metadata on the tests as seen at https://github.com/jnicklas/capybara/blob/2.6_stable/lib/capybara/spec/session/response_code.rb#L2

On a separate note, the matchers in Capybara generally employ a waiting behavior and provide support for RSpec as well as minitest, etc.  A good example of how something like this would be implemented is the have_title (or have_current_path) matcher, so if you have other matcher contributions you'd like to make in the future please follow those as examples, and probably ask on the mailing list mentioned in the README whether they would be considered before putting in the work.

Thanks
",twalpole,syndbg
1641,2016-01-22 19:46:33,"@abotalov In that case I think one should just call visit('#/line/1')  then so it's clear in the test you're setting the target - otherwise calling visit('line/1') is going to be pretty confusing to most people
",twalpole,abotalov
1637,2016-08-02 23:12:30,"@twalpole I am not sure if I understand what `Capybara.reuse_server` is doing. I'm using RSpec and configured Capybara to use Unicorn as a server (what I use in prod). I would expect that with `reuse_server = false` and `Capybara.reset_sessions!` after each spec, a new Unicorn server would be started for each spec. Am I misunderstanding how this is supposed to work?
",jgonera,twalpole
1637,2016-08-03 02:35:40,"@jgonera Capybara.reuse_server determines whether a new app server is run for each session or whether one is shared between multiple sessions.  There is no setting in Capybara that would automatically shut down and start a new server for each spec - it could make testing painfully slow for no real benefit
",twalpole,jgonera
1637,2016-08-03 15:41:43,"@twalpole Thank you for a fast reply. What do you mean by ""app server?"" I thought that Unicorn was the app server in my case.

Anyway, I do realize that it would make everything slower but I have a legitimate reason for that. If I stub out calls that my app does to third-party services, the stubs will not be ""unstubbed"" after each example if I'm running Unicorn. The reason for that, I think, is that Unicorn forks a separate process when it's started and after that RSpec/Capybara have no access to that process.

I configure Capybara to use Unicorn like this:



Let's say I have a spec file like this (just to illustrate, not a real spec):



Assuming that I run those examples in the order they are written, the second one will fail. What I think is happening is this:
- The first example is run and `SomeServiceObject.some_api_call` is stubbed.
- We use `visit` for the first time so Capybara spins up a server. Unicorn forks a worker process.
- Example finishes, RSpec removes the stub but only in the process itself and Unicorn master are running in. Unicorn worker process is untouched.
- The second example is run, but the Unicorn worker still has `SomeServiceObject.some_api_call` stubbed out so it fails.

Restarting the server is one solution that comes to my mind, but if there is anything else I can do to ""unstub"" in Unicorn worker, then I'll happily try that out.
",jgonera,twalpole
1634,2016-01-17 23:52:31,"@jferris @mhoran @jonleighton @route - 2.6.0 is released
",twalpole,route
1634,2016-01-17 23:52:31,"@jferris @mhoran @jonleighton @route - 2.6.0 is released
",twalpole,mhoran
1629,2015-12-23 08:25:20,"@twalpole I have those two in my gemfile



Here (https://github.com/plataformatec/devise/issues/3870) was the cause of this problem
",bbnnt,twalpole
1627,2015-12-21 07:22:56,"@twalpole I didn't set any specific driver so I guess I'm using `:rack_test`.
",andersennl,twalpole
1624,2015-12-17 09:55:38,"@twalpole I have merged these tasks and refactored focus tag specs
",Bartuz,twalpole
1624,2015-12-20 20:39:19,"@twalpole thanks you assistance and patience! :)
",Bartuz,twalpole
1615,2016-04-22 19:51:34,"@gtbono If your problem is your project not installing then in your projects Gemfile specify `gem 'mime-types', '< 3.0'` , if your problem is building capybara-webkit then thats a different project and you would need to ask over on it.
",twalpole,gtbono
1606,2015-11-18 07:10:17,"@twalpole Thank you for your answer - you can download Windows10 virtual machine from https://dev.windows.com/en-us/microsoft-edge/tools/vms/mac/ :)
",haonoy,twalpole
1605,2015-11-20 14:35:45,"Hi @twalpole, I'm using the Poltergeist driver actually. I'm still confused about how to get this working, since the redirect does not get performed even if I add a line after `sign_out`:



I've posted this on the mailing list [here](https://groups.google.com/forum/#!topic/ruby-capybara/y_Eay2zTvfc).
",githorse,twalpole
1604,2015-11-13 21:11:09,"That could explain it ; I'll see wether the string was part of the error.

Though, and I don't mean to criticize just for the sake of it, I'd be less surprising if Capybara was to fail the scenario automatically when it receives a 500 error (with of course some way to disable that behaviour on the off-chance someone actually needs to check that a 500 error is raised through a scenario?). As a project maintainer, I'd be interested in tests failing when the app crashes through a scenario ^^

P.S. thanks for your help @twalpole ^^
",Bastes,twalpole
1604,2015-11-13 21:16:28,"@twalpole Diagnosis confirmed ^^d I'll patch my own spec to check wether a 500 error happened, but in case you have an idea on how to implement a safeguard to raise an error automatically in a scenario when a 500 error is raised, I'd be glad to contribute and try to implement it.
",Bastes,twalpole
1604,2015-11-13 21:20:36,"@Bastes If the app actually raised an error then Capybara will raise the error and fail the test (assuming Capybara.raise_server_errors is true (default) ), however in your case the app isn't actually raising an error, its returning a valid webpage - just happens to be a webpage about an internal error the app caught.
",twalpole,Bastes
1604,2015-11-13 21:23:25,"@Bastes Also you could probably turn off whatever is producing detailed error pages in test mode - you wouldn't want that info displayed in production mode, so by default have it off in test mode too.  (If in rails check that better-errors isn't loaded in the test environment for instance - not sure what other settings might need to be checked).  Then the source code won't be displayed in the error page, and your test will correctly fail/pass
",twalpole,Bastes
1604,2015-11-13 21:27:55,"@twalpole Ah, there's the culprit then. Thanks a lot for your help, better_errors was indeed loaded in dev and test mode, and disabling it raises the errors in the scenario as it should.

Cheers, and sorry for the noise ^^°
",Bastes,twalpole
1594,2015-10-30 16:26:10,"Updated, appears to be working now. Thanks @twalpole ! I'll be sure to give you a twitter shout out :)
",illegalnumbers,twalpole
1583,2015-10-24 14:25:15,"Just got a response from rails issue about this and looks to be a straightforward addition to allow this cleanup to be added if it's worth it: https://github.com/rails/rails/issues/22050#issuecomment-150812209

Any more thoughts @twalpole or is it still not worth adding?
",amnesia7,twalpole
1578,2015-10-13 08:20:19,":+1: Thank you @tjgrathwell this bug has been here for months.

I decided to search and found your PR because I wanted to put my [WIP Rails Authenticator](https://travis-ci.org/hello-gem/hello) back testing with rails:master Now my specs work again :heart:  https://travis-ci.org/hello-gem/hello/builds/85068627

I had also tried your first approach, @twalpole I can validate that it does not work because it brings instances of internal classes, maybe a cleaner solution will show up in the recent future, but right now placing direct code in there seems like the easiest choice. :cry: 

@tjgrathwell thanks again! :+1: 
",thejamespinto,tjgrathwell
1578,2015-10-13 08:20:19,":+1: Thank you @tjgrathwell this bug has been here for months.

I decided to search and found your PR because I wanted to put my [WIP Rails Authenticator](https://travis-ci.org/hello-gem/hello) back testing with rails:master Now my specs work again :heart:  https://travis-ci.org/hello-gem/hello/builds/85068627

I had also tried your first approach, @twalpole I can validate that it does not work because it brings instances of internal classes, maybe a cleaner solution will show up in the recent future, but right now placing direct code in there seems like the easiest choice. :cry: 

@tjgrathwell thanks again! :+1: 
",thejamespinto,twalpole
1575,2015-09-19 18:46:07,"@jillianrosile Thanks for this -- great idea on the :skip_if option.  I made one change so the skip_if value doesn't need to be specified in the valid_values - merged in to master
",twalpole,jillianrosile
1566,2015-08-25 23:06:01,"@mhoran I'm pretty much ready to do a 2.5 release, would it be of any benefit to do an rc1 release first?
",twalpole,mhoran
1566,2015-08-26 21:04:02,"Thank you @twalpole for information, I'll try to run tests and release new version soon!
",route,twalpole
1562,2015-08-14 14:01:00,"thanks @twalpole -- I didn't realize Array() would do that. That works.
",githorse,twalpole
1548,2015-07-16 20:54:54,"@twalpole yes, the elements are customized, so there is a big chance that they are hidden. I need to take a look later. 

Thank you for the idea. So is there a workaround? Click on the visible label still should change the value of a checkbox, why don't we support it?
",killthekitten,twalpole
1548,2015-07-16 21:10:12,"@twalpole labels are visible.
",killthekitten,twalpole
1548,2015-07-16 21:13:50,"@twalpole but who cares does he can interact or not? I mean it's a default way of interaction with these elements, via labels.
",killthekitten,twalpole
1548,2015-07-16 21:15:58,"@twalpole and the fact this behavior is not documented or mentioned in the exception message (stop me if I'm wrong) makes debugging very complicated. 
",killthekitten,twalpole
1545,2015-09-10 18:43:39,"@twalpole thanks for the update. Is there anything I could do to help move this forward?
",jhawthorn,twalpole
1545,2015-09-11 16:53:13,"@jhawthorn ok -- I've added a few comments to the current code, but there is a larger concern.  I believe this suffers from the same problem as Issue #1540 .  Namely that the methods on session don't really do what one would think when multiple sessions using the same app are created.  This may or may not be of concern (I haven't really decided if it's actually a real problem or just an issue that occurs in artificial conditions).  I think it would actually be more of an issue for this situation than the #1540 though.  I don't think we want to be duplicating the app object for each session, but a quick thought at a fix would be to have each session create a new server thread with it's own middleware instance on it's own port but share the app object, which would allow tracking requests on a per session basis.  That could lead to threading problems though and probably requires more thought
",twalpole,jhawthorn
1545,2016-01-12 03:42:17,"@twalpole sorry for the delay.

I've addressed your feedback and rebased against the latest master.

As far as I can tell this works fine with the changes in the `per_session_server` branch (different servers would count their requests separately). The code is very similar to that which handles errors, so I would expect them to behave largely the same.
",jhawthorn,twalpole
1532,2015-06-05 19:40:16,"@Vanuan What driver are you using?  If you're saying that calling select_option actually selects the option rather than just ignoring the operation then that would be a problem with the driver.
",twalpole,Vanuan
1532,2015-06-05 22:01:06,"@Vanuan but is it actually selecting the option, or just ignoring the select --- I would hope it's just ignoring the select.  Capybara will not be throwing an exception for this behavior currently (just issuing a warning - which will also issue for poltergeist), so I would hope poltergeist doesn't throw since that would mean different drivers with different behaviors.   If you want your test to fail when trying to select a disabled element then you will need to assert that the value was or was not actually selected.
",twalpole,Vanuan
1528,2016-04-13 17:33:31,"@koenpunt As of 2.7.0 Capybara no longer uses the XPath::HTML methods so your method won't work.  You'd need to modify (or replace) the :link and :button selectors  (Capybara.modify_selector/add_selector)
",twalpole,koenpunt
1528,2016-04-13 17:39:23,"@koenpunt Because they didn't allow the flexibility to make the locators optional
, and jnicklas is probably going to be removing XPath::HTML from the xpath gem
",twalpole,koenpunt
1526,2015-06-03 22:23:26,"@bilus looks like `RSpec::Matchers` works differently when using in `minitest` and `rspec`. There is no issue with RSpec+Capybara and `within` matcher. In RSpec it's `be_within` and it works fine without affecting Capybara `within`.

You can switch to `RSpec` instead of `minitest`. Here is your example pass without collision:


",cris,bilus
1526,2015-06-04 17:57:49,"@bilus 

For this simple app, to make test pass, you need only to swap `include`s:



In this way `Capybara::DSL` overwrites `within` from `RSpec::Matchers` and test pass. I don't know, how you setup your Cucumber configuration. But try to change the way you `include` module or `require` library. So RSpec should go before Capybara.
",cris,bilus
1526,2015-06-04 18:03:35,"@bilus 
Also, as an option, you can remove `within` method: `RSpec::Matchers.send :remove_method, :within` before including `RSpec::Matchers`:


",cris,bilus
1526,2015-06-05 09:26:55,"Thanks! I think the easiest way might be to just use `page.within` consistently in all tests. That's what I've actually done in the original
project.

On Thu, Jun 4, 2015 at 8:03 PM, Sergii Boiko notifications@github.com
wrote:

> @bilus https://github.com/bilus
> Also, as an option, you can remove within method: RSpec::Matchers.send
> :remove_method, :within before including RSpec::Matchers:
> 
> Capybara.app = Sinatra::Application
> RSpec::Matchers.send :remove_method, :within
> 
> class TestApp < MiniTest::Unit::TestCase
>   include Capybara::DSL
>   include RSpec::Matchers
> 
>   def test_title_exists
>     visit '/'
>     within('#main-form') do
>       fill_in 'email', with: 'user@example.com'
>       fill_in 'name', with: 'Joe Public'
>       click_button 'submit'
>     end
>     assert has_content?('Congratulations')
>   end
> end
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/jnicklas/capybara/issues/1526#issuecomment-108993566.
",bilus,bilus
1526,2016-02-05 00:32:52,"@bjornlinder RSpec and Capybara make sense to be included into the same scope - but why would geokit-rails include a #within method into test cases ? It would seem it should only be included into the models that are declared acts_as_mappable. (or why are you including Capybara::DSL into models, if thats what you're doing)
",twalpole,bjornlinder
1526,2016-02-05 18:58:10,"@bjornlinder The geokit-rails gem only includes the #within method into ActiveRecord::Base derived classes correct? And Capybaras DSL methods should only be included into whatever feature/integration test class is being used (definitely not into ActiveRecord::Base derived classes - so it shouldn't be available in any models), and issues a warning if you include it in the global scope - so I'm not fully understanding how there would ever be a conflict.
",twalpole,bjornlinder
1523,2015-05-26 11:27:41,"@twalpole :+1:  ..
",sithara,twalpole
1522,2016-01-27 17:41:24,"@RezaRahmati Nope -- I'm guessing it has to do with the window manager being used.  Also on some systems there is a delay between changing the window size and it actually changing, so if you're getting a screenshot immediately after changing the size you may wait to add a slightly delay.
",twalpole,RezaRahmati
1518,2015-05-21 01:44:26,"@twalpole either of your suggestions is ok. If the file's not present then the test should surely fail anyway, my personal preference would be to eliminate the existence check. Do you need another PR?
Thank you for taking the time to respond, and thanks for your work on Capybara.
",lazylester,twalpole
1518,2015-05-23 18:26:05,"@twalpole thanks for your response...

""if that does actually work"" you say. I'd be happy to verify it if you can point me to the selenium-webdriver docs that describe it. After reading your suggestion, I reviewed the docs and haven't seen anything like that described. Nor do I see any API that suggests that this is possible.

All we really have is the Capybara attach_file interface. The same test should be executable whether interacting with a browser on the local machine or a remote machine. It seems pretty weird to have some kind of conditional inside the test that invokes some driver API calls if the target is remote. Isn't that what your'e suggesting?
",lazylester,twalpole
1513,2015-04-27 21:55:32,"@YSavir Other than the few line comments I made, its looking good -- please also update the has_link and click_link documentation to show they can take a regex for :href
",twalpole,YSavir
1509,2015-04-23 20:57:15,"@abotalov - Correct, if they are included the other way then Capybaras #all isn't hidden. Are you saying we shouldn't do it because of that? I don't think we want to deprecate #all currently, and I see no issue with having #all and #find_all accessible.
",twalpole,abotalov
1507,2015-04-23 17:52:46,"@twalpole before #1506 that example was unsafe, as it wouldn't wait (it still is unsafe by default), right?

Would it be doable to recommend using `page.has_no_selector` for this scenario?
",RSO,twalpole
1507,2015-04-23 18:35:37,"@RSO Waiting doesn't make anything safe or unsafe, it just determines the time period during which an elements is looked for on the page.  If I know the page is not dynamic in any way and just need different behavior depending on whether or not a certain item is on that page then the above is a perfectly valid (and ""safe"") way to make that determination without having to do two finds on the page.  Using has_selector? or has_no_selector? followed by another find to get the actual element just results in a slower test.
",twalpole,RSO
1504,2015-04-16 21:53:33,"@abotalov -  as you can see from the PR - I've implemented something for actions too, but finders gets more complicated due to the variable args functions -- maybe a hack using caller is a cleaner solution.  I'm going to think about it for a bit
",twalpole,abotalov
1481,2015-03-17 19:04:03,"@philipfong In that statement a matcher is `==`. This matcher is provided by RSpec, not Capybara, and doesn't wait.

To wait you can use:
- a matcher provided by Capybara:


- `become_*` matchers provided by [waiting_rspec_matchers](https://github.com/abotalov/waiting_rspec_matchers) gem:


",abotalov,philipfong
1481,2015-03-17 19:20:51,"@philipfong  Also note that as I stated above regarding capybaras finders - ""For #all to wait one of the count options would need to be passed""  - so you could also do 



Obviously that doesn't read all that well, and the first example provided by @abotalov is probably the cleanest reading way to do what you are doing - with 'should' syntax it would be 


",twalpole,philipfong
1481,2015-03-17 19:20:51,"@philipfong  Also note that as I stated above regarding capybaras finders - ""For #all to wait one of the count options would need to be passed""  - so you could also do 



Obviously that doesn't read all that well, and the first example provided by @abotalov is probably the cleanest reading way to do what you are doing - with 'should' syntax it would be 


",twalpole,abotalov
1481,2015-03-17 19:34:59,"I just tried out the capybara finder with the count option and it works beautifully!  I did not know that option was supported.  Thank you, @twalpole @abotalov 
",philipfong,abotalov
1481,2015-03-17 19:34:59,"I just tried out the capybara finder with the count option and it works beautifully!  I did not know that option was supported.  Thank you, @twalpole @abotalov 
",philipfong,twalpole
1481,2015-03-17 19:44:20,"@philipfong http://www.rubydoc.info/github/jnicklas/capybara/Capybara/Node/Finders#all-instance_method   -- you can also specify minimum, maximum, between
",twalpole,philipfong
1481,2015-04-10 21:05:03,"@mcmire You missed the fact that the ExpectationNotMet error is derived from ElementNotFound, so it will actually trigger a retry.   Using any of the count type options (count, minimum, maximum, between) will cause #all to wait up to the passed in wait time (or default_wait_time) for a set of elements that fulfill the requirements. If none of the count type options are used then any set of elements is an acceptable response (including none) so it will return immediately with the current set of elements (which may be empty) matching the query. 
",twalpole,mcmire
1481,2015-04-10 22:05:55,"@twalpole Ahh... nice, well, I stand corrected. That's very cool.

So yeah... the docs should definitely be updated in this case.
",mcmire,twalpole
1481,2015-08-25 20:48:29,"Well done @twalpole thank you!
",bbuchalter,twalpole
1472,2015-01-26 18:28:33,"@mhoran - The list of symbols is what selenium understands
:left_shift, :left_alt, :left_control are just aliases for :shift, :alt, :passport_control: 
:arrow_up, :arrow_down, :arrow_right, :arrow_left  are aliases for :up, :down, :right, :left.  
:command is an alias for :meta.  
:decimal is the numeric keypad .  
:add, :divide, :subtract, :multiply are the numeric keypad instances of +, /, -, *

:separator is the numeric keypad ""seperator"" key (different from the :decimal key) - the keycode is 108 and I'm guessing its a key returned by non-english keyboards although I can't find info that specifically states that.

:null - appears to be used in lower level key routines in selenium to trigger release of all modifier keys.  It is probably not needed for this so I'm removing it from the list 
",twalpole,mhoran
1472,2015-01-28 18:05:26,"@jferris I have removed the arrow_x and left_x aliases from the list of required supported key symbols - For future info DOM Level 3 does support identifying left vs right instances of shift, alt, control via the location attribute of a KeyboardEvent however not all browsers support it at the moment https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent.location and selenium doesn't currently provide a way to set it, so we may have to revisit left_shift, right_shift, etc in the future
",twalpole,jferris
1467,2016-10-07 01:43:10,"@synth capybara-puma is now deprecated because you can just do `Capybara.server = :puma` with recent versions of Capybara.  To switch to thin you'd need to use Capybara.register_server to setup thin, and then after that specify `Capybara.server = :thin`  - see https://github.com/jnicklas/capybara/blob/master/lib/capybara.rb#L481 for how puma is registered as an example
",twalpole,synth
1464,2015-01-15 21:54:21,"Please disregard the issue written earlier. Thanks, @twalpole .
",scalixte-mdsol,twalpole
1463,2015-01-26 23:00:40,"@abotalov  for # 2 in my list of what I think you're looking for - please take a look at the filter_set branch I just pushed - I think something along those lines would provide the functionality you're looking for without requiring deprecation of a bunch of things, although its just a first stab at it and I may need to spend a bit more time thinking things through
",twalpole,abotalov
1463,2015-03-22 10:04:13,"I haven't responded previously as I got some concerns whether this feature has a value at all.

I don't see much value in using `:type` without any wrapper. It's just some additional code and I would like to use it via some sugar placed on top of it (the sugar might be not a part of Capybara, though).

Consider this example (with sugar):



The fact that `field` and `have_field` take inconsistent parameters doesn't look consistent, unfortunately.

@twalpole Do you have any thoughts about it?
",abotalov,twalpole
1463,2015-04-07 20:50:20,"@onebree Please ask how do I do things type questions on the mailing list as requested in the README -  or read the docs and look for has_select? with the :selected option
",twalpole,onebree
1463,2015-04-07 21:19:38,"@twalpole thank you, that helps. I thought the item was a field.
",onebree,twalpole
1460,2014-12-27 11:16:12,"@abotalov Sounds good, but I am using MiniTest.  Is it usable with MiniTest?
",donv,abotalov
1460,2014-12-27 12:06:42,"@donv No. Maybe you can write similar extension yourself.
",abotalov,donv
1459,2015-01-14 19:33:42,"@jferris Would you see this being handled in each driver, or having the drivers provide the mapping and #send_keys in their node classes - and capybara doing the translation in Capybara::Node::Element#send_keys ?
",twalpole,jferris
1459,2015-01-14 20:41:39,"Some my opinions:
1. `Capybara::Node::Element#send_keys` shouldn't map keys (like `:down`, `:shift`, etc.). Mapping should happen at driver side.
2. Constants like `Capybara::KEY::SHIFT` won't be useful for users. Symbols are better.
3. It makes sense to standardize to Selenium keys (http://www.rubydoc.info/gems/selenium-webdriver/Selenium/WebDriver/Keys) as they are documented in [draft spec](https://w3c.github.io/webdriver/webdriver-spec.html#widl-WebElement-sendKeys-void-DOMString-value).

@jferris Could you clarify what do you mean by `The strategy for sending one or more key codes to a driver`? Do you mean sending keys with pressed another key or something else?
",abotalov,jferris
1454,2014-12-21 23:43:03,"@twalpole what is the correct way to loose focus?
",ioquatix,twalpole
1453,2014-12-09 23:39:45,"As @abotalov points out - the error message is incorrect, however the error is correct -- visible is not a valid option key for has_text ---   Whether or not to only look at visible text can be changed through the type parameter as shown in the docs -   http://www.rubydoc.info/github/jnicklas/capybara/Capybara/Node/Matchers#has_text%3F-instance_method
",twalpole,abotalov
1453,2014-12-11 18:07:11,"@abotalov, Based on the code you linked, I do not understand why it is not a valid key:
https://github.com/jnicklas/capybara/blob/2.4.1/lib/capybara/query.rb#L7

However, this error message needs to be fixed at the least. How hard would it be to accept the :visible keyword and convert that to the :visible type though? I do not see a reason why this API would behave different from all other find methods.
",rbu,abotalov
1453,2016-11-21 17:49:26,"@dwt The `visible` option everywhere else has 5 valid values - 
true/:visible, false/:all, and :hidden -  The :hidden value cannot be implemented for has_text? so it uses a different API -- Any recent version of Capybara should raise an error if you try to use a `visible` option so I'm not really sure how you could get bitten by this again.  This may be changing when v3 releases but as of now it's the way it is.  Additionally checking that text is on a page but non-visible  is a bad code smell in test since it's testing for the presence of something a user could never see or interact with.",twalpole,dwt
1447,2014-12-07 18:43:37,"Thanks @aaronjensen!

I tried this out.  It seems to work on most of our specs, but on some, I hit this error:



Did you also run into the same issue?  When you said that you had to fix some tests, was this the issue that you saw?
",shedd,aaronjensen
1447,2015-01-06 21:46:45,"@aaronjensen that worked for me too--thanks!
",turboladen,aaronjensen
1446,2015-11-10 23:06:21,"@williscool If you have questions ask them on the mailing list as requested in the README
",twalpole,williscool
1443,2014-11-21 21:37:12,"Thank you @twalpole.  It seems I was down a path with an older minor version locked `database_cleaner`.  I omitted some of my configuration going to a simpler version and it worked just fine.  Specifically, I was using:



Going back to simpler truncation with :except worked just fine.
",rosskevin,twalpole
1442,2015-08-16 21:15:20,"@dhulihan I'm a baby Capybara and it confused me D:
",michaelmagistro,dhulihan
1442,2015-08-21 21:10:58,"@dhulihan Same here. That is confusing. May be better to keep the next version in a separate branch, and have master always reflect the current gem verion.
",adsteel,dhulihan
1442,2015-08-21 21:47:35,"@adsteel That would be counter to the way pretty much every other project organizes itself.  If you want the README for a specific version - look at that versions README, or read the docs for the version you're using on rdoc.info
",twalpole,adsteel
1442,2016-10-15 00:11:27,"@MaxPleaner That may be common for an app, but it's not for most gems.  A PR with a note in the readme would be considered as long as it is worded/implemented in a way I don't have to modify/update it for every release
",twalpole,MaxPleaner
1439,2015-01-14 18:51:07,"Closing due to @jnicklas huge :-1: and my misgivings about the potential unexpected behavior
",twalpole,jnicklas
1435,2014-11-04 13:15:29,"Yes, @abotalov, this is my point. There is a capybara way that is better, but _there is no warning when you do it the wrong way_. Capybara will still work properly with `asset page.has_xxx?` but it will sleep for the full wait time.

All I want to do is add a warning when you reach the full timeout. This can only happen in two cases:
1. You are developing and you got the step wrong, so then you'll get an ElementNotFound anyways
2. You used a `has_xxx?` when you should have used a `has_no_xxx`

Right now there is no indication that the second one was done. I want a warning when someone does the second one.

Would it help if I submitted a PR and a pair of test cases?
",ngauthier,abotalov
1435,2014-11-05 13:22:51,"@twalpole So, I think there may be some miscommunication on this issue in general.

I've been using capybara for almost 5 years now, and I have met Jonas and talked to him about the framework. I am no stranger to capybara, and I know how to use it.

I think we all agree that the code I posted is not the optimal solution. _That is my point_.

The point of this issue is to help new (and experienced!) programmers when they accidentally use a capybara method that times out. I am happy to make this warning off by default, and something you can enable.

I would love to implement it as part of capybara, but I am also perfectly happy to do it as an external library.

The challenge here is that the `if` statement that checks for the timeout is so deep in `synchronize` that a monkey patch would not be ideal.

I like the idea of wrapping synchronize, but I am not sure how to do this, as all I would see is the exception being raised, but there is no indication that the exception raised was due to a timeout. The best I can come up with is wrapping synchronize with redundant timeout logic that is slightly less than the real timeout, and raising a different exception.

I just want to reiterate that I understand there is a better way to write the capybara code! My goal is to help people not make mistakes by issuing warnings when they have used a finder inappropriately.

Thanks for the feedback and discussion so far.
",ngauthier,twalpole
1435,2014-11-05 17:24:14,"@ngauthier ""The point of this issue is to help new (and experienced!) programmers when they accidentally use a capybara method that times out. I am happy to make this warning off by default, and something you can enable.""   -  If the fact that the capybara method times out is an error then the programmer should be using a method that errors instead of one that returns true/false - outputting warnings for every instance where synchronize times out will just add a ton of spam to the output of anyone validly using the has_xxx? or has_no_xxx? methods, as well as potentially confusing people whose tests are failing, since they will now see  ,   ""Warning Slow finder!"" and ""Could not find ...""  and assume they just need to increase their wait times, when there is actually something wrong with their app.  Throwing warnings on methods that are doing what they are supposed to do in case someone has used them ""incorrectly"" just doesn't seem like a good idea to me.

For the wrapper version, without thinking about it too much, I don't think the buffer time is required because your wrapper will always be called before the normal capybara so your start_time will always be <= to the capybara stored one, and the rescue will get called after capybaras so Time.now will always be >= the the capybara used one, so the condition should always be true if capybaras comparison was also true.   That being said - iirc, the only way for Capybara::ElementNotFound to be returned from synchronize is if the timeout occurs, so I don't think you really need the check anyway.  Something along the lines of



would probably work
",twalpole,ngauthier
1435,2014-11-05 18:42:12,"@twalpole Could you give an example of a valid use of `has_x?` where timeout may be reached?
",abotalov,twalpole
1435,2014-11-05 19:12:14,"@abotalov  The very first post here is a valid use case if you want to test if a selector shows up on the page (within a set timeframe) in order to take a different action.  I grant that it should not be a common use case in well written tests, but I can see it sometimes being useful in libraries of test methods, etc.  If you're saying there is no valid use where timeout may be reached, then you're saying we should just remove the has_x? methods - and everyone can just always use the assert_x methods.   The has_x? methods specifically return true/false as opposed to the assert_x methods - they are methods with specifically different behavior, and the one whose behavior is wanted is the one that should be used.  As I said earlier, documentation updates may make the behaviors clearer to people, but adding warnings to a method that is doing exactly what it is written to do makes no sense to me.
",twalpole,abotalov
1435,2014-11-05 19:19:48,"@ngauthier The only driver I know of that doesn't wait is racktest, which already overrides synchronize so that wouldn't be an issue - If there are others a check on driver.wait?  is simple enough.  If passed in errors really are a concern you could also check if errors does not contain Capybara::ElementNotFound and not log if that is true.  You really don't need the timing info.
",twalpole,ngauthier
1435,2014-11-05 21:05:20,"@ngauthier ""I do think a capybara warning (not an exception) that can be disabled (or is disabled by default) would be useful to those who think capybara is slow""  - we're just going to have to disagree on this.

Also your suggestion in the new gem that 



is incorrect and



is correct, is highly misleading and potentially dangerous for new users.  Those two statements test two very different things.   The first tests that the text is not on and doesn't show up on the page within a time period(useful after triggering an ajax request for instance) - the second tests that the text disappears from the page within a time period (or wasn't there to begin with).  These are two VERY different things, and one is not more or less correct than the other, depending on what they are testing for.   Can they be sped up - yes, by looking for other things that would definitely be on the page after the ajax request and then checking inside them, but that makes the test more complicated to read and also more brittle.  Is that speed up worth the more complicated/brittle tests - maybe, depends on the user, size of the test suite, number of times you're doing that test, etc, etc.
",twalpole,ngauthier
1435,2014-11-27 14:36:55,"@ngauthier -  a very useful gem which made my test suite 9% faster for 20 minutes of painless work. I've used RSpec for 2 years or more and wasn't aware because the problem was unknown. 
",notapatch,ngauthier
1435,2014-12-17 03:10:42,"I just came across this thread after we started using @ngauthier's gem. I didn't know @ngauthier tried to get this included upstream before publishing a gem. Kudos to you man for the effort.

I just wanted to add my voice to the chorus that my team finds this information very useful. @twalpole you have used the phrase ""ton of spam"" multiple times in this conversation, and I (a user of this library) totally disagree that this is qualified as ""spam"". I **want** to see this information.

I agree with @ngauthier and his statement ""I am strict and would not want the timeout hit in any scenario.""

The root cause is that these two statements:



look extremely similar to the developer writing the code but exhibit very different behavior. This is at odds with every rspec/minitest/testunit assertion I've ever used. I find it analogous to:



I fully appreciate that the wait is a user convenience so that we don't have manage asynchronous waits manually. However there is no way with the current capybara codebase for a user to even audit/evaluate their test suite in order to find these timing hotspots.

> ... they are methods with specifically different behavior, and the one whose behavior is wanted is the one that should be used. As I said earlier, documentation updates may make the behaviors clearer to people, but adding warnings to a method that is doing exactly what it is written to do makes no sense to me.
> Also your suggestion in the new gem that ... is incorrect and ... is correct, is highly misleading and potentially dangerous for new users. Those two statements test two very different things. 

I think the problem here is that these methods are stretching the definition of uniformity. These are two methods that behave quite differently but look very similar. Because of that, they are also traps for the principle of least astonishment when they are written as well as read without running the code or without expert-level context. I don't agree that updating documentation is the best solution here.

In my opinion these two options are more appropriate: 
- Change the method names so that it's abundantly clear that they behave differently when they are used
- Allow an optional way to audit incorrect uses of the method. It's a real bummer that this strategy has to be maintained as an external monkey patch.
",zmoazeni,ngauthier
1435,2014-12-17 03:10:42,"I just came across this thread after we started using @ngauthier's gem. I didn't know @ngauthier tried to get this included upstream before publishing a gem. Kudos to you man for the effort.

I just wanted to add my voice to the chorus that my team finds this information very useful. @twalpole you have used the phrase ""ton of spam"" multiple times in this conversation, and I (a user of this library) totally disagree that this is qualified as ""spam"". I **want** to see this information.

I agree with @ngauthier and his statement ""I am strict and would not want the timeout hit in any scenario.""

The root cause is that these two statements:



look extremely similar to the developer writing the code but exhibit very different behavior. This is at odds with every rspec/minitest/testunit assertion I've ever used. I find it analogous to:



I fully appreciate that the wait is a user convenience so that we don't have manage asynchronous waits manually. However there is no way with the current capybara codebase for a user to even audit/evaluate their test suite in order to find these timing hotspots.

> ... they are methods with specifically different behavior, and the one whose behavior is wanted is the one that should be used. As I said earlier, documentation updates may make the behaviors clearer to people, but adding warnings to a method that is doing exactly what it is written to do makes no sense to me.
> Also your suggestion in the new gem that ... is incorrect and ... is correct, is highly misleading and potentially dangerous for new users. Those two statements test two very different things. 

I think the problem here is that these methods are stretching the definition of uniformity. These are two methods that behave quite differently but look very similar. Because of that, they are also traps for the principle of least astonishment when they are written as well as read without running the code or without expert-level context. I don't agree that updating documentation is the best solution here.

In my opinion these two options are more appropriate: 
- Change the method names so that it's abundantly clear that they behave differently when they are used
- Allow an optional way to audit incorrect uses of the method. It's a real bummer that this strategy has to be maintained as an external monkey patch.
",zmoazeni,twalpole
1435,2014-12-17 04:32:30,"@zmoazeni  -  your statement ""Allow an optional way to audit incorrect uses of the method"" is the real issue here.  There is no way to know which are ""incorrect"" uses and which are the use the developer intended.  The developer has to have some knowledge about what they want to test for, and what they are actually testing for.  
  Your ""analogous"" example really isn't because we're not taking an existing matcher and secretly adding waiting behavior to it.  There are two matchers --  has_content?  and has_no_content?  (actually just aliases of has_text? and has_no_text?) which will each wait a specified amount of time for the content to appear or disappear from the page.  
1. If you want to check that content is currently on the page or will appear on the page then you want assert page.has_content?  
2. if you want to check that content is not currently on the page or will disappear from the page then you want assert page.has_no_content? 
3. if you want to check that information is not on the page and does not appear on the page within a given time then you can use refute page.has_content?
4. if you want to check information is on the page and does not disappear within a given time then you can use refute page.has_no_content?

Each of those uses is equally valid, they are just testing for different things.

As nick stated, we've reached a consensus on this issue, which is if you feel you never want to test for the behaviors in 3 and 4, then feel free to include nicks gem.
",twalpole,zmoazeni
1434,2014-11-05 23:09:35,"@twalpole thanks for the comment, one of the use cases would be a user's found an element and then tries to find the previous or next element's text in relative to the current element.
",neilma,twalpole
1431,2014-10-27 07:47:32,"What was the conclusion?  I also have the same problem, and started on 10/17/14 for me. cc: @twalpole and @tonybearpan.
",styliii,tonybearpan
1426,2014-10-17 08:47:44,"Hi @twalpole,

Thanks for your quick reply, good point about the processes. For now I'm going to do as you have suggested and quit the browser following each scenario. 

Do you think it would be of any benefit if Capybara could check whether there is at least one window available before performing any action, so that if there were none it could launch a new one and prevent this issue? Having to shutdown and relaunch the browser each time as you've said above is a little slow :( 
",jonathanchrisp,twalpole
1419,2014-10-07 22:06:07,"Hey,

Engineer at CircleCI here. I'm not very familiar with Ruby or Capybara in particular, but we see file-ordering bugs in Ruby projects pretty often. Could that be what's happening here?

We've got [a document](https://circleci.com/docs/file-ordering) about file-ordering bugs that may be helpful. The gist of it is that OS X (or certain OS X filesystems, not sure atm) always lists files in the same order, while Linux (or certain Linux filesystems) doesn't. This can cause namespaces to be loaded in different orders and expose different behavior.

@vericred-dev, are you on OS X?

Our users have a fairly constant trickle of capybara failures that'd I'd love to get to the bottom of. Maybe this is it, or related?
",startling,vericred-dev
1419,2014-10-08 14:47:45,"Hi, @startling. Yeah, our dev boxes, on which capybara 2.4.2+ are working just fine, are OS X.

@artempartos, what platform are you seeing this problem on? Have you done anything interesting to your middleware stack? We don't think we have.
",vericred-dev,artempartos
1419,2014-10-08 14:47:45,"Hi, @startling. Yeah, our dev boxes, on which capybara 2.4.2+ are working just fine, are OS X.

@artempartos, what platform are you seeing this problem on? Have you done anything interesting to your middleware stack? We don't think we have.
",vericred-dev,startling
1419,2014-10-09 15:10:04,"@vericred-dev i'm working on vagrant box with Linux precise64. 
I have next middlewares


",artempartos,vericred-dev
1417,2014-10-13 18:58:26,"@DaveBlooman 2.4.4 coming as soon as travis finishes
",twalpole,DaveBlooman
1417,2014-10-13 19:24:53,"Thanks @twalpole any chance we could get this backported to 2.2.x as well? I can do a PR into that branch if it'd help.
",phillbaker,twalpole
1417,2014-10-14 01:22:41,"Thanks @twalpole! 

I'll give it a shot, I was hoping to get something quick out on 2.2 and then work on updating to 2.4. If it turns into a bunch of work, I'll open a PR against https://github.com/jnicklas/capybara/tree/2.2_stable and we can discuss.
",phillbaker,twalpole
1412,2014-09-30 09:01:33,"thanks @twalpole  for the feedback.  I see we can get the tests to fail if we add:



show_exceptions is true by default in sinatra, so this seems like a potentially very confusing issue.  cucumber capybara on the other hand doesn't behave like this.  The error thrown by sinatra is caught by cucumber rspec and is displayed in the console - I think it would make a lot more sense to developers if capybara-rspec followed capybara-cucumber in that regard.  Running a cucumber feature it looks like this:



I've added the cucumber example to the existing repo in case you want to run it yourself:

https://github.com/tansaku/rspec-capybara-bug

Thanks for clarifying that this is not a bug per se, but I would argue it is a serious usability issue - the cucumber behaviour seems much more developer friendly - is there some reason that capybara - rspec integration can't support the same?
",tansaku,twalpole
1412,2014-10-03 07:52:56,"Aha - thanks @twalpole - that clears everything up - really appreciate you taking the time to explain the details - we'll consider making an rspec-sinatra gem
",tansaku,twalpole
1411,2014-09-30 13:53:31,"I agree with @afterclassroom, I think the specific issue is that Capybara doesn't support ""custom elements"" (polymer uses it): http://www.html5rocks.com/en/tutorials/webcomponents/customelements/

A work around is to make something like this:
document.querySelector('custom-element').shadowRoot.querySelector('#html-element')

Please look below at the comments of the link:
https://github.com/webdriverio/webdriverio/issues/194

Right now, I am working to develop an approach to overcome this problem, trying to use capybara.
",froucher,afterclassroom
1411,2014-10-14 22:23:36,"@afterclassroom try using the 'within' method to reference elements within the Shadow DOM. Note that if there are nested Shadow DOMs, you'll need another 'within' function as well.
",qiheme,afterclassroom
1411,2014-10-21 09:52:13,"@qiheme 

We would love to apply 'within'. 

But as you sketched out, we do have nested Shadow DOMs.

In which case, how could we locate to the proper DOM element, at which, we could use ""within""?

Here is an example of how jQuery could locate the needed element at GoogleChrome's console:

document.querySelector('classroom-app').shadowRoot.querySelector('core-animated-pages').querySelector('section.core-selected').querySelector('login-form /deep/ input')
",afterclassroom,qiheme
1411,2014-10-21 13:11:41,"@afterclassroom 

Try this:

within('classroom-app') do
  within('core-animated-pages') do
    within('section.core-selected') do
      within('login-form') do
        page.find('input')
      end
    end
  end
end

Use 'within' to break through each nested shadow DOM. Since you're using 'deep', I can't really tell if there are any other nested sDOMs in there. Also, since you're not using shadowRoot to get to 'section.core-selected' that particular 'within' might not be needed. I realize that nested loops can cause speed issues when running tests so I would probably put this in a separate rb file in your support folder. Let me know if this works for you.
",qiheme,afterclassroom
1406,2014-09-24 19:30:35,"@twalpole  sorry, ok.
",g-ilham,twalpole
1396,2014-09-11 19:25:45,"@abotalov I actually am having the reverse problem where I can't access Rspec's `all` method, not the other way around (for which your workaround would be fine). I think in the case of Rspec I need to do this:



But that kind of kills readability and isn't worth it. I just looped over the elements manually instead.
",mhodgson,abotalov
1396,2014-09-11 19:29:10,"@abotalov maybe `find_all` ?
",mhodgson,abotalov
1396,2014-09-11 19:35:31,"@mhodgson RSpec's `all` doesn't work for you as `Capybara::DSL` is included after `RSpec::Matchers`. Adding alias inside Capybara won't resolve the issue as `all` will continue to exist and override RSpec's method.

You can include `Capybara::DSL` before including `RSpec::Matchers`. Then `all` will mean RSpec's method. And you would be able to use Capybara's method via `page.all`.
",abotalov,mhodgson
1396,2014-09-28 20:06:23,"@myronmarston 

> I'm not sure what we could have or should have done differently

It looks to me that an issue of clashing method names is an issue not only of RSpec and Capybara but of Ruby ecosystem in general. It's bad when two gems expose methods with the same name. So it would be better if there would be a general enough solution for that problem.

It's easy to find those clashing methods if one would put some care into combining a list of modules/classes with with which methods exposed by a gem may interfere. Something like:



It may be even possible to create a general gem that will contain `gems_and_their_methods` array not only just for testing context but also for model, controller etc. though it may be a very large task, not sure.

It's possible to incorporate such task into a build that will check for those clashes and say if there are e.g. any new.
",abotalov,myronmarston
1396,2014-09-28 23:21:14,"That's an interesting idea, @abotalov.  I would say that it's really only a problem when gems choose to add methods to a namespace owned by another gem, as is the case here. RSpec ""owns"" the namespace for the API it exposes, and capybara chooses to import its API into that same namespace.  Also, I don't want to limit new RSpec APIs to just method names that aren't already in use by an RSpec extension.  It would be useful to know in advance that adding a particular API will cause a conflict with a method in a particular extension, but that wouldn't necessarily stop us from adding it.  It would, however, allow us to discuss the issue before the new API is released, to have solutions ready.

If you decide to develop your conflict-detection logic further and want some input from the RSpec side, let me know.
",myronmarston,abotalov
1394,2014-09-10 15:00:47,"@twalpole 

Good morning!

After further consideration, I realize that `#text(:all)` doesn't fully resolve the issue I reported and in fact I believe the current behavior still qualifies as a bug.  Let me explain and I fully welcome your feedback.

I will attempt to thoroughly qualify the statement that this is in fact a bug (or, perhaps a feature request since it may represent a breaking change):

Most importantly, your suggestion to use `#text(:all)` does not allow us to perform text validation (e.g. `has_content?`) on invisible elements using the implicit wait functionality built in to Capybara.  The text method will return immediately (if it finds the element in question) and then an assertion must be made on the immediate response, or I must wrap my query in a waiter block, again negating the benefit of Capybara's implicit wait mechanisms.

Alternately, I can use a `find()` using the `text: 'something'` query option(see below), but this is not ideal for setting expectations within tests.

Secondly, there exists an inconsistency in the current behavior.  Specifically, given an invisible element containing 'some text', take the following examples:



As you can see, specifying the `text` query option in the `find()` method parameter hash ignores the visibility of the element, and matches on `:all` text regardless.

Finally, by specifying `visible: false` on the element query, my query implicitly states that the element is not visible, and therefore any query against the text value of that element and/or any subelement should be performed implicitly with `text(:all)`.  The element is already determined at this point to be a non-visible element based on the specified query selector, and as such other method calls on the element should be able to apply this visibility context to their behavior.

Therefore, element methods such as '#text', '#has_content?', '#has_text?' etc should behave appropriately for the visibility of the context they are called within, and not simply to the global `ignore_hidden_elements` setting.
",tmertens,twalpole
1394,2014-09-10 17:31:34,"@tmertens

> Most importantly, your suggestion to use #text(:all) does not allow us to perform text validation (e.g. has_content?) on invisible elements using the implicit wait functionality built in to Capybara

`has_text?(:all, 'text')`

> As you can see, specifying the text query option in the find() method parameter hash ignores the visibility of the element, and matches on :all text regardless.

It does respect it - https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L44

> Finally, by specifying visible: false on the element query, my query implicitly states that the element is not visible

That's not true. It means that you don't care if it's visible or not. Therefore I'm not convinced to support your next conclusions.
",abotalov,tmertens
1394,2014-09-10 19:04:16,"@tmertens It seems you also want to make `visible: false` mean `visible: :hidden`, not `visible: :all` as it does now.
",abotalov,tmertens
1394,2014-09-10 19:28:37,"@abotalov Not at all, I'm simply trying to demonstrate that Capybara's concept of ""visibility"" is applied inconsistently to element and text nodes in the DOM.

That's not to say that there isn't utility for a `visible: :hidden` query option, but that's outside the scope of this ticket.
",tmertens,abotalov
1394,2016-01-29 18:22:09,"`text(:all)` solved this for me but I support @wingice.  
My case was a error balloon outside of browser window because the page is too wide.
",Nakilon,wingice
1394,2016-01-29 21:36:15,"@Nakilon If your error balloon is appearing offscreen, then thats a usability issue and should be fixed, rather than changing your text to pass when the text is not visible -- hence why you shouldn't be searching for things that aren't visible.
",twalpole,Nakilon
1378,2015-04-22 17:32:11,"@Paxa This should not be done for #find - It is impossible to determine what the user may have wanted there.  I was referring to your initial code, which only outputs id or name and some label text, it ignores name (if an id exists),  placeholder, and some labels text in its suggestion list.  I think an incomplete suggestion list is actually worse than no suggestion list since it creates the illusion of having all the info when in fact you don't.
",twalpole,Paxa
1378,2015-04-23 06:10:19,"@chrisccerami your description of doing it for all ElementNotFound errors is basically impossible,  those errors can come from any valid CSS or XPath selector, and trying to determine the users intention for that isn't really doable
",twalpole,chrisccerami
1378,2015-04-23 06:11:51,"@twalpole I think if we make it for `find` it will give wrong suggestions. For example fill_in, select, click_link etc using find inside. I think better to make decorators for errors every case. And may be make special case to detect if `find` called from capybara or from user's test
",Paxa,twalpole
1375,2015-03-03 22:55:00,"@chalmagean  This issue is CLOSED  -- its not a Capybara issue. If you want help with an error you're getting, go to the Capybara mailing list as requested in the README and post details of your problem there
",twalpole,chalmagean
1365,2014-07-29 16:27:32,"@twalpole It's a single `switch_to_frame` method with ordinary overloads.
",abotalov,twalpole
1365,2014-07-29 19:07:34,"@abotalov   Actually you have said 2 different things, the initial text proposes adding switch_to_frame (with its overloads) to the session -- then later on you have said adding it to the driver API, which are you actually proposing?  
",twalpole,abotalov
1365,2014-07-29 23:36:00,":+1: to making the frame API behave more like the window API. I'd also like to cut down on the incompatibilities between drivers when it comes to frame handling, as noted in https://github.com/jnicklas/capybara/issues/984#issuecomment-14357652. And as @jnicklas pointed out, this code really needs to be cleaned up.

I agree with @abotalov regarding `switch_to_frame` vs `within_frame`. I feel there are benefits to both depending on the situation, and as we've provided both `switch_to_window` and `within_window` (implemented via `switch_to_window`), I think users may expect that behavior.

Perhaps `within_frame` could take a proc as an argument, as `within_window`. I think this is a nice way to handle the option of selecting a particular frame that matches a selector, versus overloading arguments.

Thanks for the heads up, @abotalov.
",mhoran,abotalov
1365,2015-09-16 20:16:54,"@jtrupiano I don't think so. Ended up here as proposal
",route,jtrupiano
1365,2015-09-16 20:32:11,"@route thanks for the reply.  A question for you (and the lurkers) regarding the following situation.  I am directly working with Session instances (no naked calls to #within_frame, etc).  I have scenarios where I want to observe the same behavior when a request comes directly from the browser vs. when the request is loaded into an iframe on another page.  So in my test code, I want a ""handle"" of sorts to the top level Session-like object.  In other words, something like this...



This is admittedly stripped down for illustrative purposes, but I want to re-use all of that code after the call to #get_root as if it were unaware that it were happening within an iframe.  So what's the recommended way to get a pointer/handle to the iframe that either is or behaves like a Session?
",jtrupiano,route
1365,2015-09-16 21:05:55,"Oh I get it now.  #within_frame actually alters the state of the variable session.  That's what I was missing.  Thanks for helping me think through this, @route.

btw I'd still be happier if I had #switch_to_frame :)
",jtrupiano,route
1365,2015-09-16 21:06:38,"@jtrupiano No problem ;)
",route,jtrupiano
1363,2014-07-24 19:40:05,"Yeah, I think it would be fine to add a rescue there:



I think it makes sense to output a warning as javascript error can theoretically occur for some other reason and thus user will know that it occurred. We can add exception message to rescue but it's not standardized by Webdriver W3C spec so I wouldn't like it.

@twalpole AFAIK `warn` outputs to STDERR so user can't redirect such output to some file with ""debug"" info. Probably warning should be outputted to `$stderr`.
",abotalov,twalpole
1363,2014-07-25 16:27:55,"@sharmarahul Looking through the selenium-webdriver code, if the firefox session is created with javascript disabled then any call to execute_script immediately raises Error::UnsupportedOperationError, and the execute_script should never actually be sent to the browser, so there shouldnt be any great performance hit.  How are you disabling javascript in your Firefox session?
",twalpole,sharmarahul
1363,2014-07-25 16:30:41,"@sharmarahul also - what version of selenium-webdriver are you using?
",twalpole,sharmarahul
1361,2014-07-16 07:29:37,"Hey @abotalov, thanks for the feedback, I forgot about the page method returning the current session so this would work quite nicely.
",jonathanchrisp,abotalov
1357,2014-07-08 20:50:29,"@abotalov good point - done!
",shepmaster,abotalov
1356,2014-10-13 17:20:53,"@swathik -- Please ask howto questions on the mailing list as requested in the README
",twalpole,swathik
1352,2014-07-02 20:08:12,"@abotalov I've added descriptions for the rest of the filters - please take a look
",twalpole,abotalov
1349,2014-07-01 02:23:10,"Thanks @twalpole, I didn't pulled from the master :flushed:
",sobrinho,twalpole
1348,2014-06-30 07:44:22,"@abotalov Thanks for your comment.
What do you think of my last commit?
",davidstosik,abotalov
1348,2015-08-28 18:32:42,"After thinking about this and looking through the tests I think all this boils down to is defaulting scheme to http when not specified, which I'm not convinced is necessarily valid.  I definitely agree with @abotalov that we should not be resolving against current_url for calls to Session#visit, since calls to visit really are about setting up the state of the browser in order to then interact with it, not about loading stuff relative to the current page.
",twalpole,abotalov
1340,2014-06-19 19:47:21,"@twalpole Currently I use something similar to your solution but I don't quiet like it as block returns either `true` or `false`.

Instead block should contain proper rspec expectation so user would see error message with more data about the error (e.g. which text appeared on the page instead of desired).
",abotalov,twalpole
1340,2014-06-24 16:22:05,"@abotalov since you're using method_missing you should probably also be defining respond_to_missing? .  Other than that I think the gem is solving the issue presented.  I don't necessarily like the  phrasing  'become_have_css', but I havent come up with anything better.  We should probably close this issue now, and move any further discussions over to your gem.
",twalpole,abotalov
1340,2014-06-24 18:14:50,"@twalpole Thanks, I defined respond_to_missing?
",abotalov,twalpole
1338,2014-06-19 12:02:54,"@twalpole seems fine for me, just the double check that @abotalov mentioned has to be changed :shipit: 
",sobrinho,twalpole
1334,2014-06-16 18:57:22,"I don't think backporting to 2.2.x is worth the effort for this, and as @myronmarston says wouldn't really fix the issue.  rspec-rails will work with capybara 2.2.0 just with deprecation warnings, and those warnings go away with capybara 2.3.x, so as long as the rspec-rails check is for >= 2.2.0 most people will update to capybara 2.3.x (and 2.4.x within the next couple of weeks) which don't have any backward breaking changes just add new features/support and get rid of the warnings.   I would however say the rspec-rails Gemfile should probably specify  ~>2.2   instead of ~>2.2.0  so tests can be run with the latest capybara 2.x versions instead of just 2.2.x versions.
",twalpole,myronmarston
1328,2014-06-11 19:27:18,"@abotalov all of the entries I looked at in that search were people trying to figure out why their matcher was failing, none of them seemed to be people rescuing that specific exception.  I'm not convinced this needs to go into a major release.
",twalpole,abotalov
1328,2014-06-13 16:30:06,"@DaveBlooman There is no fixed release cycle.  I'm aiming for the next release in 1-2 weeks
",twalpole,DaveBlooman
1326,2014-06-10 16:41:34,"@davidkovaccs just FYI - but visible defaults to true since in most cases when doing user interaction tests one wants tto make sure the content is actually visible to the user
",twalpole,davidkovaccs
1322,2014-06-03 21:08:59,"@abotalov hmmm -- I'm having second thoughts about respond_to_prompt -- maybe the parameter should be :with so it matches up with fill_in ---  I need to think about this a bit longer
",twalpole,abotalov
1319,2014-06-05 18:22:47,"@sobrinho Are you planning on submitting a PR for this?
",twalpole,sobrinho
1319,2014-06-18 23:40:47,"@sobrinho please take a look at PR #1338 and see if that will meet the needs.   I changed your idea a little bit by passing the options through as  :fill_options to prevent option clashes with those that can be passed to the finder.  so now it would be


",twalpole,sobrinho
1317,2014-05-29 17:56:17,"@twalpole the main reason is to make examples workable because click_link won't submit form.
And bit more logical user in example is created with email (not login) field.

Devise was just an example of widely used case.
",stgeneral,twalpole
1313,2014-06-04 06:01:01,"@twalpole My apologies for not being super clear.

My application gives a 301 redirect. Sometimes that redirect destination doesn't exist. Capybara doesn't handle this situation well in Chrome in that after the redirect, the `current_url` is `data:text/html,chromewebdata` instead of the expected destination url. Does that make more sense?
",tekknolagi,twalpole
1313,2014-06-04 17:19:31,"@tekknolagi Capybara doesn't do anything special to get the current_url, it just asks the browser driver for it.  That being said I have been able to replicate the behavior you're seeing using Chrome with selenium.  This is because Chrome loads an internal page into the browser when it can't lookup the url passed to it ( look at  #html before checking #current_url ) so the current url is actually what is shown.  There's nothing Capybara can do about this.  You could look at the conntent of the page Chrome loads and check it for the correct url.  On Chrome Version 35.0.1916.114  evaluate_script('templateData[""summary""][""failedUrl""]') will give you the url it was attempting to go to, but I'm not sure how stable that will be with changing versions of chrome
",twalpole,tekknolagi
1313,2014-06-04 17:30:25,"@twalpole What is the recommended way to check that a browser is being redirected?
",tekknolagi,twalpole
1313,2015-09-07 02:41:27,"Following @bradparks 
It ended up being this for me:
`page.driver.browser.title`
",prpetten,bradparks
1309,2014-05-20 21:49:05,"@abotalov --  Great -- assuming they're producing the same results :)  --  Waiting for tests to pass and will then merge
",twalpole,abotalov
1307,2014-05-17 21:33:06,"@pcreux  - Yes, when using racktest it checks using inline styles (since its not reasonable to process and interpret css in capybara - hence the ""with caveats"" in my previous post).  We try to provide as much parity as reasonably possible between different drivers, and reasonable detection of visible text is part of that parity. I don't think most people are paying a huge performance hit for it, since they really shouldn't be checking a whole page for the text.  If you know you expect text in a message area, then find and check that message area for the text - then the performance hit is minimal.   That being said, if you can speed up the visibility check query, without reducing the current functionality, then PRs would gladly be looked at (for instance their really isnt the need to check ancestors when walking the entire tree, since its already done).  If you really don't want to have visibility checking in your tests then you can set Capybara.ignore_hidden_elements and Capybara.visible_text_only to false, or as stated before pass :all to the have_text matcher, and have basically 0 performance hit
",twalpole,pcreux
1307,2014-05-19 18:19:17,"@pcreux  give my visible_optimization branch a try - https://github.com/twalpole/capybara/tree/visible_optimization - and let me know if that makes a noticeable difference - if so I'll look at pulling it in
",twalpole,pcreux
1307,2014-05-20 16:24:59,"@pcreux - yes its going to be slower, it needs to check for visibility which is going to take time.  Feel free to attempt further speedups - without losing the current functionality
",twalpole,pcreux
1307,2014-05-20 17:38:55,"Yes, thank you. I'll see if I can run the xpath query once, then traverse
the tree instead of traversing the tree and run the xpath query on every
single node.

## 

φ http://pcreux.com

On Tue, May 20, 2014 at 9:25 AM, Thomas Walpole notifications@github.comwrote:

> @pcreux https://github.com/pcreux - yes its going to be slower, it
> needs to check for visibility which is going to take time. Feel free to
> attempt further speedups - without losing the current functionality
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1307#issuecomment-43648827
> .
",pcreux,pcreux
1307,2014-05-20 17:49:51,"@pcreux try pr  #1309 first
",twalpole,pcreux
1305,2014-05-21 18:03:56,"@twalpole I believe it is between selenium and firefox webdriver. Thanks for following up.
",bdarfler,twalpole
1305,2014-07-21 21:50:21,"@bdarfler Did you ever figure out how to fix this problem? I'm having the same issue myself.
",jasonswett,bdarfler
1305,2014-07-21 22:25:25,"Nope. I just caught the exception and retried. We eventually started using
https://github.com/y310/rspec-retry for other reasons so I suspect that
helps us out as well.

On Mon, Jul 21, 2014 at 5:50 PM, Jason Swett notifications@github.com
wrote:

> @bdarfler https://github.com/bdarfler Did you ever figure out how to
> fix this problem? I'm having the same issue myself.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/jnicklas/capybara/issues/1305#issuecomment-49670998.

## 

@bdarfler http://twitter.com/bdarfler
http://bdarfler.com
",bdarfler,bdarfler
1304,2015-11-04 21:11:42,"@gabeodess This issue was specifically about using selenium, and closed over a year ago.  If you are saying that Poltergeist won't fill a visible input of type number, please file an issue over on the poltergeist project.  Generally, suggesting javascript execution as a workaround is usually a terrible idea since the app is no longer being tested as a user would interact with it, doesn'tt generate events, etc. Yes there are times when it can make sense, but that usually involves really understanding why you're doing it which a lot of beginning capybara users don't.
",twalpole,gabeodess
1304,2015-11-04 21:21:37,"@twalpole this was the first hit I got when I was trying to figure why my number fields weren't filling with capybara's #fill_in method.  I figured I would just include how I got around this in case other people got to this same thread. 
",gabeodess,twalpole
1298,2014-07-08 18:16:20,"@twalpole I disagree with you.

Previously Capybara could sent to driver's `visit` method either String or not String. If user sends parameter of String type, then String will be sent to driver.

After this PR (or https://github.com/jnicklas/capybara/pull/1357) String is sent to driver's `visit` method (and it was supported previously). So it doesn't invoke any changes neither at driver, nor at user side.
",abotalov,twalpole
1298,2014-07-08 18:37:04,"@abotalov  I'll go through it again - although alex understood it so I think I explained my reasoning fine above.  As you said - previously Capybara could send to drivers visit method either a String or not a String (ie a URI could be passed through untouched, even though undocumented in some cases) and I wasn't willing in a minor version to change that just so the user didn't have to call #to_s on an arbitrary object in case an existing driver was actually using that undocumented ""feature"".  The visit method has since been changed to actually fix a bug - which I consider more justifiable than just for ease of use - and so it may now be fine to revisit this issue.  As it is the documentation for the visit method specifies that a String must be passed in, so any pull request for this issue will need to have that documentation updated to show that an ojbect that responds to #to_s would be acceptable as well
",twalpole,abotalov
1296,2014-05-08 18:56:23,"@twalpole thanks!
",ironcladlou,twalpole
1295,2014-09-04 17:25:57,"@abotalov the only thing stopping it is me having time to go through and see the current state -- I hope to be able to catch up on a lot of the current issues/PRs this weekend
",twalpole,abotalov
1289,2014-04-08 17:05:31,"@carhartl  yeah, the question there is just  how far (in px) is a 'swipe'  -- the flick currently is just set to a fast 200px swipe right, not really sure what makes sense for defaults on something like that.  Should swipe replace flick, or is a flick a fast swipe and should remain (so we would have  swipe(:left) and flick(:left) ), etc?
",twalpole,carhartl
1289,2014-04-08 20:01:31,"@abotalov - speed -- webdriver does support a speed for the flick (the ruby selenium-webdriver has :fast and :normal) -- a slower flick would be what most people would call a swipe I believe -- I don't know if it makes sense to have the two as separate methods, or pass a parameter, or just not worry about speed
",twalpole,abotalov
1289,2014-04-08 21:03:53,"@abotalov - the issue with tap is that it would be overriding Object#tap with  a function that is completely different -  that might be a surprise to some people
",twalpole,abotalov
1285,2014-04-03 06:44:48,"As @yujinakayama mentioned, `alias_example_group_to` is a public API specifically designed for this, to make it work well with whatever level of monkey patching the user has opted into or out of.  It also lets you provide default metadata that that alias will always have...so you can greatly simplify that file to:


",myronmarston,yujinakayama
1285,2014-04-03 19:50:06,"@yujinakayama  please let me know if master works for you now
",twalpole,yujinakayama
1285,2014-04-03 23:03:50,"@twalpole  Thanks. The `feature` without `RSpec` now works:



However `RSpec.feature` doesn't work. Also, the `feature` is still monkey-patched on the `main` object even though `expose_dsl_globally = false` is set. I'm not sure if Capybara should conform to the RSpec's policy strictly, but it would be nice if it could.
",yujinakayama,twalpole
1285,2014-04-04 01:10:20,"@yujinakayama - Yeah, I just implemented the short term fix, so only feature on the global object will work properly currently -  I have to think about the rest of it.
",twalpole,yujinakayama
1282,2014-04-02 19:53:21,"@stenver Done - #1286
",abotalov,stenver
1278,2014-03-29 23:58:19,"@tmandzak you're not the first person coming up with including exactly this helper in the global scope. Did you read somewhere to do this?
",jnicklas,tmandzak
1276,2014-03-27 18:30:26,"@nagyt234 because the Capybara::DSL and Capybara::RSpecMatchers are only included for rspec tests of type :feature  -- from the readme


",twalpole,nagyt234
1275,2014-03-25 18:56:39,"@jnicklas Nope, `should` syntax seems to be deprecated:
https://github.com/rspec/rspec-expectations/blob/master/lib/rspec/expectations/configuration.rb#L135
https://github.com/rspec/rspec-expectations/blob/master/lib/rspec/expectations/configuration.rb#L115
https://github.com/rspec/rspec-expectations/blob/master/lib/rspec/expectations/syntax.rb#L26
",abotalov,jnicklas
1275,2014-03-25 19:01:07,"@abotalov:

> or explicitly enable `:should`
",jnicklas,abotalov
1275,2014-03-25 19:23:39,"@jnicklas We can explicitly enable `should` instead of merging @twalpole's PR. I don't think that enabling `should` in Capybara specs is a bad decision.

But it doesn't change the fact that `should` is deprecated.
",abotalov,jnicklas
1275,2014-03-25 19:58:48,"@jnicklas RSpec-expectations produces a deprecation warning by default (if you don't specifically enable `should` syntax):
https://github.com/rspec/rspec-expectations/blob/master/lib/rspec/expectations/syntax.rb#L27
https://github.com/rspec/rspec-support/blob/master/lib/rspec/support/warnings.rb#L5

So I think it can be said that `should` syntax is deprecated
",abotalov,jnicklas
1275,2014-04-01 18:06:43,"FYI: as pointed out by @abotalov #1192 is this plus a bunch of other changes/fixes needed for rspec 3 compatability
",twalpole,abotalov
1274,2014-03-24 17:45:46,"@twalpole That's probably right... the bug is the converse, that spaces are being eaten somewhere. Can you offer any guidance?
",aceofspades,twalpole
1274,2014-03-24 19:19:31,"@aceofspades FYI -- building nokogiri against libxml2 v2.9.1 appears to fix this issue --- so it appears its potentially an issue in some version/versions of libxml2
",twalpole,aceofspades
1273,2014-03-24 02:48:00,"@abotalov Thanks for the comments! I fixed some of the things. Let's wait to see what @jnicklas has to say about some of the other ones, since I tried to not change the original API at all.
",gylaz,abotalov
1273,2014-04-02 23:15:58,"@gylaz Could you update this PR to be against current master, and see if you can figure out whats going on with the failed builds? Then we can move forward on getting this merged in.
",twalpole,gylaz
1273,2014-04-02 23:23:07,"> Could you update this PR to be against current master

@twalpole Will do!

> see if you can figure out whats going on with the failed builds?

The build if failing due to `Kernel#caller` not behaving the same way as in MRI. One way around this is to pass the calling method as an argument. Thoughts?
",gylaz,twalpole
1273,2014-04-02 23:59:43,"@gylaz -- actually -- this is just for a warning that Launchy needs to be installed to open the files, I don't know that it really matters whether it was called from save_and_open_page or save_and_open_screenshot -- either way the user needs to install Launchy - so maybe just dump the method name
",twalpole,gylaz
1273,2014-04-03 01:07:27,"@twalpole This is ready for a re-review.
",gylaz,twalpole
1273,2014-04-03 20:00:05,"@gylaz ok -- I think its all good now, unfortunately the tests failed due to the signature of the latest chrome failing on travis.   If you could rebase to master (which forces the chrome install now) one more time just to make sure the tests are passing and then I'll merge it in.
",twalpole,gylaz
1260,2014-02-24 20:59:47,"@twalpole Do you think that issue that you talk about is worth adding code for stuff outlined in issue description?
",abotalov,twalpole
1260,2014-03-02 14:16:23,"I agree with @twalpole on this. No need to go too crazy on this. If a user wants to choose options which might conflict then that's their prerogrative.
",jnicklas,twalpole
1259,2014-03-02 14:19:02,"@rbu @twalpole I don't know, this is a very edge use case, so it could be buggy in Capybara. @rbu which driver are you using? Could you provide an executable reproduction?
",jnicklas,rbu
1259,2014-07-24 17:15:15,"@abotalov That bug is marked as fixed, supposedly in 2.42 -- doesnt appear to fix the test we currently have pending though, any insight?  
",twalpole,abotalov
1259,2014-07-24 18:13:04,"The following works:



The test from description of https://code.google.com/p/selenium/issues/detail?id=6984 also works.

I've just reported a new bug about @rbu's case - https://code.google.com/p/selenium/issues/detail?id=7651
",abotalov,rbu
1256,2014-02-20 07:03:08,"@twalpole There is another issue with `:exact`:



So we can't use the same option for both xpath matching and text matching. At the very least they should be named differently.
",abotalov,twalpole
1256,2014-02-20 08:44:18,"@jnicklas I thought about something like `exact` helper method previously too but somehow I forgot about that idea when writing this issue.

Proposed by me:



Proposed by you:



Your proposal is also quiet short and nice. I think I support it even more than mine as it would require much less amount of code to write and it leads to shorter learning curve. But I think this helper method is useful enough for everybody to be placed to Capybara::DSL.
",abotalov,jnicklas
1254,2014-02-27 20:07:25,"@ashour You get those warnings because Capybara version that includes this change hasn't been released yet.
",abotalov,ashour
1254,2014-02-27 23:57:51,"@abotalov I see. Is there any way to suppress the warnings for the time being?
",ashour,abotalov
1254,2014-03-13 12:38:59,"@ashour you could link to the github repo in your gemfile for now
",ncri,ashour
1254,2014-04-04 00:39:36,"@ncri Where are you suggesting we pull from to work around this?  Capybara's master branch is still at version 2.2.0.  Does it contain the fix?
",palfvin,ncri
1254,2014-04-04 01:43:49,"@palfvin Yes this was pulled into master -- we are still working on full RSpec 3 compatibility, I hope to release a new gem within the next 2 weeks
",twalpole,palfvin
1254,2014-05-19 21:13:06,"@cupakromer  I had wanted to get one out by now - but then life got in the way.  Hopefully end of this week - more likely end of next week.
",twalpole,cupakromer
1253,2014-02-20 19:45:14,"@jnicklas Thanks for the tips. I'm fairly new to the testing stack I'm using here (Cucumber/Capybara/Selenium) so my apologies for the potentially naive question, but are you suggesting the best approach to do something like Issue 1252 would be to monkey patch the `reset!` method?
",klinden,jnicklas
1253,2014-02-20 19:58:41,"@klinden no, my preferred solution is to simply add an RSpec after hook (or equivalent) and run whatever you need to before Capybara.reset_sessions! is called. Monkey patching `reset!` is an option, but not the first one I'd use.
",jnicklas,klinden
1253,2014-02-20 20:01:21,"@jnicklas Well, the only problem with that is I can't do what I need to do (accepting an onbeforeunload dialog) until the browser has attempted to navigate away (which happens in `reset!`)
",klinden,jnicklas
1246,2014-02-17 13:09:08,"@jnicklas I think we should have either TextQuery or TextResult to fix https://github.com/jnicklas/capybara/issues/1179

We can't just have assert_text as we need to store state somewhere.
",abotalov,jnicklas
1246,2014-02-17 21:57:55,"@jnicklas suggestion to add `assert_text` and `assert_title` for non-rspec users seems quiet good to me. I'll add them.

But it seems that `HaveSelector`'s `matches?` method shouldn't invoke `assert_selector`:



as [RSpec 3 adds compound matchers](http://myronmars.to/n/dev-blog/2014/01/new-in-rspec-3-composable-matchers). User should be able to use them like:



So `matches?` method should return false instead of raising error. So `HaveSelector` should have `failure_message` and `failure_message_when_negated` methods.
",abotalov,jnicklas
1246,2014-02-18 20:33:22,"@jnicklas I tried to fix commit according to your suggestions and updated pull request description to reflect this.

Some notes:
1. I still think that it would be better for `have_title` to do full string matching instead of substring matching. Reasons:
   - full text matching for title is arguably more useful than substring matching as titles are usually not long enough and they can be matched fully
   - currently synchronized full title matching can be done only using regexps like `/\Atitle\Z/`. If proposed change will be applied substring matching could be done via `/title/` which looks better than `/\Atitle\Z/` that is currently needed for full title matching
2. I put `failure_message` inside `TextQuery` and `TitleQuery` as
   - `:expected_text`, `:count`, `:actual_text` aren't needed in other places except building failure message
   - `failure_message` and `failure_message_when_negated` seem to need some helper method to be DRY
3. I will probably fix issue with compound matchers outlined above in another pull request later
",abotalov,jnicklas
1246,2014-02-20 08:37:24,"@abotalov, why did you remove the tests for `#description` on the RSpec matchers?

Looking at the code this no longer changes the `have_title`, etc.. behaviour, right? In that case I think this is shaping up nicely, and I'm pretty sure we'll get this merged soon. I think it would be nice to have separate tests for `assert_text`, etc... as these are now public API, but maybe it's not super essential to get this PR merged, I don't want to wait too long on this one since the diff is so huge.

Nice job @abotalov this cleans up the internals very nicely, and also opens up for other interesting refactorings in the future.
",jnicklas,abotalov
1246,2014-02-20 08:54:17,"@jnicklas 
1. I deleted `description` method from rspec matchers so I deleted tests for them too. It's better to test for failure messages than descriptions as users don't see descriptions.
2. I'm currently writing tests for `assert_text` and `assert_title`.
3. I haven't yet reverted my API changes for `has_title?`. I'll do so after we'll have final decision on https://github.com/jnicklas/capybara/issues/1256
4. I'll rebase this PR on master.
",abotalov,jnicklas
1246,2014-02-20 09:00:20,"@jnicklas Also I placed `failure_message` method into query. Do you see a better place for it?
",abotalov,jnicklas
1246,2014-02-20 09:10:11,"@jnicklas Do you prefer me to amend commit or make a new one?
",abotalov,jnicklas
1246,2014-02-20 09:16:26,"@abotalov amend is better, imo.

Just checked the code for `failure_message`, and I'm still not happy about it. My main problem is that I want queries to be repeatable, and therefore stateless. If we make this refactor, it'll set a direction, where we can generalize a lot of the querying code in Capybara, and the ability to re-use queries is nice. Making them stateless would make them reusable and also thread-safe (maybe not so important right now). So, the addition of `assert_title`, etc... is nice, but the purpose of adding them has been lost. The purpose was to remove the statefulness from Query.
",jnicklas,abotalov
1246,2014-02-20 11:07:06,"@jnicklas How can I make query stateless?
Do you mean that `resolve_for` should return `TextResult` (or just array) that will store state needed to construct failure message?
",abotalov,jnicklas
1246,2014-02-20 12:11:19,"@jnicklas Why do you want to make queries repeatable and stateless?
",abotalov,jnicklas
1246,2014-02-22 14:04:01,"@jnicklas I amended commit. Changes since my last comment:
- Branch was rebased on master
- `assert_selector`/`assert_no_selector` now use `resolve_for` directly instead of `all`. It's done as `assert_text`/`assert_no_text` should have the same logic for count keys.
- `has_title?(string)` checks passed string for inclusion, not exact matching, as it did previously as it's out of scope of this PR
- Tests for `assert_text`, `assert_title` have been added
- `assert_selector` and `assert_no_selector` have been moved upper in the file as all other methods (except methods for matching texts) depend on them
",abotalov,jnicklas
1246,2014-06-11 19:44:23,"@twalpole changes made by this PR are outlined in description of this PR.
",abotalov,twalpole
1246,2014-06-11 19:58:05,"@abotalov Yes - I read the list of changes and am asking why this is one monolithic change and not serveral smaller ones -  Are all the changes dependent  on other changes, or can some of this be done as smaller separate non-breaking commits.   For instance the ""Added"" section could be done as 1 or 2 commits and I don't think need the rest of these changes (from just a cursory glance), and would not require a major release.
",twalpole,abotalov
1246,2014-06-11 22:40:45,"@abotalov - Either I'm not explaining myself well or you're misreading what I wrote - ""For instance the ""Added"" section could be done as 1 or 2 commits and I don't think need the rest of these changes""  - this does not mean that the rest of the changes are unwarranted, it just means that the two things described under ""Added"" could be done as a separate much smaller commits, that don't break backwards compatibility of public APIs and could be released much sooner in a minor release.   

So I'm going to ask again, hopefully more clearly -  Which parts of this can be moved into separate smaller, feature specific,  pull requests that are independent from each other (so that some can be used now without waiting for a major release)?
",twalpole,abotalov
1246,2014-06-19 17:24:05,"@twalpole I thought a bit more about this PR and I think it's in a very unmergable state and should be splitted to several PRs with more terse goals when time for 3.0 will come.
",abotalov,twalpole
1246,2014-06-19 17:44:05,"@abotalov I agree completely
",twalpole,abotalov
1246,2014-06-25 18:40:11,"@twalpole I think I can add `assert_title`/`assert_no_title`/`assert_text`/`assert_no_text` but addition of those methods also requires to add new query classes (BaseQuery, TextQuery, TitleQuery). Otherwise, it would be needed to copy paste`Query#wait` method.
",abotalov,twalpole
1246,2014-06-25 21:40:05,"@twalpole I reduced the scope of PR. It seems not to contain backwards incompatible public API changes now. Is scope OK for you now?

I still have to review PR and write yardocs for added methods.
",abotalov,twalpole
1246,2014-06-25 23:11:26,"@abotalov - yes the scope of this is much more agreeable - I'll review the PR now
",twalpole,abotalov
1246,2014-07-01 00:06:24,"@abotalov ok -- I think this is looking good -- if you squash the commits I'll go ahead and merge it in
",twalpole,abotalov
1245,2015-02-26 21:55:11,"@twalpole That would do it for us! I can write a section to add to the _Gotchas_ blurb in the README for your patch, if you like.
",pnc,twalpole
1245,2015-02-26 22:15:20,"@pnc - sure
",twalpole,pnc
1242,2014-03-13 10:35:23,"I have the exact same problem with 2.2.1, and it was working perfectly before with 2.0.2. All my specs with a select failed now. @kiddrew where you able to fix that on our side?
",gillien,kiddrew
1242,2015-12-07 10:21:52,"That also happens when using Materializecss (with js: true), in that case is enough to pass the  visible: false option (thanks @twalpole)
",alexdesi,twalpole
1241,2014-07-01 22:54:39,"@abotalov Ok to close this since its basically in the latest changes?
",twalpole,abotalov
1238,2014-02-06 17:10:27,"@jnicklas May the reason be that you wanted to share code between matcher methods? If yes, then it seems to be solvable.
",abotalov,jnicklas
1237,2014-09-23 18:05:00,"@sbonebrake - the assert_no_selector isn't verifying that the driver is reset though -- its verifying that the session is reset - ie - no content in the sessions page. 
",twalpole,sbonebrake
1237,2014-09-23 18:12:08,"> @sbonebrake - the assert_no_selector isn't verifying that the driver is reset though -- its verifying that the session is reset - ie - no content in the sessions page.

The problem is that check doesn't make sense for all drivers. A native Android app doesn't respond to the `""/html/body/*""` xpath selector.
",bootstraponline,sbonebrake
1236,2014-02-27 11:26:55,"@phansch I'm not sure, in my case the file type was completely missing in the mime-types, but seems you're having a different issue.
",darthdeus,phansch
1235,2014-02-03 14:06:45,"Wow, awesome pull request! Thanks @abotalov. This thing is huge, so I'll have to review this properly. At a first glance, I really like it though. The proposed `window_opened_by` is very nice IMO, exactly what you'd want in most cases. Also, the fact that it synchronizes is very nice. I think the proposed API is definitely _much_ better than what we have now.

Does this include some method of returning all currently open windows? I didn't find it in the code. I think that would be desirable. We don't have it now either so it's not necessary for this to get merged.

One question is what we do with version numbers. I agree that the current window API can barely be described as working, so maybe we aren't _breaking_ anything per se. But still this would probably require a major version bump, right? I'm perfectly okay with doing a major version bump for this though.

@joliss, @twalpole your thoughts on this?
",jnicklas,abotalov
1235,2014-02-03 14:10:34,"@jnicklas AFAIK this pull request doesn't break backwards compatability. It adds deprecation warning but it seems to be OK.
From http://semver.org/ :
`Minor version ... MUST be incremented if any public API functionality is marked as deprecated.`

So it's OK to release a minor version with this.
",abotalov,jnicklas
1235,2014-02-03 15:10:56,"@jnicklas Re bumping the major, I'd say do it - there's no harm, and I also don't see that much reason to wait and coalescse multiple breaking changes into a single new major version. So ""Capybara 3.0.0 released, only breaking change is new window API superceding `.whatever`"" seems like a perfectly reasonable plan. (I have bumped the major version of [jquery-ui-rails](https://github.com/joliss/jquery-ui-rails) several times for fairly trivial reasons - it's at 4.x now - and not had any issues.)

No thoughts on the actual window API, I've never had to deal with windows.
",joliss,jnicklas
1235,2014-02-05 00:48:17,"Thanks for the heads up, @jnicklas. I'll take a look and see if there's anything we can't implement in capybara-webkit. At first glance, I don't see anything that looks too difficult. We're still behind on Capybara 2.2 features, but I hope to get caught up soon.
",mhoran,jnicklas
1235,2014-04-03 19:42:45,"@jnicklas @twalpole What do you think about it?
Should we release it in 2.3 and remove support for old `within_window` in 3.0?
Or release it in 3.0 and remove support for old `within_window` in 4.0?
",abotalov,jnicklas
1235,2014-04-15 01:22:16,"@abotalov I believe running with a window manager (fluxbox, etc) will solve most of these issues - see  https://github.com/twalpole/capybara/commit/126303097a6ab530da6cbb29c7aa8058ba979ae9  -  thats almost there - but I think the setting to hide the toolbar in fluxbox is needed --  currently the vertical height ends up 25px short
",twalpole,abotalov
1235,2014-04-22 21:17:56,"@twalpole Does it mean that you accept moving those methods to `Session`?
",abotalov,twalpole
1235,2014-04-22 21:27:59,"@abotalov Sorry I wasn't clear about that.  No I don't think they should be added to Session.  I like that they are currently available through current_window.  Maybe the result of current_window, should be a CurrentWindow singleton that supports the resize, maximize, etc methods - instead of just a Window object.
",twalpole,abotalov
1235,2014-04-22 21:57:48,"@twalpole Do you mean that all methods except `maximize`, `resize_to`, `close`, `size` should be delegated from `CurrentWindow` to `Window` using `method_missing`?
",abotalov,twalpole
1235,2014-05-27 20:57:32,"@twalpole I made defined fixes so please review it again. Last commit:
- fixes issue with maximize on Travis
- allows operations with non-current window
- adds a sleep to `switch_to_window`
- rebased PR
",abotalov,twalpole
1235,2014-05-28 16:32:25,"@abotalov other than the comments I added about just popping scopes instead of fully resetting it (which could end up hiding bugs elsewhere), and the failing tests I think its looking good.  I've restarted the tests to see if the failures were just a fluke (jruby will fail due to a bug in nokogiris xpath querying under jruby)
",twalpole,abotalov
1235,2014-05-28 20:36:58,"@twalpole I fixed the issue with scoping inside `within_window`.
",abotalov,twalpole
1235,2014-05-30 17:23:36,"@abotalov  -  So after rerunning the failed spec runs a couple of times - they will all eventually pass - other than possibly making sure the windows are opened in within_window_spec before the tests run , is there anything else you feel should be changed here or do you believe its ready for merging into master?
",twalpole,abotalov
1235,2014-06-01 18:57:50,"@twalpole I fixed intermittent issues related to windows (those that appeared more than one time at Travis). Last commit has been amended many times.

I don't plan to change anything here but if you see any issues I'm able to fix them.
",abotalov,twalpole
1232,2014-01-17 23:59:53,"@jnicklas Per your request!
",tmertens,jnicklas
1232,2014-01-25 19:23:07,"@jnicklas Any update on this and/or when it might be merged in?  I would love to see this make the next gem release.  Let me know if there are any other changes you would like me to make.
",tmertens,jnicklas
1232,2014-01-31 15:27:52,"@jnicklas 

Since scenario names are no longer being defined using values from the options hash, the `tap` is no longer necessary and I replaced it with the standard `let`.

`tap` is actually a very simple and useful construct which allows you to 'tap' into a call chain.  It takes the result of the method call being tapped into and passes it into the `tap` block.  So, in this case it was effectively creating the hash and passing it into the block of specs as the variable named 'options' at runtime.  In this case I was using it to avoid using an instance variable and to scope the options hash only to the block where it was required, preventing it from polluting the environment outside of the options specs.  You cannot use variables defined in `let` blocks inside scenario descriptions because `let` values are not available until the specs are actually being executed, so either `tap` or some other runtime variable was required for the looped tests that were previously implemented.  Since the loops were removed and the option names from the hash are no longer being used in the test names, we can drop the `tap`.
",tmertens,jnicklas
1232,2014-02-03 22:57:51,"@jnicklas do you have any preference on the proposed solutions above?
",tmertens,jnicklas
1232,2014-02-04 17:12:51,"@abotalov That is a possibility, but then we are calling a private method in the Finders module from the Matchers module. It is certainly simpler, but I'm not sure how I feel about this.

EDIT: I should add that this is effectively the same as using an `all_ignore_count` method, but using an existing private method instead of (new) public one which, really, would delegate directly to `#resolve_query` anyways.
",tmertens,abotalov
1232,2014-02-12 08:47:19,"ping @jnicklas 

EDIT: btw while working on #1241 I moved `Simple#resolve_query(query)` and `Finders#resolve_query(query)` to `Query#resolve_for(node)` (and added `find_css` and `find_xpath` to `Node::Simple` and `Node::Base`)

So I hope it will be refactored there to:



and you can merge it as it is currently
",abotalov,jnicklas
1232,2014-02-19 19:00:25,"@abotalov `Capybara::Helpers#failure_message` already has conditions for `:minimum`, `:maximum`, and `:between` so I don't believe any change is necessary.

Frankly, I think the way the failure message is handled is rather ugly and I would change it to use sideband data output by the `matches_count?` method; however, to do a proper refactor would probably break hundreds of tests that assert on the content of the failure messages, so I don't see myself doing that in this PR.
",tmertens,abotalov
1232,2014-02-19 19:15:16,"@tmertens After merging of this pull request failure message returned by `Helpers#failure_message` will be incorrect if several options will be passed.

Example:
`have_css('#id', minimum: 1, maximum: 3)`

Message returned by `failure_message` will be like `""expected to find css ""#id"" at most 3 times""` and won't check for existence of `:minimum` key.

That's what I meant when I wrote previous comment.

But now I think that solving that issue won't be enough. Consider the following case:
`have_css('#id', count: 2, minimum: 3, maximum: 1, between: 5..7)`

It's clear that this query is invalid. But currently query doesn't check those parameters. I think query should check parameters and normalize them. For example if `:minimum => 1` and `:maximum => 3` have been passed, then failure message should be `""between 1 and 3 times""`. Also query should raise if conflicting options have been passed to it.

So it seems there is no need to fix bug outlined above in the scope of this PR as some refactoring is needed. I hope this pull request will be merged soon.
",abotalov,tmertens
1232,2014-02-19 22:03:05,"@abotalov Yes, I understand the issue as you mentioned with several options being passed.

This is where sideband data from the matches_count? method would come in helpful and would ultimately replace the failure_message helper method.  I took an initial stab at this and got it working for `Capybara::Result` but began running into additional test failures when `Helpers#failure_message` is removed because it is also used by `Capybara::RSpecMatchers`.  I haven't fully resolved this yet and I'm not sure I want to tackle it in this PR.  I haven't had time yet to look more into the RSpecMatchers failures.
",tmertens,abotalov
1232,2014-02-19 22:37:32,"@abotalov I'm inclined not to make any further changes to this PR without input from @jnicklas since he is ultimately responsible for approving/merging this afaik and I don't want to waste effort making changes which depend on another PR which may or may not get merged in.  This is a very important feature for us to get into the mainline, so I will punt on this until I hear more from him.  I am hoping to get this merged sometime soon so that we can switch back to an official release of Capybara in the near future rather than running off of a fork.
",tmertens,jnicklas
1232,2014-02-19 22:37:32,"@abotalov I'm inclined not to make any further changes to this PR without input from @jnicklas since he is ultimately responsible for approving/merging this afaik and I don't want to waste effort making changes which depend on another PR which may or may not get merged in.  This is a very important feature for us to get into the mainline, so I will punt on this until I hear more from him.  I am hoping to get this merged sometime soon so that we can switch back to an official release of Capybara in the near future rather than running off of a fork.
",tmertens,abotalov
1228,2014-03-03 12:55:00,"@jamesfzhang did you find out what was wrong? I seem to be having a similar issue. I have other tests throughout the application that submit forms and have js enabled but one form is not submitting. Capybara is finding the button but the form is hanging.

Also,  @jnicklas do you have any troubleshooting tips I could follow to get this sorted? There are more details of the problem here: http://stackoverflow.com/questions/22099004/trouble-shooting-issues-with-capybara-not-submitting-a-form
",QBD,jamesfzhang
1228,2014-03-03 12:55:00,"@jamesfzhang did you find out what was wrong? I seem to be having a similar issue. I have other tests throughout the application that submit forms and have js enabled but one form is not submitting. Capybara is finding the button but the form is hanging.

Also,  @jnicklas do you have any troubleshooting tips I could follow to get this sorted? There are more details of the problem here: http://stackoverflow.com/questions/22099004/trouble-shooting-issues-with-capybara-not-submitting-a-form
",QBD,jnicklas
1225,2014-04-09 05:46:01,"I think @metaskills means JS's `document`.
",abotalov,metaskills
1225,2014-04-09 18:59:09,"@metaskills if you want to provide more info here we can reopen this issue, until then I'm going to close it.
",twalpole,metaskills
1221,2014-01-06 02:22:28,"@JonRowe @myronmarston Can you alias before defining the method? (Given that I'm defining the RSpec 2 versions in `Matcher` and the RSpec 3 versions in it's descendants.
",thomasfedb,JonRowe
1221,2014-01-06 02:22:28,"@JonRowe @myronmarston Can you alias before defining the method? (Given that I'm defining the RSpec 2 versions in `Matcher` and the RSpec 3 versions in it's descendants.
",thomasfedb,myronmarston
1221,2014-01-06 02:47:19,"@JonRowe Yeah, and I opted to avoid duplication.
",thomasfedb,JonRowe
1219,2014-01-06 00:31:56,"@jdelStrother You missed one, see line 95.
",thomasfedb,jdelStrother
1219,2014-01-06 18:40:37,"@jnicklas Any timeline on a new gem being released?
",thomasfedb,jnicklas
1219,2014-06-04 21:11:05,"@aprescott Capybara 2.3.0 has been already released.
",abotalov,aprescott
1218,2014-01-06 17:37:10,"@jnicklas I'm rerunning the failed test since it failed trying to install the json gem which seems to install just fine under 2.1 for me, so it may just have been a spurious failure (will know once travis runs it again) - however while looking into this I did notice that since the rspec dependencies for 2.2 are setup as
Gem rspec-2.2.0
  rspec-core (~> 2.2)
  rspec-expectations (~> 2.2)
  rspec-mocks (~> 2.2)

it actually just loads all the latest 2.14.x versions of rspec-core, expectations and mocks -- so its really not testing rspec 2.2 as a minimum version.   That leaves rack, rack-test, nokogiri and cucumber as the packages its testing minimum versions of.   For me its not really worth testing the minimum versions of them for a testing tool (I'd feel differently if capybara was a library used in production)
",twalpole,jnicklas
1218,2014-01-06 18:42:54,"@jnicklas The rerun was fine, so this failure may have just been a temporary issue with travis
",twalpole,jnicklas
1218,2014-01-06 18:47:28,"> @joliss, @twalpole I'm thinking that the base versions Gemfile maybe isn't worth the trouble.

Here's the original reasoning: I was assuming that at some point we'd accidentally use a feature that wasn't supported by the minimum version of a dependency, without bumping the version spec in `Gemfile` at the same time. So I added the base version Gemfile in order to avoid having to deal with issues like ""Capybara breaks with old version of $dependency"". In other words, it was intended as a time saver. If it's not saving time, we should perhaps remove it.

I don't believe the `Gemfile.base-versions` test has ever actually caught anything, has it? If it hasn't, perhaps that's evidence that we don't need it.

Then again, seeing @twalpole comment's, perhaps this issue is unrelated.

I'll leave it up to you all.
",joliss,twalpole
1218,2014-01-07 18:53:37,"@jnicklas One thing to keep in mind is that we will probably want to test with both rspec 2 and 3 once 3 is final
",twalpole,jnicklas
1218,2014-02-03 13:41:57,"@twalpole true, but we don't have _that_ much code which integrates with RSpec. When we make changes to it, we could just run that manually.

@abotalov what does the bundler version have to do with this?
",jnicklas,abotalov
1218,2014-02-03 13:41:57,"@twalpole true, but we don't have _that_ much code which integrates with RSpec. When we make changes to it, we could just run that manually.

@abotalov what does the bundler version have to do with this?
",jnicklas,twalpole
1218,2014-02-03 14:25:50,"@abotalov I've just added a commit to remove that temp work around.
",salimane,abotalov
1216,2014-01-06 17:59:26,"Thanks @jnicklas. Can you point me to a better section? Actually we spent hours trying to figure out the right way to  override the :prefs, so thought it will be useful to share.
",tispratik,jnicklas
1208,2013-12-11 15:37:09,"@jnicklas : got it!
",lamvak,jnicklas
1208,2013-12-21 21:56:40,"@twalpole I just couldn't get back to it earlier. Thank you very much.
",lamvak,twalpole
1206,2014-04-03 22:00:32,"@dpdawson Any update on this, are you still seeing it?
",twalpole,dpdawson
1202,2013-12-02 09:59:36,"@paramadeep the server is booted lazily as soon as it's needed, maybe that's what's confusing you? It doesn't have anything to do with the Rails environment, Capybara isn't even aware of that.
",jnicklas,paramadeep
1202,2013-12-02 10:11:52,"@jnicklas I just mentioned the environment to check if it the reason. 

The problem is, the application server doesn't spin-up while the test runs. The tests fails as the application is not loading on to the browser.
Just to confirm the application is not started, I observed there is no port used by a ruby in the system while I'm debugging the test.
",paramadeep,jnicklas
1194,2013-11-26 20:14:36,"@jnicklas I have no clue why chromedriver has issues under jruby on travis - but even removing chrome from being tested with jruby it still fails on the server spec with 

1) Capybara::Server should bind to the specified host
     Failure/Error: Unable to find matching line from backtrace
     Errno::EADDRINUSE:
       Address already in use - bind - Address already in use
     # ./lib/capybara.rb:171:in `run_default_server'
     # ./spec/capybara_spec.rb:30:in`(root)'
     # ./lib/capybara/server.rb:70:in `boot'

Is testing on jruby worth dealing with issues?  Also the tests with chrome randomly fail at the end with ""cannot kill Chrome"", which I'm guessing is chromedriver not waiting long enough for chrome to exit in the travis environment (from the chromedriver source it appears to wait a fixed 5 seconds with no way to modify), so it may not be worth running with chrome either
",twalpole,jnicklas
1192,2013-11-25 17:56:08,"@myronmarston  a 2.14 release that adds the be_truthy/falsey matchers might be a nice help for tools like capybara that have test suites other project use to ensure compliance and would like to be runnable under rspec 2 and 3.
",twalpole,myronmarston
1192,2013-11-25 18:04:52,"@myronmarston  or maybe a separate gem that provides those two matchers
",twalpole,myronmarston
1192,2014-04-01 20:38:20,"@abotalov Yeah I had noticed the rspec 2.2 vs 2.14 issue too (I think I mentioned it another issue somewhere) --  I'm not sure if going back to 2.2 makes any sense at this point - it was released 4.5 years ago and if anyone is still using 2.2 they're probably not updating capybara --  I think testing against 2.14 and 3 is probably going to be fine in the future
",twalpole,abotalov
1186,2013-10-31 17:02:50,"@jnicklas , the same form works when I submit it through the browser. When I do a puts page.body in the step that is failing, I do see the csrf meta tag in the page body. It looks like this in the HTML

meta content=""YgH87uIz/13tjJ9VgxvpM0uQx6lwYWULWGVzlho7oF8="" name=""csrf-token"" 
",maheshguruswamy,jnicklas
1181,2013-10-28 22:53:44,"@comjf not really. Just check around on the issues list if you see anything open that you think you can fix. Thanks for helping out!
",jnicklas,comjf
1181,2013-11-26 18:47:50,"@jnicklas - how about we have the built-in drivers output a deprecation warning for now, but not test for it - and add a test for throwing an exception that is pending until version >= 3.0.0  which would be when semver allows for the change
",twalpole,jnicklas
1181,2013-11-26 20:50:44,"@twalpole that sounds like an excellent suggestion. :+1: 
",jnicklas,twalpole
1181,2014-02-05 19:35:22,"@comjf  Do you plan to work on this? Otherwise I can do it myself.
",abotalov,comjf
1181,2014-04-02 23:30:17,"@comjf / @abotalov  - any progress on this?
",twalpole,comjf
1181,2014-04-02 23:30:17,"@comjf / @abotalov  - any progress on this?
",twalpole,abotalov
1181,2014-04-03 00:57:31,"@twalpole Please review, I'm rusty and completely forgot about this. I didn't quite understand what you meant by 'have the built-in drivers output a deprecation warning for now', not sure how to do that. So I simply made a new exception and modified tests for it. When 3.0 is ready we can look at this again. 

Perhaps I should close this and make a new PR to a different branch? (I also need to squash my history)
",comjf,twalpole
1181,2014-04-03 17:35:13,"@comjf The thought was that instead of raising an exception currently, just do



but add a test that checks for an exception being thrown if the version of capybara is >= 3 which will remind us that we need to implement that in the future.  Don't test for the warn though since it's not actually an update to the required API for other drivers
",twalpole,comjf
1180,2013-10-28 23:01:04,"@jnicklas  ok, the defaulting now occurs in Capybara::Node::Simple#value, and tests are there for both value and submission
",twalpole,jnicklas
1178,2016-10-12 17:08:50,"@davout Since it sounds like you're using the rack_test driver you can just do `element.native['value'] = 'whatever to set'` if you really really want to set a readonly element.  The bigger question is why you would want to be setting a readonly element since a user couldn't, and even if you were using a JS capable driver you should be setting it the same way a user would rather than using execute_script
",twalpole,davout
1175,2013-10-18 16:12:33,"@pawel2105 Also you can use a headless selenium - ghostdriver
",abotalov,pawel2105
1175,2014-06-01 16:55:52,"@twalpole That seems like an important thing to mention in the [""Finding"" part of the README](https://github.com/jnicklas/capybara/blob/master/README.md#finding) no?

For instance a comment like:


",olivierlacan,twalpole
1175,2014-06-01 17:18:38,"@olivierlacan There are plenty of things that don't work in Racktest besides visibility checking. So it shouldn't go there.
",abotalov,olivierlacan
1173,2013-10-28 22:10:40,"Our test suite passes against 2.0 of mime-types so I think we're all good on this one. Thanks @halostatue for the heads up.
",jnicklas,halostatue
1172,2013-10-20 17:56:07,"@jnicklas I like `go_back` and `go_forward` names!
",nashby,jnicklas
1172,2013-10-20 21:01:19,"@jnicklas done!
",nashby,jnicklas
1172,2013-10-27 11:41:44,"@jnicklas please let me know if I should change anything else.
",nashby,jnicklas
1169,2014-05-29 19:07:43,"@mlitnewski why should you test of nil? What's the idea behind that? Except you would check whether there is some tag like this `<input name=""foo"">`, but that's does not change the browsers behavior. After submitting it still sends an empty string and not a nil if i remember, as far as I know.
",gurix,mlitnewski
1165,2013-09-19 21:21:43,"My bad, thanks @jnicklas 
",thatandyrose,jnicklas
1165,2015-11-13 02:59:44,"@jnicklas (And anyone else this may concern), this has bitten me too, and although it was pretty easy to find an answer and fix it, it is a bit hacky to use a RegEx, and it means we can't test for the right text neither on CSS or on the code.

I image this kind of inconsistency would be pretty easy to fix, or at least to define a ""standard"" and explain which drivers are the exception (Either Selenium and you test code, and have to be hacky when using headless, or you test the CSS-ed version and Selenium is flagged).

I'm also Ok with suggesting using RegEx from the start and documenting it, or whichever other solution is decided on, I just think we shouldn't let any inconsistencies ""slide"", especially considering pretty much everything is working really smoothly. :D
",frnco,jnicklas
1165,2015-11-13 03:30:40,"@frnco Which headless driver are you referring to?
",twalpole,frnco
1165,2016-04-20 08:06:20,"@momolog
`text` and similar methods try to return text that is `roughly what a text-only browser would display`.

For example Webdriver specification explicitly says that `text-transform` should be respected. See
https://www.w3.org/TR/webdriver/#getelementtext
",abotalov,momolog
1165,2016-04-20 10:58:53,"@abotalov So `has_content?` is **not** meant to check for content of the page body?
Checking for the raw content therefore should be done via `page.find('body').text`?
",momolog,abotalov
1165,2016-04-20 14:04:56,"@momolog This is as designed - Capybara is designed to emulate user behavior and therefore any driver which processes CSS should ""see"" the text as a user sees it. In your case you are applying a text-transform of uppercase so the user would see ""THANKS"".  Why would you not want to test for the text as the user sees it, that's the whole point of feature tests?  If you really need case insensitivity use a regex.  The exception to this is the rack-test driver which doesn't process CSS (or JS, ...) so is really only useful for very simple testing nowadays
",twalpole,momolog
1163,2013-09-16 16:47:34,"Thx @twalpole . Your note solved the problem:


",nagyt234,twalpole
1161,2013-09-16 08:04:55,"Just rebased it and rewrote test, @jnicklas could you review this one? At least it checks that server is available if we bind 0.0.0.0 address.
",route,jnicklas
1157,2013-10-20 16:44:06,"I agree with @twalpole, closing.
",jnicklas,twalpole
1156,2013-10-20 19:32:39,"@jnicklas No, I don't experience such issues
",abotalov,jnicklas
1153,2013-08-25 17:22:48,"@twalpole Sorry about the disturbance.
",JuanitoFatas,twalpole
1142,2013-08-27 14:23:26,"@jnicklas All of the docs I read for saving a page pointed to the `save_and_open_page` method, but it's now painfully obvious that I could just call `save_page` from a step.

Still, I found it jarring that when I first attempted to save and open a page, that missing the Launchy gem prevented it from saving at all.
",justincampbell,jnicklas
1132,2013-08-08 01:43:52,"@jnicklas Yeah, It's not the Capybara. I debugged with chromedriver and finally found that there's a pending request in the network list, which was intermittently blocked by the China Great Fire Wall. After I set proxy for chromedriver the problem was gone. 
",ryancheung,jnicklas
1128,2013-07-31 16:30:41,"@gerry3 Look like quitting all ""zombie"" instances of chromedriver helps with the case of Cucumber too :)
",phuongnd08,gerry3
1125,2013-07-23 02:45:55,"This looks good to me. rspec-rails master is green under it.

For context, we're deprecating and removing `example` in favor of it being yielded to the hook as a block argument. To support both RSpec 2 and 3, though, libraries will need to do something like @thomas-holmes's patch.

Thanks :heart: 
",alindeman,thomas-holmes
1125,2013-11-14 16:35:25,"@jnicklas, RSpec 3.0.0 is near! Any chance we can get a capybara release pushed out with this change?
",alindeman,jnicklas
1121,2013-09-12 01:35:39,"@brycesenz - i'm struggling to get my tests working with ssl as well.  Was able to use your monkey patch but then i still struggled to get selenium (firefox) to automatically accept the self-signed certificate.  Didn't see this conversation continued on the mailing list.  Where did you end up with things?

thx
",kbaum,brycesenz
1121,2013-09-12 18:52:28,"@kbaum - I looked through the mailing list, but honestly, it looked like I was the only one having SSL problems so I didn't post anything.  If you create a new issue and link it back here though (or some easier alternative), we can try to figure out what's going wrong.
",brycesenz,kbaum
1121,2013-09-12 20:46:45,"@brycesenz - I would but it seems that @jnicklas didn't think it was pull request worthy.  I responded to a thread on the mailing list, but so far nobody else has spoken up.  I was able to get things working by following your example and monkey patching the responsive? method.  I also had to ensure that i was using the latest firefox as firefox 17 did not seem to honor the ignore ssl check option.  Overall, i think some more light needs to be shed in this area.  
",kbaum,brycesenz
1121,2013-09-12 20:46:45,"@brycesenz - I would but it seems that @jnicklas didn't think it was pull request worthy.  I responded to a thread on the mailing list, but so far nobody else has spoken up.  I was able to get things working by following your example and monkey patching the responsive? method.  I also had to ensure that i was using the latest firefox as firefox 17 did not seem to honor the ignore ssl check option.  Overall, i think some more light needs to be shed in this area.  
",kbaum,jnicklas
1121,2014-09-01 20:41:55,":+1:  This is a huge issue for me. Thanks @kbaum and @brycesenz for the patch.
",volkanunsal,kbaum
1121,2014-09-01 20:41:55,":+1:  This is a huge issue for me. Thanks @kbaum and @brycesenz for the patch.
",volkanunsal,brycesenz
1121,2015-02-22 22:04:31,"@brycesenz was there ever a less hackful way found to get Capybara to work with SSL? I found [your post](http://cowjumpedoverthecommodore64.blogspot.com/2013/09/if-your-website-runs-under-ssl-than.html) saying there was going to be an update, but couldn't find one.
",bbuchalter,brycesenz
1121,2015-02-22 22:24:31,"@bbuchalter - I don't know whose blog that is, but it isn't mine.  I'm glad they liked my code though!  I still use the same code as I have on this post; I kind of want to dig back into what exactly is going wrong, but I've been swamped with other projects and standing up a few gems of my own.

Sorry I can't be of more help right now, but for the sake of all of us on this thread, post back if you find a better way!
",brycesenz,bbuchalter
1115,2013-07-23 23:53:29,"I think @srawlins's analysis is spot on.
",jnicklas,srawlins
1115,2013-07-28 08:01:00,"@jnicklas I think this can be closed since #1127 was merged :)
",nashby,jnicklas
1112,2013-07-26 16:04:50,"I agree with @twalpole , this is not a change that should be made - `with_in` doesn't make sense, and neither does `fillin`, so neither proposed change is good.
",EamonNerbonne,twalpole
1109,2013-09-04 20:19:44,"@jnicklas I ran into this issue today and wrote an example to reproduce the error. I forked and updated your gist [here](https://gist.github.com/midu/6442311)

the failing test is the [third one](https://gist.github.com/midu/6442311#file-template-rb-L56-L76)

Hope this helps
",midu,jnicklas
1109,2013-11-08 20:59:18,"@midu I submitted a patch to nokogiri https://github.com/sparklemotion/nokogiri/pull/968 that should fix this -- it was merged in a week ago.
",twalpole,midu
1109,2013-11-08 23:56:09,"That's fantastic @twalpole, thank you very much!
",midu,twalpole
1109,2013-12-07 19:21:38,"@mattvleming - I dont think you can actually use nokogiri from the github repository like that - https://github.com/sparklemotion/nokogiri/blob/master/Y_U_NO_GEMSPEC.md   
",twalpole,mattvleming
1109,2013-12-07 20:18:48,"Wow that's interesting. To summarize for others, basically Nokogiri doesn't have a .gemspec so that means you can't reference to their git repo in a Gemfile, when you might want to if their master branch has fixes merged in but those fixes haven't been released yet. Thanks a lot @twalpole, I found a way to get around the bug I was having–the code is more hideous but it'll have to do. 
",mattvleming,twalpole
1106,2013-07-02 16:32:39,"@Shelvak If you are using rails default session storage then the session var is actually passed as a cookie back and forth and should be cleared by Capybara.reset!.  If instead you have changed the session store to use the database, memcache, or something else then you'll have to see why those aren't getting cleared out.
",twalpole,Shelvak
1103,2013-07-02 18:03:46,"@jnicklas good catch.  I submitted a PR with tests that would fix this issue, although this does raise the question of whether within_frame should be allowed to work in this case, since the frame being switched to is outside the within 'table.letter-opener' scope
",twalpole,jnicklas
1103,2013-07-02 22:21:45,"Fixed by #1110! Thanks @twalpole.
",jnicklas,twalpole
1103,2013-07-11 21:34:51,"@jnicklas since #1110 was merged I think it can be closed.
",nashby,jnicklas
1103,2013-07-11 23:35:26,"Ooops, forgot to click the button ;) Thanks @nashby 
",jnicklas,nashby
1101,2013-06-18 15:06:12,"@abotalov this is exactly what I was using it for.
",jsteiner,abotalov
1097,2013-07-04 06:47:36,"@alishutc we actually handle that case. The synchronize behaviour has gone through a lot of iterations, and I think the current behaviour is quite sophisticated and should cover most cases quite well. Bugs like this aside ;)

`synchronize` actually does nothing when it called inside another `synchronize` block. Since pretty much every call you make into Capybara is wrapped in `synchronize`, this means that sub-operations, such as getting the text of an element, never actually get stuck at waiting for a removed element. Instead the error will bubble, and the whole operation will retry instead.
",jnicklas,alishutc
1096,2013-11-16 21:52:14,"@jnicklas sorry, this was one of those ""suddenly it was magically gone"" issues that pop up from time to time.
",JeanMertz,jnicklas
1092,2014-04-03 21:52:51,"@jnicklas What sort of matcher were you thinking?  Obviously the issue is that the code doesnt know that click_button is actually going to direct to a new ""page"" so the headers are still for the current page.
",twalpole,jnicklas
1092,2014-04-04 17:31:49,"@dnagir click_button doesnt wait for the javascript to execute before returning, so its possible the response_headers is being accessed before that POST occurs (in your original code).  I think what @jnicklas was thinking was to have a has_response_headers matcher that would actually wait for the headers to match the passed in values.   
",twalpole,jnicklas
1092,2014-04-04 17:31:49,"@dnagir click_button doesnt wait for the javascript to execute before returning, so its possible the response_headers is being accessed before that POST occurs (in your original code).  I think what @jnicklas was thinking was to have a has_response_headers matcher that would actually wait for the headers to match the passed in values.   
",twalpole,dnagir
1092,2014-04-04 17:39:55,"@jnicklas Yeah - we don't have matchers for any other non-user visible type things specifically because Capybara is a user interaction testing tool.   Maybe a has_content_type matcher would make more sense, since that is at least something that the user would ""see""
",twalpole,jnicklas
1091,2013-05-24 07:46:48,"@jnicklas LOL. Sorry for this, I have no idea where it came from, don't even remember starting to type ""Long..."" :(
",dnagir,jnicklas
1089,2013-06-28 18:29:28,"@rafaels could you find the issue?
",filipegiusti,rafaels
1089,2013-07-20 02:56:31,"@sjmadsen - i am also seeing this problem sporadically.  Seems like i have proper assertions too.  Would it be possible to just kill all database pids before running DatabaseCleaner?  I am using postgres and i tried doing this but it didn't seem to help:



Not sure why that didn't help...
",kbaum,sjmadsen
1089,2013-07-22 14:44:32,"I also saw deadlocks when moving `DatabaseCleaner.clean` to an `around` hook. For now I am tolerating the false positive failures and hoping for some traction here.

@kbaum The problem isn't deadlocks for me, but rather DatabaseCleaner getting to run too soon. Even in the case of a deadlock, though, killing the connection is addressing a symptom, not the root cause.
",sjmadsen,kbaum
1089,2013-07-25 12:26:53,"@sjmadsen - In one sense, i agree that it is addressing the symptom, but at the point DatabaseCleaner is cleaning the database the tests are over.  I can see an argument that DatabaseCleaner is supposed to clear everything from the database including data and locks.  Why should the developer have to worry about this?  Isn't the point to make testing easier?
",kbaum,sjmadsen
1089,2013-07-25 12:54:15,"@kbaum The original problem in this issue was that the tests are not over, and yet DatabaseCleaner has cleaned out the database. In my case, an Ajax request is still in-flight and the response blows up because an associated record is suddenly gone.

To your larger point, I agree that the programmer should not have to worry about stale locks. If this is a Capybara problem, then only Capybara developers (or someone willing to dig into the code) has to think about it. Everyone else benefits from the fix. In general, papering over a symptom is bad practice. You might fix a deadlock by killing the process, but since the root cause has not been resolved, it will likely cause other failures elsewhere.

I may have time later today to dig into this. I'll send a PR if I come up with anything.
",sjmadsen,kbaum
1089,2013-07-25 21:02:33,"Like @rafaels, my issue ultimately ended up being a badly designed finder. This stuff can get tricky with Ajax, so for any future person stumbling across this:

In my case, I have a section of the page that expands and collapses via a link. Inside the expanded section, I have a form that allows the user to add a new record. Upon clicking the submit button, the new record is created and only that part of the page is refreshed. Here's the key part: I don't want the expanded part to stay expanded.

So I wrote two examples: one to test that the new record was properly added, the second that the ""expand"" link didn't appear (it should be ""collapse"").

The issue is that merely testing for the lack of the ""expand"" link wasn't enough. The link isn't there when the Ajax request starts, and so Capybara is happy and continues on. I had to add an extra `expect()` for something that wasn't on the page so that Capybara would properly wait for the Ajax request to complete, _then_ test to ensure the expand link didn't exist. I end up testing that the new record was created twice, although the ""success"" example checks for a couple of other things, too.

Moving DatabaseCleaner to an `around(:each)` hook still causes deadlocks for me, but that is a separate issue from what this started as. If it's a real issue for someone, a new issue should probably be opened.
",sjmadsen,rafaels
1088,2013-05-22 18:00:26,"@stewart The difference is that with a standard Ruby instance variable you are actually assigning the value.  In this case you're inputting data (as a user would) to a form element that may change the value as its entered, may deny the entry, or may be a checkbox/radio etc.   If I had  find('input[type=checkbox]').value = ""abcdefg""  what would you expect it to actually do?  I might think that would change the value attribute of the checkbox, but by aliasing it to set what it actually does is just check the checkbox, no matter what the value attribute of the checkbox is
",twalpole,stewart
1086,2013-05-17 16:55:27,"@lichtamberg   save_and_open_page uses launchy, and if iirc there were conflicts between spork and launchy at one time.  Not sure if those were ever worked out. but those two projects would probably be the best place to start looking
",twalpole,lichtamberg
1082,2013-05-13 20:19:47,"@nathanvda - yeah the behavior six months ago was due to it being converted to xpath, and then issues with namespaces.  That goes away now since the query is passed straight through as css.  XPath of course can be more powerful for certain types of queries, but in this case the css is definitely clearer.
",twalpole,nathanvda
1075,2013-05-09 18:06:10,"Thanks for the feedback. I'll take some time to try and clean it up. @jnicklas can you give me some feedback on what part you don't think is ""quite correct""?
",mikegehard,jnicklas
1074,2013-05-07 06:36:40,"@hajee then you're not really testing the app the way a user would be using it, and you could possibly be hiding errors that do exist in your app with embers caching etc.  In tests where it's important you could just have the test wait for the relevant change to appear in the DOM. I definitely don't think running some JavaScript before and after every Capybara call makes sense since that includes a bunch of things that would never trigger a change on the page (searching page for elements, getting contents, reading values, etc)
",twalpole,hajee
1074,2013-05-09 15:45:00,"I agree with @twalpole. Testing like this isn't good and we shouldn't encourage it. Besides, this doesn't work as intended.
",jnicklas,twalpole
1074,2013-05-09 17:45:18,"Ok. It was a nice learning experience. 

On 9 mei 2013, at 17:45, Jonas Nicklas notifications@github.com wrote:

> I agree with @twalpole. Testing like this isn't good and we shouldn't encourage it. Besides, this doesn't work as intended.
> 
> —
> Reply to this email directly or view it on GitHub.
",hajee,twalpole
1072,2013-05-09 06:52:10,"@mhoran is this the issue you're talking about? https://github.com/jonleighton/poltergeist/issues/176

It does seem like there may be no perfect solution here. I think it is important to be able to test the behavior of clearing out a field.

Another option would be to make it an explicit action: something like `clear_field 'name'` instead of `fill_in 'name', :with => ''`. The drawback is that it would need a new `clear` method on `Node` implementations. We could ease the burden on driver developers by putting a default implementation in `Capybara::Driver::Node` that just calls `self.set('')` and then leave it to driver developers to provide an alternate implementation if necessary to get the desired behavior.

What do you think, @jnicklas?
",TimMoore,mhoran
1069,2013-05-09 16:35:09,"@jnicklas  the requirement for ignoring leading line breaks comes from http://www.w3.org/TR/html401/appendix/notes.html#notes-line-breaks   -  This specifically refers to rendering, and browsers have taken this to affect the value - I think this makes the case that its an issue in parsing in Nokogiri/libxml2 less clear
",twalpole,jnicklas
1065,2013-10-30 22:11:37,"Solving issue with Racktest and Selenium returning different values for `#[]` would be nice but such solution can't be complete as in general Selenium returns not attribute but property.

There are many differences between them (see https://dvcs.w3.org/hg/webdriver/raw-file/default/webdriver-spec.html#reading-attributes-and-properties). It will be not possible to implement all those rules in Racktest without JS support.

@jnicklas Do you think that `#[]` of Capybara's Racktest driver should try to mimic behavior of Selenium where possible?
",abotalov,jnicklas
1063,2013-04-26 20:04:30,"@ipoltorak if you do something like the example below doesn't it work?


",carloslopes,ipoltorak
1063,2013-04-26 21:24:43,"@ipoltorak  After hooks are run in the opposite order they are defined, so make sure that your after hook is being defined after the hook that calls reset_session!
",twalpole,ipoltorak
1063,2013-07-04 06:53:14,"I think @twalpole pointed out the correct reason why this is happening.
",jnicklas,twalpole
1061,2013-04-20 10:20:55,"@twalpole well for the matter of tests, I'd expect the finder to return what a user would see one the page and not what the browser is internally doing.
",ohcibi,twalpole
1061,2013-04-20 14:37:05,"@ohcibi if you have some kind of locator (id, name, label, placeholder) for the input then you can use the :with filter of the field selector. So in the case above with an Id of ""input"" the following should do what you want

expexct(page).to have_field(""input"", type: ""range"", with, ""1"")
",twalpole,ohcibi
1061,2013-04-20 17:05:49,"@twalpole Thanks.. I was also stumbling over this in the meantime.. While this is a totally acceptable (or even better) solution for my current use case, I'd still consider the behaviour of the finder as a bug or at least as inconsistent.
",ohcibi,twalpole
1061,2013-04-20 19:05:58,"@ohcibi  Inspect the input in your page after you change its value from javascript.  The value attribute on the element will still have the original contents even though the input shows the new contents.  That is why an xpath query won't work.  Its neither a bug nor inconsistent, its just that you have to understand that by definition an xpath query has to be run against an XML document and is going to be matched against the attributes in that document.  That coupled with the DOM Level 2 interface spec for HTMLElement value (pasted below - note bold portion), means that an xpath query in the browser will see the value that was there at page creation time

> value of type DOMString
> When the type attribute of the element has the value ""text"", ""file"" or ""password"", this represents the current contents of the corresponding form control, in an interactive user agent. Changing this attribute changes the contents of the form control, <b>but does not change the value of the HTML value attribute of the element</b>. When the type attribute of the element has the value ""button"", ""hidden"", ""submit"", ""reset"", ""image"", ""checkbox"" or ""radio"", this represents the HTML value attribute of the element. See the value attribute definition in HTML 4.01.
",twalpole,ohcibi
1061,2015-12-30 01:50:21,"@daino3 if you know the page isn't dynamically changing then pass wait: 0 as an option to all your has_no_css? calls and the method will be almost instantaneous - the default has_no_css? will wait for Capybara.default_max_wait_time seconds to make sure the page isn't being loaded by an ajax call - if you know you don't have to worry about that passing wait: 0 will make it check and continue without a retry
",twalpole,daino3
1061,2015-12-30 17:21:59,"Thanks @twalpole! The `wait: 0` option made it got from 6 sec to 0.1! Gonna have to put that in the ol' tool kit. 

 I'm going to guess though, there's no ""nice"" way of getting around extracting a change in input value without executing some javascript... is that correct?
",daino3,twalpole
1060,2013-04-18 17:27:32,"@sjtipton Can you provide the actual spec which generates the exception?  A repeatable test case would be ideal.
",conradwt,sjtipton
1060,2013-04-18 22:23:06,"@sjtipton  If you're somehow including TextHelper into Capybara::RackTest::CSSHandlers then it could produce the behavior you're seeing. This is because TextHelper defines a concat function which would get called instead of the internal xpath concat in nokogiri/libxml
",twalpole,sjtipton
1060,2014-02-19 08:00:34,"@sjtipton you said ""within specific spec files"", Ruby does not make it possible to include modules lexically scoped to a single file. If you're including a module at the top of a file, _any_ file, you're including it in _every single Class_ in Ruby. Including everything inside Capybara.

This is bound to cause problems, not just with Capybara but with lots of other libraries too, essentially anything that relies on `method_missing` is going to crash and burn.

Be very careful about including stuff at the top level scope. Here's an illustration:


",jnicklas,sjtipton
1059,2013-04-17 23:46:44,"@abotalov thanks a lot!
",alfonsocora,abotalov
1059,2014-03-27 00:21:36,"@abotalov 
Thanks for this.
You can also use it with `within`


",serv,abotalov
1054,2013-04-14 14:02:52,"@TimMoore: we'd need the focusmanager thing for this. It's not acceptable that Firefox needs focus for this to pass.
",jnicklas,TimMoore
1051,2013-04-11 17:05:28,"@DivineDominion The name of the error message you posted ""Editing Events Ajax editing hides form after submission"" doesnt match the test you said is failing. Are you sure you're looking at the right test?
",twalpole,DivineDominion
1049,2013-04-11 07:13:00,"@awendt I'm guessing that the Capybara project wanted to be in line with Rails 4 which requires Ruby 1.9.3 or higher.
",conradwt,awendt
1049,2013-04-12 14:50:53,"@jnicklas Because I'd like to upgrade dependencies one at a time, not all of them at once. I haven't gotten around to testing my app on 1.9.3. I know I could but I'm just not there yet.

BTW, the same argument about 1.9.3 being ""highly compatible"" can be used to ask why you restrict your users to a specific Ruby version when other version are ""highly compatible""? ;-)
",awendt,jnicklas
1049,2013-04-12 15:21:02,"@awendt the reason we don't support 1.9.2 is because 1.9.2 is a broken piece of shit. We had constant issues with tests failing randomly, hanging or otherwise being a general pain in the ass on 1.9.2. As a result, our build was super unstable. Everything was always green on 1.9.3 and failing half the time on 1.9.2. Because there's no good reason to use 1.9.2 anymore, we decided to drop support for it.

The burden for supporting 1.9.2 was high, the cost for you to switch to 1.9.3 is very low.

And if you really want to upgrade your dependencies one at a time, just upgrade to 1.9.3 first, and then to Capybara 2.1.
",jnicklas,awendt
1049,2013-05-24 13:17:33,"@topherfangio +1. I really need to launch Capybara under ruby 1.9.2.
",Loremaster,topherfangio
1049,2013-05-24 19:41:33,"@topherfangio You have a couple of options:  upgrade to Ruby 1.9.3 and fix the issues within the Rails application or use Capybara 2.0.3.  Ideally, I would recommend the former course of action and there are resources on the Internet to help you move your Rails application forward.  Good luck.
",conradwt,topherfangio
1047,2013-04-14 17:50:46,"@jnicklas Overriding the self.connection method means you are bypassing AR's connection pool, thus making the code thread-unsafe.  My connection pool of size one ensures that there is still only one shared connection being used but because it's wrapped, it's thread-safe.
",mperham,jnicklas
1047,2013-04-14 19:28:46,"@jnicklas [Here's an example](https://gist.github.com/adammck/5383846#file-results-txt) of the thread-unsafe behavior of the current patch. The new patch is certainly strange, because we're actually using the `connection_pool` gem as a mutex, rather than a connection pool. But it works.
",adammck,jnicklas
1047,2013-04-16 18:36:39,"@mperham with AR connecctions, from what I understand, the first time you use a connection in any given Thread, it will check out a connection. So it's quite easy to accidentally check out a connection, just by forgetting to wrap a call in a `with_connection` block. `File.open` doesn't have that problem, since you can't forget to open a file, it has to be explicit.

This does seem safer than what we're suggesting now, but it's also a lot more cumbersome. Having to wrap all database interaction in a `with_connection` block is pretty annoying. Can we at least figure out how to raise an exception if the user forgets to use the `with_connection` block? Is that possible?

I'm also honestly very surprised that it's even possible to close a connection within a transaction. That's obviously an advantage in the context of Capybara, but it doesn't at all seem like a good idea in the grand scheme of things, and more sounds like a bug in ActiveRecord. Seems a bit iffy to rely on that, so maybe this solution is a bit hack-ish too.
",jnicklas,mperham
1047,2013-07-03 12:26:29,"@mperham, @adammck I'm inclined to close this issue. As I mentioned in my last comment, I'm not super satisfied with this proposed solution either. While it should be more threadsafe, it is also more likely to just hang the app if you're doing something wrong. Do you agree? Is this still something we should explore further?
",jnicklas,adammck
1047,2013-07-03 12:26:29,"@mperham, @adammck I'm inclined to close this issue. As I mentioned in my last comment, I'm not super satisfied with this proposed solution either. While it should be more threadsafe, it is also more likely to just hang the app if you're doing something wrong. Do you agree? Is this still something we should explore further?
",jnicklas,mperham
1047,2013-07-03 16:25:33,"I don't feel strongly about this. I opened the issue because I was experiencing weird intermittent errors when using the shared_connection hack from the README, which @mperham's alternative hack solved, but I don't have a better solution right now.
",adammck,mperham
1046,2013-04-11 04:30:52,"> NoMethodError:
>    undefined method `find_xpath' for #Capybara::Webkit::Driver:0x007fce2dce4a20

I had the same  issue and resolved it.

This reason is that the released version of capybara-webkit doesn't support Capybara 2.1.0 yet.
To resolve this, you should use it from `git://github.com/thoughtbot/capybara-webkit.git`.
Or using `poltergeist` instead of `capybara-webkit` as your [JavaScript driver](https://gist.github.com/barmstrong/21dcb9f17e328c71c9af#file-spec_helper-rb-L54) > @barmstrong
",tricknotes,barmstrong
1038,2013-04-03 19:35:03,"I agree with @twalpole, we should not be facilitating craziness like this.
",jnicklas,twalpole
1038,2013-04-03 20:16:25,"@abotalov if checking for changes to cucumber is really an issue, then you could add a Before step that stores the scenario and alias reset_sessions! to check for your tag name on the stored scenario and not call the original reset_sessions if the tag exists.  That way you get your desired ability to turn off session reset in your own code without worrying about cucumber.rb changing and without having to add a dangerous undocumented ""feature"" to capybara
",twalpole,abotalov
1038,2013-04-03 21:34:34,"Actually I'm not against documenting it in README.md. I just thought it's better not to write about it there.

Also I haven't understood @twalpole's comment. In current implementation after scenario hook will reset sessions after each scenario regardless of any tags. I don't know how before step hooks can help not to reset sessions in after hook.
",abotalov,twalpole
1038,2013-04-03 21:46:18,"@abotalov  -  And your reasoning for not documenting it, it being dangerous and having numerous iffy side-effects, is the exact reason I think it doesnt belong in capybara, and generally isnt a good idea to be suggesting people do in testing.  If its a test that needs the sesion to not be reset then its really one scenario and not two.  If its strictly for speed then look into tokens for login and/or bypassing part of authentication during testing.  As for how your own code can implement it given the current setup and without worrying about changes to cucumber.rb:  in a Before step you can store the scenario that is passed in into a global or instance variable somewhere.  Then you can alias the normal capybara reset_sessions!  with your own function that either calls the original reset_sessions! or doesnt based on the tags on the scenario you stored in the before step. 
",twalpole,abotalov
1037,2013-04-04 22:55:28,"@twalpole Good point, I partially agree. Yes, accept/reject_notification returns the text, but readability would suffer if we removed the message accessors, in my opinion. Specifically, because the text is assigned above the line where the alert is clicked. Granted, this is also the case for accepting/rejecting. The name `#accept_alert` doesn't lend itself to returning the text, either.





All that said, I would be in favor of removing the message accessors.
",mikepack,twalpole
1037,2013-04-04 23:07:53,"@mikepack - btw the reason the test you think should fail doesn't is that the javascript code used by selenium for the firefox driver (havent checked others) has an alertTimeout which it will wait for a modal dialog to show https://github.com/SeleniumHQ/selenium/blob/master/javascript/firefox-driver/js/firefoxDriver.js  .  Its set to 2 seconds by default, so you'll need to figure out if its possible to shorten that timeout in some cross browser fashion or extend your delay on the alert - and then the test will fail with a Selenium::WebDriver::Error::NoAlertPresentError
",twalpole,mikepack
1037,2013-04-04 23:11:11,"@mikepack I dont think having a var for the return really hurts readability much, and I think its better than the accessors where values ""magically"" appear but not until you've accepted or rejected the alert.  e.g. at a quick glance I might assume that alert_messages would include the message for the alert currently on the screen, but it doesnt until I call accept or reject
",twalpole,mikepack
1037,2013-04-04 23:38:28,"@twalpole Thanks for the tip, I'll mess with the timeouts.

I could see the potential confusion around alert_messages; this is how capybara-webkit surfaces the message, though I don't know the general sentiment towards it.

Having alert_messages could also cause confusion if used in conjunction with manual management of the notification. The alert must be wrapped with accept/reject to populate any messages. Eg:


",mikepack,twalpole
1037,2013-04-05 07:52:52,"This is shaping up quite nicely, @mikepack.

I think I agree with @twalpole, the `alert_messages` style accessors are confusing, and I think it's better to skip them. I think the most common use case is not to care about the message of the alert at all. One thing that _would_ be useful, imo, is something like this:



I think that gives a more elegant API to the most common reason one might want to look at alert/confirm messages in the first place, to make sure that we're confirming the right one. What do you think?

@abotalov that's too RSpec specific, imo. We might want to add matchers around that particular API, but honestly I don't really see the point.
",jnicklas,mikepack
1037,2013-04-05 07:52:52,"This is shaping up quite nicely, @mikepack.

I think I agree with @twalpole, the `alert_messages` style accessors are confusing, and I think it's better to skip them. I think the most common use case is not to care about the message of the alert at all. One thing that _would_ be useful, imo, is something like this:



I think that gives a more elegant API to the most common reason one might want to look at alert/confirm messages in the first place, to make sure that we're confirming the right one. What do you think?

@abotalov that's too RSpec specific, imo. We might want to add matchers around that particular API, but honestly I don't really see the point.
",jnicklas,abotalov
1037,2013-04-05 07:52:52,"This is shaping up quite nicely, @mikepack.

I think I agree with @twalpole, the `alert_messages` style accessors are confusing, and I think it's better to skip them. I think the most common use case is not to care about the message of the alert at all. One thing that _would_ be useful, imo, is something like this:



I think that gives a more elegant API to the most common reason one might want to look at alert/confirm messages in the first place, to make sure that we're confirming the right one. What do you think?

@abotalov that's too RSpec specific, imo. We might want to add matchers around that particular API, but honestly I don't really see the point.
",jnicklas,twalpole
1037,2013-04-05 07:53:30,"@mikepack also, can you shorten the README section a bit. It's very longwinded, imo.
",jnicklas,mikepack
1037,2013-04-05 08:12:44,"@abotalov well, `accept_confirm` doesn't conform to the sequence of events either, but that's just a sacrifice we have to make to allow wider support in drivers. I'd rather that `accept_confirm` didn't take a block, and always appeared after the action that triggered the alert to appear. I.e. this:



Unfortunately, it seems like that's not technically possible in some drivers, from what I understand.
",jnicklas,abotalov
1037,2013-04-05 16:15:53,"@jnicklas the `accept_confirm` after the fact approach would definitely be harder in capybara-webkit, but if it's agreed that it would be a much better API, I could do some spiking to see if it's possible.
",jferris,jnicklas
1037,2013-04-05 16:23:48,"I've updated the README to be more succinct and removed the message accessors.

@jnicklas while passing the expected message to accept/reject, if the actual message presented does not match the expectation, would you assume this throws an error? If so, the implicit expectation here is a little unclear.

@jferris thanks a ton. I'm interested in your results.
",mikepack,jferris
1037,2013-04-05 16:23:48,"I've updated the README to be more succinct and removed the message accessors.

@jnicklas while passing the expected message to accept/reject, if the actual message presented does not match the expectation, would you assume this throws an error? If so, the implicit expectation here is a little unclear.

@jferris thanks a ton. I'm interested in your results.
",mikepack,jnicklas
1037,2013-04-05 16:30:31,"@jferris if it's not too much bother, that would be excellent. I would definitely prefer an API without blocks if it's possible. I think Selenium supports that nicely.

@mikepack I would expect `accept_confirm` to raise an error if there is no confirm box to accept, so if passed an argument, it should raise an error if the text does not match.
",jnicklas,jferris
1037,2013-04-05 16:30:31,"@jferris if it's not too much bother, that would be excellent. I would definitely prefer an API without blocks if it's possible. I think Selenium supports that nicely.

@mikepack I would expect `accept_confirm` to raise an error if there is no confirm box to accept, so if passed an argument, it should raise an error if the text does not match.
",jnicklas,mikepack
1037,2013-04-05 16:51:26,"@jnicklas Just to confirm 

>  I would expect accept_confirm to raise an error if there is no confirm box to accept, so if passed an argument, it should raise an error if the text does not match.

Those errors would only be raised after the appropriate wait time, using synchronize, correct?
",twalpole,jnicklas
1037,2013-04-05 16:55:06,"@mikepack it would be great if these methods could accept a regex or a string to match against the text in the alert
",twalpole,mikepack
1037,2013-04-05 17:14:33,"@mikepack  The current PR has methods for dealing with alerts, confirms, and prompts in the session with these all calling accept/reject_notification, but not passing pass a type.  I know selenium doesnt differentiate between the 3 different types but are you sure the other drivers dont?  I notice your ""Option Two"" from above did have a type parameter.
",twalpole,mikepack
1037,2013-04-05 17:26:12,"@twalpole Good catch! Updated.
",mikepack,twalpole
1037,2013-04-05 18:52:58,"if I was writing those specs I think I'd put them all in one file, notifications_spec or modal_spec or something since they are basically all the same thing.  @jnicklas what are your feelings on that?
",twalpole,jnicklas
1037,2013-04-05 18:57:29,"@abotalov @twalpole The reason I put them into separate files is to keep consistency with all the rest of the DSL methods: `all`, `click_link`, `execute_script`, etc as `all_spec.rb`, `click_link_spec.rb`, `execute_script_spec.rb`, etc
",mikepack,abotalov
1037,2013-04-05 18:57:29,"@abotalov @twalpole The reason I put them into separate files is to keep consistency with all the rest of the DSL methods: `all`, `click_link`, `execute_script`, etc as `all_spec.rb`, `click_link_spec.rb`, `execute_script_spec.rb`, etc
",mikepack,twalpole
1037,2013-04-05 19:05:46,"@mikepack I get completely why you created the multiple files, and it does fit with the way everything else is setup (other than they should be accept_alert_spec.rb instead of accept_alerts_spec.rb etc)
",twalpole,mikepack
1037,2013-04-05 19:11:25,"@twalpole Another great catch. Updated.
",mikepack,twalpole
1037,2013-04-10 16:03:49,"@jnicklas @abotalov I'd be in favor of subdirectories, but this is a little off topic for this PR :smile:. Spending some time today in capybara-webkit
",mikepack,jnicklas
1037,2013-04-10 16:03:49,"@jnicklas @abotalov I'd be in favor of subdirectories, but this is a little off topic for this PR :smile:. Spending some time today in capybara-webkit
",mikepack,abotalov
1037,2013-04-18 16:49:29,"@jferris Any update on your spike?
",mikepack,jferris
1037,2013-04-18 17:14:31,"@mikepack I haven't gotten to look at it yet. I'll spend some time on it tomorrow. Thanks for the push.
",jferris,mikepack
1037,2013-04-18 17:19:56,"@jferris Thanks Joe. Some of my notes here: https://github.com/thoughtbot/capybara-webkit/issues/506
",mikepack,jferris
1037,2013-04-19 14:27:59,"@mikepack I did some research today and added notes to thoughtbot/capybara-webkit#506.
",jferris,mikepack
1037,2014-03-24 16:51:21,"@abotalov in terms of naming, I agree we should stick to the spec as much as possible.

The spec seems to only support reactive dialog management. As the issue you linked to points out, phantom doesn't accommodate this approach. So, the goal of this PR is to support both proactive and reactive management, which is why this PR currently wraps such behavior in a block.

Proactive management in headless drivers (eg capybara-webkit, poltergeist, ghostdriver) looks like this:
1. Developer takes actions on forthcoming prompts
2. Page ""displays"" prompt, but because it's headless does not block
3. Make assertions about the prompt messages cached by driver

Reactive management in Selenium looks like this:
1. Page displays prompt and blocks UI until action is taken
2. Make assertions about the message contents
3. Developer explicitly takes action to close dialog

Can you provide examples of how your proposed API would accommodate both of these cases?
",mikepack,abotalov
1037,2014-04-02 23:28:58,"@mikepack Any chance of getting this PR rebased against current master and the naming changes @abotalov mentioned integrated, I'd like to move forward with getting this finished up and integrated.   I agree that the block passing method is probably the only way to currently allow this feature to be implemented by all/most of the current drivers available, so unless @abotalov has a suggestion for how the API can work with the headless-drivers I think we can move forward with the current approach
",twalpole,mikepack
1037,2014-04-02 23:28:58,"@mikepack Any chance of getting this PR rebased against current master and the naming changes @abotalov mentioned integrated, I'd like to move forward with getting this finished up and integrated.   I agree that the block passing method is probably the only way to currently allow this feature to be implemented by all/most of the current drivers available, so unless @abotalov has a suggestion for how the API can work with the headless-drivers I think we can move forward with the current approach
",twalpole,abotalov
1037,2014-04-03 03:35:09,"@twalpole I've rebased off master, replaced instances of ""reject"" with ""dismiss"", and ""notification"" with ""modal"".
",mikepack,twalpole
1037,2014-04-03 17:58:57,"@abotalov  Ok - we can hold off a little while, but I would like to get this functionality into Capybara in the next few weeks, and in a way that all/most of the current drivers can implement.  Currently that looks to be with the block format, since prior knowledge of a modal dialog about to be opened, and the desired response seems to be needed by some of the drivers.
",twalpole,abotalov
1037,2014-04-04 17:20:22,"@mikepack - The async tests are failing since there is no code after executing the block that is waiting for the modal to appear
",twalpole,mikepack
1037,2014-04-04 17:22:48,"@mikepack - also if you could update the tests to the ""expect"" format rather than should due to the upcoming RSpec 3 that would be great -- thanks
",twalpole,mikepack
1037,2014-04-04 17:24:02,"@twalpole Yeah I noticed that as well. I'll do another pass and get everything passing.
",mikepack,twalpole
1037,2014-04-24 07:56:53,"I think I'm fine with merging this after issues pointed by @twalpole will be fixed.

However, what about naming a method `accept_alert_on` instead of `accept_alert`? IMO it would enhance readability.
",abotalov,twalpole
1037,2014-06-03 19:55:36,"@twalpole It would be also good to add more info to yard comments:



Also it would be good to make a pull request from modal to master branch. I think commit comments will have better visibility.
",abotalov,twalpole
1037,2014-06-03 20:22:25,"Apologies for the lack of movement. I'm not sure how I got this far without handling the async case that @twalpole mentioned (though I thought I tested it). One of the problems with it is that it would require the same wait logic that happens on `#synchronize`. I didn't want to dive too deep into sharing that logic.
",mikepack,twalpole
1037,2014-06-03 21:45:56,"@mikepack  - it did work with async - but only because selenium itself has a 2 second wait for modal boxes.  I implemented somewhat adjustable delays using the wait functionality built into selenium-webdriver. Its only somewhat because of the selenium 2 second delay which means it actually ends up being multiples of 2 seconds.  Anyway -- no problem for the lack of movement you had it mostly done - I've moved it over to PR #1322 if you want to see what I added to your PR
",twalpole,mikepack
1035,2013-03-29 18:01:32,"Hi @abotalov - this sounds like it could be related 

Currently at the top of acceptance_helper.rb I already have:

require ""spec_helper""
require 'capybara/rspec'
require 'rspec-rails'

Not sure what I need to do to fix it? 

Any help would be appreciated.
",wakiki,abotalov
1035,2013-05-02 11:35:28,"I never figured out what the problem was, and I had to switch to webkit instead which was a bit annoying. @sztupy if you do figure it out please do let me know thanks
",wakiki,sztupy
1035,2013-07-17 23:12:37,"We're having this same issue on OS X 10.8.4. We were using an old version of chromedriver (pre 2.0) and I upgraded it to 2.1 which at first seemed to fix this issue. But a couple days later we still got test failures of this nature, but they're intermittent. They do seem to be much more rare now, but there still seems to be something wrong and it's very hard to debug. I'm not sure this is a Capybara bug. I'm guessing it's more likely a selenium-webdriver, Chrome, or chromedriver bug.
Just a note to anyone who is having this issue and wants to upgrade to chromedriver2, you don't need to use @sztupy's forks of chromedriver-helper or selenium-webdriver anymore. It works as-is with the latest selenium-webdriver gem.
",lyahdav,sztupy
1035,2013-08-08 00:29:41,"I am running into issues with Chrome hanging randomly with Chrome=28.0.1500.95 chromedriver=2.2,platform=Mac OS X 10.8 .  Gems selenium-webdriver (2.34.0), capybara (~> 2.1.0)

I've been looking at the chromedriver logs and I've noticed it seems to often follow a delete session cookie request that may be related to the session_reset that happens automatically between tests.  

Similar to @wakiki, I visually observe the browser just spinning on a blank page, but if I try manually navigating in a new tab in the same Chrome session with the Capy root URL (for example http://127.0.0.1:64579/ ) the expected page renders quickly.

Exact same tests execute with no timeout errors in Firefox, and headless with phantomjs/poltergeist.  

I think it's probably an issue with the chromedriver and its interaction with Capy/selenium-webdriver, so this issue may belong in the chromedriver world.

My chrome driver registration



**example chromedriver log during a timeout**


",gigiJackson,wakiki
1035,2013-08-21 00:48:04,"I did some more research into this issue and I'm pretty convinced it's a Chrome/ChromeDriver issue. May be this same issue open on the chromedriver project: https://code.google.com/p/chromedriver/issues/detail?id=252. I get very similar output to @gigiJackson in my chromedriver output. One thing that's different for me though, I can only reproduce this issue semi-consistently when navigating to about:blank, which Capybara does from the `reset_sessions!` call it makes after each test (from capybara/rspec.rb).
We have two integration test suites, one which includes capybara/rspec.rb and one which doesn't. The one that doesn't never seems to have this issue, the other has it a lot.
Also this may or may not be a performance issue, as we see this issue happen a lot more often on a MacBook Air than on a MacBook Pro.
I'm going to try continuing researching this, but a workaround may be to not include capybara/rspec.rb if it's timing out for you in the `reset_sessions!` code path.
",lyahdav,gigiJackson
1035,2013-09-24 23:15:22,"@jnicklas yes, that works, as does using a filename that doesn't exist.
",brettporter,jnicklas
1035,2013-09-25 13:48:18,"@jnicklas navigating to a file worked for me as well, and as brettporter noted, as does navigating to a file that does not exist.
",rhuberdeau,jnicklas
1035,2013-10-09 14:24:50,"@jnicklas I just updated chromedriver to 2.4 (with Chrome 30.0) and the problem seems to have gone away, as did a problem I was having with a click event. The release notes indicate it supports Chrome 29.0 - 32.0, so perhaps the problem highlighted by recent commenters was chromedriver 2.3 + Chrome 29.0+?

Incidentally, I noted that chromedriver starts on the URL `data:,`, which might be another alternative to consider if needed.
",brettporter,jnicklas
1035,2013-12-17 02:18:59,"Hi @jnicklas! I noticed that 6b1e42d hard codes a local file system path. In my test suite, rspec/capybara/webdriver are running in a virtualbox, and only firefox and selenium are running on the local Mac. As a result, I see firefox's file not found error in between each test. Do you have any suggestions for working around this issue?
",mickeyreiss,jnicklas
1035,2013-12-17 07:37:14,"@jnicklas how about `data:text/html,` instead? This works in Safari, Chrome and Firefox here. (`data:,` works in the last two only).
",brettporter,jnicklas
1035,2013-12-20 09:32:28,"@jdelStrother there are multiple reasons for doing this, for one, it cancels all active Ajax requests, which prevents a lot of ugly race conditions on cleanup. Also, it prevents state from bleeding over between test cases, which is generally what you want.
",jnicklas,jdelStrother
1035,2013-12-20 09:33:17,"Hey guys, I have pushed #1215 which is a potential fix for this, would appreciate it a lot if someone with a Windows setup could test this out! /cc @kippr.
",jnicklas,kippr
1035,2013-12-20 13:06:45,"Reading the [comment](https://github.com/jnicklas/capybara/issues/1035#issuecomment-25975083) from @brettporter above, I went back and tested the original implementation (using about:blank) and can confirm that with the latest chrome (31.0.1650.63)/ chromedriver (homebrew installed v2.7.236836)/ osx (10.9.1), about:blank no longer hangs between tests.

So you might be able to roll back and forget about this whole frustrating episode?
",kippr,brettporter
1035,2014-01-06 16:55:06,":cactus: Thanks @jnicklas! We'll try this out and will let you know if there are any problems.
",mickeyreiss,jnicklas
1035,2014-01-08 09:06:34,"Tested on a setup with the original problem (running local tests with Chrome on OSX) and on a setup that didn't like the above fix (remote tests with IE on Windows 7 VM).

Can confirm all is hunky dory now, thanks v much for the great project @jnicklas!
",kippr,jnicklas
1034,2013-03-29 14:50:27,"Thanks @jnicklas - I saw the gotcha with Timecop so already use Timecop.travel and it's not related to that.
",wakiki,jnicklas
1034,2013-03-29 17:42:47,"Thanks @jnicklas . I'll close this ticket.
",wakiki,jnicklas
1032,2013-03-28 16:13:06,"@shybovycha of course the user can write anything they want. We are testing that filling in HTML into a field and extracting it back out works as expected, since the HTML is entity encoded when it is added to the field. The ""bug"" that the commit you mention fixes was that literal HTML inside textarea fields didn't work, e.g. this:



As far as I can tell, this is incorrect according to the HTML spec. Specifically it breaks if you try to include a `</textarea>` tag in your textarea. Surprisingly the HMTL validator does accept it as markup.

All of which is really beside the point, because you just should not do that. Just entity encode this stuff.

Also, how did the ""bug fix"" help you at all, considering that CKEditor is a JavaScript editor, and the fix only affects RackTest which doesn't even execute JavaScript.
",jnicklas,shybovycha
1032,2013-03-28 17:02:09,"@shybovycha  As @jnicklas has pointed out the html spec states that the content model for textarea elements is of type Text.  That being said browsers default behavior for invalid content in textareas is to convert it to text.  This leads to the situation where having the following source for your document
    &lt;textarea&gt;&lt;div&gt;&amp;lt;div&amp;gt;some content&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/textarea&gt;
will lead to the innerText on the textarea returning 
&lt;div&gt;&lt;div&gt;some content&lt;/div&gt;&lt;/div&gt;  
which obviously isn't correct but is a byproduct of the browser trying to handle invalid markup.  It sounds like your app is generating invalid markup by not escaping the contents of the textarea to start with and should probably be fixed.  This does not look like an issue with capybara.
",twalpole,jnicklas
1032,2013-03-28 17:02:09,"@shybovycha  As @jnicklas has pointed out the html spec states that the content model for textarea elements is of type Text.  That being said browsers default behavior for invalid content in textareas is to convert it to text.  This leads to the situation where having the following source for your document
    &lt;textarea&gt;&lt;div&gt;&amp;lt;div&amp;gt;some content&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/textarea&gt;
will lead to the innerText on the textarea returning 
&lt;div&gt;&lt;div&gt;some content&lt;/div&gt;&lt;/div&gt;  
which obviously isn't correct but is a byproduct of the browser trying to handle invalid markup.  It sounds like your app is generating invalid markup by not escaping the contents of the textarea to start with and should probably be fixed.  This does not look like an issue with capybara.
",twalpole,shybovycha
1028,2013-04-04 07:54:17,"I'm running into a problem that seems to be related. We're trying to _clear_ some input fields, but the change event doesn't get fired, so the underlying Backbone model isn't updated. Because we're setting to an empty string, the `send_keys` call is presumably a no-op.

If I patch in the old implementation, it works as expected. @jnicklas do you have any thoughts about what you'd like to do with this issue or how you want to handle these edge cases, if at all? Maybe offer an option to use the old behavior? Special case setting to an empty string?

I'm happy to take a stab at a pull request with the fix.
",TimMoore,jnicklas
1028,2013-04-04 09:55:40,"+1

I ended up monkey-patching/overriding the method. An option to use the odd behaviour would be great and should be very easy to implement. So the DSL would be something like:

fill_in ""name"", with: ""Jo Bloggs"", use_backspace: true

or whatever other name can be used for the option.

It would really help the edge cases like mine as current upgrade completely broke my specs and there's no way round it other than to hack the source...

@jnicklas what do you think?
",wakiki,jnicklas
1024,2013-03-25 09:36:07,"@abotalov if Rails previously returned something other than a `Gem::Version` that might break on older versions.
",jnicklas,abotalov
1024,2013-03-25 09:48:20,"@jnicklas What about:


",abotalov,jnicklas
1024,2013-03-25 09:56:43,"@jnicklas 


",abotalov,jnicklas
1020,2013-05-11 12:30:57,"@abacha I've had similar problems and figured out that strange TypeError `exception class/object expected` is happening because old version of `json` gem is used. `capybara-webkit` uses JSON serialization to give the client a heads up what error happened. You should use at least `1.7.7`, otherwise `JSON.load` will parse error into the `Hash` instead of real exception class.
",andreychernih,abacha
1018,2013-03-22 16:21:15,"@topfunky Cool, thanks.
",mhartl,topfunky
1009,2013-03-17 21:34:08,"@jnicklas  Thank you for the fix - definitely seemed to fix the issue in the test case.  
",jpurcell001,jnicklas
1007,2013-03-13 07:00:39,"@twalpole feel free to merge small changes like this yourself, if you want.
",jnicklas,twalpole
1006,2013-03-12 12:56:53,"@sirbrillig: it doesn't seem right to me that it would be only an rspec matcher, we should have added this as a matcher on Capybara::Node::Matchers. None of the other matchers are implemented like this. It would need a lot more tests as well.
",jnicklas,sirbrillig
1006,2013-03-12 21:14:09,"@sirbrillig After you'll make a commit to this branch it will appear here. No need to make another PR
",abotalov,sirbrillig
1006,2013-03-12 21:18:04,"Ah, right, thank you @abotalov.
",sirbrillig,abotalov
1004,2013-03-11 23:03:09,"@choxi you need to have capybara look for something that changes on the screen when the ajax function finishes.   Then capybara will wait for that to happen.
",twalpole,choxi
1004,2013-03-12 01:00:48,"Thanks Thomas, I was hoping there would be a way to work around that. 

On Mar 11, 2013, at 4:03 PM, Thomas Walpole notifications@github.com wrote:

> @choxi you need to have capybara look for something that changes on the screen when the ajax function finishes. Then capybara will wait for that to happen.
> 
> —
> Reply to this email directly or view it on GitHub.
",choxi,choxi
1003,2013-03-18 17:32:33,"@baldwindavid It's easy to use 1.9.3 on Heroku - https://devcenter.heroku.com/articles/ruby-versions 
",abotalov,baldwindavid
1002,2013-03-11 16:53:21,"@jnicklas, I would be really grateful for any advice on narrowing down this issue.

I now had to put an around filter for every spec that uses Rack::Test and has 2 slashes in visit call.

Gems:



spec_helper.rb


",fenelon,jnicklas
1002,2013-03-11 21:48:35,"Thanks anyway, @jnicklas. :) Are you absolutely sure that it's an app-level problem? Could you at least point me at the differences `Capybara.app_host` makes to `Rack::Test` behaviour? Cause those slashes dont get escaped if I specify it. 
",fenelon,jnicklas
1002,2013-03-11 23:38:30,"@jnicklas, it seems to have no effect on this issue.

# 

FOUND IT! After 2 tries back in November and 4 days this month! 

Somehow, it's been crashing because of this line in routes:



Rack::Test somehow hitting Rails with `www`. =/

Thank you, Jonas! I couldn't get to sleep because of this bug. 
",fenelon,jnicklas
1002,2013-03-11 23:47:47,"@fenelon ahh, if you're satisfied that this was a bug in your app, please close this issue.
",jnicklas,fenelon
1002,2013-03-11 23:53:48,"@jnicklas, closing it now. Thanks again!

P.S. Do you think the fact the default `Rack::Test` behaviour setting `www` subdomain worth reporting to them? 
",fenelon,jnicklas
1002,2013-03-12 07:23:06,"@fenelon no, we set that in Capybara, and it's intentional, because Rails uses the same.
",jnicklas,fenelon
1001,2013-03-11 02:19:12,"@deepj  doing page.execute_script('sessionStorage.clear()') from an after block for javascript tests or as the last step of any tests that set the sessionStorage would accomplish what you want too, without having to go through signing out of your app
",twalpole,deepj
1001,2013-11-15 15:29:10,"@deepj says ""It'd be nice when Capybara resets HTML5 session storage too.""

I say this is definitely an expected behaviour of capybara-cucumber integration. Otherwise the scenarios are not isolated.

Some web-apps use html5 local storage in stead of cookies to remember visitors across sessions.
",jarl-dk,deepj
1001,2013-11-15 16:08:23,"@jarl-dk Most web apps don't use HTML5 web storage at all.
I think it doesn't worth to be put to `cucumber.rb` as it will slower tests a bit.

Also note that Capybara doesn't clear cache between scenarios. It may affect other scenarios for some web apps. I think Capybara shouldn't do it for the same reason.
",abotalov,jarl-dk
996,2013-03-08 20:53:57,"@jnicklas @abotalov mentioned that fieldset supports the disabled attribute, and the spec says ""When specified, causes all the form control descendants of the fieldset element, excluding those that are descendants of the fieldset element's first legend element child, if any, to be disabled.""   This is not currently supported in racktest, and a quick test with selenium seems to show that it gets it wrong too (field is actually disabled in the browser, but the native element returns that its enabled).  Not sure if its worth trying to implement.
",twalpole,jnicklas
996,2013-03-08 21:38:04,"Note: @jnicklas and @twalpole replied to comment that was deleted just after writing
1. In this pull request `:option` doesn't support `:disabled`. But it supports it according to [HTML 5 spec](http://developers.whatwg.org/links.html#disabled-elements).
2. I prefer fast CSS selectors over selectors like `:button` that are transformed to XPath selectors so I think `:disabled` should also be available on `:css` and `:xpath`. IMO it does make sense to write `find('#button_id', disabled: true)`
3. Most of the buttons are never disabled so I think Capybara shouldn't check if button is disabled if `:disabled` option isn't specified. Such checks take time (especially in webdriver) and I don't want my tests to be slower because of unnecessary checks. But it can't be so because of backwards compatability as @jnicklas pointed out.

[But as I see](https://github.com/jnicklas/xpath/commit/6429e5a84a7893d514be1cb04d3ff250b74ab1f8) previously only disabled buttons weren't find by default. Do you think it will be better to set default for disabled to `false` only for buttons and to `nil` for all other selectors (where `nil` means no check)?

Another option is to add config option `find_disabled_elements` set by default to `false` and allow user to set it to `true`
",abotalov,jnicklas
996,2013-03-08 21:38:04,"Note: @jnicklas and @twalpole replied to comment that was deleted just after writing
1. In this pull request `:option` doesn't support `:disabled`. But it supports it according to [HTML 5 spec](http://developers.whatwg.org/links.html#disabled-elements).
2. I prefer fast CSS selectors over selectors like `:button` that are transformed to XPath selectors so I think `:disabled` should also be available on `:css` and `:xpath`. IMO it does make sense to write `find('#button_id', disabled: true)`
3. Most of the buttons are never disabled so I think Capybara shouldn't check if button is disabled if `:disabled` option isn't specified. Such checks take time (especially in webdriver) and I don't want my tests to be slower because of unnecessary checks. But it can't be so because of backwards compatability as @jnicklas pointed out.

[But as I see](https://github.com/jnicklas/xpath/commit/6429e5a84a7893d514be1cb04d3ff250b74ab1f8) previously only disabled buttons weren't find by default. Do you think it will be better to set default for disabled to `false` only for buttons and to `nil` for all other selectors (where `nil` means no check)?

Another option is to add config option `find_disabled_elements` set by default to `false` and allow user to set it to `true`
",abotalov,twalpole
996,2013-03-08 23:04:06,"@abotalov no, fields need to be disabled in 2.0 as well, not just buttons. This change as far as I'm aware is completely compatible with 2.0.

As for performance: we can't have the cake and eat it too, unfortunately. If we want disabled fields not to be found by default (which we do, both for semver and simply because it's a good idea), and we want that option to be configurable, which apparently a lot of people seem to want, even though I kinda think they're wrong, then this is what we end up with.
",jnicklas,abotalov
996,2013-03-08 23:21:18,"@jnicklas I haven't understood. Do you agree with providing something like `Capybara.find_disabled_elements` or not?
",abotalov,jnicklas
996,2013-03-10 14:31:27,"I am a concerned about the performance issue that @abotalov has pointed out. I did some benchmarking, with this code: https://gist.github.com/jnicklas/5128764

Running against this pull request:



For comparison, here it is running against master:



We can see that there is some variance, but clearly, this pull request yields an almost x2 decrease in performance when locating buttons. Unless the benchmark is somehow flawed.

To me, that's not really acceptable. @sobrinho and other who wanted this, what do you think?
",jnicklas,abotalov
996,2013-03-10 15:18:19,"With `n = 1000` I have similar results to @jnicklas :


",abotalov,jnicklas
996,2013-03-13 00:34:47,"@jnicklas Implementing with disabled being passed to the selector generator I get the following times for n=1000



that was with the button selector below


",twalpole,jnicklas
996,2013-03-13 02:04:47,"@sobrinho One downside I can think of is that according to the html 4 and 5 spec form controls inside a fieldset that is disabled are supposed to be disabled (unless they are in its first legend child element).  One would assume that browsers would report those controls as disabled even though they dont have the disabled attribute on them.  Querying via xpath for the disabled attribute would obviously not be correct then.  That being said selenium-webdriver (with firefox at least)  does not actually report those elements as disabled even though they are displayed as disabled, so I'm not sure whether thats a bug or a conflict between the html spec and the webdriver spec (Also current xpath gem uses the disabled attribute on the element so technically its wrong too).  The other downside is it probably means special casing the disabled option since it would no longer be implemented as a custom filter
",twalpole,sobrinho
996,2013-03-13 12:05:58,"It may be considered a bug but I never seen any web application using the disabled attribute on fieldsets.

Since XPath and Capybara seems to never be cared about this attribute on fieldset, I don't think we should care about it right now (maybe in the future or when someone report that's a needed feature).

@jnicklas ?
",sobrinho,jnicklas
996,2013-03-13 21:32:28,"@jnicklas PR 1011 builds on top of this PR, implements the concept of Selector modifiers which are applied to the selector expression based on options, and then implements :disabled as modifiers instead of filters which should get rid of the performance hit.
",twalpole,jnicklas
995,2013-03-25 23:29:11,"@jnicklas @michaelrkn what's the best move here?  I'm hoping to help triage a little bit, and figured this was a decent place to start?  I can send another PR that just cherry-picks the first commit, if that's helpful.
",knewter,jnicklas
995,2013-03-25 23:29:11,"@jnicklas @michaelrkn what's the best move here?  I'm hoping to help triage a little bit, and figured this was a decent place to start?  I can send another PR that just cherry-picks the first commit, if that's helpful.
",knewter,michaelrkn
995,2013-03-26 12:58:03,"@knewter sounds good to me!
",jnicklas,knewter
988,2013-03-17 14:56:09,"Finally merged this, thank you @abotalov!
",jnicklas,abotalov
984,2013-03-06 12:16:04,"@jcoglan basically the wait system uses Exceptions as control flow, cuz everyone knows that's a great idea. 

Capybara's `synchronize` method wraps pretty much everything that Capybara does; when an exception happens inside `synchronize` that is of a certain type, the block is rerun, until no exception is raised or a timeout occurs.

For the most part, this process is completely irrelevant to driver authors, since it's handled at Capybara's layer.

However, in certain cases, elements become invalid, for example they may have disappeared from the DOM, or become invisible or whatever. This doesn't appear to be such a huge problem, since the element is now invalid, interacting with it should obviously raise an error. Unfortunately, this situation leads to race conditions, when elements disappear and reappear off the DOM. Since version 1.1 we've had a system in Capybara called automatic reload, which when faced with such an exception will attempt to reload the element.

The only thing you need to do as a driver author is to make calling methods on invalid elements raise an exception, and then adding the exception class that is raised to [`invalid_element_errors`].(https://github.com/jnicklas/capybara/blob/master/lib/capybara/driver/base.rb#L50-L52).
",jnicklas,jcoglan
984,2013-03-06 12:18:22,"@jcoglan In other words, you should _not_ block, in order to wait for timeouts. All actions performed in Capybara are assumed to be asynchronous. They don't _have_ to be, the RackTest driver is synchronous everywhere, but for JS support it makes more sense.
",jnicklas,jcoglan
984,2013-03-08 17:48:46,"@jamonholmgren its master and you'll probably need the master branch of the xpath gem too
",twalpole,jamonholmgren
984,2013-03-25 22:21:39,"@jnicklas I'm confused by when calls should wait or not. e.g. compare https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/find_spec.rb#L47-L51 with https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/has_css_spec.rb#L24-L28. The former requires `:wait` in order to wait for the `setTimeout()` to fire, while the second one doesn't. Is this difference indicated to the driver in any way?

I have this code in my `click` implementation that makes `click` block until timeouts and ajax calls have completed:

https://github.com/jcoglan/terminus/blob/master/lib/terminus/public/terminus.js#L245-L254

Should I remove this entirely, or reduce what it does, or are there options I'm ignoring in my implementation? Simply removing this logic and making `click` return immediately after triggering the event makes a lot of ""waits for asynchronous load"" specs fail, like the `has_css` spec I've linked to above.
",jcoglan,jnicklas
984,2013-03-26 07:26:46,"@jcoglan did you see my explanation above: https://github.com/jnicklas/capybara/issues/984#issuecomment-14496380

Capybara will keep retrying until it succeeds. You should _not_ block anywhere, it shouldn't be necessary. The :wait option is new, and just makes it configurable _how long_ Capybara will wait and retry, again, you shouldn't have to care about it. Try rereading the README section on async JS and my explanation above.
",jnicklas,jcoglan
984,2013-03-26 09:01:28,"@jnicklas Did this change in 2.0? Looking at my tests (I maintain compatibility with 1.1, 2.0 and 2.1) there was a group of tests in 1.1 called `driver with resynchronization support`, suggesting resync was the driver's responsibility. I've removed my resync code and got things working on 2.1, but on 1.1 these two tests fail:
- `#find with synchronization turned on should wait for all ajax requests to finish`
- `#find with short synchronization timeout should raise an error`

Can you clarify the role of resync in 1.1 and whether it was Capy's or the driver's responsibility?
",jcoglan,jnicklas
984,2013-03-26 09:46:47,"@jcoglan it changed between 1.0 and 1.1, where we implemented the auto_reload feature which made resynchronization in the driver no longer necessary. However, we kept the resynchronization feature around, in the Selenium driver, mostly for compatibility reasons, but it was switched off by default. As long as the rest of the tests pass, I think you should be good with just removing `driver with resynchronization support` from your suite.
",jnicklas,jcoglan
984,2013-03-27 10:16:42,"@jnicklas Okay, I've reinstated my resync code but made it disabled-by-default. I'm now passing all the tests on 1.1, 2.0 and 2.1.
",jcoglan,jnicklas
984,2013-03-27 13:32:55,"@jcoglan nice :D
",jnicklas,jcoglan
982,2013-02-27 16:16:49,"@jnicklas I should remove this line? https://github.com/jnicklas/xpath/blob/master/lib/xpath/html.rb#L172

I'm a bit afraid to remove it since it will change the currently behavior of xpath, regardless of the behavior of capybara.
",sobrinho,jnicklas
982,2013-03-08 02:57:34,"@sobrinho i like the idea!
Are you working on this already? If so looking forward to it :)
In case not, i probably can help working on a patch for this. Let me know.
",grzuy,sobrinho
982,2013-03-09 03:51:01,"@grzuy nope, I was pretty busy this week.

Seems like @jnicklas already started to work on this feature :)
",sobrinho,jnicklas
982,2013-03-09 03:51:01,"@grzuy nope, I was pretty busy this week.

Seems like @jnicklas already started to work on this feature :)
",sobrinho,grzuy
982,2013-03-16 14:24:26,"Thanks @jnicklas! :heart:
",sobrinho,jnicklas
982,2015-07-02 06:58:35,"I am late to this party but thanks @jnicklas  for this feature
",sigu,jnicklas
981,2013-03-04 20:31:29,"@yannp That works too.
",yfeldblum,yannp
980,2013-03-26 19:20:28,"No response from OP. I agree with @twalpole, there is nothing in Capybara itself which could possibly affect Rails.env. Closing.
",jnicklas,twalpole
979,2013-02-27 16:46:07,"@jnicklas my end goal was to just have travis default to run a few tests on chrome that firefox has to be pending on ( specifically hover currently). While working towards that I hit upon the issue I described with the sessions, and figured that should be fixed.
",twalpole,jnicklas
979,2013-02-28 23:03:27,"@jnicklas ok, chrome tests are now only run for the travis rake task and I fixed the issue with the second server instance not booting.  However now the rbx tests are failing due to timeouts, not sure why - any ideas you can provide would be appreciated
",twalpole,jnicklas
979,2013-03-04 22:58:46,"@abotalov there's also no native event support on OSX and the selenium hover support has positional issues on Firefox too, so the native events are not the only reason for issues on Firefox.
",twalpole,abotalov
979,2013-04-12 09:59:11,"@twalpole is this still working for you? When I merge it into the latest master and try to run it (with Chrome 26 on Mac OS 10.8) I get a lot of timeouts waiting for Chrome to load pages:



etc.
",TimMoore,twalpole
979,2013-04-13 19:07:17,"@TimMoore -  havent tried it in a while -- I know there were issues with the latest versions of chrome and chromedriver
",twalpole,TimMoore
979,2013-04-13 22:52:55,"@TimMoore Just tried it -  same issues you're having with it just hanging when using Chrome 26.0.1410.65 and chromedriver 26.0.1383.0 .  Strangely if one removes the 
    @browser.navigate.to('about:blank')
from Capybara::Selenium::Driver#reset!  then the tests work fine (other than the reset_session tests obviously).  It seems that either Chrome or chromedriver may be having an issue with changing the URL rapidly or something.
",twalpole,TimMoore
979,2013-11-14 21:29:22,"Whatever happened to this issue? Our build time on Travis is 11 minutes, well under the cut off at 50 minutes, so we should be able to add a Chrome run without problem. @twalpole did you have this working? Care to bundle it up in a pull request?
",jnicklas,twalpole
979,2013-11-15 21:44:18,"@jnicklas  I'll see about getting the PR updated to latest code
",twalpole,jnicklas
979,2013-11-18 21:32:26,"@jnicklas ok this PR works again, and will run the tests against chrome as well as firefox on travis
",twalpole,jnicklas
976,2015-04-30 21:29:56,"@lynndylanhurley You could try it rather than posting on a PR that was closed 2 years ago - or ask in the mailing list as requested in the README - but no its not still broken since the Capybara tests pass for it.
",twalpole,lynndylanhurley
970,2013-02-25 08:02:04,"@jnicklas no problem. Do you plan remove rack-test dependency as well?
",morgoth,jnicklas
969,2013-02-25 17:26:09,"@jnicklas you're welcome
",twalpole,jnicklas
967,2013-02-22 07:28:21,"@leevyzz If option is really selected please post a simple reproduction case to e.g. gist.github.com so we can reproduce it
",abotalov,leevyzz
966,2013-02-21 19:44:17,"@jnicklas I wasn't aware of the contributing guide when I wrote this issue. Just read about the mailing list, so I'm going to repost this there, and close this issue for now unless it is determined that there is a bug indeed.

Thanks!
",jakeonrails,jnicklas
965,2013-02-21 17:09:01,"@jnicklas Moving window related functions to a Capybara::Driver::Window class is fine, but I'm not sure what you're suggesting with within_window.  Are you saying that one shouldnt be able to just call resize_window or window.size(xxx,yyy) in the current session to resize the current window?
",twalpole,jnicklas
965,2013-02-21 20:10:57,"@twalpole Please don't add different features in the same pull request next time when you will do it. It will make review easier
",abotalov,twalpole
965,2013-02-21 20:24:56,"@abotalov The only reason they were in the same PR was because they were discussed in the same issue referenced above.
",twalpole,abotalov
961,2013-02-18 20:42:06,"@jnicklas - I implemented a way for drivers to indicate their acceptance of native css queries, and changed find in driver and node to receive a parameter identifying the format of the selector.  Please take a look and let me know if you think this is going in the right direction. There are 3 original tests that fail currently

rspec ./lib/capybara/spec/session/within_spec.rb:7 # Capybara::Session selenium #within with CSS selector should click links in the given scope
rspec ./lib/capybara/spec/session/within_spec.rb:48 # Capybara::Session selenium #within with Node rather than selector should click links in the given scope
rspec ./lib/capybara/spec/session/within_spec.rb:60 # Capybara::Session selenium #within with the default selector set to CSS should use CSS

They are failing because they do a css query of ""#for_bar li[contains('With Simple HTML')]"" which isn't legal css, so when passed directly to the browser instead of being processed by nokogiri they error out.  I can change these to use the :text option instead if you're ok with chaning them
",twalpole,jnicklas
961,2013-02-18 20:44:06,"@jferris - just noticed your reply, I have changed the find and find_css to just be find taking a parameter to identify the type of selector (:css, or :xpath) - if the consensus is to go back to multiple find_<format> functions I can change over to that instead
",twalpole,jferris
961,2013-02-18 20:50:17,"@twalpole if you can fix the failing specs, that would be great. There's no reason for them to use `contains`. Given that we went with separate methods for `visible_text` and `all_text`, maybe we should go with separate methods here as well? I like @jferris suggestion. Honestly though, I don't really care what the API towards the drivers looks like.
",jnicklas,jferris
961,2013-02-18 20:50:17,"@twalpole if you can fix the failing specs, that would be great. There's no reason for them to use `contains`. Given that we went with separate methods for `visible_text` and `all_text`, maybe we should go with separate methods here as well? I like @jferris suggestion. Honestly though, I don't really care what the API towards the drivers looks like.
",jnicklas,twalpole
961,2013-02-18 21:14:16,"@jnicklas I have fixed the specs. As for the find api - one thing to take note of is that by just having it be find( selector_format, selector ) it matches the node#find api and resolve_query doesnt need to know whether its calling a driver or a node.  If Node and Driver have different find apis then resolve_query would have to determine which its calling
",twalpole,jnicklas
961,2013-02-18 21:18:05,"@abotalov - driver.rb is like that because the code defaults to not passing a format when using xpath, so that existing drivers will still work
",twalpole,abotalov
961,2013-02-18 21:21:40,"@twalpole shouldn't nodes implement both CSS and XPath as well then?
",jnicklas,twalpole
961,2013-02-18 21:26:46,"@twalpole Regarding your last comment: Capybara 2.1 breaks backwards compatability (as `all_text` method is added) so I think it can be brought here too
",abotalov,twalpole
961,2013-02-18 22:45:48,"@jnicklas I think the commit handles your concerns, next step is to move over to find_css and find_xpath if that is the consensus? or to remove the defaulting xpath format if the find(format, selector) api is preferred but with a required format?
",twalpole,jnicklas
961,2013-02-18 23:13:29,"@jnicklas Good catch - I missed the conversion, although its not overriding @preferred_format, because @preferred_format is only set in css (it defaults to :xpath in initialize)
",twalpole,jnicklas
961,2013-02-19 17:46:16,"@jnicklas I think the last pushes cover all current concerns and feedback
",twalpole,jnicklas
961,2013-02-19 18:48:08,"@mhoran nope 
",twalpole,mhoran
961,2013-02-19 19:05:36,"For some reason GitHub is not picking it up, but I just merged this. Thanks @twalpole for putting in so much effort and putting up with our nagging ;)
",jnicklas,twalpole
961,2013-02-19 19:11:03,"@jnicklas no problem, happy to contribute
",twalpole,jnicklas
961,2013-02-21 12:25:19,"@jcoglan seems like most browsers these days support most selectors which are in regular use. I'm okay with different browsers providing different levels of support for CSS. If you want to go the extra mile, you could use sizzle as a poly fill for older browsers.
",jnicklas,jcoglan
961,2013-02-21 13:06:35,"Actually Internet Explorer driver 6, 7 uses Sizzle for its purposes.

@jcoglan what do you propose instead of using browser's native CSS selector support?
",abotalov,jcoglan
961,2016-01-29 15:56:25,"@ioquatix has_css? Looks for children that match the given css, it doesn't compare the element it's called on
",twalpole,ioquatix
959,2013-02-15 21:26:52,"@martijnwalraven: More like that:



@twalpole: I'd be kind of okay with that.

I personally hardly ever use `within` so I don't really feel the need. If someone wants to go ahead and implement this, then please go ahead, but I'm not going to ;)
",jnicklas,martijnwalraven
959,2013-02-15 21:26:52,"@martijnwalraven: More like that:



@twalpole: I'd be kind of okay with that.

I personally hardly ever use `within` so I don't really feel the need. If someone wants to go ahead and implement this, then please go ahead, but I'm not going to ;)
",jnicklas,twalpole
959,2013-02-16 09:11:10,"Sure, I understand. I was planning on working on this today though. Would you prefer #within to yield the element or exposing current_node/current_element as @twalpole suggests? The latter seems more general and might have other uses.
",martijnwalraven,twalpole
959,2014-02-20 15:00:28,"@vanburg You can do:


",abotalov,vanburg
958,2013-02-09 18:37:37,"@JeanMertz thanks very much for testing it out! I changed how I was using Nokogiri, could you try it again at some point?  I'm out of town this weekend, but will check in on Monday when I get back.
",sdhull,JeanMertz
958,2013-02-10 20:57:43,"@sdhull: Thanks for taking the time to write up this pull request, despite our heated discussion preceding it. Hopefully this will get the ball rolling. A few issues/questions:

1) The use of Nokogiri::XML could be problematic. If the HTML is not well formed, I think that Nokogiri::XML will throw an exception, which is probably not what we want. It would probably even reject HTML5 style empty attributes, like `<input autofocus>`

2) The option should probably be called `asset_host` instead of `asset_server`. That's consistent both with Rails, and `app_host` in Capybara.

3) I think this will probably fail when the page contains protocol relative URLs, given that we just do a regexp check for `http`.
",jnicklas,sdhull
958,2013-02-11 18:42:16,"@jnicklas thanks so much for looking at this after I was admittedly being a jerk before.

I'm out of town till tonight but I'll see what I can do when I get back. I'm totally on the same page -- these were things I was concerned about too.
",sdhull,jnicklas
958,2013-02-13 16:22:47,"@danielres I was actually unaware of the existence of the `<base>` tag. That looks like a pretty excellent option!! I'm for it. @jnicklas what do you think?

Then I'd just have a single test that asserts that the base tag is added. Furthermore, finding index of the closing head tag and inserting just above it would probably be ok and I could leave this whole nokogiri mess behind. 
",sdhull,danielres
958,2013-02-13 16:22:47,"@danielres I was actually unaware of the existence of the `<base>` tag. That looks like a pretty excellent option!! I'm for it. @jnicklas what do you think?

Then I'd just have a single test that asserts that the base tag is added. Furthermore, finding index of the closing head tag and inserting just above it would probably be ok and I could leave this whole nokogiri mess behind. 
",sdhull,jnicklas
958,2013-02-13 16:42:49,"Base path usually causes more problems than it solves. So be sure to read up about its drawbacks before committing to this technique.

On Wed, Feb 13, 2013 at 5:22 PM, Steve notifications@github.com wrote:

> @danielres I was actually unaware of the existence of the `<base>` tag. That looks like a pretty excellent option!! I'm for it. @jnicklas what do you think?
> 
> ## Then I'd just have a single test that asserts that the base tag is added. Furthermore, finding index of the closing head tag and inserting just above it would probably be ok and I could leave this whole nokogiri mess behind. 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/958#issuecomment-13502548
",JeanMertz,danielres
958,2013-02-13 16:42:49,"Base path usually causes more problems than it solves. So be sure to read up about its drawbacks before committing to this technique.

On Wed, Feb 13, 2013 at 5:22 PM, Steve notifications@github.com wrote:

> @danielres I was actually unaware of the existence of the `<base>` tag. That looks like a pretty excellent option!! I'm for it. @jnicklas what do you think?
> 
> ## Then I'd just have a single test that asserts that the base tag is added. Furthermore, finding index of the closing head tag and inserting just above it would probably be ok and I could leave this whole nokogiri mess behind. 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/958#issuecomment-13502548
",JeanMertz,jnicklas
958,2013-02-15 19:10:15,"@halloffame I'll plus one that. Good call. Done & done. Running specs now.
",sdhull,halloffame
958,2013-02-19 23:18:43,"Woot!  Thanks @jnicklas! For `body_to_write`, I just wanted to be sure I didn't modify the body itself (which users might be making assertions against). So I figured it'd be safer to make a copy of the body and modify that instead. At least that was the thinking there...
",sdhull,jnicklas
958,2013-02-21 22:03:54,"@jnicklas good call!

Any idea when you might push a new patch release to rubygems?  I'd like to start using this in the codebase at my office right away  :satisfied: 
",sdhull,jnicklas
958,2013-02-21 22:40:01,"@sdhull to use edge you probably need to be using edge xpath too
gem 'xpath', github: 'jnicklas/github'
",twalpole,sdhull
958,2013-02-22 18:28:53,"Thanks @twalpole I might try that... or I might just try to exercise some patience and wait for a patch release  :)
",sdhull,twalpole
958,2013-02-22 19:20:04,"@sdhull: soon-ish. I really want to get Capybara 2.1 out the door, but there are a few things left to do (document all the new stuff properly, for one), so it's gonna take at least a month or so before we land a beta, I would think.
",jnicklas,sdhull
958,2013-04-17 18:08:39,"@installero That is correct, the server is what serves up the assets. This should now be working in capybara > 2.1

To get it working you just need to add `Capybara.asset_host = ""http://localhost:3000""` somewhere before the tests are run. I have it at the bottom of `spec_helper.rb`
",halloffame,installero
958,2015-04-01 18:25:42,"@MrHubble [it is in the docs](https://github.com/jnicklas/capybara/pull/958/files?diff=unified#diff-f6aa6c79750a9a5bd39ee17f3ade2974R40), however it may be worth putting in the readme as well?
",sdhull,MrHubble
956,2013-02-11 17:20:08,"@jnicklas I'm afraid I don't understand the concern about associating a button with the first form on the page - If the button is associated with the form then the test should pass.  What is your concern there?
",twalpole,jnicklas
956,2013-02-11 17:56:34,"@jnicklas I've added the case of the submit being in one form but associated with a different form.  I'm not sure what the desired behavior for a submit that specifies the id of a form that doesn't exist should be.  My reading of http://www.w3.org/html/wg/drafts/html/master/forms.html#attr-fae-form says that if the form doesn't exist then the submit would not be associated with any form and I believe the click should just be ignored.  On the other hand its most likely an error to have a submit that isnt associated with a form so maybe we should throw an error?  Also note that the spec does allow for a form attribute on all the input types allowing one to associate a text input with a form its not located within, and that element should get submitted with the form it is associated with.  
",twalpole,jnicklas
956,2013-02-11 18:53:11,"@jnicklas Ok - well along with the addition of the test of a button in one form submitting a different form, the original tests were moved to use those 2 forms too, so they are no longer the first form in the document which I believe covers your concern?
",twalpole,jnicklas
956,2013-02-11 19:27:31,"@twalpole – It seems you're on top of things. Cheers, and thanks for covering my issue with a nice pull request. :thumbsup: 
",Spaceghost,twalpole
954,2013-06-07 17:25:38,"@abotalov I just ran into this problem myself.

I haven't  solved the issue (yet), but here's more details, maybe this is something you recognize?



Using `ruby-2.0.0-p195`, `rails-4.0.0.rc1`, `capybara-2.1.0`
",JeanMertz,abotalov
952,2013-08-27 18:10:21,"@brainhurricane @abotalov, did you guys find a workaround that works with capybara-webkit? I'm having the same issue
",beggerss,brainhurricane
952,2013-08-27 18:10:21,"@brainhurricane @abotalov, did you guys find a workaround that works with capybara-webkit? I'm having the same issue
",beggerss,abotalov
952,2013-08-27 18:22:37,"@beggerss Using capybara-webkit, I found I could use `page.find( '#log' ).instance_eval( '@base' ).invoke( 'text' )` to get the raw text of the `#log` element, instead of `page.find( '#log' ).text` --- does this work for you?
",brainhurricane,beggerss
952,2013-08-27 18:27:04,"@brainhurricane I'm trying to download a PDF within `<pre>` tags. I've been using `page.find(:xpath, '/html/body/pre').instance_eval('@base').invoke('text')` and it looks properly formatted, however my PDF viewer says the doc is damaged, and it is about 1.5x larger a file than the original, viewable PDF
",beggerss,brainhurricane
952,2013-08-27 18:38:25,"@beggerss If the data coming out of that command is correct, then I suspect that your issue may not be with Capybara, but with how you're embedding the PDF.

AFAIK, browsers do not support PDF data embedded in `<pre>` tags – you would have to use an `<object>` or `<embed>` tag. There's some discussion on Stack Overflow about which is better.
",brainhurricane,beggerss
952,2013-08-27 18:47:20,"@brainhurricane, I'm actually using capybara for webscraping instead of site testing, so it's not under my control. Thanks for your help!
",beggerss,brainhurricane
952,2013-08-27 18:52:16,"@beggerss Good luck and godspeed!
",brainhurricane,beggerss
952,2016-01-27 15:26:17,"@michaelfagan :+1: 
",whomwah,michaelfagan
951,2013-04-13 08:28:15,"@twalpole what were the problems that this causes? It doesn't seem to cause Capybara's own tests to fail when merged back into master.
",TimMoore,twalpole
951,2013-04-13 18:13:44,"@TimMoore The issue was that it interfered with events in linux and prevented typing into fields.   The bug report is https://bugzilla.mozilla.org/show_bug.cgi?id=774892  .  According to that report it may have been fixed in one of the later firefox versions, so might not be an issue anymore.
",twalpole,TimMoore
944,2013-01-29 20:46:26,"@ToadJamb Imagine a situation if your proposed changes will be applied. If user specified `Capybara.ignore_hidden_elements = true`, then:
`have_css '.my-div', :visible => false` will return only non-visible elements
`have_css '.my-div', :visible => true` and `have_css '.my-div'` will return only visible elements.

How can he specify that all (both visible and non-visible elements should be returned)?
",abotalov,ToadJamb
944,2013-02-01 07:56:49,"@ToadJamb I'd want to repeat question.

If `Capybara.ignore_hidden_elements = true`, how can user specify that he wants to return all elements, both visible and invisible?
",abotalov,ToadJamb
944,2013-02-07 08:46:27,"@jnicklas What about adding support for `:visible`, `:hidden`, `:any` as values for `:visible` instead of current `true` and `false`? I think it's a good idea.
",abotalov,jnicklas
944,2013-02-13 02:47:24,"@ToadJamb i also found that behavior unintuitive and proposed similar changes a year ago (https://github.com/jnicklas/capybara/pull/544) but they were not accepted. A name change and other things were discussed on that pull request conversation. Feel free to check it out :)
",grzuy,ToadJamb
944,2013-02-16 09:45:56,"I don't particularly like any of these solutions.

@abotalov is right that we need an API that allows us to find elements _regardless_ of whether they are visible or not. That's pretty important. Finding hidden elements _only_ seems like an edge case in comparison, which is why the API is the way it is. Yes it's confusing, but none of these alternatives are better, imo.
",jnicklas,abotalov
944,2013-02-17 07:17:47,"@jnicklas That is completely understandable. Whether true/false can be deprecated at some point is a totally different conversation.

I am inclined to think adding the options suggested here with copious documentation would be ideal.
",ToadJamb,jnicklas
942,2013-01-28 11:37:35,"@ches: did you read my blog post? http://www.elabs.se/blog/55-a-capybara-future
",jnicklas,ches
942,2013-01-28 11:52:16,"@jnicklas No I hadn't, just I was looking for, thanks for the pointer!
",ches,jnicklas
938,2013-01-13 17:10:15,"I'm going to leave this up to @mhoran. I like the feature, but if it's too difficult for them to implement, then I don't want to force them to. What do you think?
",jnicklas,mhoran
938,2013-01-13 17:25:49,"@jnicklas I'm not sure that driver authors will become forced to support all params. Driver may look at types of params and throw error if it doesn't support them.
",abotalov,jnicklas
938,2013-01-14 07:49:12,"Okay, let's skip this then, sorry @abotalov.
",jnicklas,abotalov
936,2013-02-21 08:45:55,"@dnagir Capybara 2.1 will allow you to essentially use the same settings as Capybara 1.x, with only very minor changes, so hold out a little longer and you should be able to upgrade more easily.
",jnicklas,dnagir
936,2013-02-22 00:50:41,"Yeah, thanks @jnicklas. That was my hope.
Appreciate all your work.

Cheers.
",dnagir,jnicklas
936,2013-05-17 06:42:40,"@jnicklas wonder if 2.1 is still using the substring match, you said:

> Capybara 2.1 will allow you to essentially use the same settings as Capybara 1.x, with only very minor changes, so hold out a little longer and you should be able to upgrade more easily.

But the 2.1 is still using substring match (typical ""Password"", ""Password confirmation""). Is there an option to change how elements are matched or am I missing something?
",dnagir,jnicklas
936,2013-05-17 06:58:49,"@dnagir the ""Matching"" section of the readme explains the new matching options (:match, :exact) that can be passed to the finders
",twalpole,dnagir
928,2013-01-14 01:00:01,"@jnicklas, this change will require capybara-webkit to implement a way to find a frame given a `Capybara::Node::Base`. That shouldn't be too difficult, however this leaves me wondering how driver authors should treat master. Will API changes like this be rolled out as a patch release, or into something bigger like a minor version?
",mhoran,jnicklas
928,2013-02-13 07:15:11,"@mhoran I think Webdriver's `switch_to` does same:


",abotalov,mhoran
928,2013-02-13 07:30:36,"@mhoran I would be more than happy about a better API. The current within_frame API is crap.
",jnicklas,mhoran
928,2013-02-13 07:45:41,"@jnicklas [Here](https://groups.google.com/d/msg/ruby-capybara/lSBMiA_0hWU/LDkMalT6Pn0J) you proposed API for switching windows.
What about this?



Where options can be any of `id`, `name`, `position`, `element`, like `id: 'my_id'`

But it won't work for Webdriver as it searches for all those types and [doesn't provide option to specify type of locator](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/frame).
Is current `within_frame` really crap?
",abotalov,jnicklas
928,2013-02-17 21:42:05,"I think that in the case of within_frame, switching on `Capybara::Element` solves some of the issues with the API. The problem arises when someone does what @abotalov  pointed out in his comment (https://github.com/jnicklas/capybara/pull/928#issuecomment-13477206). I've got this working in capybara-webkit, however the implementation will only work if a user finds an element and switches to it in the same context.

Using the Selenium driver, I get the following error if I try to switch to a frame outside the context in which the element was found:


",mhoran,abotalov
923,2013-02-19 21:00:25,"@twalpole Wonderful, thank you!
",Trevoke,twalpole
922,2013-01-02 19:04:55,"@joliss sounds sensible.
",jnicklas,joliss
920,2012-12-27 04:02:43,"@jnicklas that check prevents race conditions in `responsive?`. This PR does not describe a bug in that code.
",raggi,jnicklas
920,2012-12-31 10:54:48,"@raggi: sounds sensible. I removed the thin handler from the default server startup, so hopefully fewer people will run into this in the future. If they do, they will have handle this themselves. For those who don't explicitly need eventmachine, Puma is a better choice these days anyway.
",jnicklas,raggi
911,2013-01-22 01:21:03,"Hi @JonRowe   What (or where) are the xpath changes you mentioned?  
I didn't see an xpath repo under your name.
",tgaff,JonRowe
911,2013-02-25 22:44:17,"@jnicklas - I was working on enabling tests to run on chrome as well as firefox, which would allow the hover test to pass on chrome, while its ignored on firefox, would that be acceptable here too?  As far as the failing builds, do you have any clue why the base version tests fail on travis, running them locally appear to be fine for me.  Also is there any reason to continue testing the allowed failure matrix (ree, 1.8.7)
",twalpole,jnicklas
911,2013-02-25 23:15:57,"@twalpole no, we should get rid of all 1.8.7 builds. I think the suite is simply too slow, that's why it fails on Travis, but I haven't investigated it more than shrugging at the fact that travis is broken _again_ and realizing that I don't really care.
",jnicklas,twalpole
911,2013-03-06 12:03:21,"@jarib 

The hack to work around ElementNotVisible is a hack to work around a Selenium bug, you can type into an empty content-editable div just fine, Selenium just thinks it's not visible. In practise it is visible and usable.

The hack for focus is actually just to ensure consistency in tests, in my experience Chrome / Safari don't exhibit Firefox's behaviour when it comes to not responding to Javascript due to not having focus. My aim with this PR is actually to get the spec into Capybara, Selenium implementation is just a by product, if you have a suggested improvement please make it. (I want this feature in other [headless] drivers).
",JonRowe,jarib
911,2013-03-06 12:05:53,"I agree with @jarib that we should report bugs upstream instead of hacking around them. If this is a legit bug, then the webdriver project should be made aware of it.
",jnicklas,jarib
911,2013-03-06 12:16:59,"> The hack to work around ElementNotVisible is a hack to work around a Selenium bug, you can type into an empty content-editable div just fine, Selenium just thinks it's not visible. In practise it is visible and usable.

@JonRowe What browser are you testing this in?
",jarib,JonRowe
911,2013-03-06 16:10:05,"@jarib I take that statement back; It's actually a hack to work around Firefox not displaying them. Chrome and Safari display blank `contenteditable` elements as being one line high. I guess I made the mistake of not actually checking the test view in Firefox manually. This could be removed and the test data given styling to make it a line high instead.
",JonRowe,jarib
911,2013-03-10 21:42:10,"@jnicklas @jarib What can I do to get this merged? Do you want me to remove/refactor the stuff around blank elements? I'm convinced the focus stuff should stay, as it's a workaround for allowing in the background tests...
",JonRowe,jarib
911,2013-03-10 21:42:10,"@jnicklas @jarib What can I do to get this merged? Do you want me to remove/refactor the stuff around blank elements? I'm convinced the focus stuff should stay, as it's a workaround for allowing in the background tests...
",JonRowe,jnicklas
911,2013-03-16 01:13:15,"@JonRowe I want to wait with this a little. I am focusing on getting 2.1 out the door, and this will have to wait until after that.
",jnicklas,JonRowe
911,2013-03-16 09:09:19,"@jnicklas Why don't you want to include it to 2.1 if it's already done? I'm talking about my PR too
",abotalov,jnicklas
911,2013-03-16 10:04:10,"@abotalov I think I'll include your PR in 2.1, I want to review it thoroughly again before I merge it though, since it's a rather large change. I don't really feel comfortable with this one though. It's implemented in a quite hacky way, and I'm worried that it might be difficult for other driver authors. I don't see it as a super important feature, so I want to wait.
",jnicklas,abotalov
911,2013-03-16 17:08:17,"@JonRowe I see 3 main issues with this PR
1. The ElementNotVisible hack definitely shouldn't be there, since if the element isn't visible how would the user ever click the element to begin editing it?  A min-height in the div style so that it becomes visible and can then be clicked on fixes that.  
2. The focus hack really shouldn't be necessary since clicking on the element should bring it into focus and allow editing.  This may be something that needs a bug report over at selenium
3.  This doesn't at all take into account the nested nature of contenteditable, which I believe there is an issue with in selenium

I took your PR as a start and played around with it in my contenteditable branch at https://github.com/twalpole/capybara/tree/contenteditable .  One of the tests fails using both FF and Chrome, but for different reasons on each, and I think it may be an issue with selenium although I need to look into it further.  The other 4 contenteditable tests pass
",twalpole,JonRowe
911,2013-03-17 00:00:28,"@JonRowe  - Note these are purely my opinions and not those of @jnicklas and his decisions are the ones that count for this project 
2.  Yes firefox has issues with focus, and on some platforms setting focusmanager.testmode in the profile will fix this. Unfortunately setting that on linux causes some other issues, and therefore isn't defaulted on by selenium yet.  That being said I dont believe it is Capybaras job to work around the issue with a javascript hack, a click on the box should enough to select it and start editing, rather we should file bug reports upstream and hope/work to get them fixed.
3.  Read the spec on contenteditable. If we're going to add support to the test cases other drivers need to follow then we should meet the spec for the feature.  If a parent element is marked as contenteditable then its children become editable by default unless they specify contenteditable false.  What if a parent is content editable and I want to edit one of the children -- checking self[:contenteditable] doesnt work for that.    If you look at the branch in my repo you'll see that checking native.attribute('isContentEditable') does (docs for selenium seem to say it should be iscontenteditable but that doesnt work for FF or chrome).
",twalpole,JonRowe
911,2013-03-17 00:00:28,"@JonRowe  - Note these are purely my opinions and not those of @jnicklas and his decisions are the ones that count for this project 
2.  Yes firefox has issues with focus, and on some platforms setting focusmanager.testmode in the profile will fix this. Unfortunately setting that on linux causes some other issues, and therefore isn't defaulted on by selenium yet.  That being said I dont believe it is Capybaras job to work around the issue with a javascript hack, a click on the box should enough to select it and start editing, rather we should file bug reports upstream and hope/work to get them fixed.
3.  Read the spec on contenteditable. If we're going to add support to the test cases other drivers need to follow then we should meet the spec for the feature.  If a parent element is marked as contenteditable then its children become editable by default unless they specify contenteditable false.  What if a parent is content editable and I want to edit one of the children -- checking self[:contenteditable] doesnt work for that.    If you look at the branch in my repo you'll see that checking native.attribute('isContentEditable') does (docs for selenium seem to say it should be iscontenteditable but that doesnt work for FF or chrome).
",twalpole,jnicklas
911,2013-03-17 01:58:06,"@jarib because there's a need to click the element to initiate editing, and a need to clear the element to meet capybaras definition of set
",twalpole,jarib
911,2013-06-12 23:30:47,"This works as outlined so you're welcome to use my branch or take over this PR, I haven't had much luck convincing @jnicklas that this is necessary and I have no intention of going and hacking on selenium code to fix the issues this works around downstream. I mostly wanted the test to be included into capybara so I could go and implement this in poltergeist as I don't use selenium in my normal work.
",JonRowe,jnicklas
911,2013-08-30 07:02:11,"Thanks for this PR @JonRowe. It's a shame it hasn't been pulled.

I can't speak for every +1, but I don't need the gold plating, just a narrow slice of all possible environments to prove my UI interaction work well enough for me to check in code. I'll take that over months of crossed fingers and missed bugs any day. With your change, I know the UI at least works in my dev environment. Without the change I don't know it works anywhere.
",IamNaN,JonRowe
911,2013-10-20 17:44:52,"Okay so you probably weren't expecting this, but better late than never. I just pulled this, it seems that focusmanager is now the default in Selenium, so this passes even without the browser having focus now, yay!

@JonRowe: I took the liberty of squashing your commits into one, with an appropriate commit message, hope that's okay. Since this is so old, I didn't want you to have to do the extra work.
",jnicklas,JonRowe
910,2012-12-25 10:36:11,"@emilianodellacasa I don't use Racktest but I'd want to add cookie manipulation functions to Capybara. Can you tell if this way will work to set cookies in Racktest:

page.driver.browser.set_cookie('name=value')
",abotalov,emilianodellacasa
910,2012-12-25 12:03:08,"Actually I was wrong, this issue still exists using last Capybara gem 2.0.1

I solved by installing version 1.1.1.

@abotalov I have already tried your code, but it is giving me the same error.

I am going to post more information in a bit, in the meanwhile Merry Christmas to you all!
",emilianodellacasa,abotalov
908,2014-03-08 00:40:05,"@waiting-for-dev did you figure something out?
",fuadsaud,waiting-for-dev
908,2014-05-01 06:12:19,"@waiting-for-dev Any resolution on this?
",jadekler,waiting-for-dev
904,2013-02-21 19:14:17,"@joliss  Actually `has_content?` invokes text so it doesn't matter which one you use.
",abotalov,joliss
904,2013-02-21 21:26:42,"@infertux `page.text` simply invokes `find(:xpath, '/html').text`. implementation of text method is driver method. But I don't have an idea why it happens.

Could you post a reproduction case to e.g. gist.github.com so we can reproduce your problem?
",abotalov,infertux
902,2012-12-06 08:57:44,"@jnicklas Yes, it's surely the regexp, take a look at the stack trace: https://gist.github.com/4193752

Now, I'm still a bit puzzled why the encoding header is needed there, since there are no actual unicode characters in the file - only /u codes. Might be just as well a bug in JRuby.

I'll check this later with JRuby 1.6 and might also raise this on the JRuby bug tracker.
",heypiotr,jnicklas
900,2012-12-05 19:00:02,"Thanks for your confirmation @avinmathew.

@joliss I've created a pull request #902. We're using this solution in our project for a week a now, and it does solve the problem for us.

If there's anything else I can do, I'll be happy to help.
",heypiotr,joliss
900,2012-12-05 19:00:02,"Thanks for your confirmation @avinmathew.

@joliss I've created a pull request #902. We're using this solution in our project for a week a now, and it does solve the problem for us.

If there's anything else I can do, I'll be happy to help.
",heypiotr,avinmathew
898,2012-12-03 17:06:38,"@jnicklas could you please guide me a bit what should I do after adding `title` method to `Capybara::Document`? :sweat: 
",nashby,jnicklas
898,2013-01-20 19:13:13,"@jnicklas, whats wrong with @nashby sollution? could you explaine please? This has_title? matcher is simply necessary. 
",molfar,nashby
898,2013-01-20 19:13:13,"@jnicklas, whats wrong with @nashby sollution? could you explaine please? This has_title? matcher is simply necessary. 
",molfar,jnicklas
891,2012-11-28 08:53:56,"@DanielHeath this is the behaviour we had in Capybara 1.x, and it caused all kinds of problems. I can't count the number of times I've debugged issues for possibly hours where Capybara was clicking on the wrong element. The new behaviour is maybe a bit strict at times, but it is a lot safer. The idea of an _exact_ match is also a bit suboptimal, what if the match is only _almost_ exact. It could be off by just punctuation. Computing an exactness factor or something like that isn't really feasible, so again, subtle bugs will bite you.

I agree that we need better error messages though. We've already spent a lot of time improving them, but there is more left to do.
",jnicklas,DanielHeath
887,2013-02-15 04:45:56,"The reason I haven't taken a stab at this is because I felt it does get more complicated given the requirements given by @jnicklas. I see where he's coming from, but have a preference for a different solution. This baby belongs to @jnicklas, so he gets to set the rules. :)

Using bundler as an example, I rather like how it handles the `bundle viz` command. It detects if the necessary gem is available and uses it if it is, or displays a message if it is not. The conditional code around whether selenium-web is available or not is easy to write, simple to understand, and pretty standard practice for ruby gems.

When someone upgrades to the new capybara-without-selenium-web, who is using selenium-web, they see a message to include one line in their Gemfile. Once done, they never think about it again. If they're not using selenium-web, then they would already have the driver they depend on in the Gemfile.

This approach would meet all requirements but 4.
",christiannelson,jnicklas
887,2013-02-21 14:37:03,"Solution provided by @christiannelson looks perfect. Separate gem that connects capybara and selenium-webdriver.
Something like `sass-rails` for Sass and Rails
",morgoth,christiannelson
887,2013-02-21 18:12:10,"@morgoth I think you're describing @jnicklas's solution, not mine. My recommendation does not introduce a new gem.

Ultimately, either solution would be lovely and meet the goal of not dragging in gems you don't need.
",christiannelson,jnicklas
887,2013-02-21 18:12:10,"@morgoth I think you're describing @jnicklas's solution, not mine. My recommendation does not introduce a new gem.

Ultimately, either solution would be lovely and meet the goal of not dragging in gems you don't need.
",christiannelson,morgoth
887,2013-02-22 17:17:53,"@christiannelson right, sorry for confusion.
@jnicklas Which solution would you accept?
- Separate gem (something like sass-rails)
- Wrapper for selenium still in capybara, but without requirement in gemspec also with displaying info to add selenium-webdriver when used

Both solutions require adding gem to Gemfile from user manually (capybara-selenium-webdriver or selenium-webdriver).
Solution with capybara-core and meta gem doesn't look friendly for user.
",morgoth,jnicklas
887,2013-02-22 17:17:53,"@christiannelson right, sorry for confusion.
@jnicklas Which solution would you accept?
- Separate gem (something like sass-rails)
- Wrapper for selenium still in capybara, but without requirement in gemspec also with displaying info to add selenium-webdriver when used

Both solutions require adding gem to Gemfile from user manually (capybara-selenium-webdriver or selenium-webdriver).
Solution with capybara-core and meta gem doesn't look friendly for user.
",morgoth,christiannelson
887,2013-03-18 08:06:22,"I think this commit is responsible for that: https://github.com/jnicklas/capybara/commit/c3e75f8988f640d3587bffbc48ead011ef2665d3
/cc @jnicklas 
",morgoth,jnicklas
887,2013-03-27 22:18:29,"@phoet it'll be in 2.1 which isn't released yet. It'll be released in a couple of weeks at most.
",jnicklas,phoet
887,2013-07-05 11:04:00,"I'm seeing the same error as @olivierlacan, even though I'm running 2.1.

The error only occurs on the first test in each file, when a spec file is run separately. When running the whole suite, there is no problem. Anyone have an idea what might be going on here?
",rogerkk,olivierlacan
887,2013-07-05 11:33:08,"@rogerkk maybe you're not running this particular spec through bundler, or something? The error that @olivierlacan was having has been fixed, so something else is probably going on. Make sure that selenium webdriver is actually installed and in the load path.
",jnicklas,olivierlacan
887,2013-07-05 11:33:08,"@rogerkk maybe you're not running this particular spec through bundler, or something? The error that @olivierlacan was having has been fixed, so something else is probably going on. Make sure that selenium webdriver is actually installed and in the load path.
",jnicklas,rogerkk
887,2013-07-05 12:04:40,"@jnicklas Thanks for pitching in! I suspect this discussion really belongs somewhere else, but:

I'm definitely running it using bundler, but I'm also trying to avoid using selenium. Thus had removed selenium-webdriver from my Gemfile, included capybara-webkit, and put ""Capybara.javascript_driver = :webkit"" in the before block of my spec_helper.rb.

I just seem to have resolved the problem by moving the ""Capybara.javascript_driver = :webkit"" out of the before block. I obviously don't know what I'm doing. ;)
",rogerkk,jnicklas
887,2013-07-05 12:09:04,"@rogerkk alright, yeah, you probably want to configure that globally, since it's a global setting, unlike `Capybara.current_driver` which should be local to one particular spec. The order that before blocks run in can be a bit confusing, so the change to webkit was probably triggering too late.
",jnicklas,rogerkk
887,2013-07-05 12:26:05,"@jnicklas Aha, I see. Thanks for clearing that up!
",rogerkk,jnicklas
883,2012-11-28 18:56:40,"@jnicklas, thoughts?  I've confirmed that an `after` block will work even if an exception is raised.  `before` won't work if we focus on a test within the Capybara suite which sets Capybara.app_host followed by a test in our own suite.
",mhoran,jnicklas
883,2012-11-28 23:21:24,"@jnicklas, c65a61c works great, thanks.  Once this is released, we'll be ready to push capybara-webkit 2.0.
",mhoran,jnicklas
882,2012-11-22 07:58:42,"@christiannelson are you sure? It seems very strange that a git submodule would affect the gem. It isn't even part of the gem package.
",jnicklas,christiannelson
882,2012-11-22 08:17:49,"@jnicklas You're right... I botched my bisect.

v2.0.1 results in this issue consistently and older versions don't. I'm going through all of the changes between 2.0.0 and 2.0.1 now to see what commit really causes the issue to surface.
",christiannelson,jnicklas
882,2012-11-22 08:32:39,"@jnicklas Interesting. Using ref: '537fd691a8d6045dcf44aff22c880c609fcb6ece' in my Gemfile works but '2.0.1' does not. That suggests that the gem is either bunk (which you already checked), rubygems isn't producing correct dependency data for bundler (not sure if this totally makes sense) or there's a legit bug in bundler.

Thanks for looking into it and sorry for the goose chase.
",christiannelson,jnicklas
881,2012-11-21 16:39:21,"@tonydaly that should not affect anything.


",jnicklas,tonydaly
881,2012-11-21 16:42:14,"@tonydaly, maybe your closing `</html>` tag is missing the slash? Though experimenting with Nokogiri doesn't appear to yield those kinds of results either, what driver are you using?
",jnicklas,tonydaly
881,2013-05-03 00:55:50,"@tonydaly thanks for following up. Had the same thing because another dev put extra stuff in there and it would have been the last thing I checked (Literally, it's at the end of the file!). :clap:
",jakeonrails,tonydaly
881,2014-03-08 10:51:23,"@tonydaly nice catch.  I added some JavaScript outside of the trailing HTML tag (in HAML), and it caused the same failure. Thanks for the conversation/fix :+1: 
",calebhaye,tonydaly
881,2014-05-30 14:23:24,"I had a similar problem as @calebhaye, script tag outside of the body tag.
",taylorkearns,calebhaye
881,2014-12-17 16:37:06,"@tonydaly (y) my javascript code was outside the html tag. (As slim works with indentation, so after indenting my code inside html it is fine)
",taimoor,tonydaly
881,2015-08-11 15:35:09,"@TStrothjohann thanks buddy, you save my day. 
",fishbullet,TStrothjohann
881,2016-02-23 19:17:10,"@TStrothjohann That was my problem too, upgrading web-console fixes this. See [this web-console issue](https://github.com/rails/web-console/pull/162).
",mooman,TStrothjohann
871,2012-11-19 14:22:24,"@jferris, the problem with this is that the toHtml method wraps the content in `<html>`.  This was the original complaint in #394.  If we have non-HTML content in the driver, it will get wrapped in HTML elements.  Forcing users to call `html` makes this behavior more apparent.
",mhoran,jferris
871,2012-11-19 14:25:13,"@mhoran I think I must be missing something. If the rack-test driver just returns whatever it got back from the server as `body`, doesn't that mean `toHtml` won't be called?
",jferris,mhoran
871,2012-11-19 14:27:35,"@jferris, users of capybara-webkit won't call the rack-test `body`, but will call the current Session driver `body`, which is now aliased to `source`.  This is what's confusing.
",mhoran,jferris
871,2012-11-19 15:14:41,"@mhoran if someone uses capy-webkit to test XML requests or whatever else people might use this stuff for, I think they have only themselves to blame. The behaviour as @jferris suggests makes sense to me, and it's a very minor change which I would feel comfortable pushing out in a point release as a ""bugfix"" of sorts. I can't imagine anyone has tests which actually depend on the difference between source and html under RackTest, which would be the only thing to change.
",jnicklas,mhoran
871,2012-11-19 15:14:41,"@mhoran if someone uses capy-webkit to test XML requests or whatever else people might use this stuff for, I think they have only themselves to blame. The behaviour as @jferris suggests makes sense to me, and it's a very minor change which I would feel comfortable pushing out in a point release as a ""bugfix"" of sorts. I can't imagine anyone has tests which actually depend on the difference between source and html under RackTest, which would be the only thing to change.
",jnicklas,jferris
871,2012-11-19 15:32:16,"Just to be sure I understand, what I gather from the comments is that `Session#html` should remain as is, `Session#body` should be aliased to `Session#html` as before, and `Session#source` should return the original source, only under rack-test -- other drivers should raise `NotImplementedError`.

The confusion I see here is that if users do use capy-webkit to retrieve non-HTML content, as @jferris noted, it would be confusing for `Session#body` to return that content wrapped in `<html>` elements.  Instead, if `Session#body` raised an exception, it would be clear that the behavior was unsupported.  I realize that users shouldn't be using capy-webkit to test non-HTML content, but I think it's better to be clear about the issue than offer partial support.
",mhoran,jferris
871,2012-11-19 15:56:33,"@mhoran what I'm suggesting is that all three browsers implement `body`. Drivers where the DOM actually can get modified return the current DOM (Selenium, Webkit) and rack-test always returns exactly what it got back from the server.

@jnicklas the thing I've used capybara for that requires non-HTML responses is testing stuff like CSV generators. For example, we had one application with a Backbone form to request CSV reports. The reports were generated in the background, the JavaScript polled the server until the report was ready, and the browser redirected to the finished CSV when it was ready. It was great to have a couple tests that ran through this whole stack together, all the way to the generated CSV.
",jferris,mhoran
871,2012-11-19 15:56:33,"@mhoran what I'm suggesting is that all three browsers implement `body`. Drivers where the DOM actually can get modified return the current DOM (Selenium, Webkit) and rack-test always returns exactly what it got back from the server.

@jnicklas the thing I've used capybara for that requires non-HTML responses is testing stuff like CSV generators. For example, we had one application with a Backbone form to request CSV reports. The reports were generated in the background, the JavaScript polled the server until the report was ready, and the browser redirected to the finished CSV when it was ready. It was great to have a couple tests that ran through this whole stack together, all the way to the generated CSV.
",jferris,jnicklas
871,2012-11-19 16:15:11,"@jferris, won't we wrap the body in `<html>` tags?  We call toHtml on the QWebFrame, which treats all content as HTML.  My argument is that this wrapping would cause confusion.
",mhoran,jferris
871,2012-11-20 13:29:18,"@mhoran, @jferris (and maybe @jonleighton): can you guys take a look at this pull request #877 and see if that solves the problem.
",jnicklas,mhoran
871,2012-11-20 13:29:18,"@mhoran, @jferris (and maybe @jonleighton): can you guys take a look at this pull request #877 and see if that solves the problem.
",jnicklas,jferris
871,2012-11-21 03:01:13,"I've come up with an implementation of `#source` for capybara-webkit that is far less of a hack than what I had previously conjured up.  I'm fine leaving it in place if we'd like to move forward with different `#source` and `#html` methods.  I'm definitely for the distinction.

@jonleighton, the change could likely be merged into PhantomJS as well.
",mhoran,jonleighton
870,2012-11-18 04:13:13,"Yeah, I'm on the fence like @jnicklas here. We can probably merge it, but I wish we had a better solution.
",joliss,jnicklas
870,2012-11-18 09:21:58,"Not knowing why you moved away from Element#clear, @twalpole's suggestion will be the fastest. 
",jarib,twalpole
870,2012-11-18 14:38:53,"I'm thinking that maybe `Element#clear` was the lesser of all evils, it seems like it only makes a difference in a tiny minority of cases, and is _way_ faster.

As an aside, why are keystrokes so damned slow under Selenium? Especially Chromedriver. @jarib, any insight?
",jnicklas,jarib
870,2012-11-18 14:48:18,"@jarib Could it be a Selenium bug that Element#clear triggers a [change event](https://developer.mozilla.org/en-US/docs/Mozilla_event_reference/change)? With a human user, clearing an element wouldn't cause it to lose focus.
",joliss,jarib
870,2012-11-18 19:49:43,"@jnicklas It appears to be a [known issue](https://code.google.com/p/chromedriver/issues/detail?id=90). I'm sure it'll help its progress if you can demonstrate with code that Chrome is significantly slower than e.g. Firefox.

@joliss I'm not sure what the rationale is for firing the change event, but it's [covered by our test suite](https://code.google.com/p/selenium/source/browse/trunk/javascript/atoms/test/action_test.html#118) so I assume it's intentional. You'll probably get a better explanation if you raise it on the [selenium-developers list](https://groups.google.com/forum/?fromgroups#!forum/selenium-developers).
",jarib,joliss
870,2012-11-18 19:49:43,"@jnicklas It appears to be a [known issue](https://code.google.com/p/chromedriver/issues/detail?id=90). I'm sure it'll help its progress if you can demonstrate with code that Chrome is significantly slower than e.g. Firefox.

@joliss I'm not sure what the rationale is for firing the change event, but it's [covered by our test suite](https://code.google.com/p/selenium/source/browse/trunk/javascript/atoms/test/action_test.html#118) so I assume it's intentional. You'll probably get a better explanation if you raise it on the [selenium-developers list](https://groups.google.com/forum/?fromgroups#!forum/selenium-developers).
",jarib,jnicklas
870,2012-11-22 18:19:09,"Thanks @DouweM and @jarib, I totally misread what `.value` does. That makes me feel much better.

I'm still a bit worried about the whole execute_script thing causing issues, as I wrote above:

> (As an aside, based on my experiences with execute_script, I'd also be scared of weird flickering issues and horrible horrible error handling when things go wrong. Wherever I've used execute_script in the past, I've tried to keep its use contained, and be ready to rip it out if things go bad.)

@jnicklas, what do you think?
",joliss,jarib
870,2012-11-22 18:19:09,"Thanks @DouweM and @jarib, I totally misread what `.value` does. That makes me feel much better.

I'm still a bit worried about the whole execute_script thing causing issues, as I wrote above:

> (As an aside, based on my experiences with execute_script, I'd also be scared of weird flickering issues and horrible horrible error handling when things go wrong. Wherever I've used execute_script in the past, I've tried to keep its use contained, and be ready to rip it out if things go bad.)

@jnicklas, what do you think?
",joliss,DouweM
870,2012-11-22 18:19:09,"Thanks @DouweM and @jarib, I totally misread what `.value` does. That makes me feel much better.

I'm still a bit worried about the whole execute_script thing causing issues, as I wrote above:

> (As an aside, based on my experiences with execute_script, I'd also be scared of weird flickering issues and horrible horrible error handling when things go wrong. Wherever I've used execute_script in the past, I've tried to keep its use contained, and be ready to rip it out if things go bad.)

@jnicklas, what do you think?
",joliss,jnicklas
870,2012-11-22 22:12:55,"@jarib interesting. I'll try to use Element#clear, maybe the issue we were having originally has been fixed.

@joliss we'll try with Element#clear and see if that works, otherwise, let's just keep an eye on it. If people have any trouble we'll have to change it again. As for the attribute changing, I don't think that's the case, we would have to do `setAttribute` for that, the change to the value property is not reflected in the value, from what I know.
",jnicklas,jarib
870,2012-11-22 22:12:55,"@jarib interesting. I'll try to use Element#clear, maybe the issue we were having originally has been fixed.

@joliss we'll try with Element#clear and see if that works, otherwise, let's just keep an eye on it. If people have any trouble we'll have to change it again. As for the attribute changing, I don't think that's the case, we would have to do `setAttribute` for that, the change to the value property is not reflected in the value, from what I know.
",jnicklas,joliss
870,2012-11-23 00:15:03,"@jnicklas: Ah, no - `Element#clear` still fires the change event after setting `element.value = ''`. My point was that the `execute_script` solution is essentially the same code without focus/change events firing.
",jarib,jnicklas
865,2013-04-05 14:22:11,"@radanskoric in Capybara 2.1 (which will be released next tuesday), you'll be able to do:


",jnicklas,radanskoric
865,2013-07-10 16:58:34,"@jnicklas Awesome, thanks for providing this. I just ran into this same problem as well.
",denzilv,jnicklas
865,2013-08-27 19:41:37,"@dcoder2099 Have you tried `select(new_tz, from: 'Time zone', exact: true)`?
",abotalov,dcoder2099
865,2013-08-27 22:16:02,"@dcoder2099 that's an entirely different issue. Capybara doesn't allow you to pick options by value, instead you must specify the text. This is intentional behaviour.
",jnicklas,dcoder2099
865,2013-08-29 19:08:17,"Derp. As soon as you said that, @jnicklas, I realize that makes perfect sense. Just a bit harder test to write.
",dcoder2099,jnicklas
858,2012-11-06 23:36:43,"@ekampp I completely agree with Jonas that this is obviously posted in the wrong place (as happens on nearly every popular project on github because people are too lazy to read, or spend 3 minutes looking at the source, while assuming that a mature heavily used project has some simple functionality that's broken), however I'm not feeling quite as much of an ass today -    remove the # from you selector  -  as can been seen in the xpath gem the link finder compares the string directly to the id (as well as a few other things)


",twalpole,ekampp
858,2012-11-07 01:07:17,"@ekampp read @twalpole's comment again, he did answer the question.
",jnicklas,ekampp
858,2012-11-07 01:07:17,"@ekampp read @twalpole's comment again, he did answer the question.
",jnicklas,twalpole
858,2012-11-07 01:10:26,"@jnicklas if you have no intention of answering the question, and have already marked this as closed, then I think you should bugger of, and let me and him figure out a solution. 

And anyway, we have shifted the correspondance to mail. So nothing more for you to see here. 
",ekampp,jnicklas
856,2013-10-15 10:12:03,"I prefer @joliss solution, since if it's going to be a hacky solution it's better for it to be on the tests. Capybara should support this though.
",zamith,joliss
856,2014-05-16 18:34:00,"Had the same issue while trying to style a label and hide the input it was related to. So when the user clicked the label the input was selected. I had to change the styling as mentioned by @joliss to get my test to work.
",Baril27,joliss
856,2014-05-16 23:35:29,"@twalpole You are correct and thats exactly what I ended up doing.
",Baril27,twalpole
856,2015-08-27 00:04:34,"@kovpack - most drivers don't support clicking on invisible elements because a user wouldn't be able to --- can you put the text within a span or something to enable you to click on that specific content?
",twalpole,kovpack
856,2015-08-27 01:25:51,"@twalpole yeap, put extra span looks like good idea
",kovpack,twalpole
849,2012-10-22 21:33:32,"@jnicklas it didn't, it failed with `:first_name` but passed with `""first_name""`
",envygeeks,jnicklas
849,2012-10-23 11:44:49,"@jnicklas when will you publish the version 2? Do you have any idea?
",fabianoalmeida,jnicklas
849,2012-10-24 15:29:26,"@fabianoalmeida when it's done ;) Soon.
",jnicklas,fabianoalmeida
848,2012-10-17 22:52:21,"Hi @jnicklas, I am running both, because I need Selenium for some more tests which Capybara-Webkit is not capable of doing (such as drag & drop).  Interesting you had a similar issue.  I'll look into a way to run the tests independently to see what happens.  Thanks for the reply.
",mattheworiordan,jnicklas
848,2012-10-26 12:46:58,"@mattheworiordan try running rspec with `rspec -t ~driver:selenium`, this should filter out all examples which are tagged with :driver => :selenium. See if that passes.

@nhance you're running really old stuff, it's difficult to say anything if you aren't on recent versions.
",jnicklas,nhance
848,2012-10-26 12:46:58,"@mattheworiordan try running rspec with `rspec -t ~driver:selenium`, this should filter out all examples which are tagged with :driver => :selenium. See if that passes.

@nhance you're running really old stuff, it's difficult to say anything if you aren't on recent versions.
",jnicklas,mattheworiordan
848,2013-04-23 18:58:59,"@houen there is actually a subscribe button FYI ;)
",jnicklas,houen
848,2013-04-24 05:20:44,"@jnicklas haha, yeah you're right - i feel silly now :-) sorry for polluting the thread
",houen,jnicklas
848,2015-08-28 15:18:55,"@Nerian since you're using capybara-webkit as your driver you should probably look over in that project
",twalpole,Nerian
844,2012-12-15 21:54:33,"@gucki: the title tag _is_ an element and it is decidedly _not_ visible by default. Try adding this CSS selector to a page:



Boom, there is the title _element_ and it is quite distinct from the title shown in the browser chrome. This element is not visible, and if we follow the logic that the text of invisible elements is not shown, then it makes sense that the title _element_ has no text. I agree that that's a matter of debate and discussion, but I wouldn't go so far as to say that the current behaviour is broken. It's just a different interpretation.

I think the solution to this problem is two-fold:
1. Add some kind of other method which returns the text regardless of if it's visible or not. This could be an option to `#text` or a separate method.
2. Add an official API for retrieving the title of the page and querying it. Some work on this has already been done on this and I will take a closer look as soon as I have the time.
",jnicklas,gucki
844,2012-12-15 22:38:52,"@jnicklas Well, it is visible :)
![](http://cl.ly/image/0g2E462s3Z3U/Screen%20Shot%202012-12-15%20at%202.34.51%20PM.png)

I do think it makes more semantic sense for `has_text` to include text from the title element. Since the whole idea behind `has_text` is to move away from the logical model of XML's notion of text and towards the notion of human readable text.

I think your suggested solution for #1 and #2 are a good idea, regardless.
",mkdynamic,jnicklas
844,2012-12-16 10:25:15,"@jnicklas As you say, the elemenI itself is not visible - not only its content. So think it'd be more intuitive if `page.find(element)` would return `nil` if the element is not visible. But when `page.find(element)` returns an element, it should properly return its attributes and content as they are - no matter if it's visible or not.
",gucki,jnicklas
844,2013-01-29 00:24:47,"Thanks @john-patrik. That's a great find and just what I needed. Something like this could be in Capybara by default as per @jnicklas's 2nd proposed solution above: https://github.com/jnicklas/capybara/issues/844#issuecomment-11411003
",LeahCim,john-patrik
844,2013-01-29 00:24:47,"Thanks @john-patrik. That's a great find and just what I needed. Something like this could be in Capybara by default as per @jnicklas's 2nd proposed solution above: https://github.com/jnicklas/capybara/issues/844#issuecomment-11411003
",LeahCim,jnicklas
844,2013-03-08 07:52:05,"@mhartl we've gone out of our way to make this more intuitive for Capybara 2.1. We've added more control over whether to return only visible text or all text and we've added a new api for querying and asserting on the page title.

I'm sorry that behaviour broke this significantly for you, we didn't anticipate that this change would affect users. We had a lengthy beta period for Capybara 2.0, and this issue was not reported during that time. If it had, we could have done something about it sooner.

However, I don't agree that the way you are suggesting to query for the page title is a good idea. Once Capybara 2.1 is released, you should update the tutorial to suggest the use of `have_title`, which will be the official API from now on. `have_selector(""title"", text: ""something"")` might work or it might not, it depends on the driver. Imo, it's a perfectly valid interpretation for the title _element_ not to have any text.
",jnicklas,mhartl
844,2013-03-08 07:55:04,"@mhartl it just occured to me that since Capybara 2.1 will default `Capybara.ignore_hidden_elements` to `true`, and the title element is invisible, it won't be possible to query its content this way, visible text or not.
",jnicklas,mhartl
844,2013-03-08 17:03:31,"@jnicklas I actually never liked using `have_selector` in this context; in the original Rails 2.3 version of the book I used Webrat's `have_tag`, but that disappeared when Webrat was deprecated. Using `have_selector` was the closest, if imperfect, substitute. I agree that `have_title` is much better, and I'll plan to update the tutorial accordingly. Thanks!
",mhartl,jnicklas
844,2013-03-22 01:50:35,"@mhartl See issue #1018 for the Selenium fix.
",topfunky,mhartl
844,2013-05-29 05:52:38,"the solution @john-patrik posted above worked for me
http://stackoverflow.com/questions/13573525/rspec-capybara-2-0-tripping-up-my-have-selector-tests/13755730#13755730
",carlad,john-patrik
843,2013-02-05 16:46:52,"@ffess That's one reason you should be careful of using `synchronize`. It's a powerful methods, but it's semantics are very subtle. You will probably have to strategically call `unsychronized`, to fix these race conditions.
",jnicklas,ffess
843,2013-03-11 13:06:01,"Hm, so I applied https://github.com/DimaSamodurov/capybara/commit/08f228181d44e81cf645243238572e06dff0908b to latest Capybara's master and it seems it works like a charm. I run our scenarios several times and any problem was caused. Thanks @jpurcell001 for your help! I probably don't need to change RSpec/Capybara to something else. I hope @jnicklas will take a look at the commit.
",deepj,jpurcell001
843,2013-03-11 13:06:01,"Hm, so I applied https://github.com/DimaSamodurov/capybara/commit/08f228181d44e81cf645243238572e06dff0908b to latest Capybara's master and it seems it works like a charm. I run our scenarios several times and any problem was caused. Thanks @jpurcell001 for your help! I probably don't need to change RSpec/Capybara to something else. I hope @jnicklas will take a look at the commit.
",deepj,jnicklas
843,2013-03-11 16:43:08,"@jnicklas In his comments on the forum he indicated he isn't ready for a pull request yet since he doesn't have tests, so no surprise.  And it could very well just be a placebo effect that make those changes appear to cut down on the intermittent failures.  But does the reasoning he lays out in the discussion forum (https://groups.google.com/forum/?fromgroups=#!topic/ruby-capybara/A64s_iUdSDE) make sense?  This would help those of us trying to track these issues down know whether his approach is a red herring, or whether there really are race conditions lurking there.  
",jpurcell001,jnicklas
843,2013-03-11 19:38:54,"@deepj it's worth noting that @DimaSamodurov's changes only affect code which is only called under failure conditions anyway. The only thing the commit could have affected is that you would have been shown a different error message. It wouldn't affect whether your test passes or fails, unless you did something very, _very_ crazy.
",jnicklas,DimaSamodurov
843,2013-03-11 19:38:54,"@deepj it's worth noting that @DimaSamodurov's changes only affect code which is only called under failure conditions anyway. The only thing the commit could have affected is that you would have been shown a different error message. It wouldn't affect whether your test passes or fails, unless you did something very, _very_ crazy.
",jnicklas,deepj
843,2013-03-11 19:43:37,"Hmm, just saw that there was another commit on @DimaSamodurov's branch which could in fact affect success/failure. If you are actually seeing that is being beneficial, it would be excellent if you could isolate the kind of code which causes the race condition. Here's a simple template to start with: https://gist.github.com/jnicklas/5137053
",jnicklas,DimaSamodurov
843,2013-03-11 21:47:29,"@jnicklas Thanks for your infinite help with the previous problem how to select the damn select. After rabid goggling how to do it I figure it out. I would appreciate you would to be more helpful. I have used Capybara from 0.2.0 version for all my Rails. It is the best tool for this. Unfortunately with testing external application I have been a bit surprised how many problems were discovered in my case.

I hope this will be helpful from me to you how to catch the problem. Unfortunately the exception is not thrown always. But you should be able to reproduce after serveral re-runs.



We should be both helpful together. Again, thanks for the Capybara. It helped me a lot in the past...
",deepj,jnicklas
843,2013-03-11 23:21:08,"@deepj okay, let's try to solve this together.

I've created a pull request, #1005, which I think solves the race condition you're experiencing. I ran the code you provided and could replicate the problem easily. With #1005, I let it run around 40-50 times without seeing the problem. I'm still not 100% sure what exactly caused the problem, but hopefully #1005 should prevent any similar race conditions from screwing things up in the future.
",jnicklas,deepj
843,2013-03-11 23:35:01,"@jnicklas I dont think 1005 fixes this -- it might slow things down enough that the problem doesnt show, but I believe the real issue is that has_selector? doesnt set allow_reload on the result nodes like Finders#find does. Because of this the auto reloading doesnt actually occur.
",twalpole,jnicklas
843,2013-03-11 23:45:25,"@twalpole in this case, auto reloading isn't necessary though, since the assertion is run on the session itself. Reloading the session would mean reloading the entire page. I'm not sure where you mean that has_selector? should set allow_reload, since it doesn't actually return a node.
",jnicklas,twalpole
843,2013-03-11 23:55:23,"@jnicklas correct and that I believe is actually the issue.  If  the has_selector? '#grid tbody tr', count: 20  manages to grab elements before the .click changes the page then it spins in synchronize getting the StaleElement exception and calling reload.  Unfortunately it cant reload, so does nothing and just goes until timeout.   I put two puts in Capybara::Node#reload so its whats below and its easy to see whats happening.  
      def reload
        puts ""in reload""
        if @allow_reload
          puts ""reloading""
          reloaded = parent.reload.first(@query.name, @query.locator, @query.options)
          @base = reloaded.base if reloaded
        end
        self
      end

If the line is changed to sess.find('#grid').has_selector? 'tbody tr', count: 20  then the reload can happen and the issue goes away
",twalpole,jnicklas
843,2013-03-11 23:57:05,"@jnicklas In my case everything is green. The suite was re-run 20 times so I think it would be enough. Thank you
",deepj,jnicklas
843,2013-03-12 00:20:30,"@jnicklas - Ah - nevermind I see how your patch fixes it.  It was an inner synchronize link that wasnt reloading, now it just fails out to the outer synchronize.
",twalpole,jnicklas
843,2013-03-12 02:32:26,"@jnicklas Tried out the branch with poltergeist master and the vast majority of the failures appear to have gone away.  Now out of about 200 tests it looks like there are 2 that intermittently fail about 30% of the time (interestingly a different set than what was happening with Dima's patch).  Going to try to figure out if we can create a reproducible test case using the gist you provided.  In parallel, is an rspec -b backtrace helpful at all in potentially figuring out what's going on? 

Thanks for both the project and the ongoing assistance.

Jason
",jpurcell001,jnicklas
843,2013-03-12 07:27:55,"@jpurcell001 stack traces are always helpful. The more the better :)
",jnicklas,jpurcell001
843,2013-03-12 15:36:05,"@jpurcell001 there is nothing about in the stack trace that's immediately jumps out as being strange. If you could manage to write something executable that would be fantastic. Sometimes the obsolete node error could actually be legitimate, so we have to figure out if this is happening in Capybara itself or for some other reason.
",jnicklas,jpurcell001
843,2013-03-13 00:28:03,"@jnicklas Think I was able to put a gist together using your template that reproduces the problem.  Filed as #1009 with the gist link as a separate issue.  
That template is awesome by the way.  Removes all excuses for not putting a test case together ..
",jpurcell001,jnicklas
840,2012-10-04 14:20:29,"That's great @danryan. Congratulations! Simple and useful.
",fabianoalmeida,danryan
835,2012-09-26 14:38:27,"@megabga I can't reach the far-away DNS server you suggested. I still tried reproducing the slowness by putting a bogus DNS server. This way, any DNS requests would eat up a lot of time until they time out. On my system though, it looks like Selenium test times are not affected by it. I'm on an Ubuntu 12.04 VM on an OS X Lion host, with the host handling the networking.

I don't think it's impossible that something (like a reverse lookup on 127.0.0.1) might slow down Capybara/Selenium tests on some platforms if DNS is slow. However, we'd need more info to reproduce it - a minimal sample app for instance.
",joliss,megabga
832,2012-10-03 16:04:27,"@joliss is the policy that all parts of the capybara api must be supported by selenium?
",jonleighton,joliss
832,2012-10-04 17:39:34,"@joliss I guess I disagree. There are already differences between what drivers support, and this seems fine to me so long as it's clear to the user that their driver does/doesn't support something.

What seems more problematic is divergence between drivers. For example, capybara-webkit and poltergeist support several of the same things. Let's take resizing the window as an example. In capybara-webkit this is `page.driver.resize_window(x, y)` and in poltergeist it's `page.driver.resize(x, y)`. This means that if a user wants to switch from one to the other they have to change their code. Now I don't know if selenium does or doesn't support resizing the window, but supposing it doesn't I think there's still a lot of value in the capybara project deciding what the blessed API is, because then all the drivers that support that feature can implement it using the same API, increasing portability.

I have a rule that I won't allow Capybara to be monkey-patched in Poltergeist. This gives some indication to users about whether something is non-standard. So basically all non-standard stuff must be on `page.driver` rather than `page` (or a node).

So assuming Capybara doesn't standardise this feature, the only way to support it in poltergeist will be:



Which seems kind of a shame, really.
",jonleighton,joliss
832,2012-12-18 23:52:13,"@joliss wrote ""I think this will be tricky to get into the Capybara API, since it's not supported in Selenium.""

Why don't you like Selenium's [move_to](http://selenium.googlecode.com/svn/trunk/docs/api/rb/Selenium/WebDriver/ActionBuilder.html#move_to-instance_method)?
",abotalov,joliss
818,2012-09-17 05:07:58,"@jnicklas I agree, I submitted the PR hoping to elicit some help. If anyone who understands this can make it better, that would be great.
",lazylester,jnicklas
814,2012-09-19 11:38:51,"@itsNikolay Yours is actually not the same error as this one - you're not on Capybara master. I'll leave an answer on SO.
",joliss,itsNikolay
814,2012-09-19 11:43:52,"@joliss There's no problem if you see solution. Will wait it on SO =)
",itsNikolay,joliss
814,2013-01-04 22:57:40,"@leesmith thanks for the link to that blog post. Quite a bummer that Capybara upgraders were left in the lurch like this. In my situation, I had problems with my `Gemfile.lock` and had to remove it and re-bundle, which upgraded Capybara without me even wanting it to or thinking about it.

Just my opinion that there should be some sort of deprecation warning or explanation if a library suddenly stops working when you upgrade it.  Sadly there wasn't.  But your link to that blog post was (once I eventually found it) actually helpful.  Too bad it wasn't included in deprecation warnings or something that would have been helpful to me (and surely others) when they (whether purposefully or not) upgrade Capybara and find nothing works anymore without any explanation or _hint_ as to what went wrong.
",sdhull,leesmith
814,2013-01-05 00:56:28,"@sdhull apologies that you had trouble with the upgrade. We try to follow semver, so we try to break compatibility very rarely. I would recommend adding a ""~> 1.0"" style dependency; as long as the major version number stays the same, we won't break compatibility in any way. We tried to document all changes as clearly as we could, both in the release announcement, and in the History file.

For most of the changes we made, a deprecation warning would have been impossible, but you're right that we probably could have added one in this case, somehow. We would have had to get rid of it pretty soon anyway though, since the whole point was to clean up clashes within a namespace. If we have to break compatibility again, I'll make sure we add warnings if is possible.
",jnicklas,sdhull
814,2013-01-05 18:54:31,"@jnicklas that would be really great. Personally would appreciate that consideration in the future, and I know probably all other devs using/upgrading Capybara would also appreciate it.
",sdhull,jnicklas
814,2013-08-07 10:32:18,"@amritdeep how in the world is that the same error? That doesn't sound like it has anything to do with Capybara at all.
",jnicklas,amritdeep
814,2014-10-21 13:17:09,"@jnicklas thx, good to know. 

I was commenting the proposed solution with `:type => :feature`. Btw,  instead of adding that setting or replacing `describe` with `feature` I added:



to `RSpec.configure` and that solved everything in my case.
",heaven,jnicklas
811,2013-02-16 18:09:03,"@abotalov has a point. Let's close this down for now.
",jnicklas,abotalov
809,2012-09-07 18:41:51,"@jnicklas The naming convention is a bit tricky. We have `spec/models`, `spec/views`, `spec/helpers`, so I would vote for `spec/features`. But I will leave the final decision for @dchelimsky.

I think adding support for these in rspec-rails will be trivial as well. So rspec-rails should catch up quickly. My $.02. :)
",josevalim,jnicklas
809,2012-09-07 18:53:19,"@josevalim @jnicklas if capybara attaches itself to feature (or features) what would rspec-rails even need to do?
",dchelimsky,josevalim
809,2012-09-07 18:53:19,"@josevalim @jnicklas if capybara attaches itself to feature (or features) what would rspec-rails even need to do?
",dchelimsky,jnicklas
809,2012-09-07 19:03:48,"@dchelimsky I think we need to attach the basic rspec-rails stuff there, like:

https://github.com/rspec/rspec-rails/blob/master/lib/rspec/rails/example/rails_example_group.rb

Or this is attached by default to all example groups? If so, I guess rspec-rails doesn't have to do anything.
",josevalim,dchelimsky
809,2012-09-07 19:07:25,"@josevalim not automatic for all groups, so that would need a fix in rspec-rails - need to coordinate that with a minor release of rspec-rails (eg 2.12.0)
",dchelimsky,josevalim
809,2012-09-07 19:19:52,"@sobrinho: yes, this is also in part to clear up jnicklas/turnip#66, I would personally prefer if Turnip used `:feature` as its type, and the recommendation is to use `spec/features`. After all, Gherkin files do start with the word `Feature`, and I would like to have Turnip behave as close to regular RSpec as possible.

@josevalim: It seems that the folders are plural, but the `:type` is singular, from what I can tell. At least for `:model`, `:controller`, `:request`, `:acceptance`, etc... Maybe @dchelimsky can clear this up.

@dchelimsky: I don't know the internals of rspec-rails at all, so I don't know if it does anything special at all. Maybe not. In that case, even better :)
",jnicklas,josevalim
809,2012-09-07 19:19:52,"@sobrinho: yes, this is also in part to clear up jnicklas/turnip#66, I would personally prefer if Turnip used `:feature` as its type, and the recommendation is to use `spec/features`. After all, Gherkin files do start with the word `Feature`, and I would like to have Turnip behave as close to regular RSpec as possible.

@josevalim: It seems that the folders are plural, but the `:type` is singular, from what I can tell. At least for `:model`, `:controller`, `:request`, `:acceptance`, etc... Maybe @dchelimsky can clear this up.

@dchelimsky: I don't know the internals of rspec-rails at all, so I don't know if it does anything special at all. Maybe not. In that case, even better :)
",jnicklas,sobrinho
809,2012-09-07 19:19:52,"@sobrinho: yes, this is also in part to clear up jnicklas/turnip#66, I would personally prefer if Turnip used `:feature` as its type, and the recommendation is to use `spec/features`. After all, Gherkin files do start with the word `Feature`, and I would like to have Turnip behave as close to regular RSpec as possible.

@josevalim: It seems that the folders are plural, but the `:type` is singular, from what I can tell. At least for `:model`, `:controller`, `:request`, `:acceptance`, etc... Maybe @dchelimsky can clear this up.

@dchelimsky: I don't know the internals of rspec-rails at all, so I don't know if it does anything special at all. Maybe not. In that case, even better :)
",jnicklas,dchelimsky
809,2012-09-07 19:53:27,"> It seems that the folders are plural, but the :type is singular, from what I can tell. At least for :model, :controller, :request, :acceptance, etc..

Ah, right. @dchelimsky so don't we need to change rspec-rails to also map the type `:feature` to the folder `spec/features`?
",josevalim,dchelimsky
809,2012-09-07 19:58:41,"@josevalim if we don't care about :type => xxx, capybara can do it by directory the way rspec-rails does it:


",dchelimsky,josevalim
809,2012-09-09 14:46:02,"@jnicklas just so we're on the same page: the change you just merged will break integration with rspec-2.11. Is that your understanding/intent?
",dchelimsky,jnicklas
809,2012-09-09 15:21:06,"@dchelimsky yes, I'm aware of that. I hope that doesn't screw up your release cycle too much. It'll be at least a month or two before Capybara 2.0 hits, maybe more, so you guys do have some time to prepare.
",jnicklas,dchelimsky
809,2012-09-09 16:26:49,"Assuming spec/features for capybara makes sense for me.

But what about the developers that want to change this structure, @dchelimsky?
",sobrinho,dchelimsky
809,2012-09-09 16:41:57,"@sobrinho as things stand today in rspec-rails, integration, model, view, controller, and routing behavior are all added based on directory structure. It also supports :type => 'xxx', but I don't think any end users write `describe X, :type => 'y' do` in their specs.
",dchelimsky,sobrinho
809,2012-09-09 16:42:50,"@sobrinho to align well w/ how rspec-rails works for the other types, Capy could add itself based on either :type => :feature or dir => spec/features.
",dchelimsky,sobrinho
809,2012-09-09 16:46:24,"I certainly wouldn't have a problem with adding the folder based behaviour too. How does rspec-rails handle this? I can see the metadata `:type => :model` for model specs, but I don't explicitly specify it, so rspec-rails is adding this somewhere? Can we do the same thing? In that case, I think that would be good, and maybe easier to explain.

It's worth mentioning that Capybara's global `feature` method ([described here](https://github.com/jnicklas/capybara#using-capybara-with-rspec)) adds the type explicitly, so it doesn't matter what directory it's in, it will always get the correct type. The issue is mainly with behaviour that people have attached to Capybara specs themselves, and limited to only `:request` specs, that's where compatibility will most likely be affected most.

As @josevalim mentioned however, we still need to attach the base Rails behaviour stuff (routing etc.) to `:type => :feature` specs, and that is something that _will_ require a new rspec release, from what I can tell.
",jnicklas,josevalim
809,2012-09-13 20:08:26,"I'd be happy to review the changes for rspec-rails if you make a pull, @jnicklas.
",alindeman,jnicklas
809,2012-09-26 00:22:57,"@jnicklas @alindeman I'll have time after Monday (conf preso) and happy to work w/ either one or both of you on this.
",dchelimsky,alindeman
809,2012-09-26 00:22:57,"@jnicklas @alindeman I'll have time after Monday (conf preso) and happy to work w/ either one or both of you on this.
",dchelimsky,jnicklas
809,2012-09-27 03:32:58,"@jnicklas don't sweat it. @alindeman and I will work on it after Monday. When are you trying to get your release out? I'd like the rspec-rails release that supports this to be out well in advance of the capy release.
",dchelimsky,alindeman
809,2012-09-27 03:32:58,"@jnicklas don't sweat it. @alindeman and I will work on it after Monday. When are you trying to get your release out? I'd like the rspec-rails release that supports this to be out well in advance of the capy release.
",dchelimsky,jnicklas
809,2012-09-27 12:24:38,"@dchelimsky we're pretty much ready to go with Capybara. I want to do another beta release, and then wait for a month before I do the final release, but aside from this issue there isn't anything stopping us. So the ideal for us would be if we do the beta release immediately after you guys do your release, and then wait a month, then final 2.0 release. Does that sound sensible?
",jnicklas,dchelimsky
809,2012-09-27 12:43:34,"@jnicklas sure, but it might be a couple of weeks before we're ready to go. This will be part of a minor release of the entire rspec suite so there are some things that need to be coordinated. Most likely we'll be able to get it out the door by Monday, Oct 8, but I can't promise that at this point. We'll keep you posted.
",dchelimsky,jnicklas
809,2012-10-06 13:45:55,"OK - I got started on this. I've added one commit that includes `Capybara::DSL` and `Capybara::RSpecMatchers` in example groups in the spec/features directory: https://github.com/rspec/rspec-rails/commit/9332167de751e3c1c2f240e656e4a7d6e9b44bfa

There is no automated testing for this but there was none before either. I've verified that it does the right thing by ensuring that the following runs correctly (in spec/features/thing_list_spec.rb):



This solves for the ""features"" directory, but not the ""api"" directory. I see that as separate from this specific issue even though it's part of the wider discussion spawned by @josevalim. Agree?
",dchelimsky,josevalim
809,2012-10-06 16:00:06,"@jnicklas I'm not sure I'll be able to get a minor release out this weekend, but I can do a patch release of rspec-rails. This would be rspec-rails-2.11.1. Are you OK explaining in your release notes that capy-2 requires rspec-rails >= 2.11.1 or would you rather wait until we do the 2.12 release (which is unlikely to happen before next weekend).
",dchelimsky,jnicklas
809,2012-10-07 02:12:03,"Hey @jnicklas looking this over a bit more, right now capybara takes the responsibility of adding itself if type == :feature, but rspec-rails is responsible to add capybara if directory == spec/features. This feels odd to me. I'm thinking that either rspec-rails or capybara should own both. rspec-rails would still include Capybara::RSpecMatchers in other types of specs (but not DSL) either way. Thoughts?

/cc @alindeman 
",dchelimsky,alindeman
809,2012-10-07 02:12:03,"Hey @jnicklas looking this over a bit more, right now capybara takes the responsibility of adding itself if type == :feature, but rspec-rails is responsible to add capybara if directory == spec/features. This feels odd to me. I'm thinking that either rspec-rails or capybara should own both. rspec-rails would still include Capybara::RSpecMatchers in other types of specs (but not DSL) either way. Thoughts?

/cc @alindeman 
",dchelimsky,jnicklas
809,2012-10-14 18:54:08,"@jnicklas I released rspec-rails-2.11.4 today with support for including Capybara::DSL and Capybara::RSpecMatchers in spec/features. I've tested this building a new app using capybara-head and rspec-rails-2.11.4 and files added spec/features work as expected (visit/page are available and get|post|put|delete|head are not), and spec/requests also work as expected (get|post|put|delete|head work but visit/page do not).

I was under the false impression that the capybara-2.0.0.beta release already removed support for spec/acceptance and spec/requests, so I documented that you can use rspec-rails-2.11.4 + capybara-2.0.0.beta2. This _does_ work in the sense that you can now use visit/page in spec/features, but it does _not_ solve the ""get and visit are both available"" problem. Any chance you can drop a capybara-2.0.0.beta3 release sometime soon?
",dchelimsky,jnicklas
809,2012-11-07 03:01:36,"/cc @dchelimsky 

After @alindeman's https://github.com/rspec/rspec-rails/commit/fd25838a39321708d6cdaaeb493274f119db1a19 I think we're getting closer.

One (hopefully last) issue is that previously we'd have a `:type` set on the examples, e.g. you could do



Looking at https://github.com/rspec/rspec-rails/blob/master/lib/rspec/rails/vendor/capybara.rb and grepping the rspec-rails source for `:feature`, it seems that we don't really have a corresponding `:feature` type now, but instead we just go off of the spec path. Should we perhaps change that?
",joliss,alindeman
809,2012-11-07 03:01:36,"/cc @dchelimsky 

After @alindeman's https://github.com/rspec/rspec-rails/commit/fd25838a39321708d6cdaaeb493274f119db1a19 I think we're getting closer.

One (hopefully last) issue is that previously we'd have a `:type` set on the examples, e.g. you could do



Looking at https://github.com/rspec/rspec-rails/blob/master/lib/rspec/rails/vendor/capybara.rb and grepping the rspec-rails source for `:feature`, it seems that we don't really have a corresponding `:feature` type now, but instead we just go off of the spec path. Should we perhaps change that?
",joliss,dchelimsky
809,2012-11-07 08:44:32,"@joliss did you see rspec/rspec-rails#632?
",jnicklas,joliss
806,2012-11-21 23:49:12,"Hi @jnicklas,

A philosophical point:

So I understand your arguments for why you want to hide `#synchronize`, and how the method is not simply a renaming of the capybara 1.x `#wait_until` method. It is also cool how generally in capybara you don't need to concern yourself with waiting for elements to appear due to automagic synchronizing. Kinda analogous to how OS X makes things all pretty and easy to use - lots of things happen automatically without having to concern yourself with trivial details. But... Apple still give me Terminal.app to use when I want to do something with my mac that Jonny Ive would rather I didn't. In the same spirit, if I were in your position, I'd leave `#synchronize` public.

A practical question:

With `#wait_until` gone and without access to `#synchronize`, I'm trying to work out how to allow for customized wait times. How would I convert the following capybara 1.x code to work in 2.x?



If I understand capybara 2.x's code right, shouldn't the following be what I want?



Ie: just get rid of `#wait_until` and let `#has_selector?` do the synchronizing in the background?

Regards,

Nat Ritmeyer
",natritmeyer,jnicklas
806,2012-11-22 09:03:07,"@natritmeyer: you're spot on in your second example. The wait_until call there was redundant even under Capybara 1.x. It would have worked just as well without it.

It's not so much that you _can't_ manually wait. It's trivial to implement wait_until yourself: https://gist.github.com/d8da686061f0a59ffdf7, but I would consider it a last resort.
",jnicklas,natritmeyer
803,2013-07-02 22:22:55,"@MITDelian unfortunately, no. If you'd like to help, that'd be great.
",jnicklas,MITDelian
800,2012-09-09 13:40:13,"Hey @idrozd, does `find_link('Course date').click` reloads the page for you? Otherwise I don't undestand how do you expect rows data in table to be reordered using `rack-test`.
",gmile,idrozd
799,2012-08-30 18:20:22,"@kurtisnelson The current code in master accepts a regex for has_text? (and has_content? since that's just an alias of has_text) - and as an FYI , so does the :text option passed to finders
",twalpole,kurtisnelson
796,2012-08-31 00:16:31,"@joliss let me try checking out master and see if that fixes the problem.  It's recently become an issue because I just now upgraded to Rails 3.1.8 and `SafeBuffer` has started to encode single quotes.  This has caused a pretty large headache.

Such that doing this:



Perhaps `master` has fixed this issue or there's something more insidious going on.  I'll update back here when I have time to try it this weekend.

Thanks for the feedback!
",jfelchner,joliss
796,2015-06-05 19:24:46,"@budu This is an issue that was fixed/closed a long time ago with no one else reporting problems-- if you're having issues with this you may want to ask on the mailing list.
",twalpole,budu
791,2012-08-30 18:48:59,"@jackdesert could the file input tag be hidden in some way? Say, it has `opacity: 0`, `visible: none` or something? I this cases there's a possibility that the js driver you are using cannot access it correctly, i.e. click it.

The driver may also consider element invisible if it is located off the screen, or is being overlapped by some other element.

And, by the way, no wonder that you are able to upload the file without `js: true`. In this case `rack-test` is responsible for rendering the page. As far as I know, `rack-test` doens't load `css` and `js` assets, but what's more important is that it doesn't do any work to interpret them, i.e. match to corresponding dom elements.
",gmile,jackdesert
791,2012-09-23 20:37:27,"@gmile, yes indeed it was hidden. So instead of hiding it, now I'm just positioning it off screen, like so:



and it's working with or without :js => true

Incidentally, now the upload works in Chrome, too. It wasn't before. 
",jackdesert,gmile
791,2016-06-05 14:25:13,"@kay4444  Please ask howto questions on the mailing list as requested in the README, or if you believe you've found an actual problem with Capybara provide enough info to replicate, including things like the versions of gems used and the actual error messages you're getting, etc.
",twalpole,kay4444
789,2012-08-14 15:08:36,"Hey @jarib, @ramontayag is having a weird problem where the Selenium bridge seems to lock up for minutes when he calls `all('html')`. Is there something he can do to produce some trace log of the communication between Ruby and Firefox, to figure out where exactly it's going wrong?
",joliss,ramontayag
789,2012-08-14 15:22:44,"@joliss I tried it with `dtruss` but the test does not seem to want to start.

Thanks @joliss and @jarib - I've run it with `$DEBUG` and saw a bunch of stuff. It's pretty late here, so I need to get some shut eye. I'll get back you both with what I find.

# 

**I realized** at the last minute that, because other finds worked in the spec without delay, maybe it's the way `pry` prints out stuff (it uses awesome_print). I tried doing `find('html').to_s` and I got a result immediately.  I guess that rules out selenium-webdriver? I guess `awesome_print` does some recursive hoopla to print it out with all the info you need, thus the thousand-line output.

I have yet to fully test this hypothesis though. I'll be a zombie tomorrow if I don't get sleep. Thanks again.
",ramontayag,jarib
789,2012-08-14 15:22:44,"@joliss I tried it with `dtruss` but the test does not seem to want to start.

Thanks @joliss and @jarib - I've run it with `$DEBUG` and saw a bunch of stuff. It's pretty late here, so I need to get some shut eye. I'll get back you both with what I find.

# 

**I realized** at the last minute that, because other finds worked in the spec without delay, maybe it's the way `pry` prints out stuff (it uses awesome_print). I tried doing `find('html').to_s` and I got a result immediately.  I guess that rules out selenium-webdriver? I guess `awesome_print` does some recursive hoopla to print it out with all the info you need, thus the thousand-line output.

I have yet to fully test this hypothesis though. I'll be a zombie tomorrow if I don't get sleep. Thanks again.
",ramontayag,joliss
786,2012-08-10 10:40:34,"Hey @mwernicke,

Try reposting this on the mailing list please. I'd suggest you also provide some more detail - from what you've posted, no obvious problems spring to mind.
",joliss,mwernicke
783,2012-08-22 14:34:09,"Regarding whether we should have this feature: It seems to be a rather rare use case, for expressions like `all(:checkbox)`. For `find`, something like `find(:checkbox)` seems too brittle to be useful.

Because of that, I'm not convinced that it's worth the added complexity in the selector definitions (and other code).

The only real usability issue I see is `node.all(:checkbox).length` being 0 (confusingly), because it searches by ID. If we deprecated the symbols-as-ID feature, this problem would go away. But even that seems rare enough that I wouldn't worry about it.

So my vote is, leave it as it is. It's @jnicklas's call though, as always.
",joliss,jnicklas
783,2012-08-22 16:09:20,"My rough implementation is backwards-compatible with `find(:my_id)`, because [it simply falls back to the old behavior](https://github.com/adammck/capybara/blob/e34ec60707f6832cfafd4b57bf8776fcd46a5069/lib/capybara/query.rb#L17) if the first parameter isn't a valid selector type. I recognize that this is more complex than absolutely necessary, but backwards compatibility seems more important than purity here.

I think that we should remove `find(:my_id)` anyway, since it's so easy to update to `find(:id, ""my_id"")` or `find_by_id(""my_id"")`, but this would be a backwards-incompatible change, so it would be a major version bump. I'd deprecate the old behavior in 2.0 and remove it in 3.0, but it's obviously @jnicklas' call.
",adammck,jnicklas
783,2012-08-22 17:23:56,"Regarding @joliss' second point, I agree that `find(:checkbox)` is not very useful. But since `find(:x, locator)` is used so frequently, it seems reasonable to expect that `find(:x)` and `all(:x)` would work in the same way. I don't think that it should be required that all selectors expect a locator, especially not user-defined selectors.
",adammck,joliss
783,2012-09-09 17:38:33,"@joliss and @adammck check out the commit I just pushed. I don't think we'll have time to get this into Capybara 2.0, so I preemptively broke the API. I think it's better to be unambiguous. Now `find(:foo)` will always be a custom selector with the name `:foo`, you don't have to know whether or not that is defined, which seems better to me. That leaves us the option of creating a nice consistent API for this in the future.
",jnicklas,joliss
783,2012-09-09 17:38:33,"@joliss and @adammck check out the commit I just pushed. I don't think we'll have time to get this into Capybara 2.0, so I preemptively broke the API. I think it's better to be unambiguous. Now `find(:foo)` will always be a custom selector with the name `:foo`, you don't have to know whether or not that is defined, which seems better to me. That leaves us the option of creating a nice consistent API for this in the future.
",jnicklas,adammck
783,2012-09-09 21:25:24,"@adammck do send a pull request once you're ready!
",jnicklas,adammck
783,2014-02-20 08:11:13,"@abotalov did you post this to the right issue? I agree, but I'm not sure what this has to do with this issue?
",jnicklas,abotalov
783,2014-02-20 08:33:36,"@jnicklas I think I posted to the right issue. I think adding this API will encourage people to write something like:



which would be bad. I don't see a way how we can write it so it won't make N+1 driver method invocation.
",abotalov,jnicklas
772,2013-07-02 14:53:52,"@jdickey I'm not aware that any of the current behaviour is buggy, it's quite extensively documented and tested. The behaviour that @prusswan claims has worked before, has never worked in any version of Capybara. The only change is that we now throw an error when you use an unsupported key. That's all.

The coercion issue mentioned has long been fixed.

So I'm not sure what exactly you expect, but you're certainly not being particularly courteous in asking for it.
",jnicklas,prusswan
772,2013-07-02 14:53:52,"@jdickey I'm not aware that any of the current behaviour is buggy, it's quite extensively documented and tested. The behaviour that @prusswan claims has worked before, has never worked in any version of Capybara. The only change is that we now throw an error when you use an unsupported key. That's all.

The coercion issue mentioned has long been fixed.

So I'm not sure what exactly you expect, but you're certainly not being particularly courteous in asking for it.
",jnicklas,jdickey
771,2012-08-08 05:31:26,"@badeball you're a genius!  this has solved the remaining funky issues I was having!  I created a helper to handle the various ui cases that I needed to wait for: 

https://gist.github.com/3292441
",synth,badeball
771,2012-08-08 12:37:18,"@synth Re your gist, you can implement wait_until_overlay_has_popped_up without resorting to evaluate_script by doing something like this (assuming RSpec; untested):



It will wait for the element to appear. For the other method, analogously with have_no_css.
",joliss,synth
771,2013-11-24 23:06:02,"@adamwaite, given that Capybara is simply a fast user, one can assume that a regular user with a slow connection might experience similar troubles when actuating on your site before assets has finished loading asynchronously. How would you solve that? You could for instance output buttons in a disabled state and enable them with Javascript, thus forcing a user to wait until it has loaded. Or you can query some other element that you know will change once that the Javascript has loaded.
",badeball,adamwaite
771,2013-11-26 20:05:00,"My solution, in case any stumbles upon a similar problem... 

Append class `ready` to an element in the DOM using an asynchronous module that should come last. Then query that element. I hade a helper in `support/some_helper_file.rb`:



and then we can:



Inspired by @badeball, Thanks.
",adamwaite,badeball
767,2012-07-28 19:13:42,"@lihuazhang It's conceivable that something in the stack (Ruby, Selenium, Capybara) messes up. To make sure:
- Does the page you're on have a proper encoding declaration or header?
- Are you using Ruby 1.9.x? Ruby 1.8.7 has much weaker Unicode support. Capybara supports both, but it's possible that 1.8.7 might choke on something.
- There's a space between 知 and 道. Is that intentional? Space-vs-no-space matters in Capybara.
",joliss,lihuazhang
767,2012-07-29 04:13:46,"@jnicklas Thanks. why I thought something wrong with normalize-space is that when I use XPATH checker (https://addons.mozilla.org/en-US/firefox/addon/xpath-checker/),

 Using this xpath:
 `.//a[./@href][(((./@id = 'MP3' or normalize-space(string(.)) = 'MP3') or ./@title = 'MP3') or .//img[./@alt = 'MP3'])]`, the XPATH checker can find the element.

But when I use:
`.//a[./@href][(((./@id = '知 道' or normalize-space(string(.)) = '知 道') or ./@title = '知 道') or .//img[./@alt = '知 道'])]`,
the XPATH checker cannot find the element.

I tried all the text link in Chinese. None can be found.

@joliss 
Thanks.
the encoding is:
`<meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312"">`

I use 1.9.3 and I tried Chinese text link without space inside.
",lihuazhang,jnicklas
767,2012-07-29 04:13:46,"@jnicklas Thanks. why I thought something wrong with normalize-space is that when I use XPATH checker (https://addons.mozilla.org/en-US/firefox/addon/xpath-checker/),

 Using this xpath:
 `.//a[./@href][(((./@id = 'MP3' or normalize-space(string(.)) = 'MP3') or ./@title = 'MP3') or .//img[./@alt = 'MP3'])]`, the XPATH checker can find the element.

But when I use:
`.//a[./@href][(((./@id = '知 道' or normalize-space(string(.)) = '知 道') or ./@title = '知 道') or .//img[./@alt = '知 道'])]`,
the XPATH checker cannot find the element.

I tried all the text link in Chinese. None can be found.

@joliss 
Thanks.
the encoding is:
`<meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312"">`

I use 1.9.3 and I tried Chinese text link without space inside.
",lihuazhang,joliss
767,2012-07-31 16:12:09,"Ah, that's a bug indeed! This happens because `知 道` on baidu.com has an `&nbsp;` as space. As a workaround, try `""知\u00a0道""`.

@jnicklas I have a fix in the queue, but I need to extract #normalize_whitespace into a global method. (It doesn't use `this`.) Is there a nice place for it, like Capybara::Helpers.normalize_whitespace?
",joliss,jnicklas
767,2012-08-01 11:30:46,"Okay, this is fixed on Capybara master. Thanks @lihuazhang!
",joliss,lihuazhang
766,2012-07-25 18:40:01,"@jnicklas yeah, it works.
",nashby,jnicklas
761,2014-10-09 23:54:52,"@jnicklas , could you correct your comment from 



to 



? 
Somebody can have a lot of time for to find mistake in him code. Best Regards!
",byzg,jnicklas
760,2012-07-19 10:42:40,"Temporary solution: Specify the ffi version directly `gem 'ffi', '~> 1.0.11'` 
@iRonin does this work for you?
",ticktricktrack,iRonin
749,2012-07-12 11:37:42,"@jnicklas Fair points, thanks for the feedback. 

Setting a textfield value via Capybara behaves differently from a human being doing so via the browser. That seems broken to me. 

Of course new code should be able to handle multiple change events firing, though that point seems irrelevant. What if I'm putting tests into place before I refactor a legacy application? What if I'm using Capybara against a staging environment that requires third-party authentication, and the third-party site is awful?

I'll remove the jQuery dependency, give the fix implementation another shot, and open a new pull request. Let me know if you have any specific ideas for the right way to do this. 
",akasper,jnicklas
746,2012-07-09 07:17:42,"@joliss right. any thoughts how to fix it except checking for regexp and using `match` or `include` based on that check?
",nashby,joliss
746,2012-07-09 13:27:53,"@jnicklas right, thanks. I'll fix it tonight!
",nashby,jnicklas
746,2012-07-09 15:28:09,"@jnicklas I've update the code. Not sure if about separate `escape_regexp` method though.
",nashby,jnicklas
735,2012-06-25 17:51:58,"@joliss I adapted the template.rb into an equivalent test:



This works fine in IE9.  It's possible that capybara is calling different selenium-webdriver apis than I am, however.  At any rate, I can't reproduce the issue using pure selenium-- there's some kind of problem between capybara and selenium.
",paleozogt,joliss
735,2012-06-25 19:13:33,"@joliss In debugging this some more I noticed that capybara opens 127.0.0.1 rather than localhost.  While this seems innocuous, I changed my pure-selenium script to use 127.0.0.1:



and it fails!



So it's definitely not a capybara issue-- its some kind of problem with selenium + IE9.  Is it possible to workaround this issue by telling capybara to use ""localhost"" instead of 127.0.0.1?  I could use `Capybara.app_host`, but then how would I know which port capybara is running the rack host?
",paleozogt,joliss
733,2012-06-26 22:27:19,"Mentioning @jarib like @joliss says above as I am seeing the same issue. I see the issue in full rake run. When I setup a breakpoint before the checking the url then the tests pass so that does imply a timing issue. Interesting thing is that after I have once run with a breakpoint the next run succeeds for just that cucumber scenario but I guess such is the life with races.
",betelgeuse,joliss
724,2012-07-12 18:37:56,"Same issue as @xoen, link generated using link_to_add
",anu-vaid,xoen
724,2013-04-22 15:43:45,"@MrHubble From a quick glance at the stacktrace it looks like your submit button is not actually associated with a form on the page.  Are you sure the submit is actually inside a form element in the generated html  or if outside the form does it have a form attribute that equals the id of the form you expect it to submit? - maybe posting the generated html for the form would help?  
",twalpole,MrHubble
724,2013-04-23 02:39:00,"@twalpole Thank you so much for your help. Yes, as you may have expected, it was a problem with my code. I am using Bootstrap and SimpleForm and I believe my issue was I was starting a row before the start of the fieldset and then closing the row within the fieldset. The code may explain this better:



When I moved the row tag under the fieldset tag then my test go green without needing to use Selenium:


",MrHubble,twalpole
724,2014-09-01 16:18:32,"@jnicklas I appreciate your good work for creating Capybara. 
I've only been into development using ruby on rails for about 7 months, I have noticed that `click_on` produces the error that was shown in this issue, for buttons that are not in a form. However, sometimes some buttons are not in a form. e.g I have a button that simply unhides a certain `div` when it is clicked on. 

what is work around for this? by asking this I have used the different query methods and I have not been sucessful. and simply putting a button into a form so that test runs might not be very ideal.
",leonardk1,jnicklas
719,2012-07-10 14:40:21,"@jnicklas Thanks!!
",jjulian,jnicklas
717,2012-05-24 09:59:29,"Too bad. Maybe someone (@IdahoEv?) could figure out what's causing the breakage and create a patch for 1.1.2 to backport whatever fix there is in master.
",joliss,IdahoEv
714,2012-05-21 20:40:57,"@jsmiley if you're writing a bug report you need to be as explicit as possible. Now this bug doesn't really concern Capybara, but if I were Jari, I would probably need way more information than you've given us here. Remember, these are bug trackers, not support forums, it's not our responsibility to figure out what issue you are having. The template is there to guide you in writing something the Selenium guys can use to help you.
",jnicklas,jsmiley
714,2012-05-21 21:35:58,"@jsmiley it's not so much about the template itself, as _isolating_ the problem. That's what the template is useful for. Run it, verify that it works, then modify it so it more closely resembles how your code looks, until you can come up with the most minimal set of conditions for creating the error you're experiencing.
",jnicklas,jsmiley
714,2012-05-21 21:37:04,"@jnicklas, it will never work. DATA doesn't exist.
",jsmiley,jnicklas
708,2012-05-25 23:35:30,"@lanej: Why would it need to be configurable? Surely there can't be a legitimate use case for more than 20 redirects in a row, especially since no browser even supports that.
",jnicklas,lanej
708,2012-05-26 00:15:21,"This allows the casual user to abide by the default limit if 5, but special case tests like mine can raise the limit to exactly what is needed to assert success. +1

On May 25, 2012, at 7:35 PM, Jonas Nicklasreply@reply.github.com wrote:

> @lanej: Why would it need to be configurable? Surely there can't possibly be a legitimate use case for more than 20 redirects in a row, especially since no browser even supports that.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/708#issuecomment-5942634
",jjulian,lanej
708,2012-05-26 03:10:25,"Working with zendesk, I have a legimate case where 6 302 requests are issued in sequence and I haven't found a browser yet that doesn't support it.

The specs were not meant say that 21 sequential redirects was a legitimate case @jnicklas, just > 5.
",lanej,jnicklas
705,2012-05-13 13:24:49,"@thoferon Right. @jarib, here's a gist that demonstrates that selenium-webdriver returns ""true"" and ""false"" as strings for the 'disabled' attribute: https://gist.github.com/2688447 That seems odd, at least. Would you mind taking a look?

I'm closing this issue, since it's not a Capybara issue, but let's continue discussion here unless/until we have a bug report in the upstream tracker.
",joliss,thoferon
703,2012-05-02 07:08:18,"@yomike05 Awesome, that was exactly what was happening to me! I'm using @josevalim's trick and that fixed it. Thanks a bunch! I'm gonna leave this ticket open for the moment cause I'd like to see mention of this issue in the documentation. I imagine it's quite common given the simplicity of the test that surfaced it for me.
",jimmycuadra,yomike05
702,2012-07-12 08:46:16,"@asdavey: seems like this is either an upstream issue, or more likely an issue with your code. If you figure this out and can relate it back to Capybara, I will reopen this issue.
",jnicklas,asdavey
699,2013-01-22 22:09:57,"For those that end up here via google like I did, I want to note that we ran into issues with this as well. It seems also that @jnicklas [considers this dangerous](https://groups.google.com/forum/#!msg/ruby-capybara/sgBkBKVXf_w/N3t0cS2ODl8J) now too. It worked for us for a long time. It started being less stable as we started using the parallel_tests gem.
",aaronjensen,jnicklas
698,2012-04-26 19:20:32,"That it does! Now we only need to get it pulled in... @jnicklas, you still following this?
",DouweM,jnicklas
698,2012-06-11 00:56:10,"@jnicklas, can you take a look at this? I think it should be merged. 
",andmej,jnicklas
698,2012-07-03 06:14:22,"@jnicklas @DouweM  In fact, I think the `insert_port_into_portless_url` option could be true by default. Would there be any problems if we did that? I think adding the port doesn't hurt, even if it's not needed.
",andmej,DouweM
698,2012-07-03 06:14:22,"@jnicklas @DouweM  In fact, I think the `insert_port_into_portless_url` option could be true by default. Would there be any problems if we did that? I think adding the port doesn't hurt, even if it's not needed.
",andmej,jnicklas
698,2012-07-03 08:41:11,"@jnicklas Why not? When we call `visit`, we always mean to navigate to a page served through Capybara (right?), so if for whatever reason we don't specify the correct port (when providing a URL with a subdomain, for example), wouldn't automatically inserting the port be the right thing to do? This way people can forget that Capybara serves the app on a randomly generated port, which really isn't that interesting to them as it's really just an implementation detail to Capybara. For people who don't want this behavior, the option can easily be turned off.
",DouweM,jnicklas
698,2012-07-03 09:44:02,"@jnicklas Ah, all right. I wasn't aware Capybara was used like that, but I guess it makes sense. In that case, I definitely agree this option should not be on by default. I would still really like it to be an option, though. 
",DouweM,jnicklas
698,2012-07-03 17:57:28,"I see. In that case I also agree that the option shouldn't be on by default.

Can we still merge this? I'm currently using my own fork and I'd like to see this change upstream.

@jnicklas what can we do to help with the merge? Perhaps you want more tests? Just ask :)
",andmej,jnicklas
698,2012-07-04 14:55:43,"@jnicklas I think we're ready now!
",DouweM,jnicklas
698,2012-07-11 05:18:31,"Thanks @jnicklas!
",andmej,jnicklas
691,2012-04-14 12:24:20,"@rb2k, I assume this issue can be closed?
",joliss,rb2k
690,2012-06-15 15:18:54,"as far as I can see  there is currently no capybara function to verify whether the browser is done loading (I screened the code base but couldn't find it ; selenium seems to have a wait_for_page_to_load function but this function does not seem to be usable from within capybara ). 

One can check for a specific element to be present on the page after the click action, however this is not always possible (for example saving a form which returns to the same page and only shows a message in case of a validation issue).

Adding a hardcoded sleep also seems incorrect as the time to sleep may vary and depends on the server and network

Making the click action synchronous will always work.

@illicitonion  : do you know another way of achieving the wait action?
",pvmeerbe,illicitonion
690,2012-06-18 17:31:33,"@pvmeerbe while understanding your concern - I want this fixed, too - you could test for a positive message (""successfully touched the pidgeon"") using the wait_until. The `page#has_css?` and `has_content?` already does this internally.

I consider it good practice to show the user her action succeeded.
",niklas,pvmeerbe
690,2012-06-19 14:55:16,"@niklas I agree with you on the proposed good practice. unfortunately I have no impact on the code base and cannot add such functionality :(

I worked my way through the capybara code and found the 'resynchronize' function for the Capybara::Selenium::Driver class. This is exactly what I need. It seems to be designed for ajax, which is not the case for me, however it does what needs to be done to wait for page completion (i.e check the readyState variable). Aside from the 'click' call the following calls will also be waiting for page completion : set, select_option, unselect_option, drag_to

The README.rdoc in the code base mentions the following on the resynchronisation option:

""...Capybara can block and wait for Ajax requests to finish after you've interacted
with the page. To enable this behaviour, set the <tt>:resynchronize</tt> driver
option to <tt>true</tt>. This should normally not be necessary, since
Capybara's automatic reloading should take care of any asynchronicity problems.
See the section on Asynchronous JavaScript for details.....""

As far as I understand the  ""Capybara's automatic reloading ""  currently does not handle the 'wait for page completion' issue, but enabling the resynchronisation option seems to easily add it. Is there any reason why the resynchronize option for a new Capybara::Selenium::Driver is deactivated by default? 
",pvmeerbe,niklas
686,2012-12-12 16:37:54,"@kbaum We just added a wrapper method to execute code in the context of every sub-frame one by one.

You could just do:



But as described in my first post, I think that shouldn't be necessary.
",pfleidi,kbaum
686,2013-02-27 10:07:27,"@fy-kenny please review what's previously been said in this issue, and take a look at @twalpole. If you're still having problems, please write something more coherent. I can't make any sense out of what you've written.
",jnicklas,fy-kenny
685,2013-05-11 16:29:30,"@thelucid Your question is better asked on the mailing list, rather than on a pull request that was closed almost a year ago.  You probably want to be looking at Capybara.server_host, Capybara.server_port, Capybara.app_host, and Capybara.default_host if you need to be setting the servers properties to something, or  current_session.server.host and current_session.server.port if you just want to know what they are while the test is running
",twalpole,thelucid
685,2013-05-11 16:58:28,"@twalpole Apologies, I thought it was related to the pull request.
",thelucid,twalpole
684,2012-10-19 18:12:45,"@rknLA Could you please explain how you solved this issue? I just got stuck on it.
",premjg,rknLA
684,2012-10-19 18:17:10,"@rknLA Got it. Basically you need to place all your request specs in the specs/requests folder _only_
",premjg,rknLA
673,2012-03-27 14:55:53,"@JohnSmall 

Is the xpath you pasted { page.should have_xpath(""//div/h2[./text()='Some text']"") } the xpath you are using?

If so, shouldn't your expression be { ""//div/h2[text()='Some text']"" }? Looks like a typo to me, but then again, maybe this is some XPath convention that I am unaware of?

Also, could it be the case that you didn't give the full text expression? You could try:
{ ""//div/h2[contains(text(), 'Some text')]"" }
",wokkaflokka,JohnSmall
668,2012-03-26 15:14:33,"@raggi: I see what you mean. I use a testing library that halts on the first assertion failure, so letting the server die wasn't a problem for me. I'll think a bit more about this. Thanks for your feedback.
",djanowski,raggi
668,2012-03-27 01:33:50,"@cvincent: What driver are you using?
",djanowski,cvincent
668,2012-04-02 16:27:32,"@raggi: Just changed this a little bit, so now:
- It doesn't use `abort_on_exception`.
- It doesn't let the server die.
- It raises the exception on the correct thread, so can be used outside of `Thread.main`.

What do you think now?

@jnicklas: This is an alternative solution that doesn't require to actively check for errors.
",djanowski,raggi
668,2012-04-02 17:47:30,"This looks like a _much_ cleaner solution to me. @raggi et al. what do you think? I really like the fact that the exception is just handed to the main thread. It seems like a very elegant solution. Also, I'd never seen the Queue class in Ruby core, quite neat!
",jnicklas,raggi
668,2012-04-04 01:12:10,"@djanowski this still causes capybara-webkit to choke. After a spec raises an exception, it is caught and the test output shows it (nice!). However, every Capybara spec after the first one fails with `Capybara::Driver::Webkit::WebkitInvalidResponseError`, just after the console spits out `QCoreApplication::postEvent: Unexpected null receiver`.

I suspect this is an issue with capybara-webkit rather than your patch. For now I'm going to go ahead and use your patch and ignore specs failing with `WebkitInvalidResponseError` after the first failure. It's just so valuable to be able to see exceptions on the server in the spec output rather than parsing through the server log. Thanks a ton for the patch!
",cvincent,djanowski
668,2012-04-04 01:18:12,"@cvincent: I'll try to review what's going on since I'm a capybara-webkit user myself too :)
",djanowski,cvincent
668,2012-04-04 01:20:48,"@djanowski that would be sweet! Here's my Capybara config if it helps:



In case it makes a difference, but I'm also using Spork and Guard.
",cvincent,djanowski
668,2012-04-06 01:13:51,"@raggi: I see what you're saying. That does indeed sound pretty dangerous. But maybe we don't even really need to raise the error, just printing it to stdout would probably be enough. We could format it nicely and make it very obvious that this error was caught inside the server. That only leaves the issue of contention for IO and we could solve that with a mutex, no?
",jnicklas,raggi
660,2012-04-03 14:58:07,"@jonleighton: See #668 for a parallel discussion.
",djanowski,jonleighton
660,2012-04-05 02:34:50,"@jnicklas having done this kind of work before, doing synchronization in a deterministic way is the only path to sanity. Further discussions over the alternative solutions are discussed on the other PR.

I do understand why you feel this is fragile, I'm afraid that adding the check in the consuming thread is a necessary requirement. Welcome to multithreaded programming.

EDIT: sorry, that sounds arrogant/condescending, I don't mean to be, it's just - this is how it's solved everywhere (when solved correctly (read: deterministically)).
",raggi,jnicklas
660,2012-04-06 01:08:34,"@woahdae: that's more along the lines of what I had in mind.
",jnicklas,woahdae
660,2012-04-08 02:10:13,"@woahdae the use case you describe does not raise an error out of the server
",raggi,woahdae
660,2012-04-09 13:51:13,"@raggi: I agree that stdout/err is not reliable and doesn't play well with other tools.

Question: with this approach, would errors triggered by interactions (like `click_link`) be raised correctly? Should we check for errors _after_ delegating to the session?

All in all, I think we should try this approach first.
",djanowski,raggi
660,2012-04-13 02:57:59,"@djanowski the server error would be raised first, which would prevent any interaction from actually occurring. This is essentially the same as if the error was raised by the server running synchronously as a callee of visit.

If you mean to ask about backtraces, those should be correct, so the output should not be confusing.
",raggi,djanowski
660,2012-07-13 13:08:28,"I spent some time with this pull request, and there were a couple of things about it I didn't really like, so I went in a slightly different direction with it. Let me explain what I did:

1) Moved the responsibility of starting the server to the session. As @raggi mentioned, this makes the implementation of this much easier, and it's a sensible thing to do anyway.

2) Capture error raised inside the application.

3) Re-raise those errors when `Session#reset!` is called.

The last point is obviously the controversial one, so let me explain why I did that. We obviously need some way of raising errors on the main thread, since, as @raggi explained, we would run into too many thread safety issues if we let the application thread raise those errors. So that leaves us two options:

1) require the user to manually check for and raise exceptions
2) raise exceptions automatically when some kind of user action occurs

This exception tried to go with option (2), but that has a huge problem, in my opinion: there are a huge amount of possible user actions in Capybara, and every single one of them would have to check for errors and raise them. Just jamming this in `visit` and only `visit` as this pull request did is confusing and insufficient. I considered going this route, but after realizing the sheer amount of methods I would have to add these checks to, I realized that it just isn't feasible without some crazy meta programming.

I chose to go with option (1) instead. At first I had a separate method, which I called `raise_error!`, but after spending some time with this, I realized that you always call `reset_session!` and `raise_error!` at the same time. There is no reason to call one without calling the other. Rolling this into `reset_session!` also gives us the added benefit that users of Capybara don't need to change anything about there code to benefit from this behaviour, no matter how they integrate Capybara into their workflow.
",jnicklas,raggi
660,2013-01-20 18:14:51,"@matthijsgroen point the dummy image url somewhere other than your server...
",raggi,matthijsgroen
660,2013-10-13 19:40:41,"@raggi @Systho it wasn't so much about the idea than about the implementation. I wanted something which would have made the behaviour at least somewhat predictable, but I was unable to find a sane way to do it. I think you guys may be right though that having catching errors early is better. I've run into these situations as well. So I think I'm open to adding a check to all DSL methods (which is better, before or after?). This doesn't cover everything that can be done with Capybara, but it would make raise errors earlier in _many_ cases, which is probably better than _never_, since I don't think we're going to get to _always_.
",jnicklas,Systho
660,2013-10-13 19:40:41,"@raggi @Systho it wasn't so much about the idea than about the implementation. I wanted something which would have made the behaviour at least somewhat predictable, but I was unable to find a sane way to do it. I think you guys may be right though that having catching errors early is better. I've run into these situations as well. So I think I'm open to adding a check to all DSL methods (which is better, before or after?). This doesn't cover everything that can be done with Capybara, but it would make raise errors earlier in _many_ cases, which is probably better than _never_, since I don't think we're going to get to _always_.
",jnicklas,raggi
660,2013-10-28 23:46:52,"> @raggi @Systho it wasn't so much about the idea than about the implementation.

Sure. You may find it a good reference is all. It has the behavior you describe, but only hooks a single method - iirc. It was years ago now.

> I wanted something which would have made the behaviour at least somewhat predictable, but I was unable to find a sane way to do it.

I'm pretty sure it is predictable, if all session access causes a check. It's much like the semantics of a private errno in that regard.

> I think you guys may be right though that having catching errors early is better. I've run into these situations as well. So I think I'm open to adding a check to all DSL methods (which is better, before or after?).

Always before. The problem with after is that you can find the action causes more errors which will raise and take precedence, hiding the original error - in other words this falls back to todays harder to debug behavior. It's possible that before and after can lead to catching some more odd items, where the action causes an asynchronous error - but those are really really hard to make deterministic. As long as one can describe the behavior of when the check is done in a single sentence, and it is frequent, that's best.

> This doesn't cover everything that can be done with Capybara, but it would make raise errors earlier in many cases, which is probably better than never, since I don't think we're going to get to always.

Nod.
",raggi,Systho
660,2013-10-28 23:46:52,"> @raggi @Systho it wasn't so much about the idea than about the implementation.

Sure. You may find it a good reference is all. It has the behavior you describe, but only hooks a single method - iirc. It was years ago now.

> I wanted something which would have made the behaviour at least somewhat predictable, but I was unable to find a sane way to do it.

I'm pretty sure it is predictable, if all session access causes a check. It's much like the semantics of a private errno in that regard.

> I think you guys may be right though that having catching errors early is better. I've run into these situations as well. So I think I'm open to adding a check to all DSL methods (which is better, before or after?).

Always before. The problem with after is that you can find the action causes more errors which will raise and take precedence, hiding the original error - in other words this falls back to todays harder to debug behavior. It's possible that before and after can lead to catching some more odd items, where the action causes an asynchronous error - but those are really really hard to make deterministic. As long as one can describe the behavior of when the check is done in a single sentence, and it is frequent, that's best.

> This doesn't cover everything that can be done with Capybara, but it would make raise errors earlier in many cases, which is probably better than never, since I don't think we're going to get to always.

Nod.
",raggi,raggi
660,2015-08-03 07:32:10,"I know this issue has been officially closed but at the same time it does not yet work as expected. @jnicklas  do you have any idea on how you want to tackle this problem ? I think more and more app are using asynchronous drivers so I guess this problem will only amplify.
",Systho,jnicklas
654,2012-03-15 16:06:02,"@l0b0 that's what i was trying to say, that they are matching options subsets, not the exact select options. And that it would be good to have some way to match the exact contained options.
",grzuy,l0b0
654,2012-03-24 22:01:39,"Just realized when reading again that @l0b0 mentioned the `:selected` filter has the same problem the `:options` filter had :S

Maybe i'll create a new pull request to change that behaviour. I suppose it would make sense to provide `:selected` and `:with_selected` filters to keep them consistent with the `:options` and `:with_options` new filters.
",grzuy,l0b0
654,2012-03-25 10:31:25,"@grzuy I really hope there will be some way to get the selection, rather than having [a single function to validate it](https://github.com/jnicklas/capybara/issues/665). It allows testing a lot more different scenarios:
- The selection _is exactly_ a given set.
- The selection contains _at least_ a given set.
- The selection contains _one_ (or N, or minimum/maximum N) of a given set.
- The selection contains _none_ of a given set.
- The selection is empty.
",l0b0,grzuy
651,2014-03-25 08:33:09,"@tkinetik1 if Capybara tells you there is no button, have you considered the possibility that there's no button ;) There is no  answer to this question, there are many, many reasons why Capybara might not find a button. Maybe it's invisible, maybe it's not actually there, maybe the text has different casing, is misspelled, etc...
",jnicklas,tkinetik1
651,2014-03-25 08:57:00,"Thank you johnathon niklas. I will look into that more.  I have asked the
question on stackoverflow. I dont have enough rep to give you credot but i
can ask someone for it. I have my code and github on there. The title is
railstutorial ajax 9.25 rspec.  Thank you for youe response. I will now
search for that.

Tkinetik1
On Mar 25, 2014 1:33 AM, ""Jonas Nicklas"" notifications@github.com wrote:

> @tkinetik1 https://github.com/tkinetik1 if Capybara tells you there is
> no button, have you considered the possibility that there's no button ;)
> There is no answer to this question, there are many, many reasons why
> Capybara canot find a button. Maybe it's invisible, maybe it's not actually
> there, maybe the text has different casing, is misspelled, etc...
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/651#issuecomment-38540471
> .
",tkinetik1,tkinetik1
650,2012-03-01 12:14:38,"Jonas just merged #652. Closing this. Thanks @grzuy!
",joliss,grzuy
647,2012-02-19 21:31:33,"@joliss - please reopen this issue (I don't have permission, even if it's my own pull request)

The reason: patch still applies, since now people will be bothered with deprecation warnings.

Unless Capybara is going to allow only cucumber < 1.1.5 from now on, which I don't think makes sense, because of other Cucumber fixes present.

Thanks!
",e2,joliss
647,2012-02-20 00:26:12,"Thanks, @joliss - since you were able to reopen it, I believe the restrictions make sense.

I agree about the warnings, but I don't think it should be fixed on the Cucumber side because ...

... the api changes reflect changes in Gherkin (using a Tag object instead of strings):

  https://github.com/cucumber/gherkin/blob/45335f757af46b956c8259e02875068b6a596911/spec/gherkin/tag_expression_spec.rb

The diffs are here (scroll down for Ruby api part):

  https://github.com/cucumber/gherkin/commit/45335f757af46b956c8259e02875068b6a596911

So, Capybara should either handle two api's or use the new api along with dep version bumps in cucumber-rails.

I think handling two different methods with the above hack isn't that bad, because it doesn't require reverting about 30 lines in different files in Cucumber to undo good refactoring and replacing strings with tag objects.
",e2,joliss
647,2012-02-20 01:43:55,"@aslakhellesoy - yes, the deprecation warnings are the only reason this was reopened :)
",e2,aslakhellesoy
644,2012-02-18 20:21:17,"I agree with @joliss, it seems very hack-ish for us to add some kind of workaround for this, any chance cucumber can bring back the `source_tag_names` method, @aslakhellesoy?
",jnicklas,joliss
644,2012-02-18 20:21:17,"I agree with @joliss, it seems very hack-ish for us to add some kind of workaround for this, any chance cucumber can bring back the `source_tag_names` method, @aslakhellesoy?
",jnicklas,aslakhellesoy
644,2012-02-19 01:10:11,"expected: :selenium
     got: :rack_test

It probably means instead of a string (tag -> ""@selenium"") it got a Tag instance (<....::Tag, @name=""@selenium"">) dump as a string, so it defaulted to :rack_test.

In short, the test is using scenarios.source_tags instead of scenarios.source_tags.map(&:name).

It's strange you are getting this, @joliss. I would have expected you to get the same error as here: https://github.com/cucumber/cucumber/pull/229

P.S. With all the chaos around this, I believe @aslak will never again change anything in Cucumber without deprecation ;) Cucumber is just so cool, that people are using every dark corner of Cucumber for whatever they need. And the noise also points out how crucial Capybara is for everyday life.
",e2,joliss
644,2012-02-19 08:48:16,"On 18 Feb 2012, at 23:52, Jo Liss wrote:

> Thanks Matt! I tested it in Capybara like so
> 
>    diff --git a/Gemfile b/Gemfile
>    index 07a1f43..32116d9 100644
>    --- a/Gemfile
>    +++ b/Gemfile
>    @@ -5,3 +5,6 @@ gemspec
> 
> 
> 
>    +
>    +@dependencies.delete_if { |d| d.name == ""cucumber"" }
>    +gem 'cucumber', :path => '~/src/cucumber'
> 
> and ""rake cucumber"" now doesn't choke on source_tags, but instead reports that the driver switching isn't working anymore:
> 
>    expected: :selenium
>         got: :rack_test (using ==)
>    ...
>    features/capybara.feature:23:in `Then Capybara should use the ""selenium"" driver'
> 
> Hm, too bad. I'm not sure off the top of my head _what's_ going wrong. Perhaps it's the updated Gherkin, even.

Thanks @joliss. Could you re-try this with the current HEAD of Cucumber? I just ran Capybara's features against that and they all passed. 

There also weren't any deprecation warnings! Perhaps the pixies fixed them?

> I tested b7d7e97 (v1.1.15^) though, and it works fine. May I suggest you revert to b7d7e97 and push v1.1.6 with that?
> 
> Then we can re-try adding 4bc5ed6 (""Upgraded to gherkin 2.3.8"") with more time to figure out what's going wrong.

You're quite right, that's what we should have done in the first place. If we haven't got this straightened out before Monday morning that's what we'll do.

> Btw, re 844fefea (""Add back Scenario#source_tag_names for #227""), I wonder if source_tag_names really has to be deprecated. Semver says that you shouldn't deprecate API without bumping the minor, but even when you go to 1.2.0, is there any need to deprecate it? Capybara for instance wouldn't be able avoid those deprecations without bumping its Cucumber dependency, so they'll just clutter the terminal and annoy users.

Hmm yes. My immediate thought is - ""but then how do we remove this kind of clutter from Cucumber?"" but of course otherwise we're expecting you guys to have to put backwards-compatiblity hacks like #647 in. I don't mind taking the deprecation warnings out - we can just flag that method up as something we remove in the next major release, I suppose.
",mattwynne,joliss
644,2012-02-19 15:26:20,"@mattwynne the missing deprecation in outline_table.rb (my fault!) was added after 1.1.7

So most capybara users won't have deprecation warnings until the next Cucumber version bump.

Also, with such mature and popular ""gems"" (no pun intended!) as Cucumber and Capybara, it might make sense to have versioned API layers in Cucumber - and deprecate an api version as a whole.

Deprecation warnings would show on startup, while allowing you and @aslak to clean up the api as much as you please - and api users would choose if they want a ""stable/versioned api"" or ""development"" api.
",e2,mattwynne
644,2012-02-19 15:56:46,"Tech first:

Matt wrote:

> Thanks @joliss. Could you re-try this with the current HEAD of Cucumber?

Yup, it works great with 1.1.7, and with HEAD 5731b64, it passes but throws deprecation warnings.

I'm not sure that source_tag_names is bad enough to be deprecation-worthy with a minor bump (I'd perhaps wait till version 2.0), but I shall not bike-shed -- it's you guys's call.

@e2 wrote:

> In short, the test is using scenarios.source_tags

(In case this still matters: I'm pretty sure I ran the test on a pristine Capybara HEAD, which uses source_tag_names, though I don't know what actually caused the issue.)
",joliss,joliss
644,2012-02-19 15:56:46,"Tech first:

Matt wrote:

> Thanks @joliss. Could you re-try this with the current HEAD of Cucumber?

Yup, it works great with 1.1.7, and with HEAD 5731b64, it passes but throws deprecation warnings.

I'm not sure that source_tag_names is bad enough to be deprecation-worthy with a minor bump (I'd perhaps wait till version 2.0), but I shall not bike-shed -- it's you guys's call.

@e2 wrote:

> In short, the test is using scenarios.source_tags

(In case this still matters: I'm pretty sure I ran the test on a pristine Capybara HEAD, which uses source_tag_names, though I don't know what actually caused the issue.)
",joliss,e2
644,2012-02-19 16:09:57,"Talk second:

@e2 wrote:

> P.S. With all the chaos around this, I believe @aslak will never again change anything in Cucumber without deprecation ;)

Haha, yeah -- I'm glad I got to make this experience vicariously. ^_^

> Cucumber is just so cool, that people are using every dark corner of Cucumber for whatever they need. And the noise also points out how crucial Capybara is for everyday life.

Yup. Funny how reports about the breakage started coming in within hours of the release.

@mattwynne wrote:

> My immediate thought is - ""but then how do we remove this kind of clutter from Cucumber?"" but of course otherwise we're expecting you guys to have to put backwards-compatiblity hacks like #647 in. I don't mind taking the deprecation warnings out - we can just flag that method up as something we remove in the next major release, I suppose.

I agree -- I guess it's one of these unpleasant facts of open-source library maintenance that you only get to remove clutter something like once a year (at best).

@e2 wrote:

> it might make sense to have versioned API layers in Cucumber - and deprecate an api version as a whole.

I'm thinking that might actually be overkill -- I'm personally not _that_ concerned about breaking things (within reason) between majors, dropping compatibility entirely.

---

What I think this mess demonstrates is this: When we publish libraries, it really pays to be careful about deciding and communicating what is and isn't public API, and when we use other people's libraries, we should read up on the API documentation (or pester the developers) so we don't accidentally use private methods. Just as a general thought.

Anyways, glad we got this sorted out! Thanks for spending your weekend time. :-)
",joliss,mattwynne
644,2012-02-19 16:09:57,"Talk second:

@e2 wrote:

> P.S. With all the chaos around this, I believe @aslak will never again change anything in Cucumber without deprecation ;)

Haha, yeah -- I'm glad I got to make this experience vicariously. ^_^

> Cucumber is just so cool, that people are using every dark corner of Cucumber for whatever they need. And the noise also points out how crucial Capybara is for everyday life.

Yup. Funny how reports about the breakage started coming in within hours of the release.

@mattwynne wrote:

> My immediate thought is - ""but then how do we remove this kind of clutter from Cucumber?"" but of course otherwise we're expecting you guys to have to put backwards-compatiblity hacks like #647 in. I don't mind taking the deprecation warnings out - we can just flag that method up as something we remove in the next major release, I suppose.

I agree -- I guess it's one of these unpleasant facts of open-source library maintenance that you only get to remove clutter something like once a year (at best).

@e2 wrote:

> it might make sense to have versioned API layers in Cucumber - and deprecate an api version as a whole.

I'm thinking that might actually be overkill -- I'm personally not _that_ concerned about breaking things (within reason) between majors, dropping compatibility entirely.

---

What I think this mess demonstrates is this: When we publish libraries, it really pays to be careful about deciding and communicating what is and isn't public API, and when we use other people's libraries, we should read up on the API documentation (or pester the developers) so we don't accidentally use private methods. Just as a general thought.

Anyways, glad we got this sorted out! Thanks for spending your weekend time. :-)
",joliss,e2
644,2012-02-19 20:32:50,"@joliss Actually, I take back what I said about the API.

Capybara is a _runtime_ _dependency_ of cucumber-rails:

  https://github.com/cucumber/cucumber-rails/blob/master/cucumber-rails.gemspec

Which means every Cucumber change should be tested against Capybara, to make sure cucumber-rails doesn't end up ""broken"".

Also, cucumber-rails is a good point to handle version conflict information between Capybara and Cucumber.

I'm not sure cucumber-rails can actually work without Rails itself (runtime), but it may be the best solution to give maintainers more development flexibility, while providing the stability through versioning in cucumber-rails.

Because of that, I was wondering if cucumber-rails could be renamed to cucumber-web to handle things like sinatra, etc.
",e2,joliss
642,2012-12-19 17:42:50,"@jnicklas Why `maximum` and `minimum` must be supported? They aren't supported by `has_css` so I don't know why they should be supported by has_content.

I don't think it will be bad if the only possible option for `has_content` will be `count`
",abotalov,jnicklas
642,2012-12-19 18:35:35,"@abotalov they are supported by has_css.
",jnicklas,abotalov
634,2012-02-07 04:27:29,"@joliss you're right.... that returned false.  I thought has_select checks the label of the field, according to the docs http://rubydoc.info/github/jnicklas/capybara/Capybara/Node/Matchers#has_select%3F-instance_method

![](https://dl.dropbox.com/u/71697/jing/2012-02-06_2224.png)

So why would `page.should have_select 'Staff Member'` be returning false.  A print out and `save_and_open_page` shows the html is there.....

p.s. sorry I thought it was a bug.
",cj,joliss
634,2012-02-07 04:33:47,"@joliss why would you say it's my app?  If I do `page.should have_select 'user[acd_api_id]'` it returns true.  So surely this is a bug......

edit: typo
",cj,joliss
634,2012-02-07 14:49:27,"@jnicklas not sure how I could miss that!  Thank you!  @joliss Thank you for all your help too.  If you both ever need anything let me know.
",cj,joliss
634,2012-02-07 14:49:27,"@jnicklas not sure how I could miss that!  Thank you!  @joliss Thank you for all your help too.  If you both ever need anything let me know.
",cj,jnicklas
629,2012-02-29 10:51:37,"@jnicklas It seems like there are two 'levels' to this issue, and they can be addressed separately:
1. Exception handling where we are testing against a rack app that exists in the same process
2. Status code handling

I have a proposal for number 2.

At the moment, Capybara doesn't care about the status code. It won't raise an error if a `visit` or a `click` produces a 500 or a 404 etc.

I think that by default Capybara should raise an error if the status code is not in the 2XX range. This would help people catch errors faster and make it more obvious what's going on. (""Received 500 response"" is more obvious than ""couldn't find 'foo' link to click"".)

This would only be possible for drivers that have status code support, and would need something to be added so that drivers can indicate their support (or not) for status codes.

Additionally, there are cases where someone might want to test their 404 or 500 pages. Therefore, there needs to be a way to disable this functionality. Suggested API:



What do you think?
",jonleighton,jnicklas
628,2012-02-02 09:57:27,"/cc @jnicklas 

Thanks -- I've merged this. (If we find that it's over-eager with our development dependencies, we can always change or remove it later, I guess.)

And thanks for building Gemnasium, @laserlemon! :-)
",joliss,laserlemon
621,2013-04-07 22:06:48,"I also ran into this issue, when switching drivers, from `webkit` to `selenium`.

Using the full path solved it for me. Thanks, @duckpond! 
",etagwerker,duckpond
621,2016-07-11 17:40:03,"@atodorov You're posting on a closed issue from 4 years ago.  Capybara has changed a lot since then so anything to do with this issue is most likely outdated.  If you have an actual issue, that isn't solved by using an absolute path, please open a new issue with enough details to reproduce.
",twalpole,atodorov
620,2014-12-15 17:41:58,"@twalpole At least you noticed it! Should I open another issue?
",907th,twalpole
620,2015-12-23 01:43:52,"@Sporky023 because the capybara project provides the driver for interfacing to selenium, the capybara-WebKit project is separate - I'm now going to lock this issue
",twalpole,Sporky023
609,2012-03-15 06:42:29,"Any chance this'll be merged?  @jnicklas ?  Or are the save_and_open just going away?
",nyarly,jnicklas
609,2013-01-04 22:47:11,"FWIW, @jnicklas I think you should care more about how people need to use Capybara than having Capybara's code itself look good.

I've only _just_ gotten `capybara-firebug` working, but prior to today I literally had _no_ feasible way to debug js issues in my request (now ""feature"") specs.  And even at that, my workflow sucks for debugging js issues (run specs, edit failing tests to change them to `:driver => :selenium_with_firebug` and add a debugger in each failing example, re-run failing examples & poke around in firebug).

Compare this with simply accepting this PR, which would enable developers -- regardless of whether they are using Selenium or not -- to actually be able to debug their js.  I'm mainly discussing WRT to rails devs, as it's my opinion that the asset pipeline causes most of the headaches.

At the end of the day, the 20+ developers in my office would have benefitted from this functionality, as would (I'm sure) many many others.  There are enough stackoverflow questions and at least 2 issues (if you count this one) on the Capybara repo itself about issues with assets and `save_and_open_page`.  Surely you've heard about the user researcher at Yahoo! that found there were 50,000 people who experienced a given problem for every ONE that complained about it...

Just my 2c.  I guess we'll continue working around the limitations of the tool.
",sdhull,jnicklas
609,2013-01-05 00:35:10,"@sdhull you're right, I do care a lot about how the code looks. Fiercely. But you know what, for a tool as widely used as this one, we have surprisingly few actual bugs reported. This is a library that people use to write tests, which means we have a responsibility not to fuck shit up, so I'm not going to apologize for the fact that I am pedantic and that I throw out stuff which is crap.

You know save_and_open_page still _works_, right? You can open the page in a browser and take a look around, browse the source, etc… If you add CSS and JS and you're using RackTest, you're making it _worse_, because RackTest doesn't have CSS and JS, so now you're seeing the page differently from how Capybara would. How is that better?

How would completely altering all paths to all linked files _help_ people debug stuff which is broken in the asset pipeline. Under RackTest, assets aren't even loaded, what possible effect could they even have on why your tests are breaking?

(Also, look into Pry, it's the bomb for all kinds of debugging)
",jnicklas,sdhull
609,2013-01-06 02:27:16,"@sdhull if you can come up with something that isn't as much of a hack as this is, then I'd be okay with accepting a pull request like that. My issue with this pull request isn't what it's trying to fix, My personal opinion aside, if you can come up with a solution which gives a better debug experience then that's great, and I'd be happy to merge it, but it needs to be not terrible.

Some pull requests get rejected, that's the natural order of things. As maintainer, I have to make decisions, I can't just blindly merge everything. If you send me something I promise I'll consider it, but I can't promise I'll merge it, that's just a risk you have to take.
",jnicklas,sdhull
605,2012-01-10 22:31:12,"@jnicklas it's difficult - there isn't, afaik, a good way to serve README.md et al from your bundled gems, and the (incorrect) assumption is made that if you're on the latest version of a gem then whatever is on github's default branch is correct.
",mipearson,jnicklas
598,2012-07-11 16:24:41,"@aspiers 40s seems about right to boot a large rails app these days. Man, and the early days of rails there was lots of crowing about rails booting faster than java. lulz
",tcrayford,aspiers
598,2012-07-11 16:33:27,"@joliss The way to improve performance is to profile and find out wtf it's using several million CPU cycles just to start up ;-)  I mean, what can it really need to do which requires all that work?

@tcrayford 40s may be a _standard_ boot-up time these days, but that doesn't mean it's _right_, it just means that as a community we're getting sloppy and our expectations are too low ;-)  You only need to look at what programmers used to do with 64k of RAM and a 50MHz CPU to be reminded of that.  Or what Google achieved with Go's compilation times.  Anyway, I do not want to turn this issue into a nostalgia-fest or flame war, so let's not discuss further until someone has done some profiling or coding ;-)
",aspiers,joliss
598,2012-07-11 16:33:27,"@joliss The way to improve performance is to profile and find out wtf it's using several million CPU cycles just to start up ;-)  I mean, what can it really need to do which requires all that work?

@tcrayford 40s may be a _standard_ boot-up time these days, but that doesn't mean it's _right_, it just means that as a community we're getting sloppy and our expectations are too low ;-)  You only need to look at what programmers used to do with 64k of RAM and a 50MHz CPU to be reminded of that.  Or what Google achieved with Go's compilation times.  Anyway, I do not want to turn this issue into a nostalgia-fest or flame war, so let's not discuss further until someone has done some profiling or coding ;-)
",aspiers,tcrayford
594,2012-03-13 18:17:02,"@joliss -- Sounds fine.  It didn't even occur to me to think about the additional costs to rubygems.
",myronmarston,joliss
585,2012-01-03 12:38:33,"@jnicklas Yes, you are right. I had a tab of both projects open and confused it.

@joliss Thanks, that did the trick!
",clemenshelm,joliss
585,2012-01-03 12:38:33,"@jnicklas Yes, you are right. I had a tab of both projects open and confused it.

@joliss Thanks, that did the trick!
",clemenshelm,jnicklas
578,2012-01-08 23:11:19,"Huh, good to know. @jnicklas Luckily, the renamed exceptions are aliased under their old names:



So we should leave the old exception names in the code to keep compatibility with selenium-webdriver ~> 2.0.

@stevecj So, back to your original issue, could you perhaps provide some condensed failing test that demos the problem? It's quite possible that there are issues in Capybara with stale element handling -- Selenium can be a hairy beast. But from your description alone it's very hard to reproduce.
",joliss,stevecj
578,2012-01-08 23:11:19,"Huh, good to know. @jnicklas Luckily, the renamed exceptions are aliased under their old names:



So we should leave the old exception names in the code to keep compatibility with selenium-webdriver ~> 2.0.

@stevecj So, back to your original issue, could you perhaps provide some condensed failing test that demos the problem? It's quite possible that there are issues in Capybara with stale element handling -- Selenium can be a hairy beast. But from your description alone it's very hard to reproduce.
",joliss,jnicklas
570,2012-01-05 00:05:03,"@jnicklas actually it is a problem with Capybara.

I was trying to make a minimal repro for Nokogiri, but it just worked.

The issue is this:



And the `save_and_open_page` method is using `body`, instead of `source` which wraps it with the XML declaration.
I think `Capybara.save_page` should use `source` instead of body. We really want to save the whole page not only what's inside the body.
",dnagir,jnicklas
569,2011-12-22 18:41:52,"@jslag Check this out https://github.com/Nerian/akephalos2
",Nerian,jslag
565,2011-12-29 02:29:10,"@joliss +1. I agree. Being new to Capybara, that totally tripped me up until I stumbled onto your comment just now!

I kept getting errors like: 



Looks like it's a simple fix – once you realize RSpec is required you can run code like this:



But, that wasn't obvious to me when I first read the README.
",audionerd,joliss
565,2011-12-30 02:21:00,"> @joliss +1. I agree. 

I'm not sure if _I_ still agree with my previous statement. :-) We probably should endorse Capybara.javascript_driver regardless of the testing framework. I have a documentation patch for Test::Unit coming up in a day or so.

You are right though that Capybara.javascript_driver should be available.



@jnicklas, that shouldn't happen, should it? I made a pull request at #582 to automatically require 'capybara/dsl'. (I thought about simply moving things out of dsl.rb up into capybara.rb, but I wasn't really sure if they best belong there.)
",joliss,joliss
565,2011-12-30 02:21:00,"> @joliss +1. I agree. 

I'm not sure if _I_ still agree with my previous statement. :-) We probably should endorse Capybara.javascript_driver regardless of the testing framework. I have a documentation patch for Test::Unit coming up in a day or so.

You are right though that Capybara.javascript_driver should be available.



@jnicklas, that shouldn't happen, should it? I made a pull request at #582 to automatically require 'capybara/dsl'. (I thought about simply moving things out of dsl.rb up into capybara.rb, but I wasn't really sure if they best belong there.)
",joliss,jnicklas
564,2011-12-09 23:58:25,"@wokkaflokka, you should probably use git rebase -i to squash the commits, and then push -f again. The pull request will update automatically.

The tests still pass with your branch merged on my system, so I'm pretty sure your test failures are unrelated.

I'll try and test this out against my app today or tomorrow -- it seems like a useful change.
",joliss,wokkaflokka
564,2011-12-10 00:41:20,"@joliss 
Wow, quick turn around. Exciting.

1) I agree that this is a valid concern. This was a very rough/quick patch job on my part, and should not necessarily be definitive. On the other hand, by using the *args notation, is it not the case that all existing functionality remains precisely the same? 

I agree that other browsers - if they do not support passing elements to the script in question - should perhaps raise an error (like the WebDriver bindings to Capybara do when you call functions such as 'trigger' 'Node#path'), or further, perhaps this should only be included in the Selenium driver's evaluate_script/execute_script. Would be interesting to hear other people's opinions.

Also, there is always the option that other driver's simply drop the arguments. If the script passed to them relied on it, it would probably fail. Again, a relevant error message would explain (and rectify) the offending code. 

I don't necessarily think it is the end of the world if different drivers have some differing implementations of the API and functionality. In fact, I would argue strongly that this already occurs - I often find myself writing certain sections of my test code with a conditional that checks for the current driver, treating :selenium on way and others differently.
2) Again, agreed. 

3) Good point, and again, agreed.

I will point out the following: I came upon this while trying to access the raw Javascript contained in a script element. I ended up opening an issue on the Selenium queue to the extent of ""why doesn't the ruby binding to webdriver have the same functionality as the Java version?"" They schooled me proper, and basically told me I was an idiot (...I kind of am ;) From there, I figured: why doesn't Capy have this? Which has brought us here....
",wokkaflokka,joliss
561,2012-04-27 11:44:52,"@pupeno How did you manage to resolve this?
",darthdeus,pupeno
561,2012-04-27 14:43:32,"@darthdeus I don't remember, from the comments it seems I was generating the wrong address to redirect to. I was probably generating a partial url and I started generating a full one.
",pupeno,darthdeus
554,2012-01-03 13:16:59,"If by date/time elements you mean `<input type=""date"">` or `<input type=""time"">`, then this works well for me in Firefox/Chrome using the latest selenium-webdriver gem and chromedriver binary.



@jayzes: If you can provide a failing example, I'd be happy to take a look.
",jarib,jayzes
554,2012-01-03 18:23:27,"@jarib, out of curiosity, do you know which chromedriver version you ran that example under?
",jayzes,jarib
551,2011-11-28 22:18:24,"Ack that with Ruby everything is possible given enough time and effort - the idea here is to arrive at a simple way of providing functionality that I and others are currently overloading Capybara classes/methods to arrive at. 

Perhaps pry is the best solution, I'll look into it.  
However I dislike my feature/example files getting littered with BDD scaffolding, what I have in mind are one or two methods that I use in helpers, nowhere near my feature/example files. One question I have is how do I conditionally determine which session to close when describing multi-user cases - again maybe Pry _is_ the bees knees.

Thanks @joliss
",hedgehog,joliss
551,2011-11-29 05:02:25,"OK thanks @jnicklas, I think I can make Pry do what I want, if I find some convenience behaviors, likely in the multiple user behavior use-case, I'll make a pull request.  
",hedgehog,jnicklas
548,2011-12-20 16:17:16,"@joliss Do you know where selenium-webdriver is hosted so I can raise the issue there? We had to upgrade to get support for FF9 (we were on 2.10 before), but I set my selenium-webdriver version to 2.14.0, which resolves both issues.

Thanks
",despo,joliss
548,2011-12-20 16:21:06,"(In other words, you'll have to wait for a new version of the selenium-webdriver gem: http://rubygems.org/gems/selenium-webdriver.)

@despo, sure: The selenium-webdriver gem is part of the official Selenium SVN repository, and it's maintained by jarib (I'm not @'ing him because I don't think there's anything he can do in this case -- let's not spam the busy maintainers).

For your reference, here is the bug report:
http://code.google.com/p/selenium/issues/detail?id=2700
It is fixed in 2.15.0 according to http://selenium.googlecode.com/svn/trunk/java/CHANGELOG, but people are still reporting problems on the issue page.

Glad to hear that 2.14.0 is working for you!
",joliss,despo
548,2013-05-21 03:22:35,"@despo ,This issue seems nothing to do with selenium-webdriver version,Maximize the browser window when you run your test case.I got a test today,when I run my test case,I make the browser window be minimum size and I catch the error (MoveTargetOutOfBoundsError),but if I make the browser window be maximum size,the test case is pass (sorry for my poor english,I hope you can read it. 汗......)
",anshaoyuan,despo
547,2012-12-06 07:06:45,"@maca: that is expected behaviour.
",jnicklas,maca
547,2012-12-06 07:07:53,"@maca: to ellaborate, we changed the behaviour. Please read the release announcement for 2.0.0 for further details.
",jnicklas,maca
547,2012-12-23 21:31:28,"@jnicklas Which entry is that in History.md? I tried looking for this change in Changed section but nothing connects for me to this one.
",betelgeuse,jnicklas
547,2012-12-23 23:32:43,"@betelgeuse: https://groups.google.com/forum/?hl=en_US&fromgroups=#!topic/ruby-capybara/C0O7nP2YG1A
",jnicklas,betelgeuse
547,2012-12-23 23:37:46,"@jnicklas yeah that's more clear. I am still trying to figure out how to best handle cucumber where you want to use the labels. I guess it's best to modify the step so that it matches the label fully.
",betelgeuse,jnicklas
544,2011-11-28 09:44:47,"This is a widespread issue, I've seen at least 4 instances of people trying to implement the behavior they think Capybara provides, but they can't get working.  In all cases they try to do achieve the same behavior, some via css, others via xpath.  Anyway, there does seem to be a common understanding of the desired behavior.

@grzuy, my understanding of `visible => false` is the same as yours.  From what I've seen of the solutions people have offered up others have a similar understanding.

Maybe for an collective method like `all`, the keys `:select_visible` or `:exclude_visible` are more descriptive of what is intended to happen?  Other more explicit key names are `:if_visible`, `:is_visible` or `:is => :visible|:invisible` and `if => :visible|:invisible`

I'm not being argumentative when I say I really don't understand why @jniklas claims the current behavior is expected.  Almost nobody else seems to think so, and if we took the new name the current behavior would surprise people:



When really it should be false.
",hedgehog,grzuy
536,2011-11-02 20:58:07,"@jnicklas where in the docs does it cover this issue (link please)?
",trvrplk,jnicklas
536,2011-11-02 23:38:28,"@jnicklas I read that, but it solves nothing
",trvrplk,jnicklas
536,2011-11-03 11:57:08,"@jnicklas Here is the spec:



and the output:


",trvrplk,jnicklas
536,2011-11-03 12:03:37,"@jnicklas yes.
",trvrplk,jnicklas
535,2011-11-18 23:03:34,"The latest webdriver does delete all cookies. However, I noticed that for webdriver doesn't detect all cookies, which gave me the impression that #delete_all_cookies doesn't work. @uahmed you may want to check that you're not running into the same issue. Seems the issues I have now are more with selenium webdriver + firefox itself
",cldwalker,uahmed
535,2011-11-19 00:12:55,"@cldwalker do you mean it works for you with latest release of selenium web driver? The problem as I described was always with selenium + firefox.
",uahmed,cldwalker
535,2011-11-19 00:25:18,"Yes, the latest selenium + firefox 7 works in that the driver deletes
all the cookies it knows about. However, what seems to be buggy is
that the selenium web driver isn't returning all the cookies I see.
I'll have to file that bug in selenium, not here.

On Fri, Nov 18, 2011 at 7:12 PM, Usman Ahmed
reply@reply.github.com
wrote:

> @cldwalker do you mean it works for you with latest release of selenium web driver? The problem as I described was always with selenium + firefox.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/535#issuecomment-2796217
",cldwalker,cldwalker
535,2013-11-15 18:25:33,"like @mgogov I would also like to add another case that have similar symptoms as this bug (user is not logged out between scenarios). Namely the case where the web app is using HTML5 local storage instead of ordinary cookies to store sessions. In such case there is another bug for that situation: #1001 
",jarl-dk,mgogov
535,2014-07-26 20:12:16,"@espen  Adding a request for how to do something to an issue that was closed over 2 years ago is unlikely to get you help.  Try posting to the mailing list as indicated in the README
",twalpole,espen
535,2016-03-30 00:08:52,"Ran into this issue, after all this time. As @mgogov mentioned, you must visit the site to access the cookie for that site, before calling `reset_session!`

For my use case, it looks like:


",georgeu2000,mgogov
535,2016-11-28 14:30:14,@georgeu2000's point seems very important and fixed the problem for us. Could that be documented somewhere? ,wrtsprt,georgeu2000
535,2016-11-28 18:13:44,"@wrtsprt @twalpole - I would be happy to update the docs, if that is desired.",georgeu2000,wrtsprt
535,2016-11-28 18:13:44,"@wrtsprt @twalpole - I would be happy to update the docs, if that is desired.",georgeu2000,twalpole
535,2016-11-29 16:08:20,"@georgeu2000 The behavior is driver dependent - selenium only allowa to clear cookies for the current domain, other drivers allow to just clear all cookies IIRC.  Therefore this should not be documented in Capybara.reset_session!.  Not sure where would be correct currently though.  Maybe just a gotchas section in the README",twalpole,georgeu2000
533,2012-07-17 17:16:04,"@JonRowe I'm working on a major refactor of the test suite, which will affect how these tests would be written. I should be able to finish that up in the next couple of days. I'd suggest holding off until then, if you're interested in making this work in Selenium.
",jnicklas,JonRowe
522,2011-10-16 23:49:22,"@jnicklas I have updated the implementation based on Element#text. Definitely agree it makes more sense this way, and it came together pretty quickly, which is always a good sign. Let me know your thoughts on how this looks?
",mkdynamic,jnicklas
522,2011-10-24 05:56:02,"@jnicklas OK, so `has_text` is now implemented to use `Element#text`. It worked out the box with the `Selenium` driver for all cases (head, script, hidden text etc.). For `RackText` driver, as you hinted, I had to tweak the behaviour of `Element#text` to behave correctly.

Please scope, and let me know what you think?
",mkdynamic,jnicklas
522,2012-11-06 19:04:38,"@cybersquid I this about nbsp? I recently updated the normalize_whitespace method to deal with Unicode whitespace.

Is the problem you are seeing still an issue with Capybara 2.0 (see [how to update](http://techblog.fundinggates.com/blog/2012/08/capybara-2-0-upgrade-guide/))?
",joliss,cybersquid
521,2011-10-14 19:49:15,"@joliss that change made more tests fail. The important thing would be to match however the XPath::HTML.content is ignoring whitespace. It looks like content is using an xpath `contains` which may be where whitespace is being ignored. I didn't dig much further but I believe that would be handled by Nokogiri and in turn LibXML. I'm not 100% sure though.
",rmontgomery429,joliss
521,2011-10-17 01:09:47,"It turns out that XPath::HTML normalizes content through xpath function `normalize-whitespace`. This doesn't behave exactly the same as `gsub(/\s/m, """")`. The `normalize-whitespace` function works by ""stripping leading and trailing whitespace and replacing sequences of whitespace characters by a single space"". http://www.w3.org/TR/xpath/#function-normalize-space

What I ended up doing to make this behave more like the `normalize-whitespace` function was to replace any one or more matched whitespace character with a single space.

I think the /\s/ suggestion was a good one and I've just pushed a change to make it work better in all cases. 

Thanks for the feedback @joliss and @jnicklas.
",rmontgomery429,joliss
521,2011-10-17 01:09:47,"It turns out that XPath::HTML normalizes content through xpath function `normalize-whitespace`. This doesn't behave exactly the same as `gsub(/\s/m, """")`. The `normalize-whitespace` function works by ""stripping leading and trailing whitespace and replacing sequences of whitespace characters by a single space"". http://www.w3.org/TR/xpath/#function-normalize-space

What I ended up doing to make this behave more like the `normalize-whitespace` function was to replace any one or more matched whitespace character with a single space.

I think the /\s/ suggestion was a good one and I've just pushed a change to make it work better in all cases. 

Thanks for the feedback @joliss and @jnicklas.
",rmontgomery429,jnicklas
521,2011-10-17 01:16:33,"@mkdynamic that makes sense. I must have pushed just as you commented. :) The latest change (removing the /m modifier) if pushed.
",rmontgomery429,mkdynamic
521,2011-10-17 01:44:55,"@mkdynamic do you know if it is preferable within capybara to make something like `gsub(/\s/, "" "").strip` a call to a function like `normalize_whitespace(content)` or leave it in-line?
",rmontgomery429,mkdynamic
508,2011-11-03 23:44:08,"@jnicklas does this not happen to you?  When Rails raises an error (from a controller or view or something), the backtrace is not displayed in the test output.
",joevandyk,jnicklas
508,2011-11-07 03:58:07,"@joevandyk -- I think that's a separate issue.

There are two outstanding issues regarding exceptions in Capybara. One has to do with webservers.

The other... well I haven't looked too deeply into it, but it sounds like it has something to do with how rails rescues from exceptions in controllers. I know with previous versions of rails/rspec/cucumber, you used to have to manually specify when you want Rails to handle errors and when to not.

E.g., in Cucumber, you can set a tag `@allow-rescue` before a scenario so you can test Rails's internal handling of exception handling: https://github.com/cucumber/cucumber-rails/blob/master/lib/cucumber/rails/action_controller.rb

https://github.com/rails/rails/blob/v3.1.1/actionpack/lib/action_controller/test_case.rb#L510
",agibralter,joevandyk
508,2012-01-03 13:53:34,"@JonnieCache are you sure that causes firefox to hang? I found that usually happens when my version of `selenium-webdriver` is outdated or is not compatible with my version of FF. Anyway... that hack has worked quite nicely for me for a while.

And, yes @jnicklas -- there doesn't seem to be an elegant way to handle this... Maybe it's worth putting a note in the README/wiki saying that exceptions raised in the application will not be raised while running the test suite and link to a gist like mine or something similar?
",agibralter,JonnieCache
508,2012-01-03 13:53:34,"@JonnieCache are you sure that causes firefox to hang? I found that usually happens when my version of `selenium-webdriver` is outdated or is not compatible with my version of FF. Anyway... that hack has worked quite nicely for me for a while.

And, yes @jnicklas -- there doesn't seem to be an elegant way to handle this... Maybe it's worth putting a note in the README/wiki saying that exceptions raised in the application will not be raised while running the test suite and link to a gist like mine or something similar?
",agibralter,jnicklas
508,2012-01-03 14:02:29,"I agree this should probably be closed, at least as long as there is not a neat solution. In general, I just use `save_and_open_page` or open the URL in my browser when the app raises an exception.

And as @agibralter said: ""Sometimes, you _want_ your app to return a 500 error and you want to test how your JS deals with that situation."" So we'd need to add more logic to allow _some_ error pages to pass through.

So I'd say we close this. If someone comes up with a sensible solution for this, we can revisit the issue.
",joliss,agibralter
506,2012-12-24 12:33:09,"Thanks @KL-7 . I might mention that this line of code should be in `spec/support/mongoid.rb`.
",hosamaly,KL-7
505,2012-03-07 16:20:31,"@jnicklas is there a way to do that but lazy find the body?  I'm trying to get back to the body from inside a within, so that I can check it loaded a popup....
",cj,jnicklas
505,2012-03-07 16:22:49,"@jnicklas looks like find(:xpath, '//body') works :D
",cj,jnicklas
505,2015-04-07 21:13:51,"@janko-m Its the context for the find which located the current element.
",twalpole,janko-m
505,2015-04-07 21:15:04,"@janko-m `Base#parent` is internally used to get an ancestor using which the current element was located. For example in:


",abotalov,janko-m
500,2011-09-28 15:24:01,"@tracedwax, are you able to figure out why some images aren't displaying as normal? They should all work. Maybe check your manifest.yml file to make sure they're getting included in there, and then make sure the image `src` matches in the generated page. It may be that those images aren't configured properly in the asset pipeline.
",JangoSteve,tracedwax
500,2011-11-02 02:43:51,"Hey @dom1nga good  point about 1.8.7, I guess I've been using 1.9.2 for so long I forgot that was a new thing.

I was wondering the same thing when I started working on a fix. Trust me, requiring an asset precompile was not my first choice. 

The issue is that, with the asset pipeline enabled, assets are now part of the app; javascripts, stylesheets, and images are no longer static files that bypass the rails stack, they actually go through the rails process and get interpreted at runtime just like views.

The only way we could get them to render in the `save_and_open_page` template would be to rewrite all asset paths to point to the localhost domain/port spawned by capybara when running the test suite, so that the asset requests will  get properly piped through sprockets allowing the assets to be compiled.

However, that would require the localhost app to still be running _after_ our `save_and_open_page` tmp page has rendered to the browser (since that's when the asset requests would actually start). By this time, our server instance is probably already gone. I'm assuming this is the reason `save_and_open_page` even creates a tmp cached static file in the first place instead of just opening the current host/port URL in a new window (but I may be wrong).

This was easy before, because all assets were just rendered as static files from the public directory anyway, so there was no difference if you loaded them from the dev server path or from a file page. And so `save_and_open_page` simply rewrote relative domain paths to be absolute file paths. This is no longer possible since those static files don't necessarily exist anymore.

The only other option would be to make `save_and_open_page` compile the assets and then cache all of them to the same tmp location as the html page. In fact, that's basically the ""solution"" mentioned in #485, except that it ignored images and javascripts. However, this results in `save_and_open_page` taking a long time to run and creating a ton of tmp files (one for each javascript, stylesheet, and image on the page).

Taking all fo these considerations into account, this was the best solution I could come up with.
",JangoSteve,dom1nga
500,2011-11-02 02:48:00,"@jfi, if you open `RAILS_ENV=test rails console`, what are the values of:



The only time I know of that the latter would be `nil` would be if the former was `false`. But if if `assets.enabled` is false, then that line shouldn't be called. Definitely weird.
",JangoSteve,jfi
500,2011-11-02 02:49:38,"@tracedwax, I've encountered a few times where certain images or stylesheets weren't being rendered properly, and it was because I had forgotten to actually  add those files to the asset pipeline (meaning they weren't being rendered properly in production either, only I hadn't known that because they were fine in dev).
",JangoSteve,tracedwax
500,2011-11-15 17:44:55,"@jnicklas, am I correct in the reasoning for why `save_and_open_page` copies the page and changes all of its asset references, rather than just simply opening the page it's currently on as-is?
",JangoSteve,jnicklas
500,2011-11-16 17:29:16,"@JangoSteve +1
",dom1nga,JangoSteve
500,2011-11-16 18:11:01,"@jnicklas, better to open a page, than every time to think about whether enough seconds set for sleep. Why watch ""cartoon"" of, for example, twenty episodes, if you want to watch only twenty-first? Let's all give up the use of webkit. More cartoons! More selenium!
",dom1nga,jnicklas
500,2011-11-16 18:11:58,"@jnicklas, that's the point, you _can't_ see most of the relevant markup just fine. Everyone on my team has stated that `save_and_open_page` became useless in Rails 3.1 (and I've heard it from a lot of people outside of my team as well), and it made simple debugging (short of switching to selenium/pry) very difficult. Trust me, I wouldn't be spending my time on it if it wasn't a big issue.
",JangoSteve,jnicklas
500,2011-11-16 20:06:13,"The fork from @JangoSteve has worked well for me and I will continue to use it if that is the best option.  That being said, I would just as soon not see Capybara be fragmented into multiple branches if @JangoSteve is willing and able to work towards a solution compatible with the vision and constraints of the project.  @jnicklas - Since this does not seem to be a core concern for you and already depends on launchy, are you thinking that save_and_open_page should be pulled out into a separate gem?
",baldwindavid,jnicklas
500,2011-11-16 20:06:13,"The fork from @JangoSteve has worked well for me and I will continue to use it if that is the best option.  That being said, I would just as soon not see Capybara be fragmented into multiple branches if @JangoSteve is willing and able to work towards a solution compatible with the vision and constraints of the project.  @jnicklas - Since this does not seem to be a core concern for you and already depends on launchy, are you thinking that save_and_open_page should be pulled out into a separate gem?
",baldwindavid,JangoSteve
500,2011-11-30 09:59:01,"Hey @JangoSteve, your last tip (precompiling) did the trick for me, and I think it's the cleanest way to do so! Thanks!
",pietere,JangoSteve
500,2011-11-30 16:08:26,"@pietere, the only problem is that, since it's creating precompiled assets without the digest, your development environment will actually serve those instead of the live ones in your app directory, which can really mess things up when developing. So, in order to use `save_and_open_page`, you must precompile, do your thing, and then always clear the assets before going back to developing.

But I agree, it's the cleanest way to do so (just not the most convenient).
",JangoSteve,pietere
500,2011-11-30 18:34:34,"@JangoSteve, yes I realised that after posting my message here. I will try to find a workaround for this to automate this clean up, and post it here if I did find anything good to share
",pietere,JangoSteve
500,2011-12-01 09:10:39,"@JangoSteve I think I have a quite clean solution
- we tell the test environment to use the precompiled assets, but to use another folder to server the assets from. Add this in the file config/environments/test.rb


- we want to automatically precompile assets when we run cucumber, so we add this at the bottom of the hooks.rb file from cucumber:



Now, each time that we run cucumber, the assets are precompiled in a folder called public/cucumber_test_assets, and development environment is not affected, so no need to clean up those assets. 
- For completeness, I added this to my .gitignore


",pietere,JangoSteve
500,2011-12-16 12:21:24,"Combining @pietere solution with https://github.com/dnagir/guard-rails-assets works like a charm :)
",Nerian,pietere
500,2012-06-06 20:45:12,"Why not release a gem named capybara-rails that adds the rails-specific logic, just like many other gems out there? cc @JangoSteve
",maxim,JangoSteve
500,2012-06-06 20:57:45,"@maxim, the biggest factor is that the original solution requires re-writing parts of `#rewrite_css_and_image_references`, since capybara doesn't provide event hooks within the method. This means that an external gem would have to track capybara and merge the method with any changes capybara makes in core, which usually just results in an outdated gem.

But if one of the newer solutions can solve the problem without rewriting the internal methods, then I'd say yes, creating a separate gem would be a good approach.
",JangoSteve,maxim
500,2012-06-06 21:16:49,"@JangoSteve I'm sure @jnicklas wouldn't mind adding an extension point where one is useful. On the other hand, I don't see a problem overriding a method in capybara as long as dependencies are correctly specified. We can just add `gem ""capybara-rails""` to Gemfile, which depends on its compatible version of capybara, and remove `gem ""capybara""` itself. Then hopefully update capybara-rails often enough until @jnicklas has a chance to add a cleaner way to change that stuff, like injecting a proc.

Regarding the feature being Rails-specific — this pull request would be, but a generic extension point would not. Rails is nothing more than a very popular type of Rack app that has some special handling of assets. I see it as a good enough reason to add an extension point to inject ""special handling of assets"". There are rack apps in the wild that depend on it.

Whether or not `save_and_open_page` a best way to debug is a separate conversation. Feature exists, I love using it, many others do. It's quicker for me than to switch to a terminal and ""sense"" my surroundings with pry, or setup selenium.
",maxim,jnicklas
500,2012-06-06 21:16:49,"@JangoSteve I'm sure @jnicklas wouldn't mind adding an extension point where one is useful. On the other hand, I don't see a problem overriding a method in capybara as long as dependencies are correctly specified. We can just add `gem ""capybara-rails""` to Gemfile, which depends on its compatible version of capybara, and remove `gem ""capybara""` itself. Then hopefully update capybara-rails often enough until @jnicklas has a chance to add a cleaner way to change that stuff, like injecting a proc.

Regarding the feature being Rails-specific — this pull request would be, but a generic extension point would not. Rails is nothing more than a very popular type of Rack app that has some special handling of assets. I see it as a good enough reason to add an extension point to inject ""special handling of assets"". There are rack apps in the wild that depend on it.

Whether or not `save_and_open_page` a best way to debug is a separate conversation. Feature exists, I love using it, many others do. It's quicker for me than to switch to a terminal and ""sense"" my surroundings with pry, or setup selenium.
",maxim,JangoSteve
500,2012-06-06 21:25:51,"@maxim Agreed on all points.

By the way, IIRC, when I originally wrote this, I actually was going to just extend `#rewrite_css_and_image_references` to call e.g. a `#post_rewrite` method which could just be defined to return true in core capybara, and then could be overwritten in a gem or app. The reason I didn't is because, it would have required me to separate out this new functionality from capybara's core functionality, which would then require us to have two separate regexes that loop through all the asset directory entries, which would have been twice as slow.

But maybe that's not a bad tradeoff to gain the extensibility and modularity, especially considering this is a debug function that's not going to be used inside loops or in production apps.
",JangoSteve,maxim
500,2013-02-09 07:05:02,"Was this ever further developed? I don't see a (working) `capybara-rails` gem, and I too miss this feature. Sure `capybara-screenshot` is nice and all, but I like to inspect my elements, plus, the screenshots only work when using `webkit`, which I only use for my Javascript tests (due to it being slower than basic `Rack::Test`.

Also, unfortunately @JangoSteve 's [solution](https://github.com/jnicklas/capybara/pull/500#issuecomment-2771147) doesn't seem to work for me. I can see the assets being pre-compiled in in the `public/assets` (or `test_assets`) directory. And I can see the reference to them in the compiled html file:



But the css simply isn't loaded. Perhaps, I need the full path in there for it to work, because the base-path is probably incorrect when opening the html page with Capybara?

**EDIT**

My huch was correct, the following _does_ work:



But I only tested this using the _Chrome inspector_ and editing the path manually. Now I need to find a way to make this change permanent. Although I don't understand why others don't have this issue.
",JeanMertz,JangoSteve
500,2013-02-09 07:20:45,"@JeanMertz I don't believe it has been developed.  I might put in some work on this tonight, however.
",sdhull,JeanMertz
500,2013-02-09 07:22:15,"@sdhull Thank you for your input. As long as the above asset-precompile option works (hint: for me it doesn't, see my above updated post), I guess the need is a bit less relevant. Still, a gem would make it easier for most.
",JeanMertz,sdhull
500,2013-02-09 07:25:59,"@JeanMertz `rake assets:precompile` doesn't work for you?  Or when you `save_and_open_page`, it doesn't have CSS & JS?
",sdhull,JeanMertz
500,2013-02-09 07:31:21,"@sdhull precompiling works, but the path to the precompiled assets is ""wrong"". It would not be wrong, _if_ the page was to be opened using a web-server, which root path would be set to `/public`, but Capybara opens the page like this for me:



And then the assets are linked like this:



Obviously, that isn't going to work, because there is nothing setting the _root path_ to `file://localhost/Users/Jean/Projects/test_app/public`. In my situation, the root path is actually `file://localhost/Users/Jean/Projects/test_app/tmp/capybara/`, so thats why (manually) prepending `../../public` worked for me, because I change the root path to the correct location.

So again, not sure why others have gotten this to work, but I don't see how this would work without a change to the root path? (I am not using the fork in this PR, but it was my understanding that using the asset precompiling solution doesn't require a fork, correct?)
",JeanMertz,sdhull
500,2013-02-09 08:40:25,"If you choose to embark on that journey of adding back asset rewriting, you should consider going whole-hog and adding [asset server support](https://github.com/nyarly/capybara/commit/6562e0aec8219b817c097abd81ddcd177675dd5e).  Maybe via a `capybara-rails` gem?  :smiley_cat: 

Of course, I'm working on adding it as a new PR, following the guidelines outlined by @jnicklas in #609 (after my brief but furious outrage about the asset situation in `save_and_open_page`).

And if my PR doesn't get merged, then I figured I'd release it as a gem that monkey-patches it in.
",sdhull,jnicklas
500,2013-02-09 10:50:03,"@JeanMertz Woot! Check me out: #958
",sdhull,JeanMertz
500,2013-05-02 11:50:57,"@JeanMertz You cannot use super, cuz it's not inheritance. But there's another option - alias_method_chain. Something like:



Or without active_support:


",joxxoxo,JeanMertz
491,2011-11-15 15:39:54,"As @vinibaggio mentioned, you should just be able to do `find('#foo').set(...)`, or even `find(:foo).set(...)`. The performance issue is interesting. Never realized that these methods have such a performance impact. I think the XPath queries we are generating aren't super efficient, so maybe that's another way of approaching the problem.
",jnicklas,vinibaggio
491,2011-11-15 18:41:37,"Yes, @vinibaggio works with us, I was aware of the solution. ;) Unfortunately writing find().set all the time is not as readable, thus the feature proposal.
",josevalim,vinibaggio
490,2011-11-26 08:00:22,"@jnicklas, can you be a little bit more in details on how you avoid using `save_and_open_page` and halt the execution for debugging?
",gmile,jnicklas
485,2011-11-02 02:13:16,"@joliss, I have a pull request already submitted, see #500.

@nruth, I think that it is needed. Capybara comes into play when we're testing content rendered with our views, and at least half the time (for me anyway), it's  with js turned on. If I have an action that hides  content, and then I have a test that says `page.should have_no_content 'blah'`, and that test is failing, I'm going to put `save_and_open_page` right before it and see if the content really isn't there, or if maybe it's duplicated elsewhere on the page, or if maybe I used a lowercase instead of uppercase in the test, or whatever.

If my javascript and stylesheets (and images) don't work, then the page often isn't anything near what's actually  seen in the app. In other words, `save_and_open_page` is useless for Rails 3.1 apps using the asset pipeline, which I'm guessing will become more and more relavent as a sizable portion of capybara's users migrate in that direction.
",JangoSteve,joliss
485,2011-11-02 02:13:16,"@joliss, I have a pull request already submitted, see #500.

@nruth, I think that it is needed. Capybara comes into play when we're testing content rendered with our views, and at least half the time (for me anyway), it's  with js turned on. If I have an action that hides  content, and then I have a test that says `page.should have_no_content 'blah'`, and that test is failing, I'm going to put `save_and_open_page` right before it and see if the content really isn't there, or if maybe it's duplicated elsewhere on the page, or if maybe I used a lowercase instead of uppercase in the test, or whatever.

If my javascript and stylesheets (and images) don't work, then the page often isn't anything near what's actually  seen in the app. In other words, `save_and_open_page` is useless for Rails 3.1 apps using the asset pipeline, which I'm guessing will become more and more relavent as a sizable portion of capybara's users migrate in that direction.
",JangoSteve,nruth
484,2012-01-27 15:40:21,"@suweller: yes it does, this change is only on master.
",jnicklas,suweller
483,2011-12-04 21:41:37,"@gorn: Weird. Perhaps you are missing something? Check the README again, or take a look at http://opinionatedprogrammer.com/2011/02/capybara-and-selenium-with-rspec-and-rails-3/ .

@ everyone else: This _should_ be working. I have it working in a Rails 3.1 app, and grepping rspec-rails (which sets the :request type) for 'acceptance' yields:



If anyone wants to dig, feel free. :-)
",joliss,gorn
483,2011-12-14 16:24:06,"@joliss: I don't see ""acceptance"" there (line 30):
https://github.com/rspec/rspec-rails/blob/master/lib/rspec/rails/example.rb

Or am I missing something?
",jarijokinen,joliss
483,2011-12-16 02:04:47,"@joliss Sorry to hijack this but I wonder if that section needs to be rewritten, again. I think that's part of the problem here. I know I rewrote it a while back, but it could be abbreviated still. This is how I imagine people reading it currently:

> You can make an example group and tag it :type => :request. Oh by the way, :type => :acceptance works too. These are RSpec versions of Rails integration tests Capybara request specs blah blah. So actually scratch what I just said about :type => :request, stick your tests in spec/requests. Or spec/integration. See, easy!!

I mean I get why all that is there, because we're assuming that people aren't using Rails, and then we say ""oh but if you do use Rails, then you can do this instead"". Maybe it would be a good idea to move the Rails stuff down to the Rails section?
",mcmire,joliss
483,2011-12-21 00:14:48,"@mcmire wrote:

> @joliss Sorry to hijack this but I wonder if that section needs to be rewritten, again.

Right. I made a pull request at #577. Do you think that's better?
",joliss,joliss
483,2011-12-21 00:14:48,"@mcmire wrote:

> @joliss Sorry to hijack this but I wonder if that section needs to be rewritten, again.

Right. I made a pull request at #577. Do you think that's better?
",joliss,mcmire
483,2011-12-21 00:29:38,"@gorn wrote:

> I use RoR and I somewhat did not pay attention that the README is NOT only for Rails so I did not even seeked for RoR section ;-)

Actually, I think a lot of people get tripped up by this and forget to
include 'capybara/rails'.

@jnicklas, back when you added rails.rb, was there something that
stopped you from autodetecting Rails (like `defined? Rails.version`)?

I'm thinking that we could require capybara/rails.rb at load-time for
Capybara, and wrap it in an `if defined? Rails.version` block.

One thing we'd have to deal with is deferring these lines in rails.rb
until the Rails app has been loaded, or Rails.root won't be defined:


",joliss,gorn
481,2011-09-05 16:43:55,"Still trying to fix the has_select_spec on Selenium. I have relatively little experience with raw Xpath or Selenium, but it appears to me that Selenium doesn't like the generated Xpath when it factors in the :selected option. @jnicklas does this sound like anything you've encountered before?

Here is a snippet of my debugger session that shows what I'm seeing:


",adamlogic,jnicklas
481,2011-09-06 01:04:36,"@jfirebaugh I'd love to buy you a beer for that detailed commit message. Makes total sense now. I'm going to see about moving that logic into the selectors, because right now it feels a bit scattered to me. I'll push what I come up with to see what you guys think.
",adamlogic,jfirebaugh
481,2011-09-06 21:25:02,"@jfirebaugh: a while ago, I started sketching on a DSL to allow options for selectors. The problem was that the thing quickly became a grotesque monster, with dozens of different methods to construct the selectors. This seemed like overengineering to me. Not sure it makes sense to move this stuff to selectors if it isn't configurable per selector _somehow_ though.
",jnicklas,jfirebaugh
481,2011-09-09 01:58:26,"@jnicklas @jfirebaugh Curious to get your thoughts on [this approach](https://github.com/adamlogic/capybara/compare/custom_selectors...new_selector_api). I removed the add_selector DSL in favor of each selector being a Ruby class. In my mind this is a more straightforward approach and also more flexible. To be honest I never really understood the purpose of having a DSL for creating new selectors.

I realize this completely breaks the selector API and would have to wait for Capybara 2, if it goes anywhere at all. It's also a rough spike -- no tests, all in one file, etc. I really just wanted to throw it out there to see what you guys think.
",adamlogic,jnicklas
481,2011-09-09 01:58:26,"@jnicklas @jfirebaugh Curious to get your thoughts on [this approach](https://github.com/adamlogic/capybara/compare/custom_selectors...new_selector_api). I removed the add_selector DSL in favor of each selector being a Ruby class. In my mind this is a more straightforward approach and also more flexible. To be honest I never really understood the purpose of having a DSL for creating new selectors.

I realize this completely breaks the selector API and would have to wait for Capybara 2, if it goes anywhere at all. It's also a rough spike -- no tests, all in one file, etc. I really just wanted to throw it out there to see what you guys think.
",adamlogic,jfirebaugh
481,2012-01-02 20:15:02,"@jnicklas Excellent! I'd been procrastinating writing specs for all of this because I wasn't quite sure how to go about it. I'm glad to see you merged it in, and I like where you've gone with the filters.
",adamlogic,jnicklas
477,2011-09-01 19:22:21,"@dwt: If would be helpful if you could open a bug in the [Selenium tracker](http://code.google.com/p/selenium/issues/entry) and include a reduced example of HTML/JS/CSS that demonstrates this issue. It'll get fixed a lot quicker if we have [a simple way](https://gist.github.com/1024843) to reproduce the problem.
",jarib,dwt
474,2011-08-28 10:23:14,"Yes, as @ngan said, try it on master and see if it's fixed there. Hopefully we'll have a new release soon!
",jnicklas,ngan
471,2012-11-07 14:42:50,"@jnicklas Ah! I got bit by the FakeWeb problem (yes, it's still a problem a year later).

Tomorrow I'll take a few minutes to mention the issue and the solution in the README. Ok with you?
",webmat,jnicklas
468,2013-03-14 21:25:20,"@abacha of all possible ways of filing a bug report you've chosen probably the worst. This is a _two year old_ issue. It's _closed_. After being withdrawn by the author himself, because it wasn't related to Capybara. You've included no detail as to what actually went wrong, no stack trace, no mention of your environment, what version of Capybara you're using. [Please read this](http://www.elabs.se/blog/38-how-to-write-a-bug-report).
",jnicklas,abacha
463,2011-08-23 13:18:30,"@jnicklas: I'll try to help.

The root failure is rspec + capybara + selenium driver eats the process exit code. So when a spec fails rspec says `exit 1`, then on cleanup capybara says `no, no, exit 0`. This is happening in `@browser.kill`, although I am not sure how. IMO, it's a bug.

In RSpec we tried a workaround of saying `capybara sets exit code last, nomatter what`. It worked around this particular problem, but broke existing functionality. We can't figure out a fix that works for all scenarios. Saying `my exit code is last` is tough because we end up in a nested `at_exit` block that execute in some weird order in Ruby.

You're the boss to Capybara to figure out what the best way to proceed is. I think this or a variant of this fix should be committed, Capybara shouldn't be setting the process exit code ever, it's not in the business of doing that.
",dblock,jnicklas
463,2011-08-23 13:21:27,"@dchelimsky: the code in this patch saves the old exit code and restores it afterwards, it does quit the browser
",dblock,dchelimsky
463,2011-08-23 13:24:22,"@dblock - ah, yes - I misread the patch.
",dchelimsky,dblock
463,2011-08-24 12:35:04,"@ebeigarts - I don't think the redef on Kernel belongs in Capybara as it has wide-reaching impact on the runtime and Capybara users would be unable to control it. It might, however, make sense as an at-exit-fix gem (especially in light of the fact that it's being fixed in future versions of Ruby). WDYT?

@jnicklas - does @dblock's explanation help you to understand this patch any better?
",dchelimsky,ebeigarts
463,2011-08-24 12:35:04,"@ebeigarts - I don't think the redef on Kernel belongs in Capybara as it has wide-reaching impact on the runtime and Capybara users would be unable to control it. It might, however, make sense as an at-exit-fix gem (especially in light of the fact that it's being fixed in future versions of Ruby). WDYT?

@jnicklas - does @dblock's explanation help you to understand this patch any better?
",dchelimsky,jnicklas
463,2011-08-24 12:35:04,"@ebeigarts - I don't think the redef on Kernel belongs in Capybara as it has wide-reaching impact on the runtime and Capybara users would be unable to control it. It might, however, make sense as an at-exit-fix gem (especially in light of the fact that it's being fixed in future versions of Ruby). WDYT?

@jnicklas - does @dblock's explanation help you to understand this patch any better?
",dchelimsky,dblock
463,2011-08-30 02:10:50,"I am a _huge_ fan of monkey patching. I say hack it (3). I think @jnicklas should spend a few minutes understanding what's at stake here (poor users can't get CI to work properly) and decide what to do. In the meantime @ebeigarts could make a gem, but I would call it _at-exit-code-warrior_ - the real functionality of this code is not to overwrite the previous exit code if set to non-zero. 
",dblock,ebeigarts
463,2011-08-30 02:10:50,"I am a _huge_ fan of monkey patching. I say hack it (3). I think @jnicklas should spend a few minutes understanding what's at stake here (poor users can't get CI to work properly) and decide what to do. In the meantime @ebeigarts could make a gem, but I would call it _at-exit-code-warrior_ - the real functionality of this code is not to overwrite the previous exit code if set to non-zero. 
",dblock,jnicklas
463,2012-07-28 14:12:11,"@ebeigarts sorry about being daft but I'm not following. Are you referring to log output or source code?
",mhenrixon,ebeigarts
463,2012-07-28 14:22:50,"In the sorce code, this is the actual bug - http://redmine.ruby-lang.org/issues/5218

On 28 Jul 2012, at 17:12, Mikael Henrikssonreply@reply.github.com wrote:

> @ebeigarts sorry about being daft but I'm not following. Are you referring to log output or source code?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/pull/463#issuecomment-7333307
",ebeigarts,ebeigarts
460,2011-08-26 06:34:43,"@apneadiving: those two dependencies are incompatible, you can't satisfy both.
",jnicklas,apneadiving
460,2011-08-26 06:54:00,"@jnicklas: Of course :)

I didn't touch anything though. That's why I deduce '2.0' is sometimes interpreted as '0.2.0'.
",apneadiving,jnicklas
460,2011-08-26 07:56:03,"@apneadiving: it's not ;)
",jnicklas,apneadiving
460,2011-08-26 09:01:18,"@apneadiving The dependency in capybara 1.0.0 was 0.2.0 so I suspect you were just using that.
",ramblex,apneadiving
460,2011-08-26 09:11:54,"@ramblex: correct! thanks :)
",apneadiving,ramblex
459,2011-08-18 07:28:52,"Hi @smaboshe, please ask questions like this on the Capybara mailing list. We try to only have reproducible issues on the issue tracker.
",jnicklas,smaboshe
457,2011-08-21 14:34:47,"I misspoke, this isn't fixed on 1.0.1, but I believe it is fixed on master:
https://github.com/jnicklas/capybara/commit/4cd4b5c76a4bd95c585cd70036ab2d5df86d000d

@betelgeuse Can u verify?
",ngan,betelgeuse
457,2011-08-21 14:48:03,"@ngan master does pass my test case
",betelgeuse,ngan
450,2011-08-19 20:48:20,"I'm having similar problems, though this seems to be a problem with spork, and not with capybara @turadg, have you tried filing an issue with [spork](https://github.com/timcharper/spork) ?
",schneems,turadg
450,2011-08-23 19:26:17,"@turadg, i misread your original post. Sorry for the confusion. I've tried your/Hannes Benson's solution, but when i run it without clearing out my database manually (was doing a `User.destroy_all ...`) Tests pass the first run through, then fail on the second with validation errors. 

Can you give me some more info on where exactly you put those lines of code? did you put it inside the prefork section? Did you need any other code in addition to this? 
",schneems,turadg
448,2011-08-13 01:59:17,"Capybara is doing the right thing there. @dblock, would you be able to provide a reduced case - perhaps using [this template](https://gist.github.com/1024843)?
",jarib,dblock
442,2011-08-11 17:51:42,"Agree with @jfirebaugh. These APIs are taken verbatim from Webrat. I think they read quite nicely tbh.
",jnicklas,jfirebaugh
431,2011-07-30 08:16:17,"@clowder Wow great work!

I would be glad if this would be merged (assuming everythings works fine) into master. This might sound weird from the guy who wrote the 'competing' driver, but the following explains it quite well I think. I have built my capybara-mechanize driver with a specific use case in mind. I didn't have a non-ruby or remote application that I wanted to test with Capybara. My goal was to test the interaction between sites like facebook and my local application. And although I wanted to support the non-ruby case I never found the need and therefore enough time to figure out how I could make those commented out specs passing.

A few things are on my mind right now. If this is gonna be merged I'll need to consider some practicalities as updating the mechanize dependency, renaming the library to something like Capybara-Connect (*). However I also should consider the case where it might be better to shut down my version. If @clowder's version covers my personal use case I'll probably do that. The only advantage of my driver would then be that things are a bit faster for the local part of local-to-remote case (no http just RackTest in memory), but I'm not sure if that performance advantage is enough of a reason to maintain a seperate driver and it would also confuse the community.

@clowder I would appreciate if you could indicate whether or not you think my use case would be covered by your driver? If not, I would like see if we could work together to support that.

All in all I'm very happy to see this pull request. It will be a great addition for the non-ruby applications since I have never have been able to tackle that part perfectly.

(*) Which is actually a pretty good name now I come to think of it, right? :)
",jeroenvandijk,clowder
431,2011-08-02 09:53:02,"Morning Guys!

@jeroenvandijk This should defiantly sort you out. I'm using it for a similar reason at the moment! RackTest was taking the external links to our payment processor and forwarding them to Rails (_KaBOOM!_). I'm using this driver and FakeWeb to stub out and test responses from the processor. 

@joliss I'll rebase my feature branch off HEAD and get that sorted out! I'll have to give it a `push -f` to get this pull request updated. Can you make sure you delete any versions of the mechanize branch that you have.

Cheers,
Chris
",clowder,joliss
431,2011-08-02 09:53:02,"Morning Guys!

@jeroenvandijk This should defiantly sort you out. I'm using it for a similar reason at the moment! RackTest was taking the external links to our payment processor and forwarding them to Rails (_KaBOOM!_). I'm using this driver and FakeWeb to stub out and test responses from the processor. 

@joliss I'll rebase my feature branch off HEAD and get that sorted out! I'll have to give it a `push -f` to get this pull request updated. Can you make sure you delete any versions of the mechanize branch that you have.

Cheers,
Chris
",clowder,jeroenvandijk
431,2011-08-02 23:07:43,"On Tue, Aug 2, 2011 at 11:53, clowder
reply@reply.github.com
wrote:

> @joliss I'll rebase my feature branch off HEAD and get that sorted out! I'll have to give it a `push -f` to get this pull request updated. Can you make sure you delete any versions of mechanize the branch that you have.

Great, thanks. Feel free to rebase as much as you want -- I don't
expect to be able to work on top of other people's feature branches
(unless I'm prepared to deal with incessant `push -f`'ing). I don't think
most people would. :-)

Jo
",joliss,joliss
431,2011-08-11 08:44:29,"I agree with @jnicklas that it adds yet another dependency. As an application developer however I normally don't mind having some extra dependencies in the test part of my application as long as they don't conflict with application gems, but chances are they will.

I am more than willing to rename or deprecate (one of the two, depending on the feature set) the capybara-mechanize gem so that it can be used by this work instead. As long as we mention the driver in the Readme people should be able to find it. Another choice could be to make a move like RSpec where you start with Capybara-Core Capybara-Selenium etc etc.
",jeroenvandijk,jnicklas
430,2011-10-20 12:43:36,"@jarijokinen: You can't access external URLs with RackTest, you need to use another driver. Please use the mailing list for these kinds of question in the future.
",jnicklas,jarijokinen
427,2011-08-10 15:46:41,"@jeremyevans: I agree that less dependencies is a good thing, but in this case the usability really trumps, imho. And unless Rubygems integrates a way to specify optional dependencies we'll have a hell of a time with compatibility to different versions of our dependencies.

The alternative is to extract all drivers into separate gems, and I'm currently not really willing to do that.
",jnicklas,jeremyevans
422,2011-07-29 21:15:01,"@subelsky Thanks for catching that, I went ahead and fixed last_request to return the query parameters as well.
",mcolyer,subelsky
422,2011-07-29 23:15:55,"@joliss a fair point. I went ahead and reverted to the original implementation.
",mcolyer,joliss
419,2011-07-28 12:51:56,"I would like to use areset_session_after_each config option as well for the same reasons @kberridge mentioned. 
",weidenfreak,kberridge
416,2011-07-20 07:01:44,"@mailerhq you are using an old version of Capybara, the name of that class changed in Capybara 1.0.
",jnicklas,mailerhq
411,2012-01-24 12:11:05,"thank you @bowsersenior that works a treat! :D
",sermoa,bowsersenior
411,2013-04-17 21:47:31,"Thanks @bowsersenior , that was a great workaround
",matt-hwy1,bowsersenior
409,2011-07-25 20:02:31,"#422 is a dup of this one, I think. I looked at the code for each one, but I don't know Capybara's ins and outs well enough to tell which one is better, or if they even do the same thing. (I'm just a contributor -- Jonas is the maintainer, but he's on vacation at the moment.)

@lawrencepit and @mcolyer, would you guys be so kind as to take a look at each other's pull requests and tell me which of the two you think is better?

> Just don't know how to get a /redirect_to_other page hosted on that site ;-)

I think lib/capybara/spec/test_app.rb is where it's coming from, though you'd need Jonas to actually deploy it on heroku. (It's kindof suboptimal, I know...)
",joliss,lawrencepit
409,2011-07-25 23:50:04,"@joliss thanks for responding I was beginning to wonder what was going on. 

Unfortunately I didn't see this pull request when I made mine. However I would rather we use #422 as it includes the code for the test server and it also handles changing the host upon each redirect as opposed to the last redirect. 
",mcolyer,joliss
396,2011-06-29 13:58:33,"@joliss: I think we should do whatever the UAs are doing. If they ignore it, we should too. Same goes for maxlength=""0"", imho.
",jnicklas,joliss
396,2011-06-29 14:59:28,"@joliss: thanks!
",jnicklas,joliss
394,2011-09-26 10:54:49,"+1, this affects me too. Thanks for the workaround using page.source instead.
@jnicklas: Please deprecated #body, and just leave #source and #html. This has cost med ours testing an XML application.
",jarl-dk,jnicklas
392,2011-07-12 22:28:42,"@jnicklas any idea when a Capybara 1.0.1 will be out which includes this fix? Unfortunately selenium-webdriver has been updated on July 7th and so this is a real problem now (not able to use git source). Appreciate you're probably busy :-)
",parndt,jnicklas
386,2011-06-19 22:31:21,"@ryanbriones: If you believe selenium-webdriver should handle its JSON dependency differently, please file an issue in our tracker: 

  http://code.google.com/p/selenium/issues/entry
",jarib,ryanbriones
384,2011-06-28 10:32:37,"@jnicklas, since lots of people are switching from webrat and this is a mistake people often make, perhaps it would be nice for us to give them a warning when passing ignored options or a block to #have_selector ?
",gunn,jnicklas
384,2011-07-21 12:50:42,"@contentfree, your setup seems a little odd -- while there is a response method somewhere deep inside the Capybara code, it shouldn't normally be exposed in your tests. Calling `response` just gives me `undefined method`.

Are you having webrat or something else lurking about, perhaps? Those interactions can be nasty. Try `p method(:response)` to figure out where that method comes from.
",joliss,contentfree
384,2011-07-22 18:28:24,"@joliss: I'm not sure what's odd about it. This is in a controller spec (not a cuke feature), so response is an available method and used all over the place.

The docs for capybara explicitly state: ""rspec-rails will also automatically include Capybara in :controller and :mailer example groups."" and `within` is definitely available as a method in the specs. The problem is that `within` doesn't find the content in `response.body` that matches the selector while `response.body.should have_css('the same selector')` does.
",contentfree,joliss
384,2011-07-22 22:11:32,"[Cc @dchelimsky. Some context: @contentfree was trying to mix Capybara and ActionController::TestCase methods like so:]



---

Re @contentfree: Oh, that's a controller test -- now I see.

I think the reason why it doesn't work is that `within` is part of Capybara, whereas `response` is part of ActionController::TestCase. (That's two completely separate testing systems: Capybara exercises the entire stack, and ActionController::TestCase only calls the controller.) As a result, `within` uses Capybara's current `page` to find and set a new scope, which is then used by the methods in Capybara's DSL (unless you call them on specific nodes). But `response` does not care about Capybara's scope.

@dchelimsky, should rspec-rails really include the Capybara::DSL in :controller specs? What was the reason behind that? I'm wondering (in a _just putting the thought out there without a technical clue_ kind of way) if rspec-rails should rather include some subset (or nothing at all) for :controller specs to avoid confusion like this.
",joliss,contentfree
384,2011-07-27 21:02:23,"I was able to modify the work-around provided by @jnicklas so that it works in my view specs under capybara 1.0.0 and rspec-rails 2.6.1:



The trick here was to expose the Capybara DSL by wrapping RSpec's `rendered` string in a `Capybara::Node::Simple` object.
",Tekhne,jnicklas
384,2013-04-24 21:34:15,"To people that request it. @jaredmoody's example can be rewritten to:



I don't get why you don't like it
",abotalov,jaredmoody
384,2013-10-11 16:08:29,"@IAmFledge as I mentioned in my comment, you'll need to wrap your response in `Capybara.string`. If this is something you do a lot, you could do:



Or if you want to get really fancy:


",jnicklas,IAmFledge
383,2011-12-28 16:01:01,"/cc @jnicklas 

It seems there has been no progress on this for a while, and there are still synchronicity issues for the temp file cleanup that prevent us from adding this feature. I'll close this pull request for now. Feel free to reopen if there's new code.

Jonas, is it OK if I close old pull requests like this?
",joliss,jnicklas
382,2011-06-14 06:37:41,"@joho: I'm not opposed at all to this pull request, if you can get it into better shape, I'd be glad to merge it. I'd agree that it would be best to have a test which just checks that it isn't nil, that seems sensible.
",jnicklas,joho
382,2011-06-14 15:27:36,"@joho: just realized that those tests are not run by Selenium, since it doesn't include the header support module in its suite (Selenium doesn't have support for reading HTTP headers). That's why it's passing, these will still fail with any other driver (e.g. Akephalos) which implements the headers, but doesn't have the same API as RackTest. Please rewrite these tests to use the official Capybara driver API only (see Capybara::Driver::Base). 
",jnicklas,joho
382,2011-06-15 05:45:45,"@joho: pull down the Akephalos source, change the Gemfile to point at your Capybara fork on Github, bundle install and run.
",jnicklas,joho
380,2011-07-25 21:15:31,"I'm not sure if this is the same problem, though it might be. @surajreddy, can you try if upgrading to launchy 2.0.4 solves the problem for you?
",joliss,surajreddy
380,2011-11-15 17:02:48,"Since this is presumed fixed, and the @surajreddy didn't say otherwise, I am closing this. Please reopen if it's still relevant.
",jnicklas,surajreddy
379,2013-03-07 18:40:43,"@jnicklas I've tried adding href='#' to my links but I run into the same issue as @pboling - my pages jump to the top when the user clicks them. Without a hack like @tomazzlender suggested, Capybara won't click something that isn't a link, and using inline javascript as @pboling suggested mixes your concerns and is generally frowned upon these days. 

What I've finally settled on is having a real link that is used if a browser doesn't support JS, and using `preventDefault()` to keep the link from actually being followed if the browser does support JS. 

But I actually got the practice of using `a` without the `href` from the Jquery UI documentation (http://jqueryui.com/sortable/). If Jquery UI is using this practice, it seems to me that it's standard enough to support it.

Thanks for all your good work on Capybara.
",michaelrkn,tomazzlender
379,2013-03-07 18:40:43,"@jnicklas I've tried adding href='#' to my links but I run into the same issue as @pboling - my pages jump to the top when the user clicks them. Without a hack like @tomazzlender suggested, Capybara won't click something that isn't a link, and using inline javascript as @pboling suggested mixes your concerns and is generally frowned upon these days. 

What I've finally settled on is having a real link that is used if a browser doesn't support JS, and using `preventDefault()` to keep the link from actually being followed if the browser does support JS. 

But I actually got the practice of using `a` without the `href` from the Jquery UI documentation (http://jqueryui.com/sortable/). If Jquery UI is using this practice, it seems to me that it's standard enough to support it.

Thanks for all your good work on Capybara.
",michaelrkn,jnicklas
379,2013-03-07 18:40:43,"@jnicklas I've tried adding href='#' to my links but I run into the same issue as @pboling - my pages jump to the top when the user clicks them. Without a hack like @tomazzlender suggested, Capybara won't click something that isn't a link, and using inline javascript as @pboling suggested mixes your concerns and is generally frowned upon these days. 

What I've finally settled on is having a real link that is used if a browser doesn't support JS, and using `preventDefault()` to keep the link from actually being followed if the browser does support JS. 

But I actually got the practice of using `a` without the `href` from the Jquery UI documentation (http://jqueryui.com/sortable/). If Jquery UI is using this practice, it seems to me that it's standard enough to support it.

Thanks for all your good work on Capybara.
",michaelrkn,pboling
379,2013-03-07 18:51:12,"@michaelrkn standard is kind of a binary concept, it either is standard or it isn't. In this case, standard means the [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/text-level-semantics.html#the-a-element). This is the relevant section:

> If the a element has an href attribute, then it represents a hyperlink (a hypertext anchor) labeled by its contents.
> 
> If the a element has no href attribute, then the element represents a placeholder for where a link might otherwise have been placed, if it had been relevant, consisting of just the element's contents.

I don't think this can be much clearer. ""then it represents a hyperlink"". otherwise is does not.

Capybara will happily click on anything you can throw at it, by the way, it just won't _find_ it as a link, if you do `click_link`. `find(""a"", :text => ""whatever"").click` will work just fine, `href` or not.
",jnicklas,michaelrkn
379,2013-04-22 14:25:45,"@anpr it needs to be a valid CSS selector


",twalpole,anpr
379,2013-04-22 14:36:56,"@anpr ok, then a stack trace would be helpful, and probably opening a new issue since this one specifically has to do with click_link
",twalpole,anpr
379,2013-04-22 15:44:42,"@twalpole: In the meantime, we found out that there was a bug so that the link-without-href couldn't be clicked upon. So sorry for the spam, there's no Capybara issue here.
",anpr,twalpole
379,2013-04-29 13:59:31,"@jmuheim 
1. Why would you add this to a closed issue?
2. After reading the readme why post to an issue on github rather than the mailing list?
3. No title is not an option because its not needed since the locator will match a title for a link
4. ""Does not seem to work"" is a useless description of an issue
5. find(:link, ""whatever"").click or click_link(""whatever"") are 2 options for what you probably want
6. and if its not actually a link (no href) then you can just use css find(""a[title=whatever]"").click
",twalpole,jmuheim
379,2014-06-01 23:46:23,"@jnicklas your suggestion of `find(""a"", :text => ""whatever"").click` is nice -- however I think I'm finding that capybara will visit ""/"" if it doesn't find a href.
",jjb,jnicklas
379,2014-06-02 22:48:42,"@jjb yep - apparently theres a bug there
",twalpole,jjb
379,2017-03-18 04:51:50,@terryyin This is an old closed issue - if you have a reproducible example of a problem please create a new issue with enough detail to reproduce,twalpole,terryyin
373,2011-06-11 11:35:19,"@dbkbali, I showed you the possible way to fight this problem in the mailing list. Did that help you?
",nashbridges,dbkbali
373,2011-08-13 21:56:42,"I expanded upon @dbkbali's solution to support recursive subfolders in assets, and also rewriting css packages and asset_paths within those. So far its all working pretty good for me. Gist is here:

https://gist.github.com/1144277

You just need to run rake assets:precompile before you run your test suite. I'm also running on the latest rails 3-1-stable branch as I was having some inconsistency issues with precompiling across different machines on rc5.

Not sure what you think @jnicklas about asset pipeline save_and_open_page support ever going into Capybara, but this is a good starting point. I'm sure a lot of people will want this feature, so if you think it doesn't belong in Capybara, we can create a separate gem.
",snelson,jnicklas
373,2011-08-13 21:56:42,"I expanded upon @dbkbali's solution to support recursive subfolders in assets, and also rewriting css packages and asset_paths within those. So far its all working pretty good for me. Gist is here:

https://gist.github.com/1144277

You just need to run rake assets:precompile before you run your test suite. I'm also running on the latest rails 3-1-stable branch as I was having some inconsistency issues with precompiling across different machines on rc5.

Not sure what you think @jnicklas about asset pipeline save_and_open_page support ever going into Capybara, but this is a good starting point. I'm sure a lot of people will want this feature, so if you think it doesn't belong in Capybara, we can create a separate gem.
",snelson,dbkbali
370,2011-08-21 15:01:56,"@jdelStrother I believe this has been fixed on master, can you double check and close.
",ngan,jdelStrother
368,2011-06-04 09:45:22,"What @dchelimsky suggests is exactly [what Steak does](https://github.com/cavalle/steak/blob/master/lib/rspec-2/steak.rb#L11). I can help if you think it would make sense to port that logic to capybara.

Regarding the original motivation of this pull request (making the upgrade for steak users as smooth as possible), it seems that there'd be no problem [overwriting the type](https://github.com/cavalle/steak/blob/steak-2/lib/steak/acceptance_example_group.rb) of capybara features to `acceptance` in steak. So there's a workaround for that original issue that I can include in the next version of steak if you decide not to merge this pull request.
",cavalle,dchelimsky
368,2011-10-15 09:30:13,"@dchelimsky I am definitely interested in the treatise version. I actually think the terms 'integration' and 'acceptance' are very fuzzy. They are not mutually exclusive plus the meaning is dependent on perspective and context. I think they are often unhelpful. 

You could argue that all tests are integration tests. It's debatable. You could also say all acceptance tests are integration tests. Then again, you could have acceptance tests for a class' unit tests. You could have integration tests that are not acceptance tests (say, Rails' functional tests). In fact, functional tests is another term that is ambiguous. Anyway, this is a little OT, but I'd love for the community to have a discussion about these terms and bring some clarity.

On this specific matter, I would stick with request specs over acceptance specs in this case, if not only to follow RSpec conventions.
",mkdynamic,dchelimsky
363,2011-06-09 17:53:14,"Was the issue caused by what @xaviershay thought or was it something else?
",YorickPeterse,xaviershay
361,2011-05-26 16:33:38,"@ngw, You can trace it by ""Then show me the page"" step. put it after ""And I go to the homepage"" line.
",ganeshkumar,ngw
358,2012-01-03 13:54:47,"@jnicklas totally agree.
",agibralter,jnicklas
351,2011-06-15 16:00:28,"@joliss: Why even have a Capybara API at all then—why not just send everything through to the native drivers? You need to be able to send keystrokes to interact with and test modern web applications, so don’t see why `send_keys` would ‘clutter’ the API any more than you could say `fill_in` does.
",codyrobbins,joliss
351,2011-06-15 18:48:05,"@steveklabnik: Yes it does—`Capybara::Node::Actions#fill_in` uses `Capybara::Selenium::Node#set`, which calls the driver’s `send_keys` implementation:

https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/node.rb#L28
",codyrobbins,steveklabnik
347,2011-05-14 08:36:34,"@joliss why would it make the test suite brittle?
",jnicklas,joliss
347,2011-05-23 22:06:19,"@joliss Is capybara currently being tested against windows? I.e. is anyone (perhaps yourself) running tests successfully on that platform? I've just spent a couple of hours trying to get it set up in a VM. I have got as far as the following error, which leaves me stumped (it's not my usual platform as you can imagine):



It seems like a good idea to preserve Windows compatibility if that's currently already working, but if it's more of a hypothetical concern because nobody actually knows if it works on Windows then it would be good to just merge this IMO.
",jonleighton,joliss
347,2011-06-01 21:07:00,"On Tue, May 24, 2011 at 12:06 AM, jonleighton
reply@reply.github.com
wrote:

> @joliss Is capybara currently being tested against windows?

Not by me, and I don't know if anyone has successfully run the tests
on Windows, to be honest.

> PS E:\Code\capybara> bundle exec rspec .\spec\driver\selenium_driver_spec.rb
> C:/Ruby192/lib/ruby/gems/1.9.1/gems/nokogiri-1.4.4-x86-mingw32/lib/nokogiri/nokogiri.rb:1:in `require': 127: The specified procedure could not be found.   - Init_nokogiri (LoadError)

Interesting.  Thanks a lot for trying -- I'm not sure what's going on
there.  At least now we can say ""smart people have tried and failed"".

> if it's more of a hypothetical concern because nobody actually knows if it works on Windows then it would be good to just merge this IMO.

I agree, actually.  Sorry for holding up the merge!

Jo
",joliss,joliss
347,2011-06-01 21:35:51,"@joliss I didn't run the full test suite, but that specific test file ran successfully, and selenium worked etc.
",jonleighton,joliss
344,2011-05-14 08:38:35,"Hmm, current_host sounds good. Is this working well for you @leshill?
",jnicklas,leshill
336,2011-04-28 19:24:52,"@joliss I like the diff in pull 337 to except it should probably be: `n[:value]` in the `each`...
",agibralter,joliss
332,2013-09-23 21:08:43,"My code was:



Which worked for the poltergeist driver, but not the default firefox driver.  After changing it to @reedlaw's fix:



It works with both drivers.  Perhaps the driver interface needs to be more clearly defined.
",asselstine,reedlaw
331,2011-06-26 14:18:37,"Sorry to be a bit hard on you @vrish88 ;) In an ideal world, I would want the matchers to give sensible error message depending on their context, for example, the has_link? matcher could return something like:



This would actually be way more helpful than just ouputting the text on the page. Since this is quite a big undertaking and would require some rather tricky additions to the XPath gem, I was willing to push this off for some more generic error messages for 1.0. Since we just released 1.0, and are not in a rush anywhere, I'd rather get this fixed properly though.
",jnicklas,vrish88
331,2011-06-27 00:48:57,"@jnicklas it is quite alright. I honestly would have been very surprised if that patch had gone through as it was.

I agree some sort of contextual error message would be awesome. But are you talking about putting this sort of error handling in the [XPath gem](https://github.com/jnicklas/xpath)? Or would each error be handled differently for each matcher?

Finally, where do we go from here? I'm not too familiar with contributing to open source projects and so I don't really know what I can/should do now.
",vrish88,jnicklas
329,2011-06-02 00:21:43,"@notahat: hmm, this is the code that Capybara currently has for Rails support: https://github.com/jnicklas/capybara/blob/master/lib/capybara/rails.rb, note that half of that is to support both Rails2 and Rails3. It doesn't seem worthwhile to split that into a gem to me.

The problem here isn't that Capybara doesn't monkeypatch Thin, the problem lies within Thin. I'd rather drop Thin support than add the monkey patch or add a capybara-rails gem.

Since people can configure Capybara to use whatever server they want, that actually wouldn't be a huge loss, still it's a shame.

If someone can work up a pull request for Thin, I'm sure they'd be happier at the prospect of merging this.
",jnicklas,notahat
329,2011-06-07 00:57:47,"@jnicklas: I'm beginning to agree with the Thin people. As I wrote my [reply](https://github.com/macournoyer/thin/issues/50#issuecomment-1312946) to the Thin thread, I realized that the only difference between Thin and WEBrick in Capybara is that WEBrick's 500 error page includes a backtrace. That's probably not ideal either... here's the pertinent part of my post:

> Anyway, as your tests run, you will expect to see some tests fail due to failed assertions (i.e. failed RSpec expectations); however, it is also possible that your app will have its own internal errors which need solving. WEBrick's 500 error response includes a stack trace... I guess that's not the same as what I was asking for in the original post... perhaps there's a better way as you suggest that involves a failsafe piece of rack middleware that captures app errors... perhaps Capybara's Identify rack app could serve this purpose.

Don't you think Capybara should handle internal app errors? `Identify` could capture exceptions to some sort of global variable/queue. Then Capybara could check for the presence of a `@@last_error` after app requests. What do you think?
",agibralter,jnicklas
329,2011-08-28 10:25:36,"Never had a problem with this with WebRICK, but I haven't really investigated this very thoroughly. I'm kind of inline with @leshill. Since the server is configurable anyway, I think we could just as well remove thin support. And people who want it as an optimization can be explicit about it. Less magic = good.
",jnicklas,leshill
329,2011-08-29 08:16:20,"@rubiety: Thanks! That log idea finally allowed me to find an unrelated but frustrating bug! I also think, capybara should display driver errors.
",lorenzk,rubiety
329,2011-08-29 22:01:29,"@jnicklas Would you consider accepting a patch that inserted one more piece of middleware `Capybara::Server::ExceptionCatcher` (much like `Capybara::Server::Identify`) that handles exceptions raised in the app?
",agibralter,jnicklas
329,2011-08-29 22:22:19,"@agibralter: providing it is well written, it's purpose well defined and it has no annoying side effects, then yes. Oh and well tested too! ;)
",jnicklas,agibralter
329,2012-07-16 20:16:53,"@rubiety thanks for that solution, that's going to help us a ton.
",brianhempel,rubiety
329,2013-04-10 22:14:27,"@rubiety this helped me out on a rails 2 app. Thanks!
",sfsekaran,rubiety
327,2012-03-11 22:39:57,"@betelgeuse Thanks for the tip.  I actually did something similar, except that I set up a specific session controller and enabled only for test.  That way no one can just put in a parameter and get access to your system in production.

For example, if I visit http://myapp.com/login/username, the system will login as that user.  But it only works when RAILS_ENV=test.
",blindninja,betelgeuse
325,2011-04-20 09:03:29,"@lucascaton don't think the second error is related.

@amalkov this is not the place to report these problems. It would be fantastic if you could describe them in _detail_ and send them to the mailing list, or open an issue if you're confident of the cause.
",jnicklas,amalkov
325,2011-04-20 09:03:29,"@lucascaton don't think the second error is related.

@amalkov this is not the place to report these problems. It would be fantastic if you could describe them in _detail_ and send them to the mailing list, or open an issue if you're confident of the cause.
",jnicklas,lucascaton
323,2011-04-14 13:42:47,"@andywatts I tried that as well and it didn't work. The problem here is that when you call the path helper it is a method missing call, then the Rails integration method_missing method calls reset!, before this commit that method would have set an instance variable and method missing would continue to see if the instance variable responds to the path helper then call it. Now because of the new reset! method it sets the @browser instance variable to nil.
",bcardarella,andywatts
322,2011-04-13 21:25:04,"@joliss
I am not totally sure what you mean.  What I posted above was inserted into the test_helper.rb file.  The reason I included the DSL module was that I was getting deprecation warnings with `include Capybara`.
",chrisolsen,joliss
316,2014-07-25 00:53:48,"Spent some time trying to figure this out then stumbled upon this. Thanks @jonleighton! :smiley_cat: 
",rickarubio,jonleighton
310,2011-09-22 14:58:37,"@elabs how whould you do this?
",nerdyglasses,elabs
310,2011-09-22 16:05:41,"@infews: do you understand what elabs is implicating? Do you know how to fill content editable divs?
",nerdyglasses,infews
310,2016-09-12 19:32:28,"@david-dcp You're commenting on an issue closed over 5 years ago, that was referring to contenteditable nodes (i.e. elements with the contenteditable attribute).

As far as &lt;textarea> and &lt;input> elements  (which aren't ""contenteditable"")- they're basically treated identically and calling `find` and then `#set` on an element is the same as using `#fill_in` and will generate the same events.  

If you have an actual bug please create a new issue, if you just want to know how to do something please post to the mailing list as requested in the README.  In either case make sure you identify what version of Capybara you are using as well as which and which version of driver you are using.
",twalpole,david-dcp
261,2012-12-19 00:18:21,"@jnicklas Seems like Capybara-webkit and Poltergeist solved this problem by automatic accept of all alerts.

Do you think Capybara should provide alert support by itself? i.e.
`page.alert.confirm` will work like `page.driver.browser.alert.confirm` if driver is Selenium and do nothing if Poltergeist

It will make switching between drivers easier
",abotalov,jnicklas
243,2011-04-11 03:39:45,"I encountered this issue today and ended up with the same CGI.escape fix as @jfirebaugh down in Rack::Util. 
",mculp,jfirebaugh
243,2011-04-11 08:07:34,"@jfirebaugh: that makes perfect sense. I think I understand now. If you'd like to fix the Capybara side of this issue, that'd be fantastic, and maybe we can figure this out once and for all.
",jnicklas,jfirebaugh
243,2011-04-25 09:12:00,"@jfirebaugh: any progress? if you don't have time to fix this, could you explain what you intended to change? Really want to get this fixed.
",jnicklas,jfirebaugh
243,2011-05-16 18:20:28,"What's the status of this.  I'm trying to move an app to Rails 3.1 beta and haver run into it.

I can't tell if the current rack has a variant of @jfirebaugh's pull request. I see that the pull request was accepted but the code looks a bit different.
",rubyredrick,jfirebaugh
243,2011-06-27 19:08:58,"@jschairb: that is the reason we did not put in a dependency on Rack 1.3. You'll probably have to upgrade to Rails 3.1 in order to dim the warnings.
",jnicklas,jschairb
243,2011-06-28 01:09:02,"@jnicklas thanks for the response!
",jschairb,jnicklas
243,2012-02-22 10:23:01,"@mischa I had to add a couple of lines to your fix


",remen,mischa
228,2011-01-31 16:10:49,"@sorentwo have you resolved this somehow?
",dombesz,sorentwo
218,2010-12-06 02:00:08,"@aspiers, thanks for correcting me on this! This was actually me rediscovering #188 and failing to work through the tests. I was actually manually testing my change against the current gem version of capybara, and I blindly copied my fix into the github HEAD version.

This comes of me not upgrading my project to Bundler and not knowing how to use git versions instead of the officially versions of the gems.

I'm going to close this pull request, as it now appears unnecessary. Thanks again!
",sbleon,aspiers
210,2011-02-13 19:25:58,"@byrnejb will you implement this feature any time soon? If you won't I can give it a try
",gvc,byrnejb
203,2014-06-22 22:49:10,"I was having a similar problem.
fill_in doesn't trigger 'change' event.
@nickstreet  hack is working like a charm for me. 
Thanks!


",abinoam,nickstreet
203,2016-09-23 17:31:30,"@BMorearty  When I use your suggestion, I get undefined method `send_keys' for #Object:0x007fc979f730d8 (NoMethodError)  
Using this
page.find(:xpath, ""//input[@placeholder = 'Prefix']"").set """"
      send_keys [:control, ""a""]

since the Prefix field does not have an id (it's React) so I am trying to access a field with its placeholder text.  It works fine to set it to a value but even though I see the set command above clear the field, the original value is still in the field once I save the form.
",DougMaisells,BMorearty
203,2016-09-23 17:53:00,"@DougMaisells send_keys needs to be called on an element - you probably want something like



of you could just do something like

   find_field('Prefix').send_keys([:control, ""a""], :backspace)

which should have a similar effect (assuming ctrl-a selects all contents in the platform you're testing on).
",twalpole,DougMaisells
203,2016-09-23 18:00:53,"@twalpole Unfortunately this field doesn't have an id, it's react and I had to access with page.find(:xpath) method
",DougMaisells,twalpole
203,2016-09-23 18:02:04,"@nickstreet Thanks but doesn't work.   I can see the field clear when the script runs but when as the script runs and focus travels to other fields, the former value is restored....
fill_in 'person-form-title', with: """"
      trigger_event_for('person-form-title', :keyup)
      #send_keys [:control, ""a""]


",DougMaisells,nickstreet
203,2016-09-23 18:04:00,"@DougMaisells  find_field finds by id, name or placeholder text - so `find_field('Prefix')` should find the element with matching placeholder text rather than needing xpath.
",twalpole,DougMaisells
203,2016-09-23 18:06:41,"@twalpole  so do I replace the page.find up above with find_field?
",DougMaisells,twalpole
203,2016-09-23 18:17:41,"@DougMaisells  try



If that still errors - tell me which line it's erring on
",twalpole,DougMaisells
203,2016-09-23 18:25:09,"@twalpole Thanks, got by run-time error but still does not persist with the zapped value.  It zaps the field as I run the scripts but the value is restored as the script travels through other fields on the form.  It must be a React thing; I'll have to get with my developer.  (I am QA)
",DougMaisells,twalpole
203,2016-09-23 18:32:02,"@DougMaisells  Ok -- it all depends on which event React is looking for to trigger it's model updates.  You might want to try just doing the single line (rather than separately setting and then trying to trigger the needed events)



and see if that triggers the needed events - since that should trigger key events and the change event
",twalpole,DougMaisells
203,2016-09-23 18:41:38,"@twalpole Tom, you are talking over my head now.  My extent of understanding of React is it's a javascript framework which my app and others like Facebook is written in.  I'll get with my dev.  BTW, what you suggested above didn't work either.  This time, it doesn't even render the field as zapped and it stays with its value where the other tries at least zapped the field in real-time but then it restored a moment later as it went through other fields.    But with manual testing, I can highlight the value, hit the delete key, and tab (or use mouse to move focus to another field) and the zapped value persists.  If you have a quick and dirty way to emulate the manual actions above, I'm all ears.
",DougMaisells,twalpole
203,2016-09-23 18:58:37,"@DougMaisells - As I stated previously, my example assumed ctrl-a was selecting the contents of the field on your platform -- if howeever you're on OS X it would be cmd-a  - so then your test could use

find_field('person-form-title').send_keys([:command, ""a""], :backspace)  

ie - send cmd-a to select everything then hit backspace to delete it all - anyway it may be best if you did talk with a developer about what events are required to complete the action with React
",twalpole,DougMaisells
203,2016-09-23 19:05:40,"@twalpole Ooh, I missed that connection.  Yes, I am on OSX and yes that works.   I glanced over that detail above because I wasn't sure what was being talked about.
",DougMaisells,twalpole
194,2011-07-09 10:47:49,"@jnicklas: I'm aware of your stance on this, it's just that I don't agree. Keeping scenarios as free of implementation details as possible is a worthwhile quest, but the way you're recommending with hundreds of hand-crafted, single-use steps doesn't hit the sweet spot for us. We enjoy having reusable steps that take us most of the way (and they [don't](http://github.com/makandra/cucumber_factory) have to be ugly), and write custom steps when using a generic step would make a scenario too hard to read.
",triskweline,jnicklas
187,2010-11-09 14:50:53,"@jnicklas I'm not sure that will work, since I don't think it's able to access the `example.metadata`, which is the why Swinger can't use the around block: https://github.com/jnicklas/capybara/pull/187#issuecomment-526439

@alloy Swinger allows you to set the driver per example and per group. :)

I'll send in a new pull request when RSpec has metadata in its around blocks: https://github.com/rspec/rspec-core/issues#issue/221 :)
",jeffkreeftmeijer,alloy
187,2010-11-09 14:50:53,"@jnicklas I'm not sure that will work, since I don't think it's able to access the `example.metadata`, which is the why Swinger can't use the around block: https://github.com/jnicklas/capybara/pull/187#issuecomment-526439

@alloy Swinger allows you to set the driver per example and per group. :)

I'll send in a new pull request when RSpec has metadata in its around blocks: https://github.com/rspec/rspec-core/issues#issue/221 :)
",jeffkreeftmeijer,jnicklas
178,2010-12-13 11:05:11,"@zenspider - Do you still think that this is a bug in capybara/selenium ? Because i think is more ruby/minitest thing. Your patch is fine. I do not think that we do something wrong here that could be patched in capybara/selenium. And i have no idea why begin/rescue/end block makes the difference.
",paneq,zenspider
178,2010-12-13 16:38:26,"@zenspider - how to bundle 'minitest' ?

<pre>
Updating https://github.com/seattlerb/minitest.git
Fetching source index for http://rubygems.org/
Could not find gem 'minitest (>= 0, runtime)' in https://github.com/seattlerb/minitest.git (at master).
Source does not contain any versions of 'minitest (>= 0, runtime)'

</pre>
",paneq,zenspider
178,2011-03-10 18:31:26,"@paneq what ""other libraries"" are you referring to?
",sunaku,paneq
178,2011-06-22 16:25:29,"@dblock:

In your Gemfile:

```
",paneq,dblock
178,2011-06-22 16:26:30,"@paneq: i am not using minitest, made a pull request in rspec-core copying from minitest tho - thanks.
",dblock,paneq
178,2011-06-22 16:31:24,"@dblock  - sorry, I didn't notice that the original bug is about rspec. Do you use 1.9.2 ? Does the problem occur on patchlevel 180 ?
",paneq,dblock
178,2011-06-22 17:02:34,"@paneq: yes to both
",dblock,paneq
178,2011-06-22 22:01:47,"@paneq: or take my pull request! https://github.com/rspec/rspec-core/pull/410 
I think it's innocent as far as rspec goes, no?
",dblock,paneq
178,2011-06-22 22:08:57,"@dblock - innocent as lamb :-)
",paneq,dblock
178,2011-09-25 21:01:02,"I'm late to the game, but the problem boils down to this - a begin/rescue inside the at_exit resets $! from SystemExit to nil. ChildProcess doesn't mess with the process' exit codes, but it does have inevitable begin/rescue blocks as part of reliably killing the child.



1.8.7 gets it right (IMHO):



But even after @sunaku's [issue](http://redmine.ruby-lang.org/issues/show/4400) fixed at_exit ordering, the begin/rescue issue is still in 1.9.3:



Rubinius gets it right:



As does JRuby:



This is a nasty one for sure. I'm tempted to file it as a bug in 1.9.

cc: @dchelimsky, @paneq
",jarib,sunaku
178,2011-09-25 21:01:02,"I'm late to the game, but the problem boils down to this - a begin/rescue inside the at_exit resets $! from SystemExit to nil. ChildProcess doesn't mess with the process' exit codes, but it does have inevitable begin/rescue blocks as part of reliably killing the child.



1.8.7 gets it right (IMHO):



But even after @sunaku's [issue](http://redmine.ruby-lang.org/issues/show/4400) fixed at_exit ordering, the begin/rescue issue is still in 1.9.3:



Rubinius gets it right:



As does JRuby:



This is a nasty one for sure. I'm tempted to file it as a bug in 1.9.

cc: @dchelimsky, @paneq
",jarib,paneq
175,2016-10-20 21:47:34,"@mathieujobin puma is already there, just set `Capybara.server = :puma` - https://github.com/jnicklas/capybara/blob/master/lib/capybara.rb#L481 - for unicorn or thin that would be up to you - see the docs for Capybara::register_server.  In the future please ask howto questions in the mailing list or on gitter as requested in the README
",twalpole,mathieujobin
173,2013-04-26 19:12:47,"@phoet did that actually solve your problem?  It doesn't seem like poltergiest supports window_handles.  See https://github.com/jonleighton/poltergeist/issues/178
",drewB,phoet
173,2013-04-27 08:31:12,"@drewB i do not remember, actually :smile_cat: 
",phoet,drewB
170,2011-03-24 14:25:23,"I do the whole fake thing like @jnicklas does as well - however with the recent upgrade to FF4 these all break.  Anyone have an alternative?
",thechrisoshow,jnicklas
155,2011-05-16 14:32:34,"Any update on your progress @robholland? It looks like rack-test doesn't make this information available and hence a different driver would be required in order to facilitate acquiring the URI fragment.
",jcf,robholland
155,2011-05-19 09:07:28,"On Mon, May 16, 2011 at 3:32 PM, jcf <
reply@reply.github.com>wrote:

> Any update on your progress @robholland? It looks like rack-test doesn't
> make this information available and hence a different driver would be
> required in order to facilitate acquiring the URI fragment.

I'm no longer working on capybara I'm afraid.
",robholland,robholland
155,2017-02-20 18:44:39,@aminariana You just commented on an issue closed in 2011 - If you're having an issue that you think is actually a bug in capybara please create a new issue with enough information to reproduce it rather than commenting on things closed 6 years ago.,twalpole,aminariana
141,2011-10-20 07:58:41,"@w1150n Yes this is what I was using since the beginning
",jmgarnier,w1150n
139,2010-10-04 21:08:05,"@dchelimsky: ensuring API compatibility is nice, but it's just too many moving parts from Capybara that would have to be hacked together to make this work. Unlike Webrat, Capybara is heavily layered, and there is a clear line drawn between the DSL and the drivers underneath. In order to make this work we'd have to pick pieces from both and somehow build a new stack with them. I'm convinced that such a solution would be very fragile.
",jnicklas,dchelimsky
136,2011-06-15 05:44:34,"@dmonopoly: it should ignore JS links, because RackTest doesn't execute JS, thus it would have no idea what to do with them. It's bad practice anyway to add void(0) to links, just change it to '#'. Or if you really care, submit a patch which makes Capybara ignore these links.
",jnicklas,dmonopoly
119,2011-07-19 22:39:09,"@jnicklas, can we see how you hacked around it accessing the Selenium node?
",bbuchalter,jnicklas
118,2010-11-03 21:36:52,"@robholland: I've switched to using have_css as a workaround. 

However, to me it makes no sense for have_content to be so broken. Might as well remove it from capybara if it doesn't work with `within` . The broken case is even included within the generated cucumber step definitions, so this is going to trip up many, many people down the line.

I'll look through the mailing list for explanation
",jacquescrocker,robholland
110,2010-11-25 18:08:37,"@jnicklas Removing the 'capybara_javascript_emulation' fixed the problem for me.

  require 'cucumber/rails/capybara_javascript_emulation' 
",jspooner,jnicklas
105,2011-05-05 13:08:49,"@simmerz can you elaborate on how to fix this? I'm having a similar problem.
",reedlaw,simmerz
85,2011-05-21 00:43:53,"@joevandyk: 29319c0546982fb589aebff270521bcec7289a49
",jnicklas,joevandyk
85,2011-08-18 07:11:35,"@listia-liti: can you produce a test case for this?
",jnicklas,listia-liti
81,2010-11-18 13:30:23,"@bjornblomqvist your quick fix works perfectly. Thanks for that :)
",sriprasanna,bjornblomqvist
81,2012-06-06 21:37:26,"Hidden elements are properly ignored by have_content in `capybara/master`, regardless of ignore_hidden_elements setting, at least using the `capybara-webkit` driver. This seems like the semantically-correct behavior, since have_content seems to address what the user sees, not what elements are in the DOM.

@jnicklas perhaps a new release is in order? This is a blocker for me using Capybara for JS testing, and while I can just use the :git option in Gemfile, the Capybara repo is 6.2MB and [Bundler doesn't do --depth](https://github.com/carlhuda/bundler/issues/228) so I hesitate to foist it on my teammates.
",edrex-janrain,jnicklas
81,2012-06-14 21:45:52,"@chazu For now, you can copy paste the `has_{no_}text` methods from https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/matchers.rb , along with `normalize_whitespace` and things should work
",marcandre,chazu
72,2012-07-25 21:50:34,"@wordofchristian: jsut fyi that these days you can `require ""capybara/rspec""` which does this for you.
",jnicklas,wordofchristian
69,2010-08-13 23:12:54,"@deleteme: Safari is not yet supported by selenium-webdriver - you can track its progress here: http://code.google.com/p/selenium/issues/detail?id=599
",jarib,deleteme
68,2012-03-20 05:14:09,"@jnicklas 
I  am facing following problem when I run cucumber test :
no button with value or id or text 'Save' found (Capybara::ElementNotFound)
      (eval):2:in `click_button'

I tried to trace also but it is not giving any clear picture...
Plz help... 
",adityaswaroop,jnicklas
68,2012-08-08 12:09:37,"I have the same issue as @skudryk  had. But I have <input type=""image"" align=""absmiddle"" src=""/images/login_btn.png?1341897505""> only. So how can I select it and click it for submitting the form
",RajRoR,skudryk
46,2010-02-25 23:56:59,"@jnicklas: no idea who robotarmy actually is. I'd just attribute robotarmy then.
",aslakhellesoy,jnicklas
44,2011-05-19 18:28:24,"@retospect this is a really old issue, if you're experiencing something similar now, it's most likely a different problem. Can you investigate a bit more what is happening and if you think you've found a cause, open a new issue?
",jnicklas,retospect
44,2011-08-05 13:09:57,"@jnicklas, @retrospect : I just ran into the same problem, but realized that freezing date/time with Timecop was responsible of the issue.

I think Timecop messes up with Capybara's timeout function. I don't think there is any real fix here... Clearly, ""freezing"" time is dangerous, and I would recommend using this trick with caution.
",gdeest,jnicklas
37,2011-09-13 12:56:22,"i'm at a point where i could use that patch. unfortunately it looks like @louismrose deleted his fork.
",langalex,louismrose
37,2011-09-13 16:05:58,"@langalex I'm sorry about that: I did a bit of spring cleaning earlier in the year, and didn't realise this might still be useful. If it's any consolation, I wasn't keeping the fork up-to-date so I doubt very much that the patch would have applied cleanly.
",louismrose,langalex
36,2011-04-21 06:36:12,"@ryanb that's what the super misused Capybara.default_host is for. You should be able to set that to whatever you want and it will default to that domain unless you specify anything else.
",jnicklas,ryanb
36,2011-04-21 06:38:03,"@cavalle there have definitely been changes to how this behaves, it's not impossible that we messed something up in the process. What is it setting the host name to for you?
",jnicklas,cavalle
36,2011-04-21 07:12:15,"@jnicklas I tried setting the `default_host` but it still seemed to use `www.example.com`. Not only that, but the `visit` call no longer worked when using a path (instead of the full url).
",ryanb,jnicklas
36,2011-06-14 15:29:30,"@dpickett: I really don't know what the issue here is anymore, so I can't really fix it. Everything works fine for me. Can you provide a failing test illustrating the problem? That would help a lot!
",jnicklas,dpickett
36,2011-08-10 15:21:22,"@joshcrews: if you're having problems, I really need at least a failing test to fix anything, I've tried this any number of ways and it all works fine for me.
",jnicklas,joshcrews
29,2011-04-12 07:52:19,"@dereke: this does not work for me. 

a = page.driver.browser.switch_to.alert
a.text => nil
a.accept => Selenium::WebDriver::Error::UnhandledError
",gucki,dereke
29,2011-04-12 07:56:22,"@gucki probably best you [raise a ticket](http://code.google.com/p/selenium/issues/entry) with selenium with some details of the problem.
",dereke,gucki
29,2011-04-12 08:13:30,"@dereke: sorry, I just noticed it does work!! :) I just had some timing issues..
",gucki,dereke
29,2014-07-21 18:45:22,"Thank you @cibernox that's POETRY IN LOGIC!  It's AWESOME!

check_alert(""You need to accept that measurements are 'cm'"") {find(:id, 'add-to-cart-button').click}

worked a treat for me with 'Capybara.current_driver: webkit'.
",doughazell,cibernox
29,2014-07-21 18:58:53,"@doughazell  This is in capybara core as accept_alert (added in 2.4).  Drivers are in the process of adding support.
",twalpole,doughazell
27,2011-05-10 15:18:06,"@carlosantoniodasilva, just faced this same issue. out of curiosity, how did you work around it?
",mhfs,carlosantoniodasilva
27,2011-05-13 00:27:51,"@mhfs sorry, I really don't remember.. it's been some time since this issue, the code has changed a lot, and I'm not in the same project anymore. I'll try to check here if I can find sth and will let you know if I do.
",carlosantoniodasilva,mhfs
27,2011-05-13 14:05:02,"@carlosantoniodasilva np. thanks anyway. =)
",mhfs,carlosantoniodasilva
1845,2017-03-13 18:23:08,"After looking at this further, it may actually be Poltergeist and capybara-webkit that are producing the incorrect result here.  selenium-webdriver is following the webdriver spec which states that `title` is the title of the top level browsing context, not of the current browsing context.  

@route @mhoran  @jferris   Do any of you have any input on which should be the correct interpretation of `#title`",twalpole,mhoran
1845,2017-03-13 18:23:08,"After looking at this further, it may actually be Poltergeist and capybara-webkit that are producing the incorrect result here.  selenium-webdriver is following the webdriver spec which states that `title` is the title of the top level browsing context, not of the current browsing context.  

@route @mhoran  @jferris   Do any of you have any input on which should be the correct interpretation of `#title`",twalpole,route
1845,2017-03-13 18:23:08,"After looking at this further, it may actually be Poltergeist and capybara-webkit that are producing the incorrect result here.  selenium-webdriver is following the webdriver spec which states that `title` is the title of the top level browsing context, not of the current browsing context.  

@route @mhoran  @jferris   Do any of you have any input on which should be the correct interpretation of `#title`",twalpole,jferris
1844,2017-03-07 22:11:35,"@jferris @mhoran @jonleighton @route FYI: I plan to do a Capybara 2.13.0 within the next week or so. 

The only change that affects drivers currently is the expectation of the ability to return elements from evaluate_script.   For Poltergeist that ability is already in the master branch, and capybara-webkit has an open PR to support it.

The other major change (which doesn't affect drivers) is the addition of MiniTest assertions and expectations to provide parity with the support provided for RSpec.
",twalpole,jferris
1844,2017-03-07 22:11:35,"@jferris @mhoran @jonleighton @route FYI: I plan to do a Capybara 2.13.0 within the next week or so. 

The only change that affects drivers currently is the expectation of the ability to return elements from evaluate_script.   For Poltergeist that ability is already in the master branch, and capybara-webkit has an open PR to support it.

The other major change (which doesn't affect drivers) is the addition of MiniTest assertions and expectations to provide parity with the support provided for RSpec.
",twalpole,route
1844,2017-03-07 22:11:35,"@jferris @mhoran @jonleighton @route FYI: I plan to do a Capybara 2.13.0 within the next week or so. 

The only change that affects drivers currently is the expectation of the ability to return elements from evaluate_script.   For Poltergeist that ability is already in the master branch, and capybara-webkit has an open PR to support it.

The other major change (which doesn't affect drivers) is the addition of MiniTest assertions and expectations to provide parity with the support provided for RSpec.
",twalpole,jonleighton
1844,2017-03-07 22:11:35,"@jferris @mhoran @jonleighton @route FYI: I plan to do a Capybara 2.13.0 within the next week or so. 

The only change that affects drivers currently is the expectation of the ability to return elements from evaluate_script.   For Poltergeist that ability is already in the master branch, and capybara-webkit has an open PR to support it.

The other major change (which doesn't affect drivers) is the addition of MiniTest assertions and expectations to provide parity with the support provided for RSpec.
",twalpole,mhoran
1838,2017-02-24 12:29:06,"**Note:** This is for issues with Capybara.  If you have a howto type question, please ask on the mailing list as requested in the README: http://groups.google.com/group/ruby-capybara

## Meta
Capybara Version:
<!-- 2.7.0? -->
2.7.0
Driver Information (and browser if relevant):
<!--capybara-webkit -->
capybara-webkit 1.11.1
qt 5.0
qt5-webkit-common-5.6.2-alt0.M80P.1

## Expected Behavior
`fill_in('email', with: @user.email)` finds the input element

## Actual Behavior
`Capybara::ElementNotFound`

## Steps to reproduce
<!--
Please be sure to include the code that is creating the issue along with HTML the code is being run against
-->
the code:

",majioa,user
1827,2017-01-13 05:33:13,"When we experimented moving our suite to BrowserStack, `page.current_url` was often returning nil.

Calling `have_current_path` and `page.current_path` would raise:
`NoMethodError: undefined method 'path' for nil:NilClass`, with no intelligent waiting for BrowserStack to finally return a valid url.

This PR modified to only call those methods if the parsed URI is not nil. If it's nil, @actual_path remains nil.",dylanlive,actual
1827,2017-01-13 18:47:03,"Interesting, I've never seen Selenium return nil fro current_url when used with anything else, but this code doesn't complicate anything so I'm fine to add this.  

The tests are failing on the DSL portion (They are run against  DSL, rack_test and selenium) because during DSL testing @session isn't actually a Capybara::Session instance.  You should be able to mock using 

    allow_any_instance_of(Capybara::Session).to receive(:current_url) { nil }

and have it work.   Once you've fixed that please squash the commits and I'll go ahead and merge.

Thanks!",twalpole,session
1825,2017-01-03 22:18:55,@abotalov Have you come across this or do you have any ideas about the cause?,twalpole,abotalov
1823,2017-01-03 22:12:02,"@abotalov Can you think of any other style changes that would make sense for the default (true) option to make.  It could do things like make the position absolute and move the element to the top of the page, etc - but that might be going too far and better suited for people to specify as custom changes if needed.  I believe the majority of cases (of hidden file inputs) I see currently are just the field with opacity set to 0 and then overlayed over whatever element is being styled as the upload button.",twalpole,abotalov
1821,2017-01-03 00:08:38,"@jferris @mhoran @jonleighton @route FYI: I plan to do a Capybara 2.12.0 within the next week or two. Two changes that affect drivers are 

1. Optional driver support for simple argument passing to execute_script/evaluate_script (including page elements).
2. Session#switch_to_frame - requires the driver to support the Driver#switch_to_frame API

There were also some tests added around #disabled? behavior when field elements are inside disabled fieldsets.",twalpole,jferris
1821,2017-01-03 00:08:38,"@jferris @mhoran @jonleighton @route FYI: I plan to do a Capybara 2.12.0 within the next week or two. Two changes that affect drivers are 

1. Optional driver support for simple argument passing to execute_script/evaluate_script (including page elements).
2. Session#switch_to_frame - requires the driver to support the Driver#switch_to_frame API

There were also some tests added around #disabled? behavior when field elements are inside disabled fieldsets.",twalpole,route
1821,2017-01-03 00:08:38,"@jferris @mhoran @jonleighton @route FYI: I plan to do a Capybara 2.12.0 within the next week or two. Two changes that affect drivers are 

1. Optional driver support for simple argument passing to execute_script/evaluate_script (including page elements).
2. Session#switch_to_frame - requires the driver to support the Driver#switch_to_frame API

There were also some tests added around #disabled? behavior when field elements are inside disabled fieldsets.",twalpole,jonleighton
1821,2017-01-03 00:08:38,"@jferris @mhoran @jonleighton @route FYI: I plan to do a Capybara 2.12.0 within the next week or two. Two changes that affect drivers are 

1. Optional driver support for simple argument passing to execute_script/evaluate_script (including page elements).
2. Session#switch_to_frame - requires the driver to support the Driver#switch_to_frame API

There were also some tests added around #disabled? behavior when field elements are inside disabled fieldsets.",twalpole,mhoran
1814,2017-01-05 21:09:32,"IMO this alone might be not a quiet good solution to the underlying issue.
User should be able to use both Capybara's and RSpec-Expectations APIs. `all`/`within` have useful implementations in both libraries.

Let's see what ways we have:
* User includes RSpec::Matchers after Capybara::DSL. Here we can:
  - Recommend to use `all` and `within` via a session object (page)
  - Add `within_element` method as alias for `within`. Also replace `all` with `find_all` / `within` with `within_element` in Capybara's docs. But `page.all` / `page.within` is not worse so this is too crazy.
* User includes Capybara::DSL after RSpec::Matchers. Here we can:
  - Recommend to alias `all` / `within` rspec matchers using `alias_matcher`. One may try to add these aliases into RSpec itself.
  - Implement blocks suggested in https://github.com/rspec/rspec-expectations/issues/820 in RSpec-Expectations and recommend to access shadowed rspec methods using such blocks
  - Advice to call `RSpec::Matchers::BuiltIn::All.new` instead of `all`

Regarding your point in https://github.com/rspec/rspec-expectations/pull/960:
`claim RSpec owns the within method name is ludicrous` - [one may say that its RSpec that owns the namespace](https://github.com/teamcapybara/capybara/issues/1396#issuecomment-57104345). I agree that it would have been better if RSpec had chosen names that don't collide with Capybara's methods. But now both libraries own their methods and can't just remove/rename them.

Going forward, I think it might be good [to have build checks for such clashes](https://github.com/teamcapybara/capybara/issues/1396#issuecomment-57098125) so there would be less chance of new colliding methods.

cc @JonRowe ",abotalov,JonRowe
1806,2016-12-16 02:20:01,"## Meta
'capybara', '~> 2.10', '>= 2.10.1'

Driver Information (and browser if relevant):
45.5.0 firefox ESR

## Expected Behavior
should able to select  hapus 
select 'hapus', :from => :toggle_action

I also have been try to use 

find('#toggle_action').click
sleep 2
find('#toggle_action').find(:xpath, 'option[2]').select_option
select('hapus')
find(:xpath, './/*[@id=""toggle_action""]/option[@value=""delete""]').click
select ""hapus"", :from => ""toggle_action""
sleep 1
within '#toggle_action' do
find('#toggle_action>option', :text => 'hapus').click
end
find('#toggle_action').click
select('hapus', :from => 'toggle_action')
select(""delete"")

find(item_id).select('hapus')

## Actual Behavior
Can't select 'hapus',  but step green 

## Steps to reproduce

![screenshot from 2016-12-16 09-18-43](https://cloud.githubusercontent.com/assets/19463315/21249466/ca69eba0-c370-11e6-9a72-3bb616c8a5db.png)


",LamhotJM,id
1806,2016-12-16 02:20:01,"## Meta
'capybara', '~> 2.10', '>= 2.10.1'

Driver Information (and browser if relevant):
45.5.0 firefox ESR

## Expected Behavior
should able to select  hapus 
select 'hapus', :from => :toggle_action

I also have been try to use 

find('#toggle_action').click
sleep 2
find('#toggle_action').find(:xpath, 'option[2]').select_option
select('hapus')
find(:xpath, './/*[@id=""toggle_action""]/option[@value=""delete""]').click
select ""hapus"", :from => ""toggle_action""
sleep 1
within '#toggle_action' do
find('#toggle_action>option', :text => 'hapus').click
end
find('#toggle_action').click
select('hapus', :from => 'toggle_action')
select(""delete"")

find(item_id).select('hapus')

## Actual Behavior
Can't select 'hapus',  but step green 

## Steps to reproduce

![screenshot from 2016-12-16 09-18-43](https://cloud.githubusercontent.com/assets/19463315/21249466/ca69eba0-c370-11e6-9a72-3bb616c8a5db.png)


",LamhotJM,value
1804,2016-12-14 12:44:56,"This commit injects the CSS as internal, and the images as Base64 allowing to have an HTML screenshot looking much better.

Regarding the code, I don't like to pass the session as parameter to the helper methods, but it was even worst to me to have those methods in the `Capybara::Session` class. I was tempted to create a `Capybara::HtmlTransformer` class which would embed this code and called from the `Capybara::Session`.

Can someone (@twalpole maybe?) tells me the way I should implement this better (if needed)?",zedtux,twalpole
1783,2016-11-03 12:03:43,"## Meta
Capybara Version:
2.10.1
Driver Information (and browser if relevant):
selenium-webdriver 3.0.0 with Chrome 54.0.2840.90

## Expected Behavior
Chrome should open the URL passed in at Session.visit()

## Actual Behavior
Chrome opens data:, and visit() fails

## Steps to reproduce
    @session = Capybara::Session.new(Capybara.current_driver)
    @session.visit <URL>
    # Chrome does not open the URL
",Logout22,session
1775,2016-10-13 16:51:28,"Potential fix for Issue #1773 - waiting for feedback from @dylanlive before merging
",twalpole,dylanlive
1774,2016-10-13 02:29:20,"Potential solution for #1773.

Upon quitting the browser, this catches a `Selenium::WebDriver::Error::UnknownError` exception, which is raised when there is a server-side issue communicating with the browser.

If the remote browser session is terminated for a server-side reason, Capybara will be able to assign `@browser` to nil upon quitting.
",dylanlive,browser
1759,2016-09-13 18:03:49,"@jferris @mhoran @jonleighton @route  FYI: I plan to do a Capybara 2.9.0 release end of this week/beginning of next - There should be no changes that affect drivers.
",twalpole,jferris
1759,2016-09-13 18:03:49,"@jferris @mhoran @jonleighton @route  FYI: I plan to do a Capybara 2.9.0 release end of this week/beginning of next - There should be no changes that affect drivers.
",twalpole,route
1759,2016-09-13 18:03:49,"@jferris @mhoran @jonleighton @route  FYI: I plan to do a Capybara 2.9.0 release end of this week/beginning of next - There should be no changes that affect drivers.
",twalpole,jonleighton
1759,2016-09-13 18:03:49,"@jferris @mhoran @jonleighton @route  FYI: I plan to do a Capybara 2.9.0 release end of this week/beginning of next - There should be no changes that affect drivers.
",twalpole,mhoran
1753,2016-09-09 13:56:10,"my app has many tables, so the truncation strategy is taking longer and longer to execute. with close to 800 cucumber scenarios. that's a lot of DB cleaning happening in between. for often a few rows.

so I am told the transaction strategy should be much faster.

but most of my cucumber scenarios are tagged `@javascript` which spawn a different thread and so I am using a connection pool, hack that I found https://gist.github.com/mperham/3049152

Here is the patch to my application that I am using

https://gist.github.com/mathieujobin/024209d11f7613d969680b37c41ceeb4

But I am getting this error for every scenarios

`Mysql2::Error: SAVEPOINT active_record_1 does not exist: ROLLBACK TO SAVEPOINT active_record_1 (ActiveRecord::StatementInvalid)`

Although I have this option disabled as well

`Cucumber::Rails::World.use_transactional_fixtures = false`

any hints? anything Capybara could do to make this easier?
",mathieujobin,javascript
1724,2016-07-22 16:32:03,"Duplicate of Issue #1723  - @Fahrenhei7 What was your configuration mistake?
",twalpole,Fahrenhei7
1723,2016-07-19 19:59:47,"@Fahrenhei7 Show an example test that gives this this error.
",twalpole,Fahrenhei7
1723,2016-07-20 05:29:31,"@Fahrenhei7 Not sure what to tell you -- `background` and `given` are aliases that are set up in rspec/capybara/features.rb which is required by capybara/rspec - https://github.com/jnicklas/capybara/blob/master/lib/capybara/rspec/features.rb#L3

There are set up via a shared_context that is applied to any test that has the metadata capybara_feature: true.  That metadata is set when you use `feature` which is defined in the same file.  I have no idea how your usage of `feature` was working without including capybara/rspec  unless you have overrides of your own.
",twalpole,Fahrenhei7
1722,2016-07-15 19:33:06,"This changes the expected frame api for drivers from `within_frame` to `switch_to_frame` accepting either the frame elment, :parent, or :top to switch to the given frame, the parent frame, or the outermost frame.   

@jferris @mhoran @jonleighton @route  Please give your thoughts?  I'd like to make this change in Capybara 2.8, however if there are reasons this couldn't be implemented relatively quickly in any drivers I may have to reconsider.  Note this only changes the driver API not the user `within_frame` API which will continue to accept index, id/name, or an element.  Once the drivers have implemented the new method we can possibly look at improving the user facing API as discussed in Issue #1365 in a future Capybara release
",twalpole,jferris
1722,2016-07-15 19:33:06,"This changes the expected frame api for drivers from `within_frame` to `switch_to_frame` accepting either the frame elment, :parent, or :top to switch to the given frame, the parent frame, or the outermost frame.   

@jferris @mhoran @jonleighton @route  Please give your thoughts?  I'd like to make this change in Capybara 2.8, however if there are reasons this couldn't be implemented relatively quickly in any drivers I may have to reconsider.  Note this only changes the driver API not the user `within_frame` API which will continue to accept index, id/name, or an element.  Once the drivers have implemented the new method we can possibly look at improving the user facing API as discussed in Issue #1365 in a future Capybara release
",twalpole,route
1722,2016-07-15 19:33:06,"This changes the expected frame api for drivers from `within_frame` to `switch_to_frame` accepting either the frame elment, :parent, or :top to switch to the given frame, the parent frame, or the outermost frame.   

@jferris @mhoran @jonleighton @route  Please give your thoughts?  I'd like to make this change in Capybara 2.8, however if there are reasons this couldn't be implemented relatively quickly in any drivers I may have to reconsider.  Note this only changes the driver API not the user `within_frame` API which will continue to accept index, id/name, or an element.  Once the drivers have implemented the new method we can possibly look at improving the user facing API as discussed in Issue #1365 in a future Capybara release
",twalpole,jonleighton
1722,2016-07-15 19:33:06,"This changes the expected frame api for drivers from `within_frame` to `switch_to_frame` accepting either the frame elment, :parent, or :top to switch to the given frame, the parent frame, or the outermost frame.   

@jferris @mhoran @jonleighton @route  Please give your thoughts?  I'd like to make this change in Capybara 2.8, however if there are reasons this couldn't be implemented relatively quickly in any drivers I may have to reconsider.  Note this only changes the driver API not the user `within_frame` API which will continue to accept index, id/name, or an element.  Once the drivers have implemented the new method we can possibly look at improving the user facing API as discussed in Issue #1365 in a future Capybara release
",twalpole,mhoran
1721,2016-07-14 00:46:53,"@jferris @mhoran @jonleighton @route Heads up - I plan to release Capybara 2.8.0 some time next week.  The only real changes are for ease of usability Capybara will now attempt to click on the labels of checkboxes/radio-buttons if the checksbox/radio button is non-visible, and removal of the need to pass a nil to most node action when a selector is not wanted.  Currently poltergeist is passing all the 2.8.0 tests, however capybara-webkit is failing one that was added for an issue that came up.  There is already an open issue about this behavior in capybara-webkit - https://github.com/thoughtbot/capybara-webkit/issues/365
",twalpole,jferris
1721,2016-07-14 00:46:53,"@jferris @mhoran @jonleighton @route Heads up - I plan to release Capybara 2.8.0 some time next week.  The only real changes are for ease of usability Capybara will now attempt to click on the labels of checkboxes/radio-buttons if the checksbox/radio button is non-visible, and removal of the need to pass a nil to most node action when a selector is not wanted.  Currently poltergeist is passing all the 2.8.0 tests, however capybara-webkit is failing one that was added for an issue that came up.  There is already an open issue about this behavior in capybara-webkit - https://github.com/thoughtbot/capybara-webkit/issues/365
",twalpole,route
1721,2016-07-14 00:46:53,"@jferris @mhoran @jonleighton @route Heads up - I plan to release Capybara 2.8.0 some time next week.  The only real changes are for ease of usability Capybara will now attempt to click on the labels of checkboxes/radio-buttons if the checksbox/radio button is non-visible, and removal of the need to pass a nil to most node action when a selector is not wanted.  Currently poltergeist is passing all the 2.8.0 tests, however capybara-webkit is failing one that was added for an issue that came up.  There is already an open issue about this behavior in capybara-webkit - https://github.com/thoughtbot/capybara-webkit/issues/365
",twalpole,jonleighton
1721,2016-07-14 00:46:53,"@jferris @mhoran @jonleighton @route Heads up - I plan to release Capybara 2.8.0 some time next week.  The only real changes are for ease of usability Capybara will now attempt to click on the labels of checkboxes/radio-buttons if the checksbox/radio button is non-visible, and removal of the need to pass a nil to most node action when a selector is not wanted.  Currently poltergeist is passing all the 2.8.0 tests, however capybara-webkit is failing one that was added for an issue that came up.  There is already an open issue about this behavior in capybara-webkit - https://github.com/thoughtbot/capybara-webkit/issues/365
",twalpole,mhoran
1721,2016-07-29 00:29:54,"If @jferris doesn't get to this tomorrow, I hope to have some time over the weekend to look into it.
",mhoran,jferris
1715,2016-06-30 21:31:20,"@reidcooper @jasonfb :mountain_railway:
",jasonfb,reidcooper
1713,2016-06-17 17:54:58,"When running the following script:



I can see from the command line that the thin server has booted. I can also manually visit the URL and it works.

Error:



Gem version: 2.7.1
Ruby version: 2.3.1
Thin Version: 1.7.0

From what I can tell, inside Capybara::Server, the `@server_thread.join(0)` always returns false. This is used to determine if the server is `responsive?`
",stevebooks,server
1710,2017-01-30 08:08:24,"@mrjlynch - it works just fine unless you need more complicated keyboard/mouse interactions. That part of the spec was recently agreed on and Mozilla is working hard to finish that implementation.

Oh, and I thought I'd already released all of the important updates. I'll get selenium-webdriver 3.0.6 out soon with the system prompt modal fix; sorry for that delay.",titusfortner,mrjlynch
1710,2017-02-03 04:32:52,"@mrjlynch  You need to specify :chrome for the browser, and install chromedriver.  The only features that currently fail with Capybara and the newest version of selenium-webdriver with the newest version of FF  are

1.  system prompt modals  -  fixed in the master branch of selenium, will be in the next release
2. mouse interaction more than a standard left click - as @titusfortner mentioned it's coming alone
3. complex sets of characters including modifier keys being sent to elements - the spec has been finalized and as soon as geckodriver matches that spec it should be ok.
4. A recently discovered one that only affects Capybara master - equality with elements returned from `evaluate_script` - being worked on currently, would expect it to be fixed in the next selenium-webdriver release",twalpole,mrjlynch
1709,2016-07-27 05:47:26,"@ZigmaZigmax  The errors you are getting are coming from selenium-webdriver and nothing to do with Capybara.  Capybaras own tests run with selenium-webdriver 2.53.4 and Firefox 47.0.1 without issue, so I would suggest making sure you are actually running FF 47.0.1 and that you don't have any hung processes hanging onto ports.  If both of those are fine check out the issue reports at the selenium project on github.
",twalpole,ZigmaZigmax
1697,2016-05-09 15:32:00,"Unfortunately the current way of doing this is prone to race conditions. See #1696. Selenium does not provide any API to check if a modal is open, and simply trying to close it and catching the error is very, very slow on Firefox. One quirk though is that Selenium returns the text of any open modal as the return value of `navigate.to`. Why? I have no idea. Is this even an official/intentional API? I don't know. (Maybe @jarib knows?). So it turns out that the fastest way of safely navigating away from a page and catching any alerts caused by this is by checking that the return value of `navigate.to` is neither `""""` nor `nil` (the behaviour seems to differ between selenium drivers). I've checked that this works with Chrome, Firefox and IE via the remote driver at least.

Honestly I'm not sure if this is the right way of solving this, but I'm kind of out of other ideas.
",jnicklas,jarib
1674,2016-04-05 00:04:45,"@jferris @mhoran @jonleighton @route  Heads up - I plan to release Capybara 2.7.0 in the next few days.  

I believe the only changes that are relevant for drivers are the deprecation of #browser_initialized from the driver public API, and the requirement that Driver#reset! now be synchronous.  Tests were added for this behavior and both capybara-webkit and poltergeist appear to pass, so no updates should be needed.  

The biggest change from a driver maintenance perspective is the middleware added to the server instance Capybara starts.  This tracks open requests and will hopefully prevent requests continuing in the server after session resets/during database clearing and reduce the issue reports filed because of this.
",twalpole,jferris
1674,2016-04-05 00:04:45,"@jferris @mhoran @jonleighton @route  Heads up - I plan to release Capybara 2.7.0 in the next few days.  

I believe the only changes that are relevant for drivers are the deprecation of #browser_initialized from the driver public API, and the requirement that Driver#reset! now be synchronous.  Tests were added for this behavior and both capybara-webkit and poltergeist appear to pass, so no updates should be needed.  

The biggest change from a driver maintenance perspective is the middleware added to the server instance Capybara starts.  This tracks open requests and will hopefully prevent requests continuing in the server after session resets/during database clearing and reduce the issue reports filed because of this.
",twalpole,route
1674,2016-04-05 00:04:45,"@jferris @mhoran @jonleighton @route  Heads up - I plan to release Capybara 2.7.0 in the next few days.  

I believe the only changes that are relevant for drivers are the deprecation of #browser_initialized from the driver public API, and the requirement that Driver#reset! now be synchronous.  Tests were added for this behavior and both capybara-webkit and poltergeist appear to pass, so no updates should be needed.  

The biggest change from a driver maintenance perspective is the middleware added to the server instance Capybara starts.  This tracks open requests and will hopefully prevent requests continuing in the server after session resets/during database clearing and reduce the issue reports filed because of this.
",twalpole,jonleighton
1674,2016-04-05 00:04:45,"@jferris @mhoran @jonleighton @route  Heads up - I plan to release Capybara 2.7.0 in the next few days.  

I believe the only changes that are relevant for drivers are the deprecation of #browser_initialized from the driver public API, and the requirement that Driver#reset! now be synchronous.  Tests were added for this behavior and both capybara-webkit and poltergeist appear to pass, so no updates should be needed.  

The biggest change from a driver maintenance perspective is the middleware added to the server instance Capybara starts.  This tracks open requests and will hopefully prevent requests continuing in the server after session resets/during database clearing and reduce the issue reports filed because of this.
",twalpole,mhoran
1670,2016-03-30 22:20:13,"@mhoran @route @jonleighton @jferris  Is reset! in your drivers currently synchronous, if not is it something that could be easily implemented?
",twalpole,mhoran
1670,2016-03-30 22:20:13,"@mhoran @route @jonleighton @jferris  Is reset! in your drivers currently synchronous, if not is it something that could be easily implemented?
",twalpole,route
1670,2016-03-30 22:20:13,"@mhoran @route @jonleighton @jferris  Is reset! in your drivers currently synchronous, if not is it something that could be easily implemented?
",twalpole,jonleighton
1670,2016-03-30 22:20:13,"@mhoran @route @jonleighton @jferris  Is reset! in your drivers currently synchronous, if not is it something that could be easily implemented?
",twalpole,jferris
1667,2016-03-18 21:58:32,"https://github.com/jnicklas/capybara/commit/89d00c4f0801a1d00f57c4bedb81c23b888e18df   - host (which over time became the server_host value) was specifically set to 127.0.0.1 many years ago  to ""prevents some issues"" .  I have no clue what those issues were, or if they would still be issues.  Other than that this makes sense to me - lets see if @jnicklas has any recollection of what the issues were? :)
",twalpole,jnicklas
1665,2016-03-17 00:07:25,"Hi @jnicklas, any thoughts on bringing this into the next release?  
",Tmee,jnicklas
1665,2016-03-17 00:26:07,"ah, sorry about the @mention jnicklas.  Ok, I noticed I was typing `all(...).last` a bunch and thought it would be nice to have a `last(...)` similar to the awesome `first(...)` finder.  But no worries, thanks for getting back to me!
",Tmee,mention
1662,2016-03-05 19:01:43,"Hi,

First off - I've been using capybara for a few years now and i love it.  So thanks for all the hard work.  :)

Feature request: `execute_script` should accept optional `*args` attribute.

Note: I'm more than happy to work on a pull request for this feature, but wanted to open an issue first to discuss to see if this had already been thought of and not implemented for some reason.

Use case: I am using site_prism as my page object model and sometimes I want to execute javascript on one of the selenium elements which I have in my object model.

So instead of writing:



I could write:



(where `@home.login_bar` is my site_prism element)

One reason I can come up with why capybara's execute_script only takes one argument, and selenium webdriver takes 2 arguments (js and elements), is that either of the other drivers (poltergiest, capybara-webkit) only support the one js argument.  But I haven't invested the time to see if it's possible in the other drivers under the covers or they just chose to leave it out in the public ruby api as well.

Right now I am simply doing:



But it would be more convenient if I didn't have to think about the interface difference.  And it took me a far amount of googling/experimentation to even get that to work, so I think capybara supporting it (even if for supported drivers) would be helpful to others.

Thanks,
Tom
",tommyh,home
1661,2016-03-01 09:34:53,"Hi @jnicklas 
I got  a module named `addressable` in `app/models/concerns`, to manage `addresses` `phones` and `faxes`. After I upgrade `capybara` to latest version, all my feature tests were failed. And failure message: 



I noticed version 2.6.2 is forced dependency on gem `addressable`, did it override my `Addressable` ? and what need I do?

Any thoughts? 
",cod7ce,jnicklas
1657,2016-02-23 13:21:28,"I have issue with testing uploading multiple files with `capybara` using `cocoon`. How can I find all fields with id: ""image"" and attach to each of them file?

I found some decision, but it don`t work:





Error: `Unable to find file field #<Capybara::Element tag=""input"" path=""/html/body/div/div/div/form[@id='new_post']/div[@id='educations']/div[1]/input[@id='image']"">`
",TeTiRoss,id
1642,2016-01-22 11:12:27,"Just a syntactic sugar method that would make RSpec expectations a little better to read.

Usage in RSpec would be:



Compared to the current available:



@twalpole 
",syndbg,twalpole
1634,2016-01-14 18:16:45,"@jferris @mhoran @jonleighton @route   -  Just a heads up that I plan to hopefully release Capybara 2.6 this coming weekend.  I don't believe there is anything that should affect driver authors, it's mainly to get released support for rack 2.0 (rails 5) in the rack_test driver.
",twalpole,jferris
1634,2016-01-14 18:16:45,"@jferris @mhoran @jonleighton @route   -  Just a heads up that I plan to hopefully release Capybara 2.6 this coming weekend.  I don't believe there is anything that should affect driver authors, it's mainly to get released support for rack 2.0 (rails 5) in the rack_test driver.
",twalpole,route
1634,2016-01-14 18:16:45,"@jferris @mhoran @jonleighton @route   -  Just a heads up that I plan to hopefully release Capybara 2.6 this coming weekend.  I don't believe there is anything that should affect driver authors, it's mainly to get released support for rack 2.0 (rails 5) in the rack_test driver.
",twalpole,jonleighton
1634,2016-01-14 18:16:45,"@jferris @mhoran @jonleighton @route   -  Just a heads up that I plan to hopefully release Capybara 2.6 this coming weekend.  I don't believe there is anything that should affect driver authors, it's mainly to get released support for rack 2.0 (rails 5) in the rack_test driver.
",twalpole,mhoran
1634,2016-01-17 23:52:31,"@jferris @mhoran @jonleighton @route - 2.6.0 is released
",twalpole,jferris
1634,2016-01-17 23:52:31,"@jferris @mhoran @jonleighton @route - 2.6.0 is released
",twalpole,jonleighton
1618,2015-12-03 07:28:06,"The page have header `<meta http-equiv=""Content-Type"" content=""text/html; charset=shift_jis"">`,  select tags



I want click  `<option value=""2"">2:株式会社ブレインテスト</option>`
but  is not working with code  `select('2:株式会社ブレインテスト',  from: 'sel01')` 
It is happen  errors  `Capybara::ElementNotFound: Unable to find option ""2:株式会社ブレインテスト""`

I using debug to see text  of  option tag '2:株式会社ブレインテスト'. 
This is capybara wrong encoding.  
`find(:xpath, ""//*[@id='sel01']/option[@value='2']"").text`  =>  ""2:譬ｪ蠑丈ｼ夂､ｾ繝悶Ξ繧､繝ｳ繝�せ繝�""

Help me ! 

I want  using  method #select(value, options = {})  
",vihc,id
1618,2015-12-03 07:28:06,"The page have header `<meta http-equiv=""Content-Type"" content=""text/html; charset=shift_jis"">`,  select tags



I want click  `<option value=""2"">2:株式会社ブレインテスト</option>`
but  is not working with code  `select('2:株式会社ブレインテスト',  from: 'sel01')` 
It is happen  errors  `Capybara::ElementNotFound: Unable to find option ""2:株式会社ブレインテスト""`

I using debug to see text  of  option tag '2:株式会社ブレインテスト'. 
This is capybara wrong encoding.  
`find(:xpath, ""//*[@id='sel01']/option[@value='2']"").text`  =>  ""2:譬ｪ蠑丈ｼ夂､ｾ繝悶Ξ繧､繝ｳ繝�せ繝�""

Help me ! 

I want  using  method #select(value, options = {})  
",vihc,value
1575,2015-09-19 03:56:59,"And right after I submit this I notice that @twalpole submitted the same thing earlier today. Oops. Well, here's another idea of how to approach it.
",jillianrosile,twalpole
1566,2015-08-21 19:55:32," @jferris @jonleighton @mhoran  @route  It's been a while since the last Capybara release and some of the features I wanted to add have been delayed (proxy support for selenium driver).  My current plan is to release the current set of updates as 2.5 in the next few days/week, and then do a 2.6 with the other planned updates in the next couple of months.   I don't think there is much in 2.5 that will affect your drivers other than Node#send_keys and that there is now a test for Node#path behavior.  If you have any concerns with the 2.5 release please let me know
",twalpole,jferris
1566,2015-08-21 19:55:32," @jferris @jonleighton @mhoran  @route  It's been a while since the last Capybara release and some of the features I wanted to add have been delayed (proxy support for selenium driver).  My current plan is to release the current set of updates as 2.5 in the next few days/week, and then do a 2.6 with the other planned updates in the next couple of months.   I don't think there is much in 2.5 that will affect your drivers other than Node#send_keys and that there is now a test for Node#path behavior.  If you have any concerns with the 2.5 release please let me know
",twalpole,route
1566,2015-08-21 19:55:32," @jferris @jonleighton @mhoran  @route  It's been a while since the last Capybara release and some of the features I wanted to add have been delayed (proxy support for selenium driver).  My current plan is to release the current set of updates as 2.5 in the next few days/week, and then do a 2.6 with the other planned updates in the next couple of months.   I don't think there is much in 2.5 that will affect your drivers other than Node#send_keys and that there is now a test for Node#path behavior.  If you have any concerns with the 2.5 release please let me know
",twalpole,jonleighton
1566,2015-08-21 19:55:32," @jferris @jonleighton @mhoran  @route  It's been a while since the last Capybara release and some of the features I wanted to add have been delayed (proxy support for selenium driver).  My current plan is to release the current set of updates as 2.5 in the next few days/week, and then do a 2.6 with the other planned updates in the next couple of months.   I don't think there is much in 2.5 that will affect your drivers other than Node#send_keys and that there is now a test for Node#path behavior.  If you have any concerns with the 2.5 release please let me know
",twalpole,mhoran
1547,2015-07-15 15:21:41,"Hi

 `capybara` uses a method `rspec` also uses: `all` - see [RSpec's documentation](https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/all-matcher) for more on this matcher. 

Unfortunately this is at least an issue  for all projects using `aruba` (> 0.8) together with `capybara` as it makes heavy use of `rspec-expectations` - e.g.`middleman` middleman/middleman#1562. Maybe this is even an issue for your own `rspec`-integration. It looks very similar to #1526.

Here's some code which breaks if both `aruba` and `capybara` are used. Though it's a problem of `capybara` plus `rspec-exectations` really from my point of view. @myronmarston @mattwynne Just a ping for you to know.

For now I don't see a way to work around this. Any suggestion is more than welcome. This code checks if all or none of the given strings are existing files. Unfortunately `all` should be used from `rspec` and not from `caypbara` in this context.



This code above now fails with:



Looking at the source of `~/.gem/ruby/2.2.2/gems/capybara-2.4.4/lib/capybara/dsl.rb` there seem to be some lines of code relevant here:



At `~/.gem/ruby/2.2.2/gems/capybara-2.4.4/lib/capybara/session.rb:24` you will find this:


",maxmeyer,mattwynne
1547,2015-07-15 15:21:41,"Hi

 `capybara` uses a method `rspec` also uses: `all` - see [RSpec's documentation](https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/all-matcher) for more on this matcher. 

Unfortunately this is at least an issue  for all projects using `aruba` (> 0.8) together with `capybara` as it makes heavy use of `rspec-expectations` - e.g.`middleman` middleman/middleman#1562. Maybe this is even an issue for your own `rspec`-integration. It looks very similar to #1526.

Here's some code which breaks if both `aruba` and `capybara` are used. Though it's a problem of `capybara` plus `rspec-exectations` really from my point of view. @myronmarston @mattwynne Just a ping for you to know.

For now I don't see a way to work around this. Any suggestion is more than welcome. This code checks if all or none of the given strings are existing files. Unfortunately `all` should be used from `rspec` and not from `caypbara` in this context.



This code above now fails with:



Looking at the source of `~/.gem/ruby/2.2.2/gems/capybara-2.4.4/lib/capybara/dsl.rb` there seem to be some lines of code relevant here:



At `~/.gem/ruby/2.2.2/gems/capybara-2.4.4/lib/capybara/session.rb:24` you will find this:


",maxmeyer,myronmarston
1537,2015-06-17 09:11:09,"Hi there,

I came across a blocker wherein i have to perform the click operation on an image (with an id), i tried xpath & css to locate this element and have failed to do it so far

Snippet of the source in the web page:
<img id=""j_idt60:j_idt61:pdo"" style=""cursor:pointer;padding-right:4px;"" onclick=""document.getElementById('j_idt60:j_idt61:regionViewExportPDO').exportData();showMessageAfterDownload();"" src=""/vendor-customer-csll-gui-1.2-SNAPSHOT/javax.faces.resource/PDO.png.html?ln=images""/>

What was attempted and error thrown: (at option #3 - not sure how to avoid extra backspace ""\"" being added on the run?)

Option #1: page.find(:xpath, "".//_[@id='j_idt60:j_idt61:pdo']"").click
-- Capybara::ElementNotFound: Unable to find xpath "".//_[@id='j_idt60:j_idt61:pdo']""

Option #2: page.find(:xpath, "".//_[@id='j_idt60:j_idt61:pdo']"").click
-- Capybara::ElementNotFound: Unable to find xpath "".//_[@id='j_idt60:j_idt61:pdo']""

Option #3: find(:css, '#j_idt60:j_idt61:pdo').click
--Capybara::ElementNotFound: Unable to find css ""#j_idt60\:j_idt61\:pdo""

Option #4: find(:css, '#j_idt60:j_idt61:pdo').click
--Selenium::WebDriver::Error::InvalidElementStateError: invalid element state: Failed to execute 'querySelectorAll' on 'Document': '#j_idt60:j_idt61:pdo' is not a valid selector.

Can any one here share their thoughts on how to overcome this issue?

Thanks in advance
",ChinmayaTelstra,id
1527,2015-06-03 15:13:22,"@squeedee
",bebepeng,squeedee
1527,2015-06-03 18:47:30,"What driver are you using? and if selenium, which version?  (2.45 has a serious performance bug in it which can cause major test slowdowns - unfortunately 2.46 has not been released).  So having 250 option nodes, each of which has to be queried for whether or not it's selected could take some time, but it really shouldn't be 20 seconds, although with the 2.45 performance issue in selenium maybe it would.  Unfortunately we can't change the query to  './/option[@selected]' since xpath only queries against the attributes in the document, not the properties - this means that if a selection is changed after the document is loaded the results of the xpath query would not be correct.  Technically it could be possible to swap to a css query of  'option:checked' which would be evaluated against properties but that then brings up browser support issues.
",twalpole,selected
1527,2015-06-05 19:16:02,"@bebeng Would it be possible for you to run it using the selected_optimization branch and see what the time is then please?
",twalpole,bebeng
1524,2015-05-26 14:31:40,"We have some inlined SVGs with a title tag and the value of `page.title` is the concatenation of the real page title and of the svg title.

cc @masterkain

Don't know xpath enough but maybe the problem lies in this query:



**update: added svg example**


",elia,masterkain
1518,2015-05-22 22:11:36,"@lazytester - looking at this some more and doing a bit of reading of the docs for selenium-webdriver -  I think you should actually be keeping your test files on the local machine, and setting the file detector on the remote driver.  By doing that selenium-webdriver is supposed to find the local file and upload it to the remote test machine - if that does actually work then Capybara checking for file presence makes sense.
",twalpole,lazytester
1510,2015-04-23 20:51:50,"Correct - have_link doesn't accept regex for the :href option, nor is it documented anywhere to. From the docs for click_link which uses the same selector as have_link - 

# @option options [String] :href    The value the href attribute must equal

If instead you're saying you would like to see this functionality expanded to allow for using regexps then fully tested PRs are always considered.
",twalpole,option
1508,2015-04-24 18:02:29,"@mhoran @jferris @route @jonleighton I'm working on adding whitelisting of urls to the selenium driver using browsermob_proxy - and was wondering whether the proxy is something that would be of use to other drivers, or to just hide it all inside the selenium driver - feedback appreciated
",twalpole,mhoran
1508,2015-04-24 18:02:29,"@mhoran @jferris @route @jonleighton I'm working on adding whitelisting of urls to the selenium driver using browsermob_proxy - and was wondering whether the proxy is something that would be of use to other drivers, or to just hide it all inside the selenium driver - feedback appreciated
",twalpole,route
1508,2015-04-24 18:02:29,"@mhoran @jferris @route @jonleighton I'm working on adding whitelisting of urls to the selenium driver using browsermob_proxy - and was wondering whether the proxy is something that would be of use to other drivers, or to just hide it all inside the selenium driver - feedback appreciated
",twalpole,jonleighton
1508,2015-04-24 18:02:29,"@mhoran @jferris @route @jonleighton I'm working on adding whitelisting of urls to the selenium driver using browsermob_proxy - and was wondering whether the proxy is something that would be of use to other drivers, or to just hide it all inside the selenium driver - feedback appreciated
",twalpole,jferris
1502,2015-04-16 18:17:05,"@abotalov thanks for the review - Fix for those comments coming shortly
",twalpole,abotalov
1498,2015-04-08 16:46:03,"IIRC the performance hit (especially with chrome) was enough to make Capybara basically unusable so we won't be changing the default currently.  Issue #1319 and PR #1338 were where the need for fill_options was discussed and @sobrinho was the person initially requesting for poltergeist.  I'm not sure if it was ever used in poltergeist or not.  I would be open to a pull request that implements multiple clear methods for selenium and potentially a setting that will allow changing the default option (as long as its default is the current behavior)
",twalpole,sobrinho
1498,2015-04-08 16:52:31,"as @abotalov mentioned it would probably be nice to have a :none option for clear too thereby allowing for appending to existing content, it might also be nice to accept an array of keystrokes so I could pass [[:command, 'A'], :backspace], as my clear method and those keystrokes would just get forwarded on to send_keys
",twalpole,abotalov
1493,2015-03-17 20:12:37,"@abotalov You did a great job getting this passing originally with the awesome window manager.  Any chance you have time to look at it again and see if you can figure out what has changed that is causing it to fail with firefox every time (I believe it passes with chrome).  I have marked the test as pending for the firefox/travis combo currently.
",twalpole,abotalov
1472,2015-01-23 21:17:37,"Implementation of item discussed in Issue #1459  -  @jferris @jonleighton @mhoran Thoughts on implementing this in your drivers for Capybara 2.5 ?
",twalpole,jferris
1472,2015-01-23 21:17:37,"Implementation of item discussed in Issue #1459  -  @jferris @jonleighton @mhoran Thoughts on implementing this in your drivers for Capybara 2.5 ?
",twalpole,jonleighton
1472,2015-01-23 21:17:37,"Implementation of item discussed in Issue #1459  -  @jferris @jonleighton @mhoran Thoughts on implementing this in your drivers for Capybara 2.5 ?
",twalpole,mhoran
1468,2015-01-20 07:43:00,"require ""spec_helper""

require ""rails_helper""

include Capybara::RSpecMatchers

include Capybara::DSL

Capybara.javascript_driver = :webkit

feature ""Course"", :type => :feature do

scenario ""Get index and apply different search filters for course types"", js: true do

visit ""/courses""

within(""//body"") do

find(:xpath, ""//input[@id='course_type_id_1']"").click

find(:xpath, ""//div[@class='course-right-sec']"")

expect(page).to have_content('65,171 courses')

expect(page).to have_content('Fundamentals of Design')

end

end

end

The problem i am facing with the above code is that when i find a specific div with a respective class inside a within block, whether the div with that class exists or not, the test passes in any case. Any help on this issue?
",hassanabbas901,id
1468,2015-01-20 07:43:00,"require ""spec_helper""

require ""rails_helper""

include Capybara::RSpecMatchers

include Capybara::DSL

Capybara.javascript_driver = :webkit

feature ""Course"", :type => :feature do

scenario ""Get index and apply different search filters for course types"", js: true do

visit ""/courses""

within(""//body"") do

find(:xpath, ""//input[@id='course_type_id_1']"").click

find(:xpath, ""//div[@class='course-right-sec']"")

expect(page).to have_content('65,171 courses')

expect(page).to have_content('Fundamentals of Design')

end

end

end

The problem i am facing with the above code is that when i find a specific div with a respective class inside a within block, whether the div with that class exists or not, the test passes in any case. Any help on this issue?
",hassanabbas901,class
1466,2015-01-18 13:09:28,"### jnicklas/capybara now has a Chat Room on Gitter

@abotalov has just created a chat room. You can visit it here: [https://gitter.im/jnicklas/capybara](https://gitter.im/jnicklas/capybara?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).

This pull-request adds this badge to your README.md:

[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jnicklas/capybara?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

Happy chatting.

PS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.
",gitter-badger,abotalov
1465,2015-01-19 19:37:59,"See:
https://github.com/calagator/calagator/commit/87169d023b7143d21d3cd399158dbd97a7ac0579
https://github.com/teampoltergeist/poltergeist/pull/499#issuecomment-54663015

After some search in travis-build/travis-build I found that first commit that added `--jobs=3` is probably this one - https://github.com/travis-ci/travis-build/commit/6cb7c4d8c0f9b89b7d95b46ef1174cb327dc1538 and current implementation seems to be here (https://github.com/travis-ci/travis-build/blob/a9f5fe32fffb4d4ceee2062770c7c50aa3098d3a/lib/travis/build/script/shared/bundler.rb). Though I don't know Travis structure, I've just searched through it.

So travis-build sets `--jobs=3` without checking for BUNDLE_JOBS env variable. Probably this is a bug  in Travis but I think `--jobs=3` is fine for us.

cc @joshk
",abotalov,joshk
1463,2015-01-24 22:26:28,"> 1. Its not clear to me why add_selector would be deprecated, or what register_selector_kind would be for.

I played around with code and decided that there's no need to deprecate it and add `register_selector_kind`. Only element type - related methods (`label`, `filter`, `description`, `describe`) will be deprecated by adding `@deprecated` YARD tag (and probably adding `warn`).

> 1. Would you see this being implemented via changes to the xpath gem, or strictly in capybara.

XPath/css selectors needed for `:href` or `:name` are very simple so it doesn't make sense to extract them to xpath gem. If there would be complex enough selectors, probably I'll try to make a change in xpath gem.

> 1. If :type isn't checking elements tags isn't this opening users up to even more difficult to debug issues?

I believe `:element` shouldn't be used for checking element tags as:
1. L&F of HTML element can be significantly changed from standard.
2. It would complicate implementation (we have to merge it into css/xpath selectors)
3. I don't think an idea to merge a tag name into css/xpath selector is a good one. I wouldn't expect Capybara to do it. Probably it makes sense to merge it into selectors like `:id` but I would vote for selectors to be consistent here.
4. That would separate responsibilities of element type and selector.

I have been implementing this feature and there's an issue with behavior of `Capybara.add_selector` if selector/element type with that name was already registered. There are two options:
1. When it's invoked, replace existing Selector with Selector created from supplied block + replace ElementType with created from the supplied block
2. When it's invoked, replace existing Selector with Selector created from supplied block + instance_eval block in scope of existing ElementType

Option 1 will be fully compatible with existing behavior of `add_selector`. But in this case it would be impossible to add selector without not-deregistering element type. Users of 2.x versions will have to invoke `add_selector` prior to `register_element_type`. If `filter`, `label`, etc. will be removed in 3.0 from `Selector`, there will be no need to do anything with ElementType from Selector so there will be no this limitation.

Option 2 will break the following use case:



I would prefer option 1 as limitation will exist only until 3.0. Do you agree?

Also the option will be named `:element` as `:type` is already used by `:field` selector.
",abotalov,deprecated
1463,2015-01-26 19:26:31,"> I don't understand why we would be deprecating anything for this change.

I want to give users ability to write:



To make it possible custom filters like `:with` should be part of ElementType, not Selector. Therefore, I'd like to remove this ability from Selector (in future) so it won't be duplicated in two places. If `:element` isn't supplied, then it's set to `@selector.name`.
",abotalov,selector
1459,2015-01-14 18:33:59,"@jferris @jonleighton @mhoran  - any thoughts on supporting a unified definition/mapping for special keys?
",twalpole,jferris
1459,2015-01-14 18:33:59,"@jferris @jonleighton @mhoran  - any thoughts on supporting a unified definition/mapping for special keys?
",twalpole,jonleighton
1459,2015-01-14 18:33:59,"@jferris @jonleighton @mhoran  - any thoughts on supporting a unified definition/mapping for special keys?
",twalpole,mhoran
1454,2014-12-11 07:55:11,"@madleech perhaps this is of interest to you.
",ioquatix,madleech
1449,2014-12-03 16:27:14,"As per https://github.com/thoughtbot/capybara-webkit/issues/691#issuecomment-65437734, I would like to suggest a new API for downloading files using Capybara.

Currently, I use Selenium Firefox with specific Firefox profile settings, to download files from links, to a specific directory. However, I find that I have to swap between Webkit and Selenium too often, that I'd like to be able to use Capybara Webkit exclusively.

Is it possible as per @jferris comment to provide some form of an API from Capybara for downloading files?
",nritholtz,jferris
1443,2014-11-21 20:23:10,"We primarily use :webkit for testing with cucumber.  With a recent change, we are using javascript on virtually every page and the use of `@javascript` everywhere is annoying at best, as we go through long test runs only to find yet another place where a new test was added but forgot the tag.  

To attempt to default this, I tried using an `Around` hook for the most control, but found that the `capybara/cucumber.rb` `Before` hook was calling `Capybara.use_default_driver` after I had set things up as expected.  To solve the order of execution issue, I took the code from that file for `Before '@javascript'` and added it to my own support file like:



Given my logging, I can see this combination with `@javascript`.  Here's a snip of the log:



Unfortunately, when I omit `@javascript`, here is the same log snippet:



The feature runs several steps in, but fails on 



The error is legitimate and the screenshot confirms the error.  Digging a bit into the server side, it finds a null value when it attempts to lookup the tenant, which is an entity seeded in the test background and cleaned up after by `database_cleaner`.  It seems to me that the way I'm setting it up still has problems, and at some point it needs the `rack_test` driver activated to find my tenant record.

I've searched both the Capybara codebase and Cucumber codebase for references to `@javascript`, and only found the code it `capybara/cucumber.rb`, which it appears by the logging that I have successfully overridden, but yet it still fails.

What else would be necessary to completely default the javascript driver to webkit without having to tag every scenario as `@javascript`?
",rosskevin,javascript
1443,2014-11-21 21:03:32,"Capybara.default_driver = :webkit
DatabaseCleaner.strategy = :truncation

is all that should be required to have capybara default to using the webkit driver without needing to specify @javascript everywhere
In the future please ask how to questions in the mailing list as requested in the README
",twalpole,javascript
1435,2014-11-03 15:00:46,"Hello! I've found that across many test suites a lot of extra time is spent when synchronized methods are used improperly. For example, you want to test if a selector is on the page in order to take a different action. Consider:



If the person is signed in, it signs them out quickly. However, if they are signed out, this will wait the full Capybara wait time before failing the if.

This is a newbie mistake, and I was hoping to add some warnings to it as a potential aid.

The relevant line is here:

https://github.com/jnicklas/capybara/blob/master/lib/capybara/node/base.rb#L89

I am very happy to implement this feature with tests. I am looking for guidance on the following things:
1. Would this be accepted?
2. Is there a way you would like it implemented?

Thanks!
- @ngauthier
",ngauthier,ngauthier
1433,2014-10-29 13:01:16," HTML code for Issue Slip:

<%= simple_nested_form_for @issue_slip do |f| %>
  <%= f.error_messages %>

  <p>
  <%= f.hidden_field :user_id, :value => current_user.id %>
  <b>From Store:</b></br>

<%= f.label :store_location_id %>
   <% if !current_user.store_location_id? %>
    <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, {:prompt => ""Select Store""}, :style => 'width:205px;' %><br />
  <% else %>
  <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, :value => current_user.store_location_id %><br/>
  <% end %>
 <b>Delivery To:</b></br>
<% if @count == nil %> 

<div class = ""shop_floors"">
<%= f.label :shop_floor_id %>
<%= f.collection_select :shop_floor_id, ShopFloor.all,:id,:name, {:prompt => ""-Select a Shopfloor""}, :style=>'width:150px;'%></div><br/>
<% else %>
<strong><%= f.label :shop_floor_id %>:<%= @issue_slip.shop_floor.name %></strong><br /><% end %>
<div class =""date"">
 <%= f.label :date, ""Date"" %>
 <%= f.datepicker :date, :dateFormat => 'dd MM, yy',  :showOn => ""both"", :buttonImage => ""/assets/calendar.gif"", :buttonImageOnly => true, :changeMonth => true, :changeYear => true , :size =>20 %><br/></div>
<%= f.label :project_id %>
<%= f.text_field :project_id , :size => 20 %><br />
<%= f.label :employee_id, ""Issued. By"" %>
<% if !current_user.employee_id? %>
<%= f.collection_select :employee_id, Employee.all,:id,:name, {:prompt => ""Select Employee""}, :style => 'width:205px;' %><br />
 <% else %>
 <%= f.collection_select :employee_id, Employee.find_all_by_user_id(current_user.id), :id, :name %><br/>
 <% end %>
<%= f.input :remarks, :label => 'Remarks', :input_html => { :size => 20} %><br/>
 <%= f.label :bom_quantity %>
 <%= f.text_field :bom_quantity, :size=> 20, :value => number_with_precision(f.object.bom_quantity , :precision => 3) %><br />
 <div class = ""cust_order"">
<%= f.label :customer_order_id %>
<%= f.collection_select :customer_order_id , CustomerPendingOrder.all, :id,:id, :prompt => ""Select Customer Order"" %></div> <br />
<div class = ""bom"">
<%= f.label :bill_of_material_id %>
<%= f.collection_select :bill_of_material_id, BillOfMaterial.all, :id, :title , :prompt => ""Select a BOM"", :style => 'width:205px;' %></div>
<div class=""load_bom""><%= f.submit ""Load BOM"" %></div> <br/>  
 <hr>
  <%= f.fields_for :issue_slip_line_items do |builder| %>
  <%= render 'issue_slip_line_item_fields', :f => builder %>
   <%end%>
 <p><%= f.link_to_add ""Add Product"", :issue_slip_line_items %> </p>   
<p><%= f.submit data: {:disable_with=>@submit_tag_label}%><div class=""load_preview_issue_slip""><%= f.submit ""preview"", :style => 'width:130px;', data: {:disable_with=>""loading preview...""} %></div></p>
  <% end %> 
</p>

Issue slip line item:
 
<%= f.link_to_remove ""Remove Product""%><br/>
<div class =""product"">
  <%= f.association :product, :prompt =>""Select Product"",  input_html: {data:{prices: prices}}, :collection => Product.in_stock %> </div>
        <%= image_tag :image , :class => ""prodimage""%>
<div class = ""productid"">
 <%= f.hidden_field :product_id, :class=>""productid"" %></div>
<br/>
<div class =""price""><%= f.label :price %><%= f.text_field :price, :size=>20, :value => number_with_precision(f.object.price, :precision => 2)%> </div><br/>
<div class = ""qty"">  
<%= f.label :quantity, ""Quantity""%>
<%= f.text_field :quantity, :size=>20 , :value => number_with_precision(f.object.quantity, :precision => 3)%></div><br/>
 <%= f.label :amount %>
 <%= f.text_field :amount, :size=>20,:class =>""amt"", :value => number_with_precision(f.object.amount, :precision => 2) %><br/>
<!--%= f.label :customs_duty, ""Custom Duty""%-->
 <!--%= f.text_field :customs_duty, :size=>20 %-->
</div>

 <hr/> 

test case for issue slip:

it ""issue slips test"", :js => true do
    click_link 'New Issue Slip'
    select('Inuit HAL', :from => 'Store location')
    expect{ page.should have_content 'New Issue Slip'}
    expect{ page.should have_content 'From Store'}
    expect{ page.should have_content 'Delivery To'}
    select('sample shopfloor', :from => 'Shop floor')
    expect{ page.should have_content 'Shop floor '}
    fill_in ""Date"", :with => ""06 October, 2014""
    fill_in ""Project"", :with => ""1993""
    select('Sample Employee', :from => 'Issued. By')
    fill_in ""Remarks"", :with => ""There is no remarks to mention""
    fill_in ""Bom quantity"", :with => ""2""
    expect{ page.should have_link 'Add Product'}
    click_link 'Add Product'
    select('Nike', :from => 'Product')
    fill_in ""Price"", :with => ""1000""
    fill_in ""Quantity"", :with => ""1""
    fill_in ""Amount"", :with => ""1000""
    expect{ page.should have_link 'Back to List'}
    click_button 'Create Issue slip'
end
end

Error message:
Failures:



In the above code the Add product link is the issue when i click the that link it should load up another form called as issue_slip_line_item there i have Product, Price, Amount, Quantity field in my case the test is not able to recognize the product field it is giving me the error unable to find the product, Actually when i click the add product link it should open the issue slip line item form, there i have field in which test case is failing to open the link please help
",SaurabhBhat1206,submit
1433,2014-10-29 13:01:16," HTML code for Issue Slip:

<%= simple_nested_form_for @issue_slip do |f| %>
  <%= f.error_messages %>

  <p>
  <%= f.hidden_field :user_id, :value => current_user.id %>
  <b>From Store:</b></br>

<%= f.label :store_location_id %>
   <% if !current_user.store_location_id? %>
    <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, {:prompt => ""Select Store""}, :style => 'width:205px;' %><br />
  <% else %>
  <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, :value => current_user.store_location_id %><br/>
  <% end %>
 <b>Delivery To:</b></br>
<% if @count == nil %> 

<div class = ""shop_floors"">
<%= f.label :shop_floor_id %>
<%= f.collection_select :shop_floor_id, ShopFloor.all,:id,:name, {:prompt => ""-Select a Shopfloor""}, :style=>'width:150px;'%></div><br/>
<% else %>
<strong><%= f.label :shop_floor_id %>:<%= @issue_slip.shop_floor.name %></strong><br /><% end %>
<div class =""date"">
 <%= f.label :date, ""Date"" %>
 <%= f.datepicker :date, :dateFormat => 'dd MM, yy',  :showOn => ""both"", :buttonImage => ""/assets/calendar.gif"", :buttonImageOnly => true, :changeMonth => true, :changeYear => true , :size =>20 %><br/></div>
<%= f.label :project_id %>
<%= f.text_field :project_id , :size => 20 %><br />
<%= f.label :employee_id, ""Issued. By"" %>
<% if !current_user.employee_id? %>
<%= f.collection_select :employee_id, Employee.all,:id,:name, {:prompt => ""Select Employee""}, :style => 'width:205px;' %><br />
 <% else %>
 <%= f.collection_select :employee_id, Employee.find_all_by_user_id(current_user.id), :id, :name %><br/>
 <% end %>
<%= f.input :remarks, :label => 'Remarks', :input_html => { :size => 20} %><br/>
 <%= f.label :bom_quantity %>
 <%= f.text_field :bom_quantity, :size=> 20, :value => number_with_precision(f.object.bom_quantity , :precision => 3) %><br />
 <div class = ""cust_order"">
<%= f.label :customer_order_id %>
<%= f.collection_select :customer_order_id , CustomerPendingOrder.all, :id,:id, :prompt => ""Select Customer Order"" %></div> <br />
<div class = ""bom"">
<%= f.label :bill_of_material_id %>
<%= f.collection_select :bill_of_material_id, BillOfMaterial.all, :id, :title , :prompt => ""Select a BOM"", :style => 'width:205px;' %></div>
<div class=""load_bom""><%= f.submit ""Load BOM"" %></div> <br/>  
 <hr>
  <%= f.fields_for :issue_slip_line_items do |builder| %>
  <%= render 'issue_slip_line_item_fields', :f => builder %>
   <%end%>
 <p><%= f.link_to_add ""Add Product"", :issue_slip_line_items %> </p>   
<p><%= f.submit data: {:disable_with=>@submit_tag_label}%><div class=""load_preview_issue_slip""><%= f.submit ""preview"", :style => 'width:130px;', data: {:disable_with=>""loading preview...""} %></div></p>
  <% end %> 
</p>

Issue slip line item:
 
<%= f.link_to_remove ""Remove Product""%><br/>
<div class =""product"">
  <%= f.association :product, :prompt =>""Select Product"",  input_html: {data:{prices: prices}}, :collection => Product.in_stock %> </div>
        <%= image_tag :image , :class => ""prodimage""%>
<div class = ""productid"">
 <%= f.hidden_field :product_id, :class=>""productid"" %></div>
<br/>
<div class =""price""><%= f.label :price %><%= f.text_field :price, :size=>20, :value => number_with_precision(f.object.price, :precision => 2)%> </div><br/>
<div class = ""qty"">  
<%= f.label :quantity, ""Quantity""%>
<%= f.text_field :quantity, :size=>20 , :value => number_with_precision(f.object.quantity, :precision => 3)%></div><br/>
 <%= f.label :amount %>
 <%= f.text_field :amount, :size=>20,:class =>""amt"", :value => number_with_precision(f.object.amount, :precision => 2) %><br/>
<!--%= f.label :customs_duty, ""Custom Duty""%-->
 <!--%= f.text_field :customs_duty, :size=>20 %-->
</div>

 <hr/> 

test case for issue slip:

it ""issue slips test"", :js => true do
    click_link 'New Issue Slip'
    select('Inuit HAL', :from => 'Store location')
    expect{ page.should have_content 'New Issue Slip'}
    expect{ page.should have_content 'From Store'}
    expect{ page.should have_content 'Delivery To'}
    select('sample shopfloor', :from => 'Shop floor')
    expect{ page.should have_content 'Shop floor '}
    fill_in ""Date"", :with => ""06 October, 2014""
    fill_in ""Project"", :with => ""1993""
    select('Sample Employee', :from => 'Issued. By')
    fill_in ""Remarks"", :with => ""There is no remarks to mention""
    fill_in ""Bom quantity"", :with => ""2""
    expect{ page.should have_link 'Add Product'}
    click_link 'Add Product'
    select('Nike', :from => 'Product')
    fill_in ""Price"", :with => ""1000""
    fill_in ""Quantity"", :with => ""1""
    fill_in ""Amount"", :with => ""1000""
    expect{ page.should have_link 'Back to List'}
    click_button 'Create Issue slip'
end
end

Error message:
Failures:



In the above code the Add product link is the issue when i click the that link it should load up another form called as issue_slip_line_item there i have Product, Price, Amount, Quantity field in my case the test is not able to recognize the product field it is giving me the error unable to find the product, Actually when i click the add product link it should open the issue slip line item form, there i have field in which test case is failing to open the link please help
",SaurabhBhat1206,count
1433,2014-10-29 13:01:16," HTML code for Issue Slip:

<%= simple_nested_form_for @issue_slip do |f| %>
  <%= f.error_messages %>

  <p>
  <%= f.hidden_field :user_id, :value => current_user.id %>
  <b>From Store:</b></br>

<%= f.label :store_location_id %>
   <% if !current_user.store_location_id? %>
    <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, {:prompt => ""Select Store""}, :style => 'width:205px;' %><br />
  <% else %>
  <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, :value => current_user.store_location_id %><br/>
  <% end %>
 <b>Delivery To:</b></br>
<% if @count == nil %> 

<div class = ""shop_floors"">
<%= f.label :shop_floor_id %>
<%= f.collection_select :shop_floor_id, ShopFloor.all,:id,:name, {:prompt => ""-Select a Shopfloor""}, :style=>'width:150px;'%></div><br/>
<% else %>
<strong><%= f.label :shop_floor_id %>:<%= @issue_slip.shop_floor.name %></strong><br /><% end %>
<div class =""date"">
 <%= f.label :date, ""Date"" %>
 <%= f.datepicker :date, :dateFormat => 'dd MM, yy',  :showOn => ""both"", :buttonImage => ""/assets/calendar.gif"", :buttonImageOnly => true, :changeMonth => true, :changeYear => true , :size =>20 %><br/></div>
<%= f.label :project_id %>
<%= f.text_field :project_id , :size => 20 %><br />
<%= f.label :employee_id, ""Issued. By"" %>
<% if !current_user.employee_id? %>
<%= f.collection_select :employee_id, Employee.all,:id,:name, {:prompt => ""Select Employee""}, :style => 'width:205px;' %><br />
 <% else %>
 <%= f.collection_select :employee_id, Employee.find_all_by_user_id(current_user.id), :id, :name %><br/>
 <% end %>
<%= f.input :remarks, :label => 'Remarks', :input_html => { :size => 20} %><br/>
 <%= f.label :bom_quantity %>
 <%= f.text_field :bom_quantity, :size=> 20, :value => number_with_precision(f.object.bom_quantity , :precision => 3) %><br />
 <div class = ""cust_order"">
<%= f.label :customer_order_id %>
<%= f.collection_select :customer_order_id , CustomerPendingOrder.all, :id,:id, :prompt => ""Select Customer Order"" %></div> <br />
<div class = ""bom"">
<%= f.label :bill_of_material_id %>
<%= f.collection_select :bill_of_material_id, BillOfMaterial.all, :id, :title , :prompt => ""Select a BOM"", :style => 'width:205px;' %></div>
<div class=""load_bom""><%= f.submit ""Load BOM"" %></div> <br/>  
 <hr>
  <%= f.fields_for :issue_slip_line_items do |builder| %>
  <%= render 'issue_slip_line_item_fields', :f => builder %>
   <%end%>
 <p><%= f.link_to_add ""Add Product"", :issue_slip_line_items %> </p>   
<p><%= f.submit data: {:disable_with=>@submit_tag_label}%><div class=""load_preview_issue_slip""><%= f.submit ""preview"", :style => 'width:130px;', data: {:disable_with=>""loading preview...""} %></div></p>
  <% end %> 
</p>

Issue slip line item:
 
<%= f.link_to_remove ""Remove Product""%><br/>
<div class =""product"">
  <%= f.association :product, :prompt =>""Select Product"",  input_html: {data:{prices: prices}}, :collection => Product.in_stock %> </div>
        <%= image_tag :image , :class => ""prodimage""%>
<div class = ""productid"">
 <%= f.hidden_field :product_id, :class=>""productid"" %></div>
<br/>
<div class =""price""><%= f.label :price %><%= f.text_field :price, :size=>20, :value => number_with_precision(f.object.price, :precision => 2)%> </div><br/>
<div class = ""qty"">  
<%= f.label :quantity, ""Quantity""%>
<%= f.text_field :quantity, :size=>20 , :value => number_with_precision(f.object.quantity, :precision => 3)%></div><br/>
 <%= f.label :amount %>
 <%= f.text_field :amount, :size=>20,:class =>""amt"", :value => number_with_precision(f.object.amount, :precision => 2) %><br/>
<!--%= f.label :customs_duty, ""Custom Duty""%-->
 <!--%= f.text_field :customs_duty, :size=>20 %-->
</div>

 <hr/> 

test case for issue slip:

it ""issue slips test"", :js => true do
    click_link 'New Issue Slip'
    select('Inuit HAL', :from => 'Store location')
    expect{ page.should have_content 'New Issue Slip'}
    expect{ page.should have_content 'From Store'}
    expect{ page.should have_content 'Delivery To'}
    select('sample shopfloor', :from => 'Shop floor')
    expect{ page.should have_content 'Shop floor '}
    fill_in ""Date"", :with => ""06 October, 2014""
    fill_in ""Project"", :with => ""1993""
    select('Sample Employee', :from => 'Issued. By')
    fill_in ""Remarks"", :with => ""There is no remarks to mention""
    fill_in ""Bom quantity"", :with => ""2""
    expect{ page.should have_link 'Add Product'}
    click_link 'Add Product'
    select('Nike', :from => 'Product')
    fill_in ""Price"", :with => ""1000""
    fill_in ""Quantity"", :with => ""1""
    fill_in ""Amount"", :with => ""1000""
    expect{ page.should have_link 'Back to List'}
    click_button 'Create Issue slip'
end
end

Error message:
Failures:



In the above code the Add product link is the issue when i click the that link it should load up another form called as issue_slip_line_item there i have Product, Price, Amount, Quantity field in my case the test is not able to recognize the product field it is giving me the error unable to find the product, Actually when i click the add product link it should open the issue slip line item form, there i have field in which test case is failing to open the link please help
",SaurabhBhat1206,issue
1431,2014-10-27 07:47:32,"What was the conclusion?  I also have the same problem, and started on 10/17/14 for me. cc: @twalpole and @tonybearpan.
",styliii,twalpole
1428,2014-10-20 09:46:22," HTML code for Issue Slip:

<%= simple_nested_form_for @issue_slip do |f| %>
  <%= f.error_messages %>

  <p>
  <%= f.hidden_field :user_id, :value => current_user.id %>
  <b>From Store:</b></br>

<%= f.label :store_location_id %>
   <% if !current_user.store_location_id? %>
    <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, {:prompt => ""Select Store""}, :style => 'width:205px;' %><br />
  <% else %>
  <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, :value => current_user.store_location_id %><br/>
  <% end %>
 <b>Delivery To:</b></br>
<% if @count == nil %> 

<div class = ""shop_floors"">
<%= f.label :shop_floor_id %>
<%= f.collection_select :shop_floor_id, ShopFloor.all,:id,:name, {:prompt => ""-Select a Shopfloor""}, :style=>'width:150px;'%></div><br/>
<% else %>
<strong><%= f.label :shop_floor_id %>:<%= @issue_slip.shop_floor.name %></strong><br /><% end %>
<div class =""date"">
 <%= f.label :date, ""Date"" %>
 <%= f.datepicker :date, :dateFormat => 'dd MM, yy',  :showOn => ""both"", :buttonImage => ""/assets/calendar.gif"", :buttonImageOnly => true, :changeMonth => true, :changeYear => true , :size =>20 %><br/></div>
<%= f.label :project_id %>
<%= f.text_field :project_id , :size => 20 %><br />
<%= f.label :employee_id, ""Issued. By"" %>
<% if !current_user.employee_id? %>
<%= f.collection_select :employee_id, Employee.all,:id,:name, {:prompt => ""Select Employee""}, :style => 'width:205px;' %><br />
 <% else %>
 <%= f.collection_select :employee_id, Employee.find_all_by_user_id(current_user.id), :id, :name %><br/>
 <% end %>
<%= f.input :remarks, :label => 'Remarks', :input_html => { :size => 20} %><br/>
 <%= f.label :bom_quantity %>
 <%= f.text_field :bom_quantity, :size=> 20, :value => number_with_precision(f.object.bom_quantity , :precision => 3) %><br />
 <div class = ""cust_order"">
<%= f.label :customer_order_id %>
<%= f.collection_select :customer_order_id , CustomerPendingOrder.all, :id,:id, :prompt => ""Select Customer Order"" %></div> <br />
<div class = ""bom"">
<%= f.label :bill_of_material_id %>
<%= f.collection_select :bill_of_material_id, BillOfMaterial.all, :id, :title , :prompt => ""Select a BOM"", :style => 'width:205px;' %></div>
<div class=""load_bom""><%= f.submit ""Load BOM"" %></div> <br/>  
 <hr>
  <%= f.fields_for :issue_slip_line_items do |builder| %>
  <%= render 'issue_slip_line_item_fields', :f => builder %>
   <%end%>
 <p><%= f.link_to_add ""Add Product"", :issue_slip_line_items %> </p>   
<p><%= f.submit data: {:disable_with=>@submit_tag_label}%><div class=""load_preview_issue_slip""><%= f.submit ""preview"", :style => 'width:130px;', data: {:disable_with=>""loading preview...""} %></div></p>
  <% end %> 
</p>

Issue slip line item:
 
<%= f.link_to_remove ""Remove Product""%><br/>
<div class =""product"">
  <%= f.association :product, :prompt =>""Select Product"",  input_html: {data:{prices: prices}}, :collection => Product.in_stock %> </div>
        <%= image_tag :image , :class => ""prodimage""%>
<div class = ""productid"">
 <%= f.hidden_field :product_id, :class=>""productid"" %></div>
<br/>
<div class =""price""><%= f.label :price %><%= f.text_field :price, :size=>20, :value => number_with_precision(f.object.price, :precision => 2)%> </div><br/>
<div class = ""qty"">  
<%= f.label :quantity, ""Quantity""%>
<%= f.text_field :quantity, :size=>20 , :value => number_with_precision(f.object.quantity, :precision => 3)%></div><br/>
 <%= f.label :amount %>
 <%= f.text_field :amount, :size=>20,:class =>""amt"", :value => number_with_precision(f.object.amount, :precision => 2) %><br/>
<!--%= f.label :customs_duty, ""Custom Duty""%-->
 <!--%= f.text_field :customs_duty, :size=>20 %-->
</div>

 <hr/> 

test case for issue slip:

it ""issue slips test"", :js => true do
    click_link 'New Issue Slip'
    select('Inuit HAL', :from => 'Store location')
    expect{ page.should have_content 'New Issue Slip'}
    expect{ page.should have_content 'From Store'}
    expect{ page.should have_content 'Delivery To'}
    select('sample shopfloor', :from => 'Shop floor')
    expect{ page.should have_content 'Shop floor '}
    fill_in ""Date"", :with => ""06 October, 2014""
    fill_in ""Project"", :with => ""1993""
    select('Sample Employee', :from => 'Issued. By')
    fill_in ""Remarks"", :with => ""There is no remarks to mention""
    fill_in ""Bom quantity"", :with => ""2""
    expect{ page.should have_link 'Add Product'}
    click_link 'Add Product'
    select('Nike', :from => 'Product')
    fill_in ""Price"", :with => ""1000""
    fill_in ""Quantity"", :with => ""1""
    fill_in ""Amount"", :with => ""1000""
    expect{ page.should have_link 'Back to List'}
    click_button 'Create Issue slip'
end
end

Error message:
Failures:



In the above code the Add product link is the issue when i click the that link it should load up another form called as issue_slip_line_item there i have Product, Price, Amount, Quantity field in my case the test is not able to recognize the product field it is giving me the error unable to find the product, Actually when i click the add product link it should open the issue slip line item form, there i have field in which test case is failing to open the link please help
",SaurabhBhat1206,submit
1428,2014-10-20 09:46:22," HTML code for Issue Slip:

<%= simple_nested_form_for @issue_slip do |f| %>
  <%= f.error_messages %>

  <p>
  <%= f.hidden_field :user_id, :value => current_user.id %>
  <b>From Store:</b></br>

<%= f.label :store_location_id %>
   <% if !current_user.store_location_id? %>
    <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, {:prompt => ""Select Store""}, :style => 'width:205px;' %><br />
  <% else %>
  <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, :value => current_user.store_location_id %><br/>
  <% end %>
 <b>Delivery To:</b></br>
<% if @count == nil %> 

<div class = ""shop_floors"">
<%= f.label :shop_floor_id %>
<%= f.collection_select :shop_floor_id, ShopFloor.all,:id,:name, {:prompt => ""-Select a Shopfloor""}, :style=>'width:150px;'%></div><br/>
<% else %>
<strong><%= f.label :shop_floor_id %>:<%= @issue_slip.shop_floor.name %></strong><br /><% end %>
<div class =""date"">
 <%= f.label :date, ""Date"" %>
 <%= f.datepicker :date, :dateFormat => 'dd MM, yy',  :showOn => ""both"", :buttonImage => ""/assets/calendar.gif"", :buttonImageOnly => true, :changeMonth => true, :changeYear => true , :size =>20 %><br/></div>
<%= f.label :project_id %>
<%= f.text_field :project_id , :size => 20 %><br />
<%= f.label :employee_id, ""Issued. By"" %>
<% if !current_user.employee_id? %>
<%= f.collection_select :employee_id, Employee.all,:id,:name, {:prompt => ""Select Employee""}, :style => 'width:205px;' %><br />
 <% else %>
 <%= f.collection_select :employee_id, Employee.find_all_by_user_id(current_user.id), :id, :name %><br/>
 <% end %>
<%= f.input :remarks, :label => 'Remarks', :input_html => { :size => 20} %><br/>
 <%= f.label :bom_quantity %>
 <%= f.text_field :bom_quantity, :size=> 20, :value => number_with_precision(f.object.bom_quantity , :precision => 3) %><br />
 <div class = ""cust_order"">
<%= f.label :customer_order_id %>
<%= f.collection_select :customer_order_id , CustomerPendingOrder.all, :id,:id, :prompt => ""Select Customer Order"" %></div> <br />
<div class = ""bom"">
<%= f.label :bill_of_material_id %>
<%= f.collection_select :bill_of_material_id, BillOfMaterial.all, :id, :title , :prompt => ""Select a BOM"", :style => 'width:205px;' %></div>
<div class=""load_bom""><%= f.submit ""Load BOM"" %></div> <br/>  
 <hr>
  <%= f.fields_for :issue_slip_line_items do |builder| %>
  <%= render 'issue_slip_line_item_fields', :f => builder %>
   <%end%>
 <p><%= f.link_to_add ""Add Product"", :issue_slip_line_items %> </p>   
<p><%= f.submit data: {:disable_with=>@submit_tag_label}%><div class=""load_preview_issue_slip""><%= f.submit ""preview"", :style => 'width:130px;', data: {:disable_with=>""loading preview...""} %></div></p>
  <% end %> 
</p>

Issue slip line item:
 
<%= f.link_to_remove ""Remove Product""%><br/>
<div class =""product"">
  <%= f.association :product, :prompt =>""Select Product"",  input_html: {data:{prices: prices}}, :collection => Product.in_stock %> </div>
        <%= image_tag :image , :class => ""prodimage""%>
<div class = ""productid"">
 <%= f.hidden_field :product_id, :class=>""productid"" %></div>
<br/>
<div class =""price""><%= f.label :price %><%= f.text_field :price, :size=>20, :value => number_with_precision(f.object.price, :precision => 2)%> </div><br/>
<div class = ""qty"">  
<%= f.label :quantity, ""Quantity""%>
<%= f.text_field :quantity, :size=>20 , :value => number_with_precision(f.object.quantity, :precision => 3)%></div><br/>
 <%= f.label :amount %>
 <%= f.text_field :amount, :size=>20,:class =>""amt"", :value => number_with_precision(f.object.amount, :precision => 2) %><br/>
<!--%= f.label :customs_duty, ""Custom Duty""%-->
 <!--%= f.text_field :customs_duty, :size=>20 %-->
</div>

 <hr/> 

test case for issue slip:

it ""issue slips test"", :js => true do
    click_link 'New Issue Slip'
    select('Inuit HAL', :from => 'Store location')
    expect{ page.should have_content 'New Issue Slip'}
    expect{ page.should have_content 'From Store'}
    expect{ page.should have_content 'Delivery To'}
    select('sample shopfloor', :from => 'Shop floor')
    expect{ page.should have_content 'Shop floor '}
    fill_in ""Date"", :with => ""06 October, 2014""
    fill_in ""Project"", :with => ""1993""
    select('Sample Employee', :from => 'Issued. By')
    fill_in ""Remarks"", :with => ""There is no remarks to mention""
    fill_in ""Bom quantity"", :with => ""2""
    expect{ page.should have_link 'Add Product'}
    click_link 'Add Product'
    select('Nike', :from => 'Product')
    fill_in ""Price"", :with => ""1000""
    fill_in ""Quantity"", :with => ""1""
    fill_in ""Amount"", :with => ""1000""
    expect{ page.should have_link 'Back to List'}
    click_button 'Create Issue slip'
end
end

Error message:
Failures:



In the above code the Add product link is the issue when i click the that link it should load up another form called as issue_slip_line_item there i have Product, Price, Amount, Quantity field in my case the test is not able to recognize the product field it is giving me the error unable to find the product, Actually when i click the add product link it should open the issue slip line item form, there i have field in which test case is failing to open the link please help
",SaurabhBhat1206,count
1428,2014-10-20 09:46:22," HTML code for Issue Slip:

<%= simple_nested_form_for @issue_slip do |f| %>
  <%= f.error_messages %>

  <p>
  <%= f.hidden_field :user_id, :value => current_user.id %>
  <b>From Store:</b></br>

<%= f.label :store_location_id %>
   <% if !current_user.store_location_id? %>
    <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, {:prompt => ""Select Store""}, :style => 'width:205px;' %><br />
  <% else %>
  <%= f.collection_select :store_location_id, StoreLocation.all,:id,:name, :value => current_user.store_location_id %><br/>
  <% end %>
 <b>Delivery To:</b></br>
<% if @count == nil %> 

<div class = ""shop_floors"">
<%= f.label :shop_floor_id %>
<%= f.collection_select :shop_floor_id, ShopFloor.all,:id,:name, {:prompt => ""-Select a Shopfloor""}, :style=>'width:150px;'%></div><br/>
<% else %>
<strong><%= f.label :shop_floor_id %>:<%= @issue_slip.shop_floor.name %></strong><br /><% end %>
<div class =""date"">
 <%= f.label :date, ""Date"" %>
 <%= f.datepicker :date, :dateFormat => 'dd MM, yy',  :showOn => ""both"", :buttonImage => ""/assets/calendar.gif"", :buttonImageOnly => true, :changeMonth => true, :changeYear => true , :size =>20 %><br/></div>
<%= f.label :project_id %>
<%= f.text_field :project_id , :size => 20 %><br />
<%= f.label :employee_id, ""Issued. By"" %>
<% if !current_user.employee_id? %>
<%= f.collection_select :employee_id, Employee.all,:id,:name, {:prompt => ""Select Employee""}, :style => 'width:205px;' %><br />
 <% else %>
 <%= f.collection_select :employee_id, Employee.find_all_by_user_id(current_user.id), :id, :name %><br/>
 <% end %>
<%= f.input :remarks, :label => 'Remarks', :input_html => { :size => 20} %><br/>
 <%= f.label :bom_quantity %>
 <%= f.text_field :bom_quantity, :size=> 20, :value => number_with_precision(f.object.bom_quantity , :precision => 3) %><br />
 <div class = ""cust_order"">
<%= f.label :customer_order_id %>
<%= f.collection_select :customer_order_id , CustomerPendingOrder.all, :id,:id, :prompt => ""Select Customer Order"" %></div> <br />
<div class = ""bom"">
<%= f.label :bill_of_material_id %>
<%= f.collection_select :bill_of_material_id, BillOfMaterial.all, :id, :title , :prompt => ""Select a BOM"", :style => 'width:205px;' %></div>
<div class=""load_bom""><%= f.submit ""Load BOM"" %></div> <br/>  
 <hr>
  <%= f.fields_for :issue_slip_line_items do |builder| %>
  <%= render 'issue_slip_line_item_fields', :f => builder %>
   <%end%>
 <p><%= f.link_to_add ""Add Product"", :issue_slip_line_items %> </p>   
<p><%= f.submit data: {:disable_with=>@submit_tag_label}%><div class=""load_preview_issue_slip""><%= f.submit ""preview"", :style => 'width:130px;', data: {:disable_with=>""loading preview...""} %></div></p>
  <% end %> 
</p>

Issue slip line item:
 
<%= f.link_to_remove ""Remove Product""%><br/>
<div class =""product"">
  <%= f.association :product, :prompt =>""Select Product"",  input_html: {data:{prices: prices}}, :collection => Product.in_stock %> </div>
        <%= image_tag :image , :class => ""prodimage""%>
<div class = ""productid"">
 <%= f.hidden_field :product_id, :class=>""productid"" %></div>
<br/>
<div class =""price""><%= f.label :price %><%= f.text_field :price, :size=>20, :value => number_with_precision(f.object.price, :precision => 2)%> </div><br/>
<div class = ""qty"">  
<%= f.label :quantity, ""Quantity""%>
<%= f.text_field :quantity, :size=>20 , :value => number_with_precision(f.object.quantity, :precision => 3)%></div><br/>
 <%= f.label :amount %>
 <%= f.text_field :amount, :size=>20,:class =>""amt"", :value => number_with_precision(f.object.amount, :precision => 2) %><br/>
<!--%= f.label :customs_duty, ""Custom Duty""%-->
 <!--%= f.text_field :customs_duty, :size=>20 %-->
</div>

 <hr/> 

test case for issue slip:

it ""issue slips test"", :js => true do
    click_link 'New Issue Slip'
    select('Inuit HAL', :from => 'Store location')
    expect{ page.should have_content 'New Issue Slip'}
    expect{ page.should have_content 'From Store'}
    expect{ page.should have_content 'Delivery To'}
    select('sample shopfloor', :from => 'Shop floor')
    expect{ page.should have_content 'Shop floor '}
    fill_in ""Date"", :with => ""06 October, 2014""
    fill_in ""Project"", :with => ""1993""
    select('Sample Employee', :from => 'Issued. By')
    fill_in ""Remarks"", :with => ""There is no remarks to mention""
    fill_in ""Bom quantity"", :with => ""2""
    expect{ page.should have_link 'Add Product'}
    click_link 'Add Product'
    select('Nike', :from => 'Product')
    fill_in ""Price"", :with => ""1000""
    fill_in ""Quantity"", :with => ""1""
    fill_in ""Amount"", :with => ""1000""
    expect{ page.should have_link 'Back to List'}
    click_button 'Create Issue slip'
end
end

Error message:
Failures:



In the above code the Add product link is the issue when i click the that link it should load up another form called as issue_slip_line_item there i have Product, Price, Amount, Quantity field in my case the test is not able to recognize the product field it is giving me the error unable to find the product, Actually when i click the add product link it should open the issue slip line item form, there i have field in which test case is failing to open the link please help
",SaurabhBhat1206,issue
1426,2014-10-16 16:27:16,"Hi All,

I've noticed that when the last browser window is closed the @browser instance remains set within the driver. I want to be able to close down the browser between cucumber scenarios so that I can fire up a new browser on each scenario.

I've found that the following error is raised from Firefox and Chrome respectively:





See the script below to reproduce:



In an attempt to resolve this issue I've made a fork of Capybara and made a slight tweak to the close_window method to reset the @browser instance back to null when closing the last window. Following the closing of the last window and the reset of the @browser instance,  on the @browser method call it opens a new window and doesn't raise an error.

I haven't submitted a PR as of yet as I wanted to get feedback initially, there might already be an easier way around this?? Please see the link below:

https://github.com/jonathanchrisp/capybara/compare/close-window?expand=1#diff-d8f8252c683ecfca36a3d18712282b40R105
- I've also added the relevant unit tests to ensure this works as expected. 
",jonathanchrisp,browser
1426,2014-10-16 16:46:47,"I believe an easier way of shutting down the browser between each scenario would be to not worry about closing the windows and just use an After block



Of course firing up a new instance of the browser for every scenario is probably going to be painfully slow

Also - just from a quick look over your changes, I think just setting @browser to nil without actually calling quit on it will lead to a lot of unused firefox/chrome/etc processes being left running.
",twalpole,browser
1419,2014-10-07 21:45:23,"We're experiencing this issue as well, on @circleci, but not locally. Rails 4.1.6

The issue appears to be that when we run locally, `Rails.application.middleware` is a ActionDispatch::MiddlewareStack, but when CircleCI runs the build, it uses a Rails::Configuration::MiddlewareStackProxy, which does not include Enumerable. We don't know why this is, but will be looping them in.

lib/capybara/rails.rb:8 checks whether Rack::Lock is already in the stack by calling `include?` on `Rails.application.middleware`. Unfortunately it doesn't look like Rails::Configuration::MiddlewareStackProxy offers any nice way of making this check.
",vericred-dev,circleci
1417,2014-10-13 19:32:13,"@philbaker - thats 3 versions ago, we don't backport much in capybara.  Is there any reason you can't just update support to 2.4 ?  you can ignore the tests for the modal and window management apis until you're ready to support them.  -  Actually capybara-mechanize wouldn't support the modal and window management apis anyway - so 2.4 shouldn't be much different that 2.2
",twalpole,philbaker
1415,2014-10-01 17:40:07,"This is a fix issue 1237 best liked by @twalpole 
",sbonebrake,twalpole
1410,2014-09-28 17:59:57,"I think it would be a good idea to make elements returned by `Finders#all` reloadable, i.e.:
- set `Element#allow_reload` to true for every element from returned result. It may be done inside `Finders#all` or `Query#resolve_for`
- Pass `index` as the last argument inside `Query#resolve_for` (It will be not required argument that defaults to `0` just to not break backwards compatibility as `@api private` isn't added for `Element#initialize`)
- Inside `Element#reload` use `all(...)[index]` instead of `first(...)`

Do you like that idea?
",abotalov,api
1410,2014-11-05 18:47:36,"@twalpole Do you want me to provide reasoning on why I think it would be a good idea to make elements returned by `all` reloadable? Or do you need something else from me?
",abotalov,twalpole
1407,2014-09-25 16:00:04,"Not sure why it's disabled, but since I expected to find it working I think it would be useful to enable it

cc: @twalpole (6c0674db9bb6896d4ced8f8ab12fc0e3eec6d71e)
",elia,twalpole
1403,2014-09-22 01:31:46,"Quite a few of my tests broke when upgrading to Capybara 2.4.2. Looks like I was taking advantage of the fact Rails was allowing concurrent requests. I have a few endpoints in my app that I call while a request is happening (I make a HTTP request to m app's API during a request to get data).

Looks like a recent change has stopped Rails from allowing concurrent requests here: https://github.com/jnicklas/capybara/commit/385a7507f6525d9b2d1e23bef0bb2e6fe5ad0c97

I suppose I'm trying to figure out why this was changed, and if there's a way I can change this behaviour? I couldn't find a related issue.

Cheers!

cc. @twalpole
",keithpitt,twalpole
1396,2014-09-11 18:54:59,"@myronmarston That's the second time when RSpec adds a method with a name that already exists in Capybara - see https://github.com/jnicklas/capybara/issues/1361
",abotalov,myronmarston
1396,2014-09-11 19:13:07,"> @myronmarston That's the second time when RSpec adds a method with a name that already exists in Capybara - see #1361

Sorry about that :(.  I'm not sure what we could have or should have done differently, given that RSpec continues to gain new features (often in the form of new APIs) as requested by the community.  Any suggestions?
",myronmarston,myronmarston
1389,2014-08-31 07:23:49,"The example given for a successful sign in test was incorrect as the password for the created user and the password to sign in did not match. Thanks to @amelialaundy for the catch while going over the docs.
",ootoovak,amelialaundy
1387,2014-08-28 07:04:00,"

This code delete the item however the javascript that handle the data-method tag is not in the page.
So in a real browser when we click on this link we go to the show view.

Of course when I had the @javascript tag to the scenario, the test fails.
So when the javascript tag is here --> RED
When there is not tag --> GREEN

Is it a rack test issue ? It's the default driver for capybara right ?
Anyway how the delete can work with the rack test driver (it does not execute the js) ? 
",bvasseursiliconsalad,javascript
1381,2014-08-22 08:57:02,"I have a html element as below:
<button data-monitor-id=""pb:ll:le"">...</button>

I used ""page.find(:xpath, ""*[@data-monitor-id='pb:ll:l']"")"" to find this element, it did not work. Can you help to fix it? Thanks.

One more question, I want to add this attribute into html.rb
button = descendant(:input)[attr(:type).one_of('submit', 'reset', 'image', 'button')][attr(:id).equals(locator) | attr(:value).is(locator) | attr(:title).is(locator) | attr(:data-monitor-id).is(locator)], but it does not allow ""-"". Is there a way to escape ""-""?
",leevyzz,data-monitor-id
1378,2015-04-23 16:53:08,"@pavel - The ""if we make it for find it will give wrong suggestions"" is exactly my point about not being able to do it for all ElementNotFound errors.  Doing it for all the methods in Capybara::Node::Actions is probably possible.

The issues I have with your other two suggestions are 
1. Your #fill_in method is incomplete in the suggestions it offers (as detailed in a previous message)
2. Both of these methods have a race condition where it's possible to get an error like
   Unable to find field ""Title"" did you mean one of these [""Title"", ....]  
   Where it's telling you it couldn't find a field and then asking if you meant that exact same field.  This is because of the time delay between the field not being found and then getting all the available things on the page.   I don't think there's really a clean way to fix that possibility so it should probably be checked for when the error message is generated and make a statement about the race condition if it happens.  This may have to take into the match mode currently being used.
3.  This behavior would need to be turned on/off with a setting  -  Capybara.suggest_on_action_failure  or something like that
4.  To be included in Capybara you would also need to take into account that the default selector might be :xpath, so things like   find(label_selector) in your #fill_in would need to be become  find(:css, label_selector)  to make sure it continues working even if people have changed the default. 
",twalpole,pavel
1368,2014-07-31 15:10:57,"I propose to be more consistent as current interchangeble usage is quiet confusing:



I propose to consistently refer to :css, :button, :xpath, etc. as `selectors` and to second arguments (`'#id'`, `'Click me!'`, `""//*[@name='something']""`) as `locators`.

The whole thing (`:css, '#id'`) can also be named selector as it's used in names like `assert_selector(:css, '#id')`.

Here are examples of (IMO) improper naming:
https://github.com/jnicklas/capybara/blob/2.4_stable/lib/capybara/rack_test/driver.rb#L65
https://github.com/jnicklas/capybara/blob/2.4_stable/lib/capybara/node/finders.rb#L133

> ""The type of selector""

can be changed to:

> ""Locator (or css selector). It's named locator by Capybara as otherwise it could be confused with the first argument""

I don't propose to make API changes, just changes to docs and variable naming.
",abotalov,name
1368,2014-07-31 17:20:46,"> xpath selector

It's called expression in the spec - http://www.w3.org/TR/xpath/, not selector

From YARDoc:



Here `locator` is said to be `The selector`. But it's not correct as actually it's either css selector, xpath expression or some other string.

Also first sentence in documentation of `add_selector` is documented as:

> Add a new selector to Capybara

So currently all those things:
- `:css`, `:xpath`, `:name`
- '`'#id'`, `'Click me!'`, `""//*[@name='something']""`
- `:css, '#id'`

are called selectors. So when someone says ""selector"" (in context of Capybara) he can mean quiet different things. Naming those things more consistently will add more clarity.
",abotalov,name
1368,2014-07-31 19:57:50,"I see. Probably we can go a bit other route then:
- `:css`, `:xpath`, `:name` - selector kind
- '`'#id'`, `'Click me!'`, `""//*[@name='something']""` - selector or locator
- `:css, '#id'` - selector
- object of `Selector` class - selector

Probably it's already named in such way.
",abotalov,name
1365,2014-07-29 17:41:15,"The fact that `within_frame` is exposed to driver level isn't good (Jonas said it in the past too - https://github.com/jnicklas/capybara/issues/984#issuecomment-14349992, see also Jon Leighton's comment above it). So IMO that issue is best to be resolved by:
1. deprecating drivers' `within_frame` method
2. adding `switch_to_frame(element)`, `switch_to_parent_frame` to drivers' interfaces

The use case for `switch_to_frame` (and `switch_to_window`) is that you can switch in one method, then do some operations in various other methods and then switch back in possibly another method.  Consider this:



This scenario (or just a test) is not declarative enough but if a person already has `I do something useful` stepdef (for another scenario that works with the page not opened in a frame) they can reuse it instead of writing a new stepfef. (P.S.: I know that Matt Wynne tells that scenarios should be declarative but still many people write not declarative scenarios and use Cucumber without following BDD). I haven't had a need to use `switch_to_frame` actually myself.

Also it seems there were users requesting it:
https://github.com/thoughtbot/capybara-webkit/issues/620

cc @mhoran @jferris @route @yaauie

---

> Perhaps updating within_frame to take an array of selectors for nested frames makes sense

Do you mean that?


",abotalov,mhoran
1365,2014-07-29 17:41:15,"The fact that `within_frame` is exposed to driver level isn't good (Jonas said it in the past too - https://github.com/jnicklas/capybara/issues/984#issuecomment-14349992, see also Jon Leighton's comment above it). So IMO that issue is best to be resolved by:
1. deprecating drivers' `within_frame` method
2. adding `switch_to_frame(element)`, `switch_to_parent_frame` to drivers' interfaces

The use case for `switch_to_frame` (and `switch_to_window`) is that you can switch in one method, then do some operations in various other methods and then switch back in possibly another method.  Consider this:



This scenario (or just a test) is not declarative enough but if a person already has `I do something useful` stepdef (for another scenario that works with the page not opened in a frame) they can reuse it instead of writing a new stepfef. (P.S.: I know that Matt Wynne tells that scenarios should be declarative but still many people write not declarative scenarios and use Cucumber without following BDD). I haven't had a need to use `switch_to_frame` actually myself.

Also it seems there were users requesting it:
https://github.com/thoughtbot/capybara-webkit/issues/620

cc @mhoran @jferris @route @yaauie

---

> Perhaps updating within_frame to take an array of selectors for nested frames makes sense

Do you mean that?


",abotalov,route
1365,2014-07-29 17:41:15,"The fact that `within_frame` is exposed to driver level isn't good (Jonas said it in the past too - https://github.com/jnicklas/capybara/issues/984#issuecomment-14349992, see also Jon Leighton's comment above it). So IMO that issue is best to be resolved by:
1. deprecating drivers' `within_frame` method
2. adding `switch_to_frame(element)`, `switch_to_parent_frame` to drivers' interfaces

The use case for `switch_to_frame` (and `switch_to_window`) is that you can switch in one method, then do some operations in various other methods and then switch back in possibly another method.  Consider this:



This scenario (or just a test) is not declarative enough but if a person already has `I do something useful` stepdef (for another scenario that works with the page not opened in a frame) they can reuse it instead of writing a new stepfef. (P.S.: I know that Matt Wynne tells that scenarios should be declarative but still many people write not declarative scenarios and use Cucumber without following BDD). I haven't had a need to use `switch_to_frame` actually myself.

Also it seems there were users requesting it:
https://github.com/thoughtbot/capybara-webkit/issues/620

cc @mhoran @jferris @route @yaauie

---

> Perhaps updating within_frame to take an array of selectors for nested frames makes sense

Do you mean that?


",abotalov,yaauie
1365,2014-07-29 17:41:15,"The fact that `within_frame` is exposed to driver level isn't good (Jonas said it in the past too - https://github.com/jnicklas/capybara/issues/984#issuecomment-14349992, see also Jon Leighton's comment above it). So IMO that issue is best to be resolved by:
1. deprecating drivers' `within_frame` method
2. adding `switch_to_frame(element)`, `switch_to_parent_frame` to drivers' interfaces

The use case for `switch_to_frame` (and `switch_to_window`) is that you can switch in one method, then do some operations in various other methods and then switch back in possibly another method.  Consider this:



This scenario (or just a test) is not declarative enough but if a person already has `I do something useful` stepdef (for another scenario that works with the page not opened in a frame) they can reuse it instead of writing a new stepfef. (P.S.: I know that Matt Wynne tells that scenarios should be declarative but still many people write not declarative scenarios and use Cucumber without following BDD). I haven't had a need to use `switch_to_frame` actually myself.

Also it seems there were users requesting it:
https://github.com/thoughtbot/capybara-webkit/issues/620

cc @mhoran @jferris @route @yaauie

---

> Perhaps updating within_frame to take an array of selectors for nested frames makes sense

Do you mean that?


",abotalov,jferris
1365,2014-07-29 23:36:00,":+1: to making the frame API behave more like the window API. I'd also like to cut down on the incompatibilities between drivers when it comes to frame handling, as noted in https://github.com/jnicklas/capybara/issues/984#issuecomment-14357652. And as @jnicklas pointed out, this code really needs to be cleaned up.

I agree with @abotalov regarding `switch_to_frame` vs `within_frame`. I feel there are benefits to both depending on the situation, and as we've provided both `switch_to_window` and `within_window` (implemented via `switch_to_window`), I think users may expect that behavior.

Perhaps `within_frame` could take a proc as an argument, as `within_window`. I think this is a nice way to handle the option of selecting a particular frame that matches a selector, versus overloading arguments.

Thanks for the heads up, @abotalov.
",mhoran,jnicklas
1361,2014-07-15 11:26:06,"Just to note the only way I can see getting around this is to set an @session instance variable on initialize and then call the Capybara session directly e.g.


",jonathanchrisp,session
1357,2014-07-08 16:48:02,"Ugg. I can see that this is more-or-less equivalent to @alexpeachey's #1298. However, I think that the arguments about backwards-compatibility are no longer valid, as the current visit code _unconditionally_ calls `to_s`. This change just ensures that the string result is used consistently throughout the method.
",shepmaster,alexpeachey
1357,2014-07-08 18:52:24,"See https://github.com/jnicklas/capybara/pull/1298#issuecomment-48381543

I think changing `# @param [String] url     The URL to navigate to` to `# @param [#to_s] url     The URL to navigate to. The parameter will be casted to String by the method.` would be enough to get this merged.
",abotalov,param
1348,2014-07-26 21:36:31,"I've digged into this issue a bit more and now would like to say the following:

> Actually, an absolute URL can have an empty scheme: when encountering //example.com, browsers will use the same scheme as the current page (thus https://example.com if you're currently on an HTTPS page, or http://example.com otherwise).

URI reference without scheme is called a relative URI reference (see http://tools.ietf.org/html/rfc3986#section-4.2), not absolute one. Absolute URI reference must start from scheme.

From YARD-ocs of `#visit` method:

> Navigate to the given URL. The URL can either be a relative URL or an absolute URL.

Actually that statement is currently incorrect. Transforming of relative URI reference to the absolute one made by `#visit` doesn't handle most of cases specified by http://tools.ietf.org/html/rfc3986#section-5. However, supporting relative URI references' resolution properly will drastically complicate the algorithm. And I don't see enough reasons to make `visit` compliant with RFC as handling most of those cases is IMHO not needed by Capybara users.

Also changing the algorithm to one from RFC may be backwards incompatible for someone.

For example, some users may currently do something like:



In current Capybara version this would open `http://www.example.com/en/something`. This is against RFC but someone may have relied on such implementation (maybe, they looked into Capybara's code, saw that `visit` concatenates strings and relied on such behavior without checking RFCs. Also such ""resolution"" may seem natural.). Therefore I would vote against changing it in 2.x. Note that this PR changes behavior for this case.

However, I think the case pointed by @dstosik is worth supporting as it may be useful in some circumstances.

So I would vote for inserting a ""crutch"" like this in 2.5 instead of this PR:



@twalpole WDYT?
",abotalov,dstosik
1348,2014-07-26 21:36:31,"I've digged into this issue a bit more and now would like to say the following:

> Actually, an absolute URL can have an empty scheme: when encountering //example.com, browsers will use the same scheme as the current page (thus https://example.com if you're currently on an HTTPS page, or http://example.com otherwise).

URI reference without scheme is called a relative URI reference (see http://tools.ietf.org/html/rfc3986#section-4.2), not absolute one. Absolute URI reference must start from scheme.

From YARD-ocs of `#visit` method:

> Navigate to the given URL. The URL can either be a relative URL or an absolute URL.

Actually that statement is currently incorrect. Transforming of relative URI reference to the absolute one made by `#visit` doesn't handle most of cases specified by http://tools.ietf.org/html/rfc3986#section-5. However, supporting relative URI references' resolution properly will drastically complicate the algorithm. And I don't see enough reasons to make `visit` compliant with RFC as handling most of those cases is IMHO not needed by Capybara users.

Also changing the algorithm to one from RFC may be backwards incompatible for someone.

For example, some users may currently do something like:



In current Capybara version this would open `http://www.example.com/en/something`. This is against RFC but someone may have relied on such implementation (maybe, they looked into Capybara's code, saw that `visit` concatenates strings and relied on such behavior without checking RFCs. Also such ""resolution"" may seem natural.). Therefore I would vote against changing it in 2.x. Note that this PR changes behavior for this case.

However, I think the case pointed by @dstosik is worth supporting as it may be useful in some circumstances.

So I would vote for inserting a ""crutch"" like this in 2.5 instead of this PR:



@twalpole WDYT?
",abotalov,twalpole
1348,2014-07-31 19:49:04,"Also @dstosik what is your use case? Why do you want this feature?
",abotalov,dstosik
1338,2014-06-19 12:02:54,"@twalpole seems fine for me, just the double check that @abotalov mentioned has to be changed :shipit: 
",sobrinho,abotalov
1336,2014-06-18 18:58:35,"`Session#visit` doesn't work correctly with e.g. `about` scheme:



I propose to change :



to:



I think this is a backwards-compatible fix. @twalpole do you agree?
",abotalov,twalpole
1331,2014-06-13 23:00:49,"@dontfidget the issue is that selenium has locked the setting, so we couldn't override it even if we wanted to.  On top of that the reason it was locked was to fix an issue of missing clicks, which I think, in the short term, is more important than font sizes on retina screens. Longer term I hope selenium fixes the missing clicks issue without locking the pixels value.  The issue linked above has been accepted and someone is workings on it, so hopefully a better fix will be in 2.43
",twalpole,dontfidget
1328,2014-06-11 19:00:33,"@jnicklas  The real issue with this is that HaveSelector needs to catch the Capybara::ExpectationNotMet exception and then ends up raising an RSpec::Expectations::ExpectationNotMetError  exception.   This may necessitate waiting for a major version update if there was a guarantee of HaveSelector raising Capybara::ExpecationNotMet on failure.   I don't see it documented (or specifically tested) anywhere.  What would your thoughts on it be?
",twalpole,jnicklas
1326,2014-06-10 09:01:10,"I have the following html saved with the save_and_open_page command right before the capybara selectors are run (I've also checked page.body, it's the same): https://gist.github.com/davidkovaccs/8991af5bed1805277f52

I get the following error message: 'expected to find xpath ""//div[@class='box']"" 9 times, found 6 matches: ""box_2001 attrkulcs1: attrvalue 1 attrkulcs2: attrvalue 2 attrkulcs3: attrvalue 3"", ""box_2002 attrkulcs1: attrvalue 1 attrkulcs2: attrvalue 2 attrkulcs3: attrvalue 3 attrkulcs4: attrvalue 4"", ""box_2003"", ""box_1001"", ""box_1002 attrkulcs1: attrvalue 1 attrkulcs2: attrvalue 2 attrkulcs3: attrvalue 3"", ""box_1003 attrkulcs1: attrvalue 1"". Also found """", """", """", which matched the selector but not all filters. (Capybara::ExpectationNotMet)'

Note that the found 6 matches is not 6 for every test run. it a number between 4 and 9. I don't really understand what can be the 'matched the selector but not all filters' statement. As I know I'm not using any filters.

I've tried the following selectors, but all of them gives the same error message:

have_xpath(""//div[@class='box']"", :count => 9)
have_selector(:css, '.box', :count => 9)
have_css('.box', :count => 9)
I've tried it with capybara 2.2.1 and 2.3.0 also. I'm using Selenium webdriver 2.42.0

Running $x(""//div[@class='box']"").length from browser console works perfectly.
",davidkovaccs,class
1322,2014-06-26 22:58:11,"cc @jferris, this is a continuation of #1037, which I believe you had spent some time looking into. I've not gotten up to speed on where this API is currently, but this is something we should have on the radar for capybara-webkit.
",mhoran,jferris
1307,2014-05-20 05:39:40,"I confirm a 100% speed increase on my side:





On Mon, May 19, 2014 at 11:31 AM, Thomas Walpole
notifications@github.comwrote:

> @abotalov https://github.com/abotalov It's possible I screwed something
> up there, but I don't think so - what makes you think it would?
> unnormalized_text aborts traversing through children if a node is hidden -
> so it would never look at ""Invisible text""
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1307#issuecomment-43539538
> .
",pcreux,abotalov
1299,2014-04-24 21:19:04,"Currently the `process` method in `Capybara::RackTest::Browser` takes an argument called `path` and assumes it is a string as it treats it as such by using it as an argument to `URI.parse` and sending it methods like `start_with?`.

This patch coerces the path argument with `to_s`.

@twalpole I thought this a more appropriate near term fix for my desired long term fix by tackling the issue at the driver level.
",alexpeachey,twalpole
1297,2014-04-22 21:08:29,"The reason it was rejected was the problem with passing and returning elements, not different values of options as was explained by @mhoran in #938 - also execute_script is way more core to using capybara than save_screenshot - and as such I'd like to keep supported use as compatible across drivers as we can
",twalpole,mhoran
1289,2014-04-09 17:22:20,"pulling in @jonleighton @mhoran @jferris @jcoglan , if any of you are planning on implementing touch methods do you have any feedback on this?
",twalpole,mhoran
1289,2014-04-09 17:22:20,"pulling in @jonleighton @mhoran @jferris @jcoglan , if any of you are planning on implementing touch methods do you have any feedback on this?
",twalpole,jcoglan
1289,2014-04-09 17:22:20,"pulling in @jonleighton @mhoran @jferris @jcoglan , if any of you are planning on implementing touch methods do you have any feedback on this?
",twalpole,jonleighton
1289,2014-04-09 17:22:20,"pulling in @jonleighton @mhoran @jferris @jcoglan , if any of you are planning on implementing touch methods do you have any feedback on this?
",twalpole,jferris
1285,2014-04-03 06:33:33,"Currently the Capybara's DSL `feature` does not work with the new RSpec 3 configuration [`expose_dsl_globally = false`](https://relishapp.com/rspec/rspec-core/v/3-0/docs/configuration/global-namespace-dsl#when-exposing-globally-is-disabled-the-top-level-dsl-no-longer-works) which removes the `describe` from Ruby's `main` object. 

Please see https://github.com/rspec/rspec-rails/issues/984 for background.

As @myronmarston suggested, it seems Capybara needs to use [`RSpec::Core::Configuration#alias_example_group_to`](https://github.com/rspec/rspec-core/blob/77cc21e97a6e4c66acb21c8a89e8e45bffade820/lib/rspec/core/configuration.rb#L726-L756) in [lib/capybara/rspec/features.rb](https://github.com/jnicklas/capybara/blob/12b975da27eacb482cb325f6c68b7fd44389506f/lib/capybara/rspec/features.rb#L10).
#### Environment
- capybara 2.2.0 (https://github.com/jnicklas/capybara/tree/12b975da27eacb482cb325f6c68b7fd44389506f)
- rspec-core 3.0.0.beta2 (https://github.com/rspec/rspec-core/tree/77cc21e97a6e4c66acb21c8a89e8e45bffade820)
",yujinakayama,myronmarston
1275,2014-03-25 19:23:39,"@jnicklas We can explicitly enable `should` instead of merging @twalpole's PR. I don't think that enabling `should` in Capybara specs is a bad decision.

But it doesn't change the fact that `should` is deprecated.
",abotalov,twalpole
1273,2014-03-22 10:57:15,"I made some comments about my concerns. It would be better to wait for @jnicklas to see if he will approve them.
",abotalov,jnicklas
1273,2014-03-24 02:48:00,"@abotalov Thanks for the comments! I fixed some of the things. Let's wait to see what @jnicklas has to say about some of the other ones, since I tried to not change the original API at all.
",gylaz,jnicklas
1271,2014-03-18 21:33:25,"Currently `all` returns `Result` instead of array. It has the following downsides:
1. We should delegate all useful methods of `Array` to `@result`. But it's hard to choose all necessary methods. For example currently `reverse` method (that I wanted to use recently at some project) isn't delegated so Capybara user should do `all(locator).to_a.reverse`
2. It increases surface of public API

Before #1246 `all` was used in `assert_selector` and `assert_no_selector` so `Result` was needed. It will be not so after it will be merged. `all` should return an array instead of `Result`
",abotalov,result
1260,2014-02-24 20:36:03,"https://github.com/jnicklas/capybara/pull/1232 added possibility to pass more than one count option (by count option I mean any of `:count`, `:minimum`, `:maximum`, `:between`).

But to support this ability properly we should:
- raise errors if conflicting options were passed (e.g. `count: 3, minimum: 4`)
- change failure message. Example keys: `minimum: 2, maximum: 5, between: 3..6`. Here are choices that I think we have:
  - normalize keys so error message will include `from 3 to 5 times`
  - just append keys so error message will include `at least 2 times, at most 5 times and between 3 to 6 times`

In any case it would require to write some code to support it properly. But I don't really see a use case when this ability may be useful.  I propose to raise error if more than one count key has been passed.

cc @tmertens (as you added this feature)
",abotalov,tmertens
1259,2014-03-02 14:19:02,"@rbu @twalpole I don't know, this is a very edge use case, so it could be buggy in Capybara. @rbu which driver are you using? Could you provide an executable reproduction?
",jnicklas,twalpole
1245,2015-02-26 15:58:00,"This issue isn't limited to RSpec::Mocks::MockExpectationError. @mitchlloyd and I just spent hours trying to figure out why LoadError wasn't being raised in our tests.

Rescuing Exception rather than StandardError would let these errors bubble up. Currently the errors are invisible to us.

I don't think this falls under the common advice of never rescue Exception because the exception is being re-raised after being set on the middleware. It's hard to imagine an exception being raised inside of the server that you wouldn't want to see when running your tests.

We looked into providing a test case for this scenario, but we're unsure of where to write this test. capybara/spec/server_spec.rb has some coverage of the server, but it does not appear to be exercising the middleware.
",mguterl,mitchlloyd
1237,2014-09-23 17:28:48,"I'm leaning towards the first solution, because of the backwards compatibility it provides.  @jferris, @jonleighton, @mhoran - any input on this ?
",twalpole,jferris
1237,2014-09-23 17:28:48,"I'm leaning towards the first solution, because of the backwards compatibility it provides.  @jferris, @jonleighton, @mhoran - any input on this ?
",twalpole,jonleighton
1237,2014-09-23 17:28:48,"I'm leaning towards the first solution, because of the backwards compatibility it provides.  @jferris, @jonleighton, @mhoran - any input on this ?
",twalpole,mhoran
1235,2014-02-03 14:06:45,"Wow, awesome pull request! Thanks @abotalov. This thing is huge, so I'll have to review this properly. At a first glance, I really like it though. The proposed `window_opened_by` is very nice IMO, exactly what you'd want in most cases. Also, the fact that it synchronizes is very nice. I think the proposed API is definitely _much_ better than what we have now.

Does this include some method of returning all currently open windows? I didn't find it in the code. I think that would be desirable. We don't have it now either so it's not necessary for this to get merged.

One question is what we do with version numbers. I agree that the current window API can barely be described as working, so maybe we aren't _breaking_ anything per se. But still this would probably require a major version bump, right? I'm perfectly okay with doing a major version bump for this though.

@joliss, @twalpole your thoughts on this?
",jnicklas,joliss
1235,2014-02-03 14:06:45,"Wow, awesome pull request! Thanks @abotalov. This thing is huge, so I'll have to review this properly. At a first glance, I really like it though. The proposed `window_opened_by` is very nice IMO, exactly what you'd want in most cases. Also, the fact that it synchronizes is very nice. I think the proposed API is definitely _much_ better than what we have now.

Does this include some method of returning all currently open windows? I didn't find it in the code. I think that would be desirable. We don't have it now either so it's not necessary for this to get merged.

One question is what we do with version numbers. I agree that the current window API can barely be described as working, so maybe we aren't _breaking_ anything per se. But still this would probably require a major version bump, right? I'm perfectly okay with doing a major version bump for this though.

@joliss, @twalpole your thoughts on this?
",jnicklas,twalpole
1235,2014-02-04 09:18:56,"Also pulling in @jonleighton @mhoran @jferris @jcoglan. I don't think this presents any problems for driver authors, right guys? Just want to check and make sure. IIRC both capybara-webkit and poltergeist implement a lot of this stuff themselves anyway, right?
",jnicklas,mhoran
1235,2014-02-04 09:18:56,"Also pulling in @jonleighton @mhoran @jferris @jcoglan. I don't think this presents any problems for driver authors, right guys? Just want to check and make sure. IIRC both capybara-webkit and poltergeist implement a lot of this stuff themselves anyway, right?
",jnicklas,jcoglan
1235,2014-02-04 09:18:56,"Also pulling in @jonleighton @mhoran @jferris @jcoglan. I don't think this presents any problems for driver authors, right guys? Just want to check and make sure. IIRC both capybara-webkit and poltergeist implement a lot of this stuff themselves anyway, right?
",jnicklas,jonleighton
1235,2014-02-04 09:18:56,"Also pulling in @jonleighton @mhoran @jferris @jcoglan. I don't think this presents any problems for driver authors, right guys? Just want to check and make sure. IIRC both capybara-webkit and poltergeist implement a lot of this stuff themselves anyway, right?
",jnicklas,jferris
1235,2014-04-03 19:42:45,"@jnicklas @twalpole What do you think about it?
Should we release it in 2.3 and remove support for old `within_window` in 3.0?
Or release it in 3.0 and remove support for old `within_window` in 4.0?
",abotalov,twalpole
1235,2014-04-11 21:07:13,"I fixed the issues you commented about.

I would like to build a new ""good"" API instead of enhancing API that we are going to deprecate. Thus I would prefer to add ability of passing a hash like `switch_to_window(title: 'exact', url: /substring/)` where string means exact matching and regexp means usual regexp matching. I will extract `assert_valid_keys` to `Capybara::Helpers` and mark it `@api private` if you approve this.

Also there are some errors on Travis that are non-reproducible in my environment:
1. All ""should be able to maximize window"" tests failed. I think that's because tests should be runned inside X11 (i.e. Xvfb).
2. https://travis-ci.org/jnicklas/capybara/jobs/22725833#L330. It looks like current window hasn't been changed just after window was switched. I think it's a bug in Selenium and should be fixed on its side.
3. https://travis-ci.org/jnicklas/capybara/jobs/22725832#L455. Difference between wait time and timeout is already 400 ms. Maybe, I should make it even larger but IMO it's already large enough.
4. https://travis-ci.org/jnicklas/capybara/jobs/22725831#L3490, https://travis-ci.org/jnicklas/capybara/jobs/22725832#L482, https://travis-ci.org/jnicklas/capybara/jobs/22725834#L344. I don't know why it happens.
",abotalov,api
1230,2014-01-17 08:20:33,"When session.reset! is called, @touched is never getting properly reset to false. This hopefully fixes that. Added applicable test.
https://github.com/jnicklas/capybara/issues/1229
",lesliepc16,touched
1229,2014-01-17 07:40:23,"I believe there's a bug with resetting the session. After resetting the session, you'd expect @touched to be false, but in fact it's true.

I think the reason is:
https://github.com/jnicklas/capybara/blob/master/lib/capybara/session.rb#L80

these two lines need to be reversed as the assert will cause the session to be ""touched""



As an aside, why have an assert in an after hook? It seems unexpected to have it there.
",lesliepc16,touched
1229,2014-01-28 23:05:25,"@jnicklas - this is a very small change. Let me know what you think. Right now we're monkeypatching this part of capybara so would be really happy to get this into master if it looks ok.
",lesliepc16,jnicklas
1226,2014-01-16 22:58:48,"In our particular case, we're just checking if redirection happen and we actually have it as a boolean flag (`@redirected = true` instead of `@redirects += 1`). I thought though that if we're doing this it might come handy for somebody in the future to check number of the redirects (and I can imagine such scenario) but having it as a flag would be good enough for me. What do you think?
",lukaszx0,redirects
1226,2014-01-16 22:58:48,"In our particular case, we're just checking if redirection happen and we actually have it as a boolean flag (`@redirected = true` instead of `@redirects += 1`). I thought though that if we're doing this it might come handy for somebody in the future to check number of the redirects (and I can imagine such scenario) but having it as a flag would be good enough for me. What do you think?
",lukaszx0,redirected
1221,2014-01-06 02:07:56,"/cc: @myronmarston, @jonrowe, @samphippen, @xaviershay ... is this the right idea for an RSpec 2.x and 3.x compatible matcher?
",alindeman,samphippen
1221,2014-01-06 02:07:56,"/cc: @myronmarston, @jonrowe, @samphippen, @xaviershay ... is this the right idea for an RSpec 2.x and 3.x compatible matcher?
",alindeman,xaviershay
1221,2014-01-06 02:07:56,"/cc: @myronmarston, @jonrowe, @samphippen, @xaviershay ... is this the right idea for an RSpec 2.x and 3.x compatible matcher?
",alindeman,myronmarston
1221,2014-01-06 02:07:56,"/cc: @myronmarston, @jonrowe, @samphippen, @xaviershay ... is this the right idea for an RSpec 2.x and 3.x compatible matcher?
",alindeman,jonrowe
1221,2014-01-06 02:13:29,"I also wouldn't object to just having the aliases as is. I don't think it'll cause any pain? /cc @myronmarston
",JonRowe,myronmarston
1218,2014-01-06 14:58:01,"Seems like Ruby 2.1.0 is not building with the base versions Gemfile. @joliss, @twalpole I'm thinking that the base versions Gemfile maybe isn't worth the trouble. What do you think, should we kill it? 
",jnicklas,joliss
1218,2014-01-06 14:58:01,"Seems like Ruby 2.1.0 is not building with the base versions Gemfile. @joliss, @twalpole I'm thinking that the base versions Gemfile maybe isn't worth the trouble. What do you think, should we kill it? 
",jnicklas,twalpole
1218,2014-01-06 18:47:28,"> @joliss, @twalpole I'm thinking that the base versions Gemfile maybe isn't worth the trouble.

Here's the original reasoning: I was assuming that at some point we'd accidentally use a feature that wasn't supported by the minimum version of a dependency, without bumping the version spec in `Gemfile` at the same time. So I added the base version Gemfile in order to avoid having to deal with issues like ""Capybara breaks with old version of $dependency"". In other words, it was intended as a time saver. If it's not saving time, we should perhaps remove it.

I don't believe the `Gemfile.base-versions` test has ever actually caught anything, has it? If it hasn't, perhaps that's evidence that we don't need it.

Then again, seeing @twalpole comment's, perhaps this issue is unrelated.

I'll leave it up to you all.
",joliss,joliss
1206,2013-12-09 16:36:51,"The following test is blinking to fail for me every once in a while.  Not sure why.

1) Capybara::Session selenium #fill_in should wait for asynchronous load
     Failure/Error: @session.fill_in('new_field', :with => 'Testing...')
     Capybara::ElementNotFound:
       Unable to find field ""new_field""
     # ./lib/capybara/node/finders.rb:41:in `block in find'
     # ./lib/capybara/node/base.rb:81:in`synchronize'
     # ./lib/capybara/node/finders.rb:30:in `find'
     # ./lib/capybara/node/actions.rb:53:in`fill_in'
     # ./lib/capybara/session.rb:396:in `block (2 levels) in <class:Session>'
     # ./lib/capybara/spec/session/fill_in_spec.rb:109:in`block (2 levels) in <top (required)>'
",dpdawson,session
1198,2013-11-26 08:18:45,"Which driver are you using? It's possible some of them haven't caught up with the 2.2.0 changes yet. We now require `reset` to be synchronous, because otherwise it can cause strange failures, but it might not be in all drivers yet.

It's pretty bad that this breaks the driver API. Maybe this assertion should be removed. Pulling in @mhoran, @jferris @jcoglan and @jonleighton.
",jnicklas,mhoran
1198,2013-11-26 08:18:45,"Which driver are you using? It's possible some of them haven't caught up with the 2.2.0 changes yet. We now require `reset` to be synchronous, because otherwise it can cause strange failures, but it might not be in all drivers yet.

It's pretty bad that this breaks the driver API. Maybe this assertion should be removed. Pulling in @mhoran, @jferris @jcoglan and @jonleighton.
",jnicklas,jcoglan
1198,2013-11-26 08:18:45,"Which driver are you using? It's possible some of them haven't caught up with the 2.2.0 changes yet. We now require `reset` to be synchronous, because otherwise it can cause strange failures, but it might not be in all drivers yet.

It's pretty bad that this breaks the driver API. Maybe this assertion should be removed. Pulling in @mhoran, @jferris @jcoglan and @jonleighton.
",jnicklas,jonleighton
1198,2013-11-26 08:18:45,"Which driver are you using? It's possible some of them haven't caught up with the 2.2.0 changes yet. We now require `reset` to be synchronous, because otherwise it can cause strange failures, but it might not be in all drivers yet.

It's pretty bad that this breaks the driver API. Maybe this assertion should be removed. Pulling in @mhoran, @jferris @jcoglan and @jonleighton.
",jnicklas,jferris
1198,2013-12-23 12:56:20,"For what it's worth: in Terminus, I cheat a little bit by disabling `find` after a `reset`, and enabling it again on the next `visit`. See `@find_enabled` in https://github.com/jcoglan/terminus/blob/master/lib/terminus/browser.rb.

Navigating to `about:blank` would be problematic; since Terminus has to access everything via a proxy in order to inject the JavaScript driver, so the response necessarily contains HTML.
",jcoglan,find
1197,2013-11-23 00:09:08,"The @browser instance variable was not being cleared when #quit was called, which could lead to an error if it was accessed again.  This change makes sure it gets reset to nil
",twalpole,browser
1194,2013-11-19 21:10:09,"This enables the rbx-2.1.1 build to run on travis.  @jnicklas : 2.1.0 on travis appears to just be missing since it doesnt even install, so I removed it from travis.yml completely.  2.0.0 appears not to install the ruby standard library since 'gem --version' errors our before we have a chance to run any scripts to install anything so I've moved that to allowed failures.   jruby is failing because stdout appears to be buffered so travis doesnt see any status output from rspec for 10 minutes and aborts the run.  Any ideas on that?
",twalpole,jnicklas
1194,2013-11-19 22:19:22,"@jnicklas I just changed to the documentation rspec formatter, when testing with jruby, which flushes the buffer so travis sees test progress
",twalpole,jnicklas
1194,2013-11-20 00:17:54,"@jnicklas - ok so now that the jruby test actually gets to run fully - it fails being unable to connect to chromedriver  - any thoughts on the cause of that?
",twalpole,jnicklas
1192,2013-11-15 17:34:32,"@jnicklas -  This is all the tests changed to use 'expect' syntax and changes made to get rid of all the deprecation warnings rspec 2.99.0.beta1 throws in advance of rspec 3 being released.  The downside to these changes is that the tests will no longer run with earlier rspecs than 2.99 due to the lack of the be_truthy/be_falsey matchers.  I'm not sure that its going to be possible to have tests that can ruin using either rspec 2.x or 3 without implementing our own be_truthy/be_falsey matchers if rspec doesnt have them.  Do you think this is worth continuing on currently?
",twalpole,jnicklas
1192,2014-04-01 19:34:13,"@abotalov 5 months ago when this PR was first started it was against 2.99 - since then the release of 3 is much closer and so now its testing against the beta of 3 - the base versions is set to rspec 2.2 and whatever the latest version of fuubar is compatible with that is.  
",twalpole,abotalov
1181,2013-10-28 21:58:45,"Thanks for contributing, and welcome ;)

I'm not sure if I like using a warning like this. At least the warning could be more descriptive.

I'd actually forgotten that we'd written tests codifying the behaviour of ignoring writes to readonly elements. Semver then tells us we shouldn't raise an exception.

I'm torn on this one. @twalpole, what do you think?
",jnicklas,twalpole
1180,2013-10-26 22:34:16,"Changes from @wtfiwtz with tests now added
",twalpole,wtfiwtz
1180,2013-10-26 22:40:45,"@jnicklas I created tests for this because it makes sense but @wtfiwtz hasnt come back, however I have one question.   @wtfiwtz implemented this in Form#params so the defaulting is only done at submit time, however ""real browsers"" return 'on' as the value of a checkbox/radio without a specified value any time its queried ( ie   field.value returns 'on' ) -- would you rather this be implemented through changes to Simple#value so its more like a real browser, or left as is ???
",twalpole,jnicklas
1180,2013-10-26 22:40:45,"@jnicklas I created tests for this because it makes sense but @wtfiwtz hasnt come back, however I have one question.   @wtfiwtz implemented this in Form#params so the defaulting is only done at submit time, however ""real browsers"" return 'on' as the value of a checkbox/radio without a specified value any time its queried ( ie   field.value returns 'on' ) -- would you rather this be implemented through changes to Simple#value so its more like a real browser, or left as is ???
",twalpole,wtfiwtz
1175,2013-10-18 15:35:10,"Using racktest the test for visibility is

native.xpath(""./ancestor-or-self::*[contains(@style, 'display:none') or contains(@style, 'display: none') or @hidden or name()='script' or name()='head']"").size == 0

Therefore <div style='display:none;'>xyz</div>   would be invisible, but your class of hide-form-div isn't interpreted. For the class to work you need a full browser that loads and interprets the css
",twalpole,style
1175,2013-10-18 15:35:10,"Using racktest the test for visibility is

native.xpath(""./ancestor-or-self::*[contains(@style, 'display:none') or contains(@style, 'display: none') or @hidden or name()='script' or name()='head']"").size == 0

Therefore <div style='display:none;'>xyz</div>   would be invisible, but your class of hide-form-div isn't interpreted. For the class to work you need a full browser that loads and interprets the css
",twalpole,hidden
1159,2013-09-05 04:20:04,"On different browsers,



Will submit different values during form submission if no value="""" attribute has been provided. Typically Firefox and Chrome supply the value ""on"" and this pull request makes the behaviour of Rack_Test consistent with those browsers.

http://stackoverflow.com/questions/10832640/input-checkbox-true-or-checked-or-yes
http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#h-17.4

To verify: setting the @javascript tag in cucumber resolved this, because Firefox was then used to render the page. However, I would prefer to run the cucumber test in a headless mode (for performance reasons).

Cheers,

Nigel
",wtfiwtz,javascript
1146,2013-08-19 22:00:38,"@ostraaten seems to talk about `Timeout::Error`.
If it's so it's a downstream issue (as you see in stack trace). It may be issue of Selenum or issue of one of Selenium's dependencies. It's not an issue of Capybara.

Usually Timeout::Errors and similar errors happen when you attempt to start multiple Selenium processes in parallel. I read that increasing number of ephemeral ports may help to solve it - https://code.google.com/p/selenium/wiki/ScalingWebDriver#Ephemeral_sockets

I remember I had a lot of those errors when I tried to run my tests in 5 threads. Currently I run them in one thread and don't see timeout errors.
",abotalov,ostraaten
1130,2013-07-30 10:57:16,"

@calculation.id return 456 or other id

That happened after update capybara to 2.1
",panSarin,calculation
1127,2013-07-24 18:57:49,"In #1115, @jnicklas suggested we change Result#inspect, to avoid confusion. This is that.

No new tests. Tests pass.
",srawlins,jnicklas
1115,2013-07-11 14:11:02,"I ran the following code:



I'm not able to iterate through the results.  In fact, it is showing me that there is only one results, even though the @elements variable has 3, which is what I expect.  Here is my debugging output:

(rdb:1) labels



(rdb:1) labels.size
1
(rdb:1) labels.first.text
""Video URL""
(rdb:1) labels.last.text
""Video URL""
(rdb:1) labels.instance_variable_get(""@elements"")[0].text
""Upload a Photo""
(rdb:1) labels.instance_variable_get(""@elements"")[1].text
""Upload a Photo""
(rdb:1) labels.instance_variable_get(""@elements"")[2].text
""Video URL""

I'm using Capybara version: 2.1.0
",rcarvalho,elements
1115,2013-07-23 23:50:04,"Capybara::Result does not [forward](https://github.com/jnicklas/capybara/blob/master/lib/capybara/result.rb#L32) `#size`, `#first`, or `#last` to `@elements`, but instead to `@result`, which is equal to `elements.select { |node| query.matches_filters?(node) }`. After looking at [#matches_filters?](https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L38), I'm going to hazard a guess that two of the labels are not visible, and you have `Capybara.ignore_hidden_elements` set?
",srawlins,elements
1115,2013-07-23 23:50:04,"Capybara::Result does not [forward](https://github.com/jnicklas/capybara/blob/master/lib/capybara/result.rb#L32) `#size`, `#first`, or `#last` to `@elements`, but instead to `@result`, which is equal to `elements.select { |node| query.matches_filters?(node) }`. After looking at [#matches_filters?](https://github.com/jnicklas/capybara/blob/master/lib/capybara/query.rb#L38), I'm going to hazard a guess that two of the labels are not visible, and you have `Capybara.ignore_hidden_elements` set?
",srawlins,result
1084,2013-05-15 20:49:17,"@jnicklas The fix I added makes all the tests pass, but I havent fully convinced myself request_path wasn't returning """" instead of ""/"", from the rescue, for some good reason.   Can you think of anything this change would break?
",twalpole,jnicklas
1082,2013-05-13 14:45:00,"I just upgraded my rails process to capybara 2.1, and then I get the following weird error in my cucumber scripts:



Now, what I am trying to do, is search (and find) an `svg` element, before I was able to do using the following (using css selectors):



This now fails. In the update to the new capybara version I can see we now have to include the `selenium-webdriver` explicitly, and I also saw the `xpath` gem was updated. 

I also noticed in the history that the css is now handled differently: it is no longer converted to xpath.

So when I tried writing the same query using xpath (I find css a lot more natural for me :)), it  just works.

So for now:
- using css selectors to retrieve svg elements no longer works
- xpath does still work --but it is harder for me :)

For completeness, I translated the following css selectors:
- `""#matrix_heat_map *[name()='svg']""`
- `""#matrix_heat_map *[name()='svg'] *[name()='g'] *[name()='rect'].cell""`

to the following xpath expressions:
- `"".//*[@id='matrix_heat_map']/*[name()='svg']""`
- `""//*[@id='matrix_heat_map']/*[name()='svg']/*[name()='g']/*[name()='rect'][@class='cell']""`

Not sure if it is intended behaviour that the css selectors no longer work as before, just thought to mention it.
",nathanvda,id
1082,2013-05-13 14:45:00,"I just upgraded my rails process to capybara 2.1, and then I get the following weird error in my cucumber scripts:



Now, what I am trying to do, is search (and find) an `svg` element, before I was able to do using the following (using css selectors):



This now fails. In the update to the new capybara version I can see we now have to include the `selenium-webdriver` explicitly, and I also saw the `xpath` gem was updated. 

I also noticed in the history that the css is now handled differently: it is no longer converted to xpath.

So when I tried writing the same query using xpath (I find css a lot more natural for me :)), it  just works.

So for now:
- using css selectors to retrieve svg elements no longer works
- xpath does still work --but it is harder for me :)

For completeness, I translated the following css selectors:
- `""#matrix_heat_map *[name()='svg']""`
- `""#matrix_heat_map *[name()='svg'] *[name()='g'] *[name()='rect'].cell""`

to the following xpath expressions:
- `"".//*[@id='matrix_heat_map']/*[name()='svg']""`
- `""//*[@id='matrix_heat_map']/*[name()='svg']/*[name()='g']/*[name()='rect'][@class='cell']""`

Not sure if it is intended behaviour that the css selectors no longer work as before, just thought to mention it.
",nathanvda,class
1081,2013-09-30 08:41:28,"@jnicklas did you have any particular concerns with this? I can rebase the branch if you're interested in merging it.
",TimMoore,jnicklas
1078,2013-05-28 18:42:19,"@jnicklas - thanks for the merge. This is effecting dependent gems upgrading to Capy2.1 (eg. jeroenvandijk/capybara-mechanize#51), any chance there's a patch release coming soon?
",phillbaker,jnicklas
1074,2013-05-06 19:51:43,"Instinctively this doesnt seem useful, although I could be wrong on that.  On the other hand the implementation is definitely not ""correct"".   Executing a simple nested call to find all anchor tags inside an element with an id
    @session.find_by_id('first').all('a')
ends up calling the before action and after action 7 times each (and thats with the elements on the page when the call is made, and no retries needed to wait for them)-  there's no way that can be intended?
",twalpole,session
1072,2013-05-09 06:52:10,"@mhoran is this the issue you're talking about? https://github.com/jonleighton/poltergeist/issues/176

It does seem like there may be no perfect solution here. I think it is important to be able to test the behavior of clearing out a field.

Another option would be to make it an explicit action: something like `clear_field 'name'` instead of `fill_in 'name', :with => ''`. The drawback is that it would need a new `clear` method on `Node` implementations. We could ease the burden on driver developers by putting a default implementation in `Capybara::Driver::Node` that just calls `self.set('')` and then leave it to driver developers to provide an alternate implementation if necessary to get the desired behavior.

What do you think, @jnicklas?
",TimMoore,jnicklas
1069,2013-04-29 20:55:21,"@jnicklas I moved the modify textarea contents part of this into one place Capybara::HTML -  If there's a different place you think it would fit better (or different name) let me know and I'll make that change
",twalpole,jnicklas
1068,2013-04-25 23:38:44,"I think this is more complicated than just adding the same gsub to Capybara::RackTest::Form#params .  I did a few little tests to compare browser behavior to rack-test

If the \n immediately following the textarea is in the original document and the form is submitted without changing the textarea contents then current behavior is the following
RackTest : submits the leading \n
FF via Selenium : ignores the leading \n (and a final \n if there is one) and all remaining \n are returned as \r\n

However if we set the content of the textarea to something with a leading \n then FF will not ignore that leading \n (or a final \n) and will return those converted to \r\n s

Just changing the params function to gsub out leading \n would potentially interfere with any changed values,
so we have to be careful that any changes dont strip the \n values that get set into the textarea during running.  There is also the question of whether we should be converting all \n to \r\n when the form is submitted as browsers do.  @jnicklas I've done some work on a fix for this, would be interested on your thoughts on the \r\n issue
",twalpole,jnicklas
1065,2013-04-22 21:10:17,"This changes the racktest driver to respond with ""true"" or nil when retrieving boolean attributes as the selenium driver does.  I'm ambivalent about this change but @abotalov feels pretty strongly about having the same behavior from all drivers so I have implemented this.  I'm not loving the ""true""/nil responses (which come from the webdriver spec) and maybe it would be better to change both drivers to respond with true/false for boolean attributes.  Either way getting tests that exactly match the expected returns will encourage other drivers to do the same thing.  I had code in Capybara::Node::Simple that verified the specified attribute name was valid for the current element before treating it as a boolean attrribute, however after looking at Selenium I removed it since they don't seem to verify that.  
",twalpole,abotalov
1065,2013-07-03 12:19:09,"Hmm, this adds so much code, and I don't feel that this is particularly valuable. @abotalov, you felt very strongly about this, do you really think this is necessary? It seems superfluous to me. :-1: 
",jnicklas,abotalov
1065,2013-08-26 14:39:17,"Closing. @abotalov never got back here, and I personally feel this is a bad idea.
",jnicklas,abotalov
1056,2013-04-30 00:13:34,"This has something to do when using the mechanize driver via `@mechanize`.
",brandon-beacher,mechanize
1051,2013-04-11 18:31:48,"From a quick look at this, I think Capybara::RSpecMatchers is not being included which means that rspecs method_missing for matchers is called and ends up just directly calling Capybara::Node::Matchers::has_selector? which won't correctly handle the waiting for the should_not.   When Capybara::RSpecMatchers is correctly included Capybara::RSpecMatchers::have_selector is called instead, which means that Capybara::RSpecMatchers::HaveSelector is used as the Matcher and will correctly convert over to calling assert_no_selector which will then correctly wait.   I think this also means that should_not have_no_xxxx  wont work properly since there are no have_no_xxxx methods that would generate a Capyabara::RSpecMatchers::HaveNoSelector  matcher, and therefore they wouldnt wait properly.   @jnicklas does this analysis seem correct?   As for why you're not getting Capybara::RSpecMatchers included properly, I'm not sure 
",twalpole,jnicklas
1051,2013-04-11 22:14:38,"Yes that sounds exactly right. You can clearly see by the error message
that the matchers are not being used.

On Thursday, April 11, 2013, Thomas Walpole wrote:

> From a quick look at this, I think Capybara::RSpecMatchers is not being
> included which means that rspecs method_missing for matchers is called and
> ends up just directly calling Capybara::Node::Matchers::has_selector? which
> won't correctly handle the waiting for the should_not. When
> Capybara::RSpecMatchers is correctly included
> Capybara::RSpecMatchers::have_selector is called instead, which means that
> Capybara::RSpecMatchers::HaveSelector is used as the Matcher and will
> correctly convert over to calling assert_no_selector which will then
> correctly wait. I think this also means that should_not have_no_xxxx wont
> work properly since there are no have_no_xxxx methods that would generate a
> Capyabara::RSpecMatchers::HaveNoSelector matcher, and therefore they
> wouldnt wait properly. @jnicklas https://github.com/jnicklas does this
> analysis seem correct? As for why you're not getting
> Capybara::RSpecMatchers included properly, I'm not sure
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/issues/1051#issuecomment-16252816
> .
",jnicklas,jnicklas
1047,2013-04-10 15:02:16,"The current advice causes ""This connection is still waiting"" errors when both threads try to use the connection at the same time. I've been using this improved monkey-patch (by @mperham) for a while with no problems.

See: https://github.com/brianmario/mysql2/issues/99
And: https://gist.github.com/mperham/3049152
",adammck,mperham
1041,2013-04-20 19:14:19,"@aboltalov - Selenium prefers property over attribute because 99.9% of the time when testing the user really wants the property and not the attribute (if there is a difference between the them).  If this is really an issue for you then maybe bugs filed in Capybara-Webkit and Poltergeist would be the best thing and a pull request to make the racktest driver handle the boolean attributes and url attributes as specified in the WebDriver spec.  I dont see how ""Selenium returns property instead of attribute when #[] is invoked"" is actually a bug in capybara?
",twalpole,aboltalov
1040,2013-04-28 18:59:17,"hm got it.. and yeah, the `#check` method doesn't filter by value...

I avoid to do my tests filtering by name or id because i always try to simulate the real user behavior..

@jnicklas  what do you think about this? 
",carloslopes,jnicklas
1038,2013-04-02 22:15:44,"I think it's good to reset sessions in all cases where it doesn't lead to increase of test execution time.

But in some cases it will be useful not to reset sessions after each scenario to:
1. make checks for the same page in different scenarios
2. minimize test execution time by not visitng that page before each scenario

I know that I can remove `require 'capybara/cucumber'` from `env.rb` and make tests to use own `cucumber.rb` but I think it should be possible to do it without that ""monkeypatching""

I think `@no_reset_sessions` shouldn't be documented in README.md as I think this feature is dangerous and thus it should be a bit harder to find information about it.
",abotalov,no
1038,2013-04-03 19:41:35,"With this PR user decides himself to use it or not `@no_reset_sessions`. I see a problem with providing own `cucumber.rb` file that if unrelated changes to this file are made in Capybara repo, they don't become available in code of user tests and user of API should check Capybara's source code to find out if it was changed.
",abotalov,no
1037,2013-04-02 12:39:02,"Wow this is very impressive. I'm intent on pushing Capybara 2.1 RC1 very soon, so this will not make it into Capybara 2.1, as it will take some further deliberation before we can get this merged. Just wanted to point that out up front.

A few things I noticed:
1. We metaprogram in all other methods in the session, why not do the same with NOTIFICATION_METHODS?
2. This API should be opt-in for driver authors, so it should have it's own `:requires` metadata, so that driver authors can skip it if they desire.
3. I find the utility of confirming multiple prompts/alerts/confirms dubious, especially since we can't mix and match with the suggested API. There is no way to handle both a prompt and a following alert, so why bother with this at all?
4. The surfact area towards drivers is very large, do we really have to add that many methods?
5. I'm concerned about synchronization. Capybara should not leave that up to the driver. If for example the alert appears due to an async process 50ms later than the action that was supposed to trigger it, then Capybara should be able to handle that, and that should work without the driver authors having to do anything special, just as it does with elements.

Finally, let's get the driver authors involved in this discussion, @jferris, @jonleighton, @mhoran, @jcoglan, any comments on this?
",jnicklas,jferris
1037,2013-04-02 12:39:02,"Wow this is very impressive. I'm intent on pushing Capybara 2.1 RC1 very soon, so this will not make it into Capybara 2.1, as it will take some further deliberation before we can get this merged. Just wanted to point that out up front.

A few things I noticed:
1. We metaprogram in all other methods in the session, why not do the same with NOTIFICATION_METHODS?
2. This API should be opt-in for driver authors, so it should have it's own `:requires` metadata, so that driver authors can skip it if they desire.
3. I find the utility of confirming multiple prompts/alerts/confirms dubious, especially since we can't mix and match with the suggested API. There is no way to handle both a prompt and a following alert, so why bother with this at all?
4. The surfact area towards drivers is very large, do we really have to add that many methods?
5. I'm concerned about synchronization. Capybara should not leave that up to the driver. If for example the alert appears due to an async process 50ms later than the action that was supposed to trigger it, then Capybara should be able to handle that, and that should work without the driver authors having to do anything special, just as it does with elements.

Finally, let's get the driver authors involved in this discussion, @jferris, @jonleighton, @mhoran, @jcoglan, any comments on this?
",jnicklas,jcoglan
1037,2013-04-02 12:39:02,"Wow this is very impressive. I'm intent on pushing Capybara 2.1 RC1 very soon, so this will not make it into Capybara 2.1, as it will take some further deliberation before we can get this merged. Just wanted to point that out up front.

A few things I noticed:
1. We metaprogram in all other methods in the session, why not do the same with NOTIFICATION_METHODS?
2. This API should be opt-in for driver authors, so it should have it's own `:requires` metadata, so that driver authors can skip it if they desire.
3. I find the utility of confirming multiple prompts/alerts/confirms dubious, especially since we can't mix and match with the suggested API. There is no way to handle both a prompt and a following alert, so why bother with this at all?
4. The surfact area towards drivers is very large, do we really have to add that many methods?
5. I'm concerned about synchronization. Capybara should not leave that up to the driver. If for example the alert appears due to an async process 50ms later than the action that was supposed to trigger it, then Capybara should be able to handle that, and that should work without the driver authors having to do anything special, just as it does with elements.

Finally, let's get the driver authors involved in this discussion, @jferris, @jonleighton, @mhoran, @jcoglan, any comments on this?
",jnicklas,jonleighton
1037,2013-04-02 12:39:02,"Wow this is very impressive. I'm intent on pushing Capybara 2.1 RC1 very soon, so this will not make it into Capybara 2.1, as it will take some further deliberation before we can get this merged. Just wanted to point that out up front.

A few things I noticed:
1. We metaprogram in all other methods in the session, why not do the same with NOTIFICATION_METHODS?
2. This API should be opt-in for driver authors, so it should have it's own `:requires` metadata, so that driver authors can skip it if they desire.
3. I find the utility of confirming multiple prompts/alerts/confirms dubious, especially since we can't mix and match with the suggested API. There is no way to handle both a prompt and a following alert, so why bother with this at all?
4. The surfact area towards drivers is very large, do we really have to add that many methods?
5. I'm concerned about synchronization. Capybara should not leave that up to the driver. If for example the alert appears due to an async process 50ms later than the action that was supposed to trigger it, then Capybara should be able to handle that, and that should work without the driver authors having to do anything special, just as it does with elements.

Finally, let's get the driver authors involved in this discussion, @jferris, @jonleighton, @mhoran, @jcoglan, any comments on this?
",jnicklas,mhoran
1037,2014-04-03 07:15:09,"I would prefer to wait for response to https://www.w3.org/Bugs/Public/show_bug.cgi?id=24979 to be made in Webdriver W3C bug tracker.

I think W3C specs are important and IMO it would be better to provide similar non-block API instead of rolling block one. Maybe, @AutomatedTester will be able to say something about it.
",abotalov,AutomatedTester
1022,2013-03-26 19:49:36,"Looks like @jnicklas merged this branch using [ordinary commit](https://github.com/jnicklas/capybara/commit/5c1229acf94dc4a54531a4d72a1959b9fe1c10f4), not merge button 
",abotalov,jnicklas
1022,2013-03-26 19:56:59,"Hmm, weird. @github usually picks that up.
",jnicklas,github
1014,2013-03-16 21:27:48,"@delinquentme since you seem to have deleted the post where you were trying to access the 10th anchor when only 8 exist I assume you've figured out what was wrong, and I'm going to close this.  Next time please ask questions about usage on the mailing list instead of opening an issue
",twalpole,delinquentme
1013,2013-03-15 19:32:29,"@jnicklas - You said to just commit simple changes (and this one is pretty simple) - but it could affect other driver writers so I'll leave it up to you to commit :)
",twalpole,jnicklas
1013,2013-03-21 03:44:00,"WebKit doesn't seem to share this behavior. Ping @jonleighton.
",mhoran,jonleighton
1009,2013-03-13 00:26:13,"Following up on #1005 and #843.  
This gist:
https://gist.github.com/jpurcell001/5148357

Appears to fail regularly when run under capybara master.  Tried it with webkit, poltergeist, and selenium, and was able to get it fail under all three.  
When putting a `rescue puts @sess.html` after the failed find, it looks like the element is there - but somehow the nested blocks are creating confusion.

Let me know if you're able to reproduce using this.
",jpurcell001,sess
996,2013-03-08 20:53:57,"@jnicklas @abotalov mentioned that fieldset supports the disabled attribute, and the spec says ""When specified, causes all the form control descendants of the fieldset element, excluding those that are descendants of the fieldset element's first legend element child, if any, to be disabled.""   This is not currently supported in racktest, and a quick test with selenium seems to show that it gets it wrong too (field is actually disabled in the browser, but the native element returns that its enabled).  Not sure if its worth trying to implement.
",twalpole,abotalov
996,2013-03-10 14:31:27,"I am a concerned about the performance issue that @abotalov has pointed out. I did some benchmarking, with this code: https://gist.github.com/jnicklas/5128764

Running against this pull request:



For comparison, here it is running against master:



We can see that there is some variance, but clearly, this pull request yields an almost x2 decrease in performance when locating buttons. Unless the benchmark is somehow flawed.

To me, that's not really acceptable. @sobrinho and other who wanted this, what do you think?
",jnicklas,sobrinho
991,2013-03-07 15:55:03,"The timeout is 60s, it used to be configurable, but it isn't anymore, for some reason I can't quite remember. @joliss tinkered with that stuff a while ago, maybe she remembers. Remember that at this point your app is probably already _loaded_ we're only talking about actually _booting_ it, which _should_ be very fast.
",jnicklas,joliss
987,2013-03-02 03:57:00,"Error pointed out by @jcoglan
",twalpole,jcoglan
984,2013-02-28 15:49:06,"I'm creating this as kind of a meta issue, so the process isn't as much in my head. I think we're in a fairly good state right now. I just upgraded a project from Capybara 1.1.4 to 2.1 as an exercise and it worked pretty well, only a few failures, all of which could be fixed easily by using the new `:match` option.

I want to release a beta in the next couple of days. I really want to get #982 fixed for the final release, but maybe we can release the beta before it is finished?
## Beta

In a couple of days.
- [x] Fix #982?
- [x] Release xpath 2.0.0.beta
- [x] Coordinate with driver authors
- [x] Update history file
- [x] Publish blog post re new features. Draft here: https://gist.github.com/jnicklas/ea03263353d98c6dfae8
- [x] Add post install instruction to gem file, warning of default change?
## RC

Wait two weeks, maybe?
- [x] Make sure capy-webkit and poltergeist have releases available
## Final

One week after RC?
- [x] Release final xpath 2.0.0
## Drivers?

@jonleighton, @jferris, @mhoran, @jcoglan, we have some breaking changes coming in 2.1 as you know from previous discussions. I'd like to coordinate so that we have releases for the drivers as soon as possible. Do you guys have time to work on this in the coming weeks? Is there anything I can do to help?
",jnicklas,jferris
984,2013-02-28 15:49:06,"I'm creating this as kind of a meta issue, so the process isn't as much in my head. I think we're in a fairly good state right now. I just upgraded a project from Capybara 1.1.4 to 2.1 as an exercise and it worked pretty well, only a few failures, all of which could be fixed easily by using the new `:match` option.

I want to release a beta in the next couple of days. I really want to get #982 fixed for the final release, but maybe we can release the beta before it is finished?
## Beta

In a couple of days.
- [x] Fix #982?
- [x] Release xpath 2.0.0.beta
- [x] Coordinate with driver authors
- [x] Update history file
- [x] Publish blog post re new features. Draft here: https://gist.github.com/jnicklas/ea03263353d98c6dfae8
- [x] Add post install instruction to gem file, warning of default change?
## RC

Wait two weeks, maybe?
- [x] Make sure capy-webkit and poltergeist have releases available
## Final

One week after RC?
- [x] Release final xpath 2.0.0
## Drivers?

@jonleighton, @jferris, @mhoran, @jcoglan, we have some breaking changes coming in 2.1 as you know from previous discussions. I'd like to coordinate so that we have releases for the drivers as soon as possible. Do you guys have time to work on this in the coming weeks? Is there anything I can do to help?
",jnicklas,jcoglan
984,2013-02-28 15:49:06,"I'm creating this as kind of a meta issue, so the process isn't as much in my head. I think we're in a fairly good state right now. I just upgraded a project from Capybara 1.1.4 to 2.1 as an exercise and it worked pretty well, only a few failures, all of which could be fixed easily by using the new `:match` option.

I want to release a beta in the next couple of days. I really want to get #982 fixed for the final release, but maybe we can release the beta before it is finished?
## Beta

In a couple of days.
- [x] Fix #982?
- [x] Release xpath 2.0.0.beta
- [x] Coordinate with driver authors
- [x] Update history file
- [x] Publish blog post re new features. Draft here: https://gist.github.com/jnicklas/ea03263353d98c6dfae8
- [x] Add post install instruction to gem file, warning of default change?
## RC

Wait two weeks, maybe?
- [x] Make sure capy-webkit and poltergeist have releases available
## Final

One week after RC?
- [x] Release final xpath 2.0.0
## Drivers?

@jonleighton, @jferris, @mhoran, @jcoglan, we have some breaking changes coming in 2.1 as you know from previous discussions. I'd like to coordinate so that we have releases for the drivers as soon as possible. Do you guys have time to work on this in the coming weeks? Is there anything I can do to help?
",jnicklas,jonleighton
984,2013-02-28 15:49:06,"I'm creating this as kind of a meta issue, so the process isn't as much in my head. I think we're in a fairly good state right now. I just upgraded a project from Capybara 1.1.4 to 2.1 as an exercise and it worked pretty well, only a few failures, all of which could be fixed easily by using the new `:match` option.

I want to release a beta in the next couple of days. I really want to get #982 fixed for the final release, but maybe we can release the beta before it is finished?
## Beta

In a couple of days.
- [x] Fix #982?
- [x] Release xpath 2.0.0.beta
- [x] Coordinate with driver authors
- [x] Update history file
- [x] Publish blog post re new features. Draft here: https://gist.github.com/jnicklas/ea03263353d98c6dfae8
- [x] Add post install instruction to gem file, warning of default change?
## RC

Wait two weeks, maybe?
- [x] Make sure capy-webkit and poltergeist have releases available
## Final

One week after RC?
- [x] Release final xpath 2.0.0
## Drivers?

@jonleighton, @jferris, @mhoran, @jcoglan, we have some breaking changes coming in 2.1 as you know from previous discussions. I'd like to coordinate so that we have releases for the drivers as soon as possible. Do you guys have time to work on this in the coming weeks? Is there anything I can do to help?
",jnicklas,mhoran
984,2013-02-28 16:38:08,"I think @mhoran implemented/merged everything we need:
- `Node#all_text`
- Native CSS
- `#title`
- `Node#hover` (work in progress)

Based on previous discussions and the draft blog post, I think we're covered. Anything we missed?
",jferris,mhoran
979,2013-02-26 07:58:50,"@jnicklas - This PR adds selenium with chrome to the tests - There is one test failure currently   

Failure/Error: expect do
 expected TestApp::TestAppError but nothing was raised
 # ./lib/capybara/spec/session/reset_session_spec.rb:36:in `block (2 levels) in <top (required)>'

This doesnt occur if just the chrome specs are run, or just the firefox, but if both are run the error occurs.  I'm 99% sure this is because of the way Capybara::Server caches and looks up the port for server instances by object_id, meaning that even though I create a separate test session for chrome which creates a server object, that server object doesnt actually get booted (doesnt error either), and instead the tests are hitting the server object created for the firefox session.  This doesnt make any difference for most of the tests except the one failing since it checks the internal error state of the server object it thinks is handling requests, but ends up not. Not sure what the best way to fix that error would be, any suggestions?
",twalpole,jnicklas
979,2013-04-13 22:52:55,"@TimMoore Just tried it -  same issues you're having with it just hanging when using Chrome 26.0.1410.65 and chromedriver 26.0.1383.0 .  Strangely if one removes the 
    @browser.navigate.to('about:blank')
from Capybara::Selenium::Driver#reset!  then the tests work fine (other than the reset_session tests obviously).  It seems that either Chrome or chromedriver may be having an issue with changing the URL rapidly or something.
",twalpole,browser
976,2013-02-26 00:06:09,"Ping @jonleighton. I'll get this in the pipeline for capybara-webkit. Fortunately we just implemented native click events.
",mhoran,jonleighton
966,2013-02-21 02:16:15,"Please see this repo for the specs that are failing for me:
https://github.com/jakeonrails/broken-url-helpers

The code I shared used to work before upgrading to the latest Rspec/Capybara and moving my Capybara specs into the spec/features directory.

Am I doing it wrong? Why does spec/features (or Capybara) break the way URL helpers work?

I have tried changing `Capybara.default_host`, `Capybara.app_host`, along with trying to use `host! = ""xyz""`, and `@request.host = ""xyz""`, all to no avail.

Thanks in advance!
",jakeonrails,request
965,2013-02-20 22:35:34,"@abotalov I'm pretty sure it gets reset for every test in Capybara::SpecHelper::reset!  - if I'm wrong about that I'll be happy to store and reset the setting
",twalpole,abotalov
965,2013-02-20 22:40:07,"1. I think specs to `resize_window` and `hover` shouldn't belong to the same group. For example capybara-webkit currently supports `resize_window` but doesn't support hover without executing script (at least at first glance, I haven't used it)
2. @jnicklas If we support set of window size, we should also support get of size. What about alias:
   `window_size=(width, height)`  
   and method:  
   `window_size` returning 2 values: width and height

Also please take a look at [Selenium's Window class](http://selenium.googlecode.com/svn/trunk/docs/api/rb/Selenium/WebDriver/Window.html). Do we need separate class? I think no but want to point it out
",abotalov,jnicklas
965,2013-02-21 20:26:11,"I dont dealing find dealing with @aboltalov to be worth doing this, closing PR, someone else can add this feature if its wanted
",twalpole,aboltalov
961,2013-02-16 21:35:00,"@jnicklas - Seeing issue #923 get closed this morning (request for :invalid pseudo selector support), it made me revisit something I'd been meaning to look at for a while.  Why always convert css to xpath when browsers can handle direct css searches?  This PR is the beginning of work on allowing css selectors to just flow through and be searched for as css, which would allow for css pseudo selectors to be used on browsers that support them.  Currently this code would require drivers to implement a find_css method which is obviously not optimal. I think a better way may be for find to  take a second parameter indicating whether the selector is xpath or css, and a way for the driver to indicate whether it will accept css, but this would break the current driver api.  I've also implemented the :disabled and :enabled pseudo selectors in the RackTest driver as proof that some of the css pseudo selectors can be implemented there (obviously not :invalid).  Your thoughts on how best to implement this, and whether or not you would consider it are appreciated before I finish it up
",twalpole,jnicklas
961,2013-02-17 11:45:53,"I'm not sure. I like the implementation, it's quite unobtrusive. There are a couple of things which should probably be cleaned up, but overall it looks pretty good. I guess we should involve the author driver authors in this discussion as well. Ping @jonleighton, @jcoglan, @jferris, @mhoran.
",jnicklas,jferris
961,2013-02-17 11:45:53,"I'm not sure. I like the implementation, it's quite unobtrusive. There are a couple of things which should probably be cleaned up, but overall it looks pretty good. I guess we should involve the author driver authors in this discussion as well. Ping @jonleighton, @jcoglan, @jferris, @mhoran.
",jnicklas,jcoglan
961,2013-02-17 11:45:53,"I'm not sure. I like the implementation, it's quite unobtrusive. There are a couple of things which should probably be cleaned up, but overall it looks pretty good. I guess we should involve the author driver authors in this discussion as well. Ping @jonleighton, @jcoglan, @jferris, @mhoran.
",jnicklas,jonleighton
961,2013-02-17 11:45:53,"I'm not sure. I like the implementation, it's quite unobtrusive. There are a couple of things which should probably be cleaned up, but overall it looks pretty good. I guess we should involve the author driver authors in this discussion as well. Ping @jonleighton, @jcoglan, @jferris, @mhoran.
",jnicklas,mhoran
961,2013-02-18 23:13:29,"@jnicklas Good catch - I missed the conversion, although its not overriding @preferred_format, because @preferred_format is only set in css (it defaults to :xpath in initialize)
",twalpole,preferred
960,2013-02-16 18:18:26,"This is really a question to @jonleighton, @jcoglan and @mhoran mostly, but really anyone who authors capybara drivers.

I want to break the driver API for Capybara 2.1 by introducing a new method `#full_text` on nodes, as opposed to the regular `#text`. This would return the text of the node as it appears in the source, ignoring visibility. The name of this method doesn't really matter as it wouldn't be exposed to regular users, so I'm open to suggestions.

The idea is to have `Capybara::Element#text` take a boolean flag which would control which driver method is called. The default would be to use `Capybara.ignore_hidden_elements`, so that the behaviour matches that of finding elements and can be controlled through a config option. In order to not break semver, we'll include a config option which makes sure that text always returns only visible text, something like `Capybara.only_visible_text = true`.

We're changing some other defaults as well, so I'm not too concerned about breaking compatibility of the public API, but obviously this would break the driver API.

I know @jonleighton was campaigning for this even before 2.0 was released, and I should have listened then. Sorry about that.

Are you guys okay with that breakage?
",jnicklas,mhoran
960,2013-02-16 18:18:26,"This is really a question to @jonleighton, @jcoglan and @mhoran mostly, but really anyone who authors capybara drivers.

I want to break the driver API for Capybara 2.1 by introducing a new method `#full_text` on nodes, as opposed to the regular `#text`. This would return the text of the node as it appears in the source, ignoring visibility. The name of this method doesn't really matter as it wouldn't be exposed to regular users, so I'm open to suggestions.

The idea is to have `Capybara::Element#text` take a boolean flag which would control which driver method is called. The default would be to use `Capybara.ignore_hidden_elements`, so that the behaviour matches that of finding elements and can be controlled through a config option. In order to not break semver, we'll include a config option which makes sure that text always returns only visible text, something like `Capybara.only_visible_text = true`.

We're changing some other defaults as well, so I'm not too concerned about breaking compatibility of the public API, but obviously this would break the driver API.

I know @jonleighton was campaigning for this even before 2.0 was released, and I should have listened then. Sorry about that.

Are you guys okay with that breakage?
",jnicklas,jcoglan
960,2013-02-16 18:18:26,"This is really a question to @jonleighton, @jcoglan and @mhoran mostly, but really anyone who authors capybara drivers.

I want to break the driver API for Capybara 2.1 by introducing a new method `#full_text` on nodes, as opposed to the regular `#text`. This would return the text of the node as it appears in the source, ignoring visibility. The name of this method doesn't really matter as it wouldn't be exposed to regular users, so I'm open to suggestions.

The idea is to have `Capybara::Element#text` take a boolean flag which would control which driver method is called. The default would be to use `Capybara.ignore_hidden_elements`, so that the behaviour matches that of finding elements and can be controlled through a config option. In order to not break semver, we'll include a config option which makes sure that text always returns only visible text, something like `Capybara.only_visible_text = true`.

We're changing some other defaults as well, so I'm not too concerned about breaking compatibility of the public API, but obviously this would break the driver API.

I know @jonleighton was campaigning for this even before 2.0 was released, and I should have listened then. Sorry about that.

Are you guys okay with that breakage?
",jnicklas,jonleighton
960,2013-02-16 18:19:14,"And @jferris, of course!
",jnicklas,jferris
956,2013-02-11 19:22:07,"@spaceghost there is already a test for a button inside a form that has a form attribute associating it with a different form
",twalpole,spaceghost
955,2013-02-15 21:54:39,"Excellent work from @twalpole on submitting a fix. Can you check and see if the fix works for you?
",jnicklas,twalpole
953,2013-02-06 19:40:54,"As it was decided here https://github.com/jnicklas/capybara/pull/898 , this adds the #title method to Capybara document. So, in tests we can use @session.title.should == 'Test Title'
",molfar,session
952,2013-02-05 19:07:59,"@jnicklas Do you think it's worth to change behavior of `text` if it's `<pre>` element where [type of whitespace matters.](http://www.w3.org/TR/html401/struct/text.html#h-9.1)
",abotalov,jnicklas
952,2013-02-05 20:16:54,"Finally got this to work with the following:
`page.find(""pre#log"").instance_eval( '@base' ).invoke( 'text' ).gsub( ""\r"", ""\n"" ).split( ""\n"" ).count.should == 8`
",brainhurricane,base
952,2013-08-27 18:22:37,"@beggerss Using capybara-webkit, I found I could use `page.find( '#log' ).instance_eval( '@base' ).invoke( 'text' )` to get the raw text of the `#log` element, instead of `page.find( '#log' ).text` --- does this work for you?
",brainhurricane,base
952,2013-08-27 18:27:04,"@brainhurricane I'm trying to download a PDF within `<pre>` tags. I've been using `page.find(:xpath, '/html/body/pre').instance_eval('@base').invoke('text')` and it looks properly formatted, however my PDF viewer says the doc is damaged, and it is about 1.5x larger a file than the original, viewable PDF
",beggerss,base
947,2013-01-29 00:02:50,"Node#all returns.

@jnicklas - As discussed on the [mailing list](https://groups.google.com/forum/?fromgroups=#!topic/ruby-capybara/1JEwsbqJQ8s)
",mdgreenfield,jnicklas
945,2013-01-25 02:47:16,"Simple one-liner fix to remove warnings about @server being
uninitialized when run as part of test suites with -w enabled
",rurounijones,server
945,2013-01-25 02:47:41,"another option, if this one-liner is not liked is to simple add an else @server = nil to the original if statement.
",rurounijones,server
942,2013-01-28 08:53:13,"Heh, I just saw [this exchange](https://github.com/jnicklas/xpath/commit/0bfd283a1147c7d07e6cfc6b1683aa09a489c843#commitcomment-2392254). @jnicklas have you expounded on that new set of tools on the mailing list or anywhere?
",ches,jnicklas
934,2013-01-10 15:07:28,"See https://gist.github.com/4502533

I have a series of tests which work with data which is hidden by default. Before the latest update, the tests would pass by me clicking on a link that made them visible, and then asserting their presence. But now all of those tests are failing. Obviously if I add the @javascript tag then everything works, but I'd prefer not to do that if possible.

The gist above recreates the problem. I confirmed that the above test works with Capybara 1.1.4 but not in 2.0.0 or above.
",CoryFoy,javascript
923,2013-02-19 19:21:49,"@trevoke PR #961 has been merged into master, so the :invalid pseudo selector should work once capybara 2.1 is released and whatever driver you are using is updated (assuming the browser you are testing against supports :invalid)
",twalpole,trevoke
920,2012-12-26 17:17:17,"Rack::Handler::Thin.run() (and, by extension, Capybara.server.call())
can return immediately if another Thin handler is already running.  This
results in a race condition where `@server_thread` can finish running
before we evaluate `responsive?`.   The easiest solution seems to be to
just remove the check that `@server_thread` is alive - it's quite possible
that EventMachine has merged the new server into a previous one, so we don't
particularly care about the state of our own thread.

---

I was having trouble running Capybara's tests successfully - I would keep getting timeout errors while booting, particularly in current_url_spec.rb and server_spec.rb (both of which create multiple Capybara::Servers), and eventually traced it down to this.  Has anyone else had trouble with that or is it just me?
",jdelStrother,server
920,2012-12-26 18:05:11,"I have no idea why we are doing that check anyway. @joliss, any ideas?
",jnicklas,joliss
920,2012-12-26 20:03:41,"I'm not sure. It was added by @raggi in ab62b27ae1c3836351a9a08ac9db729ed7e01f25. @raggi, any insights?
",joliss,raggi
920,2012-12-26 21:25:11,"... and github finally noticed the new branch.

The new version replaces the server_thread ivar with a local variable, which seems appropriate, assuming we really don't need the @server_thread check in `responsive?`.
",jdelStrother,server
913,2012-12-18 16:35:23,"In `spec/dsl_spec.rb`, there was a `before` clause defining `@session`, but it wasn't being used in any of the specs in that context.  Instead, each spec creates its own version of it.   This removes the duplication by making use of the already-existing `@session` variable.
",randycoulman,session
911,2013-01-22 07:42:43,"Ah yeah, there's a bunch of issues around Firefox and focus, especially on OSX, but in general this works :) Personally I'm hoping @jnicklas will merge this, and then phantomjs and the like will eventually integrate it, rather than relying on selenium.
",JonRowe,jnicklas
911,2013-03-05 00:37:05,"Seems a bit crazy :) Maybe @jarib has some insight if this is a sane thing to do?
",jnicklas,jarib
911,2013-03-06 10:28:35,"I think writing a good bug report against `focusmanager.testmode` would be the better action to take (cc @AutomatedTester).

That said. I'd be more concerned about the hack to work around the ElementNotVisible error than the focus bug. You're essentially giving Capybara the ability to type into an element a real user would not be able to type into. 

Also I think it's a bad practice in general to just work around what you think is incorrect behaviour in WebDriver, which does occasionally happen even though we've got it right in this case. :) If you don't let us know we won't have a chance to fix it.
",jarib,AutomatedTester
904,2013-02-22 22:02:57,"Alright that was silly: the text I'm looking for is in a div with `style=""display:none;""` and that div is shown once some JavaScript gets loaded. So I just told the fake Rack app to serve JS resources as well and tagged the scenario with `@javascript` and it works now. Looks like Capybara 1.x didn't care about node visibility. Thanks for all the pointers.
",infertux,javascript
901,2012-12-05 10:33:25,"Migration to 2.0.1 from 1.1.4 went fine, except for one thing: I need to mimic the client URL for some of my tests. In 1.1.4 I could simply do:



That way the @request.host would neatly give me ""www.test.com"" on the server side.

With 2.0.1, however, the ""Capybara.app_host = URL"" actually visits the URL. So in the example above, the browser navigates to www.test.com upon assignment. 

Is this intended behavior? If so, what is the 2.X way of mimicking the client URL?
",plindelauf,request
901,2012-12-10 12:42:21,"In addition I found that when running Cucumber in @javascript mode, the request.host = ""127.0.0.1"" and in non-javascript mode it is ""www.example.com"". This seems to be related...
",plindelauf,javascript
900,2012-12-05 21:21:49,"Thanks @kdotme. This has been plaguing me for some time.
",dmtroyer,kdotme
895,2012-11-29 18:44:00,"FWIW, I can do this in my spec_helper:

  config.before(:each, :type => :request) do
     @page_body = page.find('body')
  end

and have access to the page's body scope from everywhere.  But it feels sort of ""dirty.""
",DaveSanders,page
880,2012-11-22 00:05:29,"I wasn't able to replicate it in a fresh repository. I did notice during this process that I had a dependency of @ngauthier's domino gem in my development group, which depends on Capybara. I moved it into the test group, re-bundled, and everything was fixed.

I'm closing this issue; if anyone else comes across problem this I recommend triple-checking your `Gemfile.lock` to see what other gems may be adding a capybara dependency where you're not expecting it.
",subelsky,ngauthier
873,2012-11-19 12:52:48,"Hi @jnicklas,

What do you think about improving the message of have_field matcher?

Currently we don't have a nice message, take a look:



I know it's not `35,0000`, but what value is?

I was thinking in something like:


",sobrinho,jnicklas
871,2012-11-18 03:54:12,"> Specs which expect content as a result of anything but a GET request
> fail on drivers that define both #source and #body, when #source
> retrieves content via a GET request.

I'm not sure if that is sound behavior on the driver's side.

That said, these specs should in any case be changed to use `page.should have_content` instead of checking `@session.body`. `visit` is asynchronous, and `@session.body/html` doesn't wait for it. As a result we can end up with flickering tests. We have been replacing many instances of `body` with `has_content?` calls (268b7caf32e058af0da588a40f65fa1767104714), but we're not completely done. If you could submit a patch that moves us further in that direction (it might be straightforward), I'd be more than happy to merge it.
",joliss,session
871,2012-11-18 04:09:21,"@jnicklas We could (without any change to the public API behavior) unify the spec to say: `html` (and synonymously `body` and `source`) return the state of the DOM. And in case of RackTest, we do the next most sensible thing and return the original source.

The current differentiation (original source vs. DOM) doesn't really make much sense IMO, since not one driver actually has different behavior for those methods.

Thoughts?
",joliss,jnicklas
871,2012-11-20 13:29:18,"@mhoran, @jferris (and maybe @jonleighton): can you guys take a look at this pull request #877 and see if that solves the problem.
",jnicklas,jonleighton
870,2012-11-18 04:14:09,"Hey @jarib, could you take a look at the OP's bug description please? I'm wondering if there's a faster/cleaner way to fix it than sending repeated `:backspace` keys.
",joliss,jarib
868,2012-11-17 00:33:27,"Thanks for fixing. I don't know what I was thinking when I wrote that code.

@jnicklas, do you want to push out 2.0.1?
",joliss,jnicklas
861,2015-03-30 21:55:23,"@cihad Please post how to questions on the mailing list as requested in the README, rather than tacking them on to issues that have been closed for well over 2 years
",twalpole,cihad
848,2012-10-17 16:35:31,"Firstly, I appreciate how hard it is to debug this issue, or even figure out if Capybara is indeed at fault, but I believe Capybara and or the Capybara-Webkit driver is the most likely culprit.  So I appreciate any help if you can help.

I am on OS X 10.8.1 with the latest version of all gems, QT webkit and Ruby 1.9.3 available.  I'll post the info further down for your reference.

I have found that recently when running a few small Cucumber tests using `rake cucumber:wip` everything tends to work fine.  However, when I run the full suite I find the tests just hang for some reason, and never fix themselves.  I have seen this in my CI environment (Mac as well, but OS OX 10.7) as well.  And I only seem to see this when Capybara-Webkit is enabled, however it does seem to hang sometimes before Capybara-Webkit is invoked.

For example, in my most recent run, I ran `rake cucumber` and 34 scenarios across 5 feature files ran OK, and then oddly when I hit the 6th feature file (one of many more), it hung on the first scenario.

Here is the output from the test on that scenario showing, and importantly it does not seem like the @javascript interpretor has yet been invoked (I use capybara-webkit) as it got stuck on the Background portion:



The @javascript declaration in fact comes later in the scenario declaration, not in the background section, so to be honest I'm not sure if Capybara detects that in advance and switches to the :javascript driver, or if it only switches when the Scenario starts that is tagged with @javascript.

Anyway, clearly it is hanging on the next step in the Background which is `And I am signed in as ""John""`
The code for this step is as follows:



Now I could include all the code for this step if you want, but it's all pretty bog standard Capybara code.  For example, here are two of the steps:



So why it should hang on this step confuses me.  There is certainly nothing in those steps that warrants any odd behaviour, and if I run that test individually it works just fine.

Has anyone else experienced this intermittent behaviour?  Is there some way I can start to debug the issue or provide more information?

Here is some info on my environment:

OS X Version: 10.8.1
Ruby: ruby-1.9.3-p194 using RVM
XCode version:  4.5.1

$ gcc --version
    i686-apple-darwin11-llvm-gcc-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)

$ bundle list
Gems included by the bundle:
- Ascii85 (1.0.2)
- ZenTest (4.8.2)
- actionmailer (3.2.8)
- actionpack (3.2.8)
- activemodel (3.2.8)
- activerecord (3.2.8)
- activeresource (3.2.8)
- activesupport (3.2.8)
- acts_as_list (0.1.8)
- addressable (2.3.2)
- arel (3.0.2)
- autotest (4.4.6)
- autotest-growl (0.2.16)
- autotest-rails (4.1.2)
- awesome_print (1.1.0)
- bcrypt-ruby (3.0.1)
- builder (3.0.3)
- bundler (1.2.0)
- capybara (1.1.2)
- capybara-screenshot (0.2.2)
- capybara-webkit (0.12.1)
- childprocess (0.3.5)
- chunky_png (1.2.6)
- coderay (1.0.8)
- columnize (0.3.6)
- compass (0.12.2)
- compass-960-plugin (0.10.4)
- compass-rails (1.0.3)
- cucumber (1.2.1)
- cucumber-rails (1.3.0)
- database_cleaner (0.9.1)
- debugger (1.2.0)
- debugger-linecache (1.1.2)
- debugger-ruby_core_source (1.1.3)
- deep_merge (1.0.0)
- devise (2.1.2)
- devise-encryptable (0.1.1)
- diff-lcs (1.1.3)
- ejs (1.1.1)
- email_spec (1.2.1)
- erubis (2.7.0)
- exceptional (2.0.32)
- excon (0.16.4)
- execjs (1.4.0)
- factory_girl (4.1.0)
- factory_girl_rails (4.1.0)
- ffi (1.1.5)
- foreman (0.60.0)
- fssm (0.2.9)
- gherkin (2.11.4)
- growl (1.0.3)
- haml (3.1.7)
- hashery (2.0.1)
- heroku (2.32.11)
- heroku-api (0.3.5)
- heroku_san (3.0.4)
- hike (1.2.1)
- hpricot (0.8.6)
- httparty (0.9.0)
- i18n (0.6.1)
- journey (1.0.4)
- jquery-rails (2.1.3)
- jslint_on_rails (1.1.1)
- json (1.7.5)
- kgio (2.7.4)
- launchy (2.1.2)
- libwebsocket (0.1.5)
- mail (2.4.4)
- method_source (0.8)
- mime-types (1.19)
- multi_json (1.3.6)
- multi_xml (0.5.1)
- netrc (0.7.7)
- newrelic_rpm (3.4.2)
- nokogiri (1.5.5)
- orm_adapter (0.4.0)
- pdf-reader (1.2.0)
- pg (0.14.1)
- polyglot (0.3.3)
- prawn (0.12.0)
- pry (0.9.10)
- pry-rails (0.0.4 6dd39e3)
- quiet_assets (1.0.1)
- rack (1.4.1)
- rack-cache (1.2)
- rack-force_domain (0.2.0 ff16ac9)
- rack-ssl (1.3.2)
- rack-test (0.6.2)
- rails (3.2.8)
- railties (3.2.8)
- raindrops (0.10.0)
- rake (0.9.2.2)
- rdoc (3.12)
- recursive-open-struct (0.2.2 8178fa5)
- redis (2.2.2)
- redis-namespace (1.0.3)
- rest-client (1.6.7)
- rspec (2.11.0)
- rspec-core (2.11.1)
- rspec-expectations (2.11.3)
- rspec-mocks (2.11.3)
- rspec-rails (2.11.0)
- ruby-rc4 (0.1.5)
- ruby_parser (2.3.1)
- rubyzip (0.9.9)
- sass (3.2.1)
- sass-rails (3.2.5)
- selenium-webdriver (2.25.0)
- sequel (3.20.0)
- sexp_processor (3.2.0)
- shortly (0.3.3)
- shoulda-matchers (1.4.0)
- sinatra (1.0)
- slop (3.3.3)
- sprockets (2.1.3)
- taps (0.3.24)
- thor (0.16.0)
- tilt (1.3.3)
- timecop (0.5.2)
- treetop (1.4.11)
- ttfunk (1.0.3)
- turbo-sprockets-rails3 (0.1.15)
- tzinfo (0.3.33)
- uglifier (1.3.0)
- unicorn (4.3.1)
- vanity (1.8.0 dda319f)
- warden (1.2.1)
- watchr (0.7)
- webrat (0.7.3)
- will_paginate (3.0.3)
- xml-object (0.9.93)
- xpath (0.1.4)

$ brew info qt
    qt: stable 4.8.3 (bottled), HEAD
    http://qt.nokia.com/
    /usr/local/Cellar/qt/4.8.2 (2753 files, 195M)
    /usr/local/Cellar/qt/4.8.3 (2779 files, 194M) *
    https://github.com/mxcl/homebrew/commits/master/Library/Formula/qt.rb
    ==> Options
    --developer
      Compile and link Qt with developer options
    --with-qt3support
      Enable deprecated Qt3Support module
    --with-debug-and-release
      Compile Qt in debug and release mode
    --with-qtdbus
      Enable QtDBus module
    --universal
      Build a universal binary
    --with-mysql
      Enable MySQL plugin
    --with-demos-examples
      Enable Qt demos and examples
    ==> Caveats
    We agreed to the Qt opensource license for you.
    If this is unacceptable you should uninstall.
",mattheworiordan,javascript
848,2012-10-26 17:18:00,"Unfortunately I am using Cucumber, so that command would not work.

However, I tried with Cucumber using `cucumber --tags ~@selenium` and it still failed unfortunately i.e. no selenium tests were executed and yet Capybara still hung :(
",mattheworiordan,selenium
844,2012-10-07 18:00:51,"Capybara master has a new `has_text?` matcher which excludes invisible content such as `<title>` elements and `display: none` elements.

Its implementation uses the `Node#text` method, so the implication is that the behaviour of `Node#text` has now changed from returning all text to only returning visible text. This presents two problems:
- Users will have trouble upgrading if they are using `Node#text` directly, or `has_content?` (which is now just an alias of `has_text?`)
- There is no API for getting e.g. the text of the `<title>` element. This could be a valid user requirement and was previously supported by the `#text` method.

I propose adding a `#visible_text` method and using that to implement `has_text?`, leaving the implementations of `#text` and `#has_content?` as they are in 1.1. (`#has_content?` can be deprecated but I believe `#text` remains useful for checking e.g. `<title>` text.) WDYT?

Related: #522

cc @mkdynamic
",jonleighton,mkdynamic
843,2012-10-07 18:26:40,"Interestingly I was just working on this issue today. @ramhoj and I discovered this a couple of weeks ago, kind of boggles my mind that no one has noticed it until now. It's damned difficult to write a test case for it though.
",jnicklas,ramhoj
843,2012-10-19 21:02:53,"What about this idea.

from Capybara::Node::Element#reload



What is the expected code flow when the element appears (so `@base` is originally set), then we reload waiting for the element to disappear? If the element disappears, reloaded would be nil, so it wouldn't replace `@base`, which still points to the old element. Then we eventually run out of retry time and fail.
",shepmaster,base
843,2012-10-30 10:13:14,"(forgot to change the git name on the machine I was working in, I authored that commit, not @ramhoj ;))
",jnicklas,ramhoj
843,2013-03-10 16:08:29,"We also have had similar issues.  However, this discussion form topic by @DimaSamodurov was helpful:

https://groups.google.com/forum/?fromgroups=#!topic/ruby-capybara/A64s_iUdSDE

In particular his fork at:
https://github.com/DimaSamodurov/capybara/tree/race-conditions

After modifying it to also check for driver-specific errors in his rescue statement, it seems like it cut down on our intermittent failures pretty significantly.  We're still seeing a couple but they now appear isolated to the same group of tests, which makes me think we either need to up the wait time on those (though I've tried that and it hasn't completely solved the problem) or that there's another lurking race condition in there somewhere that those tests trigger.  

Not sure when those changes will makes it into Capybara (I believe he's trying to provide tests before the pull request) but you might try that fork in the interim to see if it helps.
",jpurcell001,DimaSamodurov
843,2013-03-11 16:28:48,"I haven't seen a pull request. If @DimaSamodurov wants his changes merged, then he should send a pull request. The commit in question is problematic in that it silently swallows exceptions, which is not a good thing. As far as I can see, it doesn't actually correct any incorrect behaviour, only change the failure message when something goes wrong.
",jnicklas,DimaSamodurov
843,2013-03-11 23:55:23,"@jnicklas correct and that I believe is actually the issue.  If  the has_selector? '#grid tbody tr', count: 20  manages to grab elements before the .click changes the page then it spins in synchronize getting the StaleElement exception and calling reload.  Unfortunately it cant reload, so does nothing and just goes until timeout.   I put two puts in Capybara::Node#reload so its whats below and its easy to see whats happening.  
      def reload
        puts ""in reload""
        if @allow_reload
          puts ""reloading""
          reloaded = parent.reload.first(@query.name, @query.locator, @query.options)
          @base = reloaded.base if reloaded
        end
        self
      end

If the line is changed to sess.find('#grid').has_selector? 'tbody tr', count: 20  then the reload can happen and the issue goes away
",twalpole,allow
843,2013-03-11 23:55:23,"@jnicklas correct and that I believe is actually the issue.  If  the has_selector? '#grid tbody tr', count: 20  manages to grab elements before the .click changes the page then it spins in synchronize getting the StaleElement exception and calling reload.  Unfortunately it cant reload, so does nothing and just goes until timeout.   I put two puts in Capybara::Node#reload so its whats below and its easy to see whats happening.  
      def reload
        puts ""in reload""
        if @allow_reload
          puts ""reloading""
          reloaded = parent.reload.first(@query.name, @query.locator, @query.options)
          @base = reloaded.base if reloaded
        end
        self
      end

If the line is changed to sess.find('#grid').has_selector? 'tbody tr', count: 20  then the reload can happen and the issue goes away
",twalpole,base
843,2013-03-11 23:55:23,"@jnicklas correct and that I believe is actually the issue.  If  the has_selector? '#grid tbody tr', count: 20  manages to grab elements before the .click changes the page then it spins in synchronize getting the StaleElement exception and calling reload.  Unfortunately it cant reload, so does nothing and just goes until timeout.   I put two puts in Capybara::Node#reload so its whats below and its easy to see whats happening.  
      def reload
        puts ""in reload""
        if @allow_reload
          puts ""reloading""
          reloaded = parent.reload.first(@query.name, @query.locator, @query.options)
          @base = reloaded.base if reloaded
        end
        self
      end

If the line is changed to sess.find('#grid').has_selector? 'tbody tr', count: 20  then the reload can happen and the issue goes away
",twalpole,query
843,2013-03-12 14:00:17,"Trying to pull together a test case.

Here's a sample stack trace:



Another one, slightly different stack trace but same test failure:



This is a pretty basic test, so hopefully putting together a reproducible test case for you will be doable.  It is doing something like:

specify ""next button works"" do
   product_review_page.click_next_product
   product_review_page.header_name.should have_content(@products[1].name)  <= this is where it fails
end

where product_review_page.header_name is defined in a page object as 

def header_name
    within "".reviewProductRelations"" do
      find(""header h3"")
    end
end

Of course there is a lot of ajax going on, the click_next_product is causing much of the DOM to refresh, including the element found by within and by the explicit find() call (and of course the text referenced by the matcher as well).

Thanks
Jason
",jpurcell001,products
832,2013-02-25 19:59:25,"Go, go @twalpole!
",jnicklas,twalpole
823,2012-09-15 12:23:17,"Actually, we have a bunch of flickering tests that are only fixed on master. I'm thinking we should perhaps disable 1.1_stable on Travis again and stick with local running for the 1.1 branch.

@jnicklas, what do you think?
",joliss,jnicklas
823,2012-09-15 12:26:17,"Well.

In that case it might be difficult to ensure that 1.1_stable is actually
... stable. :-)

I think the root cause for these flickering tests should be examined...

Jarl

2012/9/15 Jo Liss notifications@github.com

> Actually, we have a bunch of flickering tests that are only fixed on
> master. I'm thinking we should perhaps disable 1.1_stable on Travis again
> and stick with local running for the 1.1 branch.
> 
> @jnicklas https://github.com/jnicklas, what do you think?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/jnicklas/capybara/pull/823#issuecomment-8584254.

## 

Jarl Friis
Softace ApS
Rådhustorvet 7, 2.
3520 Farum
LinkedIn: http://dk.linkedin.com/in/jarlfriis
",jarl-dk,jnicklas
821,2012-09-15 12:07:52,"On the actual pull request, I'll let @jnicklas handle it. I'm muting; email me if you need me.
",joliss,jnicklas
819,2012-09-13 00:59:10,"When using Capybara to drive remote browsers I'm seeing the following to fill in a single field.  Each fill_in adds 5-17 seconds of overhead to each field filled in.  I haven't narrowed down which part of the find(...).set(...) is doing this:

POST elements
[{""ELEMENT"": ""1""}] [0.05s] 00:24
using:  xpath
value:  .//*[self::input | self::textarea][not(./@type = 'submit' or ./@type = 'image' or ./@type = 'radio' or ./@type = 'checkbox' or ./@type = 'hidden' or ./@type = 'file')][((./ (…more)
GET element/1/displayed
true [0.08s] 00:24
GET element/1/name
input [0.05s] 00:25
GET element/1/attribute/type
text [0.06s] 00:25
GET element/1/name
input [0.06s] 00:26
GET element/1/attribute/type
text [0.05s] 00:26
GET element/1/name
input [0.05s] 00:27
GET element/1/attribute/type
text [0.05s] 00:27
GET element/1/name
input [0.05s] 00:28 Repeated 2 times over 0.657s
POST element/1/clear
ok [0.06s] 00:30
POST element/1/value
ok [0.08s] 00:30
",w1150n,type
819,2012-09-18 15:25:16,"Yep, Capybara::Selenium::Node uses tag_name in an ifelse which makes it do many over-the-wire requests.  I added memoization and it sped things up by 27%.  Here's my local patch:

require 'capybara/selenium/node'

class Capybara::Selenium::Node
  def [](name)
    @attrs ||= {}
    @attrs[name] ||= native.attribute(name.to_s)
  rescue Selenium::WebDriver::Error::WebDriverError
    nil
  end

  def tag_name
    @tag_name ||= native.tag_name.downcase
  end
end
",w1150n,tag
819,2012-09-18 15:25:16,"Yep, Capybara::Selenium::Node uses tag_name in an ifelse which makes it do many over-the-wire requests.  I added memoization and it sped things up by 27%.  Here's my local patch:

require 'capybara/selenium/node'

class Capybara::Selenium::Node
  def [](name)
    @attrs ||= {}
    @attrs[name] ||= native.attribute(name.to_s)
  rescue Selenium::WebDriver::Error::WebDriverError
    nil
  end

  def tag_name
    @tag_name ||= native.tag_name.downcase
  end
end
",w1150n,attrs
817,2012-09-11 20:33:20,"I am using capybara with RSpec and, being new to it, encountered a weird-looking problem.
I have spec like this:



while this works fine in the browser and even if I fallback to RackTest, it gives me the following in the browser started by Selenium:



And nothing special on the console:
    Failure/Error: page.should have_content @testCommit.hash_id.to_s
           expected there to be content ""a123"" in ""Internal Server Error\nundefined method `hash_id' for     nil:NilClass\nWEBrick/1.3.1 (Ruby/1.9.3/2012-04-20) at 127.0.0.1:55933""
         # ./spec/integration/commits_spec.rb:21:in`block (2 levels) in <top (required)>

commits_spec.rb:21 is pointing at @testCommit.hash_id.to_s in the spec.
Another thing I should mention: It even happens when I create the commit in the spec, instead of the before :each block. Plus: printing the commit prints the object, not nil.

Any idea why this happens and how I can fix it?
",AVGP,testCommit
809,2012-09-07 18:23:55,"Hey @josevalim, @dchelimsky, @sobrinho and anyone else who has had an opinion on this. When applied, this commit changes Capybara to use `:feature` as the type for its own `feature` helper, as well as only including Capybara in those steps with type `:feature`. This follows [José's suggestion](http://blog.plataformatec.com.br/2012/06/improving-the-integration-between-capybara-and-rspec/). I feel that this is a very sensible approach.

Though there is obviously a big issue: It breaks compatibility with rspec, especially with rspec-rails.

I'd like to get this into Capybara 2.0 so that we don't have to break the API post release. Can you guys let me know what you think? Should I just release this and hope for the other tools to catch up as soon as possible?
",jnicklas,josevalim
809,2012-09-07 18:23:55,"Hey @josevalim, @dchelimsky, @sobrinho and anyone else who has had an opinion on this. When applied, this commit changes Capybara to use `:feature` as the type for its own `feature` helper, as well as only including Capybara in those steps with type `:feature`. This follows [José's suggestion](http://blog.plataformatec.com.br/2012/06/improving-the-integration-between-capybara-and-rspec/). I feel that this is a very sensible approach.

Though there is obviously a big issue: It breaks compatibility with rspec, especially with rspec-rails.

I'd like to get this into Capybara 2.0 so that we don't have to break the API post release. Can you guys let me know what you think? Should I just release this and hope for the other tools to catch up as soon as possible?
",jnicklas,sobrinho
809,2012-09-07 18:23:55,"Hey @josevalim, @dchelimsky, @sobrinho and anyone else who has had an opinion on this. When applied, this commit changes Capybara to use `:feature` as the type for its own `feature` helper, as well as only including Capybara in those steps with type `:feature`. This follows [José's suggestion](http://blog.plataformatec.com.br/2012/06/improving-the-integration-between-capybara-and-rspec/). I feel that this is a very sensible approach.

Though there is obviously a big issue: It breaks compatibility with rspec, especially with rspec-rails.

I'd like to get this into Capybara 2.0 so that we don't have to break the API post release. Can you guys let me know what you think? Should I just release this and hope for the other tools to catch up as soon as possible?
",jnicklas,dchelimsky
809,2012-09-07 18:41:51,"@jnicklas The naming convention is a bit tricky. We have `spec/models`, `spec/views`, `spec/helpers`, so I would vote for `spec/features`. But I will leave the final decision for @dchelimsky.

I think adding support for these in rspec-rails will be trivial as well. So rspec-rails should catch up quickly. My $.02. :)
",josevalim,dchelimsky
809,2012-09-09 15:24:57,"BTW - it's less about the release cycle than it is about forcing end-users to upgrade two libs at the same time (and some of them not understanding that that is necessary).

/cc @myronmarston, @alindeman
",dchelimsky,alindeman
809,2012-09-09 15:24:57,"BTW - it's less about the release cycle than it is about forcing end-users to upgrade two libs at the same time (and some of them not understanding that that is necessary).

/cc @myronmarston, @alindeman
",dchelimsky,myronmarston
809,2012-09-12 15:46:55,"I'm OK w/ an rspec-rails release that deals with the directory paths, but it would be good if Capy could check for the rspec version in capybara/rspec.rb (will need to be >= 2.12, but that doesn't exist yet, so you probably want to wait for that release before making this change).

/cc @alindeman
",dchelimsky,alindeman
803,2012-09-03 12:54:36,"Little bit of background: For a touch platform only web app we're building we're using Capybara for acceptance tests, along with a js driver that is touch capable (now poltergeist, before capybara-webkit - basically any recent webkit based driver supporting touch events could be used). We're not using any click interactions at all, thus I needed to make the capybara js driver touch capable.

Here's a pull request I sent to poltergeist
https://github.com/jonleighton/poltergeist/pull/135/files

which contains an initial implementation, so far only for simple, single taps:



e.g.



@jonleighton in response asked me to start a discussion here as to (hopefully) agree on an API that could be implemented by any capable driver.  See https://github.com/jonleighton/poltergeist/issues/141

I had further methods in mind to be implement later, just as a proposal:

single_tap
double_tap
long_tap
swipe_left
swipe_right
swipe_up
swipe_down

(The names follow what Zepto.js provides for touch event abstractions.) There are also gesture events I didn't yet think about.

I'd be glad if we could get a discussion going about this and happily help with the implementation whenever required.

[Edit: swipe_bottom -> swipe_down]
",carhartl,jonleighton
792,2012-08-21 10:14:50,"/cc @jarib - I think we'll need your help here, Jari!

I've been running the Capybara test suite in a loop. I could reproduce the flickering tests with Selenium that we've been seeing on Travis. I tried `rspec --order random:$i`, and it turns out that the flickeringness is not test order dependent but random (i.e. some kind of race condition).

Here is an example failure:



The first offending test is this:



My sense is that it has nothing to do with `within`, which is just a chained `find_elements` as far as I know. The flickering failure happens in other places as well: http://travis-ci.org/#!/jnicklas/capybara/jobs/2020450

I'm thinking perhaps `@session.body` (=> `browser.page_source`) is causing the problem, where other matchers (like `has_content`) would retry repeatedly and smooth over Selenium returning `""""`.

I can't reproduce it with [this gist](https://gist.github.com/3414141), however.

Any ideas?
",joliss,jarib
792,2012-08-21 10:14:50,"/cc @jarib - I think we'll need your help here, Jari!

I've been running the Capybara test suite in a loop. I could reproduce the flickering tests with Selenium that we've been seeing on Travis. I tried `rspec --order random:$i`, and it turns out that the flickeringness is not test order dependent but random (i.e. some kind of race condition).

Here is an example failure:



The first offending test is this:



My sense is that it has nothing to do with `within`, which is just a chained `find_elements` as far as I know. The flickering failure happens in other places as well: http://travis-ci.org/#!/jnicklas/capybara/jobs/2020450

I'm thinking perhaps `@session.body` (=> `browser.page_source`) is causing the problem, where other matchers (like `has_content`) would retry repeatedly and smooth over Selenium returning `""""`.

I can't reproduce it with [this gist](https://gist.github.com/3414141), however.

Any ideas?
",joliss,session
789,2012-08-14 15:08:36,"Hey @jarib, @ramontayag is having a weird problem where the Selenium bridge seems to lock up for minutes when he calls `all('html')`. Is there something he can do to produce some trace log of the communication between Ruby and Firefox, to figure out where exactly it's going wrong?
",joliss,jarib
784,2012-08-09 17:55:36,"Capybara::Result [has a `first` method](https://github.com/jnicklas/capybara/blob/master/lib/capybara/result.rb#L16), but doesn't have `last`. Not a big deal, but a curious omission which would be trivial to fix.  (Aside: since the class is basically a wrapper around an array of elements, it might make sense to just delegate all unimplemented methods to the underlying `@result`.)

I'd be happy to submit a pull request if any of this is desirable.
",adammck,result
777,2012-08-06 21:47:20,"Maybe @jarib can provide some insight here.
",joliss,jarib
771,2012-08-02 11:40:48,"It does seem to make sense that we only ever want to click enabled buttons, to be honest. I don't think we should have a separate `click_enabled_button` action though. I'm torn about this. @joliss, what do you think?
",jnicklas,joliss
771,2012-08-07 13:23:02,"@synth, I'm not sure if your problem is related to this. I also have stumbled upon issues where Capybara has simulated user actions before dynamic javascripts has been loaded. I solved it by extending my step definition which navigates the browser.



You get the gist, right? I'm sure there's something equivalent in RequireJS.
",badeball,synth
767,2012-07-28 04:18:25,"[Fixed formatting -- JL]

Say I visit http://www.baidu.com.



works but



does not work.

The error message is:



It looks like the Chinese does not work in normalize-space.

if `.//a[./@href][(((./@id = 'MP3' or normalize-space(string(.)) = 'MP3') or ./@title = 'MP3') or .//img[./@alt = 'MP3'])]` , works.

if `.//a[./@href][(((./@id = '知 道' or normalize-space(string(.)) = '知 道') or ./@title = '知 道') or .//img[./@alt = '知 道'])]` , not.
",lihuazhang,id
767,2012-07-28 04:18:25,"[Fixed formatting -- JL]

Say I visit http://www.baidu.com.



works but



does not work.

The error message is:



It looks like the Chinese does not work in normalize-space.

if `.//a[./@href][(((./@id = 'MP3' or normalize-space(string(.)) = 'MP3') or ./@title = 'MP3') or .//img[./@alt = 'MP3'])]` , works.

if `.//a[./@href][(((./@id = '知 道' or normalize-space(string(.)) = '知 道') or ./@title = '知 道') or .//img[./@alt = '知 道'])]` , not.
",lihuazhang,href
767,2012-07-28 04:18:25,"[Fixed formatting -- JL]

Say I visit http://www.baidu.com.



works but



does not work.

The error message is:



It looks like the Chinese does not work in normalize-space.

if `.//a[./@href][(((./@id = 'MP3' or normalize-space(string(.)) = 'MP3') or ./@title = 'MP3') or .//img[./@alt = 'MP3'])]` , works.

if `.//a[./@href][(((./@id = '知 道' or normalize-space(string(.)) = '知 道') or ./@title = '知 道') or .//img[./@alt = '知 道'])]` , not.
",lihuazhang,alt
767,2012-07-28 04:18:25,"[Fixed formatting -- JL]

Say I visit http://www.baidu.com.



works but



does not work.

The error message is:



It looks like the Chinese does not work in normalize-space.

if `.//a[./@href][(((./@id = 'MP3' or normalize-space(string(.)) = 'MP3') or ./@title = 'MP3') or .//img[./@alt = 'MP3'])]` , works.

if `.//a[./@href][(((./@id = '知 道' or normalize-space(string(.)) = '知 道') or ./@title = '知 道') or .//img[./@alt = '知 道'])]` , not.
",lihuazhang,title
767,2012-07-29 04:13:46,"@jnicklas Thanks. why I thought something wrong with normalize-space is that when I use XPATH checker (https://addons.mozilla.org/en-US/firefox/addon/xpath-checker/),

 Using this xpath:
 `.//a[./@href][(((./@id = 'MP3' or normalize-space(string(.)) = 'MP3') or ./@title = 'MP3') or .//img[./@alt = 'MP3'])]`, the XPATH checker can find the element.

But when I use:
`.//a[./@href][(((./@id = '知 道' or normalize-space(string(.)) = '知 道') or ./@title = '知 道') or .//img[./@alt = '知 道'])]`,
the XPATH checker cannot find the element.

I tried all the text link in Chinese. None can be found.

@joliss 
Thanks.
the encoding is:
`<meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312"">`

I use 1.9.3 and I tried Chinese text link without space inside.
",lihuazhang,href
767,2012-07-29 04:13:46,"@jnicklas Thanks. why I thought something wrong with normalize-space is that when I use XPATH checker (https://addons.mozilla.org/en-US/firefox/addon/xpath-checker/),

 Using this xpath:
 `.//a[./@href][(((./@id = 'MP3' or normalize-space(string(.)) = 'MP3') or ./@title = 'MP3') or .//img[./@alt = 'MP3'])]`, the XPATH checker can find the element.

But when I use:
`.//a[./@href][(((./@id = '知 道' or normalize-space(string(.)) = '知 道') or ./@title = '知 道') or .//img[./@alt = '知 道'])]`,
the XPATH checker cannot find the element.

I tried all the text link in Chinese. None can be found.

@joliss 
Thanks.
the encoding is:
`<meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312"">`

I use 1.9.3 and I tried Chinese text link without space inside.
",lihuazhang,alt
767,2012-07-29 04:13:46,"@jnicklas Thanks. why I thought something wrong with normalize-space is that when I use XPATH checker (https://addons.mozilla.org/en-US/firefox/addon/xpath-checker/),

 Using this xpath:
 `.//a[./@href][(((./@id = 'MP3' or normalize-space(string(.)) = 'MP3') or ./@title = 'MP3') or .//img[./@alt = 'MP3'])]`, the XPATH checker can find the element.

But when I use:
`.//a[./@href][(((./@id = '知 道' or normalize-space(string(.)) = '知 道') or ./@title = '知 道') or .//img[./@alt = '知 道'])]`,
the XPATH checker cannot find the element.

I tried all the text link in Chinese. None can be found.

@joliss 
Thanks.
the encoding is:
`<meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312"">`

I use 1.9.3 and I tried Chinese text link without space inside.
",lihuazhang,id
767,2012-07-29 04:13:46,"@jnicklas Thanks. why I thought something wrong with normalize-space is that when I use XPATH checker (https://addons.mozilla.org/en-US/firefox/addon/xpath-checker/),

 Using this xpath:
 `.//a[./@href][(((./@id = 'MP3' or normalize-space(string(.)) = 'MP3') or ./@title = 'MP3') or .//img[./@alt = 'MP3'])]`, the XPATH checker can find the element.

But when I use:
`.//a[./@href][(((./@id = '知 道' or normalize-space(string(.)) = '知 道') or ./@title = '知 道') or .//img[./@alt = '知 道'])]`,
the XPATH checker cannot find the element.

I tried all the text link in Chinese. None can be found.

@joliss 
Thanks.
the encoding is:
`<meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312"">`

I use 1.9.3 and I tried Chinese text link without space inside.
",lihuazhang,title
767,2012-07-29 04:26:02,"My feature is:

<pre><code>
Feature: Using baidu

Scenario: Check the link

Given I am on baidu.com
When I  click ""知 道""
Then I should see ""知道首页""

</code></pre>


And the step_definition is:

<pre><code>
Given /^I am on baidu\.com$/ do
  Capybara.app_host = ""http://www.baidu.com""
  visit('/')
end

When /^I  click ""(.*?)""$/ do |link|
  click_link(link) # This does not work.
  page.driver.browser.find_element(:link, link).click # This works
  puts find(:xpath, ""//a[@name='tj_zhidao']"").text == link # It's true.
end


Then /^(?:|I )should see ""([^""]*)""$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end
</code></pre>


Using the native driver can work.
",lihuazhang,name
764,2012-07-20 14:12:09,"This causes ""file not added for reaping"" errors with Selenium, as the
exit handler is called twice.

Thanks @jarib for tracking this one down!
",joliss,jarib
763,2012-07-19 16:17:11,"Hey @jarib, I remember seeing this `file not added for reaping` error occasionally on Travis, but now it occurs reliably on my system. Can  you reproduce it, or is there anything I can do to debug this?


",joliss,jarib
744,2012-07-08 17:49:15,"I have no opinion on whether this is a good addition to Capybara (perhaps it is), but I'm thinking that regarding the method name, something like `save_screenshot` might be clearer than `render`.

Let's see what @jnicklas has to say.
",joliss,jnicklas
738,2012-06-27 18:50:42,"This is a kind of known limitation in selenium. Selenium will only clear cookies for the current domain. As far as I know there is no way around that. Maybe @jarib knows more.
",jnicklas,jarib
737,2012-06-27 00:08:16,"Hello

Selenium-Webdriver now throws a Selenium::WebDriver::Error::UnhandledAlertError whenever you click on a element that shows an alert or confirm dialog it seems.

In the past I've done things like this as a crude workaround:
  page.evaluate_script('window.confirm = function() { return true; }')

But now I'd like to test that the message being presented to the user matches what I expect (it's not static text).  The ruby bindings doc at [JavaScript_dialogs](http://code.google.com/p/selenium/wiki/RubyBindings#JavaScript_dialogs) say that you can do something like: 



But I'm never able to do something like a click_button() then switch to the alert/confirm after since the exception is thrown.

Perhaps @jarib can shed some light on the preferred method of getting by these dialog exceptions so we can handle the confirm states like in the docs?
",supairish,jarib
735,2012-06-25 19:16:02,"@jarib I've reduced this to a selenium bug [here](http://code.google.com/p/selenium/issues/detail?id=4147)
",paleozogt,jarib
733,2012-06-26 22:27:19,"Mentioning @jarib like @joliss says above as I am seeing the same issue. I see the issue in full rake run. When I setup a breakpoint before the checking the url then the tests pass so that does imply a timing issue. Interesting thing is that after I have once run with a breakpoint the next run succeeds for just that cucumber scenario but I guess such is the life with races.
",betelgeuse,jarib
721,2012-06-01 00:19:38,"If you have 2 password fields with labels 'Password' and 'Confirm Password' then trying:
fill_in 'Password', :with => 'value' results in an error ""can't find field...'

Changing to ""Confirm password"" (note case) makes it work again.

Using ids or names of the fields works too. Only labels conflict.

I think it is related to the xpath using a contains() function and only looking for the @for attribute, instead of ensuring that the @for points to the selected element. 

I just had a cursory look at the source, so I could be wrong. I'm willing to change my wording to fix, so it's not a major pain for me. I'll return and see if I can come up with a patch, if I get some free time soon.
",mattvanhorn,for
712,2012-05-16 16:00:16,"Hi,

I'm using capybara 1.1.2 with selenium-webdriver 2.12.2 under cucumber 1.2.0 all stirred together in a Rails 3.2 application with ruby 1.8.7 . Using the ""visit"" method on any given scenario works, as the request reaches the server started by cucumber, it produces a template, which capybara parses. All good. As soon as I tag the scenario with ""@javascript"", it stops working. I mean, I try to ""visit"" my application's homepage, a browser pops up with the host for my cucumber environment, but neither the request reaches the server (should see it in the log) nor the page is rendered. Any idea why this might be happening? 
",HoneyryderChuck,javascript
705,2012-05-13 13:24:49,"@thoferon Right. @jarib, here's a gist that demonstrates that selenium-webdriver returns ""true"" and ""false"" as strings for the 'disabled' attribute: https://gist.github.com/2688447 That seems odd, at least. Would you mind taking a look?

I'm closing this issue, since it's not a Capybara issue, but let's continue discussion here unless/until we have a bug report in the upstream tracker.
",joliss,jarib
705,2012-05-13 16:04:48,"Ah, very well. Hm, I wonder what the RackTest driver does.

In any case, perhaps it would be sensible to tie down the behavior with a test, to ensure that all the drivers are consistent.

I'll reopen and leave this up to @jnicklas.
",joliss,jnicklas
703,2012-05-02 07:08:18,"@yomike05 Awesome, that was exactly what was happening to me! I'm using @josevalim's trick and that fixed it. Thanks a bunch! I'm gonna leave this ticket open for the moment cause I'd like to see mention of this issue in the documentation. I imagine it's quite common given the simplicity of the test that surfaced it for me.
",jimmycuadra,josevalim
702,2012-04-26 11:27:46,"@jarib, OP has an issue with sessions not properly resetting when there's pending Ajax requests, perhaps related to chromedriver. Ring a bell by any chance?
",joliss,jarib
696,2012-04-20 18:55:03,"Very interesting.

I'll go ahead and close this issue, since the behavior is likely either correct, or something that could only be changed in the Selenium upstream.

I wonder if we should start documenting edge cases like this. Perhaps it's time for a Capybara FAQ where we can collect pointers to discussions like this one. @jnicklas, what you think?

> page.execute_script(""$(""#p_doctor_tabs"").tabs('select', 2);"")
> That does not switch tabs.

This isn't valid Ruby code because of the quotes. Assuming you have single quotes, if it still doesn't work, there's perhaps something going wrong on the JS side. You could debug this by poking into the browser, perhaps with capybara-firebug. The error reporting with execute_script/evaluate_script is bad to non-existent, unfortunately. I'd recommend using execute_script very sparingly, if at all.
",joliss,jnicklas
690,2012-06-13 00:30:26,"Let's cc @jarib then. Jari, does this ring a bell at all?
",joliss,jarib
690,2012-06-13 00:35:33,"The experimental load strategy mentioned in the change log is not on by default, so that's not the issue.

I believe this is caused by [this commit](https://code.google.com/p/selenium/source/detail?r=16398). @illicitonion: What's our intended behaviour here?
",jarib,illicitonion
687,2012-05-18 09:15:05,"@jnicklas any outlook when this will be released?
",exviva,jnicklas
686,2013-02-24 17:30:42,"I honestly didn't think this would ever get fixed. Thanks @twalpole!
",jnicklas,twalpole
686,2013-02-27 10:07:27,"@fy-kenny please review what's previously been said in this issue, and take a look at @twalpole. If you're still having problems, please write something more coherent. I can't make any sense out of what you've written.
",jnicklas,twalpole
685,2012-07-13 13:25:22,"There were a couple of things I didn't like too much about this pull request, so I went ahead and rewrote it. I disagree with @exviva, that the port needs to update between `new` and `boot`. I think setting `Capybara.server_port` as the default is fine. The implementation was also overly complex, in my opinion, adding a lot of cruft for an essentially simple change.
",jnicklas,exviva
668,2012-03-16 20:02:13,"(An evolution of #667).

This solves the long standing issue of not being able to know what went wrong with a request that failed.

Consider this a solution for issues #629 and #508.

Thanks to @raggi (#660) for the inspiration.
",djanowski,raggi
668,2012-04-02 16:27:32,"@raggi: Just changed this a little bit, so now:
- It doesn't use `abort_on_exception`.
- It doesn't let the server die.
- It raises the exception on the correct thread, so can be used outside of `Thread.main`.

What do you think now?

@jnicklas: This is an alternative solution that doesn't require to actively check for errors.
",djanowski,jnicklas
667,2012-03-16 19:44:20,"Summoning @raggi since this is an alternative implementation of #660.
",djanowski,raggi
665,2012-03-19 10:01:46,"This might be relevant:



In the first/inner Pry session `page.find(:xpath, '//select[@id = ""foobar""]/option[@selected = ""selected""]')` returns an item, and in the second/outer Pry session it returns `Capybara::ElementNotFound`. If I change the step definition as follows:



`page.find(:xpath, '//select[@id = ""foobar""]/option[@selected = ""selected""]')` fails again. Looks like the state of the page is not really changed until exiting a `within` block?
",l0b0,id
665,2012-03-19 10:01:46,"This might be relevant:



In the first/inner Pry session `page.find(:xpath, '//select[@id = ""foobar""]/option[@selected = ""selected""]')` returns an item, and in the second/outer Pry session it returns `Capybara::ElementNotFound`. If I change the step definition as follows:



`page.find(:xpath, '//select[@id = ""foobar""]/option[@selected = ""selected""]')` fails again. Looks like the state of the page is not really changed until exiting a `within` block?
",l0b0,selected
660,2012-04-09 10:14:40,"@woahdee: IIRC rescue_from is still run even if show_exceptions is false. We're talking about errors caught by the WebRick/Thin/whatever servers, which aren't bubbled.
",jnicklas,woahdee
658,2012-03-03 11:08:59,"Blame jQuery and Nokogiri for not following the standard. There is no `:first` pseudo class according to the CSS3 spec, see here: http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#structural-pseudos. jQuery chooses to implement :first the way you expect it to behave, always returning the first _matched_ element. Capybara uses Nokogiri to convert CSS expressions to XPath. Your selector, `a.task-link:first` gets turned into this: `//a[contains(concat(' ', @class, ' '), ' task-link ') and position() = 1]`. Which means it will match _any_ link that has a class of task-list and is the first child of its parent. Effectively, Nokogiri implements `:first` as an alias for `:first-child` and they both generate identical XPath expressions.

I would argue that it would be more well behaved of Nokogiri not to implement selectors which aren't part of the CSS spec, but really, the behaviour they've implemented is definitely no more or less correct than the one in jQuery. Both are just shit the respective library authors made up.
",jnicklas,class
651,2012-02-29 09:04:56,"Hi

Recently, when I use the latest Capybara gem from github in my Rails 3.2.0 app:

<code>gem 'capybara', :git => 'https://github.com/jnicklas/capybara.git'</code>
or
<code>gem 'capybara', :git => 'git://github.com/jnicklas/capybara.git'</code>

and I run the following test:

<pre>
<code>
before(:each) do
  @user = Factory(:user)
  @message = ""this is a message"" 
end

it ""should show the message on the senders screen"", :js => true do
  visit signin_path
  fill_in ""Name"", :with => @user.name
  fill_in ""Password"", :with  => @user.password
  click_button ""Sign In""
  fill_in ""message_content"", :with => @message
  click_button ""Send""
  page.should have_content(""#{@user.name}: #{@message}"")
end
</code>
</pre>


the test fails with the error:

Failure/Error: click_button ""Send"" Capybara::ElementNotFound: no button with value or id or text 'Send' found

However, if I change my Gemfile to use Capybara 1.1.2:

<code>gem 'capybara', ""~> 1.1.2""</code>

and run the test again with no other modifications to the app, the Send button is found and the test passes. And until recently, this test used to pass when using the latest capybara gem from github.

Notice that click_button is called twice from the test on two different buttons. The first button is found by capybara, but the second button is not found.

The HTML that contains the Send button, which capybara cannot find, is:

_'<input name=""commit"" type=""submit"" value=""Send"" />'_

However, I found that while using the latest capybara gem, if I add an id attribute to the button html:

<code><%= f.submit ""Send"", id: ""Send"" %></code>

and then replace:

<code>click_button ""Send""</code>

with

<code>find('input#Send').click</code>

with no other modifications to the app, capybara finds the button and the test then passes.

But I am wondering why click_button “Send” is not working any more. Perhaps I am over looking something or got something messed up.

I am using MRI Ruby 1.9.3p125. Some of my gems my app uses are:

Using rails (3.2.0)
Using rack (1.4.1) 
Using rack-test (0.6.1) 
Using rspec (2.8.0) 
Using rspec-rails (2.8.1)
Using selenium-webdriver (2.13.0)

Thank you!

Jack Flannery
",jmflannery,message
651,2012-02-29 09:04:56,"Hi

Recently, when I use the latest Capybara gem from github in my Rails 3.2.0 app:

<code>gem 'capybara', :git => 'https://github.com/jnicklas/capybara.git'</code>
or
<code>gem 'capybara', :git => 'git://github.com/jnicklas/capybara.git'</code>

and I run the following test:

<pre>
<code>
before(:each) do
  @user = Factory(:user)
  @message = ""this is a message"" 
end

it ""should show the message on the senders screen"", :js => true do
  visit signin_path
  fill_in ""Name"", :with => @user.name
  fill_in ""Password"", :with  => @user.password
  click_button ""Sign In""
  fill_in ""message_content"", :with => @message
  click_button ""Send""
  page.should have_content(""#{@user.name}: #{@message}"")
end
</code>
</pre>


the test fails with the error:

Failure/Error: click_button ""Send"" Capybara::ElementNotFound: no button with value or id or text 'Send' found

However, if I change my Gemfile to use Capybara 1.1.2:

<code>gem 'capybara', ""~> 1.1.2""</code>

and run the test again with no other modifications to the app, the Send button is found and the test passes. And until recently, this test used to pass when using the latest capybara gem from github.

Notice that click_button is called twice from the test on two different buttons. The first button is found by capybara, but the second button is not found.

The HTML that contains the Send button, which capybara cannot find, is:

_'<input name=""commit"" type=""submit"" value=""Send"" />'_

However, I found that while using the latest capybara gem, if I add an id attribute to the button html:

<code><%= f.submit ""Send"", id: ""Send"" %></code>

and then replace:

<code>click_button ""Send""</code>

with

<code>find('input#Send').click</code>

with no other modifications to the app, capybara finds the button and the test then passes.

But I am wondering why click_button “Send” is not working any more. Perhaps I am over looking something or got something messed up.

I am using MRI Ruby 1.9.3p125. Some of my gems my app uses are:

Using rails (3.2.0)
Using rack (1.4.1) 
Using rack-test (0.6.1) 
Using rspec (2.8.0) 
Using rspec-rails (2.8.1)
Using selenium-webdriver (2.13.0)

Thank you!

Jack Flannery
",jmflannery,user
649,2012-02-27 17:59:51,"I recently began getting an error when running Cucumber specs where a multipart form returned a selection_collection field with multiple => true. 

In my case, the selection_collection field relates an object to a habtm relationship.



where f is a form for a Cause object. 

When the spec hits the controller statement that saves the Cause object, I get the following error:

   Couldn't find Category with ID=0 (ActiveRecord::RecordNotFound)
   ./app/controllers/admin/causes_controller.rb:16:in `update'
   <internal:prelude>:10:in`synchronize'

When I run the same spec using Selenium (setting the @javascript tag) the spec passes. 

When run without selenium (and no options in the category_ids field selected), the params object contains:
    ""category_ids""=>[""[\""\""]""]

When run with selelenium, the params object contains:
    ""category_ids""=>[""""]

I have checked the params function in the Capybara::RackTest::Form class and it appears to be correctly returning an array with a single empty string. 

I also checked in the Rack::Test module, but can't discern whether the switch to an array of arrays is happening there, or within Capybara (or somewhere else, for that matter). 
",hoenth,javascript
647,2012-02-19 21:39:09,"@jnicklas - I don't know the policy behind closing a pull request (which I now believe means ""reject"" irrevocably), so please manually merge the commit or comment the patch.

I've created too many pull requests for this issue already to add more noise.
",e2,jnicklas
647,2012-02-19 23:51:19,"(Reopening is no problem, actually -- I just reopened it for you. GitHub is just annoyingly restrictive about who gets to do that.)

I'm actually not sure though that having those kinds of conditionals is good practice. I think we _can_ if we have to, but I'd argue that it shouldn't be deprecated for this exact reason (that is, other libraries like Capybara having to do hacky conditionals).

Hm, I just noticed that Cucumber 1.1.8 re-added the deprecation warnings. :(

I think they're totally pointless -- it would be better to just remove it without warning in 2.0.0, since the warnings nag people who can't do anything about it (i.e. Cucumber users).

Oh well. Cc @aslakhellesoy in case he changes his mind.

Let's wait and see. Or maybe Jonas has an opinion.
",joliss,aslakhellesoy
644,2012-02-18 12:16:15,"Cc: @aslakhellesoy

Wait, how come stuff is breaking for us at a patch-level release? Is source_tags not part of Cucumber's public API? Should we be using something different?
",joliss,aslakhellesoy
644,2012-02-18 20:42:43,"Hi everyone!

Sorry about the sloppy, ""bogus"" fix. I just got hit by the wrong set of gems and I was in a real, hurry.

@aslak - yes, I read the code wrong and missed the tags - I thought that if I got it wrong, it would break.

I didn't see a specific test in capybara/features, so I left that till later (to avoid pulling the older gems for testing).

Basically, I just wanted to use a pull request as a quick workaround/bug report for a discussion - until I get more time to look into the problem.

Sorry about that.
",e2,aslak
644,2012-02-19 01:10:11,"expected: :selenium
     got: :rack_test

It probably means instead of a string (tag -> ""@selenium"") it got a Tag instance (<....::Tag, @name=""@selenium"">) dump as a string, so it defaulted to :rack_test.

In short, the test is using scenarios.source_tags instead of scenarios.source_tags.map(&:name).

It's strange you are getting this, @joliss. I would have expected you to get the same error as here: https://github.com/cucumber/cucumber/pull/229

P.S. With all the chaos around this, I believe @aslak will never again change anything in Cucumber without deprecation ;) Cucumber is just so cool, that people are using every dark corner of Cucumber for whatever they need. And the noise also points out how crucial Capybara is for everyday life.
",e2,name
644,2012-02-19 01:10:11,"expected: :selenium
     got: :rack_test

It probably means instead of a string (tag -> ""@selenium"") it got a Tag instance (<....::Tag, @name=""@selenium"">) dump as a string, so it defaulted to :rack_test.

In short, the test is using scenarios.source_tags instead of scenarios.source_tags.map(&:name).

It's strange you are getting this, @joliss. I would have expected you to get the same error as here: https://github.com/cucumber/cucumber/pull/229

P.S. With all the chaos around this, I believe @aslak will never again change anything in Cucumber without deprecation ;) Cucumber is just so cool, that people are using every dark corner of Cucumber for whatever they need. And the noise also points out how crucial Capybara is for everyday life.
",e2,aslak
644,2012-02-19 01:10:11,"expected: :selenium
     got: :rack_test

It probably means instead of a string (tag -> ""@selenium"") it got a Tag instance (<....::Tag, @name=""@selenium"">) dump as a string, so it defaulted to :rack_test.

In short, the test is using scenarios.source_tags instead of scenarios.source_tags.map(&:name).

It's strange you are getting this, @joliss. I would have expected you to get the same error as here: https://github.com/cucumber/cucumber/pull/229

P.S. With all the chaos around this, I believe @aslak will never again change anything in Cucumber without deprecation ;) Cucumber is just so cool, that people are using every dark corner of Cucumber for whatever they need. And the noise also points out how crucial Capybara is for everyday life.
",e2,selenium
644,2012-02-19 08:48:16,"On 18 Feb 2012, at 23:52, Jo Liss wrote:

> Thanks Matt! I tested it in Capybara like so
> 
>    diff --git a/Gemfile b/Gemfile
>    index 07a1f43..32116d9 100644
>    --- a/Gemfile
>    +++ b/Gemfile
>    @@ -5,3 +5,6 @@ gemspec
> 
> 
> 
>    +
>    +@dependencies.delete_if { |d| d.name == ""cucumber"" }
>    +gem 'cucumber', :path => '~/src/cucumber'
> 
> and ""rake cucumber"" now doesn't choke on source_tags, but instead reports that the driver switching isn't working anymore:
> 
>    expected: :selenium
>         got: :rack_test (using ==)
>    ...
>    features/capybara.feature:23:in `Then Capybara should use the ""selenium"" driver'
> 
> Hm, too bad. I'm not sure off the top of my head _what's_ going wrong. Perhaps it's the updated Gherkin, even.

Thanks @joliss. Could you re-try this with the current HEAD of Cucumber? I just ran Capybara's features against that and they all passed. 

There also weren't any deprecation warnings! Perhaps the pixies fixed them?

> I tested b7d7e97 (v1.1.15^) though, and it works fine. May I suggest you revert to b7d7e97 and push v1.1.6 with that?
> 
> Then we can re-try adding 4bc5ed6 (""Upgraded to gherkin 2.3.8"") with more time to figure out what's going wrong.

You're quite right, that's what we should have done in the first place. If we haven't got this straightened out before Monday morning that's what we'll do.

> Btw, re 844fefea (""Add back Scenario#source_tag_names for #227""), I wonder if source_tag_names really has to be deprecated. Semver says that you shouldn't deprecate API without bumping the minor, but even when you go to 1.2.0, is there any need to deprecate it? Capybara for instance wouldn't be able avoid those deprecations without bumping its Cucumber dependency, so they'll just clutter the terminal and annoy users.

Hmm yes. My immediate thought is - ""but then how do we remove this kind of clutter from Cucumber?"" but of course otherwise we're expecting you guys to have to put backwards-compatiblity hacks like #647 in. I don't mind taking the deprecation warnings out - we can just flag that method up as something we remove in the next major release, I suppose.
",mattwynne,dependencies
644,2012-02-19 15:26:20,"@mattwynne the missing deprecation in outline_table.rb (my fault!) was added after 1.1.7

So most capybara users won't have deprecation warnings until the next Cucumber version bump.

Also, with such mature and popular ""gems"" (no pun intended!) as Cucumber and Capybara, it might make sense to have versioned API layers in Cucumber - and deprecate an api version as a whole.

Deprecation warnings would show on startup, while allowing you and @aslak to clean up the api as much as you please - and api users would choose if they want a ""stable/versioned api"" or ""development"" api.
",e2,aslak
644,2012-02-19 16:09:57,"Talk second:

@e2 wrote:

> P.S. With all the chaos around this, I believe @aslak will never again change anything in Cucumber without deprecation ;)

Haha, yeah -- I'm glad I got to make this experience vicariously. ^_^

> Cucumber is just so cool, that people are using every dark corner of Cucumber for whatever they need. And the noise also points out how crucial Capybara is for everyday life.

Yup. Funny how reports about the breakage started coming in within hours of the release.

@mattwynne wrote:

> My immediate thought is - ""but then how do we remove this kind of clutter from Cucumber?"" but of course otherwise we're expecting you guys to have to put backwards-compatiblity hacks like #647 in. I don't mind taking the deprecation warnings out - we can just flag that method up as something we remove in the next major release, I suppose.

I agree -- I guess it's one of these unpleasant facts of open-source library maintenance that you only get to remove clutter something like once a year (at best).

@e2 wrote:

> it might make sense to have versioned API layers in Cucumber - and deprecate an api version as a whole.

I'm thinking that might actually be overkill -- I'm personally not _that_ concerned about breaking things (within reason) between majors, dropping compatibility entirely.

---

What I think this mess demonstrates is this: When we publish libraries, it really pays to be careful about deciding and communicating what is and isn't public API, and when we use other people's libraries, we should read up on the API documentation (or pester the developers) so we don't accidentally use private methods. Just as a general thought.

Anyways, glad we got this sorted out! Thanks for spending your weekend time. :-)
",joliss,aslak
642,2012-06-19 19:41:42,"@jnicklas would you accept a pull request with this functionality?
",sobrinho,jnicklas
641,2012-02-16 23:16:56,"## Problem

The `have_selector` method generates the following error when it cannot find a matching element for a given (in this case css) selector:



When using a `:count` option to the `have_selector` call (using a selector that matches elements) it generates the same error when the given count is bigger than number of found elements.
## Cause

The `error`-method on the `Query` class does not check for the presence of the `@options[:count]` (e.g. as the `HaveMatcher` class' failure message method does).
## Solution

I've added the condition to the `error`-method and I've added some tests for it (also made some changed some descriptions of specs that were not correct - couldn't help it ;)). 

FYI: I'm working on a refactoring to remove the duplication in the failure message generation - hope to be able to squeeze in some hours this weekend. 
",robinroestenburg,options
639,2012-02-14 19:36:40,"On Sun, Jan 22, 2012 at 23:18, Marc Schwieterman (@marcisme) wrote:

> The behavior of current_url and current_path when pushState/
> replaceState are used appears to currently be undefined in the
> Capybara specs. This allows for inconsistent behavior between
> different driver implementations. For example at the time of this
> writing the Selenium driver included with Capybara returns the value
> as modified by Javascript, but capybara-webkit does not.
> 
> I would be happy to contribute some specs, but I wanted to get input
> on where they should go, and what they should cover. It appears that
> all the Javascript related specs live in lib/capybara/spec/session/
> javascript.rb. I came up with the following to cover the specific
> cases that have been causing me trouble.
> 
> --- a/lib/capybara/spec/session/javascript.rb
> +++ b/lib/capybara/spec/session/javascript.rb
> @@ -297,6 +297,20 @@ shared_examples_for ""session with javascript
> support"" do
>         @session.should have_no_text(""I changed it"")
>       end
>     end
> +
> -    describe ""#current_path"" do
> -      it ""is affected by pushState"" do
> -        @session.visit(""/with_js"")
> -        @session.execute_script(""window.history.pushState({}, '', '/
>   pushed')"")
> -        @session.current_path.should == ""/pushed""
> -      end
>   +
> -      it ""is affected by replaceState"" do
> -        @session.visit(""/with_js"")
> -        @session.execute_script(""window.history.replaceState({}, '',
>   '/replaced
> -        @session.current_path.should == ""/replaced""
> -      end
> -    end
>     end
>    end
> 
> Is this something that should be covered in the specs?
> 
> -Marc
",joliss,session
639,2012-02-14 19:36:40,"On Sun, Jan 22, 2012 at 23:18, Marc Schwieterman (@marcisme) wrote:

> The behavior of current_url and current_path when pushState/
> replaceState are used appears to currently be undefined in the
> Capybara specs. This allows for inconsistent behavior between
> different driver implementations. For example at the time of this
> writing the Selenium driver included with Capybara returns the value
> as modified by Javascript, but capybara-webkit does not.
> 
> I would be happy to contribute some specs, but I wanted to get input
> on where they should go, and what they should cover. It appears that
> all the Javascript related specs live in lib/capybara/spec/session/
> javascript.rb. I came up with the following to cover the specific
> cases that have been causing me trouble.
> 
> --- a/lib/capybara/spec/session/javascript.rb
> +++ b/lib/capybara/spec/session/javascript.rb
> @@ -297,6 +297,20 @@ shared_examples_for ""session with javascript
> support"" do
>         @session.should have_no_text(""I changed it"")
>       end
>     end
> +
> -    describe ""#current_path"" do
> -      it ""is affected by pushState"" do
> -        @session.visit(""/with_js"")
> -        @session.execute_script(""window.history.pushState({}, '', '/
>   pushed')"")
> -        @session.current_path.should == ""/pushed""
> -      end
>   +
> -      it ""is affected by replaceState"" do
> -        @session.visit(""/with_js"")
> -        @session.execute_script(""window.history.replaceState({}, '',
>   '/replaced
> -        @session.current_path.should == ""/replaced""
> -      end
> -    end
>     end
>    end
> 
> Is this something that should be covered in the specs?
> 
> -Marc
",joliss,marcisme
631,2012-02-02 20:30:24,"Hello
I run this test: https://gist.github.com/1725501
in my environment: https://gist.github.com/1725576   + capybara-1.1.2.
and get error:
 ArgumentError: @request must be an ActionDispatch::Request

Q: Can capybara works with Rails 3.2.1  and RSpec 2.8.0? 
",JohnBat26,request
628,2012-02-02 09:57:27,"/cc @jnicklas 

Thanks -- I've merged this. (If we find that it's over-eager with our development dependencies, we can always change or remove it later, I guess.)

And thanks for building Gemnasium, @laserlemon! :-)
",joliss,jnicklas
627,2012-01-30 08:36:08,"Hey 

My enviroment:
Jruby 1.6.5
Rails 3.0.11
Cucumber-Rails 1.2.1
Capybara 1.1.2
Selenium 0.2.2
Selenium-client 1.2.18
Selenium-webdriver 2.16.0

I am using a rails date kit: 
http://www.methods.co.nz/rails_date_kit/rails_date_kit.html
To create date_fields 

I am trying to select a date in my step definitions:
find(:xpath, "".//input[@id='inspection_date']"").select(date.to_s)

But i am getting a error saying the following:
cannot select option, no option with text '2011-02-14' (Capybara::ElementNotFound)

And if I try to select the date with the select_date(field, with=> date)
It gives me the following error:
 Unable to find xpath "".//label[contains(., 'inspection_date')]"" (Capybara::ElementNotFound)

Is there a way to select the date from a text_field using the rails date kit
",Gerhardk,id
620,2012-03-27 19:05:04,"I've been meaning to cc @jarib for a while. Jari, do you have any idea?
",joliss,jarib
614,2012-01-12 17:31:23,"Some drivers (like WebKit) apparently do this. Suggested by
@jonleighton in #611.
",joliss,jonleighton
613,2012-01-12 17:49:47,"@joliss any chance you can merge this one too? then poltergeist will be green against caypbara master :) thanks
",jonleighton,joliss
609,2012-02-08 09:50:48,"Let's cc him: @jnicklas, care to take a look?
",joliss,jnicklas
606,2012-01-10 17:34:07,"---

`instance_variable_set(:@last_request, nil)` is rather ugly, but Rack::Test does not expose a writer for `@last_request` in lib/rack/mock_session.rb.

Do you think this is too ugly? It won't fail outright if `@last_request` ever goes away in Rack::Test, but the referer behavior will break.
",joliss,last
606,2012-01-20 12:47:41,"@jnicklas 

I'm starting to think that this is actually not the right way to do it.

I've repushed a better fix with a cleaned up (shorter) implementation of referer handling. Instead of always sending referers and special-casing visits and redirects, we now explicitly send a referer along with links (follow) and form submissions (submit), like a real browser.

I've also added a test so we now cover everything (visit, link, redirect, submit).

See if you like it! :)
",joliss,jnicklas
606,2012-02-01 00:12:18,"@jnicklas I'm pretty confident that the repushed code is good. Mind if I self-merge?
",joliss,jnicklas
605,2012-01-10 13:34:57,"This way users of Capybara 1.1.2 will not be confused. We could start
preferring has_text in the README once 2.0.0 is out.

@hardbap in #580 and @mipearson in #604 ran into this -- thanks to
both for the reports!
",joliss,mipearson
605,2012-01-10 13:34:57,"This way users of Capybara 1.1.2 will not be confused. We could start
preferring has_text in the README once 2.0.0 is out.

@hardbap in #580 and @mipearson in #604 ran into this -- thanks to
both for the reports!
",joliss,hardbap
604,2012-01-10 04:47:15,"In the AJAX section:



a variant of this:



Gives me



Appending puts above it shows that the element is found and that it has text.

Investigation of the API docs shows that `Capybara::Node::Element` does not mix in `Matchers`, hence no `has_text?` method.

Workaround is `find(#title).text.should include?(@advert.title)`

Using REE 1.8.7, Rails 3.0.11, Capybara 1.1.1, rack-test 0.5.7, Cucumber 1.1.4
",mipearson,advert
597,2012-01-08 12:28:13,"Hi there!

This is a duplicate of issue https://github.com/jnicklas/capybara/issues/570 , but I am attaching a failing spec and I'll try to explain why I think this is a real issue.

I've attached a failing spec here: https://gist.github.com/1578175

In that issue, @jnicklas closes the issue telling that browsers won't bother about that.

The problem is that because of Nokogiri (or Capybara interacting with it, i am not sure where is the real problem) inserts that xml declaration, Capybara parsing breaks and some of my specs are failing.

Every spec where we test that we have some content, and this content contains accented characters (áéíóú), or where we test that we have a html tag (for example, <iframe></iframe>) that with the xml declaration get converted to <iframe />.

The attached spec works  properly in my laptop (capybara 1.1.1, nokogiri 1.5.0, rack 1.2,5, rack-test 0.5.7, ruby 1.9.2p180), but fails in my CI server (same version of every gem, ruby, etc, only difference is that is a 64 bit machine).

I'll try to find the problem.
",gaizka,jnicklas
591,2012-01-04 18:27:50,"/cc @jarib

Sometimes (very rarely), running the Capybara test suite yields failures with a weird ""docElement is null"" error message.
On my system (MRI 1.9.2 I'm pretty sure): https://gist.github.com/1560935
Or Travis: http://travis-ci.org/#!/jnicklas/capybara/jobs/475145

The offending test code is here: https://github.com/jnicklas/capybara/blob/master/lib/capybara/spec/session/within_spec.rb#L22 ff.

Any ideas as to what might be going on?
",joliss,jarib
591,2012-01-04 19:36:18,"I have no idea what that error even means. Haven't ever seen it locally on my machine either, which is strange. Maybe @jarib knows? Sorry for linking you in all the time Jari, I'll buy you a beer to make up for it next time we meet ;) At least we know that it's not completely random, since it seems to be failing with the same spec.
",jnicklas,jarib
589,2012-01-03 20:29:23,"/cc @madadam

Quoting my commit message in c444d336:

> Remove broken tests for server_boot_timeout
> 
> When they were added in 09d6335, responsive? already only hit `/__identify__`, which does not hit the server, but gets special-cased in Capybara's Identify server class (and runs instantly). 
> 
> So it's not clear what constitutes a ""slow"" server that might time out at boot, and thus why server_boot_timeout needs to be configurable. A server that is slow to respond to HTTP requests would not trigger the boot timeout. All we really seem to be waiting for within the timeout window is for Thin or WEBrick to come up.

It's not clear to me at this point that this was ever a useful option. Should we perhaps remove it for Capybara 2.0? If it comes up for anyone, we can re-add it in 2.x, this time with proper tests to show why it's needed.
",joliss,madadam
581,2011-12-25 22:59:02,"Hi,

I am stuck with a very weird issue and was wondering whether anybody here could give some help.
I am using cucumber (1.1.4), cucumber-rails (1.2.1), capybara (1.1.2) with capybara-webkit (0.7.2) for the @javascript enabled scenarios, and the default rack_test driver for all the other scenarios. 

The weird thing is that, give one sample feature with just one normal scenario (rack_test) and another @javascript enabled scenario, the following happens:

1) if I run each scenario individually, both run fine;
2) if I run the whole feature, and the @javascript scenario is the last one/follows the rack_test one, all is OK.
3) BUT if I invert the order and have the @javascript scenario first and then the normal one, the JavaScript scenario passes while the second one fails with ""Capybara::InfiniteRedirectError"".

Any idea? I have been looking for wrong redirections etc in my app but I can't find anything that would explain this behaviour and anyway, as said, the problem only happens unless the @Javascript scenarios follow the normal ones, in which case all scenarios pass.

What could possibly change depending on whether @javascript tagged scenarios come first or after? 
I could post some code snippets if you suggest what you would need to check.

I've also posted the same issue to the Capybara-Webkit project (https://github.com/thoughtbot/capybara-webkit/issues/232) as I am not sure of where this would belong.

Thanks in advance!
",vitobotta,Javascript
581,2011-12-25 22:59:02,"Hi,

I am stuck with a very weird issue and was wondering whether anybody here could give some help.
I am using cucumber (1.1.4), cucumber-rails (1.2.1), capybara (1.1.2) with capybara-webkit (0.7.2) for the @javascript enabled scenarios, and the default rack_test driver for all the other scenarios. 

The weird thing is that, give one sample feature with just one normal scenario (rack_test) and another @javascript enabled scenario, the following happens:

1) if I run each scenario individually, both run fine;
2) if I run the whole feature, and the @javascript scenario is the last one/follows the rack_test one, all is OK.
3) BUT if I invert the order and have the @javascript scenario first and then the normal one, the JavaScript scenario passes while the second one fails with ""Capybara::InfiniteRedirectError"".

Any idea? I have been looking for wrong redirections etc in my app but I can't find anything that would explain this behaviour and anyway, as said, the problem only happens unless the @Javascript scenarios follow the normal ones, in which case all scenarios pass.

What could possibly change depending on whether @javascript tagged scenarios come first or after? 
I could post some code snippets if you suggest what you would need to check.

I've also posted the same issue to the Capybara-Webkit project (https://github.com/thoughtbot/capybara-webkit/issues/232) as I am not sure of where this would belong.

Thanks in advance!
",vitobotta,javascript
581,2011-12-26 01:45:21,"This is going to sound crazy... Could jQuery's autocomplete possibly be the cause of this issue? It doesn't happen if I ignore some steps to fill an autocomplete field from within the @javascript scenario. Any idea?
",vitobotta,javascript
581,2011-12-26 15:08:17,"Hi Jonas,

thank you. You were right in that it had something to do with the database (or so it seems). I have DatabaseCleaner.strategy = :transaction in my env.rb, and if I leave it as it is the problem persists and, from looking at the test.log, it seems like all tables get truncated after the @javascript scenario although I have set the strategy to transaction.

I can't remember in which gem's code I found this, but apparently with the gems I am currently using the database strategy is automatically defaulted to :truncation for the JavaScript enabled scenarios. 

With the capybara-webkit driver I am using this doesn't seem to work for some reason, while everything works well if I am using the :transaction strategy for both the js and non-js scenarios; from looking into the code it seems -unless I have misunderstood it- that now the db connection is automatically shared between rack_test based scenarios and the capybara based ones, correct?
So I guess this is why apparently there is no need any more to switch database strategy between transaction and truncation depending on the driver?

Anyway, the problem disappeared when I explicitly set Cucumber::Rails::Database.javascript_strategy = :transaction.
No more truncated tables and everything works great and fast.

Thank you :)
Vito
",vitobotta,javascript
581,2011-12-27 14:34:35,"> from looking into the code it seems -unless I have misunderstood it- that now the db connection is automatically shared between rack_test based scenarios and the capybara based ones, correct?

The ""shared DB connection"" thing means that the connection is shared between the main thread and the server thread. (This would be necessary for `@javascript` scenarios, i.e. when Capybara uses Selenium instead of Rack::Test -- Rack::Test doesn't use a separate thread.) The :transaction strategy can't work with Selenium unless you have shared DB connections.

Grepping the cucumber-rails source (for `_strategy` and `share`) it seems to me that it doesn't use sharing by default and instead uses the truncation strategy, but I may be wrong. I'm not a cucumber expert.

Hope this clears things up a bit!
",joliss,javascript
581,2011-12-27 15:13:31,"Surely it does, thank you for the clarification!

On 27 Dec 2011, at 14:34, Jo Liss wrote:

> > from looking into the code it seems -unless I have misunderstood it- that now the db connection is automatically shared between rack_test based scenarios and the capybara based ones, correct?
> 
> The ""shared DB connection"" thing means that the connection is shared between the main thread and the server thread. (This would be necessary for `@javascript` scenarios, i.e. when Capybara uses Selenium instead of Rack::Test -- Rack::Test doesn't use a separate thread.) The :transaction strategy can't work with Selenium unless you have shared DB connections.
> 
> Grepping the cucumber-rails source (for `_strategy` and `share`) it seems to me that it doesn't use sharing by default and instead uses the truncation strategy, but I may be wrong. I'm not a cucumber expert.
> 
> Hope this clears things up a bit!
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/jnicklas/capybara/issues/581#issuecomment-3281777
",vitobotta,javascript
578,2012-02-05 11:25:50,"@rrgomez: which version of Capybara are you using? Are you using `.native`? Please provide a full stack trace!
",jnicklas,rrgomez
577,2011-12-20 23:49:25,"As suggested by @mcmire and @gorn in #483.

---

(Just updated this for a more extensive rewrite of the RSpec section.)

I went through it sentence by sentence and found that none of all those details really added anything. So now we're left with two short paragraphs.

You like?
",joliss,gorn
577,2011-12-20 23:49:25,"As suggested by @mcmire and @gorn in #483.

---

(Just updated this for a more extensive rewrite of the RSpec section.)

I went through it sentence by sentence and found that none of all those details really added anything. So now we're left with two short paragraphs.

You like?
",joliss,mcmire
573,2011-12-17 16:05:50,"https://gist.github.com/1490592

Test only works if @browser.navigate.to('about:blank') was commented in the reset method of Capybara's driver.rb.
Is there a workaround than blanking out the line ?
",kkganesan,browser
564,2011-12-09 21:56:34,"The Capybara bindings to WebDriver have fallen slightly behind the current functionality of WebDriver.

In particular, the WebDriver#execute_script function has the capability of acting on a WebDriver::Element object as follows: 

  button = driver.find_element(:id, ""plainButton"")
  driver.execute_script(""return arguments[0].innerText;"", button)

This is because the WebDriver#execute_script method is defined as:

  def execute_script(script, *args) 
      ... #stuff
  end

I added the following functionality (note, wherever something was applied to evaluate_script, it was applied to execute_script as well): 
In capybara/session.rb -> 
    ##
    #
    # Evaluate the given JavaScript and return the result. Be careful when using this with
    # scripts that return complex objects, such as jQuery statements. +execute_script+ might
    # be a better alternative.
    #
    # @param  [String] script   A string of JavaScript to evaluate
    # @param  [Array]  *args    An optional array of arguments to feed the script
    # @return [Object]          The result of the evaluated JavaScript (may be driver specific)
    #
    def evaluate_script(script, *args)
      driver.evaluate_script(script, *args)
    end

In capybara/selenium/driver.rb:

  def execute_script(script, *args)
    browser.execute_script(script, *args)
  end

  def evaluate_script(script, *args)
    browser.execute_script(""return #{script}"", *args)
  end

In capybara/driver/base.rb:

  def execute_script(script, *args)
    raise Capybara::NotSupportedByDriverError
  end

  def evaluate_script(script, *args)
    raise Capybara::NotSupportedByDriverError
  end

I am in the process of running the test suite on Capybara to see if my changes messed with any functionality, but I suspect not. If it does, we can simply back it out to just change the Selenium bindings to evaluate_script/execute_script?

Thanks,
Em
",wokkaflokka,return
564,2011-12-09 21:56:34,"The Capybara bindings to WebDriver have fallen slightly behind the current functionality of WebDriver.

In particular, the WebDriver#execute_script function has the capability of acting on a WebDriver::Element object as follows: 

  button = driver.find_element(:id, ""plainButton"")
  driver.execute_script(""return arguments[0].innerText;"", button)

This is because the WebDriver#execute_script method is defined as:

  def execute_script(script, *args) 
      ... #stuff
  end

I added the following functionality (note, wherever something was applied to evaluate_script, it was applied to execute_script as well): 
In capybara/session.rb -> 
    ##
    #
    # Evaluate the given JavaScript and return the result. Be careful when using this with
    # scripts that return complex objects, such as jQuery statements. +execute_script+ might
    # be a better alternative.
    #
    # @param  [String] script   A string of JavaScript to evaluate
    # @param  [Array]  *args    An optional array of arguments to feed the script
    # @return [Object]          The result of the evaluated JavaScript (may be driver specific)
    #
    def evaluate_script(script, *args)
      driver.evaluate_script(script, *args)
    end

In capybara/selenium/driver.rb:

  def execute_script(script, *args)
    browser.execute_script(script, *args)
  end

  def evaluate_script(script, *args)
    browser.execute_script(""return #{script}"", *args)
  end

In capybara/driver/base.rb:

  def execute_script(script, *args)
    raise Capybara::NotSupportedByDriverError
  end

  def evaluate_script(script, *args)
    raise Capybara::NotSupportedByDriverError
  end

I am in the process of running the test suite on Capybara to see if my changes messed with any functionality, but I suspect not. If it does, we can simply back it out to just change the Selenium bindings to evaluate_script/execute_script?

Thanks,
Em
",wokkaflokka,param
564,2011-12-10 00:17:18,"Okay, this is working good so far, but there's a couple of issues:
1. How about cross-driver compatibility? Any opinions, @jnicklas? (Perhaps this relies too much on Selenium features?)
2. It would need documentation, I think. Probably tests as well.
3. As it is you'd have to use .native, like so: `page.execute_script('... arguments ...', el.native)` That seems awkward. We'd probably have to auto-convert nodes into native objects.
",joliss,jnicklas
564,2011-12-30 16:22:00,"/cc @jnicklas 

I think as it is, this is not mergeable, so I'll go ahead and close this for now. If you repush new code, just leave a comment and we can reopen it. :)
",joliss,jnicklas
563,2011-12-09 20:55:57,"In WebDriver, one can call the 'execute_script' method as follows:
button = driver.find_element(:id, ""plainButton"")
driver.execute_script(""return arguments[0].innerText;"", button)      

In Capybara with driver set to :selenium, the following method's of execution return a ""Wrong # of Arguments (2 for 1)"" error:
1) 
scripts = page.all(:xpath, ""//script[contains(@type,'text/javascript') and contains(text(),'Highcharts.StockChart')]"")
scripts.each { |chart|
  code = evaluate_script(""return arguments[0].innerHTML"", chart)
}

2) 
scripts = page.all(:xpath, ""//script[contains(@type,'text/javascript') and contains(text(),'Highcharts.StockChart')]"")
scripts.each { |chart|
  code = page.driver.execute_script(""return arguments[0].innerHTML"", chart.native)
}

Currently, the only way to achieve this is by directly accessing the WebDriver object itself, as follows:

webdriver = page.driver.instance_eval(""@browser"")
code = webdriver.execute_script(""return arguments[0].innerHTML"", chart.native)

It would be nice if the bindings could be brought up to speed.

Many thanks!
",wokkaflokka,browser
563,2011-12-09 20:55:57,"In WebDriver, one can call the 'execute_script' method as follows:
button = driver.find_element(:id, ""plainButton"")
driver.execute_script(""return arguments[0].innerText;"", button)      

In Capybara with driver set to :selenium, the following method's of execution return a ""Wrong # of Arguments (2 for 1)"" error:
1) 
scripts = page.all(:xpath, ""//script[contains(@type,'text/javascript') and contains(text(),'Highcharts.StockChart')]"")
scripts.each { |chart|
  code = evaluate_script(""return arguments[0].innerHTML"", chart)
}

2) 
scripts = page.all(:xpath, ""//script[contains(@type,'text/javascript') and contains(text(),'Highcharts.StockChart')]"")
scripts.each { |chart|
  code = page.driver.execute_script(""return arguments[0].innerHTML"", chart.native)
}

Currently, the only way to achieve this is by directly accessing the WebDriver object itself, as follows:

webdriver = page.driver.instance_eval(""@browser"")
code = webdriver.execute_script(""return arguments[0].innerHTML"", chart.native)

It would be nice if the bindings could be brought up to speed.

Many thanks!
",wokkaflokka,type
563,2011-12-10 00:20:23,"> Currently, the only way to achieve this is by directly accessing the WebDriver object itself, as follows:
> webdriver = page.driver.instance_eval(""@browser"")

You can just use page.driver.browser here, by the way.

> To update on this, it seemed like pretty low hanging fruit, so I went ahead and forked the repo/added the necessary functionality.

Great! Let's continue the discussion at #564. :)
",joliss,browser
554,2012-01-03 13:06:10,"Very strange, why would these behave differently?

@jarib: is it not possible to clear date and time fields?
",jnicklas,jarib
553,2011-11-29 23:50:44,"Rails 3.1.2 app.  I can do a new action go to the show page and find elements not problem.  when I have an object then go to the edit screen the matcher does not find the text.  I can do a save_and_open_page and the text is in the view.

scenario ""Problem Edit"" do
    @problema = Factory.create(:problem, :name => 'Type II Diabetes')
    visit edit_problem_path(@problema)
    save_and_open_page
    page.should have_content(""Type II Diabetes"") --> Not seeing it even though the save and open shows it.
end
",chabgood,problema
545,2011-11-18 12:29:40,"I have a very strange problem with capybara at the moment. My situation is the following:
1. I run my tests using cucumber
2. My default driver is akephalos
3. For some of the tests, I added a @selenium tag
4. I use this before hook to start a XVFB using the headless gem:



This seems to work fine initially.  
When my first @selenium scenario comes up, I get this output:



After the scenario, firefox will still stay launched (as seen in ps aux), but akephalos will be the default driver again.  
A few scenarios later, often when calling ""Capybara.reset!"", I will receive an exception.
I caught this exception and added some additional output:



The result:



The full stacktrace looks like this:



This DOESN'T happen during a @selenium scenario. This is in an akephalos one!
Any idea why the after hook in cucumber might try to call the non-current driver?

Could it have something to do with https://github.com/jnicklas/capybara/commit/2cfb73320fb64f189e57f15b681b48ac03608bce ?
",rb2k,selenium
544,2011-11-28 09:44:47,"This is a widespread issue, I've seen at least 4 instances of people trying to implement the behavior they think Capybara provides, but they can't get working.  In all cases they try to do achieve the same behavior, some via css, others via xpath.  Anyway, there does seem to be a common understanding of the desired behavior.

@grzuy, my understanding of `visible => false` is the same as yours.  From what I've seen of the solutions people have offered up others have a similar understanding.

Maybe for an collective method like `all`, the keys `:select_visible` or `:exclude_visible` are more descriptive of what is intended to happen?  Other more explicit key names are `:if_visible`, `:is_visible` or `:is => :visible|:invisible` and `if => :visible|:invisible`

I'm not being argumentative when I say I really don't understand why @jniklas claims the current behavior is expected.  Almost nobody else seems to think so, and if we took the new name the current behavior would surprise people:



When really it should be false.
",hedgehog,jniklas
541,2011-11-15 14:47:03,"Getting the same error when I run the Capybara test suite. @jarib, any insight on this?
",jnicklas,jarib
539,2011-11-09 19:26:54,"This might be a problem with Selenium or selenium-webdriver, I think. Cc @jarib. :)
",joliss,jarib
535,2011-10-31 16:40:39,"I am using Capybara with selenium driver, and doing require 'capybara/cucumber' to reset my session after every scenario. I am running tests in FireFox.

If I debug I can trace that after every scenario Capybara calls the _Capybara.reset_sessions!_ in After do hook, which further down calls  @browser.manage.delete_all_cookies in selenium/driver.rb. However it doesn't seem to actually clear the cookies and no exception is thrown as well.

Could this be because Capybara doesn't launch FireFox with Administrator privilege? or there is something else wrong, any ideas?

OS: Windows 7 64 bit.
My gem versions
- capybara (1.1.1)
- cucumber (1.1.0)
- selenium-webdriver (2.8.0)
",uahmed,browser
525,2012-01-09 11:14:09,"@jnicklas apologies about that. I'm pretty sure RSpec's doco is not the only source of confusion here, but we didn't help matters by posting an incorrect example in the RDoc. The doc error is fixed (thanks to @jwow313), but won't be reflected on rubydoc.info until the next rspec-rails release.
",dchelimsky,jnicklas
525,2012-01-09 11:14:09,"@jnicklas apologies about that. I'm pretty sure RSpec's doco is not the only source of confusion here, but we didn't help matters by posting an incorrect example in the RDoc. The doc error is fixed (thanks to @jwow313), but won't be reflected on rubydoc.info until the next rspec-rails release.
",dchelimsky,jwow313
516,2011-10-05 19:24:37,"Hey @jnicklas!

In order to run Selenium via Capybara on my virtual machine running IE (kill me), you need to be able to bind the server IP to a net interface on the same subnet as the VM.

This patch exposes an configuration variable to allow you to bind the test server to any net interface on your local machine.

It falls back to 127.0.0.1 if the config var is not set.

Thanks!
",dbalatero,jnicklas
511,2011-09-28 18:24:32,"Hey @jnicklas,

I have two inputs on my form, ""Nome da Fórmula"" and ""Fórmula"".

My scenario is like this:



But the second line is filling ""Nome da Fórmula"" instead of ""Fórmula"".

I guess we should check first for label using full match and after the partial match.

Something like: ""label[equals(., ""Fórmula"") | contains(., ""Fórmula"")]"".

I don't know the XPath language, so is not exactly that.

What you think?
",sobrinho,jnicklas
508,2011-11-07 03:58:07,"@joevandyk -- I think that's a separate issue.

There are two outstanding issues regarding exceptions in Capybara. One has to do with webservers.

The other... well I haven't looked too deeply into it, but it sounds like it has something to do with how rails rescues from exceptions in controllers. I know with previous versions of rails/rspec/cucumber, you used to have to manually specify when you want Rails to handle errors and when to not.

E.g., in Cucumber, you can set a tag `@allow-rescue` before a scenario so you can test Rails's internal handling of exception handling: https://github.com/cucumber/cucumber-rails/blob/master/lib/cucumber/rails/action_controller.rb

https://github.com/rails/rails/blob/v3.1.1/actionpack/lib/action_controller/test_case.rb#L510
",agibralter,allow-rescue
508,2011-11-07 04:53:52,"Well it really doesn't have much to do with Capybara at all. It's something that both RSpec and Cucumber deal with, and they make you deal with it manually. The reason it is not automatic is that sometimes you want Rails to spit the error back at you and sometimes you want to see how rails will deal with the error. There's no one-size-fits-all solution to this.

For example, if you put this in your Cucumber env.rb file:



and you're testing this controller:



you'll find that if your code tests `FooController#some_action`, which raises `ActiveRecord::RecordNotFound`, Cucumber will spit the error back to the screen. Now, let's say you want to actually test the code that happens in `# Some cool logic you want to test`. In order to do this, you'll have to override the `ActionController::Base.allow_rescue = false` setting you have in env.rb by tagging the `Scenario` with `@allow-rescue`.

Of course, you can do things the other way around, and start with `ActionController::Base.allow_rescue = true`...

In the case of RSpec, please refer to: https://www.relishapp.com/rspec/rspec-rails/docs/controller-specs/bypass-rescue
",agibralter,allow-rescue
508,2011-11-07 06:24:25,"Ok. So I have a proof of concept here: https://gist.github.com/1344306

Here's the problem though. We run into the same issue with `@allow-rescue`. Sometimes, you _want_ your app to return a 500 error and you want to test how your JS deals with that situation. Ugggg. It seems like this is something that's going to have to be handled in both Capybara and RSpec/Cucumber if it's handled at all ""officially."" I'm probably going to tweak my example to allow for tagged examples to bypass the exception catcher.
",agibralter,allow-rescue
494,2011-09-14 12:28:48,"I am using Cucumber, Capybara and Selenium with Spork with Factory Girl creating records that are needed in the background steps. I discovered that the @selenium tag on a test caused my RSpec Factory created records to not be seen by the selenium instance, while (after 2 days of debugging...) I found out that using the @javascript tag causes selenium to see the database.

I have no idea why, but it would be good if the README reflected that e.g. Factory Girl cannot interact with the database used by the @selenium tag-fired selenium instance.

Anyway, now it works, and thank you for a great library. I hope someone else can save this time I spent literally wading through forums ;-)
",houen,selenium
494,2011-09-14 12:28:48,"I am using Cucumber, Capybara and Selenium with Spork with Factory Girl creating records that are needed in the background steps. I discovered that the @selenium tag on a test caused my RSpec Factory created records to not be seen by the selenium instance, while (after 2 days of debugging...) I found out that using the @javascript tag causes selenium to see the database.

I have no idea why, but it would be good if the README reflected that e.g. Factory Girl cannot interact with the database used by the @selenium tag-fired selenium instance.

Anyway, now it works, and thank you for a great library. I hope someone else can save this time I spent literally wading through forums ;-)
",houen,javascript
483,2011-12-21 00:29:38,"@gorn wrote:

> I use RoR and I somewhat did not pay attention that the README is NOT only for Rails so I did not even seeked for RoR section ;-)

Actually, I think a lot of people get tripped up by this and forget to
include 'capybara/rails'.

@jnicklas, back when you added rails.rb, was there something that
stopped you from autodetecting Rails (like `defined? Rails.version`)?

I'm thinking that we could require capybara/rails.rb at load-time for
Capybara, and wrap it in an `if defined? Rails.version` block.

One thing we'd have to deal with is deferring these lines in rails.rb
until the Rails app has been loaded, or Rails.root won't be defined:


",joliss,jnicklas
481,2011-09-03 18:22:25,"I'm starting to dig into failure_messages now, specifically understanding the difference between how they are treated in HaveSelector versus HaveMatcher. It appears the direction I'm moving in is a bit at odds with 70c4f196, but I don't really understand the intent of that commit. Seems to me if everything is a selector, there is no need for two matcher classes, and the selector can be responsible for providing a meaningful failure_message.

@jnicklas - Can you help me understand the intent of that commit so I don't stray too far in a direction you've already chosen to avoid?
",adamlogic,jnicklas
477,2011-09-01 17:35:16,"[Cc @jarib; see GitHub for the original report.]

It does make sense, though what you describe seems to be a problem with Selenium, not Capybara. Capybara just forwards the call:



I'll close this issue, but perhaps either of you want to bump this problem upstream to Selenium (if it's not a known bug already).
",joliss,jarib
463,2011-08-23 13:14:29,"As I understand it, `quit` calls `@browser.quit`, which stops the child process if it's still running. This code bypasses that call, which means child processes would be left running. I may be wrong, but that would clearly be an unacceptable outcome.

That said, we've been unable to find an acceptable solution within rspec for this, so it would be great to see it addressed in Capybara (or in Childprocess). Of course, I have no ideas on how :)
",dchelimsky,browser
463,2011-08-23 13:18:30,"@jnicklas: I'll try to help.

The root failure is rspec + capybara + selenium driver eats the process exit code. So when a spec fails rspec says `exit 1`, then on cleanup capybara says `no, no, exit 0`. This is happening in `@browser.kill`, although I am not sure how. IMO, it's a bug.

In RSpec we tried a workaround of saying `capybara sets exit code last, nomatter what`. It worked around this particular problem, but broke existing functionality. We can't figure out a fix that works for all scenarios. Saying `my exit code is last` is tough because we end up in a nested `at_exit` block that execute in some weird order in Ruby.

You're the boss to Capybara to figure out what the best way to proceed is. I think this or a variant of this fix should be committed, Capybara shouldn't be setting the process exit code ever, it's not in the business of doing that.
",dblock,browser
462,2011-08-19 21:34:59,"This is in response to the suggestion from @betelgeuse [1] -- I see what you mean. 

I was going to change that test's description, but then it got long, and then I was going to add a comment, but I'm not a big fan of comments when code could speak for itself, so I split the previous test whose description was ""should reset the driver using Capybara.use_default_driver, even if an exception occurs"" into two tests.

One test shows that the driver will be reset to default if it wasn't set to anything before #using_driver, the other test makes sure that it's reset even if there's an exception, and I assigned the driver before the block to a variable to remove the confusion with default_driver altogether, hopefully.

Again, please let me know if there are any improvements I can make to this patch; I will be more than happy to do so. Thanks!

[1] - https://github.com/clnclarinet/capybara/commit/9b0447f203978bf5ad8259574f60801d442aad53#commitcomment-541398
",carols10cents,betelgeuse
461,2011-08-19 01:52:44,"Closes issue #452. #using_driver now restores the driver to what it was before the block rather than default_driver.

Please let me know if there are any improvements I can make to this patch.

I use capybara in my work and personal projects every single day, and I'm really thankful for all the work that @jnicklas and other maintainers have done. Please consider this a very tiny token of my appreciation!
",carols10cents,jnicklas
460,2011-08-19 06:32:11,"This dependency has been confirmed and encouraged by @jarib, btw.
",jnicklas,jarib
455,2011-09-02 04:27:19,"I'm using rails 3.0.10, capybara 1.0.1 and selenium-webdriver 2.5.0 and it still doesn't work. 
When I try to run a scenario with the @javascript tag it returns:

Rack application timed out during boot
exit (SystemExit)

Am I missing something? Like a require or something. It works fine without the @javascript, though.
",matiasleidemer,javascript
448,2011-08-12 11:29:19,"Hmm, not sure if this is something that Capybara is doing wrong, sounds more like a Selenium issue.

This code was recently changed in Capybara due to deprecations in Selenium. It now looks like this: https://github.com/jnicklas/capybara/blob/master/lib/capybara/selenium/node.rb#L33-35. @jarib, does that seem correct?
",jnicklas,jarib
436,2011-07-29 23:13:30,"Wait, actually `bundle update` won't pull webdriver 2.2, since we were specifying `~> 2.0.0`. So I guess it _is_ reasonable to bump the dependency to the newest release. I just merged this pull request.

@jarib, should Capybara be using `~> 2.0` instead? How likely do you think is the API to break in backwards-incompatible ways between minor release in the 2.x branch?
",joliss,jarib
432,2011-11-10 04:32:54,"I'll close this for inactivity -- feel free to reopen of course, if you have any insights on what's causing the test to fail.

/cc @jnicklas
",joliss,jnicklas
431,2011-07-29 23:48:05,"Hm, this is very interesting. Let's Cc @jeroenvandijk (of capybara-mechanize) on the discussion as well.

When I merge your branch on master, I see _two_ failing tests right now:



(2) is the false negative you mentioned -- perhaps it's reasonable to mark it `pending` for now, as long as it's broken?

(1) only happens when I merge on master, not in your repo. Would you mind taking a look?
",joliss,jeroenvandijk
430,2011-07-22 11:28:44,"After looking into this some more, I think this problem is related to this rack-test pull request: **[Subdomain / Host awareness](https://github.com/brynary/rack-test/pull/23)** _(which was denied, stating that this should be solved by Capybara instead of rack-test)_. I also now believe this is 100% related to the above mentioned issue #376.

I wonder if this has been addressed already, I haven't found anything in the commits so far, and I still haven't found a sure-fire way of solving this issue without changing all path's to url's in the views.

**edit**
I can solve it by using `Capybara.default_host = ""mydomain.dev""` each time I need Capybara to use a different domain, but I still don't see why it wouldn't be better to simply use the host of the current page when a relative path is clicked.

For now I solved it by adding this to my `env.rb`:



I won't close this just yet, like to know what @jnicklas thinks of this.
",JeanMertz,jnicklas
429,2011-07-22 09:21:01,"I have a test defined like this:



its a pretty simple that that sets customer to my customer factory and then fills in the new actions form with the data from that factory (what my factory_to_form macro does) and the clicks the submit button. 

My problem is that the submit button never seems to touch the create action, its going to ""/customers"" and not saving the customer.

The form is a standard `form_for(@customer)` and the button is just `f.submit`, I can't think of any reason why this form would work fine in the browser but not in this test.

Why would capybara not be posting to the right place?

I've written the test for another controller and the same thing happens.
",Arcath,customer
426,2011-07-21 15:59:09,"Hi, in issue #312 @priit comment the possibility of use symbols for fill_in, (https://github.com/jnicklas/capybara/issues/312) I think that this is a more natural form instead of use strings because we are already using symbols in forms to designate controls as   `f.text_field :something`   and use   `fill_in :something, :with => ""anything""`   its more clear. 
",csegura,priit
425,2011-07-21 11:08:38,"Hm, seems a little peculiar on selenium-webdriver's side, though not obviously wrong. Before we go fixing the Capybara code, let's have @jarib weigh in. What do you think, Jari?
",joliss,jarib
420,2011-07-29 20:39:06,"> Just an FYI:
> 
> Developers with Omniauth and Capybara won't be able to use Launchy 2.0.4, as there's a gem dependency conflict with the addressable gem:
> 
>    omniauth depends on
>      addressable (= 2.2.4)
> 
>    launchy (>= 2.0.4) depends on
>      addressable (2.2.6)

That's icky. Good thing launchy is not a runtime dependency then, huh.

@intridea, perhaps the omniauth dependencies should be relaxed a bit?
",joliss,intridea
417,2011-07-18 20:32:30,"Tagging a scenario with @javascript @wip causes it to throw the following error:

 `undefined method 'tag_names' for nil:NilClass (NoMethodError)
  /Users/arr/.rvm/gems/ruby-1.8.7-p334@ratereport/gems/activesupport-3.0.7/lib/active_support/whiny_nil.rb:48:in 'method_missing'
  /Users/arr/.rvm/gems/ruby-1.8.7-p334@ratereport/gems/cucumber-1.0.0/bin/../lib/cucumber/ast/feature_element.rb:70:in 'source_tag_names'
  /Users/arr/.rvm/gems/ruby-1.8.7-p334@ratereport/gems/capybara-1.0.0/lib/capybara/cucumber.rb:18:in 'Before'`

Removing the @wip tags causes it to work correctly.
",mus0u,javascript
417,2011-07-18 20:32:30,"Tagging a scenario with @javascript @wip causes it to throw the following error:

 `undefined method 'tag_names' for nil:NilClass (NoMethodError)
  /Users/arr/.rvm/gems/ruby-1.8.7-p334@ratereport/gems/activesupport-3.0.7/lib/active_support/whiny_nil.rb:48:in 'method_missing'
  /Users/arr/.rvm/gems/ruby-1.8.7-p334@ratereport/gems/cucumber-1.0.0/bin/../lib/cucumber/ast/feature_element.rb:70:in 'source_tag_names'
  /Users/arr/.rvm/gems/ruby-1.8.7-p334@ratereport/gems/capybara-1.0.0/lib/capybara/cucumber.rb:18:in 'Before'`

Removing the @wip tags causes it to work correctly.
",mus0u,wip
417,2011-07-25 20:38:49,"Very strange. It's happening here: https://github.com/jnicklas/capybara/blob/master/lib/capybara/cucumber.rb#L18

Maybe one of the Cucumber folks sees some obvious problem... I'll go ahead and Cc @mattwynne -- hi Matt, any ideas?
",joliss,mattwynne
417,2011-07-25 20:57:23,"I'd like to see the scenario that caused this. It looks like a bug in Cucumber to me.

@a-ryan-reynolds could you please gist the Gherkin that caused this?
",mattwynne,a-ryan-reynolds
417,2011-08-01 16:28:32,"I get this as well, but actually not @wip. Here's my feature:
Feature: Device Preview
  In order to better design their tours
  an Author
  can preview their tour as it would appear on a device

  Background:
    Given I am logged in as an author for ""SampleOrg""
    And Organization:SampleOrg has Tour:My Tour
    And I am working on the ""Home"" node of ""My Tour""

  @javascript
  Scenario: A user has attached body text
  ...

  @javascript
  Scenario: A user has set the phone background image for the tour
  ...

  @javascript
  Scenario Outline: Choosing device types
..

and the cucumber -f pretty output:

Feature: Device Preview
  In order to better design their tours
  an Author
  can preview their tour as it would appear on a device

  Background:                                         # features/device_preview.feature:6
  undefined method `tag_names' for nil:NilClass (NoMethodError)
   gems/activesupport-3.0.9/lib/active_support/whiny_nil.rb:48:in`method_missing'
   gems/cucumber-1.0.2/bin/../lib/cucumber/ast/feature_element.rb:70:in `source_tag_names'
   gems/capybara-1.0.0/lib/capybara/cucumber.rb:18:in`Before'
    Given I am logged in as an author for ""SampleOrg"" # features/step_definitions/user_steps.rb:23
    And Organization:SampleOrg has Tour:My Tour       # mattscilipoti-model_steps-b417cd708d9e/lib/model_steps/step_definitions.rb:97
    And I am working on the ""Home"" node of ""My Tour""  # features/step_definitions/tour_steps.rb:34

I'm actually not running javascript tests, so it appears (in my case) it's the Background that is triggering some processing...

Marking the whole feature as @javascript fixed it.
",MattRogish,javascript
417,2011-08-01 16:28:32,"I get this as well, but actually not @wip. Here's my feature:
Feature: Device Preview
  In order to better design their tours
  an Author
  can preview their tour as it would appear on a device

  Background:
    Given I am logged in as an author for ""SampleOrg""
    And Organization:SampleOrg has Tour:My Tour
    And I am working on the ""Home"" node of ""My Tour""

  @javascript
  Scenario: A user has attached body text
  ...

  @javascript
  Scenario: A user has set the phone background image for the tour
  ...

  @javascript
  Scenario Outline: Choosing device types
..

and the cucumber -f pretty output:

Feature: Device Preview
  In order to better design their tours
  an Author
  can preview their tour as it would appear on a device

  Background:                                         # features/device_preview.feature:6
  undefined method `tag_names' for nil:NilClass (NoMethodError)
   gems/activesupport-3.0.9/lib/active_support/whiny_nil.rb:48:in`method_missing'
   gems/cucumber-1.0.2/bin/../lib/cucumber/ast/feature_element.rb:70:in `source_tag_names'
   gems/capybara-1.0.0/lib/capybara/cucumber.rb:18:in`Before'
    Given I am logged in as an author for ""SampleOrg"" # features/step_definitions/user_steps.rb:23
    And Organization:SampleOrg has Tour:My Tour       # mattscilipoti-model_steps-b417cd708d9e/lib/model_steps/step_definitions.rb:97
    And I am working on the ""Home"" node of ""My Tour""  # features/step_definitions/tour_steps.rb:34

I'm actually not running javascript tests, so it appears (in my case) it's the Background that is triggering some processing...

Marking the whole feature as @javascript fixed it.
",MattRogish,wip
417,2011-08-29 20:15:25,"I was having this issue but with @javascript at the root Feature level and then arbitrary tag below that on the Scenario level @justin @skip_ci in this case. Removing that and flagging @javascript @wip at the Feature level fixed the issue.
",jsmestad,skip
417,2011-08-29 20:15:25,"I was having this issue but with @javascript at the root Feature level and then arbitrary tag below that on the Scenario level @justin @skip_ci in this case. Removing that and flagging @javascript @wip at the Feature level fixed the issue.
",jsmestad,justin
417,2011-08-29 20:15:25,"I was having this issue but with @javascript at the root Feature level and then arbitrary tag below that on the Scenario level @justin @skip_ci in this case. Removing that and flagging @javascript @wip at the Feature level fixed the issue.
",jsmestad,javascript
417,2011-08-29 20:15:25,"I was having this issue but with @javascript at the root Feature level and then arbitrary tag below that on the Scenario level @justin @skip_ci in this case. Removing that and flagging @javascript @wip at the Feature level fixed the issue.
",jsmestad,wip
417,2011-09-23 19:35:53,"I ran into this too...

**Workaround**: A workaround is to add a rescue in gems/capybara-1.1.1/lib/capybara/cucumber.rb:



When I did that, the feature ran fine.

Then I noticed: it was _only_ executing the `Background` and not any of the `Scenario`s!

This is consistent with what @corroded noted in https://github.com/cucumber/cucumber/issues/107:

> NOTE just double checked this and this consistently happens when I trying to run the specific line for a BACKGROUND, instead of a SCENARIO(which has tags?).

**Solution**: Make sure you're running at least one scenario in your feature!

I hadn't realized it at first, but I had tagged all of my scenarios in the feature as `@wip`, and then since the default profile excludes those scenarios with `--tags ~@wip` it now makes sense why there were no scenarios being executed!
",TylerRick,corroded
417,2011-09-23 19:35:53,"I ran into this too...

**Workaround**: A workaround is to add a rescue in gems/capybara-1.1.1/lib/capybara/cucumber.rb:



When I did that, the feature ran fine.

Then I noticed: it was _only_ executing the `Background` and not any of the `Scenario`s!

This is consistent with what @corroded noted in https://github.com/cucumber/cucumber/issues/107:

> NOTE just double checked this and this consistently happens when I trying to run the specific line for a BACKGROUND, instead of a SCENARIO(which has tags?).

**Solution**: Make sure you're running at least one scenario in your feature!

I hadn't realized it at first, but I had tagged all of my scenarios in the feature as `@wip`, and then since the default profile excludes those scenarios with `--tags ~@wip` it now makes sense why there were no scenarios being executed!
",TylerRick,wip
412,2011-07-15 17:33:11,"to test a form (with action action='/follows?follow[followable_id]=#{user.id}'])

In the debugger, I can call find(""form[@action='/follows?follow[followable_id]=#{@user2.id}']"") correctly to get the form element.

However, if I choose save_and_open_page, the generated page will transform the action to 
action='/follows?follow%5Bfollowable_id%5B=3']
escaping the [].

It's a minor issue as it does not effect test cases (presumably)
",brueckenschlaeger23,action
412,2011-07-15 17:33:11,"to test a form (with action action='/follows?follow[followable_id]=#{user.id}'])

In the debugger, I can call find(""form[@action='/follows?follow[followable_id]=#{@user2.id}']"") correctly to get the form element.

However, if I choose save_and_open_page, the generated page will transform the action to 
action='/follows?follow%5Bfollowable_id%5B=3']
escaping the [].

It's a minor issue as it does not effect test cases (presumably)
",brueckenschlaeger23,user2
409,2011-07-13 03:34:11,"When a redirect is followed to a different host, the value of @current_host is not updated. This commit fixes that.

I wasn't sure how to add a spec for this though. I think the best place would be an addition to current_host_spec.rb, where say e.g. page http://capybara-testapp.heroku.com/redirect_to_other would redirect to http://capybara2.elabs.se. The spec would then be something like:



Just don't know how to get a /redirect_to_other page hosted on that site ;-)
",lawrencepit,current
409,2011-07-25 20:02:31,"#422 is a dup of this one, I think. I looked at the code for each one, but I don't know Capybara's ins and outs well enough to tell which one is better, or if they even do the same thing. (I'm just a contributor -- Jonas is the maintainer, but he's on vacation at the moment.)

@lawrencepit and @mcolyer, would you guys be so kind as to take a look at each other's pull requests and tell me which of the two you think is better?

> Just don't know how to get a /redirect_to_other page hosted on that site ;-)

I think lib/capybara/spec/test_app.rb is where it's coming from, though you'd need Jonas to actually deploy it on heroku. (It's kindof suboptimal, I know...)
",joliss,mcolyer
408,2012-01-08 23:02:28,"/cc @jnicklas 

> I have a script that [demos the problem](https://gist.github.com/1076062/870eae0eafcd0401adac65b36025e71193bbc7c9)

This is printing ""yay, it worked"" with Capybara 1.1.2, selenium-webdriver 2.16.0, and Firefox 8.0.

So I'm assuming that whatever/wherever the problem was, it has been fixed in the meantime. If anyone is still seeing issues with iframes, please leave a comment (or even better, post a failing test) and I'll reopen this.
",joliss,jnicklas
406,2011-07-11 13:53:07,"Tested and merged -- thanks! :)

@jnicklas, FYI, this just bumped the webdriver dependency from ~> 0.2.2 to ~> 2.0.0 (the gem for the official Selenium 2.0 release).
",joliss,jnicklas
402,2011-07-01 23:39:44,"The 'within' is still not identified if I I try :type => :request or :type => :acceptance... apologies:

<pre>
require 'spec_helper'

describe ""superadmin/organizations/index.html.erb"", :type => :request do # specify this type when you use Capybara here
  
  before(:each) do
    3.times { Factory.create(:organization) }
    assign(:organizations, Organization.all)
    @organization_count = Organization.count
  end
  
  it ""shows the title"" do
    within(""div#organization_index"") do # not working
      render
    end
    rendered.should have_content(""Organizations"")
  end
  
  context ""shows a list of all organizations"" do
    it ""shows the list headers"" do
      render
      rendered.should have_selector(""ul#organization_list li ul#organization_list_headers"", :count=>1)
    end
    
    it ""shows a row for each organization"" do
      render
      rendered.should have_selector(""ul#organization_list li ul.items_within_organization"", :count=>@organization_count)
    end
    
    it ""shows the name for each organization"" do # use within later?
      render
      Organization.all.each do |o|
        rendered.should have_content(o.name)
      end
    end
    
    context ""shows the controls for each organization"" do # should probably narrow this with ""within""
      it ""displays the show link"" do
        render
        rendered.should have_link(""Show"", :count=>@organization_count)
      end
      
      it ""displays the edit link"" do
        render
        rendered.should have_link(""Edit"", :count=>@organization_count)
      end
    end
      
    # within(""ul#organization_list"") do
    #       rendered.should have_selector(""li"")
    #     end
    
  end
end
</pre>
",dmonopoly,organization
401,2011-06-30 01:21:23,"Howdy howdy,
I have an issue with Capybara (I think) escaping my arrays when a form has multipart enabled, here's some snippets:

Working form on another page (UsersController#_form)
   `""user_ids""=>[""[\""\"", \""2\""]""] # cucumber
    ""user_ids""=>["""", ""1""] # in browser test`

Non working form (OutletsController#_form)
 `""outlet_ids""=>["""", ""1""] # cucumber
  ""outlet_ids""=>["""", ""1""] # in browser test (the same)`

User form (working fine)
    `<%= semantic_form_for @user do |f| %>
      <h3>User Permissions</h3>
      <%= f.input :outlet_ids, :as => :check_boxes, :collection => @account.outlets %>
      <%= f.submit %> or <%= link_to ""Back to dashboard"", dashboard_path %>
    <% end %>`

Outlet form (le broken)
   `<%= semantic_form_for @outlet, :html => { :multipart => true } do |f| %>
      <h3>User Permissions</h3>
      <%= f.input :permissions, :as => :check_boxes, :collection => User.all %>
      <p><%= f.submit %> or <%= link_to ""Back to dashboard"", dashboard_path %></p>
    <% end %>`
",anathematic,outlet
401,2011-06-30 01:21:23,"Howdy howdy,
I have an issue with Capybara (I think) escaping my arrays when a form has multipart enabled, here's some snippets:

Working form on another page (UsersController#_form)
   `""user_ids""=>[""[\""\"", \""2\""]""] # cucumber
    ""user_ids""=>["""", ""1""] # in browser test`

Non working form (OutletsController#_form)
 `""outlet_ids""=>["""", ""1""] # cucumber
  ""outlet_ids""=>["""", ""1""] # in browser test (the same)`

User form (working fine)
    `<%= semantic_form_for @user do |f| %>
      <h3>User Permissions</h3>
      <%= f.input :outlet_ids, :as => :check_boxes, :collection => @account.outlets %>
      <%= f.submit %> or <%= link_to ""Back to dashboard"", dashboard_path %>
    <% end %>`

Outlet form (le broken)
   `<%= semantic_form_for @outlet, :html => { :multipart => true } do |f| %>
      <h3>User Permissions</h3>
      <%= f.input :permissions, :as => :check_boxes, :collection => User.all %>
      <p><%= f.submit %> or <%= link_to ""Back to dashboard"", dashboard_path %></p>
    <% end %>`
",anathematic,user
401,2011-06-30 01:21:23,"Howdy howdy,
I have an issue with Capybara (I think) escaping my arrays when a form has multipart enabled, here's some snippets:

Working form on another page (UsersController#_form)
   `""user_ids""=>[""[\""\"", \""2\""]""] # cucumber
    ""user_ids""=>["""", ""1""] # in browser test`

Non working form (OutletsController#_form)
 `""outlet_ids""=>["""", ""1""] # cucumber
  ""outlet_ids""=>["""", ""1""] # in browser test (the same)`

User form (working fine)
    `<%= semantic_form_for @user do |f| %>
      <h3>User Permissions</h3>
      <%= f.input :outlet_ids, :as => :check_boxes, :collection => @account.outlets %>
      <%= f.submit %> or <%= link_to ""Back to dashboard"", dashboard_path %>
    <% end %>`

Outlet form (le broken)
   `<%= semantic_form_for @outlet, :html => { :multipart => true } do |f| %>
      <h3>User Permissions</h3>
      <%= f.input :permissions, :as => :check_boxes, :collection => User.all %>
      <p><%= f.submit %> or <%= link_to ""Back to dashboard"", dashboard_path %></p>
    <% end %>`
",anathematic,account
401,2011-07-08 13:05:00,"*bugs @brynary* ;-)
",joliss,brynary
400,2011-06-30 00:53:33,"Ok lets see if I can explain:

1) We want our cucumber scenarios to be grouped by concepts that make business sense rather than technical decomposition based on wether the page elements are updated by asynchronous javascript or not. This means that we have many '@javascript' scenarios that also need to interact with both 'static' and 'asynchronously updated' elements.

2) When dealing with the 'static' elements in these scenarios, the default waiting behaviour is unnecessary and a bit of a pain. You have to be careful with the whole should/should_not has_selector?/has_no_selector? thing or you will find that your test passes, but waits unnecessarily, because nothing about that element is going to change. We have a large team with differing levels of comfort with BDD and automation, and I'd rather be able to say 'if the element you are testing is not updated via JS, then you don't need to worry about this stuff, just turn off waiting for that element;

3) The above is exacerbated by the fact that we want to build an abstraction layer for our app on top of the basic capy stuff.

For example, out app has the concept of listings - we want to be able to talk about the business rules around wether a listing is 'new' in our code 



and encapsulate the fact that this is indicated in the ui by a 'img #new_icon' for example.



This works nicely until people try to do something like



As this will wait around unnecessarily to make sure the selector isn't going to turn up later. To avoid this I need to explain to people that they should define is_new? and is_not_new? methods and use them in different situations depending on what they expect. This is a hard sell when we _know_ that the element is not updated asynchronously. I'd much rather be able to define



and save the harder explanations for the harder cases.

Up until now we have dealt with this ( and other things ) by parsing the HTML body at a point in time into a NokoGiri doc, and then making assertions against that when we didn't want waiting behaviour. With the growing maturity of Capybara I'd really like to be able to rip all that out and just use capy, but the inability to turn off waiting in our situation is causing reluctance in the team.

Hope that helps
Perryn
",perryn,javascript
396,2011-06-29 11:21:50,"Nice catch! Indeed this seems to be because Rack::Test calls .to_i on empty maxlength attributes.



HTML4 says maxlength must be number:
http://www.w3.org/TR/html401/interact/forms.html#adef-maxlength
HTML5 says it must be positive number:
http://www.w3.org/TR/html-markup/input.text.html#input.text.attrs.maxlength

@jnicklas, should we ignore maxlength=""""? Even if it doesn't conform, I would expect that ignoring it is what most UAs do. But I guess maxlength=""0"" should still be honored, even though it's not valid HTML5 (and perhaps not sensible)?
",joliss,jnicklas
394,2011-07-25 21:59:33,"> Even if page.body is the wrong thing to use in this case, that doesn't change the fact that the value of page.body itself is still wrong. What is actually returned as the HTTP body of the page (a JSON string) is not what Capybara is reporting (a JSON string wrapped in an HTML document).

page.body is somewhat misnamed -- its purpose is not to return the HTTP body (as you write, and as one might expect), but to return the browser's current DOM tree.

(It's aliased to page.html for exactly that reason, but I seem to recall that actually renaming the method to #html and phasing out #body would be difficult, as all drivers would have to rename it at the same time, so we'd be breaking a lot of compatibility. Unless @jnicklas has a good idea how to rename it in a more painless fashion.)
",joliss,jnicklas
390,2011-06-20 01:25:01,"@jnnicklas thanks and sorry about the duplicate issue
",dwilkie,jnnicklas
384,2011-07-22 22:11:32,"[Cc @dchelimsky. Some context: @contentfree was trying to mix Capybara and ActionController::TestCase methods like so:]



---

Re @contentfree: Oh, that's a controller test -- now I see.

I think the reason why it doesn't work is that `within` is part of Capybara, whereas `response` is part of ActionController::TestCase. (That's two completely separate testing systems: Capybara exercises the entire stack, and ActionController::TestCase only calls the controller.) As a result, `within` uses Capybara's current `page` to find and set a new scope, which is then used by the methods in Capybara's DSL (unless you call them on specific nodes). But `response` does not care about Capybara's scope.

@dchelimsky, should rspec-rails really include the Capybara::DSL in :controller specs? What was the reason behind that? I'm wondering (in a _just putting the thought out there without a technical clue_ kind of way) if rspec-rails should rather include some subset (or nothing at all) for :controller specs to avoid confusion like this.
",joliss,dchelimsky
377,2012-01-08 22:54:09,"/cc @jnicklas

Hm ... Pull request #490 (""Debug mode"") didn't yield any results. I'll go ahead and close this until we have some more specific ideas (or preferably, code) to work with.
",joliss,jnicklas
372,2011-06-04 00:27:04,"I am wondering what is a good way to print out the ful html of the selected tag,  e.g.:

i run into an issue where I am trying to do a xpath matching on a img tag based on it's src content, but the test keeps on failing.  so i want to print out the html content which i am selecting on and make sure i am getting the correct content.

my img tag:

<img id='test_id' src='/upload/box/1/test.png'>
(notice the src part is dynamically updated, and what i expect it to be, also what i want to confirm)
now the check always fails:

page.should have_xpath '//img[contains(@src, ""test.png"")]'

so I'd like to be able to print out the content of teh html so i can confirm i am getting the right value set. can i do something like:

STDOUT.write find(:xpath, '//img[contains(@src, ""test.png"")]').?????

thanks,
sean
",swang54,src
368,2011-06-02 14:54:57,"Oh, and to get @dchelimsky involved, we should mention him.

Oh wait, I just did. :)
",steveklabnik,dchelimsky
360,2011-05-26 18:24:42,"Ahh man, THANK you. I never would have seen that. @jnicklas would you be interested in a patch where stupid people like me who mistakingly mix rspec and capybara methods get a warning raised? Something like ""if this result is nil, make sure they didn't use get instead of visit?""
",jackdempsey,jnicklas
347,2011-05-13 15:28:33,"@jnicklas I wonder if this is going to make the test suite brittle?
",joliss,jnicklas
340,2011-05-10 13:42:18,"I was just trying to figure out where to add tests within the Capybara
test suite, but grepping the source does not yield any tests that
specifically test `to_binary`.

@jnicklas, what do you think?
",joliss,jnicklas
333,2011-11-17 00:41:00,"@benissimo,
I can't remember what the opinion about how I choose ""has"" instead of ""have"". As you point, ""... should has ..."" seems to be wrong in sense of English grammar.
",hiroshi,benissimo
331,2011-06-26 13:29:02,"@jnicklas closed the pull request [citing](https://github.com/jnicklas/capybara/pull/395#issuecomment-1440456): ""this problem need a way more comprehensive approach"". What is meant by this? Is a rewrite of error reporting in Capybara::Node::Finders required?
",vrish88,jnicklas
330,2011-04-23 00:45:54,"@agibraiter Well, I'm not sure about the relevance of the Static class for this problem, but it looks like the code you referenced would only come in to play for Rails v2, whereas I'm having the problem on Rails v3.0.6.
",Tekhne,agibraiter
330,2011-04-23 11:04:41,"Regardless of the setup of your app and static files, `page.has_content?(""My custom test content"")` only ever returns true or false (which then gets discarded the way you are using it), so it does not do anything.  You need to use RSpec's [predicate matchers](http://relishapp.com/rspec/rspec-expectations/v/2-6-rc/dir/built-in-matchers/predicate-matchers) with `should` in order to actually test anything.

In other words, so long as `visit ""/""` succeeds, the test is guaranteed to pass.

I am closing this (cc @jnicklas).  If I misunderstood you, feel free to reopen it. :)
",joliss,jnicklas
329,2011-06-07 00:57:47,"@jnicklas: I'm beginning to agree with the Thin people. As I wrote my [reply](https://github.com/macournoyer/thin/issues/50#issuecomment-1312946) to the Thin thread, I realized that the only difference between Thin and WEBrick in Capybara is that WEBrick's 500 error page includes a backtrace. That's probably not ideal either... here's the pertinent part of my post:

> Anyway, as your tests run, you will expect to see some tests fail due to failed assertions (i.e. failed RSpec expectations); however, it is also possible that your app will have its own internal errors which need solving. WEBrick's 500 error response includes a stack trace... I guess that's not the same as what I was asking for in the original post... perhaps there's a better way as you suggest that involves a failsafe piece of rack middleware that captures app errors... perhaps Capybara's Identify rack app could serve this purpose.

Don't you think Capybara should handle internal app errors? `Identify` could capture exceptions to some sort of global variable/queue. Then Capybara could check for the presence of a `@@last_error` after app requests. What do you think?
",agibralter,last
327,2011-04-25 21:50:28,"I would like to see this too. I used to be able to use this to get the cookies:

`Capybara.current_session.driver.current_session.instance_variable_get(:@rack_mock_session).cookie_jar`

But that seems to be broken in 1.0.0.beta1?

**Edit:** Got it working by using `Capybara.current_session.driver.browser.current_session` instead of `Capybara.current_session.driver.current_session`. But it would still be nice to have an easier way to access these.
",dmarkow,rack
327,2012-01-04 19:42:57,"@lsj256go You should be able to adapt this piece of code I use to make login faster in tests to your problem:



I have this in features/support/quick_login.rb here I sign the user in to an app using Devise but you should be able to set a cookie just as well.
",betelgeuse,lsj256go
325,2011-04-14 13:09:02,"Cc @jnicklas

I think the 'rspec-rails' gem it the culprit. As of the edge version from github:



I wonder how it will be possible to make rspec-rails work with both 0.4.1.2 and newer versions of Capybara at the same time.
",joliss,jnicklas
323,2011-04-14 13:42:47,"@andywatts I tried that as well and it didn't work. The problem here is that when you call the path helper it is a method missing call, then the Rails integration method_missing method calls reset!, before this commit that method would have set an instance variable and method missing would continue to see if the instance variable responds to the path helper then call it. Now because of the new reset! method it sets the @browser instance variable to nil.
",bcardarella,browser
322,2011-04-13 14:37:40,"Does this work for you (for test_helper.rb)?



(@jnicklas, I don't know about your Test::Unit fu, but do you think this is a good way to do it?)
",joliss,jnicklas
321,2011-04-11 10:30:43,"If you do a replaceHtml with an element, Capybara still references the old element(it doesn't refresh) so it throws out the `Element is no longer attached to the DOM (Selenium::WebDriver::Error::ObsoleteElementError)`

Example:
    @javascript
    Scenario: ttest
      I should see ""Hello World"" witihin ""#test""

my javascript for this is basically when you click a link, #test becomes replaced with another #test partial with different content(""Hello World 2"") or something. I think it references the old one because if I use a different selector(say a span inside #test, named #mr-span), it returns true.

I'm not sure if this is a capybara or selenium issue though
",corroded,javascript
320,2011-04-10 17:16:30,"Hello, I updated my tests to the current branch and I was facing with some i18n issues. In older releases, I was setting up my tests with:

page.driver.header 'Accept-Language', 'pt-br'

Now I saw that header was removed from this branch, according to driver.rb file. Then I had to code a little workaround, based on @aslakhellesoy code:

 def set_headers(headers)
    driver = Capybara.current_session.driver.browser 
    def driver.env
      @env.merge(super)
    end
    def driver.env=(env)
      @env = env
    end
    driver.env = headers
  end

Does exist any implementation in capybara to easily setup http headers that I could help?
",abstractj,aslakhellesoy
320,2011-04-10 17:16:30,"Hello, I updated my tests to the current branch and I was facing with some i18n issues. In older releases, I was setting up my tests with:

page.driver.header 'Accept-Language', 'pt-br'

Now I saw that header was removed from this branch, according to driver.rb file. Then I had to code a little workaround, based on @aslakhellesoy code:

 def set_headers(headers)
    driver = Capybara.current_session.driver.browser 
    def driver.env
      @env.merge(super)
    end
    def driver.env=(env)
      @env = env
    end
    driver.env = headers
  end

Does exist any implementation in capybara to easily setup http headers that I could help?
",abstractj,env
319,2011-04-08 18:45:11,"Nice catch, thanks! Merged (and while we're at it, changed ""locator"" to ""value"" so as to have the docs consistent with the method signature).

@jnicklas Closing.  Would you like me to ping you like this whenever I close a pull request?
",joliss,jnicklas
318,2011-04-05 18:21:25,"This could be exclusive to using akephalos (ive posted a similar bug there). When having a step that, lets say sets up a user, then logs in the user, then switches to using @javascript the session and information is not carried over.
",jsmestad,javascript
318,2011-04-05 19:37:43,"Seems to have something to do with Capybara.javascript_driver getting changed after its set. Not sure why it worked but I removed gem 'cucumber' (because I had 'cucumber-rails' already included) so I am not sure if that was messing with the class level variables that capybara is using.

Found it by having errors when using @javascript tag, but worked when using the drivername tag. This behavior happened with both @zombie and @akephalos.

Maybe we can add a check or something for this...
",jsmestad,akephalos
318,2011-04-05 19:37:43,"Seems to have something to do with Capybara.javascript_driver getting changed after its set. Not sure why it worked but I removed gem 'cucumber' (because I had 'cucumber-rails' already included) so I am not sure if that was messing with the class level variables that capybara is using.

Found it by having errors when using @javascript tag, but worked when using the drivername tag. This behavior happened with both @zombie and @akephalos.

Maybe we can add a check or something for this...
",jsmestad,zombie
318,2011-04-05 19:37:43,"Seems to have something to do with Capybara.javascript_driver getting changed after its set. Not sure why it worked but I removed gem 'cucumber' (because I had 'cucumber-rails' already included) so I am not sure if that was messing with the class level variables that capybara is using.

Found it by having errors when using @javascript tag, but worked when using the drivername tag. This behavior happened with both @zombie and @akephalos.

Maybe we can add a check or something for this...
",jsmestad,javascript
306,2011-03-21 21:07:34,"Hey,

I'm redirected to this page (http://www.iana.org/domains/example/) when I do a 'visit login_path'

I see you fixed that for rack_test but see nothing when it @javascript tag.

It's weird, 'cause I installed libffi this afternoon and after that, my tests passed (no redirection).

I just tried now, and same problem..

hope you see something !

thanks,
Jerome
",jeromelefeuvre,javascript
284,2011-02-22 19:15:51,"I get this error in a simple step like:



The same step works when I put the `@javascript` tag to run the scenario with Selenium.
",thmzlt,javascript
266,2011-02-02 16:18:13,"Hello 

I'm facing a problem when using capybara with iframes. When I'm using the steps below:

Given /^que estou logado com usuario ""([^""]_)"" e senha ""([^""]_)""$/ do |login, password|
    visit '/Login.aspx'
    sleep 5
    within_frame('pageFrame') do 
        fill_in 'ctl00$b$txtLogin', :with => login
        fill_in 'ctl00$b$txtPassword', :with => password
        find('imbLogin').click
    end
end

The login page (Login.aspx) is within an iframe (see the html code at the end of this message).  If I remove the ""sleep 5"" statement, the test sometimes ""skip"" the first input control - simply does not fill in this field.

I've included the settings below in my env.rb, but this problem continues to happen:

Capybara.default_wait_time = 30 # seconds

It seems that this settings affects only the high level page, not the frames of my application.
The HTML of the main page of my application is the following:

<frameset onload=""setFrameSource()"" rows=""0%,100%,0%"" border=""0"">
        <frame name=""logoutFrame"" noresize=""1"" unselectable=""1"" border=""0"" frameborder=""0"" style=""margin:0;padding:0;border:0;"" marginheight=""0"" marginwidth=""0""/>
        <frame name=""pageFrame"" border=""0"" frameborder=""0"" style=""margin:0;padding:0;border:0;"" marginheight=""0"" marginwidth=""0""/>
        <frame name=""flashSocketFrame"" src=""FlashSocket.html"" border=""2"" frameborder=""1"" marginheight=""0"" marginwidth=""0""/>
</frameset>

The same problem happens when I'm using the steps below:

When /^clico na opcao do menu ""([^""]*)""$/ do |pageName|
    sleep 5
    within_frame('pageFrame') do
        within(:xpath, ""//div[@class='menuborder_middle']"") do
            click_link pageName
        end
    end

end

I must use the ""sleep 5"" else somtimes (that's weird) the link is not found.

Let me know if you need further information.

Thanks in advance

João Talles
",joaotalles,class
249,2011-01-13 18:07:58,"This is a very subtle bug (I think) but it threw me for hours as a new user.

<pre>visit ""my_controller/page""</pre> 


works fine in the simulated browser.  

When you put the '@javascript' tag for your feature to load it in firefox, it will try to load  ""/page"" in the browser, shaving off the controller

I fixed it with a leading slash.

<pre>visit ""/my_controller/page""</pre> 


A very minor bug and not a big deal, but it seems to me like they should work the same in simulated and real browser and the simulated browser is correct.
",kennystone,javascript
240,2011-01-06 11:10:56,"I got into the problem of trying to use some rails assert methods, but they require @request to be an `ActionDispatch::Request`. 

As at the point of the test @request seems to be unused, I just search for the underlying `ActionDispatch::Request` used by capybara and put it into @request. Like this:



Now I can use methods like assert_template, and everything seems ok. 



I guess everything should work fine, until the actual route to the request `page.driver.request.env['action_controller.instance'].request` changes. 

The question: Anyone knows if capybara will always place the request on the same place?

Thanks
",rubencaro,request
237,2011-01-02 14:19:55,"Hi, I'm using Cucumber+Capybara+Selenium to test the app that relies on HTTP Basic Authentication. There is a way to use this kind of auth by calling page.driver.basic_authorize(user, pass) method.

But when I mark the Scenario with @javascript tag (enabling Selenium driver) I get an error:
    undefined method `basic_authorize' for #Capybara::Driver::Selenium:0x000000041ea880 (NoMethodError)
",astyagun,javascript
223,2010-12-05 12:40:22,"I have a feature 
    @wip
    Scenario: Cancel user account
       Given I am an authenticated user
       And I am on the edit user credentials page
       Then show me the page

the link is this one :  ( standard Rails delete ... with js confirmation)
    <a href=""/Users/yves/Developpement/Projects/MONGODB/videoseve/public/users?locale=en"" data-confirm=""Are you sure?"" data-method=""delete"" rel=""nofollow"">Cancel my account</a>

trying to follow the link raises an error :
    @wip
    Scenario: Cancel user account
    Given I am an authenticated user
    And I am on the edit user credentials page
    #Then show me the page

When I follow ""Cancel my account"", it raises an error
    When I follow ""Cancel my account""          # features/step_definitions/web_steps.rb:33
    undefined local variable or method `node' for #<Capybara::Driver::RackTest::Node:0x000001027e9818> (NameError)
    ./features/step_definitions/web_steps.rb:35:in`block (2 levels) in <top (required)>'
    ./features/step_definitions/web_steps.rb:14:in `with_scope'
    ./features/step_definitions/web_steps.rb:34:in`/^(?:|I )follow ""([^""]_)""(?: within ""([^""]_)"")?$/'
    features/devise/3-update_user.feature:41:in `When I follow ""Cancel my account""'

web_steps definitions are the standard ones :

web_steps.rb 12-17
    module WithinHelpers
       def with_scope(locator)
          locator ? within(locator) { yield } : yield
       end
    end
    World(WithinHelpers)

web_step.rb: 33-35
    When /^(?:|I )follow ""([^""]_)""(?: within ""([^""]_)"")?$/ do |link, selector|
       with_scope(selector) do
          click_link(link)
       end
    end

what's wrong ?
",erwin16,wip
203,2016-09-23 17:31:30,"@BMorearty  When I use your suggestion, I get undefined method `send_keys' for #Object:0x007fc979f730d8 (NoMethodError)  
Using this
page.find(:xpath, ""//input[@placeholder = 'Prefix']"").set """"
      send_keys [:control, ""a""]

since the Prefix field does not have an id (it's React) so I am trying to access a field with its placeholder text.  It works fine to set it to a value but even though I see the set command above clear the field, the original value is still in the field once I save the form.
",DougMaisells,placeholder
194,2011-07-09 08:27:06,"@henning-koch: Oh dear. I would encourage you to really learn the Capybara API instead of creating steps like these, Cucumber/Gherkin is not a programming language. I wrote a blog post about this a while back: http://elabs.se/b/15.
",jnicklas,henning-koch
186,2010-11-07 13:49:16,"Strangely Webrat has the same problem :

https://webrat.lighthouseapp.com/projects/10503-webrat/tickets/298-webrat-includes-an-empty-file-field-as-part-of-the-fom-submission#ticket-298-3

With BrowserCMS, in forms with an image attachment, if the file input is left blank, the paramaters look like the following. File flelds look like ""work_image_attributes""=>{""attachment_file""=>""""} when they should not be included at all, or be an empty hash.
This causes a silent fail for browsercms that I haven't been able to fix.

{""artist""=>{""work_image_attributes""=>{""attachment_file""=>""""}, ""connect_to_page_id""=>"""", ""publish_on_save""=>""true"", ""sort_order""=>""0"", ""shop_id""=>"""", ""lock_version""=>""0"", ""last_name""=>""Flintstone"", ""description""=>""I like art"", ""has_profile""=>""0"", ""profile_image_attributes""=>{""attachment_file""=>""""}, ""connect_to_container""=>"""", ""email""=>""freda@flint.com"", ""first_name""=>""Freda""}, ""dhtml_selector""=>""disabled""}

when they should be :

{""artist""=>{""work_image_attributes""=>{}, ""connect_to_page_id""=>"""", ""publish_on_save""=>""true"", ""sort_order""=>""0"", ""shop_id""=>"""", ""lock_version""=>""0"", ""last_name""=>""Flintstone"", ""description""=>""I like art"", ""has_profile""=>""0"", ""profile_image_attributes""=>{}, ""connect_to_container""=>"""", ""email""=>""freda@flint.com"", ""first_name""=>""Freda""}, ""dhtml_selector""=>""disabled""}

This hack fixes it (only for BrowserCMS) :

# requires buzzcore gem (https://github.com/buzzware/buzzcore)

# hack to stop Capybara putting empty strings for file fields in the params

<pre>
Capybara::Driver::RackTest::Form.class_eval do 
    alias_method :orig_params, :params
    def params(button)
        result = orig_params(button)        
        result = MiscUtils.filter_multilevel_hash(result,nil,nil) do |hash,key,value| 
            hash.delete(key) if (key=='attachment_file') && (value=='')
        end
        result
    end
end
</pre>


I believe the problem is that the line 116 in rack_test_driver.rb :

native.xpath("".//input[not(@disabled) and (not(@type) or (@type!='radio' and @type!='checkbox' and @type!='submit' and @type!='image'))]"").map do |input|

selects file inputs when it shouldn't as there is code below to handle them.
",buzzware,disabled
186,2010-11-07 13:49:16,"Strangely Webrat has the same problem :

https://webrat.lighthouseapp.com/projects/10503-webrat/tickets/298-webrat-includes-an-empty-file-field-as-part-of-the-fom-submission#ticket-298-3

With BrowserCMS, in forms with an image attachment, if the file input is left blank, the paramaters look like the following. File flelds look like ""work_image_attributes""=>{""attachment_file""=>""""} when they should not be included at all, or be an empty hash.
This causes a silent fail for browsercms that I haven't been able to fix.

{""artist""=>{""work_image_attributes""=>{""attachment_file""=>""""}, ""connect_to_page_id""=>"""", ""publish_on_save""=>""true"", ""sort_order""=>""0"", ""shop_id""=>"""", ""lock_version""=>""0"", ""last_name""=>""Flintstone"", ""description""=>""I like art"", ""has_profile""=>""0"", ""profile_image_attributes""=>{""attachment_file""=>""""}, ""connect_to_container""=>"""", ""email""=>""freda@flint.com"", ""first_name""=>""Freda""}, ""dhtml_selector""=>""disabled""}

when they should be :

{""artist""=>{""work_image_attributes""=>{}, ""connect_to_page_id""=>"""", ""publish_on_save""=>""true"", ""sort_order""=>""0"", ""shop_id""=>"""", ""lock_version""=>""0"", ""last_name""=>""Flintstone"", ""description""=>""I like art"", ""has_profile""=>""0"", ""profile_image_attributes""=>{}, ""connect_to_container""=>"""", ""email""=>""freda@flint.com"", ""first_name""=>""Freda""}, ""dhtml_selector""=>""disabled""}

This hack fixes it (only for BrowserCMS) :

# requires buzzcore gem (https://github.com/buzzware/buzzcore)

# hack to stop Capybara putting empty strings for file fields in the params

<pre>
Capybara::Driver::RackTest::Form.class_eval do 
    alias_method :orig_params, :params
    def params(button)
        result = orig_params(button)        
        result = MiscUtils.filter_multilevel_hash(result,nil,nil) do |hash,key,value| 
            hash.delete(key) if (key=='attachment_file') && (value=='')
        end
        result
    end
end
</pre>


I believe the problem is that the line 116 in rack_test_driver.rb :

native.xpath("".//input[not(@disabled) and (not(@type) or (@type!='radio' and @type!='checkbox' and @type!='submit' and @type!='image'))]"").map do |input|

selects file inputs when it shouldn't as there is code below to handle them.
",buzzware,type
179,2010-11-03 18:23:17,"Hello, i`m from Brazil and i make cucumber features in Portuguese with UTF8 encode.

After version 0.4.0, all my features broken..

My ruby version, 1.9.2p0 (2010-08-18 revision 29036) [x86_64-darwin10.4.0]

<pre>
$ cucumber --backtrace --verbose --tags @bank_accountUsing the default profile...
Code:
  * features/support/env.rb
  * features/support/paths.rb
  * features/step_definitions/base_steps.rb
  * features/step_definitions/web_steps.rb
  * features/step_definitions/web_steps_pt-br.rb

Features:
  * features/admin/admin_bank_accounts.feature
Parsing feature files took 0m0.093s

.F--.F------------------------------------------------------------------------------

(::) failed steps (::)

incompatible encoding regexp match (UTF-8 regexp with ASCII-8BIT string) (Encoding::CompatibilityError)
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-1.2.1/lib/rack/utils.rb:16:in `gsub'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-1.2.1/lib/rack/utils.rb:16:in `escape'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test/utils.rb:23:in `build_nested_query'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test/utils.rb:18:in `block in build_nested_query'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test/utils.rb:17:in `each'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test/utils.rb:17:in `map'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test/utils.rb:17:in `build_nested_query'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test.rb:270:in `params_to_string'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test.rb:189:in `env_for'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/rack-test-0.5.6/lib/rack/test.rb:65:in `post'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/driver/rack_test_driver.rb:243:in `post'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/driver/rack_test_driver.rb:221:in `submit'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/driver/rack_test_driver.rb:153:in `submit'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/driver/rack_test_driver.rb:76:in `click'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-rails-0.3.2/lib/cucumber/rails/capybara_javascript_emulation.rb:15:in `click_with_javascript_emulation'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/node.rb:144:in `click'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/node/actions.rb:37:in `click_button'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/session.rb:273:in `method_missing'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/capybara-0.4.0/lib/capybara/dsl.rb:93:in `click_button'
/Users/diegorv/Documents/rails/work/phenix/features/step_definitions/base_steps.rb:87:in `block in <top (required)>'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:48:in `instance_exec'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:48:in `block in cucumber_instance_exec'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:69:in `cucumber_run_with_backtrace_filtering'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:36:in `cucumber_instance_exec'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/rb_support/rb_step_definition.rb:62:in `invoke'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/step_match.rb:26:in `invoke'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/runtime/support_code.rb:138:in `invoke'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/rb_support/rb_world.rb:22:in `__cucumber_invoke'
/Users/diegorv/Documents/rails/work/phenix/features/step_definitions/base_steps.rb:17:in `block in <top (required)>'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:48:in `instance_exec'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:48:in `block in cucumber_instance_exec'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:69:in `cucumber_run_with_backtrace_filtering'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/core_ext/instance_exec.rb:36:in `cucumber_instance_exec'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/rb_support/rb_step_definition.rb:62:in `invoke'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/step_match.rb:26:in `invoke'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/step_invocation.rb:63:in `invoke'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/step_invocation.rb:42:in `accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:99:in `block in visit_step'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:98:in `visit_step'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/step_collection.rb:15:in `block in accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/step_collection.rb:14:in `each'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/step_collection.rb:14:in `accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:93:in `block in visit_steps'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:92:in `visit_steps'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/background.rb:38:in `block in accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/background.rb:48:in `block in with_visitor'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/scenario.rb:106:in `with_visitor'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/background.rb:47:in `with_visitor'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/background.rb:36:in `accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:57:in `block in visit_background'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:56:in `visit_background'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/feature.rb:33:in `accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:20:in `block in visit_feature'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:19:in `visit_feature'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/features.rb:29:in `block in accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/features.rb:17:in `each'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/features.rb:17:in `each'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/features.rb:28:in `accept'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:14:in `block in visit_features'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:164:in `broadcast'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/ast/tree_walker.rb:13:in `visit_features'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/runtime.rb:43:in `run!'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/cli/main.rb:48:in `execute!'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/lib/cucumber/cli/main.rb:21:in `execute'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/gems/cucumber-0.9.3/bin/cucumber:8:in `<top (required)>'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/bin/cucumber:19:in `load'
/Users/diegorv/.rvm/gems/ruby-1.9.2-p0/bin/cucumber:19:in `<main>'
features/admin/admin_bank_accounts.feature:11:in `Dado que o usuario tem a permissao'

Failing Scenarios:
cucumber features/admin/admin_bank_accounts.feature:15 # Scenario: Acessar a tela gerencia de usuarios

8 scenarios (1 failed, 7 skipped)
117 steps (1 failed, 115 skipped, 1 passed)
0m1.476s
</pre>
",diegorv,bank
178,2010-12-10 14:36:35,"Running this way:

<pre>
require 'capybara_helper'
class LoginTest &lt; CapybaraTest
  before do
    @f = Selenium::WebDriver.for(:firefox)
  end

  test ""I can login and log out"" do
    @f.navigate.to(""http://google.com"")
    assert_equal 1,2
  end

  after do
    @f.close
  end
end
</pre>


also returns proper error code (1) so probably it is a capybara bug.
",paneq,f
178,2010-12-10 15:03:19,"I looked at capybara/driver/selenium_driver.rb :

<pre>
  def self.driver
    unless @driver
      @driver = Selenium::WebDriver.for :firefox
      at_exit do
        @driver.quit
      end
    end
    @driver
  end
</pre>


and was able to reproduce the bug:

<pre>
require 'capybara_helper'

class LoginTest &lt; CapybaraTest

  test ""I can login and log out"" do
    @driver = Selenium::WebDriver.for :firefox
    at_exit do
      @driver.quit
    end
    @driver.navigate.to(""http://google.com"")
    assert_equal 1,2
  end
end
</pre>


This is more or less what capybara does, doesn't it ?

I hope it will be useful for you.
",paneq,driver
178,2010-12-11 16:04:48,"Running it with minitest returns wrong exit code:

<pre>
require 'rubygems'
require 'selenium-webdriver'
require 'minitest/autorun'
class TestMeme &lt; MiniTest::Unit::TestCase
  def test_flunk
    @driver = Selenium::WebDriver.for :firefox
    at_exit do
     @driver.quit
    end
    @driver.navigate.to(""http://google.com"")

    flunk(""no reason"")
  end
end

17:00 <ruby-1.9.2-head> ~/develop/gavdihrpif (masterpatch) > ruby x.rb 
Loaded suite x
Started
F
Finished in 5.544404 seconds.
  1) Failure:
test_flunk(TestMeme) [x.rb:15]:
no reason

1 tests, 1 assertions, 1 failures, 0 errors, 0 skips
17:01 <ruby-1.9.2-head> ~/develop/gavdihrpif (masterpatch) > echo $?
0
</pre>
",paneq,driver
178,2010-12-11 17:07:04,"Selenium webdriver starts a new firefox process using ChildProcess gem. Using it we can reporoduce the bug:

<pre>
require 'minitest/autorun'

require 'rubygems'
require 'childprocess'

class TestMeme &lt; MiniTest::Unit::TestCase

  def test_flunk
    @process = ChildProcess.build(""sleep 100"")
    @process.start

    at_exit do
      begin
        @process.poll_for_exit 5
      rescue ChildProcess::TimeoutError
        @process.stop 5
      end
    end
    flunk(""no reason"")
  end
end
</pre>


If we lower the sleep time of subprocess to 0 then the return code is 1 which is ok. When it sleeps for 100 second then there is timeout after 5 seconds and the return code of the whole programm is unfortunately 0.
",paneq,process
178,2010-12-12 23:08:04,"This is a bug in selenium or capybara calling exit in an at_exit handler (I haven't tracked it down, but above it looks like @driver.quit prolly does it). Libraries shouldn't do that 99% of the time (test runner frameworks being an obvious exception). I have a workaround for minitest that I'm testing, but you'll have this problem with all testing frameworks out there that don't anticipate bugs like this.
",zenspider,driver
178,2011-09-25 21:01:02,"I'm late to the game, but the problem boils down to this - a begin/rescue inside the at_exit resets $! from SystemExit to nil. ChildProcess doesn't mess with the process' exit codes, but it does have inevitable begin/rescue blocks as part of reliably killing the child.



1.8.7 gets it right (IMHO):



But even after @sunaku's [issue](http://redmine.ruby-lang.org/issues/show/4400) fixed at_exit ordering, the begin/rescue issue is still in 1.9.3:



Rubinius gets it right:



As does JRuby:



This is a nasty one for sure. I'm tempted to file it as a bug in 1.9.

cc: @dchelimsky, @paneq
",jarib,dchelimsky
177,2010-11-01 04:36:14,"We need to exclude file inputs with multiple (HTML5) i.e. <input type='file' name='image[file][]' multiple /> from this check because it will cast the value to_s which totally kills file uploads when inside an array (array is required for multiple files).

All my patch does is exclude (@type='file' and @multiple) from the first xpath check on the rack_test_driver which solves all the issues for me. All tests pass as before.

Thanks!
",parndt,multiple
177,2010-11-01 04:36:14,"We need to exclude file inputs with multiple (HTML5) i.e. <input type='file' name='image[file][]' multiple /> from this check because it will cast the value to_s which totally kills file uploads when inside an array (array is required for multiple files).

All my patch does is exclude (@type='file' and @multiple) from the first xpath check on the rack_test_driver which solves all the issues for me. All tests pass as before.

Thanks!
",parndt,type
177,2010-11-08 16:27:22,"It seems like it should probably exclude all input fields with @file, since those are handled further down, if I'm  reading this right. Any reason it's singling out just file fields with multiple? Also, I'd feel much better about this change if you could include a spec for the bug this is supposed to be fixing, since I've never seen that issue before.

Also: every change is important for someone. It's open source. I put in as much time as I _like_ and as I can spare. Sometimes it's going to take me a couple of days or maybe even a couple of weeks to deal with an issue. Sorry, that's just the way it is.
",jnicklas,file
177,2010-11-10 01:48:47,"Cool - I'll give it a try without being so specific about @multiple and see about writing a spec or two for this.
",parndt,multiple
177,2010-11-10 22:46:31,"Jonas, you were (of course) right! @multiple is not required in the exclusion test. I've updated this with another commit and added specs per request.
Hope this helps to show what I was yabbering on about :-)

Thanks again for Capybara, it certainly makes our lives easier.
Phil
",parndt,multiple
171,2010-10-27 03:51:46,"In Chrome and Firefox, the XPath .//select//option[@selected] will return only the _original_ option selected in the select (i.e. the one that has selected=""true"" or selected=""selected"" in the HTML), not the option currently selected by the user. This means that the following will fail unless `value` was the originally selected item:



The following works as expected (but requires selenium driver):


",jfirebaugh,selected
153,2010-10-06 14:38:40,"Using capybara (0.3.9), cucumber (0.8.5), rails (3.0.0) and selenium-webdriver (0.0.28)
on Ubuntu 10 with firefox 3.6.10 and JQuery (1.4.2)

Just started to write scenario's for javascript testing, but I am hitting a brick wall.

In the scenario I am testing whether my javascript code will calculate a value for a field
and updates the field accordingly i.e.
an input field with id ""calc_value"" is set to the value 100.00 after my javascript code 
completes (using JQuery live function hooked up to the ""blur"" event). 

In my cucumber scenario I specify
Then I should see the input field ""calc_value""  with value ""100.00""

And the step definition 
Then /^I should see the input field ""(.+)"" with value ""(.+)""$/ do |id,value|
  page.should have_xpath(""//input[@id='#{id}' and @value='#{value}']"")
end

Running the scenario fires up a thin server on port 9887 and displays firefox
and in the browser I see the new value set for id ""calc_value"". But 
the above test fails. 

Not knowing what I am doing wrong here or even if it is possible to 
test this ??
",gummybears,id
153,2010-10-06 14:38:40,"Using capybara (0.3.9), cucumber (0.8.5), rails (3.0.0) and selenium-webdriver (0.0.28)
on Ubuntu 10 with firefox 3.6.10 and JQuery (1.4.2)

Just started to write scenario's for javascript testing, but I am hitting a brick wall.

In the scenario I am testing whether my javascript code will calculate a value for a field
and updates the field accordingly i.e.
an input field with id ""calc_value"" is set to the value 100.00 after my javascript code 
completes (using JQuery live function hooked up to the ""blur"" event). 

In my cucumber scenario I specify
Then I should see the input field ""calc_value""  with value ""100.00""

And the step definition 
Then /^I should see the input field ""(.+)"" with value ""(.+)""$/ do |id,value|
  page.should have_xpath(""//input[@id='#{id}' and @value='#{value}']"")
end

Running the scenario fires up a thin server on port 9887 and displays firefox
and in the browser I see the new value set for id ""calc_value"". But 
the above test fails. 

Not knowing what I am doing wrong here or even if it is possible to 
test this ??
",gummybears,value
151,2012-01-08 22:37:23,"/cc @jnicklas 

I'll go ahead close this feature request, since there hasn't been any activity for more than a year. ;-)
",joliss,jnicklas
148,2010-09-30 23:03:10,"Whereas when run without the tag @selenium, all the pickle steps are found.  Is there something obvious I am missing here?

K.
",kmussa,selenium
147,2010-09-30 10:16:39,"if i include the @culerity (or one of the other driver tags) into a feature, my fixtures won't get loaded into the database!

this is the trace, any idea?

$ rake cucumber:wip --trace
(in /Users/phoetmail/Sites/tolingo-site)
*\* Invoke cucumber:wip (first_time)
*\* Invoke db:test:prepare (first_time)
*\* Invoke db:abort_if_pending_migrations (first_time)
*\* Invoke environment (first_time)
*\* Execute environment
*\* Execute db:abort_if_pending_migrations
*\* Execute db:test:prepare
*\* Invoke db:test:load (first_time)
*\* Invoke db:test:purge (first_time)
*\* Invoke environment 
*\* Execute db:test:purge
*\* Execute db:test:load
*\* Invoke db:schema:load (first_time)
*\* Invoke environment 
*\* Execute db:schema:load
*\* Execute cucumber:wip
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby -I ""/Library/Ruby/Gems/1.8/gems/cucumber-0.8.5/lib:lib"" ""/Library/Ruby/Gems/1.8/gems/cucumber-0.8.5/bin/cucumber""  --profile wip
Using the wip profile...
I am included****************
/Users/phoetmail/Sites/tolingo-site/lib/v2.rb:12: warning: already initialized constant CONFIG_GATEWAY
@support @selenium @wip
Feature: user obligations
  In order to use the software
  As a user
  I have to set settings

  Scenario: timezone setting for user                                           # features/testo/testooo.feature:8
****************\* ENV is test selenium
****************\* ENV is test
****************\* ENV is test
****************\* ENV is test
    Given the user with fixture_name ""translator_two"" in scenario ""translators"" # features/step_definitions/custom_steps.rb:1
      You have a nil object when you didn't expect it!
      You might have expected an instance of ActiveRecord::Base.
      The error occurred while evaluating nil.[](NoMethodError)
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in `users_without_scenarios'
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in`**send**'
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in `users'
      ./features/step_definitions/support_methods.rb:5:in`load_user'
      ./features/step_definitions/custom_steps.rb:3:in `/^the user with fixture_name ""([^""]*)"" in scenario ""([^""]*)""$/'
      features/testo/testooo.feature:9:in`Given the user with fixture_name ""translator_two"" in scenario ""translators""'
    When I go to the job allocation page                                        # features/step_definitions/web_steps.rb:23
    Then show me the page                                                       # features/step_definitions/web_steps.rb:217
    And I should be on the login user page                                      # features/step_definitions/web_steps.rb:195

Failing Scenarios:
cucumber -p wip features/testo/testooo.feature:8 # Scenario: timezone setting for user

1 scenario (1 failed)
4 steps (1 failed, 3 skipped)
0m0.094s

The --wip switch was used, so the failures were expected. All is good.
",phoet,support
147,2010-09-30 10:16:39,"if i include the @culerity (or one of the other driver tags) into a feature, my fixtures won't get loaded into the database!

this is the trace, any idea?

$ rake cucumber:wip --trace
(in /Users/phoetmail/Sites/tolingo-site)
*\* Invoke cucumber:wip (first_time)
*\* Invoke db:test:prepare (first_time)
*\* Invoke db:abort_if_pending_migrations (first_time)
*\* Invoke environment (first_time)
*\* Execute environment
*\* Execute db:abort_if_pending_migrations
*\* Execute db:test:prepare
*\* Invoke db:test:load (first_time)
*\* Invoke db:test:purge (first_time)
*\* Invoke environment 
*\* Execute db:test:purge
*\* Execute db:test:load
*\* Invoke db:schema:load (first_time)
*\* Invoke environment 
*\* Execute db:schema:load
*\* Execute cucumber:wip
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby -I ""/Library/Ruby/Gems/1.8/gems/cucumber-0.8.5/lib:lib"" ""/Library/Ruby/Gems/1.8/gems/cucumber-0.8.5/bin/cucumber""  --profile wip
Using the wip profile...
I am included****************
/Users/phoetmail/Sites/tolingo-site/lib/v2.rb:12: warning: already initialized constant CONFIG_GATEWAY
@support @selenium @wip
Feature: user obligations
  In order to use the software
  As a user
  I have to set settings

  Scenario: timezone setting for user                                           # features/testo/testooo.feature:8
****************\* ENV is test selenium
****************\* ENV is test
****************\* ENV is test
****************\* ENV is test
    Given the user with fixture_name ""translator_two"" in scenario ""translators"" # features/step_definitions/custom_steps.rb:1
      You have a nil object when you didn't expect it!
      You might have expected an instance of ActiveRecord::Base.
      The error occurred while evaluating nil.[](NoMethodError)
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in `users_without_scenarios'
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in`**send**'
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in `users'
      ./features/step_definitions/support_methods.rb:5:in`load_user'
      ./features/step_definitions/custom_steps.rb:3:in `/^the user with fixture_name ""([^""]*)"" in scenario ""([^""]*)""$/'
      features/testo/testooo.feature:9:in`Given the user with fixture_name ""translator_two"" in scenario ""translators""'
    When I go to the job allocation page                                        # features/step_definitions/web_steps.rb:23
    Then show me the page                                                       # features/step_definitions/web_steps.rb:217
    And I should be on the login user page                                      # features/step_definitions/web_steps.rb:195

Failing Scenarios:
cucumber -p wip features/testo/testooo.feature:8 # Scenario: timezone setting for user

1 scenario (1 failed)
4 steps (1 failed, 3 skipped)
0m0.094s

The --wip switch was used, so the failures were expected. All is good.
",phoet,selenium
147,2010-09-30 10:16:39,"if i include the @culerity (or one of the other driver tags) into a feature, my fixtures won't get loaded into the database!

this is the trace, any idea?

$ rake cucumber:wip --trace
(in /Users/phoetmail/Sites/tolingo-site)
*\* Invoke cucumber:wip (first_time)
*\* Invoke db:test:prepare (first_time)
*\* Invoke db:abort_if_pending_migrations (first_time)
*\* Invoke environment (first_time)
*\* Execute environment
*\* Execute db:abort_if_pending_migrations
*\* Execute db:test:prepare
*\* Invoke db:test:load (first_time)
*\* Invoke db:test:purge (first_time)
*\* Invoke environment 
*\* Execute db:test:purge
*\* Execute db:test:load
*\* Invoke db:schema:load (first_time)
*\* Invoke environment 
*\* Execute db:schema:load
*\* Execute cucumber:wip
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby -I ""/Library/Ruby/Gems/1.8/gems/cucumber-0.8.5/lib:lib"" ""/Library/Ruby/Gems/1.8/gems/cucumber-0.8.5/bin/cucumber""  --profile wip
Using the wip profile...
I am included****************
/Users/phoetmail/Sites/tolingo-site/lib/v2.rb:12: warning: already initialized constant CONFIG_GATEWAY
@support @selenium @wip
Feature: user obligations
  In order to use the software
  As a user
  I have to set settings

  Scenario: timezone setting for user                                           # features/testo/testooo.feature:8
****************\* ENV is test selenium
****************\* ENV is test
****************\* ENV is test
****************\* ENV is test
    Given the user with fixture_name ""translator_two"" in scenario ""translators"" # features/step_definitions/custom_steps.rb:1
      You have a nil object when you didn't expect it!
      You might have expected an instance of ActiveRecord::Base.
      The error occurred while evaluating nil.[](NoMethodError)
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in `users_without_scenarios'
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in`**send**'
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in `users'
      ./features/step_definitions/support_methods.rb:5:in`load_user'
      ./features/step_definitions/custom_steps.rb:3:in `/^the user with fixture_name ""([^""]*)"" in scenario ""([^""]*)""$/'
      features/testo/testooo.feature:9:in`Given the user with fixture_name ""translator_two"" in scenario ""translators""'
    When I go to the job allocation page                                        # features/step_definitions/web_steps.rb:23
    Then show me the page                                                       # features/step_definitions/web_steps.rb:217
    And I should be on the login user page                                      # features/step_definitions/web_steps.rb:195

Failing Scenarios:
cucumber -p wip features/testo/testooo.feature:8 # Scenario: timezone setting for user

1 scenario (1 failed)
4 steps (1 failed, 3 skipped)
0m0.094s

The --wip switch was used, so the failures were expected. All is good.
",phoet,culerity
147,2010-09-30 10:16:39,"if i include the @culerity (or one of the other driver tags) into a feature, my fixtures won't get loaded into the database!

this is the trace, any idea?

$ rake cucumber:wip --trace
(in /Users/phoetmail/Sites/tolingo-site)
*\* Invoke cucumber:wip (first_time)
*\* Invoke db:test:prepare (first_time)
*\* Invoke db:abort_if_pending_migrations (first_time)
*\* Invoke environment (first_time)
*\* Execute environment
*\* Execute db:abort_if_pending_migrations
*\* Execute db:test:prepare
*\* Invoke db:test:load (first_time)
*\* Invoke db:test:purge (first_time)
*\* Invoke environment 
*\* Execute db:test:purge
*\* Execute db:test:load
*\* Invoke db:schema:load (first_time)
*\* Invoke environment 
*\* Execute db:schema:load
*\* Execute cucumber:wip
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby -I ""/Library/Ruby/Gems/1.8/gems/cucumber-0.8.5/lib:lib"" ""/Library/Ruby/Gems/1.8/gems/cucumber-0.8.5/bin/cucumber""  --profile wip
Using the wip profile...
I am included****************
/Users/phoetmail/Sites/tolingo-site/lib/v2.rb:12: warning: already initialized constant CONFIG_GATEWAY
@support @selenium @wip
Feature: user obligations
  In order to use the software
  As a user
  I have to set settings

  Scenario: timezone setting for user                                           # features/testo/testooo.feature:8
****************\* ENV is test selenium
****************\* ENV is test
****************\* ENV is test
****************\* ENV is test
    Given the user with fixture_name ""translator_two"" in scenario ""translators"" # features/step_definitions/custom_steps.rb:1
      You have a nil object when you didn't expect it!
      You might have expected an instance of ActiveRecord::Base.
      The error occurred while evaluating nil.[](NoMethodError)
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in `users_without_scenarios'
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in`**send**'
      ./vendor/plugins/ruby_fixtures/lib/scenarios.rb:16:in `users'
      ./features/step_definitions/support_methods.rb:5:in`load_user'
      ./features/step_definitions/custom_steps.rb:3:in `/^the user with fixture_name ""([^""]*)"" in scenario ""([^""]*)""$/'
      features/testo/testooo.feature:9:in`Given the user with fixture_name ""translator_two"" in scenario ""translators""'
    When I go to the job allocation page                                        # features/step_definitions/web_steps.rb:23
    Then show me the page                                                       # features/step_definitions/web_steps.rb:217
    And I should be on the login user page                                      # features/step_definitions/web_steps.rb:195

Failing Scenarios:
cucumber -p wip features/testo/testooo.feature:8 # Scenario: timezone setting for user

1 scenario (1 failed)
4 steps (1 failed, 3 skipped)
0m0.094s

The --wip switch was used, so the failures were expected. All is good.
",phoet,wip
144,2010-09-25 11:25:42,"Hi all,

Sometimes we (see issues#issue/141) have problems with the button and table methods defined in the Capybara::Xpath class. Our products seem to have the habit of producing tables and buttons like shown below:
    <table style=""width: 100%;"" class=""dynatable"">



Therefor we have adjusted the Xpath methods a bit like this:
    module Capybara
        class XPath
            def button(locator)
                xpath = append(""//input[@type='submit' or @type='image' or @type='button'][@id=#{s(locator)} or contains(@value,#{s(locator)})]"")
                xpath = xpath.append(""//button[@id=#{s(locator)} or contains(@value,#{s(locator)}) or contains(.,#{s(locator)})]"")
                xpath = xpath.prepend(""//input[@type='submit' or @type='image' or @type='button'][@value=#{s(locator)}]"")
                xpath = xpath.prepend(""//input[@type='image'][@alt=#{s(locator)} or contains(@alt,#{s(locator)})]"")
                xpath = xpath.prepend(""//button[@value=#{s(locator)} or text()=#{s(locator)}]"")
                xpath = xpath.prepend(""//img[@alt=#{s(locator)}]"")
                xpath = xpath.append(""//input[@id=#{s(locator)} and contains(@value,'Submit') and contains(@alt,'Submit')]"")
            end



This prevented us from using raw XPath statements in our Cucumber step definitions using Capybara.

Kindly,
Bart 
",boeboe,id
144,2010-09-25 11:25:42,"Hi all,

Sometimes we (see issues#issue/141) have problems with the button and table methods defined in the Capybara::Xpath class. Our products seem to have the habit of producing tables and buttons like shown below:
    <table style=""width: 100%;"" class=""dynatable"">



Therefor we have adjusted the Xpath methods a bit like this:
    module Capybara
        class XPath
            def button(locator)
                xpath = append(""//input[@type='submit' or @type='image' or @type='button'][@id=#{s(locator)} or contains(@value,#{s(locator)})]"")
                xpath = xpath.append(""//button[@id=#{s(locator)} or contains(@value,#{s(locator)}) or contains(.,#{s(locator)})]"")
                xpath = xpath.prepend(""//input[@type='submit' or @type='image' or @type='button'][@value=#{s(locator)}]"")
                xpath = xpath.prepend(""//input[@type='image'][@alt=#{s(locator)} or contains(@alt,#{s(locator)})]"")
                xpath = xpath.prepend(""//button[@value=#{s(locator)} or text()=#{s(locator)}]"")
                xpath = xpath.prepend(""//img[@alt=#{s(locator)}]"")
                xpath = xpath.append(""//input[@id=#{s(locator)} and contains(@value,'Submit') and contains(@alt,'Submit')]"")
            end



This prevented us from using raw XPath statements in our Cucumber step definitions using Capybara.

Kindly,
Bart 
",boeboe,alt
144,2010-09-25 11:25:42,"Hi all,

Sometimes we (see issues#issue/141) have problems with the button and table methods defined in the Capybara::Xpath class. Our products seem to have the habit of producing tables and buttons like shown below:
    <table style=""width: 100%;"" class=""dynatable"">



Therefor we have adjusted the Xpath methods a bit like this:
    module Capybara
        class XPath
            def button(locator)
                xpath = append(""//input[@type='submit' or @type='image' or @type='button'][@id=#{s(locator)} or contains(@value,#{s(locator)})]"")
                xpath = xpath.append(""//button[@id=#{s(locator)} or contains(@value,#{s(locator)}) or contains(.,#{s(locator)})]"")
                xpath = xpath.prepend(""//input[@type='submit' or @type='image' or @type='button'][@value=#{s(locator)}]"")
                xpath = xpath.prepend(""//input[@type='image'][@alt=#{s(locator)} or contains(@alt,#{s(locator)})]"")
                xpath = xpath.prepend(""//button[@value=#{s(locator)} or text()=#{s(locator)}]"")
                xpath = xpath.prepend(""//img[@alt=#{s(locator)}]"")
                xpath = xpath.append(""//input[@id=#{s(locator)} and contains(@value,'Submit') and contains(@alt,'Submit')]"")
            end



This prevented us from using raw XPath statements in our Cucumber step definitions using Capybara.

Kindly,
Bart 
",boeboe,value
144,2010-09-25 11:25:42,"Hi all,

Sometimes we (see issues#issue/141) have problems with the button and table methods defined in the Capybara::Xpath class. Our products seem to have the habit of producing tables and buttons like shown below:
    <table style=""width: 100%;"" class=""dynatable"">



Therefor we have adjusted the Xpath methods a bit like this:
    module Capybara
        class XPath
            def button(locator)
                xpath = append(""//input[@type='submit' or @type='image' or @type='button'][@id=#{s(locator)} or contains(@value,#{s(locator)})]"")
                xpath = xpath.append(""//button[@id=#{s(locator)} or contains(@value,#{s(locator)}) or contains(.,#{s(locator)})]"")
                xpath = xpath.prepend(""//input[@type='submit' or @type='image' or @type='button'][@value=#{s(locator)}]"")
                xpath = xpath.prepend(""//input[@type='image'][@alt=#{s(locator)} or contains(@alt,#{s(locator)})]"")
                xpath = xpath.prepend(""//button[@value=#{s(locator)} or text()=#{s(locator)}]"")
                xpath = xpath.prepend(""//img[@alt=#{s(locator)}]"")
                xpath = xpath.append(""//input[@id=#{s(locator)} and contains(@value,'Submit') and contains(@alt,'Submit')]"")
            end



This prevented us from using raw XPath statements in our Cucumber step definitions using Capybara.

Kindly,
Bart 
",boeboe,type
144,2010-09-28 17:33:42,"Hi jnicklas,

I don't think I can describe it in more detail then above.
1. For tables: often tables are not unique on @id (since they often don't have any at all), so that is why we also check for @label.
2. For buttons: same story.The X-path templates provided miss some common buttons like: //img[@alt] and //input[@id @value=submit @alt=submit]
",boeboe,id
144,2010-09-28 17:33:42,"Hi jnicklas,

I don't think I can describe it in more detail then above.
1. For tables: often tables are not unique on @id (since they often don't have any at all), so that is why we also check for @label.
2. For buttons: same story.The X-path templates provided miss some common buttons like: //img[@alt] and //input[@id @value=submit @alt=submit]
",boeboe,alt
144,2010-09-28 17:33:42,"Hi jnicklas,

I don't think I can describe it in more detail then above.
1. For tables: often tables are not unique on @id (since they often don't have any at all), so that is why we also check for @label.
2. For buttons: same story.The X-path templates provided miss some common buttons like: //img[@alt] and //input[@id @value=submit @alt=submit]
",boeboe,value
144,2010-09-28 17:33:42,"Hi jnicklas,

I don't think I can describe it in more detail then above.
1. For tables: often tables are not unique on @id (since they often don't have any at all), so that is why we also check for @label.
2. For buttons: same story.The X-path templates provided miss some common buttons like: //img[@alt] and //input[@id @value=submit @alt=submit]
",boeboe,label
144,2010-09-28 21:12:50,"1. Capybara doesn't look at classes anywhere, if it started doing that in this one particulat case, it'd be pretty inconsistent.
2. `//img[@alt]` isn't a button, it's an image. Afaik only an `<input type=""image"">` can have an `alt` attribute. `<input type=""submit"">` doesn't really make sense with an `alt` attribute (an alternative to what?). Or am I wrong? 
",jnicklas,alt
143,2010-09-25 11:11:26,"Hi all,

We (see issues#issue/141) have been looking for an elegant solution to locate/click elements in tables. Consider the following table containing rows with firewall rules:



What we want to do now in this table is clicking the last column of a certain row in this table. The last column is a link to delete the firewall rule in this webGUI. As an extra constraint we only know the user friendly name of the rule we are going to delete: ""int-ipsec-1"". You can write your own small method using xpath selectors to do the job,but you know... this is one table and the next for sure looks just a bit different and you can start xpath-ing all over again... :). We want to avoid this.

How:
    module Capybara
        class Session
         DSL_METHODS_EXTRA = [ :within_row ]
            def within_row(table,rowoption)
                within :xpath, XPath.row(table,rowoption) do
                    yield
                end
            end
        end



Step definition usage:
    Then /^I delete rule ""([^""]*)"" from firewall$/ do |rule|
        within_row(""dynatable"", :link => rule ) do
            click_link(""Delete"")
        end
    end



You can use this new within_row locator with :link, :text and :button options. A more clean implementation of this idea is possible, because i find it a bit dirty to spit Xpaths and recombine them again. Some more Xpath helper functions can be implemented to intermix multiple ""OR'ed"" Xpaths (now you can only append and prepend), but I don't know if others feel the same about it. For now it works just fine as implemented above :).

Also note the small add-on for the table selector ( or @class=#{s(tablelocator)} ) . I'll submit a separate request for some extra Xpath appends for table and button.

Kind regards,
Bart
",boeboe,class
142,2010-09-25 09:53:37,"Hi,

In our products (see issues#issue/141 for some background), we often need to browse through some drop down menu's. The problem is that the buttons in those drop-down menu's don't always have a unique name, text, id or value on those particular pages. That's why we need to contain our search within certain lists, defined on the page.

How:
    module Capybara
        class XPath
            def list(locator)
                append(""//li[@id=#{s(locator)}]"")
            end
        end



We also defined a similar solution to find elements within a table, based on a unique row match, but I'll put that one in a next ticket, to keep things seperated...

Kindly,
Bart    
",boeboe,id
119,2010-08-31 10:48:52,"I see the problem. But you raise NotSupportedByDriverError on some methods?

I think there should be an opt in possibility of doing these things, with the understanding that not every driver is capable of doing it. All three of us actually needs this method.

What about layering the spec and raising an exception informing you need to move to a higher level (full browser) for certain methods? If you were using Cucumber, that would simply involve re-tagging your scenario with @selenium (or @browser etc).
",runeb,browser
119,2010-08-31 10:48:52,"I see the problem. But you raise NotSupportedByDriverError on some methods?

I think there should be an opt in possibility of doing these things, with the understanding that not every driver is capable of doing it. All three of us actually needs this method.

What about layering the spec and raising an exception informing you need to move to a higher level (full browser) for certain methods? If you were using Cucumber, that would simply involve re-tagging your scenario with @selenium (or @browser etc).
",runeb,selenium
119,2011-04-10 08:54:00,"I definitely would need this feature. I don't see how adding this is any different from javascript heavy features. Developers already have to use @javascript tag in their cucumber tests when a headless browser is not enough. I don't see why it is a problem that some drivers raise a NotSupportedByDriverError when they cannot implement the feature.
",tunylund,javascript
110,2010-11-27 21:33:50,"Hey everyone, @botandrose and I submitted a pull request for the fix for this in cucumber-rails.  I'll post back here if/when it's accepted.
",jfelchner,botandrose
98,2010-07-02 22:02:37,"Put that code (by itself) in a file e.g. features/support/monkey_patch_capybara_webdriver_driver.rb and it will be loaded by cucumber and change the behaviour (analogous to a rails initialiser?) of capybara scenarios which use selenium (@javascript by default) in the tests. 

I don't think this is the best way to solve the problem (since it involves copy-paste & hacking the capybara internals) but until someone suggests a better approach it might help?
",nruth,javascript
97,2010-07-02 13:40:13,"HTML
    <div class='flash'>
      <div class='notice'>
        <p>Visit has been added</p>
      </div>
    </div>

step
    Then %r(I should see an? ""([^""]*)"" notification$) do |string|
      regexp = /#{string}/i
      page.should have_xpath('//div[@class=""flash""]/div[@class=""notice""]/p', :text => regexp)
    end

feature
    Then I should see a ""Visit Added"" notification

result:
    expected #has_xpath?(""//div[@class=\""flash\""]/div[@class=\""notice\""]/p"") to return true, got false (RSpec::Expectations::ExpectationNotMetError)

This would be nicer if it could show that the element matched, but the text didn't match.
",glenjamin,class
97,2010-11-04 18:37:05,"@Neeraj

thanks for taking the time to provide the patch, however, I don't think this is the right way to solve this problem. It's not even 100% certain that the method has_xpath is going to be used in a ""test"", Capybara could well be used for other things. Just printing out to standard out is too much of a side effect.

This is actually a pretty tricky problem. As I said in my original reply, I don't think that has_xpath even _can_ be used this way, since it will only ever return true or false, we need separate methods for this, I think.

Please also check the guide on contributing, it's a work in progress, which is why it isn't linked to from anywhere yet: https://github.com/jnicklas/capybara/wiki
",jnicklas,Neeraj
96,2010-06-30 17:09:55,"Running `session.locate(:xpath, '//div[@id=""nosuchthing""]')`
currently yields an error message of 'xpath', which sucks. I'd prefer ""Unable to locate '//div[@id=\""nosuchthing\""]'"", but most anything would be more meaningful.
",josephholsten,id
81,2010-05-24 02:13:36,"Since discovering how easy @javascript makes it to test js I've started doing some PE of an existing app with prototype/scriptaculous/lowpro, but have come upon some issues with hidden elements. 

Following up from [this group posting](http://groups.google.com/group/ruby-capybara/browse_thread/thread/5ecea8e8c5b82a77/c6acc143b7e603b9?lnk=gst&q=hidden#c6acc143b7e603b9) and my own troubles with [this feature/scenarios/stepdefs](http://gist.github.com/411453) on selenium, I have produced [a feature branch w/ 2 failing specs](http://github.com/nruth/capybara/commit/358b09a30582157b7aa5c5e79992d315dd502f8d) tested in the rack-test and selenium session specs (I don't have the other bits and bobs installed, sorry). 

I'm going to have a poke about the capybara code, but not sure whether I'll get very far with it.

I wonder if it's just a setting not being passed somewhere or other for has_content, since the find matchers seem to be working as expected when turning ignore_hidden_elements on/off.
",nruth,javascript
81,2010-08-02 18:14:18,"ignore_hidden_elements doesn't seem to change anything for my tests using @selenium. While I do see the element disappear in the browser as the test runs the test fails on ""And I should not see ""Billing Address"". Changing this to ""And I should see ""Billing Address"" passes. I've yet to find a solution.
",tinomen,selenium
78,2010-05-21 14:24:18,"I have a cucumber feature which uses culerity. I've installed celerity as recomended (jruby -S gem install celerity). I've installed jruby using rvm and created a symlink in /usr/bin/jruby to the jruby rvm path.

When I try to run my tests (cucumber features/myexample.feature --tags @culerity), I get this error:

/usr/local/rvm/rubies/jruby-1.5.0/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in `require': no such file to load -- celerity (LoadError)
    from /usr/local/rvm/rubies/jruby-1.5.0/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in`require'
    from /usr/local/lib/ruby/gems/1.8/gems/culerity-0.2.10/lib/culerity/celerity_server.rb:2
    from /usr/local/lib/ruby/gems/1.8/gems/culerity-0.2.10/lib/culerity/celerity_server.rb:2:in `require'
    from /usr/local/lib/ruby/gems/1.8/gems/culerity-0.2.10/lib/../bin/run_celerity_server.rb:2
F--------------

What is wrong? If I run a 'jruby -S gem list' I get the celerity gem listed, so it's properly installed in the jruby environment.

Thanks for any help

Daniel
",danicuki,culerity
75,2010-06-19 16:02:17,"Glad to know, Jonas! Thanks to @usrm
",adolfosousa,usrm
73,2010-05-07 21:41:13,"For some reason after the 1st scenario runs successfully, all subsequent scenarios fail on the first step when running cucumber/capybara.

i get the following error message for each scenario:

undefined method `call' for nil:NilClass (NoMethodError)

I have set up a feature outside of a rails project, so that i can simulate through the the web pages as if i was an end user.

Included is a sample where i search on google, where there are 2 scenarios only. the first succeeds, but the second fails (which is failing on my current implementation). Any ideas?

*.feature:
Feature: Search Google
  In order to make sure people can find my documentation
  I want to check it is listed on the first page in Google

  Scenario: Searching for JS.Class docs
    Given I have opened ""http://www.google.com/""
    When I search for ""JS.Class""
    Then I should see a link to ""http://jsclass.jcoglan.com/"" with text ""JS.Class - Ruby-style JavaScript""

  Scenario: Searching for The Dark Knight
    Given I have opened ""http://www.google.com/""
    When I search for ""batman""
    Then I should see a link to ""http://www.imdb.com/title/tt0468569/"" with text ""The Dark Knight (2008)""

*_step.rb:

Given /^I have opened ""([^\""]*)""$/ do |arg1|
 visit(arg1)
end

When /^I search for ""([^\""]*)""$/ do |term|
  fill_in 'q', :with => term
  click('Google Search')
end

Then /^I should see a link to ""([^\""]_)"" with text ""([^\""]_)""$/ do |link,txt|
  page.should have_xpath(""//a[@href='#{link}']"")
  page.should have_content(txt)
end

env.rb:

ENV[""RAILS_ENV""] ||= ""cucumber""
require File.expand_path(File.dirname(**FILE**) + '/../../config/environment')

require 'cucumber/formatter/unicode'Unicode support
require 'cucumber/web/tableish'
require 'capybara/cucumber'
require 'capybara/session'
require 'cucumber/rails/capybara_javascript_emulation' Capybara.run_server = false 
Capybara.default_selector = :xpath
Capybara.default_wait_time = 2 Capybara.ignore_hidden_elements = false Capybara.current_driver = :culerity
",rubyskies,href
69,2010-04-21 14:43:54,"I can't see how to access the @driver variable in order to tell selenium webdriver to use chrome instead on firefox. 

It seems to be set in the self.driver method here:
http://github.com/jnicklas/capybara/blob/master/lib/capybara/driver/selenium_driver.rb

But how can I override it in my Cucumber env.rb for example? I currently have:

require 'capybara/cucumber'
Capybara.default_driver = :selenium

And am attempting to test an external webapp (i.e. not a rack-based one). 
",chrislo,driver
69,2010-07-20 01:21:38,"The README is definitely wrong in this case - the driver instance returned from the for() call is not kept. If this somehow works for anyone, it's by pure luck since the Chrome and Firefox internals are somewhat similar (both will be listening on port 7055). 

This can probably be solved by having a setter for the @driver class ivar in Capybara::Driver::Selenium, allowing the user to do:

<pre>
  Capybara::Driver::Selenium.driver = Selenium::WebDriver.for :chrome
</pre>
",jarib,driver
69,2010-08-27 19:18:52,"Yeah... it appears that there is no way to set `@driver` in lib/capybara/driver/selenium_driver.rb ... I had to change `:firefox` to `:chrome` manually in that file.
",agibralter,driver
60,2010-04-15 16:28:57,"I'm running into a similar problem right now. We've got an array of states like this:
{{{
state[]=Draft
}}}

When there is only one element, capybara seems to handle it ok, passing the single-element array on the request:
{{{
Parameters: {""action""=>""show"", ""controller""=>""searches"", ""state""=>[""Draft""]}
}}}

But when there are more than one:

{{{
state[]=Draft&state[]=Canceled
}}}

then state=[nil, nil] is passed on the request, like
{{{
Parameters: {""action""=>""show"", ""controller""=>""searches"", ""state""=>[nil, nil]}
}}}

Note that if we add the @javascript tag (we're using capybara in cucumber features), then it works correctly.

HTH
",dchelimsky,javascript
48,2010-06-15 02:37:23,"I can verify this ... sort of.

Given this path "".list-item:first-child a"":

find("".list-item:first-child a"")
gives me: xmlXPathCompOpEval: function first-child not found

find(Capybara::XPath.for_css("".list-item:first-child a"").paths)
gives me this xpath: //*[contains(concat(' ', @class, ' '), ' list-item ') and first-child(.)]//a
and this error: unexpected '//' after '' (Nokogiri::CSS::SyntaxError)

In IRB everything clears fine with the second example. It only errors like this in a step. Why would the string be a valid xpath in one and not the other?

As for these specs you talk about, they cover no css conversion as far as I can see.

**Update:** This seems to be nokogiri, not capybara, causing this. I even updated to 1.4.2 and used Nokogiri::CSS::Parser.new.xpath_for("".list-item:first-child a"").first and got the same error as the second example.

**Final Update:** Moved back to first css example with the latest Nokogiri and all works fine. You might want to make a note about this in the README
",m3talsmith,class
44,2011-08-05 13:09:57,"@jnicklas, @retrospect : I just ran into the same problem, but realized that freezing date/time with Timecop was responsible of the issue.

I think Timecop messes up with Capybara's timeout function. I don't think there is any real fix here... Clearly, ""freezing"" time is dangerous, and I would recommend using this trick with caution.
",gdeest,retrospect
44,2011-08-11 17:49:41,"@gaeldeest: this caveat is mentioned at the bottom of the Capy README, you should use Timecop.travel and not Timecop.freeze.
",jnicklas,gaeldeest
40,2010-02-08 20:06:30,"Posted to the google group, no answer yet so posting here
Im running os x 10.6.<latest> and i've updated my ruby from ports and installed libffi however when tagging a scenario with @selenium the feature is just stalling and not launching a browser instance, i am able to create a new browse using the selenium-webdriver api, is there anything i can check or do to get this working cheers

Stephen
",ssmithstone,selenium
37,2010-06-29 20:56:30,"@luismrose any update on what happened to the rack-test patch?
",jnicklas,luismrose
22,2009-12-21 12:13:23,"At the moment the example below should fail because #has_content? doesn't wait for an element to appear.

  describe '#has_content?' do
      it ""should wait for asynchronous load"" do
        @session.visit('/with_js')
        @session.click_link('Click me')
        @session.has_content?('Has been clicked').should be_true
      end
    end

It doesn't actually fail because the xpath



is too greedy since it selects the script tag witch contains the 'Has been clicked' string:



Is this the intended behaviour of #has_content?
",remogatto,session
14,2009-12-09 16:27:13,"Fix on my no-db-knowledge branch. The commit: http://github.com/aslakhellesoy/capybara/commit/bb6051078a4ac645f607fd0003b8280f33e8c353

I have added support for DatabaseCleaner in Cucumber (enabled for @javascript, @culerity, @selenium and @no-txn tags only), which lets users enjoy the same ""it just works"" experience as before. -And now they can more easily opt out of DatabaseCleaner if they don't want/need it. 

Previous discussion here: http://groups.google.com/group/ruby-capybara/browse_thread/thread/e43522c3e4808d95
",aslakhellesoy,selenium
14,2009-12-09 16:27:13,"Fix on my no-db-knowledge branch. The commit: http://github.com/aslakhellesoy/capybara/commit/bb6051078a4ac645f607fd0003b8280f33e8c353

I have added support for DatabaseCleaner in Cucumber (enabled for @javascript, @culerity, @selenium and @no-txn tags only), which lets users enjoy the same ""it just works"" experience as before. -And now they can more easily opt out of DatabaseCleaner if they don't want/need it. 

Previous discussion here: http://groups.google.com/group/ruby-capybara/browse_thread/thread/e43522c3e4808d95
",aslakhellesoy,no-txn
14,2009-12-09 16:27:13,"Fix on my no-db-knowledge branch. The commit: http://github.com/aslakhellesoy/capybara/commit/bb6051078a4ac645f607fd0003b8280f33e8c353

I have added support for DatabaseCleaner in Cucumber (enabled for @javascript, @culerity, @selenium and @no-txn tags only), which lets users enjoy the same ""it just works"" experience as before. -And now they can more easily opt out of DatabaseCleaner if they don't want/need it. 

Previous discussion here: http://groups.google.com/group/ruby-capybara/browse_thread/thread/e43522c3e4808d95
",aslakhellesoy,culerity
14,2009-12-09 16:27:13,"Fix on my no-db-knowledge branch. The commit: http://github.com/aslakhellesoy/capybara/commit/bb6051078a4ac645f607fd0003b8280f33e8c353

I have added support for DatabaseCleaner in Cucumber (enabled for @javascript, @culerity, @selenium and @no-txn tags only), which lets users enjoy the same ""it just works"" experience as before. -And now they can more easily opt out of DatabaseCleaner if they don't want/need it. 

Previous discussion here: http://groups.google.com/group/ruby-capybara/browse_thread/thread/e43522c3e4808d95
",aslakhellesoy,javascript
13,2009-12-09 16:22:55,"Rails in @culerity mode often puts in absolute URIs, such as http://host.example.com/foo

My absolute-uri-fix branch makes Capybara able to cope with that. The commit: http://github.com/aslakhellesoy/capybara/commit/61338d0786e64adf8d78c10831c3480fc67e6e5d
",aslakhellesoy,culerity
12,2009-12-03 16:43:28,"Hard to know how to handle this. Webrat does some magic to check if a link has javascript to send ""_method=delete"" and sends a different HTTP verb based on that. In capybara context that feels a little ""dishonest"" to me. If something doesn't work without javascript it shouldn't work in the plain rack driver so people know that javascript is actually required for the thing to function (in my opinion). The question is, is that going to frustrate a lot of people? I presume most Rails users are now doing restful routes and using ""link_to 'Delete', :method => :delete"" in their views. That won't work as expected under the capybara rack driver. Thoughts?

Should we just leave things as they are and suggest that people tag deletion scenarios as @javascript so it's clear there is a requirement there? I think that is my preference.
",robholland,javascript
12,2009-12-04 10:31:51,"Yep, that was my feeling. For the record, should anyone else stumble across this ticket, if you aren't using a confirmation prompt you can just tag the scenario as @javascript to have it work. If you do use a confirmation prompt you'll need to use culerity (so use the @culerity tag) as that's the only javascript-capable driver that capybara supports that currently knows how to handle confirmation dialogs (it just hits ""Yes"" on all confirmations).
",robholland,culerity
12,2009-12-04 10:31:51,"Yep, that was my feeling. For the record, should anyone else stumble across this ticket, if you aren't using a confirmation prompt you can just tag the scenario as @javascript to have it work. If you do use a confirmation prompt you'll need to use culerity (so use the @culerity tag) as that's the only javascript-capable driver that capybara supports that currently knows how to handle confirmation dialogs (it just hits ""Yes"" on all confirmations).
",robholland,javascript
12,2009-12-07 20:48:52,"I agree that Capybara shouldn't implement support for bad HTML idiosyncrasies in specific web frameworks like Rails.

Being purist however (@javascript, @culerity) has drawbacks - the most important one being slowness.

Would you be open for adding an API for plugging in custom strategies? Example usage:

<pre>
Capybara.add_strategy(:click, RailsClicker.new)
</pre>


This would keep Capybara clean, while still providing some level of pragmatism, allowing people to plug in their own strategies if they want to trade standardness for speed.
",aslakhellesoy,culerity
12,2009-12-07 20:48:52,"I agree that Capybara shouldn't implement support for bad HTML idiosyncrasies in specific web frameworks like Rails.

Being purist however (@javascript, @culerity) has drawbacks - the most important one being slowness.

Would you be open for adding an API for plugging in custom strategies? Example usage:

<pre>
Capybara.add_strategy(:click, RailsClicker.new)
</pre>


This would keep Capybara clean, while still providing some level of pragmatism, allowing people to plug in their own strategies if they want to trade standardness for speed.
",aslakhellesoy,javascript
12,2009-12-08 00:12:27,"Even though adding a @javascript tag to affected features will make them run more slowly, seems to be the obviously correct thing to do. Your app is using JavaScript, albeit JavaScript generated by Rails, so it should be properly tested using a browser driver that handles JavaScript IMO.

W
",wincent,javascript
12,2017-01-26 17:05:33,@thlucid Entitled much?  and with a link to an article where the server is down too.  Also this has been supported for years so not really sure what your problem is - https://github.com/teamcapybara/capybara/blob/master/lib/capybara/rails.rb#L18 - Locking this thread,twalpole,thlucid
10,2009-12-02 08:23:18,"When dealing with JavaScript frameworks that build rich internet application (e.g. ExtJS) we may need to click on any html element that is visible on the page. At the moment capybara's DSL doesn't allow this sort of interaction. It allows only to click on buttons and links through #click_link and #click_button methods. It would be nice to give the users the freedom to click on any elements that can be selected through XPath or CSS selectors. Two possibilities raised after a discussion [1] on ML:

Raise the visibility of Session#find method from private to public so that one could do:



Add a #click method that allows to click on a button, on a link or on a generic element:

<pre>
<code>
 def click(locator)
   (find_link(locator) || find_button(locator) || find(locator)).click
 end

 click('Click me!') # click on a button or link

 # click on the expand button of an ExtJS ComboBox
 click(""//img[@class='x-form-trigger x-form-arrow-trigger']"")
</code>
</pre>


[1] - http://groups.google.com/group/ruby-capybara/browse_thread/thread/f6c7c5b80aaa09c9
",remogatto,class
2,2009-11-21 11:58:00,"All my features that use the standard rack-test driver have ported across from webrat without any real difficulties, but I'm having some issues with Culerity-based features.

Here's an example:



And the corresponding step definition:



Here's a stripped down version of the login form:



I'm getting an exception on hitting the ""fill_in"" line:



If I comment out that line for testing purposes then I get a similar exception on hitting the ""click_button"" line:



Gem versions I'm working with:
- capybara (0.1.1)
- cucumber (0.4.3)
- culerity (0.2.3)
- nokogiri (1.3.3)
- rack (1.0.1)
- rack-test (0.5.2)
- database_cleaner (0.2.3)
- rails (2.3.4)

And I'm using jarib-celerity (0.0.7.1) from GitHub as noted in the ""Gotchas""; celerity (0.7.5) from GemCutter fails too.

JRuby is 1.4.0, installed and with its ""bin"" directory exported via the PATH environment variable.

All references to webrat remove from ""features/support/env.rb"" and have:



The scenario in question basically works if I remove the @javascript tag, but to properly test I do need JavaScript because the ""Successfully logged in"" flash message is actually shown using JS.

Not sure if I am overlooking anything obvious, perhaps just another case of PEBKAC...   Let me know if you need any further information.

Cheers,
Wincent
",wincent,javascript
