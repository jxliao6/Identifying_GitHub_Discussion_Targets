issue_num,datetime,body,login,close_date
1578,2017-03-27 21:10:12,"Additional details for this issue can be found at http://stackoverflow.com/questions/43002555/strategy-for-modifying-a-route-parameter-dynamically-within-the-app (on which I haven't gotten much transaction as of yet).

My query looks something like this:

Original query: 
<S_CODE_TOKEN>
Since the variable is on the root query, it seems like the only way to modify that variable is on the Route. This means that the new value for that variable needs to communicated ""outside"" of Relay by a mechanism such as adding an event listener to the page and modifying window.location (there are others of course). But for my app, the date picker is in a child component in which case that child component's `handleDateChange()` would have to set window.location to cause the change.  This seems very wrong.

What I'd really like to do is move the root lunchForWeek query out of the Route and into the fragment of one of my top-level components so that that component can change the date via `props.relay.setVariables().`  However, there didn't seem to be a way to do this. I thought that I might define an empty query on the Route and then define the fragment 'on Query', but this doesn't seem to be supported.

I finally gave in and added another level to the query so that I could do:

New query:
<S_CODE_TOKEN>
This works fine. The Route now has:
<S_CODE_TOKEN>
But since the original schema  is completely valid, it seems like Relay should support this. Furthermore, I was able to design around this because I happen to own the GraphQL schema.  But what if I were building an app around someone else's GraphQL API?

What I was trying to do originally seems like a valid use case so perhaps it is possible, but I just haven't figured out how to implement it.  Or is this a design limitation of Relay?
      ",blevine,
1577,2017-03-27 10:08:16,"Hi!

I'm observing some strange behaviour with mutation configs. I have a mutation configured like this:

<S_CODE_TOKEN>

Configured like this the property `conversationCount` gets updated, however the newly added `pulseEdge` does not get added to the connection. However if I remove the `FIELDS_CHANGE` config, then everything works like I wanted it to work in the first place (`conversationCount` gets updated and the edge is added to the connection).

Having read through the documentation and some of the code I can't seem to find this behaviour documented, so I'm expecting something odd is going on?

I would have expected the posted config to work.",kastermester,
1576,2017-03-25 19:22:12,"I changed the flow path from src/ to packages/.
I renamed the file name flowconfig to .flowconfig",angeloocana,
1576,2017-03-25 19:22:28,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!

**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.",facebook-github-bot,
1576,2017-03-25 19:30:03,Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!,facebook-github-bot,
1575,2017-03-24 17:36:39,"Say I have a node that looks like this
<S_CODE_TOKEN>

and I have a mutation that  only updates history books,
how would I write my getFatQuery such that it only updates history books

i've tried something like this, but it updates books of all types
<S_CODE_TOKEN>

",BossGrand,
1574,2017-03-21 16:45:05,,nikolasburk,2017-03-21 20:33:26
1574,2017-03-21 16:45:24,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!

**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.",facebook-github-bot,2017-03-21 20:33:26
1574,2017-03-21 16:49:47,Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!,facebook-github-bot,2017-03-21 20:33:26
1574,2017-03-21 18:54:22,Thanks @nikolasburk.,wincent,2017-03-21 20:33:26
1574,2017-03-21 18:54:28,@facebook-github-bot shipit,wincent,2017-03-21 20:33:26
1574,2017-03-21 18:54:59,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4747796).",facebook-github-bot,2017-03-21 20:33:26
1573,2017-03-20 01:58:04,"Given a mutation using the new `Relay.GraphQLMutation` that uses arguments (in this case year) Example:

<S_CODE_TOKEN>

Relay returns an auto generated field name, as follows:

![screenshot - 200317 - 12 55 40](https://cloud.githubusercontent.com/assets/63807/24086958/9038b31c-0d6c-11e7-8611-9fae99034d7e.png)

What algorithm is used to auto generate the field name with arguments? (Assume it's a combination of arguments + values, In this case: `_courseToAnnualUpdates2RJpOA`).

It's impossible to craft an optimistic update without being able to perform the same transform to get the generated fieldname. Just the line in the codebase would be fine!",Rodeoclash,
1572,2017-03-18 10:30:26,"Seems prepareVariables can not return a promise, so how can I prepare the query variables asynchronous? For example get data from Async Storage in React native.",zhangmengying,
1571,2017-03-17 21:46:13,,gabelevi,2017-03-22 03:33:44
1571,2017-03-21 23:44:07,@facebook-github-bot shipit,kassens,2017-03-22 03:33:44
1571,2017-03-21 23:44:16,Thanks Gabe!,kassens,2017-03-22 03:33:44
1571,2017-03-21 23:44:33,"@kassens has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4750884).",facebook-github-bot,2017-03-22 03:33:44
1570,2017-03-16 15:55:29,"Looking at the code for [`writeRelayUpdatePayload`](https://github.com/facebook/relay/blob/7110c68f437391ad1ee54ab2c84fd8896a8662fb/src/traversal/writeRelayUpdatePayload.js#L79), one sees that only `NODE_DELETE`, `RANGE_ADD` and `RANGE_DELETE` mutation config settings are actually examined. Furthermore, for each of those config types, only a subset of the config params are actually used compared to the options presented in the documentation. 

For example: `NODE_DELETE` docs list `parentName`, `parentID`, `connectionName`, `deletedIDFieldName` config params, but if you look at the code, only `deletedIDFieldName` is actually used by the implementation. Same goes for `RANGE_ADD` and `RANGE_DELETE`. Each of these has a bunch of params but only a subset of those params appear to be used when writing update payloads.

Further, `FIELDS_CHANGE` appears to be [totally ignored](https://github.com/facebook/relay/blob/7110c68f437391ad1ee54ab2c84fd8896a8662fb/src/traversal/writeRelayUpdatePayload.js#L95-L106) with the update happening automatically.

Is my understanding correct? I don't know the history of this codebase too well, so I am wondering: are these configs going away or being simplified given the migration from tracked to static? 

Thank you,
Dmitry

PS. I know questions are supposed to be posted to SO, but I am posting here because this seems to be internals-specific enough that SO didn't seem appropriate. My apologies if that is incorrect. Please let me know and I will migrate my question to SO.",dminkovsky,2017-03-17 22:17:32
1570,2017-03-16 16:36:09,Note that only some of the config options affect the way mutation *payloads* are handled (what you see in `writeRelayUpdatePayload`). The other config options affect the way the mutation *query* is constructed.,josephsavona,2017-03-17 22:17:32
1570,2017-03-16 17:01:56,"Ah hah. Thank you. So since mutation query construction is going away--
those params won't be used.

So if you're using `RelayGraphQLMutation`, which doesn't construct queries,
you can skip those params?

On Thu, Mar 16, 2017 at 12:36 PM, Joseph Savona <notifications@github.com>
wrote:

> Note that only some of the config options affect the way mutation
> *payloads* are handled (what you see in writeRelayUpdatePayload). The
> other config options affect the way the mutation *query* is constructed.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/facebook/relay/issues/1570#issuecomment-287115663>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AANWZTqMQmp4Enkhi2ItMwlANtCs6uIoks5rmWT_gaJpZM4MfgeZ>
> .
>
",dminkovsky,2017-03-17 22:17:32
1570,2017-03-16 17:06:37,Yup!,josephsavona,2017-03-17 22:17:32
1570,2017-03-17 22:17:32,"Cool! Thank you. I guess it makes sense to just close this, then.",dminkovsky,2017-03-17 22:17:32
1569,2017-03-15 07:03:14,"When I throw a `GraphQLError` such as `throw new GraphQLError('test')`, the error value in the `render()` callback looks something like this and is difficult to handle:

<S_CODE_TOKEN>

Is there a way to extract the pure error thrown by GraphQL? This formatting is neat and all,
but what if I return a JSON-stringified error like `{errorCode: 101, message: 'Permission to query field denied'}` and want to render a component based on the `errorCode`?",Naoto-Ida,
1568,2017-03-09 23:40:51,"I'm passing an `artist` props to my mutation like this filled with lots of keys, but `this.props` inside `getVariables()` of my Mutation only contains `__dataID__`. 
<S_CODE_TOKEN>

It also seems to be ignoring my `getFatQuery()`. A very similar mutation is working fine, but this one has issues.

<S_CODE_TOKEN>",Naoto-Ida,2017-03-16 04:08:34
1567,2017-03-08 16:23:58,"I haven't found any info about this and I might have missed something obvious, but is this even possible?

Here's a snippet of my current approach of how to update an edge.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

This works if I wait for the server response before updating, but any attempt of updating the optimistic response gives the following error:
<S_CODE_TOKEN>",goras,
1567,2017-03-14 02:24:47,What does your config look like for the mutation?,rtymchyk,
1567,2017-03-15 12:47:56,"Thanks for your response!

Here's the config for the two mutations:

<S_CODE_TOKEN>

<S_CODE_TOKEN>",goras,
1567,2017-03-15 13:15:13,"Is there anything preventing you from waiting on the add mutation to complete? If the server has not yet responded with the created edge, then it's probably impossible to know what node to update. You can use relay.hasOptimisticUpdate to check if a node is still pending and prevent updates.

I haven't run into this scenario myself.",rtymchyk,
1567,2017-03-15 14:02:49,"Sure i can find a workaround and wait for the add-mutation to complete, but i guess i'm just asking for the sake of curiosity.

I don't really know relay and graphql that well yet, but i figured that when i receive an optimistic response from the add-mutation it uses an ""client-id"".
My interpretation was that i could mutate this response (only on the client-side), and when the initial request (the add-mutation) is done on the server,
the data from the newly created edge will be used by the update-mutation which will be able to update the edge on the server with the correct id.
On the client-side though, the optimistic response would be instantly created and updated.

Definitely risky in case the first mutation fails, but is it possible or am i just not understanding this correctly?
",goras,
1567,2017-03-15 14:21:49,"I see what you mean. I think that's a somewhat reasonable assumption to make, so I'll probably let someone else pitch in here in regards to whether or not that's built into relay. ",rtymchyk,
1566,2017-03-07 08:50:59,English typo,Gregoirevda,2017-03-22 21:35:28
1566,2017-03-07 08:51:39,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!

**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.",facebook-github-bot,2017-03-22 21:35:28
1566,2017-03-09 11:20:01,Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!,facebook-github-bot,2017-03-22 21:35:28
1566,2017-03-22 20:06:30,"Thanks for this @Gregoirevda. Note that ""need only"" is not a typo and is actually perfectly valid English:

> [I]n a rather formal style of English, there also exists an auxiliary verb (""helping verb"") *need*, which is followed by a bare infinitive, and is only used in negative polarity contexts: with *not*, with *only*, in questions, and so on. Additionally, it only exists in the present tense. Aside from these two restrictions, it's very much like other auxiliary verbs (*can*, *may*, *should*, etc.): ""We need not discuss it.""

(via [quick Google search](http://english.stackexchange.com/a/297235)).

Having said that, I can see how this usage might confuse some readers, and we want the documentation to be as accessible as possible, so let's get this merged. Thanks once again.",wincent,2017-03-22 21:35:28
1566,2017-03-22 20:06:40,@facebook-github-bot shipit,wincent,2017-03-22 21:35:28
1566,2017-03-22 20:35:44,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4756931).",facebook-github-bot,2017-03-22 21:35:28
1565,2017-03-06 16:22:29,"I think it would be helpful to point out the most common use of this API.

Refers to the question in this issue: https://github.com/facebook/relay/issues/1531",sambou,2017-03-22 21:35:28
1565,2017-03-22 20:09:21,Looks fair enough. Thanks @sambou!,wincent,2017-03-22 21:35:28
1565,2017-03-22 20:09:30,@facebook-github-bot shipit,wincent,2017-03-22 21:35:28
1565,2017-03-22 20:34:37,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4756921).",facebook-github-bot,2017-03-22 21:35:28
1564,2017-03-06 13:59:47,thinking-in-relay.html in Chinese,HyperSimon,
1564,2017-03-06 14:00:00,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!

**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.",facebook-github-bot,
1564,2017-03-06 14:08:34,Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!,facebook-github-bot,
1563,2017-03-05 02:37:33,,zzz945,
1562,2017-03-04 21:35:29,Verified that the same number of tests fail as did before.,kassens,2017-03-22 21:35:28
1562,2017-03-21 23:49:35,@facebook-github-bot import,kassens,2017-03-22 21:35:28
1562,2017-03-21 23:50:54,"@kassens has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4750959).",facebook-github-bot,2017-03-22 21:35:28
1561,2017-03-03 16:59:48,"IE10, I know...

Relay.Mutations seem to work fine. But using GraphQLMutation does not work for me. Calling `commit()` results in an ""Object does not support property or method 'create'"" error, which is occurring in RelayGraphQLMutation.js@340 (in getQuery(), as far as I can tell).

Now at first glance, this seems the same base problem with inheriting static members, as mentioned in #394, no? 

Alas, I can't figure out how to fix/monkeypatch this, any help appreciated.


",nuschk,2017-03-04 07:46:41
1561,2017-03-04 07:46:41,"Ok, the problem occurs because with IE <= 10, subclasses do not inherit static properties.

In the case of GraphQLMutation, the call to `RelayQuery.Mutation.create()` (in RelayGraphQLMutation.js) fails, because RelayQuery.Mutation is derived from RelayQuery.Operation, which is derived from RelayQuery.Node, which defines the static create() function. Phew.

I'm now going to use the following hack and see how for I get:

<S_CODE_TOKEN>`

I just place that somewhere in my code base.

I don't think you guys really target IE10 anymore, so I'm going to close this.",nuschk,2017-03-04 07:46:41
1560,2017-03-02 21:29:47,,helielson,2017-03-04 23:05:00
1560,2017-03-04 21:54:11,"Thanks 👍 

@facebook-github-bot shipit",kassens,2017-03-04 23:05:00
1560,2017-03-04 21:55:23,"@kassens has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4656348).",facebook-github-bot,2017-03-04 23:05:00
1559,2017-03-02 09:37:47,"I have written below code

<S_CODE_TOKEN>

export default Main;

On the time of page load its working fine and fetching results but when value of parentFolder is changed using setVariables, it throws above error.

An insight might be useful and appreciated. Thanks
",nikhilmahesh,
1558,2017-03-01 21:07:02,"Hey all,

I have a problem with a query which should be loaded when an event occurs. My relay container looks like this:

<S_CODE_TOKEN>

Here is the the React class:
<S_CODE_TOKEN>

The query in GraphiQL looks like this:
<S_CODE_TOKEN>
When I remove the @include condition the query is fetched perfectly the first time, but when I click the Load button, I get this error:
<S_CODE_TOKEN>

The query which was send is the following:
<S_CODE_TOKEN>

I googled now for hours and found out, that this is the correct behaviour.
See [here](http://stackoverflow.com/questions/37594134/relay-graphql-querying-field-node-instead-of-viewer-when-using-this-props-re) and [here](http://stackoverflow.com/questions/33399901/in-relay-what-role-do-the-node-interface-and-the-global-id-spec-play/33411416#33411416)
So now I have no idea how I can solve this issue. I definitely have to load the data on an event, since I have to filter the users by the entered emailAdress.

Does anybody can help me on how to do this?
Thanks a lot for any help!",d-winter,
1558,2017-03-01 21:39:41,"See #1409 for a possible solution (exact comment [here](https://github.com/facebook/relay/issues/1409#issuecomment-252064786)). Based on that, it looks like your GraphQL API needs to be set up to handle a `nodeInterface` for the type defined within your `allUsers` query. ",amkoehler,
1558,2017-03-02 03:38:35,"Hey @amkoehler,
yes, I saw this ticket. Unfortunately the `User` model implements the node interface (I am using Graphcool as the backend).
![screen shot 2017-03-02 at 04 34 46](https://cloud.githubusercontent.com/assets/11208517/23491918/a7db91de-ff01-11e6-9f45-eeeb0f8156f0.png)
What I forgot to mention is, that I am using react-router-relay with this queries object:
<S_CODE_TOKEN>
Any further ideas?
Thanks again for you help:)",d-winter,
1557,2017-02-28 22:50:40,ONEHOPE's Relay app: https://beta.onehopewine.com,johntran,
1556,2017-02-28 03:04:39,"in my mutation
<S_CODE_TOKEN>

however when debugging it uses the default value in the input variable.
<S_CODE_TOKEN>

i am able to get it working in graphiql by specifying the clientmutationid, but not from the client, as it overwrites with the default value.",benjaminhon,
1556,2017-03-01 18:21:39,"[This comment](https://github.com/facebook/relay/pull/1083#issuecomment-231930313) suggests that `clientMutationId` is added automatically by babel-relay-plugin. It gets added automatically somewhere, because I've never had to manually set it in the mutation. 

It makes sense why you don't have issues in GraphiQL, because that doesn't know about Relay or babel-relay-plugin. If you need the value  `CreateDevice#{device.id}` to be sent to the server, I'd suggest you leave `clientMutationId` alone and send that value with a different key. ",amkoehler,
1556,2017-03-02 02:20:06,"ok noted

On Thu, Mar 2, 2017 at 2:21 AM, Alex Koehler <notifications@github.com>
wrote:

> This comment
> <https://github.com/facebook/relay/pull/1083#issuecomment-231930313>
> suggests that clientMutationId is added automatically by
> babel-relay-plugin. It gets added automatically somewhere, because I've
> never had to manually set it in the mutation.
>
> It makes sense why you don't have issues in GraphiQL, because that doesn't
> know about Relay or babel-relay-plugin. If you need the value
> CreateDevice#{device.id} to be sent to the server, I'd suggest you leave
> clientMutationId alone and send that value with a different key.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/facebook/relay/issues/1556#issuecomment-283424459>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AHzqCGJnUmnxMgqzifHt5elyVWAl5mCwks5rhbc8gaJpZM4MN6VY>
> .
>
",benjaminhon,
1555,2017-02-27 14:23:39,"I have a backend redis database that also uses 'id' as a field parameter.

I have managed to get around the problem of specifiying a globalId by using resolvers to remap the localid to a globalid.

thus, all my writes to the database uses the local id, however all the queries map it to a globalid using the resolvers.

however, i am a bit confused about the mutation getConfigs(), since my props to the mutation will be a localid, i am guessing that i need to convert this to globalid in the fieldsId right?

for example,
<S_CODE_TOKEN>

thanks
",benjaminhon,
1554,2017-02-27 13:20:09,"my schema is as follows

<S_CODE_TOKEN>
is it possible in my resolver to further resolve the payload to add additional fields?
<S_CODE_TOKEN>

This is the way queries work, but is the opposite also possible for mutations?

thanks",benjaminhon,2017-02-27 14:14:14
1554,2017-02-27 14:14:14,"It is possible, got this to work",benjaminhon,2017-02-27 14:14:14
1553,2017-02-27 13:02:51,"I have a device type that i want to mutate, the schema is as follows:

<S_CODE_TOKEN>

my mutation Payload only returns the following fields, without the children.
<S_CODE_TOKEN>

however, if in my Fat query, i mark that the children will be affected as follows
<S_CODE_TOKEN>

though, beacon, anchor, gatt and map are not returned by the payload, but are still effected by the query, will relay know to refetch them?


thanks",benjaminhon,2017-02-27 14:14:33
1552,2017-02-24 17:02:50,"There were [20 errors](https://gist.github.com/73c2d13c221121fba682d3932f0a2fef) both before and after the upgrade in `src/`

PS why is `yarn.lock` in the `.gitignore`? Doesn't that defeat the point?",gabelevi,2017-03-04 22:49:24
1552,2017-02-25 07:29:13,"> PS why is `yarn.lock` in the `.gitignore`? Doesn't that defeat the point?

It was ignored in 44b24f377a52ab415a0a with the rationale explained in a34867552d51c015f687:

> Unfortunately, we require internally at facebook, to have a yarn.lock without `http` resolved modules since we have an offline cache checked in. Since this cache is not availble in OSS, we the yarn.lock is currently useless for OSS.",wincent,2017-03-04 22:49:24
1552,2017-03-04 21:41:48,@facebook-github-bot shipit,kassens,2017-03-04 22:49:24
1552,2017-03-04 21:42:55,"@kassens has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4656332).",facebook-github-bot,2017-03-04 22:49:24
1551,2017-02-23 01:52:31,Please consider using native promises or allow developers the option to choose what polyfill they want to use. Native promises have superior debugging experience to this `throwNext(error)` stuff that `fbjs/lib/Promise` does.,guncha,
1550,2017-02-21 20:03:12,We've been using Relay at [Hudl](https://www.hudl.com/) for over a year now.,mihai,2017-03-22 18:34:18
1550,2017-02-21 20:32:55,Thankyou @mihai!,wincent,2017-03-22 18:34:18
1550,2017-02-21 20:33:00,"@facebook-github-bot shipit
",wincent,2017-03-22 18:34:18
1550,2017-03-16 14:50:50,"Hey @wincent, it seems the CI build failed and this PR was never merged by the bot --  is there anything I can do to fix that?",mihai,2017-03-22 18:34:18
1550,2017-03-22 17:53:01,@mihai: Let me see if I can force it to ship.,wincent,2017-03-22 18:34:18
1550,2017-03-22 17:53:33,@facebook-github-bot shipit,wincent,2017-03-22 18:34:18
1550,2017-03-22 17:53:58,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4755172).",facebook-github-bot,2017-03-22 18:34:18
1549,2017-02-17 13:21:16,"Hi! 

We've been happily using relay at zzish.com for a while (since March last year) and we'd like to be listed on Users. 

Thanks! ",blaiprat,2017-02-17 16:19:14
1549,2017-02-17 15:40:02,Thanks @blaiprat.,wincent,2017-02-17 16:19:14
1549,2017-02-17 15:40:10,@facebook-github-bot shipit,wincent,2017-02-17 16:19:14
1549,2017-02-17 15:40:37,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4578915).",facebook-github-bot,2017-02-17 16:19:14
1548,2017-02-17 12:18:40,"When building a deferred query, we explicitly set the type of the identifying argument to `RelayNodeInterface.ID_TYPE`. This causes the query to be invalid if the type is different.

<S_CODE_TOKEN>
Query to split:
<S_CODE_TOKEN>
Deferred query generated :
<S_CODE_TOKEN>
",qgerome,
1547,2017-02-15 22:26:23,,wincent,2017-02-16 00:34:35
1547,2017-02-15 22:27:04,@facebook-github-bot import,wincent,2017-02-16 00:34:35
1547,2017-02-15 22:27:18,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4568273).",facebook-github-bot,2017-02-16 00:34:35
1546,2017-02-15 21:03:38,"@josephsavona Requested this issue be created to discuss.

Having to override the network layer:
<S_CODE_TOKEN>

Using these configs:

<S_CODE_TOKEN>

Using this query:

<S_CODE_TOKEN>

The store updates fine, but doing a `this.forceUpdate()` on a parent component didn't re-render the changes to the `records`. I had to use `forceFetch`, but the `Relay.Store` after doing a `forceFetch` looks identical to me.

`Relay.Store` upon initial render:
<S_CODE_TOKEN>
`Relay.Store` in Relay.GraphQLMutation onSuccess callback after commit:
<S_CODE_TOKEN>
Relay.Store `readyState` after forceFetch:
<S_CODE_TOKEN>
`Relay.Store` after forceFetch:
<S_CODE_TOKEN>",mattferrin,
1545,2017-02-15 06:16:57,,vnctaing,2017-02-15 07:03:17
1545,2017-02-15 06:28:17,Thanks.,wincent,2017-02-15 07:03:17
1545,2017-02-15 06:28:39,@facebook-github-bot shipit,wincent,2017-02-15 07:03:17
1545,2017-02-15 06:28:53,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4564255).",facebook-github-bot,2017-02-15 07:03:17
1544,2017-02-14 00:48:21,"Say I want to update some information about the edge of a connection, like `isCoolFriend: true`.  
<S_CODE_TOKEN>

How would the `getConfigs() {}` of a mutation class look? My experience is as follows:
- `FIELDS_CHANGE` which will refetch the entire collection
- `RANGE_ADD`
  - append/prepend moves the Edge (unwanted)
  - ignore actually only fetches the data for that Edge, but doesn't update the actual Edge (at least the change isn't reflected in the DOM)
  - refetch fetches the entire connection (feels a bit the same as FIELDS_CHANGE)

I have the feeling I'm missing something trivial here, as I just want one field on one edge to update, not refetch the entire thing. ",mvgijssel,
1544,2017-02-14 09:00:01,"After sleeping on it, I'd expect a config like `RANGE_UPDATE` or `RANGE_CHANGE` which would just update the edge. Or am I approaching the problem wrong? Shouldn't it be possible to update a single edge? Could also change the schema to something like:
<S_CODE_TOKEN>
But that feels hacking around the issue.",mvgijssel,
1544,2017-02-15 12:11:55,"How does your fatQuery look?
I believe that you need to have something like
<S_CODE_TOKEN>
You need to put in the `edge_type` to the fields_change and input the correct id to the edge you want to update",proProbe,
1543,2017-02-13 13:59:08,"Context: I have a schema with a union type between two different node types, let's call them `NodeA` and `NodeB`. Both `NodeA` and `NodeB` implement the relay `Node` interface, and they have a field called `state` as well, which are both enum fields, but for different enums.

When writing components that deal with either `NodeA` or `NodeB` I can obviously query the `state` field on either type. The problem arises when I then have a component which queries the union type and composes the two specific components. I end up with query like so:

<S_CODE_TOKEN>

Now, this query does not comply with the following GraphQL validation: https://facebook.github.io/graphql/#SameResponseShape()

I have tried to get around this by aliasing the fields in the fragments spec'd on my component, but they get stripped away during compilation it seems.",kastermester,
1543,2017-02-13 19:48:35,"I wonder if this could be solved by using an inline fragment spread:

<S_CODE_TOKEN>

This is definitely possible in the new Relay core (not released yet, but preparations to do so are landing on the `experimental` branch), but I don't recall right now whether the old implementation elides spreads in cases like this.",wincent,
1543,2017-02-14 08:47:30,"I tried queries of both these forms

<S_CODE_TOKEN>
And

<S_CODE_TOKEN>

None of these had any effect - the generated query was still invalid.",kastermester,
1543,2017-02-14 16:47:30,"😞  — I was hoping that the second form would work.

We're aggressively prioritizing getting the new core out at the moment, and the new core shouldn't be afflicted by this problem. (Nobody is actually working on the old implementation at the moment, but we would review a bugfix PR if somebody wanted to provide one.)

[The spec](https://facebook.github.io/graphql/#sec-Union-type-validation) allows types in a union to implement conflicting field definitions (it doesn't *explicitly* allow it, but given that it doesn't explicitly *disallow* it, it is therefore effectively allowed). In practical terms, this means that you should include a `__typename` in the query on the union type to detect which one you're actually dealing with at runtime:

<S_CODE_TOKEN>

I won't close this yet, as the new core isn't out yet and somebody may wish to take a stab at a fix.",wincent,
1543,2017-02-14 17:40:47,"Does querying the type name remove the error that the server generates?

It is ok for me to leave this be for now - I renamed my fields as that made more sense anyway. But I could see similiar issues arise around other potential fields in certain circumstances. If the new core does not have that issue then that sounds great. It just seemed to be one of the very few scenarios where a child component change could break the parent component.

I have tried to follow actively along the development of the new core, as especially the ability to do imperative code to handle mutation payloads sounds appealing to me. I am looking forward to being able to take it for a spin.",kastermester,
1542,2017-02-10 15:49:17,"Yet another question regarding the root viewer:

I've been reading tests on master (https://github.com/facebook/relay/blob/73c100b27fe295efd62e352344d29c118b66f2bc/scripts/jest/testschema.graphql) and the new experimental branch. I've noticed that the experimental branch introduces a special `client:viewer` ID for the root viewer: https://github.com/facebook/relay/blob/experimental/src/experimental/runtime/handlers/viewer/RelayViewerHandler.js#L24

I've spent some time trying to glean some best practice regarding the viewer and know that the team is reluctant to clarify the concept/implementation.

Based upon the test queries and the changes in the experimental branch, it appears as though the FB approach is to have the following structure:

<S_CODE_TOKEN>

Ignoring the indirection of the actor Interface, it seems as though the idea is that the viewer encapsulates the session and queries on the user fields are optional. This makes a lot of sense for my use case, as there is often no point in spending cycles querying for the user, as I have the essential properties in the session (in the context).

<S_CODE_TOKEN>

My confusion/question is how the viewer implements the node interface. It appears as though I can either use `Viewer:<SessionUserId>` or have some special values, like the experimental branch uses.

Am I on the right track? Any help would be very much appreciated.",jamiehodge,2017-02-11 05:50:17
1542,2017-02-11 05:50:17,"`Viewer` at Facebook doesn't implement the `Node` interface. Legacy relay has a bunch of unpleasant hacks in it to make it behave as though it does, because we need it to for the purposes of refetchability, and to ensure that all the user data related to the viewer is correctly normalized.

The `viewer` field is really just a historical artifact. We could easily have designed the schema with a bunch more independent root fields than it has, but we didn't. It's possible to contextualize field resolution within the notion of a ""session"" with or without the `viewer` field, passing that down via context during query execution.

The new Relay core has a much cleaner and more generalized ""hack"" in place for this allowing us to deal with the ""specialness"" of `Viewer`. Users of Relay in the community aren't expected to implement a schema that uses the `viewer` pattern, although they may want to. (We neither recommend nor discourage it: like many design questions, it is a trade-off.)

> Ignoring the indirection of the actor Interface, it seems as though the idea is that the viewer encapsulates the session and queries on the user fields are optional.

The indirection abstracts the fact that a logged-in person could be a human `User`, or someone acting on behalf of a `Page` etc. I wasn't around when `viewer` first came into being (before Relay), but I seem to recall that there might have been technical limitations that made it more convenient to nest a bunch of related fields under subfields of a single root field, rather than as separate root fields; it's certainly true that the early Relay code base had limitations like this.

`client:viewer` is an implementation detail on which you shouldn't dwell or rely.

I'm going to close this now as I doubt there's anything actionable for us to do here. In the meantime, I'd worry you to ignore what you see in the test suite and design your schema based on your business needs; the new Relay core is flexible enough that it will adapt just fine to a schema with or without it.",wincent,2017-02-11 05:50:17
1541,2017-02-10 14:43:03,"This PR is an attempt to address https://github.com/facebook/relay/issues/1501.

The changes here are driven by my assumption that `RelayGraphQLMutation` should not rely on any RelayMutation* modules (let me know if this is not the case). Therefore, I basically inlined `RelayMutationDebugPrinter`'s `printMutation` and `printOptimisticMutation` into `getQuery` and `getOptimisticQuery`, respectively.

**Edit**: I just noticed `RelayGraphQLMutation` already uses `RelayMutationTransactionStatus`. So perhaps my assumption was false?

I did not add printing of the mutation configs, because there's kind of a lot going on in [buildQuery](https://github.com/facebook/relay/blob/master/src/mutation/RelayMutationQuery.js#L368). I can take a stab at adding this if it's critical, though.

The changes didn't cause any additional test failures when I ran the tests. I also ran the code locally and verified that:
1. Variables and query are printed when `commit` is called
2. Variables, query, and optimistic response are printed when `applyOptimistic` is called

If someone can give me pointers on the type of tests they'd like to see for this, I'm happy to add.",apalm,
1540,2017-02-10 07:06:14,"`GraphQLMutation` method `commit` does not use the result of `injectNetworkLayer` for requests to allow setting the same credentials as origin. To the best of my knowledge, credentials cannot be set to same-origin at all. Can we confirm this is an issue, or to I have a gap in understanding?",mattferrin,2017-02-12 18:47:48
1540,2017-02-12 18:35:19,"Debugged and saw that I needed to set the mutation queues network layer. Using Ramda, it looked like this.

<S_CODE_TOKEN>",mattferrin,2017-02-12 18:47:48
1540,2017-02-12 18:47:48,Glad to hear you got it sorted out.,wincent,2017-02-12 18:47:48
1539,2017-02-09 07:15:46,"I was going through the relay docs and came to following code in RANGE_ADD.

<S_CODE_TOKEN>

Now over here it is mentioned that `edgeName` is required for adding new node to the connection. Looks well and fine.

Now, I move further down the documentation and reached the `GraphQL` implementation of this mutation.

<S_CODE_TOKEN>

Now according to docs this mutation gives me output as 


<S_CODE_TOKEN>

I cannot see `edgeName` being present here.

 I was using graphene for my project. Over there also I saw something similar only 


<S_CODE_TOKEN>

Over here also I cannot see `edgeName` anywhere. 

Any help please? I am working on mutations for the first so wanted to confirm a m I missing something or is something wrong here? 

I have posted this on Stack Overflow too http://stackoverflow.com/questions/42130437/issue-with-range-add-in-relay-mutations",jinxac,
1539,2017-02-10 00:20:46,"`edgeName` is not something that coming from the mutation response, it is from the data you already fetched through previous queries. The name is to help Relay find the record (edge) in the in-memory store and do the mutation you specified in `rangeBehaviors`.",JenniferWang,
1538,2017-02-09 01:28:47,,wincent,2017-02-09 05:48:52
1538,2017-02-09 01:29:36,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4534444).",facebook-github-bot,2017-02-09 05:48:52
1537,2017-02-08 10:05:59,"If we have at the top of our file the default import then the IDEs are unable to resolve anything off it other than `DefaultNetworkLayer`

<S_CODE_TOKEN>

However if we explicitly import the `RelayPublic.js` file then it can understand it fine although obviously this isn't what we want to be doing.

<S_CODE_TOKEN>

Are we able to clean up the export code at all or is this an issue for the IDEs?",hailwood,2017-02-09 00:09:37
1537,2017-02-09 00:09:37,"Thanks for posting, @hailwood. Here's my understanding of what's happening here.

I think the reason they failing to resolve is because they are two different modules, and `Relay` spreads `RelayPublic`'s properties in using a spread operator (`...`).

In the compiled build, the spread gets transpiled into something that's likely opaque to them:

<S_CODE_TOKEN>

That `_extends3['default']` is effectively an `Object.assign` polyfill, and it's not surprising that the IDE doesn't have enough intelligence to see through it.

> Are we able to clean up the export code at all or is this an issue for the IDEs?

At this time, we're aggressively prioritizing shipping the new Relay core and APIs rather than working on the previous implementation (see code recently landed to the `experimental` branch), so it is doubtful that we'd take any action here. If we did, it would probably be a crude spelling out of imports like this:

<S_CODE_TOKEN>

Which would have the downside that it could fall out of date when `RelayPublic` updates.

I'm going to close this for now and suggest that we revisit it — if it is still a problem — only after the result of our work on the `experimental` branch has been shipped to `master`.

In the meantime, thanks for the question!",wincent,2017-02-09 00:09:37
1536,2017-02-07 22:58:05,"I have a form for creating ads. The form's mutation returns an Ad and an object the ad is connected to. I use a REQUIRED_CHILDREN config to get the ad back along with any errors that may have occurred. I also use a RANGE_ADD to add that ad to the object it has a connection to.

Here is the strange thing... If I load this form on it's own (like a page refresh) it works just fine. However... let's say I navigate to another page (using react-relay-router) and then come back to the form and try to use it I will get an error on my RANGE_ADD config telling me that it expected the ""ads"" field to be a connection. This same config works no problem otherwise.

Here is the error...
<S_CODE_TOKEN>

Here is the AdSave mutation for reference...

<S_CODE_TOKEN>",joshdavey,2017-02-08 02:41:22
1536,2017-02-07 23:48:15,"Update: both my Account node and Flow node have an ""ads"" connection. I re-named one of the connections to ""advertisements"" and it worked...  Can someone explain what's going on here? I'd like to keep my names consistent :)

Thanks!",joshdavey,2017-02-08 02:41:22
1536,2017-02-09 00:36:19,"Thanks for posting @joshdavey.

Glad to hear that you sorted it out, but I think you may have found a bug.

My quick analysis suggests that `validateConnection` ([defined here](https://github.com/facebook/relay/blob/a1337903578e5b982d51f06fd0d57e5d25ce9b0c/src/mutation/RelayMutationQuery.js#L684)) is failing an `invariant` because its caller `getConnectionAndValidate` ([defined here](https://github.com/facebook/relay/blob/a1337903578e5b982d51f06fd0d57e5d25ce9b0c/src/mutation/RelayMutationQuery.js#L703)) is getting hold of the wrong `ads` field (the one under `account`) because it is using `findDescendantFields` ([defined here](https://github.com/facebook/relay/blob/a1337903578e5b982d51f06fd0d57e5d25ce9b0c/src/mutation/RelayMutationQuery.js#L719)) to locate it, and that function returns the first found field, which is not necessarily the right one.

Right now we are aggressively focusing on shipping the new Relay core and APIs to the public (see our recent activity on the `experimental` branch), and that is basically a ground-up rewrite which is unlikely to manifest this bug, so we're unlikely to get to this ourselves. But if this issue is directly impacting you, perhaps the breadcrumbs I've shared above are enough to get you started on a PR with a regression test and fix?",wincent,2017-02-08 02:41:22
1536,2017-02-09 00:44:37,"On the other hand, the fix may be as simple as:

<S_CODE_TOKEN>

So I might just send a PR for that anyway.",wincent,2017-02-08 02:41:22
1535,2017-02-07 10:53:13,"Hi! I've been running in production for some time now and it's been slowly taking over larger parts of my site. Generally speaking I'm very pleased with it, although I'm looking forwards to some of the changes I've heard planned for Relay 2.

My application has certain regular access patterns to the API, and I'd like to be able to easily identify them so I can track metrics of different common access patterns independently. When changing Route, this is quite easy - you can name the query in the Route using `query MyQueryName {...}`, and the server can identify it. Mutations can be named in the same way. I'd really like to be able to set the query name for the query generated when I call a `setVariables`. A single page will have an initial load state, and maybe 5-10 different additional pieces of data loaded on demand by the user, changing variables and enabling different conditional parts of the query. At the moment I can't find an easy way to distinguish between those different cases.

I believe that an additional parameter could be added to `setVariables` to set the name, and the passed down to the environment/store layer and put into the resulting query, but I don't know enough about the internals of the store to know if this is feasible.

Feel free to tell me I've got the wrong approach here and I'm using relay wrong!",mjtamlyn,2017-02-07 14:56:49
1535,2017-02-07 14:56:49,"Thanks for the post, @mjtamlyn.

The new core uses totally static, vanilla GraphQL syntax, and `setVariables` use cases now require you to specify an explicit ""refetch"" query, which can be named:

<S_CODE_TOKEN>

So, this problem effectively goes away with no modifications to the code. I'm going to close this for now because we're entirely focused on shipping the new core and API rather than working on the old one.",wincent,2017-02-07 14:56:49
1535,2017-02-08 08:01:41,"Great, glad to know this case is covered in the new API, that was my main concern.",mjtamlyn,2017-02-07 14:56:49
1534,2017-02-07 07:19:27,"Is there a way to forceFetch everything in the relay store ?  

We are sending updates through subscriptions. But, if a user goes offline, they won't receive updates during that time. When they come back online, we want to able to forceFetch everything in the existing store in background so that all the data is upto date. Is there a way to do so?

Thank you! :)
",nikhildaga,2017-02-07 14:23:43
1534,2017-02-07 14:23:43,"Thanks for the question @nikhildaga. In the future, I'd recommend searching Stack Overflow for questions like this.

There is no way to force fetch everything in the store, but you can reset/clear the store by re-rendering with a new `RelayEnvironment`. See https://github.com/facebook/relay/issues/233 for details on how to do this. [Here](http://stackoverflow.com/questions/37152602/how-to-clear-empty-reset-a-relay-store) is a related Stack Overflow question.",wincent,2017-02-07 14:23:43
1533,2017-02-06 18:25:31,"The documentation on GraphQLMutation has just one example of an optimistic query and response, which is for FIELDS_CHANGE.  

I'm totally stuck and noticed others are too - I don't know the theory on how the optimistic query is supposed to be crafted, why it even exists when Relay already knows what I'm trying to query, how to craft it and the response for the other update types.

I think adoption of GraphQLMutation will be very limited without this info.  Can someone help out with some explanation and examples?  I don't think it'll take too long and it will be very high impact for those of us trying to be early adopters!",lukecwilliams,2017-02-09 00:18:10
1533,2017-02-08 08:25:01,"@lukecwilliams I agree that the whole mutation with Relay is very difficult to adopt.
I'm not an expert in Relay and I might be wrong about some of the stuffs, but here is my understanding from the Optimistic response:

Since Relay is caching everything on the client side to minimize the server calls, the optimistic queries is used to provide a better user experience to deliver the change to the user immediately without getting the response from the server. It means that you can provide what kind of info would user expects if the mutation was successful.  lets say you have a todo list and you want to modify the title, description or the status of the todo. Therefore you can specify the queryResponse to have these cached and showed to the user immediately:

<S_CODE_TOKEN>

You can also use relay.hasOptimisticUpdate to check if an update is in progress. for example you can have something like this to make the title red when the update is in progress and the response has not been checked with the server:

<S_CODE_TOKEN>


Lets say you want to add an item to your TODO list using RANGE_ADD:


<S_CODE_TOKEN>

Still same scenario, the user will see this item got added to the list (in Relay Cache) but it does not mean that it actually got added on the server side till the server side confirms it.

I hope these examples help you understand it better
",AWDGroup,2017-02-09 00:18:10
1533,2017-02-09 00:18:10,"Thanks very much for bringing this up @lukecwilliams, and sorry for any frustration that coming to grips with the mutation APIs has caused.

> I'm totally stuck and noticed others are too - I don't know the theory on how the optimistic query is supposed to be crafted, why it even exists when Relay already knows what I'm trying to query, how to craft it and the response for the other update types.

Relay knows the query but not the result because mutations are largely a black box: even a relatively structured mutation like a `RANGE_ADD`, for example, is a black box; we know that something is going to be appended but we don't know what. Only the server has the definitive answer, and the developer may be able to construct a description of it too, in the form of an optimistic payload.

> I think adoption of GraphQLMutation will be very limited without this info. Can someone help out with some explanation and examples? I don't think it'll take too long and it will be very high impact for those of us trying to be early adopters!

At the moment we are aggressively prioritizing documenting the new Relay core and APIs. If you're curious about this, feel free to check out our work on the `experimental` branch. We're not going to actively pursue documenting the existing APIs right now because we want to ruthlessly prioritize getting the new code out into people's hands as soon as possible (we would, however, welcome any PRs that seek to improve the existing docs). In the meantime, the [`RelayGraphQLMutation` tests](https://github.com/facebook/relay/blob/master/src/mutation/__tests__/RelayGraphQLMutation-test.js) include a number of useful examples, and they may be of some help.

Thanks once again for raising this issue, and we hope to deliver relief soon now with a higher standard of documentation rolling out with the new APIs in the near future.",wincent,2017-02-09 00:18:10
1532,2017-02-06 18:14:30,"I was working on an e-commerce relay+react-native application. But there are few products for which order status is confirmed after confirmation with the sellers. 

So the first time i load the app, the order history contains past orders. Now if I place the order with relay mutation, the order status for this is processing. Now once the seller confirms this item I change the order status to confirmed in the backend, but since it is cached in the relay it keeps on showing order status as processing only.

Now, my question here is how do I update the local relay store with the new order status? Can I updated this as soon as the status is changed in backend? I could not find anything related to this in relay docs.

**P.S:**

1.  If i close app and start again it works fine as relay query is called again, but I minimise the app and launch the app it shows cached data as expected.
2. The platform is **IOS**
3. Backend is based on graphene and I run background jobs to update the order status by calling the APIS provided by seller.",jinxac,2017-02-07 14:48:10
1532,2017-02-07 14:48:10,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs

In brief, however, the best tool for this situation is likely to use `forceFetch` ([top SO answer for ""force fetch"" search](https://stackoverflow.com/questions/37464509/react-relay-always-force-fetch-route-or-relaycontainer)).",wincent,2017-02-07 14:48:10
1531,2017-02-06 14:04:32,"I am using Relay.GraphQLMutation so that it is easier for me to migrate to Relay 2 later. However I don't understand why I have to create Relay.Environment instance for using this? Can't we subclass Relay.GraphQLMutation just like we were subclassing Relay.Mutation? 

Also I am having to use `environment.injectNetworkLayer(...)` which I didn't have to use earlier. I am using a create-react-app setup based on https://github.com/Valentin-Seehausen/create-react-app. My GraphQL server is running on localhost:4000/graphql while my frontend is running on localhost:3000. When I have to create environment myself for using GraphQLMutation, the proxy setting in package.json  is not working and I don't want to manually set the network layer since it has to be different for dev and prod environments.

Here's my code for creating the mutation:-

<S_CODE_TOKEN>
",nikhilag,2017-02-09 17:13:19
1531,2017-02-09 17:13:19,"Thanks for the question. For future reference posting to Stack Overflow is probably your best bet in order to get a timely response (you may even find a pre-existing question there with an answer); we try to focus the issue tracker on bugs and feature requests.

You generally don't want to create a new environment for this but rather use an existing one. For example, if you are invoking this mutation from a Relay component, you could get the current environment from `this.context.relay.environment` and pass that in. Note that in order to be able to access this context you'll need something like this in your component:

<S_CODE_TOKEN>

Even simpler, I think in most apps you can just rely on the default singleton instance of the environment, which is exposed as `Relay.Store`:

<S_CODE_TOKEN>

I'm going to close this now but please feel free to comment again if I've missed something.",wincent,2017-02-09 17:13:19
1530,2017-02-06 09:22:24,"I am trying to upload file on mutation. 

But if i define getFiles function in mutation 
my request payload turns to include `WebKitFormBoundary` and graphql server says `""Must provide query string.""`

I just added empty getFiles function
<S_CODE_TOKEN>

what am i missing

before adding getFiles request payload is 
<S_CODE_TOKEN>

after adding getFile function 
<S_CODE_TOKEN>",matart15,2017-02-07 03:17:59
1530,2017-02-07 03:17:59,"OK it seems i have to use multer.
closing",matart15,2017-02-07 03:17:59
1530,2017-02-14 00:44:52,Glad to hear you got it sorted out.,wincent,2017-02-07 03:17:59
1529,2017-02-06 09:21:35,"Here's the error I am getting on following the example in the GraphQLMutation documentation at https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html :-

`const environment = new Relay.Environment();`

> Uncaught TypeError: _relay2.default.Environment is not a constructor

My import statement in my react component for Relay is:-
`import Relay, {RelayGraphQLMutation, GraphQLMutatorConstants} from 'relay';`

What am I doing wrong?",nikhilag,2017-02-06 09:35:32
1529,2017-02-06 09:36:06,Please ignore this issue. My import statement had errors.,nikhilag,2017-02-06 09:35:32
1529,2017-02-07 14:13:40,Glad to hear you got it sorted out.,wincent,2017-02-06 09:35:32
1528,2017-02-05 00:24:13,"I'm working on a React Native application and I have the following mutation that should create a record and upload a picture.
I'm using GraphQLMutation.createWithFiles and passing a file as an argument, but unfortunately Relay does not post the file. As a result, my record gets created on the server but there is no file submitted to be stored.

<S_CODE_TOKEN>",AWDGroup,2017-02-09 00:20:19
1528,2017-02-05 23:20:10,@AWDGroup This was [fixed](https://github.com/facebook/relay/commit/81f8cf92d240cb1cd6fd7cc2263a51c58b2b5a19) but hasn't been released yet.,apalm,2017-02-09 00:20:19
1528,2017-02-06 07:29:51,"Thanks @apalm, I think GraphQLMutation.createWithFiles is not covered by the test cases and it should be added as well",AWDGroup,2017-02-09 00:20:19
1528,2017-02-06 23:57:00,"@AWDGroup: Thanks for the report.

> I think GraphQLMutation.createWithFiles is not covered by the test cases and it should be added as well

Some tests were added in https://github.com/facebook/relay/commit/6b87e2692fc6c74021b4aa7fbc3a712aaaedd141 — You're welcome to add more for that specific method, but I think the likelihood of somebody ever breaking the implementation is so vanishingly close to zero that I personally wouldn't bother with it:

<S_CODE_TOKEN>

On the subject of a release, I was trying to work towards that last week, but currently blocked on getting our open source CI suite green again (our internal CI is passing just fine). At the moment we have quite a few large changes in progress, and the sync set-up we have between GitHub, or native code and our www code, imposes some restrictions that we have to figure out how to work within before we can get everything green again. But we will release as soon as we can, although I can't provide a concrete date for it (too many unknowns).",wincent,2017-02-09 00:20:19
1528,2017-02-08 07:51:32,Thanks @wincent for the complete & clear explanation. ,AWDGroup,2017-02-09 00:20:19
1528,2017-02-09 00:20:19,@AWDGroup: You're welcome. Going to close this out in the meantime so as to unclutter the issue tracker.,wincent,2017-02-09 00:20:19
1527,2017-02-02 23:09:29,"Sneak preview of the kind of thing that is going to be necessary to unbreak the test suite.

Won't actually ship this yet (due to sync issues, I am going to have to move the plug-in) but just parking this here for now.",wincent,2017-02-08 23:34:58
1527,2017-02-08 23:34:58,Closing this before it gets too stale.,wincent,2017-02-08 23:34:58
1526,2017-01-31 18:52:19,"This was causing errors like this:

<S_CODE_TOKEN>

The configuration to fix it is three-fold:

1. We have to tell Flow to look in ""react-dom"".
2. We have to tell it *not* to look in ""react-dom/node-modules"" (because if it does it will freak out about duplicates).
3. We have to tell it that when we require ""ReactDOM"", we actually mean ""react-dom"", so we use a mapping.",wincent,2017-01-31 20:16:40
1526,2017-01-31 18:52:55,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4489196).",facebook-github-bot,2017-01-31 20:16:40
1525,2017-01-31 18:37:41,"This lives at ""../node_modules/fbjs/lib/base62.js"", not ""../node_modules/base62"".

Making this change stops the following from being output during `npm run
typecheck`:

    Skipping /Users/glh/code/relay/node_modules/base62: No such file or directory",wincent,2017-01-31 19:46:57
1525,2017-01-31 18:38:37,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4489066).",facebook-github-bot,2017-01-31 19:46:57
1524,2017-01-31 18:28:01,"Fixes various cosmetic lints (19 of them) with messages like:

    warning  Expected indentation of 10 spaces but found 12  indent

    warning  Line 123 exceeds the maximum line length of 120  max-len

    warning  A space is required after ','  comma-spacing

With this, we're lint-clean in the entire repo.",wincent,2017-01-31 20:16:40
1524,2017-01-31 18:28:34,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4488974).",facebook-github-bot,2017-01-31 20:16:40
1523,2017-01-31 18:21:40,Last call was removed in 3cb82fecae6601b8a9ceed6c13e.,wincent,2017-01-31 20:16:40
1523,2017-01-31 18:22:18,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4488927).",facebook-github-bot,2017-01-31 20:16:40
1522,2017-01-31 18:17:39,"Not sure when this broke, but `npm run lint` was bombing out with:

    ESLint couldn't find the plugin ""eslint-plugin-flowtype"".

So, add it, which fixes the error. Additionally, remove the ""eslint-plugin-flow-vars"" plug-in, which no longer seems to be necessary (removing it did not produce any new lint warnings).",wincent,2017-01-31 19:46:57
1522,2017-01-31 18:18:12,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4488899).",facebook-github-bot,2017-01-31 19:46:57
1521,2017-01-31 18:07:19,I just published v0.11.0 of the plugin. Now trying to get the CI green for the main package in preparation for cutting a release.,wincent,2017-01-31 19:46:57
1521,2017-01-31 18:08:52,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4488835).",facebook-github-bot,2017-01-31 19:46:57
1520,2017-01-31 18:05:47,"I have a `GraphQLMutation` that I'm passing `configs` to. The commit looks like:

<S_CODE_TOKEN>

I tracked the problem down to this line of code: 

https://github.com/facebook/relay/blob/7110c68f437391ad1ee54ab2c84fd8896a8662fb/src/traversal/writeRelayUpdatePayload.js#L418

where `null` is being intentionally set, and then telling me I'm wrong. It seems like it should be setting to `IGNORE` unless I'm missing something else.",kalley,
1519,2017-01-31 01:55:08,"This PR is a follow-up to https://github.com/facebook/relay/pull/1514. It adds a test to verify the fix made there.

Let me know if there's a more appropriate place to put the test, as I wasn't really sure.",apalm,2017-01-31 19:16:34
1519,2017-01-31 18:08:16,Awesome. Thanks for following up on this.,wincent,2017-01-31 19:16:34
1519,2017-01-31 18:08:33,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4488833).",facebook-github-bot,2017-01-31 19:16:34
1518,2017-01-31 01:46:32,"Includes version number bump, and also drops the unnecessary ""engines"" declaration that was added in 5e4c38b23d127 (I'd meant to back this out before landing, but ended up overlooking it with all the rebasing that I was doing).",wincent,2017-01-31 17:46:29
1518,2017-01-31 01:47:30,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4486444).",facebook-github-bot,2017-01-31 17:46:29
1517,2017-01-30 23:57:33,"This issue replaces #114, which was the initial RFC issue for how to deal with client state in Relay. Since then, we have undertaken a big rewrite, leading to a new core that has low-level support for client-only fields. The purpose of this issue, then, is to track the exposure of these low-level features in the higher-level API. At the time of writing, some pieces of the new core and API have started making their way onto the `master` branch, with more to come in the following weeks/months.",wincent,
1516,2017-01-30 23:30:55,,wincent,2017-01-31 00:46:35
1516,2017-01-30 23:31:21,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4485243).",facebook-github-bot,2017-01-31 00:46:35
1515,2017-01-30 23:11:25,,wincent,2017-01-30 23:33:37
1515,2017-01-30 23:12:08,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4485070).",facebook-github-bot,2017-01-30 23:33:37
1515,2017-01-30 23:47:31,"Note: I didn't mean to actually close this, just to delete the branch. The commit is landing internally and will sync back out to GitHub soon™.",wincent,2017-01-30 23:33:37
1514,2017-01-30 16:44:13,"`this._files` was not being set in [`PendingGraphQLTransaction`'s constructor](https://github.com/facebook/relay/blob/5e4c38b23d1278c0fee02846995275f1e6ca5456/src/mutation/RelayGraphQLMutation.js#L256), which meant `files` was always `undefined` in [_sendMutation](https://github.com/facebook/relay/blob/5e4c38b23d1278c0fee02846995275f1e6ca5456/src/network-layer/default/RelayDefaultNetworkLayer.js#L94).

I believe this fixes https://github.com/facebook/relay/issues/1507.",apalm,2017-01-30 21:01:31
1514,2017-01-30 17:56:53,"Great catch. Thanks for this.

Ideally this would come with a regression test but I think this is worth merging straight away.",wincent,2017-01-30 21:01:31
1514,2017-01-30 17:57:22,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4482414).",facebook-github-bot,2017-01-30 21:01:31
1514,2017-01-30 21:59:16,Thanks for fixing this!,nicholas-l,2017-01-30 21:01:31
1513,2017-01-29 04:56:41,Slow progress to get open source less broken.,kassens,2017-01-30 19:31:30
1513,2017-01-29 04:58:12,"@kassens has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4480223).",facebook-github-bot,2017-01-30 19:31:30
1512,2017-01-28 02:05:10," I'm about 3 weeks into Relay & trying to learn the `GraphQLMutation` API (in lieu of the 'legacy' API). I'm hitting some inconsistencies that I can't quite figure out.

I'm using a graphql-aaS (so my gql server should be up-to-spec). The relevant parts of my schema are roughly something roughly like this:

<S_CODE_TOKEN>`

In my app, I render each `Listing` with its `ListingTags` and `ListingRatings`, and I render several `User` and each of their `ListingTags`.

The first mutation I wrote added a separate type, `ListingRating`, a `Listing`.  This mutation works fine, and local data updates right away:

<S_CODE_TOKEN>`

where `ListingRating.getFragment('ratings')` returns:

<S_CODE_TOKEN>`

This appears to work perfectly fine, despite not setting `configs` (which I like, as I've found `configs` pretty difficult to grok).

However, the second mutation I wrote, which connects a `ListingTag` to a `User` (via a `many:many` connection `Type`), fails to update local data:

<S_CODE_TOKEN>`
where `TagPreview.getFragment('currentTags')` returns:

<S_CODE_TOKEN>`

This mutation successfully updates my database, and according to `relay dev tools` panel, the response contains all the data I want. 

**The part I'm not fully understanding is**:  in what way are these mutations different such that one works and the other doesn't?  

Is it because the `type` of the returned `payload` doesn't implement the `Node` interface? My assumption was that when `Relay` saw `node`s nested in the response `payload`, it'd update the local state as it did with the first mutation.  

Ultimately though, this is the only difference I can reason out, & I'm uncertain how to address it.",brandonmp,
1511,2017-01-27 21:28:41,"In conjunction with:

https://github.com/facebook/relay/pull/1509

Supersedes:

https://github.com/facebook/relay/pull/1510

This fixes the remaining two Flow errors in the plug-in, making it clean again.

Closes: https://github.com/facebook/relay/issues/1508",wincent,2017-01-30 19:16:34
1511,2017-01-27 21:30:58,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4476956).",facebook-github-bot,2017-01-30 19:16:34
1511,2017-01-28 00:59:01,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4476956).",facebook-github-bot,2017-01-30 19:16:34
1510,2017-01-27 21:24:12,"In conjunction with:

https://github.com/facebook/relay/pull/1509

This fixes the remaining two Flow errors in the plug-in, making it clean again.

Closes: https://github.com/facebook/relay/issues/1508",wincent,2017-01-27 21:29:06
1510,2017-01-27 21:29:05,Superseded by #1511 (rebased).,wincent,2017-01-27 21:29:06
1509,2017-01-27 21:01:10,"Mitigates: #1508

Flow is complaining about these `require('util')` calls in the plug-in, reporting errors like:

<S_CODE_TOKEN>

Confirmed with the Flow team that this is a bug in the resolver implementation. This page indicates that it is supposed to look for core modules before searching `node_modules`:

https://nodejs.org/api/modules.html#modules_all_together

As a workaround for now, let's just suppress the errors.",wincent,2017-01-28 01:46:33
1509,2017-01-27 21:01:46,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4476712).",facebook-github-bot,2017-01-28 01:46:33
1509,2017-01-28 00:34:56,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4476712).",facebook-github-bot,2017-01-28 01:46:33
1508,2017-01-27 02:01:44,"For some, reason `npm run typecheck` in [scripts/babel-relay-plugin/](https://github.com/facebook/relay/tree/master/scripts/babel-relay-plugin) is bombing out, failing to recognize that `require('util')` refers to a built-in Node.js library and we are running in Node.js. The errors look like this:

<S_CODE_TOKEN>

and it seems I can't force Flow into grokking the type of the `util` module with a declarations file with contents taken [from Flow](https://github.com/facebook/flow/blob/master/lib/node.js) (perhaps I am doing it wrong):

<S_CODE_TOKEN>

Not sure when this started, but I went back to the previous version of Flow that we were using (v0.36.0) and got the same result.

In the absence of a config option to tell Flow that we're running in Node.js, I tried this in the `package.json`, but that doesn't fix the error either:

<S_CODE_TOKEN>

For now the only workaround I've found is liberal use of `$FlowFixMe`:

<S_CODE_TOKEN>

Going to ask somebody who knows about Flow about this, so sticking this up in an issue to have something to reference.",wincent,2017-01-30 18:07:07
1508,2017-01-27 04:13:59,"Try to hack it in `.flowconfig` via [`[options]`](https://flowtype.org/docs/advanced-configuration.html#options):
<S_CODE_TOKEN>
Some time ago in such way I connected to `graphql` for providing type definitions with regular import/require in my code. Now graphql package contains `.flow` files, and  I removed this linking (but in the past, it helps me very well).",nodkz,2017-01-30 18:07:07
1508,2017-01-28 00:37:45,"Alas @nodkz, that doesn't work, but I have an alternative workaround that does. The Flow team at FB is aware of the bug in the module resolution so it will be fixed, but for now we have a workaround (see my PR).",wincent,2017-01-30 18:07:07
1508,2017-01-30 18:07:07,I believe this is all good now. Closing.,wincent,2017-01-30 18:07:07
1507,2017-01-25 22:12:20,"Hi,
I am unable to send files using GraphQLMutation using the below code. I am using GraphQLMutation both for future compatibility and I hit the #782 bug.

<S_CODE_TOKEN>

It causes a POST with content type application/json, not with a multipart. I have checked that mutation._files === files and it does but I cannot follow where it disappears.

",nicholas-l,2017-01-30 21:01:31
1506,2017-01-25 10:11:35,"This updates the graphql dependency to 0.9.0.

I haven't run the tests yet, if they fail I will check. But the changelog looked rather non-breaking.
",danez,2017-01-25 17:39:33
1506,2017-01-25 17:34:52,"Thanks for the PR @danez. I actually already have a change for this internally, but I'm not going to push it out without first trying to get the CI in order (tests are currently failing).",wincent,2017-01-25 17:39:33
1506,2017-01-25 17:35:44,"(Just to be clear, I mean the CI tests are currently failing even on master, prior to this update.)",wincent,2017-01-25 17:39:33
1506,2017-01-25 17:39:33,Okay then I close this. Thanks for all the great work @wincent ,danez,2017-01-25 17:39:33
1505,2017-01-24 23:16:46,"This corrects the mismatch we had here between the version of Flow we had declared in the Relay package.json (0.38.0), the plug-in package.json (0.36.0), and the `.flowconfig` on disk (0.37.0).

Now they all specify 0.38.0.",wincent,2017-01-27 01:02:43
1505,2017-01-24 23:18:02,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4458933).",facebook-github-bot,2017-01-27 01:02:43
1504,2017-01-18 04:41:01,"Hi, I've recently updated my React Native app to the newest RN version(0.40.0) as well as Relay from 0.9.3 to 0.10.0,
and Relay seems to be giving me the following error since updating.

<S_CODE_TOKEN>

The directories, babel-relay-plugin script, GraphQL implementation, etc. are exactly the same as before.

Relay version is: `v0.10.0`.
Now I do need to point out that I am using a [fork of Relay](https://github.com/alloy/relay) which simply replaces `id` with `__id`.

I can recreate with the code below:

<S_CODE_TOKEN>

My BabelRelayPlugin.js looks like this:
<S_CODE_TOKEN>

I have confirmed that the schema is fetched properly.",Naoto-Ida,2017-01-18 05:40:26
1504,2017-01-18 05:40:26,"So I did a bit of digging, but not sure where to go from here.
I understand that code like [this](http://stackoverflow.com/q/11616630/4776002) can trigger the 'Converting circular structure to JSON' error.
So the contents of `node` that is being passed to `printRelayOSSQuery.js:33`.

I reverted back to `v0.9.3` of the forked one, and now it's back to normal.
I'm starting to think this might be an issue with the fork, closing now.
Will probably consult @alloy on this. The fork doesn't have an issues tab, so hopefully I can bring the conversation here.
",Naoto-Ida,2017-01-18 05:40:26
1504,2017-01-18 17:05:18,"@Naoto-Ida Oh, I have not actually updated to 0.10 in our app yet, so haven’t verified this yet. In the meantime, is there any way for you to confirm if everything works ok if you switch to the canonical version?",alloy,2017-01-18 05:40:26
1504,2017-01-19 09:32:40,@alloy Do you mean canonical as in the main project?,Naoto-Ida,2017-01-18 05:40:26
1504,2017-01-19 16:13:03,"@Naoto-Ida Yeah that’s what I meant, but for some reason I thought the error was occurring in the babel plugin, but now I see I misremembered and it occurs at runtime, which is probably going to be hard to try out as you’d have to change the actual responses coming from your server.

I’ll first take some time to update our main app and see if I can reproduce it there and report back to you.",alloy,2017-01-18 05:40:26
1504,2017-01-20 03:07:43,"@alloy Thank you so much! I wish I could help out a bit more, as I've only been playing with Relay for the past month or so...",Naoto-Ida,2017-01-18 05:40:26
1503,2017-01-17 23:20:47,"Fixes #1494 

Creates methods `commitUpdate` and `applyUpdate` on RelayContainer, which always delegate to *the current* RelayEnvironment (from `this.context.relay`), and passes these new functions to the underlying component as `props.relay.commitUpdate` and `props.relay.applyUpdate`, instead of direct references to the `RelayEnvironment` functions.

I also have this alternative solution ready, in case you prefer it:
https://github.com/facebook/relay/compare/master...colllin:relay-container-environment-sync
That solution just captures changes to the environment within `componentWillReceiveProps`, and updates `this.state.relayProp.commitUpdate` and `this.state.relayProp.applyUpdate`, which in turn update those props on the underlying component.

I also added tests, which, before my changes, failed with this output:
<S_CODE_TOKEN>",colllin,
1502,2017-01-13 19:37:40,Fixes #1482,alloy,2017-01-18 00:31:28
1502,2017-01-14 05:13:59,@facebook-github-bot shipit,josephsavona,2017-01-18 00:31:28
1502,2017-01-14 05:14:56,"@alloy so good, thank you for taking the time to figure this out! 

Cc @kassens",josephsavona,2017-01-18 00:31:28
1502,2017-01-14 13:41:24,My pleasure 👍,alloy,2017-01-18 00:31:28
1502,2017-01-14 16:08:54,"Don’t think any of these build failures are a result of my change. It looks like some (most/all?) are caused by incorrect dependencies? Maybe it’s an idea to lock dependencies to known working versions, e.g. a npm/yarn lockfile. I can take a stab at that in a separate PR, if you’d like?",alloy,2017-01-18 00:31:28
1502,2017-01-16 16:39:25,"This fixed the build for me, but I also needed to add this 4th mapping:

    'babel-runtime/core-js/map': 'babel-runtime/core-js/map',
",colllin,2017-01-18 00:31:28
1502,2017-01-16 16:40:32,"@colllin Oh, what task was failing?",alloy,2017-01-18 00:31:28
1502,2017-01-16 16:41:45,The postinstall build was failing.  I think it was `npm run build` but I'm not 100% since I didn't run it manually.,colllin,2017-01-18 00:31:28
1502,2017-01-16 16:46:16,"@colllin Ah I see, it’s a new requirement since this change that got added after my PR eab5a45b8a648564037e36cdb668abf9154b9ef3. Will add it 👍 ",alloy,2017-01-18 00:31:28
1502,2017-01-16 16:48:43,Done.,alloy,2017-01-18 00:31:28
1502,2017-01-17 18:20:05,"@kassens has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4423631).",facebook-github-bot,2017-01-18 00:31:28
1502,2017-01-17 18:23:08,Thanks for fixing this!,kassens,2017-01-18 00:31:28
1501,2017-01-13 18:43:59,"I was using the new Relay.GraphQLMutation and came to notice that it doesn't output any log.
Hence errors such as an invalid config would get swallowed.

Example :
<S_CODE_TOKEN>
fails silently with `Relay.GraphQLMutation` while with the old API we could see the error by expanding :
<img width=""284"" alt=""screen shot 2017-01-13 at 10 42 28 am"" src=""https://cloud.githubusercontent.com/assets/1869/21941339/2c70fdbc-d97d-11e6-85bb-e440090bc0ea.png"">

",chollier,
1501,2017-01-13 19:33:23,hmm interesting. cc @yuzhi ,josephsavona,
1501,2017-01-18 21:34:27,mhm It might just not be hooked up with Relay.GraphQLMutation. I can take a look when I have free cycles.,yuzhi,
1500,2017-01-12 19:11:26,"<S_CODE_TOKEN>

Schema:

<S_CODE_TOKEN>

Using this relay container with babel-relay-plugin and webpack emits `-- Relay Transform Error -- workbench.tsx --` and this stack trace at runtime:
<S_CODE_TOKEN>

if I remove the `@include(if: $isSymbolUrl)` everything works fine.",felixfbecker,2017-01-12 22:12:49
1500,2017-01-12 22:12:49,Error was on our side.,felixfbecker,2017-01-12 22:12:49
1499,2017-01-12 18:34:03,"According to https://github.com/facebook/relay/blob/ad5efb124cf455a42c0adb10fb1e977fe051811e/src/tools/RelayTypes.js#L157-L163 parentId seems to be optional.

The current documentation seems to not specify it : https://facebook.github.io/relay/docs/guides-mutations.html#node-delete",vnctaing,2017-01-19 19:01:28
1499,2017-01-19 18:29:59,You're right that it is optional. Thanks for the PR!,wincent,2017-01-19 19:01:28
1498,2017-01-12 08:28:52,Replaces #1427,schickling,2017-01-13 04:46:35
1498,2017-01-12 08:56:18,@facebook-github-bot import,josephsavona,2017-01-13 04:46:35
1498,2017-01-12 08:57:22,"@josephsavona has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4409111).",facebook-github-bot,2017-01-13 04:46:35
1497,2017-01-12 00:52:17,"If I update relay store using
<S_CODE_TOKEN>
will it update the relevant relay containers (where the data has changed) automatically?


Thank you!",nikhildaga,2017-01-15 00:23:44
1497,2017-01-12 05:57:08,"Yes. Note that the shape of the response is expected to match what the server would have returned for that query - including having fields be aliased using the aliases Relay generates. 

What is your use case?",josephsavona,2017-01-15 00:23:44
1497,2017-01-12 14:48:57,"Thank you Joseph!

The use case is Subscriptions. 

The current recommended library for subscriptions removes subscriptions on component unmount and therefore, requires forceFetch to be true, which is very inefficient.
https://github.com/edvinerikson/relay-subscriptions/pull/19/files

If we can subscribe to different types of updates and update store from a single place and be assured that the containers will automatically update, it will a big thing!

",nikhildaga,2017-01-15 00:23:44
1497,2017-01-15 00:23:22,"> If we can subscribe to different types of updates and update store from a single place and be assured that the containers will automatically update, it will a big thing!

Yup, that's how Relay works. Queries, mutations, and subscriptions all publish new data into the store. Whenever a publish happens, all observers of the store are notified. Containers conceptually observe the results of their fragments, so they are re-rendered whenever data changes in the store that affects their result (regardless of the source of that data). 

> The current recommended library for subscriptions removes subscriptions on component unmount and therefore, requires forceFetch to be true, which is very inefficient.

This seems tangential to the above question. How to combine diffing, force-fetching, and subscriptions is application specific. Ideally any subscriptions API would allow a product to choose between several options. An initial forceFetch followed by holding a subscription until unmount seems like a reasonable approach, since it keeps the number of subscriptions proportional to the data being actively viewed. On the other hand, if the maximum number of subscriptions is known to not grow too large, it maybe be desirable to just subscribe to all updates you may ever care about, and then not use forceFetch. @edvinerikson, @taion - does `relay-subscriptions` support both approaches?",josephsavona,2017-01-15 00:23:44
1497,2017-01-15 00:23:42,"Closing since the initial question is answered, but feel free to continue the discussion!",josephsavona,2017-01-15 00:23:44
1497,2017-01-16 14:57:00,"It is definitely possible to skip the React API and use the `subscribe` method directly in relay-subscriptions. It's basically `relayEnvironment.subscribe(new Subscription())`.

Another approach which probably is better is to use the React API and mount a component that never unmounts which holds all the subscriptions.

The example app in the repo is built like @josephsavona mentioned, it only listen on data that is currently visible on the page however it doesn't have to be like that. it's up to the developer to make that decision. ",edvinerikson,2017-01-15 00:23:44
1497,2017-01-16 16:38:13,"Thanks @edvinerikson for the awesome relay-subscriptions library.   I am using both the subscribe api and containers api.

I have forked and made some modifications to relay-subscriptions createContainer :  https://github.com/reachifyio/relay-subscriptions/blob/master/src/createContainer.js#L53-L97
It isn't perfect but works for our use case.


<S_CODE_TOKEN>

I thought about it too but the problem is that all the data which should be subscribed too isn't known at one place. Its scattered among different relay containers.


",nikhildaga,2017-01-15 00:23:44
1497,2017-01-17 08:03:26,"> I thought about it too but the problem is that all the data which should be subscribed too isn't known at one place. Its scattered among different relay containers.

is it variables that isn't know or is it the fragments? You can share the fragments in the subscription.

Looking at your changes it seems they introduce a memory-leak since every time you mount the component it will create a new subscription but you will never remove it once the component unmounts. If you don't have a smart network layer which can de-dupe them you will probably face memory issues after a while.

I still think you can solve this with the current container provided by relay-subscriptions without the need of forking. You just have to be smart about where you render the component. e.g. in the example we initiate the subscription in each `TodoItem` but instead you could move the subscription to the parent component. Doing that in the example app will remove the need for `forceFetch`",edvinerikson,2017-01-15 00:23:44
1497,2017-01-17 08:38:59,"@edvinerikson :  Its the variables that aren't known.. Yes, we are removing duplicate requests in network layer. 

But, I agree with you, that ultimately there should be a single place from where we subscribe only once and update the store.  As Joseph mentioned, its possible, will give it a try.",nikhildaga,2017-01-15 00:23:44
1496,2017-01-11 20:54:28,"I am interested in documenting best practice around the fetching of single objects in a typical search -> select scenario.

Assuming a query: `{ viewer { account { users(name: ""..."") } } }`

The (browser) user searches and selects a user, adding it to the URL. This is repeated multiple times. Now we have a URL with n user UIDs.

`/path/to/app?userId=abc123&userId=456def...`

The UIDs are merged into the relay params, using react-router-relay's prepareParams function, making them available to further down the component chain.

`{userId=['abc123', '456def']}`

The UIDs are mapped over, producing n queries or fragments using the node interface or a field to fetch the specific user.

<S_CODE_TOKEN>
or
<S_CODE_TOKEN>

There are number of open questions in this scenario: 

1. Does one use the node field or the, in this case, Account field to fetch the individual selected users? 
2. If it is the node field, does one need a separate query or can one somehow use fragments? 
3. If a separate query is necessary, how does one avoid query name collisions? 
4. Is using a separate Renderer, deferring the query, a best practice?
5. Are there specific caching tradeoffs to be aware of?

Since this is such a common pattern, it would be great to have it clarified and documented.
",jamiehodge,
1496,2017-01-11 21:25:02,"# Case 1: List -> Detail View (simplified version of the above)

The use-case is an app with a list view, and clicking an item in the list navigates to a detail view for that item. A common approach is for the list view to fetch its items via a connection field, where each edge has a `node` whose type implements the `Node` interface (i.e. each node has a globally unique `id` and can be refetched with `query { node(id: $id) }`). The detail view would then use a `node(id: ...)` query to fetch more information about the selected node.

# Case 2: List -> Multi-item Detail View (OP)

This is similar to the above, except that the user selects multiple items such that there are a list of ids to fetch on the detail view. The canonical approach is to use a `nodes(ids: [id1, id2, ...idn])` query for the detail view to fetch all the information for all of the items in a single query. 

The `nodes` field should accept a single argument `ids: [ID!]!`. It should return one result per input id, in an order matching the input arguments. For ids that do not exist or cannot be fetched, it should return null in order to ensure the ordering requirement.

--

@jamiehodge I think this use-case is probably best addressed via a `nodes` query on the second screen, since it avoids needing multiple renderers.",josephsavona,
1496,2017-01-11 21:32:39,"This is very helpful. Thank you.

Given Case 2. If the view is a combo box, where the multi-item detail view is a sibling of the list view, what does the fragment look like and does one need a new Renderer to ""break out"" of the Account type and query the top-level nodes field?",jamiehodge,
1496,2017-01-11 21:36:30,Is relay's cache aware of the overlaps between the node(s) in the account users connection and nodes being fetched via `nodes`? i.e. does it look at the individual items with plural queries?,jamiehodge,
1496,2017-01-11 21:37:51,"More generally, I think it would be a large win for Relay if these and other common patterns were included as code examples in the documentation.",jamiehodge,
1496,2017-01-11 21:41:05,"Thanks for the question and answers.

@josephsavona where does the `nodes` interface come from? I can't find it in the docs: https://facebook.github.io/relay/docs/graphql-relay-specification.html",hkjorgensen,
1496,2017-01-11 22:07:41,">  If the view is a combo box, where the multi-item detail view is a sibling of the list view, what does the fragment look like and does one need a new Renderer to ""break out"" of the Account type and query the top-level nodes field?

@jamiehodge Whether the multi-item detail view is a separate screen or sibling view (e.g. a sidebar in a wider-screen design), it would typically be a separate Renderer. There is nothing special about the fragments here: it would be a `nodes` query, and the root fragment would be `fragment on <SomeType> @relay(plural: true) { ... }` since it expects an array of results.",josephsavona,
1496,2017-01-11 22:09:06,"@hkjorgensen The `nodes` field isn't documented (yet) but is stable, we should add it to the docs (PRs welcome).",josephsavona,
1496,2017-01-11 22:10:40,@hkjorgensen here's an example of a `nodes` query and the expected server response: https://github.com/facebook/relay/blob/e524c7e91339ba49ef1c528b58d6353388423872/src/interface/__tests__/RelayOSSNodeInterface-test.js#L172-L188,josephsavona,
1496,2017-01-12 01:23:32,"> The nodes field isn't documented (yet) but is stable

@josephsavona will current relay try to use this? I.e., if I have a graphql server that supports `node` but not `nodes`, will this potentially break a relay client?",jsdnxx,
1496,2017-01-12 02:28:12,"Relay never creates `nodes` queries, but it supports them if you use them. ",josephsavona,
1496,2017-01-12 10:24:15,"I think good next steps would be to:
- [ ] Add a nodesField to the node helper in graphql-relay-js
- [ ] Add a page or two of documentation outlining these two solutions

I'll see if I can take the former.",jamiehodge,
1495,2017-01-11 17:35:07,"Hey,

I have a use case where I need to see if there's an additional page in a connection without actually following any edges. When I ask for `edges` in addition to `pageInfo`, I get `pageInfo` back as expected, but when I drop `edges`, `pageInfo` comes back undefined in the component's props, without any errors or warnings.

This works as expected:

<S_CODE_TOKEN>

But this doesn't (all I do is drop `edges` from the connection):

<S_CODE_TOKEN>

Let me know if anything needs clarification--thanks!",jaredmcdonald,2017-01-30 20:43:10
1495,2017-01-15 00:26:04,This sounds like a bug in the dynamic core. The simplest workaround for now is to fetch `edges.cursor`. ,josephsavona,2017-01-30 20:43:10
1495,2017-01-30 20:43:10,"Given that there is a workaround and this bug explicitly applies to the legacy API, I am going to mark this as ""wontfix"". We want to aggressively prioritize work on the new core and help people move to it as soon as possible. We do appreciate the bug report, however. Thankyou @jaredmcdonald!",wincent,2017-01-30 20:43:10
1495,2017-01-30 20:44:11,"Having said that, we wouldn't reject a PR with a fix; it's merely that we are unlikely to work on one ourselves.",wincent,2017-01-30 20:43:10
1494,2017-01-11 00:32:10,"After reading #233, I implemented ""resetting the store"" in my app like this:

    export const initApp = (token = '') => {
      const environment = new Relay.Environment()
      environment.injectNetworkLayer(new Relay.DefaultNetworkLayer('/graphql'))

      const queryConfig = new AppQueryConfig({ token })

      ReactDOM.render(
        <Relay.Renderer Container={AppContainer} queryConfig={queryConfig} environment={environment} />,
        document.getElementById('root')
      )
    }

But I've been having a problem with mutations after the store is reset.

My theory is that for containers that have been rendered at least once already, `this.props.relay.commitUpdate` doesn't get updated to reference the new environment's `commitUpdate` function. It seems that `this.state.relayProp.commitUpdate` in RelayContainer is set when the container is first rendered, and isn't updated when the environment changes. I think this could be causing issues in my `RANGE_ADD` mutations.

I've found 3 ways to make my issues disappear:
1. Forcing react to render the entire app again, using e.g. `ReactDOM.unmountComponentAtNode(document.getElementById('root'))`,
2. Creating a new `AppContainer` (i.e. calling `Relay.createContainer()` again) when updating the environment, and
3. Modifying the `Relay.Container` code

This change to `RelayContainer.prototype._initialize` fixes the issue for me, but I definitely don't understand the library enough to have any idea on whether it is a good or appropriate change:

	relayProp: this.state.relayProp.route === context.route && require('fbjs/lib/shallowEqual')(this.state.relayProp.variables, nextVariables) ? this.state.relayProp : (0, _extends3['default'])({}, this.state.relayProp, {
      route: context.route,
      variables: nextVariables,
      commitUpdate: context.relay.commitUpdate,
      applyUpdate: context.relay.applyUpdate
    })

(Please let me know if I shouldn't even be using the library in this way.)",joaquimds,
1494,2017-01-16 04:20:04,"It looks like you might have found a bug.

I believe `this.props.relay.commitUpdate` and `this.props.relay.applyUpdate` are actually just references to those functions from your `Relay.Environment`.  If I'm reading this right, it looks like `RelayContainer` only sets those references in the constructor, and nowhere else, which means that if its `this.context.relay.environment` is updated, your `this.props.relay.commitUpdate` reference will be outdated.

Looking here: https://github.com/facebook/relay/blob/46a2f876c24dc1a9534d25ab1ef70e5a76ea3c78/src/container/RelayContainer.js#L158

If this is the problem, I would probably fix it with something like:
<S_CODE_TOKEN>",colllin,
1494,2017-01-16 07:40:48,"Yeah this sounds like a bug. @colllin your proposed fix sounds right, other than adding a conditional check to only reset `state.relayProp` if the store actually changed. We'd be happy to accept a PR along those lines! :-)",josephsavona,
1494,2017-01-16 19:30:38,"The componentWillReceiveProps solution felt a little messy, but this is where I ended up:
https://github.com/facebook/relay/compare/master...colllin:relay-container-environment-sync

Or... here's an alternative approach, which defines applyUpdate and commitUpdate functions on RelayContainer, which always delegate to the current underlying RelayEnvironment:
https://github.com/facebook/relay/compare/master...colllin:relay-container-environment-passthrough

The second approach feels a little cleaner to me, but has the disadvantage of re-specifying the applyUpdate and commitUpdate interface — I would have used `Function.prototype.apply` to avoid re-specifying the function interface, but didn't see any uses of `Function.prototype.apply` or the `arguments` keyword in this repo, so I didn't want to break that trend.",colllin,
1494,2017-01-16 19:30:54,^^^ Do you have a preference about which PR I submit?,colllin,
1494,2017-01-16 19:45:13,"Thanks for checking out my issue guys :-)

Updating `componentWillReceiveProps` makes sense to me – just a thought that `_initialize` seems to be the only place where `relayProp` is modified (outside of the constructor) so it might be good to keep all the modifications in this one place. That said, it doesn't get the right parameters to check if the environment has changed. I'll leave it to you!",joaquimds,
1494,2017-01-16 19:55:56,"I considered updating `_initialize` instead of `componentWillReceiveProps` (as you show in your original message), but ~as you mention, it doesn't get the right parameters, and~ its logic seems to be focused on ""variables"", so it didn't feel ""right"" to add it there. But I'm doing a lot of interpretation here.  If `_initialize` is the right place for it, I can move it.

Edit: I think it actually has enough data to check if the environment has changed (`this.state.relayProp.commitUpdate === context.relay.environment.commitUpdate`), but that wasn't the point.",colllin,
1493,2017-01-09 10:13:01,"This may very well be an userland issue, but in any case it's not clear to me as per the documentation how to reset all currently set variables to their `initialVariables`, for example I have in a form submit handler something like this:

<S_CODE_TOKEN>

And when `values` is `{}`, `props.relay.variables` don't seem to change. Is there an easy way to reset all variables?.

Thanks",alfonsoperez,2017-01-23 09:13:17
1493,2017-01-11 15:59:27,"`setVariables` expects only the variables you want to be changed, so in this case you will need to pass it an object containing all of your existing variables in `this.props.relay.variables` set to what their initial state should be (e.g. null or undefined for a string, false for boolean, `{}` for objects and `[]` for arrays). 

To avoid this, I would suggest refactoring to put all of these variables that need resetting inside of its own object. That way you can reset it as one variable instead of several, and you have more flexibility when adding variables later. ",amkoehler,2017-01-23 09:13:17
1493,2017-01-23 09:13:17,Thanks for the clarification.,alfonsoperez,2017-01-23 09:13:17
1492,2017-01-05 22:41:40,"In React, Is there a way to use `defaultProps` to guard against `null` values passed down from `Relay.createContainer()` (ie, `nulls` originating from the `gql` query)?

AFAIK `defaultProps` only fires when an `undefined` is passed, so I was thinking of somehow trying to shortstop props b/t the `container` and the `component`, but it isn't immediately obvious to me if that's the right path here.",brandonmp,2017-01-31 16:29:31
1492,2017-01-31 16:29:31,"Thanks for your question! We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track bugs and feature requests, so I am going to suggest that you post this on a purpose-built Q&A forum like Stack Overflow. You could use the tag #relayjs and/or #reactjs? If you do that, please post a link to your Stack Overflow question here, to so that we don't lose track of it.

Briefly, however, I don't  think there's any non-hacky way to do this. In the new Relay core and APIs which are rolling out to `master`, we have schema-directed Flow type generation that you'll be able to use to ensure your components are adequately dealing with potentially `null` properties in a type-safe manner, but it will still be up to you to write the code — or come up with an abstraction — that allows you to set up default values conveniently. Another option to consider is making the types non-nullable and having the server be responsible for returning defaults, but whether or not that makes sense probably depends on your application domain.",wincent,2017-01-31 16:29:31
1491,2017-01-03 16:12:24,"I have a relation set up like this:

<S_CODE_TOKEN>`
Where applications have one requisition which can have many fields, each of which have many answers.

I have the following fragments setup:

<S_CODE_TOKEN>`

This produces a query like:

<S_CODE_TOKEN>`

Which produces a response like:

<S_CODE_TOKEN>`

When the RequisitionDetails component renders for each Application, the `fields` prop contains the fields from the last application in the plural applications list. This means every RequisitionDetails has a Primary Location of 'Cork, Cork Ireland - Europe/Middle East/Africa'. Looking at the response, they should all have different Primary Locations.",noahprince22,2017-01-05 22:06:02
1491,2017-01-05 17:31:26,"Hmm. At first glance everything in the queries seems reasonable - I would double-check the render logic. For example if you're manipulating the results of any props passed from Relay there could be a bug in that logic, or perhaps an incorrect `key` is being used?",josephsavona,2017-01-05 22:06:02
1491,2017-01-05 19:47:38,"The issue doesn't seem to be with plural. I combined the entire query into one component. 

See https://gist.github.com/noahprince22/49931fc0d6edc6d2af168f1e4ba1a150

One of the files is what I'm getting as a result of the query from inside my component. Another is the query. Another is the actual query response from the server. You can see that the server response does not match up to what's being fed to my component",noahprince22,2017-01-05 22:06:02
1491,2017-01-05 22:06:02,"https://facebook.github.io/relay/graphql/objectidentification.htm

Object should be uniquely identified by the id field. In this case, the field's answers depend on the requisition id, so I solved the problem by compounding the field id with the requisition id",noahprince22,2017-01-05 22:06:02
1491,2017-01-05 22:39:28,@noahprince22 ah yeah - the cache depends on unique `id`s so that would explain it. thanks for following up!,josephsavona,2017-01-05 22:06:02
1490,2017-01-02 20:43:21,"Hi, 

Is there any difference between Relay.Store.commitUpdate and this.props.relay.commitUpdate ? Which one should be preffered and why? 
What when environment={Relay.Store} ? 

Thanks.",nikhildaga,2017-01-03 00:20:42
1490,2017-01-03 00:20:42,"The version on props.relay is a convenience that uses whatever environment the container was rendered in, and should generally be preferred in case you decide t create different environment instances at some point. Note that Relay.Store is just a default instance of RelayEnvironment. ",josephsavona,2017-01-03 00:20:42
1489,2016-12-25 22:53:10,,YasserKaddour,2016-12-26 01:31:29
1489,2016-12-25 22:53:26,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!

**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.",facebook-github-bot,2016-12-26 01:31:29
1489,2016-12-25 22:58:26,Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!,facebook-github-bot,2016-12-26 01:31:29
1489,2016-12-26 01:10:22,@facebook-github-bot shipit,josephsavona,2016-12-26 01:31:29
1489,2016-12-26 01:10:46,Thanks!,josephsavona,2016-12-26 01:31:29
1489,2016-12-26 01:10:49,"@josephsavona has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.facebook.com/D4366795).",facebook-github-bot,2016-12-26 01:31:29
1488,2016-12-23 01:19:47,"I have a simple mutation and I would like to show a pop up after mutation success and error message if it fails but my problem is onSuccess and onFailure callbacks are not firing. This is my code:
Is there anyone having same issue. Any help will be much appreciated! 

const onMutationSuccess = (response: any) => {
      console.log('Show success pop up');
    };

    const onMutationFailed = (transaction: any) => {
      console.log('Show error message');
    };

    const mutation = new SampleMutation({input: input});

    this.props.relay.commitUpdate(mutation, {onMutationFailed, onMutationSuccess});
",sjzamora86,2016-12-23 07:36:57
1488,2016-12-23 02:17:44,"<S_CODE_TOKEN>
",ngthorg,2016-12-23 07:36:57
1488,2016-12-23 07:36:57,"Thanks for asking. As @ngthorg noted, the names of the callbacks are `onSuccess` and `onFailure`. Feel free to reopen if that doesn't work! ",josephsavona,2016-12-23 07:36:57
1488,2017-01-03 20:47:41,Thank you for the response. It is now working after changing the name of the callbacks. Thank you!,sjzamora86,2016-12-23 07:36:57
1487,2016-12-23 00:10:12,"I use react-relay-router and created very simple app.
Fetching to graphql server using relay is working correctly and I get desired response, but the component inside the container does not get that data correctly.

Here is my component.

<S_CODE_TOKEN>

queries passed to router is very simple.

<S_CODE_TOKEN>

then, graphql sent to the server is like this,

<S_CODE_TOKEN>

the response json is like this. the user is null because I haven't logged in yet. it's ok.

<S_CODE_TOKEN>

as written above, the graphql request is correctly sent and also got correct response. But the component inside the container does not get the props.

What should I supposed to do here?
",haradakunihiko,2016-12-23 00:26:22
1487,2016-12-23 00:26:22,"Sorry, it seems my environment problem. Deleting all webpack generated files and rebuild fixed this issue.
Using happyhack and DllPlugin might do something, I will check into it.",haradakunihiko,2016-12-23 00:26:22
1486,2016-12-22 15:43:17,Fix position for `enforceSchema` option.,nodkz,2016-12-22 17:31:34
1486,2016-12-22 16:56:37,@facebook-github-bot shipit,josephsavona,2016-12-22 17:31:34
1486,2016-12-22 16:56:42,Thanks!,josephsavona,2016-12-22 17:31:34
1486,2016-12-22 16:57:03,"@josephsavona has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.facebook.com/D4362322).",facebook-github-bot,2016-12-22 17:31:34
1485,2016-12-21 12:15:01,"Hello, I face an issue with container composition in Relay

In  a parent container I use a fragment from a second container

<S_CODE_TOKEN>

Afterwards, I try to get ""this.props.viwer"" in render method of Trip component


<S_CODE_TOKEN>

But data which is stored in this.props.viewer.trip.country is not the country object I required. Instead, this.props.viewer  contains this
<S_CODE_TOKEN>

I checked GraphQL response from the server - server does returned me valid data
<S_CODE_TOKEN>


If I don't use getFragment and specify country fields directly in Trip container
<S_CODE_TOKEN>
this.props.viewer in render() method of Trip component contains needed data
<S_CODE_TOKEN>

Please help me whoever already met  such issue.
Or tell me if I do something wrong
",alerd,2016-12-21 17:43:14
1485,2016-12-21 17:43:14,"Thanks for filing an issue - what you're seeing is **data masking**, wherein Relay only provides each component exactly the fields it asked for and no more. We discuss the reasoning for this (and much of Relay's design in general) in [Thinking in Relay](https://facebook.github.io/relay/docs/thinking-in-relay.html#data-masking), which might be helpful background context.

In this case, the parent `Trip` component can only access fields it asked. The data for the `Country` component is only accessible to that component, so you would typically do something like the following:

<S_CODE_TOKEN>

See also [Container Composition](https://facebook.github.io/relay/docs/guides-containers.html#container-composition).",josephsavona,2016-12-21 17:43:14
1484,2016-12-21 00:57:56,"Would you be open to a PR that caused the Mutation console groups to default to expanded instead of collapsed if they contain an error? Often there are errors/warnings hiding within them, but only by manually expanding all the groups/sub-groups are they found.",MatthewHerbst,2017-01-31 02:04:18
1484,2016-12-21 02:07:51,"Hmm. In general we try to avoid spamming the console as much as possible. Failed requests already display in red, so I think we'd prefer continuing to default to the content collapsed.",josephsavona,2017-01-31 02:04:18
1484,2016-12-21 02:26:48,"I think my argument though is that showing it as red is useless if the user doesn't see it, and sometimes to see it requires expending multiple levels of groups without actually knowing what half of it means. Maybe a compromise could be a warning under the root group saying it contains an error and to expand them for more info (if there is an error).",MatthewHerbst,2017-01-31 02:04:18
1484,2016-12-21 02:36:17,I see. It might help if you could post a screenshot (text version of what it would look like on console is fine too) of what you'd like it to look like to help ground the discussion.,josephsavona,2017-01-31 02:04:18
1484,2016-12-21 22:08:33,"Sure. So, right now, a successful `FIELDS_CHANGE` update mutation looks something like:

<img width=""373"" alt=""screen shot 2016-12-21 at 1 59 40 pm"" src=""https://cloud.githubusercontent.com/assets/1287375/21407714/c8c6d628-c785-11e6-9afc-28b0efd0d53b.png"">

(Further expansion of groups just gives the actual data.) Let's say there's an error in the `FIELDS_CHANGE`:

<img width=""288"" alt=""screen shot 2016-12-21 at 2 02 12 pm"" src=""https://cloud.githubusercontent.com/assets/1287375/21407782/1a517bba-c786-11e6-8fc4-47c7410b66c7.png"">

Wait, where is it? ...

<img width=""613"" alt=""screen shot 2016-12-21 at 2 01 54 pm"" src=""https://cloud.githubusercontent.com/assets/1287375/21407788/248e632c-c786-11e6-9e94-f738c162b0cd.png"">

Found you! In more complicated mutations, that could be a lot of manual expansion (if you even realize there is an error in there in the first place)! Let's help the user out:

Maybe a message along the lines of:

<img width=""662"" alt=""screen shot 2016-12-21 at 2 05 51 pm"" src=""https://cloud.githubusercontent.com/assets/1287375/21407886/9ec0e728-c786-11e6-940b-0ec9194d5f23.png"">

Though personally I would just prefer the groups to be auto-expanded to the error, and I think most developers would agree with that sentiment.

(Also, you'll note with my calls of `console.groupEnd()` that there is bug in that Relay doesn't close its console groups when an error occurs deeply. This could really screw with further console calls by the developer or other applications.)",MatthewHerbst,2017-01-31 02:04:18
1484,2017-01-31 02:04:18,"This looks reasonable to me. As nobody is actively working on this internally I am going to close it, but if you want to submit a PR like you said then we'd be happy to review it. Thanks for thinking about this and explaining the rationale so well!",wincent,2017-01-31 02:04:18
1483,2016-12-20 19:28:10,"I have the following situation:
- generated query is correct
- response is correct and includes the data requested by the nested component
- nested component does not get the requested data on via props

The problem appeared after I created a connection between `Team` and `childs`. Maybe this is not how I am supposed to do it..

**Versions:**
React 15.4.1
Relay v0.10.0

**My code**:
<S_CODE_TOKEN>",andricicezar,2016-12-21 16:49:29
1483,2016-12-21 16:27:27,Can you tell me how can I solve this problem? Can I provide more information? Thank you,andricicezar,2016-12-21 16:49:29
1483,2016-12-21 16:49:29,"I don't know how, but this problem fixed itself. Maybe it was webpack's cache involved or browser's cache? ",andricicezar,2016-12-21 16:49:29
1483,2016-12-21 17:44:22,"@andricicezar thanks for following up here. Everything looked right, so a configuration or caching issue seems likely. Enjoy using Relay!",josephsavona,2016-12-21 16:49:29
1482,2016-12-18 21:30:41,"## Steps to reproduce
1. `git clone git@github.com:facebook/relay.git`
2. `cd relay`
3. `yarn install`

`npm run build`/`gulp` is run as part of the post-install and fails with: 

<S_CODE_TOKEN>

Before it fails it displays some warnings as well:

<S_CODE_TOKEN>

A regular `npm run build` fails in the same way. `npm run build` works at the `v0.10.0` tag but outputs the same warnings. 

I know in the contributing guide it says that [master is unsafe](https://github.com/facebook/relay/blob/master/CONTRIBUTING.md#master-is-unsafe) but that seems to be more geared towards API stability rather than just flat out not being able to build. ",crismali,2017-01-18 00:31:28
1482,2016-12-18 22:53:28,Thanks for reporting this. You're correct that in general we try to keep master building cleanly. At the moment we're iterating quickly on the core and so things are likely to break briefly while we sort through configuration in different environments. ,josephsavona,2017-01-18 00:31:28
1481,2016-12-15 15:25:04,"From the [method comments](https://github.com/facebook/relay/blob/17096c3f22fbd98d0b4ace26762917e6c6a54832/src/store/RelayStoreData.js#L215) for `RelayStoreData.getClientMutationIDs`, it seems like `getPendingTransactions` only retrieves transactions for records which have explicit optimistic updates, and from actual mutation usage, this does seem to be the behaviour.

I'm wondering if this is actually intended, because the [Relay docs](https://facebook.github.io/relay/docs/guides-mutations.html#optimistic-updates) on optimistic responses don't seem to suggest this. If this was intended behaviour, then maybe we should update the docs to include this in?",acruis,
1481,2017-01-18 01:49:27,"I don't think I completely understood what you are suggestion. Only optimistic records can have pending transactions, which are waiting on a server response. Once the server response comes back, it is update in the store and the record is no longer pending. We don't really know what nodes might change soon in the server response besides what was included in the optimistic responses.",yuzhi,
1481,2017-01-18 02:18:48,"I think if the user is not familiar with how Relay transactions work, they would expect you to also mark a record whose ID is specified under `FIELDS_CHANGE` as ""pending"".",acruis,
1481,2017-01-18 21:29:04,I see. Feel free to put up a PR where you think this will be helpful.,yuzhi,
1480,2016-12-14 00:49:14,"As this will be useful for people moving towards the new APIs, we've made this one public, so it needs to be documented.",wincent,2016-12-14 02:16:40
1480,2016-12-14 00:50:40,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4324311).",facebook-github-bot,2016-12-14 02:16:40
1479,2016-12-13 19:58:59,"Hello,

For context, I'm currently developing  an application on React-Native using Relay.
I've been taking care of not disrupting user active animations to give a smooth feeling across the application ; and I've been naturally looking at `Relay.injectTaskScheduler`, as it's mentioned in the documentation.

However, I've been disabling it because its behavior would not match what I've been looking for.
I'm trying to have this behavior :
1. Push transition to page
2. If data is available in the cache, then render the view with cache data - because it's fast and that way user won't see a loader.
Else, display the loading placeholder and display data when available but only after animation finished - to prevent dropping frame.

The problem is : if you inject react-native `InteractionManager.runAfterInteractions` task scheduler, the behavior will be that it **always** displays a loader ; because it waits for the interaction to finish before checking the cache.

If you don't inject it, then you will have a nice user experience - when the data is available in the cache (second visit of the screen for example, or offline mode), it will resolve fast and synchronously, allowing the user to view the page with data animating. But if the data isn't available, it will display a loading placeholder, and sometimes if the data batch resolves mid-transition, then the animation will drop frame - because it is trying to render the view with the newly received data.

Here is 2 mp4s illustrating what I've been describing : 
First, the behavior with the injected task scheduler :
[With task scheduler](http://dc621.4shared.com/img/IcpjxdY-ba/821afb20/dlink__2Fdownload_2FIcpjxdY-ba_3Fsbsr_3D3401b472898f614a26effbe7fb87babd991_26lgfp_3D1000_26dsid_3Dhljsk0.62d4cb7349a4a579e2805a6f4ae15e41/preview.mp4)
As you can see, it is very annoying as on every page load, the loading placeholder is displayed even when the data is cached.

[Without task scheduler](http://dc621.4shared.com/img/MCHD_l3iba/96f22372/dlink__2Fdownload_2FMCHD_5Fl3iba_3Fsbsr_3D8e1bb88ba8d33976c2be6ef6115b7626991_26lgfp_3D1000_26dsid_3Dhljsk0.3db6d58e4c93da48ddaeddc484b94ed1/preview.mp4)
This is much better. However, sometimes on the first load, the data is resolved mid-transition and the transition stutters and drop frames.

It could be nice that we decide whether a task is resolved or not depending on what is it. If it is to read from cache, I can do it right now because it might end in an improved user experience, if it is to merge data received over the network into store, I can wait until end of transition.

IDEA: Maybe we could receive in the task scheduler, on top of the `task` argument, a `priority` argument which would give the priority of the task ? This could even match the [ReactPriorityLevels](https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactPriorityLevel.js) done for `react-fiber`. The goal of `react-fiber` pretty much join this issue, so it does make sense.",yachaka,
1479,2016-12-21 17:54:50,"@yachaka Thanks for asking about this. The current behavior is intentional, though its certainly something we can reconsider in the future if the constraints of the system change. In current Relay answering the question ""can query X be fulfilled from cache"" can be an expensive enough operation that it may interrupt animations itself (depending on the complexity of the query and how many cache objects have to be looked at). Further, simultaneously rendering a complex view and animating isn't always ideal. This led us to implement the current behavior where the render is always managed by the injected scheduler (`InteractionManager.runAfterInteractions` was added in part to serve this use-case). 

In future versions of Relay core (and/or as React Fiber becomes available) we may be able to relax this constraint so this is something we should keep discussing. As a workaround, you might try injecting a custom scheduler that only waits for interactions to complete in certain cases (terrible idea but might work: if a task resolves early enough within an animation run it immediately).",josephsavona,
1478,2016-12-11 23:13:34," <S_CODE_TOKEN>

The onSuccess callback used to work on our system. Has recently stopped being called across the whole site. We are using a custom network layer, but has not been changed since it was originally working.

",Jtmaca9,2016-12-12 02:39:13
1478,2016-12-12 02:39:11,"@Jtmaca9 Thanks for filing an issue, someone else recently made the same mistake. See my answer at https://github.com/facebook/relay/issues/1467#issuecomment-265067137. If that doesn't work, feel free to reopen!",josephsavona,2016-12-12 02:39:13
1477,2016-12-09 19:14:48,Relevant to #1369,josephsavona,2016-12-09 20:01:28
1477,2016-12-09 19:15:03,@facebook-github-bot import,josephsavona,2016-12-09 20:01:28
1477,2016-12-09 19:15:14,"@josephsavona has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4307042).",facebook-github-bot,2016-12-09 20:01:28
1477,2016-12-09 19:27:22,@facebook-github-bot import,josephsavona,2016-12-09 20:01:28
1476,2016-12-09 14:31:07,"@josephsavona  I have a case where I want to search data and load more afterwards (when user scrolls)
My first thought was to call a query `search(query:""something"", first:10)`, before component renders. But since I want to  be able to load more data, I'll need to use `setVariables()`. This would cause relay to create a `node(id:...)` query. Since I don't have `id` in my case, here are some ideas: 

1. Use a mutation, but how would you load more data using a mutation? 
2. Implement custom logic, and modify relay store 
3. Use `viewer` field, so graphql understands `node` queries by using user's id. 

How should I solve this? ",shakaIsReal,
1476,2016-12-09 17:26:20,"You don't strictly need a `node` field in order to load more data in Relay. Relay tracks how records without an `id` were fetched (the nearest ancestor with an id, and the path from that record to the id-less record). It uses this to construct queries when you call `setVariables`. I would expect that your use-case would ""just work"".",josephsavona,
1476,2016-12-09 19:48:00,"@josephsavona  Sorry for not being clear the first time ( but that was helpful too :D )
What I meant was:

Here's my Route query 

<S_CODE_TOKEN>
And some component would require data 

<S_CODE_TOKEN>

How can I fetch more data (invoke `search()` query) in this case   ? 

",shakaIsReal,
1476,2016-12-09 23:56:37,"@josephsavona I also looked at https://gist.github.com/vslinko/3f877c2415464ecc7af6. 
Should pagination logic live in the Route? The example cited, uses `viewer` field as the stating point and has fragments such as `search` linked to it. Yet, I hope there's a better way to do it?",shakaIsReal,
1476,2016-12-10 00:31:47,"You should be able to load more data from the component with `setVariables` without having to push a new route. Note, however, that Relay doesn't currently support root fields that take multiple arguments - so you would just have to wrap the `search` field under a viewer field.",josephsavona,
1476,2016-12-10 00:46:07,"@josephsavona Thanks, so for this kind of cases, you suggest making a `viewer` field that links to `SearchType`, and `SearchType` would have a `search` field? But what if the number of these cases increases, then there must be a union type on `viewer` that resolves to a specific type, right? 
 


",shakaIsReal,
1476,2016-12-10 02:16:24,"The `viewer` field would have be an ObjectType (named for example ""Viewer""), then put root fields there. Check out the [Learn Relay guide](https://learnrelay.org/queries/what-is-a-query#the-node-and-viewer-fields) for more context.",josephsavona,
1476,2016-12-10 23:26:16,"Thanks, are you going to support ""root fields"" in Relay 2? `viewer` field seems like a remnant (http://stackoverflow.com/questions/39938560/graphql-viewer-for-mutations/39939747#39939747)
I already got authorisation (using `context`), and I'll only need `viewer` field for executing queries (such as `search`). Is this the recommended approach anyway? 

@josephsavona @leebyron ",shakaIsReal,
1475,2016-12-08 21:34:59,"**Edited**

`User` component's fragment is similar to this:

<S_CODE_TOKEN>

`User` component's render function is similar to this:

<S_CODE_TOKEN>

And `Item` component has a fragment such as this
<S_CODE_TOKEN>

`AddItemMutation` similar to this:

<S_CODE_TOKEN>

Problem exists when user initially has no items. When the first item is added through this mutation, relay doesn't request the additional fields required by the `Item`. However if user already has items, and when another item is added through the mutation, relay successfully fetches the aditional fields required by the `Item`
",oguzbilgic,
1474,2016-12-08 21:26:00,This should make CI happy again for the plugin directory.,kassens,2016-12-09 18:46:31
1474,2016-12-08 21:29:16,"@kassens has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4301658).",facebook-github-bot,2016-12-09 18:46:31
1473,2016-12-08 21:11:05,"I removed the yarn.lock with a34867552d51c015f687bc550dcc675797398096, this ignores it for people who still want to `yarn install` the node_module dependencies.",kassens,2016-12-10 21:31:32
1473,2016-12-08 21:11:31,"@kassens has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4301502).",facebook-github-bot,2016-12-10 21:31:32
1472,2016-12-07 23:49:55,"Hey,

I've got a use case where my schema has a union type whose subtypes have fields of the same name. These fields have different types, though--in one type in the union, the field is a non-nullable string, in the other, it's a nullable string. The way to get around this in GraphQL is to alias one of the fields to another name, which works:

<S_CODE_TOKEN>

When I do the same thing inside Relay fragments, however, the compiled query that is sent doesn't have the alias (which ends up as a GraphQL error, because we're querying for fields with the same name but a differing type).

I've got a (fairly) minimal case to reproduce it [here](https://github.com/jaredmcdonald/relay-alias-bug-example)... all of the client code is in [`src/client/index.js`](https://github.com/jaredmcdonald/relay-alias-bug-example/blob/master/src/client/index.js), and the GraphQL schema is in [`src/server/schema.js`](https://github.com/jaredmcdonald/relay-alias-bug-example/blob/master/src/server/schema.js). Essentially [this line](https://github.com/jaredmcdonald/relay-alias-bug-example/blob/master/src/client/index.js#L27) ends up without an alias when the query is sent.

Let me know if I can clarify anything...  I've poked around and can't find anything about this being intentional, though if it is we can probably just modify our schema to fix it.

Thanks!",jaredmcdonald,
1472,2017-01-26 05:46:10,"@josephsavona I can confirm this. On the latest version 0.10.0 of react-relay I got the same problem.

Babel-relay-plugin converts correctly fragment fields with alias option, but query sended without alias.",nodkz,
1471,2016-12-07 02:44:46,,kassens,2016-12-08 03:04:25
1471,2016-12-07 02:49:47,"@kassens has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4290330).",facebook-github-bot,2016-12-08 03:04:25
1471,2016-12-08 03:04:25,"We actually need the offline-mirror variant internally, but that doesn't work in OSS since we don't have the files for the offline-mirror there.",kassens,2016-12-08 03:04:25
1470,2016-12-06 19:31:03,,kassens,2016-12-07 01:16:30
1470,2016-12-06 19:39:36,"@kassens has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4286363).",facebook-github-bot,2016-12-07 01:16:30
1469,2016-12-06 18:06:34,"We're generating what is supposedly a relay compatible schema using postgraphql (https://github.com/calebmer/postgraphql)

When we try to parse and use the attached schema we get this error:
<S_CODE_TOKEN>

We can successfully parse and use other hand-written schemas, so possibly this is a bug in postgraphql, but we're having trouble figuring out what babel-relay-plugin doesn't like about this schema in the first place.

Any advice would be greatly appreciated!

[schema.txt](https://github.com/facebook/relay/files/634627/schema.txt)

PS: the attached file is a .txt, but really it's .json -- github wouldn't let me upload it with that extension",WestleyArgentum,2016-12-06 20:47:26
1469,2016-12-06 20:47:26,"For anyone who comes across this, solution here: https://github.com/calebmer/postgraphql/issues/266

Sounds like the relay plugin will eventually have more generic support for ids, which are currently causing the problem.",WestleyArgentum,2016-12-06 20:47:26
1468,2016-12-06 17:36:00,,kassens,2016-12-06 18:46:40
1468,2016-12-06 17:36:54,"@kassens has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4285392).",facebook-github-bot,2016-12-06 18:46:40
1467,2016-12-06 02:35:28,"The `onSuccess` nor `onFailure` callbacks seem to never be called in my React Native app when I do mutations.

I have the following component:

<S_CODE_TOKEN>

The LoginMutation is like this:

<S_CODE_TOKEN>

I use [graphql-relay](https://github.com/graphql/graphql-relay-js) for the server implementation.

When I do the same mutation through GraphiQL, it totally works and returns a token.
<S_CODE_TOKEN>

Is this an issue with my implementation or am I missing something regarding compatibility with React Native, as I haven't seen many mutations for React Native apps.",Naoto-Ida,2016-12-06 05:52:27
1467,2016-12-06 05:52:26,"Ah! Your code is *so* close - the callbacks are the second argument to `applyUpdate`, not to the mutation constructor ([docs](https://facebook.github.io/relay/docs/api-reference-relay-store.html#commitupdate-static-method)). So:

<S_CODE_TOKEN>",josephsavona,2016-12-06 05:52:27
1466,2016-12-04 21:35:26,"Hello!

Im currently stumbling on a problem where I have multiple `same named` connections that is used in the application. During a mutation, Im trying to `RANGE_DELETE` an `object` only from a specific connection and have currently no idea how that should be done. Right now, its deleting the `object` in all connections which is not ideal. My schema kinda looks like this for reference:

<S_CODE_TOKEN>
where `EventsList1` and `EventsList2` both have similar fragments as the one above with an `events`-connection.

Is it possible to example only `RANGE_DELETE` from EventsList1? My current config looks like this:
<S_CODE_TOKEN>
with a fatquery:
<S_CODE_TOKEN>

Thanks in advance!",proProbe,
1466,2016-12-04 23:22:51,Do both events fields have the same arguments? If not you can probably target which range to delete from via the exact arguments. If yes (same args) then it isn't as straightforward: my first thought is to use local state for now (longer-term we're working on an updated mutation API that addresses this use case). ,josephsavona,
1466,2016-12-05 09:19:31,"@josephsavona This is exactly what I'm trying to achieve in an issue I opened earlier (delete from a connection with specifics arguments). It might be dead simple but I can't seem to find the syntax ; [related issue](https://github.com/facebook/relay/issues/1462), for when you have some time.",yachaka,
1466,2016-12-05 09:44:20,"@josephsavona So if the arguments are correctly inserted, it should update the correct `fragment`? I'll try this out! The other method with local state sounds unfamiliar for me. How would that actually look like?",proProbe,
1466,2016-12-05 09:54:38,"how would you actually send in params to the mutation for it to update the correct fragment? Something like this doesnt seem to work:
<S_CODE_TOKEN>",proProbe,
1466,2016-12-11 18:44:09,@josephsavona any information on the question I have above? Sorry for bothering you :) just not sure on how to do the proposed solution,proProbe,
1465,2016-12-04 10:20:43,"Considering this response from Graphql
A **Viewer** has many **Products** and each **Products** has many **Batches**.

When two **Products** have to same **Batch**(with the same ID), but the **status** **value** in each node is different. 
The problem is that when **Relay** parses this response, it treats the two Batch nodes the same, the **status** value will become True for the first Batch node(don't know why it is not False)

Is this an expected behaviour? 

<S_CODE_TOKEN>",chungwong,2016-12-04 11:42:58
1465,2016-12-04 10:41:00,"Yes, this is expected behavior.
Internally Relay construct a flat cache by global ids.  So when it gets first batch it save it to cache  with status false. When he reads second record, it found existed batch by id and update value to true. As result both of your components will receive status true.

So you should provide different global ids for your batches.",nodkz,2016-12-04 11:42:58
1465,2016-12-04 11:42:08,"Thank you for the confirmation, I ended up making globalIdField() to return an alternative ID conditionally.",chungwong,2016-12-04 11:42:58
1465,2016-12-04 21:05:52,"One of the fundamental assumptions of Relay is that objects with the same ID are the same object, therefore all fields should be the same no matter what way the object was fetched. Additionally, it should be possible to refetch the object using `node(id: $id)` and retrieve the same values unless the object was modified in the meantime. If you have additional information that depends on the connection from parent to the nodes of a connection (like the status here), you might want to put that data on the `edge` of the connection.",kassens,2016-12-04 11:42:58
1464,2016-12-03 22:19:57,"Fixes #1463; currently argument values are printed incorrectly when the argument type is a custom scalar that serializes as an object. This PR changes the plugin to consider any non-builtin scalar type as equivalent to enums and input objects, which are ""printed"" as variables instead of being inlined.",josephsavona,2016-12-04 02:01:28
1464,2016-12-03 22:24:21,@facebook-github-bot import,josephsavona,2016-12-04 02:01:28
1464,2016-12-03 22:25:23,"@josephsavona has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4272048).",facebook-github-bot,2016-12-04 02:01:28
1464,2016-12-03 22:26:42,@facebook-github-bot import,josephsavona,2016-12-04 02:01:28
1464,2016-12-03 22:32:36,@facebook-github-bot import,josephsavona,2016-12-04 02:01:28
1464,2016-12-04 00:48:49,@facebook-github-bot import,josephsavona,2016-12-04 02:01:28
1463,2016-12-03 20:47:14,"This GraphQL fragment:

<S_CODE_TOKEN>

results in the following query:

<S_CODE_TOKEN>

and that results in the following error:

<S_CODE_TOKEN>

the following query works just fine (notice the missing quotes from the `retailer` key)
<S_CODE_TOKEN>
",legomind,2016-12-04 02:01:28
1463,2016-12-03 21:30:06,"Thanks for reporting this. What version are you on? The latest release should handle input objects such as this. One possible workaround is to use a variable for the value: `where: $query`, and `initialVaribles: {query: {retailer: ""...""}}`
",josephsavona,2016-12-04 02:01:28
1463,2016-12-03 21:31:28,Related: what is the type of the `where` argument? Is it an input object or a custom scalar type? Sounds like the latter and we need to handle custom scalers better. ,josephsavona,2016-12-04 02:01:28
1463,2016-12-03 21:33:43,"Version:
<S_CODE_TOKEN>
 I am using a custom scalar type from [graphql-sequelize](https://github.com/mickhansen/graphql-sequelize/blob/master/src/types/jsonType.js)",legomind,2016-12-04 02:01:28
1463,2016-12-03 21:35:18,"Got it. The plugin checks if an argument's type is an instanceof GraphQLScalar type, but should probably check for the specific built-in scalers instead. I'll put up a fix later today. ",josephsavona,2016-12-04 02:01:28
1463,2016-12-03 21:36:21,"Thanks. If you can't get to it, I can submit a PR with a little guidance.",legomind,2016-12-04 02:01:28
1463,2016-12-03 22:00:30,"@josephsavona Thanks for the suggested workaround, but unfortunately using variables results in exactly the same query.",legomind,2016-12-04 02:01:28
1463,2016-12-03 22:20:49,"@legomind Yeah, the workaround was worth a try. Thanks for your patience, I just pushed a PR that fixes this.",josephsavona,2016-12-04 02:01:28
1462,2016-12-01 15:50:24,"I'm trying to achieve a mutation which is a RANGE_DELETE + a RANGE_ADD on a connection, but only on the specified arguments.

Scenario : the logged user, `Viewer` can see requests from others users and approve them.

The `User` type has a field `viewableRequests`, which is a relay connection, and with an extra optional argument `state`, which will filter the requests and only keep the one with the corresponding state.

Schema :
<S_CODE_TOKEN>
So if I call `viewableRequests(state: pending)`, I only get requests with the pending state, and if I call `viewableRequests(state: approved)`, I only get the the requests with the approved state.

How can I write a `ApproveRequest` mutation that will do a RANGE_DELETE on the `viewableRequests(state: pending)` connection, and a RANGE_ADD on the `viewableRequests(state: approved)` connection, and how should I shape the `getOptimisticResponse()` method ?

Here is my mutation schema :
<S_CODE_TOKEN>
  
Here is my current code :
<S_CODE_TOKEN>

I've posted this also on StackOverflow : 
http://stackoverflow.com/questions/40914883/range-delete-and-range-add-on-connections-with-arguments",yachaka,
1461,2016-12-01 11:00:38,"I am new to Relay and I am still trying to get more familiar with the idea of using mutations. In my use case, I have a form made up of several React components and I want to capture the mutation of each component, combine them in the parent component and then commit the changes to GraphQL server. How can I do this?

The examples that I have seen so far all deal with the mutation being used and committed in a single component. I want to use the same pattern that is used for querying where fragments are localised within the react component and then they are combined to create a query for server.
",nikhilag,2017-01-31 01:39:18
1461,2016-12-03 11:34:04,"Hey @nikhilag,
For that, you can first store data changes of your form child components in the parent component state. For example, let's assume a DatePicker component inside the form :
<S_CODE_TOKEN>",yachaka,2017-01-31 01:39:18
1461,2016-12-03 20:08:03,"Great question. As @yachaka answered, a straightforward approach would be to accumulate all of the changes from child components in a parent component (using callbacks and local state or something like Redux) and then make a single mutation when the user saves/commits the changes.  

One pattern is to use `applyUpdate` to optimistically apply each individual change, then roll all those optimistic mutations back when applying the final mutation. ",josephsavona,2017-01-31 01:39:18
1461,2016-12-04 19:40:01,"Thanks a lot @yachaka and @josephsavona.

@josephsavona I am trying to understand the second part you mentioned. I read that `applyUpdate` will give me a `RelayMutationTransaction` which can be committed or rollbacked. If I understand you correctly, I will need to use Redux approach (or something similar) to accumulate all the changes along with all the `RelayMutationTransaction` objects that I get by calling `applyUpdate` for changes in each component. Before committing the final mutation with all changes in the parent component, I will need to rollback all the `RelayMutationTransaction` objects.

Is this correct? Does it also mean that I will have to create small mutation types for each component and then combine them in the final mutation type?",nikhilag,2017-01-31 01:39:18
1461,2016-12-04 23:18:57,"Yup, that's the idea. Excerpt that you can probably just define a single mutation field/type in your schema (e.g. `editFoo(input: ...) { foo }`) and then each of the optimistic updates would just update different fields on the `foo` object in the response. ",josephsavona,2017-01-31 01:39:18
1461,2017-01-31 01:39:18,Going to close this on the assumption that the comments so far have been sufficient to unblock you. Please comment again if you have any further questions.,wincent,2017-01-31 01:39:18
1460,2016-11-30 21:29:37,"I'm trying to figure out how Relay is fundamentally able to take a component tree and extract the graphql query. I tried looking though here and didnt get very far: https://github.com/facebook/relay/blob/master/src/container/RelayContainer.js

I think a very minimal example is something like this:

<S_CODE_TOKEN>

In the spirit of Relay, it seems like I should be able to have a provider container of sorts that should be table to read the entire tree out which should look something like `{one: {a: 1}, two: {a: 1}}`.

Then there's variables and stuff, but lets not get ahead of ourselves. Any ideas or suggestions how this works? I'd like to make something similar.",ccorcos,2016-12-03 18:48:05
1460,2016-12-03 11:45:41,"@ccorcos Query composition is done using [graphql fragments](http://graphql.org/learn/queries/#fragments). By including fragments into fragments, each container can compose from childs and the RootContainer will include that fragment into a query which will be sent to the server.
I don't understand exactly what you are trying to understand, so please specify If I didn't answer well !",yachaka,2016-12-03 18:48:05
1460,2016-12-03 18:48:05,"In a nutshell, each Relay.QL tag transforms to a function that returns an object:

https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/__fixtures__/fragmentWithReference.fixture

Fragment references are function calls whose return value is embedded in the object (see the Relay.QL.__ref call and how `reference` Is handled), so it's ultimately not too different from:

<S_CODE_TOKEN>

I'm going to close this since it's not a bug or open question, but feel free to ask follow up questions and I'll answer as time permits!",josephsavona,2016-12-03 18:48:05
1460,2016-12-04 20:55:36,"@yachaka @josephsavona the Relay containers have state variables though. So it's not as simple as calling a static method that returns the entire query, you need to be able to get the tree as a function of the application state. So that's more of my question -- how do the variables work?",ccorcos,2016-12-03 18:48:05
1460,2016-12-04 23:27:31,"Queries are effectively decoupled from application state. For variables, check out RelayQuery, RelayFragmentReference, etc. Initial variables are handled similarly to the `child` function above pulling values (vars) from its JavaScript closure. ",josephsavona,2016-12-03 18:48:05
1460,2016-12-05 19:31:22,"Interesting... I see. So you give some initial variables, and then just call `setVariables` whenever you want to change a variable and all this context stuff wires everything together. And since everything is asynchronous, it all works out. 

Now I could be wrong, but I find this to be an odd strategy. It seems to me like Relay could potentially work just like React works for rendering:

<S_CODE_TOKEN>

Instead there's this whole stateful dance under the hood where Relay containers talk to each other through contexts. Is there any reason why the approach above wouldn't work? It just seems a lot simpler to me and I'd imagine React has already done much of the legwork to make that happen.",ccorcos,2016-12-03 18:48:05
1460,2016-12-05 21:22:11,"Good questions. A lot of the complexity in Relay is not obvious if you haven't tried to build something like it. For example, it's easy to forget that props *are the results of queries*, so you can't have a `query()` function that depends on props/state (as in your example) or rely on React lifecycle methods for updating/constructing them.

If you're interested in how Relay 0.9 works, i'd highly recommend watching @wincent's talk: https://facebook.github.io/relay/docs/videos.html#relay-deep-dive-slides-https-speakerdeck-com-wincent-relay-deep-dive (there's a video or annotated slides)",josephsavona,2016-12-03 18:48:05
1460,2016-12-06 00:18:06,"> For example, it's easy to forget that props are the results of queries, so you can't have a query() function that depends on props/state (as in your example) or rely on React lifecycle methods for updating/constructing them.

Oy. What a nightmare. Do you see what I'm getting at about the how Relay variables are not directly derived anywhere though? It seems to me that if we were to rework things so that the relay data was pulled out the props, then we'd have two very nice function signatures: `(props, data, state) => vdom` and `(props, state) => query`. Although I'm seeing what you mean about the lifecycle... Dang.

I'll check out that video though, and thanks for the help, I really appreciate it. :)",ccorcos,2016-12-03 18:48:05
1460,2016-12-06 01:46:25,"Yeah, `(props, state) => query` unfortunately does not make sense given that props are the results of the query.",josephsavona,2016-12-03 18:48:05
1460,2016-12-12 00:33:51,"Well there is inherently a difference between props that come from relay, and props that are set by the parent component...",ccorcos,2016-12-03 18:48:05
1459,2016-11-29 08:14:03,I configured the same environment  for graphql server and injected the same in Relay.defualtNetwork() and this is injecting successfully with android but I think it is not injecting in iOS simlulator as after I pass my mutation in Relay.store.commitUpdate(my mutation) to graphql server I got onFailure callback and I debug the relay network from ** 'react-relay/lib/RelayNetworkDebug'** which is showing me **TypeError: Network Request failed**  in to console but in case of Android simulator there is no issue and I am getting onSuccess callback and getting response from graphql server.,Nasirilahi,2016-11-29 10:18:13
1459,2016-11-29 10:18:13,Done! I added **Allow Arbitrary Loads** key with true value in to info.plist in xcode that was false by default that's why any network call is not going.,Nasirilahi,2016-11-29 10:18:13
1458,2016-11-28 21:42:00,"Hi there,

I'm currently building an app on React-Native using Relay. Everything works really great, Relay is a fantastic framework.
I want now to serialize and save the Store data any time it changes, so if the user quits the application and comes back, I can restore the data already fetched and provide a nice offline mode experience.

Where can I listen for any data change on the Store ? I've been looking at `this._changeEmitter` inside `RelayEnvironment`, but it seems like you can only listen to specific records IDs, whereas I want to be notified when any part of the Store changes.",yachaka,
1457,2016-11-27 22:19:06,"I think it'd be cool to only get the minimum data to resolve a global id to an object. Use case: getting new `ships` using cursor. 

<S_CODE_TOKEN>
`getFaction()` could return many object (id, name, ships).. But we don't need all of them when we're interested in `obj.ships` and `obj.id`. There's no need to load the data we already have on the client or don't need. 

Therefore relay could send a partial argument. `partial: true` 


<S_CODE_TOKEN>
 
And in `idFetcher` we could do this, 

<S_CODE_TOKEN>

Sure people can encode this inside `globalIdField`. But adding this change and documenting it to people can prevent data over fetching



 What do you think, is this change worth it? Or it just adds complexity? 

@leebyron  @wincent  ",shakaIsReal,2016-12-01 03:18:23
1457,2016-11-27 23:35:40,"I don't understand the use case, could you clarify what behavior you're currently seeing and what you'd like to achieve? Note that Relay/GraphQL will only fetch the fields you ask for, so it isn't clear what over/fetching you're referring to. The fragment in your example contains the `ships` and id field on Faction, so only those fields will be fetched. Your `getFaction` method shouldn't load fields preemptively; instead load them when each field is specifically requested (i.e. let the executor call your resolve function for each field and load it only then). ",josephsavona,2016-12-01 03:18:23
1457,2016-11-28 10:59:02,"@josephsavona  Thanks, lets say I want to get users `id, name, age, gender, posts`. 
`posts` will be fetched using a cursor i.e. `posts(first:10)`

 My query type would look like this: 

<S_CODE_TOKEN>
And nodeDefenitions: 

<S_CODE_TOKEN>
 And `UserType` will get the posts. 

<S_CODE_TOKEN>
The problem is that `getUser()` will fetch `name`, `gender` and `age`. So if I want to get more posts from a specific user, I will have to ask for unnecessary information inside `idFetcher()`. When really all I need is user's `id`. 

  
> (i.e. let the executor call your resolve function for each field and load it only then 

Are you saying to query the database inside each field's resolver function. Like this? 

<S_CODE_TOKEN>

But this would be inefficient for the server.  Sorry if I misunderstand something, I am used to REST...
I feel like I need to create two separate function one for the query `getUser()` and one for idFetcher: `getUserId()` where a new constructor (User) with id will be created. 
",shakaIsReal,2016-12-01 03:18:23
1457,2016-11-28 17:40:11,"> Are you saying to query the database inside each field's resolver function. 

Yup! Not doing this - loading fields pre-emptively - can cause overfetching (as you've seen). SQL queries to load individual properties are typically quite fast, and the overhead of making more queries can be offset by avoiding overfetching. I would recommend trying this approach and seeing how it performs (don't just assume it will be slow). 

Check out the `dataloader` npm module to cache data during query execution (to avoid making the same SQL query twice). You may also find https://github.com/stems/join-monster helpful. 

I'm going to close this issue since it's an answered question, but feel free to continue the discussion here or ask for more info at facebook/graphql-js ",josephsavona,2016-12-01 03:18:23
1457,2016-11-29 18:47:14,"@josephsavona thank you 
",shakaIsReal,2016-12-01 03:18:23
1457,2016-11-30 22:38:42,"@josephsavona What's the motivation of fetching the `id` from the database in `nodeDefenitions`? We already know the `id` from the global object, why not just return it? Here's an example from join-monster https://github.com/stems/join-monster/blob/master/example/schema-relay-paginate-2/Node.js#L18 

Thanks. ",shakaIsReal,2016-12-01 03:18:23
1457,2016-12-01 03:18:23,"@shakaIsReal I'm not sure, `join-monster` is a third-party GraphQL library. I'd suggest asking via Join Monster's GitHub page, it's definitely a good question.",josephsavona,2016-12-01 03:18:23
1456,2016-11-27 19:19:13,"Im trying to use GraphQL and Relay `errors` to let Relay do all the heavy lifting and to spare myself from writing duplication error handling code. Everything was beautiful until I had to use two separate queries.

This issue occurs when cache is cold (page refresh, navigation from other site _etc_).

**Situation:** two components, parent `App` and child `Posts`. Both have their own Relay Components and make two separate queries. `App` has it's own query to get current user data in order to make sure that every single page in app gets the user data (even if anonymous) if navigated to with cold cache.

`App` query is successful, `Posts` query return an error (has `errors` array, for example: `post doesn't exist`).


**Expected result:** there are two different queries, Im expecting the successful `App` query to resolve as expected, so that I could  show `post with that ID doesn't exist` or something similar for child component.

**What really happens:** Relay Component that wraps `App` makes a successful query and even adds the record to store but if any of the children queries return error, it never injects the record to `App` component `props`.

Is this supposed to happen? If one query gets an error, Relay halts the whole process or something?

---

This is using [react-router](https://github.com/ReactTraining/react-router) and [react-router-relay](https://github.com/relay-tools/react-router-relay) but I think these shouldn't be related to this issue.

### Code:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>",unirey,2016-11-28 13:50:21
1456,2017-02-03 12:53:31,"@unirey I'm also trying to wrap my head around handling errors in a good way. Since you closed this issue, did you find any tricks you want to share?",phillipj,2016-11-28 13:50:21
1455,2016-11-26 03:49:36,"Hi, i have recently refactor our back-end service using GraphQL which is a really awsome alternative against REST. And as i dive into it deeper, i find life can be easier if we use relay in the web front end. So i start to search more staff about relay and finally found this [awsome talk](https://www.youtube.com/watch?v=1Fg_QtzI7SU&index=4&list=PLpi1lPB6opQzSSOQU8JQLExuP1JUXPtmA&t=1199s) published recently which mentioned `Persisted Query` that help save query size. It is definitely a great feature for mobile app. But our product is mainly for PC users, so when can we use this awsome feature in web front-end and is there any example code to show a best practice? Thank you!",luckydrq,2017-01-30 21:40:26
1455,2017-01-30 21:40:26,"We don't have a specific release date as such, but we are making progress towards having persisted query support available in Relay. The new Relay core and APIs are functional and complete enough that we've been able to run tests in production, and we've been starting to ship pieces to the `master` branch with more to come over the coming weeks/months. As such, your best bet at this point is to watch `master` and keep an eye on [our meeting notes](https://github.com/facebook/relay/tree/master/meta/meeting-notes) where we publish updates from our team syncs.

In the meantime, there is no example code, but there will be (and documentation) by time this gets fully merged and rolled out.

Before I close this, let me point out [this RFC PR](https://github.com/graphql/express-graphql/pull/109) to `express-graphql`, which shows how one might implement persisted query support on the server side.",wincent,2017-01-30 21:40:26
1455,2017-01-30 21:40:58,"And I forgot to add: thanks for asking the question, and for your patience in waiting for a response.",wincent,2017-01-30 21:40:26
1455,2017-02-05 06:07:38,Thanks!,luckydrq,2017-01-30 21:40:26
1454,2016-11-24 14:27:20,"I got this error when I tried to make container wit fragment in which one field depends on another.

I have container like this 

<S_CODE_TOKEN>

The case is that I'm trying to refetch the second field('field2'), after I got some data in my Container from user. To make this I call 'this.props.relay.setVariables({ prop1: 'foo', prop2: 'bar' })', but request fails with aforementioned error.

",maxpolski,2016-11-24 15:56:58
1454,2016-11-24 15:56:58,"That is my false, because of some kind of misunderstanding.",maxpolski,2016-11-24 15:56:58
1454,2016-11-24 17:19:23,"Thanks for asking and following up.

> fragment in which one field depends on another.

This is generally an indication that the schema does not reflect the needs of the client and should be changed. If field B depends on the output of field A then it should be a subfield. So instead of ` { fieldA, fieldB }` the schema should probably be `fieldA { fieldB }`.",josephsavona,2016-11-24 15:56:58
1454,2016-11-25 11:19:05,"@josephsavona, thanks for clarification",maxpolski,2016-11-24 15:56:58
1453,2016-11-23 05:35:25,"i'm use react-relay v0.9.3, graphql v0.7.2 and graphql-relay v0.4.3

components has this fragment:
<S_CODE_TOKEN>

request payload in chrome dev tool
<S_CODE_TOKEN>

Response from server
<S_CODE_TOKEN>",jeongsd,2016-11-23 22:46:21
1453,2016-11-23 22:46:21,"Yup! Per the [specification for `@include`](http://facebook.github.io/graphql/#sec--include), this directive is not supported on fragment definitions. If this was allowed then you could have nonsensical GraphQL where the fragment definition had `@include(if: $cond)` and a reference to it had `@skip(if: $cond)`. Instead, put the condition on the fragment spreads.",josephsavona,2016-11-23 22:46:21
1453,2016-11-24 07:22:06,"thanks response @josephsavona,
so how can use fragment spreads with `@include`directive in relay createContainer fragment?

i'm use fragment spreads with `@include`like this
<S_CODE_TOKEN>

then relay change fragment spreads to fragment definitions
<S_CODE_TOKEN>

then `FRAGMENT_DEFINITION ` error occur


and fragment spreads with `@include`directive work in 
[relay playground](https://facebook.github.io/relay/prototyping/playground.html#source=%2F**%0A%20*%20Copyright%20(c)%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0A%2F%2F%20Welcome%20to%20Relay.%0A%2F%2F%20Allow%20us%20to%20introduce%20you%20to%20the%20four%20elements.%0A%0Aclass%20Hello%20extends%20React.Component%20%7B%0A%20%20render()%20%7B%0A%20%20%20%20%2F%2F%20Relay%20will%20materialize%20this%20prop%20based%20on%20the%0A%20%20%20%20%2F%2F%20result%20of%20the%20query%20in%20the%20next%20component.%0A%20%20%20%20const%20%7B%20hello%2C%20world%20%7D%20%3D%20this.props.greetings%3B%0A%20%20%20%20if(!hello)%20return%20%3Ch1%3Ehellow%20undefined%3C%2Fh1%3E%0A%20%20%20%20return%20%3Ch1%3E%7Bhello%20%2B'%20'%20%2B%20world%7D%3C%2Fh1%3E%3B%0A%20%20%7D%0A%7D%0AHello%20%3D%20Relay.createContainer(Hello%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20This%20GraphQL%20query%20executes%20against%0A%20%20%20%20%2F%2F%20the%20schema%20in%20the%20'schema'%20tab%20above.%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20To%20learn%20more%20about%20Relay.QL%2C%20visit%3A%0A%20%20%20%20%2F%2F%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fapi-reference-relay-ql.html%0A%20%20%20%20greetings%3A%20()%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20...%40include(if%3A%20true)%7B%0A%20%20%20%20%20%20%20%20%20%20hello%0A%20%20%20%20%20%20%20%20%20%20world%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D)%3B%0A%0A%2F**%0A%20*%20%231%20-%20Your%20React%20components%0A%20*%20This%20will%20look%20familiar%20to%20React%20developers.%0A%20*%0A%20*%20To%20learn%20more%20about%20React%2C%20visit%3A%0A%20*%20%20https%3A%2F%2Ffacebook.github.io%2Freact%0A%20*%2F%0Aclass%20HelloApp%20extends%20React.Component%20%7B%0A%20%20render()%20%7B%0A%20%20%20%20%2F%2F%20Relay%20will%20materialize%20this%20prop%20based%20on%20the%0A%20%20%20%20%2F%2F%20result%20of%20the%20query%20in%20the%20next%20component.%0A%20%20%20%20return%20%3CHello%20greetings%3D%7Bthis.props.greetings%7D%2F%3E%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%232%20-%20Relay%20containers%0A%20*%20Compose%20your%20React%20components%20with%20a%20declaration%20of%0A%20*%20the%20GraphQL%20query%20fragments%20that%20fetch%20their%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-containers.html%0A%20*%2F%0AHelloApp%20%3D%20Relay.createContainer(HelloApp%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20show%3A%20true%2C%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20This%20GraphQL%20query%20executes%20against%0A%20%20%20%20%2F%2F%20the%20schema%20in%20the%20'schema'%20tab%20above.%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20To%20learn%20more%20about%20Relay.QL%2C%20visit%3A%0A%20%20%20%20%2F%2F%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fapi-reference-relay-ql.html%0A%20%20%20%20greetings%3A%20()%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%20%20...%40include(if%3A%20%24show)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BHello.getFragment('greetings')%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D)%3B%0A%0A%2F**%0A%20*%20%233%20-%20Relay%20routes%0A%20*%20Define%20a%20root%20GraphQL%20query%20into%20which%20your%0A%20*%20containers'%20query%20fragments%20will%20be%20composed.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20routes%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-routes.html%0A%20*%2F%0Aclass%20HelloRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%20%20%2F%2F%20A%20unique%20name%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20%2F%2F%20Here%2C%20we%20compose%20your%20Relay%20container's%0A%20%20%20%20%2F%2F%20'greetings'%20fragment%20into%20the%20'greetings'%0A%20%20%20%20%2F%2F%20field%20at%20the%20root%20of%20the%20GraphQL%20schema.%0A%20%20%20%20greetings%3A%20(Component)%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20GreetingsQuery%20%7B%0A%20%20%20%20%20%20%20%20greetings%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment('greetings')%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0A%2F**%0A%20*%20%234%20-%20Relay%20root%20containers%0A%20*%20Compose%20a%20Relay%20container%20with%20a%20Relay%20route.%0A%20*%20This%20enables%20Relay%20to%20synthesize%20a%20complete%20query%0A%20*%20to%20fetch%20the%20data%20necessary%20to%20render%20your%20app.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20root%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-root-container.html%0A%20*%2F%0AReactDOM.render(%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BHelloApp%7D%0A%20%20%20%20route%3D%7Bnew%20HelloRoute()%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A)%3B%0A&schema=%2F**%0A%20*%20Copyright%20(c)%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aimport%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%7D%20from%20'graphql'%3B%0A%0Aconst%20GREETINGS%20%3D%20%7B%0A%20%20hello%3A%20'Hello'%2C%0A%20%20world%3A%20'world'%2C%0A%7D%3B%0A%0A%2F**%0A%20*%20Objects.%0A%20*%20Build%20up%20a%20portrait%20of%20your%20data%20universe%0A%20*%20using%20the%20object%20type.%20Here%2C%20we%20define%20a%0A%20*%20type%20of%20object%20that%20has%20a%20'hello'%20field%0A%20*%20that%20is%20of%20the%20string%20type.%0A%20*%2F%0Aconst%20GreetingsType%20%3D%20new%20GraphQLObjectType(%7B%0A%20%20name%3A%20'Greetings'%2C%0A%20%20fields%3A%20()%20%3D%3E%20(%7B%0A%20%20%20%20hello%3A%20%7Btype%3A%20GraphQLString%7D%2C%0A%20%20%20%20world%3A%20%7Btype%3A%20GraphQLString%7D%2C%0A%20%20%7D)%2C%0A%7D)%3B%0A%0A%2F**%0A%20*%20The%20schema.%0A%20*%20Here%20we%20export%20a%20schema%20that%20offers%20one%20root%0A%20*%20field%20named%20'greetings'%2C%20and%20a%20method%20to%0A%20*%20resolve%20its%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20writing%20GraphQL%20schemas%20for%20Relay%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Fgithub.com%2Fgraphql%2Fgraphql-relay-js%0A%20*%2F%0Aexport%20default%20new%20GraphQLSchema(%7B%0A%20%20query%3A%20new%20GraphQLObjectType(%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20()%20%3D%3E%20(%7B%0A%20%20%20%20%20%20greetings%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20GreetingsType%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20Here%20we%20define%20a%20resolver%20that%20returns%0A%20%20%20%20%20%20%20%20%2F%2F%20the%20data%20defined%20above.%20Were%20this%20schema%0A%20%20%20%20%20%20%20%20%2F%2F%20executing%20on%20the%20server%20side%2C%20you%20could%0A%20%20%20%20%20%20%20%20%2F%2F%20write%20a%20resolve%20method%20that%20fetches%0A%20%20%20%20%20%20%20%20%2F%2F%20live%20data%20from%20a%20database.%0A%20%20%20%20%20%20%20%20resolve%3A%20()%20%3D%3E%20GREETINGS%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%2C%0A%20%20%7D)%2C%0A%7D)%3B%0A)",jeongsd,2016-11-23 22:46:21
1453,2016-11-24 07:34:55,"I see. What's happening here is that Relay is converting the anonymous fragment to a fragment definition, on which the directive is not allowed. Instead of moving the directive into an anonymous fragment, I would recommend moving it to where the fragment is referenced: have the parent component conditionally fetch the fragment if it isn't required. ",josephsavona,2016-11-23 22:46:21
1452,2016-11-22 17:46:25,"We have several queries written the same way. All of them are working except one.

There is no error but response is an empty array.

This is example of working query (Route and Container):

<S_CODE_TOKEN>
The response is expected:

<img width=""364"" alt=""screen shot 2016-11-22 at 6 42 12 pm"" src=""https://cloud.githubusercontent.com/assets/6722104/20534998/8ba6f588-b0e3-11e6-8551-a520a7202de1.png"">


Only one query returns an empty array:

<S_CODE_TOKEN>

Response is this:

<img width=""400"" alt=""screen shot 2016-11-22 at 6 43 57 pm"" src=""https://cloud.githubusercontent.com/assets/6722104/20535073/d1309528-b0e3-11e6-9b7d-3f89c33a2711.png"">


",nikolal,2016-11-23 12:17:52
1452,2016-11-22 17:48:11,"The second query only works if we query id and title.
If we add any other field, the query will return an empty array.",nikolal,2016-11-23 12:17:52
1452,2016-11-23 12:17:52,This is solved. I will close the issue.,nikolal,2016-11-23 12:17:52
1451,2016-11-21 20:09:23,The plugin currently depends on graphql 0.6 which can't properly parse schemas generated using graphql 0.8. It would be nice if releases stay somewhat aligned to avoid this.,janicduplessis,2016-12-17 18:13:33
1451,2016-11-21 21:54:10,"@janicduplessis We just updated the plugin to use 0.8.2. We'll try to cut a release sometime soon, but if you're blocked on this check out the version of the plugin on master.",josephsavona,2016-12-17 18:13:33
1451,2016-12-17 09:59:05,@janicduplessis Fixed in v0.10.0 https://github.com/facebook/relay/commit/cb23da262cc03118281c7fde12bc905e955ef321,gauravtiwari,2016-12-17 18:13:33
1450,2016-11-21 18:15:28,"When i try to set a variable, the component updates only after fetch is complete. Here is a sample code.

    class RelayExample extends React.Component {
      setVars() {
        this.props.relay.setVariables({id: '2'});
      };
      render() {
        console.log(this.props.relay.pendingVariables);
        return (
          <div>
            <button onClick={this.setVars.bind(this)}>set variable</button>
          </div>
        );
      }
    }
    
    RelayExample = Relay.createContainer(RelayExample, {
      initialVariables: {
        id: '1'
      },
      fragments: {
        userStore: ()=> {
          return Relay.QL`
          fragment on userStore {
             user(id:$id){
              email
             }
          }
          `;
        }
      }
    });
    
    ReactDOM.render(
      <Relay.RootContainer Component={RelayExample} route={new TestQuery()}/>,
        document.getElementById('app')
    );
When i press the button i get this result in console:
[![enter image description here][1]][1]


Even if i use forceUpdate right after the setVariables function, i get similar result.

    setVars() {
            this.props.relay.setVariables({id: '2'});
            this.forceUpdate();
    };

[![enter image description here][2]][2]

See also in [StackOverflow](http://stackoverflow.com/questions/40717117/react-relay-pendingvariables-always-null-after-setvariables)

  [1]: https://i.stack.imgur.com/2xJJl.png
  [2]: https://i.stack.imgur.com/3Ml4T.png",ssbeefeater,
1450,2016-11-22 13:52:19,"@unirey  As i can understand, according to [this](https://facebook.github.io/relay/docs/api-reference-relay-container.html#pendingvariables) example after a new variable is set, the component must update and the pendingVariables must be fulfilled so you can set a loading state or something. By the way, your example still gives me null.",ssbeefeater,
1450,2016-11-22 17:04:37,@unirey Yes everything is fine except that. I cant understand what is wrong,ssbeefeater,
1450,2016-11-23 02:59:04,"Thanks for reporting this. I suspect that this has to do with the readyState callback being called in a way that isn't perfectly in sync with React, such that props hasn't updated yet. 

Can you work around this? The pendingVariables should be correct whenever render is called. Similarly, within the readyState callback the pending variables are known (theyre whatever you passed to setVariables). ",josephsavona,
1450,2016-12-01 14:27:33,@josephsavona I have the same problem here. `pendingVariables` are never set for me. I'm using relay 0.9.3 and developing on react-native 0.37.,yachaka,
1450,2016-12-14 04:48:28,Same here for me..its always null,mathewsp79,
1450,2016-12-14 04:49:04,i tried various places to console.log..its never populated. i use ver 0.9.2,mathewsp79,
1450,2016-12-14 08:52:10,"For some reason, it is now working as expected for me, and I don't remember making changes to this part of the code.",yachaka,
1450,2016-12-29 15:30:57,"Having the same issue, using `react-relay@0.10.0` & `react@15.4.1` 😿 ",kostasmanionis,
1449,2016-11-19 12:34:00,"I have this Relay.QL:

<S_CODE_TOKEN>

When querying GraphQL using GraphiQL, I get the correct results.

When using relay. My `topics.slug` value is over written by the `question.slug`. Is this expected?",aizatto,2016-11-21 01:00:49
1449,2016-11-19 16:54:17,"Double check the `id`s of each object: the behavior you're describing is almost always the result of colliding IDs. 
",josephsavona,2016-11-21 01:00:49
1449,2016-11-20 01:54:09,"I'll check it out. Does this mean object's id in a relay application need to be unique?
",aizatto,2016-11-21 01:00:49
1449,2016-11-20 02:24:28,"Yup, per the [objeft identification specification](https://facebook.github.io/relay/docs/graphql-object-identification.html). 
",josephsavona,2016-11-21 01:00:49
1449,2016-11-21 01:00:49,"Damn, yes got caught by that. Thanks.",aizatto,2016-11-21 01:00:49
1448,2016-11-18 15:26:06,"I am attempting to render a component multiple times in a table (i.e. one instance of the component per table row). The component requires a Relay variable to be set to determine how to render the contents of the component.

I am setting this variable via a call to `this.props.relay.setVariables` in the component's `componentWillMount` lifecycle event. In my particular case, each of the components end up needing the same set of data from the server so I would expect that the first component to call `this.props.relay.setVariables` would result in a new fetch from the server but each subsequent component in the table would simply use the results of the fetch from the first component since the generated query is exactly the same for each component in the table.

However, what actually happens is that a new fetch is made for each component in the table which is terrible for performance. Is there some way to tell Relay to reuse the original fetch? I thought it was supposed to do this automatically by caching the queries.

FYI... the query is going through the `node` interface and the fragment type is an interface graph type.

This question was also asked on StackOverflow: http://stackoverflow.com/questions/40680185/calling-setvariables-is-forcing-a-refetch-from-the-server-instead-of-using-the-c",husterk,
1448,2016-11-18 17:54:00,"Relay does not currently coalesce identical queries into a single request, which would explain why you're seeing one request per component. One option is to implement such coalescing yourself in the network layer (e.g. keeping a map of query text + variables => request). However, this sounds like an anti-pattern. Why do the components not know their variables until mount? 
",josephsavona,
1448,2016-11-18 18:51:18,"In our current schema, the components rendered in the table (e.g. checklist items) must first query for the set of link types associated with each component and then based on the set of link types we make a determination as to whether or not we plan to load specific child components. Based on this determination we also want to dynamically control the data being queried by Relay / GraphQL since we are conditionally loading the child components.

Each of the child components has a common fragment based on an interface graph type and the data being loaded for this interface graph type is intended to be shared with all of the components in the table (so it should only be loaded once regardless of the number of rows in the table). However, each of the child components only needs a subset of the data available from the interface so we only want to load the appropriate amount of fields from the interface based on the overall set of child components expected to be rendered.

So, for example... if all of our components in the table are found to only need field1 and field2 from the interface type (based on the link types retrieved from the server) we don't want Relay to query for the additional fields on the interface type. However, if even just one of the components in the table also needs field3 then we would want Relay to also get the data for that field as well. Hopefully this makes sense.

I have put together a simplified code example of our fragment structures below for reference. Let me know if you need further details / explanation.

**COMPONENT: Table**

<S_CODE_TOKEN>

**COMPONENT: TableRow**

<S_CODE_TOKEN>

**COMPONENT: ChildComponent1**

<S_CODE_TOKEN>

**COMPONENT: ChildComponent2**

<S_CODE_TOKEN>
",husterk,
1448,2016-11-22 18:33:21,"I was able to work around this issue by moving the logic required to create the ""shouldLoadChildComponent1Fragment"" and ""shouldLoadChildComponent1Fragment"" Relay variables up to the Table component which is only rendered once on the page. I then forwarded the variables through the child components as required. This resulted in the data requests that I was expecting but unfortunately adds some data dependencies to the intermediary components that don't actually intend to use either the Relay variables or associated props.",husterk,
1448,2016-12-09 18:14:58,"@josephsavona I'm trying to figure out something in the same vein here. `setVariables` forces a refetch if the specific combination of variables hasn't been fetched before.

Curious if you have any thoughts; I tried to fully articulate my question here:
http://stackoverflow.com/questions/41051401/graphql-relay-filtering-ui
",voxmatt,
1448,2016-12-21 18:25:14,@voxmatt answered on SO!,josephsavona,
1448,2016-12-21 18:26:19,"@husterk Thanks again for filing this. I'm not immediately sure what the best approach is here, but the solution you described seems reasonable.",josephsavona,
1448,2016-12-22 17:30:25,@josephsavona thanks!,voxmatt,
1447,2016-11-16 11:34:59,"I need create class Relay.Mutation  to excute this query  graphQL  
`mutation Mutatiton {
  newSportunity(
    input: {
      sportunity:{
        title: ""aaa"",
        description: ""aaa"",
        address: {
          country: ""France"",
          city: ""Besançon"",
          zip: ""25000""
        }
      }
    }
  ){
  	title,
  	description
	}
}`

**in our query we have input argument for mutations.
how can i added input param with Relay.Mutation ?**

schema grapQL mutation : newSportunity(input: newSportunityInput): Sportunity

this is my class Relay.Mutation

`import Relay from 'react-relay';

export default class newActivityMutation extends Relay.Mutation {
    static fragments = {
        activity: () => Relay.QL`
            fragment on Sportunity {
                title
            }
        `,
    };

    getMutation() {
        return Relay.QL`
        mutation {
            sportunity
        }`;
    }
    getVariables() {
        return {
            title: ""test""
        };
    }
    getFatQuery() {
        return Relay.QL`
        fragment on Sportunity {
            title,
            id
        }
        `;
    }
    getConfigs() {
        return [{
            type: 'REQUIRED_CHILDREN',
            children: [Relay.QL`
            fragment on Sportunity {
                title,
                id
            }
            `]
        }];
    }
}`

how can i resolve this probleme ?

![mutation](https://cloud.githubusercontent.com/assets/12915009/20345647/6dc2ea08-abf8-11e6-8687-2225538b4697.png)

I just can’t make query graphQL work using Relay",Kottidev,
1447,2016-11-16 12:06:26,"Your mutation code looks correct.

First of all check via GraphiQL your mutation that it has `input` arg. And check that it works.

After that check that you provide the fresh schema file to your `babel-relay-plugin`. Regenerate schema.json and restart/rebuild your app.
",nodkz,
1446,2016-11-15 05:33:48,* Also fixes yarn.lock resolved module paths,gauravtiwari,2016-11-15 21:38:29
1446,2016-11-15 19:40:55,"@gauravtiwari Thanks for the PR. Due to internal configuration this isn't _quite_ as simple as just bumping the version number (and the plugin also needs changes to support things like null literals). I'm working on upgrading to 0.8.1 right now so this should be on master soon.
",josephsavona,2016-11-15 21:38:29
1446,2016-11-15 21:38:29,"I'm going to close this since I'm working on a change that includes this. Thanks for the contribution!
",josephsavona,2016-11-15 21:38:29
1446,2016-11-16 02:15:38,"Thanks @josephsavona 👍 
",gauravtiwari,2016-11-15 21:38:29
1445,2016-11-14 19:15:57,"Hello everyone!

Im currently having some troubles with `setVariables` on a child from the parent via a `ref`. The problem is that the child doesnt fetch new data at all even though `relay.variables` and `props.variables` is set to the new values. My current code:

Parent:
<S_CODE_TOKEN>
Child:
<S_CODE_TOKEN>
FeedRoute:
<S_CODE_TOKEN>
I expect this to fetch another `40` notifications to put into the feed. The query doesnt go at all and I get `""STORE_FOUND_ALL""` in `ReadyState`",proProbe,2016-12-06 21:05:11
1445,2016-11-23 17:34:16,"<S_CODE_TOKEN>

I'm not sure what `state.notifications` is, but it looks like you shouldn't maintain this state yourself as it should just be accessible via `relay.variables.first` right?",gre,2016-12-06 21:05:11
1445,2016-11-28 09:50:27,@gre I actually had that approach first. It still doesnt work :S,proProbe,2016-12-06 21:05:11
1445,2016-11-28 17:28:48,"It isn't immediately obvious what's going on here. It looks like there is some missing code in your example, such as how state.notifications is populated. I would suggest trying to remove any extraneous code and get as simple a repro case as possible. There is likely some detail that needs t be adjusted and which will probably be more obvious with a minimal repro setup. ",josephsavona,2016-12-06 21:05:11
1445,2016-11-28 17:34:51,"@josephsavona after sitting with it today, I actually realised that it was a bad implementation on the backend. It basically went like this:
1. user sends a query with `first: 10`
2. backend receives it and start the db-query
3. the db-query had a `limit( args(""first"") )` (for avoiding fetching the whole db)
4. the cursor and node resolvers interpreted this as `the db only has 10 entries`
5. user tries to fetch more and does a setvariables with `first: relay.variables.first + 10`
6. relay is smart and puts `after: id_of_entry_10`
7. but after only receiving `10 entries` from the db, relay knows that there is no more data to fetch
8. relay skips the fetch as there is no more data to fetch.

I realised that this was actually the problem. Im trying to go around it right now but Im not actually sure what ""the way to go"" is",proProbe,2016-12-06 21:05:11
1445,2016-11-28 17:47:46,"Hmm, it sounds like the issue is in your resolve function. I would double check the implementation (maybe use a unit test to isolate and quickly iterate on that function) and make sure it returns the correct page info. ",josephsavona,2016-12-06 21:05:11
1445,2016-11-28 17:51:37,@josephsavona you are certainly correct. Im trying to read more about this to get a better grasp of it. Im currently looking through https://facebook.github.io/relay/graphql/connections.htm#sec-Reserved-Types. Are there other good sources for this?,proProbe,2016-12-06 21:05:11
1444,2016-11-12 00:18:37,"Similar to #394 
I'm running into this error with <= IE10 and caused my site to break,
`Object doesn't support property or method 'getFragment'`

I tried using the 2 babel plugins that were mentioned in the original ticket, https://babeljs.io/docs/plugins/transform-class-properties/ and https://www.npmjs.com/package/babel-plugin-transform-es2015-classes
However, this error still occurs.

Could someone please help?",jaden-chen,2016-12-13 01:29:58
1444,2016-11-15 05:07:12,"I encountered the same error while using mutations. The solution outlined in #394 worked for me, so I had to replace the call to getFragment for all mutations like this - 

<S_CODE_TOKEN>
",eugene1g,2016-12-13 01:29:58
1444,2016-11-16 22:07:42,"@eugene1g, thanks for your help.

Looking at your example, does IE<=10 not complain about this line that you have in your code: `${WidgetChild.getFragment('widgetInfo')}`

If so, it's likely that your Babel config is working in addressing this IE issue. If you could share what Babel plugins you've included, that'll be greatly appreciated!
",jaden-chen,2016-12-13 01:29:58
1444,2016-11-17 04:20:44,"My full .babelrc file -

<S_CODE_TOKEN>

babelRelayPlugin.js

<S_CODE_TOKEN>
",eugene1g,2016-12-13 01:29:58
1444,2016-11-21 14:21:41,most likely due to https://babeljs.io/docs/usage/caveats/#classes-10-and-below-,edvinerikson,2016-12-13 01:29:58
1444,2016-12-13 01:29:58,"Thank you all for the help. I followed @eugene1g 's suggestions to ""replace the call to getFragment for all mutations"" and it's working for me now.",jaden-chen,2016-12-13 01:29:58
1444,2017-02-06 11:31:38,"I fixed it myself with following code on Mutation class
<S_CODE_TOKEN>
I found it better, because I don't need to handle it outside of Mutation and I need to write it only once for every mutation :)

Example:
<S_CODE_TOKEN>",svrcekmichal,2016-12-13 01:29:58
1443,2016-11-11 23:39:21,"I am using babel-polyfill.

`warning.js:36 Warning: Relay relies on polyfills for ES6 features in older browsers. Babel provides a good one: https://babeljs.io/docs/usage/polyfill/`

I keep getting this warning followed by:

`RelayTaskQueue.js:97 Uncaught TypeError: _promise2.default is not a constructor`

Not sure if it's related, but I also get the following warning:

<S_CODE_TOKEN>",griffinmichl,2016-11-13 02:55:46
1443,2016-11-11 23:42:09,"Someone else on stackoverflow is having the same issue: http://stackoverflow.com/questions/40552072/how-do-i-get-polyfills-to-work-with-relay
",griffinmichl,2016-11-13 02:55:46
1443,2016-11-13 10:16:21,"@griffinmichl did you find a solution? What was it?
",aizatto,2016-11-13 02:55:46
1443,2016-11-13 22:30:28,"It was a build issue. I had webpack resolving modules at `'.'`, which interfered with relay's internal imports.
",griffinmichl,2016-11-13 02:55:46
1443,2016-11-14 01:02:11,"I managed to fix the problem myself. The problem was that I was running on Mac OS X with a case **insensitive** file system.

I tried creating a disk image with case sensitivity, and it worked.  Followed instructions here. https://gist.github.com/dixson3/8360571 #
",aizatto,2016-11-13 02:55:46
1442,2016-11-11 11:27:37,,chentsulin,2016-12-14 02:31:48
1442,2016-12-14 02:06:33,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4324991).",facebook-github-bot,2016-12-14 02:31:48
1442,2016-12-14 06:23:16,"Thanks, @chentsulin. Merged!",wincent,2016-12-14 02:31:48
1441,2016-11-09 16:44:10,,lucasbento,2016-12-14 07:01:33
1441,2016-11-09 16:44:16,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!

**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.
",facebook-github-bot,2016-12-14 07:01:33
1441,2016-11-09 17:16:42,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-12-14 07:01:33
1441,2016-12-14 06:33:15,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4325907).",facebook-github-bot,2016-12-14 07:01:33
1441,2016-12-14 06:33:31,"Thanks @lucasbento, will merge.",wincent,2016-12-14 07:01:33
1440,2016-11-09 14:07:16,"The plugins config in the example `.babelrc` must be on the top level, not inside the presets array.",ctavan,2016-12-14 07:01:33
1440,2016-11-09 14:07:56,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!

**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.
",facebook-github-bot,2016-12-14 07:01:33
1440,2016-11-09 15:52:01,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-12-14 07:01:33
1440,2016-12-14 06:34:23,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4325909).",facebook-github-bot,2016-12-14 07:01:33
1440,2016-12-14 06:34:58,"Thanks, @ctavan! Will merge.",wincent,2016-12-14 07:01:33
1439,2016-11-09 13:18:47,"Hello Everyone!

Im currently using relay in a react-native app and am having some problem with `retries`. The problem is namely that the app doesnt seem to retry att all after a query timeouts. The error I get is `fetchWithRetries(): Failed to get response from server, tried 1 times.` where the networklayer config is
<S_CODE_TOKEN>
I expect that it should retry atleast 5 times and the error should be `fetchWithRetries(): Failed to get response from server, tried 6 times.`

**UPDATE**
To include some more errorstacks:
the readyState:
<S_CODE_TOKEN>
<S_CODE_TOKEN>
![screenshot from 2016-11-09 14-32-06](https://cloud.githubusercontent.com/assets/3802899/20140118/c12d1b24-a689-11e6-892b-2c56c46a04c0.png)",proProbe,2016-11-15 09:45:12
1439,2016-11-15 09:45:12,"Solved this by using https://github.com/nodkz/react-relay-network-layer instead
",proProbe,2016-11-15 09:45:12
1439,2016-11-15 09:48:05,"Related discussion https://github.com/nodkz/react-relay-network-layer/issues/22
",nodkz,2016-11-15 09:45:12
1438,2016-11-06 14:48:35,"Hello Everyone,

I have two different Relay.Renderer components that displays data about `posts`. The problem Im stumbeling upon is that the cache isnt used properly in one of the relay.renderer components. I have `list_posts` that looks something like:
<S_CODE_TOKEN>
I have then a `post` component that looks something like with its queryconfig in relay.renderer:
<S_CODE_TOKEN>
the `post`s data already exist in `list_posts` but the `post`-component still fetches the data from the server instead of just using the cache. Anyone who knows why?",proProbe,2016-11-06 21:21:39
1438,2016-11-06 20:18:36,"Great question. Relay can't infer how the `post` root call behaves - it doesn't know that it will return an object whose ID matches the argument id. Instead, use the `node(id: $id)` root call defined in the object identification spec. 
",josephsavona,2016-11-06 21:21:39
1438,2016-11-06 20:43:32,"@josephsavona thanks! it solved my situation. is this how you usually do it with `node(id: $id)`? Is this because Im using two different calls?
",proProbe,2016-11-06 21:21:39
1438,2016-11-06 20:50:25,"Yes, `node` is the recommended and supported way to refetch items by id. GraphQL does not impose any meaning to particular fields, so clients require either configuration or convention (node) to understand how root field may map to previously fetched data. 
",josephsavona,2016-11-06 21:21:39
1438,2016-11-06 21:21:39,"I'm going to close since there is a documented way to handle this case, but we're open to PRs that make it more obvious. What part of the docs did you look at? Where could we document this to be more obvious/clear?
",josephsavona,2016-11-06 21:21:39
1438,2016-11-06 21:25:28,"@josephsavona Im not sure where to read about this. I totally missed the section in https://facebook.github.io/relay/docs/graphql-object-identification.html#content which would probably help most people with this problem. If anything, maybe some more documentation about using multiple relay.renderers in the same app. 
",proProbe,2016-11-06 21:21:39
1437,2016-11-03 14:00:40,"Hello everyone.

Im currently using relay with react-native and have come to see some weird problems with the networklayer. It usually happens when the app is in the background and then started again. Im not quite sure where the problem originates from but seems to indicate that the networklayer doesnt exist even though it has been injected and used. Should also notice that this only happens on `ANDROID`.

The error is shown as following (Sorry for the wall of text): 
`Fatal Exception: com.facebook.react.common.JavascriptException: RelayNetworkLayer: Use `RelayEnvironment.injectNetworkLayer` to configure a network layer., stack:
_getImplementation@869:1960
supports@869:1809
a@874:185
<unknown>@874:1133
<unknown>@886:599
<unknown>@886:634
_invokeWithinScopedQueue@886:1052
<unknown>@886:920
_scheduleIfNecessary@886:1312
enqueue@886:686
E@874:925
run@874:4470
primeCache@695:1167
_runQueries@926:1341
componentDidMount@926:800
notifyAll@132:486
close@222:281
closeAll@138:1167
perform@138:615
perform@138:528
perform@131:1858
B@131:2030
closeAll@138:1167
perform@138:615
batchedUpdates@216:481
s@131:1064
u@223:69
enqueueSetState@223:1050
setState@28:347
value@601:1674
callback@629:3081
<unknown>@585:3881
<unknown>@630:696
<unknown>@65:562
callTimer@60:785
callTimers@60:1203
value@58:2827
<unknown>@58:1062
d@58:130
value@58:1034`

Some possible causes could be that we use `code-push` to push some updates to the user. The codepush replaces the js-files on the app itself and might perhaps cause errors with the networklayer. This is just a speculation and might not at all be the root of the problem. Anyways, is it possible to see where the problem stems from and solve this?",proProbe,2017-01-30 19:08:55
1437,2016-11-07 22:36:31,"After more discussions will fellow coders, it might be something with that the app somehow gets destroyed when laying in the background. Firing it up again has sometimes lead to this crash that you see above. Im still not sure how to solve this though and would happily discuss this with someone
",proProbe,2017-01-30 19:08:55
1437,2017-01-30 19:08:55,"Thanks for your question! Sorry for taking so long to respond. I think your hunch that code-pushing may be involved is worth following up on, but I'm basing that on intuition alone.

This isn't something we've seen here in our React Native apps. I don't think there's anything clear and actionable for us to do here, so I would suggest posting on a purpose-built Q&A forum like Stack Overflow. Would you like to post this question there with the tags #relayjs and/or #react-native? Feel free to link back here so that we don't lose track of it. In the meantime I am going to close this one out.",wincent,2017-01-30 19:08:55
1436,2016-11-03 10:35:38,"I'm using Webpack with babel-loader. So when I changing my GraphQL Schema, my `schema.graphql.json` file is rebuilt automatically. And babelRelayPlugin sends to console errors according to old schema.

But loaded instance of `babelRelayPlugin` in babel with webpack has no way to update the schema. Required full restart for webpack (and it takes minutes). This PR adds method `replaceSchema` to `babelRelayPlugin` for updating schema on the fly.

Right now my `./lib/babel-relay-plugin.js` for `babel-loader` in Webpack has following working code, which tracks changes and calls new `replaceSchema` method:
<S_CODE_TOKEN>

For testing you may use this built package (which contains code from this PR):
<S_CODE_TOKEN>",nodkz,2016-11-28 17:49:11
1436,2016-11-04 05:07:09,"@steveluscher please review this, and if it's ok bump new version. Thanks.
",nodkz,2016-11-28 17:49:11
1436,2016-11-07 03:48:49,"@josephsavona can you review it and publish?
",nodkz,2016-11-28 17:49:11
1436,2016-11-07 21:53:21,"@nodkz Thanks for the PR. I understand the use-case and that it is helpful to have the plugin reflect schema changes without completely restarting. However, this seems like something that should be achievable via plugin composition. My first thought would be to create a wrapper plugin that delegates all transform functions to an instance returned by `getBabelRelayPlugin`. Each time the schema changes, the wrapper would update that instance with a new Relay plugin.
",josephsavona,2016-11-28 17:49:11
1436,2016-11-10 12:48:45,"@josephsavona yep, plugin composition is the better way. But I did not do that cause: 
- don't know how to write babel plugin wrapper (and have no time right now for reading docs)
- I saw code that moves this plugin to first place in babel's plugin list (so wrapper should has same functionality).

So both of this causes brings me to current more simple solution ;) Will be cool if you accept this PR as intermediate solution.",nodkz,2016-11-28 17:49:11
1436,2016-11-28 17:49:11,"I'm going to close this. For now we recommend using composition, and we'll keep this use case in mind for future versions of the plugin.  ",josephsavona,2016-11-28 17:49:11
1436,2016-11-28 19:40:02,"Don't worry i agree with you. Composition will be better, but right not i'm focused on another things and have not free time for improvement. Will restart server again for schema changes. 

So let's waiting my or somebody fatigue.",nodkz,2016-11-28 17:49:11
1436,2016-12-22 18:04:36,"BabelRelayPlugin with hot reload 🔥
Reflect GraphQL Schema changes in json file without completely restarting dev server.
https://github.com/nodkz/babel-plugin-transform-relay-hot",nodkz,2016-11-28 17:49:11
1435,2016-11-03 00:33:18,"Similar issue to #861.

**versions:**
<S_CODE_TOKEN>

# Original query:
<S_CODE_TOKEN>
## variables:
`{id_0: ""UHJvZHVjdGlvbjoxNg=="", where_1: {archived: {eq: true}}}`

# Query after `setVariables`:
<S_CODE_TOKEN>
## variables:
`{id_0: ""UHJvZHVjdGlvbjoxNg=="", where_1: {archived: {eq: false}}}`

I'm using react-router to render the component with react-router-relay.
I'm not sure if i'm doing something wrong with the configuration or if it's just a bug on Relay's end.

Please help!",rohit-ravikoti,2017-03-01 15:30:16
1435,2017-03-01 14:08:33,@rohit-ravikoti did you figure out how to solve this issue? Got the same error using react-relay 0.10.0,d-winter,2017-03-01 15:30:16
1435,2017-03-01 15:30:12,"Hey @d-winter,
Yes I did! It was a problem with the server side implementation. Basically relay requires a `node` root field to be supplied on the graphql server:
http://stackoverflow.com/questions/33399901/in-relay-what-role-do-the-node-interface-and-the-global-id-spec-play

Hope this helps!",rohit-ravikoti,2017-03-01 15:30:16
1434,2016-11-02 13:15:49,"Hi. I'm working on GraphQL support for Flow. It should make Flow validate queries/fragments against schema and convert them to js types.

This tool must be framework agnostic, but should support all major libraries like Relay and Apollo. I saw Greg's and Joe's talks on how the new Relay is going to be different, but there are not many details. I understand that API is not stable yet, but I'd design the tool according to current ideas about Relay.

For example, it's not clear how fragment spreads will resolve fragment by it's name. Or how can custom directives alter the query result.

Can you give any info about the new Relay API?

cc @wincent ",pvolok,2016-11-04 19:56:50
1434,2016-11-02 15:49:23,"Great to hear that you're working on that. Given that GraphQL has rich type information, using Flow to bring that information into JavaScript is a great idea. I have vague awareness of some projects in the ecosystem that are trying to leverage the type info in the schema in related ways to improve developer experience by powering better autocomplete in IDEs and so forth. Likewise, at Facebook, we had an intern project earlier this year where we build a tool that generates Flow types for fragments that developers can import and use; this sounds similar to what you're proposing here. We have no concrete plans to share the project at this time (but nor do we have plans _not_ to share it); sorry to be non-commital but we're not actively working on the Flow type project so I don't have any knowledge about how/when/if it will be part of our open source efforts.

> it's not clear how fragment spreads will resolve fragment by it's name

At the moment we are employing a convention that names all fragments in the form `ModuleName_propertyName` (eg. `ProfileEditButton_viewer`). Given this convention, we can map back and forth between Relay 1 style fragment references (`${ProfileEditButton.getFragment('viewer')}`) and Relay 2 style fragment spreads (`...ProfileEditButton_viewer`).

The compiler itself operates on a corpus consisting of all the documents in the project, so it effectively has a global map of fragment names to fragment definitions.

> how can custom directives alter the query result

Custom directives do not directly alter the result as it is returned by the server. In fact, the directives are stripped by the compiler and they are not sent to the server (that is, they don't appear in the version of the query that gets persisted on the server). Instead, the directives are used as guidance for the compiler. Note that it's likely that we'll drop support for `@arguments` and `@argumentDefinitions` directives, at least in the short-term: in our experimentation in porting apps to the new APIs, we've tried to do so without the new directives, in order to see what development feels like without them, and it turns out that we've been able to get pretty far.

We'll be communicating a status update at some point (we already have a draft that is circulating internally), so my advice to you would be to proceed based on what is currently in Relay in the meantime. There is too much uncertainty to try and catch the moving target of what will and might be in the future, so it's best to shoot for what is known/shipped. I hope this helps.
",wincent,2016-11-04 19:56:50
1434,2016-11-03 13:54:12,"@wincent Would be great to see a tool that would actually generate the flowtypes based on fragments. Our project is currently doing this by hand and sure, it makes understanding the code a bit better but takes time when creating the types and when updating the schema. Hopefully generating the flowtypes would lessen the time needed on this!
",proProbe,2016-11-04 19:56:50
1433,2016-10-28 12:00:34,"Add Collibra to proud users of Relay.
",GrzegorzKaczan,2016-12-14 02:31:48
1433,2016-12-14 02:07:45,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4325005).",facebook-github-bot,2016-12-14 02:31:48
1433,2016-12-14 06:23:00,"Thanks, @GrzegorzKaczan. Merged!",wincent,2016-12-14 02:31:48
1432,2016-10-27 19:27:16,"Our Client Side default network layer seems to be losing values assigned in its constructor.  We are using a simple implementation provided in the docs. 

<S_CODE_TOKEN>

We found that we are not getting our httpOnly cookie in our mutation calls.  After alot of debugging we do not have the init variable in the sendMutation function.  When we manually add   `credentials: 'same-origin',` to the sendMutation call it works great.  We have /graphql behind NGINX as reverse proxy.  This scenario is executing a mutation that you need to be authenticated to perform. 

We log out the init object in the DefaultNetworkLayer constructor and also in the sendMutation function. We see it get defined initially but then we see it as a empty object when in sendMutation. 

Any advice on how we can make this persist?
",rterysen-openroad,
1431,2016-10-27 04:30:57,"A suggestion was made on https://github.com/facebook/relay/issues/586 but I thought using:

<S_CODE_TOKEN>

was a better idea since I would not need write a loop through the FileList (since its what is provided by the file input's API) to construct an array of files every time I need to send multiple files to a Mutation, this way Relay will handle it for me, I just need to write:

<S_CODE_TOKEN>
",nossila,
1431,2016-10-27 04:31:19,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!

**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.
",facebook-github-bot,
1431,2016-10-27 04:48:24,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,
1430,2016-10-26 06:45:55,"The [documentation](https://facebook.github.io/relay/docs/guides-mutations.html#required-children) says: `Data fetched as a result of a REQUIRED_CHILDREN config is not written into the client store`. Why is that, and would there be any way to enable it at Relay level?

I am experimenting with [Graphcool](https://graph.cool/) authentication, and when calling the `signinUser` mutation, it creates a new field `user` onto `viewer`. My understanding is that the only way to get the rest of the app consume this new data (e.g displaying a user badge in my page header with `viewer.user.givenName` and `viewer.user.picture`) is to add a `REQUIRED_CHILDREN` config.

However I am currently calling the `signinUser` mutation from a Redux saga, so from outside a React component (the Relay API allows this without problem). (Code is [here](https://github.com/sedubois/belong/blob/gql-auth/app/containers/LoginCallback/lib.js#L41))

But in this configuration, I therefore have no React component to update as suggested in the docs:

<S_CODE_TOKEN>

I suppose I could pass this result into the Redux store and update the component data through those means, but it seems quite cumbersome and would defeat the purpose of using Relay in the first place. The other option I see is to make sure the mutation is called from within a component, but it means I couldn't use sagas any more. I have a feeling Relay and sagas are just not made to be combined, but then I wonder how async state management (e.g doing an authentication flow with Auth0 in my case) is supposed to be done in a Relay app.

I suppose the Relay store is not updated for valid reason (it's not yet aware of any code that will need this) but I could make sure that the components which need the new data will re-render (e.g by making sure that they also consume pre-existing store data that gets changed, although that's a bit hacky). Could e.g a flag be added to Relay to force it to store the result of `REQUIRED_CHILDREN`?
",sedubois,2016-10-26 12:35:35
1430,2016-10-26 11:32:30,"I tried my best answering your question [on StackOverflow](http://stackoverflow.com/questions/40244124/updating-relay-store-after-graphcool-sign-in/40261075#40261075). Imo that's the best place to ask and answer it, as it isn't an issue with relay. So, you might want to consider closing this ;)
",Gregoor,2016-10-26 12:35:35
1430,2016-10-26 12:35:35,"Thanks a lot, I'll follow up there and with the graphcool team directly. Currently wondering why the mutations return a `viewer.user` with value `null`.
",sedubois,2016-10-26 12:35:35
1429,2016-10-25 15:40:19,"As discussed [here](https://github.com/facebook/relay/issues/1122#issuecomment-256062288), I believe there is a valid use case for being able to update the network layer (with `Relay.injectNetworkLayer`) without displaying a confusing warning in the console. For example, during a user sign-in flow.

Besides, the warning is actually displayed as an error, not a warning, in the Javascript console.
",sedubois,
1429,2017-01-27 19:06:39,"As workaround, I call this prior to calling injectNetworkLayer(): 
<S_CODE_TOKEN>

I haven't noticed any issues with it so far, but all I'm doing with the new layer is changing the header and token used for authentication.",hadfieldn,
1428,2016-10-25 03:14:56,"Hi. Is there a way to use same wrapped by Relay.Container component multiple times in one parent component? When i do something like in example, i get child variables messed up (it renders with last set variables).

<S_CODE_TOKEN>
",wealth,2016-11-03 08:02:17
1428,2016-11-02 06:47:16,"If you want to have different data in them you will need to use different fragments and queries for parent components
",edvinerikson,2016-11-03 08:02:17
1428,2016-11-03 08:02:17,"Thanks for the tip! I've solved it using Relay.Renderer to render each child with different queryConfig.
",wealth,2016-11-03 08:02:17
1427,2016-10-24 19:58:37,,dminkovsky,2017-01-12 08:56:35
1427,2017-01-06 14:52:18,"Any update on merging this? 🎉 

Thanks for the PR @dminkovsky!",schickling,2017-01-12 08:56:35
1427,2017-01-12 00:37:01,"Maybe Johannes can update my PR? I don't have time right now unfortunately.
Thank you.

On Wed, Jan 11, 2017 at 4:17 PM, Joseph Savona <notifications@github.com>
wrote:

> *@josephsavona* commented on this pull request.
> ------------------------------
>
> In README.md <https://github.com/facebook/relay/pull/1427>:
>
> > @@ -6,7 +6,7 @@ Relay is a JavaScript framework for building data-driven React applications.
>  * **Colocation:** Queries live next to the views that rely on them, so you can easily reason about your app. Relay aggregates queries into efficient network requests to fetch only what you need.
>  * **Mutations:** Relay lets you mutate data on the client and server using GraphQL mutations, and offers automatic data consistency, optimistic updates, and error handling.
>
> -[Learn how to use Relay in your own project.](https://facebook.github.io/relay/docs/getting-started.html)
> +[Learn how to use Relay in your own project](https://facebook.github.io/relay/docs/getting-started.html) or read a [comprehensive introduction](https://learnrelay.org).
>
> Would be easiest if @dminkovsky <https://github.com/dminkovsky> can
> update the PR directly.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/facebook/relay/pull/1427>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AANWZdnxZ6f4mn6t9scQnF0TZMDl2zggks5rRUbwgaJpZM4KfN1S>
> .
>
",dminkovsky,2017-01-12 08:56:35
1427,2017-01-12 08:29:35,Created a new PR #1498 instead.,schickling,2017-01-12 08:56:35
1427,2017-01-12 08:56:35,Thanks!,josephsavona,2017-01-12 08:56:35
1426,2016-10-23 18:35:24,,dminkovsky,2016-12-14 08:31:30
1426,2016-10-23 19:17:27,"Greetings. The build is failing, but not due to my changes, I think. Cheers.
",dminkovsky,2016-12-14 08:31:30
1426,2016-12-14 06:53:35,"Thanks for this, @dminkovsky. Will merge.",wincent,2016-12-14 08:31:30
1426,2016-12-14 06:53:47,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4325951).",facebook-github-bot,2016-12-14 08:31:30
1425,2016-10-23 13:33:46,"The Star Wars reference may not be known universally, especially to an international audience, so a link to the wiki might help someone who is unfamiliar.

Completed CLA
",DanielRHayes,2016-12-14 07:16:39
1425,2016-10-23 13:34:23,"Thank you for your pull request. We require contributors to sign our Contributor License Agreement, and yours has expired.

Before we can review or merge your code, **we need you to email cla@fb.com** with your details so we can update your status.
",facebook-github-bot,2016-12-14 07:16:39
1425,2016-10-23 13:35:33,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-12-14 07:16:39
1425,2016-12-14 06:44:42,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4325930).",facebook-github-bot,2016-12-14 07:16:39
1425,2016-12-14 06:45:01,"Thanks, @DanielRHayes! Will merge.",wincent,2016-12-14 07:16:39
1424,2016-10-22 04:03:02,"it's actually not necessary to use passPerPreset for the Relay plugin.

when `passPerPreset` is true, will show error as follow on React Native:
`Note: The code generator has deoptimised the styling of ""/Users/yutin/Develop/bunninn/client/mobile/node_modules/immutable/dist/immutable.js"" as it exceeds the max of ""100KB""`

:)

ref. https://github.com/babel/babel/issues/4230#issuecomment-246128790
",yutin1987,
1424,2017-03-27 04:58:59,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!

**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.",facebook-github-bot,
1424,2017-03-27 06:14:50,Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!,facebook-github-bot,
1423,2016-10-21 14:51:44,"I try to use relay with postgresql and I'm not sure if the error I'm facing is relay or postgresql related. https://github.com/calebmer/postgraphql/issues/177

I get:

<S_CODE_TOKEN>

EDIT: It turned out that it's a configuration problem with postgraphql. Please close
",valorize,2016-12-20 22:37:55
1423,2016-12-20 22:37:55,Thanks for the follow-up!,josephsavona,2016-12-20 22:37:55
1422,2016-10-21 13:56:29,"# What's up

Resolves https://github.com/facebook/relay/issues/1242

Adds documentation for the `@relay(plural: true)` directive in the relay docs. This should help new adopters understand how to use it.

I placed it inside the `Relay.QL` section but if you guys feel it should be somewhere else just let me know.
",josercruz01,2016-10-21 20:31:45
1422,2016-10-21 14:45:41,"@facebook-github-bot shipit
",wincent,2016-10-21 20:31:45
1422,2016-10-21 18:57:45,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4059829).
",facebook-github-bot,2016-10-21 20:31:45
1421,2016-10-20 06:49:23,"Relay depends on core-js twice:
1. relay -> [babel-runtime ^6.6.1](https://github.com/facebook/relay/blob/7d5e9165ede146c91b3f0b6583f28f6687289eeb/package.json#L32) -> [core-js ^2.1.0](https://github.com/babel/babel/blob/68cdb2133d8b4a0a684c4c0ffa71932a213941df/packages/babel-runtime/package.json#L9)
2. relay -> [fbjs ^0.8.1](https://github.com/facebook/relay/blob/master/package.json#L33) -> [core-js ^1.0.0](https://github.com/facebook/fbjs/blob/d54d3e0e5ad7eb4cc42a22c9470e06a1aaae9456/package.json#L89)

These two versions aren't semver compatible, so it means a project that includes relay will have two copies of core-js in use. It'd be nice to collapse this dependency into a single version of core-js.

You can probably fix this by depending on [fbjs 0.9.0-alpha.1](https://github.com/facebook/fbjs/blob/master/packages/fbjs/package.json#L61) but maybe that's labelled alpha for a reason?
",dmnd,
1421,2017-01-30 19:24:05,"Well spotted! Thanks for bringing this up @dmnd.

Some dev dependencies (like `react`, `react-dom`) end up depending on a non-alpha version of `fbjs`. I know they're just dev dependencies, but I'm inclined to wait until the next major updates there as well and do it all in one fell swoop. What do you think?",wincent,
1421,2017-01-30 22:58:47,"I'm using Relay in production, so in the interest of asset sizes, I'd prefer to collapse the duplicate dependencies sooner where possible 😉 

Who do we need to convince to release a proper version of fbjs?",dmnd,
1421,2017-01-30 23:04:38,"First thing's first is probably opening an issue on the repo, but I see you just did that... I can also ping internally to ask why we have the alpha release at all anyway (it's not tagged in GitHub).",wincent,
1421,2017-01-31 17:44:04,"I don't think the double dependency is much of an issue since `fbjs` only uses `es6/set` and `es6/map` for a total of **~9kb**, whereas the latest version of `babel-polyfill` import all the `core-js` library for a total of **~89kb**.
I think sticking to an earlier version of `babel-polyfill` would be better, I just tried successfully `babel-es6-polyfill` now `core-js` is **~25kb**, I think knowing what is exactly needed in `core-js` would reduce the bundle size further.

Speaking of bundle size; I hope `relay 2` will be sensible to it, and would allow modular import;  **~214kb / ~75kb gziped** is a bit too much. And Preact compatibility would be super https://github.com/developit/preact/issues/411.

I am really exited about `relay 2`! Keep up the good work :+1: Thanks",YasserKaddour,
1421,2017-01-31 19:10:58,Yep @YasserKaddour. I'd like to see more granular modular imports moving forward too. Let's make it happen.,wincent,
1421,2017-01-31 20:06:28,:tada: @wincent good to hear. Can I know what `babel-polyfill` is used for exactly ? Thanks ,YasserKaddour,
1421,2017-02-01 01:39:30,"@YasserKaddour, I believe it provides the regenerator runtime (which we're not currently using, but could use in the future for `async` support) and the so-called `core-js` package, which has a broad set of ES5/ES6 polyfills. At some point it would be desirable to make it possible to bring-your-own-polyfill, so that if users knew they only had to support modern environments they could just drop the polyfill altogether.",wincent,
1421,2017-02-01 08:32:59,"+1 for the size reduction 
Relay takes currently about a quarter of my app bundle ",mattecapu,
1421,2017-02-01 09:41:13,"Sorry, I wasn't clear; I wanted to know what subset of es5/es6 function is used by relay? and why use a polyfill instead of a transpiler? 
Aren't we already bringing our own polyfill since it up to the user to add `import 'babel-polyfill'` in his app, and chose what version to install?
",YasserKaddour,
1421,2017-02-01 18:18:06,"> I wanted to know what subset of es5/es6 function is used by relay?

I could give you a semi-accurate answer off the top of my head, but your best bet is probably to have a skim through the source code and have a look.",wincent,
1420,2016-10-19 16:55:43,"Hello everyone,

I'm having a hard time trying to implement a login mutation.
I don't understand what I should put in the `getConfigs()` method in order for Relay to update my `viewer` prop ?

My Root Query has a `viewer` field of type `User` that returns the current logged user.
My `LoginMutation` returns a `User` type.
Here is my `LoginMutation` :

<S_CODE_TOKEN>

Thank you for your help
",yachaka,2016-10-20 08:28:52
1420,2016-10-20 03:49:53,"This is to me is not an issue/bug.
If you have questions/need helps, please refer to [here](https://facebook.github.io/relay/support.html)
[Here](http://stackoverflow.com/questions/32535141/relayjs-authentication-using-relay-which-mutation-to-use) is a simliar question
",chungwong,2016-10-20 08:28:52
1420,2016-10-20 08:28:52,"You're right. I did some research but I can't find a clear answer, which isn't a hack.
Thanks for the links, I'm closing this.
",yachaka,2016-10-20 08:28:52
1420,2016-12-05 09:13:54,"@yachaka Have you found a solution to this? I think this is a legitimate use case for mutations, yet when I come across supposed solutions like [this](http://stackoverflow.com/questions/32535141/relayjs-authentication-using-relay-which-mutation-to-use) and implement it the same way, there is no callback whatsoever despite the server definitely returning data to the client.",Naoto-Ida,2016-10-20 08:28:52
1420,2016-12-05 09:16:32,"@Naoto-Ida The best solution I found is to reset the environment. Don't use `Relay.RootContainer` but `Relay.Renderer`, pass it in the `environment` prop, and reset it along logout.",yachaka,2016-10-20 08:28:52
1420,2016-12-05 09:20:01,"@yachaka I see, so we might have different issues and I may have been confused.

My issue is a bit more primitive in that there is nothing being received on the app side after the mutation. I've seen people doing implementations like [this](https://github.com/yongjz/relay-graphql-example/blob/04a77ce1a148626102b6f292dc51524b5d02712a/js/mutations/LoginMutation.js#L40), but shouldn't the `id` field in `user` not be able to be requested at this point? All I want to do is pass an `email` and `password` through the mutation and return a user.",Naoto-Ida,2016-10-20 08:28:52
1420,2016-12-05 11:42:56,"If it doesn't mutate the client, why do you want to use a mutation ?",yachaka,2016-10-20 08:28:52
1420,2016-12-05 11:45:42,"Sorry I was lacking information.
We assign a token to the user when they login to any of our apps.
If they've already logged in before in that specific app, the existing one for that app is returned.
If not, a new one is created. This is why I have it as a mutation and not a query.",Naoto-Ida,2016-10-20 08:28:52
1419,2016-10-19 13:42:57,"Subclasses of `RelayDefaultNetworkLayer` can change the formatting of error messages without having to override `sendMutations` & `sendQueries`. As discussed in #1245 
",deviousdodo,
1419,2016-10-19 13:43:47,"Thank you for your pull request. We require contributors to sign our Contributor License Agreement, and yours has expired.

Before we can review or merge your code, **we need you to email cla@fb.com** with your details so we can update your status.
",facebook-github-bot,
1419,2016-10-19 13:44:15,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,
1418,2016-10-19 04:27:46,"Is there a way for Flow to typecheck props directly passed to a Relay wrapped component?

<S_CODE_TOKEN>
",mwalkerwells,2017-01-31 00:01:41
1418,2016-10-19 05:10:11,"It's obvious to me now, but the type definitions are not included in the build. Are there plans for this?
",mwalkerwells,2017-01-31 00:01:41
1418,2016-11-15 19:40:10,"@mwalkerwells did you see this issue: https://github.com/facebook/relay/issues/1064? It appears to be an open issue that has gathered some support but I don't believe it is being actively worked on
",Gasparila,2017-01-31 00:01:41
1418,2017-01-31 00:01:41,"Sorry for the slow response here.

We're currently in the process of rolling out a new core and set of APIs that we built last year and have been testing in production in FB apps. Part of this is the ability to generate Flow type declarations for mutation inputs and also for component props. As such, there is nothing to actually implement here; we just need to finish shipping the new core. If you look on the `master` branch, you'll see this is already underway, and will continue to ship the remaining pieces over the coming weeks/months. As there's nothing directly actionable here, I am going to close this for now, but I want to thank you for raising the issue. We appreciate your contribution!",wincent,2017-01-31 00:01:41
1418,2017-01-31 00:25:35,"This was mentioned in the [recent team sync](https://github.com/facebook/relay/blob/master/meta/meeting-notes/2017-01-17-team-sync.md#updates) too: 

> Getting automated Flow type generation working in www.",dmnd,2017-01-31 00:01:41
1417,2016-10-18 15:44:19,"Afaik it's not possible to track the ""upload progress"" of mutations. This is a show stopper for using mutations for file uploads and support should be added. I also posted a question on stackoverflow: http://stackoverflow.com/questions/40103779/how-to-subscribe-to-progress-event-of-relay-graphql-mutation
",gucki,
1417,2017-01-24 20:41:30,"It's fairly easy to implement a `sendMutation` method of a network layer with `XMLHttpRequest` that would report back the progress, but I can't find a way to forward the progress back to the observer, it seems that `RelayMutationRequest` abstracts the mutation away and you don't have access to the original mutation object (into which observer could inject custom methods).

Any ideas? 💡",sjchmiela,
1416,2016-10-16 18:04:43,"I am trying to use react-native + relay + [ex-navigation](https://github.com/exponentjs/ex-navigation), and having a problem with babel compilation.

ex-navigation uses (babel-preset-react-native-stage-0)[https://github.com/skevy/babel-preset-react-native-stage-0] so I have to add it to my .babelrc

Here's how my .babelrc looks like with ex-navigation:

<S_CODE_TOKEN>

It was working well when I was using the following config before using ex-navigation:

<S_CODE_TOKEN>

Now that it uses `react-native-stage-0/decorator-support` instead of `react-native`, it errors with the following error message:

SyntaxError app/node_modules/@exponent/ex-navigation/src/ExNavigationStack.js: Method has decorators, put the decorator plugin before the classes one.

Any thoughts on what this is about?
",joonhocho,2016-10-17 12:50:28
1416,2016-10-16 23:16:25,"<S_CODE_TOKEN>

drop passPerPreset. 
",chirag04,2016-10-17 12:50:28
1416,2016-10-17 12:50:22,"Thanks! It worked for me.
I removed extra parenthesis for relay plugin, too.
Here's my final babelrc that works:

<S_CODE_TOKEN>
",joonhocho,2016-10-17 12:50:28
1415,2016-10-10 06:59:48,"I'm using ReactJS, Relay Framework and GrapthQL. This is the layout component where i use relay to get data:

<S_CODE_TOKEN>

The problem is: when i run the page, it show the error message:

> <S_CODE_TOKEN>

The query using GrapthQL return valid data so i don't think problem is the query
",kakariko-village,2016-12-22 03:55:45
1415,2016-10-10 17:14:51,"This is most likely caused by rendering the container outside of a RelayRenderer/RelayRootContainer.
",josephsavona,2016-12-22 03:55:45
1415,2016-12-22 03:55:45,@kakariko-village Were you able to resolve this? I'm going to close due to inactivity - my comment above explains the typical cause of this error.,josephsavona,2016-12-22 03:55:45
1414,2016-10-08 11:45:32,"I'm using latest relay 0.9.3.  I have a relay container like this (beware, some coffeescript ahead):

<S_CODE_TOKEN>

In my react component I'm having a select which fires `@props.relay.setVariables(brandId: id)` when it's changed.

Everything works as expected, but a few warnings are logged:
1. When the component is rendered: ""Warning: RelayContainer: Expected query variable `loadModels` to be initialized in `initialVariables`."".
2. When `setVariables` is called: ""Warning: RelayContainer: component `Constructor` was rendered with variables that differ from the variables used to fetch fragment `root`. The fragment was fetched with variables `{""brandId"":null,""loadModels"":false}`, but rendered with variables `{""brandId"":""QnJhbmQtMjA1"",""loadModels"":true}`. This can indicate one of two possibilities: 
   - The parent set the correct variables in the query - `Constructor.getFragment('root', {...})` - but did not pass the same variables when rendering the component. Be sure to tell the component what variables to use by passing them as props: `<Constructor ... brandId={...} loadModels={...} />`.
   - You are intentionally passing fake data to this component, in which case ignore this warning.""

When I remove the `prepareVariables` method, add `loadModels: false` to `initialVariables` and add `loadModels`to the `@props.relay.setVariables(brandId: id, loadModels: id?)` it works as before but this time without any warnings.

Bug of relay or my fault?
",gucki,2017-01-30 23:46:18
1414,2016-10-08 18:08:47,"The first warning is legit: you must specify a default value for all variables. Use null for variables that you will actually initialize in prepareVariables. 

The second warning about mismatched fetched/rendered variables looks like a false positive. 
",josephsavona,2017-01-30 23:46:18
1414,2017-01-30 23:46:18,"I believe there's nothing further actionable here so I am going to close it out. (Also worth noting, `prepareVariables` is now considered ""legacy"" API, and is being replaced by a new core and set of APIs that are currently landing on the `master` branch in stages, and will continue to roll out over the coming weeks/months.)

Thanks for posting the issue!",wincent,2017-01-30 23:46:18
1413,2016-10-07 20:43:23,"Is there a way to apply ranged add to array of nodes coming from the server?

An example would be a todo app with a few filters: Mine, Unassigned, Done. I want to allow the user to select multiple conversations and assign them or mark them as done or some other bulk action. With a mutation I can send the array of ids and the action and do the proper task there but I have no idea how to deal with the return nodes. Ideally the server would return an array of nodes and I could run the getConfigs on each individual node. Is there something already in place to deal with bulk actions? I know you can RANGE_DELETE/NODE_DELETE with multiple IDs but I need to remove them from one list and add them to another so I would need to use RANGE_ADD and apply it to each node. I would greatly appreciate any help.
",birge,2017-01-31 00:43:57
1413,2017-01-31 00:43:57,"Thanks for your question, and sorry that it took us a while to respond to it! I think your best bet here may be just to refetch the entire range in response to a bulk operation like this. You can use `'refetch'` as a `rangeBehavior`, although this isn't explicitly called out [in the docs](https://facebook.github.io/relay/docs/guides-mutations.html) (the full list of possible mutator constants can be found [here](https://github.com/facebook/relay/blob/81f8cf92d240cb1cd6fd7cc2263a51c58b2b5a19/src/legacy/mutation/GraphQLMutatorConstants.js#L15-L19)). [This article](http://mgiroux.me/2016/the-mysterious-relay-range-behaviours/) may also prove helpful if you need more flexibility in handling range mutations.

For future reference, I'd encourage you to use a purpose-built Q&A forum like Stack Overflow for questions like this (as we want to keep the GitHub tracker a high-signal place for tracking bugs and features). Use the tag #relayjs and post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs",wincent,2017-01-31 00:43:57
1412,2016-10-07 11:44:16,"here is my mutation

<S_CODE_TOKEN>

so from what i know relay intersects fatQuery with configs to generate its schema for response data in this case this is a just created node and _id is a fake id 
what happens is that relay doesn't include the restaurant at all in the response data although the mutation finishes i cant retrieve the id with the mutation what should i do 
",amgadserry,2017-03-22 11:48:06
1412,2016-10-24 21:39:08,"Hi @amgadserry,

The fatQuery specifies all the things that can change. Are you sure that the ID of a restaurant would change (not sure whether Relay can handle that).
There are two other requirements to get the required response:
- the graphql server has to actually return the fields in the payload (that has to be done explicity)
- relay intersects the fat query with what is already tracked about that object (e.g. restaurant), afaik that would lead to nothing being returned when no field of that object is tracked

If you've already solved it for yourself, consider closing the issue (and leaving your solution for others to find).
",Gregoor,2017-03-22 11:48:06
1411,2016-10-07 04:54:23,"(*This has been asked on [SO](http://stackoverflow.com/questions/39783947/localizing-graphql-results-when-using-relay) over a week ago, but thought it be better to go to the source).
What is the recommended way of localizing results, and how would I pass a locale?

We have a multilingual system, which means that the results are localized. So we have an argument called lang which is passed down to the field resolvers. Queries are written as such:

<S_CODE_TOKEN>

Which would return:

<S_CODE_TOKEN>

This is possible due to the resolver for translatable fields looking like this (note that I am using dataloader):

<S_CODE_TOKEN>

If a translation exists, it will use that instead of the original value. This was working fine until we introduced Relay into our project.

We want to utilize Relay's node, and have made it partially work, i.e.:

<S_CODE_TOKEN>

But, since using node can't take arguments like viewer can, there is no way to pass the language.

How do you guys at Facebook deal with language in general, regardless of using Relay with GraphQL?
",Naoto-Ida,2016-10-16 11:12:59
1411,2016-10-07 06:19:42,"投稿してくれてありがとうございます！

This is a great question. I believe that the way we handle this is implicitly. As in, both the authenticated user and their language preference are part of the GraphQL executor context, as opposed to being passed explicitly as arguments to any field. 

Cc @dschafer - any suggestions here?
",josephsavona,2016-10-16 11:12:59
1411,2016-10-07 06:35:24,"> As in, both the authenticated user and their language preference are part of the GraphQL executor context, as opposed to being passed explicitly as arguments to any field.

Yep, that's exactly what we do, and we haven't run into too many issues.
",dschafer,2016-10-16 11:12:59
1411,2016-10-07 06:35:41,"First of all let fix args names in your `resolver(obj, args, context, info)`:

<S_CODE_TOKEN>

DO NOT use `rootValue` for session data (request). `rootValue` is same for all requests, but `context` not. So use `context` for storing `language` value per request.

To solve your problem write `Viewer.resolve` in such manner:

<S_CODE_TOKEN>

Viewer resolver should write `language` to `context`.

So after that all underlying resolvers should get lang via context:

<S_CODE_TOKEN>
",nodkz,2016-10-16 11:12:59
1411,2016-10-07 07:00:11,"Thank you guys for the input (and the Japanese too!).

I think the first thing I need to confirm is my understanding of `viewer`.
In Facebook's case, `viewer` is a representation of the user, correct?
And how would you go about passing ""who"" the user is? And if theres a generic list of articles, but targeted articles based on who the `viewer` is, how would one go about doing that?

<S_CODE_TOKEN>

Sorry for the mountain of questions. My team is very excited about the possibilities, but am worried about our implementation of things being uncommon, so we want to get it right. Would love to get 1:1 with one of your for about 30 min. if any of you are gracious enough.

What do you do in cases where they aren't logged in? 
Our user base is mainly Japanese, but have a lot of English speakers as well,
so I want to avoid defaulting to Japanese as much as possible, i.e. modifying _nodkz_'s example:

<S_CODE_TOKEN>

Btw, I am using it for our music news app, which gets its data from our brand new GraphQL API.
",Naoto-Ida,2016-10-16 11:12:59
1411,2016-10-09 12:15:20,"> In Facebook's case, viewer is a representation of the user, correct?

For FB, I think that's correct. But I've seen quite a number of Relay implementations that use this field for dual purposes: 'a currently authenticated user' and 'a gateway to GraphQL information' (ala File Explorer). So `viewer.stockPrices()` can exist as a field, even if it has nothing to do with the 'current user'. For us, we don't use this naming convention at all, and replace it with a business-level name (in music, an equivalent could be a field called `catalogue`).

> And how would you go about passing ""who"" the user is?

Our frontend injects the `Authorization` header with every Relay query (using [react-relay-network-layer](https://github.com/nodkz/react-relay-network-layer)). For all requests, the auth token is extracted from this header, converted to the domain-level ACL object/rules, and attached to the root-level `context` for GraphQL to consume. Therefore, the 'current user' information is available across all fields, including `viewer`, `node`, and any others. Then each field is free to respond with generic public information, or user-specific information for those who are logged in.
Similar to auth, another strategy for you could be to use the express route handler to check the request header for `Accept-Language` (or a custom parameter passed by the frontend), and then set `context.language` to the appropriate value for GraphQL to use (and it will be available in the `node` field as well). Then the `lang` argument can be an optional override for any specific field (if required).
",eugene1g,2016-10-16 11:12:59
1411,2016-10-11 02:23:54,"@eugene1g Thanks for sharing your implementation ideas!
It's very interesting to hear how other people have implemented it.
I've never thought of using `Accept-Language`... will give it a go.
",Naoto-Ida,2016-10-16 11:12:59
1411,2016-10-15 21:11:23,"@Naoto-Ida. Just like @eugene1g  described above in our App we parse select `Headers` and make them available the GraphQL context.
",rturk,2016-10-16 11:12:59
1411,2016-10-16 11:12:59,"@rturk Thank you! We went with the discussed implementations and our service is running better than ever. Hopefully soon we'll be able to apply for getting on the list of apps using Relay. Thank you guys.
",Naoto-Ida,2016-10-16 11:12:59
1411,2016-10-16 18:47:01,"@Naoto-Ida no need to apply, just send us a PR to add your company's name to the USERS.md file. 
",josephsavona,2016-10-16 11:12:59
1411,2016-10-17 04:39:11,"@josephsavona Great! Thank you so much.
",Naoto-Ida,2016-10-16 11:12:59
1410,2016-10-06 22:47:01,"I'm trying to create a simple mutation that creates a node of type Restaurant 
here is the scheme for the mutation 

<S_CODE_TOKEN>

here is the relay mutation 

<S_CODE_TOKEN>

when ever i try to commit the mutation using 

<S_CODE_TOKEN>

i get this error Uncaught Invariant Violation: RelayMutationQuery : Invalid field name on fat query, `data`. 
although data is on the payload and mentioned in the fatQuery
",amgadserry,2016-10-07 10:55:42
1410,2016-10-07 06:11:19,"At a quick glance, I suspect this is because the `data` fiekd is not a top level field of the mutation response. Try changing the fields change config to restaurant (parent of data). 
",josephsavona,2016-10-07 10:55:42
1410,2016-10-07 06:32:37,"@josephsavona  i have tried that but then the mutation query generated doesn't include data at all and still the onSuccess doesn't fire so the only data returned from the server is clientMutationId the mutation does happen but nothing happens on the client side
",amgadserry,2016-10-07 10:55:42
1410,2017-01-13 17:34:23,"@amgadserry 

How did you solve this issue?",nikolal,2016-10-07 10:55:42
1410,2017-01-13 19:35:25,@nikolal We'd recommend using the new static mutation API instead: https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html#content,josephsavona,2016-10-07 10:55:42
1409,2016-10-06 10:41:41,"this is the first time i use setVariables so there is a good chance iam doing something wrong. 
so i have a schema that looks like this simplified 

<S_CODE_TOKEN>

when i try setting the restaurant id to fetch in the initialVariables like this everything works fine 

<S_CODE_TOKEN>

here is the request body notice the empty variables object 

<S_CODE_TOKEN>

when i try to use setVariables as shown below i get it fails to fetch the data

<S_CODE_TOKEN>

and here is the error i recieve and the request body notice the id_0 in the variables list 

<S_CODE_TOKEN>

finally here is the code i used to set the relay variables which is in the constructor of my component
    `this.props.relay.setVariables({id: ""57f54e77b6dd4a3f84e65b7a"",restaurantExists:true});`
",amgadserry,2016-10-06 19:44:10
1409,2016-10-06 19:30:37,"Your GraphAPI object needs to implement `nodeInterface` (the way your restaurantType does with `interfaces: [nodeInterface]`). You might need to modify the functions passed to [`nodeDefinitions`](https://github.com/graphql/graphql-relay-js#object-identification) in order to get it to show up correctly.
",akre54,2016-10-06 19:44:10
1409,2016-10-06 19:44:10,"Thanks for the answer @akre54! That looks like the problem, so I'll close this out. 
",josephsavona,2016-10-06 19:44:10
1409,2016-10-06 22:21:24,"@akre54  that was it thank you 
",amgadserry,2016-10-06 19:44:10
1408,2016-10-05 18:12:55,,josephsavona,2016-11-28 17:50:18
1408,2016-10-05 18:13:12,"@facebook-github-bot import
",josephsavona,2016-11-28 17:50:18
1408,2016-11-28 17:50:18,"Weird, this landed but the PR didn't close. ",josephsavona,2016-11-28 17:50:18
1407,2016-10-04 12:17:31,"Hi, I have this nested create mutation with my graphql backend:

<S_CODE_TOKEN>

Each post has one `Extra` model, that just contains a `text`.
Now my question:
Does relay update the local representation of model `B` properly if I create `B` nested in `A` in one create mutation?

Thanks!
",timsuchanek,2017-01-31 00:35:30
1407,2017-01-31 00:35:30,"Thanks for the question, @timsuchanek!

This seems like the sort of thing that you could confirm by testing. Without running it myself, I believe the answer is ""probably""; it may depend on whether the object at `extra` has an `id` and whether it is already in the store. If not, it's possible that you could use [`REQUIRED_CHILDREN`](https://facebook.github.io/relay/docs/guides-mutations.html#required-children) to force an arbitrary set of fields to be fetched, although you would be responsible for doing something with the data in the mutation callback.

However, one thing to bear in mind is that the former Relay mutation API is now considered ""legacy"". We have a new, static mutation API (`Relay.GraphQLMutation`) that you can use to force fetching of exactly the data you require for a given mutation without any of the magic and inference of fat and tracked queries. Additionally, we're rolling out an even newer API built on top of a new core (see recent work on the `master` branch, and further pieces that we'll be merging in over the coming weeks/months); all of this is static too, so moving to `Relay.GraphQLMutation` right now is a worthwhile incremental step.

Going to close this for now. Please comment again if you have anything further to add. For questions, we'd also encourage you to use a purpose-built Q&A forum like Stack Overflow, and use the tag #relayjs? You're morel likely to get a timely response, and others are more likely to find it there too. If you do, post a link to your Stack Overflow question here, so that others can benefit from it if they stumble across this.",wincent,2017-01-31 00:35:30
1406,2016-10-04 07:03:39,,matclayton,2016-12-22 17:31:34
1406,2016-10-04 07:04:34,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-12-22 17:31:34
1406,2016-10-04 07:19:05,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-12-22 17:31:34
1406,2016-12-22 17:01:48,@facebook-github-bot shipit,josephsavona,2016-12-22 17:31:34
1406,2016-12-22 17:01:57,"@josephsavona has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.facebook.com/D4362329).",facebook-github-bot,2016-12-22 17:31:34
1405,2016-10-04 05:11:03,"I also posted the [same question](http://stackoverflow.com/questions/39844538/id-becomes-too-long-when-using-mongodb-and-relayjs-together) on stackoverflow.

Here's one example of how long one global ID can be:
`UHJvZmlsZUluZm9Tb2NpYWxMaW5rOjU3ZThmMjczODUwYTc5ZDM1ZDA1MDkxMA==`

Its length is proportional to type name's length, so for some types with long names it becomes too wasteful...

Note that these IDs will be added to URLs like `/user/:userId/posts/:postId`.

Any strategies to shorten length of IDs?
How does Facebook tackle this problem?

Is there a way to use some kind of enum mapping for type names when forging global ids?
For example,
`const typeEnum = {User: 1, Post: 2, ...};`
And use the enum when encoding global ids instead of original type names?
",joonhocho,2016-10-10 11:19:55
1405,2016-10-09 23:06:14,"It is not really ""Relay""'s problem. It is a graphql-relay's issue. Or strictly speaking, it is not an issue at all.
You can override this function if you need something specific  this https://github.com/graphql/graphql-relay-js/blob/v0.4.3/src/node/node.js#L87
",chungwong,2016-10-10 11:19:55
1405,2016-10-10 11:19:55,"@chungwong Thank you for the clarification! 
",joonhocho,2016-10-10 11:19:55
1404,2016-10-03 23:20:03,"Currently, `isScalarAndEqual` only treats values that have type `object` as non-scalar: https://github.com/facebook/relay/blob/v0.9.3/src/container/RelayContainerComparators.js#L55

Notably, this check doesn't cover functions. While this isn't causing actual problems for us, it's a bit surprising – given the name of `isScalarAndEqual`, it's surprising that it treats functions as ""scalar"".

cc @itajaja
",taion,2017-01-31 00:26:16
1404,2017-01-31 00:26:16,"Thanks for bringing this up @taion.

My reading of this is that the behavior is as intended, so we shouldn't change that, but the naming has caused confusion, which suggests that there might be a better name for this.

The intent here is that we should consider the props equal if they are identical (`===`) and have the same contents. Because values which are ""containers"" (things like objects, and arrays, for which `typeof` is going to be `'object'`) can retain their identity (`===`) but actually have their contents changed, we want to exclude those from the check. Functions, on the other hand, are seldom treated as ""containers"" (even though, sure, you can mutate them by changing their properties), so we want to allow the common case (people passing callback functions as props) to not trigger any unnecessary operations, provided the same functions (`===`) continue to be passed in.

So, I'm going to close this in the interests of keeping the issue tracker clean, but if you can come up with a better name for `isScalarAndEqual` that doesn't lead to confusion, please do submit a PR and we'd be happy to look at it. Naming is hard, so in thinking about this for a few seconds, all that comes to my mind is `isNonObjectAndEqual` or `isEqualAndNonObject`. Even those have some conceptual muddiness, because there is a number of JS types that return `'object'` for `typeof`, but it may still be an improvement. I guess if all else fails and we can't solve this with a better name, we could add a comment above the function as a last resort.

Thanks once again for your contribution!",wincent,2017-01-31 00:26:16
1403,2016-10-03 12:12:43,"I can't understand if my use case is possible. Say a page loads and a connection is fetched with `first = 10`. Then when I scroll down I fetch another 10 by issuing `relay.setVariables({ first: first + 10 })`. And the newly fetched edges are appended to the connection.

Here's how it looks like:

<S_CODE_TOKEN>

Then say I've got a network disconnect and after reconnect I want to fetch everything that is above `cursor 1` and it must be prepended to the connection. In my mind I have to issue `relay.setVariables({ last: 10, before: 'cursor 1' })`.

So that the page would look like:

<S_CODE_TOKEN>

But I do not understand how to write a proper fragment for such a connection. It seems like I can only specify `connection(first: $first)` but not `connection(first: $first, last: $last, before: $before)`.

Thanks.
",GrigoryPtashko,
1403,2016-10-06 12:55:11,"I've prepared the playground for this. Here's the [link to the playground](https://facebook.github.io/relay/prototyping/playground.html#source=class%20Route%20extends%20Relay.Route%20%7B%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20viewer%3A%20%28Component%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20%20%20query%20%7B%0A%20%20%20%20%20%20%20%20%20%20viewer%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'viewer'%29%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%0A%20%20static%20routeName%20%3D%20'Route'%3B%0A%7D%0A%0Aclass%20MsgsComponent%20extends%20React.Component%20%7B%0A%20%20static%20propTypes%20%3D%20%7B%0A%20%20%20%20viewer%3A%20React.PropTypes.object%2C%0A%20%20%7D%3B%0A%0A%20%20render%28%29%20%7B%0A%20%20%20%20console.log%28'render'%2C%20this.props.viewer.msgs%29%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B%28%29%20%3D%3E%20this.loadMoreBefore%28%29%7D%3ELoad%20more%20before%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%7Bthis.props.viewer.msgs.edges.map%28%28%7B%20node%2C%20cursor%20%7D%29%20%3D%3E%20%28%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%3E%7Bnode.id%7D%26nbsp%3B%7Bnode.text%7D%26nbsp%3B%7Bcursor%7D%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%29%29%7D%0A%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B%28%29%20%3D%3E%20this.loadMoreAfter%28%29%7D%3ELoad%20more%20after%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%20%20%0A%20%20loadMoreBefore%28%29%20%7B%0A%20%20%20%20this.props.relay.setVariables%28%7B%0A%20%20%20%20%20%20last%3A%201%2C%0A%20%20%20%20%20%20before%3A%20'500'%2C%0A%20%20%20%20%20%20first%3A%20null%2C%0A%20%20%20%20%7D%29%3B%0A%20%20%7D%0A%0A%20%20loadMoreAfter%28%29%20%7B%0A%20%20%20%20this.props.relay.setVariables%28%7B%0A%20%20%20%20%20%20first%3A%20this.props.relay.variables.first%20%2B%201%2C%0A%20%20%20%20%7D%29%3B%0A%20%20%7D%0A%7D%0A%0Aconst%20MsgsContainer%20%3D%20Relay.createContainer%28MsgsComponent%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20first%3A%2010%2C%0A%20%20%20%20after%3A%20null%2C%0A%20%20%20%20last%3A%20null%2C%0A%20%20%20%20before%3A%20null%2C%0A%20%20%7D%2C%0A%0A%20%20fragments%3A%20%7B%0A%20%20%20%20viewer%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20%20%20fragment%20on%20Viewer%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20msgs%28first%3A%20%24first%2C%20after%3A%20%24after%2C%20last%3A%20%24last%2C%20before%3A%20%24before%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20id%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20text%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cursor%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20pageInfo%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20hasNextPage%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20hasPreviousPage%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%20%20%0AReactDOM.render%28%3CRelay.RootContainer%20Component%3D%7BMsgsContainer%7D%20route%3D%7Bnew%20Route%28%29%7D%20%2F%3E%2C%20mountNode%29%3B%0A&schema=import%20%7B%0A%20%20GraphQLNonNull%2C%0A%20%20GraphQLID%2C%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%7D%20from%20'graphql'%3B%0A%0Aimport%20%7B%0A%20%20connectionArgs%2C%0A%20%20connectionDefinitions%2C%0A%20%20nodeDefinitions%2C%0A%20%20cursorForObjectInConnection%2C%0A%20%20fromGlobalId%2C%0A%7D%20from%20'graphql-relay'%3B%0A%0Afunction%20getMsgs%28%29%20%7B%0A%20%20const%20msgs%20%3D%20%5B%5D%3B%0A%20%20for%20%28let%20idx%20%3D%200%3B%20idx%20%3C%201000%3B%20idx%2B%2B%29%20%7B%0A%20%20%20%20msgs.push%28%7B%0A%20%20%20%20%20%20id%3A%20idx%2C%0A%20%20%20%20%20%20text%3A%20%60msg%24%7Bidx%7D%60%2C%0A%20%20%20%20%20%20publishDate%3A%20idx%2C%0A%20%20%20%20%7D%29%3B%0A%20%20%7D%0A%0A%20%20return%20msgs%3B%0A%7D%0A%0Avar%20msgs%20%3D%20getMsgs%28%29%3B%0Avar%20PAGE_LOAD_TIMESTAMP%20%3D%20500%3B%0A%0Avar%20%7BnodeInterface%2C%20nodeField%7D%20%3D%20nodeDefinitions%28%0A%20%20%28globalId%29%20%3D%3E%20%7B%0A%20%20%20%20const%20%7Btype%2C%20id%7D%20%3D%20fromGlobalId%28globalId%29%3B%0A%20%20%20%20if%20%28globalId%20%3D%3D%200%29%20%7B%0A%20%20%20%20%20%20return%20%7B%20id%3A%200%20%7D%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20msgs%28id%29%3B%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%28obj%29%20%3D%3E%20%7B%0A%20%20%20%20console.log%28'nodeDefinitions%20obj'%2C%20obj%29%3B%0A%20%20%20%20%0A%20%20%20%20if%20%28obj.id%20%3D%3D%3D%200%29%20%7B%0A%20%20%20%20%20%20return%20viewerType%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20msgType%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%29%3B%0A%0Avar%20msgType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Msg'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20%7B%0A%20%20%20%20%20%20type%3A%20new%20GraphQLNonNull%28GraphQLID%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20text%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0Avar%20%7BconnectionType%3A%20msgConnection%2C%20edgeType%3A%20msgEdge%7D%20%3D%0A%20%20connectionDefinitions%28%7Bname%3A%20'Msg'%2C%20nodeType%3A%20msgType%7D%29%3B%0A%0Avar%20viewerType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Viewer'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20%7B%0A%20%20%20%20%20%20type%3A%20new%20GraphQLNonNull%28GraphQLID%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20name%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%0A%20%20%20%20%7D%2C%0A%20%20%20%20msgs%3A%20%7B%0A%20%20%20%20%20%20type%3A%20msgConnection%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28_%2C%20args%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20console.log%28'args'%2C%20args%29%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20%28args.first%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20if%20%28!args.after%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20const%20conn%20%3D%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20edges%3A%20%5B%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20pageInfo%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20hasNextPage%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20hasPreviousPage%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20startCursor%3A%20PAGE_LOAD_TIMESTAMP%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20endCursor%3A%20PAGE_LOAD_TIMESTAMP%20%2B%20args.first%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20%28let%20idx%20%3D%200%3B%20idx%20%3C%20args.first%3B%20idx%2B%2B%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20conn.edges.push%28%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cursor%3A%20PAGE_LOAD_TIMESTAMP%20%2B%20idx%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20node%3A%20msgs%5BPAGE_LOAD_TIMESTAMP%20%2B%20idx%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20conn%3B%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20let%20afterIdx%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20%28%3B%20afterIdx%20%3C%20msgs.length%3B%20afterIdx%2B%2B%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28msgs%5BafterIdx%5D.publishDate%20%3D%3D%20parseInt%28args.after%29%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20console.log%28'afterIdx'%2C%20afterIdx%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20const%20conn%20%3D%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20edges%3A%20%5B%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20pageInfo%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20hasNextPage%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20hasPreviousPage%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20startCursor%3A%20PAGE_LOAD_TIMESTAMP%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20endCursor%3A%20PAGE_LOAD_TIMESTAMP%20%2B%20args.first%20-%201%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20%28let%20idx%20%3D%20afterIdx%20%2B%201%3B%20idx%20%3C%3D%20afterIdx%20%2B%20args.first%3B%20idx%2B%2B%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20conn.edges.push%28%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cursor%3A%20msgs%5Bidx%5D.publishDate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20node%3A%20msgs%5Bidx%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20conn%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%20else%20if%20%28args.last%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0Avar%20queryType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Query'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20node%3A%20nodeField%2C%0A%20%20%20%20viewer%3A%20%7B%0A%20%20%20%20%20%20type%3A%20viewerType%2C%0A%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%7B%20id%3A%200%20%7D%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%20%20%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20queryType%2C%0A%7D%29%3B).

The idea is that I can load `first + N` but cannot load `last + K` **before** the first `cursor`.

I'll duplicate the code (without the schema) here (I'm taking it from the playground I've just mentioned).

<S_CODE_TOKEN>
",GrigoryPtashko,
1403,2016-10-13 08:27:35,"I have same usecase.
But it looks like it's not possible to use both last and first on the same container?
see related https://github.com/facebook/relay/issues/1170 & https://github.com/facebook/relay/issues/540
",gre,
1403,2016-10-30 13:51:04,"can't we use to different connections as a workaround for now?

like:

<S_CODE_TOKEN>

and then concatenate them?
",sibelius,
1403,2016-11-07 12:57:24,"@sibelius I did not try it this way.. But the idea looks promising. I've solved my problem with graphql subscriptions that prepend a bunch of new edges after the network reconnect.
",GrigoryPtashko,
1402,2016-10-03 09:40:11,"I'm trying to let users ""retry"" a mutation if it failed, e.g. if there was network issues. I'm following [this guide](http://mgiroux.me/2016/relays-apply-update-function/) to accomplish this.

However, when I call `transaction.recommit()`, an error is thrown from `RelayMutationQueue._get`: `RelayMutationQueue: '0' is not a valid pending transaction ID.`.

Is this expected? Is there another, documented, way of achieving this?

I'm creating the transaction in a component method:

<S_CODE_TOKEN>

Then I'm trying to recommit using this method:

<S_CODE_TOKEN>
",mikberg,
1401,2016-09-30 21:46:46,"I ran into an issue trying to make common Mutation classes (so as to abstract common functionality). Consider this interface:

<S_CODE_TOKEN>

and these Mutation classes:

<S_CODE_TOKEN>

And this server response:

<S_CODE_TOKEN>

Relay complains when trying to merge the response, it seems like the payload key `""node""` is problematic:

<S_CODE_TOKEN>

This is caused by a call to `store.getDataID(""node"")`, which isn't necessary since the response contains an `""id""` (`ID in payloadData === true`), so we can skip the call to `store.getDataID`.
",tomconroy,2016-11-04 18:31:37
1401,2016-11-03 18:02:21,"@josephsavona any feedback on this?
",tomconroy,2016-11-04 18:31:37
1401,2016-11-03 21:08:31,"Sorry for the delay. This looks good. Usually we'd ask for a unit test, but this is simple and safe enough that let's just ship it.
",josephsavona,2016-11-04 18:31:37
1401,2016-11-03 21:08:36,"@facebook-github-bot import
",josephsavona,2016-11-04 18:31:37
1401,2016-11-03 21:08:56,"@josephsavona has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4126973).
",facebook-github-bot,2016-11-04 18:31:37
1401,2016-11-04 20:38:19,"@tomconroy thanks for this!
",josephsavona,2016-11-04 18:31:37
1400,2016-09-30 09:33:46,"As this [GraphQL issue](https://github.com/graphql/graphiql/issues/58) mentions, there should be a single graphql dependency within `node_modules`. However, because `babel-relay-plugin`'s dependency on `graphql` is so tight (currently `graphql@^0.6.0`), tools such as [babel-plugin-react-relay](https://github.com/graphcool/babel-plugin-react-relay) are unable to meet this requirement, which makes use of [graphql-js configuration style](https://github.com/graphcool/graphql-config#use-local-schema-file-graphqljs) quite difficult ([discussion](https://github.com/graphcool/babel-plugin-react-relay/issues/10#issuecomment-250550062)). 

Would it be possible to loosen the required graphql version, or if not possible for some reason to ensure that it remains up to date with the latest available graphql? It might also help to make graphql a peer dependency? For example in monorepo projects with both frontend and backend, anyway it makes sense to explicitly reference `graphql` in `package.json`.
",sedubois,2016-12-22 03:57:35
1400,2016-09-30 09:41:34,"Here is some documentation on the currently necessary workarounds: https://github.com/graphcool/babel-plugin-react-relay/pull/11/files
",sedubois,2016-12-22 03:57:35
1400,2016-12-22 03:57:35,"The right answer here is for babel-relay-plugin to be more easily configurable. There are some related issues for this and we're iterating on the plugin at the moment, we'll definitely keep this in mind. Thanks for the feedback!",josephsavona,2016-12-22 03:57:35
1399,2016-09-30 03:07:04,"On client side, I have list of ids for nodes that I fetch from Firebase in real-time.
I want to fetch data for those ids using `node(id: $id)`.
I can manually create something like `nodes(ids: $ids)`, but the problem is that each node will not be cached by Relay based on its id.
To utilize proper caching by node id, the only option seems to be to run `node(id: $id)` for each id.
However, I don't know how to achieve this in one-round trip.

Any thoughts?
",joonhocho,2016-10-01 01:20:36
1399,2016-09-30 05:36:36,"The results of `nodes(ids: ...)` _are_ cached by id, per record. 
",josephsavona,2016-10-01 01:20:36
1399,2016-09-30 07:27:10,"Wait... there is `nodes(ids: ...)` ??? I thought there only was `node(id..)`. I feel stupid now.
",joonhocho,2016-10-01 01:20:36
1399,2016-09-30 07:59:23,"@josephsavona I am sorry, but I am using [graphql-relay-js](https://github.com/graphql/graphql-relay-js), but it only provides `nodeField` not `nodesField`, am I missing something?
",joonhocho,2016-10-01 01:20:36
1399,2016-09-30 17:28:22,"What I mean is that Relay understands this field. The response is expected to be an array where the Nth element corresponds to the Nth id of the `ids` argument array. 
",josephsavona,2016-10-01 01:20:36
1399,2016-10-01 01:11:58,"You can use any field, and as long as the returned object implements the `node` interface (and thus provides a globally unique ID), Relay will know how to cache it and later on use the `node` field to expand/refetch/efficiently load more fields.

For example, you can have a custom field `apples( ids: [42, 666, 1024], withShape: ""round""){ .... }` That field returns an array of `AppleType` object, and if AppleType is configure to implement the node interface then you can do the initial fetch in one pass from `apples(...)`, and the information will be cached by Relay. Then, when the user clicks on the apple to see more details, you want to fetch more data to get `apple.farmer.location` and Relay will do the partial query against the `node` field without you manually specifying it.
",eugene1g,2016-10-01 01:20:36
1399,2016-10-01 01:20:34,"Wow. I didn't know Relay was that smart. Thank you all! I will close this issue. 
",joonhocho,2016-10-01 01:20:36
1398,2016-09-28 04:02:31,"Im getting the problem related to `setVariables`like this case http://stackoverflow.com/questions/39292391/populating-an-autocomplete-with-data-from-relay-fails. It causes pagination, search, autocomplete failed. Many people is getting this bug & still don not have the answer.
I think it is really a **big problem** for Relay users with the recent version.
I hope that the whole community will join to give idea & solution for this problem.
Tks.

<S_CODE_TOKEN>

![screen shot 2016-09-28 at 10 21 54 am](https://cloud.githubusercontent.com/assets/1744522/18900370/dc8996d0-856a-11e6-8519-be7599c3773e.png)
![screen shot 2016-09-28 at 10 07 45 am](https://cloud.githubusercontent.com/assets/1744522/18900377/e60bad24-856a-11e6-8a1d-1b9214e12bd2.png)
",tranduchieu,2017-01-31 00:09:59
1398,2016-09-29 17:32:10,"try it like this.

<S_CODE_TOKEN>

also.. 
if its on a connection, do something like this

<S_CODE_TOKEN>
",andyfen,2017-01-31 00:09:59
1398,2016-12-20 18:03:00,Does @andyfen's suggestion help?,josephsavona,2017-01-31 00:09:59
1398,2017-01-31 00:09:59,"Thanks for the question, @tranduchieu. I'm going to optimistically close this on the assumption that @andyfen's suggestion was enough to get you unblocked.

For future reference, we'd encourage you to post questions like this to a purpose-built Q&A forum, such as Stack Overflow, where you are more likely to get a timely response (and where others are likely to benefit from the answer). You can use the tag #relayjs, and if you do post a question there related to this, please share the link here so that others can find it.

Thanks once again for bringing this up!",wincent,2017-01-31 00:09:59
1397,2016-09-27 17:03:34,"I'd like to use the Babel plugin without Relay (or at least without its containers). Currently, we have our queries in plain strings and send them using `DefaultNetworkLayer.p._sendQuery()` by putting them in fake `RelayQueryRequest`s.

What I want to do is send all these strings through `Relay.QL()` so they are validated against the schema.

I have explored the source code and came up with this:

<S_CODE_TOKEN>

The problem is while I expect to get the same string back when I call `queryRequest.getQueryString()`, I get:

<S_CODE_TOKEN>

How can I at least make Relay preserve my argument on the root field and not do aliasing?

Also can an API like this be made public? Relay could be a nice GraphQL client.
",AlicanC,2016-09-27 18:11:10
1397,2016-09-27 18:11:09,"Our primary goal is supporting development of React applications, but you can already use Relay.QL ""standalone"" if necessary. Relay auto-aliases fields in order to avoid naming conflicts, but you can read the data back out of the store with the aliases you expect:

<S_CODE_TOKEN>
",josephsavona,2016-09-27 18:11:10
1396,2016-09-27 00:16:00,"We are adding a warning to Jest for duplicated manual mock files. It
detected this duplicate file when run internally. The remaining versino
of this mock is in
`src/legacy/mutation/__mocks__GraphQLMutatorConstants.js`
That one is in the `__mocks__` file colocated with
`GraphQLMutatorConstants.js` so it seems more correct than the
duplicate.

Test plan:
Ran unit tests, lint, and typechecks
",flarnie,2017-01-29 05:03:42
1396,2017-01-29 05:03:42,Seems like the file was removed some other time.,kassens,2017-01-29 05:03:42
1395,2016-09-24 20:25:47,"Okay, this is a bit convoluted, so let me try and explain...
1. As recommended, I'm not implementing login using a mutation, instead what I'm doing is creating a new Relay environment after you login/logout, and re-rendering the entire app using the new environment instead.
2. After the re-render, the app correctly reflects the what that user should see. In my case, I'm seeing what products I've liked and what users i've followed.
3. I've added a simple counter that increments each time I create a new environment, this value is attached as a version attribute on the environment itself.
4. If I log in, the environment in React's context, correctly has the new version number. But when I trigger my like mutation using `this.props.relay.commitUpdate`, in `RelayMutation._resolveProps`, the `_environment` variable is still referencing the previous environment.
5. The end result is that the mutation doesn't work unless I allow the Like Button component to unmount (i.e. navigate to a different page and then come back) before attempting to click it.

**Summary**: I log in, create a new environment, as far as my components are concerned i'm using the new environment, but the internals of RelayMutation seems to be pointing at the previous one, even though i'm using `this.props.relay.commitUpdate`.

**Functioning workaround**: It I can use the relay environment in context to trigger the mutation instead and it works fine:

DOESN'T WORK

<S_CODE_TOKEN>

WORKS

<S_CODE_TOKEN>

Now obviously, i'd prefer to avoid using context directly in my components, but it seems like there's a bug in how commitUpdate and applyUpdate are being provided to containers.
",AndrewIngram,2017-01-31 01:59:57
1395,2016-09-24 20:29:04,"So I think the issue might be in `createContainerComponent` (`RelayContainer.js`), it copies applyUpdate and commitUpdate into state in its constructor (https://github.com/facebook/relay/blob/master/src/container/RelayContainer.js#L158-L159), but doesn't have any mechanism for handling the fact that the context can change. It feels like a classic context gotcha. I'm wondering if the use of context needs to be changed to being a function that returns the environment, rather than the environment itself.
",AndrewIngram,2017-01-31 01:59:57
1395,2016-09-24 20:54:02,"@AndrewIngram Thanks for reporting this. It sounds like we need to update the `relay` prop in `componentWillReceiveProps` to re-copy the `applyUpdate` and `commitUpdate` functions if the context changes
",josephsavona,2017-01-31 01:59:57
1395,2017-01-31 01:59:57,"I'm not sure if this is still an issue, but if it is, would you care to submit a PR for it? I don't think this is something we're going to address internally because we're aggressively prioritizing working on the roll-out of the new core and APIs (some work already landing on `master`, with more to come in the coming weeks/months), and aren't really working on the legacy core and API, unless we run into a specific bug that bites us internally (regardless, happy to entertain PRs). So I am going to close this for now, but in the meantime, thanks very much for the report.",wincent,2017-01-31 01:59:57
1395,2017-01-31 16:18:36,Looks like there's a PR for this issue here: https://github.com/facebook/relay/pull/1503,robrichard,2017-01-31 01:59:57
1394,2016-09-23 20:14:17,"I'm trying to optimistically update an item description. I'm passing in an item with an updated description to the mutation, but inside  the getOptimisticResponse this.props.item has the old value of the description.  The only reference to the passed in props is _unresolvedProps.  Is there a way to optimistically set the value of the item.desciption to the new description without accessing private properties or extending the constructor?
",walfly,2017-01-31 00:05:18
1394,2016-10-24 21:50:01,"Mutations can have fragments, you could have a fragment on the item, with the description. Then you can access it via `this.item.description`. For more info on it, look here: https://facebook.github.io/relay/docs/guides-mutations.html#a-complete-example
",Gregoor,2017-01-31 00:05:18
1394,2017-01-31 00:05:18,"Thanks for filing this issue @walfly and sorry for not responding sooner. I'm going to optimistically close this on the assumption that @Gregoor's tip was enough to unblock you and get you moving forward. Please feel free to comment again or open a new issue if you think you've found a bug. If you have a doubt a about usage (ie. a question, and you don't think it's a bug), I'd encourage you to post to Stack Overflow under the tag #relayjs; we generally try to keep the signal strong in the GitHub issue tracker (for issues and features), and think you're more likely to get a timely response if you use a purpose-built Q&A forum like Stack Overflow. If you do post a question there about this, please share a link to it back here so that anybody else stumbling across this can benefit from any answers there too.

https://stackoverflow.com/questions/ask?tags=relayjs",wincent,2017-01-31 00:05:18
1393,2016-09-21 22:37:13,,wincent,2016-09-22 15:31:39
1393,2016-09-21 22:39:16,"Thanks for importing. If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D3903944).
",ghost,2016-09-22 15:31:39
1392,2016-09-19 21:17:07,"I have the following code to execute my mutation:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

The `onFailure` works fine when I'm in debug mode (chrome debug) in my react native application (react-native: 0.32.0)

However my app crashes when running on ios simulator or iphone device

my graphql server return an error (`throw new Error('something went wrong')`)
",sibelius,2016-12-20 18:01:30
1392,2016-12-06 02:20:44,"@sibelius  I have a similar problem, but it also happens on `onSuccess`.
Could you possibly post part of the RelayContainer as an example?",Naoto-Ida,2016-12-20 18:01:30
1392,2016-12-06 10:03:26,I don't think that RelayContainer will help in this case,sibelius,2016-12-20 18:01:30
1392,2016-12-20 18:01:30,"Thanks for reporting this. Callbacks are definitely working in general, so this seems configuration-specific. Feel free to reopen if this is still an issue.",josephsavona,2016-12-20 18:01:30
1391,2016-09-19 17:03:26,"I have a GraphQL server (express + mongodb). I want to connect react relay to my existing GraphQL server which is running on a different machine.

I tried to search for it but no luck. Can any one guide me though ?
",hhashmi,2016-09-19 17:46:12
1391,2016-09-19 17:46:12,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",wincent,2016-09-19 17:46:12
1390,2016-09-19 15:34:31,,postalservice14,2016-09-19 18:31:40
1390,2016-09-19 17:46:35,"Thanks!
",wincent,2016-09-19 18:31:40
1390,2016-09-19 17:46:40,"@facebook-github-bot shipit
",wincent,2016-09-19 18:31:40
1389,2016-09-19 08:45:37,"Hello guys,

I'm just trying to make a simple infinite scroll with relay, but my app always crash when I call setVariables to increment connection count limit. 

This is my component

<S_CODE_TOKEN>

and Relay container

<S_CODE_TOKEN>

When I scroll down, Relay fetching stops work and throws me an errors
![snimka obrazovky 2016-09-19 o 10 44 06](https://cloud.githubusercontent.com/assets/15986928/18626548/0af5f5ca-7e56-11e6-98a0-b1f98e109159.png)

I've created an SO issue two days ago but with no help. 
http://stackoverflow.com/questions/39545844/relayjs-infinite-scroll
Thank you for any help
",davidfrtala,2016-09-19 17:17:04
1389,2016-09-19 17:21:02,"Closed, since this was caused by wrong server side `node` field implementation. Node refetch on `viewer` returned a `null` which causes the clientside problem
",davidfrtala,2016-09-19 17:17:04
1388,2016-09-15 02:05:10,"Hi everyone,

I'm still rather new to Relay so mind me if this has been already discussed.
Regarding `Relay.createContainer`, wouldn't it be more convenient to include a `mutations` field ?
Something along theses lines :

<S_CODE_TOKEN>

Mutations would then be accessible directly on `this.props` and wrapped by `commitUpdate`, Redux-style.
This would allow wrapped components to stay pure.

I understand this is easily achievable by supplying a middle component making the link, though it would make sense to include it by default.
",yachaka,2016-12-20 18:02:16
1388,2016-09-15 03:27:56,"What is the use case? Note that mutations can already be dispatched with `this.props.relay.{applyUpdate,commitUpdate}`, which makes the invocation of the mutation more explicit. Under your proposal, there is an extra level of indirection (ie developers would call e.g. `props.relay.mutations.likeSelf(props)` which would cause Relay to invoke the mutation... just seems like an extra indirection? Happy to discuss more if there's a use-case we're missing though!
",josephsavona,2016-12-20 18:02:16
1388,2016-09-15 04:18:30,"I was more thinking about binding the mutations directly on `this.props`, e.g. `this.props.likeSelf()`.
This would allow wrapped components to have no external dependency except from the props, which is great for modularity/testing.

For example, if I have a component <Button> with an `onClick` prop, I'd like somewhere it to commit a `LikePostMutation` and somewhere else a `CommentMutation`.

I could either create 2 additional components, i.e. `LikePostButton` and `CommentButton`, or if I'm lazy (which I am), I'd like a way to bind directly the mutation I want it to execute to the corresponding prop, like this (with an updated method name for clarity) :

<S_CODE_TOKEN>

But you're right ; it adds a small level of indirection.
And this is easily achievable with external code.
Me and my laziness !
",yachaka,2016-12-20 18:02:16
1388,2016-12-20 18:02:16,"Thanks for filing an issue and for the suggestion. It looks like the current API addresses this use-case, so I'll go ahead and close.",josephsavona,2016-12-20 18:02:16
1387,2016-09-14 14:23:49,"I would like to send some metadata in every query and mutation to my graphql server

is there any Relay/GraphQL way of handling this? or should I just add this info on http headers?
",sibelius,2016-11-18 07:08:35
1387,2016-11-18 04:45:03,"<S_CODE_TOKEN>

This is how I do it. Every other way would require too many schema, query, mutation modifications IMO. This way you can be sure that metadata is included with every request and is ready to be used on server-side.

This is especially useful if it's something ""global"" and/or you add it to `context`, _e.g_ locale or JWT token.
",unirey,2016-11-18 07:08:35
1387,2016-11-18 07:08:35,"Tks this works
",sibelius,2016-11-18 07:08:35
1386,2016-09-14 05:49:15,,kassens,2016-09-16 01:31:40
1385,2016-09-14 01:22:37,"It would be nice to allow DefaultNetworkLayer to use simple CORS so no pre-flight OPTIONS request is required when the GraphQL server is not on the same domain. (graphql.example.com vs www.example.com/graphql). However, the use of 

<S_CODE_TOKEN>

make the request unable to use simple cors.

https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS

<S_CODE_TOKEN>

'text/plain' is arguably the least wrong of the options. 
I tried to set the content-type header myself 

<S_CODE_TOKEN>

but that appears to be explicitly blocked: https://github.com/facebook/relay/blob/dcc97a431af719b71b62506ce8fe29b85158ef3e/src/network-layer/default/__tests__/RelayDefaultNetworkLayer-test.js#L58

Why can that header not be set? Is there another way to make sure the request is simple CORS?
",jakepusateri,2016-10-30 16:58:11
1385,2016-10-13 14:58:37,"I have the same issue. Is there any solution to this?
",nikolal,2016-10-30 16:58:11
1385,2016-10-13 16:18:01,"As a workaround, I would recommend implementing your own network layer. 
",josephsavona,2016-10-30 16:58:11
1385,2016-10-30 16:58:10,"I'm going to close this; we recommend crating your own network layer, the default one is a good point to start from. 
",josephsavona,2016-10-30 16:58:11
1384,2016-09-13 19:38:10,,akre54,2016-09-13 20:16:38
1384,2016-09-13 19:56:12,"Thanks!
",wincent,2016-09-13 20:16:38
1383,2016-09-13 15:44:59,"I linked to a series of React Native blog posts on our engineering blog.

Thanks for Relay! 🎉 
",alloy,2016-09-13 18:31:47
1383,2016-09-13 17:58:52,"Thanks!
",wincent,2016-09-13 18:31:47
1383,2016-09-13 17:58:58,"@facebook-github-bot shipit
",wincent,2016-09-13 18:31:47
1382,2016-09-13 13:57:52,,sgwilym,2016-09-13 18:31:47
1382,2016-09-13 17:59:28,"Thanks!
",wincent,2016-09-13 18:31:47
1382,2016-09-13 17:59:39,"@facebook-github-bot shipit
",wincent,2016-09-13 18:31:47
1381,2016-09-12 09:30:45,,pyros2097,2016-09-13 18:31:47
1381,2016-09-13 06:26:04,"Thanks @pyros2097.
",wincent,2016-09-13 18:31:47
1381,2016-09-13 06:26:34,"@facebook-github-bot shipit
",wincent,2016-09-13 18:31:47
1380,2016-09-10 05:36:08,,dmitriiabramov,2016-09-16 00:31:38
1380,2016-09-14 05:31:28,"Thanks for doing this, just imported the PR to run the tests internally.
",kassens,2016-09-16 00:31:38
1379,2016-09-09 19:31:35,"We just launched today. Many thanks to the Relay team for such an awesome library.
",chrissnyder,2016-09-09 22:31:43
1379,2016-09-09 19:42:33,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-09-09 22:31:43
1379,2016-09-09 21:14:22,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-09-09 22:31:43
1379,2016-09-09 21:42:30,"Congrats on launching! And thanks for the PR.
",wincent,2016-09-09 22:31:43
1379,2016-09-09 21:42:44,"@facebook-github-bot shipit
",wincent,2016-09-09 22:31:43
1378,2016-09-09 15:23:12,"In our app we have a list of payments and when you click into one you can cancel it (with a specific `CancelPaymentMutation`). So we want to do two things, update the status to cancelled but also `RANGE_DELETE` it from one of the lists.

Ideally I would have the optimistic response do the `FIELDS_CHANGE` as well as the `RANGE_DELETE` and to have some way to not respond anything from the server, because we know that the mutation was succesful if the server does not respond any errors so we do not have to send anything back. If it does respond with errors the optimistic response should just be rolled back as normal.

Even if this is not possible with Relay 1, would that use case be possible with Relay 2? Or is that also something that goes against a mutation convention? Should it always return what it modifies?
",Globegitter,2016-09-09 15:36:27
1378,2016-09-09 15:32:39,"Hmm. This isn't supported out of the box today, you'd have to do some hacking using semi-public APIs to achieve it. 

With Relay2 it would be simple - you could use the same updater function as both the optimistic and server callback. 
",josephsavona,2016-09-09 15:36:27
1378,2016-09-09 15:36:27,"@josephsavona Thank you for the quick response. If it is possible with Relay2 than I am happy to wait and just work around it for now :).
",Globegitter,2016-09-09 15:36:27
1377,2016-09-08 14:08:12,"In my app a have huge amount of connections for different types. So for reducing copy/pasting I want to create high order component for connections.

<S_CODE_TOKEN>

Here is example of HOC. This code is almost entirely used in every React Connection Component file.

<S_CODE_TOKEN>

Please help to construct fragment by hands, without `Relay.QL` and babel transform:

<S_CODE_TOKEN>

Or point me to an existing solution. 
Thanks.
",nodkz,2016-10-27 05:24:16
1377,2016-09-09 03:00:21,"There are a few high-level approaches to make this work:
- Build the API as described above, but require the user to specify the fragment manually instead of just the fragment type. Yes, you have to repeat the fragment, but all the infinite scroll behavior can be reused.
- Create an interface that matches the shape of the connection type (i.e. has `edges` and `pageInfo` fields, where the edge type has a `cursor` and `node: Node`), and write the fragment against the interface not a specific type.
- Write a babel plugin that expands some token or function call into a `Relay.QL` tagged expression, and then let the regular Relay plugin convert that template. For example you could write a plugin that finds all invocations of `createConnectionFragment('<type>')` and replaces them with `Relay.QL`fragment on <type> { ... }``.
",josephsavona,2016-10-27 05:24:16
1377,2016-09-15 05:38:23,"@josephsavona  thanks for your reply. Right now I'm not ready to get such deep dive. Maybe in October or even November. Absolutely have not free time, should launch our commercial app in next month and needs time for my OSS graphql-compose.

Dear community, maybe somebody interested in implementing this HOC for RelayConnection? 
",nodkz,2016-10-27 05:24:16
1377,2016-09-19 06:37:50,"@nodkz It's funny, I was just blogging about this :) , we have used a roughly similar abstraction for months now in my company: http://greweb.me/2016/09/relay-scrolling-connections/ .
In this implementation I have not used HOC but just a simple component that renders children, and I figured out the only prop it needs is `relay` (it assumes you have a variable called `first` but there is another prop to customise it).
What I liked in using component instead of HOC is it remains separated of the component, you might not always want to make your ""list of thing"" component strongly coupled with the scroll mechanism (but maybe you want?). The component solution also have the advantage you can use it in various ""inline"" use case, for instance using material-ui List here: `<InfiniteScrollable><List>{data.map(...)}</List></InfiniteScrollable>`. Not sure how HOC would work here (List is not a Relay container).

Anyway, for the various use-cases we can have, I'm not so sure if this problem can easily abstracted out: for sure we can provide a solution for 90% users, but there also might be specific parts. (like implementing `<Loader/>`, if you really want to have a generic lib, this implementation needs to be externalised e.g. via prop).

What I think is important, (but I guess we all agree on this), is for Relay to continue focusing on solving the generic part which is not providing an implementation for this ""how to handle pulling data when I scroll"" problem.
",gre,2016-10-27 05:24:16
1377,2016-10-27 05:24:16,"WOW! 💪
@gre awesome work!

Today I come back to solve this problem and found your great solution. Thanks!!!
PS. Sep 19 I was on vacation and miss github notification.
",nodkz,2016-10-27 05:24:16
1376,2016-09-08 00:28:43,"## Overview

Issue #1300. Allows using `@relay(pattern: true)` on fat queries for non-connection fields that have required arguments.  

Currently the pattern directive only can be used on connections and fields without arguments.  This prevents fat queries from being used to force the server to invalidate separate fields you know have changed but don't directly relate to the current object being mutated.
## Implementation

Disables the GraphQL rule for `ProvidedNonNullArguments`, instead relying on Relay to throw those errors.  
## Example

Full star wars example on [this branch](https://github.com/relayjs/relay-examples/compare/master...ddgromit:query-arg-patterns#diff-4826482ddf3139031cac42eff2e6706dR17)

You might have non-connection field that you query with arguments like `viewer { factions(names: [""empire"", ""rebels""]) }`.  Then run a mutation that updates the names of all the ships across all factions - not just the ones you've queried.  This change allows you to make a fat query that says all ships across all calls to `factions` are now invalid.

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",ddgromit,2016-12-22 17:01:05
1376,2016-09-08 00:28:57,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-12-22 17:01:05
1376,2016-09-08 00:33:53,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-12-22 17:01:05
1376,2016-10-03 19:30:46,"Ready for another review.  Changed to only skip NonNullArgument check if the top level document is a pattern.
",ddgromit,2016-12-22 17:01:05
1376,2016-10-24 22:56:36,"Hello! I would love to have this! how is the PR actually doing?
",proProbe,2016-12-22 17:01:05
1376,2016-11-07 02:06:47,"@josephsavona ^ would appreciate another look at this PR
",ddgromit,2016-12-22 17:01:05
1376,2016-12-22 17:01:05,"Thanks for the PR, for exploring this space, and for your patience. While this PR helps, we've found several difficulties with dynamically constructing mutations queries. For this and other reasons (predictability/simplicity) we've created a new, static mutation API: [`Relay.GraphQLMutation`](https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html) which we recommend. I'm going to close this PR, but we appreciate the time you put into this: seeing the problems with the current mutations helped us to develop the  new API.",josephsavona,2016-12-22 17:01:05
1375,2016-09-07 21:19:20,,wincent,2016-09-07 22:16:42
1375,2016-09-07 21:19:38,"@facebook-github-bot import
",wincent,2016-09-07 22:16:42
1374,2016-09-07 12:04:23,"One of the most frequent query patterns we're seeing in our Relay components is as follows:

<S_CODE_TOKEN>

In most of our components `$myInputObject` is an input object and not a scalar, which then causes an invariant to throw in [printDirective](https://github.com/facebook/relay/blob/081b4a3f17dcf37419155317ed97ca5e5ac97522/src/traversal/printRelayOSSQuery.js#L298)

This limitation looks very deliberate (there's even a test case that enforces it), so I'm guessing there might be a very good reason for it.

The behaviour we were hoping for was that the query printer would coerce the `if` directive argument into a boolean based on its knowledge of the schema.

Without this boolean coercion, the above example only works with the introduction of an additional query variable, e.g.:

<S_CODE_TOKEN>

This extra variable means that we need additional boilerplate. First, we need to include the new variable in `initialVariables`, and secondly, we have to do a manual coercion with the introduction of a `prepareVariables`method, which we could otherwise do without.

What do you guys think about loosening this restriction and adding boolean coercion?
",jimkyndemeyer,
1374,2016-09-07 15:54:10,"Thanks for your question. There are actually two aspects to this issue:
- Allowing non-booleans values for `@include`/ `@skip`
- The restriction to scalar values on directives

For the former, I understand that coercion would be convenient. However, the [GraphQL specification](http://facebook.github.io/graphql/#sec-Boolean) specifically does not allow non-booleans to be coerced when a boolean is expected (I double checked this in graphiql too). So even if we changed `printDirective` to support complex values, the `@include(if: $myInputObject)` example above would be rejected by a spec-compliant server. This is definitely something to keep in mind, as this certainly is a common pattern. In the short-term the simplest solution is to use the additional boolean variable, but we're open to suggestions about how to make this work while conforming to the spec (or, alternately, proposing a spec change). 

Re printing non-scalar directive values - this will be supported in Relay 2 (#1369), and we're happy to explore adding support in current Relay if necessary. It doesn't seem like it would help in this case though.

Again, we're open to suggestions about how to make the boolean coercion more ergonomic!
",josephsavona,
1374,2016-09-07 16:30:47,"Thanks for the quick response and this project as a whole. Really looking forward to Relay 2 :)

Regarding the first point of spec compliance, the initial idea that came into my mind was to let the relay query printer do the coercion, such that the value is sent over the wire as `true` or `false`. That takes care of compliance, and isn't unexpected given that Relay already supports processing of the variables with `prepareVariables`.

There is no contextual information about the schema in the current [printDirective implementation](https://github.com/facebook/relay/blob/081b4a3f17dcf37419155317ed97ca5e5ac97522/src/traversal/printRelayOSSQuery.js#L293), but the genereal idea is along the lines of:

<S_CODE_TOKEN>

Any thoughts on the viability of this approach? I'm only slightly familiar with parts of the code at this point :)
",jimkyndemeyer,
1373,2016-09-07 05:10:23,"I'm trying to accomplish a similar recursive data problem as [246](https://github.com/facebook/relay/issues/246). I have a `CommentList` component that has a list of `Comment` components. Each `Comment` has a `CommentList` thus forming the recursion. I am trying to have the comments automatically expand to a depth of 5 but I'm getting the following error: 

`RelayContainer: component 'Comment' was rendered with variables that differ from the variables used to fetch fragment 'comment'. The fragment was fetched with variables '{""expand"":false}', but rendered with variables '{""expand"":true}'.`

Is this because the it doesn't support performing operations like `currentDepth + 1` on the variables in the string interpolation?
## Comment Component

I have something like this in my `Comment` container:
`${CommentList.getFragment('comment', { currentDepth: currentDepth + 1 }).if(expand)}`

and render the `CommentList` component like:
`<CommentList
                    comment={comment}
                    currentDepth={this.props.relay.fragments.currentDepth + 1}
                    />`
## CommentList Component

And in my `CommentList` component I have:
`${Comment.getFragment('comment', {expand: currentDepth < limit, currentDepth})}`

and render the `Comment` component like so: 
`<Comment key={comment.id}
                comment={comment}
                expand={this.props.relay.variables.currentDepth < this.props.relay.variables.limit}
                currentDepth={this.props.relay.variables.currentDepth} />`
",LukePammant,2016-09-08 00:45:13
1373,2016-09-07 15:57:11,"> Is this because the it doesn't support performing operations like currentDepth + 1 on the variables in the string interpolation?

Quite possibly. Relay only evaluates each fragment once, so doing `${depth + 1}` inside a query probably won't do what you expect (i.e. it won't get reevaluated). If you need to dynamically modify variables, take a look at [`prepareVariables`](https://facebook.github.io/relay/docs/api-reference-relay-container.html#preparevariables)
",josephsavona,2016-09-08 00:45:13
1373,2016-09-08 00:45:13,"Ah thank you, that did indeed fix my problem.
",LukePammant,2016-09-08 00:45:13
1372,2016-09-06 23:19:47,,kassens,2016-09-07 00:31:49
1371,2016-09-06 17:13:01,"i have the scenario where i have an error somewhere 
- schema valid
- app loads working fine (no problems)
- running on 8080/graphql
- **Problem:** when i call either this.props.relay.forceFetch( .. or this.props.relay.setVariables({...
  i get the errors

> app.js:50387 POST http://localhost:3000/graphql 400 (Bad Request)
> app.js:9379 Warning: fetchWithRetries: HTTP error, retrying.

i did a bit of refactoring and i've somehow introduced a bug somewhere, is there any way to debug further ? as this seems very little to work with? 
i've tried setting up server error handling not getting any output as the error seems to be at the top level of the server request.

<S_CODE_TOKEN>
",andyfen,2016-09-07 05:18:18
1371,2016-09-07 15:55:23,"@andyfenelon were you able to resolve this? what was the issue, and what helped resolve it?
",josephsavona,2016-09-07 05:18:18
1371,2016-09-07 16:14:55,"yes and no. i basically had to rebuild it bit by bit until i could isolate what it was breaking it. i think it was sharing a Type across fragments whilst trying to refresh the data on one of them.

the main problem i find i'm coming up against is when there's an error on the server the client just spits back a 400 (Bad Request), in particular with mutations, and there's very little to establish what the error actually is ? i've tried the express formatError but it doesn't seem to help with bad requests just more server internals. 

would welcome more support with debugging. 
Thanks.
",andyfen,2016-09-07 05:18:18
1370,2016-09-05 21:32:11,"Let's say I'm building an app with users who can sell products. A simplified version of my GraphQL schema looks like this:

<S_CODE_TOKEN>

I'm rendering a page that displays a user and their products, so naturally I end up with a query like this:

<S_CODE_TOKEN>

Let's assume that viewer, user and product pages are all relatively expensive to resolve (i.e. require backend service calls and take 10s or 100s of milliseconds). In reality, viewer is free, but i'm trying to avoid creating a more complex example just to illustrate the problem.

Now, if I use `setVariables` to change `$count` to something larger, Relay helpfully uses its knowledge of connections to only fetch the missing results rather than everything, this is great.

The problem is that the query for each new page is starts from viewer, which means to get an additional page of products, I have to re-resolve both viewers and users before I can even start loading the next page of products.

Given that User implements Node, it should be possible to generate a more optimal query that starts from the User node. Or more generally, for the part of the tree with variables that have changed, find the closest ancestor that implements Node.

This would also allow me to change the schema slightly (naughty) to get even better optimizations:

<S_CODE_TOKEN>

In this version, i've added an additional relationships type between User and Products, which implements Node but is essentially free to resolve (it's unmasked GlobalID would be the same as the User's, just a different type). This means i'd be able to get the next page of products without any unnecessary data-loading whatsoever.

Does this optimisation already exist (i.e have I somehow missed it?), or is there a reason it doesn't? And would implementing it still be possible given Relay 2's move to static queries?
",AndrewIngram,2016-09-06 15:57:13
1370,2016-09-05 23:32:21,"> The problem is that the query for each new page is starts from viewer, which means to get an additional page of products, I have to re-resolve both viewers and users before I can even start loading the next page of products.

Can you clarify what you are describing here? Is this behavior that you are seeing in raw GraphQL? Or in Relay? 

Note that Relay already implements the optimization you described. When `serVariables` is called, Relay will attempt to refetch it using the nearest object with an id, rather than go all the way back to the query root. 

So in your example if User implements Node, then a `setVariables` call to increase the count would result in a query such as:

<S_CODE_TOKEN>

More generally, 

<S_CODE_TOKEN>

Is an anti-pattern: the viewer field is unnecessary, since the object being requested can be identified by its id. Viewer makes sense only for data that is non-identifiable (no id) and that is contextual based on the person viewing the app. 
",josephsavona,2016-09-06 15:57:13
1370,2016-09-06 00:56:26,"I mean specifically with Relay (I'm asking it here for a reason). The optimisation I've described (and what you've confirmed) is what I expected to happen, but isn't what is actually happening.

Is the fact that I'm doing your anti-pattern related or is it an aside remark? Because my example is simplified and excludes other arguments, but the User type definitely implements Node. But I'm doing this way because Viewer is required for so many other things, that it didn't make sense to special case types with an arity of 1 or 0.
",AndrewIngram,2016-09-06 15:57:13
1370,2016-09-06 10:15:38,"Okay, i've found the issue. Which is that I didn't have a separate component representing the entire connection, just one representing the array of edges. It seems that the described optimisation only works when the ancestor node is also at the root of the fragment.

To clarify, before I had something like this:

<S_CODE_TOKEN>

Whilst moving to this fixed the issue:

<S_CODE_TOKEN>

(where `UserProducts` contains the full connection and `ProductList`)
",AndrewIngram,2016-09-06 15:57:13
1370,2016-09-06 15:18:36,"Ah, yes that would explain it. Thanks for following up! `setVariables` starts from the fragments on the container where it was called, wraps that fragment in a query (just `node` If the object has an ID, otherwise with the path up to the nearest identifiable object), then does diffing/etc. So you have control over how much is refetched by choosing where to break the fragment boundary. 

About the viewer pattern: this was an aside, but it's relevant to the final solution. We've found that it's generally best to let the route/query specify what the ""root"" object to fetch is, and then have containers be agnostic about the root. If you put `viewer { user(id: $id) }` in the fragment, you can no longer use that container anywhere in a query that you have a User, you can only use it at the root. The component becomes far less reusable. If instead you do `node(id: $id)` in the route query, and then `fragment on User { userField}` in the container, then it's completely reusable - and you avoid this issue about refetching ;-)
",josephsavona,2016-09-06 15:57:13
1370,2016-09-06 15:57:12,"@AndrewIngram Thanks again for investigating and following up here. I'm going to close this issue since you've resolved it, but we're happy to continue the discussion either here (comment and we can reopen) or on a new issue. 

Also note that one of the side-effects of static queries in Relay 2 is that it becomes much more obvious what query is being used to refetch data - since the developer writes the query! This should help to avoid issues such as this one.
",josephsavona,2016-09-06 15:57:13
1369,2016-09-03 21:27:19,"# New Relay APIs

The core team is currently focused on developing the next major version of Relay, which we have been referring to as ""Relay 2"" as a working title, but which will ultimately be just a new set of APIs within the existing Relay. The new APIs are the best parts of Relay today - co-located GraphQL and React components and a declarative API - but is simpler, faster, and more predictable. This issue is to track our overall progress and give us a place to point people toward information.
## More Information
- Check out our recent [blog post](https://facebook.github.io/react/blog/2016/08/05/relay-state-of-the-state.html) on the state of the project and our goals/plan going forward.
- @wincent's [deep dive](https://facebook.github.io/relay/docs/videos.html#relay-2-simpler-faster-more-predictable-slides-https-speakerdeck-com-wincent-relay-2-simpler-faster-more-predictable) explains how Relay 2 works from a technical perspective; check this out if you're curious about the implementation and how it differs from current Relay.
- @josephsavona's [React Rally talk](https://speakerdeck.com/josephsavona/reintroducing-relay) provides an overview of the new APIs from a product developer's perspective, including the types of performance enhancements and API simplifications it unlocks.

## FAQs
### Do I have to relearn everything?

The core concepts of Relay continue to apply: co-located GraphQL and render logic, a declarative API that lets you specify what data you need, not how to fetch it. If you're familiar with Relay today, the updated Relay should feel familiar, with some rough edges removed (no more Routes, for example, just queries and variables). If you're _new_ to Relay, there will less concepts to learn and, we hope, it should be easier to get started.

There are definite API differences, but the core concepts are the same and the API changes serve to make Relay simpler and more predictable.

### What is the upgrade path?

Note that _we will continue to support the current API for the foreseeable future_ - we're using it too! Where possible, we will provide tools to help the community upgrade their own apps. We're currently exploring a limited interoperability API as well as codemods and other tools.

### How can I prepare for the new API? 

In general, the main theme is to reduce dynamic APIs that can prevent Relay from understanding the structure of a query statically (i.e. at build time). Examples of such dynamic APIs in current Relay are:

- `RelayMutation` and fat/tracked queries. Future releases will deprecate this API in favor of a static mutation API. We recommend using [`RelayGraphQLMutation`](https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html) to ease the transition to new mutations.
- `RelayContainer#prepareVariables()`. Future releases will deprecate support for this function; the workaround is to use (global) query variables and prepare dynamic values at the Renderer.
- `RelayContainer#initialVariables()` with *runtime function calls* specifically (inline constants/literals such as `initialVariables: {count: 10}` are static, runtime function calls such as `initialVariables: {count: getRuntimeValue()}` are not). Future releases will deprecate support for dynamically assigned initial variables. Similar to `prepareVariables`, a workaround will be to use (global) query variables.

### When will the updates to Relay be released?

We open source tools that we have proven in production. We're working to refine the product developer experience, finish/polish some features, and ship the first apps using it. 

### Where can I learn more / follow progress?

**The best way to follow our progress is to [read our meeting notes](https://github.com/facebook/relay/tree/master/meta/meeting-notes)**. We publish these semi-weekly, and are exploring a new format with more detailed status updates about sub-projects. We cannot guarantee that we can always keep this issue up to date, so always see the meeting notes for updates.

## High-Level Tasks

Below is a high-level overview of the work remaining to release the new APIs and core:

- [x] Introduce a static mutation API: [`Relay.GraphQLMutation`](https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html#content)
- [x] Poly-fill the new core's public API via the legacy core.
- [ ] Introduce static query APIs (new Renderer and Container variants)
- [ ] Deprecate old query APIs (`Relay.RootContainer`, `Relay.Renderer`, `Relay.Container`)
- [ ] Introduce the new core.",josephsavona,
1369,2016-09-12 19:06:05,"Hi,

Regarding **When will Relay2 be released?**  I appreciate and admire Facebook's model.  I am needing to make a decision on Relay 1 vs 2 within the month.  

If FB is targeting say H1 2017, then I will go with Relay 1.  Otherwise, if the target is say EOY, I will stick with a promise-based fetch to GraphQL and wait for Relay 2.  I am trying to reduce cognitive overload for the teams.

So, without being overly arrogant, is it possible to narrow your target down a bit?

Thanks either way.

Regards,
Irvin 
",iwaldman,
1369,2016-09-12 21:56:28,"@iwaldman I believe a lot of people are facing this decision so a better roadmap will be much appreciated. +1
",ivosabev,
1369,2016-09-13 01:24:00,"Regarding release date, we're working to make this happen but aren't ready to make a call on the date yet (as you know scheduling is hard). We'd rather not disappoint by giving an optimistic estimate and then failing to hit it. The tricky part is telling whether your estimate is optimistic... 

For now your best bet is to keep your eye on our weekly meeting notes (in the meta directory of their repo) to get a sense of what we're working on at the moment.
",wincent,
1369,2016-09-13 01:43:58,"Greg, Thanks for responding.
",iwaldman,
1369,2016-09-14 19:54:57,"I'm curious if you guys can say if the cache manager API will be changed significantly in Relay 2? There is some work I'd like to do on [relay-cache-manager](https://github.com/ConciergeAuctions/relay-cache-manager) but I'm curious if it might be better to hold off and see the new API, if there is one?
",aweary,
1369,2016-09-14 22:00:14,"@Aweary We gave a preview of a possible disk-caching API for Relay 2 in our [React Rally talk](https://speakerdeck.com/josephsavona/reintroducing-relay?slide=61). We don't have a definite timeframe for Relay 2, so I would encourage making improvements in your npm module for now.
",josephsavona,
1369,2016-09-21 15:19:48,"Eager to use!
Seems there are some slight change in Relay Specification.(So seems will need restruct some data model for old code?)
Hope the beta version will be released soon. So we can use the beta version in our development.
",iamchenxin,
1369,2016-09-22 03:26:27,"@iamchenxin You shouldn't need to restructure your data model; the whole point of GraphQL is to _abstract away_ implementation details of data storage and express it in a natural, expressive, product-centric way. 
",wincent,
1369,2016-09-22 07:54:48,"@wincent Im referring to Client side.(Data fetched by Relay.QL, forgive my poor english). I saw the video, but not sure if it will need some restruction for the old React Data Flow to take advantage of Relay 2. (ex: the new RelayConnection seems need to separate some data logic between parent and its children )
Hope the beta version will come soon.
Thanks for your hard working.
",iamchenxin,
1369,2016-09-23 12:53:04,"Just out of curiosity, l never tried relay 1, so l am not sure if this is possible in that version to.

But server-side rendering, is this going to be supported?

Also server-side rendering of some fields, then client side fetching to render others? - okay i think this is just solved through deferred queries 
",OllieJennings,
1369,2016-09-28 20:37:30,"Looking forward to it @josephsavona @wincent et al. Let me know if there's something we can help with.
",NevilleS,
1369,2016-10-28 06:23:36,"Is there any update on when Relay 2 will be released? 
",nikhilag,
1369,2016-10-28 15:49:40,"@nikhilag: I'm drafting a status update. Will share soon.
",wincent,
1369,2016-10-29 11:54:20,"@wincent: Thanks for your quick response! Looking forward to the update. I am sure lots of people are excited and eager to use the next version of Relay!
",nikhilag,
1369,2016-11-02 12:19:23,"Previously there was discussion about releasing a Relay 'core' library. Is something like this part of the plan for the release of Relay 2?
",sgwilym,
1369,2016-11-02 12:26:11,"Two libraries similar to `redux`/`react-redux` would be nice.

I just hope that we will get to see a prerelease so the community can also suggest breaking changes.
",AlicanC,
1369,2016-11-02 15:54:51,"@sgwilym: status update is drafted. Gathering feedback on it before publishing. I feel pretty confident that we'll be able to share the update some time between `Date.now()` and `Date.now() + Infinity`. Thanks for your patience in the meantime.
",wincent,
1369,2016-11-02 16:04:41,"I am stealing this "".... some time between Date.now() and Date.now() + Infinity."" 
",iwaldman,
1369,2016-11-02 19:10:55,"The good thing about `Date.now()` is that it changes every time you check
",NevilleS,
1369,2016-11-07 14:02:44,"@wincent Sorry to bother you again but just wanted to check if you have a rough timeline on when relay 2 might be ready. It's just that Relay 2 solves a bunch of problems including client side state management and so I really hope to start using it soon instead of a mix of Redux and Relay.  
",nikhilag,
1369,2016-11-08 15:58:15,"Just checked the meeting notes and it looks like there hasn't been one in more than a month, are those meetings still happening?
",vincentriemer,
1369,2016-11-15 00:00:51,"I don't know about you guys but I wrote a letter to Santa.
",unirey,
1369,2016-11-25 10:38:06,@wincent Is there any update on Relay 2?,nikhilag,
1369,2016-11-27 05:36:36,"@josephsavona or @wincent, I was wondering what happened to the meetings notes. They used to be published every week or so, now it's been 2 months. Does the relay team still meet and develop? Is Relay still alive and well? Is Relay 2 still a thing? I understand the difficultly with timelines, but just a simple pulse to help us know that this is still an active project would be great. Is facebook moving on to something else? Thanks for all the hard work and pioneering!",sonnetflowers,
1369,2016-11-27 19:12:59,"Thanks for the messages. We've been in crunch mode preparing Relay ""2"" (the new core and product APIs), and integrating it into the first products. Were hoping to share more soon, but tl;dr yeah we're still working on this :-)",josephsavona,
1369,2016-11-28 04:16:34,"@josephsavona Its so happy to hear from you. I firmly believe Relay2 is the right way, and worth to wait. I temporarily block some part of my project for waiting Relay2.",iamchenxin,
1369,2016-12-01 15:52:09,"> _I don't know where your code is, but I will find it, and I will release it._",pjuke,
1369,2016-12-12 06:41:36,"@josephsavona based on [2016-12-09-update.md](https://github.com/facebook/relay/blob/master/meta/meeting-notes/2016-12-09-update.md),  seems the only things will be changed are some kind of APIs? Will the [graphql relay specification](https://facebook.github.io/relay/docs/graphql-relay-specification.html#content) be the same between `v1` and `v2`? ",iamchenxin,
1369,2016-12-13 05:31:04,@iamchenxin : The GraphQL specification doesn't change. We'll have this new API that enables the faster and simpler core if used throughout an app.,kassens,
1369,2016-12-19 09:45:03,"I was writing a new issue but I figured it might be too trivial:

From updated [docs](https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html) ( #1480 ): 

> Restricting yourself to the low-level API is a useful preparatory step that will help you ready your codebase for migration to the new static Relay core.


I was about to start rewriting my mutations but because my project won't be pushed to production for at least next few months (hopefully I get my hands on new shiny ""Relay 2"" by then), it would be awkward to do it several times when I have other stuff to do. Therefore I have the following two questions:

* Is ""Relay 2"" mutation **public API** ""ready"" in terms of overall idea, properties, methods and naming?
* Is it going to be the same as [`Relay.GraphQLMutation`](https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html)? **Would it be my only huge mutation rewrite**?",unirey,
1369,2016-12-19 23:45:11,"@unirey Good question, I added a section to the summary with notes about the transition. For mutations specifically, the transition from `Relay.Mutation` to `RelayGraphQLMutation` involves changing from a dynamically constructed query to writing a static mutation query, which can require knowledge about each product and is less amenable to automated codemods. It's possible that the mutation API may still change after that, but we expect those changes to be more minor by comparison (and possibly more amenable to codemods). If you're writing new mutations, we'd recommend using `RelayGraphQLMutation`.",josephsavona,
1369,2016-12-20 17:10:11,"@josephsavona Thank you.

I hope to get my hands on persisted queries in near future (it's not in ""Relay 2"" as far as I know), static queries should be the key part to add this feature to Relay core. 
This would fix the biggest and most complicated problem with GraphQL (for me at least): it's hard to distinguish normal (but deep and complex) queries from just malicious queries from _e.g_ attackers.

Every solution today (depth limit, adding cost to operations, query whitelist _etc_) is kind of tricky to pull off. ",unirey,
1369,2016-12-20 17:30:20,"@unirey The new core supports persisted queries, though there will probably be some configuration involved and we'll have to figure out how to make this work in OSS.",josephsavona,
1369,2017-01-14 01:29:40,Where can I find more examples of the RelayGraphQLMutation api? ,nikolal,
1369,2017-01-14 02:53:32,"This is a [use-case test of a library](https://github.com/chrbala/data-lib/tree/master/examples/full-stack) I'm working on right now. It's not really meant to be a boilerplate or an example specifically for relay, but it does use the new mutation API.

At least at the time I made those examples, the only uses of RelayGraphQLMutation I could find were in the official docs and tests.",chrbala,
1369,2017-01-14 02:56:39,@nikolal I am gonna try this https://github.com/facebook/relay/issues/1046#issuecomment-272358621 hope you find it useful.,bsr203,
1369,2017-01-14 03:11:32,interested to know how server-side rendering will work in relay 2 (or if it will be supported)?,robrobkay51,
1369,2017-01-14 05:12:48,"@robrobkay51 Our overall approach with the new core has been to build simple primitives that can be built upon in user space. So for example, there is a clear separation of the React integration layer and the core - the former being implemented entirely via the public API of the latter. It might take a few releases to refine and document this, but i expect that it will be easy for the community to build upon this to make a server rendering module for Relay. ",josephsavona,
1369,2017-01-20 08:50:09,"@josephsavona Looking on the high-level tasks on top and wondering if support for local schema is included there and in which step - ""Introduce static query APIs"" or ""Introduce the new core."" ? Thanks for hint. Basically wondering if its behind the corner.. or still far away.. Thanks!",jardakotesovec,
1369,2017-01-20 09:18:47,"+1 for local schema support, this is a big showstopper in my quest to ditch Redux and go all Relay.",ivosabev,
1369,2017-01-20 19:59:23,"We have a prototype of local schema working in the new core, but that's likely something the team will look at only after the new core is released. ",josephsavona,
1369,2017-01-20 20:04:54,@josephsavona  That's awesome. We're excited for the new core. Thanks for all your hard work!,tslater,
1369,2017-01-20 22:46:04,"@josephsavona Can you confirm if the new core is likely to support ""offline"" or if this will be easy to build with a community addition? Is there a plan for the new core's client side schema to provide any form of compatibility with redux-devtools, or would that not make sense? Oh and finally I have to ask, but do you have any more ideas on when it may be released :)

Massive thanks for relay! Its had a massive impact on our team productivity and how we're building the next iteration of Mixcloud!",matclayton,
1369,2017-02-03 23:02:49,"I'm in the position of needing to make a decision re: Relay for a production application ASAP. Making the decision to use Relay 1 doesn't seem sensible at this stage, especially with Relay 2 on the horizon. 

So I hate to be that guy, but is there anymore news regarding release date at this stage?

If there is no estimated release date at this stage, what would you advise for people in a similar position to me? Use Relay 1, wait for Relay 2 or use an alternative such as Apollo? 

P.S. Massively appreciate all the hard work that's going into Relay 2 and really excited for the release! :)",robrobkay51,
1369,2017-02-03 23:14:57," I think we're feeling the [Osborne effect](https://en.wikipedia.org/wiki/Osborne_effect). It's kinda like what happened with Angular 2. It might be better if we had never known about Relay 2. I agree with @robrobkay51 that it would be nice to know something about what's going on with the API's in terms of timelines. I also think, however, that as software developers we all understand that timelines are tricky, if not impossible, in most cases.",tslater,
1369,2017-02-04 01:31:55,"I wouldn't hesitate to adopt Relay in its current form, if you've conducted your analysis and concluded that it is a good fit for your application.

At Facebook we have thousands of Relay components deployed in production, so making an overhaul that used a drastically different API was never going to be viable. Instead, we took special care to keep things as aligned as possible, and we've personally migrated large product surfaces areas to the new API to get a feel for the amount of work required to convert.

As for concrete release dates, obviously we can't comment. But having said that, FB speakers will be speaking at public events in the near future (React.js Conf, F8 etc); if we have news to report or things to share by those dates, we will. In the meantime, keep your eye on the meeting notes directory in this repo's `meta` directory for a record of what we're talking about (no sync this week because it was a hackathon week).",wincent,
1369,2017-02-04 02:24:12,"@robrobkay51 if you are not already a Relay expert go Apollo. I initially chose Relay even though I knew Apollo is newer, more featured and better documented on the hopes of Relay 2. After a week of frustration with ancient dependencies, large boilerplate code and a mountainous learning curve, with hopes fading of Relay 2 landing anytime soon I thought I would give Apollo a shot. In the first afternoon I had progressed more than the entire week previous.

In no time at all I even had [a pull request](https://github.com/apollographql/apollo-client/pull/1044) merged. @stubailo, @helfer and the other guys are super engaged and are doing a fantastic job at driving progress.

Take a look at the progress [adding a GraphQL example to Next.js](https://github.com/zeit/next.js/issues/99). The Apollo example is now [done and dusted](https://github.com/zeit/next.js/issues/387), Relay [not so much](https://github.com/zeit/next.js/issues/106).",jaydenseric,
1369,2017-02-04 17:56:05,"@wincent So hypothetically, if someone adopted Relay 1 now and then wanted to migrate to Relay 2 at a later date, I think it would be really useful to know really roughly how much work might be involved based on the migrations that you've been involved with to date at FB ('and we've personally migrated large product surfaces areas to the new API to get a feel for the amount of work required to convert.') Ofc, looking for an estimate here rather than an exact figure.",robrobkay51,
1369,2017-02-06 16:49:44,"@robrobkay51 We're adopting Relay 1 with the new GraphQLMutation interface.  The learning curve is more severe than anything I've ever worked with.  I think a big part of this is b/c Facebook hasn't been incentivized at all to continue investing in documentation and examples for the last year or so, with Relay 2 coming up.

From our experience I'd still advise Relay 1 if you're building a big, long-term project; FB has promised a smooth migration path to Relay 2.  However if you only plan to spend 1-2 months coding your project or it won't be in use in 3 years, I wouldn't recommend it as you'll spend a lot of time tweaking to try and get things working.

@wincent I agree that it would be nice to have an idea of how much work we may want to plan for to migrate to Relay 2.",lukecwilliams,
1369,2017-02-06 18:10:46,"Very hard to give a quantitative answer about ""how much work"" is involved in migrating. In our experience porting products at Facebook, many components can be ported by an automated codemod (and we'll share the jscodeshift scripts that we used for this purpose).

For example:

<S_CODE_TOKEN>

would become something like:

<S_CODE_TOKEN>

(Usual disclaimers apply: API subject to change and all that; hold off on questions about the specific details here as we'll be documenting it all with the release.)

I include this merely as an illustrative example of the simple case. More complex cases involving variables will require a little more work, but only incrementally so. Our goal is that the performance benefits of moving to the new APIs and core should make this migration cost worthwhile. Sorry that I can't be more specific, but it's hard to give a precise sense for the cost of a migration other than to broadly call it ""reasonable"".",wincent,
1369,2017-02-06 18:46:31,"@wincent That's helpful - at least in this example, there's a relatively straightforward mapping between the old and new way.",lukecwilliams,
1369,2017-02-06 18:58:03,"Looks like a great syntax improvement! I really like that there is now a fragment name, identifying parts of queries via the fragment name has been really useful for us.",stubailo,
1369,2017-02-06 19:28:03,"@stubailo it looks like this should make a migration to Apollo easier as well, since it's using `graphql` template tags?",idris,
1369,2017-02-06 19:34:55,"@idris: the tags contain literal/static GraphQL text (no more interpolation), so it should make for better interoperability with any tooling that ""speaks"" GraphQL (syntax highlighting, GraphiQL, alternative libraries etc).",wincent,
1369,2017-02-06 19:38:30,"Yeah that's great.  I can imagine creating our own `createFragmentContainer` that lets us change libraries like Apollo and Relay with a few lines of centralized code.

Obviously there are a few GraphQL differences that wouldn't be as easy (Relay enforces relay's pagination, different GraphQL features implemented between libraries, etc).  But this is a huge step!",idris,
1369,2017-02-14 20:49:45,"Can this recommendation be removed made more doable:

> RelayMutation and fat/tracked queries. Future releases will deprecate this API in favor of a static mutation API. We recommend using RelayGraphQLMutation to ease the transition to new mutations.

I had to override the default environment using a hack to set credentials to same-origin. 

I'm using `this.props.relay.forceFetch()` to essentially inefficiently refresh the page after a successful commit...

I've lost the my sense of developer productivity trying to consume the low level API, even though I really appreciate your good hard work!",mattferrin,
1369,2017-02-14 23:28:51,"@mattferrin, two points since we've just been figuring this out ourselves:

1. We use a custom network layer at the root app level (`Relay.injectNetworkLayer(NetworkLayer);`). When crafting a GraphQLMutation, it seems to work fine to supply `Relay.Store` as the `environment` argument, so it isn't necessary to initialize a new environment.
2. Are you using [mutator configs](https://facebook.github.io/relay/docs/guides-mutations.html#mutator-configuration) to process the mutation response payload into the Relay cache?",cberkom,
1369,2017-02-15 00:49:38,"@cberkom Regarding point 1, in order to customize the endpoint and use the same origin for the credentials, so that the request is authorized, you must set the network layer manually.

<S_CODE_TOKEN>

On point 2, yes.

<S_CODE_TOKEN>

Using this query:

<S_CODE_TOKEN>

(If it's relevant, I tried to work off master but couldn't get it to run, so I'm consuming `""react-relay"": ""^0.10.0""`. )",mattferrin,
1369,2017-02-15 16:13:18,"@mattferrin On point 2, are you using `this.props.relay.forceFetch()` because you need to fetch more data than the mutation returns, or because the response data from the mutation isn't updating the Relay cache as intended?",cberkom,
1369,2017-02-15 18:33:34,"@cberkom Honestly, the store updates fine, but doing a `this.forceUpdate()` on a parent component didn't re-render the changes to the `records`. I had to use `forceFetch`, but the `Relay.Store` after doing a `forceFetch` looks identical to me.

`Relay.Store` upon initial render:
<S_CODE_TOKEN>
`Relay.Store` in Relay.GraphQLMutation onSuccess callback after commit:
<S_CODE_TOKEN>
Relay.Store `readyState` after forceFetch:
<S_CODE_TOKEN>
`Relay.Store` after forceFetch:
<S_CODE_TOKEN>",mattferrin,
1369,2017-02-15 18:39:52,@mattferrin Can you file a new issue to discuss?,josephsavona,
1369,2017-02-15 18:56:35,"@josephsavona Yes, soon. Thanks.

Edit:
https://github.com/facebook/relay/issues/1546",mattferrin,
1369,2017-03-14 04:34:49,"@josephsavona  any news on this.., i am going to start a new project on monday can we expect new core beta  meantime ? ",chandu0101,
1369,2017-03-14 19:12:05,@chandu0101 see @wincent's [comment on this thread](https://github.com/facebook/relay/issues/1369#issuecomment-277407081).,josephsavona,
1369,2017-03-14 21:02:36,@josephsavona  thank you :) ,chandu0101,
1368,2016-09-02 20:24:02,"`Uncaught Invariant Violation: RelayQueryNode: Abstract class cannot be instantiated.`

I first tried discord and was directed here.

**TLDR;**  - how do I go about diagnosing the cause of this error?

---
## Now, the long story

BTW - this is not a decorator issue (which is what comes up on google).  The code in question works as a single project, breaks when split into two projects.

I have a webpack/babel bundling/transpiling process that was working well. As we grew, I wanted to split from a single project to multiple for reuse e.g. `app` vs `lib`.  Therein lies the problem.  I tried to include the `lib` source via webpack (which I've done before and seems ok), but suddenly I'm experiencing the error above.  If I first transpile the lib to ES5, then use it, I don't get the error.  I don't want to build to ES5 first for a number of reasons, primarily because the `lib` in question is the company's core (white label), and flattening it out as a single module (for exports) has name conflicts.

Here are some possibilities I have considered but not necessarily ruled out:
### Possiblity 1

I don't know how path may affect the `babel-relay-plugin`, but the path change provides the potential this is the the problem i.e. resolution of types.  Almost all code still resides in the `lib` (including relay all queries/containers etc), and the `app` at this point is as thin as possible.  To counter this, I added code to `babel-relay-plugin-loader` and compared the generated output of working vs non-working, and there is no difference.  Perhaps this isn't enough to exclude this possibility, or perhaps it is.
### Possibility 2

We have shrunk the scope of `app`'s use of `lib` down to a minimum.  We first rendered the component without a relay container successfully. 

Then we added back a single relay container/query.  We see:
- no query on the server side
- no content rendered from the container component
- error in the log: `Uncaught Invariant Violation: RelayQueryNode: Abstract class cannot be instantiated.`

**I'm stuck without some help.**

(EDIT I fixed the ref issue since my initial posting of this issue)
/cc @bmcdaniel11
",rosskevin,2017-01-31 02:01:30
1368,2016-09-06 15:41:05,"We have determined that like `react`, `react-relay` does not behave when it is found in more than just the root `node_modules`.  For example, the `lib` relies on `react-relay` as a `dependency`, and so does the `app`.  

To solve this, we used `peerDependencies` and `devDependencies` in our `lib` project to specify react and relay, and while that works for react, we **also** had to use a webpack alias for `react-relay` to point to the local `node_modules` (even though `npm ls react-relay` only shows the local install).

I don't know the reason react or relay behave this way, but I do know that the [react library is proactive to raise an error to a note stating what the causes may be](https://facebook.github.io/react/warnings/refs-must-have-owner.html).  So, two things:
1. If someone could point me to anything that would enlighten me as to why react/relay do this, I'm interested in learning.  Any thoughts/pointers are welcome.
2. I think not having a relevant error message is a legitimate bug in relay.  We spent 1.5 days trying to figure it out, and I would very much like it if there was, at a minimum, an error message similar to that of react.
",rosskevin,2017-01-31 02:01:30
1368,2016-09-06 15:55:37,"I found some background info on what to do for reusable libraries and react (which advice I assume also applies for relay): http://stackoverflow.com/a/30454133/2363935
",rosskevin,2017-01-31 02:01:30
1368,2016-09-06 16:35:24,"Thanks for debugging this and providing more info. Having multiple copies of `react-relay` within an application would definitely explain this bug; the duplication of modules is a serious deficiency of npm that libraries have no choice but to work around.

We'd be open to a PR to add a more extensive error message here!
",josephsavona,2017-01-31 02:01:30
1368,2017-01-31 02:01:30,"Going through and closing issues that haven't had any recent activity. We'd still be open to reviewing a PR that improved the error messaging here, but it's not something that any of us are actively working on internally, so I am going to close this. Thanks very much for reporting it in such detail though!",wincent,2017-01-31 02:01:30
1367,2016-09-01 19:55:33,,wincent,2016-09-01 21:46:43
1367,2016-09-01 19:55:45,"@facebook-github-bot import
",wincent,2016-09-01 21:46:43
1366,2016-09-01 17:40:11,,wincent,2016-09-01 18:46:42
1366,2016-09-01 17:40:24,"@facebook-github-bot import
",wincent,2016-09-01 18:46:42
1365,2016-08-31 12:01:47,"After reading the discussions/solutions in the following issues regarding batching
Collapse and Batch queries #520
Custom Network Layer -- Modifying the RelayQueryRequest #654
I still feel the proposed solution (wrapping the queries client side and unwrapping on the server) only partially solves the problem of multiple paralel requests to the node endpoint.

Consider the task of displaying a list of items (that implement the node interface) and their properties (a,b,c).
If after the initial fetch of, let's say 100 items, you decide to display also the 'd' propertie, then relay will issue 100 requests to the node endpoint.
All of those requests (most of the time) will have the exact same query, only the variable value (id) will be different.
If you go with the proposed route, after the requests will be unwrapped on the backend server, they will still look like 100 concurrent requests hitting the server. If those items are fetched from the db, it means either 100 opened db connections or sequencing them over `x` db connections.

A much more optimal solution would be if a multiple queries like this 
`query ($id_0:ID!) { node(id:$id_0) { ... } }`
could be rewritten on the client side (where there is already an AST present) into 
`query ($ids_0:[ID]!) { nodes(ids:$ids_0) { ... } }` 
provided the graphql server implements the `nodes` endpoint.

The difference between the two methods basically is the same as running 100 queries like `select * from items where id = ....` compared to `select * from items where id in (....)`

I guess my question boils down to:
Can someone give an example of generating (not modifying the original request) a RelayQueryRoot to the `nodes` endpoint starting from a request to `node` interface.
The plan is run this single request, then walk the result and distribute the fetched nodes to the original requests.

Thank you
",ruslantalpa,2016-09-05 22:03:22
1365,2016-09-05 17:40:02,"Thanks for asking about this. 

There are a few approaches here:
- use `forceFetch` so that Relay doesnt diff the input query. This means the app will send one query instead of n. 
- use `relay-network-layer` on client and server in order to batch the eg 100 requests into one. 

Longer term, we are moving away from dynamic queries and query diffing. In the next major version - Relay 2 (#1369) - queries are static, which will prevent this issue from occurring. 

Do either of the first two approaches help? 
",josephsavona,2016-09-05 22:03:22
1365,2016-09-05 17:49:25,"option 1 works in a way but negates all the advantages of Relay
option 2, that's exactly what i am asking for, i want to batch all those queries in a single request, but not like a simple envelop that is unpacked server side, but collect all the requests that are the same and create a single dynamic request that would fetch all the needed nodes then redistribute the result to the original request.
(reading about Relay 2 now)
",ruslantalpa,2016-09-05 22:03:22
1365,2016-09-05 18:05:37,"> option 1 works in a way but negates all the advantages of Relay

I have to respectfully disagree with you on this. Query ""diffing"" is an extra layer of optimization that can be beneficial in some cases. But it is a tradeoff: diffing itself is non-free, and it requires printing a query string at runtime (also not free). Merging n requests into one is also not free, and can't be done universally (each of those n requests _could_ end up fetching different fields, depending on what was fetched before). 

Overall, we've found that diffing isn't the right tradeoff. In Relay 2 we will only support binary diffing (either skip the query if all data is fetched, or refetch in full if anything is missing), along with first-class APIs for common cases such as pagination. 

Another short-term option is to ""prefetch"" the data - if you're seeing lots of small requests when transitioning from view A to view B, you might explicitly include view B's fragment in query A. That way the data is already cached for the transition. 
",josephsavona,2016-09-05 22:03:22
1365,2016-09-05 18:08:15,"(Didn't mean to close, the GitHub ""close issue"" button is terribly positioned on mobile.)
",josephsavona,2016-09-05 22:03:22
1365,2016-09-05 18:45:35,"I understand your challenges in making Relay universally  applicable and as fast as possible (hense no more diffing) and you've probably seen how it works in multiple scenarios it's just that in the scenario i'm thinking of (which is not that uncommon) there are a few problems with what you said above:
- query diffing and all that, while not free, is much more cheeper  than fetching unneeded data over the wire (that was the main promise of GraphQL), not to mention the extra load on the db for fetching that data (i think ppl will want to offload most of the computation to the client instead of the backend db). In all relay examples it seems you always fetch 10-15 items (mobile app) but i am thinking 100 items each with 10-20 child items (desktop app)
- For the following query in relay 2

<S_CODE_TOKEN>

if at first $showTasks is false, only the projects will be fetched (think 100), then if it changes to true, the same data 100 projects will be fetched but this time with the additional tasks info.
Relay 1 on the other hand would fetch only the tasks info for all the project nodes (which i think is good in this case) and all that's needed is to use the `nodes` endpoint and make 1 request instead of using `node` endpoint.

Maybe i did not make it quite clear, in this particular case, i was happy with how relay chose to fetch the info, i was just looking for how one could ""on the fly"" create a request based on the AST in the original request. Since this behaviour will change completely in Relay2 i guess it's relevant but from what you mentioned it seems there would be many situations with a lot of over-fetching, it's particularly scary when the query will be several layers deep (company>clients>projects>tasks>comments) and and one component decides to fetch an additional field.

Maybe i misunderstood your post so i'll go and watch the info in the issue you linked.
Feel free to close this.
Thanks again

 Edit: I guess i am looking at this as running in a browser on a powerful CPU and you are concentrating on making things work fast in a mobile setting.
",ruslantalpa,2016-09-05 22:03:22
1364,2016-08-31 07:07:03,"for issue #1361 @wincent 
",vangavroche,
1364,2016-08-31 07:07:26,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,
1364,2016-08-31 07:08:06,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,
1364,2016-08-31 08:32:10,"Thanks for this @vangavroche. I've left some superficial nit comments, but will take a proper look tomorrow. I have a diff to fix the unrelated Travis failures, which are due to something bad that I merged earlier today.
",wincent,
1364,2016-09-02 23:16:45,"@facebook-github-bot import
",wincent,
1363,2016-08-30 23:48:32,"Allowing `babel-relay-plugin` be configured with `enforceSchema` by default,
so you don't have to set it in your Babel's options.

This is specially useful if you want to ship a custom plugin that includes default settings for your Relay/GraphQL projects.
",gabriel-laet,
1362,2016-08-30 15:15:40,"Closes https://github.com/facebook/relay/issues/1357

When new props are received on a `RelayContainer` a verification step is executed with the new props and the current relay variables and if at least one prop variable has a different value than its corresponding relay variable then the current relay variables are reset to the initial state. But the problem was that `===` was used for comparison and this always return a mismatch for props of type `Object` (arrays, objects) resulting in relay variables always being reset to the initial state even if the prop variables are the same.

See github issue for a detailed example.

The fix was to use `areEquals` which does a deep comparison and can match `Object` javascript types.
",josercruz01,2016-08-30 23:31:54
1362,2016-08-30 15:50:23,"Thanks @josercruz01. I have a couple of minor formatting nits but I'll just import this and patch them.
",wincent,2016-08-30 23:31:54
1362,2016-08-30 15:50:31,"@facebook-github-bot import
",wincent,2016-08-30 23:31:54
1362,2016-08-30 15:51:36,"Thanks for importing.If you are an FB employee go to [Phabricator](https://phabricator.intern.facebook.com/D3791469) to review internal test results.
",facebook-github-bot,2016-08-30 23:31:54
1362,2016-08-30 17:31:42,"Hey @wincent I pushed one commit to resolve some of the comments made by Joseph and while doing so I noticed a couple of linter warnings on the new test code. Are those the formatting bits you are taking care of in your patch or should I go ahead and push a commit for those?
",josercruz01,2016-08-30 23:31:54
1362,2016-08-30 17:41:59,"I was going to fix the nits that @josephsavona mentioned, but you already did that. Linter just exploded for me. What lints are you seeing?
",wincent,2016-08-30 23:31:54
1362,2016-08-30 18:00:35,"Oh sorry about that.

Here is the output of `npm run lint` (only showing files touched by my PR):

<S_CODE_TOKEN>
",josercruz01,2016-08-30 23:31:54
1361,2016-08-30 06:26:51,"Looks like it doesn't work when the deletedIDFieldName is an array.

Given this config:

<S_CODE_TOKEN>

the ultimate query may be like:

<S_CODE_TOKEN>

where the `deletedTodo { id }` is generated by [buildFragmentForDeletedConnectionNodeID  function of the RelayMutationQuery](https://github.com/facebook/relay/blob/master/src/mutation/RelayMutationQuery.js#L571)

When the response payload is returned, [writeRelayUpdatePayload](https://github.com/facebook/relay/blob/master/src/traversal/writeRelayUpdatePayload.js#L119) will try to delete the node, according to the deletedIDFieldName.

But the issues is, if the deletedIDFieldName is an array, these lines of code will not work correctly:

<S_CODE_TOKEN>

because the recordIDs here will be a JSON.
",vangavroche,
1361,2016-08-30 23:29:30,"At the moment we expect a field name here, not an array path, by design.

Having said that, we added support for array paths for `RANGE_DELETE` mutations a while back. On the surface of it, I am not aware of any reason why we couldn't do the same for `NODE_DELETE` as well. Any interest in submitting a PR?
",wincent,
1361,2016-08-31 07:07:53,"Yes, I think supporting an array path will be much more flexible.  PR is created.
",vangavroche,
1360,2016-08-30 01:44:14,"Just erasing markdown inside the code, as it is not parsed.

If you don't like my way just please change that, because could be confused with `template strings`.
",juangl,2016-08-30 23:31:54
1360,2016-08-30 01:44:55,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-08-30 23:31:54
1360,2016-08-30 03:05:42,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-08-30 23:31:54
1360,2016-08-30 17:48:48,"Thanks for the PR, @juangl.

Using Markdown style formatting in comments is a convention that we follow widely (not just in samples in the documentation, but in the source code as well, in this and in other repos too) so this is not a change that we would want to make unless we were doing it consistently everywhere, which would require further discussion.

So I am going to close this for now. If you feel strongly about changing the convention please open an issue and we'll label it with the ""discussion"" label and we can talk about it further. I do worry that this would tend to be somewhat of a bikeshed issue, and I also think that in a case like this the value of sticking to a well-established convention outweighs the cost of conversion, and the cost of possible confusion that people might feel seeing backticks inside of comments (note: if you are concerned that people might see them as template literals, are you also worried that they might perceive single and double-quoted strings as string literals?).

Thanks once again for the submission though.
",wincent,2016-08-30 23:31:54
1360,2016-08-30 18:25:05,"@wincent Thanks for response. I will be more specific. It gets confusing particulary  when backticks  are inside a template literal. I won't open a issue because I also think that is not too relevant though I let you know.

<S_CODE_TOKEN>
",juangl,2016-08-30 23:31:54
1360,2016-08-30 18:56:42,"I see, thanks for clarifying. So it's not confusing; it's actually syntactically invalid. We should definitely fix those ones, but leave the others as they were before. Want to submit an update?
",wincent,2016-08-30 23:31:54
1360,2016-08-30 19:53:04,"@wikichen Sure! It's done. Hope your review.
",juangl,2016-08-30 23:31:54
1360,2016-08-30 19:59:21,"Thanks!
",wincent,2016-08-30 23:31:54
1360,2016-08-30 19:59:38,"@facebook-github-bot import
",wincent,2016-08-30 23:31:54
1360,2016-08-30 20:00:48,"Thanks for importing.If you are an FB employee go to [Phabricator](https://phabricator.intern.facebook.com/D3793191) to review internal test results.
",ghost,2016-08-30 23:31:54
1359,2016-08-30 00:59:26,"We had a bit of a backlog here as I have been away. Now we're back on track!
",wincent,2016-08-30 16:16:32
1359,2016-08-30 01:00:18,"@facebook-github-bot import
",wincent,2016-08-30 16:16:32
1359,2016-08-30 01:00:45,"Thanks for importing.If you are an FB employee go to [Phabricator](https://phabricator.intern.facebook.com/D3789421) to review internal test results.
",ghost,2016-08-30 16:16:32
1358,2016-08-29 19:05:50,"I'm getting strange behavior for Renderer. I have another view where this is working. But if I do this

<S_CODE_TOKEN>

The relay props are `null`. But if I leave off the `render` completely, the relay props are passed fine.
",ssomnoremac,2016-08-30 19:00:57
1358,2016-08-29 19:11:50,"<S_CODE_TOKEN>
",nodkz,2016-08-30 19:00:57
1358,2016-08-29 19:16:08,"`{props}` destructures props from this:
`Object {done: false, error: null, events: Array[0], props: null, stale: false…}`
",ssomnoremac,2016-08-30 19:00:57
1358,2016-08-29 19:31:05,"Think that was simple typo.
Read this comments https://github.com/facebook/relay/blob/master/src/container/RelayRenderer.js#L88 may be help to find solution.

PS. I'm never use Relay.Renderer directly. Always via https://github.com/relay-tools/react-router-relay
",nodkz,2016-08-30 19:00:57
1358,2016-08-30 19:00:57,"I will leave the answer here in case anyone needs it after I close. Relay will pass `null` for props until it receives the data so If your view is expecting it you have to provide a default.
",ssomnoremac,2016-08-30 19:00:57
1358,2016-08-30 22:47:27,"Thanks for following up, @ssomnoremac!
",wincent,2016-08-30 19:00:57
1357,2016-08-29 18:23:44,"I've run into an issue where the `RelayContainer` resets its current fragment variables state and forgets variables I've already set via `this.props.relay.setVariables`. 

I've tracked down the problem to the method `RelayContainer#resetPropOverridesForVariables`, which is called inside the `RelayContainer#componentWillReceiveProps`. This method resets the container's fragment variables state to the initial variables if any of the new props has changed.

So basically the method checks all fragment variables and resets the state if at least one changed, but in my case it always gets reset because one of those variables is an `array` which never returns true for `===` comparison.

You can see below for my `prepareParams` method which converts the query param into an array. My question is, would it make sense to provide a hook for custom equality comparison (maybe check if the prop has an `equals` method, that way I could send in an Immutable List) or should I not be converting to array at all and send a string to the server?

I would rather not send a string if possible, just so I don't have to do extra work on the client and server to parse the string to array, any recommendations?

<S_CODE_TOKEN>
",josercruz01,2016-08-30 23:31:54
1357,2016-08-29 19:10:24,"I think i have seen a similar issue in my setup. I don't have a resolution yet.
",chirag04,2016-08-30 23:31:54
1357,2016-08-30 02:31:37,"Thanks for filing the issue. Its probably reasonable for the variable comparison here to use `areEqual` instead of `===` since variables can be arrays or objects. 

Feel free to send a PR for this!
",josephsavona,2016-08-30 23:31:54
1357,2016-08-30 15:16:58,"Thanks Joseph, opened up a PR.
",josercruz01,2016-08-30 23:31:54
1356,2016-08-29 06:35:13,"The easiest way to explain the issue is with our use case. We have matchMedia breakpoints in our site which are stored in context, when the screen site changes enough to swap between breakpoints the change isn't getting to all children correctly.

I seem to be able to reproduce the issue using the web todo example here https://github.com/relayjs/relay-examples with the following changes:

Add to the top of TodoApp.js

<S_CODE_TOKEN>

Add to the top of TodoListFooter.js

<S_CODE_TOKEN>

If you change the screen size to be small enough you should see the log 'TodoApp - shouldComponentUpdate: desktop' in the console. but the TodoListFooter's 'shouldComponentUpdate' method won't be called.

Now, if you remove the query from TodoListFooter.js (swap the 'createContainer' block with the following):

<S_CODE_TOKEN>

And update the query in TodoApp.js to be:

<S_CODE_TOKEN>

Then reload the page; changing the size of the website should now log 'TodoApp - shouldComponentUpdate: desktop' and 'TodoListFooter - shouldComponentUpdate: desktop' in the console.

I took a look around and it seems like RelayContainer.prototype.shouldComponentUpdate is returning false (it makes it to the final return statement). Not sure how to go about solving the issue in Relay though.
",mpretty-cyro,2016-08-29 07:14:58
1356,2016-08-29 06:51:50,"Thanks for filing an issue. The culprit here is the use of React context. Relay tries to avoid updates to components whose props and fragment data have not changed by implementing a conservative shouldComponentUpdate. Relay can't check every possible contest key, though. If you have no other way to do something than React context, there is an escape hatch: set `shouldComponentUpdate: () => true` In your container definition. 

See also the API docs: https://facebook.github.io/relay/docs/api-reference-relay-container.html#shouldcomponentupdate
",josephsavona,2016-08-29 07:14:58
1356,2016-08-29 07:05:06,"Yea, we figured that's what it was. We didn't actually work though a proper solution before I raised the issue. But yes, unfortunately we would probably need to somehow generate a 'context tree' based on all of the contextTypes of the children. Which seems complex and painful. Thanks for the response though, will have to keep in mind not to use context in the future.
",mpretty-cyro,2016-08-29 07:14:58
1356,2016-08-29 07:14:58,"And didn't see that it was in the docs, will close the issue.
",mpretty-cyro,2016-08-29 07:14:58
1355,2016-08-25 13:24:04,"What is the timeline for a 0.9.3 release with: https://github.com/facebook/relay/commit/dcc97a431af719b71b62506ce8fe29b85158ef3e included?
",cancan101,2016-09-02 17:26:41
1355,2016-08-29 15:37:51,"@cancan101, I am planning on cutting a release this week. I'll update this issue if anything unexpected comes up that would delay it.
",wincent,2016-09-02 17:26:41
1355,2016-09-02 09:50:24,"awesome, just noticed you published the latest version of relay, but `babel-relay-plugin` is still on 0.9.2

can release it as well or does it require more work?

NPM warning

<S_CODE_TOKEN>
",nikgraf,2016-09-02 17:26:41
1355,2016-09-02 16:59:17,"I think there is something fishy with NPM. I can't see it on [the releases page](https://www.npmjs.com/package/babel-relay-plugin), but I definitely ran `npm publish`. If I try to run it again, in fact, I get this:

<S_CODE_TOKEN>

I might have to bump the version number and republish.

ಠ_ಠ
",wincent,2016-09-02 17:26:41
1355,2016-09-02 17:12:33,"`npm install babel-relay-plugin` in an empty directory installs 0.9.3 for me and `npm view babel-relay-plugin` also shows 0.9.3 as the latest release. Looks like the npmjs website just has a caching issue?
",kassens,2016-09-02 17:26:41
1355,2016-09-02 17:26:41,"Ok, I think I might have overreacted here because the listing on npmjs.com is busted. The package actually _is_ published. The reason you are seeing that message @nikgraf is because babel-relay-plugin is a peer-dependency. Under NPM 3, you have to supply it yourself.

<S_CODE_TOKEN>

The fact that the listing on the webside has failed to update after over 12 hours is a separate issue that threw me off, and which I unfortunately don't think is likely to resolve itself until we publish a new version, but I don't think it is worth it.
",wincent,2016-09-02 17:26:41
1355,2016-09-05 09:12:11,"Thanks for taking care of it!

Quite interesting. The website still shows me that 0.9.2 is the last uploaded version while `npm view babel-relay-plugin versions` shows the right results. Might be a caching issues …

<S_CODE_TOKEN>

![screen shot 2016-09-05 at 11 10 13](https://cloud.githubusercontent.com/assets/223045/18243055/892e8c66-7359-11e6-8f0e-bea1414bfb8f.png)
",nikgraf,2016-09-02 17:26:41
1354,2016-08-24 22:20:16,"For some reason when I do a mutation and get a return value with REQUIRED_CHILDREN in getConfigs, connections are being returned with a strange alias: `_tierItems2EmfF3` where it should be `tierItems`.

When I make the same mutation through GraphiQL, the connection is returned properly.

I am not sure if this is some kind of configuration issue, but I have no idea what could be causing this.
",Rohit-cheddr,
1354,2016-12-11 11:02:44,"I have the same problem. I think it is related to the fact that relay adds connection parameters when the query is created (e.g. first:100). But how can we access the data properly when the mutation returns?

Help?!",toxsick,
1354,2016-12-16 16:06:55,"Also having the same problem.
Relay don't seem to handle user alias on data passed to commit callback (using REQUIRED_CHILDREN).
<S_CODE_TOKEN>

As a workaround, I'm using relay `generateRQLFieldAlias` internal method to get actual field name (`generateRQLFieldAlias('aField.status(def)')`",rodrigopr,
1354,2016-12-23 04:22:13,"I've run into this as well. I'm executing a mutation directly using `Relay.GraphQLMutation` with a connection in the response. I'd like to use the response data in my `onSuccess` callback though the connection is coming back aliased in the response: `_pendingSessionst2Pdh` in my case instead of `pendingSessions`. 

In my instance, the connection parameters are fixed (first: 100) so I can use the known alias directly though this feels hacky. How are aliases really supposed to be handled?

",davidstoker,
1354,2017-02-28 01:30:42,"I just hit this as well, for certain fields when I include them in a `REQUIRED_CHILDREN` fragment the fields are sent to the `onSuccess` handler with their aliased name.",dpehrson,
1353,2016-08-24 22:01:34,"We recently ran into an problem where Relay was generating invalid GraphQL queries. A query variable had a value with a character (`""\u0013""`) that's [invalid](https://github.com/graphql/graphql-js/pull/186/files#diff-6908a1174c4e9de36b7e8998c5db713aR360) in the GraphQL spec. We expected that this would be fine, since this character (and other similar characters) are valid in JSON, and variables are encoded in JSON and sent separately from the query.

However, even though this value was in a variable it still ended up as part of the printed query. Only variables with Object and Enum types, and the identifying arg got sent as variables, the rest (variables with scalar types) were substituted directly into the printed query.

e.g. a query:

<S_CODE_TOKEN>

With variables: `{""name"": ""user input \u0013""}`
Got transformed into

<S_CODE_TOKEN>

Which is an invalid query.

Digging through `printRelayOSSQuery` I found that `Relay.QL` doesn't doesn't add type metadata for scalar arguments (see [printArgumentTypeForMetadata](https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/RelayQLPrinter.js#L687-L701)), which causes [printArgument](https://github.com/facebook/relay/blob/master/src/traversal/printRelayOSSQuery.js#L306-L323) (in printRelayOSSQuery.js) to substitute the value of the variable in directly, instead of treating it as a variable.

Can you explain why the values of scalar variables (and wrapped scalars, e.g. `String!` or `[String]`) are substituted into queries, instead of getting sent separately as variables?
Would you be interested in a PR changing this behavior, or making it configurable?

Thanks!
",samn,2017-01-31 01:18:03
1353,2016-09-03 22:42:34,"Hmm. It seems like that query should be valid, and that GraphQL should accept common syntax for representing Unicode values. 

In Relay 2 - #1396 - this problem will go away, though: only values that you inline in the GraphQL text will be printed inline. Variables will always be sent as variables (simple, predictable). 

For current Relay it all boils down to perf - if we can generate more variables and it doesn't affect performance then we can make that change. If it affects perf, we may need to use a workaround until Relay 2. I'd suggest sending a PR with just the minimal changes to print strings as variables instead of inlining. Don't worry about tests or Flow - just get it working and send a PR, and we can benchmark it and go from there. 
",josephsavona,2017-01-31 01:18:03
1353,2016-09-06 18:47:30,"Thanks for the context @josephsavona! I'll put together a PR to facilitate benchmarking.
",samn,2017-01-31 01:18:03
1353,2016-09-21 20:13:57,"@josephsavona I'm interested in this also: I want to be able to cache validated queries on the server side, which we can do easily if all of the variables are properly extracted.

I am able to get the non-inlined behavior by changing the https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/RelayQLPrinter.js#L687-L701 method that @samn pointed out.

Are there benchmarks in the open source repo that I could run during development? Or is the best workflow just to open a PR and wait for a response from the team?
",jsdnxx,2017-01-31 01:18:03
1353,2016-09-22 04:16:54,"We don't have benchmarks in the repo for this, we are currently testing in a device lab. If you send a PR we can try to benchmark as time permits. That said, we're primarily focused on developing the next version of Relay, where this will hopefully be a non-issue. 
",josephsavona,2017-01-31 01:18:03
1353,2017-01-31 01:18:03,"As the new Relay core and APIs are currently being rolled out (see activity on the `master` branch, and watch it for more pieces landing in the coming weeks/months), I don't think we're going to take any further action on this one. We're aggressively prioritizing rolling out the new core/APIs over working on the legacy ones.

Thanks for bringing this up, however. We appreciate your input!",wincent,2017-01-31 01:18:03
1352,2016-08-23 22:48:35,"Hi, I'm trying to configure Relay for around one week and without success. I'm already frustrated. As I solve one problem another one emerges. It looks like it will never end. I don't know what I'm doing wrong but right now I'm stuck with the following error:

<S_CODE_TOKEN>

From what I know it's probable somehow related with `babel-relay-plugin` but everything seems to be configure properly. Here is very minimal repository https://github.com/usefulio/nextgen

Don't look at the `server` directory as it stopped working when I've change directories structure. The most important parts are `webpack.config.js`, `packages.json`, `plugins/babelRelayPlugin.js` and `client` directory. Can any one tell me what's wrong? Is there any good tutorial from start to end on how to work with webpack, babel and relay?
",jagi,2017-01-31 01:15:09
1352,2016-08-24 05:35:44,"Can check with the below course on Pluralsight its helpful

https://www.pluralsight.com/courses/react-apps-with-relay-graphql-flux
",shashwattt-Pretlist,2017-01-31 01:15:09
1352,2016-09-21 03:40:43,"I was getting this error. I found a workaround. Instead of following the example .babelrc provided in `relay-starter-kit`  which is 

<S_CODE_TOKEN>

I changed `.babelrc` to 

<S_CODE_TOKEN>

This worked for me. I have not yet found the cause of the issue though.
",saintsjd,2017-01-31 01:15:09
1352,2017-01-31 01:15:09,"(Spring cleaning.) I'm going through old issues cleaning out things that haven't had any activity in a while and it looks like this one has a workaround posted above, so I'm going to close it. For future reference, I'd recommend posting questions like this on a purpose-built Q&A forum like Stack Overflow, where you are more likely to get a timely response (and where others will be more likely to find the answer too and benefit from it). If you do post there in the future, please share a link to your Stack Overflow question here, to so that others stumbling across this can find it.",wincent,2017-01-31 01:15:09
1352,2017-01-31 08:18:20,"Sorry for not closing issue. In deed I've solved that problem, don't remember how.",jagi,2017-01-31 01:15:09
1352,2017-01-31 09:05:58,Github pro tip: You can see your all issues you created here: https://github.com/issues,YasserKaddour,2017-01-31 01:15:09
1351,2016-08-23 18:52:33,"let me know if this should be on stack overflow and i'll close it straight away, 

here a [playground illustrating the issue](https://facebook.github.io/relay/prototyping/playground.html#source=class%20AddTodoMutation%20extends%20Relay.Mutation%20%7B%0A%0A%20%20static%20fragments%20%3D%20%7B%0A%20%20%20%20viewer%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20User%20%7B%0A%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%20%20widget%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Widget%20%7B%0A%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20likedByUser%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%20%20getMutation%28%29%20%7B%0A%20%20%20%20return%20Relay.QL%60mutation%20%7B%20addTodo%20%7D%60%3B%0A%20%20%7D%0A%0A%20%20getVariables%28%29%20%7B%0A%20%20%20%20return%20%7B%0A%20%20%20%20%20%20name%3A%20this.props.name%2C%0A%20%20%20%20%20%20id%3A%20this.props.id%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%20%20getFatQuery%28%29%20%7B%0A%20%20%20%20return%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20AddTodoMutationPayload%20%20%40relay%28pattern%3A%20true%29%20%7B%0A%20%20%20%20%20%20%20%20widget%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20%20%20likedByUser%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20viewer%20%7B%0A%20%20%20%20%20%20%20%20%20%20favorites%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20widgets%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20likedByUser%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20newFavoriteEdge%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%3B%0A%20%20%7D%0A%0A%20%20getConfigs%28%29%20%7B%0A%20%20%20%20return%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20type%3A%20'RANGE_ADD'%2C%0A%20%20%20%20%20%20parentName%3A%20'viewer'%2C%0A%20%20%20%20%20%20parentID%3A%20this.props.viewer.id%2C%0A%20%20%20%20%20%20connectionName%3A%20'Favorite'%2C%0A%20%20%20%20%20%20edgeName%3A%20'newFavoriteEdge'%2C%0A%20%20%20%20%20%20rangeBehaviors%3A%20%7B%0A%20%20%20%20%20%20%20%20''%3A%20'append'%2C%0A%20%20%20%20%20%20%20%20'orderby%28oldest%29'%3A%20'prepend'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20type%3A%20'FIELDS_CHANGE'%2C%0A%20%20%20%20%20%20fieldIDs%3A%20%7B%0A%20%20%20%20%20%20%20%20widget%3A%20this.props.widget.id%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%5D%3B%0A%20%20%7D%0A%0A%0A%7D%0A%2F%2F%20%20%20addTodo%0A%0Aclass%20App%20extends%20React.Component%20%7B%0A%20%20constructor%28%29%7B%0A%20%20%20%20super%28%29%3B%0A%20%20%20%20this._add%20%3D%20this._add.bind%28this%29%0A%20%20%7D%0A%0A%20%20_add%28%7Bid%2C%20name%7D%29%7B%0A%0A%20%20%20%20Relay.Store.commitUpdate%28new%20AddTodoMutation%28%7B%0A%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20viewer%3A%20this.props.viewer%2C%0A%20%20%20%20%20%20widget%3A%20%7B%0A%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%29%29%3B%0A%20%20%7D%0A%0A%20%20render%28%29%20%7B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%3Ch1%3EFavs%3C%2Fh1%3E%0A%20%20%20%20%20%20%7Bthis.props.viewer.favorites.edges.map%28%28x%2C%20i%29%20%3D%3E%20%3Cli%20key%3D%7Bi%7D%3E%7Bx.node.name%7D%3C%2Fli%3E%29%7D%0A%20%20%20%20%20%20%20%20%3Ch1%3EWidget%20list%3C%2Fh1%3E%0A%20%20%20%20%20%20%20%20%3Cul%3E%0A%20%20%20%20%20%20%20%20%20%20%7Bthis.props.viewer.widgets.edges.map%28edge%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cli%20key%3D%7Bedge.node.id%7D%3E%7Bedge.node.name%7D%20%28ID%3A%20%7Bedge.node.id%7D%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B%28widget%29%20%3D%3E%20this._add%28edge.node%29%7D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7Bedge.node.likedByUser%20%3F%20'UNLIKE'%20%3A%20'LIKE'%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fli%3E%0A%20%20%20%20%20%20%20%20%20%20%29%7D%0A%20%20%20%20%20%20%20%20%3C%2Ful%3E%0A%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0AApp%20%3D%20Relay.createContainer%28App%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20viewer%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20User%20%7B%0A%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20favorites%28first%3A%20100%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20widgets%28first%3A%20100%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20likedByUser%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24%7BAddTodoMutation.getFragment%28'widget'%29%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%24%7BAddTodoMutation.getFragment%28'viewer'%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0A%0Aclass%20AppRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20viewer%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20%7B%0A%20%20%20%20%20%20%20%20viewer%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%20%20static%20routeName%20%3D%20'AppHomeRoute'%3B%0A%7D%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BApp%7D%0A%20%20%20%20route%3D%7Bnew%20AppRoute%28%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B&schema=class%20User%20%7B%7D%0Aclass%20Widget%20%7B%7D%0A%0Aclass%20Favorite%20%7B%0A%20%20constructor%28fav%29%7B%0A%20%20%20%20Object.assign%28this%2C%20fav%29%0A%20%20%7D%0A%7D%0A%0A%2F%2F%20Mock%20data%0Avar%20viewer%20%3D%20new%20User%28%29%3B%0Aviewer.id%20%3D%20'1'%3B%0Aviewer.name%20%3D%20'Anonymous'%3B%0Avar%20widgets%20%3D%20%5B'What%5C's-it'%2C%20'Who%5C's-it'%2C%20'How%5C's-it'%5D.map%28%28name%2C%20i%29%20%3D%3E%20%7B%0A%20%20var%20widget%20%3D%20new%20Widget%28%29%3B%0A%20%20widget.name%20%3D%20name%3B%0A%20%20widget.likedByUser%20%3D%20false%3B%0A%20%20widget.id%20%3D%20%60%24%7Bi%7D%60%3B%0A%20%20return%20widget%3B%0A%7D%29%3B%0A%0A%0Avar%20favoirtes%20%3D%20%5B%5D%3B%0A%0A%20%20const%20getUser%20%3D%20%20%28id%29%20%3D%3E%20id%20%3D%3D%3D%20viewer.id%20%3F%20viewer%20%3A%20null%0A%20%20const%20getViewer%20%3D%20%28%29%20%3D%3E%20viewer%0A%20%20const%20%20getWidget%20%3D%20%28id%29%20%3D%3E%20widgets.find%28w%20%3D%3E%20w.id%20%3D%3D%3D%20id%29%0A%20%20const%20%20getWidgets%20%3D%20%28%29%20%3D%3E%20widgets%0A%20%20const%20addFavorite%20%3D%20%28fav%29%20%3D%3E%20%7B%0A%20%20%20%20const%20newFav%20%3D%20new%20Favorite%28fav%29%3B%0A%20%20%20%20favoirtes.push%28newFav%29%0A%20%20%20%20return%20newFav%3B%0A%20%20%7D%0A%20%20const%20toggleWidget%20%3D%20%28id%29%20%3D%3E%20%7B%0A%20%20%20%20const%20localWidget%20%3D%20widgets.find%28w%20%3D%3E%20w.id%20%3D%3D%3D%20id%29%3B%0A%20%20%20%20widgets%5Bwidgets.indexOf%28localWidget%29%5D.likedByUser%20%3D%20!localWidget.likedByUser%3B%0A%20%20%7D%0A%20%20const%20getFavorites%20%3D%20%28%29%20%3D%3E%20favoirtes%3B%0A%20%20const%20getFavorite%20%3D%20%28id%29%20%3D%3E%20favoirtes.find%28w%20%3D%3E%20w.id%20%3D%3D%3D%20id%29%3B%0A%20%20const%20createTodo%20%3D%20%28%7Bid%2C%20name%7D%29%20%3D%3E%20%7B%0A%20%20%20%20var%20newTodo%20%3D%20new%20Widget%28%29%3B%0A%20%20%20%20newTodo.id%20%3D%20id%3B%0A%20%20%20%20newTodo.name%20%3D%20name%3B%0A%20%20%20%20widgets.push%28newTodo%29%0A%20%20%20%20return%20newTodo%3B%0A%20%20%7D%0A%20%20%0Aimport%20%7B%0A%20%20GraphQLBoolean%2C%0A%20%20GraphQLFloat%2C%0A%20%20GraphQLID%2C%0A%20%20GraphQLInt%2C%0A%20%20GraphQLList%2C%0A%20%20GraphQLNonNull%2C%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%7D%20from%20'graphql'%3B%0A%0Aimport%20%7B%0A%20%20connectionArgs%2C%0A%20%20connectionDefinitions%2C%0A%20%20connectionFromArray%2C%0A%20%20fromGlobalId%2C%0A%20%20globalIdField%2C%0A%20%20mutationWithClientMutationId%2C%0A%20%20nodeDefinitions%2C%0A%7D%20from%20'graphql-relay'%3B%0A%0A%0A%2F**%0A%20*%20We%20get%20the%20node%20interface%20and%20field%20from%20the%20Relay%20library.%0A%20*%0A%20*%20The%20first%20method%20defines%20the%20way%20we%20resolve%20an%20ID%20to%20its%20object.%0A%20*%20The%20second%20defines%20the%20way%20we%20resolve%20an%20object%20to%20its%20GraphQL%20type.%0A%20*%2F%0Avar%20%7BnodeInterface%2C%20nodeField%7D%20%3D%20nodeDefinitions%28%0A%20%20%28globalId%29%20%3D%3E%20%7B%0A%20%20%20%20var%20%7Btype%2C%20id%7D%20%3D%20fromGlobalId%28globalId%29%3B%0A%20%20%20%20if%20%28type%20%3D%3D%3D%20'User'%29%20%7B%0A%20%20%20%20%20%20return%20getUser%28id%29%3B%0A%20%20%20%20%7D%20else%20if%20%28type%20%3D%3D%3D%20'Widget'%29%20%7B%0A%20%20%20%20%20%20return%20getWidget%28id%29%3B%0A%20%20%20%20%7D%20else%20if%20%28type%20%3D%3D%3D%20'Favorite'%29%20%7B%0A%20%20%20%20%20%20return%20getFavorite%28id%29%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20null%3B%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%28obj%29%20%3D%3E%20%7B%0A%20%20%20%20if%20%28obj%20instanceof%20User%29%20%7B%0A%20%20%20%20%20%20return%20userType%3B%0A%20%20%20%20%7D%20else%20if%20%28obj%20instanceof%20Widget%29%20%20%7B%0A%20%20%20%20%20%20return%20widgetType%3B%0A%20%20%20%20%7D%20else%20if%20%28obj%20instanceof%20Favorite%29%20%20%7B%0A%20%20%20%20%20%20return%20widgetType%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20null%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%29%3B%0A%0A%2F**%0A%20*%20Define%20your%20own%20types%20here%0A%20*%2F%0A%0Avar%20userType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'User'%2C%0A%20%20description%3A%20'A%20person%20who%20uses%20our%20app'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20globalIdField%28'User'%29%2C%0A%20%20%20%20widgets%3A%20%7B%0A%20%20%20%20%20%20type%3A%20widgetConnection%2C%0A%20%20%20%20%20%20description%3A%20'A%20person%5C's%20collection%20of%20widgets'%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28_%2C%20args%29%20%3D%3E%20connectionFromArray%28getWidgets%28%29%2C%20args%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20favorites%3A%20%7B%0A%20%20%20%20%20%20type%3A%20favoriteConnection%2C%0A%20%20%20%20%20%20description%3A%20'A%20person%5C's%20collection%20of%20widgets'%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28_%2C%20args%29%20%3D%3E%20connectionFromArray%28getFavorites%28%29%2C%20args%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0Avar%20widgetType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Widget'%2C%0A%20%20description%3A%20'A%20shiny%20widget'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20globalIdField%28'Widget'%29%2C%0A%20%20%20%20name%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20description%3A%20'The%20name%20of%20the%20widget'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20likedByUser%3A%7B%0A%20%20%20%20%20%20type%3A%20GraphQLBoolean%2C%0A%20%20%20%20%20%20description%3A%20'The%20name%20of%20the%20widget'%2C%0A%20%20%20%20%7D%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0A%2F**%0A%20*%20Define%20your%20own%20connection%20types%20here%0A%20*%2F%0Avar%20%7BconnectionType%3A%20widgetConnection%2C%20edgeType%3A%20TodoEdge%20%7D%20%3D%0A%20%20connectionDefinitions%28%7Bname%3A%20'Widget'%2C%20nodeType%3A%20widgetType%7D%29%3B%0A%0A%20%20var%20%7BconnectionType%3A%20favoriteConnection%2C%20edgeType%3A%20FavoriteEdge%20%7D%20%3D%0A%20%20%20%20connectionDefinitions%28%7Bname%3A%20'Favorite'%2C%20nodeType%3A%20widgetType%7D%29%3B%0A%0A%0A%2F**%0A%20*%20This%20is%20the%20type%20that%20will%20be%20the%20root%20of%20our%20query%2C%0A%20*%20and%20the%20entry%20point%20into%20our%20schema.%0A%20*%2F%0Avar%20queryType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Query'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20node%3A%20nodeField%2C%0A%20%20%20%20%2F%2F%20Add%20your%20own%20root%20fields%20here%0A%20%20%20%20viewer%3A%20%7B%0A%20%20%20%20%20%20type%3A%20userType%2C%0A%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20getViewer%28%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0A%0A%0Aconst%20addTodoMutation%20%3D%20mutationWithClientMutationId%28%7B%0A%20%20name%3A%20'AddTodoMutation'%2C%0A%20%20inputFields%3A%20%7B%0A%20%20%20%20id%3A%20%7B%0A%20%20%20%20%20%20type%3A%20new%20GraphQLNonNull%28GraphQLString%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20name%3A%20%7B%0A%20%20%20%20%20%20type%3A%20new%20GraphQLNonNull%28GraphQLString%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%2C%0A%20%20outputFields%3A%20%7B%0A%0A%20%20%20%20widget%3A%20%7B%0A%20%20%20%20%20%20type%3A%20widgetType%2C%0A%20%20%20%20%20%20resolve%3A%20%28%7BlocalWidgetId%7D%29%20%3D%3E%20getWidget%28localWidgetId%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20newFavoriteEdge%3A%20%7B%0A%20%20%20%20%20%20type%3A%20FavoriteEdge%2C%0A%20%20%20%20%20%20resolve%3A%20%28payload%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%2F%2Fconst%20ship%20%3D%20getShip%28payload.shipId%29%3B%0A%20%20%20%20%20%20%20%20%2F%2F%20const%20todo%20%3D%20%7Bid%3A'12321312323'%2C%20name%3A'new%20Todoodoood'%7D%0A%20%20%20%20%20%20%20%20const%20todo%20%3D%20getWidget%28payload.todoId%29%0A%20%20%20%20%20%20%20%20console.log%28todo%29%0A%20%20%20%20%20%20%20%20return%20%7B%0A%20%20%20%20%20%20%20%20%20%20cursor%3A%20cursorForObjectInConnection%28%0A%20%20%20%20%20%20%20%20%20%20%20%20getFavorites%28%29%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20todo%0A%20%20%20%20%20%20%20%20%20%20%29%2C%0A%20%20%20%20%20%20%20%20%20%20node%3A%20todo%2C%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20viewer%3A%20%7B%0A%20%20%20%20%20%20type%3A%20userType%2C%0A%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20getViewer%28%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%2C%0A%20%20mutateAndGetPayload%3A%20%28%7Bid%2C%20name%7D%29%20%3D%3E%20%7B%0A%20%20%20%20var%20localWidgetId%20%3D%20fromGlobalId%28id%29.id%3B%0A%0A%20%20%20%20const%20newTodo%20%3D%20addFavorite%28%7Bid%2C%20name%7D%29%0A%20%20%20%20toggleWidget%28localWidgetId%29%3B%0A%0A%20%20%20%20return%20%7B%0A%20%20%20%20%20%20todoId%3A%20newTodo.id%2C%0A%20%20%20%20%20%20localWidgetId%0A%20%20%20%20%20%20%2F%2FfactionId%3A%20factionId%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%2C%0A%7D%29%0A%0A%2F**%0A%20*%20This%20is%20the%20type%20that%20will%20be%20the%20root%20of%20our%20mutations%2C%0A%20*%20and%20the%20entry%20point%20into%20performing%20writes%20in%20our%20schema.%0A%20*%2F%0Avar%20mutationType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Mutation'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20addTodo%3A%20addTodoMutation%0A%20%20%20%20%2F%2F%20Add%20your%20own%20mutations%20here%0A%20%20%7D%29%0A%7D%29%3B%0A%0A%2F**%0A%20*%20Finally%2C%20we%20construct%20our%20schema%20%28whose%20starting%20query%20type%20is%20the%20query%0A%20*%20type%20we%20defined%20above%29%20and%20export%20it.%0A%20*%2F%0Aexport%20var%20Schema%20%3D%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20queryType%2C%0A%20%20%2F%2F%20Uncomment%20the%20following%20after%20adding%20some%20mutation%20fields%3A%0A%20%20%20mutation%3A%20mutationType%0A%7D%29%3B) (ignore unlike not implemented )

i'm trying to combine multiple types in the getConfigs() of a mutation and im getting the console warning 'Expected prop ... to be data fetched by Relay'. as far as i can see im fetching it on the mutation.

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",andyfen,2016-08-23 20:08:22
1351,2016-08-23 20:08:22,"closed - worked it out.
",andyfen,2016-08-23 20:08:22
1350,2016-08-23 09:57:33,"Hi,

in `RelayQLPrinter.js` on the `printField` method you have this code:

<S_CODE_TOKEN>

Concretely, this means that for a RelayQueryNode instance to have  `metadata.isConnection === true`, being a connection is not enough, it must have a connection arg too. What about connections without connectionArgs? They exist too, but can't harvest to power off `RANGE_ADD` or whatever because they are not recognized by Relay as connections.

What about this fix?

<S_CODE_TOKEN>

Best,
",dherault,2016-08-23 10:06:36
1350,2016-08-23 10:06:36,"I'm closing this because I thought connection args where mandatory (where they at some point?) on a query. Adding them to the field and not using them does the trick. 
Best,
EDIT: it does not, `last`, `first` or `find` are still mandatory.
",dherault,2016-08-23 10:06:36
1350,2016-08-23 18:35:56,"Thanks for asking about this. The intention of the code (overall, not just the snippet you mentioned) is that if you are fetching `edges` that you must specify a first/last filter call to limit the number of items fetched. If you aren't fetching edges, then you don't need a first/last argument.
",josephsavona,2016-08-23 10:06:36
1349,2016-08-21 22:00:52,"I'm finding myself in the situation where I would like to create a Relay Mutation as a class but then call the graphql function, passing in the corresponding query string of the Relay Mutation.  
For example, say I have this simple mutation: 

<S_CODE_TOKEN>

At the moment, I can't seem to find a way to get the associated printed query string for this mutation. Normally, by calling commitUpdate, passing in a new instance of this mutation, a query string would be sent in the request. I've explored the relay source code but there does not seem to be a publicly accessible function to manually get the printed query of the mutation.

I'm thinking the functionality would look similar to this:

<S_CODE_TOKEN>

I think this would be a nice feature because one can define a generic mutation and then use the graphql function to actually send the request. One example in particular where this would be useful is with publications and subscriptions. The client creates an instance of a 'subscription' mutation, which will be dispatched through the graphql function when it is needed.
Is this functionality a possible future addition to Relay?
",elonybear,
1349,2016-09-03 22:47:25,"I'm not sure I understand the use case. Is this a mutation or a (real-time) subscription? Wouldn't both of these use cases require calling the graphql function on the server? If you're running the schema on the client, perhaps you could use relay-local-schema? (Npm module)
",josephsavona,
1349,2016-09-04 02:26:39,"I apologize for the confusion. This would be a real-time subscription, implemented as a mutation to the subscriber's Relay Store. 

Each client connecting to the server would have a set of subscriptions, based on their circumstances (user or administrator, datasets they're looking at, etc.). Drawing from the todo example, let's say all clients subscribe to any additions to the list of todos. When each client connects to the server, they would emit (a potential use of sockets) this AddTodo subscription to the server, which would be stored by the server, perhaps associated with a unique ID so as to pick and choose which clients to update. In my mind, this subscription would be implemented as the Mutation class already defined by Relay. 

Then, if a particular client adds a todo, the desired behavior is that one could invoke a getPrintedQuery function (or the like) and getVariables function for each AddTodo subscription. With this printed query and variables, one can then call the graphql function for each client, updating their Stores as necessary. The 'rootValue' would be the data of the new todo. The variables could be things like permission access level or filters on the list of todos. However, as of now, it doesn't seem like a getPrintedQuery function exists publicly for any Relay Mutation instance. 
",elonybear,
1348,2016-08-21 17:44:02,"It seems like the `scripts/babel-relay-plugin/src/` directory doesn't exist anymore and only a compiled version is available.
Is this intended? https://github.com/facebook/relay/tree/master/scripts/babel-relay-plugin
",edvinerikson,2016-08-22 18:36:44
1348,2016-08-22 17:42:30,"No, thanks for catching this. This was an oversight by re-organizing the internal code that got synced to github: 1976109901487189407c86b7c2fdf68e85523ad7
",kassens,2016-08-22 18:36:44
1348,2016-08-22 18:36:44,"Restored with 6c72285a50bb8224359bb34add655fce19ea0666
",kassens,2016-08-22 18:36:44
1347,2016-08-20 20:55:33,"Closes https://github.com/facebook/relay/issues/1262

As discussed on the Github issue, the `pathToConnection` argument on the `RANGE_DELETE` mutation type was made a required field (https://github.com/facebook/relay/commit/71e2350ccb2bd3c8ce145d270788c9042b5fbff5)  but the example on https://facebook.github.io/relay/docs/guides-mutations.html#range-delete-example does not includes this field and raises a validation error when executed on the latest version of `relay`.

This PR updates the docs to include this field.
",josercruz01,2016-08-30 00:31:58
1347,2016-08-20 20:56:32,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-08-30 00:31:58
1347,2016-08-20 22:28:49,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-08-30 00:31:58
1347,2016-08-29 23:58:35,"Thanks!
",wincent,2016-08-30 00:31:58
1347,2016-08-29 23:58:56,"@facebook-github-bot shipit
",wincent,2016-08-30 00:31:58
1347,2016-08-30 00:00:00,"Thanks for importing.If you are an FB employee go to [Phabricator](https://phabricator.intern.facebook.com/D3788940) to review internal test results.
",facebook-github-bot,2016-08-30 00:31:58
1346,2016-08-19 16:44:14,"We're using Relay on some internal apps, but will be rolling it out to our public-facing apps soon!
",twhid,2016-08-19 18:16:40
1346,2016-08-19 16:45:16,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-08-19 18:16:40
1346,2016-08-19 17:20:46,"@facebook-github-bot shipit
",kassens,2016-08-19 18:16:40
1346,2016-08-19 17:21:39,"Thanks for importing.If you are an FB employee go to [Phabricator](https://phabricator.intern.facebook.com/D3742817) to review internal test results.
",ghost,2016-08-19 18:16:40
1345,2016-08-19 15:40:49,"For proper server side hot reload needed ability to change graphql schema in the [transformer](https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/getBabelRelayPlugin.js#L51).

I'm adding new fields to schema, json file automatically was regenerated by homemade webpack plugin. And now I can not found a proper way how to patch on fly `BabelRelayPlugin` with new schema  without restarting webpack.
",nodkz,2017-01-31 01:12:37
1345,2016-08-20 05:25:15,"Right now I'm watching @wincent [talk about Relay 2](https://www.youtube.com/watch?v=OEfUBN9dAI8&feature=youtu.be) and think that `making all static` should have DEV flag. Wants developer make all static, or computable at runtime according to Hot Reload when modules updated. 

Maybe I'm something missing. But I'm worried about losing HMR, cause it's the best feature, that developers have now.
",nodkz,2017-01-31 01:12:37
1345,2016-08-20 06:21:15,"I have to think a bit more about the OP. But to your comment: HMR and static/dynamic queries are orthogonal. In either case if a child component's data requirements change (eg its fragment changes), then the nearest parent renderer that fetched data for it must refetch using the new query containing the new fragment. Otherwise you can reload the component, but it will likely be missing data. 

In a dynamic query architecture the query would be rebuilt at runtime, in a static architecture the query would be regenerated by the build step and then refetched at runtime. In _either_ case, _something_ must tell the runtime that the parent module must reload given that the child changed. 1:1 module reloads (file A changed, therefore reload only that module in the browser) are simply insufficient in general for this use case. 

So this isn't about dynamic can static, but rather about teaching HMR systems generally about interdependencies. 
",josephsavona,2017-01-31 01:12:37
1345,2016-08-20 06:39:58,"> ...reload the component, but it will likely be missing data.

Crazy rabbit-hole for HMR.

@gaearon did you think about adding some hook for devs, that allows to fetch some data and put it to store before call `hot.module.accept()` in [RHL3](https://github.com/gaearon/react-hot-loader/tree/next)
",nodkz,2017-01-31 01:12:37
1345,2016-11-28 10:39:23,"@nodkz Did you ever get anywhere with this? I'm running into the same issues as well myself and would love to be able to hot patch the schema stored in BabelRelayPlugin without restarting webpack, as that's the only thing holding me back from getting at least some basic semblance of automatic schema generation working.",PawkaHub,2017-01-31 01:12:37
1345,2016-11-28 17:23:25,"@PawkaHub I would try composing the plugin: create a wrapper plugin that delegates to an instance of the Relay plugin, creating a new instance whenever the schema changes. ",josephsavona,2017-01-31 01:12:37
1345,2016-11-29 06:28:11,That worked great @josephsavona! Thanks for the suggestion. I'm gonna do a bit more testing with it just to make sure there's no hidden kinks in usage and then I'll look into releasing it as an NPM module for people to make use of.,PawkaHub,2017-01-31 01:12:37
1345,2016-11-29 16:21:56,"@PawkaHub Awesome! That's great to hear, looking forward to seeing that npm package :-)",josephsavona,2017-01-31 01:12:37
1345,2017-01-31 01:12:37,"(Spring cleaning.) Not sure if there is anything immediately actionable here, but I'm going through and cleaning out issues that haven't had any activity for a while, lack clear next steps and/or don't have anybody actively working on them.

Thanks to everybody who participated in the discussion.",wincent,2017-01-31 01:12:37
1344,2016-08-19 06:42:08,"- Video and slide link for Silicon Valley ReactJS Meetup.
- Add slide link to Relay Deep Dive.
",wincent,2016-08-19 23:02:00
1344,2016-08-19 06:44:20,"@facebook-github-bot import
",wincent,2016-08-19 23:02:00
1344,2016-08-19 06:45:44,"Thanks for importing.If you are an FB employee go to [Phabricator](https://phabricator.intern.facebook.com/D3741212) to review internal test results.
",ghost,2016-08-19 23:02:00
1343,2016-08-17 08:48:15,"It was this Blog post that finally got Relay and GraphQL into my head (along with some other docs)

Please make it the first tutorial http://graphql.org/blog/rest-api-graphql-wrapper/

If not I will be happy to contribute one :)
",jcampbell05,2017-01-31 01:09:42
1343,2017-01-31 01:09:41,"Thanks for the feedback, @jcampbell05, and sorry for taking so long to respond. We'd welcome PRs to improve out documentation, including improvements to the existing tutorial, or adding links to others such as the one that you mentioned. One thing to bear in mind: we're in the process of rolling out some new APIs and a new core (see ongoing activity on the `master` branch), so there may be some churn involved if you undertake documentation updates at this time; we're expecting to be publishing a fair bit of updated documentation over the coming weeks/months.

In the meantime, closing this to clean out the issue tracker a little bit.",wincent,2017-01-31 01:09:42
1343,2017-02-02 21:27:55,No worries 😀 ,jcampbell05,2017-01-31 01:09:42
1342,2016-08-16 22:02:09,"I have a Relay app and I want to clear cache for a component that displays after logging in. I tried passing a currentRelay.store into my Relay.Router and implementing a currentRelay.reset() which sets that store to a new Relay.Environment, then calling that after logout. The cache is still stored for some reason. I also tried calling this.props.relay.forceFetch({}) and this.forceUpdate() in componentDidMount(). The only way I can get the cache to clear is by manually refreshing the page. I wonder if there's a bug in Relay.Environment or I'm doing it wrong.
",andrewfader,2016-08-30 23:20:55
1342,2016-08-30 23:20:55,"Rendering with a brand new `Relay.Environment` should clear all internal state. We're not aware of any bugs (hidden state) that wouldn't get cleared; for example, the isomorphic-relay project is [using a new environment](https://github.com/denvned/isomorphic-relay/blob/b7fb72a15d750eed00b261b94f8730e05393a3f7/src/prepareData.js#L6) to perform clean-slate rendering for every request.

I'm going to close this as I don't think there is a bug here (happy to re-open if that is not the case), but I would suggest that you look at [`RelayRenderer`](https://github.com/facebook/relay/blob/b0d115dbd1b90d62a9aa9b20d0c8934d7328dd34/src/container/RelayRenderer.js) and how you can pass an `environment` prop to it. If you can't get to the bottom of your issue, would need to see some code to know more: I'd suggest posting a question on 

(edit: accidentally submitted early)

Stack Overflow with the tag #relayjs? (We'd like to keep the bug tracker for bugs and use a dedicated Q&A forum for questions and answers.) Post a link to your question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",wincent,2016-08-30 23:20:55
1341,2016-08-16 21:55:45,"The example below fails to load the `name` property the `Application` component clearly defines in it's fragment which is pulled in by the `ApplicationList`. However if I directly declare it in the `ApplicationList` property it works fine.

Any ideas? 

<S_CODE_TOKEN>
",jcampbell05,2016-08-17 08:47:09
1341,2016-08-17 07:45:02,"Hi @jcampbell05 ,
code seems to be correct, could you try to make repro in [relay playground](https://facebook.github.io/relay/prototyping/playground.html#/) so its possible debug?
",jardakotesovec,2016-08-17 08:47:09
1341,2016-08-17 08:44:11,"@jardakotesovec 

It works on the [playground](https://facebook.github.io/relay/prototyping/playground.html#schema=%2F**%0A%20*%20Copyright%20%28c%29%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0Avar%20graphql%20%3D%20require%28'graphql'%29%3B%0Avar%20relayql%20%3D%20require%28'graphql-relay'%29%3B%0A%0Aconst%20data%20%3D%20%7B%0A%20%20users%3A%20%7B%0A%20%20%20%201%3A%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22id%22%3A%20%221%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22James%22%2C%0A%20%20%20%20%20%20%22applications%22%3A%20%5B%0A%20%20%20%20%20%20%20%201%0A%20%20%20%20%20%20%5D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22applications%22%3A%20%7B%0A%20%20%20%201%3A%20%7B%0A%20%20%20%20%20%20%22id%22%3A%20%221%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22EchoBot%22%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%3B%0A%0Afunction%20getApplication%28id%29%20%7B%0A%20%20return%20data.applications%5Bid%5D%3B%0A%7D%0A%0A%2F%2F%20Define%20the%20Application%20type%20with%20two%20string%20fields%3A%20%60id%60%20and%20%60name%60.%0A%2F%2F%20The%20type%20of%20User%20is%20GraphQLObjectType%2C%20which%20has%20child%20fields%0A%2F%2F%20with%20their%20own%20types%20%28in%20this%20case%2C%20GraphQLString%29.%0Avar%20Application%20%3D%20new%20graphql.GraphQLObjectType%28%7B%0A%20%20name%3A%20'Application'%2C%0A%20%20fields%3A%20%7B%0A%20%20%20%20id%3A%20relayql.globalIdField%28'Application'%29%2C%0A%20%20%20%20name%3A%20%7B%20type%3A%20graphql.GraphQLString%20%7D%2C%0A%20%20%7D%0A%7D%29%3B%0A%0A%2F%2F%20Define%20the%20User%20type%20with%20two%20string%20fields%3A%20%60id%60%20and%20%60name%60.%0A%2F%2F%20The%20type%20of%20User%20is%20GraphQLObjectType%2C%20which%20has%20child%20fields%0A%2F%2F%20with%20their%20own%20types%20%28in%20this%20case%2C%20GraphQLString%29.%0Avar%20User%20%3D%20new%20graphql.GraphQLObjectType%28%7B%0A%20%20name%3A%20'User'%2C%0A%20%20fields%3A%20%7B%0A%20%20%20%20id%3A%20relayql.globalIdField%28'User'%29%2C%0A%20%20%20%20name%3A%20%7B%20type%3A%20graphql.GraphQLString%20%7D%2C%0A%20%20%20%20applications%3A%20%7B%20type%3A%20new%20graphql.GraphQLList%28Application%29%2C%20resolve%3A%20function%28user%29%20%7B%0A%20%20%20%20%20%20return%20user.applications.map%28function%28id%29%20%7B%0A%20%20%20%20%20%20%20%20return%20getApplication%28id%29%0A%20%20%20%20%20%20%7D%29%0A%20%20%20%20%7D%7D%0A%20%20%7D%0A%7D%29%3B%0A%0A%2F%2F%20Define%20the%20schema%20with%20one%20top-level%20field%2C%20%60user%60%2C%20that%0A%2F%2F%20takes%20an%20%60id%60%20argument%20and%20returns%20the%20User%20with%20that%20ID.%0A%2F%2F%20Note%20that%20the%20%60query%60%20is%20a%20GraphQLObjectType%2C%20just%20like%20User.%0A%2F%2F%20The%20%60user%60%20field%2C%20however%2C%20is%20a%20userType%2C%20which%20we%20defined%20above.%0Aconst%20Schema%20%3D%20new%20graphql.GraphQLSchema%28%7B%0A%20%20query%3A%20new%20graphql.GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%7B%0A%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20User%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20%60args%60%20describes%20the%20arguments%20that%20the%20%60user%60%20query%20accepts%0A%20%20%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%3A%20%7B%20type%3A%20graphql.GraphQLString%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20resolve%20function%20describes%20how%20to%20%22resolve%22%20or%20fulfill%0A%20%20%20%20%20%20%20%20%2F%2F%20the%20incoming%20query.%0A%20%20%20%20%20%20%20%20%2F%2F%20In%20this%20case%20we%20use%20the%20%60id%60%20argument%20from%20above%20as%20a%20key%0A%20%20%20%20%20%20%20%20%2F%2F%20to%20get%20the%20User%20from%20%60data%60%0A%20%20%20%20%20%20%20%20resolve%3A%20function%20%28_%2C%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20data.users%5Bargs.id%5D%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20application%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20Application%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20%60args%60%20describes%20the%20arguments%20that%20the%20%60application%60%20query%20accepts%0A%20%20%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%3A%20%7B%20type%3A%20graphql.GraphQLString%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20resolve%20function%20describes%20how%20to%20%22resolve%22%20or%20fulfill%0A%20%20%20%20%20%20%20%20%2F%2F%20the%20incoming%20query.%0A%20%20%20%20%20%20%20%20%2F%2F%20In%20this%20case%20we%20use%20the%20%60id%60%20argument%20from%20above%20as%20a%20key%0A%20%20%20%20%20%20%20%20%2F%2F%20to%20get%20the%20Application%20from%20%60data%60%0A%20%20%20%20%20%20%20%20resolve%3A%20function%20%28_%2C%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20getApplication%28args.id%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%29%0A%7D%29%3B%0A%0Amodule.exports%20%3D%20Schema%0A%0A&source=%2F**%0A%20*%20Copyright%20%28c%29%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aclass%20Application%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20application%20%3D%20this.props.application%0A%20%20%20%20return%20%3Cli%3E%7Bapplication.name%7D%3C%2Fli%3E%0A%20%20%7D%0A%7D%0A%0AApplication%20%3D%20Relay.createContainer%28Application%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20application%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Application%20%7B%0A%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0Aclass%20ApplicationList%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20user%20%3D%20this.props.user%0A%20%20%20%20var%20applications%20%3D%20user.applications%0A%20%20%20%20return%20%3Cul%3E%0A%20%20%20%20%7Bapplications.map%28application%20%3D%3E%20%28%0A%20%20%20%20%20%20%3CApplication%20key%3D%7Bapplication.id%7D%20application%3D%7Bapplication%7D%20%2F%3E%0A%20%20%20%20%29%29%7D%0A%20%20%20%20%3C%2Ful%3E%0A%20%20%7D%0A%7D%0A%0AApplicationList%20%3D%20Relay.createContainer%28ApplicationList%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20user%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20User%20%7B%0A%20%20%20%20%20%20%20%20applications%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20%20%20%24%7BApplication.getFragment%28'application'%29%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0Aclass%20Applications%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20user%20%3D%20this.props.user%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ch1%3EApplications%3C%2Fh1%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ca%20onClick%3D%7Bthis.handleClick.bind%28this%29%7D%3ENew%20%2B%3C%2Fa%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3CApplicationList%20user%3D%7Buser%7D%2F%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%0A%20%20handleClick%28%29%20%7B%0A%0A%20%20%7D%0A%7D%0A%0AApplications%20%3D%20Relay.createContainer%28Applications%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20user%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20User%20%7B%0A%20%20%20%20%20%20%20%20%24%7BApplicationList.getFragment%28'user'%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0Aclass%20App%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20user%20%3D%20this.props.user%0A%20%20%20%20return%20%3CApplications%20user%3D%7Buser%7D%2F%3E%0A%20%20%7D%0A%7D%0A%0AApp%20%3D%20Relay.createContainer%28App%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20user%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20User%20%7B%0A%20%20%20%20%20%20%20%20%24%7BApplications.getFragment%28'user'%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%20%20%0Aclass%20AppRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'AppRoute'%3B%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20user%3A%20%28Component%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20return%20Relay.QL%60query%20%7B%20user%28id%3A%20%221%22%29%20%7B%0A%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'user'%29%7D%0A%20%20%20%20%20%20%7D%7D%60%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A%0A%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20%20%20%20%20%20%20%20Component%3D%7BApp%7D%0A%20%20%20%20%20%20%20%20%20%20%20route%3D%7Bnew%20AppRoute%28%29%7D%20%2F%3E%2C%0A%20%20mountBode%0A%29%3B%0A%0A)

However if I don't use global IDs it throws an [error](https://facebook.github.io/relay/prototyping/playground.html#schema=%2F**%0A%20*%20Copyright%20%28c%29%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0Avar%20graphql%20%3D%20require%28'graphql'%29%3B%0Avar%20relayql%20%3D%20require%28'graphql-relay'%29%3B%0A%0Aconst%20data%20%3D%20%7B%0A%20%20users%3A%20%7B%0A%20%20%20%201%3A%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22id%22%3A%20%221%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22James%22%2C%0A%20%20%20%20%20%20%22applications%22%3A%20%5B%0A%20%20%20%20%20%20%20%201%0A%20%20%20%20%20%20%5D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22applications%22%3A%20%7B%0A%20%20%20%201%3A%20%7B%0A%20%20%20%20%20%20%22id%22%3A%20%221%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22EchoBot%22%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%3B%0A%0Afunction%20getApplication%28id%29%20%7B%0A%20%20return%20data.applications%5Bid%5D%3B%0A%7D%0A%0A%2F%2F%20Define%20the%20Application%20type%20with%20two%20string%20fields%3A%20%60id%60%20and%20%60name%60.%0A%2F%2F%20The%20type%20of%20User%20is%20GraphQLObjectType%2C%20which%20has%20child%20fields%0A%2F%2F%20with%20their%20own%20types%20%28in%20this%20case%2C%20GraphQLString%29.%0Avar%20Application%20%3D%20new%20graphql.GraphQLObjectType%28%7B%0A%20%20name%3A%20'Application'%2C%0A%20%20fields%3A%20%7B%0A%20%20%20%20id%3A%20%7B%20type%3A%20graphql.GraphQLString%20%7D%2C%0A%20%20%20%20name%3A%20%7B%20type%3A%20graphql.GraphQLString%20%7D%2C%0A%20%20%7D%0A%7D%29%3B%0A%0A%2F%2F%20Define%20the%20User%20type%20with%20two%20string%20fields%3A%20%60id%60%20and%20%60name%60.%0A%2F%2F%20The%20type%20of%20User%20is%20GraphQLObjectType%2C%20which%20has%20child%20fields%0A%2F%2F%20with%20their%20own%20types%20%28in%20this%20case%2C%20GraphQLString%29.%0Avar%20User%20%3D%20new%20graphql.GraphQLObjectType%28%7B%0A%20%20name%3A%20'User'%2C%0A%20%20fields%3A%20%7B%0A%20%20%20%20id%3A%20%7B%20type%3A%20graphql.GraphQLString%20%7D%2C%0A%20%20%20%20name%3A%20%7B%20type%3A%20graphql.GraphQLString%20%7D%2C%0A%20%20%20%20applications%3A%20%7B%20type%3A%20new%20graphql.GraphQLList%28Application%29%2C%20resolve%3A%20function%28user%29%20%7B%0A%20%20%20%20%20%20return%20user.applications.map%28function%28id%29%20%7B%0A%20%20%20%20%20%20%20%20return%20getApplication%28id%29%0A%20%20%20%20%20%20%7D%29%0A%20%20%20%20%7D%7D%0A%20%20%7D%0A%7D%29%3B%0A%0A%2F%2F%20Define%20the%20schema%20with%20one%20top-level%20field%2C%20%60user%60%2C%20that%0A%2F%2F%20takes%20an%20%60id%60%20argument%20and%20returns%20the%20User%20with%20that%20ID.%0A%2F%2F%20Note%20that%20the%20%60query%60%20is%20a%20GraphQLObjectType%2C%20just%20like%20User.%0A%2F%2F%20The%20%60user%60%20field%2C%20however%2C%20is%20a%20userType%2C%20which%20we%20defined%20above.%0Aconst%20Schema%20%3D%20new%20graphql.GraphQLSchema%28%7B%0A%20%20query%3A%20new%20graphql.GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%7B%0A%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20User%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20%60args%60%20describes%20the%20arguments%20that%20the%20%60user%60%20query%20accepts%0A%20%20%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%3A%20%7B%20type%3A%20graphql.GraphQLString%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20resolve%20function%20describes%20how%20to%20%22resolve%22%20or%20fulfill%0A%20%20%20%20%20%20%20%20%2F%2F%20the%20incoming%20query.%0A%20%20%20%20%20%20%20%20%2F%2F%20In%20this%20case%20we%20use%20the%20%60id%60%20argument%20from%20above%20as%20a%20key%0A%20%20%20%20%20%20%20%20%2F%2F%20to%20get%20the%20User%20from%20%60data%60%0A%20%20%20%20%20%20%20%20resolve%3A%20function%20%28_%2C%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20data.users%5Bargs.id%5D%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20application%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20Application%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20%60args%60%20describes%20the%20arguments%20that%20the%20%60application%60%20query%20accepts%0A%20%20%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%3A%20%7B%20type%3A%20graphql.GraphQLString%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20resolve%20function%20describes%20how%20to%20%22resolve%22%20or%20fulfill%0A%20%20%20%20%20%20%20%20%2F%2F%20the%20incoming%20query.%0A%20%20%20%20%20%20%20%20%2F%2F%20In%20this%20case%20we%20use%20the%20%60id%60%20argument%20from%20above%20as%20a%20key%0A%20%20%20%20%20%20%20%20%2F%2F%20to%20get%20the%20Application%20from%20%60data%60%0A%20%20%20%20%20%20%20%20resolve%3A%20function%20%28_%2C%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20getApplication%28args.id%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%29%0A%7D%29%3B%0A%0Amodule.exports%20%3D%20Schema%0A%0A&source=%2F**%0A%20*%20Copyright%20%28c%29%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aclass%20Application%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20application%20%3D%20this.props.application%0A%20%20%20%20return%20%3Cli%3E%7Bapplication.name%7D%3C%2Fli%3E%0A%20%20%7D%0A%7D%0A%0AApplication%20%3D%20Relay.createContainer%28Application%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20application%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Application%20%7B%0A%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0Aclass%20ApplicationList%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20user%20%3D%20this.props.user%0A%20%20%20%20var%20applications%20%3D%20user.applications%0A%20%20%20%20return%20%3Cul%3E%0A%20%20%20%20%7Bapplications.map%28application%20%3D%3E%20%28%0A%20%20%20%20%20%20%3CApplication%20key%3D%7Bapplication.id%7D%20application%3D%7Bapplication%7D%20%2F%3E%0A%20%20%20%20%29%29%7D%0A%20%20%20%20%3C%2Ful%3E%0A%20%20%7D%0A%7D%0A%0AApplicationList%20%3D%20Relay.createContainer%28ApplicationList%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20user%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20User%20%7B%0A%20%20%20%20%20%20%20%20applications%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20%20%20%24%7BApplication.getFragment%28'application'%29%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0Aclass%20Applications%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20user%20%3D%20this.props.user%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ch1%3EApplications%3C%2Fh1%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ca%20onClick%3D%7Bthis.handleClick.bind%28this%29%7D%3ENew%20%2B%3C%2Fa%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3CApplicationList%20user%3D%7Buser%7D%2F%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%0A%20%20handleClick%28%29%20%7B%0A%0A%20%20%7D%0A%7D%0A%0AApplications%20%3D%20Relay.createContainer%28Applications%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20user%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20User%20%7B%0A%20%20%20%20%20%20%20%20%24%7BApplicationList.getFragment%28'user'%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0Aclass%20App%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20user%20%3D%20this.props.user%0A%20%20%20%20return%20%3CApplications%20user%3D%7Buser%7D%2F%3E%0A%20%20%7D%0A%7D%0A%0AApp%20%3D%20Relay.createContainer%28App%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20user%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20User%20%7B%0A%20%20%20%20%20%20%20%20%24%7BApplications.getFragment%28'user'%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%20%20%0Aclass%20AppRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'AppRoute'%3B%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20user%3A%20%28Component%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20return%20Relay.QL%60query%20%7B%20user%28id%3A%20%221%22%29%20%7B%0A%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'user'%29%7D%0A%20%20%20%20%20%20%7D%7D%60%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A%0A%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20%20%20%20%20%20%20%20Component%3D%7BApp%7D%0A%20%20%20%20%20%20%20%20%20%20%20route%3D%7Bnew%20AppRoute%28%29%7D%20%2F%3E%2C%0A%20%20mountBode%0A%29%3B%0A%0A)

I guess I need to adopt the Global IDs for Relay to work? I've discovered your blog about converting a REST API to GraphQL which was super helpful (please make this the introduction tutorial, it was the moment where GraphQL and Relay clicked for me)
",jcampbell05,2016-08-17 08:47:09
1341,2016-08-17 08:57:33,"@jcampbell05 I have not blogged about relay/graphql.... had to be someone else :-).

Yes, global ids are key [requirement](https://facebook.github.io/relay/docs/graphql-object-identification.html#content) from relay.
",jardakotesovec,2016-08-17 08:47:09
1341,2016-08-17 09:00:43,"@jardakotesovec Cool, the error on the playground was super helpful !
",jcampbell05,2016-08-17 08:47:09
1340,2016-08-16 15:37:18,"I've got a field that has a param which accepts an array of enum values. It's just a way to filter the data from that field. Here's the definition of that field, named `teamInvites` ...

<S_CODE_TOKEN>

I've got a mutation that is using the `FIELDS_CHANGE` config and just doing a blanket change on the entire `Account`,  which is causing Relay to fetch all of this data. The query being sent by Relay has the `TeamInviteResponse` value inlined and wrapped in quotes, though. This is breaking the query because when inlined I believe GraphQL wants just the enum value. Here's that generated query by Relay ...

<S_CODE_TOKEN>
",ryancole,
1340,2016-08-16 15:53:34,"I'm actually not even sure why it's choosing to use `Pending` as the param there. I assume it's from the tracked query. I don't specify any param in the mutation's `getFatQuery`. Here's that function, in which `account` is the `Account` definition from above ...

<S_CODE_TOKEN>

I do specify `Pending`, inline, in one of my Relay container fragments within my app, so perhaps the tracked query is bringing that along for the ride but with quotes around it.
",ryancole,
1340,2016-08-16 16:11:09,"I just noticed that the console.log debug information shows the tracked query and the intersected result. The `Pending` does indeed come from the tracked query, with the quotes around it.

So, perhaps this issue is that tracked query is storing this enum param with quotes?

When I move that `Pending` into the `initialVariables`, as opposed to being inline within my fragment, this seems to fix the subsequent intersected queries. So I think the issue lies somewhere there relating to inlined enum values come from the tracked query.
",ryancole,
1340,2016-09-11 00:21:19,"I had a similar situation, and my takeaway was the same - if you inline `enum` values directly in the query Relay will always treat them as string literals (instead of enums). The only solution is to reference the value as a variable. So this does not work -

<S_CODE_TOKEN>

And using it as a variable does work -

<S_CODE_TOKEN>
",eugene1g,
1339,2016-08-15 18:17:16,"Let's consider this relay container

<S_CODE_TOKEN>

when try to make a mutation( with RANGE_ADD type) with an optimistic response the description object does not exist but everything else are normally set. 

<S_CODE_TOKEN>

It seems that when there is an argument in the fragment, prevents the optimistic response to set the specific variable. Is there any solution for that?
",ssbeefeater,2017-01-31 01:19:36
1339,2016-11-03 18:35:19,"@ssbeefeater did u found any solution for this?
",sibelius,2017-01-31 01:19:36
1339,2016-12-22 06:33:03,"It works if you define the `rangeBehaviors` of your `RANGE_ADD` config as a function, like this:

`rangeBehaviors: (calls) => { return 'prepend'; }`",caiosba,2017-01-31 01:19:36
1339,2017-01-31 01:19:36,"(Spring cleaning.) I'm going through older issues looking for things that can be closed in order to reduce clutter. Looks like this one has a workaround noted above, so I'm going to close it. Thank you to everybody who participated!",wincent,2017-01-31 01:19:36
1338,2016-08-13 23:24:17,"Closes https://github.com/facebook/relay/issues/1337

`IGNORE` should early return but not warn :)

I believe existing tests should cover that. Could write a regression and check for no warnings but that feels weird.
",xuorig,2016-08-30 18:47:27
1338,2016-08-30 17:49:53,"Thanks @xuorig. Sorry for the delay in getting to this. Aiming to cut a release this week so just going through and looking at PRs to merge now. Will queue this one up.
",wincent,2016-08-30 18:47:27
1338,2016-08-30 17:50:02,"@facebook-github-bot import
",wincent,2016-08-30 18:47:27
1338,2016-08-30 17:50:52,"Thanks for importing.If you are an FB employee go to [Phabricator](https://phabricator.intern.facebook.com/D3792128) to review internal test results.
",facebook-github-bot,2016-08-30 18:47:27
1337,2016-08-13 13:43:52,"I implement `rangeBehaviours` as a function and return ""ignore"". Relay shows me this warning:

`Using`null`as a rangeBehavior value is deprecated. Use`ignore`to avoid refetching a range.
`
Callsite: https://github.com/facebook/relay/blob/712f5926cb67312aac284feef3ab3ed5e147c587/src/traversal/writeRelayUpdatePayload.js#L416

Is the condition there wrong? I'm thinking it might need to be `(!rangeBehavior && rangeBehavior !== IGNORE)`
",miracle2k,2016-08-30 18:47:27
1337,2016-08-13 23:20:19,"Oops, good find @miracle2k. The condition was shared because we also want to early return when it's `IGNORE` so `(!rangeBehavior && rangeBehavior !== IGNORE)` would probably not be what we want here.

PR coming for this!
",xuorig,2016-08-30 18:47:27
1336,2016-08-13 06:58:17,"As @papigers currently doesn't have time to finish https://github.com/facebook/relay/pull/1257 I decided to take over.
",denvned,2016-08-17 18:16:45
1336,2016-08-13 23:22:17,"@facebook-github-bot shipit
",josephsavona,2016-08-17 18:16:45
1336,2016-08-13 23:23:03,"@papigers thanks for getting this started, and thanks @denvned for finishing! yay team ;-)
",josephsavona,2016-08-17 18:16:45
1336,2016-08-13 23:23:47,"Thanks for importing.If you are an FB employee go to [Phabricator](https://phabricator.intern.facebook.com/D3714846) to review internal test results.
",ghost,2016-08-17 18:16:45
1335,2016-08-12 19:32:34,"We should not reach into `react/lib` directly to allow React to refactor the layout. Instead use the public module that exposes this. We still have `react/lib/reactComponentExpect` left, but that seems a bit more tricky.
",kassens,2016-08-12 22:16:41
1334,2016-08-11 19:20:08,"I have relay (0.9.2) sending the following query part to my server:

<S_CODE_TOKEN>

The server (the Python implementation), tells me: _'Fields ""_customers31xUfl"" conflict because they have differing arguments. Use different aliases on the fields to fetch both if this was intentional._

I know I am not posting a lot of info, but my strong guess is that Relay doesn't care to differentiate between the search variable being null and being an empty string, and this being the source of the bug.
",miracle2k,2017-01-31 01:21:28
1334,2016-08-12 08:06:45,"Yep, I can reproduce this. Definitely related to [this line in serializeCallValue](https://github.com/facebook/relay/blob/bf88f805096e99783ac130a791c4244fd7fc0b2a/src/query/serializeRelayQueryCall.js#L40).
",psalz,2017-01-31 01:21:28
1334,2016-12-13 14:54:50,"Hey @miracle2k and @psalz, did you manage to fix it somehow?

Same thing happening here with Relay 0.9.3, I still don't know how to reproduce it and also happens only sometimes.",lucasbento,2017-01-31 01:21:28
1334,2016-12-13 16:21:31,"This likely occurs when the value has a falsy value (search being an empty string). To distinguish the fields, you can add an alias to one of them. ",josephsavona,2017-01-31 01:21:28
1334,2016-12-13 20:07:39,"I've stepped in the same issue today! \o/

my scenario

I have a list of products with a search parameters on products connection

<S_CODE_TOKEN>

Then I go to another page to add a new product using a mutation

this is the fatquery

<S_CODE_TOKEN>

this will throw the error above on products, because `products(search: ""$search"")` is not the same as `products()`

so I've added a fragment to my mutation like this:

<S_CODE_TOKEN>

So now I have products(first: ""$count"") and products(first: ""$count"", search: ""$search"") and they will reconcile well

maybe this is just a hack but works for now",sibelius,2017-01-31 01:21:28
1334,2016-12-15 18:00:25,"somethings it still crashes using the above approach

using the [Relay.GraphQLMutation](https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html#content) could solve this?",sibelius,2017-01-31 01:21:28
1334,2016-12-15 18:39:30,"Yeah, I'd recommend trying `RelayGraphQLMutation` here.",josephsavona,2017-01-31 01:21:28
1334,2017-01-31 01:21:28,"This hasn't seen any activity for a while so I am going to close it optimistically on the assumption that the workarounds mentioned above (aliasing and using `Relay.GraphQLMutation`) have been sufficient to resolve the issue. If this is incorrect, or anybody thinks they've run into a new bug, please do file another issue.

Thanks for your contribution!",wincent,2017-01-31 01:21:28
1333,2016-08-11 14:13:38,"Important note to `setVariables` if you're working with `first` and `last`. It's very easy to get stuck with this one if you're new to Relay. It's logical to someone who knows Relay well but not as much to beginner.
",unirey,2016-09-19 18:12:59
1333,2016-08-11 14:13:52,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-09-19 18:12:59
1333,2016-08-30 00:00:32,"Thanks @unirey. Are you able to CLA? If not, let me know so that I can close this out. Thanks!
",wincent,2016-09-19 18:12:59
1333,2016-09-08 20:37:04,"@facebook-github-bot import
",JenniferWang,2016-09-19 18:12:59
1333,2016-09-19 18:12:58,"Going to close this one due to inactivity. If you get to signing the CLA, @unirey, let us know and we'll re-open.
",wincent,2016-09-19 18:12:59
1332,2016-08-10 20:54:28,"- Im was just testing Relay's abilities of refetching the data but it fails for mysterious reason
- `setVariables()` is updating `this.props.relay.variables.count` as expected
- View is updating correctly if I have enough data from initial load - both increase and decrease
- No errors (unless I decrease `count` to 0 or less)

It just doesn't send the query, I checked with React Developer Tool (Chrome extension) and on server side.

**What could be the reason?** I didn't find any information about possible causes.

<S_CODE_TOKEN>
",unirey,2016-08-10 21:12:12
1332,2016-08-10 21:12:09,"Found the issue: I didn't set up `hasNextPage` code yet and it was `false`. If it's false, Relay thinks that there's no more posts in database and doesn't fetch more.

It's very logical but I still wish it was in docs because it's hard to think of that if you just started with Relay.
",unirey,2016-08-10 21:12:12
1332,2016-08-10 21:50:30,"Thanks for asking, and following up! Good point about `hasNextPage`, we'll keep this in mind. Also, feel free to submit a PR to update the docs - if there was a place that you looked and thought it should be mentioned, add it there!
",josephsavona,2016-08-10 21:12:12
1331,2016-08-10 16:03:07,"I can't tell if this is expected behaviour or not. I have a component that loads values from localStorage and calls `setVariables` to retrigger a query. As the user continues to modify the state, `setVariables` is called again, but until the new query has come back, Relay returns the props from the _first_ query not the most recent one. This causes the intialVariable state to flicker briefly. Why would Relay send different props to the component at all until `setVariables` has finished?

<S_CODE_TOKEN>

![dc legacy archive20160810115421](https://cloud.githubusercontent.com/assets/2880089/17561067/63dbcc4c-5ef2-11e6-9c88-cf15d323ec7d.gif)
",alex-wilmer,2016-08-10 16:27:19
1331,2016-08-10 16:27:19,"Ah I figured this out.. I was setting the variable in `prepareParams`

<S_CODE_TOKEN>
",alex-wilmer,2016-08-10 16:27:19
1330,2016-08-10 06:19:46,"I will sound stupid but may this be a bug?
If name of the field ends(contains?) with a number than optimistic updates will not work.
Here is the stripped down repo to reproduce:
[https://github.com/yangit/relayNumberBug](https://github.com/yangit/relayNumberBug)

There are 2 branches which are different by one field name containing one extra symbol!
Here is the link to a [diff](https://github.com/yangit/relayNumberBug/commit/650719096ddbff8539a3a051f2915bad5fedf7e9)

By looking at it could you guess why such a small change could break optimistic updates?

I have no errors in console in any case
I rebuild schema
I refresh my browser using hard refresh
I replace `thisIsUniqueName` using global project search
I knock my head against the wall

Any ideas?
",yangit,
1330,2016-08-10 06:34:24,"Tgat is super weird. Relay treats field names as opaque - it doesn't substring them or treat numbers in the field name specially (not on purpose, at least). Are you _sure_ there's nothing else different, and that you've updated the schema appropriately with the right field names? Just checking to rule out obvious things. 
",josephsavona,
1330,2016-08-10 06:40:49,"I definitely rebuild schema. I get all sorts of errors if I forget. 
I even embedded schema rebuild into `npm start` to avoid forgetting.

I'm not **sure** but I tried my **best** to eliminate all listed issues.
If you think I can try something else let me know.
BTW I can change name to any other unique name if it does not end with number.
Here is a link to [non breaking change](https://github.com/yangit/relayNumberBug/commit/28f27c28ed181fb4bf275c54f977d455156711c8)
",yangit,
1330,2016-08-10 06:43:40,"Anyone mind doing `npm install` then `npm start` and looking at `localhost:3000` in two different branches?
Detailed instructions are given [here](https://github.com/yangit/relayNumberBug)
I would deeply appreciate that.
",yangit,
1330,2016-08-10 23:57:00,"Here is an example of what I see in debugger
`_conversations3sn0Oo:conversations(first:1000)`
That is for a field called `conversations`
That number `3` there is definitely added by `Relay`
Something to do with params?
Could that be a reason?
",yangit,
1328,2016-08-09 21:48:45,"Relay doesn't optimize my queries (I have some data about the object in Store but it will query it anyway).

Take this for example: there's a list of posts and if you click on a list item, you'll go to single post route.
### List:

<S_CODE_TOKEN>
### Single post:

<S_CODE_TOKEN>
- All global ID-s are correct and the single post ID matches the post ID from list / connection.
- Relay does everything correctly in Store: no duplicates and it adds fresh data where appropriate.
## Problem:

It still makes a whole request and gets the whole object back, it doesn't optimize it and remove the fields/data I already have in Store.

Quote from [this article](http://hueypetersen.com/posts/2015/09/30/quick-look-at-the-relay-store/) (cause?):

> One downside to this flexibility is if we query the organization root for id 69631 (e.g. organization(id:69631)) Relay can’t assume the root call argument maps directly to the global id so a full query is sent even if we already have an object with the global id of 69631. Once that mapping is in place though subsequent queries will be able to intelligently diff with the store.

How to make this work appropriately? There **a lot** of wasted resources here. 

Do I need to help or hint Relay somehow? Do I need to use `node` manually in my queries?
",unirey,2016-08-09 22:42:25
1328,2016-08-09 22:42:25,"Thanks for the detailed post.

> Do I need to use `node`

Yes! In this example, Relay doesn't know what value will be returned by `query { viewer { post(id: $postID) { ... } } }`. The `post` field could return just about anything - _you_ know that it will return an object whose `id` is the same as the `id` argument, but Relay doesn't.

To support efficiently refetching data, Relay has special support for a [`node`](https://facebook.github.io/relay/docs/graphql-object-identification.html#content) root field. If you implement this root field ([`graphql-relay-js`](https://github.com/graphql/graphql-relay-js) provides helpers for this), you can replace `viewer { post(id: $id) }` with `node(id: $id)` and you'll get exactly the behavior you're expecting :-)
",josephsavona,2016-08-09 22:42:25
1328,2016-08-09 22:42:58,"I'm closing this issue since this is a known and documented behavior of the system, but we're open to feedback and happy to answer more questions here.
",josephsavona,2016-08-09 22:42:25
1328,2016-08-10 08:35:24,"Thank you @josephsavona! 
It's so good to finally get an answer, I've been trying to get it for a week or so in stackoverflow.com

I still have one big question about `node`: if I could query all different single items (`post`, `user` _etc_) _via_ `node`, why do I even need `post(args)`, `user(args)` in queries? All the examples I've seen online, have them. 
Only because I can't use other arguments besides `id` in `node` (as far as I know)? That would mean that if I needed to add arguments, I would still not be able to benefit from query optimization?
",unirey,2016-08-09 22:42:25
1327,2016-08-08 16:07:39,"Hello, @josephsavona I replied to this issue too late .I am still having this issue and posted alot more information about it on the closed issue number below. 
#1291

https://github.com/facebook/relay/issues/1291

Thanks again for all of your help. 
",rterysen-openroad,2016-08-08 17:04:46
1326,2016-08-08 15:27:14,"I just want to note a constant struggle I have with the way Relay masks/scopes data. It is very very frustrating to construct forms from smaller relay container input components. consider this example:

<S_CODE_TOKEN>

 and **UserDropdown** 

<S_CODE_TOKEN>

The crux of the example being that the parent `UserForm` requests a different field then it's child, hover the selected user being passed back up is scoped to `UserDropdown` for obvious reasons. This makes constructing a new object to be saved later _really_ frustrating. The above is only a simple case it gets much hairier as you add complexity or need/want to isolate form sections into their own components. I could manually ""rescope"" the user to the correct one by finding it in the `users` array in UserForm, but that can be costly and adds a ton of silly complexity. 

In these cases we've taken to awkwardly avoiding `createContainer` entirely and exporting fragments only, but that makes it hard to interop with actual relay containers, who constantly complain about the record they are given. The only other option is to jsut give up co-locating the queries with these components, which sounds ok in the above case but not in actual situations where the form is large, multi-stage, and made up of many layers of components.

cc @taion
",jquense,
1326,2016-08-14 15:28:02,"I generally aim for keeping minimal state and everything else is derived in render method. Thats likely why I have not run into this issue..

So in this particular situation I would just pass `user.id` to `UserForm onChanged` method.

And in `UserForm render` method I would go for

<S_CODE_TOKEN>
",jardakotesovec,
1326,2016-08-14 15:51:35,"@jardakotesovec ya, I think falls into the ""manually rescoping"" which only sometimes is feasible, it also requires that parents query enough of the object to be able to do that. It's also not super helpful when you are trying to validate record creation,often just saving the id of an object is not enough.
",jquense,
1326,2016-08-14 16:15:27,"@jquense I don't think about this as re-scoping but as keeping/passing minimal state and getting rest from relay store using relays collocated queries. Just following logic that component can display/work with data it asks for in fragment.

 So if UserForm needs more data fields about selected user than `id` I think it makes sense to describe it in fragment and get the user from users array. I don't expect that simple look ups using `find` would be noticeable in performance..  I use them all the time.. and never showed up during profiling nor felt as complex statements...

Just sharing my view on this. Its definitely interesting topic.
",jardakotesovec,
1326,2016-08-14 19:41:58,"@jquense Thanks for filing this issue, this is an interesting use case. We'll keep it in mind and would appreciate your feedback about the API.

In the short-term, I agree with @jardakotesovec's suggestion. The parent component should be responsible for fetching the fields it needs to access on an object, and it can pass a callback to the child to allow the child to interact with the parent object. Something like:

<S_CODE_TOKEN>

This way the child doesn't what fields the parent fetched and vice-versa.
",josephsavona,
1326,2016-08-30 18:38:00,"I think generally callbacks work fine except in the cases of lists or more heavily nested records.

Its a good bit more work to have the Parent component take a record `id` and find the item in it's `users` lists when the child is already passing up the exact record you are looking for.

It may not be feasible but it seems like a better option would be for relay containers to expose a way to re-scope records. 

<S_CODE_TOKEN>

Tho that may require too much bookkeeping, (and some sense in which `item` knows it's own type). Presumably tho you could grab the pristine record from the Store, and apply masking?
",jquense,
1325,2016-08-08 09:45:41,"Here is minimum repo to reproduce the bug `https://github.com/yangit/relay-bug`
It is easy to run, and based on official `starwars` repo

Essentially if you have object on backend

<S_CODE_TOKEN>

and Schema

<S_CODE_TOKEN>

And field `body` on any of the `friend` will be `null` i.e.

<S_CODE_TOKEN>

Than relay will never be happy about it's cache and will keep re requesting that fragment again and again every time you enter that route.

To reproduce:
Run provided example and open network tab.
Every time you enter route ""Two"" you will see new GraphQL request being sent.
Expected behavior is only request data on first enter.
",yangit,
1325,2016-08-08 10:14:49,"@yangit Relay caching is based on IDs of each fragment, it's generated by Relay based on the data that you have inside the fragment. The best way to avoid this would be to:
- set internal ID for each entity whenever you can. 
- Avoud using `null` and use empty string instead `""""`
- Switch to Relay Connection instead of Relay Array where possible because it provides you with better flexibility. 

@steveluscher can you please advise us on this?

Best,
Eugene
",eugenehp,
1325,2016-08-08 10:21:36,"Yes, most of my objects implement Node interface with proper Ids etc. However some of them are deeply nested. And that friend node is actually a deeply nested property on an object which does implement Node interface.
It is completely pointless to implement ID for all it's properties. They are meaningless w\o root object and are not exposed at API.
Also GraphQL as a schema allows nullable fields. At least it should :)
",yangit,
1325,2016-08-08 10:25:57,"Sounds interesting. Let me try out your sample repo, I'm sure there is a solution for this where we can all agree on. Maybe we can do a PR for this thing :D @yangit
",eugenehp,
1325,2016-08-08 15:55:41,"> Relay caching is based on IDs of each fragment

@eugenehp Not quite - caching is based on the `id` of _records_, not queries/fragments. 

> Than relay will never be happy about it's cache and will keep re requesting that fragment again and again every time you enter that route.

@yangit In your example, do the `friends` items have `id`s (implement `Node`)? If so, Relay would fetch missing any missing data per record. It sounds like the entire list is being refetched, though, which indicates that there is no `id` field. Without some identifier for the items in a list, Relay has no choice but to refetch the entire list if it thinks any data is missing (I suspect because of the null fields). I would highly recommend implementing the [`Node`](https://facebook.github.io/relay/docs/graphql-object-identification.html#content) interface for the friends type.
",josephsavona,
1325,2016-08-08 23:18:36,"I can't implement Node for `friends` because it is not `friends`.

<S_CODE_TOKEN>

Why would preferences implement Node interface? They only make sense together with user.
Also what is odd. If immediate children of an array do not have IDs they are tracked just fine.
",yangit,
1324,2016-08-08 06:38:27,"Fetch API cannot load https://g.fb.com/graphql. Response for preflight has invalid HTTP status code 405

<S_CODE_TOKEN>

I use in https://c.fb.com

<S_CODE_TOKEN>

console error 
`Fetch API cannot load https://g.fb.com/graphql. Response for preflight has invalid HTTP status code 405`
",tungh,2016-09-05 17:52:47
1324,2016-09-05 17:52:46,"Do you own the domain `fb.com`? I suspect not, and this is why you are getting errors accessing it. 

I would recommend running your server locally and then access it with localhost:<port>
",josephsavona,2016-09-05 17:52:47
1323,2016-08-07 17:00:04,"I have been playing around with the DefaultNetworkLayer, and I know that the common advice is that it should be replaced with a custom one. However, looking at it, if there was a small middleware layer, you could implement retries, header based auth, handling token expiry/failure all outside of it allowing DefaultNetworkLayer to become much more useful and reusable.

Given the common advice of rip and replace, before I went about putting together a PR for that I wanted to check to see if that PR would be accepted upstream?
",tberman,2016-08-07 21:09:06
1323,2016-08-07 21:09:06,"Thanks for asking. We would prefer to keep the default network layer as simple as possible. Advanced functionality can be achieved by injecting a different implementation - either your own or something like nodkz/relay-network-layer (which provides middleware, among other things). 

I believe that your use cases should already be covered by the existing APIs and third party modules. If not, feel free to comment here and we can reopen to discuss more!
",josephsavona,2016-08-07 21:09:06
1322,2016-08-07 11:23:38,"Fixes #782 for my use case, when tracked fragments from a query on an union type leak in the intersected query of a mutation.

It breaks some tests for RelayQueryTracker and it needs new tests, please help me on this because I can't figure out how to do that.
",mattecapu,2016-12-22 17:00:03
1322,2016-08-07 11:24:09,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-12-22 17:00:03
1322,2016-08-07 13:07:18,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-12-22 17:00:03
1322,2016-08-07 21:14:23,"I suspect that the existing tests cover this, they simply need to be updated. This means going through the failing tests one by one, and adding the wrapping fragment to the test. 
",josephsavona,2016-12-22 17:00:03
1322,2016-08-07 21:15:47,"Marking as needs revision bc of the test failures - feel free to comment on a specific test if you're unsure of how to update it!
",josephsavona,2016-12-22 17:00:03
1322,2016-08-08 13:46:03,"I updated some failing tests, but I suspect some of the passing ones are false positives. 
",mattecapu,2016-12-22 17:00:03
1322,2016-08-15 18:43:37,"up?
",mattecapu,2016-12-22 17:00:03
1322,2016-10-13 16:04:18,"any progress on this?
",sibelius,2016-12-22 17:00:03
1322,2016-12-22 17:00:03,"Thanks for the PR, for exploring this space, and for your patience. While this PR helps, we've found several difficulties with dynamically constructing mutations queries. For this and other reasons (predictability/simplicity) we've created a new, static mutation API: [`Relay.GraphQLMutation`](https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html) which we recommend. I'm going to close this PR, but we appreciate the time you put into this: seeing the problems with the current mutations helped us to develop the  new API.",josephsavona,2016-12-22 17:00:03
1322,2016-12-23 10:47:22,👍 thanks for the feedback! ,mattecapu,2016-12-22 17:00:03
1321,2016-08-04 14:46:30,"Hi, we recently upgraded from 0.7.3 to 0.9.2 and noticed that SSR latency was almost twice bigger than before.

Investigating using v8-profiler I've found that this happened due to a lot of module require being called inline.

![](http://dsh.re/1d749)

Most of then seem to be from `require('fbjs/lib/invariant')`.

I've changed `inlineRequire` to `false` in `scripts/getBabelOptions.js` and it fixed for us:
![](http://dsh.re/a967a)

`writeRelayQueryPayload` runs about 6 times faster after the change.

---

Is there any problem in disabling `inlineRequire`?
",rodrigopr,2017-01-30 22:08:47
1321,2016-08-04 17:17:48,"Thanks for letting us know about this. For some context, we measure every substantive change internally on real devices, so we know that the core logic of e.g. `writeRelayQueryPayload` hasn't regressed. However, we don't have an equivalent set up to make sure performance doesn't regress as a result of OSS build config - this is definitely something we should address as we want to ensure OSS users get the same performance we see internally. @rodrigopr, thank you again for your bringing this to our attention!

The `inlineRequires` settings causes `require` calls to be moved to the point where a module is referenced, instead of at the top of the file. You've probably noticed this while debugging, for others looking at this issue, the effect is as follows:

<S_CODE_TOKEN>

On mobile devices we have found that this can improve performance by delaying the work of requiring modules until they are needed (at the cost of some overhead on future invocations). On the server, the inverse (not doing inline requires) is clearly better, as indicated by your findings.

This might be a good argument for having two different builds: the default one optimized for clients, the other for use on the server (we could also disable the query/fragment cache on this one). Thoughts?

Also ccing @zpao about the OSS inline requires perf.
",josephsavona,2017-01-30 22:08:47
1321,2016-08-04 17:38:05,"Which require implementation are you using @rodrigopr? The one we use at Facebook is incredibly optimized (though not entirely CommonJS compatible) and it is possible that whichever one you are using isn't optimized enough. At Facebook we found that the overhead of requiring the same module over and over again is actually not a big deal.
",cpojer,2017-01-30 22:08:47
1321,2016-08-04 18:54:24,"Thanks for the context, it makes sense.

A very naive alternative for lazy module loading that would improve the perf for us is something like:

<S_CODE_TOKEN>

(via the `inline-requires`babel plugin)
But I guess Facebook optimized `require` implementation does lot of others stuff (optimize amount of loaded modules for mobile maybe?)

---

@josephsavona, the two build setup would work for us. 
But it might add complexity for new users as I assume will require some change on the bundler.

@cpojer, we are using node (5.12.0) default implementation. 
Is Facebook implementation opensource? I'd love to see how it works.
",rodrigopr,2017-01-30 22:08:47
1321,2016-08-04 19:22:24,"The FB implementation is client-side, it's not really relevant to the node case. Basically because there's not filesystem involved, every module ends up with a unique name and once it's loaded once, the cache is primed and it a quick lookup. Something like this:

<S_CODE_TOKEN>

Inline requires make less sense for node. Node is doing caching of require paths too but it still does a bunch of work to make sure the cached thing is correct. You can follow the code along here: https://github.com/nodejs/node/blob/cc189370dd4a124bf3988c1ab8aca2d274ecae48/lib/module.js#L465

We could probably have a smarter inline-requires transform that instead of just inlining requires, we generate a fn that does the caching first and fwds on to regular require. It would probably break things like browserify & webpack though as requires can no longer be statically resolved without special knowledge of the transform semantics.

Alternatively, we just stop building here with inline requires. Initial parse time goes up server-size (but should be constant client-side). Startup time would theoretically go up in both cases though as it'll have to run modules.
",zpao,2017-01-30 22:08:47
1321,2016-08-04 19:24:38,"@rodrigopr: You can see our implementation for React Native [here](https://github.com/facebook/react-native/blob/master/packager/react-packager/src/Resolver/polyfills/require.js). As @zpao mentioned though, you probably won't be able to drop in and replace node's implementation (all modules must be `define`-ed before they can be `require`-ed, relative paths are not supported since [we rewrite relative paths to canonical ids](https://github.com/facebook/react-native/blob/master/packager/react-packager/src/Resolver/index.js#L194-L229)).

The naive alternative that you suggested is actually [what Nuclide does](https://github.com/facebook/nuclide/blob/master/pkg/nuclide-node-transpiler/lib/inline-imports-tr.js) for converting `import` statements to `require`s. I don't think it's too farfetched to make the inline-requires babel-plugin do something similar (as an optional feature that can be turned on by modifying babelOptions).
",voideanvalue,2017-01-30 22:08:47
1321,2016-08-05 18:14:39,"Thanks @zpao, @voideanvalue. 

As @voideanvalue said, we can add an option to `inline-requires` behave like implemented on `Nuclide`, seems this might work well for both client and node. 
Do you all agree? If yes, I can send a PR to fbjs and update usage here.
",rodrigopr,2017-01-30 22:08:47
1321,2016-08-05 19:12:10,"@voideanvalue How much value do we think inline requires actually provides for the final builds? I understand it's a divergence from our internal pattern so there's a possibility of subtle differences, but I think the likelihood is low (we saw issues going the other way but I don't expect the same problems this way).
",zpao,2017-01-30 22:08:47
1321,2016-08-07 16:30:28,"> Do you all agree? If yes, I can send a PR to fbjs and update usage here.

@rodrigopr: I'd be fine with that as long as we're not changing the default option. What do you think, @josephsavona @zpao @cpojer?

@zpao: Apart from a potentially slowed down initialization, circular dependencies might become unsafe without inline requires. We could probably write a test to guard against that though...
",voideanvalue,2017-01-30 22:08:47
1321,2016-09-05 17:44:03,"@rodrigopr were you able to resolve this? If so, what solution did you end up with?
",josephsavona,2017-01-30 22:08:47
1321,2016-09-05 19:43:51,"@josephsavona we're using a custom build of relay 0.9.2 with `inlineRequire` disabled, it solved the problem. Didn't have an opportunity to contribute with a definitive solution (PR) for it yet.
",rodrigopr,2017-01-30 22:08:47
1321,2017-01-15 21:13:19,"So, I've just had to look into this same change, and i'm seeing the same approximate 2x render speedup on the server. I'm also seeing a comparable degradation on the client.

So it seems like I need access to both variants on the build in a single project. One option would be for Relay to ship a separate `libServer` folder in the distributions, then leave it up to us to use some alias trickery during our builds to decide which one to use.

The slow response times we're seeing caused by this issue not only impacts our users pretty heavily, but also practically doubles the cost of running our website.",AndrewIngram,2017-01-30 22:08:47
1321,2017-01-15 22:18:30,"In my projects I solved this problem by *webpack*-ing the *node_modules* into the app's server-side bundle (i.e. I have thrown away traditional [*externals*](https://webpack.github.io/docs/configuration.html#externals) config). And you probably need to do it anyway because of https://github.com/facebook/react/issues/812 (with *DefinePlugin* and *UglifyJS*).

Another, much more hacky option is monkey patching *node*'s `require` to use your own cache:
<S_CODE_TOKEN>

And a similarly hacky solution for the `process.env` problem: https://github.com/facebook/react/issues/812#issuecomment-172929366",denvned,2017-01-30 22:08:47
1321,2017-01-30 22:08:46,"(Spring cleaning.) Thanks for the discussion everybody. We have a couple of workarounds (such as custom builds) in the thread above, so I am going to close this. If anybody wants to take a stab at implementing a PR that would make toggling this easier, we'd be happy to take a look at that too.",wincent,2017-01-30 22:08:47
1320,2016-08-03 21:21:24,"`RelayEnvironment` exposes most of the other injection methods for `RelayStoreData`, so this just adds `injectCacheManager` as well. Even though it's not a documented API, adding it to `RelayEnvironment` will make it easier for those who do want to use it while its ""experimental"" which paves the way for a stable implementation.

I also added a basic test that just verifies the injection works as expected.
",aweary,2016-08-08 22:46:36
1320,2016-08-04 22:03:12,"@facebook-github-bot shipit
",josephsavona,2016-08-08 22:46:36
1320,2016-08-04 22:06:27,"Thanks for importing.If you are an FB employee go to [Phabricator](https://phabricator.intern.facebook.com/D3672206) to review internal test results.
",ghost,2016-08-08 22:46:36
1320,2016-08-04 22:09:22,"@josephsavona do you know why the test is failing? is `RelayStoreData` being mocked or something?
",aweary,2016-08-08 22:46:36
1320,2016-08-04 22:23:47,"Not sure, I would try logging some of the values and see.
",josephsavona,2016-08-08 22:46:36
1320,2016-08-08 17:04:27,"@facebook-github-bot shipit
",josephsavona,2016-08-08 22:46:36
1320,2016-08-08 17:05:09,"Thanks for importing.If you are an FB employee go to [Phabricator](https://phabricator.intern.facebook.com/D3672206) to review internal test results.
",ghost,2016-08-08 22:46:36
1320,2016-08-08 23:13:50,"@Aweary thanks for this!
",josephsavona,2016-08-08 22:46:36
1319,2016-08-03 13:37:07,"We have a connection that can return a node twice (a user's listening history - i.e. you can listen to the same show twice). I realise that the name ""connection"" implies that each edge is to a unique node, but does that have to be the case? The cursor pagination is useful for all types of lists.

The warnings we get in this case are:

<S_CODE_TOKEN>

This is because the edge ID is generated by:

<S_CODE_TOKEN>

A potential solution might be to get the cursor into the edgeID?

Happy to be told that you don't think connections should be used for this - there are other solutions such as duplicating the pagination functionality or changing the data model (in this case we could have `connection -> edge -> listen -> show`) but if there's no reason why connection nodes have to be unique fixing that would be the easiest solution!
",sdcooke,2016-08-03 14:12:51
1319,2016-08-03 14:12:51,"Currently, we expect the nodes to be unique. This is because GraphQLSegment is also trying to support the `find` call and uses the node id in a couple other places. However, that might change in the future. For right now, I think what you suggested with changing the data model is perfect `connection -> edge -> listen -> show`.
",yuzhi,2016-08-03 14:12:51
1318,2016-08-03 07:34:07,"Based on the validation implemented in https://github.com/facebook/relay/commit/b22c3eab7fe56789fe6ba335bb862bf323f47b2e :

> it difficult to debug when the variables used in a fragment - `Child.getFragment('foo', {size: 32})` - does not match the variables passed as props: `<Child ... size={64} />`

I'm not sure if I understand the reason for this validation correctly. Normally, the prop passed to `<Child ... size={64} />` is not related to the variable used in fragment, the variable in the fragment must be set by using `this.props.relay.setVariable({size: 32})`, `initialVariables`, or `prepareVariables`. So, both of them are not related at all, are they?

This validation gives the warning when the name of prop in containers and the name of variable in fragments are the same but different values. Here is a scenario when this introduces problem:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

This will definitely give the warning as following:

<S_CODE_TOKEN>

Could you provide the scenario that the validation is useful? What's the proper way to get rid of the warning in my scenario, I could just name them differently but might be some better approach?
",lvarayut,2016-09-02 23:55:03
1318,2016-09-02 23:55:02,"Thanks for bringing this up.

It may not be possible to suppress the warning in all cases, as there are some known false positives that come up. [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable) completely changes the way variables are modeled and handled in the system, so this particular class of problem will go away. Until then, you may just have to ignore the warnings. As such, I'm going to label this one with the ""relay 1"" label and mark it as closed.

To answer your question about when the validation is useful, it has eliminated for us a large class of bugs where people fetch a fragment with a particular set of variables, but then forget to pass those same variables in at render time. Passing it in is necessary because of the two-phase process in which fragments are used: in the first phase Relay must be able to traverse the component hierarchy without actually instantiating any components so that it can statically construct the query to be sent to the server to fetch the data; in the second phase the data has arrived and Relay actually renders, but it can't automatically know what variables to pass to the component at render time because each component may be instantiated an arbitrary number of times by a parent, each with different variables.

(Tangentially: why are you using `componentWillMount` instead of `componentDidMount`? Conceptually, the latter is a better fit for the render-initial-then-render-more lifecycle that you are implementing here.)
",wincent,2016-09-02 23:55:03
1317,2016-08-02 19:37:24,"I don't know if this is the right place for this.

One thing that seems difficult – as in I can't figure out how to do it – right now is doing code splitting in an ideal way with Relay.

Typically code splitting happens along module boundaries. However, ideally it would be good to load data from a remote API server concurrently with loading the JS code for ""dumb"" components.

However, there isn't really a straightforward way to get this working with e.g. `System.import` with Relay because the data requirements are colocated.

To be more concrete, I think what I want to do is to not split out the queries and fragments, and instead only split out the actual React components. Doing this would be tricky, though – maybe something to stub out the actual components and only keep the Relay container definitions?
",taion,
1317,2016-08-02 23:19:35,"Do you mean the concept similar to a styleguide? Ability to pull in react components to only behave as the view and have no knowlegde of relay or have to care about data outside there props? 
",rterysen-openroad,
1317,2016-08-02 23:35:47,"The opposite, actually – I think I want to be able to _just_ pull in the code that defines the data dependencies for a component (and its children), while code splitting away the actual rendering code for those components (via e.g. `System.import`), so I can concurrently load the data and the rendering code.
",taion,
1317,2016-08-03 01:22:04,"If I understand correctly the use case is as follows: given that you're about to transition to some view, download all the data and code necessary to render it. 

In current Relay one option to support this is as you described. Download just enough code to construct the query, then fetch the query and the remaining code in parallel. This could work, and it's likely possible to implement this via a custom build script.

Our goal is to support a different and hopefully more efficient alternative: fetching both the data and code in parallel. This requires knowing statically what query a view will send. We're working on an update to Relay core that is able to extract Relay queries at build time. This would allow higher-level tools to associate a specific query with a route, for example, and know what data to fetch without downloading any code. We'll discuss this more over the coming weeks in a blog post and some meetup/conference talks.
",josephsavona,
1317,2016-08-03 01:26:04,"Awesome. That's exactly what I'm looking for.

The context here is the React Router exposes a hook (`getComponent`) to load the component corresponding to a React Router route on-demand. However, this is suboptimal for working with Relay, because I can't make the query until after I've received the code for the split out component, whereas ideally I'd like to do both at the same time.

Is there a meta-issue related to that update? Does it make sense to keep this issue open?
",taion,
1317,2016-08-03 01:28:03,"Oops, I misread – I was actually trying to describe something like what you had. Keep the code required to build the query in the ""main"" bundle, so I can concurrently fetch the data and the code for the split-out bundle.

In other words, two parallel network requests, rather than a single ""small"" network request followed by 2 larger network requests.
",taion,
1317,2016-09-05 17:56:22,"@taion see #1369 (Relay 2 meta task) - one of the things that static queries enables is to prefetch the data for a route without having to download and execute the code for that route. Given that the framework will provide core support for prefetching, we'd be happy to support you and the community in integrating prefetching into popular bundling tools. 
",josephsavona,
1316,2016-08-02 03:16:18,"I'm observing the following in my app:
1. I call `props.relay.forceFetch`
2. I update the top-level query config with new params that eventually get injected down into the container on which I called `forceFetch` in (1)
3. Request from (2) completes and updates `state.rawVariables`
4. On the call in (1) succeeding, `state.rawVariables` is set to the _old_ value from before (2)
5. If I call `forceFetch` again, in `_runVariables`, the stale value of `state.rawVariables` set in (4) gets used; while the request is outstanding, I see the data corresponding to those stale variables

I'm not sure what the right fix here is. Seems like it could be either:
- Abort pending requests in cWRP if `context.route` changes
- In `_runVariables`, check that things haven't changed underneath us before setting `state.rawVariables`

Or maybe something else?
",taion,
1316,2016-08-02 14:22:44,"I'm also observing this when child component sets a variable and parent is forceFetching
",chirag04,
1316,2016-08-02 14:37:01,"@chirag04 I believe this is a different issue from https://github.com/facebook/relay/issues/1138. I don't override any variables at all – they're all coming down from the query config params.
",taion,
1316,2016-08-02 14:43:03,"@taion my guess is the two are related since there is a common code path for `setVariables` and `forceFetch`. I don't understand the internals yet so i might be completely wrong.
",chirag04,
1316,2016-08-02 16:10:02,"Thanks for filing this, it definitely sounds like an edge case that isn't handled yet.

There is a definite similarity to #1138 in that variables are changing at two levels of the tree at the same time, and Relay should either make a decision about which one wins and be consistent in implementing that (i.e. w/o races), or ideally allow the product developer to have some control. The latter is something we are working on in the long-term (by making the work that `setVariables` does more explicit). The former is more practical in the short-term. 

Generally speaking there are a few cases we'd need to handle:
1. The route object changes (!==) but its name, queries, and params are all the same. `RelayRenderer` _should_ already detect this and do nothing.
2. The route object changes queries/components in such a way that the original children are unmounted and a different tree is rendered: nothing to do here.
3. The route object changes params, such that the same ancestor component (lets call it `<User user={...} />`) is still rendered. 
1. If User gets a different user prop - the id has changed - it has to throw away any pending fetches it may be doing and show the new data.
2. If User gets the same user prop, but the route params have changed, what to do with any pending fetches depends on whether the route params are overriding User's params. If the route says to set `count: 5`, and the component is trying to fetch `count: 10`, then the variables have to be reset and the pending fetch cancelled. If the route isn't overriding any variables, then it's safe to just let the pending fetch finish and use the results of those variables. 

Thoughts?
",josephsavona,
1316,2016-08-02 17:43:37,"It seems like it ought to be possible to simplify (3) to just check for deep equality of the `queries` and `params`. If you don't, I think it's still possible to end up with race conditions. I can't immediately construct a race condition, but it seems like it'd be more predictable to just abort pending requests on any ""real"" change to the route object.
",taion,
1315,2016-08-01 21:25:04,"Can you list some good place's for Relay examples and learning? Pluralsight had a good course but it was minimal.  I would like to learn best practices in handling slightly more challenging things.  Did Facebook put out any projects that show relay/graphql best practices in action that we can reference or books? I would like to see other approaches to problems and designs. 
",rterysen-openroad,2016-09-02 23:25:35
1315,2016-09-02 23:25:35,"Thanks for your question!

I'm not sure if Stack Overflow is the best place for this kind of question (perhaps another Stack Exchange site is), but in general we want to keep the GitHub tracker for tracking bugs/fixes and feature development, and encourage people to post questions elsewhere.

In the meantime, here are some basic starting points:
- The [relay-examples](https://github.com/relayjs/relay-examples) repo provides a number of small apps showing how to get started.
- You can see the kinds of questions people are asking about Relay under [the relayjs tag](http://stackoverflow.com/questions/tagged/relayjs) on Stack Overflow.
- The Relay docs contain [a tutorial](https://facebook.github.io/relay/docs/tutorial.html) and some follow-up material, ""[Thinking in GraphQL](https://facebook.github.io/relay/docs/thinking-in-graphql.html)"" and ""[Thinking in Relay](https://facebook.github.io/relay/docs/thinking-in-relay.html#content)"", as well as some [video presentations](https://facebook.github.io/relay/docs/videos.html).
- [The awesome-graphql repo](https://github.com/chentsulin/awesome-graphql) has a bunch or Relay-related resources (as well as stuff related to the broader GraphQL ecosystem, obviously).

> Facebook put out any projects that show relay/graphql best practices in action that we can reference or books?

We haven't put out any projects as far as I know, but I've heard rumors of a book being published soon (not by us). I'm going to close this for now because it is not directly actionable, but if you do find anything useful please do comment here so that others might benefit from your discovery. Thanks once again for your question!
",wincent,2016-09-02 23:25:35
1314,2016-08-01 20:38:19,"Add jusbrasil.com.br as an user of relay in production.

🎉 🎉 
",helielson,2016-08-02 20:01:35
1314,2016-08-01 20:38:32,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-08-02 20:01:35
1314,2016-08-01 20:43:10,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-08-02 20:01:35
1314,2016-08-02 18:18:41,"@facebook-github-bot import
",JenniferWang,2016-08-02 20:01:35
1314,2016-08-02 18:19:47,"Thanks for importing.
",ghost,2016-08-02 20:01:35
1313,2016-08-01 01:32:38,"Obviously, there are some syntax errors introduced when code transforming. Try to fix it in this commit, or should we revert it directly?

https://github.com/facebook/relay/commit/e2ba4a6ca07f74cb90984302fb191e17d1e309bd
",chentsulin,2016-08-02 19:08:32
1313,2016-08-02 18:27:27,"@spicyj Ben could you please take a look?
",JenniferWang,2016-08-02 19:08:32
1313,2016-08-02 18:29:07,"There's something broken with the github import (fb-internal link: https://fburl.com/398137359). I'll send a diff internally to fix this because I don't think importing this PR will actually fix it, unfortunately.
",spicyj,2016-08-02 19:08:32
1313,2016-08-02 19:08:32,"Will be fixed internally.
",JenniferWang,2016-08-02 19:08:32
1313,2016-08-03 00:26:55,"Fixed in fab36d9babe36d07e1619d59e2c451515e378c0f.
",spicyj,2016-08-02 19:08:32
1312,2016-07-31 23:10:54,"I'm passing a cursor in a URL for windowed (multi-page) pagination purposes.  When the paginated list is fetched from GraphQL after a hard refresh, the correct paginated list data is observed in the response from the network call.  However, it appears that `_cursorToIndexMap` (or any cursor data for that matter) is empty on initial page load as Relay tries to retrieve range info for the query, and Relay raises a warning: `GraphQLRange cannot find a segment that has the cursor:  X`, where X represents the cursor passed in the URL.  Relay then discards all of my edge data before passing anything off to its Relay containers.  Is there any way to proceed with providing the data it fetches from GraphQL?  How can this warning be reconciled?  Is Relay unable to start from the middle of a paginated list of data?
",danmooney,
1312,2016-08-01 08:24:42,"Hi @danmooney,

I'm actually working against the same problem at present so have all the relevant links open in front of me - the short version is that **Relay doesn't currently support windowed pagination from arbitrary start points**, as is likely happening during a hard refresh (especially if you're building your cursors yourself in that case). Instead, it's designed to support fast reconciliation of infinite scroll problems, using opaque cursors provided in each response to construct each consequent query.  These cursors don't support mocking, even if they're otherwise built to a known spec and look identical to cursors fetched under normal circumstances.

Note that this is a current limitation in Relay and not in GraphQL, which is why you'll see the correct list data coming back from the server - Relay just doesn't yet understand how to intelligently insert the new connection data into the store without already having a cached cursor to work with.  Discussion of the pagination problem and the history behind it can be found at issue #540, along with some [easy workarounds](https://github.com/facebook/relay/issues/540#issuecomment-155531357) until windowed pagination is fully supported as a connection method.
",Longsight,
1312,2016-08-01 16:41:57,"@Longsight Great answer, that sums it up nicely.

I'm actually working on a new way of representing connections (aka ranges) and will keep this use case in mind.
",josephsavona,
1312,2016-08-03 21:59:33,"I'm particularly interested in this one - we're working on getting an RN + Relay app into the wild, and our use case would benefit specifically from being able to combine infinite scroll and arbitrary windowed pagination, as well as deferred queries and a few other goodies. At the moment I'm using a couple of workarounds to achieve acceptable performance, but I've dug through GraphQLRange at length and am keeping a close eye on where it goes.
",Longsight,
1312,2016-11-22 10:14:38,"Can't wait to have this fixed. I also have an app where ""starting from cursor X"" is a really important use-case.. and using a custom ""after"" like filter field is not beautiful.",gre,
1311,2016-07-31 08:14:02,"Hello. We have a problem with refreshing full store. We have a notification system in our app and when new notification comes we want to refresh some data in relay store. Now we're using RelayStore.forceFetch with custom query inside. But sometimes we want to refresh connections. Actually we can use forceFetch but in this case we have to provide exact the same list of arguments for a query(because relay keeps uniq ids for each data in its store). So friends(first: 10) and friends(first:10, id: null) ids will be different. Now we found a way how we can do it we use a mutation. We just return viewer from a server mutation and we customize fatQuery in a client mutation. It works but it looks like a hack. Is there any way to do it correct?
",ErrorPro,2016-08-29 23:57:22
1311,2016-08-29 23:57:22,"I'm not aware of a canonical ""official"" way to do this. The mutation approach is a novel approach and like you say, a bit of a hack, as it sounds like you're not actually intending to really mutate anything at all.

Another way you could consider, depending on the complexity of the arguments that you are dealing with, is manually tracking the `first` and other arguments in state, and then using that to do your `forceFetch`, although it sounds like you have already tried this approach in some form.

When Relay 2 comes out, you will have more options here. Connection management is going to be more manual/explicit, so you will necessarily have more control over and awareness of what variables are being used. We also will have a low level handler API that will allow you to observe (and rewrite) incoming data related to a connection (any field really), and you could use that to do some tracking of your own.

In the meantime, you could consider asking on Stack Overflow too. We want to keep the GitHub issue tracker for bugs and PRs, and have questions on a dedicated forum that is purpose built fo questions and answers. If you do, post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs

Closing this in the meantime to keep the queue clear. But feel free to comment if you have further thoughts.
",wincent,2016-08-29 23:57:22
1310,2016-07-30 21:46:06,"This pull-request is a follow-up of https://github.com/facebook/relay/pull/1069

I was trying to use the feature but got confused because my decorated component wouldn't receive the updated `this.props.pendingVariables` when calling `setVariables`. (see discussion https://github.com/facebook/relay/commit/3b8f67fc027a683e0f2cac71cc2a47ece0f5ed20).

The changes here make sure RelayContainer's `shouldComponentUpdate` returns `true` when the nextState has some `pendingVariables`.

I looked at adding some tests but wasn't sure really where to put them ? `RelayContainer-test.js` / `RelayContainer_setVariables-test.js` ? What should I test ? I was thinking either the count of `render.mock.calls.length` or the output of shouldComponentUpdate
",chollier,
1310,2016-07-30 21:46:40,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,
1310,2016-07-30 21:56:43,"In my PR I previously had a `areQueryVariablesEqual` check: https://github.com/facebook/relay/pull/1069/files#diff-320b6df8cf530a681d201c75772401eaR779

Not entirely sure though why it didn't get merged. Maybe @wincent has the answer to this and also your questions :)
",Globegitter,
1310,2016-07-30 22:16:05,"Oh interesting, @wincent is there a specific reason the check didn't make it to master?
",chollier,
1310,2016-07-30 23:39:14,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,
1310,2016-08-04 22:06:16,"I'm not sure what happened to the variables comparison from @Globegitter's original PR, but I agree that we should do that. Also, can you add a test for this? There is a `RelayContainer_setVariables-test` that you can add to.
",josephsavona,
1310,2016-09-07 16:05:12,"@josephsavona @Globegitter I added back `areQueryVariablesEqual`

I also added a test, however I could use some help on it, I don't it makes sense as it doesn't fail when removing the added lines in `RelayContainer.js`
",chollier,
1310,2016-09-07 16:23:14,"@josephsavona just updated per your feedback regarding mockClear thanks! however I'm still a bit confused as to why when commenting the piece of code in `shouldComponentUpdate` this test doesn't fail
",chollier,
1309,2016-07-29 22:01:58,,kassens,2016-07-30 00:16:34
1309,2016-07-29 22:02:03,"@facebook-github-bot import
",kassens,2016-07-30 00:16:34
1309,2016-07-29 22:03:22,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/134427150328621/int_phab) to review internal test results.
",ghost,2016-07-30 00:16:34
1308,2016-07-29 19:21:27,"I ran into an issue recently where a grandchild components don't get passed down variables from their grandparents to parents.

In a nutshell it looks like:

<S_CODE_TOKEN>

Is this intentional?
",akre54,2016-12-20 17:59:39
1308,2016-07-29 19:50:29,"Thanks for asking. By design, each fragment only has access to variables that it defines locally in `initialVariables`. We've found that this facilitates the ability to reason about components/containers in isolation. What is the use case for passing root variables all the way through? Having a concrete example would let us suggest workarounds or consider whether we should change the way variables are handled.
",josephsavona,2016-12-20 17:59:39
1308,2016-07-29 20:33:12,"We are building an app where certain selections the user makes on a sidebar update the url query params, which then trickle down to the various containers, affecting the data they fetch. We have three variables in particular that globally affect many different parts of the app.

We are using react-router with react-router-relay middleware, so most of our routes have a [`prepareParams`](https://github.com/relay-tools/react-router-relay#additional-parameters) function.

We _could_ use the `prepareVariables` to convert the query params all over the app, but it feels cleaner to only do it in a single place (like casting querystring args to numbers or arrays, for instance).
",akre54,2016-12-20 17:59:39
1308,2016-12-20 17:59:39,Closing due to inactivity; a future release of Relay (see #1369) makes fragment-local variables optional and allows easy access to root variables without explicitly threading them through.,josephsavona,2016-12-20 17:59:39
1308,2016-12-20 18:07:49,"Awesome, thanks. Can't wait to try it out.",akre54,2016-12-20 17:59:39
1307,2016-07-29 16:14:23,,vjeux,2016-07-29 18:33:22
1307,2016-07-29 16:36:49,"@facebook-github-bot shipit
",josephsavona,2016-07-29 18:33:22
1307,2016-07-29 16:38:17,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1821128584789572/int_phab) to review internal test results.
",ghost,2016-07-29 18:33:22
1306,2016-07-28 21:49:47,"It looks like this example is incomplete:

https://facebook.github.io/relay/docs/api-reference-relay-mutation.html#getfiles-example

I tried using something similar and got errors related to required abstract methods not being implemented.

Something to indicate the mutation is incomplete would be useful.
",mhahn,2017-01-30 22:20:20
1306,2016-07-29 07:46:33,"What is the exact error message you are getting? It should tell you which abstract methods you need to implement. But they probably are `getMutation`, `getFatQuery`, `getConfigs`, and `getVariables`.
",Globegitter,2017-01-30 22:20:20
1306,2016-11-30 15:51:59,@mhahn could u provide more information?,sibelius,2017-01-30 22:20:20
1306,2017-01-30 22:20:20,Closing due to staleness.,wincent,2017-01-30 22:20:20
1305,2016-07-28 19:58:19,"When I have both a RANGE_ADD and a FIELDS_CHANGE config, the FIELDS_CHANGE config overrides the RANGE_ADD and causes a refetch of the connection field that the RANGE_ADD should've optimized for

In the following example, the RANGE_ADD should add the newGroup to `viewer.groups`.  I need to also do a FIELDS_CHANGE on the same viewer because the `viewer.contacts` might change.

<S_CODE_TOKEN>

If I remove the FIELDS_CHANGE config, then the mutation responds very efficiently, with only the added group:

<S_CODE_TOKEN>

But with both configs, the RANGE_ADD is ignored/overridden, and the mutation responds with something like:

<S_CODE_TOKEN>

One idea I tried was to use field aliases to get around the ""shared"" viewer between the two configs, but aliases don't seem to be supported in fat queries.  Might this be a good way to support my use case?

<S_CODE_TOKEN>
",BlooJeans,2016-09-02 23:40:57
1305,2016-09-02 23:40:57,"Thanks for the very detailed issue report, @BlooJeans. The behavior as you describe it is as expected, given how fat queries work. You are running up against one of the limitations of the declarative mutations API; it makes it possible to succinctly express _some_ (common) intentions, but it is not sufficiently expressive to express everything in the universe of possible, nuanced intentions. Your aliases idea sounds reasonable on the surface, although I expect it could be non-trivial to implement support for it.

I'm going to close this for now because right now our focus is on shipping [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable), and in Relay 2 the declarative mutations API will be no more, but if someone wants to take a crack at implementing it for Relay 1 I'll be happy to re-open it. With our current focus, however, this isn't something we are likely to work on.

In the meantime, one option available to you is to consider using the low-level `RelayGraphQLMutation` API that exists on the master branch but is not documented. Using this API you can roll your own (static) query, with no magical tracked query synthesis. Because this is a manual process, it has far fewer restrictions in terms of expressivity, but it also requires you to do a bit of manual work. You can see some examples of its use [in the test suite](https://github.com/facebook/relay/blob/81b456e1738fc838ab9293f4caa4f28e6744664c/src/mutation/__tests__/RelayGraphQLMutation-test.js). For context, the reason this API remains undocumented and not officially supported is that it only goes part-way towards the fully static model that we are switching to in Relay 2; it still rests on legacy underpinnings in Relay 1 (the transaction abstraction, queue, collision key, some configuration etc).
",wincent,2016-09-02 23:40:57
1304,2016-07-27 18:05:40,,kassens,2016-12-09 16:23:17
1304,2016-07-27 21:58:24,"Actually, this needs an upgrade to `eslint-config-fbjs` as well.
",kassens,2016-12-09 16:23:17
1303,2016-07-27 17:33:04,,kassens,2016-07-28 01:16:33
1303,2016-07-27 17:33:09,"@facebook-github-bot import
",kassens,2016-07-28 01:16:33
1303,2016-07-27 17:34:24,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/618282521672272/int_phab) to review internal test results.
",ghost,2016-07-28 01:16:33
1302,2016-07-26 20:54:47,"This allows for disabling the query cache in `createRelayQuery` and `buildRQL` by calling `Relay.disableQueryCache()`. 

Submitted in response to https://github.com/facebook/relay/issues/754#issuecomment-234995746

Because keys used to store queries include params, the query caches can grow to an unbounded size in certain circumstances (like text search input as a param). This allows the the cache to be disabled manually in circumstances where that is problematic, such as server side rendering. 

This PR does not disable the `fragmentCache` in `buildRQL`, which I believe only uses fragments and initial variables, and so has a bounded upper limit in terms of size. 
",KCraw,2016-08-30 23:31:54
1302,2016-07-26 20:55:03,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-08-30 23:31:54
1302,2016-07-26 21:51:34,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-08-30 23:31:54
1302,2016-08-04 22:15:11,"Thanks for the PR. Overall this looks good, but please see feedback about splitting the caching logic out from the main queryset/fragment building logic.
",josephsavona,2016-08-30 23:31:54
1302,2016-08-06 04:11:44,"Done. Code is now split in what I hope is a logical fashion. 
",KCraw,2016-08-30 23:31:54
1302,2016-08-06 04:44:39,"@KCraw Thanks for the updates. I have a couple small nits and then this will be ready to ship :-)
",josephsavona,2016-08-30 23:31:54
1302,2016-08-06 06:06:45,"Fixed
",KCraw,2016-08-30 23:31:54
1302,2016-08-06 16:53:07,"Thanks!
",josephsavona,2016-08-30 23:31:54
1302,2016-08-30 17:59:32,"So, are we going to proceed with this? I understand from comments on #754 that there is some reluctance to increase the API surface area by adding a new method, but on the flip side, it seems to me that a more sophisticated alternative involving LRU eviction would add non-trivial complexity, so I am on the balance fine with proceeding with this.

Thoughts? @josephsavona, @KCraw.

I'm preparing to cut a release in the next day or two, so it would be good to include this (or not).
",wincent,2016-08-30 23:31:54
1302,2016-08-30 18:01:11,"+1 for shipping this
",josephsavona,2016-08-30 23:31:54
1302,2016-08-30 18:03:59,"@facebook-github-bot import
",wincent,2016-08-30 23:31:54
1302,2016-08-30 18:04:26,"Thanks for importing.If you are an FB employee go to [Phabricator](https://phabricator.intern.facebook.com/D3792224) to review internal test results.
",ghost,2016-08-30 23:31:54
1302,2016-08-30 23:33:36,"Landed this with some changes to the internal names to better follow our conventions. Thanks once again @KCraw.
",wincent,2016-08-30 23:31:54
1301,2016-07-26 19:51:41,"Adds a union type to the schema and a root field of this type. I needed this to test the logic for requisite field generation (`id`).
",josephsavona,2016-07-26 21:31:31
1301,2016-07-26 19:52:02,"@facebook-github-bot import
",josephsavona,2016-07-26 21:31:31
1301,2016-07-26 19:52:11,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1737814523142275/int_phab) to review internal test results.
",ghost,2016-07-26 21:31:31
1301,2016-07-26 19:55:58,"@facebook-github-bot import
",josephsavona,2016-07-26 21:31:31
1301,2016-07-26 19:57:04,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1737814523142275/int_phab) to review internal test results.
",facebook-github-bot,2016-07-26 21:31:31
1300,2016-07-26 16:00:13,"As I commented on https://github.com/facebook/relay/issues/1046#issuecomment-235314338, I want to have a fatQuery that matches all variables in the store so that I do not have to specify all variable possibilities stored in the current relay store.
I tried to not specify variable, but it fails the query validation.

For example, 

<S_CODE_TOKEN>
",joonhocho,2017-01-30 22:23:00
1300,2016-07-26 17:25:06,"I also noticed that @relay(pattern: true) only applies to connections, not other fields with arguments.
",joonhocho,2017-01-30 22:23:00
1300,2016-08-03 07:05:22,"is there anyway to declare variable for fatQuery?
",arypurnomoz,2017-01-30 22:23:00
1300,2016-08-03 15:43:20,"Fat queries are evaluated without looking at arguments, so in the example it should be sufficient to write just `fieldWithArguments` in the fat query instead of `fieldWithArguments(id: ...)`. If that isn't passing validation, we can change `@relay(pattern: true)` to apply to any fields within a fat query. The logic for handling this in the babel plugin - PRs welcome!
",josephsavona,2017-01-30 22:23:00
1300,2016-08-04 22:10:56,"@josephsavona Are you sure that `@relay(pattern: true)` works on any fields? It didn't work for me when I tried as it caused validation error. I think it only works for relay connection fields.
",joonhocho,2017-01-30 22:23:00
1300,2016-08-04 22:22:46,"> Are you sure that `@relay(pattern: true)` works on any fields?

No, I suspect it won't. As I mentioned, though, we'd welcome a PR to support this.
",josephsavona,2017-01-30 22:23:00
1300,2016-08-23 00:41:04,"I'm assuming in your example the arguments are required and you're (like me) expecting that `fieldWithArguments @relay(pattern: true)` will make those arguments not required.  This [errors out in GraphQL](https://github.com/graphql/graphql-js/blob/3083fc5743ef228326588f0d1c6b1ebcdf0c4a52/src/validation/rules/ProvidedNonNullArguments.js#L23) before it even gets to Relay.  

In a relay ConnectionType all the arguments `before`, `after`, etc are optional.  Omitting them passes GraphQL validation, but is caught at Relay validation time which checks that [at least one exists](https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/RelayQLPrinter.js#L798) or the pattern directive was provided.   The validation happens in Relay so its pretty easy for Relay to get around it.

So to make this work, I think you'd have to override the `ProvidedNonNullArguments` validation [here](https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/RelayQLTransformer.js#L276).  Just a guess though.  Does any of that make sense @josephsavona?
",ddgromit,2017-01-30 22:23:00
1300,2016-09-15 00:13:23,"@josephsavona created a PR, would love some feedback https://github.com/facebook/relay/pull/1376
",ddgromit,2017-01-30 22:23:00
1300,2016-12-11 13:55:51,"In the meantime, suppose you pass the required field's value by hand. It appears that Relay ignores the value anyway and fetches the field for all previously used call values of the variable. 

So say I have previously used `jim` and `nancy` as call variables for required variable `name` for field `findPerson`, then including field `findPerson(name: ""tom"")` in the fat query actually produces two aliases of `findPerson` in the query, one for `jim` and one for `nancy` but not one for `tom`. Which makes sense, but if that's the behavior, why require the field value at all? (I guess that's the point of this PR). 

Anyway, while we have fat queries, it makes sense to be able to specify that a mutation affects only a certain combination of field/variable. Not all previously known calls. Does that make sense?

Anyway, I know fat queries are going away.",dminkovsky,2017-01-30 22:23:00
1300,2017-01-30 22:23:00,"I'm going to close this now. Since this issue was created, we've made the new `Relay.GraphQLMutation` API public, and have also started rolling out new APIs and a new core to the `master` branch here. Neither of those APIs make use of fat queries any more, and we don't want to devote any further resources to working on the legacy system, so closing seems appropriate.

Thanks for everybody who participated in the discussion.",wincent,2017-01-30 22:23:00
1299,2016-07-26 08:05:26,"This reverts commit d5f84d5240bd98791882cc5eed520f32cbab36c9. The website is on an old version of React so we probably don't want this.
",spicyj,2016-07-26 16:17:09
1299,2016-07-26 08:08:05,"@facebook-github-bot shipit
",spicyj,2016-07-26 16:17:09
1299,2016-07-26 08:09:04,"I will not rubber stamp and land your change for you @spicyj!  I can import it for you and you can get your change reviewed by someone though :)
",ghost,2016-07-26 16:17:09
1299,2016-07-26 08:10:34,"@facebook-github-bot shipit
",cpojer,2016-07-26 16:17:09
1299,2016-07-26 08:10:46,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1150461298344138/int_phab) to review internal test results.
",ghost,2016-07-26 16:17:09
1298,2016-07-25 22:58:15,"@josephsavona, I have manually tested simple end-to-end use-cases, and Subscriptions are working. But this is very much a WIP, and I have lots of cleanup and tests to write.

I submitted this PR to open up a channel of communication with you, as I have lots of questions. I will post my questions in comments below.
",tjmehta,2016-08-05 17:39:06
1298,2016-07-25 22:59:24,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-08-05 17:39:06
1298,2016-07-25 23:00:01,"The first question I have is that I am unable to run `npm run typecheck` without errors on `master` (w/ none of my changes). A lot of the ""errors"" seem like warning complaining about the location of dependencies. For example:

<S_CODE_TOKEN>

How do I get typecheck to pass?

EDIT:

<S_CODE_TOKEN>

*I ended up getting the tests/typecheck to work on ubuntu, but cannot get them to work on OSX.
",tjmehta,2016-08-05 17:39:06
1298,2016-07-26 00:49:05,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-08-05 17:39:06
1298,2016-07-27 08:56:06,"#541 
",tjmehta,2016-08-05 17:39:06
1298,2016-07-28 03:56:30,"I was able to get lint, flow, and tests passing on my ubuntu machine.
I also added a lot of tests and fixed some bugs. 

Awaiting feedback. Thanks
",tjmehta,2016-08-05 17:39:06
1298,2016-07-28 07:14:44,"@tjmehta We haven't had an opportunity to review this in detail just yet, but in the meantime I wanted to thank you for such a well thought out and thoroughly tested PR. We'll review and comment soon. 
",josephsavona,2016-08-05 17:39:06
1298,2016-07-28 07:21:47,"Thanks for the comment @josephsavona. Take your time and let me know. I have a few questions myself, but I will wait for feedback first.
",tjmehta,2016-08-05 17:39:06
1298,2016-07-28 20:25:32,"This is great !
@tjmehta, what did you use on the backend side ? Last time I checked subscription support in graphql-js was pretty embryonic.
",kamek-pf,2016-08-05 17:39:06
1298,2016-07-28 20:28:08,"@kamek-pf I use [primus-graphql](http://github.com/tjmehta/primus-graphql). Pushing a release soon to support subscriptions (currently working out bugs).
",tjmehta,2016-08-05 17:39:06
1298,2016-08-02 16:25:38,"Thanks for your patience in our reviewing this. This is tricky. On the one hand, we really want to support subscriptions out of the box. On the other hand, our current strategy for Relay development is to focus on providing core primitives that developers can use to build interesting solutions in user-space (like React). We discuss this a bit more in #559:

> This issue is to track work toward a new, more modular public API. We plan to strike a balance between overly monolithic and overly decomposed, and split Relay into two main parts:
> - Relay Core: imperative API for fetching, observing, and updating data.
> - React/Relay: React integration in the form of RelayContainer and RelayRenderer, implemented purely in terms of the public Relay Core API.

..and in our [H1 Plans](https://github.com/facebook/relay/blob/master/meta/meeting-notes/2016-03-14-team-sync.md#h1-plans). (Aside: these aren't super visible, and we'd welcome suggestions on how to make this strategy more obvious to new contributors)

So rather than merge this into Relay, we'd be happy to support you in releasing this as a separate NPM package. Specifically, we can provide code review and API suggestions here on the initial version, and would appreciate your feedback & PRs to make sure that the public API is sufficient to build this type of project in user-space.
",josephsavona,2016-08-05 17:39:06
1298,2016-08-02 17:19:38,"@josephsavona I understand the thoughts behind this decision, and I want to understand more about your expectations of open source solutions. I am sure your team has discussed pros and cons of different potential implementations for subscriptions. This should help outline what requirements the team wants the final solution to have. I think sharing those thoughts with the OSS community would be helpful.

After experimenting with this solution for a few weeks, I definitely understand that subscriptions can be implemented w/ a variety primitives (versus observables). If the relay team decides that subscriptions should definitely use observables, the classes in this PR would help set a foundation for open source solutions to flourish (`RelaySubscriptionRequest`, `RelaySubscriptionQuery`, `RelaySubscription`, `RelaySubscriptionObservable`, ..). IMO these classes are only as opinionated as existing classes for Queries/Mutations, but I would love to hear your thoughts.
",tjmehta,2016-08-05 17:39:06
1298,2016-08-03 06:39:53,"@josephsavona Not really relevant to this PR but I would love if you could share the progress on the core  API / prototype. It's been a while since I heard anything about it, last time was probably when you updated #559 with the new proposal.

More relevant, I have a npm package that kind of adds subscriptions into Relay, it doesn't cover all cases and are probably in need of some api changes but I think it can be a nice start to community driven subscription support. What it does is basically to provide a high-level api in terms of React components and then a low-level api in terms of classes and helper methods.
@josephsavona, I would really appreciate if someone from the Relay team are willing to take a look at it and give some feedback. [edvinerikson/relay-subscriptions](https://github.com/edvinerikson/relay-subscriptions)

@tjmehta I really like this PR, if we could get this into [edvinerikson/relay-subscriptions](https://github.com/edvinerikson/relay-subscriptions) I think that would be awesome. 
",edvinerikson,2016-08-05 17:39:06
1298,2016-08-03 23:25:11,"@edvinerikson I am still going to wait for @josephsavona thoughts here. I don't believe that the subscriptions solution that I provided is overly opinionated. I believe it provides basic classes similar to Queries/Mutations, that could help the OSS community build advanced features on top of.

I read all of the threads and previous PRs before implementing this, and made sure to follow all the suggestions @josephsavona provided in: #541  
",tjmehta,2016-08-05 17:39:06
1298,2016-08-04 20:09:32,"@josephsavona, since this PR is so large, can you at least overview the classes and let me know which ones you definitely think could be in relay core (like `RelaySubscriptionRequest`). I can start breaking out classes into individual PRs, so that this is easier to digest. I am on vacation for a week starting tomorrow, so I will start when I get back.
",tjmehta,2016-08-05 17:39:06
1298,2016-08-04 23:55:35,"> Not really relevant to this PR but I would love if you could share the progress on the core API / prototype. 

@edvinerikson Yup, we'll be publishing a blog post on this soon. For now, you can also check the [meeting notes](https://github.com/facebook/relay/tree/master/meta/meeting-notes) for more details on what we've been working on.

> I definitely understand that subscriptions can be implemented w/ a variety primitives (versus observables) ... IMO these classes are only as opinionated as existing classes for Queries/Mutations

@tjmehta Good points and questions. First let me clarify; the primitives that I'm referring to are the low-level functions such as `RelayStoreData#handleQueryPayload()` to write data into the Relay store, `RelayEnvironment#observe()` to subscribe to the latest results of a fragment, and `RelayStoreData#handleUpdatePayload()` to apply the results of a mutation or subscription. They also include things like `RelayQuery.Subscription` and `printRelayQuery` that can be used to represent a subscription object and print it as GraphQL text.

You're right that the classes introduced in this PR are at a similar level of abstraction to existing classes such as `RelayMutation`. However, subscriptions are still an active area of investigation for the GraphQL community. There are a _lot_ of tradeoffs to consider - should we use `subscription { ... }` or `query @live { ... }`? How to implement the backend? How about the client/server transport? We agree that real-time is important, but are hesitant to bake one solution into the core (we can't even provide a default network layer implementation).

Another consideration is that we are working on some large changes to Relay core. Accepting this PR would increase the surface area that we have to maintain and upgrade, which could slow progress for us and the community. 

Given all of this, we won't be able to move forward with this PR. Instead, I think the best approach is to consider merging this into @edvinerikson's [`relay-subscriptions`](https://github.com/edvinerikson/relay-subscriptions). As I've mentioned in previous comments this is high-quality, well-thought out code and we're happy to support you in releasing this as a standalone library. 
",josephsavona,2016-08-05 17:39:06
1298,2016-08-05 17:39:02,"@josephsavona Thanks for your thorough explanation. I will close this PR for now. May I use this PR as a channel of communication w/ you? Or is there a better way? The reason I ask is that I still have a lot of questions about subscriptions for you and would love to get more involved w/ relay contributions in general.

@edvinerikson, I will be in touch after I get back from vacation to see how compatible our implementations are.
",tjmehta,2016-08-05 17:39:06
1298,2016-08-05 18:01:00,"@tjmehta Yeah, feel free to ask questions here and we'll answer as soon as we can :-)
",josephsavona,2016-08-05 17:39:06
1297,2016-07-25 15:13:05,"I had a brief discussion with @jeffmo about making flow understand graphql. He suggested to ask Relay team about how you solve the problem of typing relay apps. In the meeting notes it says that @sampepose is working on flow types generation script, but nothing I could find about what that is.

Can you provide any details about your approach for typing relay apps? Would it bring any value if flow supported graphql?

What I mean by graphql-support is parsing queries/fragments like `Relay.QL`fragment on User {...}``, validating them, generating prop types for relay-components, etc.
",pvolok,2016-07-26 15:44:16
1297,2016-07-26 00:29:30,"Hi @pvolok!

I've been working on a script that parses JS and generates Flow types from Relay.QL template strings. We're starting to use this to automatically add typing to mutation arguments and Container fragments for our internal Relay apps. This is especially useful for React Native, where a runtime error crashes the entire app.

Unfortunately, the script relies on a few internal modules that we aren't quite ready to publish. We're hoping to eventually open-source the script, but there's no current timeline I can give.
",sampepose,2016-07-26 15:44:16
1297,2016-07-26 15:44:16,"Thanks @sampepose!
",pvolok,2016-07-26 15:44:16
1296,2016-07-22 16:13:49,"I've implemented a pretty basic `CacheManger` that stores records in a structure that is very similar to `RecordStore`.
#### CacheRecordStore structure

![screen shot 2016-07-22 at 10 59 09 am](https://cloud.githubusercontent.com/assets/6886061/17063116/61bed824-4ffb-11e6-9340-1a2b23914cbf.png)
#### CacheRecord structure

![screen shot 2016-07-22 at 11 00 05 am](https://cloud.githubusercontent.com/assets/6886061/17063146/7bf05722-4ffb-11e6-9ab9-b61aa0525526.png)

Relay has its own internal record store for cached data, `cachedRecords` and `cachedRootCallMap` on `RelayStoreData`. This internal maps are populated by `RelayCachedDataRestorator`.

The issue is that `RelayCachedDataRestorator` is not reading all the records from the `cacheManager`.  It only ever calls `cacheManager.readNode` for what appears to be the root node. I'm using the `relay-starter-kit` to test, so the root node ID is `""VXNlcjox""`. `RelayStoreData._cachedRecords` ends up being populated as:

![screen shot 2016-07-22 at 11 10 52 am](https://cloud.githubusercontent.com/assets/6886061/17063464/ff36a3d8-4ffc-11e6-8a59-b541b93e6526.png)

So the issue here may be that these records are part of a connection. It's interesting that `writeField` is used to write connection records, since it seems that the `dataId` for a connection can change (at least in this example project) so they don't seem to be cacheable.

But the `dataId` for the actual nodes in these edges are consistent, so I would expect Relay to attempt to read those nodes from the `CacheManager`.
",aweary,2016-12-20 18:00:12
1296,2016-07-22 17:03:46,"It sounds like your CacheManager implementation may be incomplete. If you're able to share it as a gist or something that would probably be the easiest way to debug.
",josephsavona,2016-12-20 18:00:12
1296,2016-07-22 17:29:28,"@josephsavona here's a gist with the current implementation: https://gist.github.com/Aweary/a84664713a6b465c72cd572dc39e698b

Just keep in mind that this a very rough draft. I've implemented a `CacheManager` and `CacheWriter` per the spec defined in `RelayTypes`. 

The fact that `readNode` is only ever invoked for the root node seems like the main problem, maybe I'm returning/storing incomplete data for the record.

Could it be that I'm not returning a `__path__` on my cached records? I wasn't able to figure out how to build a `QueryPath` from the serialized record data.
",aweary,2016-12-20 18:00:12
1296,2016-07-22 18:29:24,"@josephsavona here are some potentially useful logs. I'm building Relay from my fork (up to date master) and using that here, so I injected some log into the codepath that seems to be important to restoring cached data. Maybe it will help you more than it's helping me 😄 

![screen shot 2016-07-22 at 1 27 01 pm](https://cloud.githubusercontent.com/assets/6886061/17067184/3668a208-5010-11e6-8e70-16cadfec86f7.png)

`readNode` is the `cacheManager.readNode` method, you'll see it only ever reads the root node.
",aweary,2016-12-20 18:00:12
1296,2016-07-23 02:07:38,"@Aweary I'm still looking at your gist, but the first thing that stands out is that the root call map seems to [ignore call values](https://gist.github.com/Aweary/a84664713a6b465c72cd572dc39e698b#file-querymanager-js-L27). Does fixing that help?
",josephsavona,2016-12-20 18:00:12
1296,2016-07-23 02:10:40,"I'm going to close this since this doesn't appear to be an issue with Relay itself. Feel free to continue asking questions here, though, and we'll do our best to answer.
",josephsavona,2016-12-20 18:00:12
1296,2016-07-23 03:03:30,"@josephsavona in the simple app I'm testing with the `callValue` is always an empty string, so I didn't setup a map for them. `readRootCall` just asks that a `dataID` be passed to the callback and it does that successfully, so I don't think that's it. I'll try and get you a repo reproducing this issue, I know it's hard to diagnose with a cursory glance.
",aweary,2016-12-20 18:00:12
1296,2016-07-25 14:29:45,"@josephsavona here's a repo forked from the relay-starter-kit that demonstrates the issue I'm having: https://github.com/Aweary/relay-cache-manager-issue

I'm pretty sure my `CacheManager` implementation implements the basic interface correctly, according to `RelayTypes` but I could be wrong.
",aweary,2016-12-20 18:00:12
1296,2016-07-25 16:14:11,"@Aweary Hmm. The remaining thing that stands out is that record values aren't being serialized with `JSON.stringify`. Other than that, it's going to be a matter of debugging to figure out why the cache read stops early. Your paste of the console logs suggest that the CacheRestorer is trying to follow fields off of the the root node - i'd start debugging there and see why `findRelayQueryLeaves` is unable to continue based on the shape of the data your cache returns.
",josephsavona,2016-12-20 18:00:12
1296,2016-07-25 16:39:30,"> The remaining thing that stands out is that record values aren't being serialized with JSON.stringify

@josephsavona the individual records aren't serialized with `JSON.stringify`, but they do get serialized when the `cacheWriter` is serialized, unless I'm misunderstanding you. It does successfully de/serialize the records from what I can see.

The node that's being read from the `cacheManager` **seems** to have the correct shape:

<img width=""334"" alt=""screen shot 2016-07-25 at 11 34 03 am"" src=""https://cloud.githubusercontent.com/assets/6886061/17109070/097e3dea-525c-11e6-8f32-77f42a773ef2.png"">

I'll try to dig into `findRelayQueryLeaves` to see why it seems to return early as far as reading from the cache goes.
",aweary,2016-12-20 18:00:12
1296,2016-08-01 14:29:13,"@josephsavona quick question, is the `cachedRecords` object passed to `findRelayQueryLeaves` expected to be fully populated when it's passed to `findRelayQueryLeaves`, and subsequently `RelayQueryLeavesFinder`? Or is that done based on the `rangeCalls` array passed in as well (or somewhere else)?

![screen shot 2016-08-01 at 9 24 40 am](https://cloud.githubusercontent.com/assets/6886061/17297103/d8bd48ae-57c9-11e6-9938-d052290c7bf2.png)
",aweary,2016-12-20 18:00:12
1296,2016-08-01 15:20:45,"For what its worth, here's a serialized record of the `store`, `cachedRecords`, `dataID` and `rangeCalls` arguments that are passed to `findRelayQueryLeaves`

<details>
  <summary>

Click to expand</summary>



<S_CODE_TOKEN>

</details>

The record for the root user (`""VXNlcjox""`) has a reference to the widgets connection as `widgets` but I guess I just don't see where/how the cache reader is supposed to know to read the `widgets` field to get the dataID pointing to the connection, which I'm guessing would lead it to read the widget records.
",aweary,2016-12-20 18:00:12
1296,2016-08-02 11:35:21,"Hi! 

Just wanted to say that I'm also very interested in writing my own Cache Manager which would do something similar. I played around with your repo and I'm also baffled why this would not work, as it seems to conform to the interface. There's some code around the Cache Managers in Relay tests, maybe there will be a suggestion there. I'm not versed enough in the details yet to find it, unfortunately.

I went step by step in the RelayQueryLeavesFinder and it seems to visit RelayQueryField, then runs _visitScalar on the `id` field, which it finds, and there are no more `_pendingNodeStates`. It looks like the fragment fields are not taken into consideration?
",marcinbunsch,2016-12-20 18:00:12
1296,2016-08-02 15:01:56,"Narrowing down the issue a bit more, it seems that `RelayCachedDataRestorator` is not iterating over all the `pendingNodeStates` returned from `findRelayQueryLeaves`. 

`this._state` is marked as `""COMPLETED""` after visiting only the first node state, meaning the `RelayQueryFragment` that is queued up at index `1` is ignored. So now it's matter of identifying why it completes early.

**edit:** 

So what seems to be happening is that `pendingNextStates` in `RelayCacheProcessor` is being cleared before another state is queued.

[`visitNode`](https://github.com/facebook/relay/blob/master/src/store/RelayCacheProcessor.js#L199-L204) adds the `nextState` to a queue scoped by dataID

<S_CODE_TOKEN>

But that first `if` block checking if a pending state queue exists is never run, because [`queueNode` deletes it](https://github.com/facebook/relay/blob/master/src/store/RelayCacheProcessor.js#L164-L165):

<S_CODE_TOKEN>

and this is running **BEFORE** the next node is visited. So when `queueNode` checks [if `_isDone()` is `true`](https://github.com/facebook/relay/blob/master/src/store/RelayCacheProcessor.js#L172-L174)

<S_CODE_TOKEN>

It ends up calling `_handleSuccess()` which marks `_state` as `""COMPLETED""` which causes the  [`for` loop in `RelayCachedDataRestorer.traverse()` to exit early](https://github.com/facebook/relay/blob/master/src/store/restoreRelayCacheData.js#L243-L245)

<S_CODE_TOKEN>

@josephsavona can you review this and let me know what you think? It seems like its assumed that `visitNode` will be called for every node before `queueNode` processes them?
",aweary,2016-12-20 18:00:12
1296,2016-08-02 16:01:53,"Ok, so I investigated by going through the whole flow in debugger, step by step, here's what I found. Sorry if it's long, but wanted to recreate all steps I did so you can correct me if I'm wrong anywhere. 

TL;DR

RelayCachedDataRestorator extends RelayCacheProcessor, so when we call `RelayCachedDataRestorator.prototype.traverse`, it calls `RelayCacheProcessor.prototype.visitNode`, which when visitation is complete and there are no more `_pendingRoots` or `_pendingNextStates`, sets the `this._state` to `COMPLETE`, which short circuits `RelayCachedDataRestorator.prototype.traverse` and never allows it to get to the fragment.

Full version:

It all starts with `GraphQLQueryRunner#run`, which receives a querySet, which is a RelayQueryRoot object and has two children:

1) an 'id' field object
2) a RelayFragmentReference object

This runs `runQueries`, where when cacheManager is present, we switch to restoring data from cache (https://github.com/facebook/relay/blob/master/src/legacy/store/GraphQLQueryRunner.js#L244)

At this point we convert the query into requiredQueryMap, with a single key value if `q0: RelayQueryRoot` for the `viewer` field in the query. That RelayQueryRoot object which has two children:

1) RelayQueryField object for 'id'
2) RelayQueryFragment for the view fragment which fetches the widgets. It has the field for `widgets` in children.

With that map, we call `storeData.restoreQueriesFromCache`, which instantiates a changeTracker and profile and calls `restoreQueriesDataFromCache`

This instantiates a `RelayCachedDataRestorator` and calls `restoreQueriesData` on it. This is where visiting and traversal begins.

It starts iterating over the queries and calls `visitRoot` on each of them. In it, it calls `visitIdentifiedRoot`.

In there, it runs `this._store.getDataID`, which returns undefined, and it calls `_RelayCacheProcessor.prototype.visitIdentifiedRoot`. This identifies the root as `viewer*`, stores it in `_pendingRoots` and runs `queueIdentifiedRoot` with that root.

We get to `RelayCacheProcessor.prototype.queueIdentifiedRoot`, which is the first place where we communicate with the cacheManager. (https://github.com/facebook/relay/blob/master/src/store/RelayCacheProcessor.js#L115).

In there we ask the cache do give us the dataID of the root for `viewer`, we return the id of the viewer from the cache.

It builds an array of `pendingRoots`, which holds the one RelayQueryRoot object mentioned before. We start traversing the RelayQueryRoot by calling `RelayCachedDataRestorator#traverse`.

In there `findRelayQueryLeaves` is called. The `RelayQueryLeavesFinder` visits the queryNode. It calls `visitRoot` on it, which calls `traverse`. We traverse the childern of the query node.

First, we run `visitField` on the `id` RelayQueryField. The record is not found, so `_handleMissingData` is called, which pushes the RelayQueryField node to `_pendingNodeStates` and finishes that iteration of the loop.

Secondly, we run `visitFragment` on the RelayQueryFragment. The record is not found, so `_handleMissingData` is called, which pushes the RelayQueryFragment node to `_pendingNodeStates` and finishes that iteration of the loop.

At this point `findRelayQueryLeaves` returns an object with `pendingNodeStates` and within `RelayCachedDataRestorator#traverse` we start iterating over it: https://github.com/facebook/relay/blob/master/src/store/restoreRelayCacheData.js#L242.

We iterate over the pendingNodeStates and call `visitNode` on each. `visitNode` is `RelayCacheProcessor.prototype.visitNode`.

First, we take the `id` RelayQueryField node. This builds an `_pendingNextStates` object with dataID as key and array with one `nextState`. Then we run `RelayCacheProcessor.prototype.queueNode` on the node.

Inside that function, we interact with the cacheManager again. We call `this._cacheManager.readNode`. It returns the object and we mark the node as visited by calling `RelayCachedDataRestorator.prototype.handleNodeVisited` which adds the id to `cachedRecords` and creates in `_changeTracker`.

Then we set a local `pendingNextStates` array and iterate on it. In that loop, we travers the `id` field node using `RelayCachedDataRestorator.prototype.traverse`.

When traversing, we call `findRelayQueryLeaves`, which runs `RelayQueryLeavesFinder.prototype.visitField` on the `id` field. This calls `RelayRecordStore.prototype.getRecordState`. This time, the record is present in `cachedRecords`, so the recordState is `EXISTENT`. Because the record is present, we proceed to visit that field and we call `_visitScalar` on it.

`_visitScalar` finds that the field has data, so it does nothing. `_handleMissingData` is not called.

This results in `findRelayQueryLeaves` to return an empty array of `pendingNodeStates` and the traversal of the `id` RelayQueryField ends

At this point we get back to `RelayCacheProcessor.prototype.queueNode`. There are not `pendingNextStates`, so we finish the loop.

Then, we ask `RelayCacheProcessor` if we're done (https://github.com/facebook/relay/blob/master/src/store/RelayCacheProcessor.js#L172).
This checks if there are any `this._pendingRoots` or any `this._pendingNextStates` and that the state is loading. This resolves to true and we call `_handleSuccess`, which is `RelayCacheProcessor.prototype._handleSuccess`. This sets the `this._state` to `COMPLETED` (https://github.com/facebook/relay/blob/master/src/store/RelayCacheProcessor.js#L228).

In the `_handleSuccess` we call `RelayStoreData.prototype._handleChangedAndNewDataIDs` and set the `readyState` to:

<S_CODE_TOKEN>

After all that, we get back to the loop on `pendingNodeStates` in `RelayCachedDataRestorator.prototype.traverse`. However, at this point, `this._state` is `COMPLETED` and this check causes the Restorator to short-circuit: https://github.com/facebook/relay/blob/master/src/store/restoreRelayCacheData.js#L243. That is why we never get to the RelayQueryFragment object.
",marcinbunsch,2016-12-20 18:00:12
1296,2016-08-02 16:06:48,"@marcinbunsch looks like we came essentially to the same conclusion 😄 
",aweary,2016-12-20 18:00:12
1296,2016-08-02 16:07:59,"Yeah, just noticed that after publishing this essay 😄 
",marcinbunsch,2016-12-20 18:00:12
1296,2016-08-02 16:08:33,"On another note, that looks like a bug in Relay?
",marcinbunsch,2016-12-20 18:00:12
1296,2016-08-02 16:10:49,"Not sure how to fix it, maybe @josephsavona has an idea? Maybe `RelayCachedDataRestorator` should spin up an instance of `RelayCacheProcessor` for each traversal of each `pendingNodeState`?
",marcinbunsch,2016-12-20 18:00:12
1296,2016-08-02 16:11:49,"Hey there - thanks for all the details. ccing @yuzhi who has worked a lot on cache, one of us will try to take a look.
",josephsavona,2016-12-20 18:00:12
1296,2016-08-02 16:12:10,"Thanks @josephsavona! Really appreciate it 👍 
",aweary,2016-12-20 18:00:12
1296,2016-08-02 16:29:00,"I think this can be fixed by adding a `isDone` function to `RelayCachedDataRestorator.prototype` which also checks if `pendingNodeStates` are empty.
",marcinbunsch,2016-12-20 18:00:12
1296,2016-08-02 16:29:21,"Awesome! Thanks, @josephsavona!
",marcinbunsch,2016-12-20 18:00:12
1296,2016-08-02 16:51:34,"@Aweary or @marcinbunsch - It sounds like this may be a bug. Any chance you could submit a PR with a failing test case?
",josephsavona,2016-12-20 18:00:12
1296,2016-08-02 17:46:17,"Thanks for the super thorough reports!!! I have a guess on what's wrong.  All of our disk caches are actually reading from disk, which is async. Seems like `RelayCachedDataRestorator` expect all the callbacks to be async. Can you guys try adding a `setImmediate` for calling the callback to see if that solves the problem? 
",yuzhi,2016-12-20 18:00:12
1296,2016-08-03 10:48:17,"I wrapped the callbacks in `setTimeout(..., 0)` and it worked, thanks! So it's a question if it's a bug or it should work like that by design. Can it be marked somehow in the interface that the callbacks should be async?

Before you wrote that, I tried the following fix in my local copy of `react-relay` which allowed for the loop to finish and the callbacks to be defined in a sync fashion:

<S_CODE_TOKEN>
",marcinbunsch,2016-12-20 18:00:12
1296,2016-08-03 10:50:10,"After applying the fix the data is read from cache and rendered, then a request is made to the backend, which re-fetches all of the data and re-renders. Any suggestions what is causing the trip for all data and how we could control the necessity for such trip?
",marcinbunsch,2016-12-20 18:00:12
1296,2016-08-03 14:02:28,"@marcinbunsch Thanks for testing it out! Sounds like that was the problem. I think it should work for both async and sync reads. This is a case we haven't tested yet with our current implementation. Are either you or @Aweary interested in submitting a pull request to fix it in the `RelayCachedDataRestorator`?

> After applying the fix the data is read from cache and rendered, then a request is made to the backend, which re-fetches all of the data and re-renders.  Any suggestions what is causing the trip for all data and how we could control the necessity for such trip?

Great observation! The current implementation is pretty basic (that's why we haven't really documented it more broadly). It was mostly designed to quickly support product needs for React Native apps at Facebook. We wanted to support offline mode, which works better with a longer TTL, but didn't also want the data we render to be stale when network is available. Because we haven't designed a good API for customizing different level of TTL and most of the apps we were working with wanted to be able to show freshest and most relevant data ASAP, we always send a network request with a disk cache read. Unfortunately, the current data fetching logic does not allow more customizing. Being able to control when to do a network request and when to do a disk read definitely something we want to support better in the future and will actively work on.
",yuzhi,2016-12-20 18:00:12
1296,2016-08-03 14:15:37,"I haven't done much work towards actually fixing this, so @marcinbunsch feel free to open a PR to address this! @yuzhi can we re-open this issue, since it turns out that it was a Relay issue?

Thanks for all the help with this everyone 😄 
",aweary,2016-12-20 18:00:12
1296,2016-08-03 21:01:21,"For reference, we've released this basic implementation on npm:
https://github.com/ConciergeAuctions/relay-cache-manager

It's obviously a very naive implementation at the moment, but we'd love to work with anyone who wants to implement an awesome cache manager for Relay.
",aweary,2016-12-20 18:00:12
1296,2016-08-03 23:37:18,"I took a stab at writing a spec, ended up with this: https://github.com/facebook/relay/compare/master...marcinbunsch:cached-data-restorator-is-done-fix#diff-0f670f13f2fd3a06b6683e556679ef4aR15

I'm trying to mock `RelayCacheProcessor#visitNode` to see that it gets called for each node in the query. However my jest-fu is not strong and I'm having issues mocking it without the awful `global.calls`. A local variable does not work, because the mocked module gets opened multiple times and these subsequent opens does not share variables. Do you have any suggestions on how to do it properly?
",marcinbunsch,2016-12-20 18:00:12
1296,2016-12-20 18:00:12,Resolved right?,josephsavona,2016-12-20 18:00:12
1295,2016-07-20 20:28:53,"Say I query a filtered set of data from my GraphQL API like
`query { messages(read: false) }`
and then later on performed a mutation such as
`mutation { mayMarkMessageAsRead }`

At this point, I will not know whether or not this email node should still exist until after the query results return. Is there a way to conditionally perform a NODE_DELETE, based on the results. The only other option I can think of is to enable forceFetch, but this seems inefficient. Perhaps I'm just thinking about this the wrong way, since I'm new to Relay.
",ScottWe,2016-07-20 21:27:55
1295,2016-07-20 21:27:55,"Mutation configs are defined statically. In this case (inferring a bit from the names of the fields/mutation), it sounds like the `mayMarkMessageAsRead` mutation would not _delete_ the message, but simply mark it as read such that it should not appear in the list of `messages(read: false)` items. The `RANGE_DELETE` config is probably the most appropriate option here, as it would allow you to mark a read message as being removed from `messages(read: false)`.

If that doesn't solve your use case, I'd recommend posting on Stack Overflow:

https://stackoverflow.com/questions/ask?tags=relayjs

We encourage developers to ask questions there to help get answers from a wider audience as well as making it searchable to other developers with the same question.
",josephsavona,2016-07-20 21:27:55
1294,2016-07-20 19:19:21,"Resolves #1293 

Current if you try to de/serialize your RelayEnvironment you run into an error as `getRangeMetadata` tries calling a `GraphQLRange` method on the serialized array. To prevent this we check to see if we have a serialized instance (which is always an array) and parse it if we do.
",aweary,2016-07-28 20:46:34
1294,2016-07-20 21:39:09,"Thanks for this PR. We recently added a [utility for (de)serializing a RelayEnvironment](https://github.com/facebook/relay/blob/master/src/store/RelayEnvironmentSerializer.js) that is designed to solve this exact problem. Note that placing all of the serialization logic in `RelayEnvironmentSerializer` decouples values serialization from the logic that operates on those values. The PR as implemented introduces deserialization logic into a runtime module, introducing runtime and cognitive overhead.

Would you care to send a PR to export `RelayEnvironmentSerializer` as part of the public `Relay` API? (perhaps as `Relay.EnvironmentSerializer`).
",josephsavona,2016-07-28 20:46:34
1294,2016-07-20 21:45:29,"@josephsavona I was actually using `RelayEnvironmentSerializer` when I ran into this issue. 

> Note that placing all of the serialization logic in RelayEnvironmentSerializer decouples values serialization from the logic that operates on those values.

I agree, that seems ideal. I didn't do it this way because that would require `RelayEnvironmentSerializer` to transverse the parsed `StoreData` instance, which it doesn't currently do, so I was hesitant. I could update this PR to do just that and also expose `RelayEnvironmentSerializer` if you'd like!
",aweary,2016-07-28 20:46:34
1294,2016-07-20 22:13:52,"Alternatively, `RelayStoreData` and `GraphQLRange` already define their own serialization behavior, would it make sense to add this logic to `RelayStoreData.fromJSON()` instead? If `fromJSON` should return a consumable instance of that type then it seems to make more sense to have that logic live there.
",aweary,2016-07-28 20:46:34
1294,2016-07-20 22:21:56,"> would it make sense to add this logic to `RelayStoreData.fromJSON()` instead? If `fromJSON` should return a consumable instance of that type then it seems to make more sense to have that logic live there.

@Aweary I completely agree. Sorry for the misunderstanding; I thought that `RelayStoreData.fromJSON()` already was deserializing `GraphQLRange` instances. It looks like we missed that - we'd be happy to accept a PR fix this.
",josephsavona,2016-07-28 20:46:34
1294,2016-07-20 22:38:18,"@josephsavona awesome, glad we are on the same page. I updated the PR so that `RelayStoreData` iterates through `records` and deserializes all `__range__` instances before it creates and returns the new `RelayStoreData` instance.

Let me know what you think about this approach, and any changes you'd like.

I can also add some tests for `RelayEnvironmentSerializer` and add it to `RelayPublic` if you'd like, or I can do that in another PR 😄 
",aweary,2016-07-28 20:46:34
1294,2016-07-21 19:22:01,"@josephsavona I implemented a `deserializeRecordRanges` helper at the bottom of the file and updated `toJSON` to call it for each set of records.
",aweary,2016-07-28 20:46:34
1294,2016-07-21 19:34:05,"This is sort of tangentially related to this PR, but I was wondering if you guys have considered a way to selectively pick which queries/data are serialized? I've found that our store ends up being rather large, making `JSON.stringify` and `JSON.parse` really expensive. It would be nice if I could select which fields/queries would be serialized, maybe with a directive or something

<S_CODE_TOKEN>

That way I could serialize data that was most important to rendering. These records could be saved in a separate `serializableRecords` store. Just a thought, I'd love to get some feedback on it.
",aweary,2016-07-28 20:46:34
1294,2016-07-21 21:57:48,"@facebook-github-bot import
",josephsavona,2016-07-28 20:46:34
1294,2016-07-21 21:58:03,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1020088174766236/int_phab) to review internal test results.
",ghost,2016-07-28 20:46:34
1294,2016-07-21 22:02:39,"@Aweary Thanks for the PR. 

> This is sort of tangentially related to this PR, but I was wondering if you guys have considered a way to selectively pick which queries/data are serialized?

We have thought about this, but it sounds like you're using serialization for a different use case than we intended. For offline persistence, we have a [cache manager API](https://github.com/facebook/relay/blob/master/src/store/RelayStoreData.js#L183-L189) that allows persistence of individual records (see `RelayTypes` for more on the signature of the cache manager object). For server rendering, we recommend transferring payloads themselves from server to client and processing them there.
",josephsavona,2016-07-28 20:46:34
1294,2016-07-21 22:13:48,"@josephsavona thanks for the guidance!

> We have thought about this, but it sounds like you're using serialization for a different use case than we intended. For offline persistence, we have a cache manager API that allows persistence of individual records (see RelayTypes for more on the signature of the cache manager object). 

I didn't realize that API existed, thanks for pointing it out. We're not using SSR just yet, I was just looking at offline persistence. Out of curiosity, what are the use cases you guys are implementing serialization for?

Also, do you want to get `RelayEnvironmentSerializer` into the public API? I'd be happy to do that here, or open another PR for it.
",aweary,2016-07-28 20:46:34
1293,2016-07-20 18:29:10,"`RelayEnvironmentSerializer` just takes the `_storeData` and serializes it. When this happens, instances of `GraphQLRange` are not properly serialized, and `RelayRecordStore` does do any checks before calling `retrieveRangeInfoForQuery` on the range returned from `_getField`.

I understand that `RelayEnvironmentSerializer` is not even documented or released, but I wanted to see if this was being worked on, or if you would be open to accepting PRs fixing/expanding the current serialization behavior.
",aweary,2016-07-20 21:40:33
1293,2016-07-20 18:56:50,"I see that `GraphQLRange` has a `toJSON` and `fromJSON` method,  so the interface is there, it just needs to be used.
",aweary,2016-07-20 21:40:33
1293,2016-07-20 21:40:05,"I commented on the PR - as you noted, `RelayEnvironmentSerializer` is designed to solve this problem, so let's use that.
",josephsavona,2016-07-20 21:40:33
1293,2016-07-20 21:40:33,"Thanks for starting this discussion. Since you already have a PR open, let's discuss there.
",josephsavona,2016-07-20 21:40:33
1292,2016-07-20 07:35:28,"This is a minimal implementation to fix #444.

This PR in its current state is fully functional but still WIP, as it needs some cleaning up, possibly some minor refactors etc. but wanted to get it up to get the discussion on this functionality (and my implementation) started.
## API Additions

<S_CODE_TOKEN>

`listName` matches the existing `connectionName` and has just been added for clarity and to be able to distinguish between a connection and a plain list mutation. `elementName` (which currently is still called `newElementName` in my code, but will rename shortly) is the field-name of the new element to add from the payload. 

range calls (arguments in the queries) are currently not supported, so rangeBehaviors will currently always be called without any arguments. So only very simple use-cases are currently supported (which satisfies a good chunk of our own internal use-cases), which in my opinion is a good start to get this PR in and any addition to this should come in separate PRs.
## Implementation

As I said, while all the functionality is there and has been tested (including in one of our live apps) I was not sure about a few parts of the implementation, mostly related to optimistic responses so I just took a few guesses that in the end got everything to work.

I was not sure how paths are supposed to work with an optimistic response of a new list element (that has no `id` provided and therefore creates a client-side id). 

Also for some reason when writing the optimistic response I had to copy over the existing records to the record writer, which I did not need for non-optimistic responses and also is not done for connection updates. So maybe there is some room for improvement in my code.

You might of course mention that in the code review, once my PR is ready of course, but just wanted to bring this up early-on.
## TODO
- [ ] Code cleanup and fixing TODOs
- [ ] Fix test for mutation config validation 
- [ ] Add docs for the new functionality
## API improvements (off-topic)

This is not directly related to this PR an maybe not the best Platform for this discussion but when working over this API I had some ideas on how the general API could potentially be simplified and made more flexible. I suppose #538 is the place to discuss this, but wanted to use this chance to figure out if there is any room for writing some proposal/making some proof-of-concept PRs for that area? (I have also seen there has been work done on a new mutation API, but not sure how that differs to the current implementation)
",Globegitter,2016-07-25 13:40:57
1292,2016-07-22 00:12:26,"Oh yes, another thing that is still missing is the feature of `source { id }` that connections support and I quite like. So will probable add that as well.

And one simple change I think that would be nice is, instead of having `listName` or `connectionName` having `pathToList` or `pathToConnection` to support a nested structure. Or to not break backwards-compatibility it could also just accept names with dot-notation, like `some.nested.structure.simpleTopLevelComments`.
",Globegitter,2016-07-25 13:40:57
1292,2016-07-22 02:05:15,"@Globegitter Thanks for such a detailed and extensive PR. We really appreciate all the effort you put into this and other PRs!

Unfortunately the timing of this is not ideal. The team is actively working on some major improvements to Relay core, and among these is a more flexible mutation API that will support effectively arbitrary modification of lists. We're still iterating on the details, but we'll be sharing more about this in the next few weeks.

Given the timing, the fact that the new mutations API would be even more flexible than simple append/prepend, and the complexity involved in testing & shipping this implementation, we're inclined to hold off on accepting this PR. If you have an immediate need for this, we'd be happy to work with you to come up with a workaround (perhaps by manually writing a new list into the store via low-level methods).

I know this can be frustrating, but we're trying to optimize for getting the new version out as soon as possible. What do you think about going with a workaround for now?
",josephsavona,2016-07-25 13:40:57
1292,2016-07-25 13:40:57,"@josephsavona Thank you for that detailed response and it does make sense to not merge this PR if the new and improved API is just a few weeks ahead. Looking forward to seeing arbitrary modifications to lists.

In terms of solutions to our problems, I will have to check with one of our developers first what we currently do there as a work-around before getting back here. But in one of the affected apps that I am directly working on (a non-consumer facing admin-panel) we just decided to force-fetch 100% of the time for now. This decision was also affected by the fact that this app often needs its cache updated with new data from the backend but we have no websockets yet. In the consumer facing app we fortunately could use ConnectionFields everywhere where we needed list mutations. The offer is very much appreciated.

Either way, I will close this PR.
",Globegitter,2016-07-25 13:40:57
1292,2016-07-25 15:43:49,"@Globegitter Thanks for understanding. An internal admin panel seems like a good use case for always-fresh data, so force-fetching almost seems like a good tradeoff there anyway. Definitely reach out though if you still need a workaround and we'd be happy to help!
",josephsavona,2016-07-25 13:40:57
1292,2016-08-07 19:30:03,"> perhaps by manually writing a new list into the store via low-level methods

Can you elaborate @josephsavona? It would be extremely handy to have a reference implementation of the workaround while waiting for the major improvements.
",mattecapu,2016-07-25 13:40:57
1291,2016-07-19 13:43:55,"I seem to be getting a relative path for my ""POST"" mutation requests.  

When i create my default network layer I pass it localhost:3000/graphql. 

Please reference console logs before with there values commented next to them. 

<S_CODE_TOKEN>

<S_CODE_TOKEN>

console error in browser. 

RelayDefaultNetworkLayer.js:131 POST http://localhost:4444/graphql 404 (Not Found)

What am I doing wrong? All of my request to get data and display it work great!! 

Only when i send a mutation. 
",rterysen-openroad,2016-07-28 15:41:57
1291,2016-07-20 21:47:10,"Thanks for filing an issue. The default network layer uses the same URI for [both queries and mutations](https://github.com/facebook/relay/blob/master/src/network-layer/default/RelayDefaultNetworkLayer.js#L126,L134), so it isn't immediately obvious what could be causing one to work and the other to fail. Could you try adding a breakpoint to the network layer and double check that the URI is what you'd expect? It sounds like there is some local configuration that is causing this to fail.
",josephsavona,2016-07-28 15:41:57
1291,2016-07-28 15:41:57,"@rterysen-openroad Were you able to resolve this? I'm going to close this since it _looks_ like a configuration issue. If you're still having trouble, though, feel free to reopen this issue or comment or with more information. Thanks!
",josephsavona,2016-07-28 15:41:57
1291,2016-08-01 16:06:47,"@josephsavona  Sorry i took so long to respond i got sidetracked with other tasks. at work. I am still having this issue.  I ended up putting in a shim that hardcoded the url within relay to make sure the rest of my code was working correctly. 

When i log out my network layer i see below. Below is what prints out in terminal from the backend. 

<S_CODE_TOKEN>

<img width=""605"" alt=""screen shot 2016-08-01 at 12 08 03 pm"" src=""https://cloud.githubusercontent.com/assets/17296866/17300513/b229084c-57e0-11e6-84ac-617d75a98c66.png"">

below is what prints out in console on the web browser. 

<S_CODE_TOKEN>

![screen shot 2016-08-01 at 12 04 37 pm](https://cloud.githubusercontent.com/assets/17296866/17300392/37393b02-57e0-11e6-96d7-a1778d6df018.png)

I pass this into the router like so 

<S_CODE_TOKEN>

Thanks for all of your help!! i am sorry for the delayed response. 
",rterysen-openroad,2016-07-28 15:41:57
1291,2016-08-08 17:08:05,"Thanks for providing more detail - unfortunately this doesn't help to clarify why mutations are not working correctly. 

I did notice that it seems you are doing server side rendering using `isomorphic-relay`. Could this be related? Are you attempting to issue a  mutation on the server instead of the client or something similar?
",josephsavona,2016-07-28 15:41:57
1291,2016-08-08 18:49:49,"Thank you @josephsavona,  for your help!!  I am still learning this whole environment but I really don't believe it would be related to the server render.  Of course I could be wrong.  After the initial load the mutations would triggered off form submissions. I believe that relay would look directly at the graphql server at that point and not be interactive with the express instances serving it.   

I have Graphql  set up in a separate code source.  Also it doesn't spin up as part of the same project hence the issue with it not being a relative path.  The only thing that blows my mind is that my read queries work fine. No matter where I click or what I do I never have a issue grabbing data.  It is only the mutations.  I already troubleshooted this but my guess was the client.js file that has the routing it in it. All my logs show the correct url. 

I added a shim on line 120 of the default network layer that concats the url to the ""/graphql"" path to get the app working for the mean time. With that in place it works fine.  It keeps me up at night though :) ! 

I dont see it making any calls to the node instance that is performing the isomorphic render.  I only see the call on the graphql server.  

Thanks for helping me out with this. I know it has got to be really hard to figure out what is wrong over a conversation of comments.  My team and I are really loving relay beside this bug that we cant seem to fix.  
",rterysen-openroad,2016-07-28 15:41:57
1291,2016-12-10 20:22:13,"I'm experiencing this problem too. Queries get the correct url but mutations are always looking for the relative default url. It only happens with a custom environment created with `new Relay.Environment()`, if I use `Relay.Store` singleton instead, it works fine. Any way I could help with a solution for this issue?",mbavio,2016-07-28 15:41:57
1291,2016-12-10 20:46:40,"@rterysen-openroad Not sure if you are still having the issue, but I found the solution to the my problem at least: turns out I was still using `Relay.Store.commitUpdate()` to run mutations, so the default setup was used as expected, since I updated settings for my custom Environment, not for the Store. 

I solved it by simply doing `enviromment.commitUpdate()` instead!",mbavio,2016-07-28 15:41:57
1290,2016-07-18 15:33:59,"First off, thank you guys for making this. This codebase is really awesome, and I love the approach to everything. Currently though, the main known open source serverside rendering solution (isomorphic-relay, another great codebase) is kind of in a bad spot when it comes to credential passing.

An example of this can be seen with isomorphic-relay, where the solution for passing httponly cookies in serverside rendering involves converting the endpoint to run sequentially, which is a major deoptimizer. By exposing overrides like this, we could skirt that approach by instead just passing in one off data into the sendQueries call.

Admittedly, I don't know this codebase all too well, and there are probably a lot of gotchas I'm overlooking, but I wanted to put this out there and just see what your guys thoughts were. Also, if you just want to see more polish and consistency, let me know and I can refactor / rebase this as needed.

Thanks as always!
",toddtarsi,2016-07-19 16:06:05
1290,2016-07-18 15:34:27,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-07-19 16:06:05
1290,2016-07-18 15:43:00,"Thanks for the PR. We're open to considering this, but can you provide more detail as to why this is needed and how it would be used? It would be helpful to have a link to examples or docs of how `isomorphic-relay` is forced to do serial fetching w/o this.
",josephsavona,2016-07-19 16:06:05
1290,2016-07-18 15:48:05,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-07-19 16:06:05
1290,2016-07-18 15:52:21,"Absolutely, thank you for the prompt response:

This issue is closed in isomorphic-relay-router, but a quick read will help explain the issue:

https://github.com/denvned/isomorphic-relay-router/issues/13

By exposing this code in relay, and then adding an extra argument for overrides to the prepareData operation in isomorphic-relay-router and isomorphic-relay, we could pass through cookie data to the sendQueries call that these wrap without the overhead of the solution above.
",toddtarsi,2016-07-19 16:06:05
1290,2016-07-18 15:58:17,"Ha, on second thought, that issue tracker rambles:
TLDR: Since node-fetch proxies requests, and there isn't a one off way to override these, serverside rendering hits a challenge where it needs to override this using injectNetworkLayer. Since injectNetworkLayer is a global, the only current solution is to guard from async attack vectors by converting the stack to run sequentially.
By allowing for an override to request details in the sendQueries call, it gives us a method to customize each request batch without injecting a new global network layer each time on the server.
",toddtarsi,2016-07-19 16:06:05
1290,2016-07-19 14:13:10,"Hey all, after talking with @robrichard, it sounds like my use case was resolved when Relay.environment was able to be used non-globally.
https://github.com/denvned/isomorphic-relay/pull/43
Thanks for taking the time to look this over, and if you'd like I can close this pull request now.
My use cases are resolved I believe.
",toddtarsi,2016-07-19 16:06:05
1290,2016-07-19 16:06:05,"@toddtarsi Great, I really thought we had already resolved that, glad Relay.Environment is working as intended :-). Thanks for the PR and for following up!
",josephsavona,2016-07-19 16:06:05
1290,2016-07-19 16:27:27,"Absolutely, thanks for the quick responses from everyone. 😄 
",toddtarsi,2016-07-19 16:06:05
1289,2016-07-18 08:48:34,"This update to reflect a more consistent code
between the website and the `relay-treasurehunt` example.
",fadils,2016-07-27 04:16:29
1289,2016-07-18 08:48:58,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-07-27 04:16:29
1289,2016-07-18 09:08:37,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-07-27 04:16:29
1289,2016-07-18 14:59:26,"Thanks!
",wincent,2016-07-27 04:16:29
1289,2016-07-18 14:59:31,"@facebook-github-bot shipit
",wincent,2016-07-27 04:16:29
1289,2016-07-18 15:00:21,"I cannot do that @wincent, because @fadils does not have an active CLA on file.
",ghost,2016-07-27 04:16:29
1289,2016-07-27 00:29:23,"@facebook-github-bot shipit
",sampepose,2016-07-27 04:16:29
1289,2016-07-27 00:31:21,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/536004673251149/int_phab) to review internal test results.
",ghost,2016-07-27 04:16:29
1288,2016-07-16 03:56:18,"Tested on:
- Chrome Version 51.0.2704.103 (64-bit)

Worked fine on Firefox, though.

Steps to reproduce:
1. Go to:
   https://facebook.github.io/relay/
2. Click to any link such as [Docs](https://facebook.github.io/relay/docs/getting-started.html#content), or [Support](https://facebook.github.io/relay/support.html), or any other link.
3. Click `Back` in your Chrome browser
4. While the description is saying about Tea example, the playground instead is showing a HelloWorld example.

![screen shot 2016-07-16 at 10 45 23 am](https://cloud.githubusercontent.com/assets/6204776/16892605/74e1e79c-4b42-11e6-8aa0-4bbc28dfcf81.png)

Similar thing happens to Simple Parameterization and Simple Mutation sections.
![screen shot 2016-07-16 at 10 48 46 am](https://cloud.githubusercontent.com/assets/6204776/16892612/f236bb82-4b42-11e6-815e-68fc8201acee.png)
![screen shot 2016-07-16 at 10 48 59 am](https://cloud.githubusercontent.com/assets/6204776/16892613/f239a8e2-4b42-11e6-8fcb-da9f97f0b800.png)
",fadils,2016-09-02 23:59:37
1288,2016-09-02 23:59:37,"Going to close this out because we will be rebuilding the website/playground experience for the release of [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable). 

Thanks for the report @fadils, and sorry that we never got to this!
",wincent,2016-09-02 23:59:37
1287,2016-07-15 23:44:13,,wincent,2016-07-16 00:02:13
1287,2016-07-15 23:44:20,"@facebook-github-bot import
",wincent,2016-07-16 00:02:13
1287,2016-07-15 23:44:27,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/707258356081679/int_phab) to review internal test results.
",ghost,2016-07-16 00:02:13
1286,2016-07-15 20:46:22,,kassens,2016-07-15 21:16:38
1286,2016-07-15 20:52:16,"@facebook-github-bot shipit
",kassens,2016-07-15 21:16:38
1286,2016-07-15 20:52:29,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/511266869071376/int_phab) to review internal test results.
",ghost,2016-07-15 21:16:38
1285,2016-07-15 18:36:37,"Most fixes using `eslint --fix` and one manual line break.

Inspired by the upgrade on the root directory by @zpao:
https://github.com/facebook/relay/commit/cc04adef211017656e77ed765744f0b7b647b70d
",kassens,2016-07-15 22:31:37
1285,2016-07-15 18:53:10,"@facebook-github-bot import
",kassens,2016-07-15 22:31:37
1285,2016-07-15 18:53:14,"You can probably just remove the `scripts/` entry in the root `.eslintignore` file and then remove all eslint related things from this subpackage. Then you don't have to duplicate anything and have eslint & co installed twice
",zpao,2016-07-15 22:31:37
1285,2016-07-15 18:53:21,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1700373373560946/int_phab) to review.
",ghost,2016-07-15 22:31:37
1284,2016-07-15 03:49:20,,kassens,2016-07-15 18:16:37
1284,2016-07-15 03:49:42,"@facebook-github-bot import
",kassens,2016-07-15 18:16:37
1284,2016-07-15 03:49:52,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/107352216369946/int_phab) to review.
",ghost,2016-07-15 18:16:37
1284,2016-07-15 03:52:13,"It's actually 13.2. :P
",cpojer,2016-07-15 18:16:37
1284,2016-07-15 03:55:48,"Fixed
",kassens,2016-07-15 18:16:37
1283,2016-07-15 03:37:58,,kassens,2016-07-15 18:31:55
1283,2016-07-15 03:38:28,"@facebook-github-bot import
",kassens,2016-07-15 18:31:55
1283,2016-07-15 03:39:20,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1654746394846914/int_phab) to review.
",ghost,2016-07-15 18:31:55
1282,2016-07-15 00:42:08,"I looked through the documentation and it isn't clear to me-- how do you add a real database to the server side, such as ReThinkDB?
",GeoffreyPlitt,2016-07-16 18:55:35
1282,2016-07-16 15:40:15,"@GeoffreyPlitt what technology at the backend do you use? 
",GrigoryPtashko,2016-07-16 18:55:35
1282,2016-07-16 18:13:40,"NodeJS
",GeoffreyPlitt,2016-07-16 18:55:35
1282,2016-07-16 18:27:04,"Don't be lazy and google up the answers for, say ""nodejs graphql sql backend"" and ""graphql schema resolve method"".  These two have pretty much info and are actually what you are looking for.  There's no silver bullet just read all the docs and examples over and over again. 
",GrigoryPtashko,2016-07-16 18:55:35
1282,2016-07-16 18:55:35,"Thanks for your question. We're trying to keep GitHub issues focused on bugs and enhancements to keep signal high for contributors. I'd recommend asking your question on [Stack Overflow](http://stackoverflow.com/questions/tagged/relayjs) and tagging it with '#relayjs'. 

As others have mentioned, there are lots of great resources online that answer your question. A few suggestions:
- @steveluscher's [Zero to GraphQL in 30 minutes talk](https://www.youtube.com/watch?v=UBGzsb2UkeY) is a must-watch.
- There's also an accompanying [zero-to-graph repo](https://github.com/steveluscher/zero-to-graphql).
- And there's an overview of lots of tools at [awesome-graphql](https://github.com/chentsulin/awesome-graphql).
",josephsavona,2016-07-16 18:55:35
1281,2016-07-13 10:18:57,"I'd like to implement the integration testing of my Relay containers against a running GraphQL backend server. I'm going to use Jest for this. I'd like to say that unit testing of React components works well as expected with my Jest setup.
Here's what I have in the `package.json` for the Jest:

<S_CODE_TOKEN>

Here's the `.babelrc` I'm using:

<S_CODE_TOKEN>

Here's the test itself. It must make a request to `http://localhost:10000/q' GraphQL endpoint to fetch a simple piece that represents the info about the current user ('me').

<S_CODE_TOKEN>

The problem is that the test passes. But in my opinion it **must fail** at this line inside the `render()` `expect(this.props.root.me.authorities[0].authority).toEqual('ROLE_ANONYMOUS_AAA');`. It seems like the `render()` method is not executed at all.

I'm running Jest like this

<S_CODE_TOKEN>

Does this all suppose to work at all?

Thank you.
",GrigoryPtashko,2016-07-21 16:06:58
1281,2016-07-19 18:12:19,"Hello guys!
By no means I want to disturb the Relay team with such newbie questions but is there any chance that someone takes a look at this one? It's kind of a stopper for me..
",GrigoryPtashko,2016-07-21 16:06:58
1281,2016-07-19 19:21:07,"At a quick glance nothing stands out as being obviously incorrect about the test setup; I'd expect it to fetch data. We'll need more information to help debug. Is render called? Is your network layer called (does it even make the HTTP request?). I would try putting breakpoints/log statements in [RelayRenderer](https://github.com/facebook/relay/blob/master/src/container/RelayRenderer.js#L150) to make sure that it's even executing. It sounds like something is going weird and a component is mocked by Jest even though you don't expect it to be.
",josephsavona,2016-07-21 16:06:58
1281,2016-07-19 21:50:21,"I found out that there was an exception during the fetching (sorry, I'm kind of new to the node debugging I had to do this first..):

<S_CODE_TOKEN>

It's this line in the [RelayQueryRequest](https://github.com/facebook/relay/blob/master/src/network/RelayQueryRequest.js#L80) in the source code.
Here I am not sure to which this is related - to Relay or to Jest?
",GrigoryPtashko,2016-07-21 16:06:58
1281,2016-07-20 01:16:07,"Hmm. `printRelayQuery` is a module that is shimmed to use either `printRelayOSSQuery` (in open source) or an internal version at Facebook. I suspect that the require is failing because Jest doesn't think that `printRelayQuery` is a module and so it is getting transformed differently.

@cpojer any ideas?
",josephsavona,2016-07-21 16:06:58
1281,2016-07-20 01:42:29,"The ""moduleNameMapper"" config object can be used to map from one module to another, if that is the case.
",cpojer,2016-07-21 16:06:58
1281,2016-07-21 12:04:38,"@josephsavona 

After adding the `fbjs` preset to babel I've managed to get `printedQuery` to work but
there is one ""but""..
Long story short: I've got a strange behaviour of Jest when it is lanuched
with and without test path reg ex. My setup is very simple: the `__tests__`
folder contains two tests - `SignIn-test.js` and `Me-test.js` (in
`SignIn-test.js` I changed `describe` to `xdescribe`).

Here's the output when I run Jest without test path reg ex:

<S_CODE_TOKEN>

As you see the `printQuery` is executed as expected.

And here's the output when I specify the test path reg ex to execute only the `Me-test.js`:

<S_CODE_TOKEN>

See? Why? What changes inside Jest that causes the exception?

It is this line in transpiled code (I've added the `console.log`s):

<S_CODE_TOKEN>

To make things worse I can tell you that the same behaviour as in the second case I see when
I launch Jest with the `-i` (`--runInBand`) switch.

PS I also removed `babel-jest` from dev dependencies and specified my own preprocessor:

<S_CODE_TOKEN>

Any ideas?
",GrigoryPtashko,2016-07-21 16:06:58
1281,2016-07-21 16:06:57,"That's really strange. The fact that it works on one of the tests seems important. Is there _anything_ different about the two tests that could be causing Jest to behave differently? 

I'm going to close this since it doesn't appear to be a Relay issue per-se, but feel free to continue discussion here. You may also want to file an issue on http://github.com/facebook/jest so that more Jests experts can see it and help out.
",josephsavona,2016-07-21 16:06:58
1281,2016-07-21 17:09:34,"I don't change any test between these two runs. I even specify the `--no-cache` flag just to be sure that Jest doesn't take anything from the cache.

The first test `SignIn-test.js` is a simple React component test. The other one - `Me-test.js` - I showed in the very first post. Since I started this topic nothing changed. I'll show the second test just for the sake of fullness of the info from my side.

<S_CODE_TOKEN>

Here `SignIn` is the stateless React component. So, answering your question I don't by myself change _anything_ between the test runs. It's really a mystery to me too.

PS I'll file an issue to the Jest repo.
",GrigoryPtashko,2016-07-21 16:06:58
1281,2016-08-05 15:51:52,"@josephsavona I finally got some results but there're not solving the issue tho. I'm just asking for an advice. Long story short is that I could not debug my test because jest has some kind of issue when  the OSS Relay is built with `inlineRequires` set to `true`. But thanks to this topic [jest#1321](https://github.com/facebook/relay/issues/1321) (listening to all of the updates to Relay's repo turned out to be a great source of information) I found out that I can build Relay with different options. I've re-built it with `inlineRequires` set to `false` and was able to run a single test `Me-test.js` with jest.

And here's what I've got at the moment. Relay makes the query!! I can see it in my backend server log. But. The `render()` is never get called. And here's why. In this `Me-test.js` in the `Relay.Renderer` in the `render` callback the `done` arg is always `false` and `props` is always `null`. I see that Relay makes exactly 3 tries and then quits. So my `AppContainer` is never get created and thus its `render()` method is never get called.

Can you give my some further direction on how can I debug this?

Thanks!
",GrigoryPtashko,2016-07-21 16:06:58
1281,2016-10-29 15:57:13,"@GrigoryPtashko have u some progress on this?

could u share a repo or a gist with ur current solution?
",sibelius,2016-07-21 16:06:58
1281,2016-11-07 12:51:05,"@sibelius @lucasbento sorry for keeping silence. My macbook was in the service. I'm glad I'm not alone in this question.. I guess you've already guessed that I have a working solution for Jest 14 but not for Jest >= 15. Here's the issue with the repro and the example for Jest 14 https://github.com/facebook/jest/issues/1898. Guys from the Jest team do not answer it unfortunately. 
",GrigoryPtashko,2016-07-21 16:06:58
1281,2016-11-07 13:02:46,"@GrigoryPtashko u should write a blog post about it
",sibelius,2016-07-21 16:06:58
1280,2016-07-12 22:57:03,"I just shipped `eslint-config-fbjs` which much more closely matches the lint config we have internally, uses a few plugins, and has the globals we need for Flow. This also takes care of the really large list of Flow-related unused/undef var warnings. With this you're back down to 0 warnings.
",zpao,2016-07-14 20:16:33
1280,2016-07-14 17:24:40,"awesomesauce

@facebook-github-bot import
",kassens,2016-07-14 20:16:33
1280,2016-07-14 17:25:25,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1115454901858536/int_phab) to review.
",ghost,2016-07-14 20:16:33
1279,2016-07-12 13:34:11,"@steveluscher should we go ahead and depreciate `RelayRoute` here too? 
",washt,2016-08-04 23:16:34
1279,2016-07-18 15:05:41,"Thanks for the PR @washt. Just trying to understand the intent here. Do you have some context that you can link to here for why you want to do this? `RelayQueryConfig` itself doesn't really do anything at all, so I am not sure of the value of exposing it. The rest of Relay really only cares about the interface, `RelayQueryConfigInterface`.
",wincent,2016-08-04 23:16:34
1279,2016-07-18 15:06:50,"...aaaand I found it ([here](https://github.com/facebook/relay/pull/1254#discussion_r69777267)).
",wincent,2016-08-04 23:16:34
1279,2016-08-04 22:16:11,"@facebook-github-bot shipit
",josephsavona,2016-08-04 23:16:34
1279,2016-08-04 22:16:45,"Thanks for importing.If you are an FB employee go to [Phabricator](https://phabricator.intern.facebook.com/D3672274) to review internal test results.
",ghost,2016-08-04 23:16:34
1278,2016-07-12 12:26:29,"At first it was quite difficult for me to understand the first 2 examples in the website homepage because they basically looked the same. 

I then realized it was because they both seemed to have 20 lines of code. The frames did not looke like they were scrollable. 

Before 
<img width=""982"" alt=""screen shot 2016-07-12 at 14 21 03"" src=""https://cloud.githubusercontent.com/assets/271047/16766771/432c3602-483c-11e6-9d99-0d84dd6b3a7f.png"">

After
<img width=""1004"" alt=""screen shot 2016-07-12 at 14 20 54"" src=""https://cloud.githubusercontent.com/assets/271047/16766776/4bb93658-483c-11e6-939f-8814ad942f3d.png"">

I've changed the height into 426. There might be a better magic number to suggest that line 20 is not the last line of the gist. 

I am pretty sure this would have helped me a lot when I first had a look at Relay website. 
",rpechayr,2016-07-15 16:46:39
1278,2016-07-12 12:28:09,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-07-15 16:46:39
1278,2016-07-14 18:44:01,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-07-15 16:46:39
1278,2016-07-15 04:41:27,"Thanks!

@facebook-github-bot shipit
",kassens,2016-07-15 16:46:39
1278,2016-07-15 04:42:22,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1038568506239420/int_phab) to review.
",ghost,2016-07-15 16:46:39
1277,2016-07-11 22:38:38,"Older versions of flow crashed when an `[include]`d directory didn't exist. This was fixed in flow and should allow us converge the `.flowconfig` again with the internal version that deals with a different directory structure.
",kassens,2016-07-12 00:46:25
1277,2016-07-11 22:38:42,"@facebook-github-bot import
",kassens,2016-07-12 00:46:25
1277,2016-07-11 22:39:00,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/847050435427844/int_phab) to review.
",ghost,2016-07-12 00:46:25
1276,2016-07-11 19:44:10,"This adds to the schema to test:
- Non nullable array of non nullable enum
- Array of enum
",kassens,2016-07-11 23:01:31
1276,2016-07-11 20:03:40,"@facebook-github-bot import
",kassens,2016-07-11 23:01:31
1276,2016-07-11 20:04:54,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/156136258128987/int_phab) to review.
",ghost,2016-07-11 23:01:31
1275,2016-07-11 19:28:28,,steveluscher,2016-07-11 20:31:37
1275,2016-07-11 19:28:55,"@facebook-github-bot import
",steveluscher,2016-07-11 20:31:37
1275,2016-07-11 19:29:29,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1194037020617868/int_phab) to review.
",ghost,2016-07-11 20:31:37
1274,2016-07-11 19:24:59,,steveluscher,2016-07-11 20:31:37
1274,2016-07-11 19:25:11,"@facebook-github-bot import
",steveluscher,2016-07-11 20:31:37
1274,2016-07-11 19:25:29,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/595373557307632/int_phab) to review.
",ghost,2016-07-11 20:31:37
1273,2016-07-11 18:29:37,,steveluscher,2016-07-11 20:01:27
1273,2016-07-11 18:29:41,"@facebook-github-bot shipit
",steveluscher,2016-07-11 20:01:27
1273,2016-07-11 18:29:57,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/265779213797523/int_phab) to review.
",ghost,2016-07-11 20:01:27
1272,2016-07-11 18:24:28,,steveluscher,2016-07-11 19:46:20
1272,2016-07-11 18:24:32,"@facebook-github-bot shipit
",steveluscher,2016-07-11 19:46:20
1272,2016-07-11 18:25:06,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/645540685597645/int_phab) to review.
",ghost,2016-07-11 19:46:20
1271,2016-07-11 00:56:43,"I have an array of movies that are ordered by user rating. When the user changes the rating of one movie  the ordering of the list is also changed. I created an optimistic update which re-orders the list appropriately but even tho Relay shows the optimistic response is in the correct order, in componentWillReceiveProps the order of the array remains the same even tho the rating ( 3 stars updated to 5 stars) has correctly changed. When the server replies back with the updated array, I see my listview refresh in the correct order. 

How do I make sure that componentWillReceiveProps gets the ordered array that I generated in my optimistic update?
",rgovindji,2016-07-21 02:47:31
1271,2016-07-11 07:12:18,"@rgovindji Can you share code of the mutation? Are you returning correct id of object that contains the list in optimistic update, so it knows which list to update? Wrong shape or missing id in optimistic update are my usual suspects for such behavior :-).
",jardakotesovec,2016-07-21 02:47:31
1271,2016-07-12 00:53:17,"Here's what I'm doing. The only ID I see on the array is a field named **dataID** is that what I'm supposed to add to the optimistic update?

<S_CODE_TOKEN>
",rgovindji,2016-07-21 02:47:31
1271,2016-07-12 07:41:57,"@rgovindji I meant whole mutation, that could give more clues. I don't see any obvious issue with this..  
",jardakotesovec,2016-07-21 02:47:31
1271,2016-07-12 07:46:21,"On the other hand I have not used optimistic updates with connections, just lists. So wondering if its also important to copy edge cursors so it gets applied in store.
",jardakotesovec,2016-07-21 02:47:31
1271,2016-07-13 00:34:43,"@jardakotesovec Here's the whole mutation. I'll try adding the cursor for each edge in the response to see if that works.

<S_CODE_TOKEN>
",rgovindji,2016-07-21 02:47:31
1271,2016-07-21 01:24:09,"I'd expect this to work, so the likely issue here is that your optimistic response isn't _quite_ right. Relay applies the optimistic response in a ""best-effort"" kind of way which means it basically never throws any errors to help figure out why it's not doing what you expect it to (which can be frustrating, I'm sure).

In this case, I suspect that the lack of cursors on your edge objects fools Relay's client-side type inference into treating this response as some kind of unknown list, and therefore doesn't update your connection like you hope it will. Adding cursors is probably the best bet, let us know if that doesn't help.

In general my advice for applying an optimistic response is to copy the ""real"" server response and then gradually delete fields from it and test to make sure it still updates your UI like you want it to. Once you remove enough fields to get an object you are confident you can generate client-side, write the code to do that.
",NevilleS,2016-07-21 02:47:31
1271,2016-07-21 02:47:31,"Adding cursors to the edges didn't work for me but I removed optimistic updates from my code for the moment. I like your suggestion of copying the real response and trimming the data down, I'll give that a shot when I have time. 

I'm going to close the issue for now until I'm certain it's not a fault in my code.
",rgovindji,2016-07-21 02:47:31
1270,2016-07-10 12:38:54,"Im about to become crazy with this error, 

I calling a mutation using the Mutator configuration as FIELDS_CHANGE, to update the name of the current viewer, the mutations on the server seems to be updating the data just, but I keep getting this response and I have no idea of what else to do:

<S_CODE_TOKEN>
",CoericK,2016-07-10 23:18:48
1270,2016-07-10 23:18:48,"The problem was that `mutateAndGetPayload` was receiving `args`, besides the arguments that you specifies in inputFields, it add one more field`clientMutationId`, i was passing args to my custom function and it was cleaning up the fields that doesnt match with my model, in this case `clientMutationId`, so  the solution was to make a copy from args like this, `let _args = Object.assign({}, args)`, it was passing the args argument by reference and then when `outputFields` was called the field `clientMutationId` didnt exists

@josephsavona maybe u want to consider this for the future.
",CoericK,2016-07-10 23:18:48
1269,2016-07-08 20:59:20,"I'm receiving the following error after a save comment mutation

`GraphQLRange cannot find a segment that has the cursor: MTQ2NzkxNTE5NA==`

this only happens after I ask for more comments before adding a new one

this is my createContainer code:

<S_CODE_TOKEN>

this is my save comment mutation

<S_CODE_TOKEN>

this is the generated graphql query, it works if I try on graphql

<S_CODE_TOKEN>
",sibelius,2016-07-28 15:54:23
1269,2016-07-11 22:34:18,"Disclaimer: I’m not a Relay expert, but I’ve done my fair share of Relay debugging :wink:. These are some tricks that will hopefully either help identify the error or give us more information.
1. Since the query works in GraphiQL, try removing the `getOptimisticResponse` function and see if that helps. You may not be including enough information in the optimistic response.
2. Maybe try removing `orderby(createdAt)` from `rangeBehaviors`. In both scenarios you’re `append`ing.

See if that helps. It would also be very helpful to see what your server returns for the generated query. It may be possible that you’re not implementing the Relay spec correctly (can’t be sure without seeing the result).

I think we’ll need more information though to continue debugging.
",calebmer,2016-07-28 15:54:23
1269,2016-07-11 23:57:11,"Just stumbling around in the dark here, but in addition to “2” above can you try to replace `rangeBehaviors` with a function that always returns `GraphQLMutatorConstants.RANGE_OPERATIONS.APPEND`?

<S_CODE_TOKEN>
",steveluscher,2016-07-28 15:54:23
1269,2016-07-12 18:11:28,"@sibelius Have any of these suggestions helped? We can help debug more effectively if you're able to provide a sample mutation response. 
",josephsavona,2016-07-28 15:54:23
1269,2016-07-12 18:31:56,"this is the response:

<S_CODE_TOKEN>
",sibelius,2016-07-28 15:54:23
1269,2016-07-12 21:27:13,"@sibelius sorry, but could you include the query with the response :blush:. There are some subtle differences in the query you initially posted and the response, so Relay has likely created a different query (this maybe intended).

Also, were some of the ideas mentioned in this thread effective?
",calebmer,2016-07-28 15:54:23
1269,2016-07-12 21:47:13,"Neither solution worked.

What we did was to save the comment and after that query N + 1 comments to keep the already loaded comments

It is a hacky solution but it works

My guess is a problem with the cursor implementation
",sibelius,2016-07-28 15:54:23
1269,2016-07-12 22:57:51,"As @calebmer mentioned, the query and response don't quite match up so it's a bit hard to debug. However, the overall shape of the mutation seems correct - it fetches something like `comments(first: 10)` and then `comment(first: 10, after: <cursor>)`. I would try double-checking the cursors:
- Open the app and fetch some data w/o making mutations. Keep track of all the cursors for the comments you fetch (use RelayNetworkDebug or even just display them onscreen).
- Initiate a mutation and check that the cursors make sense. Since the mutation only adds one edge we would expect most of the cursors in the mutation response to match up with those that were originally fetched.
",josephsavona,2016-07-28 15:54:23
1269,2016-07-15 03:19:08,"I am facing this exact problem.

Update: 
The problem was with Edge Name. I was able to solve it by having proper mutation on server and correct fat query on client.
",nikhildaga,2016-07-28 15:54:23
1269,2016-07-15 03:41:08,"@nikhildaga can you provide a bit more detail about what was wrong, and how you fixed it? This might help @sibelius find the problem.
",josephsavona,2016-07-28 15:54:23
1269,2016-07-15 03:57:55,"@josephsavona : Sure.

@sibelius :  
Earlier, I didn't have edge field in my fat query and on server mutation. I added those. From your code, it looks like you already have them.

Things to note:
in fat query, I use @relay(pattern: true)
`fragment on saveCommentPayload @relay(pattern: true) {
`
And rangeBeviors in getConfigs is 
`rangeBehaviors: () => 'prepend',
`
",nikhildaga,2016-07-28 15:54:23
1269,2016-07-28 15:54:23,"Thanks again for filing an issue. Without more information it's very hard to debug this - the query and response don't match up, so we can't know for sure whether the issue lies with the cursor values themselves or the query. Generally speaking the query looks correct. 

I would recommend the following:
- Double check your schema to ensure that you are creating cursor values consistently. If the cursor for an edge were to change between the initial fetch and the mutation request, that could cause this error. 
- If that doesn't work and the behavior is causing problems, you may want to use `forceFetch` instead of `setVariables` when you load more comments. If it would be too inefficient to load all comments, one option would be to to manually paginate (e.g. request `pageInfo.endCursor` and use that as the input to `after` and use `forceFetch`).

I'm going to close this issue due to inactivity, but please feel free to comment with more information and we'd be happy to reopen and help debug.
",josephsavona,2016-07-28 15:54:23
1268,2016-07-07 21:21:48,"Fix the order of the parameters in the function so that it actually matches the implementation.
",lukaswelte,2016-07-07 21:23:19
1268,2016-07-07 21:23:19,"I actually read the doc wrong. Have not seen the object descructuring
",lukaswelte,2016-07-07 21:23:19
1267,2016-07-07 19:57:06,"We are facing a problem with Relay/GraphQL/React in production. When testing in master everything works fine, however in production we get the following error in the console which causes everything related to Relay/GraphQL/React not to be working at all:

<S_CODE_TOKEN>

We believe is something related to the build of the application when it's getting deployed, however we have no idea where to start looking at.

This is my `package.json` in case it helps:

<S_CODE_TOKEN>
",seque1990,2016-07-07 23:46:51
1267,2016-07-07 20:44:57,"Hmm. It seems like you're missing a polyfill for ES6 `Map`. Maybe try using the babel polyfill?
",josephsavona,2016-07-07 23:46:51
1267,2016-07-07 23:46:49,"Just for the record, I needed to update Node.js to the latest version in order for everything to work again. Thanks.
",seque1990,2016-07-07 23:46:51
1266,2016-07-07 10:45:38,"if you have an object `{ id: ""A"", subObject { id: ""A_sub"", name: ""foo"" } }` and later, the server data the subObject id happen to change (e.g. another user changed it), like to `{ id: ""A"", subObject { id: ""B_sub"", name: ""bar"" } }`.
Then, in some cases, the component won't ask the new fields, Relay thinks the name field was already loaded and only ask pieces it missed from the previous dataset. it is not handling the fact subObject.id has changed, and then you end up with just  `{ id: ""A"", subObject { id: ""B_sub"" } }` in props (I guess because B_sub is not in Relay cache) and this even though you asked for subObject.name in the fragment

so you ends up receive half of the data you asked in your fragment, which should be an invariant, right? (the propTypes validation generated by Relay itself are console.error-ing)

Do you want me to try to provide an app reproducing this or is my explanation clear enough?
Thanks
",gre,2016-07-09 20:15:55
1266,2016-07-07 12:08:27,"Relay fundamentally assumes your **nodes never change** unless you do so explicitly via a mutation or a forced fetch. That means that this is, more or less, expected behaviour (there's no special case on the `id` field that causes Relay to expire that node from the store, for example).

If the child node is changing due to some user action, you should capture this via a mutation so Relay knows about it and can refetch accordingly. For your schema, some kind of `FIELDS_CHANGE` mutation using the parent ID of ""A"" and a fat query like `{ parent { subObject } }` would suffice.
",NevilleS,2016-07-09 20:15:55
1266,2016-07-07 12:16:43,"I'm afraid mutation can't solve everything.
What if someone else have done a mutation that makes these nodes changes between the 2 steps?
That means all container should assume the data eventually can be broken?

Another use-case I have is, scheduling some changes in the data (e.g. consider the usecase ""schedule an article submission in X minutes"", I still need a way to refresh data not from a mutation)

If what you said is true, it means Relay is not able to have data shared between users?
",gre,2016-07-09 20:15:55
1266,2016-07-07 12:25:19,"Mutations that occur without your knowledge have to be handled via a `forceFetch`. If you believe you fundamentally can't trust the data for a given container, you should refetch it every time using either the `forceFetch` method on the `relay` prop in your container or on the renderer parent for the container.
",NevilleS,2016-07-09 20:15:55
1266,2016-07-07 12:28:13,"ok. But even using forceFetch, there is still the initial bug I'm talking about. My component gets render with a partial tree, not complete like the fragment requested.

The workaround I found is to use the same fragment everywhere, which is not the Relay idea to put the minimal fragment.
",gre,2016-07-09 20:15:55
1266,2016-07-07 12:33:57,"I must be misunderstanding you then. It makes sense that Relay wouldn't attempt to refetch a field it's already gotten, but it sounds like you are describing something different.

> The workaround I found is to use the same fragment everywhere

Not sure what you mean so an example would help
",NevilleS,2016-07-09 20:15:55
1266,2016-07-07 12:37:52,"It's tricky to explain, so I better try to reproduce the bug via an example. It might take some time to build a full example but I'll try to come back with one ASAP :)

basically it's a workaround I found for this exact bug. If I use the same fragment, Relay don't need to fetch the new missing fields, so it used what he thinks to be the latest one (what was cached in subObject of id:""A"") . But as soon as there are missing fields, it will fetch **only** these missing fields, but if subObject now have different id, he won't know what are the other fields value. So it doesn't merge the missing fields with the rest, like it would normally.
",gre,2016-07-09 20:15:55
1266,2016-07-07 12:45:08,"I could definitely see a scenario where you have something like:

<S_CODE_TOKEN>

During regular operation you decide that this container is rendering subobject with `id = ""A_sub""`. The container gets it's data by looking up the node `A_sub` from the store and rendering those fields. Later, if the `id` changes unexpectedly to `B_sub` without using a `forceFetch` or a mutation, I'm not sure how the container would behave. Part of me would expect it to continue rendering the `A_sub` data so you'd see `this.props.subobject.id === ""A_sub""`, but if the container did get updated to start looking up `B_sub`, it's entirely possible that you'd see `this.props.subobject.id === ""B_sub""` and `this.props.subobject.name` as `null`. In other words, I'm not sure what the behaviour of a container is when the node data changes unexpectedly, but I _can_ say that your best bet is to _not_ behave unexpectedly 😄 
",NevilleS,2016-07-09 20:15:55
1266,2016-07-09 20:15:55,"FYI, I've created a full example just to try to reproduce what I thought was the bug, with what I initially described. It's here: https://github.com/gre/relay-examples/tree/master/cars

But I can't reproduce the bug I experienced at work...
So, i'll close this issue and if someone find something then we can discuss. But maybe it's one of this hard-to-figure-out backend bug on our side.

thanks for your help @NevilleS 
",gre,2016-07-09 20:15:55
1265,2016-07-07 08:28:17,"Hello.

One more try with the same issue as here https://github.com/facebook/relay/issues/1243. But this time I made it reproducible on the Relay playground.

The idea is to fetch data recursively when a user hovers over a parent category.

I've made two gists. One with the schema and the second with the app. Just copy and paste them into the playground, hover over the catName2 and you'll get the error.

The schema https://gist.github.com/GrigoryPtashko/d110b72076a4611657d5364109ba5905.

The app https://gist.github.com/GrigoryPtashko/c27d6421f1f02c78dc054b2874b4ac87.

The problem is when the inner fragment is included and data-fetched the Relay ""rejects"" the data that comes back from the backend.

When I wrote the first issue, I thought that this is some issue with my graphql backend (it is not in JS). But now I made it reproducible without even the backend.

Seems to me this is none the less a bug.

Thanks.
",GrigoryPtashko,2016-07-11 18:17:47
1265,2016-07-11 18:17:47,"I have an answer for you, but would prefer to continue the discussion on Stack Overflow where the answer can live on without being closed like a GitHub issue. Can you open a question, and then ping me here with the link?

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2016-07-11 18:17:47
1265,2016-07-11 21:23:24,"@steveluscher yes, sure. Here is the question https://stackoverflow.com/questions/38316444/recursive-fetching-of-a-connection-is-rejected-by-relay-reproducible-on-the-rel
",GrigoryPtashko,2016-07-11 18:17:47
1264,2016-07-07 05:42:54,"I am running into some issues writing a Relay Mutation on a nested connection. Here is the type structure:

<S_CODE_TOKEN>

In the getConfigs I have both the parentName and parentID pointing to the ""viewer"", however the connectionName ""events"" does not exist on the viewer it exists on the ""entity"" type.

As you will see in the code snippet below I am also unsure how to use variables in the getFatQuery to fetch the mutated data with an entity ID.

getConfigs and getFatQuery:

<S_CODE_TOKEN>

I posted this to [stackoverflow](http://stackoverflow.com/questions/38219098/how-do-you-define-parentname-parentid-and-connectionname-in-getconfigs-for-a-n) yesterday but there doesn't seem like much activity around relay over there. 
",thisbejim,2016-07-11 05:39:58
1264,2016-07-11 05:39:58,"For anyone in the future getting snagged on this you don't have to worry about passing in the id again or dealing with nested queries/fields. Relay will just find and update the appropriate record on the client. Issue #1046 was helpful for figuring this out, especially the comments from freiksenet.

In the example above - Instead of going through the `viewer` we just go straight to the `entity`. 

outputFields:

<S_CODE_TOKEN>

getConfigs and getFatQuery:

<S_CODE_TOKEN>

Note: Using `@relay(pattern: true)` will make sure you don't run into issues when you don't pass in arguments for connection queries and will fall back to your last query of this type.
",thisbejim,2016-07-11 05:39:58
1263,2016-07-06 22:33:59,,wincent,2016-07-07 06:03:09
1263,2016-07-06 22:34:05,"@facebook-github-bot import
",wincent,2016-07-07 06:03:09
1263,2016-07-06 22:55:45,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1051236511590625/int_phab) to review.
",ghost,2016-07-07 06:03:09
1262,2016-07-06 16:01:06,"We ran into this today while setting up a `RANGE_DELETE` mutation. As of 71e2350ccb2bd3c8ce145d270788c9042b5fbff5, mutation configs are validated by Relay, which requires the user specify all the fields on the `RANGE_DELETE` config. However, the example in the docs doesn't include it:

<S_CODE_TOKEN>

(from https://facebook.github.io/relay/docs/guides-mutations.html#range-delete-example)

One of two things is wrong here:
1. The docs are wrong, and should be updated to avoid confusing new users
2. The validation is wrong, and `pathToConnection` should not be `REQUIRED` so this example is fine

I found myself a bit bamboozled trying to re-read the docs here, so it might actually be both (1) and (2) 😄 
",NevilleS,2016-08-30 00:31:58
1262,2016-07-06 16:07:16,"I'm going to go ahead and cc @wincent here because in his commit message for 71e2350 it looked like he was a little unsure about whether everything should be `REQUIRED` 👍 
",NevilleS,2016-08-30 00:31:58
1262,2016-07-08 15:14:18,"@NevilleS, when I prepared that commit I basically went through and analyzed all the code paths and came to the conclusion that everything was required except for `parentName`. So, I think the examples in the docs are most likely incomplete and should be updated. It's complicated, however, so there is a chance that I got it wrong too.
",wincent,2016-08-30 00:31:58
1262,2016-07-08 16:05:56,"Ah OK. For `RANGE_ADD` it seems like specifying both `pathToConnection` and `connectionName` is duplicative but I haven't analyzed the code paths so I'll defer to you here.

It's likely just a docs issue. If I was having a less crazy week I'd submit a PR, sorry 😢 
",NevilleS,2016-08-30 00:31:58
1262,2016-08-20 20:57:51,"Hey guys I stumbled into this as well when reading the documentation and using the latest `relay` version. Looking at the code it does seem that the field is required. In any case, the example should reflect the current status and since the validator will fail if you don't send the `pathToConnection` field I put up a PR that adds the field to the example.

Let me know if that sounds good.
",josercruz01,2016-08-30 00:31:58
1261,2016-07-06 12:20:40,"Is there a reason why `RelayContainer` only handles non-query props that are scalar but not objects?

Due to `isScalarAndEqual` here in [RelayContainerComparators.js](https://github.com/facebook/relay/blob/master/src/container/RelayContainerComparators.js#L82), the `===` check only applies for scalar props. If any non-query prop is an object `shouldComponentUpdate` will always return true even if the object's reference hasn't changed.
",nthtran,2016-07-22 07:39:04
1261,2016-07-22 06:23:23,"This makes `RelayContainer`inefficiently renders if it receives a prop that's an object. Given this example:

<S_CODE_TOKEN>

In this case `store` is an object and its reference would never change. However `Item` will always rerender just because `store` is non-scalar, even if the current and next props satisfy `shallowEqual`.

The comment [here](https://github.com/facebook/relay/blob/master/src/container/RelayContainerComparators.js#L81) says a non-query prop must be scalar and ===. Just trying to understand why it must be scalar because this makes it impossible to pass immutable objects as props to `RelayContainer` and still have efficient re-rendering.
",nthtran,2016-07-22 07:39:04
1261,2016-07-22 07:23:27,"I have also ran into this issue and vote for '===' comparing for objects, so efficient comparison can be achieved at least with immutable approach as @nthtran  suggests.
",jardakotesovec,2016-07-22 07:39:04
1261,2016-07-22 07:39:04,"This is by design. Relay is designed to work with arbitrary JavaScript code, which means that an object prop may be `===` to the previous prop yet have been modified since the previous render. The only safe thing to do in the HOC `shouldComponentUpdate` in this case is to return true if an object is encountered - otherwise it could skip a necessary update. 

However, you can achieve the desired affect! If you know that your prop objects are (or are treated as) immutable, you can still implement `shouldComponentUpdate` in the component itself to return false on triple equality. Note that the Relay provided props - fragment props plus `relay` - will be `===` unless the value has changed. 
",josephsavona,2016-07-22 07:39:04
1261,2016-07-22 07:43:16,"@nthtran As a concrete example, if you know that the `store` prop is immutable then the `Item` component can implement `shouldComponentUpdate` to return false if all props are `===`. 
",josephsavona,2016-07-22 07:39:04
1261,2016-07-22 07:47:27,"Yep that's what I've been doing. Was just under the impression that `RelayContainer` was supposed to support immutable data to make it a bit less manual in optimising components for efficient re-rendering. Thanks for your reply @josephsavona.
",nthtran,2016-07-22 07:39:04
1261,2016-07-22 08:18:32,"@josephsavona Lets say that it would do === comparison on all props including objects, not just scalar - what would be the down side?  Currently its not useful for mutable nor immutable object props.  Using === for all props would make it at least useful for immutable use case. And docs would just say it does '===' comparison instead of comparison for scalar values, suggesting you either treat structures immutably or do your own shouldComponentUpdate.

I actually think it would be more intuitive than current behavior..  I know that it can be found in docs.. but in practice I also end up reading the code to find out what 'breaks' shouldComponentUpdate in relay container as I expected shallow compare by default. Majority devs seems [to also aim](https://twitter.com/reactjs/status/736412808372314114) for shallow compares in shouldComponentUpdate in react
",jardakotesovec,2016-07-22 07:39:04
1261,2016-07-22 08:31:09,"@josephsavona Down side is that someone with mutable data would be prevented from re-renders, right? So probably until react would decide to go with this default shallow compare (if ever) it makes sense to let optimization (via shouldComponentUpdate) on user same way as react does. Ok :-).
",jardakotesovec,2016-07-22 07:39:04
1261,2016-07-22 16:05:26,"> Was just under the impression that RelayContainer was supposed to support immutable data

@nthtran I see. Yeah, Relay can't assume that props you give it are immutable, but it does guarantee that the props it provides to you can be treated as such. `RelayContainer` reuses any portion of the previous results that are deep equal to the new results [via a helper](https://github.com/facebook/relay/blob/master/src/legacy/store/GraphQLStoreQueryResolver.js#L269). The [tests](https://github.com/facebook/relay/blob/master/src/legacy/store/__tests__/recycleNodesInto-test.js#L89-L96) help to clarify the behavior a bit more.

> Down side is that someone with mutable data would be prevented from re-renders, right?

@jardakotesovec Right. Mutability is the default in JS, so the current behavior was chosen as being the least surprising overall while still allowing developers to use the standard approach to React optimization if necessary.
",josephsavona,2016-07-22 07:39:04
1260,2016-07-05 20:20:05,"Hi, I've heard stream and defer are in the works(?), but I would like to somehow use theirs features.

I'm working on a voting applications, I want that when I load a poll, the votes will be streamed after rest of the poll data has been fetched (since can there be an unlimited number of votes for a poll).

Currently I'm thinking on this:

<S_CODE_TOKEN>

Where at first `$votesInPage = 0`, and after the component has mounted, im setting it to some number, and using a `setTimeout` to paginate through the votes, until all of them are loaded.

Is this a valid solution? Any better suggestions?

Thanks!
",papigers,2016-07-05 21:20:49
1260,2016-07-05 21:20:49,"Thanks for your question! In general, fetching some number of items initially and then more in `componentDidMount` (using `setVariables`) is a solid approach. 

If you have more how-to questions, please feel free to [ask on StackOverflow](https://stackoverflow.com/questions/ask?tags=relayjs) and post a link to your question here or in a new issue. We're trying to keep the issue tracker focused on bugs and feature enhancements, and move how-to questions to Stack Overflow where others in the community can more easily find the answers. Thanks!
",josephsavona,2016-07-05 21:20:49
1259,2016-07-04 01:31:00,"I'm upgrading a React Native app, now whenever a render happens I'm seeing this in the logcat :

<S_CODE_TOKEN>

I assume the warning is related to this : https://github.com/facebook/react/pull/6933
Is anybody else seeing those ? 
",kamek-pf,2016-07-04 02:02:57
1259,2016-07-04 02:02:53,"Looks like I simply needed to move from `Relay.RootContainer` to `Relay.Renderer`. 
My bad, sorry for the noise.
",kamek-pf,2016-07-04 02:02:57
1259,2016-07-07 02:03:14,"I'm seeing this. Is RootContainer no longer supported? If it is this ticket should be re-opened.
",grydstedt,2016-07-04 02:02:57
1259,2016-07-07 02:07:02,"My understanding is that they are slowly transitioning to Relay.Renderer : 
https://facebook.github.io/relay/docs/api-reference-relay-renderer.html#content

The APIs are similar, it was quite easy to move from Relay.RootContainer to Relay.Renderer.
",kamek-pf,2016-07-04 02:02:57
1259,2016-07-07 16:35:53,"I also got bit by this. Is there any way to know about these breaking changes beforehand? Where do they get announced?
",maxcodes,2016-07-04 02:02:57
1259,2016-07-07 16:42:45,"You might want to read the release notes : https://github.com/facebook/relay/releases

This particular change was introduced in v0.8.0 :  https://github.com/facebook/relay/releases/tag/v0.8.0

This doesn't really qualify as a breaking change since it's just a warning and the old API still works.
However, I'd say Relay (along with GraphQL, React and React-Native) is one of the few tools where it's a good idea to read the changelog before upgrading because the API is still evolving.
",kamek-pf,2016-07-04 02:02:57
1259,2016-07-07 20:38:55,"Yup, this wasn't a breaking change. `RelayRootContainer` is still supported and not officially deprecated. We'll have a bug fix to avoid the warning in the next release.
",josephsavona,2016-07-04 02:02:57
1258,2016-07-03 21:07:46,"This finishes the work started in 57d1bfb181ce68ea9c45810920604e13f487bc89.
",alloy,2016-07-05 17:16:29
1258,2016-07-03 21:08:36,"As mentioned [here](https://github.com/facebook/relay/pull/1246#issuecomment-230175053), I forgot to replace these two, which were actually the places where my earlier more elaborate patches were centered around. Silly me.
",alloy,2016-07-05 17:16:29
1258,2016-07-05 16:35:50,"@facebook-github-bot shipit
",steveluscher,2016-07-05 17:16:29
1258,2016-07-05 16:36:20,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/562818490593169/int_phab) to review.
",ghost,2016-07-05 17:16:29
1257,2016-07-03 18:25:44,"Currently types are ignored and not getting passed in `callsFromGraphQL`
or `callsToGraphQL`.
This results in dangerous output from `toGraphQL`, in which all calls have
type null. This can cause problems when using non-scalar types (like
enum).
For more details see #1256.
",papigers,2016-08-13 23:23:31
1257,2016-07-03 18:27:06,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-08-13 23:23:31
1257,2016-07-03 18:35:58,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-08-13 23:23:31
1257,2016-07-03 19:33:05,"@papigers Thanks for the PR! Be sure to run the tests locally; that's what is failing in the build. Some tests look at the actual shape of the ""concrete"" query which will be different after this PR, so those tests will need to be updated. If there's a test failure that isn't as obvious, feel free to comment here and we can help.
",josephsavona,2016-08-13 23:23:31
1257,2016-07-03 19:39:36,"@josephsavona Will do, working on that right now, sorry for this noobish PR.

Next time will be better, I hope ;)
",papigers,2016-08-13 23:23:31
1257,2016-07-03 22:27:16,"Sorry for the uninformatives commits
",papigers,2016-08-13 23:23:31
1257,2016-08-04 22:20:49,"@papigers Thanks again for this PR. I commented to request some changes. Also, scanning through i don't see any tests that actually end up with `type` having a non-null value, which means it doesn't look like we're really testing the change itself. 

I apologize if I missed something, but if not can you add a test that has a non-null type? This would be an enum or object argument.
",josephsavona,2016-08-13 23:23:31
1257,2016-08-12 07:09:50," I just ran into the same issue - any updates on this?
",psalz,2016-08-13 23:23:31
1257,2016-08-12 15:47:16,"@papigers are you able to update the PR? 
",josephsavona,2016-08-13 23:23:31
1257,2016-08-12 16:09:56,"Not any time soon , I'm afraid. Too busy.. 
",papigers,2016-08-13 23:23:31
1257,2016-08-13 23:23:31,"closing in favor of #1336 - thanks @papigers!
",josephsavona,2016-08-13 23:23:31
1256,2016-07-03 06:39:44,"I'm using `isomorphic-relay`,  and I'm encountering some problem, which you can read about in more details [here](https://github.com/denvned/isomorphic-relay/issues/42). 

The relevant part for you, is that I saw the server's preloaded data looks like this:

<S_CODE_TOKEN>

Here you can see that the type of `orderBy` is null, instead of PollSort, an enum type. 

The above snippet is, as mentioned, part of the preloaded data the server passed to the client. This is done in this file: [prepareData.js](https://github.com/denvned/isomorphic-relay/blob/master/src/prepareData.js). The relevant line is:

<S_CODE_TOKEN>

So the root of the problem is actually that `toGraphQL.Query` returns null for my input variable type. 

Any idea how can this be fixed? 
",papigers,2016-08-17 18:16:45
1256,2016-07-03 08:30:11,"Thanks for filing such a detailed issue. It looks like `callsToGraphQL` isn't passing the call type to `QueryBuilder.createCall`. Care to send a PR to fix?
",josephsavona,2016-08-17 18:16:45
1256,2016-07-03 09:35:13,"I'd be happy to, but I'm a bit of a newbie to this repo, and relay in general. How can I get the call type from `callsToGraphQL`? 
",papigers,2016-08-17 18:16:45
1256,2016-07-03 09:40:03,"Oh it's simply an attribute of `Call`. I'll try to fix this as soon as I get home.
",papigers,2016-08-17 18:16:45
1256,2016-07-03 18:50:29,"Done. #1257, though there are some build errors...
",papigers,2016-08-17 18:16:45
1255,2016-07-02 06:16:15,"I have a Parent component which contains many Child components as an array. Each child component contains a huge amount of data. So, I decided to not load all of them when Parent get loaded. The data fetched from Parent container is as following: 

<S_CODE_TOKEN>

Then, I would like to send one request per child by passing the child's id to back-end apis. Each child will be show up on the UI whenever its data get back, otherwise, a spinner icon is displayed for indicating the loading data.

Would it be possible to achieve this in Relay?
",lvarayut,2016-07-03 03:00:38
1255,2016-07-02 22:46:35,"Thanks for your question. This is relatively straightforward to implement in Relay and I'd be happy to describe the common approach. However, we'd prefer to answer ""how to"" questions on a public forum that others can easily find. If you [post this question to Stack Overflow](https://stackoverflow.com/questions/ask?tags=relayjs), I'd be happy to answer there. Just include a link to the question here so we can find it.
",josephsavona,2016-07-03 03:00:38
1255,2016-07-03 02:00:11,"Thanks @josephsavona. Here is the [question](https://stackoverflow.com/questions/38166072/would-it-be-possible-to-do-lazy-loading-in-relay) on Stack Overflow
",lvarayut,2016-07-03 03:00:38
1255,2016-07-03 03:00:38,"@lvarayut answered! Let's continue discussion on SO.
",josephsavona,2016-07-03 03:00:38
1254,2016-07-01 15:07:04,,washt,2016-12-24 20:19:44
1254,2016-09-10 02:00:22,"Hi guys, RelayQueryConfig has now been exposed in [v0.9.3](https://github.com/facebook/relay/releases/tag/v0.9.3) so this issue can be merged & closed (also #503 I think)
",eugene1g,2016-12-24 20:19:44
1254,2016-12-24 20:19:44,"Thanks for taking the time to put together this PR. At this point we're close to releasing a successor  to RelayRenderer that removes the notion of routes or query config and further simplifies the API. Rather than documents RelayRenderer, lets just wait for the new API :-)",josephsavona,2016-12-24 20:19:44
1253,2016-07-01 13:40:15,"delete
",papigers,2016-07-01 15:56:30
1252,2016-07-01 11:43:34,"When we send list of objects from server. 
`[{id: 'ab', name: 'foo'}, null, {id: 'cd', name:'bar'}]`

I am getting from relay container just 

<S_CODE_TOKEN>

Null values gets removed. That seems to us as bug. Definitely not expected.  

Our use case is sending (similar to plural fields) array of some criteria and getting back array with results for each criteria and when its not found we return null.  

Here is [repro](https://facebook.github.io/relay/prototyping/playground.html#source=%2F**%0A%20*%20Copyright%20%28c%29%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0A%2F%2F%20Welcome%20to%20Relay.%0A%2F%2F%20Allow%20us%20to%20introduce%20you%20to%20the%20four%20elements.%0A%0A%2F**%0A%20*%20%231%20-%20Your%20React%20components%0A%20*%20This%20will%20look%20familiar%20to%20React%20developers.%0A%20*%0A%20*%20To%20learn%20more%20about%20React%2C%20visit%3A%0A%20*%20%20https%3A%2F%2Ffacebook.github.io%2Freact%0A%20*%2F%0Aclass%20HelloApp%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20%2F%2F%20Relay%20will%20materialize%20this%20prop%20based%20on%20the%0A%20%20%20%20%2F%2F%20result%20of%20the%20query%20in%20the%20next%20component.%0A%20%20%20%20%2F%2Fconst%20%7Bhello%7D%20%3D%20this.props.greetings%3B%0A%20%20%20%20console.log%28this.props.greetings.hello%29%0A%20%20%20%20return%20%3Ch1%3E%7B%7D%3C%2Fh1%3E%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%232%20-%20Relay%20containers%0A%20*%20Compose%20your%20React%20components%20with%20a%20declaration%20of%0A%20*%20the%20GraphQL%20query%20fragments%20that%20fetch%20their%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-containers.html%0A%20*%2F%0AHelloApp%20%3D%20Relay.createContainer%28HelloApp%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20%2F%2F%20This%20GraphQL%20query%20executes%20against%0A%20%20%20%20%2F%2F%20the%20schema%20in%20the%20'schema'%20tab%20above.%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20To%20learn%20more%20about%20Relay.QL%2C%20visit%3A%0A%20%20%20%20%2F%2F%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fapi-reference-relay-ql.html%0A%20%20%20%20greetings%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20hello%20%7B%0A%20%20%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0A%2F**%0A%20*%20%233%20-%20Relay%20routes%0A%20*%20Define%20a%20root%20GraphQL%20query%20into%20which%20your%0A%20*%20containers'%20query%20fragments%20will%20be%20composed.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20routes%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-routes.html%0A%20*%2F%0Aclass%20HelloRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%20%20%2F%2F%20A%20unique%20name%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20%2F%2F%20Here%2C%20we%20compose%20your%20Relay%20container's%0A%20%20%20%20%2F%2F%20'greetings'%20fragment%20into%20the%20'greetings'%0A%20%20%20%20%2F%2F%20field%20at%20the%20root%20of%20the%20GraphQL%20schema.%0A%20%20%20%20greetings%3A%20%28Component%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20GreetingsQuery%20%7B%0A%20%20%20%20%20%20%20%20greetings%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'greetings'%29%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0A%2F**%0A%20*%20%234%20-%20Relay%20root%20containers%0A%20*%20Compose%20a%20Relay%20container%20with%20a%20Relay%20route.%0A%20*%20This%20enables%20Relay%20to%20synthesize%20a%20complete%20query%0A%20*%20to%20fetch%20the%20data%20necessary%20to%20render%20your%20app.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20root%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-root-container.html%0A%20*%2F%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BHelloApp%7D%0A%20%20%20%20route%3D%7Bnew%20HelloRoute%28%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B%0A&schema=%2F**%0A%20*%20Copyright%20%28c%29%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aimport%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%20%20GraphQLList%2C%0A%20%20GraphQLNonNull%2C%0A%20%20GraphQLID%0A%7D%20from%20'graphql'%3B%0A%0A%0A%0A%0Aconst%20FruitType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Fruit'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20%7Btype%3A%20new%20GraphQLNonNull%28GraphQLID%29%7D%2C%0A%20%20%20%20name%3A%20%7Btype%3A%20GraphQLString%7D%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0A%2F**%0A%20*%20Objects.%0A%20*%20Build%20up%20a%20portrait%20of%20your%20data%20universe%0A%20*%20using%20the%20object%20type.%20Here%2C%20we%20define%20a%0A%20*%20type%20of%20object%20that%20has%20a%20'hello'%20field%0A%20*%20that%20is%20of%20the%20string%20type.%0A%20*%2F%0Aconst%20GreetingsType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Greetings'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20%7Btype%3A%20new%20GraphQLNonNull%28GraphQLID%29%7D%2C%0A%20%20%20%20hello%3A%20%7Btype%3A%20new%20GraphQLList%28FruitType%29%7D%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0A%2F**%0A%20*%20The%20schema.%0A%20*%20Here%20we%20export%20a%20schema%20that%20offers%20one%20root%0A%20*%20field%20named%20'greetings'%2C%20and%20a%20method%20to%0A%20*%20resolve%20its%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20writing%20GraphQL%20schemas%20for%20Relay%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Fgithub.com%2Fgraphql%2Fgraphql-relay-js%0A%20*%2F%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20greetings%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20GreetingsType%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20Here%20we%20define%20a%20resolver%20that%20returns%0A%20%20%20%20%20%20%20%20%2F%2F%20the%20data%20defined%20above.%20Were%20this%20schema%0A%20%20%20%20%20%20%20%20%2F%2F%20executing%20on%20the%20server%20side%2C%20you%20could%0A%20%20%20%20%20%20%20%20%2F%2F%20write%20a%20resolve%20method%20that%20fetches%0A%20%20%20%20%20%20%20%20%2F%2F%20live%20data%20from%20a%20database.%0A%20%20%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20%20%20%20%20id%3A%20'abc'%2C%20%0A%20%20%20%20%20%20%20%20%20%20hello%3A%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7Bid%3A'def'%2Cname%3A'carrots'%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20null%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7Bid%3A'gdf'%2Cname%3A'apples'%7D%0A%20%20%20%20%20%20%20%20%20%20%5D%0A%20%20%20%20%20%20%20%20%7D%29%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%29%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A) in playground.

 Its not very neat, but should be enough to illustrate and debug issue. In console you get only array with two elements without null and server is sending three elements, with second one being null.
",jardakotesovec,2016-07-28 15:57:43
1252,2016-07-01 16:50:07,"This is by design. We've found that in our schema it's natural for most fields to be nullable; any given `resolve` method could fail due to an error, privacy check, etc. To ease client development and reduce extraneous null-checks, Relay filters null items in lists and connections. 

We _are_ open to re-evaluating this decision, but it is not something we can do lightly because existing clients depend on this behavior. 

As an immediate suggestion; rather than rely on implicit ordering and alignment of args/results with a result type of `[Result]`, one option would be to return a wrapper object that indicates both the arg and the result: `[{args: ..., result: ?Result}]`. 
",josephsavona,2016-07-28 15:57:43
1252,2016-07-03 19:35:02,"@jardakotesovec Thoughts?
",josephsavona,2016-07-28 15:57:43
1252,2016-07-08 07:05:45,"Thanks for explanation and sorry for delay I am on holidays this week.

I think that filtering extraneous nulls could be server responsibility (in
some middleware) or explicitly on client, but not default behavior as its
more opinionated than necessary and breaks use cases when nulls in list
would have some meaning.

Pattern I intended to use is very similar to relay plural root fields and I
think there is nothing wrong with it and in my case it makes
client implementation simpler than with approach you suggested.

Where in relay is done the filtering?

Maybe it could be some relay option? Having custom function for some
preprocessing could be also option, but not sure if that would have some
other use case. Or having fine control in fragments with @relay directive.
",jardakotesovec,2016-07-28 15:57:43
1252,2016-07-08 17:35:38,"Initially I was inclined to think that filtering nulls just makes sense overall: products will always want to filter them. But on further consideration, filtering nulls is kind of magical. This could make product development more challenging by forcing developers to deal with even more possible null values. But the ideal state would be that Relay is entirely predictable, and there are clear tools to use in managing null values (perhaps the `.?` existential operator in JavaScript and/or GraphQL support for null boundaries, etc). Relay could also respect the schema type by filtering nulls or warning/throwing if a list typed as non-null contains a null at runtime.
",josephsavona,2016-07-28 15:57:43
1252,2016-07-08 18:42:05,"I'd also agree that in general, Relay should _not_ filter out the null values in an array. In our schema, we also allow most of our fields to be nullable. However, fields that return an array are almost always declared as `[SomeType!]` (ie, a nullable list of non-nulls). So GraphQL is already providing a mechanism to guard against null values that occur in an array; the Relay behavior here just seems unnecessary and a bit too magical.
",theorygeek,2016-07-28 15:57:43
1252,2016-07-10 20:24:57,"Ok, to keep discussion flowing. What about
- remove null filtering from Relay
- make that use-case for list of non-nulls  more convenient server side by expressing that resolving in null does not throw but is not included in list..  roughly something like

<S_CODE_TOKEN>

That would guarantee client to have list of non-nulls, without worry about it at all (as it is now) and express intention clearly server side.

But not sure right now if would be important to make this pattern as part of graphql standard (for some tooling purposes?) or it could be just convenience option. 
",jardakotesovec,2016-07-28 15:57:43
1252,2016-07-11 00:30:58,"Thanks for the input. We discussed this internally and all agree that filtering nulls in lists, while convenient, is unexpected/magical and shouldn't be part of the core framework. 

A tentative plan forward:
- In the next release: announce the plan to stop filtering nulls in the release notes. We should consider whether Relay should warn when it encounters a `null` in a list, this could be noisy but would at least alert developers to the fact that Relay is filtering nulls and help make them aware of the need to add null-checks where appropriate.
- In the subsequent release: remove any warnings and stop filtering nulls. 
",josephsavona,2016-07-28 15:57:43
1252,2016-07-11 05:40:27,"@josephsavona Thanks, sounds good! Can you please point me where in relay is done the filtering? Just wondering if would be feasible for me to override that behavior for time being..

And what do you think about my second point - does it make sense to bring this up in graphql-js? We don't have currently such use case, but it seems to me as better option than allow null in list and filter them later on clients.
",jardakotesovec,2016-07-28 15:57:43
1252,2016-07-28 15:57:43,"@jardakotesovec This is definitely worth asking about in `graphql-js`. Note that the filtering logic is primarily in [`RelayQueryWriter`](MTQ2NzkxNTE5NA==).

I'm going to close this since it's working as designed. We are, however, taking this feedback into account for the upcoming changes to Relay core, which will not filter nulls by default. Thanks for raising this issue!
",josephsavona,2016-07-28 15:57:43
1252,2016-11-01 10:39:14,"Graphql-js now supports NULL value in args. Works like a charm!
https://github.com/graphql/graphql-js/pull/544

Version should be `> 0.7.2 || >=0.8.0`. 
Right now package not available via npmjs, but I made custom package build (follow by link above) 
",nodkz,2016-07-28 15:57:43
1251,2016-06-30 10:57:56,,hmaurer,2016-06-30 10:59:28
1250,2016-06-30 10:57:40,,hmaurer,2016-06-30 11:00:35
1249,2016-06-29 05:50:30,"I decided to extend the range properties inside the `pageInfo` object. I added a field named `totalCount` in my custom connection, although it worked very well In GPQL I soon realized that that my `pageInfo` is overwritten in `GraphQLRange.js` according to the fields set up in `RelayOSSConnectionInterface.js` allowing only: `END_CURSOR` `START_CURSOR` `HAS_NEXT_PAGE` and `HAS_PREV_PAGE` fields. So I had no other option than to rename `pageInfo` to something completely different in my schema.
I don't know enough about the library to know why the library re-creates the `pageInfo` object even when the graphql backend provides that data... caching ?
Although this can be fixed by renaming the pagination object, It's not entirely clear to me why the solution is setup this way.
Also I wonder if the spect does not allow for custom fields on the `pageInfo` object, if it does I might be interested in submitting a fix to allow custom fields... 
",maggiben,2016-06-29 22:44:55
1249,2016-06-29 06:04:05,"Relay has special cases logic for handling connections, including the pageInfo field. This field is used to record whether or not more edges may be available, in order to build a representation of what portions of the possible edges are fetched locally. The full pageInfo result is not actually stored; when you query for pageInfo in a component fragment, Relay synthesizes the results based on the first/after/etc calls you supplied and its knowledge of which edges are available. 

In general we recommend storing connection-level fields such as totalCount _on the connection_.  In this case, that would look roughly like the following:

<S_CODE_TOKEN>
",josephsavona,2016-06-29 22:44:55
1249,2016-06-29 22:44:55,"If you have any further questions about the framework, feel free to file an issue here. If you have usage questions about Relay or connections, please do open a question at https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2016-06-29 22:44:55
1248,2016-06-28 20:27:52,"The repo is now public, so we can point at it.
",wincent,2016-06-29 02:31:27
1248,2016-06-28 20:27:59,"@facebook-github-bot import
",wincent,2016-06-29 02:31:27
1248,2016-06-28 20:31:30,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/111335965964883/int_phab) to review.
",ghost,2016-06-29 02:31:27
1247,2016-06-28 15:44:24,"RelayRootContainer should be Relay.RootContainer
",washt,2016-06-29 23:16:33
1247,2016-06-28 15:44:44,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-06-29 23:16:33
1247,2016-06-28 15:46:17,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-06-29 23:16:33
1247,2016-06-28 16:26:17,"This should really be `<Relay.Renderer ... />` ([docs](https://facebook.github.io/relay/docs/api-reference-relay-renderer.html#content)) - we haven't updated all the docs to reference it yet. Would you care to update this usage?
",josephsavona,2016-06-29 23:16:33
1247,2016-06-28 18:25:01,"Sure!
",washt,2016-06-29 23:16:33
1247,2016-06-29 22:50:21,"Nice! Can I impose on your generosity even further, and ask that you replace the Root Container guide with a Relay Renderer guide in a follow up PR, now that you're on a roll?

@facebook-github-bot shipit
",steveluscher,2016-06-29 23:16:33
1247,2016-06-29 22:52:36,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1834783863424838/int_phab) to review.
",ghost,2016-06-29 23:16:33
1247,2016-06-30 02:12:46,"Of course, no problem :+1: 
",washt,2016-06-29 23:16:33
1246,2016-06-28 15:10:20,"As discussed in https://github.com/facebook/relay/pull/1232, this should make it easier to maintain a forked version of Relay and change the name of the field to use as Node ID.

@josephsavona Did I understand everything correct?
",alloy,2016-06-29 23:46:29
1246,2016-06-28 16:22:53,"@alloy Awesome, thanks! This is exactly what I was thinking.
",josephsavona,2016-06-29 23:46:29
1246,2016-06-28 18:24:45,"Ace 👌 

Fixed code-style.
",alloy,2016-06-29 23:46:29
1246,2016-06-29 10:35:58,"Related but off-topic, why are the compiled plugin sources checked-in but not the runtime ones? I’m wondering if I should do this in my fork, because from my limited experience with NPM it appears that if any `prepublish` work needs to be done you _have_ to push a package to the registry, you can’t use such a package directly from a git repo.
",alloy,2016-06-29 23:46:29
1246,2016-06-29 15:44:07,"The plugin sources are checked in compiled because they're used _within_ our babel compilation toolchain. It's certainly possible for these to be compiled dynamically anyway (two instances of babel, one compiling plugins for the other), but I _suspect_ we avoided that in the RN packager for perf reasons.
",josephsavona,2016-06-29 23:46:29
1246,2016-06-29 23:00:08,"@facebook-github-bot shipit
",steveluscher,2016-06-29 23:46:29
1246,2016-06-29 23:01:07,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/267584053605947/int_phab) to review.
",ghost,2016-06-29 23:46:29
1246,2016-07-01 14:07:12,"@josephsavona Gotcha. Thanks for all the help 👍 👏 
",alloy,2016-06-29 23:46:29
1246,2016-07-01 16:11:02,"@alloy thanks for this!
",josephsavona,2016-06-29 23:46:29
1246,2016-07-03 20:30:14,"Seems like this doesn’t actually yet makes it fully work at runtime. In the case of the root node in a query it works as expected, but otherwise the dataIDs are of the form `client:integer`. Looking into it further, if you have a hunch of where I should look, that would be great.
",alloy,2016-06-29 23:46:29
1246,2016-07-03 20:59:40,"Awww, that was silly. I missed the two places I had actually changed in my previous PR. Will send a PR for that.
",alloy,2016-06-29 23:46:29
1245,2016-06-28 14:19:44,"Hi,

I like to format the error message sent by the server, and currently it is not possible to just change that method `formatRequestErrors`.
`RelayDefaultNetworkLayer` makes it allow override `sendMutation` and `sendQueries`, and I could achieve the same by overriding them, but like to do the minimal changes and not to have a stale implementation of above methods. 
Can you make `formatRequestErrors` overridable.

thanks.
",bsr203,2016-07-24 04:29:18
1245,2016-06-28 16:52:48,"That seems reasonable!

Would you be interested in sending a PR? Simply move the implementation of `formatRequestErrors` into the `RelayDefaultNetworkLayer` class just above `_sendQuery` as the ‘protected’ method `__formatRequestErrors` (prefixed with two underscores) so that subclasses of `RelayDefaultNetworkLayer` can override it.
",steveluscher,2016-07-24 04:29:18
1245,2016-06-28 17:11:13,"thanks.. will give a shot :-)
",bsr203,2016-07-24 04:29:18
1245,2016-07-24 04:29:18,"@bsr203 Feel free to submit a PR for this, I'll go ahead and close the issue.
",josephsavona,2016-07-24 04:29:18
1245,2016-07-24 14:50:47,"sorry for the delay. In my case, I had to use a custom network layer and didn't get around it. Will contribute back when experiment with it again. thank you.
",bsr203,2016-07-24 04:29:18
1244,2016-06-27 21:46:07,"Looking at the `RelayRecordWriter`

https://github.com/facebook/relay/blob/master/src/store/RelayRecordWriter.js#L568-L590

It seems like the optimistic range updater only checks for `PREPEND` and appends to the queue otherwise. `REMOVE` is not handled.

Now this brings another question. Should `REMOVE` really be an accepted rangeBehavior for a `RANGE_ADD` ? In what cases is this useful, and why would you not use `RANGE_DELETE` in these cases ?

I might've missed something here, let me know!
",xuorig,2016-07-10 15:18:30
1244,2016-06-28 12:17:42,"The reason I can think of is this: in TodoMVC, let's say you have two queries, `todos(completed: true)` and `todos(completed: false)`. When you change the status of the a todo, you'll want to add it to one of the connections and remove it from the other, like this:

<S_CODE_TOKEN>

At least I think it works like this!
",johanobergman,2016-07-10 15:18:30
1244,2016-06-28 12:21:31,"Yep that makes sense @johanobergman!

I guess this is due to `RANGE_DELETE` not having access to the calls, unable to make a decision as to removing or node the edge. If it allowed a function similar to `RANGE_ADD` has, this could be rewritten has a `RANGE_ADD` + `RANGE_DELETE`.

The other question remains: It seems like the optimistic range updater only checks for PREPEND and appends to the queue otherwise. REMOVE is not handled. That seems strange.
",xuorig,2016-07-10 15:18:30
1244,2016-06-28 21:01:50,"You are right! we seem to be missing the remove case for the optimistic updates. We probably didn't notice because it is handled correctly for the server response. We'll fix it soon!
",yuzhi,2016-07-10 15:18:30
1244,2016-06-28 21:02:51,"@yuzhi I can submit a fix for it if you'd like!
",xuorig,2016-07-10 15:18:30
1244,2016-06-28 21:13:28,"@xuorig That would be awesome! Please also add a unit test so we catch this in the future.
",yuzhi,2016-07-10 15:18:30
1244,2016-06-28 21:13:45,"👍 
",xuorig,2016-07-10 15:18:30
1244,2016-07-10 15:18:30,"So to my surprise, I found tests that expected edges to be removed with the `REMOVE` range operation.

Optimistic range updates work with the `REMOVE` range operation too. It is just a little bit confusing when looking at the function.

Depending on the rangeOperation, `_applyOptimisticUpdate` pushes to a queue located to a certain key. When the `rangeOperation` is `REMOVE`, the key is `__rangeOperationAppend__`.

The `edgeID` is pushed into that queue:
https://github.com/facebook/relay/blob/master/src/store/RelayRecordWriter.js#L585-L588

When retrieving rangeInfo, https://github.com/facebook/relay/blob/master/src/legacy/store/GraphQLRange.js#L957-L960.

That key is fetched, and every edge in the queue is removed.

I think we can close this, feel free to reopen if needed.
",xuorig,2016-07-10 15:18:30
1243,2016-06-27 15:02:13,"Hello.

Two days of experiments and no result. Please, any advice.
Relay is up-to-date - 0.9.1.
Long story short. I'm making a recursive classifier. The next level
opens on mouse over.
The problem is that the child categories stay null in Relay but
my grapql actually answers with edges.

I'm going to give the complete code here.
I've noticed one thing that I think is the reason but I don't know how to fix it.

Here's the schema

<S_CODE_TOKEN>

Here's the component which must render a category and fetch dependent categories on mouse over. It is pretty much a general recursive component I suppose.

<S_CODE_TOKEN>

And now here's what happens. During the first render of the Classifer Relay issues the query:

<S_CODE_TOKEN>

I see the root category. Everything is OK. Then I hover over the category item and Relay makes another query to fetch the connection - `categories`. Here's the query

<S_CODE_TOKEN>

And here's a part of the response:

<S_CODE_TOKEN>

And here's the problem. After I make `this.props.relay.setVariables({ expanded: true })` there is no property `categories` in the `this.props.category`! But I think it must be there! The backend server returns data since you can see the query is issued and it is correct.
One thing that I don't understand is why there is this alias `_categories2slDfj:categories(first:10000)`?
Maybe this is the reason?

Please, any advice.. I'm so close to production. This is the only thing that's holding me.

Thank you.

PS I made a gist with Classifier.js. Here it is https://gist.github.com/GrigoryPtashko/9689476a61058dc844ade11f9b81298a
",GrigoryPtashko,2016-06-28 00:20:59
1243,2016-06-27 16:32:37,"Thanks for your question! I think have an answer for you, but let's take this to Stack Overflow before we continue.

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2016-06-28 00:20:59
1243,2016-06-27 16:39:11,"@steveluscher  yes, sure. I've crossposted it on SO. Here it is https://stackoverflow.com/questions/38059070/recursive-fetching-of-a-connection-is-rejected-by-relay-possibly-another-reason
",GrigoryPtashko,2016-06-28 00:20:59
1243,2016-06-27 18:54:35,"This is actually a bug in Relay. When we diff the query with the data in the store, we only use the first item in a plural field (the assumption being that all others will be the same). I'll send a fix shortly after lunch.
",steveluscher,2016-06-28 00:20:59
1243,2016-06-27 21:08:19,"Awesome job debugging, @steveluscher!
",josephsavona,2016-06-28 00:20:59
1243,2016-06-28 00:20:59,"Fixed in 28a8008fe24abaf87b2e1cdd304ac197a1b1d3da.
",steveluscher,2016-06-28 00:20:59
1243,2016-06-28 07:35:36,"@steveluscher can you, please, look at my comment here http://stackoverflow.com/questions/38059070/recursive-fetching-of-a-connection-is-rejected-by-relay-possibly-another-reason/38065217#comment63570782_38065217 ?
In short - nothing changed. I've tried both ways - recursion on connection and on list field. I still don't know what to do.
",GrigoryPtashko,2016-06-28 00:20:59
1243,2016-06-29 22:38:32,"Hi @GrigoryPtashko. I saw your comment on SO, but your question is probably about to be closed as a duplicate. Feel free to open a separate question if you're still having trouble.

In answer to your comment: it looks to me like the diff bug is fixed, and now you have an undefined `categories` prop. Find out why that's undefined, and you should be able to make it a little further.
",steveluscher,2016-06-28 00:20:59
1242,2016-06-26 11:03:11,"Hello.

I cannot seem to find the place in the docs (I've read them here https://facebook.github.io/relay/docs/getting-started.html#content) where it would be described the meaning of `@relay(plural:true)` and possibly the like structures.
These syntactic structures seem to be the only things that I don't understand in Relay so far.

Docs, source code, wiki?

Thank you.
",GrigoryPtashko,2016-10-21 20:31:45
1242,2016-06-26 13:44:17,"Thanks for asking.

I think this might be a gap in the docs. If you search Stack Overflow you will find a number of scattered references to the directive (eg. [this one](http://stackoverflow.com/questions/32491117/how-to-get-relayjs-to-understand-that-a-response-from-graphql-is-an-array-of-ite/32508505#32508505)), but I don't think it's explicitly spelled out in the documentation anywhere.

We'd welcome a PR for this. I expect it would most likely go somewhere under [this section](http://facebook.github.io/relay/docs/graphql-relay-specification.html).
",wincent,2016-10-21 20:31:45
1242,2016-10-21 14:00:49,"Hey @wincent just put up a PR for this. I placed it under the `Relay.QL` section ([here](http://facebook.github.io/relay/docs/api-reference-relay-ql.html#content)) for now since I saw some of the other directives there already (like `@include`) but I saw you mentioned it would most likely go in [this section](http://facebook.github.io/relay/docs/graphql-relay-specification.html). Is there a particular place you would recommend on that section for this documentation or is the `Relay.QL` ok?
",josercruz01,2016-10-21 20:31:45
1242,2016-10-21 14:44:26,"@josercruz01 : Thanks for the PR, I'll comment on that instead of here.
",wincent,2016-10-21 20:31:45
1241,2016-06-25 14:38:58,"List of desirable features:
- [x] 1. Pass several variables on the top level (not only input). It needed for getting fine grained payload which required some additional variables. [Implementation founded here](https://github.com/facebook/relay/blob/829450ab74aa5c6b0cdb453cb76b1fbc45f16687/src/mutation/RelayGraphQLMutation.js#L374)
- [ ] 2. Move on top level clientMutationId. It is to annoying extract it from inputs and passes to output. Downside we get visibility of this fieldname for every mutation in graphiql doc.
- [ ] 3. Nested mutations in graphql. For example, I have seven methods for mutating user model. It will be nice if I hide them all under `user: UserMutations` field/type.
- [ ] 4. Allowing `path`s in `getConfigs()` for `parentName`, `fieldIDs[key]`, `deletedIDFieldName` in deeply nested GraphQL elements would be nice. So I could have something like `pathToConnection` rather than `connectionName`, as in some environments it can be quite unnatural to enforce the immediate parent of a list to be a relay node. (@Globegitter [last paragraph in comment](https://github.com/facebook/relay/issues/1241#issuecomment-235308799)) 

Fill free to leave your desirable features in comments. I'll add them to this list with a serial number for referencing in the further discussions.

Will be cool if @wincent write about newly implemented features, what planned and of course what think about our desirable features. 
",nodkz,2016-08-23 10:46:41
1241,2016-07-26 15:40:18,"This might of course already be covered by the relay team for the new mutation API, or become irrelevant entirely, but I just noticed an inconsistency, which I don't understand:

`NODE_DELETE` needs a `parentName` in the config where-as `RANGE_ADD` does not. I don't quite understand why the `parentID` itself is not sufficient.

It would also be nice if I could also return an object for `NODE_DELETE` which consists of the `parentID`/`sourceID` (so the server can supply it and I can simplify the config on the frontend) and the id(s) to be deleted.

Also allowing (especially list) mutations of deeply nested elements would be nice. So I could have something like `pathToConnection` rather than `connectionName`, as in some environments it can be quite unnatural to enforce the immediate parent of a list to be a relay node. 
",Globegitter,2016-08-23 10:46:41
1241,2016-07-27 05:21:22,"@Globegitter `RANGE_ADD` has `parentName` https://facebook.github.io/relay/docs/guides-mutations.html#range-add

`parentName` - is the fieldname in your mutation payload (response)
`parentId` - is `id` in Relay's flat objects cache (store)
So these two fields need for making a relation between your graphql response and relay store. So this relation makes possible to merge data from a typed object in response with an object in relay's store. 

This article will be quite useful for understanding internal implementation of Relay's store http://hueypetersen.com/posts/2015/09/30/quick-look-at-the-relay-store/

Your suggestion in the last paragraph is awesome! Added under number **# 4** in the list of desirable features.
",nodkz,2016-08-23 10:46:41
1241,2016-07-27 06:58:39,"@nodkz yes I know that RANGE_ADD has parentName but it is an optional config field for this where-as for NODE_DELETE it is required. I don't understand that difference of it being optional for one and required for the other. And looking at tests e.g. here: https://github.com/facebook/relay/blob/master/src/traversal/__tests__/writeRelayUpdatePayload-test.js#L1363 shows that it is indeed not needed for RANGE_ADD.

 Thank you for posting that article, will have a read. 
",Globegitter,2016-08-23 10:46:41
1241,2016-08-23 10:46:41,"Due Greg talk about Relay 2: https://www.youtube.com/watch?v=OEfUBN9dAI8&feature=youtu.be
This issue became irrelevant. Mutations will become imperative.
",nodkz,2016-08-23 10:46:41
1240,2016-06-24 22:03:22,"When preparing the 0.9.1 release notes in `CHANGLOG.md` and previewing them on GitHub, I noticed some awkward wrapping in the rendered HTML near places where I had put hard line breaks in the file. This was fixed by not wrapping the 0.9.1 chunk of the release notes.

In this commit I've gone back and unwrapped all the Markdown files where we were hard-wrapping (the vast majority already don't hardwrap).

I was too lazy to visually inspect all the files, so I identified the likely candidates with this snippet of Ruby:

<S_CODE_TOKEN>

Which returned a list of the longest line of all files in ""docs/"":

<S_CODE_TOKEN>

The obvious candidates were the chunk in the middle with lengths 81, 98, 79, 80 and 112, corresponding to the GraphQL docs, and sure enough, they were all hard-wrapped. Unwrapped by mashing `J` mindlessly in Vim.
",wincent,2016-06-24 23:01:25
1239,2016-06-24 17:12:36,"Make this one like our other translations:
- Use `.zh-CN` suffix instead of `-zh-CN`: this means that an appropriately configured web server can choose to serve up the right file based on the `Accept-Language` header.
- Use same `id` as canonical version. We might end up changing our minds about that (see https://github.com/facebook/relay/pull/1238), but in the meantime we should at least be consistent.

I think we likely still have some issues here, so I'm going to keep poking around after this. Basically, I think at this point that we've _unbroken_ our English docs and our Chinese docs are at least consistently defined, but the build process for the translations isn't producing a useful/accessible result.
",wincent,2016-06-24 21:16:33
1239,2016-06-24 17:12:41,"@facebook-github-bot import
",wincent,2016-06-24 21:16:33
1239,2016-06-24 17:28:44,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/871299459662108/int_phab) to review.
",facebook-github-bot,2016-06-24 21:16:33
1238,2016-06-24 15:48:30,"When I reran the website build toolchain for the 0.9.1 release I ended up updating the `metadata.js` file:

https://github.com/facebook/relay/commit/88c41e94945092655a7f841e2d25b27f6f5fcf0c

This in turn meant that we had multiple documents with the same id; eg:
- thinking-in-graphql

But different permalinks:
- docs/thinking-in-graphql.zh-CN.html
- docs/thinking-in-graphql.html

When I committed and pushed the generated documentation, ie:

https://github.com/facebook/relay/commit/eef148d1061b06e7838e2d12993f87e3d0a4bbcf

I saw that our sidebar table of contents was now using the localized version of the document; ie:

> 深入理解 GraphQL

instead of:

> Thinking in GraphQL

The solution for now is to always prefer non-localized resources in the sidebar, but in the long term we'll want the localized version of each page to prefer localized links in the sidebar, if they exist. This may be tricky to implement, however, because we don't control the gh-pages environment and so can't necessarily implement the logical `Accept-Language` solution (although perhaps GitHub will... maybe they already do?). For now just getting the fix out. The updated, published documentation went out in:

https://github.com/facebook/relay/commit/52b908ddf53c66d2c33555c6c8c2a40449ee29bd

Aside: this commit takes care to preserve ordering, so that the ""find first element which doesn't have any previous"" logic can rely on it. But this is not well-defined behavior because (I think) the order in which we're visiting the source files (as returned by `glob.sync(MD_DIR + '**/*.*')` in `website/server/convert.js`) is actually filesystem-dependent. On HFS+ (macOS) this happens to be lexicographically ordered, but I know of other filesystems where it is dependent on things like inode metadata layout and such.
",wincent,2016-06-24 17:46:31
1238,2016-06-24 15:48:52,"@facebook-github-bot import
",wincent,2016-06-24 17:46:31
1237,2016-06-24 02:12:21,"- One proofreading change.
- A couple of metadata updates resulting from rebuilding the site.
",wincent,2016-06-24 08:16:44
1237,2016-06-24 02:12:24,"@facebook-github-bot import
",wincent,2016-06-24 08:16:44
1237,2016-06-24 02:16:12,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/611565175677069/int_phab) to review.
",ghost,2016-06-24 08:16:44
1236,2016-06-24 02:06:23,,wincent,2016-06-24 08:46:53
1236,2016-06-24 02:06:29,"@facebook-github-bot import
",wincent,2016-06-24 08:46:53
1236,2016-06-24 02:16:02,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/143349286085814/int_phab) to review.
",ghost,2016-06-24 08:46:53
1235,2016-06-24 02:02:33,,wincent,2016-06-24 08:16:44
1235,2016-06-24 02:02:37,"@facebook-github-bot import
",wincent,2016-06-24 08:16:44
1235,2016-06-24 02:16:02,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/137650623324295/int_phab) to review.
",ghost,2016-06-24 08:16:44
1234,2016-06-23 23:38:16,"This is going to go out with 0.9.1, and we're mentioning it in the CHANGELOG (https://github.com/facebook/relay/pull/1233), so we should document it, even if only briefly.
",wincent,2016-06-24 00:16:34
1234,2016-06-23 23:38:25,"@facebook-github-bot import
",wincent,2016-06-24 00:16:34
1234,2016-06-23 23:40:58,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1643111799342262/int_phab) to review.
",ghost,2016-06-24 00:16:34
1233,2016-06-23 20:26:29,"These are provisional, as there might still be some small things that make the cut before release. Getting them up for feedback in the interim however.
",wincent,2016-06-24 00:31:37
1233,2016-06-23 20:26:34,"@facebook-github-bot import
",wincent,2016-06-24 00:31:37
1233,2016-06-23 20:41:43,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/123742444718985/int_phab) to review.
",ghost,2016-06-24 00:31:37
1232,2016-06-23 17:20:16,"As described [here](https://github.com/facebook/relay/issues/1061#issuecomment-225940487), we need to use a different field for Relay’s Global Object Identification purposes.

This patch adds that support which I have tested to work [as expected in our app](https://github.com/artsy/emission/issues/181#issuecomment-227737481). However, it should be fully backwards compatible, as can be judged from the test coverage.

When/if this is accepted, I will make a PR for [the graphql-relay utilities](https://github.com/alloy/graphql-relay-js/commit/efb893df0d52f59997c80a3e6a1cace08eb63580) to define the schema with a custom Node ID.
",alloy,2016-06-24 18:34:45
1232,2016-06-23 21:21:24,"This basically looks good, but this is actually step two - shipping it now would allow people to configure the plugin in a way that wouldn't actually work with the runtime. Before we proceed with this, we'll need to change the runtime to always be aware of what name to use for the ""id"" field. Ideally we wouldn't have to add lots of metadata to every query (affects perf). We also destructure `RelayNodeInterface` in lots of modules (again, perf), so it isn't as simple as making a constant configurable.

More generally, getting `__id` into the spec seems like a far simpler and portable way to address the problem of `id` field collisions - rather than every client have to incur similar complexity to what's added here.
",josephsavona,2016-06-24 18:34:45
1232,2016-06-23 21:52:27,"@josephsavona Hmm, bear with me, when you refer to the runtime not supporting it, do you mean functionality like refetching? The de-duplication works for me, but as I have not yet been able to use the Node based functionality I haven't been able to test this yet.
",alloy,2016-06-24 18:34:45
1232,2016-06-23 21:56:09,"Regarding getting the __id field in the spec, I get that that makes things simpler and why you might not want something like this. I will have to make this work nonetheless, because I can't wait for such long-term changes, I would, however, consider naming our field __id for forward compatibility.
",alloy,2016-06-24 18:34:45
1232,2016-06-23 23:28:08,"> do you mean functionality like refetching? 

Yes - Relay uses the `id` field of a record as the value by which to refetch it, so this change (and a schema using an identifier field not named ""id"") will break refetching.

> The de-duplication works for me

Are you sure? Again, Relay uses `id` for de-duplication. Your records may be getting normalized (flattened), but you will get collisions if your `id` values are type-specific ids that could overlap. 

> I will have to make this work nonetheless.

We understand that you need to make something work today, but we _definitely_ cannot move forward without a concrete plan for dealing with refetching and normalization. This will likely involve some fairly invasive changes to Relay, which makes us even more wary of proceeding. 

Have you evaluated the work necessary to simply conform to the Node specification and use `id` as the fieldname? 
",josephsavona,2016-06-24 18:34:45
1232,2016-06-24 12:02:19,"Alright, based on your helpful feedback I now have a better understanding of the difference and working of the plugin and runtime parts. After some more testing it’s indeed clear that the runtime is not respecting my choice in ID field, it is atm simply ignoring _both_ the default `id` field and my custom ID field…

‘Sigh’ and ‘hah’, it’s pretty obvious in hindsight.

> > The de-duplication works for me
> 
> Are you sure? Again, Relay uses id for de-duplication. Your records may be getting normalized (flattened), but you will get collisions if your id values are type-specific ids that could overlap.

This was the specific problem [I ran into](https://github.com/artsy/emission/issues/181) when I started the work to add Relay support to our GraphQL server and is what I was focussing on during testing. We had an ‘artist’ and an ‘artwork’ by the same `id`, after my changes the collision no longer occurred.

However, after your explanation I’ve set some more breakpoints and checked what Relay is using as `__dataID__` and came to the conclusion that it is not using the value of the custom ID that I was expecting it to. Relay generates values itself, e.g. `""client:-36268863541""` and because these are unique the problem was _seemingly_ solved.

It is now clear what piece I’m missing and obvious that that also applies to the re-fetching etc.

> > I will have to make this work nonetheless.
> 
> We understand that you need to make something work today, but we definitely cannot move forward without a concrete plan for dealing with refetching and normalization. This will likely involve some fairly invasive changes to Relay, which makes us even more wary of proceeding.

I totally understand and agree with this from your side 👍 

It is not entirely clear to me if you would consider accepting customisability like this _at all_, though, or if you’re basically saying ‘no’ in lieu of the future `__id` field?

> Have you evaluated the work necessary to simply conform to the Node specification and use id as the fieldname?

Aye, we have. Alas this is definitely not an option in our case, I would have greatly preferred to just use the `id` field.

The issue is that our flagship iOS app has been using our GraphQL server since before we ever looked at using Relay, which means that [it now depends on the `id` field](https://github.com/artsy/eigen/blob/54584b69eedeb0cc145f2b7e9289f8c696520a31/Artsy/Networking/ARRouter.m#L1031) to hold a value that it can use against other APIs and there is no real way for us to control what versions of the app our users have installed. Thus changing this would basically break all installations of the app.

In the case of our web clients and APIs it would all theoretically have been possible, albeit it a highly complex and sensitive undertaking, because those are all under our control.

The other option would have been to not use Relay for [our new React Native work](https://github.com/artsy/emission) inside [our flagship app](https://itunes.apple.com/us/app/artsy-collect-bid-on-fine/id703796080?mt=8), but the possibilities for improved mobile network utilisation in this new paradigm is something that we really would like to use.
",alloy,2016-06-24 18:34:45
1232,2016-06-24 12:57:23,"> It is not entirely clear to me if you would consider accepting customisability like this at all, though, or if you’re basically saying ‘no’ in lieu of the future `__id` field?

To expand on this, if you prefer to not add any complexity at this moment in time, then that’s perfectly fine by me. Knowing now that you will have a new name for this field in the future, and what that name is, I can also just maintain a fork of Relay that changes the hardcoded name to `__id` and use that. In the future once you officially start using the new name I can then switch back.

The main reason for me to continue to have this officially be customisable _right now_ would be for community reasons.
",alloy,2016-06-24 18:34:45
1232,2016-06-24 17:01:03,"After spending some more time on this and giving it some more thought I have to agree with you that the added complexity would be quite a lot and maintaining a fork that uses `__id` instead seems like a saner route.
",alloy,2016-06-24 18:34:45
1232,2016-06-24 17:07:39,"Thanks for giving us more context on your situation. I didn't meant to be vague with my previous statement, it just wasn't yet clear what the best course of action is. I chatted with @leebyron a bit and `__id` is something that is being considered but not definite yet. Here's what I would recommend:
- Instead of this PR, let's go forward with a smaller change that moves the value of `id` to a constant in its own file/module (similar to how we have `RelayNodeInterface` for the runtime). Then replaces hardcoded references to 'id' with e.g. `RelayQLNodeInterface.ID`.
- If there are any places in the runtime code that references `id` directly, let's change them to use `RelayNodeInterface.ID` (destructuring is ok).

We're okay with accepting PRs for the above. With these changes, you should be able to maintain a very minimal fork of Relay - just fork the plugin interface file and RelayNodeInterface.js, and manually run the build script to get a build that uses your own id fieldname. For the name itself, it sounds like `__id` is likely _enough_ to become part of the spec (or at least a supplemental one) that it's overall probably best to use that name instead of some other name.
",josephsavona,2016-06-24 18:34:45
1232,2016-06-24 18:34:45,"> Thanks for giving us more context on your situation. I didn't meant to be vague with my previous statement, it just wasn't yet clear what the best course of action is.

I should have included the full context here from the get-go, instead of linking to it. You run a tight ship and I very much appreciate that.

> For the name itself, it sounds like `__id` is likely _enough_ to become part of the spec (or at least a supplemental one) that it's overall probably best to use that name instead of some other name.

Fair enough, I get that no hard promises can be made on this. Even if the name would end up being different, migrating away from one name to another shouldn’t be a real problem.

> We're okay with accepting PRs for the above. With these changes, you should be able to maintain a very minimal fork of Relay

This sounds like a great, usable, and simple path forward, I will send a PR for that ASAP.

Thanks a lot for your time and assistance! 👌👏
",alloy,2016-06-24 18:34:45
1231,2016-06-23 01:37:33,"This isn't yet part of the `RelayEnvironment` interface, so let's remove it to avoid confusion. The referenced GitHub issue contains discussion about what the API is for, and why it isn't public or exposed on `RelayEnvironment` at this time.

Closes: https://github.com/facebook/relay/issues/1030
",wincent,2016-06-23 15:31:59
1231,2016-06-23 01:37:41,"@facebook-github-bot import
",wincent,2016-06-23 15:31:59
1231,2016-06-23 01:44:51,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/208133812918879/int_phab) to review.
",ghost,2016-06-23 15:31:59
1230,2016-06-22 19:11:40,"I have a `Node` that I want to update with an optimistic update, but that `Node` is also returned by a union so I need to get the `__typename` from the union. However, it would appear that after an optimistic update has been applied and before the response comes back, the value of that `__typename` on the union is `null`.
",calebmer,2016-06-23 01:39:33
1230,2016-06-22 19:15:54,"Just to clarify, are you explicitly setting the `__typename` field in your optimistic response?
",josephsavona,2016-06-23 01:39:33
1230,2016-06-22 19:16:59,"No
",calebmer,2016-06-23 01:39:33
1230,2016-06-22 19:18:43,"It does work when `__typename` is set in `getOptimisticResponse` though. Is this expected behavior?
",calebmer,2016-06-23 01:39:33
1230,2016-06-22 19:56:21,"Yes, this is expected behavior. Relay can't know what type you meant to create within a union, so you have to specify it. It may be possible to infer the type in some cases that we don't today, but a union would always require it to be specified by the user.
",josephsavona,2016-06-23 01:39:33
1230,2016-06-23 01:39:33,"Going to close this out, but feel free to comment again @calebmer if you'd like to know more. Thanks for bringing this up.
",wincent,2016-06-23 01:39:33
1229,2016-06-22 10:50:07,"RelayContainer now uses stateless component names instead of using `props => ReactElement`

Closes https://github.com/facebook/relay/issues/1224
",edvinerikson,2016-06-22 21:31:36
1229,2016-06-22 17:12:16,"Thanks!
",wincent,2016-06-22 21:31:36
1229,2016-06-22 17:12:21,"@facebook-github-bot import
",wincent,2016-06-22 21:31:36
1229,2016-06-22 17:12:36,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/257292007963170/int_phab) to review.
",ghost,2016-06-22 21:31:36
1228,2016-06-22 02:28:01,,wincent,2016-06-22 20:16:41
1228,2016-06-22 02:28:19,"@facebook-github-bot import
",wincent,2016-06-22 20:16:41
1228,2016-06-22 02:39:25,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/615470488613108/int_phab) to review.
",ghost,2016-06-22 20:16:41
1227,2016-06-21 18:35:52,"We'll be moving these into another repo soon:

https://github.com/relayjs/relay-examples

At the time I write this, that repo contains an exact copy of the examples that I am removing in this commit, but it will be a few days(?) before I can actually flip the switch and make it public.

As such, in this commit I am removing the examples and updating all references to them to instead point to the last commit at which the examples existed. I will follow-up afterwards and update the links to point to the new repo.

Q: Why are we doing it in this order?

A: Because we want to decouple the examples from the main repo in order to make updating them independent of the release process for Relay itself. This will reduce the friction to shipping new versions of Relay and help us to ship more often, starting with the very next release that I am preparing right now.
",wincent,2016-06-22 20:16:22
1227,2016-06-21 18:36:28,"Whoops. Need to update Travis as well. My `ag` failed me.
",wincent,2016-06-22 20:16:22
1227,2016-06-21 18:41:18,"@facebook-github-bot import
",wincent,2016-06-22 20:16:22
1227,2016-06-21 18:54:43,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1755868961292350/int_phab) to review.
",ghost,2016-06-22 20:16:22
1227,2016-06-24 13:34:36,"It's been 2 day and the examples are still not up.  They are some of the best examples for newbies to figure out how relay works.  This should have probably waited until you could make the other repo public 😦 
",cgarvis,2016-06-22 20:16:22
1227,2016-06-24 13:37:33,"For those that find this, you can browse the code base before this commit here: https://github.com/facebook/relay/tree/081b4a3f17dcf37419155317ed97ca5e5ac97522
",cgarvis,2016-06-22 20:16:22
1227,2016-06-24 14:16:11,"Release is a multi-step, non-atomic process, and I did not want it to be blocked by something I don't control (the administrative/legal side of toggling the new repo from private to public).

Also, as you have discovered, Git history is immutable and the examples are all still in the repo. Additionally I link directly to the last commit where the examples exist in multiple places. See https://github.com/facebook/relay/commit/c73d91ce36819c0f9cafd36481ceeb628de25146.

> ... in this commit I am removing the examples and _updating all references to them to instead point to the last commit at which the examples existed_
",wincent,2016-06-22 20:16:22
1227,2016-06-28 20:18:38,"@cgarvis: the examples repo is public now. Sorry that it took as long as it did.
",wincent,2016-06-22 20:16:22
1226,2016-06-21 00:34:17,,steveluscher,2016-06-21 17:31:31
1226,2016-06-21 06:33:33,"@facebook-github-bot shipit
",steveluscher,2016-06-21 17:31:31
1226,2016-06-21 06:40:33,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/476214469256428/int_phab) to review.
",ghost,2016-06-21 17:31:31
1225,2016-06-20 23:02:03,"When I run `updateSchema` to generate my `schema.json` file for `BabelRelayPlugin` for the first time I get the following error:
`Error: Cannot find module '../schema.json'`

Now I realize that it happens because I have my babel relay plugin set on `.babelrc`, so I tried to remove it, run updateSchema, add it back, and run my application, and it worked.

How can I run updateSchema without including the plugin?
I've tried creating another `.babelrc` file in the updateSchema folder, to override my project's .babelrc which includes the plugin, but that didn't work.

**updateSchema.js:**

<S_CODE_TOKEN>

**BabelRelayPlugin.js:**

<S_CODE_TOKEN>

**.babelrc:**

<S_CODE_TOKEN>
",papigers,2016-07-01 13:55:56
1225,2017-03-09 01:42:18,How did you solve this problem?,HyperSimon,2016-07-01 13:55:56
1225,2017-03-09 07:03:00,"For this case i wrote https://github.com/nodkz/babel-plugin-transform-relay-hot

Which successfully starts without schema.json. And when it somehow generated hot reload babelRelayPlugin without restarting you dev server which runs via babel.",nodkz,2016-07-01 13:55:56
1224,2016-06-20 00:09:16,"I'm using a lot of functional stateless components with relay. I'm not sure if this has to do specifically with the fact that I'm using these stateless components or not, but I feel like I only just recently started getting these less informative error messages.

<S_CODE_TOKEN>

The component / code that triggers this warning is below ...

<S_CODE_TOKEN>

Is this because I'm exporting the container without assigning it to a variable, perhaps? I've used this ""pattern"" for several months, but don't recall seeing these types of warnings before. I thought I recalled seeing that actual component name in the warning?
",ryancole,2016-06-22 21:31:36
1224,2016-06-20 00:12:39,"Never mind the fact that the prop related code is pointless here, I think, because that default variable is assigned after React checks the incoming props, it appears. This code just illustrates what my code looks like and that this code generates an error where the react component name is not appearing in warning messages.
",ryancole,2016-06-22 21:31:36
1224,2016-06-20 12:38:04,"The issue is in the [getComponentName](https://github.com/facebook/relay/blob/master/src/container/RelayContainer.js#L1006-L1016) function and is casued because the `getReactComponent` function doesn't support functional components.

It should probably be changed to something like: `name = ComponentClass.displayName || ComponentClass.name || 'props => ReactElement'`
",edvinerikson,2016-06-22 21:31:36
1223,2016-06-19 11:40:34,"I am not sure that we want to have this support but I think it would be nice.

I replaced the `printMutation` function with a `printOperation` function that can print any instance of `RelayQuery.Operation`. I am not sure if that's the behavior we want or if we should check for `RelayQuery.Subscription` and `RelayQuery.Mutation`.

Also as it is right now we always have to supply a `$input` argument which may not be the case when using subscriptions.
",edvinerikson,2016-06-21 18:01:22
1223,2016-06-19 11:47:44,"Tests seems to fail because of this:

<S_CODE_TOKEN>

However I ran `npm test` locally and all tests passed (Node 6.2.2).
",edvinerikson,2016-06-21 18:01:22
1223,2016-06-21 11:46:35,"I have updated the PR. :+1: 
",edvinerikson,2016-06-21 18:01:22
1223,2016-06-21 16:30:03,"Looks good apart from one long line that needs to be wrapped; can fix that during the import. I think the Travis failures might be fixed by #1226, maybe? Not sure exactly what the nature of the build breakage that that one refers to is.
",wincent,2016-06-21 18:01:22
1223,2016-06-21 16:30:09,"@facebook-github-bot import
",wincent,2016-06-21 18:01:22
1223,2016-06-21 16:30:55,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/295789987427863/int_phab) to review.
",ghost,2016-06-21 18:01:22
1223,2016-06-21 16:44:06,"Thanks @wincent and @josephsavona for accepting the PR! :+1: 
",edvinerikson,2016-06-21 18:01:22
1222,2016-06-19 05:40:16,"1. Git clone the current version of the repo
2. cd /relay/examples/TodoMVC
3. npm install (everything installs ok)
4. npm start
5. Get this ugly log

<S_CODE_TOKEN>
",CoericK,2016-06-22 02:40:32
1222,2016-06-22 02:40:32,"Thanks for the report, @CoericK, but this is a dupe of #1188. I'm going to close this one. Please see the other issue for [workaround](https://github.com/facebook/relay/issues/1188#issuecomment-227535665) and imminent fix.
",wincent,2016-06-22 02:40:32
1221,2016-06-17 20:09:01,"Currently it's not possible to get a transaction for the queue after the `onSuccess` or `onFailure`. As seen in https://github.com/facebook/relay/issues/1200

That's because they are removed from the `pendingTransactions` map right after the callback has been called.

I'm working on a PR but since they might require semi-big changes on the queue, thought I'd share a few possible solutions before I open a PR:
#### 1: `%s/pendingTransactionMap/transactionMap`

Replace `pendingTransactionMap` with a `transactionMap` which can hold wether or not a transaction is pending:

In flow terms:

<S_CODE_TOKEN>
#### 2: Have a pendingTransactionMap and a completeTransactionMap

`_get(id)` would then need to check in both which seems pretty bad.

Other ideas ?
",xuorig,2017-01-30 23:06:03
1221,2016-06-20 15:39:09,"With either of those I am worried about the map growing unboundedly. In some projects people are creating what may seem like a crazy amount of mutations, so this could be problematic for them.

Ideally, the error information could live on (or be copied to) the `RelayMutationTransaction` object itself, so that as long as you have a reference to it you can access the error information on it, but that in itself would probably be an unpleasantly large refactoring too, given the interdependence of `RelayMutationTransaction`, `RelayMutationQueue` and the various internal pending transaction representations...
",wincent,2017-01-30 23:06:03
1221,2016-06-20 15:41:05,"Yep, agreed on the size, good point.

Thanks for the answer @wincent, I'll take a look at having it written on the Transaction. Not a small fix indeed!
",xuorig,2017-01-30 23:06:03
1221,2016-06-20 16:00:11,"Once you've had a look, do post your ideas back here. I haven't traced through all the consequences of a decision like that; it could be quite involved.
",wincent,2017-01-30 23:06:03
1221,2016-06-20 17:04:08,"Will do!
",xuorig,2017-01-30 23:06:03
1221,2016-07-05 22:08:36,"Running into this issue. How's it looking @xuorig?
",grydstedt,2017-01-30 23:06:03
1221,2017-01-30 23:06:03,"Closing due to inactivity. Please feel free to submit a PR if you still feel that this is relevant and useful, and thanks for your input!",wincent,2017-01-30 23:06:03
1220,2016-06-17 15:49:03,"I've just came to this issue, I'm trying to get from GraphQL an array of GraphQLObjects but the only information I need is the Id. Here's the query: 

<S_CODE_TOKEN>

Once everything is loaded, `this.props.viewer` has only the email. After checking I've seen that the query sent to graphQL doesn't have `arrayOfObjects` in it. So adding an extra element to the query like:

<S_CODE_TOKEN>

It works as usual, I get both the ids and name in `arrayOfObjects`. I might be wrong, but I'd say this is a bug, the component that writes this query doesn't need to fetch any other information, so bloating the query doesn't seem appropriate. 
",blaiprat,2016-06-20 15:47:16
1220,2016-06-20 15:47:16,"I think what you're running afoul of here is code that we had in `subtractRelayQuery` until very recently (569a0e57f22058f9c1d266). [Example](https://github.com/facebook/relay/commit/569a0e57f22058f9c1d2669b487b0225c501308a#diff-3185b2e83986afb0b91017c77031c27cL97):

<S_CODE_TOKEN>

We explicitly considered fields that implemented the `Node` interface to be ""empty"" if they didn't contain any non-requisite, non-id scalar fields, and I gather your `arrayOfObjects` items all implement `Node`. Generally, but not always, you don't need to ask for the `id` because in order to get the `id` you would have needed the `id`, except when you don't... The workaround to indicate that you really wanted to fetch the `id` anyway was to [assign an alias](https://github.com/facebook/relay/commit/569a0e57f22058f9c1d2669b487b0225c501308a#diff-3185b2e83986afb0b91017c77031c27cL125).

So, I think this may be a non-issue after 569a0e57f22058f9c1d266, but in the meantime you can work around this by using an alias. I'll close this for now, but feel free to comment again if you have any further thoughts, or think I'm wrong about my diagnosis.
",wincent,2016-06-20 15:47:16
1219,2016-06-16 15:31:46,"According to GraphQL's specification, section [7.2 Response Format](https://facebook.github.io/graphql/#sec-Response-Format), the response map may contain an entry with the key `extensions`.

> The response map may also contain an entry with key `extensions`. This entry, if set, must have a map as its value. This entry is reserved for implementors to extend the protocol however they see fit, and hence there are no additional restrictions on its contents.

In our endpoint, we use this entry the send warnings, mostly ACL related, to the client. Here is a sample query:

<S_CODE_TOKEN>

And its potential response including a warning:

<S_CODE_TOKEN>

Currently it is not possible to read `extensions` using `RelayDefaultNetworkLayer` or using `RelayEnvironment#addNetworkSubscriber`. It would be really helpful if the complete response payload could be read:

<S_CODE_TOKEN>

How should we handle this using Relay?
Could such feature be implemented in a future?

Ideally, the subscriber API should allow developers to write such middlewares.
",ooflorent,
1219,2016-07-24 04:38:00,"Thanks for letting us know about this. This is a recent addition to the spec that we have not used yet with Relay, hence the lack of support. Given that it is part of the spec, this is totally reasonable to support. I suspect this will include:
- Changing the default network layer to [resolve the request](https://github.com/facebook/relay/blob/master/src/network-layer/default/RelayDefaultNetworkLayer.js#L75) with all the keys that are listed in the GraphQL spec (something like `const {data, errors, extensions} = payload; resolve({data, errors, extensions});`)
- Changing the [response Flow type](https://github.com/facebook/relay/blob/master/src/tools/RelayTypes.js#L250-L254) to include these new fields with their respective types.
- Then run Flow and see if anything else needs to change :-)
",josephsavona,
1218,2016-06-16 13:01:01,"We have encountered an strange behaviour of Relay. I will try to explain the best I can.

So we have an ""main"" relay container that fetches the data for corresponding store, and also includes and fragment from Ticket container.
Ticket container render out custom table that has filter and sorting. So you can see that in StoreFrom component StoreTicketList container is import all required props are passed like Store fragment.

The problem occurs when you try to filter StoreList Ticket, I mean set filter or sort relay variables.
You will get this error: 

Warning: RelayContainer: component `TicketList` was rendered with variables that differ from the variables used to fetch fragment `Store`. The fragment was fetched with variables `{""first"":5,""after"":null,""last"":null,""before"":null,""sort"":null,""filter"":null}`, but rendered with variables `{""first"":5,""after"":null,""last"":null,""before"":null,""sort"":null,""filter"":{""authorAccount"":{""email"":{""__e"":""wrongEmail@email.com""}}}}`. This can indicate one of two possibilities: 
- The parent set the correct variables in the query - `TicketList.getFragment('Store', {...})` - but did not pass the same variables when rendering the component. Be sure to tell the component what variables to use by passing them as props: `<TicketList ... first={...} after={...} last={...} before={...} sort={...} filter={...} />`.
- You are intentionally passing fake data to this component, in which case ignore this warning.

But those filter/sort variables are on StoreTicketList and they arent passed dow from parent to child container like in this case Store container to StoreListTicket container.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Ticket Container:

<S_CODE_TOKEN>
",mario-jerkovic,2017-01-30 23:07:27
1218,2016-06-16 16:17:21,"Thanks for your question! I have an answer for you, but we'd prefer to answer this in a forum that is easily searchable by other members of the community who have a similar question. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Please post a link to your Stack Overflow question here, to so that we don't lose track of it. Thanks!

https://stackoverflow.com/questions/ask?tags=relayjs
",josephsavona,2017-01-30 23:07:27
1218,2016-06-16 18:04:30,"No problem, here is the Stack Overflow question.

http://stackoverflow.com/questions/37866342/relay-fragment-variables
",mario-jerkovic,2017-01-30 23:07:27
1218,2016-06-20 08:27:18,"I have tried to isolate the problem, and have created small example of the models on GraphQL side and Containers/Components on the frontend side.

Here is the repo link: https://github.com/mario-jerkovic/Relay-FragmentVariables

If you uncomment the code inside`/js/routes/AppHomeRoute.js` and`/js/app.js`, relay wont complaint about different variables, the only difference between working and not working code the the react-router-relay.
",mario-jerkovic,2017-01-30 23:07:27
1218,2016-06-20 21:31:16,"Ha, I _just_ ran into the same problem. The error message could be more helpful. It turns out you need to do **two** things:
- Pass the props into the component. I'm using react-relay-router, so for me that was a matter of adding this line

<S_CODE_TOKEN>
- Also inject the variable's values into the `getFragment` function call, like so:

<S_CODE_TOKEN>

For me the problem was in the root query, where it looks instead like:

<S_CODE_TOKEN>

I haven't looked at your repo, but maybe this helps you out. To the Relay folks, it'd be nice if this error message pointed to a dedicated example page, or at least explicitly mentioned all the places variables need to be passed in.
",skosch,2017-01-30 23:07:27
1218,2016-06-21 00:25:34,"@skosch Thanks for answering. Would you mind including your answer at Stack Overflow as well to help the community find this answer?

We're definitely aware that this is tricky, and we're looking at ways to simplify passing variables. We'll see how this goes and consider documenting the current system more in the meantime.
",josephsavona,2017-01-30 23:07:27
1218,2016-06-21 01:55:32,"Done, thanks :)
",skosch,2017-01-30 23:07:27
1218,2016-06-21 07:20:42,"@josephsavona I have added those changes @skosch proposed and i have the same thing/problem ... You can take a look at my repo from last post... I dont see why passing variables from parent to child container should work, beacuse they are using different set of initial variables to render the container.. Store container has only `id` but ticket container has `filter, first, last, after and before`. so those are tied to ticket container. 

initially ticket container is renderd with `filter: null` the you update it with:

<S_CODE_TOKEN>

on second render when filter is `this.props.relay.variables.filter = { subject: { __e: 'something' }` relay dosen't complain but when you update the filter variable second time it is.
",mario-jerkovic,2017-01-30 23:07:27
1218,2016-06-21 10:19:29,"I suspect (being on mobile and unable to test it) that the problem is `<StoreListTickets store={this.props.viewer.store} />` -- try to pass those variables as props to that component?
",skosch,2017-01-30 23:07:27
1218,2016-06-21 16:16:34,"The problem appears to be in [`StoreForm`](https://github.com/mario-jerkovic/Relay-FragmentVariables/blob/master/js/components/App.js#L15) - StoreForm is not passing variables to StoreTicketList as props. You should be able to fix this by either:
- Not passing the second `{...variables}` argument in https://github.com/mario-jerkovic/Relay-FragmentVariables/blob/master/js/components/App.js#L31
- Or by leaving that and _also_ passing all of the variables on line 15 as props to the inner component.

I would also highly recommend trying this on Relay master - we added some refinements to this warning and I'm not sure if they made the cut for the last release. I have a feeling that doing option 1 above plus upgrading to master will fix this warning.
",josephsavona,2017-01-30 23:07:27
1218,2016-06-24 07:20:43,"Sorry for the late response.

I have tried both solutions, and also updated relay to master branch, and sadly none of them worked, getting the same error message...I mean if that is an issue with relay then ok, probably it's solvable, it's just annoying to see that error message
",mario-jerkovic,2017-01-30 23:07:27
1218,2016-06-28 14:42:36,"Also getting this warning in scenario where I use only initialVariables and setVariables within one component to fetch data on demand and I don't pass any variables via fragments.

Is @mario-jerkovic repro case enough to identify the issue or should I provide more details?
",jardakotesovec,2017-01-30 23:07:27
1218,2016-06-28 15:14:16,"I did get a chance to look at @mario-jerkovic's repo and while I didn't have a chance to take a closer look at it (let alone find a solution) I did confirm that my original suggestion didn't help, because the issue is caused by `setVariables` (unlike mine, which wasn't). Sorry!

@jardakotesovec sounds like you've come exactly to the right place – hopefully someone can help you guys out!
",skosch,2017-01-30 23:07:27
1218,2016-06-28 16:24:30,"@jardakotesovec Do you have an isolated repro that would help us debug?
",josephsavona,2017-01-30 23:07:27
1218,2016-06-28 16:30:14,"@josephsavona Nope.. but I can attempt to create repro in relay playground tomorrow if that would help.
",jardakotesovec,2017-01-30 23:07:27
1218,2016-06-28 16:51:34,"@jardakotesovec That would be _super_ helpful in diagnosing this.
",josephsavona,2017-01-30 23:07:27
1218,2016-06-28 19:33:22,"@josephsavona I will recreate my repo in playground if the repo by itself wasent helpful 
",mario-jerkovic,2017-01-30 23:07:27
1218,2016-06-28 20:37:23,"@mario-jerkovic I looked at the repo to try diagnose, but it would definitely be much easier for us to run and debug if you can repro in the Relay playground.
",josephsavona,2017-01-30 23:07:27
1218,2016-06-29 08:09:11,"@josephsavona Here is the Relay Playground link (sorry for just copy and pasting, I have tried to use many link shortners but it always says that it's invalid :smile: )

https://facebook.github.io/relay/prototyping/playground.html#source=%0Aclass%20TicketList%20extends%20React.Component%20%7B%0A%20%20constructor(props)%20%7B%0A%20%20%20%20super(props)%3B%0A%20%20%7D%0A%0A%20%20filterHandler%20%3D%20()%20%3D%3E%20%7B%0A%20%20%20%20const%20%7Brelay%7D%20%3D%20this.props%3B%0A%0A%20%20%20%20relay.setVariables(%7B%0A%20%20%20%20%20%20filter%3A%20%7B%0A%20%20%20%20%20%20%20%20subject%3A%20!relay.variables.filter%20%3F%20%7B%20__e%3A%20'something'%20%7D%20%3A%20%7B%20__ne%3A%20'else'%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%0A%20%20%7D%3B%0A%0A%20%20render()%20%7B%0A%20%20%20%20return%20(%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Ch1%3ETickets%3C%2Fh1%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7Bthis.filterHandler%7D%3EChange%20filter%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%7B%60Active%20filters%3A%20%24%7BJSON.stringify(this.props.relay.variables.filter%2C%20null%2C%202)%7D%60%7D%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3Cul%3E%0A%20%20%20%20%20%20%20%20%20%20%7Bthis.props.store.ticketConnection.edges.map(edge%20%3D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cli%20key%3D%7Bedge.node.id%7D%3E%7Bedge.node.title%20%2B%20'%20'%20%2B%20edge.node.subject%7D%20(ID%3A%20%7Bedge.node.id%7D)%3C%2Fli%3E%0A%20%20%20%20%20%20%20%20%20%20)%7D%0A%20%20%20%20%20%20%20%20%3C%2Ful%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20)%3B%0A%20%20%7D%0A%7D%0A%0Aconst%20StoreListTickets%20%3D%20Relay.createContainer(TicketList%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20first%3A%205%2C%0A%20%20%20%20after%3A%20null%2C%0A%20%20%20%20last%3A%20null%2C%0A%20%20%20%20before%3A%20null%2C%0A%20%20%20%20filter%3A%20null%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20store%3A%20(variables)%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Store%20%7B%0A%20%20%20%20%20%20%20%20ticketConnection(first%3A%20%24first%2C%20last%3A%20%24last%2C%20before%3A%20%24before%2C%20after%3A%20%24after%2C%20filter%3A%20%24filter%20)%20%7B%0A%20%20%20%20%20%20%20%20%20%20edges%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20node%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20title%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20subject%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%0A%20%20%7D%0A%7D)%3B%0A%0Aclass%20StoreForm%20extends%20React.Component%20%7B%0A%20%20%0A%20%20constructor(props)%20%7B%0A%20%20%20%20super(props)%3B%0A%20%20%20%20this.state%20%3D%20%7B%0A%20%20%20%20%20%20clickMe%3A%20false%0A%20%20%20%20%7D%0A%20%20%7D%0A%20%20%0A%20%20render()%20%7B%0A%20%20%20%20return%20(%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20%7Bthis.setState(%7B%20clickMe%3A%20!this.state.clickMe%20%7D)%7D%7D%3E%0A%20%20%20%20%20%20%20%20%20%20First%20click%20%22change%20filter%22%20than%20ME%20%3A)%0A%20%20%20%20%20%20%20%20%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Ch1%3EStore%20-%20tickets%3C%2Fh1%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%7Bthis.props.viewer.store.name%7D%20(ID%3A%20%7Bthis.props.viewer.store.id%7D)%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3CStoreListTickets%20store%3D%7Bthis.props.viewer.store%7D%20%2F%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20)%3B%0A%20%20%7D%0A%7D%0A%0Aconst%20App%20%3D%20Relay.createContainer(StoreForm%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20id%3A%20%22c3RvcmU6MQ%3D%3D%22%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20viewer%3A%20(variables)%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Viewer%20%7B%0A%20%20%20%20%20%20%20%20store(id%3A%20%24id)%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20%20%20%20%20%24%7BStoreListTickets.getFragment('store')%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%0A%20%20%7D%0A%7D)%3B%0A%0Aclass%20AppHomeRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'AppHomeRoute'%3B%0A%20%20%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20viewer%3A%20()%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20%7B%0A%20%20%20%20%20%20%20%20viewer%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0AReactDOM.render(%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BApp%7D%0A%20%20%20%20route%3D%7Bnew%20AppHomeRoute()%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A)%3B%0A&schema=import%20%7B%0A%20%20GraphQLID%2C%0A%20%20GraphQLInt%2C%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%20%20GraphQLInputObjectType%0A%7D%20from%20'graphql'%3B%0A%0Aimport%20%7B%0A%20%20connectionArgs%2C%0A%20%20connectionDefinitions%2C%0A%20%20connectionFromArray%2C%0A%20%20fromGlobalId%2C%0A%20%20globalIdField%2C%0A%20%20nodeDefinitions%2C%0A%7D%20from%20'graphql-relay'%3B%0A%0A%2F%2F%20Model%20types%0Aclass%20Root%20%7B%7D%0Aclass%20Store%20%7B%7D%0Aclass%20Ticket%20%7B%7D%0A%0A%2F%2F%20Mock%20data%0Aconst%20viewer%20%3D%20new%20Root()%3B%0A%20%20%20%20%20%20viewer.id%20%3D%20'1'%3B%0A%20%20%20%20%20%20viewer.name%20%3D%20'Anonymous'%3B%0A%0Aconst%20stores%20%3D%20%5B%0A%20%20%7B%20name%3A%20'Store-1'%2C%20ticket%3A%20%5B1%2C2%2C3%5D%20%7D%2C%0A%20%20%7B%20name%3A%20'Store-2'%2C%20ticket%3A%20%5B2%2C4%2C3%5D%20%7D%2C%0A%20%20%7B%20name%3A%20'Store-3'%2C%20ticket%3A%20%5B2%2C%205%5D%20%7D%0A%5D.map((%7B%20name%2C%20ticket%20%7D%2C%20i)%20%3D%3E%20%7B%0A%20%20const%20a%20%3D%20new%20Store()%3B%0A%0A%20%20a.name%20%3D%20name%3B%0A%20%20a.ticket%20%3D%20ticket%3B%0A%20%20a.number%20%3D%20i%3B%0A%20%20a.id%20%3D%20%60%24%7Bi%7D%60%3B%0A%0A%20%20return%20a%3B%0A%7D)%3B%0A%0Aconst%20tickets%20%3D%20%5B%0A%20%20%7B%20title%3A%20'Test-1'%2C%20subject%3A%20'Subject-1'%20%7D%2C%0A%20%20%7B%20title%3A%20'Test-2'%2C%20subject%3A%20'Subject-2'%20%7D%2C%0A%20%20%7B%20title%3A%20'Test-3'%2C%20subject%3A%20'Subject-3'%20%7D%2C%0A%20%20%7B%20title%3A%20'Test-4'%2C%20subject%3A%20'Subject-4'%20%7D%2C%0A%20%20%7B%20title%3A%20'Test-5'%2C%20subject%3A%20'Subject-5'%20%7D%2C%0A%20%20%7B%20title%3A%20'Test-6'%2C%20subject%3A%20'Subject-6'%20%7D%0A%5D.map((%7B%20title%2C%20subject%20%7D%2C%20i)%20%3D%3E%20%7B%0A%20%20const%20a%20%3D%20new%20Ticket()%3B%0A%0A%20%20a.title%20%3D%20title%3B%0A%20%20a.subject%20%3D%20subject%3B%0A%20%20a.id%20%3D%20%60%24%7Bi%7D%60%3B%0A%0A%20%20return%20a%3B%0A%7D)%3B%0A%0Aconst%20exportObject%3D%20%7B%0A%20%20getRoot%3A%20(id)%20%3D%3E%20id%20%3D%3D%3D%20viewer.id%20%3F%20viewer%20%3A%20null%2C%0A%20%20getViewer%3A%20()%20%3D%3E%20viewer%2C%0A%20%20getStore%3A%20(id)%20%3D%3E%20stores.find(w%20%3D%3E%20w.id%20%3D%3D%3D%20id)%2C%0A%20%20getStores%3A%20()%20%3D%3E%20stores%2C%0A%20%20getConnectedTickets%3A%20(array)%20%3D%3E%20(array.map(id%20%3D%3E%20(tickets.find(w%20%3D%3E%20parseInt(w.id)%20%3D%3D%3D%20id))))%2C%0A%20%20getTicket%3A%20(id)%20%3D%3E%20tickets.find(w%20%3D%3E%20w.id%20%3D%3D%3D%20id)%2C%0A%20%20getTickets%3A%20()%20%3D%3E%20tickets%2C%0A%20%20Root%2C%0A%20%20Store%2C%0A%20%20Ticket%0A%7D%3B%0A%0Aconst%20%7BnodeInterface%2C%20nodeField%7D%20%3D%20nodeDefinitions(%0A%20%20(globalId)%20%3D%3E%20%7B%0A%20%20%20%20const%20%7Btype%2C%20id%7D%20%3D%20fromGlobalId(globalId)%3B%0A%20%20%20%20if%20(type%20%3D%3D%3D%20'Viewer')%20%7B%0A%20%20%20%20%20%20return%20exportObject.getRoot(id)%3B%0A%20%20%20%20%7D%20else%20if%20(type%20%3D%3D%3D%20'store')%20%7B%0A%20%20%20%20%20%20return%20exportObject.getStore(id)%3B%0A%20%20%20%20%7D%20else%20if%20(type%20%3D%3D%3D%20'ticket')%20%7B%0A%20%20%20%20%20%20return%20exportObject.getTicket(id)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20null%3B%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20(obj)%20%3D%3E%20%7B%0A%20%20%20%20if%20(obj%20instanceof%20exportObject.Root)%20%7B%0A%20%20%20%20%20%20return%20viewerType%3B%0A%20%20%20%20%7D%20else%20if%20(obj%20instanceof%20exportObject.Store)%20%20%7B%0A%20%20%20%20%20%20return%20storeType%3B%0A%20%20%20%20%7D%20else%20if%20(obj%20instanceof%20exportObject.Ticket)%20%20%7B%0A%20%20%20%20%20%20return%20ticketType%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20null%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A)%3B%0A%0Aconst%20ticketType%20%3D%20new%20GraphQLObjectType(%7B%0A%20%20name%3A%20'Ticket'%2C%0A%20%20fields%3A%20()%20%3D%3E%20(%7B%0A%20%20%20%20id%3A%20globalIdField('ticket'%2C%20(%7B%20id%20%7D)%20%3D%3E%20id)%2C%0A%20%20%20%20title%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20resolve%3A%20(%7B%20title%20%7D)%20%3D%3E%20title%0A%20%20%20%20%7D%2C%0A%20%20%20%20subject%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20resolve%3A%20(%7B%20subject%20%7D)%20%3D%3E%20subject%0A%20%20%20%20%7D%0A%20%20%7D)%2C%0A%20%20interfaces%3A%20()%20%3D%3E%20%5BnodeInterface%5D%0A%7D)%3B%0A%0Aconst%20%7B%20connectionType%3A%20ticketConnection%2C%20edgeType%20%3A%20graphQLTicketEdge%2C%20%7D%20%3D%20connectionDefinitions(%7B%20name%3A%20'Ticket'%2C%20nodeType%3A%20ticketType%20%7D)%3B%0A%0Aconst%20FilterObject%20%3D%20new%20GraphQLInputObjectType(%7B%0A%20%20name%3A%20'FilterObject'%2C%0A%20%20fields%3A%20%7B%0A%20%20%20%20__e%3A%20%7B%20type%3A%20GraphQLString%20%7D%2C%0A%20%20%20%20__ne%3A%20%7B%20type%3A%20GraphQLString%20%7D%0A%20%20%7D%0A%7D)%3B%0A%0Aconst%20storeType%20%3D%20new%20GraphQLObjectType(%7B%0A%20%20name%3A%20'Store'%2C%0A%20%20fields%3A%20()%20%3D%3E%20(%7B%0A%20%20%20%20id%3A%20globalIdField('store'%2C%20(%7B%20id%20%7D)%20%3D%3E%20id)%2C%0A%20%20%20%20number%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLInt%2C%0A%20%20%20%20%20%20resolve%3A%20(%7B%20number%20%7D)%20%3D%3E%20number%0A%20%20%20%20%7D%2C%0A%20%20%20%20name%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20resolve%3A%20(%7B%20name%20%7D)%20%3D%3E%20name%0A%20%20%20%20%7D%2C%0A%20%20%20%20ticketConnection%3A%20%7B%0A%20%20%20%20%20%20type%3A%20ticketConnection%2C%0A%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20filter%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20type%3A%20new%20GraphQLInputObjectType(%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Filter'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20fields%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20%7B%20type%3A%20FilterObject%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20subject%3A%20%7B%20type%3A%20FilterObject%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20...connectionArgs%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resolve%3A%20(%7B%20ticket%20%7D%2Cargs)%20%3D%3E%20connectionFromArray(exportObject.getConnectedTickets(ticket)%2C%20args)%0A%20%20%20%20%7D%0A%20%20%7D)%2C%0A%20%20interfaces%3A%20()%20%3D%3E%20%5BnodeInterface%5D%0A%7D)%3B%0A%0Aconst%20%7B%20connectionType%3A%20storeConnection%2C%20edgeType%20%3A%20graphQLStoreEdge%2C%20%7D%20%3D%20connectionDefinitions(%7B%20name%3A%20'Store'%2C%20nodeType%3A%20storeType%20%7D)%3B%0A%0Aconst%20viewerType%20%3D%20new%20GraphQLObjectType(%7B%0A%20%20name%3A%20'Viewer'%2C%0A%20%20description%3A%20'Viewer'%2C%0A%20%20fields%3A%20()%20%3D%3E%20(%7B%0A%20%20%20%20id%3A%20globalIdField('Viewer')%2C%0A%20%20%20%20store%3A%20%7B%0A%20%20%20%20%20%20type%3A%20storeType%2C%0A%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20id%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20type%3A%20GraphQLID%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resolve%3A%20(_%2C%20%7B%20id%20%7D)%20%3D%3E%20exportObject.getStore(fromGlobalId(id).id)%0A%20%20%20%20%7D%2C%0A%20%20%20%20storeConnection%3A%20%7B%0A%20%20%20%20%20%20type%3A%20storeConnection%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20(_%2C%20args)%20%3D%3E%20connectionFromArray(exportObject.getStores()%2C%20args)%0A%20%20%20%20%7D%2C%0A%20%20%20%20ticket%3A%20%7B%0A%20%20%20%20%20%20type%3A%20ticketType%2C%0A%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20id%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20type%3A%20GraphQLID%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resolve%3A%20(_%2C%20%7B%20id%20%7D)%20%3D%3E%20exportObject.getTicket(fromGlobalId(id).id)%0A%20%20%20%20%7D%2C%0A%20%20%20%20ticketConnection%3A%20%7B%0A%20%20%20%20%20%20type%3A%20ticketConnection%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20(_%2C%20args)%20%3D%3E%20connectionFromArray(exportObject.getTickets()%2C%20args)%0A%20%20%20%20%7D%0A%20%20%7D)%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%0A%7D)%3B%0A%0Aconst%20queryType%20%3D%20new%20GraphQLObjectType(%7B%0A%20%20name%3A%20'Query'%2C%0A%20%20fields%3A%20()%20%3D%3E%20(%7B%0A%20%20%20%20node%3A%20nodeField%2C%0A%20%20%20%20viewer%3A%20%7B%0A%20%20%20%20%20%20type%3A%20viewerType%2C%0A%20%20%20%20%20%20resolve%3A%20()%20%3D%3E%20exportObject.getViewer()%0A%20%20%20%20%7D%0A%20%20%7D)%0A%7D)%3B%0A%0Aexport%20default%20new%20GraphQLSchema(%7B%0A%20%20query%3A%20queryType%0A%7D)%3B%0A
",mario-jerkovic,2017-01-30 23:07:27
1218,2016-06-29 15:53:53,"@mario-jerkovic This is _super_ helpful, thank you for taking the time to create this. Having the playground instance makes it pretty clear what's happening - the `setState` from the parent causes RelayContainer to recheck its props and it ends up comparing the variables in those props (empty, nothing is being passed) with what it fetched (the local `setVariables` changes) and reporting the discrepancy. This is just a warning so feel free to ignore for now, I'll work on a fix (I'd normally suggest creating a PR but this is a notoriously tricky area in Relay).
",josephsavona,2017-01-30 23:07:27
1218,2016-06-29 18:48:48,"No problem, I am glad that I could help 😃 
",mario-jerkovic,2017-01-30 23:07:27
1218,2016-07-01 22:41:22,"Thank goodness I found this page. I have the same scenario as @jardakotesovec and get the same warnings. It took me days to suspect that I used Relay wrongly.
",philiptzou,2017-01-30 23:07:27
1218,2016-12-22 17:06:03,"Any news on this, in our relay app we have the global filter that starts with initialVariables but can be modified later by users interaction with users setVariables. There is no parent to pass this props down and we are receiving this warning.",mjurincic,2017-01-30 23:07:27
1218,2016-12-22 17:20:23,"@mjurincic We're working on a new variation of RelayContainer that avoids issues such as these, and that will hopefully be available within the next release or two. 

For now, this is just a warning.",josephsavona,2017-01-30 23:07:27
1218,2017-01-30 23:07:27,"Closing this as there's nothing actionable here. New Relay APIs and core are already rolling out to `master`, and will continue to do so over the coming weeks/months. Thanks for all the input on this issue, folks!",wincent,2017-01-30 23:07:27
1217,2016-06-15 16:24:25,"I was expected a mutation to have a debounce/throttle system, like you could define on it a delay to wait before the mutation will be sent to network but the optimistic update would apply instantly. This is important to not spam the server for all the kind of mutations that are ""idempotents"" and always replace a state.
For instance, if I am drag-moving an object that is saved with Relay, I don't want to send ALL pending positions but only want to debounce this.
throttling would be interesting too (important subtlety between debounce and throttle)

Is there a way with Relay? a workaround?
I tend to think it should be solved by Relay because the optimistic updates is important to be used for this to work properly (and without repeating the logic).
",gre,2016-06-15 17:54:42
1217,2016-06-15 17:42:28,"Instead of commitUpdate() you can use applyUpdate(), which does the optimisticUpdate but doesnt send it to the server

<S_CODE_TOKEN>
",BlooJeans,2016-06-15 17:54:42
1217,2016-06-15 17:43:36,"Also, if you want to do any kind of custom batching/aggregation, you can use a custom network layer. [This](https://github.com/nodkz/react-relay-network-layer) is a good example of some of the things that can be done.
",wincent,2016-06-15 17:54:42
1217,2016-06-15 17:54:42,"sounds good! thanks for your fast answer!
",gre,2016-06-15 17:54:42
1217,2016-06-15 18:01:04,"works great!
",gre,2016-06-15 17:54:42
1216,2016-06-15 12:17:35,"Fixes #1208

That `invariant` doesn't seem to make sense in that function, removing it will allow us to use `rangeBehavior` functions with other types than string.

@josephsavona
",xuorig,2016-06-16 22:01:34
1216,2016-06-15 16:31:16,"Thanks for the fix! I checked the internal discussion and it indeed seems like an oversight.

Would you mind adding a test case to [`getRangeBehavior`](https://github.com/facebook/relay/blob/master/src/mutation/__tests__/getRangeBehavior-test.js)?
",kassens,2016-06-16 22:01:34
1216,2016-06-15 17:47:32,"Added a regression test @kassens !
",xuorig,2016-06-16 22:01:34
1216,2016-06-15 21:40:15,"@xuorig see comment about the return type
",josephsavona,2016-06-16 22:01:34
1216,2016-06-15 22:08:07,"I'll fix up the return type before merging this.

@facebook-github-bot import
",kassens,2016-06-16 22:01:34
1216,2016-06-15 22:08:55,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1719125375028451/int_phab) to review.
",ghost,2016-06-16 22:01:34
1216,2016-06-15 22:36:45,"Thanks @kassens !
",xuorig,2016-06-16 22:01:34
1216,2016-06-16 02:08:24,"I applied this patch locally to my copy of Relay and it fixed the problem for me. Thanks for fixing @xuorig!
",keithpitt,2016-06-16 22:01:34
1215,2016-06-15 00:35:20,"How to call injectNetworkLayer without token when bootstrapping, and then overwrite the networklayer after signing in, like the following code shows:

<S_CODE_TOKEN>
",ron-liu,2016-06-15 18:12:51
1215,2016-06-15 04:01:20,"Very strange, but it should work.
Version 0.8.0 send noisy warning to console, when Default network layer was reinjected. But all works properly. Try to update till 0.8.1 or 0.9.0.

If it does not help, you may try my OSS implementation of network layer https://github.com/nodkz/react-relay-network-layer It contains several good middlewares, which solves common tasks.

So your code may be implemented such way:

<S_CODE_TOKEN>

Also was discussion where and how to store a token on the client side: https://github.com/nodkz/react-relay-network-layer/issues/6
",nodkz,2016-06-15 18:12:51
1215,2016-06-15 11:27:46,"I already in 0.9.0, I am sure when calling injectNetworkLayer second time, it will cause an exception.

@nodkz, thanks for your powerful library, I will use it soon. 
",ron-liu,2016-06-15 18:12:51
1215,2016-06-15 18:12:51,"I'd recommend using @nodkz's layer like he describes. The intention is to not inject new network layers all the time, but rather inject a single layer that is flexible enough to embody your desired behavior. (We made this stricter in response to bugs that cropped up internally in large apps where we were trying to update the layer in multiple places and unknowingly clobbering previous adjustments.)

As I think this is now resolved, going to mark it as closed.
",wincent,2016-06-15 18:12:51
1214,2016-06-14 23:13:37,,wincent,2016-06-15 00:46:33
1214,2016-06-14 23:13:49,"@facebook-github-bot import
",wincent,2016-06-15 00:46:33
1214,2016-06-14 23:30:23,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1082302481849430/int_phab) to review.
",ghost,2016-06-15 00:46:33
1213,2016-06-14 22:52:37,"Hi,
## Problem

I'm implementing a `RANGE_DELETE` mutation on a connection which nodes does not have `id` property.

The way I got it working is to send the node `__dataID__` as a mutation argument, and the server send it back in the mutation payload (which I belive is a strange thing to do).
## Proposal

Allow the `deletedIDFieldName` to be a function (in which I would return `this.props.node.__dataID__` directly). I can provide a PR relatively fast if you think this is the right way to go ?
### My detailed use case

Users playing multiple musical instruments, which you can fetch througt the following query

<S_CODE_TOKEN>

On his probile page, he can add/remove the instruments he plays. here is the Relay mutation

<S_CODE_TOKEN>

This way, the server desn't have to care about an id it never seen.
",IcanDivideBy0,2017-01-30 22:34:30
1213,2016-06-30 07:06:56,"i have a similar use case where i don't need data from the server to implement the RANGE_DELETE, function would work for me as well.
",mhahn,2017-01-30 22:34:30
1213,2017-01-30 22:34:30,"Thanks for the suggestion, @IcanDivideBy0. At the moment this is considered legacy API and we're unlikely to change it: instead, we are suggesting that people move to the newer `Relay.GraphQLMutation` API which is static, and closely aligned with the way Relay is heading in the future (we have a new core and APIs already starting to roll out on the `master` branch and will continue merging in new stuff over the coming weeks and months). As such, I'm going to close this, but thank you for your suggestion. Once the modern API is out, I'd welcome you to open a new issue or PR if you find that the API still isn't meeting your requirements. Thanks once again for your input!",wincent,2017-01-30 22:34:30
1212,2016-06-14 13:45:57,"`toBeDOMComponentWithTag` is deprecated and has been replaced by `toBeComponentOfType`. See https://github.com/facebook/react/blob/master/src/test/reactComponentExpect.js#L170-178

Related to facebook/react#6536 
",apaatsio,2016-06-14 18:01:39
1212,2016-06-14 14:45:32,"Makes sense, thanks!
",wincent,2016-06-14 18:01:39
1212,2016-06-14 14:45:36,"@facebook-github-bot import
",wincent,2016-06-14 18:01:39
1212,2016-06-14 14:54:18,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/699045416902437/int_phab) to review.
",ghost,2016-06-14 18:01:39
1211,2016-06-14 04:33:42,"Some files where missed in 829450ab74aa5c6b0cdb453cb76b1fbc45f16687.

The TodoMVC React Native app is still on an older version but seems to need some bigger changes.
",kassens,2016-06-14 17:47:31
1210,2016-06-11 16:08:53,"I'm exploring Relay but using it with React Native, I saw some implementations that are using react-native-router-flux to handle the routes, but a reduce its also being created:

<S_CODE_TOKEN>

Does this mean that we can create as many store, actions, reducers as we need and make our components work with Relay as Containers??? Isn't Relay a replacement for Redux in terms of Glabal State Management?

Lets say that I got an initial Launcher Component, with redux, on componentDidMount I would call an  action to check if there is any local session, then according to the response I can call `Actions.sign()` or `Actions.home()` 

With Relay how can I can handle this? Can both work together?
",CoericK,2016-06-15 18:37:54
1210,2016-06-15 02:21:31,"I'm not quite sure what the issue here is (Stack Overflow might be a better place for a high level question like this), but the quick answer is that Relay is _not_ a replacement for Redux, and in fact co-operates quite nicely with Redux. Relay provides it's own store that manages all the GraphQL data you fetch and mutate in your application; Redux provides a store that manages anything else you want to model. On RN, the Redux store might be somewhere you manage navigation state, for example.
",NevilleS,2016-06-15 18:37:54
1210,2016-06-15 18:37:53,"Yeah, I think there are probably two appropriate forums for this kind of question:
1. Stack Overflow for concrete technical questions about _how_ to make architect an app using Relay and Redux (or any other local state management solution, Flux-like or otherwise).
2. [relay-future](https://github.com/relayjs/relay-future) For forward-looking discussion of possible directions for integrated local state management in Relay.

On that latter subject, we're not actively working on it right now — we're currently focused on getting the core abstractions solid and performant on potentially low-power, network-poor mobile devices — but we thin that problems like tackling local state will be good goals to focus on next.

In the meantime going to mark this one as closed. Thanks for your quesion @CoericK, and for your input @NevilleS.
",wincent,2016-06-15 18:37:54
1209,2016-06-10 19:51:46,"@facebook-github-bot import
",JenniferWang,2016-06-15 21:31:33
1208,2016-06-10 07:07:36,"v0.9 introduces a way to declare `rangeBehaviors` as a function (56e52d38c6adc77bcc83926993ae39dec51bb100). This is super useful and I cannot thank you enough for this! However, they introduces a new restriction:

<S_CODE_TOKEN>

This is an issue if your connection is defined like this:

<S_CODE_TOKEN>

The `invariant` test may fail on valid arguments. The following `calls` would raises an error:

<S_CODE_TOKEN>

`rangeBehaviors` object notation isn't affected by this issue because `calls` values are serialized.
",ooflorent,2016-06-16 22:01:34
1208,2016-06-15 06:52:34,"@xuorig Since you are the one who proposed this changed and implemented it, could you bring some insight about this issue? Particularly _why is `getObjectFromCalls` denying non-string values?_
",ooflorent,2016-06-16 22:01:34
1208,2016-06-15 07:15:45,"I actually hit this problem myself. I looked around the supporting code, and I couldn't find a reason as to why it's there. The error message itself is actually the same as another in the same commit https://github.com/facebook/relay/commit/56e52d38c6adc77bcc83926993ae39dec51bb100#diff-fe15bf16b6fdab1fc8ae96d4902f0f83R50 and https://github.com/facebook/relay/commit/56e52d38c6adc77bcc83926993ae39dec51bb100#diff-fe15bf16b6fdab1fc8ae96d4902f0f83R77

My current theory is that it could be a copy/paste error (since the error message itself doesn't actually make much sense in this context). Maybe it's easier if we open a PR to remove that check and continue the discussion there?
",keithpitt,2016-06-16 22:01:34
1208,2016-06-15 12:12:23,"Strange I don't remember adding this check in my PR @ooflorent. This was possibly added on FB side when they imported, so I might be missing some context.

I agree that this really should not be there! We should either remove the check or look for `undefined` there probably...
",xuorig,2016-06-16 22:01:34
1208,2016-06-15 18:09:55,"> This was possibly added on FB side when they imported, so I might be missing some context.

It was added by @josephsavona with the comment ""lint/flow fixes"", so maybe he recalls what the lint/flow errors were that prompted the change.
",wincent,2016-06-16 22:01:34
1208,2016-06-15 21:38:45,"I remember that I simplified the PR a bit, which prompted some type-fixing. Good catch, the type of call.value should be mixed ([here](https://github.com/facebook/relay/commit/56e52d38c6adc77bcc83926993ae39dec51bb100#diff-fe15bf16b6fdab1fc8ae96d4902f0f83R76)). Anyone interested in fixing in a PR ;-)?
",josephsavona,2016-06-16 22:01:34
1208,2016-06-16 07:04:32,"@josephsavona: @xuorig has submitted a fix yesterday (#1216)
",ooflorent,2016-06-16 22:01:34
1207,2016-06-09 22:43:37,"Closes #1188.
",steveluscher,2016-06-21 18:47:02
1207,2016-06-09 22:47:22,"It's not in 0.27 yet. Will wait for a new release.
",steveluscher,2016-06-21 18:47:02
1207,2016-06-21 18:47:02,"Confirmed working in 0.28.0.rc-0, so could use that, or wait for 0.28.0. Either way, will need to happen in the new examples repo (#1227) instead of here, so I've created [an issue](https://github.com/relayjs/relay-examples/issues/1) over there (note: may not be public yet at the time you read this) and I'm going to mark this one as closed.
",wincent,2016-06-21 18:47:02
1206,2016-06-09 17:57:49,"I'm trying to do a this.props.relay.forceFetch() from a component to force the containers' fragments to re-query the server, but it never calls the server.  The ReadyState just says `{ready: true, done: true, stale: false}`. 

Sorry for the verboseness, but I included some extra fields / fragments in the query in case it makes a difference.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

when calling `doForceFetch()`, it immediately fires the console.log with

<S_CODE_TOKEN>

According to the docs (https://facebook.github.io/relay/docs/guides-ready-state.html), I would've expected it to call the console.log twice:

> Once with ready, done, and stale set to true.
> Once with ready and done set to true, but stale set to false.

I tried stepping through the forceFetch(), but I don't understand the internal workings very well, so I couldn't figure it out.
",BlooJeans,2017-01-30 22:30:27
1206,2016-06-28 21:12:23,"Were you trying to have a null props initially (based on how you initialize the `PostView` component with nulls and then fetch them later? When you pass `null`, `RelayContainer` will have zero information to use to figure out how to refetch the view. It uses the `RelayFragmentPointer` created by the `RelayRenderer` to do that. Have you tried not passing `null`s to `PostView`?
",yuzhi,2017-01-30 22:30:27
1206,2017-01-30 22:30:27,"Closing due to lack of activity. Thanks for filing the issue. If you still have concerns or questions or feedback, please feel welcome to open up a new issue.",wincent,2017-01-30 22:30:27
1205,2016-06-08 23:09:09,,wincent,2016-06-09 21:31:33
1205,2016-06-08 23:09:14,"@facebook-github-bot import
",wincent,2016-06-09 21:31:33
1205,2016-06-08 23:12:38,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/293436564326553/int_phab) to review.
",ghost,2016-06-09 21:31:33
1204,2016-06-08 23:06:50,,wincent,2016-06-09 21:16:36
1204,2016-06-08 23:06:56,"@facebook-github-bot import
",wincent,2016-06-09 21:16:36
1204,2016-06-08 23:12:32,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1621541858136789/int_phab) to review.
",ghost,2016-06-09 21:16:36
1203,2016-06-08 20:39:15,"Relay is generating an `id` field on a union type where all types in the union type do not implement `Node`. Here’s a schema (with names obfuscated):

<S_CODE_TOKEN>

With a query that looks like:

<S_CODE_TOKEN>

Relay generates an id field so the query that gets sent looks more like:

<S_CODE_TOKEN>

This of course fails on the server.

**Edit:** In the original post, I omit that `A` implemented `Node`. `A implements Node` was therefore retrospectively added. See [this](https://github.com/facebook/relay/issues/1203#issuecomment-224786705) comment.
",calebmer,
1203,2016-06-08 23:37:03,"cc @josephsavona
",yuzhi,
1203,2016-06-09 00:56:27,"Weird. We should only be generating an `id` field when the parent type implements `Node`; otherwise we add a `...on Node {id}` instead (which would work here). That logic is in [RelayQLPrinter](https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/RelayQLPrinter.js#L462-L466). I'll try to think of a short-term workaround. In the meantime, you might try logging in the babel plugin and try to figure out what's going on (why is `hasField('id')` true for that union?)
",josephsavona,
1203,2016-06-09 02:40:13,"@josephsavona Turns out in this instance `A` does implement `Node`. Didn’t know that was important. I’ve updated the schema.

That still shouldn’t be correct though right?
",calebmer,
1203,2016-06-09 03:34:43,"The fact that `A` implements node isn't what Joe means by the ""parent type"" here - the parent of the faulty `id` field you're describing is the union type `B`. `B` shouldn't have an `id` field, but the RelayQLPrinter is getting fooled into thinking it does.
",NevilleS,
1203,2016-06-09 03:51:03,"You should check your schema.json for the definition of the `B` type. It should look something like this:

<S_CODE_TOKEN>

I suspect your union type `B` actually has fields, so your schema isn't quite what you are sharing here...
",NevilleS,
1203,2016-06-09 05:31:48,"What @NevilleS said :-)
",josephsavona,
1203,2016-06-09 14:42:16,"Here’s what the introspection query result is. Names and descriptions are obfuscated of course.

<S_CODE_TOKEN>
",calebmer,
1203,2016-06-09 14:52:41,"Hm. Alright, I'd recommend you add a snippet like this to `RelayQLPrinter.printField`:

<S_CODE_TOKEN>
",NevilleS,
1202,2016-06-07 20:33:20,"Hello, 
I have been trying to research this and the answers i am finding doesn't apply to what i am trying to accomplish. 

All the answers I am finding are requiring the schema to be within the same project as the GraphQL api. 

example: #865, #71

I want my front end relay/react client to  call on  GraphQL from a separate code source.  It is a separate project and does not have access to the Schema file. (unless i symlink it. that is hacky IMO). 

The Error i am getting is<S_CODE_TOKEN>
Invariant Violation: RelayQL: Unexpected invocation at runtime. Either the Babel transform was not set up, or it failed to identify this call site. Make sure it is being used verbatim as `Relay.QL`.
[1]     at invariant (/Users/rterysen/projects/React-Relay-Boilerplate/node_modules/fbjs/lib/invariant.js:38:15)
[1]     at Object.RelayQL [as QL] (/Users/rterysen/projects/React-Relay-Boilerplate/node_modules/react-relay/lib/RelayQL.js:40:52)
[1]     at Viewer (routes.js:11:23)
[1]     at wrappedQuery (/Users/rterysen/projects/React-Relay-Boilerplate/node_modules/isomorphic-relay-router/node_modules/react-router-relay/lib/QueryAggregator.js:140:22)
[1]     at Object.Query (/Users/rterysen/projects/React-Relay-Boilerplate/node_modules/react-relay/lib/buildRQL.js:95:16)
[1]     at Object.instrumentedCallback [as Query] (/Users/rterysen/projects/React-Relay-Boilerplate/node_modules/react-relay/lib/RelayProfiler.js:137:40)
[1]     at /Users/rterysen/projects/React-Relay-Boilerplate/node_modules/react-relay/lib/getRelayQueries.js:56:36
[1]     at Array.forEach (native)
[1]     at Object.getRelayQueries (/Users/rterysen/projects/React-Relay-Boilerplate/node_modules/react-relay/lib/getRelayQueries.js:49:31)
[1]     at Object.instrumentedCallback [as getQueries] (/Users/rterysen/projects/React-Relay-Boilerplate/node_modules/react-relay/lib/RelayProfiler.js:137:40)
<S_CODE_TOKEN>

Can anyone give me some advice on this?
```
",rterysen-openroad,2016-06-07 21:57:58
1202,2016-06-07 21:57:58,"Found  way of grabbing schema here. 

https://github.com/facebook/relay/issues/206#issuecomment-138186103
",rterysen-openroad,2016-06-07 21:57:58
1202,2016-12-28 20:25:57,"I was trying out something and I bumped into this.

I created first login of my `react-native` app using react-native and redux. 

So initially my `.babelrc` was

<S_CODE_TOKEN>
After this I installed my packages using `npm install`. 
Now my post login functionality is built up in graphql, so I thought lets bring in Relay, so I changed my .babelrc to following:-
<S_CODE_TOKEN>

Now, when i compiled my app again I was hitting the issue.

I deleted the `node_modules` folder and ran `npm install` again post which it works fine.
",jinxac,2016-06-07 21:57:58
1201,2016-06-07 17:30:25,"What is the reason for `ConnectionFields` requiring this? 

We have a use-case where we always want to query and display all nodes the backend returns. In this case `first/list/find` just feels a bit awkward as the frontend should not be aware of how many items the backend returns and otherwise we would have to write something like `first: 10000`.

Is there any chance this part of the spec will be relaxed?
",Globegitter,2016-06-08 23:53:34
1201,2016-06-07 18:13:33,"The reason this restriction was added is that pretty much every connection can grow large for some user. What if there are actually 10 000 objects? It would probably make the client slow and put a lot of stress on the server. If there's business logic keeping the number pretty low, you can also consider using a plural field instead of a connection.

Can you share more about your use case?
",kassens,2016-06-08 23:53:34
1201,2016-06-08 00:55:22,"I tried to find a previous issue where we discussed this previously but I couldn't (looked here and in the GraphQL repos + Stack Overflow), but I am pretty sure there is some discussion of it _somewhere_.

Connections pretty much _only_ exist to enable pagination, and you generally want pagination in order to work with datasets that are too expensive to fetch in their entirety, or infeasible to process or display on the client due to the volume of data. As such, the ""fetch all pages"" scenario isn't really core, which is why it is possible but not necessarily beautiful (because you have to do something like `first: $maximumSafeInt`).

In that other issue that I can't find right now, we've recommended to do exactly that (see the [TODO example](https://github.com/facebook/relay/blob/9631b1222834f77b636b47d4a11ab5ead79f04aa/examples/todo/js/components/TodoListFooter.js#L66), for example), or use a plural like @kassens says.
",wincent,2016-06-08 23:53:34
1201,2016-06-08 09:40:12,"@kassens In our use case the end-user does not have direct control over the objects that will be displayed for them (that is handled by certain enterprise users), so we know that the number will be relatively stable (it could grow or shrink by a few numbers though). In fact we are not showing the list of objects directly, but each object belongs to a category and we are showing it grouped by that category. So again, while the number of categories can change, they are not controlled by the end-user and we know they will stay relatively stable (at least following our current business requirements). The main reasons for me choosing `ConnectionField` was because the list does have some metadata on it and also what I am writing below.

@wincent We where using a list originally but after reading more about `ConnectionFields` (https://github.com/graphql/graphql-relay-js/issues/27#issuecomment-142421989, https://github.com/facebook/relay/issues/444#issuecomment-146907987, https://github.com/facebook/relay/issues/444#issuecomment-192034175) I wanted to try and embrace them to the fullest: e.g. not just use them for pagination but for lists that just have some metadata, like total_count or extra information about each node and also use them for lists where we do not need pagination but proper mutation support. Having started to go down that road maybe it is better to just use `ConnectionFields` for pagination and Lists for everything else. 

I suppose it would just be great to have one clear message, e.g. Only use `ConnectionFields` when you need the pagination future otherwise use `Lists` and Relay can handle both fully. Or 'always' use `ConnectionFields` but they are flexible enough to support a variety of use-cases.

Slightly OT: I actually paused my work on fixing #444 because right now I tried to go down the second path (i.e. 'always' use `ConnectionFields`) but maybe it would just be better to have Relay properly support `Lists` (happy to finish up my work on that and make a PR) and people can then pick and choose what to use themselves. 

That are just my thoughts on that overall topic based on my current understanding of the situation.

In any case thanks for getting back so quickly it is appreciated.
",Globegitter,2016-06-08 23:53:34
1201,2016-06-08 23:24:41,"@Globegitter: So, if I am understanding you correctly, you are saying that lists are like an iPad, connections are like a Mac Pro, and there is room for an iMac model somewhere in the middle. It is hard to strip away complexity from connections, but more straightforward to add power to lists, I think (the #444 approach).
",wincent,2016-06-08 23:53:34
1201,2016-06-08 23:34:28,"Quoting @dschafer 

> Without a limiting filter like `first` or `last`, the behavior of the connection is undefined. The server could return every item in the list (which could mean we're massively overfetching if the list grows in size), it could just return a default value; the client has no idea. Clearly, the client has some idea of the behavior that it wants: it should specify that behavior with a `first:` or `last:` filter. If you want up to N items, do `(first: N)`. If you want all items, ask yourself: if there were 1,000,000 items in the future, would you want to fetch all of them? The answer is clearly no; you would want to cap it at some reasonable limit X. In that case, do `(first: X)`.
",yuzhi,2016-06-08 23:53:34
1201,2016-06-08 23:35:37,"@yuzhi: That's the comment I was looking for!
",wincent,2016-06-08 23:53:34
1201,2016-06-08 23:53:33,"@wincent @yuzhi Thank you for the comments and yes I think the iPad/Mac Pro/iMac analogy is quite spot on.

I can see the point that @dschafer is making and that clarifies the `ConnectionField` use-case fully and this can be closed. I would agree then that it makes most sense to add more power to lists, which then gives users full flexibility. Will try and finish the work on that soon.
",Globegitter,2016-06-08 23:53:34
1200,2016-06-07 05:22:12,"I have this login case

<S_CODE_TOKEN>

When login succeeds, everything is okay. However, when GraphQL server responds with an error (i.e. user not found), this error shows.

<S_CODE_TOKEN>

btw, the response body is

<S_CODE_TOKEN>

Why is this happening?
",aihornmac,2016-06-07 19:11:38
1200,2016-06-07 18:45:21,"Interesting, it looks like it's failing to add to the `pendingTransactions` map, or deleted somehow. When it tries to get the error, the transaction does not exist anymore.

whats `relayCommitUpdate` here @aihornmac ?
",xuorig,2016-06-07 19:11:38
1200,2016-06-07 18:47:39,"it's a helper function to make commitUpdate into promise style, source code appended

<S_CODE_TOKEN>
",aihornmac,2016-06-07 19:11:38
1200,2016-06-07 18:51:09,"So I think what's happening here is that the transaction is rollbacked and removed from pending transactions.

When you try to `getError()` on the transaction, it looks for it in the pending ones and 💥 
",xuorig,2016-06-07 19:11:38
1200,2016-06-07 18:55:54,"Is it a bug? How should I fix this?
",aihornmac,2016-06-07 19:11:38
1200,2016-06-07 19:02:05,"I'm not sure if it's a bug, but the error message here definitly doesnt help.

I think it has to do with your promise. I believe `handleCommitFailure` expected `onFailure` to run inline, so the transaction is rollbacked before your own `onFailure` is ran.

Can you run it inline (without the promise) ? it should work as expected because you can access the transaction before it's rollbacked. 
",xuorig,2016-06-07 19:11:38
1200,2016-06-07 19:11:38,"You are totally right! When I try `getError` before rejection, it doesn't throw anymore! Thank you for help!
",aihornmac,2016-06-07 19:11:38
1200,2016-06-07 19:13:24,"np!, Still pretty surprising behaviour though, wonder what you think of this issue @josephsavona
",xuorig,2016-06-07 19:11:38
1200,2016-06-07 19:39:38,"Yet I am surprised that getError has to be run before next loop.
",aihornmac,2016-06-07 19:11:38
1200,2016-06-07 20:12:46,"Hmm - I agree that `getError` would ideally work even after the transaction was rolled back. Anyone interested in submitting a PR to change?
",josephsavona,2016-06-07 19:11:38
1200,2016-06-07 20:20:17,"I'll try to come up with something this week @josephsavona 
",xuorig,2016-06-07 19:11:38
1199,2016-06-03 13:51:13,"I added a simple fully working example for downloading a GraphQL schema from the server.
The examples in the repository only mention the generation of schemas locally.
I struggled a little till I found all the details on how to create a schema json that the babel plugin needs via the Introspection Query, and it also needed a good amount of time to realize a introspection query is in the utilities.

So I thought this might make it easier for other people who do not start of an example, but want to contact a existing GraphQL server.

Have found #1149 recently that is highly related, I just wanted the example to be completely working and still simple, rather than only be an idea people would have to write a script around.
",lukaswelte,2016-06-03 23:16:30
1199,2016-06-03 17:25:51,"@facebook-github-bot import
",wincent,2016-06-03 23:16:30
1199,2016-06-03 17:26:01,"Thanks! 
",wincent,2016-06-03 23:16:30
1199,2016-06-03 17:41:06,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1714378158824258/int_phab) to review.
",ghost,2016-06-03 23:16:30
1198,2016-06-03 02:25:07,"1)
Looking at debug output of my mutation, I can see that my field:  `user { color }`  is not included in the **Mutation Configs --> FIELDS_CHANGE_>Tracked Fragment Query** section. 
I believe this is because prior to the mutation, `user { color }` is null. 

2)
The **Mutation Configs --> FIELDS_CHANGE_>Fat Fragment Query** section does include user { color } 

3) 
Naturally, the **Mutation Configs --> FIELDS_CHANGE_>Intersected Fragment Query** does not include user { color } ..  because it is not included in the tracked section.. because it is null I believe..

4) 
My GraphQL server mutation is returning an object with user { color } defined and non-null. But since it is not included in the Intersected Fragment Query, it is not being updated in the store. If I do a forceFetch, the store gets update correctly, but I would like the store to update naturally, by including the `color` field in the mutation response. I can see in the mutation onSuccess() callback that it is not there. 

How can we track (and intersect) and update fields with null values so that they can be updated by the mutation ?

Thank you,
",dguillamot,2017-01-30 23:49:51
1198,2016-06-03 04:16:55,"https://facebook.github.io/relay/docs/guides-mutations.html#required-children
If we haven't shown the coupons in the UI at the time the
mutation runs, they've never been fetched and the `coupons`
field in the fat query would normally be ignored.
`REQUIRED_CHILDREN` forces it to be retrieved anyway.

<S_CODE_TOKEN>

After that you'll see this `field` in the `onSuccess` callback.
",nodkz,2017-01-30 23:49:51
1198,2016-06-03 07:50:16,"Thank @nodkz , adding REQUIRED_CHILDREN does indeed add the fields to the mutations onSuccess result, however the store is still not updated correctly, and the Intersected Fragment Query still does not include the `user { color }` field. Hmm
",dguillamot,2017-01-30 23:49:51
1198,2016-06-03 08:55:19,"Yep, store will not updated. You should process it onSuccess callback.
",nodkz,2017-01-30 23:49:51
1198,2016-06-03 18:00:44,"That doesn't seem like a good thing. If fields in a model can't go from `null` to a filled value without having to refresh the store or manually update the date? Is there a way to force the store to track a certain field?
",grydstedt,2017-01-30 23:49:51
1198,2016-06-04 02:02:15,"Hmm. REQUIRED_CHILDREN isn't the right solution here: that's only meant for data that you need access to in the mutation callback (say, the id of a newly created item) and the fields there are ignored by Relay.

Relay should be tracking fields even if they're null. Can you provide a bit more information to help us debug? For example, can you copy the output of the Relay mutation debugger from console?
",josephsavona,2017-01-30 23:49:51
1198,2017-01-30 23:49:51,"Closing this due to staleness/inactivity. The new Relay core and APIs don't do any tracking anyway, in favor of entirely static mutations, so there is likely no further action to be taken here (the new core/APIs are currently rolling out on the `master` branch in pieces, with more coming in the next few weeks/months.

Thanks to everybody who participated in this thread!",wincent,2017-01-30 23:49:51
1197,2016-06-02 15:12:03,"I noticed some behavior that, at first glance seems unexpected, but very well could be as designed.

**tl;dr:** Lots (_n_, where _n_ is number of nodes in connection) node queries are created to fulfill data needs for nodes in a connection.

See here for a video you can watch of what occurs: http://n.hudk.in/gKx7

and see here:
https://boiling-lowlands-71549.herokuapp.com/ for a deployed version of the relay TODO example modified to exhibit said unexpected (though perhaps correct?) behavior.

The relevant RelayContainer fragment definitions can be seen here:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

You can reproduce this, by adding several Todos then clicking ""Extra Fields"" in the footer which will route to /complete/extra (and render TodoListExtra), TodoListExtra's data needs will be satisfied by the Relay Store, except for the additional field titled: `extra` at which point **n** node queries will be made to fulfill the `extra` field for the `todo` nodes in the `todos` connection.

This seems correct as far as ensuring proper data is fetched, but could result in some VERY nasty requests with larger data sets. 

Is there a better way to get some extra data about nodes you have already fetched without so many node queries?

An optimization (in my head) would be something along the lines of:

`nodes(ids: $listOfNodeIds) { extra }` 

Looking forward to hearing if others have experienced this, have solved it, or if it's something that is worth considering further as an improvement to relay.
",nickhudkins,2016-06-02 18:21:01
1197,2016-06-02 15:21:42,"I'm also interested in this... Nick and I discussed this a bit and it seems like a dangerous ""gotcha!"" that requesting additional fields on a connection fragment would result in N queries instead of just a single fetch. My guess is that this is done to avoid refetching the connection (and therefore potentially changing which edges exist), but that tradeoff might not actually be what you want, especially if N is large!
",NevilleS,2016-06-02 18:21:01
1197,2016-06-02 17:16:39,"Thanks for asking about this. This has [come up before](https://github.com/facebook/relay/issues/724#issuecomment-169669734). From my answer there:

> Relay creates a new node query intentionally - it saves the server the work of fetching the list itself (it would also be more complicated to generate a more optimal query - to a person it's easy to see, but there can be weird edge cases and it's simplest to use node calls).

Internally we use a batching network layer that would send all n queries in a single request. In OSS @nodkz has built something similar that I'd recommend trying: https://github.com/nodkz/react-relay-network-layer
",josephsavona,2016-06-02 18:21:01
1197,2016-06-02 18:21:00,"Awesome. thank you! I wish I had searched better :) 
",nickhudkins,2016-06-02 18:21:01
1197,2016-06-02 18:38:54,"All good!
",josephsavona,2016-06-02 18:21:01
1196,2016-06-02 07:13:12,"## RelayNetworkDebug

From `Relay@^0.8.0` available relay requests debugger `RelayNetworkDebug`

<S_CODE_TOKEN>

 ![screenshot](https://cloud.githubusercontent.com/assets/1946920/15735688/688ccabe-28bc-11e6-82e2-db644eb698b0.png)
## _ _ DEV _ _=true

From `Relay@^0.9.0` became availiable relay's [extended mutation debugger](https://twitter.com/steveluscher/status/738101549591732225). 
<img width=""366"" alt=""screen shot 2016-06-02 at 12 34 35"" src=""https://cloud.githubusercontent.com/assets/1946920/15735975/6dcbfc6e-28be-11e6-99d7-86812df4b928.png"">

For activation via browser's console: type `__DEV__=true`. 
Due webpack build process you may use `webpack.BannerPlugin('__DEV__=true;', {raw: true})` or `webpack.DefinePlugin({__DEV__: true})`.

In [Changelog 0.9.0](https://github.com/facebook/relay/releases) absent underscores for `__DEV__`. Not clean understandable how to turn this debugger.
",nodkz,
1196,2016-06-02 07:16:53,"## And again about Documentation

May be somebody add a `Debugging` article to documentation. Also will be great if leave article about `scheduling` (thanks to last Joseph talk, I don't know that this cool feature exists).

My english right now is to bad to write articles, and I hate to do it, cause spent a lot of time. I prefer to write some code. 

May be at facebook exists so-so-coders that under dismissal ;), and may be somebody will became a brilliant technical writer ;) Good coder IS NOT good writer and vise versa. So for documentation I think should exist dedicated person.

Also it will be interesting to read about Docker's OSS results: https://blog.docker.com/2016/05/open-source-docker-part-1-people/ I think they can not reach such results without their clean documentation.
",nodkz,
1196,2016-06-02 17:41:43,"PSA: If you're using a custom relay environment, be sure to do

<S_CODE_TOKEN>
",BlooJeans,
1196,2016-06-23 01:45:53,"> My english right now is to bad to write articles, and I hate to do it, cause spent a lot of time. I prefer to write some code.

This is a legit stance!

Is anybody else able to whip up a PR? I'm cleaning house trying to prepare the next release this week, so I can't promise getting to it myself, but a ""Debugging"" page in the docs would be great.

Thanks for bringing this up @nodkz, and thanks @BlooJeans for the PSA.
",wincent,
1195,2016-06-01 01:30:04,"Hi!

I'm using this query

<S_CODE_TOKEN>

included as:

<S_CODE_TOKEN>

Which, after using `.setVariables({disease: ...})`, attempts to send this query:

<S_CODE_TOKEN>

And it fails with error message `Cannot query field ""node"" on type ""Query"".`

However, if I were to change the above query (playing in graph_i_QL) to:

<S_CODE_TOKEN>

It executes correctly, except that it's not using the variable. 

I am using `react-relay` v0.7.3. Also, I'm using [`react-router-relay` v0.10.1](https://github.com/relay-tools/react-router-relay/tree/v0.10.1) for routing and setting [queries](https://github.com/relay-tools/react-router-relay/tree/v0.10.1#routes-and-queries) to:

<S_CODE_TOKEN>

Any ideas how to fix this?
",markogresak,2016-06-01 12:20:31
1195,2016-06-01 02:07:14,"Apparently moving the `${MedicationSelect.getFragment('options')}` together with `${DiseaseSelect.getFragment('options')}` into same field, as in:

<S_CODE_TOKEN>

solves the problem I was having.
Can someone explain why this was happening? 
",markogresak,2016-06-01 12:20:31
1195,2016-06-01 12:20:31,"The last comment didn't solve the problem fully, it was still missing using the variable as argument.

I have noticed that the graphQL schema was missing `nodeDefinitions`, as in there was no `node: nodeField` and no `interfaces: [nodeInterface]`. I should've looked through the tutorial more thoroughly. 
",markogresak,2016-06-01 12:20:31
1194,2016-05-31 20:27:14,,steveluscher,2016-05-31 23:46:34
1194,2016-05-31 20:27:20,"@facebook-github-bot import
",steveluscher,2016-05-31 23:46:34
1194,2016-05-31 20:28:36,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/971918099572509/int_phab) to review.
",facebook-github-bot,2016-05-31 23:46:34
1193,2016-05-31 17:44:57,"We don't need to call `getPromise()` on `Deferred` in order to invoke `catch()`; we can just invoke `catch()` directly.

I did some of this a while back in D3183390, but since then, [[ https://github.com/facebook/fbjs/commit/e3cd4970f5 | e3cd4970f5 ]] landed in fbjs, adding a `catch` method to `Deferred`, and as of [[ https://github.com/facebook/relay/commit/d653f0e5443 | d653f0e5443 ]] we're using the latest release of fbjs in Relay, so we can make use of it.
",wincent,2016-06-11 01:31:29
1193,2016-05-31 17:45:34,"@facebook-github-bot import
",wincent,2016-06-11 01:31:29
1193,2016-05-31 17:51:39,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/476822405858499/int_phab) to review.
",ghost,2016-06-11 01:31:29
1192,2016-05-31 17:10:33,"I picked up relay-stater-kit few weeks ago. Everything works perfectly with default mock data but as soon as the database comes in, it breaks.

This is the relevant part of the code. Everything is very basic and pretty much the default. It has only two types and a single connection. 

<S_CODE_TOKEN>

**Im using MongoDB and Mongoose.**
# **First thing I tried:**

<S_CODE_TOKEN>
### Returned format (_console.log_) is similar to this:

<S_CODE_TOKEN>
### Warning in browser console:

<S_CODE_TOKEN>
### Or the following error in GraphiQL:

<S_CODE_TOKEN>
# **Second thing I tried:**

<S_CODE_TOKEN>
### Returned format (_console.log_) is similar to this:

<S_CODE_TOKEN>

**This is the exact same format (obviously different keys-values) as starter kit mock data returns.**
### Warning in browser console:

<S_CODE_TOKEN>
### Error in GraphiQL:

<S_CODE_TOKEN>

Unfortunately there's no errors to track (or Im just too green to find any) and I couldn't find any more information about the problem. I've spent 2 days on this, what am I missing? What does it expect?
",unirey,2016-05-31 20:17:48
1192,2016-05-31 20:17:48,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. **Be sure to mention what database ORM you're using** (ie. what provides the `lean()` and `find()` functions?). Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2016-05-31 20:17:48
1192,2016-06-01 08:23:05,"@unirey, you spent so much effort to write this issue...
I can not pass by without helping to you ;)

### minor problem

<S_CODE_TOKEN>

`find(...).exec()` returns promise if u call it without callback. [http://mongoosejs.com/docs/promises.html]

So you wrapping is redundant. Use such way:

<S_CODE_TOKEN>

Right now I'm using without `exec`, but it think it may be problems with mongod errors:

<S_CODE_TOKEN>

### major problem

<S_CODE_TOKEN>

`connectionFromArray` waits, that will be provided array in the first argument, not promise.

so try this

<S_CODE_TOKEN>

u wait when `getUserPosts` promise resolves, in `then` get result (array) from this promise and pass it to `connectionFromArray`.   

I think it should work after this changes.
",nodkz,2016-05-31 20:17:48
1192,2016-06-01 08:30:46,"use async await

<S_CODE_TOKEN>
",alexhawkins,2016-05-31 20:17:48
1192,2016-06-01 08:59:43,"graphql-relay provides a [connectionFromPromisedArray](https://github.com/graphql/graphql-relay-js/blob/master/src/connection/arrayconnection.js#L50) function which waits until the promise resolves. `resolve: (user, args) => connectionFromPromisedArray(getUserPosts(user.id), args),` which probably is the most recommended/easiest way when dealing with promised connections.
",edvinerikson,2016-05-31 20:17:48
1192,2016-06-01 14:17:58,"Ooh, yes. These are exactly the answers that I was hoping to give… on Stack Overflow. Can we get this question/answer series up there? That way, the answers can live on to help others, rather than languishing in a closed GitHub issue.
",steveluscher,2016-05-31 20:17:48
1192,2016-06-01 16:16:53,"@nodkz, @steveluscher, @edvinerikson, @alexhawkins  Thank you for your suggestions!

I asked this question in SO, you can find it [here](http://stackoverflow.com/questions/37550035/connection-error-with-relay). Im sorry for trashing the issue tracker, I just didn't know where to go after messing with this for several days. It's sometimes tricky to get answer for Relay because there aren't that many users yet. But I know better next time.

Feel free to provide your own answer and it would be awesome if you explained pros and cons that your suggestion has (if it has) with few sentences or if there's a suggested way to do this with Relay and Node.

The current answer to my question in SO was very eye-opening, I spent whole day in YT watching videos and reading articles - I finally discovered and wrapped my head around async JavaScript.
",unirey,2016-05-31 20:17:48
1192,2016-06-01 18:22:49,"Upvoted. This makes me so happy. Thanks everyone!
",steveluscher,2016-05-31 20:17:48
1192,2016-06-01 18:24:45,"…although I'd love to see @edvinerikson's answer up there too :)
",steveluscher,2016-05-31 20:17:48
1191,2016-05-30 15:41:16,"First of all thank you for Relay. Its a very useful and powerful framework. I have developed a fairly big web application using Relay but Google bot is unable to crawl the pages. All the pages appear blank to Google bot.

Please advise me what to do to make Relay components crawlable by search engines.

Thanks.
",nikhildaga,2016-05-30 16:20:53
1191,2016-05-30 16:20:53,"Hi! Thanks for your question. We have an ongoing discussion about this in #136, but the short version is: use https://github.com/denvned/isomorphic-relay/ to do server rendering. I'm going to close this since there's already an open issue on this topic, please feel free to ask more questions at #136.
",josephsavona,2016-05-30 16:20:53
1190,2016-05-30 01:48:35,"`this.props.relay.variables` now has the post-`prepareVariables` values, and `prepareVariables` usually looks something like this:

<S_CODE_TOKEN>

So why don't we pull a Redux, and simplify `initialVariables` + `prepareVariables` to:

<S_CODE_TOKEN>

Relay can call `variables(undefined)` to get the equivalent of `prepareVariables(initialVariables)` today. 
",devknoll,2016-06-28 16:38:17
1190,2016-05-30 16:32:41,"I like the direction of trying to simplify the API if possible. I'm not sure about this exact proposal though. The reducer approach makes it pretty easy to write a bug; for example, the code above seems right but would always return `{size: NaN}`. This could be fixed by changing the function to return `size: prevVariables ? (prevVariables.size * devicePixelRatio) : DEFAULT_SIZE` or similar, but that seems like a recipe for confusion (and bug reports, issues, etc). For a lot of cases developers don't need `prepareVariables`, either, so this makes the common case harder.
",josephsavona,2016-06-28 16:38:17
1190,2016-05-30 16:58:04,"> for example, the code above seems right but would always return {size: NaN}

Was actually just a typo. I agree that the ternary case is much more confusing, but thankfully not necessary ;-)

> For a lot of cases developers don't need prepareVariables, either, so this makes the common case harder.

<S_CODE_TOKEN>

doesn't seem like too much more work ;-) Relay could also allow a signature of `Object | (Object?) => Object` to bring back the simplicity of `initialVariables`.

The main point is that there doesn't seem to be much benefit in having both an `initialVariables` and a `prepareVariables`. 
",devknoll,2016-06-28 16:38:17
1190,2016-05-30 17:42:25,"I can add 5 cents:
Allowing to provide vars to relay container without the `initialVariables` declaration save lot of time for newbies. 

In past I spent couple of hours to understand, that passed variable to relay does not work because it was not listed in `initialVariables`.
",nodkz,2016-06-28 16:38:17
1190,2016-06-28 16:38:16,"After some consideration, I think that this is the wrong API and we aren't going to pursue it. The presence of `prepareVariables` is itself a bit of a hack; it gives product developers a way to adjust variables but substantially complicates the framework. In particular it messes with static analysis of queries - having to run an arbitrary user function is the definition of dynamic. In the future we would like to re-evaluate ways for developers to define even more dynamic queries and improve this API, but for now we'd prefer to keep the more static `initialVariables` style as the default to aid in future framework upgrades.
",josephsavona,2016-06-28 16:38:17
1190,2016-07-01 22:07:29,"@josephsavona FWIW, after you added `prepareParams` to react-router-relay, I've actually never had to use `prepareVariables`. I wonder just how useful `prepareVariables` on containers still is these days.
",taion,2016-06-28 16:38:17
1190,2016-07-01 23:25:45,"@taion Thanks for the feedback. We have a few use-cases internally but I believe that we could find alternative approaches for those.
",josephsavona,2016-06-28 16:38:17
1189,2016-05-29 15:20:13,,Yaxian,2016-06-02 17:16:32
1189,2016-05-30 14:14:02,"It seems that travis-ci checks have failed.
",Yaxian,2016-06-02 17:16:32
1189,2016-06-01 17:34:08,"@facebook-github-bot import

Thanks :)
",kassens,2016-06-02 17:16:32
1188,2016-05-29 12:05:15,"It seems cause by babel v5 which included by fbjs-scripts (react-native 0.26 -> fbjs-scripts 0.4 -> babel 5.x). I also wonder why `babel-node` is executed from babel v5 and not babel-cli v6..

Stacktrace:

<S_CODE_TOKEN>
",chentsulin,2016-06-28 00:17:18
1188,2016-05-31 17:07:17,"Fix on its way in #1183.
",steveluscher,2016-06-28 00:17:18
1188,2016-05-31 20:11:29,"> I also wonder why babel-node is executed from babel v5 and not babel-cli v6..

I suspect that's because `fbjs-scripts` from `react-native` is pulling in a whole set of Babel 5 deps. Exploring this in https://github.com/facebook/react-native/pull/7855
",steveluscher,2016-06-28 00:17:18
1188,2016-06-01 20:16:24,"This should start to work when https://github.com/facebook/react-native/pull/7855 makes its way into a release.
",steveluscher,2016-06-28 00:17:18
1188,2016-06-09 13:28:57,"#7855 has been closed. Any update on this?
",Dielz98,2016-06-28 00:17:18
1188,2016-06-09 16:28:09,"Yep! Waiting for a release of React Native so I can update this. Has it been released since my PR landed? I haven't checked.

> On Jun 9, 2016, at 6:29 AM, Dielz98 notifications@github.com wrote:
> 
> #7855 has been closed. Any update on this?
> 
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub, or mute the thread.
",steveluscher,2016-06-28 00:17:18
1188,2016-06-09 16:31:38,"Looks like it has. I'll do the upgrade!
",steveluscher,2016-06-28 00:17:18
1188,2016-06-09 22:46:27,"Whoops. Spoke too soon. React Native 0.27 doesn't contain https://github.com/facebook/react-native/pull/7855.
",steveluscher,2016-06-28 00:17:18
1188,2016-06-14 12:03:50,"Any workarounds to get the npm start to work, until this fix is available?
",bschandramohan,2016-06-28 00:17:18
1188,2016-06-14 14:38:43,"You can use NPM 2 (i.e. with Node 4) and it should work!

> On Jun 14, 2016, at 8:04 AM, Chandra Mohan notifications@github.com wrote:
> 
> Any workarounds until this fix is available?
> 
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub, or mute the thread.
",steveluscher,2016-06-28 00:17:18
1188,2016-06-21 18:50:51,"> Any workarounds to get the npm start to work, until this fix is available?

I also tried this morning with 0.28.0-rc.0 and was successful:

<S_CODE_TOKEN>
",wincent,2016-06-28 00:17:18
1188,2016-06-22 12:22:11,"No need rc, RN-0.28 has been released.
https://github.com/facebook/react-native/releases
",Dielz98,2016-06-28 00:17:18
1188,2016-06-22 12:43:30,"after upgrading to RN `0.28.0` and React `15.1.0` (also node `v6.0.0` and npm `v3.8.6`) I'm now getting:

<S_CODE_TOKEN>
",barakcoh,2016-06-28 00:17:18
1188,2016-06-22 23:14:44,"Error said:

`Please include the following file with any support request: /Users/barakcohen/workspace/relay/examples/TodoMVC/npm-debug.log`
",Dielz98,2016-06-28 00:17:18
1188,2016-06-23 12:59:14,"sorry, I didn't attach it the 1st time because I couldn't find anything useful. here you go:

<S_CODE_TOKEN>
",barakcoh,2016-06-28 00:17:18
1188,2016-06-28 00:17:18,"This has been fixed by upgrading to React Native 0.28 in https://github.com/relayjs/relay-examples/commit/bb0e16970622484fac2b34914a99e292b4c095a5
",steveluscher,2016-06-28 00:17:18
1188,2016-06-28 09:35:17,"@steveluscher is that private repo? I've got 404 page not found
",Dielz98,2016-06-28 00:17:18
1188,2016-06-28 13:39:28,"Yes @Dielz98, we're just waiting for the person with the right privileges to flip the switch.
",wincent,2016-06-28 00:17:18
1187,2016-05-29 08:12:12,"Add our project as an user of relay in production.
",ErrorPro,2016-05-31 16:01:46
1187,2016-05-29 13:36:11,"Thanks. The Travis failures are obviously unrelated, so going to see if the bot wants to ship this...
",wincent,2016-05-31 16:01:46
1187,2016-05-29 13:36:14,"@facebook-github-bot shipit
",wincent,2016-05-31 16:01:46
1187,2016-05-29 13:56:57,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/588329451347770/int_phab) to review.
",ghost,2016-05-31 16:01:46
1186,2016-05-28 17:31:28,,piperchester,2016-05-31 20:01:29
1186,2016-05-31 19:05:18,"Thanks!

@facebook-github-bot shipit
",kassens,2016-05-31 20:01:29
1186,2016-05-31 19:27:31,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/279960232347643/int_phab) to review.
",ghost,2016-05-31 20:01:29
1185,2016-05-28 06:23:20,,chentsulin,2016-06-01 19:01:48
1185,2016-05-28 13:04:17,"@facebook-github-bot shipit 
",josephsavona,2016-06-01 19:01:48
1185,2016-05-28 13:04:39,"Thanks!
",josephsavona,2016-06-01 19:01:48
1184,2016-05-28 01:43:46,"We use the `site=` part of the suppression comment to scope a suppression
comment to a specific root. So for example, we could add a comment like

<S_CODE_TOKEN>

and it should only work when you're typechecking relay. Before this change,
however, relay was accepting suppression comments with any site. After, relay
will only accept suppression comments like

<S_CODE_TOKEN>
",gabelevi,2016-05-31 17:46:45
1184,2016-05-28 01:50:42,"@facebook-github-bot shipit
",gabelevi,2016-05-31 17:46:45
1184,2016-05-28 01:59:57,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1610206532628667/int_phab) to review.
",facebook-github-bot,2016-05-31 17:46:45
1183,2016-05-28 00:00:10,"A while ago, we decided to use file: relative version specs in our examples. The idea was that you might want to develop the examples in tandem with Relay or the Babel plugin. Or that you might want to make a backward incompatible change to one of the examples.

In practice, this has kept a lot of people from being able to use the examples because of issues like npm/npm#10379. I'm going to change the dynamic today.

Now, we're going to lock the examples to the release version of react-relay and babel-relay-plugin. This will make the examples run reliably for most of us, and will fix all of the Node 5/6 issues I've just discovered as part of this bug report.

If you want to develop on the examples and Relay in tandem, then you can do a little bit of extra work to npm link your local copy of react-relay and the babel-relay-plugin. A guide on how to set all of that up can be found here: http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears

Closes #1177.
",steveluscher,2016-05-31 17:16:39
1183,2016-05-28 00:01:08,"@facebook-github-bot shipit
",steveluscher,2016-05-31 17:16:39
1183,2016-05-28 00:21:52,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1714466038828483/int_phab) to review.
",ghost,2016-05-31 17:16:39
1182,2016-05-27 23:32:49,,steveluscher,2016-05-28 00:16:31
1182,2016-05-27 23:34:52,"@facebook-github-bot shipit
",steveluscher,2016-05-28 00:16:31
1182,2016-05-27 23:35:59,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/186993901697715/int_phab) to review.
",ghost,2016-05-28 00:16:31
1181,2016-05-27 22:26:03,"Closes #1180.
",steveluscher,2016-05-31 17:16:39
1181,2016-05-27 23:53:06,"![screen shot 2016-05-27 at 4 52 48 pm](https://cloud.githubusercontent.com/assets/13243/15623642/7a262b5c-242b-11e6-8a14-c82db2e40e6d.png)
",steveluscher,2016-05-31 17:16:39
1180,2016-05-27 22:25:34,"…so that we can detect breakage sooner.
",steveluscher,2016-05-31 17:16:39
1179,2016-05-27 21:30:53,,steveluscher,2016-05-31 16:01:46
1179,2016-05-27 21:30:59,"@facebook-github-bot shipit
",steveluscher,2016-05-31 16:01:46
1179,2016-05-27 21:47:16,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/249335368763643/int_phab) to review.
",ghost,2016-05-31 16:01:46
1178,2016-05-27 18:35:23,"Adding this will allow run the examples on /examples directory.
",CoericK,2016-05-31 17:13:31
1178,2016-05-27 18:50:32,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-05-31 17:13:31
1178,2016-05-27 19:12:39,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-05-31 17:13:31
1178,2016-05-27 19:15:04,"@facebook-github-bot import
",CoericK,2016-05-31 17:13:31
1178,2016-05-27 19:39:17,"@CoericK thanks for the PR. We'll take a look and import this as soon as we can (external contributors aren't able to import PRs).
",josephsavona,2016-05-31 17:13:31
1178,2016-05-27 19:40:47,"Np @josephsavona, hope I can get involve more on the comunity.
",CoericK,2016-05-31 17:13:31
1178,2016-05-31 17:13:31,"I'm pretty confident that the root issue is #1177 – namely that npm `preinstall` no longer works as we expect it does. We used to `preinstall` all of Relay and the Babel plugin before even starting to pull in the example apps' dependencies. Npm >=v3 changed how `preinstall` behaves. Our fix for this is to forego this entire step, and install the _release_ versions of Relay and the Babel plugin for use in the example apps (#1183). This should work for most people, most of the time.
",steveluscher,2016-05-31 17:13:31
1177,2016-05-27 18:23:53,,CoericK,2016-06-01 20:20:37
1177,2016-05-27 22:25:03,"Thanks for reporting. Help us find out why:
- What git hash you're on: `git show`
- What `npm -v`
- What `node -v`
- Paste the output of the broken step into a http://gist.github.com
",steveluscher,2016-06-01 20:20:37
1177,2016-05-27 22:39:22,"I've added new build tests for the examples. Every example builds, it would seem (https://travis-ci.org/facebook/relay/builds/133505982) so you must be having trouble executing them?
",steveluscher,2016-06-01 20:20:37
1177,2016-05-27 22:44:17,"Oh, interesting. Even though it looks like those TravisCI builds passed, they actually failed for Node 5 and Node 6. Looking…
",steveluscher,2016-06-01 20:20:37
1177,2016-05-27 22:51:09,"@steveluscher After i knew Relay 0.9 was released i made a fresh clone, then i made npm install on the root of the relay repo, and then moved to the todo example and didnt work.
node: v6.2.0
npm: 3.8.9

I made a pull request https://github.com/facebook/relay/pull/1178
",CoericK,2016-06-01 20:20:37
1177,2016-05-27 23:29:18,"Oh, wow. This entire problem is because the behavior of `npm preinstall` changed in npm 3.x (see https://github.com/npm/npm/issues/10379). We relied on this behavior to fully install & build the local version of `react-relay` and `babel-relay-plugin` before _starting_ to build the example code.
",steveluscher,2016-06-01 20:20:37
1177,2016-05-27 23:59:48,"OK. A while ago, we decided to use `file:` relative version specs in our examples. The idea was that you might want to develop the examples in tandem with Relay or the Babel plugin. Or that you might want to make a backward incompatible change to one of the examples.

In practice, this has kept a lot of people from being able to use the examples because of issues like https://github.com/npm/npm/issues/10379. I'm going to change the dynamic today.

Now, we're going to lock the examples to the _release_ version of `react-relay` and `babel-relay-plugin`. This will make the examples run reliably for most of us, and will fix all of the Node 5/6 issues I've just discovered as part of this bug report.

If you want to develop on the examples and Relay in tandem, then you can do a little bit of extra work to `npm link` your local copy of `react-relay` and the `babel-relay-plugin`. A guide on how to set all of that up can be found here: http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears
",steveluscher,2016-06-01 20:20:37
1177,2016-05-28 00:35:30,"Oh glad that my report helped to make that improvement @steveluscher, let me know if there is anything else that I can test and give feedback.
",CoericK,2016-06-01 20:20:37
1177,2016-06-01 14:21:45,"Still one thing to do. Need to upgrade fbjs-scripts in react-native to get Babel 5 out of the picture for npm 3. I have a PR out for that.
",steveluscher,2016-06-01 20:20:37
1177,2016-06-01 20:20:37,"Merging into #1188.
",steveluscher,2016-06-01 20:20:37
1176,2016-05-27 17:12:10,"This is a partial unbreaking of schema updates given changes to graphql 0.6.0.

""Partial"" because for some unknown reason local to my setup, `npm run update-schema` dies unless I create this `.babelrc` file in the root of the project. Will need to dig in further to solve that one.

<S_CODE_TOKEN>
",wincent,2016-05-27 19:46:41
1176,2016-05-27 17:12:27,"@facebook-github-bot import
",wincent,2016-05-27 19:46:41
1176,2016-05-27 17:13:06,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/248626012172523/int_phab) to review.
",ghost,2016-05-27 19:46:41
1175,2016-05-27 15:44:14,"### The Current Problem

Relay currently requires the `props` to be resolved before it renders a component with the data, which makes sense in a lot of cases. One situation where we're getting some headaches is progressively rendering our components, i.e., rendering the base structure and then rendering the data within the structure when it's available. This will be an especially useful pattern when `.defer()` support is introduced as well.

Currently we're using the `render` method to conditionally render either the wrapped Relay component or just the base component that we export alongside it.

<S_CODE_TOKEN>

This works great for root level components, but we're also using composition to aggregate child container queries so the `render` method of `<BaseComponent/>` returns other Relay containers, which causes errors.

One pattern we've used is to provide a default `viewer` object in `defaultProps` with empty data. This allows us to avoid a bunch of type checks in the `render` methods.

<S_CODE_TOKEN>

We can then either just render an empty version of the component or, if we want, we can just declare `null` values in `defaultProps` and render a `<Loading />`component. We get to declare the empty data structure for each component within the component just like we do with Relay, so each child has its own default `viewer` object with its set of empty values.

Now the issue comes down to this:
- We can conditionally render the base component or the wrapper component at the top level,
  but doing so for children would require a verbose `render` method.
- React requires a prop to be `undefined` to use the value in `defaultProps`
- Relay requires an explicit `null` for viewer

If I try to use `defaultProps` on the child containers themselves I get a bunch of warnings like:

<S_CODE_TOKEN>

Because I have to pass `undefined` otherwise React will not use the empty data object in `defaultProps`. I could declare one top level default object in the root base component and pass it down but that's contrary to how we declare data dependencies in Relay right now.
### Potential Solution

I think it would be great if there was support for declaring default Relay values just like you can declare default props on React components. This would be consistent with how you declare data dependencies at the point of use currently and it would make it a lot easier to progressively render your React component. A potential API might look like: 

<S_CODE_TOKEN>
#### Advantages
- Default data values are colocated with actual data dependencies
- Consistent with current React API, familiar to current users
- Easy to use with composition
- Excellent synergy with `defer()` when it it's supported
#### Disadvantages
-  Not sure how to do default value composition at the root level
#### Alternative Solution

I think another option would be to just have a HOC in userland that wraps your component and manages default props until the `viewer` is available. This is less ideal as I think this is a concept that would fit well within Relay core, but if not maybe we can discuss this.

---

So all in all I think this would make our lives a lot easier, and hopfeully others too! This may be a dumb idea or I'm just missing an obvious alternative, so I'm excited to hear what you guys think.
",aweary,
1175,2016-06-04 16:11:40,"You can use the `render` method on a top level `RelayRenderer` to return the component without the `RelayContainer` wrapper, which is sufficient if your component doesn't render other `RelayContainer`s. 

But the heart of the issue, as I see it, is that if you're rendering containers multiple levels deep you can't efficiently handle this scenario as far as I can tell.
",aweary,
1175,2016-08-09 20:17:04,"We're facing this exact issue. It'd be great if future versions of Relay supported this use case instead of the all-or-nothing approach (right now the only two modes are ""loading"" and ""has everything""). Sometimes it's not desirable to show a big loading spinner between all route changes.
",akre54,
1174,2016-05-27 03:34:04,,steveluscher,2016-05-27 06:16:30
1173,2016-05-27 00:48:43,"Issue likey caused by https://github.com/facebook/relay/commit/173ca148f07f5df069fe098d88fa642ec530f874.
",LegNeato,2016-05-27 01:14:54
1173,2016-05-27 00:57:49,"This issue is that `injectDefaultNetworkLayer` and `injectNetworkLayer` keep track of if they have injected or not separately. If we (edit: I mean relay here) use `injectNetworkLayer` to inject the default, relay sees a layer already injected when an end user user calls `injectNetworkLayer` and throws a warning (because it thinks it is overwriting instead of replacing the default).
",LegNeato,2016-05-27 01:14:54
1173,2016-05-27 00:59:36,"/cc @wincent FYI.
",LegNeato,2016-05-27 01:14:54
1173,2016-05-27 01:03:57,"I don't think we ever intended any external users to use `injectDefaultNetworkLayer` (see ed8d28ee706b31). Like I said on that commit:

> I had previously merely refrained from documenting this method which I don't intend anybody but us to use, but we can go further and literally remove it from the public API.

What is your use case for wanting to override the default _and_ have somebody else override your override?
",wincent,2016-05-27 01:14:54
1173,2016-05-27 01:07:03,"I don't have a use case for that 😄 .

In my `app.js` I am merely calling `injectNetworkLayer` with my custom networking layer **once** and seeing the warning. Debugging shows that the first call that sets the instance var is in relay code and the second call is in my code for my custom layer. This seems like a bug but perhaps I am misunderstanding? Or perhaps you were confused by the ""we"" above (clarified in an edit)?
",LegNeato,2016-05-27 01:14:54
1173,2016-05-27 01:11:27,"Unless you're running 0.9.0 (not released yet) or `master`, this overzealous warning is expected, because it got fixed in d1abc54d5ab6 which is only on `master`. Sorry about that!
",wincent,2016-05-27 01:14:54
1173,2016-05-27 01:14:54,"Ohhhh, I didn't see the fix and didn't catch the the line I patched was different than the one on master! You are totally right, already fixed on master. 👍 

My `instanceof` check might be good for hardening against future bugs but isn't critical. Closing.
",LegNeato,2016-05-27 01:14:54
1172,2016-05-26 22:47:22,,steveluscher,2016-05-27 02:31:25
1171,2016-05-26 21:14:33,,wincent,2016-05-26 23:46:27
1171,2016-05-26 21:14:39,"@facebook-github-bot import
",wincent,2016-05-26 23:46:27
1171,2016-05-26 21:35:04,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1740072409613001/int_phab) to review.
",ghost,2016-05-26 23:46:27
1170,2016-05-26 08:16:57,"I understand that `offset` and `skip` arguments can be added to the query to `ConnectionType` manually, but I reckon that the `first` and `last` together can be utilized to express an offset pagination. For example, `{ first: 25, last: 10 }` may be telling `{ offset: 15, limit: 10 }`. In fact I have tried to implement it in GraphQL server. The problem is, relay throws an error, saying this combination of arguments is not allowed. I hope this limitation could be less critical, so that developers can have their choice over implementing specs.
Thank you!
",aihornmac,2016-07-24 04:40:20
1170,2016-05-26 21:36:29,"Thanks for the feedback!

You've probably already seen the [Relay Cursor Connection spec](https://facebook.github.io/relay/graphql/connections.htm) that outlines our approach to pagination. @leebyron evaluated the multitude of approaches to connections in [this excellent Gist](https://gist.github.com/leebyron/ba600d3137aeaba849d0). In short, a _Relay_ connection is going to continue to use the “connection-wrapped, edge-wrapped” model, but there's nothing stopping you from implementing a connection using the model you've described above.

To do so, simply make sure that your type name ends in something other than “Connection.” That's how we recognize a field as one that implements the connection spec. Note, that once you do so, Relay won't offer any connection diffing when you do new fetches, or range add/delete behaviors when performing mutations.
",steveluscher,2016-07-24 04:40:20
1170,2016-05-27 01:30:13,"Thank you for the references!
Actually I was hoping relay could do the differing job even in window pagination, this may be duplicated with [this issue](https://github.com/facebook/relay/issues/540) though. I found relay not fetching new data with same arguments (i.e. skip: 0, take:10), but one thing about window pagination is even with same arguments, that data might have been stale. So instead of `forceFetch`, I hope on one hand relay can still in charge of refetching control, on the other hand it may offer window pagination.
",aihornmac,2016-07-24 04:40:20
1170,2016-07-24 04:40:20,"Thanks for filing an issue. Let's continue discussion of windowed pagination support at #540.
",josephsavona,2016-07-24 04:40:20
1169,2016-05-26 07:04:24,"I have the following `Mutation`:

<S_CODE_TOKEN>

The first request sent to the server looks like this:

<S_CODE_TOKEN>

After using this mutation a few times, it'll start to look more like this:

<S_CODE_TOKEN>

Notice the growing amount of `id`s in the `thread`. I first tried to remove `thread` from the mutation's `fragments`, but that didn't change anything. Then I thought maybe the component responsible for rendering the items has some kind of dependency on the `thread.id`, but they don't depend on `thread.id`.

How do I prevent this from happening?
",ksmth,2016-05-26 12:23:16
1169,2016-05-26 12:23:16,"closing, as this is a duplicate of https://github.com/facebook/relay/issues/1098
",ksmth,2016-05-26 12:23:16
1168,2016-05-26 03:46:40,"It seems that `npm install` does the following.
- sees `""react-relay"": ""file:../../"",` listed as a dep
- tries to install it
- then when it does sees it has a `prepublish` script and runs it (`""prepublish"": ""node node_modules/fbjs-scripts/node/check-dev-engines.js package.json && npm run build""`)
- don't ask me why `prepublish` runs on `install`...
- then complains it doesn't have access to deps

WAIT

I'm not sure why this is happening at all because

`cd ../.. && npm install --ignore-scripts` should work...

<S_CODE_TOKEN>
",reggi,2016-05-27 06:40:48
1168,2016-05-27 06:40:48,"I cleaned up the examples for the release of [0.9.0](https://github.com/facebook/relay/releases/tag/v0.9.0). Give them a try!
",steveluscher,2016-05-27 06:40:48
1168,2016-05-27 11:17:45,"We're in the middle of a little bit of a revert/unrevert situation, so if anyone wants to try the examples in the next 24 hours or so be sure to check out the v0.9.0 tag:

<S_CODE_TOKEN>
",steveluscher,2016-05-27 06:40:48
1167,2016-05-25 17:04:22,"Title says it all.

We had this case in one of our apps today where some deeply nested data had an issue (and threw an error) but we could have displayed 90% of the ui with just a local error message in the part of the ui where the error is relevant / the data would actually be missing.

So now, if the response has an error but also has some data both the `error` as well as the `props` will get populated (with whatever data it does have), making it possible to increase usability of our apps in certain cases.

Have done some rudimentary testing in our app and it seems to work.
",Globegitter,
1167,2016-07-07 11:23:33,"Merged in master and fixed tests, so is now ready for review. Only the typechecks from master are failing.
",Globegitter,
1167,2016-11-28 17:56:56,"Thanks for the PR. This is tricky, as different products may have different expectations about whether a query should resolve or error in the presence of `errors`. A workaround is to use a custom network layer that simply strips out the errors field and resolves the query normally. ",josephsavona,
1167,2016-11-28 18:02:30,"@josephsavona This PR should have allowed both use-cases you described. We have the same case in our app, sometimes we might want to show a partial UI and sometimes not (i.e. keep the old behaviour).

Why can there not be a behaviour to have both? It seems to me also the most correct thing to do (as this is graphql default), you got some data but also some error, figure out what you want to do with it . And right now with relay we have the data striped out so can not do anything with it.

The problem with stripping out the errors field would be that we would loose any specific error details.

Maybe the cache should not be populated, but some access to the successful data and the error would be useful. Maybe even as a setting/prop in the root container or something.",Globegitter,
1166,2016-05-25 02:29:51,"The community has discussed many potential approaches to handling push data with Relay. One of the more complex aspects of this problem seems to be the fact that a change in data can have multiple / varying effects on the UI. Think the like count problem. While this is addressed by mutations in a synchronous request-response model, there isn't a lot of clarity around how subscriptions will fit in.

One approach I've been thinking of is to use the mutations API to achieve this but I wanted to get some feedback to make sure it's not a completely crazy idea.

Here goes: Given any change in the graph is essentially a mutation, what if GraphQL published the payload (along with meta-data about the client side mutation) to a pub-sub service in addition to returning the payload to the original client? 

When a subscriber receives a message with the mutation payload, it can call Relay.commitUpdate with a localPayload prop which will tell your custom network layer to skip the network request and resolve the mutation locally with the payload received from the pub-sub service.

High level architecture:
![relay realtime data - new page](https://cloud.githubusercontent.com/assets/262722/15525756/f565c966-226f-11e6-834b-17947168375d.png)

The benefits of this approach could be (assuming I'm not missing any major complexities):
1. You can implement this today with the existing APIs.
2. Your components already understand how to deal with incoming data i.e. no changes to your  Relay.QL fragments unlike having a special Subscriptions construct.
3. The solution is opaque as far as Relay AND your components are concerned and you're not messing with Relay internals.

Some cons I can think of:
1. Only GraphQL can publish as the payload will always need to be in a shape that the client-side mutation understands (not necessarily a bad thing)
2. Not entirely sure if and how this will impact relay's internal cache, tracked queries, queuing etc.

Would be great to get your feedback on whether this is an avenue worth pursuing!
",zuhair-naqvi,2016-07-04 02:46:24
1166,2016-05-25 03:41:48,"Yup! At a high level, what you're describing is the approach that we are pursuing with GraphQL subscriptions. Relay is designed to process subscription payloads the same as mutation payloads: given the mutation/subscription query, config, and payload, it correctly updates the cache and notifies affected components. 

I wrote a [brief note](https://github.com/facebook/relay/issues/541#issuecomment-213093469) about how to implement real-time updates today using (mostly-public) APIs. Basically, your server can push mutation payloads to the client, and you can manually apply them to the store. I'd encourage you to try out this approach and let us know how it works. 

Also see #559, which has more context on how we're thinking about the future of the API: more low-level primitives that you can use in different ways. 
",josephsavona,2016-07-04 02:46:24
1166,2016-05-25 03:47:09,"re the ""cons"":
- any approach would involve the server generating data, so the first con is more of a natural aspect of a push architecture 
- as I mentioned, Relay can process subscriptions just like mutations, so everything that you can do with mutations will also work here (and limitations of the mutations API also apply, such as being able to append/prepend/remove items on ranges)
",josephsavona,2016-07-04 02:46:24
1166,2016-05-26 00:47:12,"Thanks for the clarification @josephsavona! If the subscription API is the same as the mutation API, then why a separate Subscription Type just for the sake of it? Why not something like Relay.Store.commitUpdateLocal(Mutation, Payload)? This way, you can reuse your mutations when data is pushed from the server as well as support client state if you wanted to right?
",zuhair-naqvi,2016-07-04 02:46:24
1166,2016-07-04 02:46:24,"Closing as this is possible today, and will be covered by #559: we're working toward a new core API that will allow ""writing"" data to the local store. 
",josephsavona,2016-07-04 02:46:24
1165,2016-05-25 00:02:13,,steveluscher,2016-05-25 20:45:33
1165,2016-05-25 00:02:18,"@facebook-github-bot shipit
",steveluscher,2016-05-25 20:45:33
1165,2016-05-25 00:11:16,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/954280861352898/int_phab) to review.
",ghost,2016-05-25 20:45:33
1164,2016-05-23 17:49:10,"Correcting a bunch of indentations and adding a invariant to ensure we always return a string (or error).
",kassens,2016-05-23 20:55:35
1164,2016-05-23 18:46:56,"@facebook-github-bot import
",kassens,2016-05-23 20:55:35
1164,2016-05-23 18:51:30,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/941575942621931/int_phab) to review.
",ghost,2016-05-23 20:55:35
1163,2016-05-23 17:33:50,"Right now the mutation transacion gets its error attribute set differently on server-side non-200 responses  (e.g. 500) compared to 200 responses that include the `errors` attribute in the json. On the latter it is an `Error` object as described in the docs but on the first we still get the normal fetch `Response`. (So https://facebook.github.io/relay/docs/api-reference-relay-store.html#commitupdate-static-method is not completely right)

That also means handling these two different cases in the mutation `onFailure` call requires two very different pieces of logic. 

This PR now makes it so that transaction.getError() always returns an `Error`, and if it was a non-200 response it also includes that status code.
",Globegitter,2016-07-18 18:31:48
1163,2016-05-24 17:01:23,"Thanks @Globegitter. This looks pretty good to me. One comment inline though, otherwise looks good to import.
",wincent,2016-07-18 18:31:48
1163,2016-05-24 22:57:07," @wincent Oh yeah sorry forgot to remove that again. Just rebased.
",Globegitter,2016-07-18 18:31:48
1163,2016-05-25 01:04:47,"@facebook-github-bot import
",steveluscher,2016-07-18 18:31:48
1163,2016-05-25 01:06:08,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/110971109322117/int_phab) to review.
",ghost,2016-07-18 18:31:48
1163,2016-06-28 00:03:39,"Ping! I left some comments in the code that came up after an internal code review.
",steveluscher,2016-07-18 18:31:48
1163,2016-07-07 06:45:27,"@steveluscher sorry about the delay, was a bit busy and then went on holiday (well still am). Just looked over sharing the code and yes we can share some code, but they are also slightly different scenarios (i.e. a non-200 response is might to not return json).

Overall I do think I agree with you though so I'll updating the PR now.
",Globegitter,2016-07-18 18:31:48
1163,2016-07-07 11:22:22,"Only typecheck (same as on master) is failing so good to review again @steveluscher 
",Globegitter,2016-07-18 18:31:48
1162,2016-05-22 10:57:19,"I am learning React + Graphql + Relay ... and i am fighting for a few hours with this situation: - my component looks like this

<S_CODE_TOKEN>

as u can see, there is a select in there that is correctly triggering the setLimit handler ... inside setLimit i have this.props.relay.setVariables ... although i do not get any error the query is not being executed upon change

i am surely doing a noob mistake ... just do not know what that is :) ... cause i am noob :))

thanks
",wowzaaa,2016-05-22 23:19:16
1162,2016-05-22 15:57:02,"maybe it would be useful to say that even if though i am fetching the first 2 items out of 10 ... pageInfo.hasNextPage is false ... maybe that is why it does not trigger the re-fetch 
",wowzaaa,2016-05-22 23:19:16
1162,2016-05-22 16:12:21,"Thanks for the detailed issue and the follow-up, that's the critical bit. If pageInfo.hasNextPage is false initially, that means the server has indicated there are no more items that can be fetched. In this case, Relay won't bother fetching more. Fixing the the pageInfo response should make this work as you expect. 
",josephsavona,2016-05-22 23:19:16
1162,2016-05-22 16:15:46,"trying to fix this make me feel like a kardashian in the amazon jungle :(

any way on how to debug this? the part inside schema.js that does the fetching looks like this:

<S_CODE_TOKEN>
",wowzaaa,2016-05-22 23:19:16
1162,2016-05-22 17:05:14,"so the only way this worked for me is if i remove **limit(args.first)** but this means i fetch all the items in my db ... and to be honest i find this insane ... what if i have 10 mil recoreds? :/

am i missing something?
",wowzaaa,2016-05-22 23:19:16
1162,2016-05-22 17:19:11,"@rarutu `connectionFromPromisedArray` is helper that assumes that whole dataset in is in that array, thats reason why it works only if you fetch everything. 

You need to implement (or find) such helper that will work efficiently with MongoDB.  These helpers always gets backend specific.

I don't use MongoDB with graphql, but @nodkz recently referenced some graphql+mongodb [resources](https://github.com/facebook/relay/issues/1150#issuecomment-220283327) which hopefully help you to get clear picture.
",jardakotesovec,2016-05-22 23:19:16
1162,2016-05-22 17:54:35,"@jardakotesovec thanks for the answer ... i did not knew that connectionFromPromisedArray assumes u give it all the data ... honestly i do not use mongodb but in the video tutorail i ma following the trainer is using it and for him it worked ... maybe the specs changed since he did the video ... :) ... in any case i will plan to use it with Amazon RDS on MySQL or MariaDB ... do not know which one yet ... probably mysql :) 
",wowzaaa,2016-05-22 23:19:16
1162,2016-05-22 23:19:16,"@jardakotesovec thanks for answering!

I'm going to close this as it isn't an issue per-se, but please feel free to continue discussing approaches. We'll keep this in mind as it isn't very intuitive why pagination wasn't working in this case. 
",josephsavona,2016-05-22 23:19:16
1161,2016-05-22 03:55:34,"use fbjs's new .eslintrc.js
",iamchenxin,2016-05-23 19:10:35
1161,2016-05-23 17:11:53,"@facebook-github-bot import
",kassens,2016-05-23 19:10:35
1161,2016-05-23 17:11:56,"Thanks, there might be some lint regressions that we should fix as a followup.
",kassens,2016-05-23 19:10:35
1161,2016-05-23 17:35:17,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/957227404396940/int_phab) to review.
",ghost,2016-05-23 19:10:35
1160,2016-05-21 14:00:00,"I am looking for some api that would allow me to monitor if Relay have some async tasks in queue. 

I know that I can track these things individually (`pendingVariables` for `setVariables`, callbacks for mutations, `onReadyStateChange` on route changes), but I did not find hook where I could do that globally for particular Relay instance. 

Use cases are either single UI progress indicator showing that some request is being processed or I think it also could be helpful with selenium tests (thats my intention) as I could avoid many explicit waits if I can wait before every command until Relay says its ready (async tasks are finished) - similar strategy is used in Protractor for Angular.

I could work on PR if you give me good hint where would be good place to create such hook (assuming I did not miss it)

Thanks!
",jardakotesovec,2016-05-22 13:49:58
1160,2016-05-21 14:15:58,"A [custom network layer](http://facebook.github.io/relay/docs/guides-network-layer.html) would probably work well for the ""some request is being processed"" use case, and possibly the Selenium one as well.
",wincent,2016-05-22 13:49:58
1160,2016-05-21 14:40:37,"@wincent Thanks. I was not sure if that would also cover cases like queued mutations (mutations with same collision key), but I think its correct to assume if such network request resolves - Relay will send next network request in queue within one event loop (assuming I am using default task scheduler), so there should not be gap for race conditions.

Feel free to close it if you don't see this as common use case which would make sense to add to core.
",jardakotesovec,2016-05-22 13:49:58
1160,2016-05-22 13:49:58,"Sure thing @jardakotesovec. In general we like to keep the core API as small as possible, so l will close this. Let us know, however, if you run into any roadblocks that prevent you from implementing this ""in userland"" and we can consider other options.
",wincent,2016-05-22 13:49:58
1159,2016-05-20 22:43:56,"Now that `react-relay` has passed @davidaurelio's `relay` in version, would it be possible to use the `relay` package name on npm?

It would save me feeling dumb every time I accidentally type

<S_CODE_TOKEN>
",taion,2016-12-22 16:41:23
1159,2016-05-20 22:54:42,"Funny you should ask. @cpojer brought up the same idea only an hour ago.
",wincent,2016-12-22 16:41:23
1159,2016-05-20 22:55:35,"(@taion and I talked about this today ;) ).
",cpojer,2016-12-22 16:41:23
1159,2016-05-20 23:02:51,"I was looking at https://www.npmjs.com/package/relay after messing up that import again, and thought that the name of the package owner looked sorta familiar.
",taion,2016-12-22 16:41:23
1159,2016-05-20 23:07:25,"Or relay core could be in ""relay"" and the react relay bindings stay at
""react-relay""? Is Relay core still a thing?
On Fri, May 20, 2016 at 4:02 PM Jimmy Jia notifications@github.com wrote:

> I was looking at https://www.npmjs.com/package/relay after messing up
> that import again, and thought that the name of the package owner looked
> sorta familiar.
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/1159#issuecomment-220738309
",KyleAMathews,2016-12-22 16:41:23
1159,2016-05-20 23:25:57,"> Is Relay core still a thing?

Yes. We'll publish more info soon, but we're working on this.
",josephsavona,2016-12-22 16:41:23
1159,2016-12-22 16:41:23,"The experimental new core that we've previously called Relay ""2"" (see #1369) is split into a view-agnostic core and React binding layer. We're likely to keep using a single repository, but we'll keep in mind the idea of releasing the core as a separate package. I'm going to close this since it isn't actionable near-term (we're still incrementally working toward the new core). Thanks for starting the discussion about this! Feel free to reopen or comment if you think think this needs to be addressed sooner.",josephsavona,2016-12-22 16:41:23
1158,2016-05-20 20:33:27,"- update dependencies
- update usage of react-router-relay
- fix all warnings

Sample is up and running locally with updated dependencies and without any errors.
",rosskevin,2016-05-21 01:10:26
1158,2016-05-20 20:42:11,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-05-21 01:10:26
1158,2016-05-20 20:46:01,"cla signed.
",rosskevin,2016-05-21 01:10:26
1158,2016-05-20 21:01:29,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-05-21 01:10:26
1158,2016-05-20 21:07:00,"Thanks!
",kassens,2016-05-21 01:10:26
1158,2016-05-20 21:07:42,"@facebook-github-bot import
",kassens,2016-05-21 01:10:26
1158,2016-05-20 21:16:51,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1258791597481469/int_phab) to review.
",ghost,2016-05-21 01:10:26
1157,2016-05-20 19:03:05,"https://github.com/facebook/jest/blob/master/CHANGELOG.md
",cpojer,2016-05-20 23:10:32
1157,2016-05-20 20:21:17,"@facebook-github-bot shipit
",cpojer,2016-05-20 23:10:32
1157,2016-05-20 20:42:56,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/109199956165586/int_phab) to review.
",ghost,2016-05-20 23:10:32
1156,2016-05-20 17:22:58,"1. Clone `master`
2. `cd examples/todo`
3. `nvm use 6.2.0`
4. `npm install`

Env:

<S_CODE_TOKEN>

Results;

<S_CODE_TOKEN>
",rosskevin,2016-05-20 18:20:49
1156,2016-05-20 18:20:49,"requires `npm install` at the root of the project.
",rosskevin,2016-05-20 18:20:49
1155,2016-05-20 05:42:20,"WIP: I'll probably have to make more changes to make this work correctly. Creating the PR so I can get early feedback.

The community at large has not been able to property define types for higher-order components for a long time

PropTypes on React Components are extremely important. They are perhaps, one of the most important types in a React App.
Higher Order Components are extremely common in React Apps.
Therefore, the fact that Higher Order Components eat the type definition of React Components is unacceptable.

After days of research and trial and error, I've found the type definitions that work.

This PR, adds the 'correct' (\* see footnote) type definitions for the HOC, so that when the time comes to publish the
flow type definition file(s) to NPM, Relay.CreateContainer does not eat type definitions.
- technically speaking, Relay.CreateContainer takes all the props that match fragment names and hydrates the values using ids.
  So the types aren't completely correct, but it's close enough. Perhaps the return value should be something like:
  `React$Component<DefaultProps, Props & {[key: $Keys<FragmentObj>]:{__DATA_ID__: string}}, State>`
",nmn,2016-11-28 17:52:17
1155,2016-05-25 01:09:17,"Phoning a friend. @samwgoldman, your thoughts on this?
",steveluscher,2016-11-28 17:52:17
1155,2016-05-25 04:38:52,"1. It's not true that the `State` of the returned component class is the same as the state of the input component class. This is fine, though, since state is a purely internal notion and callers don't care about the state. Personally I'd remove the `State` type parameter and replace it's instances with `any`.
2. The return type `React$Component<DefaultProps, Props, State>` describes instances of such a class, but this function returns a class. This is what `ReactClass<Config>` is for, where `Config = $Diff<Props, DefaultProps>`.
3. There are actually a few places inside the function that might be updated to use more specific types. In particular `_getQueryData` takes the props (actually the config, because the inner component will supply defaults), but is currently annotated as `Object`.

Does this work?

<S_CODE_TOKEN>
",samwgoldman,2016-11-28 17:52:17
1155,2016-05-25 05:03:24,"@samwgoldman Thanks for the quick reply:
1. I agree. I can probably replace both the places is State is used with `any`.
2. Oops. That's a typo. I've been doing that right in so many other places.
3. I agree. Guess should have put _WIP_ in bold. I had been frustrated with not having types for Higher Order Components as that is pretty important in a React App. After trying many different things I got something working in my project locally. So I just wanted to quickly create a PR to remind myself to make PRs to share it as I'm guessing others have the same frustration.

(Flow is pretty awesome to be able to handle it BTW!)

As for the type definition. I've tried the `ReactClass<Config>` form before for higher-order functions, but it's never worked. In the case of Relay, it may actually work as from a user point of view the Class appears unchanged. But in most cases, the higher order component needs to merge some props in.

And since I have your attention for a second, here's some other type definition work I've been doing for Higher Order Components:
- https://github.com/facebook/flow/pull/1821
- https://github.com/reactjs/react-redux/pull/389

Would love to have a conversation about a few missing features over in Discord/flow PR thread.
",nmn,2016-11-28 17:52:17
1155,2016-06-30 21:46:28,"Ping! Anything left to do here folks, or should we close this out?
",steveluscher,2016-11-28 17:52:17
1155,2016-07-01 01:19:36,"I wouldn't take this as-is, but might be worth seeing if the type I recommended would work.
",samwgoldman,2016-11-28 17:52:17
1155,2016-08-04 22:02:48,"Marking as needs revision, per @samwgoldman's suggestions.
",josephsavona,2016-11-28 17:52:17
1155,2016-08-05 01:00:19,"@samwgoldman the ReactClass types don't actually work most of the time.  I'll try to see if it works now with flow 0.30
",nmn,2016-11-28 17:52:17
1155,2016-09-07 05:42:53,"Just came across this PR after spending the day trying to figure out how to type my exported RelayContainers.

I concur with @nmn, `ReactClass<Config>` indeed doesn't work but :

<S_CODE_TOKEN>

would indeed be super useful.

@nmn note that the returned type needs to be a `Class<C>` or `Class<React$Component<DefaultProps, Props, any>>`
",chollier,2016-11-28 17:52:17
1155,2016-11-28 17:52:17,"Closing due to inactivity. Thanks for the PR, we'll keep this in mind going forward!",josephsavona,2016-11-28 17:52:17
1154,2016-05-19 22:20:11,,wincent,2016-05-19 23:00:25
1154,2016-05-19 22:20:16,"@facebook-github-bot import
",wincent,2016-05-19 23:00:25
1154,2016-05-19 22:25:53,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1742835089334664/int_phab) to review.
",ghost,2016-05-19 23:00:25
1153,2016-05-19 20:27:21,"Currently I am unable to write Relay queries next to React components because there is no way to escape the Relay queries in coffeescript. Is there some way to even implement a local hotfix to allow writing of Relay queries in coffeescript? Thanks. 
",huan-ji,2016-05-19 22:29:20
1153,2016-05-19 22:29:20,"Thanks for the question @huan-ji. We don't use CoffeeScript here at FB, so for now we're focusing on supporting JS. As it is, you need to run the Babel plug-in to transform those template literals into the corresponding runtime representation, so if you could solve the syntax issue on the CoffeeScript side, you'd still need to set things up carefully such that Babel could run over the transformed JS that comes out of your CoffeeScript build pipeline.

I think in the interim your best bet may be to follow the suggestion in https://github.com/jashkenas/coffeescript/issues/1504 (which I can see you commented on), and put the fragments in JS files instead. Not ideal, but it is a workaround.

I'm going to close this, but if anybody has grappled with this issue before and wants to add some insight, please feel free to go ahead.
",wincent,2016-05-19 22:29:20
1152,2016-05-19 19:58:41,"From what I read online, it looks like the Relay/GQL subscriptions API is not ready. What is the current solution for event based query subscriptions?
",saeho,2016-05-19 22:29:56
1152,2016-05-19 22:09:25,"Thanks for asking. We're tracking progress of real-time subscriptions in #541. I [recently commented](https://github.com/facebook/relay/issues/541#issuecomment-213093469) there with a brief update and suggestion for a workaround.
",josephsavona,2016-05-19 22:29:56
1152,2016-05-19 22:29:56,"Going to close this (spring cleaning).
",wincent,2016-05-19 22:29:56
1151,2016-05-19 08:38:57,"I'm trying to do a pagination query.

But the connection query's args.after = ""ABCDEFG123"" _only_ seem to work within the ranges of the first  query result.

For example, if I do a query and if it returned 10 items, and then if I perform another query with a cursor passed to it, my query is incapable of displaying anything after the first 10.

This seems very inefficient if I have to query my entire database in order for the cursor pagination to work.

What is the proper use case for the relay connection queries?
",ashah888,2016-05-25 00:04:04
1151,2016-05-19 16:03:25,"Hi @ashah888. I'm not sure I exactly get the question. Can you provide a concrete example of a query and also show the code you're trying to use to do the pagination?
",wincent,2016-05-25 00:04:04
1151,2016-05-25 00:04:04,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2016-05-25 00:04:04
1150,2016-05-19 08:35:53,"When I create a connection query and execute it with:
`someQuery(first: 3) { ... }`

This will give me the first 3 result and the cursors if I requested it.

Then if I do this:
`someQuery(first: 3, after: ""abcdefg12345""){ ... }`

This will give the NEXT 3 items after the passed cursor.

But If I observer the server, I can see the resolver working and hitting the server. HOWEVER, if the first query returned only 3 due to a limit (i.e. MongoCollection.find(...).limit(args.first)), then the second query with the cursor will NOT return the next set of 3 even if a skip() was applied to the mongo query.

Yet I still see the request being made to the server and the resolver working.

Why??

If the output has changed because of other arguments, and if the request was still made to the server, why does the cursor prevent me from seeing the new data set??
",ashah888,2016-05-19 13:46:24
1150,2016-05-19 10:13:18,"Your question is not related to Relay.
Relay is wrapper for React on client side.

`resolve` functions work on server side via `graphql` module. This module is agnostic to any underlying data-source (eg. mongodb, postgresql, mysql, redis). So you need read `graphql` specification to implement resolving such types of queries. So your question is not related to `graphql` too.

---

You may read how connection works here:
- https://m.alphasights.com/how-to-do-effortless-pagination-with-relay-connections-and-graphql-ruby-a534ffaf5cbf
- http://pcarion.com/2015/09/20/GraphQL-connections/

---

For you, I can recommend use [graffiti-mongoose](https://github.com/RisingStack/graffiti-mongoose) - a wrapper for graphql and mongoose.
As first introduction you may read: 
- https://reactjsnews.com/graphql-mongodb
- https://blog.risingstack.com/graffiti-mongoose-mongodb-for-graphql/

But `graffiti-mongoose` weakly implements pagination and cursors, you may read following issue: https://github.com/RisingStack/graffiti-mongoose/issues/99  Pagination with cursors works only with ordering by ID.

The brave implementation of cursors for mongodb I don't find yet.

Be aware with `graffiti-mongoose` right now it also weakly allow extend schema with custom types and resolvers. Right now I implement my own wrapper for mongoDB, but it not ready for OSS due continuously changing API while I developing and adopting it to my real app case. My wrapper also does not solve cursor problem for mongodb.

_So if you find good realisation for mongodb and cursors, please let me know._
",nodkz,2016-05-19 13:46:24
1150,2016-05-19 13:46:23,"Thanks for the question, @ashah888, and for the amazing answer @nodkz.
",wincent,2016-05-19 13:46:24
1149,2016-05-19 06:38:59,"It's great to have an example of how you download schema.json from graphql server.
",Vanuan,2016-06-24 00:41:46
1149,2016-05-19 06:46:37,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-06-24 00:41:46
1149,2016-05-19 07:18:54,"signed
",Vanuan,2016-06-24 00:41:46
1149,2016-05-19 07:23:01,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-06-24 00:41:46
1149,2016-05-19 07:28:25,"An alternative way:

`wget --header='content-type:application/json' --header='accept:application/json' --post-data='{""query"":""\n  query IntrospectionQuery {\n    __schema {\n      queryType { name }\n      mutationType { name }\n      subscriptionType { name }\n      types {\n        ...FullType\n      }\n      directives {\n        name\n        description\n        locations\n        args {\n          ...InputValue\n        }\n      }\n    }\n  }\n\n  fragment FullType on __Type {\n    kind\n    name\n    description\n    fields(includeDeprecated: true) {\n      name\n      description\n      args {\n        ...InputValue\n      }\n      type {\n        ...TypeRef\n      }\n      isDeprecated\n      deprecationReason\n    }\n    inputFields {\n      ...InputValue\n    }\n    interfaces {\n      ...TypeRef\n    }\n    enumValues(includeDeprecated: true) {\n      name\n      description\n      isDeprecated\n      deprecationReason\n    }\n    possibleTypes {\n      ...TypeRef\n    }\n  }\n\n  fragment InputValue on __InputValue {\n    name\n    description\n    type { ...TypeRef }\n    defaultValue\n  }\n\n  fragment TypeRef on __Type {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n        }\n      }\n    }\n  }\n""}' http://$SERVER/graphql/? -O schema.json
`
",Vanuan,2016-06-24 00:41:46
1149,2016-06-24 00:41:46,"Closing this one as it got taken care of in https://github.com/facebook/relay/commit/5729cc69266d6c18c.

Thanks!
",wincent,2016-06-24 00:41:46
1148,2016-05-18 07:19:31,"Relay Docs are ridiculous hard to understand.

It lacks examples.
It lacks clear explanations.
Unclear, scattered variables in examples.
",ashah888,2016-05-18 08:10:02
1148,2016-05-18 07:21:35,"As someone who is trying to understand how to implement Relay, I can relate to this and second the OP.  
",BilalBudhani,2016-05-18 08:10:02
1148,2016-05-18 07:23:21,"I agree with you. But after several months I found doc very condenced. I totaly reread it about 5 times ;)
",nodkz,2016-05-18 08:10:02
1148,2016-05-18 07:44:21,"Errr... what the hell?

There are real people behind Relay who've put an enormous amount of effort into documenting Relay. At least try to respect that.

Relay is an ambitious new project. And despite the OP's comment is abundantly documented with 3-4 working examples, extensive API docs, numerous conference talks, blog posts, etc. I would love it if all Open Source code I use was documented and supported this well.

If you have constructive, detailed, _respectful_ feedback about what you've found difficult to understand while learning Relay, I'm sure people here would love to hear that. But your comments so far are not the least bit helpful and are frankly pretty offensive.
",KyleAMathews,2016-05-18 08:10:02
1148,2016-05-18 08:07:57,"And I apologize if that came across as too harsh. Your perspective is valuable and needed for Relay to be successful. It really would be valuable to hear your stories of what and where you struggled.

I'm not a Relay maintainer but I know what it's like to be receive these sorts of comments and it's not fun.
",KyleAMathews,2016-05-18 08:10:02
1148,2016-05-18 08:10:02,"Thanks to everybody for chiming in on this thread. We'd definitely like to improve the documentation, and do what we can to make Relay easier to understand. Like @KyleAMathews said, however, in order to be most useful, we need the feedback to be a little more concrete, focused and actionable. I'm going to close this one for now, and I encourage you to open narrower issues for specific problems that you find with the documentation or the concepts in the framework. The more detail, the better, and best of all is if you can incorporate a concrete suggestion for how something could be changed into a format that would be more understandable and useful to you.

(Also feel free to comment on this issue, even though I am going to close it. I'm just closing it because it is not specific enough to be actionable, not because I want to silence the discussion.)
",wincent,2016-05-18 08:10:02
1148,2016-05-18 09:11:21,"@KyleAMathews nobody say that doc is terrible. Just say that it is ""hard to understand"". And it really such is. Because Relay has huge amount of abstractions/logic/relations and especially in conjunction with graphQL, so brains should hard strained to catch all aspects and principles how Relay works. So I can not imagine examples, which can give easy dive to Relay. 

I found doc very condensed (absent vacuity). So need read every topic attentively, cause every paragraph contain concentrated (high amount) information. And I spent seconds to find needed information. So for me at now doc is very good, for me at past doc was how @ashah888 wrote above.

Framework is too fresh, and of course is written low amount tutorials for newbies. Just need wait a critical mass of audience and success projects outside facebook.

PS. I am spent 7 months to study from scratch NodeJS + ES6 + Webpack + React + Relay + GraphQL + and tons of other modules (after Dan's talk at React Europe 2015 about hot-reload). So beautiful and simplicity have hight price. BTW I'm very glad that I ran away from RoR. Glad that choose Relay, not Redux. Glad how FB invested resources to open source and what amazing peoples maintains it. Especially inspired by eminence grises - Sebastian Markbage and Lee Byron.
",nodkz,2016-05-18 08:10:02
1148,2016-05-18 20:00:22,"There are plenty of Relay Git Issues here about the fundamentals and understanding of the nitty gritty of Relay that got shut down with the comment that they are noise and better placed at StackOverflow. Unfortunately often they are then not answered on StackOverflow. And from my personal experience there are many areas in Relay that are either not documented or very poorly explained.

The risk here is that people get all excited about GraphQL and they should! But then when it comes to Relay they get disillusioned about the complexity and how hard it is to use GraphQL on the client.

So Relay can drag down GraphQL's success. I experienced it myself. I convinced my company to use GraphQL. Everybody loved it until people got extremely frustrated with Relay. It almost killed GraphQL in our company. I could only save it by dropping Relay and build a much simpler and easier to use and understand client site GraphQL connector.

Obviously we all appreciate the huge effort of all the people working on Relay - but maybe there should be a warning on the Git Readme saying ""Work in progress, not ready for production yet"".
",BerndWessels,2016-05-18 08:10:02
1148,2016-05-18 21:30:29,"Our company has successfully implemented a fully working Relay website using the documents provided and a little sleuthing inside the source code. It's my opinion that more documentation and better documentation is ALWAYS possible but that doesn't meant that it is not usable to produce a working product.

@Aweary @dwightbe :+1: :+1:
",brad-decker,2016-05-18 08:10:02
1148,2016-05-20 19:55:25,"Relay seems like an excellent example of a _simple_ tool that's not necessarily an _easy_ one (using [Rich Hickey's framework](https://www.infoq.com/presentations/Simple-Made-Easy)).

It's certainly not easy to get going with compared to using existing, familiar tools e.g. REST but is incredibly _simple_ to use once you get it and things are setup. For my product, Relay is the most carefree part of the stack and just works. Creating new components is a breeze.

Or to use economic terminology. Relay has a high fixed cost but very low marginal costs.

My assumption is over time the fixed cost will drop but as far as I'm concerned, Relay has by far the lowest marginal costs in the data-fetching industry.
",KyleAMathews,2016-05-18 08:10:02
1147,2016-05-18 06:54:21,"I'm trying to setup a basic React Native Relay project. I'm creating this issue after spending ample of time trying debug the problem without any luck. I'm getting this warning on console and my react native app is not able to make calls to GraphQL server. 

<S_CODE_TOKEN>

Here is my code 

index.ios.js

<S_CODE_TOKEN>

appRoute.js

<S_CODE_TOKEN>

app.js

<S_CODE_TOKEN>

package.json

<S_CODE_TOKEN>

babelRelayPlugin.js

<S_CODE_TOKEN>

Here is the full repo link: https://github.com/popstand/react-native-relay-graphql-example

Similar code built with ReactJS and Relay works well on webpage. I'm not able to make it work on React Native. What is possibly going wrong here which is causing this issue? 
",BilalBudhani,2016-05-25 00:12:16
1147,2016-05-18 08:15:27,"I think the warning can be safely ignored (and will go away in the next release; it's already mitigated on the master branch, as of commit d1abc54d5ab60fc).

The `fetchWithRetries` failure I am not sure about. Are you able to connect to that _same_ GraphQL endpoint outside of React Native? (Sounds like you are, but I just want to clarify.)
",wincent,2016-05-25 00:12:16
1147,2016-05-18 09:08:00,"@wincent Yes, I'm able to connect and load data from GraphQL with web version of my code. But, I'm not sure what's wrong with React Native code. 
",BilalBudhani,2016-05-25 00:12:16
1147,2016-05-18 22:37:36,"Wherever you're running the RN code, is **it** able to reach the GraphQL server? If you're running in iOS Simulator then localhost should be fine, but if you're running on an actual device then you'll need to change that to a more meaningful network address.

I had similarly cryptic problems with `DefaultNetworkLayer` for a while, but debugging within `DefaultNetworkLayer` and `fetchWithRetries` themselves got to the bottom of it. I'm damned if I can remember what the issue was, but I suspect it's unrelated here.
",Longsight,2016-05-25 00:12:16
1147,2016-05-25 00:12:16,"Thanks for your question! It sounds like you're having reachability problems from your device/simulator to your GraphQL server. Let's get some more eyes on this!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2016-05-25 00:12:16
1146,2016-05-17 15:27:46,,Yaxian,2016-05-19 17:10:30
1146,2016-05-17 16:35:59,"Thanks @Yaxian.

I'm totally unqualified to review this. Help, @yuzhi!
",wincent,2016-05-19 17:10:30
1146,2016-05-18 00:30:20,"I have the vocabulary of about a third grader in China, but the parts that I read looked reasonable. I think the main problem is that we don't have support for multiple languages right now.
",yuzhi,2016-05-19 17:10:30
1146,2016-05-18 02:09:22,"Ok, I got it. @yuzhi you can close it. Thanks.
",Yaxian,2016-05-19 17:10:30
1146,2016-05-18 23:40:34,"I checked with other people at Facebook how they do it and what I heard from React made sense to me.

While we currently don't have the website stack setup to handle multiple locales, it seems like the React community has found use of the translations anyway.

I think this can be a good start to make entry easier for people worldwide. 👍 

@facebook-github-bot import
",kassens,2016-05-19 17:10:30
1146,2016-05-18 23:55:08,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1762003654030649/int_phab) to review.
",ghost,2016-05-19 17:10:30
1146,2016-05-24 03:13:19,"继续翻译撒
",pengliaoye,2016-05-19 17:10:30
1146,2016-05-24 03:27:32,"Sorry, I'm very busy recently. I will go on this weekend. :)
pengliaoye notifications@github.com于2016年5月24日 周二上午11:13写道：

> 继续翻译撒
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/pull/1146#issuecomment-221155710
",Yaxian,2016-05-19 17:10:30
1145,2016-05-17 13:53:54,"I ran into a rather maddening case recently:

> [RelayRecordStore.getLinkedRecordID(): Expected field `child` for record `client:9132455882` to have a linked record.](https://github.com/facebook/relay/blob/v0.8.1/src/store/RelayRecordStore.js#L236-L242)

Turns out it was due to my optimistic update, which took some sleuthing to figure out.

The prop passed to the mutation, `data`, has a `child` key (an ID string of the record's associated `child` prop), while the return value expects `child` as an object with an `id` key. I missed it because I was naiively copying data into the return value. 

<S_CODE_TOKEN>

The solution was to fix the shape of the data, so that `child` would correctly return an object with a string id key, instead of the string itself:

<S_CODE_TOKEN>

Totally my fault, but would help if the invariant message were a little less cryptic. Happy to open a pull if that would help. Maybe the invariant can type-check the expected result vs the received?
",akre54,2016-09-03 00:31:13
1145,2016-09-03 00:31:13,"Thanks for this suggestion, @akre54.

With [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable), we'll have a very different (better) way of constructing optimistic updates, so we are unlikely to work on implementing this suggestion against the old API. So I'm going to close this. Thanks once again for you suggestion though!
",wincent,2016-09-03 00:31:13
1144,2016-05-17 00:43:38,"Just like 67a806008cdfe1664634e15b099db4149f4f8235, but for the plugin.
",kassens,2016-05-17 17:00:39
1144,2016-05-17 00:43:44,"@facebook-github-bot import
",kassens,2016-05-17 17:00:39
1144,2016-05-17 00:46:22,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/185038045225713/int_phab) to review.
",ghost,2016-05-17 17:00:39
1143,2016-05-15 02:16:40,"I thought it should be `An array` rather than `Any array`
",chentsulin,2016-05-16 17:20:28
1143,2016-05-16 04:18:29,"@facebook-github-bot import
",kassens,2016-05-16 17:20:28
1143,2016-05-16 04:18:37,"Thanks!
",kassens,2016-05-16 17:20:28
1143,2016-05-16 04:20:34,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/989579731132219/int_phab) to review.
",ghost,2016-05-16 17:20:28
1142,2016-05-14 18:24:35,"Documents `getFragment` with examples of using default and custom variables.
",josephsavona,2016-05-17 01:10:23
1142,2016-05-14 18:24:52,"@facebook-github-bot import
",josephsavona,2016-05-17 01:10:23
1142,2016-05-14 18:26:43,"Addresses #866 by documenting how custom variables are passed from parent -> child.
",josephsavona,2016-05-17 01:10:23
1142,2016-05-14 18:27:37,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/949226968528129/int_phab) to review.
",ghost,2016-05-17 01:10:23
1142,2016-05-14 20:01:02,"Awesome! This has been a source of confusion for me. Thanks for the
write-up.
On Sat, May 14, 2016 at 11:27 AM Facebook Community Bot <
notifications@github.com> wrote:

> Thanks for importing. If you are an FB employee go to Phabricator
> https://our.intern.facebook.com/intern/opensource/github/pull_request/949226968528129/int_phab
> to review.
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/pull/1142#issuecomment-219235665
",KyleAMathews,2016-05-17 01:10:23
1141,2016-05-14 03:05:46,"I've seen this asked before, but I have a particular concern about the recommended approach that I had seen. The question being: how do I get meaningful errors, from GraphQL, to the UI in such a way that I can act upon them (highlight an input red, etc)? Without Relay in the picture, it's pretty straight forward - you can pretty much do whatever you like. Relay needs some additional thought.

I had seen a recommendation that this type of information should be thought of as data and that it should be present in the payload of a query, as opposed to thrown as an `Error` and thus included in the `errors` array from GraphQL. This recommendation brought up additional questions for me, though.
1. Specifically, when dealing with Relay, if a mutation fails due to some failed input business logic checks on the GraphQL side of things but instead of throwing an `Error` we include the failure information as part of a successful payload, won't that circumvent a lot of the built in Relay mutation failure logic? Since we're not throwing errors, we're not telling Relay that the mutation failed.
2. Wouldn't that require us to code a lot of that failure logic into our code, even when Relay already handles it all for us if we were to just throw an `Error`? Such as adding `didFail` fields and error message fields to the payload.
3. Wouldn't we have to also make sure to return the _original_, unchanged data in the mutation response payload so that Relay doesn't update its own local store with invalid data?
4. Now, every mutation needs a `REQUIRED_CHILDREN` config to explicitly capture the error-related fields, right?

All of this seems like pain that can be avoided if we just make use of the already dealt with `errors` field from GraphQL. Relay already sees this as a failed mutation and does not update the store. Relay already provides a nice hook to make UI updates in response to a failure.

So, why would we not just use that then? In my recent experience, I've seen the suggestions like that I mentioned at the top of this, which pointed me away from the `errors` array. There's also that mention in the GraphQL spec that the `errors` array is meant for code debugging related messages. These are the two reasons why I even began to think about putting error messages in the mutation payloads.

Here's what I'm currently doing in my code. Maybe you can tell me if this is bad. It involves mostly a tweak on GraphQL side of things, but solely to enable a pattern on the Relay and React side. I've created my own custom [formatError](https://github.com/graphql/graphql-js/blob/master/src/error/formatError.js) function that checks for the existence of a `fieldName` property on the error. If the error has that property, it includes it as part of the object that is subsequently includes in the `errors` array. Here's that custom `formatError` code ...

<S_CODE_TOKEN>

Now, with this in place on GraphQL side, I can just throw an error that has this property from inside my mutation code and I'll be able to provide back to Relay an error message AND a field name that the error relates to. On the Relay side, I get to continue using the `onFailure` callbacks and rest assured knowing that I'm not messing up the store, etc. I can now map specific error messages to specific fields in React/Relay land. Only annoyance is that this all hinges on no typos or anything when throwing these errors (its just strings).

Are my initial concerns anything to actually be concerned about? Is the way I'm doing this good or bad? I'm mostly just lost without a clear direction as to which approach I truly should be striving to use, I guess.
",ryancole,
1141,2016-05-14 17:29:15,"This is a great question. 

@dschafer probably has the best context on error handling in GraphQL. Dan, any resources on this?
",josephsavona,
1141,2016-05-15 13:23:31,"> Now, with this in place on GraphQL side, I can just throw an error that has this property from inside my mutation code and I'll be able to provide back to Relay an error message AND a field name that the error relates to. On the Relay side, I get to continue using the onFailure callbacks and rest assured knowing that I'm not messing up the store, etc. I can now map specific error messages to specific fields in React/Relay land.

This is the road we have been thinking of going down as well. But how could you handle sending back errors for multiple fields at once? (e.g. form validation)
",Globegitter,
1141,2016-05-15 18:54:28,"> But how could you handle sending back errors for multiple fields at once? (e.g. form validation)

At the moment, I don't know. It's obvious the spec allows for multiple errors, because it's an array of errors in the response. I'm not sure how to throw multiple errors and have them appear there, though. At the moment for me it's just a single error each request.
",ryancole,
1141,2016-05-28 00:48:13,"I was definitely interested in hearing some community thoughts on this one. I got asked about this a bunch at a recent React meetup and felt like I didn't have a great answer... pinging @dschafer again?
",NevilleS,
1141,2016-05-28 01:13:29,"Ah, sorry about the delay, this slipped through my inbox!

> It's obvious the spec allows for multiple errors, because it's an array of errors in the response.

Yep, this is exactly why we allowed it that way. In fact, the reason we ensured that in the spec is because in the original implementation at FB (which we're moving away from), we could only throw one error, and we regretted it. That's also why the spec is incredibly unopinionated on what the shape of an error is; we knew we were changing how errors worked, and didn't want to express an opinion we hadn't tried ourselves.

So that's both good news and bad news. The good news is, we definitely allow and encourage this. The bad news is, I don't really have any recommendations backed by experience.

Based on your post above, what you're doing looks very reasonable; I think returning a list of errors to indicate all of the reasons a mutation failed is exactly the right thing to do, and if you can annotate those errors with useful information to the client, all the better!
",dschafer,
1141,2016-09-21 14:01:13,"Excellent question. I'm in the same boat.

Currently, I'm handling errors in GraphQL like so:

<S_CODE_TOKEN>

The `defaultHandler` 'catches' the error/exception thrown, determines its type - a vanilla `Error` object, something slightly more exotic like a custom exception (that may in turn have logging, etc), or a `ValidationError`, which is hashed as 'field -> error message' - and then either hides it from public view under the 'General Error' banner, or mutates `error` to be an object of field/error pairs.

Relay, in turn, can look at the error that's thrown back and determine if it's an object or a plain error. If it's an object, I propagate those errors back to a MobX store and use a form helper outside of Relay to respond to state changes in the UI. As far as Relay is concerned, the mutation failed and no further changes are needed sync the local store. At the same time, error state is handled separately outside of Relay.

It's not ideal, IMO (not least because I now have to care about state in two places) although I think this is probably more for GraphQL proper to fix than Relay, per se. Instead of forcing one `error` response to be two things, it'd be nice if there was a distinction between error types thrown... e.g. something like `throw new GraphQL.RequestError(object | map)` to distinguish that an error is an arbitrary object, vs. any other kind which becomes the text string of the `errors[].message` field.

Relay, in turn, would then have an 'official' way to handle the distinction:

`errors` = system errors, syntax issues
`requestErrors` = user/validation stuff

This could somehow feed back to the Relay component and cause a re-render... maybe `this.props.relay.requestErrors` or similar... outside of the GraphQL response, but still handled in a first-class way by Relay.
",leebenson,
1140,2016-05-13 21:56:43,"Go to http://facebook.github.io/relay/ press F12, you will see

playground.js:7785 Warning: Each child in an array or iterator should have a unique ""key"" prop. Check the render method of `[object Object]`. See https://fb.me/react-warning-keys for more information.

There is no ""key"" attribute in next snippet:

<S_CODE_TOKEN>

React says 

> The key should always be supplied directly to the components in the array, not to the container HTML child of each component in the array:
> It had to be something like this:

<S_CODE_TOKEN>

Next question, can I use **dataId** for these purposes?, but I think it not good idea. 
How can I prefetch id in fragment?

Let say I have

<S_CODE_TOKEN>

but I need something like these

<S_CODE_TOKEN>

What is best method to suit the case? 
",olegdunkan,2016-05-14 07:57:22
1140,2016-05-13 22:48:37,"I would recommend fetching `id` in the parent component and using the id as the key:

<S_CODE_TOKEN>
",josephsavona,2016-05-14 07:57:22
1140,2016-05-14 07:57:22,"Ok, thanks!
",olegdunkan,2016-05-14 07:57:22
1140,2016-05-18 11:30:15,"Unsubscribe please!

On Saturday, May 14, 2016, olegdunkan notifications@github.com wrote:

> Closed #1140 https://github.com/facebook/relay/issues/1140.
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/1140#event-660660063

## 

Sent from Gmail Mobile
",holycrapbatmanyourright,2016-05-14 07:57:22
1140,2016-05-18 13:33:54,"@holycrapbatmanyourright: Click the ""Unsubscribe"" button in the right-hand side of the UI on [the issue's page](https://github.com/facebook/relay/issues/1140). (It's on the right-hand side in the web UI on desktop; not sure about mobile.)
",wincent,2016-05-14 07:57:22
1139,2016-05-13 21:35:39,"This removes a bunch of overlapping dependencies now that we do
everything you need in the fbjs preset.

This is pending the actual release of v2 of the preset, which hasn't happened yet - I wanted to try this and see what the outcome would be. Luckily nothing really needed to be done :)

Here's the diff of `lib/`: https://gist.github.com/zpao/79879855ac21d12094087a754daa7fa4. Overwhelmingly the difference is that have the function name transform on now. Otherwise there are a couple ordering differences with the helpers and then L1620 (not sure what's happening there)

It looks like you weren't actually making use of anything that was in stage-1, and es2015 wasn't even used, so got rid of those.
",zpao,2016-05-27 06:16:30
1139,2016-05-14 01:28:34,"Yay! Thanks.
",wincent,2016-05-27 06:16:30
1139,2016-05-17 16:54:42,"Bot comment incoming saying I updated this. I shipped `babel-preset-fbjs@2.0.0-alpha.1` last night and updated package.json to use that. It's just a devDep that we control so not a big deal to use that but I'll work to ship final. I wanted to get you and Draft using it and then ship final after a week in case anything shakes out.
",zpao,2016-05-27 06:16:30
1139,2016-05-17 22:58:24,"Seems good to ship!
",kassens,2016-05-27 06:16:30
1139,2016-05-27 04:50:25,"@facebook-github-bot shipit
",steveluscher,2016-05-27 06:16:30
1139,2016-05-27 04:50:54,"I'll remove the -alpha in a follow up.
",steveluscher,2016-05-27 06:16:30
1139,2016-05-27 04:55:53,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1599338557047738/int_phab) to review.
",ghost,2016-05-27 06:16:30
1139,2016-05-27 05:22:49,"Hey @zpao, I wasn't able to get the `fbjs` preset to work with the example apps (that use object spread, and `import` syntax). Maybe that's just the way it is, but even when I stacked up `['es2015', 'stage-0', 'fbjs']` Babel choked on JSX.
",steveluscher,2016-05-27 06:16:30
1138,2016-05-13 14:20:31,"In our app we have a structure as follows:

<S_CODE_TOKEN>

This example is a bit more contrived than our actual use-case but it should show our issue while keeping it simple and removing all sensitive data.

So we have two different `forceFetch` usages, one in the parent component and one in the child component. They are part of the same query but conceptually are responsible for two separate things: The parent is responsible for reloading the whole page and the child just for filtering out different data within itself (and its children).

The filtering in the child works fine, we can click the different buttons, the variable in the RelayContainer gets updated, etc. But now, when I press the button in the parent-component to reload the whole page the filter-variable in the child component is not being sent in its current state but as its default value. 

Our wanted behaviour is to send the variable of the child component in its current state. To me this seems like a bug as it in my opinion makes intuitive sense to send the current value rather than a stale/the default value of the child.

I also tried to track this down (via debugging when pressing the button in the parent) a bit but had to give up at https://github.com/facebook/relay/blob/master/src/query/buildRQL.js#L72. There I am seeing in the `fragmentCache` that there is an entry for the parent as well as the child fragment. The child has the correct up-to-date values, but the parent entry has the out-of-date values.

I will try to look a bit more into this, but it seems to me that the parent should just get the latest cached child fragment.
",Globegitter,2017-01-31 00:52:51
1138,2016-05-13 16:04:29,"Thanks for the detailed issue and example. This is a known behavior - let me first describe why, then next steps and workarounds.

Queries are constructed statically - the only inputs are the root variables (what you pass in `primeCache`/`forceFetch`/`setVariables`) and the _static_ default variables for each fragment. Note that even where the _results_ of a fragment will be a list, the query will contain only one fragment. For example the following query will (presumably) return multiple stories and render multiple `<Story>` components. But the query contains the `Story` fragment only once:

<S_CODE_TOKEN>

If two different `<Story>` components each set different variables, there's no good way for the static query to represent this (you'd have to construct a new query, creating a copy of every fragment that needed different variables, which isn't especially fast). 

`RelayContainer` partially addresses this scenario, however. If a child changes its variables, and then a parent changes its variables, the child will retain the changed variables _so long as the parent doesn't override the child's variables_ (with `getFragment('...', vars)` + passing variables as props). We've found that this mitigates issues from different parent/child variables.. In other cases, it may be necessary to do something a bit more complicated, such as having the parent pass a callback to the child so that the parent can be responsible for the data-fetching.

All of that context out of the way, this is definitely something we'd like to find a better solution for. We've found this to be quite rare in practice, though, so we'd appreciate input from the community.
",josephsavona,2017-01-31 00:52:51
1138,2016-05-15 16:53:40,"> ...
> If two different <Story> components each set different variables, there's no good way for the static query to represent this (you'd have to construct a new query, creating a copy of every fragment that needed different variables, which isn't especially fast).

Yeah that makes total sense. I mean for the unambiguous case (which ours is) it would of course be ideal if Relay would just refetch with the current set of variables rather than just blindly with the default variables.  But that of course is not a general solution and not sure how easy/hard it would be to implement, but imo worth thinking about.

Or for a more generic solution, how if we could specify something like: `this.props.relay.forceFetch(<ref to specific container>.getCurrentVariables())`. Or I guess more specific: 'For a specified fragment use the up-to-date variables from the specified container'. And probably it would then also be good to specify which variables you would like to take. I am not quite sure on the implementation of this, since you would need to keep references to containers, etc. But just an idea that would allow for this use-case, while still keeping the code clean and responsibility of functionality where it should be.

> RelayContainer partially addresses this scenario, however. If a child changes its variables, and then a parent changes its variables, the child will retain the changed variables so long as the parent doesn't override the child's variables (with getFragment('...', vars) + passing variables as props). We've found that this mitigates issues from different parent/child variables.

Can you go into a bit more detail of this scenario? It sounds very similar to the use-case I have given above, so not sure I fully understand? Or is that use-case different because the parent container has no variables itself?

>  In other cases, it may be necessary to do something a bit more complicated, such as having the parent pass a callback to the child so that the parent can be responsible for the data-fetching.

This was we are doing right now and it does feel like a hack that you always have to pull out all re-fetching logic to the highest level, of where you handle refetching. This could get unwieldy quite quickly for more complex uis. Are there currently no other workarounds for that? Ideally where we can keep control of refetching to the component that it should belong to (i.e. where the variables are specified).

In any case, thank you for giving some background on this, that makes the situation clearer.
",Globegitter,2017-01-31 00:52:51
1138,2016-06-25 18:09:09,"Howdy, just wondering if I get this ...

Given a `FeedComponent` with a `StoryComponent` child -- the fragment for both of these containers is static / global.  Any parent which references `StoryComponent` within itself is going to be referencing the same fragment (via the big fragment cache).  When any individual `StoryComponent` changes its variables these are reflected locally within the component instance -- when it constructs its own query for the context / store -- but if a parent re-evaluates its own query it will get the static fragment from cache.

Is this right?

Conceptually in my head I had thought that post-mounting the parent container got references to each of its child containers and would call `getFragment` on an instance vs class -- but that is never true, right?  It always goes to the class fragment (via the fragment cache)?  This makes a lot of sense for the example you bring up (it could be N children for a single fragment each with their own variable set).

I had just started looking over this part of the code (how containers work) last night and this issue was useful -- so thanks :)
",eyston,2017-01-31 00:52:51
1138,2017-01-31 00:52:51,"(Spring cleaning.) I'm going through and cleaning out issues that haven't had any activity for months. Thanks for participating in the discussion here. Given the imminent arrival of the new core and APIs (pieces of which have already landed on the `master` branch, with more to come over the coming weeks/months), I think it would be good to shelve this discussion for now, and wait for the arrival of the new core and APIs, which are built on a totally new refetching model (with explicit refetch queries), and once those are out in the open we can discuss any remaining issues. In the meantime, however, thanks very much for bringing this up in such detail.",wincent,2017-01-31 00:52:51
1138,2017-03-06 06:05:41,"@josephsavona  your reply makes perfect sense to me. I just ran into another scenario that is caused by the same nature. 
given
<S_CODE_TOKEN>

if `Child` implements `componentDidMount` and does a `setVarialbes({some_var: newValue})` there, `Parent` won't be able to know what child's new variables are.
This will cause an issue that, if `Parent` later on decides to refresh itself (e.g. call `setState`), relay will re-render  `Relay(Child)` and gives a 
<S_CODE_TOKEN>

the warning makes perfect sense to me --  `Parent` only knows about the `Child`'s static default variables, which `Child` has overridden in its `cdm`.  Due to
>If a child changes its variables, and then a parent changes its variables, the child will retain the changed variables so long as the parent doesn't override the child's variables (with getFragment('...', vars) + passing variables as props).

`Child` component's variables won't be overridden by `Parent` and can be resolved from `Relay Store` correctly, so everything works as expected. That said, the warning is a bit annoying, any idea how I can get rid of the warning without marking node_env as 'production'?

",bochen2014,2017-01-31 00:52:51
1138,2017-03-17 03:48:18,"a follow up on my last comment
>If a child changes its variables, and then a parent changes its variables, the child will retain the changed variables so long as the parent doesn't override the child's variables (with getFragment('...', vars) + passing variables as props).

I have
<S_CODE_TOKEN>

can someone tell me what is the expected `var1` and `var2` in different renders?
and what is the updated value after I click the `refetch` button?
my understanding of correct behavior is:
Nil, Nil -> Nil, var2 (after `child cdm`) -> var1, var2 (after `parent refetch`)
what is happending is 
Nil, Nil -> Nil, var2 (after `child cdm`) -> var1, Nil(after `parent refetch`)

which means child variables are **not kept** event without parent explicitly overridding them. This conflicts with what @josephsavona  said before",bochen2014,2017-01-31 00:52:51
1138,2017-03-17 04:16:01,"my relay version is shown below:
<S_CODE_TOKEN>",bochen2014,2017-01-31 00:52:51
1137,2016-05-13 08:06:06,"Note that this still only allows for a single `RelayNetworkDebug` instance to run at a time. Not sure if this is desirable, but then again, I have yet to use multiple `RelayEnvironment`s at the same time.
",psalz,2016-05-14 21:55:23
1137,2016-05-14 01:32:58,"Looks reasonable to me. Thanks!
",wincent,2016-05-14 21:55:23
1137,2016-05-14 01:33:02,"@facebook-github-bot import
",wincent,2016-05-14 21:55:23
1137,2016-05-14 01:43:40,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1764749057086824/int_phab) to review.
",ghost,2016-05-14 21:55:23
1136,2016-05-12 17:25:20,"Now that multiple environments can exist, the primary way of executing mutations in a component can't be relied on, eg `Relay.Store.commitUpdate(new MyMutation(...))`. This is because `Relay.Store` refers to the default environment, and not necessarily the one in use by the current component.

(I'd set up a custom environment to get rid of a warning about injecting a network layer, and spent a long time trying to figure out why all my mutations had stopped getting their props correctly)

The obvious solutions are to pass the environment down the tree are via props or context, but neither are particularly attractive solutions - i'm already in a situation where I have a somewhat silly amount of higher-order components wrapping most of my components.

There may be technical reasons why it can't be done, but I think adding an `environment` field or `getEnvironment` method to `RelayContainer` would be a nice API - and could reasonably replace the current pattern even when not using a custom environment:

<S_CODE_TOKEN>
",AndrewIngram,2016-05-17 02:45:31
1136,2016-05-12 18:32:22,"This makes sense. I don't know if we need to expose the whole `RelayEnvironment`. It might be better to just expose `applyUpdate` and `commitUpdate` directly.

Something like this:

<S_CODE_TOKEN>

Completely untested, so might not work; would need Flow types etc.
",wincent,2016-05-17 02:45:31
1136,2016-05-12 19:28:16,"Indeed, components don't (shouldn't ?) need to access the whole environment. 
How does Facebook internally pass the env? I assume with some parts on the new mutation api, this is already the case?
",IwanKaramazow,2016-05-17 02:45:31
1136,2016-05-12 20:49:04,"@IwanKaramazow, we don't pass the env (we were able to spin up a new JavaScript environment for each request).
",wincent,2016-05-17 02:45:31
1136,2016-05-12 20:57:16,"I'm not sure I fully understand, or we're talking about different things.
The components need to have access to some part of the env for mutations, right?
I mean, do you pass it down as props, or make it globally available or `require` it in the right files?
",IwanKaramazow,2016-05-17 02:45:31
1136,2016-05-12 21:39:20,"The [`Relay.Store`](https://github.com/facebook/relay/blob/1e871772522d58d296ebcfbd698ec6f725e2e02c/src/store/RelayStore.js) is a globally accessible, singleton instance of `RelayEnvironment`, so there is no need to pass it anywhere.
",wincent,2016-05-17 02:45:31
1136,2016-05-13 06:42:41,"Oh I'm definitely doing something wrong 😄 

If I don't do this, Relay doesn't get the right props:

<S_CODE_TOKEN>
",IwanKaramazow,2016-05-17 02:45:31
1136,2016-05-13 09:10:05,"@IwanKaramazow what you're experiencing is the exact problem I was trying to solve when opening this issue. The global `Relay.Store` won't work for mutations if you're using a custom environment, it won't have access to the data in the store, and it won't have any custom network layers.  The solution @wincent has proposed should fix the problem.
",AndrewIngram,2016-05-17 02:45:31
1136,2016-05-14 01:46:21,"FYI I have a diff for this internally which does basically what I pasted above. Just awaiting review.
",wincent,2016-05-17 02:45:31
1136,2016-05-14 22:45:32,"+1 just running into this problem now, seems like mutations can't be used properly without this? Unless I stored a copy of the environment and referenced it everywhere.
",ianstormtaylor,2016-05-17 02:45:31
1136,2016-05-18 20:13:04,"Wait, what? I've just been doing `this.context.relay.commitUpdate`. Is that not right? It works...
",taion,2016-05-17 02:45:31
1136,2016-05-18 20:14:21,"I guess the idea is that it feels ""wrong"" to use `this.context.relay` when `this.props.relay` is available?
",taion,2016-05-17 02:45:31
1136,2016-05-18 20:18:28,"> I guess the idea is that it feels ""wrong"" to use this.context.relay when this.props.relay is available?

Also accessing relay via context requires knowing which property to use, what type to use for the contextTypes definition, adding `contextTypes`, etc. Adding these on `props.relay` felt natural given that there are many other methods there already.
",josephsavona,2016-05-17 02:45:31
1136,2016-05-18 20:20:23,"That makes sense, and it's a nice convenience.

I was just confused by the implication here and in https://github.com/facebook/relay/issues/233#issuecomment-220143451 that it somehow wasn't possible, since I've been happily using:

<S_CODE_TOKEN>

for a while now.
",taion,2016-05-17 02:45:31
1136,2016-05-18 20:36:01,"Yeah, it is absolutely possible to execute a mutation on an arbitrary RelayEnvironment today, you just have to make sure that you're executing it against the same environment that you're using for data fetching. I think some folks tried to mix RelayStore and a separate env instance. 
",josephsavona,2016-05-17 02:45:31
1135,2016-05-12 00:38:36,"Found a python scripts on my computer to remove trailing commas from GraphQL fragments. Doesn't catch quite all of them, but it's a good start.
",kassens,2016-05-12 18:30:29
1135,2016-05-12 00:39:18,"@facebook-github-bot import
",kassens,2016-05-12 18:30:29
1135,2016-05-12 00:49:14,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1752642314948073/int_phab) to review.
",ghost,2016-05-12 18:30:29
1135,2016-05-12 01:34:33,"so good
",josephsavona,2016-05-12 18:30:29
1134,2016-05-11 23:38:00,"I know way to do this is with a new Environment instance, but is there a way to safely replace globally created Environment or Store?
",grydstedt,2016-05-12 20:50:04
1134,2016-05-11 23:47:43,"To ""reset"" the store, we recommend creating a new `Relay.Environment` instance and updating the root React component (via `React.render`, `setState`, etc) with the new environment. 
",josephsavona,2016-05-12 20:50:04
1134,2016-05-12 20:50:04,"Going to close this. Let us know if you have any further questions, @grydstedt (but note, Stack Overflow is probably a better place for questions, so that we can keep the issue tracker at GitHub focused on bug reports and feature requests).
",wincent,2016-05-12 20:50:04
1133,2016-05-11 11:50:28,"Right now `Relay.Store` have such syntax for `commitUpdate` method

<S_CODE_TOKEN>

It will be cool, if `commitUpdate` and `applyUpdate` also returns promise, to avoid callback hell.

<S_CODE_TOKEN>

So with promises I get more understandable code and can clearly chain several mutations.
Thoughts?
",nodkz,2016-05-13 11:08:49
1133,2016-05-11 12:05:04,"Due latest meeting notes this issue is more related to @wincent. 
Greg, can you provide such great feature? 

I can wait next vim screencast 😉. But I can not live without promises with committing mutations 😜!   
",nodkz,2016-05-13 11:08:49
1133,2016-05-11 18:19:25,"> can clearly chain several mutations

What exactly do you mean? Generally you create one mutation, run it, and throw it away. Do you have a example scenario in mind?
",wincent,2016-05-13 11:08:49
1133,2016-05-11 18:36:31,"I understand the desire to avoid callback hell, but mutations don't really fit the mold of exactly 1 callback for success/failure. For example, mutations support cancellation (`rollback`), and may need more notifications than just success/failure: there's a proposal for onProgress style callbacks for file uploads (#789) and an `onOptimistic` style callback for when the optimistic payload is applied. 

If anything, an Observable interface seems more appropriate here. Perhaps something like `applyUpdate(mutation): Transaction` where

<S_CODE_TOKEN>

The `next` callback would be unused in the current implementation but provide a place for optimistic or file upload notifications.

I'd encourage you to wrap applyUpdate/commitUpdate in a function that returns a Promise and send a gist with what that looks like and how it helps in product code so we can discuss with more context.
",josephsavona,2016-05-13 11:08:49
1133,2016-05-12 09:58:26,"Example scenarios:
1) Oauth authorization via [winchan](https://github.com/mozilla/winchan), when promise succeed, then call createUserMutation, after it success can be called other actions. And at the end catch error.

2) Checkout order. Again via winchan open payment gateway, and after success do some mutations or querying data. 

3) I think on react-native also can be found such situations, where need wait user or device reaction via promise. And introduce mutation to such promise chain.

4) My simple current scenario, add emails to user private area. When mutation in progress, I add email to list via optimistic update and turn on/off spinner via `_addPending/_removePending`.

<S_CODE_TOKEN>

So first of all, I found in docs this two callbacks `onSuccess`, `onFailure` and can not understood why you not provide promise for mutations (internally network layer works on promises, but in components API used simple CB).

So Joseph perfectly explained purpose of such solution:
`onOptimistic` - very cool callback
`onProgress` - this is great feature. I want work with files on next week, so now I know how I'll do progress in future. Yay!

And I totally agree, that `applyUpdate` should not be promise-based. 
But may be `commitUpdate` or for backward compatibility creating a new method `promiseUpdate` will be good catch for common tasks and nice code style in react-components.

<S_CODE_TOKEN>

## 

PS. But after you have opened my eyes on `applyUpdate` (before I thought that it is redundant). I think how I  can totally switch to it, for serving offline/repeat situations. Or may be somebody share their solution.
",nodkz,2016-05-13 11:08:49
1133,2016-05-13 03:45:16,"Thanks for the examples! It's always good toget more examples of concrete use cases. It looks like these can all be expressed by wrapping the call to apply/commit in a `new Promise(...)`, which is the best approach for now if you want to use Promises. 

Note that commitUpdate doesn't really fit the 1:1 request/response model of Promises, as there are other useful notifications we may want to provide (file upload, notifications when the mutation is queued due to a collision key, etc). 

More generally, Promises are a very limiting API - no cancellation, no ability to return synchronously when that makes sense, only a single callback. Because of this, we've found callbacks to be the most robust and flexible solution until a better standard emerges. 
",josephsavona,2016-05-13 11:08:49
1132,2016-05-11 06:03:30,"In case we have a feature branch on the main repo, we should still show the build status from master instead of the most recent build.
",kassens,2016-05-11 17:45:28
1132,2016-05-11 06:03:45,"@facebook-github-bot import
",kassens,2016-05-11 17:45:28
1132,2016-05-11 06:18:47,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1003305819785915/int_phab) to review.
",ghost,2016-05-11 17:45:28
1131,2016-05-09 23:33:31,,wincent,2016-05-10 21:45:31
1131,2016-05-09 23:33:36,"@facebook-github-bot import
",wincent,2016-05-10 21:45:31
1131,2016-05-09 23:45:12,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/940041756113384/int_phab) to review.
",ghost,2016-05-10 21:45:31
1130,2016-05-09 18:35:17,,zjlovezj,2016-05-09 22:25:28
1130,2016-05-09 20:01:20,"Thanks!
",josephsavona,2016-05-09 22:25:28
1130,2016-05-09 20:01:26,"@facebook-github-bot shipit
",josephsavona,2016-05-09 22:25:28
1130,2016-05-09 20:04:32,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/637870103037106/int_phab) to review.
",ghost,2016-05-09 22:25:28
1129,2016-05-08 20:31:53,"Relay can currently construct invalid GraphQL in the case where two sibling fields end up with the same calls & values. For example in the following, Relay would produce the same serialization key (alias) if $env = WEB:

<S_CODE_TOKEN>

This PR ensures that unique aliases are produced in this case by using both the canonical schema name _and_ the alias (if defined) when constructing the alias (in addition to calls & values).
",josephsavona,2016-05-09 21:20:26
1129,2016-05-08 20:32:01,"@facebook-github-bot import
",josephsavona,2016-05-09 21:20:26
1129,2016-05-08 20:33:25,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/273979639606805/int_phab) to review.
",ghost,2016-05-09 21:20:26
1128,2016-05-08 04:22:09,,dmnd,2016-05-08 19:40:23
1128,2016-05-08 06:47:25,"Thanks!
",wincent,2016-05-08 19:40:23
1128,2016-05-08 06:47:29,"@facebook-github-bot shipit
",wincent,2016-05-08 19:40:23
1128,2016-05-08 06:51:15,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1717921881780812/int_phab) to review.
",facebook-github-bot,2016-05-08 19:40:23
1128,2016-05-08 07:12:39,"The `return undefined` is intentional here; its purpose is clearly stated in the comment at the top of the function. 
",josephsavona,2016-05-08 19:40:23
1128,2016-05-08 10:38:20,"If only I had seen the top of the function... a bit too subtle for me in GitHub's UI:

<img width=""1398"" alt=""fix_indentation__remove_dead_return_by_dmnd_ _pull_request__1128_ _facebook_relay"" src=""https://cloud.githubusercontent.com/assets/7074/15097380/1fb41664-14ce-11e6-9e51-94100a294693.png"">

However, despite the almost invisible comment, that statement looks like unreachable code to me.
",wincent,2016-05-08 19:40:23
1128,2016-05-08 18:59:39,"I apologize, I didn't read the code carefully enough. Carry on.
",josephsavona,2016-05-08 19:40:23
1127,2016-05-08 00:52:29,"Very minor and trivial change, but the excess semicolon shouldn't be there for an export statement. Might confuse the less experienced! :)
",xbili,2016-05-09 17:45:26
1127,2016-05-08 11:18:40,"Thanks!
",wincent,2016-05-09 17:45:26
1127,2016-05-08 11:18:43,"@facebook-github-bot shipit
",wincent,2016-05-09 17:45:26
1127,2016-05-08 11:30:27,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/511278682397981/int_phab) to review.
",ghost,2016-05-09 17:45:26
1126,2016-05-06 21:34:18,"The format of the JSON token error changed slightly with node 6:

<S_CODE_TOKEN>
",kassens,2016-05-09 23:50:29
1126,2016-05-06 21:39:33,"@facebook-github-bot import
",kassens,2016-05-09 23:50:29
1126,2016-05-06 21:41:31,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1188082827882796/int_phab) to review.
",facebook-github-bot,2016-05-09 23:50:29
1125,2016-05-06 17:57:15,"This is a followup on 581d87a to try out if async functions are supported on our
different targets to make some code more readable.
",kassens,2016-05-10 22:29:12
1125,2016-05-06 17:58:08,"I had this idea after seeing 581d87a. Open discussion if we want to use async function.
",kassens,2016-05-10 22:29:12
1125,2016-05-06 18:57:48,"Another option, which I am not sure Jest supports, is to use Jasmine's [standard async test mechanism](http://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support) instead of non-standard `pit`. They all end up producing pretty similar-looking code, so I don't feel too strongly about it.
",wincent,2016-05-10 22:29:12
1125,2016-05-10 22:29:12,"Doesn't seem worth the change.
",kassens,2016-05-10 22:29:12
1124,2016-05-06 17:29:00,,Globegitter,2016-05-07 00:56:48
1124,2016-05-06 19:01:11,"Thanks!
",wincent,2016-05-07 00:56:48
1124,2016-05-06 19:01:16,"@facebook-github-bot shipit
",wincent,2016-05-07 00:56:48
1124,2016-05-06 19:27:08,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1547273895574625/int_phab) to review.
",ghost,2016-05-07 00:56:48
1123,2016-05-06 16:19:35,"When using relay server side, we can send [request headers via init](https://github.com/facebook/relay/blob/master/src/network-layer/default/RelayDefaultNetworkLayer.js#L128), but since there is no browser to pick up any Set-Cookie headers in the response, a custom network layer is required to proxy them over to the client.  This is OK, but it seems clear to me there is some intention on allowing the RelayDefaultNetworkLayer to send contextual headers, and so it feels reasonable to me that perhaps it should also provide a mechanism for retrieving headers from the back end.

I would be happy to propose a pull request if this seems reasonable, though am unsure what the best route to take would be.  The problem currently is that the internal fetch promise chains resolve with only the body data [here](https://github.com/facebook/relay/blob/master/src/network-layer/default/RelayDefaultNetworkLayer.js#L58) and [here](https://github.com/facebook/relay/blob/master/src/network-layer/default/RelayDefaultNetworkLayer.js#L84), and so the header data is lost.  A solution could be to include the header data in the resolves and make sure it gets made available to the consumer.

Of course, you can just tell me this is beyond the scope of the default network layer and I'll happily write my own, but thought it might be worth discussing as I wonder if it could become a common use case for those of us writing isomorphic apps :)

Thanks!
",03eltond,2016-05-06 18:02:40
1123,2016-05-06 16:43:13,"In general I think we want to keep the default layer pretty simple, and the intention is that if you want to do anything ""special"" you can bring your own.

[Here](https://github.com/facebook/relay/issues/1120) is a similar issue from a day or two ago, which includes an interesting comment from @KyleAMathews to [a user-space network layer project](https://github.com/nodkz/react-relay-network-layer).
",wincent,2016-05-06 18:02:40
1123,2016-05-06 18:02:40,"Thanks @wincent for pointing me in that direction.  The idea of using middleware within the network layer is an interesting one that might work out well for us, or at least we can get some good ideas from that implementation.  I'll go ahead and close this since it sounds like a custom layer is the way to go.  Thanks again!
",03eltond,2016-05-06 18:02:40
1122,2016-05-06 15:57:13,"Since **0.8.1** I am receiving this new warning >> `Warning: RelayNetworkLayer: Call received to injectImplementation(), but a layer was already injected.` << when I try to inject my default network layer. I want to separate my GraphQL server from my React/Relay app. I have not injected any other network layer before that. Relay seems to do this by default.

<S_CODE_TOKEN>

What is the right way to go about it to avoid this warning?
",soosap,2016-05-06 16:39:33
1122,2016-05-06 16:39:33,"This is fixed and will be resolved in the next release (see #1111). Sorry about the noise, and thanks for the report!
",wincent,2016-05-06 16:39:33
1122,2016-10-25 14:30:28,"@wincent I still see this warning when using `Relay.injectNetworkLayer(new Relay.DefaultNetworkLayer(url, options))` with `react-relay@0.9.3`.
",sedubois,2016-05-06 16:39:33
1122,2016-10-25 14:44:08,"@sedubois: That suggests that a layer was already injected. Would need to see some code to troubleshoot further.
",wincent,2016-05-06 16:39:33
1122,2016-10-25 15:05:58,"@wincent Yes, a layer was already injected, but I want to update the headers after user authentication. The code is [here](https://github.com/sedubois/belong/blob/gql-auth/app/relay/index.js).
",sedubois,2016-05-06 16:39:33
1122,2016-10-25 15:12:00,"> a layer was already injected

Then everything is working as intended. This is why this is a warning and not an error. The purpose is to help people avoid overwriting a layer by mistake (this actually happened at FB, when two separate teams had their own competing layers in a shared context) but still allow people who have a legitimate reason for injecting more than once to do so, albeit with a warning.

If the warning is truly obnoxious to you then we could look at adding a `force` kind of flag to effectively suppress the warning.
",wincent,2016-05-06 16:39:33
1122,2016-10-25 15:26:33,"> This is why this is a warning and not an error

@wincent It's actually an error (red and still appears when filtering only for Errors in chrome console):

<img width=""1258"" alt=""screen shot 2016-10-25 at 18 22 33"" src=""https://cloud.githubusercontent.com/assets/4217871/19692298/1767389a-9ae0-11e6-9f41-c4992f3f9bce.png"">

> If the warning is truly obnoxious to you then we could look at adding a force kind of flag to effectively suppress the warning.

That would be really welcome, yes 😊 I believe the scenario I described is valid and common, and should therefore not pollute the console.
",sedubois,2016-05-06 16:39:33
1122,2016-10-25 15:31:10,"It uses `warning` ([here](https://github.com/facebook/relay/blob/17096c3f22fbd98d0b4ace26762917e6c6a54832/src/network/RelayNetworkLayer.js#L67)). Seems like that ends up calling `console.error`. Feel free to submit a PR.
",wincent,2016-05-06 16:39:33
1121,2016-05-06 15:33:24,,steveluscher,2016-05-06 18:40:23
1121,2016-05-06 15:58:52,"@facebook-github-bot shipit
",steveluscher,2016-05-06 18:40:23
1121,2016-05-06 16:04:17,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1731342967140875/int_phab) to review.
",facebook-github-bot,2016-05-06 18:40:23
1120,2016-05-05 21:56:37,"I'm developing a react-native app using relay and would find network activity callbacks useful from the `DefaultNetworkLayer`. It would allow me to centralize management of the `StatusBarIOS` network activity indicator if I could tell when a) an active request has started, and b) the request has ended (either successfully, or with an error). 

I think I could do a PR for this relatively easily, if there's interest. The alternatives to this approach would be to use the readyState in `Relay.Renderer` or to build my own custom network layer. The problem with the first approach is that, especially in mobile apps, you end up with `Relay.Renderer` calls throughout the app, and sometimes the readyState doesn't indicate whether the data is being fetched from the cache, or over the network layer. 
",bmcmahen,2016-05-06 01:14:59
1120,2016-05-05 22:11:58,"In general we'd prefer to keep the default network layer as simple as possible. To add custom functionality such as network activity callbacks, you can compose the default implementation in your own object/class with whatever hooks you need. Does this work for your use case?
",josephsavona,2016-05-06 01:14:59
1120,2016-05-06 01:14:59,"Makes sense. I'll give composing the default implementation a try. Thanks.
",bmcmahen,2016-05-06 01:14:59
1120,2016-05-06 01:18:47,"@Ben you might be interested in this recent effort
https://github.com/nodkz/react-relay-network-layer

On Thu, May 5, 2016 at 6:15 PM Ben McMahen notifications@github.com wrote:

> Closed #1120 https://github.com/facebook/relay/issues/1120.
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/1120#event-652154692
",KyleAMathews,2016-05-06 01:14:59
1120,2016-05-06 19:40:24,"For what it's worth, composing the default implementation was super easy and proved perfect for the task. 
",bmcmahen,2016-05-06 01:14:59
1120,2016-05-06 19:48:01,"Cool! Big props to @nodkz for taking this on. 
",KyleAMathews,2016-05-06 01:14:59
1119,2016-05-05 17:45:54,"This will require some changes to babel-relay-plugin, since some API changed in `graphql-js` 0.5.0.
",steveluscher,2016-05-25 00:59:45
1119,2016-05-08 19:41:14,"This is underway in #1118.
",steveluscher,2016-05-25 00:59:45
1118,2016-05-05 17:29:59,,steveluscher,2016-05-24 16:55:26
1118,2016-05-05 17:40:30,"Do you have a quick fix for these callsites @leebyron, since `getPossibleTypes()` has moved? I don't understand all of the implications at first glance. https://github.com/facebook/relay/search?utf8=%E2%9C%93&q=getPossibleTypes
",steveluscher,2016-05-24 16:55:26
1118,2016-05-05 21:41:57,"All `type.getPossibleTypes()` are now `schema.getPossibleTypes(type)` - lookin at the others...
",leebyron,2016-05-24 16:55:26
1118,2016-05-06 19:12:22,"@facebook-github-bot import
",steveluscher,2016-05-24 16:55:26
1118,2016-05-06 19:26:57,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1562845960676028/int_phab) to review.
",ghost,2016-05-24 16:55:26
1117,2016-05-05 15:26:04,,steveluscher,2016-05-05 18:15:33
1117,2016-05-05 17:16:38,"lgtm
",kassens,2016-05-05 18:15:33
1117,2016-05-05 17:21:39,"@facebook-github-bot shipit
",steveluscher,2016-05-05 18:15:33
1117,2016-05-05 17:38:49,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1330562033637101/int_phab) to review.
",ghost,2016-05-05 18:15:33
1116,2016-05-05 07:33:10,,Globegitter,2016-05-05 17:25:22
1116,2016-05-05 16:17:03,"@facebook-github-bot shipit
",josephsavona,2016-05-05 17:25:22
1116,2016-05-05 16:47:39,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1007861582637167/int_phab) to review.
",ghost,2016-05-05 17:25:22
1115,2016-05-04 21:05:48,,wincent,2016-05-04 21:50:24
1115,2016-05-04 21:05:56,"@facebook-github-bot import
",wincent,2016-05-04 21:50:24
1115,2016-05-04 21:18:33,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/252187448502499/int_phab) to review.
",facebook-github-bot,2016-05-04 21:50:24
1114,2016-05-04 20:34:55,,steveluscher,2016-05-05 01:00:23
1114,2016-05-04 20:45:12,"`npm run typecheck`
",mroch,2016-05-05 01:00:23
1114,2016-05-04 22:23:42,"You win some, you lose some.
",steveluscher,2016-05-05 01:00:23
1114,2016-05-04 22:40:44,"@facebook-github-bot shipit
",steveluscher,2016-05-05 01:00:23
1114,2016-05-04 22:45:40,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/921131174659849/int_phab) to review.
",ghost,2016-05-05 01:00:23
1113,2016-05-04 20:14:06,,steveluscher,2016-05-04 23:00:28
1113,2016-05-04 21:29:54,"Nice.

We could also move `cd $TEST_DIR && npm install` into the install script.
",kassens,2016-05-04 23:00:28
1113,2016-05-04 22:24:19,"Oh, don't worry. #1114.
",steveluscher,2016-05-04 23:00:28
1113,2016-05-04 22:24:56,"@facebook-github-bot shipit
",steveluscher,2016-05-04 23:00:28
1113,2016-05-04 22:25:32,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1594574400870343/int_phab) to review.
",ghost,2016-05-04 23:00:28
1112,2016-05-04 19:04:41,"don't merge this... testing travis.
",mroch,2016-05-09 18:02:48
1112,2016-05-09 18:02:48,"Newest flow version has fixed the issues on travis. If we still need this feel free to reopen.
",kassens,2016-05-09 18:02:48
1111,2016-05-04 12:19:28,"Recently a call to `injectDefaultNetworkLayer` in Relay.js was introduced by this commit:  https://github.com/facebook/relay/commit/d1abc54d5ab60fc8e0b17353ea3b9b3bf2d4f4a0

Now it seems that any use of `injectNetworkLayer` fires off the warning `Warning: RelayNetworkLayer: Call received to injectImplementation(), but a layer was already injected.`

That aside, it also seems weird for a default network layer pointing at the same domain to be used, especially considering that Relay may be running in an app with React Native.
",sgwilym,2016-05-04 13:49:14
1111,2016-05-04 13:49:14,"Thanks for bringing this up. 

The commit you link to it not yet in a released version; it's still only on the master branch. Once we cut a new release (soon) or once you switch to the master branch, you should be able to inject just fine using injectNetworkLayer without seeing a warning. 
",wincent,2016-05-04 13:49:14
1111,2016-05-04 13:58:41,"Hi @wincent, I really wouldn't want to waste your time with unreleased bugs! This (or something like it) really seems to have shipped with 0.8.1. I definitely have 0.8.1 installed from npm, and when I look in node_modules/react-relay/lib/Relay.js has the following on line 31:

<S_CODE_TOKEN>
",sgwilym,2016-05-04 13:49:14
1111,2016-05-04 19:16:41,"Right. So note that in 0.8.1 it is using `injectNetworkLayer`, which is why you get the warning when you subsequently use `injectNetworkLayer`.

On the master branch, it uses `injectDefaultNetworkLayer`, which means that stuff will work out of the box, but if you want to override it with `injectNetworkLayer`, you will be able to do so without a warning.

Note that really only Relay itself should ever need to use `injectDefaultNetworkLayer`; I can't think of a use case why product code would ever want to use anything other than `injectNetworkLayer`.
",wincent,2016-05-04 13:49:14
1111,2016-05-05 09:04:17,"Got it, thanks!
",sgwilym,2016-05-04 13:49:14
1111,2016-05-20 20:57:36,"I'm using 0.8.1 and still getting the warning:

> Warning: RelayNetworkLayer: Call received to injectImplementation(), but a layer was already injected.

using the code:

`import RelayLocalSchema from 'relay-local-schema';

import schema from './data/schema';

Relay.injectNetworkLayer(
  new RelayLocalSchema.NetworkLayer({ schema })
);`

from here: [relay-local-schema](https://github.com/relay-tools/relay-local-schema)

running this example: [babel-plugin-react-relay](https://github.com/graphcool/babel-plugin-react-relay/tree/master/examples/schema), even after upgrading it to use: 0.8.1.
",nicerr,2016-05-04 13:49:14
1111,2016-05-20 21:17:35,"> I'm using 0.8.1 and still getting the warning.

This is expected. 0.8.1 prints the warning, but the master branch does not. We'll cut a new release soon so that people don't keep running into this.
",wincent,2016-05-04 13:49:14
1111,2016-05-24 01:12:20,"Thanks... I misunderstood that.
",nicerr,2016-05-04 13:49:14
1111,2016-08-27 00:10:36,"Did this get pushed /resolved ? i'm using ""react-relay"": ""^0.9.2"" and getting this warning when i try and call this function a second time with a token. everything works fine when i dismiss it.

<S_CODE_TOKEN>

<img width=""369"" alt=""screen shot 2016-08-26 at 17 04 39"" src=""https://cloud.githubusercontent.com/assets/5710962/18023568/6ad670f0-6baf-11e6-9193-989e27defe21.png"">

Thanks in advance.
",andyfen,2016-05-04 13:49:14
1111,2016-09-09 20:12:09,"Upgrading past `0.8.1` solved this for me.
",voxmatt,2016-05-04 13:49:14
1111,2016-09-09 20:31:09,"@voxmatt not as such. 
Basically as i can see the error is benign, everything seems to still work fine even tho it gives the yellow box warning ? 

Are you using it for RN ?  you can turn off the warnings by clicking the app name next to the emulator button> edit schema > (change build config to release from debug). 
so that would fix it for production.

 i've just been hitting ""dismiss errors"" for development process. 

any better suggestions/ more info would love to hear ?

<img width=""896"" alt=""screen shot 2016-09-09 at 13 18 09"" src=""https://cloud.githubusercontent.com/assets/5710962/18401726/bde1db72-7690-11e6-8512-fa5a3ac9843b.png"">
",andyfen,2016-05-04 13:49:14
1111,2016-11-01 13:00:07,"having the same problem as @andyfenelon has. Is there any solutions when reconfiguring network layer?
",Oxyaction,2016-05-04 13:49:14
1111,2016-11-01 13:20:30,"I found a hacky solution for this issue:
store the instance of the layer and then modify the configuration stored in private properties.

<S_CODE_TOKEN>

I know that it's very ugly solution but I don't found the other way since there is no any methods to modify or replace the layer. Suggest to add them.
",Oxyaction,2016-05-04 13:49:14
1111,2016-11-01 16:51:52,"I have to confess that I paused on React Native since this. Upgrading did fix it for me but I haven't working on it actively since then.
",voxmatt,2016-05-04 13:49:14
1111,2016-11-01 18:40:02,"Somewhere I read that it's recommend doing a full page refresh after the token is saved rather than re-init the network layer (this error).

I've got this working on web relay using `document.location.reload(true);`

<S_CODE_TOKEN>

I don't know what (if there is) an equivalent to `document.location.reload(true);` that performs a full page refresh for react native, but it would fix this error.
",andyfen,2016-05-04 13:49:14
1111,2016-11-15 17:47:40,"@voxmatt u can use a custom Relay.Store to avoid this

<S_CODE_TOKEN>

just call
`RelayStore.reset(new Networklayer(....))`
",sibelius,2016-05-04 13:49:14
1111,2016-11-15 18:47:11,"@sibelius thank you once again!
",voxmatt,2016-05-04 13:49:14
1111,2016-11-15 18:48:21,"I made a working version here: https://github.com/sibelius/react-native-relay-example
",sibelius,2016-05-04 13:49:14
1111,2016-11-19 22:16:58,"fwiw, i kept seeing this due to hot module reloading: i erroneously had the network layer configured in a module that was being reloaded, so as a result this call kept repeating and the warning logged.
",dminkovsky,2016-05-04 13:49:14
1110,2016-05-03 22:38:21,,steveluscher,2016-05-06 15:59:31
1110,2016-05-06 15:59:31,"Abandoning in favor of #1121.
",steveluscher,2016-05-06 15:59:31
1109,2016-05-03 00:52:45,,steveluscher,2016-05-03 22:25:32
1109,2016-05-03 01:10:30,"This builds well, and the website examples work, but the Jests don't pass. It's having trouble with `instanceof` checks. Seeing a lot of this:

<S_CODE_TOKEN>

https://gist.github.com/steveluscher/dd534fcd2790b2efa1ed40e06b92bc15
",steveluscher,2016-05-03 22:25:32
1109,2016-05-03 05:38:20,"Does removing `babel-runtime` from the build affect your builds at all, @skevy, @taion? I don't know how you build your apps.
",steveluscher,2016-05-03 22:25:32
1109,2016-05-03 05:45:44,"I use `babel-polyfill` for all my application builds, so it wouldn't make a difference to me. Why drop `babel-runtime` though?
",taion,2016-05-03 22:25:32
1109,2016-05-03 05:52:58,"> Why drop babel-runtime though?

I actually tried to drop `babel-polyfill` from the website examples, and discovered that `babel-runtime` alone was not enough to run them. It seems that `core-js/modules/es6.promise` doesn't implement `Promise.done()` – something that we use in Relay quite a bit. This got me thinking that we've been transforming the source with `babel-runtime` in service of nobody, this whole time.

Thoughts?
",steveluscher,2016-05-03 22:25:32
1109,2016-05-03 05:58:12,"Isn't that orthogonal? I thought `Promise.done` came from the special Promise impl in fbjs.

There do seem to be calls to e.g. `Object.assign` in the code that `babel-runtime` would do something useful for, and I do see usages to things not polyfilled by `babel-runtime` like `Array.prototype.find` getting dropped: https://github.com/facebook/relay/issues/968
",taion,2016-05-03 22:25:32
1109,2016-05-03 06:19:45,">  I thought Promise.done came from the special Promise impl in fbjs.

Indeed. I just couldn't get the built product to stop referring to the `core-js` version that doesn't implement `Promise.done()`.

I think that `babel-polyfill` covers `Object.assign` and `Array.prototype.find`.

Also, this nightmare when you plug in the runtime transformer: https://gist.github.com/steveluscher/b6934e8cc2de8af6019ded4473f5d5ff
",steveluscher,2016-05-03 22:25:32
1109,2016-05-03 06:30:34,"OK, I put `babel-runtime` back, but I'm skeptical that it's doing what we need it to do. This whole system could use a look-over.
",steveluscher,2016-05-03 22:25:32
1109,2016-05-03 06:34:51,"Oh gosh, yeah, that does sound messy. Maybe ""bring your own ES6 environment"" isn't such a bad approach, then.

`babel-polyfill` does cover everything that `babel-runtime` covers, but it's only helpful if people remember to use it 😛
",taion,2016-05-03 22:25:32
1109,2016-05-03 06:36:14,"It is kind of messy.

I'm really tempted to strip out all the polyfills, and write up instructions on how to polyfill where necessary, but tonight is not the night.
",steveluscher,2016-05-03 22:25:32
1109,2016-05-03 13:29:15,"Quite familiar with that pain: https://github.com/reactjs/react-router/pull/3331/files

It's sort of funny that it's easier to use new syntax, which transpiles down cleanly, than to use new standard library functionality, which instead requires a polyfill (or runtime, but then `babel-runtime` replaces even things like `Object.keys` with ugly core-js calls).
",taion,2016-05-03 22:25:32
1109,2016-05-03 16:13:31,"Yeah. We still have use cases for `Object.assign` in Relay that object rest spread syntax doesn't cover (like mass assigning some properties without making a copy).
",steveluscher,2016-05-03 22:25:32
1109,2016-05-16 20:46:23,"Would there be a release soon?
",Vanuan,2016-05-03 22:25:32
1109,2016-05-16 20:48:32,"Is there a workaround?
",Vanuan,2016-05-03 22:25:32
1109,2016-05-17 04:46:10,"If we can get #1118 in this week, we'll do a release. cc/ @leebyron
",steveluscher,2016-05-03 22:25:32
1108,2016-05-03 00:52:25,,steveluscher,2016-05-03 05:30:32
1108,2016-05-03 00:52:30,"@facebook-github-bot import
",steveluscher,2016-05-03 05:30:32
1108,2016-05-03 01:13:32,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/985469418197009/int_phab) to review.
",ghost,2016-05-03 05:30:32
1108,2016-05-03 05:30:32,"Actually, let's keep using `babel-polyfill`.
",steveluscher,2016-05-03 05:30:32
1107,2016-05-02 21:52:38,,steveluscher,2016-05-02 22:45:28
1107,2016-05-02 21:54:49,"@facebook-github-bot shipit
",steveluscher,2016-05-02 22:45:28
1107,2016-05-02 22:02:59,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1592569411053297/int_phab) to review.
",ghost,2016-05-02 22:45:28
1106,2016-05-02 17:40:44,"This was missed in fb3e8d488ad4f9dbf590a3225d06492993e1d14e.
",kassens,2016-05-02 20:35:22
1106,2016-05-02 17:40:54,"@facebook-github-bot import
",kassens,2016-05-02 20:35:22
1106,2016-05-02 17:48:48,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1532969160345137/int_phab) to review.
",ghost,2016-05-02 20:35:22
1105,2016-05-01 16:36:18,"I was looking at this stackoverflow question: https://stackoverflow.com/questions/36948277/relay-js-error-repeat-argument-must-be-greater-than-or-equal-to-0-and-not-be

It seems like if your server returns errors with column `0`, offset would be `-1`, and `repeat` would 💥  because `.repeat` takes a count argument which is

> An integer between 0 and +∞.

This fix is just `Math.max(0, offset)`.

I was looking for the spec for errors, I'm not totally sure if `0` is an accepted value for column in the first place so I might be missing context.
",xuorig,2016-05-11 06:00:24
1105,2016-05-01 18:32:28,"Addressed your comments @josephsavona 
",xuorig,2016-05-11 06:00:24
1105,2016-05-10 22:32:11,"Thanks!

@facebook-github-bot import
",kassens,2016-05-11 06:00:24
1105,2016-05-10 22:33:53,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/548900535290502/int_phab) to review.
",ghost,2016-05-11 06:00:24
1105,2016-05-24 21:38:05,"+1 When is this going to be released?
",sjchmiela,2016-05-11 06:00:24
1105,2016-05-25 01:32:24,"We're likely to cut a release this week, unless there's a show-stopper.
",wincent,2016-05-11 06:00:24
1105,2016-05-25 06:20:05,"Great, thanks!
",sjchmiela,2016-05-11 06:00:24
1104,2016-04-30 18:21:52,"Given the issue https://github.com/facebook/relay/issues/1101 and that there are no docs for `prepareParams` yet I thought I could do both at once.

I haven't actually tested this example out as such, but assuming that `prepareParams` in `react-router-relay` (https://github.com/relay-tools/react-router-relay/tree/6c36030e8bdfba7ca2e344a6436135610b6e2256#additional-parameters) do behave exactly the same as stated.
",Globegitter,2016-06-25 02:31:40
1104,2016-05-01 08:29:49,"I know this example is a bit overloaded, since it actually covers bits of the `Route` as well as the `Relay.Container` but it does kind of fit and would have at helped us when we were trying to solve that specific use-case.
",Globegitter,2016-06-25 02:31:40
1104,2016-05-15 13:55:42,"@josephsavona Have addressed most of your comments. Seeing as you have now more thoroughly documented the variable passing down (https://github.com/facebook/relay/pull/1142) I simplified the example.

I did however think that some of the other sections could do with some further explanation. For me it is often more easy to understand things based on an (explained) example.

Let me know if anything else needs fixing up.
",Globegitter,2016-06-25 02:31:40
1104,2016-05-27 11:11:04,"@josephsavona Anything still blocking this PR being merged?
",Globegitter,2016-06-25 02:31:40
1104,2016-05-27 15:58:14,"@Globegitter see my comment about the extraneous `limit` argument
",josephsavona,2016-06-25 02:31:40
1104,2016-05-27 15:58:20,"otherwise looks good
",josephsavona,2016-06-25 02:31:40
1104,2016-05-27 16:03:39,"Somehow missed. Just updated. 
",Globegitter,2016-06-25 02:31:40
1104,2016-06-24 23:42:24,"Going to pick this up and polish off any pending details necessary to get this through internal code-review. Thanks, @Globegitter.
",wincent,2016-06-25 02:31:40
1104,2016-06-24 23:42:48,"@facebook-github-bot import
",wincent,2016-06-25 02:31:40
1104,2016-06-24 23:43:27,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/503983499788689/int_phab) to review.
",ghost,2016-06-25 02:31:40
1104,2016-06-25 02:49:26,"@Globegitter: I landed the modified version of this, incorporating @josephsavona's suggestions:

> Can you separate these? Note that `prepareParams` can be used for things like setting default values or converting from strings (e.g. in a URL) to integers. I'd recommend keeping this PR focused on `prepareParams` only, and maybe add a follow-up for the route -> root container variable example.
",wincent,2016-06-25 02:31:40
1104,2016-07-08 05:55:43,"@wincent Sorry for the delay and thanks for making the last changes.
",Globegitter,2016-06-25 02:31:40
1103,2016-04-29 19:35:48,"When upgrading from Relay `v0.8.0` to `v0.8.1`, I noticed the following error in the web console:

<S_CODE_TOKEN>

The release notes of `v0.8.1`, specifically the below line, explain the sudden appearance of this warning, despite no code changes:

> `Relay.Environment#injectNetworkLayer` (and, by extension `Relay#injectNetworkLayer`) will now warn if injecting would overwrite a previously injected layer.

I call `Relay#injectNetworkLayer` once throughout the entire app just to customize Relay network preferences (to pass cookies to the GraphQL server), which according to the documentation, is perfectly fine, so what could explain the phantom second call to that function? Does it have to do with where I call it? For reference, here is my `Relay#injectNetworkLayer` call:

<S_CODE_TOKEN>

...or could it have something to do with an internal call to `Relay.Environment#injectNetworkLayer` perhaps? 

Any help would be greatly appreciated. Thanks in advance! 🙏 
",liorrm,2016-04-29 21:27:32
1103,2016-04-29 20:06:03,"I believe @wincent fixed this in d1abc54d5ab60fc8e0b17353ea3b9b3bf2d4f4a0
",josephsavona,2016-04-29 21:27:32
1103,2016-04-29 20:15:51,"Great, thanks @josephsavona. Safe to assume the fix will make it in the next minor release?
",liorrm,2016-04-29 21:27:32
1103,2016-04-29 21:27:13,"@liorrm yup!
",josephsavona,2016-04-29 21:27:32
1103,2016-04-29 21:27:32,"I'm going to close since this has been fixed on master.
",josephsavona,2016-04-29 21:27:32
1103,2016-04-30 01:44:51,"Yeah, sorry about that! @liorrm 

Will likely cut a release next week, so that this doesn't bother too many people.
",wincent,2016-04-29 21:27:32
1102,2016-04-29 19:15:31,"When I use the following fragment in a Relay container:

<S_CODE_TOKEN>

`props.parent` does not include a `null` `child`.

<S_CODE_TOKEN>

However, when I add another field to `child`:

<S_CODE_TOKEN>

`props.parent` then includes `child`:

<S_CODE_TOKEN>

Why doesn't the `child` show up in the first example? Is this behavior caused by Relay's internal caching system?
",jsdir,2017-01-31 00:54:34
1102,2016-05-04 22:07:24,"This looks like a bug to me.

Relay will avoiding passing generated data to components because it wants to be sure they only get the data they explicitly asked for. `id` fields are often generated, but not in the case of your example, where the `id` field is explicit, so you should get it if you're asking for it.

Interested in coming up with a failing test case and making sure that it still fails on the current master branch @jsdir?
",wincent,2017-01-31 00:54:34
1102,2016-05-19 01:16:09,"Oh man I wish I had looked here earlier, took forever to realize it wasn't my fault! (Hopefully.) Running into this as well, except with:

<S_CODE_TOKEN>

Without adding another field to `tokens` the `team.tokens` in the response will be undefined, instead of an empty array. As soon as I add:

<S_CODE_TOKEN>

The empty array `team.tokens` is there as expected.
",ianstormtaylor,2017-01-31 00:54:34
1102,2016-06-28 09:46:15,"Updating from Relay 0.8.1 to 0.9.1 seem to have fixed this issue for us or then just hided it somehow since it was bit hard to reproduce it. @jsdir @ianstormtaylor would be nice to know if you have tested with newer Relay and if it fixed this issue for you too?
",anttimo,2017-01-31 00:54:34
1102,2016-06-28 22:17:28,"I'm closing this issue since this bug apparently got fixed when `subtractRelayQuery` was removed in `relay@0.9.1`
",jsdir,2017-01-31 00:54:34
1102,2017-01-31 00:54:34,"Indeed, R.I.P., `subtractRelayQuery`. Thanks very much for reporting the issue, and to others who chimed in as well.",wincent,2017-01-31 00:54:34
1101,2016-04-29 15:36:47,"We are having a tree of components which has two separate fragments being passed down:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

The `customer` fragment is used to just displays a single customer that is fetched via the `node(id: $id)` query. The other fragment returns a list of `statements` that can (optionally) be selected just for a single customer. So from the `Relay.Route` we are passing all the way down the Relay ID for the customer (and on the backend we are converting it to our local id),

So on OtherComponent.js we want to display a single customer's statements which at a glance seems like it should just work.

Strangly though as it stands, when we access `this.props.viewer`  in `OtherComponent.js` we have an object, but apart from some private properties it is empty.

If now we change the `customerId` from being passed down to hardcoded (so: `... statement(customerId: valid_global_id) {...`) it all of the sudden works. we have all everything on `this.props.viewer` that we requested.

What is going on here? Is relay trying to do some matching and because it is seeing a valid id for a customer here and we are asking for something else than a customer it just freaks out?

This issue is also very hard to debug as there is no error, we actually get the expected response back it just seems to go 'missing' on the way.
",Globegitter,2016-05-12 20:17:45
1101,2016-04-29 15:56:42,"@Globegitter Can you paste the route queries as well? Anything else interesting between the route and the top fragment given above?
",josephsavona,2016-05-12 20:17:45
1101,2016-04-29 16:44:42,"We are actually using `react-router-relay` which injects the params from the route (https://github.com/relay-tools/react-router-relay#path-parameters) and we have that defined as:

<S_CODE_TOKEN>

Nothing else interesting that I can think off. Though I am also just seeing there is a `prepareParams` in here: https://github.com/relay-tools/react-router-relay#additional-parameters Maybe that would have been a better way of passing down the variable?
",Globegitter,2016-05-12 20:17:45
1101,2016-04-29 16:49:34,"@Globegitter Hmm. Should those `viewer` fragments be `fragment on Viewer` instead of `fragment on Query`?
",josephsavona,2016-05-12 20:17:45
1101,2016-04-29 17:29:44,"@josephsavona This is a more a graphql python convention: http://graphene-python.org/docs/relay/

Under `Node Root field` you see that it is defined as `class Query` which automatically creates it as `type Query`. There is an example of it: https://github.com/graphql-python/swapi-graphene/blob/master/starwars/schema.py#L147

It has been working fine for us so far for quite a few other queries and we are getting the expected response back from the server (even `RelayNetworkDebug` is printing that response). 
",Globegitter,2016-05-12 20:17:45
1101,2016-04-29 18:25:27,"Hmm... this seems familiar. I think we ran into this recently and couldn't figure out why, but walked away from it at that point. The case was very similar:
- passing an variable down from a container (also via a `react-router-relay` param)
- the nested container uses the variable in it's fragment
- generated query is correct
- response is correct and includes the data requested by the nested container
- nested container does not pass the requested data on via props

At the time, my suspicion was that the fragment pointer given to the nested container was somehow incorrect, or something... but we had to run and promptly forgot about the issue over the weekend 👍 
",NevilleS,2016-05-12 20:17:45
1101,2016-04-29 20:08:18,"Thanks for the reminder, @NevilleS. 

@Globegitter Be sure to pass any overridden variables down in props, so `<Child customerId={this.props.relay.variables.customerId} ... />`. Does that help?
",josephsavona,2016-05-12 20:17:45
1101,2016-04-29 21:38:31,"I got the same issue. I don't understand  @josephsavona, he is passing the parameter through the container, so if he were to pass the changed relay variables down he would have to manually pass child relay context from the parent?
",sboutzen,2016-05-12 20:17:45
1101,2016-04-29 23:31:56,"When a parent overrides child variables with the second argument to `Container.getFragment()`, it must also pass the same variables as props to that container. A container might be included by a parent with multiple different values and needs the variables as props to know which variables to use when reading data from the cache.
",josephsavona,2016-05-12 20:17:45
1101,2016-04-30 09:36:12,"@josephsavona Yeah that 'double' syntax does initially feel a bit unnatural and verbose. It has tripped up a few people in our office in the past that you need to define `Child.getFragment('name')` and then also pass down `<Child name={this.props.name} ... />`. 

Couldn't the `getFragment` syntax be enough so the `RelayContainer` can inject the necessary props?

> @Globegitter Be sure to pass any overridden variables down in props, so `<Child customerId={this.props.relay.variables.customerId} ... />.` Does that help?

Thank you for that answer we did indeed not do that. Will try that asap.
",Globegitter,2016-05-12 20:17:45
1101,2016-04-30 16:58:22,"@josephsavona That worked, thank you for the clarification
",sboutzen,2016-05-12 20:17:45
1101,2016-04-30 18:14:30,"> Couldn't the getFragment syntax be enough so the RelayContainer can inject the necessary props?

@globegitter no, unfortunately it is insufficient. The same child fragment might be included with different sets of variables by the same parent. If we tried too pass down the variables e.g. implicitly through the fragment data, there would be no way to tell which set of variables to use. Passing the vars as props is the only way to disambiguate.
",josephsavona,2016-05-12 20:17:45
1101,2016-04-30 18:31:43,"Added some docs around that in #1104 which should hopefully make this easier for others in the future.

@josephsavona There is clearly something I do not fully understand then. I thought that all variables are being passed down from the `Route`. So looking at my example https://github.com/facebook/relay/pull/1104/files#diff-fbdd57764a52a0f91f0970024af6e714R87 it would seem that the only variable that ever could be passed down as `limit` is 10 even if we would specify the `Child` fragment multiple times (given it is hardcoded in the `Route`). 

So is the value defined in the `Route` ignored then? Or can it simply be overridden? And why do we have to specify `${Child.getFragment('viewer', {limit})}`, which implies that limit will be passed down from the `Route`, if we can pass down whatever we want from the actual component anyway? My apologies for these all these questions, but the semantics around passing down variables the container chain still seems a bit mysterious to me. 
",Globegitter,2016-05-12 20:17:45
1101,2016-04-30 22:00:54,"I think the confusion is that you are focusing only on the case of a top-level RelayContainer. Containers can be children of other containers, and this is where a given child container could be included by a parent twice with different variables. 

To clarify the different pieces:
- RelayRoute automatically passes all route params to the root container fragment _if_ you use the abbreviated form for queries:
  
  <S_CODE_TOKEN>
  
  Basically relay passes all the route params for you to getFragment. 
- RelayRenderer also passes all route params as props to the top level container as a convenience. 
- In all other cases, if you pass custom vars to `getFragment`, you must also pass them as props too so that the container knows what vars to use when reading data. 
",josephsavona,2016-05-12 20:17:45
1101,2016-05-01 05:55:03,"@Globegitter I think this [example](https://github.com/facebook/relay/issues/309#issuecomment-140485321) nicely illustrates the ambiguity issue.
",jardakotesovec,2016-05-12 20:17:45
1101,2016-05-01 08:09:29,"@josephsavona  Ah yeah of course the container can pass its own variables down, that makes total sense. Hmm, but you are saying that route params are being passed down automatically, when we tested it that was not the case. But maybe that is also because `https://github.com/relay-tools/react-router-relay` does not actually create a `Relay.Route` under the hood, or maybe it was because it was at the end of a long day. Either way, I will do some more testing understand the principle now. Thank you for the clarification though.

@jardakotesovec Thank you for the example, yep that clears it up completely.

(that basically resolves the issue, I will close it once I got to test it out.)
",Globegitter,2016-05-12 20:17:45
1101,2016-05-01 18:18:46,"> Hmm, but you are saying that route params are being passed down automatically, when we tested it that was not the case.

Do you have a repro for this? `RelayReadyStateRenderer` [always passes the route params](https://github.com/facebook/relay/blob/master/src/container/RelayReadyStateRenderer.js#L140) to the root container. If you use the short query format that I gave above, Relay [passes all variables to `getFragment`](https://github.com/facebook/relay/blob/master/src/query/buildRQL.js#L145). If you manually call `${Container.getFragment()}`, only the variables that you specify are passed.
",josephsavona,2016-05-12 20:17:45
1101,2016-05-12 17:03:37,"@Globegitter were you able to resolve this?
",josephsavona,2016-05-12 20:17:45
1101,2016-05-12 20:17:45,"@josephsavona Thanks for checking in on that. We had in the meantime re-written how the query is structured, which solved this problem as well. There is another part in one of our apps though that I wanted to look into where we are also passing down variables in a similar way. Back when we implemented this I was not aware that we had to pass down the variables as props but we still managed to get it to work somehow. So wanted to verify again what we were doing there. That aside this can be closed and thank you for the quick response and good explanation. Has been very educational.

> Do you have a repro for this? RelayReadyStateRenderer always passes the route params to the root container. If you use the short query format that I gave above, Relay passes all variables to getFragment. If you manually call ${Container.getFragment()}, only the variables that you specify are passed.

We have needed Route params again and I can confirm that they are being passed down automatically as expected, so that must have just been something on our side then.
",Globegitter,2016-05-12 20:17:45
1101,2016-05-13 08:03:59,"Yeah @josephsavona in our other usage we where actually passing down the variable as prop. I was just not consciously aware of that. That completely resolves this then. Thanks again.
",Globegitter,2016-05-12 20:17:45
1100,2016-04-29 09:06:51,"Thanks to @mailaneel for reporting this, which I missed in ed8d28ee706b31936.

Fixes https://github.com/facebook/relay/issues/1099
",wincent,2016-04-29 16:30:32
1100,2016-04-29 09:29:47,"CI failures look unrelated so I am going to import this and look into the failures separately tomorrow.
",wincent,2016-04-29 16:30:32
1100,2016-04-29 09:29:53,"@facebook-github-bot import
",wincent,2016-04-29 16:30:32
1100,2016-04-29 09:35:02,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1082839481752534/int_phab) to review.
",ghost,2016-04-29 16:30:32
1099,2016-04-29 05:56:07,"I can see some commits related to removing `Relay.injectDefaultNetworkLayer` from public api and also adding warning if we try to inject network layer more than once.

Should this line of [code](https://github.com/facebook/relay/blob/00de34d32d51ba9e4d17e45280ad6d7e2734c6ed/src/__forks__/Relay.js#L30)    use `Relay.injectDefaultNetworkLayer` instead of `Relay.injectNetworkLayer`  to allow us to inject our own network layer with out warning?
",mailaneel,2016-04-29 16:30:32
1099,2016-04-29 09:07:17,"Thanks very much for catching and reporting this @mailaneel. https://github.com/facebook/relay/pull/1100 should fix this.
",wincent,2016-04-29 16:30:32
1099,2016-04-29 11:43:18,"@wincent thanks for quick fix
",mailaneel,2016-04-29 16:30:32
1098,2016-04-28 18:01:32,"I'm tracking down an issue where Relay generated a mutation request with ~15k instances of an ""id"" field lookup within the same fragment.

Our application shows some near-realtime data that we've been getting by calling `forceFetch` on a timer within our component.

What I think is happening is that each of the responses to that causes a new entry to be added to the RelayQueryTracker. When a mutation for the same node is run, Relay compares these children to the fatQuery. While the fragment that was `forceFetch`'d is not matched, the lookup for the `id` field is. Since these field references are not de-duped in the mutation query, the generated GraphQL has “id” once for each `forceFetch` request that was made.

I think that the right solution is to try and reduce the buildup in the tracker by de-duping, at least as merge time but possibly when the number of children grows to a certain size? I'm willing to put some work into fixing this, but I'd like to know what a recommended approach would be.
",finneganh,2016-07-26 18:46:55
1098,2016-04-28 18:15:30,"Thanks for posting this. We used to ""flatten"" the mutation query, but this can introduced some subtle bugs (in addition to being an expensive operation), hence the current implementation. `forceFetch` is really designed for periodically refreshing the cache, and as such is overwrites/adds metadata tracking including tracked queries. It isn't really optimized for real-time applications - if you're calling `forceFetch` a lot (multiples times a minute), it might be worth checking out alternate approaches - I [outlined an approach](https://github.com/facebook/relay/issues/541#issuecomment-213093469) on #541 that might work here.

Longer-term, we're exploring the possibility of not lazily generating tracked queries based on the active views, which would solve this and other issues.
",josephsavona,2016-07-26 18:46:55
1098,2016-04-28 19:14:43,"@josephsavona Thanks for the tip on that approach. It looks like `handleQueryPayload` still causes the tracker to grow, though, due (at least) to creating the `RelayQueryWriter` with `updateTrackedQueries: true`.

One thing I seem to be noticing is that fragment references are not subject to the duplication at least in the mutation’s query, but the field is. Does that match with the behavior you're expecting? Is there a chance that whatever might be preventing duplicate fragment references could be applied to fields?

(In the fragment below, the `forceFetch`’d component is responsible either F1 or F2, and then the duplicate IDs.)

<S_CODE_TOKEN>

That being said, preventing the query from being silly large is our immediate goal, but if our use of `forceFetch` is leaking too much memory over time we'd want to address that problem in a different place.

I think I want to investigate periodically deduping in the `RelayQueryTracker`, which I think could be done outside of Relay by finding its reference off of a `RelayStoreData` if you think that's not a good match for what should be in the framework itself.
",finneganh,2016-07-26 18:46:55
1098,2016-04-28 21:04:12,"> I think I want to investigate periodically deduping in the RelayQueryTracker, which I think could be done outside of Relay by finding its reference off of a RelayStoreData if you think that's not a good match for what should be in the framework itself.

This could work as a temporary workaround. Long-term, however, we plan to get rid of query tracking altogether.
",josephsavona,2016-07-26 18:46:55
1098,2016-04-28 21:52:58,"Long-term plan sounds good.

I can't (yet) speak to the overall performance impact of doing deduplication logic on the `trackNodeForID` path, but I coded up the approach for us to try. I've included the gist in case anyone else wants to give it a go or you're interested in trying that approach before the trackerless implementation is ready.

This is installed by hacking it in to `RelayEnvironment#getStoreData()._queryTracker`

https://gist.github.com/finneganh/6d125087a8ee104f4cfedf85c2607712

BTW, I also want to thank you for having quick and valuable responses to the issues that I've been filing. We've had a lot of great success with Relay so far, and only a few tiny problems.
",finneganh,2016-07-26 18:46:55
1098,2016-04-28 22:18:19,"> This is installed by hacking it in to RelayEnvironment#getStoreData()._queryTracker

Rather than implement your own flattening, I'd recommend using the existing traversal. It's also better to avoid flattening until you actually execute a mutation (otherwise all reads get slower). Maybe something like:

<S_CODE_TOKEN>

>  I also want to thank you for having quick and valuable responses 

Great to hear, happy to help :-)
",josephsavona,2016-07-26 18:46:55
1098,2016-04-28 23:21:53,"Ah, didn't know about that traversal, I'll take a look!

Thought about delaying until mutation time, but worried about the
unbounded memory growth in the tracker as this page can be used as a
long-running dashboard.

On Thursday, April 28, 2016, Joseph Savona notifications@github.com wrote:

> This is installed by hacking it in to
> RelayEnvironment#getStoreData()._queryTracker
> 
> Rather than implement your own flattening, I'd recommend using the
> existing traversal. It's also better to avoid flattening until you actually
> execute a mutation (otherwise all reads get slower). Maybe something like:
> 
> const RelayQuery = require('RelayQuery');const RelayMetaRoute = require('RelayMetaRoute');const flattenRelayQuery = require('flattenRelayQuery');
> const queryTracker = RelayStore.getStoreData().getQueryTracker();const getTrackedChildrenForID = queryTracker.getTrackedChildrenForID.bind(queryTracker);queryTracker.getTrackedChildrenForID = (id) => {
>   const children = getTrackedChildrenForID(id);
>   if (!children || !children.length) {
>     return [];
>   }
>   const fragment = RelayQuery.Fragment.build(
>     'FlattenedFragment',
>     RelayMetaRoute.get('$YourModuleName'),
>     {}
>   );
>   return flattenRelayQuery(fragment).getChildren();
> };
> 
> I also want to thank you for having quick and valuable responses
> 
> Great to hear, happy to help :-)
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/1098#issuecomment-215579632
",finneganh,2016-07-26 18:46:55
1098,2016-05-04 02:39:36,"I'm hitting this as well. Something about these mutation queries ends up actually killing my GraphQL server for some reason.
",taion,2016-07-26 18:46:55
1098,2016-05-04 02:49:45,"You may want to modify your express-graphql middleware and bring the max
allowed query size down from 100k, which will fail the mutations but
hopefully keep you up.

And, while I can't speak to all the performance trade-offs in the code I
posted above, it does keep the fat query from growing due to the query
tracker.

On Tuesday, May 3, 2016, Jimmy Jia notifications@github.com wrote:

> I'm hitting this as well. Something about these mutation queries ends up
> actually killing my GraphQL server for some reason.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/1098#issuecomment-216726867
",finneganh,2016-07-26 18:46:55
1098,2016-05-04 03:59:12,"That's probably a good idea. That said, it looks like @josephsavona's code fragment lets me address the issue on my end. I adapted it (hopefully not too incorrectly) to fix the call to `RelayQuery.Fragment.build` as:

<S_CODE_TOKEN>

I'm going to take a look at integrating something like your deduping query tracker next, for the reasons you mentioned, but this patch is enough to get things in a working state for me.
",taion,2016-07-26 18:46:55
1098,2016-05-04 04:17:38,"It looks like things work with:

<S_CODE_TOKEN>

I'm well aware this voids my warranty, but it seems to work.
",taion,2016-07-26 18:46:55
1098,2016-05-04 12:28:22,"One thing to note is that flattenRelayQuery I believe also dereferences
fragments. Not sure if it matters much, but something to be aware of.

On Wednesday, May 4, 2016, Jimmy Jia notifications@github.com wrote:

> It looks like things work with:
> 
> // From https://github.com/facebook/relay/issues/1098:
> import flattenRelayQuery from 'react-relay/lib/flattenRelayQuery';import RelayNodeInterface from 'react-relay/lib/RelayNodeInterface';import RelayQuery from 'react-relay/lib/RelayQuery';import RelayQueryTracker from 'react-relay/lib/RelayQueryTracker';
> const baseTrackNodeForID = RelayQueryTracker.prototype.trackNodeForID;
> function trackNodeForID(node, id) {
>   baseTrackNodeForID.call(this, node, id);
> 
>   /\* eslint-disable no-underscore-dangle _/
>   const nodes = this._trackedNodesByID[id];
>   /_ eslint-enable no-underscore-dangle */
> 
>   if (nodes.isMerged) {
>     return;
>   }
> 
>   const children = [];
>   nodes.trackedNodes.forEach(trackedNode => {
>     children.push(...trackedNode.getChildren());
>   });
> 
>   nodes.isMerged = true;
>   nodes.trackedNodes.length = 0;
> 
>   const containerNode = RelayQuery.Fragment.build(
>     'patchRelay', RelayNodeInterface.NODE_TYPE, children
>   );
>   if (containerNode) {
>     nodes.trackedNodes.push(flattenRelayQuery(containerNode));
>   }
> }
> RelayQueryTracker.prototype.trackNodeForID = trackNodeForID;
> 
> I'm well-aware this voids my warranty, but it seems to work.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/1098#issuecomment-216737474
",finneganh,2016-07-26 18:46:55
1098,2016-05-04 14:13:22,"It looks like it collapses all fragments at any given level, rather than flattening them all into the root. I think this is okay for now... at least, I haven't seen problems yet.
",taion,2016-07-26 18:46:55
1098,2016-05-04 14:58:34,"flattenRelayQuery retains fragments where necessary (type boundaries).
",josephsavona,2016-07-26 18:46:55
1098,2016-07-26 17:53:19,"I think this may actually be resolved by https://github.com/facebook/relay/commit/bb67f9c9029e195734606e8479a15d7e6da91b23 in v0.9.2.
",taion,2016-07-26 18:46:55
1098,2016-07-26 18:46:55,"@taion Thanks for the reminder, this is fixed in v0.9.2.
",josephsavona,2016-07-26 18:46:55
1098,2016-07-26 20:26:13,"cc @chirag04
",taion,2016-07-26 18:46:55
1098,2016-07-26 20:47:13,"I just verified that this looks good on my end now without the monkey patch. Thanks!
",taion,2016-07-26 18:46:55
1097,2016-04-28 10:38:35,"Assuming that this is public, since it is not marked as internal.
",Globegitter,2016-04-28 15:28:38
1097,2016-04-28 13:46:23,"Thanks, @Globegitter!

This was added to support `RelayNetworkDebug` in v0.8.1. `RelayNetworkDebug` was itself added in v0.8.0. As such, it's recently been in a state of flux, which is why we didn't rush to document it. I think for now we should let this bake at least a couple more releases to be sure it won't need to change before mentioning it in any public docs.
",wincent,2016-04-28 15:28:38
1097,2016-04-28 15:28:37,"That is fair. As a note on that the revised `RelayNetworkDebug` is working like a charm so far in our app (the previous implementation did not).
",Globegitter,2016-04-28 15:28:38
1096,2016-04-28 04:03:21,,steveluscher,2016-04-28 05:55:26
1096,2016-04-28 04:03:26,"@facebook-github-bot shipit
",steveluscher,2016-04-28 05:55:26
1096,2016-04-28 04:18:27,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1592897281038099/int_phab) to review.
",ghost,2016-04-28 05:55:26
1095,2016-04-27 21:44:36,"This jest release is compatible with node 6 and will help with adding node 6 to
our test matrix (PR #1091).
",kassens,2016-04-27 23:50:29
1095,2016-04-27 21:44:41,"@facebook-github-bot import
",kassens,2016-04-27 23:50:29
1095,2016-04-27 22:03:31,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/996440193738935/int_phab) to review.
",ghost,2016-04-27 23:50:29
1094,2016-04-27 21:01:02,,kassens,2016-04-27 23:20:42
1094,2016-04-27 21:01:06,"@facebook-github-bot import
",kassens,2016-04-27 23:20:42
1094,2016-04-27 21:02:25,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/481144578761434/int_phab) to review.
",ghost,2016-04-27 23:20:42
1093,2016-04-27 20:48:55,,kassens,2016-04-27 23:20:42
1093,2016-04-27 20:50:11,"@facebook-github-bot import
",kassens,2016-04-27 23:20:42
1093,2016-04-27 21:02:28,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1694153657520154/int_phab) to review.
",ghost,2016-04-27 23:20:42
1092,2016-04-27 06:06:11,,wincent,2016-04-27 18:10:24
1092,2016-04-27 06:06:17,"@facebook-github-bot import
",wincent,2016-04-27 18:10:24
1092,2016-04-27 06:26:42,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/556917671157676/int_phab) to review.
",ghost,2016-04-27 18:10:24
1091,2016-04-27 03:24:15,,chentsulin,2016-05-06 21:40:23
1091,2016-04-27 06:08:46,"Thanks for this, @chentsulin. Looks like we might have some work to do to make things pass before we can merge this. Want to take a look at those failures?
",wincent,2016-05-06 21:40:23
1091,2016-04-28 06:30:51,"ok, i will take a look and try to figure out what happened.
",chentsulin,2016-05-06 21:40:23
1091,2016-04-28 13:47:37,"@chentsulin: check out @kassens diff links above. That _might_ fix it, and is _at least_ related.
",wincent,2016-05-06 21:40:23
1091,2016-04-30 20:02:03,"Yes, the `jest` update was required to make most of the tests pass, but there still seems to be some legit errors.
",kassens,2016-05-06 21:40:23
1091,2016-05-06 21:40:23,"Thanks for sending this out, I took the liberty to include this change with #1126 which fixes the broken unit tests.
",kassens,2016-05-06 21:40:23
1090,2016-04-27 00:11:49,,kassens,2016-04-27 02:40:24
1090,2016-04-27 00:57:41,"@facebook-github-bot shipit
",cpojer,2016-04-27 02:40:24
1090,2016-04-27 01:08:25,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1170886029590191/int_phab) to review.
",ghost,2016-04-27 02:40:24
1089,2016-04-26 10:15:49,"I love Relay and want it to use all the nice and pretty Jest APIs! :)

AST Explorer: http://astexplorer.net/#/YD91yS9csd/2
Codemod script: https://github.com/cpojer/js-codemod/commit/21115c69ba7ff42955130e40a46b1cc2d1c9a5e9
",cpojer,2016-04-27 01:55:26
1089,2016-04-27 00:59:10,"@facebook-github-bot shipit
",cpojer,2016-04-27 01:55:26
1089,2016-04-27 01:08:30,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1093430880692865/int_phab) to review.
",ghost,2016-04-27 01:55:26
1088,2016-04-26 06:28:37,"I don't know if you would want to merge this or not, but I'm working on an ESLint plugin for GraphQL validation.

![screenshot 2016-04-25 23 26 25](https://cloud.githubusercontent.com/assets/448783/14808805/40032940-0b3d-11e6-9aa2-f1cea38e0a3e.png)

The benefit over the babel relay plugin is that you can see and fix the errors right in your editor, and there's even a nice underline!

Here's the repo for the linter plugin: https://github.com/apollostack/eslint-plugin-graphql

It's not perfect yet, but I'm curious what you think of this direction, and what improvements you would want to see in such a tool!
",stubailo,2016-06-24 00:46:26
1088,2016-04-26 06:33:53,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",ghost,2016-06-24 00:46:26
1088,2016-04-26 06:51:07,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",ghost,2016-06-24 00:46:26
1088,2016-04-26 14:37:49,"This is sweet.

CC @yuzhi, who's been thinking about validation lately (eg. https://github.com/graphql/graphql-js/pull/355).
",wincent,2016-06-24 00:46:26
1088,2016-04-26 16:04:14,"Oh that's a great improvement, will make the error messages much more helpful!
",stubailo,2016-06-24 00:46:26
1088,2016-04-26 20:57:18,"@stubailo  This looks awesome. Are you thinking of adding a warning for fragment data that is requested but not used? Similar to 'no-unused-vars' ? http://eslint.org/docs/rules/no-unused-vars
",dguillamot,2016-06-24 00:46:26
1088,2016-04-26 21:12:22,"@dguillamot right now that's disabled, because in Relay/Lokka you often compose fragments, so you have strings like `fragment on Post {...}` which by themselves would trigger that error.

Do you have an app where that would be useful?

Just filed an issue, let's discuss there: https://github.com/apollostack/eslint-plugin-graphql/issues/10
",stubailo,2016-06-24 00:46:26
1088,2016-06-24 00:46:26,"Closing this as the examples have moved into [a separate `relay-examples` repo](https://github.com/relayjs/relay-examples) now (not public as of the time I write this, but will be hopefully within a day or two; we just need to get the person with the right privileges to flip a switch) so this PR won't apply here.

I don't know if you're still working on that plugin @stubailo, but I'd be welcome to adding it to the example over in the new repo.
",wincent,2016-06-24 00:46:26
1088,2016-06-24 01:22:38,"Yeah the plugin pretty much just works! So I'll resubmit to the new repo.
",stubailo,2016-06-24 00:46:26
1088,2016-06-24 01:35:48,"Cool. I'll ping you when it's public.
",wincent,2016-06-24 00:46:26
1088,2016-07-05 16:03:36,"@stubailo and it's public... https://github.com/relayjs/relay-examples
",wincent,2016-06-24 00:46:26
1087,2016-04-26 05:11:31,"As spotted by the eagle eyes of @taion here:

https://github.com/facebook/relay/commit/94cab57559ff205#commitcomment-17242321
",wincent,2016-04-26 20:40:24
1087,2016-04-26 14:28:42,"@facebook-github-bot import
",wincent,2016-04-26 20:40:24
1087,2016-04-26 14:41:50,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1723895421187332/int_phab) to review.
",ghost,2016-04-26 20:40:24
1086,2016-04-26 04:36:01,"I am seeing several issues that say examples don't work. However they are either closed or referencing each other with no definitive answers. Here's my attempt at the latest code base.

<S_CODE_TOKEN>

This gives the following error:

<S_CODE_TOKEN>

Ok, so I install babel-core locally:

<S_CODE_TOKEN>

Now try `npm install` again and I get the same error.

Can someone please change the README with even a temporary workaround? It's really frustrating that I cannot even start learning the framework.

P.S. I have babel-core@6.7.7 and babel-cli@6.7.7 installed globally.
",nareshbhatia,2016-05-27 06:41:03
1086,2016-04-26 05:59:33,"Yeah I can't get `npm install` to succeed from anywhere.
",stubailo,2016-05-27 06:41:03
1086,2016-04-26 13:55:24,"It's definitely frustrating that the examples keep breaking. We try to test that they still work with each release, but we've found that the non-deterministic nature of NPM installs can cause things to break in hard-to-reproduce ways (for example, I can blow away my `node_modules` folder(s) and get a different result from you depending on when I ran `npm install` and in what order).

One thing I'd like to do is partly control this chaos in two ways:
- Cut the number of examples in the repo to one (the todo), move the other examples into a separate, community-supported ""unofficial"" repo.
- Use `npm shrinkwrap` in the examples to peg them and all of their dependencies to released versions.

This latter point would mean that you could use the examples to test `master` without some manual set-up (for example, you might have to blow away the `npm-shrinkwrap.json` file and possible set up links with `npm link`), but at least it would mean the chances of getting a working result after a from-scratch `npm install`  would be much greater.

Would anybody be interested in working on this? (I don't think this is something I can get to myself over the next week or two, as I am very focused on mutations work right now.)
",wincent,2016-05-27 06:41:03
1086,2016-05-04 22:09:34,"Just a quick update: @steveluscher has done a fair bit of work over the last few days upgrading dependencies (of particular significance, moving ~~6-to-5~~ Babel from 5 to 6), so we'll probably cut a new release soon with that work, and that would be a good time to revisit this question of having verifying that everything works out of the box.
",wincent,2016-05-27 06:41:03
1086,2016-05-11 00:13:02,"Any update on this?
",nareshbhatia,2016-05-27 06:41:03
1086,2016-05-11 00:43:22,"@steveluscher  is upgrading a bunch of stuff in #1118 and #1119, which means we'll be able to do a release soon. I don't think there is much point in trying to make things work until (one of?) those have landed. But at that point, I think it would be great to do some of the things I mentioned in my comment above.
",wincent,2016-05-27 06:41:03
1086,2016-05-11 01:15:31,"Awesome! Thanks for the update @wincent.
",nareshbhatia,2016-05-27 06:41:03
1086,2016-05-25 18:07:07,"Any updates? I see that both #1118 and #1119 are closed, but I have not seen a new release.
",nareshbhatia,2016-05-27 06:41:03
1086,2016-05-25 19:01:57,"The same with todoMVC
",Dielz98,2016-05-27 06:41:03
1086,2016-05-25 20:05:40,"Yes, even the todoMVC doesn't work anymore. 
",BilalBudhani,2016-05-27 06:41:03
1086,2016-05-25 21:08:35,"New release is likely to happen this week. We'll check that all the examples work, but there are lots of local-system variables, tooling version issues, and ordering issues that may mean that they don't work in specific circumstances, so _once the release is out_ we'll be grateful for any reports of specific issues (and ideally _fixes_ for those issues, because we may not be able to repro them).

In the meantime, duplicate reports of things not working won't really help resolve things.

@sampepose: do you think we should do the things [I mentioned above](https://github.com/facebook/relay/issues/1086#issuecomment-214752939) (using shrinkwrap and cutting the number of examples down to one) before or after we cut the release?
",wincent,2016-05-27 06:41:03
1086,2016-05-27 06:41:03,"I cleaned up the examples for the release of [0.9.0](https://github.com/facebook/relay/releases/tag/v0.9.0). Give them a try!
",steveluscher,2016-05-27 06:41:03
1086,2016-05-27 11:17:40,"We're in the middle of a little bit of a revert/unrevert situation, so if anyone wants to try the examples in the next 24 hours or so be sure to check out the v0.9.0 tag:

<S_CODE_TOKEN>
",steveluscher,2016-05-27 06:41:03
1085,2016-04-26 00:42:57,"(GitHub 012033952fad17714).
",wincent,2016-04-26 05:45:25
1085,2016-04-26 00:43:04,"@facebook-github-bot import
",wincent,2016-04-26 05:45:25
1085,2016-04-26 00:48:24,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1705014819768067/int_phab) to review.
",ghost,2016-04-26 05:45:25
1084,2016-04-25 23:41:37,"I just regenerated the website in order to update the videos page. This meant that our metadata got updated to reflect a new page that we added.
",wincent,2016-04-26 01:35:27
1084,2016-04-25 23:41:55,"@facebook-github-bot import
",wincent,2016-04-26 01:35:27
1084,2016-04-25 23:52:39,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1659624624293656/int_phab) to review.
",facebook-github-bot,2016-04-26 01:35:27
1083,2016-04-25 21:11:23,"For issue #825

I would like to fully remove a requirement to have clientMutationId field on mutation input or payload, but currently graphql-relay-js defines these fields as non-null.  This pull request changes the spec to say that the server should make these clientMutationId fields nullable as I have done in https://github.com/graphql/graphql-relay-js/pull/79.

In order to keep compatibility for servers with non-null clientMutationId fields, this pull request continues to send the clientMutationId in the mutation input to avoid validation errors.

However, there is no need to get the clientMutationId value from the server, since the client already has it associated with the pending mutation, so it no longer even requests the clientMutationId for the response.  Instead, the handleUpdatePayload and writeRelayUpdatePayload internal functions have been updated to take the clientMutationId in an additional argument.
## Follow-up

We should stop sending automatically sending clientMutationId in the future, which will be a breaking change.  However, the only change that would be needed to handle this breaking change would be to make the clientMutationId field nullable on the server or to manually specify a clientMutationId field on the client.  At that point we can remove the need to have a clientMutationId field from the relay spec.
",dylanahsmith,2016-11-28 17:53:39
1083,2016-04-25 23:50:40,"Thanks for the PR, @dylanahsmith.

The use of client mutation IDs comes from their extraction from Facebook's internal implementation, where they have existed for years (perhaps since the original implementation of mutations, although my memory doesn't extend back that far). Perhaps @dschafer can speak to why/how they arose in the design.

The deal-breaker here, however, is that Relay internals themselves assume a client mutation ID, so this would be a breaking change (as you note), and I am not sure we want to do that. Disclaimer: I haven't fully read #825 yet so I am not sure whether there is a rationale in there strong enough to overturn whatever reasons Dan (or somebody else) can share with us for why things currently are the way they are.

Adding the discussion label for now so we can get some more opinions on this.
",wincent,2016-11-28 17:53:39
1083,2016-04-26 00:09:01,"I have tried to keep this PR free fron breaking changes. My note about breaking changes was for a proposed follow-up.
",dylanahsmith,2016-11-28 17:53:39
1083,2016-04-26 00:28:28,"> Perhaps @dschafer can speak to why/how they arose in the design.

So that clients could have a unique identifier to associate with mutations, and to link a mutation to its payload. It's also really nice for subscriptions, since you can determine if a given subscription payload is associated with a mutation that you yourself created.

I think I'd be fine with making this nullable, and clientMutationId will be null if you pass up null in the input. I'd still want to enforce that we always set it, but that can be a convention and not part of the spec.
",dschafer,2016-11-28 17:53:39
1083,2016-05-24 19:35:49,"It's worth mentioning that in #258, changes were made to the Relay Specification that appear to allow for `clientMutationId` to be declared as either non-nullable _or_ nullable...
",davidcelis,2016-11-28 17:53:39
1083,2016-06-30 22:30:37,"Thoughts on this, @josephsavona, @kassens, @yuzhi?
",steveluscher,2016-11-28 17:53:39
1083,2016-07-01 01:07:01,"The overall direction looks good here: we can stop querying for this field. Let's make the change noted above in the plugin to stop adding `clientMutationId`/`clientSubscriptionId` fields on mutations/subscriptions. The main requirement is that we keep https://github.com/facebook/relay/pull/1083/files#diff-7fd56ba716b5f798f10ea57b840cc989R485 since our internal schema requires this field.
",josephsavona,2016-11-28 17:53:39
1083,2016-07-12 03:48:51,"Updated babel-relay-plugin to avoid adding clientMutationId to the query.

The clientMutationId is still automatically sent as input, so this will keep backwards compatibility.

Note that clientSubscriptionId has always been outside the scope of this PR.  It isn't a part of the relay spec and subscriptions aren't even a part of the GraphQL spec.  Feel free to open a PR if you feel similar changes should be done for subscriptions, but this PR is big enough already.
",dylanahsmith,2016-11-28 17:53:39
1083,2016-09-21 16:42:21,"@dschafer Can you elaborate on how that ""own mutation"" association works? Generated `clientMutationId`s aren't unique across clients, so it doesn't seem like I can use the ID by itself to figure out whether a mutation was my own.
",taion,2016-11-28 17:53:39
1083,2016-11-28 17:53:39,Im going to close this. In a future version of Relay we hope to remove this restriction. Thanks for starting the discussion!,josephsavona,2016-11-28 17:53:39
1082,2016-04-25 19:55:49,,wincent,2016-04-25 22:20:34
1082,2016-04-25 19:56:00,"@facebook-github-bot import
",wincent,2016-04-25 22:20:34
1082,2016-04-25 20:01:02,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1711970735736760/int_phab) to review.
",facebook-github-bot,2016-04-25 22:20:34
1081,2016-04-25 15:50:08,"Hi, 

I'm using relay to do partial updates in the local cache followed by commits at some points of a multi step form, literally the situation described in #666. As suggested there I was doing small mutations with apply update and storing them in the cache, something like:

<S_CODE_TOKEN>

And then later on when I wanted to save everything in the server with a new mutation and then rollbacking everything so I wont have any uncommitted transactions around:

<S_CODE_TOKEN>

Up until 0.8.0 this was working fine but now we updated relay and we are getting an error:

<S_CODE_TOKEN>

Thats comes from 'RelayStoreReader.prototype._updateMetadataFields' when its doing:

<S_CODE_TOKEN>

I spend quite some time looking into the store to see where the problem may be and the transactions are actually rolled back and I see them disappear from '_storeData._mutationQueue' without any errors so that part seems to be fine. What seem to happen is that after that, when Relay gets the mutationIDs in the same '_updateMetadataFields' method using 'this._storeData.getClientMutationIDs(dataID);', is still returning the same ids that were there before rollbacking the mutations. I follow the methods and found that those ids are actually stored into the '_storeData. _queuedRecords' object.

Any ideas on how to do this properly? Sorry for the lack of a better example but its a bit hard to isolate the whole thing :D
",kileras,2016-05-06 22:40:22
1081,2016-05-06 15:54:43,"Thanks for reporting this and sorry for the delay, we're looking into this.
",josephsavona,2016-05-06 22:40:22
1080,2016-04-25 14:36:27,"Now that [relay 0.8](https://github.com/facebook/relay/releases/tag/v0.8.0) supports multiple environments it would be great if the babel plugin could support multiple schemas.

I imagine there would need to be a way to name a Relay.Environment and a way to configure the plugin to use a specific schema for a specific Environment.

Just to make it a little more concrete I will describe our use case:

The graph.cool dashboard allows users to build their graphQL schema in a graphical interface. Information about the user and the schema they construct is persisted in our internal graphql api using relay.
Additionally the user can view and edit data for their application in a data explorer within the dashboard, which is querying the client graphql api.

Currently we implement the data explorer with Lokka, but we would like to transition this to relay.
",sorenbs,
1080,2016-04-26 15:58:18,"> Additionally the user can view and edit data for their application in a data explorer within the dashboard, which is querying the client graphql api. Currently we implement the data explorer with Lokka, but we would like to transition this to relay.

Can you clarify - what kinds of queries would need to be transformed for the data explorer? Are these static queries that exist i.e. in source code, or are these queries that users enter in the UI (along the lines of graphiql)? I'm asking because application code seems likely to be written against the application's specific schema (no need for multiple schemas) and ad-hoc queries typed in a dashboard seem like a natural fit for using raw GraphQL (no library).
",josephsavona,
1080,2016-04-26 16:19:31,"It's all static queries in the application source code. 
",schickling,
1080,2016-04-26 17:07:40,"@schickling Application code source code would typically be compiled against a specific schema. Can you provide a bit more info on why the need for multiple schemas?

In general, we'd prefer to keep the plugin itself simple since most apps fall into the category of one app + one schema. Rather than change the plugin interface, we're open to making the plugin internals accessible as public API. The `RelayQLTransformer` class, for example, is given a schema in the constructor and has methods to convert GraphQL documents into code that can be used with Relay. I wrote about this [on a related issue](https://github.com/facebook/relay/issues/828#issuecomment-187569836) - would this approach help?
",josephsavona,
1080,2016-04-26 18:39:48,"You are right @josephsavona - in our case the second schema is not known at compile time, so clearly the babel transform is of no use. Sorry for using an unclear example.

In the general case though I think it might make sense for one react/relay application to work with multiple backends and schemas and I'm curious to hear your thoughts on this. 

The main use case would be consuming third party GraphQL apis as well as your internal api. If pinterest for example exposed a public relay compatible GraphQL endpoint you would need support for two different schemas to integrate it directly in your application
",sorenbs,
1080,2016-04-27 01:49:20,"@sorenbs Overall, it would ideally be _possible_ to build an app with Relay that targeted multiple schemas. This doesn't seem like a common requirement, though, so we would need to balance making this possible with increasing complexity for the typical case. In general, our preferred approach is along the lines of what we've outlined in #559 - where in addition to higher level APIs like RelayContainer we also provide a low-level APIs for imperative data-fetching. For the plugin, this would mean providing tools to let developers compile queries against different schemas. 

tl;dr we should provide just enough primitives in core to let people do this in userspace.
",josephsavona,
1080,2016-04-27 13:16:00,"Currently it seems there exists only one appraoch: https://github.com/eyston/relay-composite-network-layer But, while certainly not necessarily the highest priority, I do agree that it would be nice to have some easier way to target multiple schemas via statically defined queries.
",Globegitter,
1079,2016-04-25 12:51:20,"I came across an issue when applying mutations that update connection fields. 
The mutation was being executed but the resolvers were never called on GQL's end.

After messing around with the configuration and schema I was able to resolve the issue
by changing the output type of the mutation from a connectionType to the original objectType.
the resolver was then called and the store was updated.

For this example Relay mutation:

<S_CODE_TOKEN>

Failing configuration:

<S_CODE_TOKEN>

Working schema:

<S_CODE_TOKEN>

This seems to be quite a common use-case when working with graph data and even if this is intended behavior, to get the original object and not the connection and update the cache on Relay's end it is not obvious and not clarified in the documentation.

Note that in the connectionType attempt I did have the fat query configured to access the nested node properly, though it wasn't working either.
",BarakChamo,2017-01-30 22:29:30
1079,2017-01-30 22:29:30,"Thanks for this report, @BarakChamo, and sorry for leaving it without a response for so long.

I'm going to close it as it is likely stale at this point, and you did find a way to get things working. The API you're referring to above is now considered ""legacy"", so we're unlikely to work on it further in the future (although we'd be happy to entertain PRs that fix bugs). Moving forward we're recommending that people use the newer, static mutation API (`Relay.GraphQLMutaton`) and we'll soon be rolling out a new core and new APIs in any case: pieces of this have already landed on the master branch and will continue to do so, but in the meantime, moving to `Relay.GraphQLMutation` will get you as close as possible to the new modern API which is coming out.

Thanks once again for your input!",wincent,2017-01-30 22:29:30
1078,2016-04-22 16:07:10,"We recently came upon a situation where we needed to add a few extra methods on the container instance to make it conform to a certain interface and it has proven to be more difficult than I anticipated.

To give you a little context, we have a generic `<Form>` component that looks through its children and anything with a `name` prop set is expected to have a `value` accessor that's used to get the component value on form submission. This works for the basic <input> elements as well as any custom ones.

The trouble started when we wanted to use a Relay component in this manner. At first I tried to add the required `value` accessor like this:

<S_CODE_TOKEN>

The reason this doesn't work is that the `Relay.createContainer(...)` call returns a function, the super class in this case, that looks like this:

<S_CODE_TOKEN>

Because of the `return` at the end, the inheritance is reset and `new SkillList()` will actually not return instances of `SkillList`. I'm sure there are good reasons for the lazy class instantiation, I'd just like to learn more about those reasons and see if there's any way to achieve what I'm trying to do cleanly.

While on the topic, I wonder why the API isn't similar to that of Routes and Mutations, i.e.:

<S_CODE_TOKEN>

Thank you
",guncha,
1078,2016-04-26 22:26:26,"Yeah, it's a bit unfortunate you can't reasonably ""decorate"" container instances to use them more like regular React components. As it is, they forward props through (which is nice), but that's about the end of the story, otherwise they are a black box...
",NevilleS,
1078,2016-05-05 12:54:18,"You could use the fact that props are passed down to the child and use callbacks to set parent as a listener to value changes, like this

<S_CODE_TOKEN>

And then in parent:

<S_CODE_TOKEN>
",sjchmiela,
1078,2016-05-05 13:31:02,"Or better, pass down function to set ref, and keep it in parent.

<S_CODE_TOKEN>

And then in parent:

<S_CODE_TOKEN>
",sjchmiela,
1078,2016-05-05 13:56:18,"It's certainly possible to build that `Parent` that wraps the `RelayContainer`, but it's awkward. The `RelayContainer` does more that just pass through props, it has methods like `getFragment`, etc. The best possible implementation of a ""Wrapper"" around the `RelayContainer` would be one that implements the entire `RelayContainer` interface and therefore can be used as the component for a top-level `RelayRenderer`, etc. (see https://github.com/facebook/relay/blob/master/src/container/isRelayContainer.js for how the API is defined right now)

Basically, implementing a wrapper that behaves as if it were a `RelayContainer` seems like a code smell to me - what we really want to do here is extend a `RelayContainer` with some new methods.
",NevilleS,
1078,2016-05-05 15:18:58,"I'd like to add that it's certainly possible to get this working using controlled components, i.e. the `<Form>` component keeps all of the values in its state and passes them to the input elements, Relay or otherwise, using `value={ ... }`, as well as an `onChange` callback.

The reason I didn't go with this approach is that using uncontrolled components is just simpler - there's no need to merge `onChange` callbacks and the custom form components can manage their own state and not have to merge it with any `value` given to them via props (the component value !== component state for any more sophisticated input).
",guncha,
1077,2016-04-22 14:25:38,"Sample failure run: https://travis-ci.org/facebook/relay/jobs/124994485

These look like harmless failures caused by 5943007d03b (D3210894). We're no longer setting the `tracker` property in our call to `buildQueryForOptimisticUpdate`, so the test shouldn't be including it in its assertions.
",wincent,2016-04-22 17:05:25
1077,2016-04-22 14:25:52,"@facebook-github-bot import
",wincent,2016-04-22 17:05:25
1076,2016-04-22 11:15:33,"It is public API but has not documentation whatsoever, which can be confusing as this could indicate that the RelayRenderer API is not (yet) meant to be used. This should make it easier to discover and more clear that the RelayRenderer API can be used.

Specifically the usage of `RelayRenderer` would solve some of our use-cases. Also having some documentation for this would mean that https://github.com/relay-tools/react-router-relay/pull/123 could be merged in.

Happy to add any changes etc. I just thought it would be better to have some documentation, rather than none.
",Globegitter,2016-04-25 19:35:34
1076,2016-04-22 14:15:53,"Thanks for this. The omission of from the docs here was very much intentional, because we didn't want to churn the public API by throwing this out there before we were sure it was the right design.

It's been stable for a while now, though, and we've already pointed people to this API's existence in various places in order to help them solve problems, so I think the time is probably right to document this.

I left some minor nits inline. Let me know what you think.

As a follow-up to this, we should think about actually marking `RelayRootContainer` as deprecated, but I think that is beyond the scope we need to address here.
",wincent,2016-04-25 19:35:34
1076,2016-04-22 15:56:23,"@wincent Good point about the `RelayRootContainer`, removed its reference. And the comments make sense, is also updated.

Yeah it would be good to good to deprecate `RelayRootContainer` before the `0.9.0` release once some docs for its replacement have been added :)
",Globegitter,2016-04-25 19:35:34
1076,2016-04-25 18:17:41,"@facebook-github-bot import
",wincent,2016-04-25 19:35:34
1076,2016-04-25 18:28:56,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1746191812262664/int_phab) to review.
",facebook-github-bot,2016-04-25 19:35:34
1076,2016-04-25 18:52:25,"Thanks for this @Globegitter. This is landing internally and will get synced out soon. I made a couple of tweaks which you'll see reflected when it lands on master:
- Fixed whitespace errors (trailing whitespace).
- Missing backticks.
- Route -> Relay.Route.
- Killed off some excess blank lines.
- Wrapped long line in comment sample.
- Reworded Relay.Environment mention based on feedback.
- Removed reference to `onForceFetch` and `onPrimeCache`, which only exist to support an experimental internal feature (persisted queries), and we're not ready to publicly support yet.
",wincent,2016-04-25 19:35:34
1076,2016-04-26 06:40:39,"> Removed reference to `onForceFetch` and `onPrimeCache`, which only exist to support an experimental internal feature (persisted queries), and we're not ready to publicly support yet.

@wincent, I guess, since introduction of the `environment` prop to `RelayRenderer` there should be no need for `onForceFetch` and `onPrimeCache` extra props at all anymore, as now we can pass an `environment` with custom `forceFetch` and `primeCache`.
",denvned,2016-04-25 19:35:34
1075,2016-04-22 07:26:51,"Should be backwards compatible. Will land Jest 11 on fbsource next week.
",cpojer,2016-04-25 03:00:24
1075,2016-04-25 02:06:14,"@facebook-github-bot shipit
",cpojer,2016-04-25 03:00:24
1075,2016-04-25 02:09:44,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1539009729727342/int_phab) to review.
",facebook-github-bot,2016-04-25 03:00:24
1074,2016-04-22 06:06:28,,wincent,2016-04-22 17:00:31
1074,2016-04-22 06:06:36,"@facebook-github-bot import
",wincent,2016-04-22 17:00:31
1074,2016-04-22 06:09:32,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1723229094614254/int_phab) to review.
",facebook-github-bot,2016-04-22 17:00:31
1073,2016-04-22 03:29:21,,chentsulin,2016-04-25 21:55:43
1073,2016-04-25 18:19:27,"Thanks!
",wincent,2016-04-25 21:55:43
1073,2016-04-25 18:19:30,"@facebook-github-bot import
",wincent,2016-04-25 21:55:43
1073,2016-04-25 18:29:12,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1041137245969960/int_phab) to review.
",facebook-github-bot,2016-04-25 21:55:43
1072,2016-04-21 05:54:19,,chentsulin,2016-04-25 22:05:26
1072,2016-04-25 18:23:46,"Thanks!
",wincent,2016-04-25 22:05:26
1072,2016-04-25 18:23:51,"@facebook-github-bot import
",wincent,2016-04-25 22:05:26
1072,2016-04-25 18:28:51,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1141961479178218/int_phab) to review.
",facebook-github-bot,2016-04-25 22:05:26
1071,2016-04-21 03:52:20,,chentsulin,2016-04-21 07:50:27
1071,2016-04-21 06:41:33,"Thanks!
",wincent,2016-04-21 07:50:27
1071,2016-04-21 06:41:41,"@facebook-github-bot shipit
",wincent,2016-04-21 07:50:27
1071,2016-04-21 06:42:24,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1562653687365322/int_phab) to review.
",facebook-github-bot,2016-04-21 07:50:27
1070,2016-04-20 18:02:55,"hey there!
i was recently debugging a fetch triggered by `this.props.relay.setVariables` in IE and saw the use of `endsWith` here https://github.com/facebook/relay/blob/master/src/traversal/printRelayOSSQuery.js#L167 which is currently not supported (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith).
this causes an exception and the fetch never occurs.
",alejandromaka,2016-04-26 14:26:17
1070,2016-04-20 18:09:47,"i've also seen instances of `.find` (https://github.com/facebook/relay/blob/master/src/query/RelayQuery.js#L509) being used which babel doesn't transpile and is also not supported by IE natively (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find). just in case :)
",alejandromaka,2016-04-26 14:26:17
1070,2016-04-21 11:07:39,"Relay relies on ES6 polyfills for older browsers. If you include a polyfill like [babel-polyfill](https://babeljs.io/docs/usage/polyfill/) you will be good. 
You should get a [warning](https://github.com/facebook/relay/blob/master/src/__forks__/Relay.js#L24) about this in older browsers (Relay 0.8+).
",edvinerikson,2016-04-26 14:26:17
1070,2016-04-26 14:26:17,"Thanks for bringing this up @alejandromaka, and thanks @edvinerikson for providing the answer. Going to mark this one as resolved.
",wincent,2016-04-26 14:26:17
1069,2016-04-20 17:20:11,"This is still a WIP, but wanted to create the PR already, to get some eyes on it. Should be able to get it done and tested in our app by the end of the week. Ref #1049
",Globegitter,2016-06-24 01:46:40
1069,2016-04-22 09:53:45,"Should now be ready to review :)
",Globegitter,2016-06-24 01:46:40
1069,2016-04-30 14:15:35,"Updated to latest master, added docs as well as changelog entry.
",Globegitter,2016-06-24 01:46:40
1069,2016-05-02 09:51:25,"Would be awesome if this PR would make it to 0.8.2.  Its difficult to avoid calling setVariables with 0.8 when request is in progress..
",jardakotesovec,2016-06-24 01:46:40
1069,2016-05-02 15:50:48,"The one thing I was wondering with my PR in the `RelayContainer` on line 247 (https://github.com/facebook/relay/pull/1069/files#diff-320b6df8cf530a681d201c75772401eaR247) if that could ever create a race condition where the state of the `pendingVariables` is not set but the `pendingRequest` is already set, if you fire off a lot of requests at the same time?

I could not create that situation in our app though.
",Globegitter,2016-06-24 01:46:40
1069,2016-05-27 11:08:16,"Updated to latest master. There was a manual merge with the `rawVariables` change, so hope I did not mess anything up. Tests are still passing locally.
",Globegitter,2016-06-24 01:46:40
1069,2016-05-27 15:58:31,"@facebook-github-bot import
",josephsavona,2016-06-24 01:46:40
1069,2016-05-27 16:22:21,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1772009093021838/int_phab) to review.
",ghost,2016-06-24 01:46:40
1069,2016-06-23 17:29:13,"@Globegitter: just an update. I've rebased this one again internally and made some necessary tweaks to preserve the `rawVariables`; it should go through review and land soon™.
",wincent,2016-06-24 01:46:40
1069,2016-07-08 05:55:58,"@wincent much appreciated.
",Globegitter,2016-06-24 01:46:40
1068,2016-04-20 12:36:41,"Hello, I'm using gulp with webpack using babel-loader. I have set up babel relay plugin with some difficulties, but now it seems that it's set up fine. However, I get this error:

<S_CODE_TOKEN>

Transpiled code looks like this:

<S_CODE_TOKEN>

Is this transpiled code wrong? And what it should look like? Or where else might be a problem?
Thanks
",mariusrak,2016-04-24 03:21:32
1068,2016-04-22 06:16:07,"This looks like a configuration issue - a previous plugin is compiling away the template tagged literals before the Relay plugin can see them. 

Take a look at the ""react native"" section of https://github.com/facebook/relay/blob/master/docs/Guides-BabelPlugin.md - the steps for configuring the plugin on RN should also solve the plugin ordering issue that you're seeing.
",josephsavona,2016-04-24 03:21:32
1068,2016-04-24 03:21:32,"I'm going to close this issue since there isn't anything actionable we can do. See my previous comment for a suggestion about how to resolve. If that doesn't help, we'd need a bit more info about your Babel setup to understand what might be going wrong. 
",josephsavona,2016-04-24 03:21:32
1068,2016-04-25 22:46:31,"Hello, Your advice helped and graphql is now transpiling as it should, thank you.
For others, this is what I have in gulpfile now:

<S_CODE_TOKEN>
",mariusrak,2016-04-24 03:21:32
1067,2016-04-20 08:58:39,"Some of the options that are supported by `getBabelRelayPlugin` are not documented at all. This just makes sure that all options are listed and have a minimal description of what they do.

I am not using the `validator` myself so did not figure out how exactly that would be used. If it is easy to give a minimal example I would love to add this, so we have some more complete documentation.
",Globegitter,2016-07-01 00:01:31
1067,2016-04-25 18:27:44,"Thanks for this, @Globegitter. I'm not actually sure that we do want to document all of these options, as that would mean supporting them going forward. `inputArgumentName` and `snakeCase`, for example, might only exist because we needed to distinguish internally between open source GraphQL conventions and our preexisting internal ones.

@josephsavona, @yuzhi, @steveluscher. Any thoughts on which, if any of these options you'd prefer to remain undocumented?
",wincent,2016-07-01 00:01:31
1067,2016-04-25 19:41:23,"I agree with @wincent - `inputArgumentName`, `snakeCase`, and _especially_ `substituteVariables` exist only to support switching between FB and OSS configuration. We'd prefer that people avoid relying on them and it probably would be better to simply not document them. Especially `substituteVariables`, which we're working to deprecate.
",josephsavona,2016-07-01 00:01:31
1067,2016-04-26 21:24:58,"Great to get some feedback on that. Any reason for deprecating `substituteVariables`?  Is it going to be on by default? 
",Globegitter,2016-07-01 00:01:31
1067,2016-04-27 00:04:06,"`substituteVariables` allows developers to inject a runtime value into a query, which generally breaks the model of queries as being static. Relay tries to only evaluate each query/fragment once and memoize it, so dynamically injected values don't necessarily work the way you'd expect (i.e. updated the injected JS value doesn't change the query). Going forward we'd like to find a way for developers to define these variables statically within GraphQL.
",josephsavona,2016-07-01 00:01:31
1067,2016-04-28 06:21:45,"Ah ok yeah that makes sense and sounds like a good path forward (we are actually using `substituteVariables` currently). Also is there a simple example for the `validator` option? Will update the changes asap.
",Globegitter,2016-07-01 00:01:31
1067,2016-04-28 15:14:35,"For `validator` it's useful if you want to use custom validation rules. Otherwise Relay uses most but not all of the default rules (have to skip some when validating fat queries). 
",josephsavona,2016-07-01 00:01:31
1067,2016-04-29 09:13:01,"Updated the comment on the validator.
",Globegitter,2016-07-01 00:01:31
1067,2016-06-30 23:19:58,"@facebook-github-bot import
",steveluscher,2016-07-01 00:01:31
1067,2016-06-30 23:20:40,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/226367654419808/int_phab) to review.
",facebook-github-bot,2016-07-01 00:01:31
1066,2016-04-20 02:11:45,"Using release 0.8.0.
## Setup

I have this mutation:

<S_CODE_TOKEN>

I have this definition:

<S_CODE_TOKEN>

After user input is entered in a form, I call this:

<S_CODE_TOKEN>

And this `onFailure` callback:

<S_CODE_TOKEN>
## The bug

**Note: I am not sure if this is a bug or the way Relay intentionally handles ""internal"" errors between it and the server.**

If I fail to set a mutation variable (as in the example above), the mutation's `onFailure` gets called but `RelayMutationTransaction.getError().source` throws a type error when normally it is fine:

<S_CODE_TOKEN>

`transaction.getError()` looks like this:

<S_CODE_TOKEN>

If I inspect the network requests I see the server did indeed send an error back:

<S_CODE_TOKEN>
## Expected Results

I expected my client code to have access to the error. When I manually throw an exception on the server during the query the above `onFailure` returns the proper error message.
",LegNeato,
1066,2016-08-23 18:16:53,"Is this a bug with Relay, or a bug with how graphql / graphql-express handles the query?

Honestly it shouldn't matter, in the event of a bad request Relay should parse the body of the 400 response (which shows the error list). 
",brad-decker,
1065,2016-04-19 18:31:31,"We have [one failing test](https://travis-ci.org/facebook/relay/jobs/124261109) in OSS which doesn't fail internally.
",wincent,2016-04-19 19:15:32
1064,2016-04-19 13:11:59,"This may be a duplicate of #712, but it looks like this isn't a closed case. I'm using Flow more and more in my projects, and would like to be able to use Relay’s already-defined flow types to augment that.

Previously I've seen some maintainers say that all the types are exposed in `RelayTypes`, but it looks like all the type definitions are stripped from `react-relay/lib/RelayTypes.js`, so I can't imagine how that would work.

<S_CODE_TOKEN>

Is this the intended way to use Relay’s flow types? And if so, how does that work considering none of the type definitions are available in the published version of Relay?
",sgwilym,
1064,2016-04-19 15:39:46,"Yep, using `RelayTypes` is the intention. If they're getting stripped then I think we need to do something to make them available.

For example, we could ship a `.flow` file ([like this one](https://github.com/facebook/immutable-js/blob/master/type-definitions/immutable.js.flow)), although I am not sure how those work in practice. Another possible option is to figure out if the [transform-flow-comments](http://babeljs.io/docs/plugins/transform-flow-comments/) Babel plugin can help us here. I know that can turn annotations into comments; I don't know whether we can leverage that to help us replace these stripped `export type` lines.

Finally, I guess you could work around this by cloning the Relay source and using `npm link`, at least for local development, so that you can type check against [this file](https://github.com/facebook/relay/blob/master/src/tools/RelayTypes.js) directly. Perhaps somebody who has thought about this for longer than me knows whether this was our intention all along?
",wincent,
1064,2016-05-11 02:24:01,"I closed the linked issue out of frustration. sorry.

@wincent does the file
https://github.com/facebook/relay/blob/master/src/tools/RelayTypes.js
exports all the types. I was looking for the type of a connection query, which I think is defined at 
https://github.com/facebook/relay/blob/master/src/interface/RelayOSSConnectionInterface.js
But I don't see a type for it in the `RelayTypes.js`. How can I get the type of a query response. Thanks.
",bsr203,
1064,2016-05-11 18:35:45,"[The intention](https://github.com/facebook/relay/blob/5743d400113550eeb2f4627569c9efcaee259a7c/src/tools/RelayTypes.js#L15-L17) is that `RelayTypes` should export the ""public"" types. ie. the ones that correspond to stable, public APIs in Relay that are less likely to change, and which framework users may find useful in their own annotations.

Compare that with [`RelayInternalTypes`](https://github.com/facebook/relay/blob/5743d400113550eeb2f4627569c9efcaee259a7c/src/tools/RelayInternalTypes.js), which is where we put types that are for internal use within the framework itself. Generally these are in here in a shared file because they are relevant to a bunch of different modules and there may not be a logical single module for us to put them in (there are a bunch of other types that _do_ live in specific modules, because that's the logical place for them). We mark the `RelayInternalTypes` as internal because they are tied to implementation details, and may change as we refactor, so we don't want people to use them and then suffer the consequences of churn.

To your question about query response type, we don't really have one for that, as far as I know. See `payload` [here](https://github.com/facebook/relay/blob/5743d400113550eeb2f4627569c9efcaee259a7c/src/network-layer/default/RelayDefaultNetworkLayer.js#L65-L90) is not annotated. I think this is probably because it's going to be so generic (`{[key: string]: mixed}` A.K.A. `Object`) as to be not super useful.
",wincent,
1064,2016-05-20 05:25:57,"@wincent Since flow prefers `.flow` files anyway, if you just publish the original source files to npm along with the transpiled files with the `.flow` extension, flow will just pick the types up anyway.

So if `lib/Relay.js` is the transpiled file, `lib/Relay.js.flow` is the original source file.
You don't have to do any extra work. Just change the build process to copy the original files with the added extension and you're done. You may of course want to make exceptions for certain files, where you may want to manually override the type definitions so that it makes more sense for external use.

Would you please consider doing that?
",nmn,
1064,2016-08-08 18:41:19,"A command to help this workflow is being worked on over here https://github.com/facebook/flow/pull/2184
",thejameskyle,
1064,2016-08-09 05:39:36,"@thejameskyle That's awesome!

In the mean time, I still think it's a good idea to publish the original source to NPM for the flow types.
",nmn,
1064,2016-08-09 13:34:54,"It's not as easy as just copying the source files. Relay uses haste as module system and to be able to use the flow types in a commonjs project we will need to do some transpilation.
I spent a day on this a few months ago and almost got it working except that Babel had a bug that outputted invalid flow syntax (there was something in the parser that made it output some stuff twice) so I couldn't get the .flow files valid. The reason there still is a need for transpilation is because we need to re-write all import paths to be valid in commonjs.

@thejameskyle Is this something that the new command will be able to do? (re-write paths or bundle all flow types into one file)
",edvinerikson,
1064,2016-10-31 20:40:40,"Are there any plans to add Relay to [flow-types](https://github.com/flowtype/flow-typed)?
",crismali,
1063,2016-04-19 04:07:42,"When `this.props.relay.setVariables` is invoked in `componentWillReceiveProps` or `componentDidUpdate`, no request is sent to the server and my view doesn't update.
Here's some code to explain my problem.

my component:

<S_CODE_TOKEN>

my container:

<S_CODE_TOKEN>
",mickeyinfoshan,2016-04-21 14:41:20
1063,2016-04-19 04:20:21,"It looks like you want the parent component to override the `$showInfo` variable, and fetch the data accordingly. Instead of using willReceiveProps/didUpdate - which would cause a second round trip - you can do this in a single round trip:

<S_CODE_TOKEN>

More generally, we recommend avoiding data-fetching in willReceiveProps/didUpdate and using [componentDidMount instead](https://github.com/facebook/relay/issues/1048#issuecomment-210189002).
",josephsavona,2016-04-21 14:41:20
1063,2016-04-19 04:35:30,"I don't think that's the solution. 
The parent holds a list of WidgetContainers, and I want each WidgetContainer fetch its own data when its `props.showInfo` is set to true.
I just try to make a simple accordion, which is a common case. Here's the parent of WidgetContainers:

<S_CODE_TOKEN>
",mickeyinfoshan,2016-04-21 14:41:20
1063,2016-04-20 08:09:56,"Still no idea? 😳
",mickeyinfoshan,2016-04-21 14:41:20
1063,2016-04-20 15:10:14,"I see, thanks for clarifying. In this case using willReceiveProps definitely makes sense. Calling setVariables at that point should work - if it doesn't that's a bug. 
",josephsavona,2016-04-21 14:41:20
1063,2016-04-21 14:39:09,"Finally, I have figured out what goes wrong. The `props` overrides the `variables`, and breaks `setVariables`. I don't know why `getVariablesWithPropOverrides` is called in RelayContainer's `componentWillReceiveProps` and no request is sent.
",mickeyinfoshan,2016-04-21 14:41:20
1063,2016-04-21 14:41:17,"same issue to https://github.com/facebook/relay/issues/309
",mickeyinfoshan,2016-04-21 14:41:20
1063,2016-04-21 17:20:45,"@mjhlybmwq Thanks for the follow up!

Looking at your use-case more closely, this looks like the same issue as #1048. Regardless of what API we used to pass variables from parent to child (the topic of #309), `componentWillReceiveProps` would need to update the local variables by merging in new variables from the parent. We don't automatically refetch variables there because it could very easily lead to over-fetching. I'll comment more on #1048.
",josephsavona,2016-04-21 14:41:20
1062,2016-04-19 01:20:19,"Reverts part of #1055 to keep the Promise definition in fbjs (where IMO it belongs). I shipped fbjs@0.8.1 with that earlier today.
",zpao,2016-04-19 17:00:37
1062,2016-04-19 01:40:49,"@facebook-github-bot import
",kassens,2016-04-19 17:00:37
1062,2016-04-19 02:02:32,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1550825645214188/int_phab) to review.
",facebook-github-bot,2016-04-19 17:00:37
1061,2016-04-18 23:40:20,"On a project I'm working on we are automatically generating a GraphQL server from a SQL server and many of our tables have an integer column named `id`. When serving this table through GraphQL we would like to make the `id` column queryable, however we also want our rows to implement a `Node` type in accordance to the Relay GraphQL spec. According to the [spec](https://facebook.github.io/relay/graphql/objectidentification.htm#sec-Node-root-field.Introspection) an `id` field that is globally unique is required for compliance. This puts us in a binding position. Do we not allow columns to be named `id`? Do we rename `id` to `rowId` in GraphQL? These solutions aren't ideal as we also have many more foreign key columns like `authorId` which reference an `id` primary key.

The optimal solution would be if Relay allowed the `id` field to be renamed, either to `_id` or maybe `gid` (for global ID). Would it be possible to update the specification and Relay to allow for this? Is there a solution I'm not seeing?
",calebmer,2017-01-30 22:19:29
1061,2016-04-19 15:20:18,"I'd be reluctant to incur the internal complexity of making this kind of thing configurable, especially given that a work around is possible (exposing the underlying database's `id` field using another field name).

But leaking the underlying primary key sounds like a leaky abstraction to me anyway. I'd recommend that you only expose and use ""global"" IDs in your GraphQL schema (effectively `base64encode(type + ':' + databaseID)`). You shouldn't need to ever leak foreign keys like `authorID` in your schema because you'll typically be querying for them compositionally (ie. `viewer { books { author } }`) or via the `node` root field (ie. `node(id: ""someGlobalID"")`).
",wincent,2017-01-30 22:19:29
1061,2016-04-19 16:24:29,"The difficulty comes when introducing compound keys. There is no way (in my case) to intelligently compact the fields into a single field name _and_ hiding these fields could also cause problems.

Another layer of complexity is added when these compound primary keys are also foreign keys.

There are some consumers that would greatly benefit from being able to access the data in the same form it is stored and other consumers (_cough_ Relay _cough_) which would benefit from the `Node` format.
",calebmer,2017-01-30 22:19:29
1061,2016-04-19 17:23:28,"> The difficulty comes when introducing compound keys. There is no way (in my case) to intelligently compact the fields into a single field name and hiding these fields could also cause problems.
> 
> Another layer of complexity is added when these compound primary keys are also foreign keys.

Can you provide a concrete example of these cases in a bit more detail, to ground the discussion? I want to make sure I fully understand the exact nature of the problem that you're facing.
",wincent,2017-01-30 22:19:29
1061,2016-04-19 18:40:45,"Take any join table that in a graph database would be an edge for instance. Say I have a table `star` and it has columns `user_id` and `post_id` (where `id` represents a serial integer id). The `star` table also has some metadata columns like `created_at`.

`user_id` references a `user` table's `id` column, `post_id` references a `post` table's `id` column and the `post` table also has a column `author_id` which references the `user` table's `id` column.

Another constraint (for me) is I can't custom design a GraphQL schema. It has to be generated from the detected relationships among the data.
",calebmer,2017-01-30 22:19:29
1061,2016-04-19 19:11:05,"Can't you have the client only be aware of global ids, and then using `fromGlobalId` on the server to map that to database objects? That's how we're doing it when the id-relations associations are essential. 

https://github.com/facebook/relay/blob/da307264f79877884f67fe1726baa505af0b2204/examples/todo/data/schema.js#L260
",akre54,2017-01-30 22:19:29
1061,2016-04-26 16:05:05,"> Say I have a table star and it has columns user_id and post_id (where id represents a serial integer id). The star table also has some metadata columns like created_at. user_id references a user table's id column, post_id references a post table's id column and the post table also has a column author_id which references the user table's id column.

This would probably look something like:

<S_CODE_TOKEN>

Can you clarify where this would break down for your use case?
",josephsavona,2017-01-30 22:19:29
1061,2016-04-30 11:44:30,"@josephsavona it would break down at automatic generation for fields. I agree that schema would be the ideal, however I don't have the luxury to hide the primary key fields (I can't make assumptions about the data the schema is being generated from).

Would a solution like the following work with Relay, an `id` field with the following signature:

<S_CODE_TOKEN>

Where `global` defaults to `true`? Then we could have a query like:

<S_CODE_TOKEN>

---

As a side note, I've opened sourced the project I'm working on so we can talk in more specifics if you want. Its here at [PostGraphQL](https://github.com/calebmer/postgraphql).
",calebmer,2017-01-30 22:19:29
1061,2016-05-31 21:32:33,"While making the name of the field (id) configurable might be complicated, choosing a better name for it (relay_id) so that it does not collide with just about every project schema naming convention would not be that complicated.
The problem is that users already using relay would need to rewrite their schema.
@wincent can you point out the places in the code where the ""id"" is hardcoded?
",ruslantalpa,2017-01-30 22:19:29
1061,2016-06-01 06:47:39,"Any chance that this line is the only place that would need a change?
https://github.com/facebook/relay/blob/master/src/interface/RelayOSSNodeInterface.js#L38
",ruslantalpa,2017-01-30 22:19:29
1061,2016-06-12 10:46:43,"_Before I realised I was on the wrong repo, I filed a longer ticket here: https://github.com/graphql/graphql-relay-js/issues/92_

---

> While making the name of the field (id) configurable might be complicated, choosing a better name for it (relay_id) so that it does not collide with just about every project schema naming convention would not be that complicated.

I agree with @ruslantalpa.

Using such a common and ambiguous field name is bound to lead to clashes for e.g. people that start with just GraphQL and later on want to add Relay.

What I think this thread is missing is that not _all_ Relay clients can easily be updated when changing the semantics of an existing field that they’ve been using. In our case we have an iOS app and it’s very reasonable to assume that people will not update their app when we want them to.

I really do not like options, so my suggestion would also be to use a Relay specific ID field, if one exists, and otherwise fallback to `id`. Although, reading through the code, it seems like making the field configurable would be simpler (complexity-wise) than trying to reflect on the schema.
",alloy,2017-01-30 22:19:29
1061,2016-06-14 16:37:59,"@wincent After code-spelunking a bit more, my thoughts are slightly different. Namely that Relay infers the primary key from the `Node` interface in the given GraphQL schema by looking for a field with type `ID!`.

With this traditional interface, Relay would use `id` as the primary key:

<S_CODE_TOKEN>

But with this interface it would be `relayID`:

<S_CODE_TOKEN>

---

I had wanted to provide a prototype patch, but after code-spelunking a full day I have to admit I’m slightly out of my depth with the code-base. My thoughts were:
- Add an optional primary key name parameter to [the `nodeDefinitions` helper](https://github.com/graphql/graphql-relay-js/blob/f1dfe502cfeccf80deadce3ce2cfde618a8acb36/src/node/node.js#L46-L76).
- `babel-relay-plugin` infers the primary key name by checking the `Node` interface in the given schema for a field that has the `ID!` type and attaches that field name as [the `inferredPrimaryKey` metadata](https://github.com/facebook/relay/blob/829450ab74aa5c6b0cdb453cb76b1fbc45f16687/scripts/babel-relay-plugin/src/RelayQLPrinter.js#L476-L479) to the generated fields of types that have the `Node` interface.
- Relay uses the inferred primary key, but right now I’m not even sure what Relay uses that information for and it also doesn’t yet solve the hardcoded `id` value that @ruslantalpa linked to above.
",alloy,2017-01-30 22:19:29
1061,2016-06-22 13:15:59,"I have been making some progress on this. With the following patches [I’m able to define a custom Node ID field](https://github.com/artsy/emission/issues/181#issuecomment-227737481):
- A patched `nodeDefinitions` function to easily define your Node interface: https://github.com/alloy/graphql-relay-js/commit/efb893df0d52f59997c80a3e6a1cace08eb63580
- A patched `babel-relay-plugin` to inflect the ID field name from the Node interface in the schema: https://github.com/facebook/relay/compare/master...alloy:master

I still have [some failing `babel-relay-plugin` tests](https://github.com/alloy/relay/commit/5d85956e1306304bbcbd6486fb293d3c45dbe34d) to deal with after which I’ll start PRing.
",alloy,2017-01-30 22:19:29
1061,2016-06-22 18:44:23,"Can somebody tell me if Relay should _always_ include the `id` field in queries if that field exists on a type or if that just happened to be the case because Relay assumed that if an `id` field is present it is there because it implements the `Node` interface?

[Here](https://github.com/facebook/relay/blob/081b4a3f17dcf37419155317ed97ca5e5ac97522/scripts/babel-relay-plugin/src/RelayQLPrinter.js#L199-L200) is where the current code _always_ includes it, but I don’t see any tests that specifically describe that `id` should be included _regardless_ of whether or not the type explicitly implements the `Node` interface.
",alloy,2017-01-30 22:19:29
1061,2016-06-22 19:16:36,"@alloy relay needs the id on everything, that's how it caches locally.
For a GraphQL schema to be relay compatible, all types need to implement the node interface (at least that's what i got so far)
",ruslantalpa,2017-01-30 22:19:29
1061,2016-06-22 19:51:40,"Let me first clarify a few things, and then describe the changes we're considering going forward.

First, some clarifications & corrections to comments above:
- Relay does _not_ require all types to implement `Node`. You're free to implement this interface or not for each type.
- If a type has an `id` field, Relay _assumes_ that is is a globally unique ID and uses it for cache de-duplication. If you attempt to refetch data starting at such a record (e.g. with `setVariables`), Relay will assume that the type can be refetched via the `node` root call. This assumption is for legacy reasons; some types may have a globally unique field but not happen to implement Node.
- Because of the above, the Relay plugin always adds the `id` field if is defined on a type so that the runtime can use it to de-dupe and refetch as necessary.

In the long-term, we'd like to make a few changes to support a wider variety of schemas. Foremost among these is a proposal from @leebyron to define the behavior of an `__id` field as part of the GraphQL specification. This would be a field that any type could optionally implement and which behaves _roughly_ as follows: if `__id` is defined for a type, it must be a non-null globally unique identifier. 

This would free up the `id` field name for type-specific identifiers. Refetching in Relay would work the same as it does today: implement `Node` (basically a no-op implementation) _and_ define `__id` on a type to allow refetchability via the `__id`. Skip implementing `Node` to make Relay use the `__id` only for de-duplication.
",josephsavona,2017-01-30 22:19:29
1061,2016-06-22 19:54:16,"@alloy To be consistent with the current behavior, it's probably best to infer the name of the id field from the schema's `Node` interface, but keep the rest of the logic for adding this field unchanged. In other words, if the schema's `Node` interface has an `_id` field, then always add `_id` on any type that has that field, even if it doesn't implement `Node`.
",josephsavona,2017-01-30 22:19:29
1061,2016-06-23 17:21:49,"Created a PR https://github.com/facebook/relay/pull/1232

@josephsavona Thanks for the feedback!
",alloy,2017-01-30 22:19:29
1061,2016-06-24 10:51:47,"I was looking for more information on `__id`, but I couldn't find any open issues/PRs so I opened this one in case anyone interested in this thread wants to follow/contribute: https://github.com/facebook/graphql/issues/188
",calebmer,2017-01-30 22:19:29
1061,2016-07-06 09:21:56,"I’ll be maintaining a fork of Relay that uses `__id` instead of `id` https://github.com/alloy/relay

If/when in the future GraphQL & Relay adopt https://github.com/facebook/graphql/issues/188, I will gladly stop doing so.
",alloy,2017-01-30 22:19:29
1061,2017-01-30 22:19:29,"Thanks everybody for the discussion so far.

Just to close the loop, there was [an RFC PR](https://github.com/facebook/graphql/pull/232) on the subject of `__id` in the `graphql` repo. We weren't able to reach consensus, but determined that we might be able to move forward with a series of smaller RFCs.

I'm going to close this one now because I don't think there is anything actionable that we can do at this point, but we should continue to monitor the situation and open a new issue to re-start the discussion once there's been some more movement on the GraphQL side. Thanks once again for all the input!",wincent,2017-01-30 22:19:29
1060,2016-04-18 20:25:18,"Pass RelayRootContainer environment prop to RelayRenderer

I'm not 100% sure on the type checking `(type RootContainerProps... environment: RelayStore)` and the propTypes `(environment: PropTypes.Environment)`

But I needed to add line 107 and line 115 `(environment={environment || RelayStore}` in order to pass the environment prop down to RelayRenderer. All of my screens (using relay with React Native) use Relay.RootContainer and pass in the environment prop.

I know environment is still very new to the Public API  (only 1 week old) so if this method is incorrect please let me know. 

Thanks,
",dguillamot,2016-04-18 21:44:04
1060,2016-04-18 21:11:12,"@dguillamot The current approach - no `environment` prop on `RelayRootContainer` - is intentional. A lot of existing products use that component _and_ use `RelayStore` for data access. It's easy to imagine a case in which a product forgets to set the `environment` variable, only to have some of their data go to the wrong store, so we'd prefer to have the prop be explicitly required (as in RelayRenderer) or fixed (RelayRootContainer). 

If you'd like to explicitly set an environment, we'd recommend using `RelayRenderer` directly.
",josephsavona,2016-04-18 21:44:04
1060,2016-04-18 21:44:01,"@josephsavona Thanks, will take a look at RelayRenderer instead of RootContainer.
",dguillamot,2016-04-18 21:44:04
1059,2016-04-18 13:45:12,"I have a native app which works well with Realm DB. I use the realm DB as ""fallback"" when no network connection is available.

I've started rewriting the app with react-native. I wondered how could I achieve something similar with Relay, GraphQL and React-Native. I'm to use something an alternative for the local DB like lokijs.

Do I need to write a local GraphQL server on the device which connect to Realm?

I'm really not sure how to make this work and which architecture to go for, thank you in advance.
",wieseljonas,2016-04-19 15:26:31
1059,2016-04-19 04:02:40,"Think of GraphQL as a ""wrapper"" for your database (e.g. Realm). In order to store GraphQL data, you'll need some kind of persistence layer for it. So yes, you'll need a GraphQL server.

Relay doesn't really have a ""solution"" for doing things like local storage. You could implement your own [network layer](https://facebook.github.io/relay/docs/guides-network-layer.html#content) that switches between a remote and local GraphQL server, if that works for you - maybe Realm can do something to help sync those systems back together, I'm not sure? But you'll need to also put a GraphQL server in front of the local Realm db - see [graphql-js](https://github.com/graphql/graphql-js) for that.

TL;DR: yes, you could probably do this, and you'll need a GraphQL server. No, it's not going to be easy. If you really want Realm and offline persistence, I'd probably recommend using something other than Relay for the data - I don't see these two paradigms playing super well together...
",NevilleS,2016-04-19 15:26:31
1059,2016-04-19 15:26:31,"Thanks for the question, @wieseljonas. I think @NevilleS's answer is on point.

Right now you can do pretty much anything via a network layer, but depending on the complexity of your integration it may be a non-trivial amount of work.

We've extensively discussed making it easier to use Relay for this use case, but we're not actively working on it right now. We are, however, taking steps towards making Relay more modular (splitting the low-level core from the high-level React integration); this will make building arbitrary integrations more straightforward. We're definitely open to facilitating community contributions on these fronts if you are interested in helping out.

See #114 and #559 for more context on local data and the core split, respectively.
",wincent,2016-04-19 15:26:31
1058,2016-04-18 13:36:22,"I really need an example with server side Rendering with v 0.8.0.
Thank you 
",AhmadEl-Banna,2016-04-19 17:41:47
1058,2016-04-19 17:41:47,"Thanks for the question @AhmadEl-Banna. Your best bet is likely going to be to use [isomorphic-relay](https://github.com/denvned/isomorphic-relay/).

I see you already commented on [the relevant issue there](https://github.com/denvned/isomorphic-relay/issues/31), so I'm going to close this one out.
",wincent,2016-04-19 17:41:47
1058,2016-04-20 06:13:19,"@wincent I just want to have another implementation, and also the documentation for the v 0.8.0 is not published yet , so an example will be the only thing we have other than the release Note.
",AhmadEl-Banna,2016-04-19 17:41:47
1058,2016-04-20 17:15:59,"The latest version of the docs were published to the website [when v0.8.0 went out](https://github.com/facebook/relay/blob/ea0b958b157bdc5c3480809002ea1358b0ef162c/website/core/SiteData.js). Note that there are some new APIs that we have [intentionally left undocumented](https://github.com/facebook/relay/blob/ea0b958b157bdc5c3480809002ea1358b0ef162c/CHANGELOG.md#080-april-11-2016), as we are still iterating on them and we want to avoid churn. Other than those things specifically called out in the changelog, is there anything specific you were expecting to be published in the docs with v0.8.0?

We want Relay to work in a server-rendered context, but Relay itself is unlikely to provide end-to-end integration or examples for this, at least in the foreseeable (short-term) future. This is something we see largely being implemented in ""user space"", outside the core framework, which is why we refer people to projects like isomorphic-relay.
",wincent,2016-04-19 17:41:47
1058,2016-04-20 19:35:08,"I have created a PR (https://github.com/denvned/isomorphic-relay/pull/33) on the isomorphic-relay repo however I can't get the client fetching working.. I am prompted with `RelayQueryWriter: Could not find a type name for record RmFjdGlvbjoy.` when I try to fetch from the server (server data works fine).
The error is caused because the `__typename` field is not queried and I can probably solve it by adding it manually.. but I think Relay should add that field for me when it needs it. @wincent Do you have any suggestions?
",edvinerikson,2016-04-19 17:41:47
1058,2016-04-20 22:43:43,"Great work on that PR. Adding `__typename` explicitly sounds like a good work around for now. In general, Relay tries to add `__typename` automatically whenever it can't infer the concrete type of a node, so perhaps you have found an edge case. Can you try the manual workaround and if it works let us know?
",wincent,2016-04-19 17:41:47
1058,2016-04-21 09:10:10,"Thanks @wincent!
It works fine when I add the `__typename` field into the query. Can you point me to the code where it checks whenever it needs the `__typename` field? 

Another question: Relay is splitting my query into multiple requests instead of batching them into one when I use arguments on the route. Is this desired behaviour? 
https://github.com/edvinerikson/isomorphic-relay/blob/relay-08-support/examples/star-wars/src/routes/StarWarsAppHomeRoute.js#L17
",edvinerikson,2016-04-19 17:41:47
1058,2016-04-21 13:11:24,"@edvinerikson this is task of `RelayNetworkLayer` to combine multiple queries.
Firstly I try to combine queries into one in my own `NetworkLayer`, but it is to hacky to merge `RelayQueryRoot`s, there can be same variables names in different queries. 

And Joseph advised another solution https://github.com/facebook/relay/issues/520#issuecomment-212742629

So I implement it in https://gist.github.com/nodkz/d9a6380d55067192295382e8e490f39f
Also I was forced to write wrapper for `express-graphql` middleware. You can found it by the link above. 
",nodkz,2016-04-19 17:41:47
1058,2016-04-21 13:55:54,"Thanks for the info @nodkz, but do you think this still apply when you only have one query?
To be more clear, I only have one root query that gets splitted into two network requests.
e.g `factions(names: [""rebels"", ""empire""])` creates two network requests, one for each name (`rebels` and `empire`)
",edvinerikson,2016-04-19 17:41:47
1058,2016-04-21 15:44:51,"Hm. First time see such behaviour. And with your case I think is strange. I understood why relay split queries by router, but here I have no thoughts.
",nodkz,2016-04-19 17:41:47
1058,2016-04-21 15:47:38,"Yeah same for me, I started seeing this in Relay 0.8 both in the Star wars app and a project I am currently working on.
",edvinerikson,2016-04-19 17:41:47
1058,2016-04-21 16:05:58,"Oh, I try update tomorrow on 0.8 and confirm will I have similar query splitting.
",nodkz,2016-04-19 17:41:47
1058,2016-04-22 21:04:13,"@edvinerikson spent all current day for this writing RelayNetworkLayer with middlewares https://github.com/nodkz/react-relay-network-layer
So my updating to 0.8 will be at next week. 
",nodkz,2016-04-19 17:41:47
1058,2016-04-22 21:19:26,"> `factions(names: [""rebels"", ""empire""])` creates two network requests, one for each name 

@edvinerikson For legacy reasons, Relay splits ""plural"" root queries into individual queries. In general we want to diff each root value separately, since different fields may be missing for different root values.
",josephsavona,2016-04-19 17:41:47
1057,2016-04-17 13:45:38,"When I fetched data from a database, all the objects and arrays contain `__dataID__` properties. Normally, if I needed to mutate some properties in the objects, I would send `this.props` as following:

<S_CODE_TOKEN>

Which obviously returned an error because it also sent  the `__dataID__` that hasn't been defined in a Type.  I could manually loop through all the objects and arrays in order to remove the `__dataID__`. However, that's quite tedious. 

`__dataID__` helps Relay gain performance; refetching, mutating and etc. Relay could use `__dataID__` behind the scene without binding it to `this.props` in containers. As a developer, we will never ever want to manually access the `__dataID__`, won't we? Should it be included in the `this.props`? 
",lvarayut,2016-04-18 04:26:10
1057,2016-04-17 20:05:18,"Thanks for asking about this. Relay uses underscore prefixed keys on props to store metadata. This includes `__dataID__` (global id or a generated one), `__status__`, and some others for deferred query tracking. These are necessary in order to allow records from props to be passed into methods like `props.relay.hasOptimisticUpdate()`. 

In the future we may consider using Symbols in order to make the metadata accessible only to Relay: for now the simplest approach is to use ""private"" keys. 

Can you explain your use case a bit more? Why pass all of the existing records into a mutation as-is? In general products would explicitly pass changed properties. 
",josephsavona,2016-04-18 04:26:10
1057,2016-04-18 03:07:13,"Thanks for your great response. I'm trying to write a reusable mutation for updating data, called `TripPlannerMutation`. So, if any data changed, it could use to the same mutation. Let's say, I have Trip, Country, and City types as following:

<S_CODE_TOKEN>

If I added a new city/country or even changed some properties, I would like to be able to reuse the same `TripPlannerMutation` to mutate the data. So, I'm currently using `react-addons-update` to update the object, then, I send the updated object to the back-end using `Relay.Store.commitUpdate(new TripPlannerMutation(updatedTrip));` which unintentionally contains `__dataID__` and returns `__dataID` hasn't been defined error.
",lvarayut,2016-04-18 04:26:10
1057,2016-04-18 04:25:55,"I see, thanks for clarifying. In this case, I'd recommend explicitly extracting the properties of the props object to pass into the mutation. You could hand write this (list out all the specific properties), or just write a function that recursively maps the props object to a new object, minus the metadata keys. 

We're definitely open to concrete ideas about other ways to store this result metadata. for now though I'm going to close this since there is an easy workaround. Please feel free to continue the discussion here or to reopen with suggestions for alternatives!
",josephsavona,2016-04-18 04:26:10
1057,2016-04-18 04:54:28,"Thanks @josephsavona. I currently do as your suggestion. But this introduces another problem about Data masking. Actually, City and Country contain their own fragments. Trip is currently using `City.getFragment('city')` and `Country.getFragment('country')` to combine all the fragments and send them for retrieving data. Since, Trip can't directly access to the returned data of City/Country, I have no way to send the entire structure to the back-end. The returned object is shown as following:

<S_CODE_TOKEN>

If I added a new country, I would like to update the countries array and send the updated one back to the database. However, I couldn't do that since the Trip can't access the countries array. What I can do is to send just the `id` of the trip and the new country name and let the back-end retrieve the Trip object by using the id, add the new country to the array, and persist it to the database. In this situation, I have to write another mutation for adding a city, and also another one for updating other properties. Am I doing it right? Should it be just simply one mutation for updating the whole trip object?

I feel like I'm doing something in the wrong way. Your advice would be really appreciated. 
",lvarayut,2016-04-18 04:26:10
1057,2016-09-15 22:12:54,"I've hit a similar issue too, where I'm using relay data when updating an object in a mutation. Would it be possible to make the `__dataID__` field not enumerable? This way it would be possible to clone the relay data before sending it to the mutation and the copy would not include any meta data. This would achieve a similar result as using a Symbol. 
",janicduplessis,2016-04-18 04:26:10
1057,2016-09-16 03:03:44,"@lvarayut For this case, you can use a [mutation fragment](https://facebook.github.io/relay/docs/api-reference-relay-mutation.html#fragments-static-property) to allow the mutation to specify all the fields on an object that it needs to have fetched in order to execute. Rather than have the views fetch all the fields and pass them to the mutation, you can do `${YourMutation.getFragment('...')}` in the component query, and then pass this to the mutation as a prop.

@janicduplessis We understand that having to filter out these properties is slightly inconvenient. Ultimately, it comes down to performance and which operations are more common. Reading data for fragments is a very common operation that we would prefer to keep as fast as possible, which means using plain properties instead of `defineProperty`. Mutations are less common and not on the critical path, so the extra cost of skipping metadata properties is less of a concern. 

We'll definitely keep this use case in mind though. It still feels that there should be an alternative to copying so many fields in order to construct the mutation, though.
",josephsavona,2016-04-18 04:26:10
1057,2016-09-16 03:22:45,"@josephsavona I guess another alternative could be to have relay mutations do the filtering out of it's metadata before sending the result. For simple mutations this isn't really an issue but for mutations with deep nested objects it becomes annoying. For now I ended up writing a clone function that removes `__dataID__` but I feel like it could be handled by relay as some more people might hit this problem.
",janicduplessis,2016-04-18 04:26:10
1056,2016-04-16 15:45:34,"The warning was missing the 2 new possible `rangeBehaviors`.

Added `refetch` and `ignore` in there!
",xuorig,2016-04-18 18:11:31
1056,2016-04-16 17:36:47,"Nice, thanks!
",josephsavona,2016-04-18 18:11:31
1056,2016-04-16 17:58:57,"same weird flow error... https://github.com/facebook/relay/pull/1055 might fix ?
",xuorig,2016-04-18 18:11:31
1056,2016-04-18 17:02:31,"@facebook-github-bot shipit
",steveluscher,2016-04-18 18:11:31
1056,2016-04-18 17:15:44,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1276716822357588/int_phab) to review.
",facebook-github-bot,2016-04-18 18:11:31
1055,2016-04-16 15:08:40,"The only new errors upon upgrading to v0.23.0 come from the use of non-standard Promise APIs, like `done()`. Flow removed them from the builtin library definition because they are non-standard. The fix is to provide a custom definition of what `Promise` looks like.
",gabelevi,2016-04-18 22:05:23
1055,2016-04-18 17:01:49,"@facebook-github-bot shipit
",steveluscher,2016-04-18 22:05:23
1055,2016-04-18 17:16:16,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1703466749920838/int_phab) to review.
",facebook-github-bot,2016-04-18 22:05:23
1054,2016-04-16 05:01:34,"New PR for #639
Fix for #615, proposed in #538

Allows `rangeBehaviors` to be defined as a function that receives the connection arguments and returns one of `GraphQLMutatorConstants.RANGE_OPERATIONS`.

changes summary:
- added a `getRangeBehavior` module that will return a `rangeBehavior` depdending on `rangeBehaviors` config and `calls` passed by argument.
- changed `RelayQuery`'s `getRangeBehaviorKey` to `getRangeBehaviorCalls` so it can be reused by a function or plain object `rangeBehaviors` config.
- Added some documentation on using a function as `rangeBehaviors` config.
- Modified `todo` example to use a function.
",xuorig,2016-04-28 22:05:38
1054,2016-04-16 14:41:26,"addressed your comments @josephsavona 

Not sure about the CI Failure ?
",xuorig,2016-04-28 22:05:38
1054,2016-04-16 15:35:49,"Somehow I'm getting this Flow type error on master too  ¯_(ツ)_/¯
",xuorig,2016-04-28 22:05:38
1054,2016-04-21 01:31:10,"Rebased and got 🍏, I know this is a fairly large PR, but any comments ? cc @josephsavona 
",xuorig,2016-04-28 22:05:38
1054,2016-04-21 02:08:12,"@xuorig sorry for the delay in review. this looks pretty solid, just a few nits and we should be good to go.
",josephsavona,2016-04-28 22:05:38
1054,2016-04-21 17:29:40,"addressed your comments @josephsavona :)
",xuorig,2016-04-28 22:05:38
1054,2016-04-21 18:50:36,"@facebook-github-bot import
",josephsavona,2016-04-28 22:05:38
1054,2016-04-21 18:50:39,"thanks!
",josephsavona,2016-04-28 22:05:38
1054,2016-04-21 19:04:37,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/136980846702765/int_phab) to review.
",facebook-github-bot,2016-04-28 22:05:38
1054,2016-04-28 22:10:10,"@xuorig thanks for this!
",josephsavona,2016-04-28 22:05:38
1054,2016-10-17 23:08:32,"Hello, is this likely to be released soon ? Looks like a really useful feature. 
",tim-field,2016-04-28 22:05:38
1054,2016-10-20 06:14:35,"This is included in the latest release. 
",josephsavona,2016-04-28 22:05:38
1053,2016-04-15 17:46:46,"The store/cache seems to me one of the least documented features and it is imo hard to tell how exactly relay caches its data, which is propagated to containers and updated from mutations (i.e. what is the relation between `fieldIDs` in a mutation and how the data is stored in the cache). I love that the cache handled automatically but I think Relay would benefit a lot if it had more debugging features around this part.

Looking in the react dev tools or logging `Relay.Store.getStoreData()` just gives you an object with a lot of keys, where it is not quite clear which actually hold the data. There is e.g. a `_cachedStore`, a `_recordStore` and a `_records` all seeming to have overlapping data which has been requested by queries.

In my opinion the nicest solution would probably be to see the current store in the React Devtools in the `Relay` tab.

I might be able to look into that myself at some point but wanted to raise this already to see what other people think/say to this.
",Globegitter,2017-01-30 19:52:20
1053,2016-04-15 18:18:48,"@Globegitter We agree. One of our ideas here was to have a Relay ""debugger"" - something that optionally prints information about what Relay is doing in order to make it more obvious what's happening (diffing a query, writing data into the store, constructing a mutation query, etc). The aim would be to both help people debug when issues do occur as well as to help people learn about all the things Relay is doing behind the scenes. 

@yuzhi has been focused on this lately, but there's plenty of room for contributions here. I'd encourage you to send a PR with changes that you think would be helpful and we can discuss from there.
",josephsavona,2017-01-30 19:52:20
1053,2016-04-16 03:45:25,"Probably quite related to #1045 which @yuzhi was also taking a look at :)
",xuorig,2017-01-30 19:52:20
1053,2016-04-18 20:35:19,"@Globegitter I agree that we definitely need something like that. As far as making it easier to debug, we can use a lot of help from the community. I haven't started working on making it easier to inspect the data Relay has cached yet. If you have time and ideas, we would love to see an PR!
",yuzhi,2017-01-30 19:52:20
1053,2016-05-01 13:29:26,"I had a bit of a play with the Relay plugin in the dev tools (https://github.com/facebook/react-devtools/tree/master/plugins/Relay) and I think two different views on the store would be nice.

One view that corresponds directly to the queries you constructed or maybe even the components where it is being displayed (in my mind a call the more the 'intuitive' view, i.e. it would be more easy to read etc.

The second view would just be how it is stored in Relay, so maybe just `getNodeData()` on storeData and possibly the `_rootCallMap` to show, this is how it is actually stored in relay, flat.

In my opinion the first one would be more important to kind of get an understand of how your queries/components relate to the existing data and would probably also make debugging easier. The second one would more be to get some under the hood understanding and maybe also a nice fallback so one can immediately see all the data that is in the cache.

I will do some more testing around and hopefully can hopefully get something nice and basic out.
",Globegitter,2017-01-30 19:52:20
1053,2016-05-02 15:47:22,"Having worked a bit now with https://github.com/facebook/react-devtools the developer experience is currently not that great as there is no simple relay app that can just run in the iframe that they provide. And if you don't use the iframe setup you can not inspect the inspector.

So I thought @yuzhi as a first step I would make another todo app using https://github.com/relay-tools/relay-local-schema to add here as an example which can then be used for easier react devtools development.
",Globegitter,2017-01-30 19:52:20
1053,2017-01-30 19:52:20,"I'm going to close this due to inactivity. Note that we're still interested in making debuggability better in Relay (and probably always will be; when can an app/framework become ""too debuggable""?). Suitable next steps for anybody interested in this: submitting a PR to provide better visibility into the store, and/or watching the master branch, where we have been shipping code for the new Relay core (more of this is coming, and obviously the low-level storage implementation details have changed, so any debugging solution would ideally be built on top of the new APIs and implementation rather than the legacy ones).

Thanks for the discussion!",wincent,2017-01-30 19:52:20
1052,2016-04-15 17:36:47,"We have a component that displays a simple list of tickets as follows:

<S_CODE_TOKEN>

That page also has filters to change the status between `OPEN/CLOSED/ALL` tickets.

When you click on a specific ticket in the list we use the `node(id:....)` query to fetch for additional ticket data and that page has following fragment defined:

<S_CODE_TOKEN>

The displaying of the list of tickets and the individual ticket all works perfectly.

Then we have a simple mutation to close a ticket, which looks as follows:

<S_CODE_TOKEN>

The request is made successfully, I can see the right data returned and when I look at the cache (via `console.log(Relay.Store.getStoreData())`) I can see that status of the ticket updated. I also see the list of tickets updated in the `TicketsTable` (e.g. if filter `OPEN` is active, the closed ticket immediately disappears), but when I click around the filters, e.g. the `CLOSE` filter ( `this.props.relay.setVariables({status: 'CLOSED'});`) the ticket does not show up there and seems to have entirely disappeared (at least visually).

I am not sure what exactly is happening and happy to try and provide a more complete example, but it seems to me like only the 'active' query is updated but not the others if they are already in the cache (if the other queries with status `OPEN/ALL` have not been triggered before, i.e. they are not in the cache it loads fine. So the bug only appears once the queries have been loaded in the cache).

I am also happy to do some more debugging/ provide a more complete example/look into it myself with a couple of pointers.
",Globegitter,2016-04-16 15:33:49
1052,2016-04-15 18:12:12,"If I understand correctly, the app fetches a list of tickets which may have a status of open or closed, and the mutation is toggling the status. With a fields change mutation Relay will update the scalar fields of an object - hence why you are seeing the ticket's `status` change in the store. However Relay does not know anything about range filter calls - in `tickets(status: $status)`, Relay doesn't know what the `status` field means. Put another way, Relay currently can't sort/filter connection items; the server (or your mutation config) has to tell Relay how to update connections.

To make this work, the mutation would have to specify a range add/delete config to tell Relay which variations of connection arguments are affected. Use range add to specify that a now-open ticket goes in the `tickets(status: ""OPEN"")` connection and a range delete to specify that the same ticket is no longer in the `tickets(status: ""CLOSED"")` connection.

This is definitely a bit cumbersome and we're open to suggestions about making this simpler. Our current thinking is that we'd like to provide a low-level mutation API that allows products to directly (imperatively) specify what has changed in the store.
",josephsavona,2016-04-16 15:33:49
1052,2016-04-15 18:15:12,"@Globegitter Also, thanks for taking the time to provide such a clearly written and well-documented issue. 
",josephsavona,2016-04-16 15:33:49
1052,2016-04-16 15:32:51,"@josephsavona Thank you for providing such a clear answer, that does make sense. Intuitively yes, it does feel a bit cumbersome but I am also really just starting to understand how all the different pieces within Relay work under the hood. 

You are saying the server can tell Relay how to update the cache? How is that possible? I haven't seen any docs about that.
",Globegitter,2016-04-16 15:33:49
1052,2016-04-16 15:33:49,"Also I will close this for now as the issue does seem to be resolved (won't get to fix it until monday).
",Globegitter,2016-04-16 15:33:49
1052,2016-08-25 09:39:42,"If somebody googled this topic and wants to know how to fetch additional data.
Read this Joseph's answer: http://stackoverflow.com/a/34405708/3340384
Still actual on August'16.
",nodkz,2016-04-16 15:33:49
1051,2016-04-15 17:13:17,,wincent,2016-04-15 18:40:28
1051,2016-04-15 17:13:28,"@facebook-github-bot import
",wincent,2016-04-15 18:40:28
1051,2016-04-15 17:21:23,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1123720164358682/int_phab) to review.
",facebook-github-bot,2016-04-15 18:40:28
1050,2016-04-14 17:12:58,"RelayNetworkDebug overwrites the global 'fetch' function with one that
does not return a Promise. Additionally, it calls that 'fetch' without a
correct 'this'.

Fixes the overwrite to correctly invoke a global 'fetch' and also
preserve its return value.

I think this should be covered under an existing corporate CLA with Twitter.
",finneganh,2016-04-27 06:10:23
1050,2016-04-14 17:23:39,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-04-27 06:10:23
1050,2016-04-18 20:29:46,"@finneganh Thank you for your pull request. After using this a bit internally, we found that this way of blatantly overwriting the inject network layer is somewhat fragile.  Instead of making it wrap around an `injectedNetworkLayer`, I am actually in the process of rewriting RelayNetworkDebug to be more of a subscriber to `RelayNetworkLayer`.
",yuzhi,2016-04-27 06:10:23
1050,2016-04-18 21:02:27,"Sounds good! Thanks for the update.

On Monday, April 18, 2016, Yuzhi notifications@github.com wrote:

> @finneganh https://github.com/finneganh Thank you for your pull
> request. After using this a bit internally, we found that this way of
> blatantly overwriting the inject network layer is somewhat fragile. Instead
> of making it wrap around an injectedNetworkLayer, I am actually in the
> process of rewriting RelayNetworkDebug to be more of a subscriber to
> RelayNetworkLayer.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/pull/1050#issuecomment-211563670
",finneganh,2016-04-27 06:10:23
1050,2016-04-27 06:10:23,"I think we can close this out now that @yuzhi's new take on `RelayNetworkDebug` has landed in 85158ce9f88cf3c93015106e1d1df64b64b49d85. Let me know if I'm mistaken @finneganh, and thanks for contributing!
",wincent,2016-04-27 06:10:23
1050,2016-04-27 14:18:04,"Cool, looking forward to that getting in a release.

On Wed, Apr 27, 2016 at 2:10 AM, Greg Hurrell notifications@github.com
wrote:

> I think we can close this out now that @yuzhi https://github.com/yuzhi's
> new take on RelayNetworkDebug has landed in 85158ce
> https://github.com/facebook/relay/commit/85158ce9f88cf3c93015106e1d1df64b64b49d85.
> Let me know if I'm mistaken @finneganh https://github.com/finneganh,
> and thanks for contributing!
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/pull/1050#issuecomment-214980499
",finneganh,2016-04-27 06:10:23
1050,2016-04-27 17:54:49,"Yep, probably worth cutting a release soon.
",wincent,2016-04-27 06:10:23
1050,2016-04-27 23:56:39,"I just published 0.8.1 with the fix.
",kassens,2016-04-27 06:10:23
1049,2016-04-14 14:23:24,"In 0.8.0, calling `setVariables` will always perform a new fetch; Relay no longer compares the next variables to the fetched variables to skip if identical. This means that users may need to check the pending variables to manually avoid refetching the same variables that are already in flight. 

The proposal is for `RelayContainer` to pass the pending variables to components as `this.props.relay.pendingVariables`, where pending variables is `null` if there is no pending fetch, and is an object of the pending variables if there is an in-flight `setVariables` or `forceFetch`. Note that this also serves as a simple ""is loading"" check (e.g. `isLoading = !!props.relay.pendingVariables`).
",josephsavona,2016-07-29 22:31:55
1049,2016-04-14 15:20:04,"This can be a very nice addition, it's currently not very easy to check loading state on the variable change. One have to listen to onReadyStateChange and mingle with, eg, component the state.
",freiksenet,2016-07-29 22:31:55
1049,2016-04-14 15:33:27,"PRs welcome!
",josephsavona,2016-07-29 22:31:55
1049,2016-07-29 21:42:21,"This should be fixed with release `0.9.1`.
",Globegitter,2016-07-29 22:31:55
1049,2016-07-29 22:31:55,"@Globegitter you're right, thanks for the reminder. This is done!
",josephsavona,2016-07-29 22:31:55
1048,2016-04-14 13:50:00,"I'm running into trouble due to this change:

“RelayContainer.setVariables will no longer check if the variables are changed before re-running the variables. To prevent extra work, check the current variables before calling setVariables.”

My problem is that my code had previously been doing a `setVariables` call from `componentWillReceiveProps`, which seems to (at least in my case) be called as a result of `setVariables`.

This is leading to an infinite loop, but I can’t use the suggestion to check the current value of the variable because it isn’t updated until the variable fetch succeeds.

While I can be more defensive about not considering `setVariables` based on what props are changed, I worry that this is more fragile.

Can you restore the previous `setVariables` behavior, or make it easier to see what `variables` values are in-flight so I can make my own check more accurate?
",finneganh,2016-04-15 14:06:16
1048,2016-04-14 14:17:23,"Thanks for letting us know about this issue. In general, calling `setVariables` in `componentWillReceiveProps` can lead to an infinite loop. Changing variables fetches more data, which will typically cause the component to re-render, which will cause new props to be received. I'll get to a workaround/follow-up in a moment, but before that - what's the use-case for setting variables in `willReceiveProps`? If a component needs data, that _should_ be expressible in its fragments such that the parent can ensure all data is available.

We encountered some issue with the old behavior of `setVariables` and don't plan on reverting to it. Specifically, it's possible for one component in a to call `forceFetch` such that another component ends up missing some data (forceFetch on a range overwrites the range - if i force fetch for 5 items and you had fetched 20, now you'll suddenly get only 5. we refer to this as the ""missing records/items problem""). The only option before the setVars change was for the affected component to also forceFetch (because setVars would previously see that the affected components vars were the same and avoid refetching), which could cause an infinite loop of refetching. The new behavior allows a component so affected to use `setVars` and avoid the infinite loop (because setVars merges new range items instead of overwriting).

tl;dr Yes, we should make it possible to see what vars are pending, but I'm still curious about the use-case for calling `setVariables` in willReceiveProps (seems like an anti-pattern).

cc @yuzhi 
",josephsavona,2016-04-15 14:06:16
1048,2016-04-14 14:24:21,"I've filed a new issue at #1049 to describe the addition of `pendingVariables`. 
",josephsavona,2016-04-15 14:06:16
1048,2016-04-14 16:15:47,"Also curious to know what about your use case requires you to use `componentWillReceiveProps` (as opposed to, say, `componentDidUpdate`).
",wincent,2016-04-15 14:06:16
1048,2016-04-14 17:45:41,"Thanks for the info about the problems with the previous implementation!  Here's what we're up to, and maybe you'll have a suggestion for a better approach.

We're rendering a list of elements with a filtering search box. We're doing the filtering client-side, so we want to load the complete list into memory (up to at least a big max of 5000 elements or so). For keeping the individual requests reasonable, though (we have resource limits on the server to mitigate abuse), we're making requests for 100 or so at a time.

So, the logic is that we have a ""count"" variable that feeds into the ""first"" argument of the elements' connection. When props update, we check the connection to see if it has a next page. If so, we set the variable to 100 + the current number of edges to fetch the next page.

We'd probably be happier either doing this in parallel, or always setting ""first"" to the 5000 max, with some combination of server-side limit enforcement and Relay automatically making follow-up requests to get more pages.

It might also be that `componentDidUpdate` would work? We don't actually render all of the loaded elements by default; they're just in memory for the filtering.
",finneganh,2016-04-15 14:06:16
1048,2016-04-14 22:36:06,"@finneganh I see, thanks for clarifying. In general we recommend doing this type of fetching in `componendDidMount`. You might set things up as:

<S_CODE_TOKEN>
",josephsavona,2016-04-15 14:06:16
1048,2016-04-15 14:06:16,"Ah, that looks tons cleaner. Thanks for the tip, I'll use that approach.

Closing this ticket because you're tracking `pendingVariables` elsewhere.
",finneganh,2016-04-15 14:06:16
1048,2016-04-15 14:47:19,"@finneganh Glad that helps, thanks for the follow-up!
",josephsavona,2016-04-15 14:06:16
1048,2016-04-21 11:35:10,"I am having similar problem. My use case is if I get new props from parent I need to adjust relay variables accordingly . So I thought that `componentWillRecieveProps` or `componentDidUpdate` would be good place to do that. 

But issue is with the infinite loop  (with both 0.7.3 and 0.8) - seems that component gets updated immediately after calling setVariables, which causes next setVariable call..  and it does not wait for the actual requests, just generate as much requests as it can in infinite loop.

I am not able to reproduce it in relay playground so I am still in process figuring out whats going on. Just in case someone has insight and/or dealing with this as well...
",jardakotesovec,2016-04-15 14:06:16
1048,2016-04-21 12:22:37,"So here is [playground](https://facebook.github.io/relay/prototyping/playground.html#source=%2F**%0A%20*%20Copyright%20%28c%29%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0A%2F%2F%20Welcome%20to%20Relay.%0A%2F%2F%20Allow%20us%20to%20introduce%20you%20to%20the%20four%20elements.%0A%0A%2F**%0A%20*%20%231%20-%20Your%20React%20components%0A%20*%20This%20will%20look%20familiar%20to%20React%20developers.%0A%20*%0A%20*%20To%20learn%20more%20about%20React%2C%20visit%3A%0A%20*%20%20https%3A%2F%2Ffacebook.github.io%2Freact%0A%20*%2F%0Aclass%20HelloApp%20extends%20React.Component%20%7B%0A%20%20componentDidMount%28%29%20%7B%0A%20%20%20%20console.log%28'componentDidMount'%29%0A%20%20%20%20this.props.relay.setVariables%28%7B%0A%20%20%20%20%20%20bar%3A%202%0A%20%20%20%20%7D%29%0A%0A%20%20%7D%0A%20%20componentWillReceiveProps%28%29%20%7B%0A%20%20%20%20console.log%28'componentWillReceiveProps'%29%3B%0A%0A%20%20%7D%0A%20%20componentDidUpdate%28%29%20%7B%0A%20%20%20%20console.log%28'componentDidUpdate'%29%3B%0A%20%20%20%20this.props.relay.setVariables%28%7B%0A%20%20%20%20%20%20bar%3A%202%0A%20%20%20%20%7D%29%0A%0A%20%20%7D%20%0A%20%20render%28%29%20%7B%0A%20%20%20%20%2F%2F%20Relay%20will%20materialize%20this%20prop%20based%20on%20the%0A%20%20%20%20%2F%2F%20result%20of%20the%20query%20in%20the%20next%20component.%0A%20%20%20%20const%20%7Bhello%7D%20%3D%20this.props.greetings%3B%0A%20%20%20%20return%20%3Ch1%3E%7Bhello%7D%3C%2Fh1%3E%3B%0A%20%20%7D%0A%7D%0A%20%0A%2F**%0A%20*%20%232%20-%20Relay%20containers%0A%20*%20Compose%20your%20React%20components%20with%20a%20declaration%20of%0A%20*%20the%20GraphQL%20query%20fragments%20that%20fetch%20their%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-containers.html%0A%20*%2F%0AHelloApp%20%3D%20Relay.createContainer%28HelloApp%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20bar%3A%201%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20%2F%2F%20This%20GraphQL%20query%20executes%20against%0A%20%20%20%20%2F%2F%20the%20schema%20in%20the%20'schema'%20tab%20above.%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20To%20learn%20more%20about%20Relay.QL%2C%20visit%3A%0A%20%20%20%20%2F%2F%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fapi-reference-relay-ql.html%0A%20%20%20%20greetings%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20hello%20%28bar%3A%20%24bar%29%0A%20%20%20%20%20%20%7D%20%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0A%2F**%0A%20*%20%233%20-%20Relay%20routes%0A%20*%20Define%20a%20root%20GraphQL%20query%20into%20which%20your%0A%20*%20containers'%20query%20fragments%20will%20be%20composed.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20routes%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-routes.html%0A%20*%2F%0Aclass%20HelloRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%20%20%2F%2F%20A%20unique%20name%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20%2F%2F%20Here%2C%20we%20compose%20your%20Relay%20container's%0A%20%20%20%20%2F%2F%20'greetings'%20fragment%20into%20the%20'greetings'%0A%20%20%20%20%2F%2F%20field%20at%20the%20root%20of%20the%20GraphQL%20schema.%0A%20%20%20%20greetings%3A%20%28Component%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20GreetingsQuery%20%7B%0A%20%20%20%20%20%20%20%20greetings%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'greetings'%29%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0A%2F**%0A%20*%20%234%20-%20Relay%20root%20containers%0A%20*%20Compose%20a%20Relay%20container%20with%20a%20Relay%20route.%0A%20*%20This%20enables%20Relay%20to%20synthesize%20a%20complete%20query%0A%20*%20to%20fetch%20the%20data%20necessary%20to%20render%20your%20app.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20root%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-root-container.html%0A%20*%2F%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BHelloApp%7D%0A%20%20%20%20route%3D%7Bnew%20HelloRoute%28%29%7D%0A%20%20%20%20renderFetched%3D%7Bfunction%28data%29%20%7B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3CHelloApp%20%7B...data%7D%20breakMe%3D%7B5%7D%2F%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%7D%0A%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B%0A&schema=%2F**%0A%20*%20Copyright%20%28c%29%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aimport%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%20%20%20%20GraphQLInt%0A%0A%7D%20from%20'graphql'%3B%0A%0Aconst%20GREETINGS%20%3D%20%7B%0A%20%20hello%3A%20'Hello%20world'%2C%0A%7D%3B%0A%0A%2F**%0A%20*%20Objects.%0A%20*%20Build%20up%20a%20portrait%20of%20your%20data%20universe%0A%20*%20using%20the%20object%20type.%20Here%2C%20we%20define%20a%0A%20*%20type%20of%20object%20that%20has%20a%20'hello'%20field%0A%20*%20that%20is%20of%20the%20string%20type.%0A%20*%2F%0Aconst%20GreetingsType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Greetings'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20hello%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20bar%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20type%3A%20GraphQLInt%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0A%2F**%0A%20*%20The%20schema.%0A%20*%20Here%20we%20export%20a%20schema%20that%20offers%20one%20root%0A%20*%20field%20named%20'greetings'%2C%20and%20a%20method%20to%0A%20*%20resolve%20its%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20writing%20GraphQL%20schemas%20for%20Relay%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Fgithub.com%2Fgraphql%2Fgraphql-relay-js%0A%20*%2F%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20greetings%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20GreetingsType%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20Here%20we%20define%20a%20resolver%20that%20returns%0A%20%20%20%20%20%20%20%20%2F%2F%20the%20data%20defined%20above.%20Were%20this%20schema%0A%20%20%20%20%20%20%20%20%2F%2F%20executing%20on%20the%20server%20side%2C%20you%20could%0A%20%20%20%20%20%20%20%20%2F%2F%20write%20a%20resolve%20method%20that%20fetches%0A%20%20%20%20%20%20%20%20%2F%2F%20live%20data%20from%20a%20database.%0A%20%20%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20GREETINGS%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%29%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A).

To achieve infinite loop in this playground - only thing that needed is to change `breakMe={5}` to something non-scalar like  `breakMe={{}}`. As result `shouldComponentUpdate` in RelayContainer always returns true which is the issue because `setState` get called on container immediately after setVariable.

So I guess solution here is to implement proper `shouldComponentUpdate` in component itself and call setVariables in `componentDidUpdate`? And in 0.8 I should also make the comparison with current variables (which will be possible once we have [pending variable prop](https://github.com/facebook/relay/issues/1049)) before I call new setVariables?

Currently feel overwhelmed to do relatively simple thing. Am I doing it wrong? 
",jardakotesovec,2016-04-15 14:06:16
1048,2016-04-21 17:22:27,"@jardakotesovec Thanks for providing more detail here. This came up again in #1063 (see my [comment](https://github.com/facebook/relay/issues/1063#issuecomment-213025165)). It sounds like we need to adjust RelayContainer such that it's safe to call `setVariables` from within the child's `componentWillReceiveProps` call. 

We'll look at this as time permits, but are definitely open to PRs to help here.
",josephsavona,2016-04-15 14:06:16
1048,2016-04-22 02:34:07,"@jardakotesovec I think you can check your `props` before `setVariables` is called in `componentWillReceiveProps` to break the loop. For example:

<S_CODE_TOKEN>
",mickeyinfoshan,2016-04-15 14:06:16
1048,2016-04-22 05:30:06,"@mjhlybmwq yes.. or implement `shouldComponentUpdate` and call `setVariables` in `componentDidUpdate`.
",jardakotesovec,2016-04-15 14:06:16
1048,2016-04-27 14:08:10,"@josephsavona Just wanted to drop in our solution here to show what we ended up going with, in case it might be informative for future Relay features: https://gist.github.com/finneganh/c81bd1167a07306eba7365f8e123ccfb

One note about the suggestion that you put above is that at the time of the `setVariables` callback’s ready state being “done,” the component’s props haven’t been updated and so `fetchMore` wouldn’t see the right view of the world.

We ended up putting things through `componentDidUpdate`, with some checks to both prevent double-fetching and also a backoff if the fetches are failing or otherwise not making progress (so as not to fetch on an infinite loop, especially during prod issues).

One curiosity we had was that for our prod component, `componentWillReceiveProps` was consistently called (twice actually) after the `setVariables` call errored out. In a smaller test component, it wasn’t called. I don’t know if there’s an explanation for that behavior (the prod component had sub-containers, maybe that was it?) but we ended up working around it with the `forceUpdate`.

At any rate, I found this an interesting case where we seemed to be running at odds with how Relay wants to do data access. I don’t know if that means we’re doing something particularly wrong, or just running into the law of leaky abstractions.
",finneganh,2016-04-15 14:06:16
1047,2016-04-14 12:26:00,"Here is a [sample](https://facebook.github.io/relay/prototyping/playground.html#source=class%20Story%20extends%20React.Component%20%7B%0A%20%20showComments%28%29%20%7B%0A%20%20%20%20let%20%7B%20relay%20%7D%20%3D%20this.props%3B%0A%20%20%20%20relay.setVariables%28%7B%20showComments%3A%20!relay.variables.showComments%20%7D%29%3B%0A%20%20%7D%0A%20%20change%28%29%20%7B%0A%20%20%20%20let%20%7B%20story%20%7D%20%3D%20this.props%3B%0A%20%20%20%20Relay.Store.commitUpdate%28new%20Mutation%28%7B%20story%20%7D%29%29%3B%0A%20%20%7D%0A%20%20render%28%29%20%7B%0A%20%20%20%20let%20%7B%20title%2C%20comments%20%7D%20%3D%20this.props.story%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Ch1%3E%7Btitle%7D%3C%2Fh1%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7Bthis.change.bind%28this%29%7D%3EChange%20something%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Cbr%2F%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cinput%20type%3D'checkbox'%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20checked%3D%7Bthis.props.relay.variables.showComments%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20onChange%3D%7Bthis.showComments.bind%28this%29%7D%0A%20%20%20%20%20%20%20%20%20%20%2F%3E%0A%20%20%20%20%20%20%20%20%20%20Show%20comments%0A%20%20%20%20%20%20%20%20%3C%2Flabel%3E%0A%20%20%20%20%20%20%20%20%3Cul%3E%0A%20%20%20%20%20%20%20%20%20%20%7B%28comments%20%7C%7C%20%5B%5D%29.map%28%28%7B%20id%2C%20text%20%7D%29%20%3D%3E%20%28%3Cli%20key%3D%7Bid%7D%3E%7Btext%7D%3C%2Fli%3E%29%29%7D%0A%20%20%20%20%20%20%20%20%3C%2Ful%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0Aconst%20StoryContainer%20%3D%20Relay.createContainer%28Story%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20showComments%3A%20false%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20story%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Story%20%7B%0A%20%20%20%20%20%20%20%20title%2C%0A%20%20%20%20%20%20%20%20comments%20%40include%28if%3A%20%24showComments%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20%20%20text%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%24%7BMutation.getFragment%28'story'%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0Aclass%20Mutation%20extends%20Relay.Mutation%20%7B%0A%20%20static%20fragments%20%3D%20%7B%0A%20%20%20%20story%3A%20%28%29%20%3D%3E%20Relay.QL%60fragment%20on%20Story%20%7B%20id%20%7D%60%0A%20%20%7D%0A%20%20getMutation%28%29%20%7B%0A%20%20%20%20return%20Relay.QL%60mutation%20%7B%20change%20%7D%60%3B%0A%20%20%7D%0A%20%20getFatQuery%28%29%20%7B%0A%20%20%20%20return%20Relay.QL%60fragment%20on%20ChangePayload%20%40relay%28pattern%3A%20true%29%20%7B%20story%20%7D%60%0A%20%20%7D%0A%20%20getVariables%28%29%20%7B%20return%20%7B%7D%3B%20%7D%0A%20%20getConfigs%28%29%20%7B%0A%20%20%20%20return%20%5B%7B%0A%20%20%20%20%20%20type%3A%20'FIELDS_CHANGE'%2C%0A%20%20%20%20%20%20fieldIDs%3A%20%7B%0A%20%20%20%20%20%20%20%20story%3A%20this.props.story.id%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%5D%3B%0A%20%20%7D%0A%7D%0A%0Aclass%20Route%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Route'%3B%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20story%3A%20Component%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20Query%20%7B%0A%20%20%20%20%20%20%20%20story%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'story'%29%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BStoryContainer%7D%0A%20%20%20%20route%3D%7Bnew%20Route%28%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B%0A&schema=import%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%20%20GraphQLList%0A%7D%20from%20'graphql'%3B%0A%0Aimport%20%7B%0A%20%20globalIdField%2C%0A%20%20mutationWithClientMutationId%2C%0A%20%20nodeDefinitions%2C%0A%7D%20from%20'graphql-relay'%3B%0A%0Aconst%20STORY%20%3D%20%7B%20id%3A%201%2C%20title%3A%20'Story'%20%7D%3B%0A%0Aconst%20%7B%20nodeInterface%2C%20nodeField%20%7D%20%3D%20nodeDefinitions%28%0A%20%20%28%29%20%3D%3E%20STORY%2C%0A%20%20%28%29%20%3D%3E%20StoryType%0A%29%3B%0A%0Aconst%20CommentType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Comment'%2C%0A%20%20fields%3A%20%7B%0A%20%20%20%20id%3A%20globalIdField%28'Comment'%29%2C%0A%20%20%20%20text%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%29%3B%0A%0Aconst%20StoryType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Story'%2C%0A%20%20fields%3A%20%7B%0A%20%20%20%20id%3A%20globalIdField%28'Story'%29%2C%0A%20%20%20%20title%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%0A%20%20%20%20%7D%2C%0A%20%20%20%20comments%3A%20%7B%0A%20%20%20%20%20%20type%3A%20new%20GraphQLList%28CommentType%29%2C%0A%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20console.log%28'GetComments'%29%3B%0A%20%20%20%20%20%20%20%20return%20%5B1%2C2%2C3%2C4%2C5%5D.map%28id%20%3D%3E%20%28%7B%20id%2C%20text%3A%20%60comment%20%24%7Bid%7D%60%20%7D%29%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%0A%7D%29%3B%0A%0Aconst%20changeMutation%20%3D%20mutationWithClientMutationId%28%7B%0A%20%20name%3A%20'Change'%2C%0A%20%20outputFields%3A%20%7B%0A%20%20%20%20story%3A%20%7B%0A%20%20%20%20%20%20type%3A%20StoryType%2C%0A%20%20%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20console.log%28'GetStoryAfterMutation'%29%3B%0A%20%20%20%20%20%20%20%20%20%20return%20STORY%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20mutateAndGetPayload%28%29%7B%0A%20%20%20%20return%20%7B%7D%3B%0A%20%20%7D%0A%7D%29%3B%0A%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20mutation%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Mutation'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20change%3A%20changeMutation%0A%20%20%20%20%7D%29%0A%20%20%7D%29%2C%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20node%3A%20nodeField%2C%0A%20%20%20%20%20%20story%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20StoryType%2C%0A%20%20%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20console.log%28'GetStory'%29%3B%0A%20%20%20%20%20%20%20%20%20%20return%20STORY%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%29%0A%20%20%7D%29%0A%7D%29%3B%0A). I have a story which is fetching immediately and a comment list fetching after checkbox checking. Imagine that the ""Change something"" button mutates everything we have (the story and the comment list).

I found the result of the next scenario unexpected:
1. check checkbox
2. uncheck
3. click change button

The mutation query is trying to fetch the story aswell as comments. Despite `showComments` variable is `false` query contains part: `comments @include(if:true)`.
Receiving the comment list from database can be a heavy operation so I dont want the mutation perform it if `showComments` is `false.`

Is it bug or I miss something?

Thanks
Dmitry
",saywhaat,2017-01-30 21:33:43
1047,2016-04-17 22:46:08,"I think this is generally just ""the way it works"" right now. Basically, every query that you make for a given node is tracked by the store, and then when a mutation executes those queries are all refetched (based on intersection with the fat query).

This means that, even if you aren't _currently_ rendering the `comments @include(if:true)` fragment, it's still being tracked and therefore will be refetched.

This behaviour is certainly suboptimal, but is done to ensure consistency. If you were to click the checkbox again, Relay would show the correct, modified comments. If you _didn't_ update the comments as a result of that mutation, one of two things would happen:

1) Relay would show the wrong, un-mutated comments (oops)
2) Relay would need to refetch the comments then

I think in your case you'd prefer the second option, but there's no way to express that in Relay yet. I think some ways to _explicitly_ expire data might work (see #978), but it'd be difficult to do correctly.

...does that make sense? 
",NevilleS,2017-01-30 21:33:43
1047,2016-04-19 08:10:55,"Thanks for detailed answer. In my case marking nodes as untracked (explicit expiration functionality) is exactly what I need.
",saywhaat,2017-01-30 21:33:43
1047,2016-04-19 16:14:29,"Also note that we're in the process of adding a low-level mutations API based on static queries (no tracked/fat query magic by default) which you may be able to use in future to get at least part of what you want (ie. not fetching the `comments`). But as @NevilleS says, if you want consistency (and you probably do), we'll need something more.
",wincent,2017-01-30 21:33:43
1047,2017-01-30 21:33:43,"(Spring cleaning.) This one is pretty stale now, so closing it out. Just to close the loop a little, the low-level mutations API went in quite a while ago (see `RelayGraphQLMutation`) and if you look on the master branch you'll see we've been rolling out pieces of a new API and core, and will continue to do so in the coming weeks or months.

Thanks for bringing this up and contributing to the discussion.",wincent,2017-01-30 21:33:43
1046,2016-04-14 04:29:41,"Right now I almost finished rewrite own module, like `graffiti-mongoose`, which generates GraphQL types and schemas from the existing mongoose models. I didn't found any problems with querying in Relay, but found some lacks in Mutations. I suppose that same problems have clients of reindex.io (@freiksenet can you aprove this?)

1) Passing variables to query in `getFatQuery` method. GraphQL support such behaviour, but in Relay.mutation I didn't find such ability. 

Eg. user add new `note`, and this change some `summary` in the `article` with `$articleId`. 
Of course we can change payload for mutation and add article there. But in my case I want get it via `viewer`. May be tomorrow somebody want add another model for fetching after mutation on the client. So I try obtain some features for auto-generated schemas, and eventually write less code on the backend:

<S_CODE_TOKEN>

2) Problem with nesting in `getConfigs`. It will be cool if we can write fieldNames via dotNotation for nested nodes (see https://github.com/mariocasciaro/object-path or https://github.com/rhalff/dot-object). So for example above, I would like to write such config:

<S_CODE_TOKEN>

Also this should work with ADD_RANGE and others. 

**So this two things can not so dusty reduce changing code on the backends, when frontend wants more and more new data after mutations.**
",nodkz,2017-01-13 04:30:34
1046,2016-04-14 05:09:07,"Also forgot write about supporting of `assigning the result into a variable`.

If you investigate payloads on main page of [reindex.io](https://www.reindex.io/) via graphiql, you may see that all payloads contains `viewer`. Also it would be great if they will contain `node(ID)`.

So with assignment to variable, I can construct such queries:

<S_CODE_TOKEN>

In native graphQL mutations I have such ability, but Relay does not cover this.
",nodkz,2017-01-13 04:30:34
1046,2016-04-14 06:01:28,"That is indeed not possible in Relay. In Reindex we solve it by providing all objects that can have a connection with item changed in the payload. We do it automatically through introspection. I think you can solve it the same way in graffiti-mongoose.

Here is how the payload would look for the note:

<S_CODE_TOKEN>
",freiksenet,2017-01-13 04:30:34
1046,2016-04-14 06:06:16,"The above approach works if you only allow one object and one connection to be changed at once, so, eg, you can't add note to multiple articles or create multiple notes. I think it might work correctly also for multiple mutations if you return lists of changed items and maybe lists of their connections, not sure about that. For mutations that modify many-to-many connections, we just return both changed object.

<S_CODE_TOKEN>
",freiksenet,2017-01-13 04:30:34
1046,2016-04-14 06:20:17,"I saw how you add referenced models to payload, and for now it is the best hack for Relay.

But I think, without variables in payload we can not get full power of graphql, which teased me to get all needed data with one request.   
",nodkz,2017-01-13 04:30:34
1046,2016-04-14 07:00:41,"There is some talk on how to improve mutations here https://github.com/facebook/relay/issues/538, it might make fat query unnecessary or simpler.
",freiksenet,2017-01-13 04:30:34
1046,2016-05-21 03:37:53,"I'm agreed - without variables in `getFatQuery` it will look dirty:

<S_CODE_TOKEN>
",DenisIzmaylov,2017-01-13 04:30:34
1046,2016-06-02 01:26:59,"@DenisIzmaylov any idea on how to pass variable using your method like user which takes id argument.
",shahankit,2017-01-13 04:30:34
1046,2016-07-26 15:56:21,"You can set variables like the following using template variables. I found this to be working inside getFatQuery, but it did not work elsewhere. (weird).

<S_CODE_TOKEN>

What I want to know is how to have a wild card variables that matches any values, hopefully something like the following:

<S_CODE_TOKEN>
",joonhocho,2017-01-13 04:30:34
1046,2016-07-27 08:03:30,"@joonhocho Did you try using that template variable. I tried in my mutation's `getFatQuery` but it was not working.
",shahankit,2017-01-13 04:30:34
1046,2016-07-27 15:19:28,"@shahankit hmm.. I guess this working for me inside `getFatQuery` is maybe not a feature, but a bug. It works for me only inside `getFatQuery` in my mutations. I see it working for me even now.
",joonhocho,2017-01-13 04:30:34
1046,2016-07-27 22:02:09,"Okay it's also working for me now. Had an bug in passing them. Thanks for pointing this out.
",shahankit,2017-01-13 04:30:34
1046,2016-07-28 23:57:58,"Glad it helped.
",joonhocho,2017-01-13 04:30:34
1046,2016-08-18 18:36:51,"Hey @joonhocho can you expand a bit more on how you set the variables the fat query is using? You said this works for you:

<S_CODE_TOKEN>

But where do you set the value of `articleId`? I tried the following but I get an error:

<S_CODE_TOKEN>

... but I get this error:

<S_CODE_TOKEN>

I'm running on react-relay@0.9.2 so it might be a version thing, but wanted to ask to see if you had any insights on this or see anything wrong with my code sample.
",josercruz01,2017-01-13 04:30:34
1046,2016-08-19 16:57:03,"@josercruz01  What you are doing with `previousStageId` (setting a local variable) is what I did for my fatQueries, but as I mentioned before it doesn't seem to work everytime. I honestly don't know why. I also got the same error as yours when I used the interpolation trick in other places than `getFatQuery`. At this point, I feel like it should always not work, even in `getFatQuery`. 
",joonhocho,2017-01-13 04:30:34
1046,2016-08-19 17:01:34,"Oh I see. Yeah it is strange, thanks a lot for the info :)
",josercruz01,2017-01-13 04:30:34
1046,2016-10-14 13:38:03,"falling into the same problem. I'll probably have to hack like @DenisIzmaylov did..
",gre,2017-01-13 04:30:34
1046,2017-01-13 02:25:51,I am also getting the same issue...,nikolal,2017-01-13 04:30:34
1046,2017-01-13 04:30:34,"Closing this due new Mutation API which does not contain FatQuery and perfectly works with additional variables:
- [Docs about GraphQLMutation](https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html#content)

I highly recommend migrating to new mutation API. It allows writing mutation inside your React component (avoid creating Mutation files). And in many cases do not provide CONFIGS for updating data in the Relay store. No more fatigue for me with Relay Mutations. 🎉🎉🎉

Of course, you may make API better by writing your own wrapper above `Relay.GraphQLMutation`. Eg. https://gist.github.com/nodkz/03f28aaa1b66195b517ecf06e92487bf
So code in your React component may become like this (example with an additional variable in `delete` method):
<S_CODE_TOKEN> ",nodkz,2017-01-13 04:30:34
1046,2017-01-13 08:50:57,"@nodkz Thanks for that information 👍  In your mutations above you have `(input: $input)` in all of them, but only one of them defines `input` as in `variables` - was that a typo or does `$input` mean something different than a thing from `variables`?",benjie,2017-01-13 04:30:34
1046,2017-01-13 09:02:05,"@benjie nope this is not a typo. This is a short definition (added via my wrapper https://gist.github.com/nodkz/03f28aaa1b66195b517ecf06e92487bf#file-relaystore-js-L24-L32).
For Relay mutation `input` is a required arg. So for saving two lines of code (`input: {` and `}`) for every my mutation I just check if `input` not present in `variables` then wrap they with `input` and pass to Relay mutation.

So in `delete` method I'll need pass additional root argument (`first`), so in this case, I define `input` explicitly.

PS. Added a note to the example above about autowrapping of variables.",nodkz,2017-01-13 04:30:34
1046,2017-01-13 11:05:02,"@nodkz 
Thanks a lot for this example. ",nikolal,2017-01-13 04:30:34
1046,2017-03-14 14:56:43,"@nodkz Hey, thanks for a great example! I'm using this approach but still there're some cases where it's not clear how to configure mutation. I've created [stackoverflow question](http://stackoverflow.com/questions/42789001/relay-range-add-queryconfig-on-searchtype), would really appreciate help with it.",valerybugakov,2017-01-13 04:30:34
1046,2017-03-14 18:28:07,"@valerybugakov sorry I can not help you with `RANGE_ADD`. I do not use it at all, had some problems with it (do not remember what exactly). So I just reload all connection via `this.props.relay.forceFetch()`.",nodkz,2017-01-13 04:30:34
1046,2017-03-14 18:29:45,"@nodkz huh, kinda solution :)",valerybugakov,2017-01-13 04:30:34
1045,2016-04-13 14:03:03,"While working on mutations I find myself often having to place `debugger;` somewhere in relay and try to see what my tracked query is and and the resulting mutation fragment 

I wonder if it could be a good idea to provide some sort of diff between tracked and fat query in development ?

Just a thought :)
",xuorig,2016-12-20 17:51:05
1045,2016-04-13 14:21:37,"Great idea, @yuzhi was just talking about adding something like this.
",josephsavona,2016-12-20 17:51:05
1045,2016-04-13 14:27:32,"@xuorig  I am planning on adding a way to enable a mutation debugger that will print out debug info as Relay go through each mutation config for a mutation. The plan is to print out things like the tracked query, the fat query and the resulting intersected query for `FIELDS_CHANGED` config. It will also print out  things like what connections we are prepending and appending to for `RANGE_ADD`. The goal is to make it easier to figure out what Relay is doing with the input so it's easier to debug and update mutation configs. 
",yuzhi,2016-12-20 17:51:05
1045,2016-04-13 14:34:50,"That's really awesome :tada:, exactly what I would need :)

Let me know if you ever need some help with this!
",xuorig,2016-12-20 17:51:05
1045,2016-12-20 17:51:05,@yuzhi implemented this :-),josephsavona,2016-12-20 17:51:05
1044,2016-04-12 22:31:58,"I have an input object type to set filters on a connection. I can set a string for `size`, `industry`, and `type`. They either have a string value set or they're not set. In my UI when I trigger setting one of these filters, the first time I do this the query to my GraphQL is triggered and the UI updates with the response. But the second time I change the filters, the correct query is sent and received but the UI isn't updated. But then the third time I change the filters, the second query's results are now shown. This pattern of being one query behind continues as long as I bother to keep clicking.

If I console.log `this.props.relay.variables.filters` in my render function, the filters object there is always up-to-date.

I first saw this behavior on Relay 0.6 and updated just now to 0.8 in hopes it was fixed but am still seeing the problem.
",KyleAMathews,
1044,2016-04-12 22:37:35,"Ok, after a bit more debugging the problem seems to be Relay isn't looking at input objects variables closely enough to see if the query changed. I added a `counter` variable that I'm just incrementing with every `setVariable` and now the UI is updating correctly.
",KyleAMathews,
1044,2016-04-12 23:00:40,"Sounds like you have a work around (yay!) but also sounds like there is a real bug here. Would you be able to come up with a failing test case?
",wincent,
1044,2016-04-12 23:54:23,"I don't have a ton of extra time the next couple of weeks but if you could point me to where checking for query changes happens I could take a stab at it.
",KyleAMathews,
1044,2016-04-13 02:50:40,"@KyleAMathews The logic for checking Relay variables is at https://github.com/facebook/relay/blob/master/src/container/RelayContainerComparators.js#L116-L121
",josephsavona,
1043,2016-04-12 00:25:14,,steveluscher,2016-04-12 19:10:30
1043,2016-04-12 00:59:55,"@facebook-github-bot shipit
",steveluscher,2016-04-12 19:10:30
1043,2016-04-12 01:12:34,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1070789002994398/int_phab) to review.
",facebook-github-bot,2016-04-12 19:10:30
1042,2016-04-11 22:34:00,,steveluscher,2016-04-12 00:40:24
1042,2016-04-11 22:34:08,"@facebook-github-bot import
",steveluscher,2016-04-12 00:40:24
1042,2016-04-11 22:43:42,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/249581432059219/int_phab) to review.
",facebook-github-bot,2016-04-12 00:40:24
1041,2016-04-11 22:17:33,"Changing ports `adb reverse` command to match up with the port that the app actually uses: 8080 instead of 8081.
",ringzhz,2016-04-14 16:50:23
1041,2016-04-14 15:46:17,"@facebook-github-bot shipit
",josephsavona,2016-04-14 16:50:23
1041,2016-04-14 16:13:31,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/193498904369726/int_phab) to review.
",facebook-github-bot,2016-04-14 16:50:23
1040,2016-04-11 08:06:41,"For the following mutation, `tag.id` and `tag.name` is set correctly, but `tag.isTagged` is missing from `props.tag`.
I think it has to do with that the field requires an argument.
I have tried to add or remove other fields and every other fields work as expected, except for `isTagged`. 

<S_CODE_TOKEN>
",joonhocho,2016-12-22 17:02:49
1040,2016-12-22 17:02:49,"Thanks for reporting this. To address problems such as this we've created a new, static mutation API: [`Relay.GraphQLMutation`](https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html) which we recommend. I'm going to close this issue, but please let us know if you have issues with the new mutation API and we'll be happy to work with you to address them!",josephsavona,2016-12-22 17:02:49
1039,2016-04-09 14:47:18,"I want to subscribe to updates of meeting notes, but I don't want to watch the whole `relay` repository.
",vslinko,2016-04-26 14:00:37
1039,2016-04-09 19:45:32,"We chose to add notes here so that existing subscribers would see them. If enough people share this concern we'd be happy to reconsider. In the meantime, we also plan to announce new meeting notes on twitter with the #relayjs tag.
",josephsavona,2016-04-26 14:00:37
1039,2016-04-26 14:00:37,"Going to close this for now. @vslinko, let us know if watching for updates on twitter doesn't work for you.

Generally, [one](https://twitter.com/wincent) [of](https://twitter.com/en_JS) [us](https://twitter.com/steveluscher) will announce the publication of new notes, and the others will retweet them.

If the signal-to-noise isn't high enough there, we can consider making a Relay-specific Twitter handle that would publish only Relay-specific stuff (as opposed to Relay-stuff plus tweets-about-what-we-just-ate-for-lunch).
",wincent,2016-04-26 14:00:37
1039,2016-04-30 18:28:57,"It would be awesome to have a Relay-specific twitter account.
",vslinko,2016-04-26 14:00:37
1038,2016-04-08 20:27:47,,wincent,2016-04-08 21:30:29
1037,2016-04-08 19:14:25,"I couldn't find a place where we depend on `graphql` directly from the main repo. The only requires I saw were inside the plugin.
",kassens,2016-04-08 20:38:10
1037,2016-04-08 19:14:30,"@facebook-github-bot import
",kassens,2016-04-08 20:38:10
1037,2016-04-08 19:37:11,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/256156578064238/int_phab) to review.
",facebook-github-bot,2016-04-08 20:38:10
1037,2016-04-08 20:38:10,"According to travis, we need this. ¯\_(ツ)_/¯ 
",kassens,2016-04-08 20:38:10
1036,2016-04-08 19:00:26,"facebook/relay#1034
",justinanastos,2016-04-08 21:25:25
1036,2016-04-08 19:04:34,"Thanks!

@facebook-github-bot shipit
",kassens,2016-04-08 21:25:25
1036,2016-04-08 19:05:50,"@kassens 

> Thanks!

You're welcome!
",justinanastos,2016-04-08 21:25:25
1036,2016-04-08 19:10:11,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-04-08 21:25:25
1036,2016-04-08 19:11:11,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1203272353023929/int_phab) to review.
",facebook-github-bot,2016-04-08 21:25:25
1036,2016-04-08 19:36:43,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-04-08 21:25:25
1035,2016-04-08 18:57:11,"Not sure it is the right place to ask :)

Thanks for the hard work.
It seems there are some major changes after the latest release.
I'm about to start a new project and I want to use relay.
So I wish I could know more latest information about it.

No pressure.
",zjlovezj,2016-04-08 20:10:06
1035,2016-04-08 20:10:06,"@zjlovezj: Thanks for asking!

You can expect a release soon. @steveluscher was talking about preparing one as early as today, but as you know, sometimes things come up so it could end up sliding to next week, so we'll see exactly when it falls.

As for the meeting notes, I believe @josephsavona was going to publish them, but he's been busy with other work so I think I'll just go ahead and do it now.
",wincent,2016-04-08 20:10:06
1035,2016-04-08 22:52:04,"New notes added via 57fb2b1567f.
",wincent,2016-04-08 20:10:06
1035,2016-04-09 04:03:03,"Thank you, I really appreciate it.
",zjlovezj,2016-04-08 20:10:06
1035,2016-04-09 19:46:56,"Thanks @wincent!
",josephsavona,2016-04-08 20:10:06
1034,2016-04-08 18:56:32,"Making the peerDependency `""^15.0.0 || ^0.14.0""` would allow reverse compatibility.
",justinanastos,2016-04-11 21:16:44
1034,2016-04-11 21:16:44,"Fixed by 4f3857f6c44fd750de10e5f84aa3460430fdfe7e.
",kassens,2016-04-11 21:16:44
1033,2016-04-08 18:49:49,"Hello,

After a lot of work, I finally got the TodoMVC example to work on my Ubuntu 15.10. Well, at least, kind of. What's happening now is that I can run the project on my phone (`react-native run-android`), it launches but only displays a white screen with the message ""Network request failed"" on the bottom. I also ran `npm start` to start the GraphQL server and it says it is running on ""http://localhost:8080"" before starting the app on my phone.

I'm running the project on Android 6.0.
I can run a normal React Native project (react-native init project). Any help will be appreciated.

Thanks,

Pedro.

![screenshot_20160408-154503](https://cloud.githubusercontent.com/assets/645621/14394214/8311a576-fda1-11e5-89b5-bc61faea7bc2.png)
",plraphael,2016-05-27 06:42:10
1033,2016-04-09 15:33:04,"I can confirm. Facing the same issue.

Fix: You need to enter your computer ip instead of localhost in app.js as mentioned here 
https://github.com/facebook/relay/tree/master/examples/TodoMVC#if-all-else-fails

Relay.injectNetworkLayer(
  new DefaultNetworkLayer('http://localhost:8080')
);
",nikhildaga,2016-05-27 06:42:10
1033,2016-04-12 20:54:04,"You should use `adb reverse` on Android (https://facebook.github.io/react-native/docs/running-on-device-android.html#content)

or FBPortForwarding on iOS (https://github.com/facebook/react-native/tree/master/Tools/FBPortForwarding)

This command will redirect the localhost of the device in that port to the localhost port of your computer
",sibelius,2016-05-27 06:42:10
1033,2016-04-20 17:53:43,"`adb reverse tcp:8080 tcp:8080` does the trick for me.
",ringzhz,2016-05-27 06:42:10
1033,2016-04-20 20:56:24,"@plraphael do the suggestions to use `adb reverse` help? This looks like a configuration issue.
",josephsavona,2016-05-27 06:42:10
1033,2016-05-27 06:42:10,"Android network connectivity is covered [in the README](https://github.com/facebook/relay/blob/master/examples/TodoMVC/README.md#android).
",steveluscher,2016-05-27 06:42:10
1033,2016-07-15 10:09:18,"This is happening for me on iOS (react-native is `0.29.0`).
I can't really get anymore info on this from the console log.
I've tried `localhost`, `127.0.0.1`, as well as my IP.
",Naoto-Ida,2016-05-27 06:42:10
1033,2016-07-15 10:44:28,"Ok, did some console logging in the `fetchWithRetries.js` inside of Relay.
The `init` variable being passed into `fetch` is as below:

<S_CODE_TOKEN>

Also, response is returning a 400, which is from [express-graphql](https://github.com/graphql/express-graphql#http-usage).

I'm not that familiar with Relay, so help would be much appreciated.
",Naoto-Ida,2016-05-27 06:42:10
1033,2016-08-30 11:36:36,"@Naoto-Ida  did you manage to find the reason for your error? I am facing the same issue.
",Jaikant,2016-05-27 06:42:10
1033,2016-08-30 11:40:03,"@Jaikant check if u can access ur graphql server from the browser of your device or emulator

if this is not possible, you should try to use an IP or use `adb reverse`
",sibelius,2016-05-27 06:42:10
1033,2016-08-30 11:53:29,"@sibelius I am facing this issue intermittently - it's completely random and when I hit the issue the graphql server is not reachable from my device. Something weird is going on in the network (Surprising as it is the private network in my home). Is there a way to catch this error on the react native side so I can display the flaky network error, rather than a blank screen - as this could happen in production too.
",Jaikant,2016-05-27 06:42:10
1033,2016-08-30 12:14:29,"you could try to use RelayNetworkDebug to check Relay queries and also use NetInfo (https://facebook.github.io/react-native/docs/netinfo.html) to check if there is network available or not
",sibelius,2016-05-27 06:42:10
1033,2016-08-31 04:23:22,"@sibelius thx! NetInfo is cool. I think I am tending towards using the render of Relay.Renderer it is kind of more abstracted.
",Jaikant,2016-05-27 06:42:10
1032,2016-04-08 16:56:32,"00de34d32d51ba9e4d17e45280ad6d7e2734c6ed changed the error message slightly.
This update the test fixtures accordincly.

Also adds `babel-cli` since the `update-fixtures` script depends on
`babel-node`.
",kassens,2016-04-08 18:45:35
1032,2016-04-08 16:56:39,"@facebook-github-bot import
",kassens,2016-04-08 18:45:35
1032,2016-04-08 17:08:47,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1185290171511114/int_phab) to review.
",facebook-github-bot,2016-04-08 18:45:35
1031,2016-04-08 08:31:58,"I defined a route to fetch all nodes of a graph model. The `nodes` field has been specified manually in a schema. However the field is already reserved by `GraphQL` to do nodes/edges compositions. I created a sample route as follows:

<S_CODE_TOKEN>

The following error is produced on runtime:

<S_CODE_TOKEN>

It is very confusing to a user to read this error because it does not indicate that a reserved keyword has been used. (in this case: nodes).

No error is thrown when I change it to (and changing the respective schema as well):

<S_CODE_TOKEN>
",bitbrain,2017-01-30 21:46:38
1031,2017-01-30 21:46:38,"(Spring cleaning.) This issue is nearly a year old now and is likely stale — it's possible that code changes have occurred which modify the error message — so I am going to close it. But thank you for the report. If you think this is still an issue with current Relay, please consider submitting a PR to improve the error message; we are always happy to see contributions that improve the developer experience of people using the framework.",wincent,2017-01-30 21:46:38
1030,2016-04-08 01:25:11,"The RelayEnvironment documentation states the following:

<S_CODE_TOKEN>

At the moment, the network layer and the task scheduler can be configured with `injectNetworkLayer` and `injectTaskScheduler`. Similarly the cache manager should have a `injectCacheManager` method.
",tlvenn,2016-06-23 15:31:59
1030,2016-06-22 18:33:13,"I also can't find any clear documentation on the cache manager and how to implement it properly. Are there such resources?
",cdroulers,2016-06-23 15:31:59
1030,2016-06-22 21:23:21,"We're using a cache manager internally in our React Native apps, but the cache is external to Relay itself and very specific to our native FB product infrastructure, so we don't have much we can say about that. There is some evidence in Relay of the hooks that we've built in to enable that integration (and the reference to `injectCacheManager` is one of those), but given that we haven't provided (and probably can't meaningfully provide) an example, it's not something that we've emphasized in the docs.

In fact, the mention of the ""configurable cache manager"" is probably unintentional in the `RelayEnvironment` docs, because as @tlvenn points out, no `injectCacheManager` is declared in the `RelayEnvironment` class. (But you can see one on the `RelayStoreData` class, which is an `@internal` implementation detail.)

If you look in `RelayTypes`, you can see what a `CacheManager` would need to implement:

<S_CODE_TOKEN>

It has fire-and-forget methods for writing to the cache, and async methods for reading from it. I'd consider all of this to be subject to change, so I am reluctant to expose any of it on `RelayEnvironment` itself. If anything, we should remove that reference from the doc comment so that it doesn't cause more confusion.
",wincent,2016-06-23 15:31:59
1030,2016-06-22 21:55:33,"So there are no plans to have caching in relay? I've already implemented a
basic cache manager + writer with localstorage, but I haven't been able to
cache a connection. I'm thinking I'm doing something wrong in my writer but
have no idea what. Is there a better place to look? Is there a future plan
for the lind of scenario requiring a cache that persists between page loads
or even sessions? I'm researching offline capabilities and the cache
manager seemed like my best bet.
",cdroulers,2016-06-23 15:31:59
1030,2016-06-22 22:15:53,"Well, we _do_ have it, but not _inside_ Relay. The way we're trying to go moving forward is to make a small, modular, well-defined core upon which it is easy to build other abstractions (or compose inside existing abstractions). Offline caching is a good example of the kind of thing that we don't want in the core but we do want to be possible in ""user space"". Your use-case (ha, almost wrote use-cache) is very similar to the ones for which we use the disk cache (not strictly offline mode, but fulfilling queries with (potentially stale) data while we wait for fresh data to come back from the network.

I am not sure what the limitations with respect to caching connections are. At a high level the API just deals with records, fields and root calls. @yuzhi knows the most about this so perhaps she can chime in on how this interoperates (or doesn't) with connections.
",wincent,2016-06-23 15:31:59
1030,2016-06-22 23:52:59,"As @wincent said, our plan here is to make it easier to build things like offline caching in user space, and I agree that we'd prefer not to expose the `injectCacheManager` API publicly.

If you're trying to implement it anyway though - for connections you'll notice that the `__range__` property is an instance of a `GraphQLRange`. To serialize this you can call `toJSON` on the range instance. When you load it back from disk, you may have to call `new GraphQLRange(cachedData.__range__)` - I don't remember offhand whether we do that within the cache reader or if the cache implementation has to do that.
",josephsavona,2016-06-23 15:31:59
1030,2016-06-22 23:58:17,"To chime in on caching the connection if you insist on implementing it externally. As Joe already mentioned, connection metadata is currently stored on a `GraphQLRange` on the `__range__` key (subject to change). You can `toJSON` it to serialize it. To rehydrate it, just do `GraphQLRange.fromJSON(JSON.parse(blob))`.
",yuzhi,2016-06-23 15:31:59
1030,2016-06-23 00:41:13,"I'll look at `__range__` key for now. I'm mostly in the prototyping phase, making sure all the pieces needed to use Relay are there. I'm quite interested in the disk cache and whatever else can be created in user-space. Is there a specific project for that or is it still in the works?
",cdroulers,2016-06-23 15:31:59
1030,2016-06-23 01:33:15,">  Is there a specific project for that or is it still in the works?

There is no open source project for it. It is something we currently use in our React Native apps, like I said above, and it is specific to our native infra which is not part of Relay (or even React Native).
",wincent,2016-06-23 15:31:59
1030,2016-06-23 15:39:46,"This specific issue is closed now, but we'll keep the desire to have offline cache functionality on our radar, specifically in the context of refactoring Relay into a smaller core (https://github.com/facebook/relay/issues/559) with this kind of functionality possible to build in ""user space"".
",wincent,2016-06-23 15:31:59
1029,2016-04-07 21:48:26,"This should be a behavioral no-op, but I'm preparing for the ability to mark mutation config fields as deprecated. I tested this manually by temporarily marking one of the existing fields as deprecated (`s/REQUIRED/DEPRECATED/`) and then using an assertion like this:

<S_CODE_TOKEN>

Once we have a mutation config that actually has a deprecated attribute then I can commit a test, and it will look pretty much like that.

Making the deprecation message customizable would be a trivial extension of this (for example, if we rename a key, which is actually what led me to start looking at this, we can point to the new name for the key in the deprecation message).
",wincent,2016-04-08 18:00:26
1028,2016-04-07 08:24:17,"I am currently using relay together with react-native.
I have found that whenever I make a change to GraphQL schema, there is a hidden cache somewhere that needs to be manually invalidated for the Relay.QL defined for Relay containers.

I have tried these steps:
- rm -rf ios/build
- ""Reset contents and settings"" on iOS Simulator
- Quit all react-native packager processes
- rm -rf $TMPDIR/react-*

These are not enough and still causes invalid query error.
I would have to make some changes to Relay.QL fragments while running react-native packager to invalidate the hidden caches.

I am not sure if this is relay or react-native problem.
",joonhocho,2016-04-07 21:01:00
1028,2016-04-07 21:01:00,"I believe this is react-native issue. Closing the issue until proven otherwise.
",joonhocho,2016-04-07 21:01:00
1028,2016-06-28 12:00:53,"Just commenting here, if someone has the same issue

`react-native start --reset-cache` solves the issue
",sibelius,2016-04-07 21:01:00
1028,2016-07-04 21:48:08,"@joonhocho how did u solve ur problem?
",sibelius,2016-04-07 21:01:00
1028,2016-07-05 00:10:38,"@sibelius Yes, your answer worked for me!
",joonhocho,2016-04-07 21:01:00
1028,2016-11-22 06:49:09,@sibelius You're awesome!,Naoto-Ida,2016-04-07 21:01:00
1027,2016-04-07 06:20:09,"https://facebook.github.io/relay/docs/graphql-object-identification.html#content
query for 

<S_CODE_TOKEN>

should now be 

<S_CODE_TOKEN>

Same for empire further down.
",pennyandsean,2017-01-30 21:01:00
1027,2016-12-14 14:21:12,@pennyandsean could u send a PR to improve the docs?,sibelius,2017-01-30 21:01:00
1027,2017-01-30 21:01:00,"Thanks for bringing this up, @pennyandsean.

Note that [the documentation here](https://github.com/facebook/relay/tree/571dad28915ff475ee7728eb136adc42c6f3febd/docs) doesn't necessarily need to keep in sync with [the Star Wars schema defined here](https://github.com/graphql/swapi-graphql/tree/484c65c2c0a858e8e7e6bd69dd37917caf355248/src/schema), because the latter is a separate project and the important thing for the Relay docs is that they remain internally consistent.

They do seem to be internally consistent at this point. See [the schema definition](https://github.com/facebook/relay/blob/571dad28915ff475ee7728eb136adc42c6f3febd/docs/GraphQL-RelaySpecification.md), and note that there are multiple pages that assume it (like [this one](https://github.com/facebook/relay/blob/571dad28915ff475ee7728eb136adc42c6f3febd/docs/GraphQL-Connections.md)).

So, I'm going to close this for now. If you feel strongly that we should update the docs to match the schema in [the swapi-graphql project](https://github.com/graphql/swapi-graphql), please feel free to submit a PR, but note that we'd want to make sure that *all* the references that depend on the shape of the schema get updated throughout the documentation, so it might be a pretty big change for a not necessarily very clear gain. I'll leave that judgment up to you though. In the meantime, thanks for filing the issue!",wincent,2017-01-30 21:01:00
1027,2017-01-30 21:01:39,"And note, if I am wrong about the docs being internally consistent, that's a documentation bug, so please let us know.",wincent,2017-01-30 21:01:00
1026,2016-04-07 03:15:47,"This resolves #1025 
",tlvenn,2016-04-11 18:10:32
1026,2016-04-07 03:24:30,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-04-11 18:10:32
1026,2016-04-07 03:41:37,"CLA signed.
",tlvenn,2016-04-11 18:10:32
1026,2016-04-07 03:45:56,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-04-11 18:10:32
1026,2016-04-07 16:26:48,"Thanks for submitting this. We're on board with adding this to the public API, but can you also export these other modules as well? `RelayEnvironment` can't be used w/o one of the new ""root"" components:
- `Relay.Environment` (`RelayEnvironment`)
- `Relay.Renderer` (`RelayRenderer`)
- `Relay.ReadyStateRenderer` (`RelayReadyStateRenderer`)
",josephsavona,2016-04-11 18:10:32
1026,2016-04-08 01:46:39,"Done
",tlvenn,2016-04-11 18:10:32
1026,2016-04-08 16:44:35,"@facebook-github-bot import
",josephsavona,2016-04-11 18:10:32
1026,2016-04-08 16:56:04,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1346927278658123/int_phab) to review.
",facebook-github-bot,2016-04-11 18:10:32
1025,2016-04-07 02:54:12,"Now that #558 has landed, and as pointed out in #898, it would be very useful to let people create new environments on their own such as:

<S_CODE_TOKEN>
",tlvenn,2016-04-11 18:10:32
1025,2016-04-07 03:01:07,"@josephsavona suggested in #558 that this will happen as part of #559 however this meta task seems not so trivial and will likely take some time so why wait when it seems like we can leverage all the hard work people put into making Relay contextual already ?
",tlvenn,2016-04-11 18:10:32
1025,2016-04-07 16:25:45,"Thanks for starting the discussion about this. `RelayEnvironment` is one of a few new APIs that we'd like to export as public API:
- `Relay.Environment` (`RelayEnvironment`)
- `Relay.Renderer` (`RelayRenderer`)
- `Relay.ReadyStateRenderer` (`RelayReadyStateRenderer`)

In particular, using `RelayEnvironment` also requires using one of the latter new components, so any PR should export these all together.

Ideally, we'd also document these APIs, mark `Relay.Store` and `Relay.RootContainer` as deprecated, and update the examples to reference the new APIs instead. I think it's reasonable to start by just exporting the new APIs to unblock anyone who needs them, and then do the deprecation/documentation/examples in a follow-up step. 

I'll comment again on the PR just to be clear.
",josephsavona,2016-04-11 18:10:32
1025,2016-04-08 00:49:08,"My use case for Relay.Environment is to be able to set a new environment (e.g. when logging out and the back in as another user).

Is it expected that eventually we'll be able to set `Relay.Environment = new Environment()`?

I'm trying to make such an amend at the moment. It requires that anywhere that uses RelayStore to be updated to use RelayPublic.Environment. I've ran into a problem in that RelayInternals is required by RelayPublic and so can't use RelayPublic.Environment as it's not been set yet.

It'd be great to get your thoughts on it @josephsavona 
",lprhodes,2016-04-11 18:10:32
1025,2016-04-08 01:29:12,"@lprhodes The intention is that an application would maintain a reference to a single instance of `Relay.Environment`, and pass that `environment` to each root container (`Relay.Renderer`, which replaces RelayRootContainer). 

To ""reset"" on user logout, you would simply create a new environment instance (`environment = new Relay.Environment()`).

Once @tlvenn's PR lands (with the changes described above), this will be something like:

<S_CODE_TOKEN>
",josephsavona,2016-04-11 18:10:32
1025,2016-04-08 01:29:48,"Good to hear @josephsavona !

I initially focused solely on the `RelayEnvironment` because that is the only one which is currently totally out of reach because it is not exported to the `lib` folder. For reference, the other 2 can be imported as such:

<S_CODE_TOKEN>

I will add those 2 to the API.
",tlvenn,2016-04-11 18:10:32
1025,2016-04-08 01:42:38,"@lprhodes to handle the login/logout scenario and keep the convenience of the RelayStore singleton, you can roll your own version which is a wrapper around `RelayEnvironment`.

https://gist.github.com/tlvenn/9c468a5b50e0497bd319bfa0ab8b6c7f

@josephsavona Is it safe to actually replace the current environment without any check ? Such as:

<S_CODE_TOKEN>
",tlvenn,2016-04-11 18:10:32
1025,2016-04-08 03:22:24,"@tlvenn It's obviously safe to _create_ a new `RelayEnvironment` instance at any time, since it just creates a new object that is independent of any previous environments that may already exist. Whether you want to add the additional checks is up to you (though certainly safer to check).
",josephsavona,2016-04-11 18:10:32
1025,2016-04-08 03:44:38,"I should have chosen my words more carefully, I meant `good practice` rather than `safe`. And I guess it really depends on how those environments are ultimately manipulated / used.

For example, in the gist I linked, since the environment is not actually passed down directly but shielded in a singleton, any present renderer would instantly use the new env instead of referencing the old one which may or may not present some issues.
",tlvenn,2016-04-11 18:10:32
1025,2017-03-13 01:46:47,"Would anyone know if it's sufficient enough to inject the NEW network layer directly into Relay?
<S_CODE_TOKEN>

If I don't inject it directly into relay I'll get all sorts of mutation errors. The way I was doing it before was inserting `currentEnvironment` INTO relay the `environment={}` prop. ",jamesone,2016-04-11 18:10:32
1025,2017-03-13 05:05:34,"@jamesone `Relay.injectNetworkLayer` is just a helper that [injects the layer on the default environment instance](https://github.com/facebook/relay/blob/master/src/RelayPublic.js#L59). The correct approach would be to inject the network layer on the new environment directly:

<S_CODE_TOKEN>",josephsavona,2016-04-11 18:10:32
1024,2016-04-06 00:09:31,,kassens,2016-04-06 22:00:26
1024,2016-04-06 00:09:34,"@facebook-github-bot import
",kassens,2016-04-06 22:00:26
1024,2016-04-06 18:37:14,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/216511345404390/int_phab) to review.
",facebook-github-bot,2016-04-06 22:00:26
1023,2016-04-05 23:42:13,"using relay@0.7.3

<S_CODE_TOKEN>

Expected as per docs:
`{stale: true, ready: true, done: false}`
`{stale: false, ready: true, done: true}`

Current:
`{stale: false, ready: false, done: false}`
`{stale: true, ready: true, done: false}`
`{stale: false, ready: true, done: true}`

This causes page flicker which shows loader for a split second
",mailaneel,2017-01-30 21:31:04
1023,2016-04-05 23:55:40,"Thanks for asking about this. 

cc @yungsters - you have the most context on readyState callbacks. I feel like this is intentional but can't immediately remember why.
",josephsavona,2017-01-30 21:31:04
1023,2016-04-06 01:11:28,"Hmmm... this sounds like a plain old bug. If we have data on the client that is immediately available for rendering, we should not be firing `{stale: false, ready: false, done: false}`. The bug is probably somewhere in how `RelayContainer` is using `RelayReadyState`.
",yungsters,2017-01-30 21:31:04
1023,2016-04-13 14:59:01,"I thought we fire the first readyStateCallback with `{stale: false, ready: false, done: false}` to signify that we are fetching data from the server for this `forceFetch`. This code is in `GraphQLQueryRunner`, where we check fired it when we have items `remainingRequiredFetchMap`
",yuzhi,2017-01-30 21:31:04
1023,2016-04-30 10:01:50,"Doesn't `{stale: true}` imply relay is going to refresh data from server? calling with stale:false and ready: false is causing extra renders in component
",mailaneel,2017-01-30 21:31:04
1023,2017-01-30 21:31:04,"This one is getting pretty stale at this point (almost a year old) so I'm closing it due to inactivity. As far as I can tell, this code underwent a significant overhaul in d56cc5f55d5efb9f99f5 and has been touched a few times since then. I suspect that the issue no longer applies. Please feel free to open a new issue if you think there's still a bug in there. Thanks for the report!",wincent,2017-01-30 21:31:04
1022,2016-04-05 22:33:02,"In code review for D3136035 @yungsters suggested hoisting a guard up to the callsites. Turns out the callsites already have guards (either due to prior `invariant` calls or an explicit `if`), so the guard isn't needed at all (in fact, was in there as a remnant of an intermediate state I had while preparing that diff).

So, let's just remove the guard.
",wincent,2016-04-08 18:45:35
1021,2016-04-05 21:18:43,"Unless your pages are hosted as a static site, your server can include initial data with the request for the HTML, determined by the URL. It would be cool if there was a way to prepopulate the cache. For example, when I go to /user/123, the client could send a json representation of that graphql node down to the client. That would save a roundtrip. But depending on the data model, even more roundtrips could be saved by something like this.
",bigblind,2016-04-05 22:52:56
1021,2016-04-05 21:23:27,"Check out this issue https://github.com/facebook/relay/issues/136
",KyleAMathews,2016-04-05 22:52:56
1021,2016-04-05 22:52:56,"Yup, check out #136 as well as [isomorphic-relay](https://github.com/denvned/isomorphic-relay/). That should cover this use-case - please feel free to comment here if you think something's missing and we can reopen.
",josephsavona,2016-04-05 22:52:56
1020,2016-04-05 20:16:03,"Given a component whose fragment contains a list such as..

<S_CODE_TOKEN>

it would be nice to have a subcomponent to display that list however I don't think you can do..

<S_CODE_TOKEN>

can you?  

If you can what is myListDisplayer's fragment's type (????) ?

<S_CODE_TOKEN>

if you can't do you think it would be a good idea if you could?
",gilesbradshaw,2016-04-06 15:34:41
1020,2016-04-05 22:56:20,"Thanks for asking. Relay supports fragments on the `edges` field - the type would be whatever you have in your schema. For example, you might have a structure like:

<S_CODE_TOKEN>

Where the inner fragment would be defined as:

<S_CODE_TOKEN>

Note the use of `@relay(plural: true)` to tell Relay that the edges prop will receive an array of items, not just one.
",josephsavona,2016-04-06 15:34:41
1020,2016-04-06 07:44:07,"Brilliant!  Thank you very much :)
",gilesbradshaw,2016-04-06 15:34:41
1020,2016-04-06 15:34:41,"Happy to help!
",josephsavona,2016-04-06 15:34:41
1019,2016-04-05 16:30:50,"I have set up a basic Relay mutation to add a user, but once executed it returns this error/warning:

> Warning: writeRelayUpdatePayload(): Expected response payload to
> include the newly created edge 'changedUserEdge' and its 'node' field.
> Did you forget to update the 'RANGE_ADD' mutation config?

I noticed Relay leaves out the `changedUserEdge` node on the mutation payload and I have no idea why. I looked at a few Relay examples, but the mutation is constructed exactly the same way.

The mutation, the React component I call it from and the generated query can be found [in this gist](https://gist.github.com/DanielHuisman/198edb1e81bbc3ced596f0224e003022).

I used [graffiti-mongoose](https://github.com/RisingStack/graffiti-mongoose) to generate my GraphQL schema.
",DanielHuisman,2017-01-10 00:47:17
1019,2016-04-05 20:07:09,"@DanielHuisman Are you using the latest release or master? We've recently added much more informative error messaging and feedback on range add mutations - I'd suggest giving master a try and see if that helps.
",josephsavona,2017-01-10 00:47:17
1018,2016-04-04 23:29:20,"Hi there,

Is this still in the Roadmap[1]?

<<
Support client/local state
API for resolving fields locally: #431.
Support querying & compiling client-only fields by extending the server schema, and a means for writing data for these fields into the cache: #114.

1. https://github.com/facebook/relay/wiki/Roadmap
",idibidiart,2016-04-05 06:40:42
1018,2016-04-05 00:35:15,"Yes, there is still a roadmap, but it's something we'll only update periodically.

More frequently updated are our meeting notes which you can find at: https://github.com/facebook/relay/wiki/Meeting-notes

We're going to move those off the wiki, though, and into the repo itself via PRs, so that people can get notifications when we publish new notes. I believe @josephsavona has a couple of week's worth of meeting notes that he said he was going to publish, but if he doesn't get to it shortly I'll do it.
",wincent,2016-04-05 06:40:42
1018,2016-04-05 03:32:01,"Hi @wincent 

Thanks for the update and looking forward to latest meeting notes.

We're making an attempt at a major adoption of GraphQL/Relay across our products, web and mobile, and I'm trying to find out if the ideas listed below regarding support of local/client state are still part of the plan? Are they still justified in your view? @wincent @josephsavona

API for resolving fields locally: #431.
Support querying & compiling client-only fields by extending the server schema, and a means for writing data for these fields into the cache: #114.

?
",idibidiart,2016-04-05 06:40:42
1018,2016-04-05 06:38:48,"@idibidiart We think that those are valid use-cases that Relay may be able to support, hence our creating issues to allow discussion and exploration of the ideas. However, we aren't actively working on those issues directly and don't have a timetable for when they may be completed. 

The [most recent meeting notes](https://github.com/facebook/relay/wiki/2016-03-14-Relay-Team-Sync-Notes#h1-plans) have more information about the core team's current area of focus. In particular, we're focusing on performance and on providing low-level APIs (described in #559) that may allow features such as client-only fields to be implemented in user-space (see the examples in the issue description).
",josephsavona,2016-04-05 06:40:42
1018,2016-04-05 06:40:42,"I'm going to close this since this issue is non-actionable - please feel free to ask follow-up questions here.
",josephsavona,2016-04-05 06:40:42
1018,2016-04-08 22:52:08,"New notes added via 57fb2b1567f.
",wincent,2016-04-05 06:40:42
1017,2016-04-04 21:26:19,"In f2aa5b0e78c2f5 (D3095672) we tightened up mutation config validation a little too much, breaking product code that didn't explicitly include the connection field in the fat query definition.

In this commit we make it a little less aggressive:
- If the connection field is explicit in the fat query, we validate it.
- If it is not explicit but we can get it by intersecting with a tracked query, we validate that.
- Otherwise we let things slide and give up.

Note that in doing this I addressed the TODO comment and moved the code that deals with fields on the fat parent outside the conditional, so that it runs even when we don't have any tracked queries. That TODO predates even the open source release of Relay, so if somebody has context on if this is a terrible idea, please let me know.
",wincent,2016-04-05 20:20:22
1017,2016-04-04 21:26:31,"@facebook-github-bot import
",wincent,2016-04-05 20:20:22
1017,2016-04-04 22:15:03,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1526261181014626/int_phab) to review.
",facebook-github-bot,2016-04-05 20:20:22
1016,2016-04-04 17:18:20,"Fixes a bug where the printer creates only a single variable for any given value, even if that value is used at places in the query that accept values of different types. The printer currently de-dupes variables only by value; this change causes it to only de-duplicate values of the same (non-null) type.

Fixes #1011.
",josephsavona,2016-04-04 20:55:28
1016,2016-04-04 17:19:34,"@facebook-github-bot import
",josephsavona,2016-04-04 20:55:28
1016,2016-04-04 17:25:41,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/498570027001277/int_phab) to review.
",facebook-github-bot,2016-04-04 20:55:28
1015,2016-04-01 16:23:33,"It seems the presence of a `.babelrc` file in the react-native project is messing up the packager.
I'm not sure why but the bundling process was failing when hitting flow definitions.

Since the `.babelrc` configuration is needed when using relay with RN it can't be deleted.

I added an identical configuration for `production` builds and it seems to have solved the issue.

Update .babelrc to cover production builds.
",BarakChamo,2016-04-06 21:55:32
1015,2016-04-01 16:26:52,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-04-06 21:55:32
1015,2016-04-06 03:28:46,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-04-06 21:55:32
1015,2016-04-06 05:26:26,"Thanks, just pulled this in for internal review, but looks good to me.
",kassens,2016-04-06 21:55:32
1014,2016-04-01 01:32:15,"Fixes https://github.com/facebook/relay/issues/690
I couldn't really find more es6 stuff other than what it checks (except for `Map` which got transpiled to `_Map` for some reason).
Not sure about tests.. Do we need a test for this and where should it go if so?
cc @josephsavona
",edvinerikson,2016-04-06 02:30:28
1014,2016-04-01 01:59:50,"Flow install seems to have some issues. 
",edvinerikson,2016-04-06 02:30:28
1014,2016-04-06 00:14:50,"Thanks for doing this, just a small update please and we should be good to merge this.
",kassens,2016-04-06 02:30:28
1014,2016-04-06 00:28:44,"Awesome, I've updated the PR :)
",edvinerikson,2016-04-06 02:30:28
1014,2016-04-06 01:44:07,"Thanks for the update!
",kassens,2016-04-06 02:30:28
1013,2016-03-31 23:47:26,"Fixes https://github.com/facebook/relay/issues/968 (maybe..)
I couldn't verify that this fixes it. When I tried it locally I could run the plugin in 0.10 without the patch.
#### Edit

I managed to verify that it is working now.
I used the schema/babel config in the todo example and ran `node node_modules/.bin/babel test.js`
**test.js**

<S_CODE_TOKEN>

cc @kassens @josephsavona
",edvinerikson,2016-04-01 01:30:32
1013,2016-03-31 23:54:03,"Thanks!
",josephsavona,2016-04-01 01:30:32
1013,2016-03-31 23:54:08,"@facebook-github-bot import
",josephsavona,2016-04-01 01:30:32
1013,2016-04-01 00:10:09,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/520568954781165/int_phab) to review.
",facebook-github-bot,2016-04-01 01:30:32
1012,2016-03-31 21:46:36,"Many GraphQL server implementations are still not supporting Relay, or at least not fully, but how big of a deal is this really? Can Relay not be used with those at all, or does it just require more work?
",kaqqao,2016-03-31 22:27:48
1012,2016-03-31 22:19:34,"Can you clarify which products you're referring to that are not ""Relay-compliant""? In general any GraphQL [server implementation](https://github.com/chentsulin/awesome-graphql#lib) can be used to create a GraphQL schema for use with Relay. The [GraphQL Relay Spec](http://facebook.github.io/relay/docs/graphql-relay-specification.html#content) describes the schema features necessary to work with Relay.
",josephsavona,2016-03-31 22:27:48
1012,2016-03-31 22:27:46,"Oh. I now realize it is the schema that needs to be Relay compliant, not the server itself.

What was confusing me is that GraphQl-Java, for example, says ""There is a very basic Relay support included"", and the Elixir implementation just recently got Relay support, so I was figuring there was something magical needed. But it turns out all this meant is that convenience functions for making a Relay-compliant schema were added.

Cool. Thanks a lot!
",kaqqao,2016-03-31 22:27:48
1012,2016-03-31 22:30:10,"@josephsavona
Btw, my original question still sort of stands. If the schema isn't formed to Relay's expectations, is Relay totally unusable or does it mean you must manually implement paging etc? For example, could I use simple offset/limit based pagination instead of cursor based one, and still use Relay on the front-end?
",kaqqao,2016-03-31 22:27:48
1012,2016-03-31 23:16:26,"The Node and Mutation specifications are required in order for Relay to work, however connections are optional. You can always define a field such as `things(offset: 20, limit: 10)` and Relay will treat it as a normal field and fetch the list of items. 
",josephsavona,2016-03-31 22:27:48
1012,2016-03-31 23:34:18,"Exactly the info I was looking for! Thanks a bunch for your kind help!
",kaqqao,2016-03-31 22:27:48
1011,2016-03-31 12:30:38,"If we have two connection types defined in GraphQL:

<S_CODE_TOKEN>

Each one of them has its own custom sort argument. For store type is StoreSortType and for District is DistrictSortType.
They are defined like this:

<S_CODE_TOKEN>

On the front end we have imported fragment from DistrictComponent and StoreComponent and each fragment has it's own sort argument, but the values inside it are identical.

<S_CODE_TOKEN>

What relay does, it sees that those two objects/arguments are identical and crates an query like this:

<S_CODE_TOKEN>

As you can see the sort argument/variable is defined as StoreSort, and its reused in district and store, but it shouldn't be, as they are two separate input objects.

The error message: 
`Variable \""$sort_0\"" of type \""StoreSort!\"" used in position expecting type \""DistrictSort\"".`
",mario-jerkovic,2016-04-04 20:55:28
1011,2016-04-01 14:44:04,"Thanks for reporting this. The printer needs to be changed to track variables separately based on their type - see the ""create variable"" method at the end of `printRelayOSSQuery`. I'll fix this today or on the weekend. 
",josephsavona,2016-04-04 20:55:28
1011,2016-04-04 09:00:42,"This is definitely an issue when you have same arguments but on different types, relay confuses them as being same type although they should be scoped based on their type, in application different models can have same attribute names and this makes filtering on them producing errors.
+1 for fixing this
",mjurincic,2016-04-04 20:55:28
1011,2016-04-04 17:19:20,"Thanks again for reporting this, see #1016 for the fix.
",josephsavona,2016-04-04 20:55:28
1010,2016-03-31 06:05:29,"I am trying to find an example of integration between Relay and react-native's [NavigationExperimental](https://github.com/facebook/react-native/tree/master/Libraries/NavigationExperimental).

Has it been done by someone else? If not, any advices on how to get started?
Thank you.
",joonhocho,2016-04-05 07:21:20
1010,2016-04-05 07:21:20,"Thanks for your question! We use these APIs together at Facebook so this is definitely possible. That said, we want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",josephsavona,2016-04-05 07:21:20
1010,2016-04-05 10:26:51,"Just asked a question on stackoverflow: https://stackoverflow.com/questions/36423727/how-to-use-react-natives-navigationexperimental-with-relay
",joonhocho,2016-04-05 07:21:20
1010,2016-07-21 14:42:07,"Any updates on the question?
",Lenin7,2016-04-05 07:21:20
1010,2016-07-21 16:00:01,"@Lenin7 Answered on Stack Overflow. tl;dr `NavigationExperimental` is still experimental, so just give it a try!
",josephsavona,2016-04-05 07:21:20
1010,2016-07-21 16:56:45,"@Lenin7
Check out [react-native-router-relay-todo](https://github.com/joonhocho/react-native-router-relay-todo).
I created the example that uses [react-router-native](https://github.com/jmurzy/react-router-native) which uses NavigationExperimental.
It works, though there are some issues.
",joonhocho,2016-04-05 07:21:20
1009,2016-03-30 23:57:30,"This is hot off the press! :)
",cpojer,2016-04-01 05:40:22
1009,2016-03-31 02:10:10,"@facebook-github-bot import
",kassens,2016-04-01 05:40:22
1009,2016-03-31 16:52:58,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/216110855444022/int_phab) to review.
",facebook-github-bot,2016-04-01 05:40:22
1008,2016-03-30 18:13:35,"The argument should always be a `DataID` and never an array.
",kassens,2016-03-30 19:25:58
1008,2016-03-30 18:13:42,"@facebook-github-bot import
",kassens,2016-03-30 19:25:58
1008,2016-03-30 18:14:45,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1762026497361860/int_phab) to review.
",facebook-github-bot,2016-03-30 19:25:58
1007,2016-03-30 17:49:04,"I was wondering if you could currently (or if in the future) pass a function to `setVariables` that takes the current `variables` object as its only argument and returns the next `variables` object.

Kind of like how in React you can do:

<S_CODE_TOKEN>

you could do:

<S_CODE_TOKEN>
",aweary,2016-04-05 07:22:22
1007,2016-04-02 03:55:11,"Thanks for asking about this. Passing a function instead of the variables object isn't currently supported - note also that `setVariables` aren't batched the way that sertState is in React. What's the use case for a function here? 
",josephsavona,2016-04-05 07:22:22
1007,2016-04-05 07:22:22,"In general we haven't seen a need for this. Please feel to comment with more information about your use-case and we can reopen to discuss further!
",josephsavona,2016-04-05 07:22:22
1007,2016-04-05 14:55:11,"I don't have any really good reasons other than 1) to be consistent with React's `setState` and 2) easier access to the existing `variables` (you don't have to do `this.props.relay.variables`)

If it's not already possible or (very) easily implemented then, yeah, I don't think it's worth the effort. Thanks @josephsavona 
",aweary,2016-04-05 07:22:22
1006,2016-03-30 16:10:03,"Realized that we _have_ a method for checking if a query is plural, no need to look at the identifying args.
",josephsavona,2016-03-31 17:20:37
1006,2016-03-30 16:10:16,"@facebook-github-bot import
",josephsavona,2016-03-31 17:20:37
1006,2016-03-30 16:17:58,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/512584875590316/int_phab) to review.
",facebook-github-bot,2016-03-31 17:20:37
1006,2016-03-30 20:13:35,"@facebook-github-bot import
",josephsavona,2016-03-31 17:20:37
1006,2016-03-30 21:27:47,"@facebook-github-bot import
",josephsavona,2016-03-31 17:20:37
1005,2016-03-30 06:38:21,,alex-cory,2016-04-05 21:57:42
1005,2016-03-30 06:38:56,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-04-05 21:57:42
1005,2016-04-04 21:27:48,"Thanks a lot for this @alex-cory. If you can get the CLA signed I'll go and get this merged.
",wincent,2016-04-05 21:57:42
1005,2016-04-04 22:14:46,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-04-05 21:57:42
1005,2016-04-05 00:35:48,"@facebook-github-bot import
",wincent,2016-04-05 21:57:42
1005,2016-04-05 16:04:07,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1312538512106570/int_phab) to review.
",facebook-github-bot,2016-04-05 21:57:42
1004,2016-03-30 06:19:23,"In these files we have change trackers, query trackers, and now fragment trackers. This can be confusing.

This commit makes sure that whenever we have more than one tracker in a local area, we use explicit names:
- `_tracker` becomes `_queryTracker`
- `tracker` becomes `queryTracker`

And so on. Even if we simplify things in the future to involve fewer trackers I still think this is a worthwhile change (another one is probably tackling the code smell of `writePayload` and the `RelayQueryWriter` constructor taking seven and six parameters respectively, but that is beyond the scope of this commit).
",wincent,2016-04-01 01:40:24
1004,2016-03-30 06:19:40,"@facebook-github-bot import
",wincent,2016-04-01 01:40:24
1004,2016-03-30 06:22:44,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1031483736930835/int_phab) to review.
",facebook-github-bot,2016-04-01 01:40:24
1003,2016-03-30 05:57:36,,wincent,2016-03-30 19:00:46
1003,2016-03-30 05:58:00,"@facebook-github-bot import
",wincent,2016-03-30 19:00:46
1003,2016-03-30 06:00:55,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1593459864313258/int_phab) to review.
",facebook-github-bot,2016-03-30 19:00:46
1002,2016-03-29 16:15:30,"say i made a `RelayCotainer(ListView)` which accept a `connection` as prop: 

<S_CODE_TOKEN>

then i use it like:

<S_CODE_TOKEN>

sadly, when i click button, username will not change, because `RelayContainer` think that nothing has changed, `shouldComponentUpdate` will return `false` in this case, so `MyList.render` will never be called.

the only solution is to pass the connection's parent (which actually changed) to `MyList` like 

<S_CODE_TOKEN>

Any ways to solve this more graceful ? or `RelayContainer` is designed to act like this in the first place ?
",filod,2017-01-30 21:42:43
1002,2016-03-29 16:25:39,"`RelayContainer` implements `shouldComponentUpdate` to avoid re-rendering if none of the data changed. It will rerender if any of its fragment data changes, including when items are added or removed from a connection. 

I suspect that the issue here is related to how the components and their fragments are configured. To help debug we'll need more information: what are the container fragments, and what does the mutation change?
",josephsavona,2017-01-30 21:42:43
1002,2016-03-30 05:57:24,"@josephsavona 
in the example above, `RelayContainer(MyList)` only have one fragment named `connection`, the `ChangeUserNameMutation` will change `viewer.username` (`viewer.connection` actually won't change)
",filod,2017-01-30 21:42:43
1002,2016-03-30 06:07:16,"@filod Is it possible to provide the full container fragment and mutation fat query?
",josephsavona,2017-01-30 21:42:43
1002,2016-03-30 06:14:47,"in my real case (remove some code):

<S_CODE_TOKEN>
",filod,2017-01-30 21:42:43
1002,2016-03-30 06:30:46,"I see. In this example, we would expect that the Topic/MyComponent container would re-render after the mutation because `viewerDoesSubscribe` has changed. If that isn't happening it likely indicates that the mutation isn't configured correctly, and the data for the `topic` field of the mutation isn't being requested and/or applied to the store correctly. What is the mutation query that is sent to the server and the corresponding response? Does it contain the data you'd expect?
",josephsavona,2017-01-30 21:42:43
1002,2016-03-30 08:04:15,"yes, mutation applies well. 
the only problem is `Topic/MyComponent` uses `Activities`'s `renderHeader` to render `topic.subscriberCount`
",filod,2017-01-30 21:42:43
1002,2016-03-30 15:50:38,"I see - the parent component _is_ re-rendering, but the data for the child hasn't changed so it doesn't re-render. This causes the child not to re-invoke `this.props.renderHeader` passed from the parent and therefore not see the new data. One simple workaround here is to pass a new `renderHeader` prop every time so that RelayContainer will return false in shouldComponentUpdate and re-render the child:

<S_CODE_TOKEN>
",josephsavona,2017-01-30 21:42:43
1002,2016-04-05 07:23:25,"@filod Did the workaround I suggested help?
",josephsavona,2017-01-30 21:42:43
1002,2016-04-05 09:01:55,"the code you provide is working for my case.
but i choose another way to make code understandable for our team: pass a connection `parent` prop to `MyList` (which means connection parent is a new object when receive props from relay store)

<S_CODE_TOKEN>
",filod,2017-01-30 21:42:43
1002,2016-04-05 09:47:00,"@filod my recommendation is to use `viewer` for propname instead of `parent`.
Who knows will your team use `viewer` in `MyList` or its subcomponents in future. If so, you already will have proper name, with proper relay data.

In my team we have rule: All announced relay-fragment-names became reserved words for the prop-names and can not be renamed.
",nodkz,2017-01-30 21:42:43
1002,2016-04-05 12:39:27,"the reason i use `parent` is that i can force `MyList` to receive a `parent` prop via `propsType`.
",filod,2017-01-30 21:42:43
1002,2017-01-30 21:42:43,"(Spring cleaning.) Cleaning out some old issues and this one looks quite stale at this point, and additionally has some working recommendations in it, so I'm going to close it out. Thanks everybody for contributing to the discussion!",wincent,2017-01-30 21:42:43
1001,2016-03-29 11:49:46,"I think there may be a problem with how Relay fulfils requests triggered by `setVariables`.

Here's an example `Emailer` component. The desired behaviour is for the `emailSubject` and `emailBody` fields to only be requested from the GraphQL if the user clicks the 'Email this customer' button.

However, trying to access the newly fetched fields in the `onReadyStateChange` function comes up with nothing:

<S_CODE_TOKEN>

In my real life analog to this component, I can see the request for `emailSubject` and `emailBody` being fulfilled by the server, and I can also see the props changing in the next render of the component — it's just trying to get the result of that request in the `onReadyStateChange` function falls flat!

What’s interesting is that wrapping the callback in a `setTimeout` with the timeout set to `0` does perform the expected behaviour.
",sgwilym,2016-03-29 17:33:18
1001,2016-03-29 14:19:10,"I think I've answered a similar question on stackoverflow before http://stackoverflow.com/questions/34315742/props-value-after-receiving-setvariables-callback/34320309#34320309

From the docs

> Note
> 
> setVariables does not immediately mutate variables, but creates a pending state transition. variables will continue returning the previous values until this.props has been populated with data that fulfills the new variable values.
",xuorig,2016-03-29 17:33:18
1001,2016-03-29 14:33:44,"All right. I feel like it's a very weird, unexpected API when you have a callback (one that even goes as far as responding to the state of the request) that doesn't have access to that kind of information though.
",sgwilym,2016-03-29 17:33:18
1001,2016-03-29 17:33:18,"Seems like @xuorig already answered your question.

That callback is the called when RelayContainer is notified about the data being ready, but before the container has a chance to read all the new data from the RelayStore. You should be able to check access the props when the variables is updated.
",yuzhi,2016-03-29 17:33:18
1001,2016-06-07 10:25:13,"If I needed to manipulate the returned data, where is the best place to do that? The `componentWillReceiveProps` seems to be not suitable for this task since the props might be changed by any other actions. However, I would want to manipulate the data just for the change made by this `setVariables`.
",lvarayut,2016-03-29 17:33:18
1000,2016-03-28 23:23:44,"...this is a first stab at a fix for #782. It should fix the issue for at least some subset of FIELDS_CHANGE mutations, but might create new issues in other cases, doesn't correct the query building code for RANGE_ADD or RANGE_DELETE, and still needs more work.

But it does create a test case that at least demonstrates one example of the issue!
",NevilleS,2016-08-30 23:23:25
1000,2016-03-28 23:25:20,"See the discussion in #782 for some context as to why I'd open a PR that definitely isn't ready :+1: 

(also, PR #1000 :100: :100: :100: :100: :100: :100: :100: :100: :100: :100:)
",NevilleS,2016-08-30 23:23:25
1000,2016-04-14 15:58:03,"cc @wincent, @yuzhi re problems with automatic query construction. This is more evidence to suggest for requiring that mutation query construction be more static/manual/explicit.
",josephsavona,2016-08-30 23:23:25
1000,2016-05-11 03:36:55,"Did you guys ever get a chance to think about this? We've got several places in our codebase with `// TODO: https://github.com/facebook/relay/issues/782` and hoping there'd be a better solution than the indirection layers... 😢 
",NevilleS,2016-08-30 23:23:25
1000,2016-08-08 13:12:05,"👍 
",sibelius,2016-08-30 23:23:25
1000,2016-08-30 23:09:13,"> Did you guys ever get a chance to think about this? We've got several places in our codebase with `// TODO: https://github.com/facebook/relay/issues/782` and hoping there'd be a better solution than the indirection layers...

I think there are a couple of main alternatives here:
1. Switch to Relay 2 when it comes out (""soon"", watch our meeting sync notes to get the latest status on our progress towards being able to push a preview to a branch on GitHub); here all queries, including mutations, are entirely static, and there is no dynamic runtime query generation (no tracked queries, no fat queries, no intersection), so this issue just goes away.
2. Use the existing low-level mutation API, `RelayGraphQLMutation` (shipped, but not documented, as it was really just a step towards what we wanted to build in Relay 2): this is also an entirely static mutation API, where you supply your own query and there are no fat/tracked queries or intersection involved. This is still somewhat of a rough API, and because it sits on top of all the ""legacy"" underpinnings in terms of mutation queues, transactions etc it does have some limitations that make it not as flexible or powerful as what we'll have in Relay 2.

In the meantime, @NevilleS, what do you want to do with this PR? I see two options: either abandon it or update it. What do you think?
",wincent,2016-08-30 23:23:25
1000,2016-08-30 23:23:25,"I think the right thing to do is abandon this PR and we'll wait for Relay 2. When we originally hit this issue the low-level mutation API wasn't available, so if this becomes a larger problem for us that workaround will also work - in the meantime, our ""manually-inserted-indirection-layer"" hack lets us use the declarative mutation API so we'll continue to use that.

Looking forward to fixing some of this stuff with Relay 2, though!
",NevilleS,2016-08-30 23:23:25
999,2016-03-28 21:11:12,"We discussed this in respect to e5843c496075c08ac (D3103860).

The shellcheck linter recommends:

>  SC2068: Double quote array expansions to avoid re-splitting elements.

So let's apply the same change here. From `man bash`:

<S_CODE_TOKEN>
",wincent,2016-03-28 22:40:12
999,2016-03-28 21:13:11,"@facebook-github-bot import
",wincent,2016-03-28 22:40:12
999,2016-03-28 21:17:10,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/472377092947918/int_phab) to review.
",facebook-github-bot,2016-03-28 22:40:12
998,2016-03-28 20:09:35,"[npm-debug.zip](https://github.com/facebook/relay/files/192407/npm-debug.zip)

[23:02:39] Starting 'dist:min'...
\
stream.js:74
      throw er; // Unhandled stream error in pipe.
      ^
 Error: ModuleNotFoundError: Module not found: Error: Cannot resolve 'file' or 'directory' ./RelayVariable in C:\Users\andre\Desktop\relay01\relay\lib
 |
npm ERR! Windows_NT 10.0.10586
npm ERR! argv ""C:\Program Files\nodejs\node.exe"" ""C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js"" ""run"" ""build""
npm ERR! node v4.4.1
npm ERR! npm  v2.14.20
npm ERR! code ELIFECYCLE
npm ERR! react-relay@0.7.3 build: `gulp`
npm ERR! Exit status 1
npm ERR! Failed at the react-relay@0.7.3 build script 'gulp'.
npm ERR! This is most likely a problem with the react-relay package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     gulp
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs react-relay
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!
npm ERR!     npm owner ls react-relay
## npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     C:\Users\andre\Desktop\relay01\relay\npm-debug.log
npm ERR! addLocalDirectory Could not pack C:\Users\andre\Desktop\relay01\relay to C:\Users\andre\AppData\Roaming\npm-cache\react-relay\0.7.3\package.tgz
npm ERR! addLocal Could not install C:\Users\andre\Desktop\relay01\relay
npm ERR! Windows_NT 10.0.10586
npm ERR! argv ""C:\Program Files\nodejs\node.exe"" ""C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js"" ""install""
npm ERR! node v4.4.1
npm ERR! npm  v2.14.20
npm ERR! code ELIFECYCLE

npm ERR! react-relay@0.7.3 prepublish: `node node_modules/fbjs-scripts/node/check-dev-engines.js package.json && npm run build`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the react-relay@0.7.3 prepublish script 'node node_modules/fbjs-scripts/node/check-dev-engines.js package.json && npm run build'.
npm ERR! This is most likely a problem with the react-relay package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node node_modules/fbjs-scripts/node/check-dev-engines.js package.json && npm run build
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs react-relay
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!
npm ERR!     npm owner ls react-relay
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
",Lux44,2016-03-29 01:33:37
998,2016-03-28 20:26:08,"This blames to a1a4d99cb698e1eed63d28f8291ef114115d515d which adds a reference to the internal only `RelayVariable`. @steveluscher would you mind taking a look? Maybe we need a fork or we can move `RelayVariable` to OSS?
",kassens,2016-03-29 01:33:37
998,2016-03-29 00:40:46,"A fix is coming! Thanks for reporting.
",steveluscher,2016-03-29 01:33:37
997,2016-03-28 16:05:27,"Prior to 8c386dc7130f9fb7e you could pass a ""filter"" pattern to `npm test` to limit the scope of the test run (eg. `npm test RelayMutationQuery` to run just the `RelayMutationQuery` tests).

While you can still pass a filter to `npm jest`, we shouldn't break things for people who might be used to running `npm test`. This commit restores that ability.

Manually tested `npm test` with and without a filter.
",wincent,2016-03-28 17:50:31
997,2016-03-28 16:05:32,"@facebook-github-bot import
",wincent,2016-03-28 17:50:31
997,2016-03-28 16:10:00,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1284788524871686/int_phab) to review.
",facebook-github-bot,2016-03-28 17:50:31
996,2016-03-28 04:54:01,"When minified, the production build of Relay is just over 200Kb. This makes it somewhat difficult to use in an SPA where load time is important. Is there a way to build a smaller production build? Why is it so large in the first place?
",adieuadieu,2016-05-12 00:56:18
996,2016-03-28 18:24:33,"The production build is a standalone version that has all its dependencies bundled in addition to Relay core. It's meant as a convenient way to get started with Relay, not as the most optimal distribution. We'd recommend creating a bundle containing React _and_ Relay, which should be able to take advantage of shared utility libraries and be smaller than the total of the standalone production builds. 

We're also open to pull-requests that optimize the production build configuration.
",josephsavona,2016-05-12 00:56:18
996,2016-04-21 11:24:49,"If you send the minified file gzipped then effectively only about ~30K will be sent over the wire. You can also cache the file on the client. The 30K is an estimate, but generally speaking enabling compression is much more efficient in terms of file size/load time, than minification.
",laszbalo,2016-05-12 00:56:18
996,2016-05-12 00:56:18,"Since I don't see any real action items here, I'm going to close the issue. Making sure to compile as a production build and enable dead code elimination/minification in combination with compression should help reduce the size.
",kassens,2016-05-12 00:56:18
995,2016-03-27 17:40:43,,chentsulin,2016-03-28 21:40:33
995,2016-03-27 20:31:07,"Thanks! 
",wincent,2016-03-28 21:40:33
995,2016-03-27 20:31:34,"@facebook-github-bot shipit 
",wincent,2016-03-28 21:40:33
995,2016-03-28 16:06:16,"Bot looks like it is on holiday, going to try importing manually.
",wincent,2016-03-28 21:40:33
995,2016-03-28 16:06:22,"@facebook-github-bot import
",wincent,2016-03-28 21:40:33
995,2016-03-28 16:09:52,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/432724390229819/int_phab) to review.
",facebook-github-bot,2016-03-28 21:40:33
994,2016-03-26 17:23:56,"The docs @ https://facebook.github.io/relay/docs/guides-mutations.html 
indicate that you can remove multiple nodes from a connection, without removing the records from the store:

> Given a parent, a connection, one or more DataIDs in the response payload, and a path between the parent and the connection, Relay will remove the node(s) from the connection but leave the associated record(s) in the store.

`deletedIDFieldName: string | Array<string>`

> The field name in the response that contains the DataID of the removed node, or the path to the node removed from the connection

Error: 

<S_CODE_TOKEN>

NODE_DELETE does work as specified, but I'd like to use RANGE_DELETE. :)

I might be wrong. But I think I'm doing it right.

<S_CODE_TOKEN>
",fvanagthoven,2016-05-20 17:57:24
994,2016-03-28 21:37:22,"The docs are definitely misleading here. `NODE_DELETE` has a fairly simple logic like ""if the result is an array, loop through and delete each record ID"", something similar for `RANGE_DELETE` would be good.
",NevilleS,2016-05-20 17:57:24
994,2016-05-20 17:53:05,"Fixed with 766a459529418e3816adda98cb866e55b6ac27fd
",sampepose,2016-05-20 17:57:24
993,2016-03-25 21:33:26,"I wonder if the Relay environment can be made in component like how it is done in redux

<S_CODE_TOKEN>

For relay we can make sth like

<S_CODE_TOKEN>

So that any `RelayRootContainer` in this Provider may have `environment` convey to its props. Instead of [using RelayStore as environment](https://github.com/facebook/relay/blob/5ba54ee795b24a4f28de3dd29247c64335d2b8af/src/container/RelayRootContainer.js#L113), make it like

<S_CODE_TOKEN>
",aihornmac,2016-11-01 00:55:06
993,2016-03-28 18:12:44,"This makes sense and would seem to make nested `<RelayRenderer />`s easier to use (no need to supply the environment prop to every instance). Have there been any downsides to this approach? 

cc @gaearon @yungsters 
",josephsavona,2016-11-01 00:55:06
993,2016-03-28 18:14:20,"note: edited the original description to clarify the API a bit
",josephsavona,2016-11-01 00:55:06
993,2016-04-03 08:40:03,"I am not sure if I have a say in this, given that no one was commenting on this issue, maybe I should make a complement. Please correct me if I said anything wrong or inappropriate.

I came up with this problem when I was making this isomorphic app with server render that requires authentication. Since GraphQL server, as an API server, should be stateless, that means auth info, `Authorization` in header for example, should be included in requests.

I was trying to work around this by adding a `token` argument to `Viewer` query, which wraps up any data queries. It did work, however, I haven't found any workable way when it comes to Mutations, and I don't really feel good to specify `token` in every mutation.

Then I reached to [isomorphic-relay](https://github.com/denvned/isomorphic-relay), which inspired me to check on some specific source codes, and finally I made it by instantiating a `RelayEnvironment` passed down to `RelayRenderer`.

Now redux handles session on client side for me, once it changes, depending on circumstances, it shall either `injectNetworkLayer` or reinstantiate a new `RelayEnvironment` to flush data. Anyway, `Authorization` would change.

<S_CODE_TOKEN>

Later I found [a problem in RelayContainer](https://github.com/facebook/relay/blob/7337f0abf6324ff6cb024e9e6e24f356cf5fe376/src/container/RelayContainer.js#L143-L152). As illustrated above, it should be `RelayEnvironment` now instead of `Relay.Store` to handle requests, so some operations like `Relay.Store.commitUpdate` should be contextual. But the `relay` in props bound to `RelayContainer` doesn't offer those methods.

I noticed `relayProp` is in fact a plain object, so I worked around this by wrapping `createContainer`, changing the `__proto__` of `relay` passed down from `RelayContainer` to user component.

<S_CODE_TOKEN>

And this is basically why I posted this issue. It seems to involve more than just the _supply the environment prop to every instance_ problem. I am pretty sure you must have something done to tackle this beyond published versions.

Looking forward to any information.
",aihornmac,2016-11-01 00:55:06
993,2016-04-03 09:23:25,"@aihornmac You can use `this.context.relay` in your component directly, you don't need a wrapper to pass it as a prop. Just don't forget to declare `relay` in the `contextTypes` of your component as you did above in your wrapper.
",denvned,2016-11-01 00:55:06
993,2016-04-03 09:54:48,"Well, I was trying to state as less as possible in specific components, since I am using decorators, I am gonna wrap up the official `createContainer` anyway. As there has been a `relay`, I just think merging them seems reasonable. But sure this demand may be just personal.

Thank you for your time
",aihornmac,2016-11-01 00:55:06
993,2016-04-05 15:52:01,"@aihornmac Thanks again for suggesting this idea. A `<Provider>` style component does separate the concerns of setting the context from rendering the data, and could be useful whenever there are nested `RelayRenderer`s. Let's leave this open and see if there's any more input.

@taion Would this be helpful for `react-router-relay`?
",josephsavona,2016-11-01 00:55:06
993,2016-04-05 16:00:10,"It's not a huge difference for me. It'd just be the difference between

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>

I think I actually like the latter slightly more.

Would it be too confusing to make this implicit? e.g. have `RelayRenderer` implicitly serve as the `Provider`, and branch between pulling in the environment from `props` (if specified) versus from `context` as a fallback.
",taion,2016-11-01 00:55:06
993,2016-04-05 22:21:37,"I haven't seen any downsides to this. For the rare cases when we want to avoid context we let people pass store as a prop. I guess Relay containers could optionally accept environment as a prop too, for the sake of providing an escape hatch. 
",gaearon,2016-11-01 00:55:06
993,2016-04-05 22:27:57,"I think it might be better to make the `<RelayRenderer>` serve as the `<RelayProvider>`, though.

Given that you typically only have a few `<RelayRenderer>`s, they end up being not too dissimilar from React Redux `<Provider>`s.

It seems weird to specify an extra `<RelayProvider>` around the `<RelayRenderer>` in the general case.
",taion,2016-11-01 00:55:06
993,2016-05-10 16:22:40,"Thanks all for the input. In practice, `<RelayRenderer>` is acting as the provider already (the context is set via the `environment` prop). @aihornmac Does this address your intended use case?
",josephsavona,2016-11-01 00:55:06
993,2016-06-07 04:58:41,"@josephsavona In practice, sometimes we don't need a RelayContainer for declarative data fetching, instead of we might just need ad-hoc data fetching or mutations, in this case, a contextual relay will be required. Since it throws errors when creating RelayContainer without specs, I ended up writing a simple provider. I wonder if I am missing anything.
",aihornmac,2016-11-01 00:55:06
993,2016-11-01 00:41:03,"This issue should be closed. `<Relay.ReadyStateRenderer>` does in fact provide the Relay environment as `context.relay`.
",taion,2016-11-01 00:55:06
993,2016-11-01 00:55:06,"@taion good call, the use-case for a separate context-setter isn't really clear. Thanks for starting the discussion, @aihornmac!
",josephsavona,2016-11-01 00:55:06
992,2016-03-25 16:45:38,"This makes it easier to just run a jest test and skip the flow type checking.

<S_CODE_TOKEN>
",kassens,2016-03-25 20:00:33
992,2016-03-25 16:45:49,"@facebook-github-bot import
",kassens,2016-03-25 20:00:33
992,2016-03-25 16:49:03,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/803418326459437/int_phab) to review.
",facebook-github-bot,2016-03-25 20:00:33
991,2016-03-25 02:35:11,"This was just working by accident, but using the wrong type of node.
",kassens,2016-03-25 17:40:24
991,2016-03-25 02:35:21,"@facebook-github-bot import
",kassens,2016-03-25 17:40:24
991,2016-03-25 02:38:13,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1730645583843916/int_phab) to review.
",facebook-github-bot,2016-03-25 17:40:24
990,2016-03-24 23:51:17,"Avoid verbatim repetition of the query-printing code.
",wincent,2016-03-28 21:45:35
990,2016-03-24 23:51:36,"@facebook-github-bot import
",wincent,2016-03-28 21:45:35
990,2016-03-24 23:56:58,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1682981925283863/int_phab) to review.
",facebook-github-bot,2016-03-28 21:45:35
989,2016-03-24 22:27:07,"Should help catch issues like this one:

https://github.com/facebook/relay/issues/768

Closes:

https://github.com/facebook/relay/issues/927
",wincent,2016-03-28 22:15:29
989,2016-03-24 22:27:22,"@facebook-github-bot import
",wincent,2016-03-28 22:15:29
989,2016-03-24 22:28:03,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/179978805719397/int_phab) to review.
",facebook-github-bot,2016-03-28 22:15:29
988,2016-03-24 22:26:10,,wincent,2016-03-24 23:35:29
988,2016-03-24 22:26:27,"@facebook-github-bot import
",wincent,2016-03-24 23:35:29
988,2016-03-24 22:27:58,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1709585875993719/int_phab) to review.
",facebook-github-bot,2016-03-24 23:35:29
987,2016-03-24 05:04:38,"Prints this:

<S_CODE_TOKEN>

Instead of:

<S_CODE_TOKEN>
",wincent,2016-03-24 18:50:34
987,2016-03-24 15:05:36,"@facebook-github-bot import
",wincent,2016-03-24 18:50:34
987,2016-03-24 15:08:38,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/996953940401211/int_phab) to review.
",facebook-github-bot,2016-03-24 18:50:34
986,2016-03-23 20:52:41,"Sometimes while working on a test I want to just peek at some node which may or may not be printable. This commit adds `logNode`, which is a convenience wrapper around `flattenRelayQuery` + `printRelayQuery`, and which will wrap otherwise unprintable fields in a phony wrapper.

So, you can do `RelayTestUtils.logNode(node)` and it will print:

<S_CODE_TOKEN>

Compare that with the harder to read result of `console.log(node)`:

<S_CODE_TOKEN>
",wincent,2016-03-24 00:30:34
986,2016-03-23 20:54:48,"If people think this is reasonable[*], I'll also share a pretty-printed version of this that prints the query with nice indentation.

[*] Is it? What are other people doing when working with query nodes in tests and such?
",wincent,2016-03-24 00:30:34
986,2016-03-23 21:12:55,"This seems totally reasonable. I always end up doing `console.log(require('printRelayQuery')(node).text)` when debugging something so might as well have a helper for this.
",josephsavona,2016-03-24 00:30:34
986,2016-03-23 21:32:18,"@facebook-github-bot import
",wincent,2016-03-24 00:30:34
986,2016-03-23 21:43:10,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/450151731844980/int_phab) to review.
",facebook-github-bot,2016-03-24 00:30:34
985,2016-03-23 20:20:44,,wincent,2016-03-23 22:30:32
985,2016-03-23 20:20:58,"@facebook-github-bot import
",wincent,2016-03-23 22:30:32
985,2016-03-23 20:23:35,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1004457409642298/int_phab) to review.
",facebook-github-bot,2016-03-23 22:30:32
984,2016-03-23 16:38:17,"I have a mutation that can be used to delete more than one type of item on my GraphQL server. When the item is deleted, I need Relay to remove the item from the connections that might include it.

To do that, I have my GraphQL server return a union, representing the parent of the item that was deleted. And since each parent uses a different name for the connection, the `getConfigs` is smart enough to know what connection will actually be used.

Here's what the code looks like:

<S_CODE_TOKEN>

The problem is that Relay generates an invalid query when it runs this mutation, which results in this error:

<S_CODE_TOKEN>

Here's the query that Relay is generating: (transcribed by hand)

<S_CODE_TOKEN>

Notice that in fragment F3, it's querying for the `id` field of `parent`. But `parent` is a union, so any selections against it should be wrapped inside fragments.

As a workaround, I'm planning to change the field from a union to an interface. I'm not sure if this is an unsupported case, or if I'm doing something wrong.
",theorygeek,2016-12-20 17:52:10
984,2016-03-23 18:14:28,"Wonder if this is related to #782.
",wincent,2016-12-20 17:52:10
984,2016-03-23 18:35:53,"Seems pretty much identical, except the error in this case is that the node in the payload isn't a more specific type (e.g. `Feedback` but we have tracked queries against `Employee`), but in this case the payload is actually a union type.

Note that the ""solution"" in #782 of escaping tracked queries with a generic wrapper like `...on Node { ...on Employee { <original frag> } }` would probably still work here, though is the `Node` interface guaranteed to be implemented by the union type...
",NevilleS,2016-12-20 17:52:10
984,2016-10-26 17:13:26,"I had a similar issue but was able to get the mutation working by removing the `parentName` field from `getConfigs`. I think this might break optimistic updates.

Wanted to note that the errors/warnings outputted from Relay were a bit confusing:

<S_CODE_TOKEN>

This inline fragment on a union type (Notable) in `getFatQuery`  generated this message:

<S_CODE_TOKEN>

Thinking this meant my MutationPayload was somehow returning my union type (Notable) I moved the inline fragments to the root of the MutationPayload, and of course received this message:

<S_CODE_TOKEN>
",felguerez,2016-12-20 17:52:10
984,2016-12-20 17:52:10,"Thanks for filing this issue and your patience as we address it. The recommended workaround to this issue is to use [`Relay.GraphQLMutation`](https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html#content) for mutations, which gives you complete control over the mutation query sent to the server.",josephsavona,2016-12-20 17:52:10
984,2017-02-15 23:56:50,Sorry to resurrect this - has there been any progress on allowing this?,dorthwein,2016-12-20 17:52:10
984,2017-02-17 00:13:36,"@dorthwein: There is unlikely to be any further work done related to the old, fat-query-powered mutations implementation (although we're open to PRs from external contributors); the team is focused on shipping the new core, which features a brand new mutations API (see recent work on the `experimental` branch in this repo). In the meantime, `Relay.GraphQLMutation` is an alternative that you can use today, and which bypasses the fat-query machine, allowing you to explicitly specify whatever mutation query you desire.",wincent,2016-12-20 17:52:10
983,2016-03-23 04:54:24,"So I finally hacked around the hasPreviousPage and hasNextPage issues (see only one can be true depending on your direction).  I should have read the docs better, but I brute forced it.

So the next thing on my list was resuming from where I started.  I keep track of the cursor in the URL and if you reload the page then you come back to the spot your paginating on.  Keep in mind this is only supporting backwards and forwards buttons, not limit/offset/count (windowed) style.  However, if I try to go back I get an exception. `GraphQLRange cannot find a segment that has the cursor:`.  Also I added another field to the call to denote where you're starting from.  My backend also knows if there is a previous page.  Basically it looks for something >= or <= (depending on direction) cursor and if that ID exists it prunes and sets hasPreviousPage.

So then I started looking around at issues and found this: #403.  Does that mean that basically anyone doing anything more complicated than an infinite scrolling list, should just end up using there own?  I feel like I am trying to do something fairly simple, and I am so close, so I was looking for guidance, or to see if this intending to be fixed.
",dispalt,2016-03-23 16:31:50
983,2016-03-23 07:13:09,"Okay, I realized the exception is from basically changing the start parameter after the first page.  So now I keep it constant and the backend does the right thing, but it's not even making the call to /graphql when I try to go back before the start parameter.  I noticed #540 which @talon suggests just ditching the Connection, is that still the best plan?
",dispalt,2016-03-23 16:31:50
983,2016-03-23 14:57:36,"Thanks for posting and searching for relevant existing issues. As you noted, our existing connection handling is cursor-based; because this is our primary use case the core team is unlikely to work directly on alternate forms of pagination. 

The simplest approach here is to use a plain list field with page/limit arguments as @taion suggested. What do you think about closing this issue and continuing discussion at #540?
",josephsavona,2016-03-23 16:31:50
983,2016-03-23 16:31:50,"Sure
",dispalt,2016-03-23 16:31:50
982,2016-03-23 00:04:16,"For the diffing step we currently traverse down every single edge and their full child tree to find the missing fields. This adds an optimization to return early in the diff process.
",kassens,2016-03-30 02:45:23
982,2016-03-23 00:05:38,"NOTE: this PR currently contains some changes to the Todo MVC app that I'm not planning to ship and will remove before shipping.
",kassens,2016-03-30 02:45:23
982,2016-03-23 00:24:54,"nice :-)
",josephsavona,2016-03-30 02:45:23
982,2016-03-23 22:46:40,"@facebook-github-bot import
",kassens,2016-03-30 02:45:23
982,2016-03-23 22:51:58,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1687826618172707/int_phab) to review.
",facebook-github-bot,2016-03-30 02:45:23
981,2016-03-23 00:01:08,"Picking this up again as it relates to work on mutations by @wincent and diffing by @kassens - the goal is to have a single `RelayFragmentResolver` instance for every combination of runtime fragment & dataID, such that we know what fragments are actively subscribed on what ids. This is just the resolver implementation, a follow-up will replace GraphQLStoreQueryResolver with this.
",josephsavona,2016-05-17 03:28:19
981,2016-03-23 18:07:06,"Some comments inline, but feel free to go ahead and import.
",wincent,2016-05-17 03:28:19
980,2016-03-22 17:42:16,"Commas are considered whitespace in GraphQL and we can just skip them. They're
nice inline, but at end of lines they're useless.

Done using [remove_commas.py](https://gist.github.com/kassens/6449143a9d1adb31b1a9):

<S_CODE_TOKEN>
",kassens,2016-03-22 19:45:33
980,2016-03-22 17:42:22,"@facebook-github-bot import
",kassens,2016-03-22 19:45:33
980,2016-03-22 17:47:59,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1538465693113941/int_phab) to review.
",facebook-github-bot,2016-03-22 19:45:33
979,2016-03-22 15:50:37,"This was missed in D3078604 / 63293bd3aebd2c4eea21012200d473c70eae0c6a.
",kassens,2016-03-22 17:25:31
979,2016-03-22 15:54:31,"@facebook-github-bot import
",kassens,2016-03-22 17:25:31
979,2016-03-22 16:02:44,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/580072445492573/int_phab) to review.
",facebook-github-bot,2016-03-22 17:25:31
978,2016-03-22 13:59:00,"One thing I keep bumping up against is this issue where mutations have a somewhat limited vocabulary for expressing changes to the graph. Basically, the client needs to be able to ""simulate"" the mutation locally in order to be able to use the mutation API (i.e. what fields will change, which nodes will be deleted, which range will we add/remove from, etc.)

There exists a certain ""category"" of mutations that the client can't reasonably simulate; for example, ones where the change might cascade to an undetermined number of nodes (say, a ""delete"" operation that would decrement the friend count of a large number of User nodes).

A simple example of this would be anything with ""random"" server behaviour. Consider a ""lottery"" app with the following schema (pseudo-code):

<S_CODE_TOKEN>

On the client, you might have a way to fetch a handful of Users (you know their IDs somehow), so you might have N user nodes in the local store. When you execute the `randomlySelectWinnerMutation`, how can you ever specify the correct `node` in a `FIELDS_CHANGE` mutation so that you update the correct User?

Furthermore, if multiple winners are selected, how can you specify that one or more nodes might need to be changed, without resorting to simply refetching _all_ of them?
",NevilleS,2016-09-03 00:33:30
978,2016-03-22 14:10:46,"(accidentally posted the issue early, but here's an actual proposal)

For scenarios where the client can't really know what nodes might be affected by an operation, it seems impossible to declaratively construct the mutation query ahead of time. Therefore, I'd like to see a way for a mutation payload to include which nodes have been _affected_ by the mutation, so the client can then elect to remove cached data for those nodes (or refetch that data immediately).

A mutation config might look something like this:

<S_CODE_TOKEN>

This mutation basically says ""I don't really know what's going to happen, but the server will tell me which nodes I need to refetch"". After the mutation runs, the Store could read the `affectedNodeIDs` which would be an array of IDs corresponding to the nodes that were mutated by the operation. If the Store has records for any of those IDs, it could either:
1. Remove them (if no observers currently exist)
2. Refetch them (if observers exist)

This seems like a ""reasonable"" compromise between doing a very imperative API (like `Relay.Store.expireNode(id)`) but also allows Relay to cover a broader category of mutations that the current configs can't really handle today.

Am I way off?
",NevilleS,2016-09-03 00:33:30
978,2016-09-03 00:33:30,"Thanks for (another!) high-quality mutations suggestion, @NevilleS. I'm doing some spring cleaning seeing as [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable) is under preparation now, and it will have a much more expressive, powerful API for expressing mutations. As such, I think it's best to close this for now. Thanks once again though!
",wincent,2016-09-03 00:33:30
977,2016-03-22 08:53:01,"Fix another let not working outside strict mode:

<S_CODE_TOKEN>
",chentsulin,2016-03-23 16:40:29
977,2016-03-22 16:57:50,"Thanks!

@facebook-github-bot import
",kassens,2016-03-23 16:40:29
977,2016-03-22 17:06:57,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/208057269555450/int_phab) to review.
",facebook-github-bot,2016-03-23 16:40:29
976,2016-03-22 04:03:10,,koistya,2016-04-14 16:05:31
976,2016-03-22 17:43:03,"Thanks for this, @koistya. It's still not entirely consistent though:
- Component is called `ProfilePicture`.
- Fragment name is `ProfilePhoto` (before your change) and `ProfilePicture` (after your change).
- GraphQL field is called `profilePhoto`.

Want to update that field name to `profilePicture` as well, so that it's the same throughout?
",wincent,2016-04-14 16:05:31
976,2016-04-14 16:05:31,"I'm going to close this due to inactivity, but please feel free to open a new PR or reopen with an update (depending on which is easier/possible with GH).
",josephsavona,2016-04-14 16:05:31
975,2016-03-22 03:55:07,"e.g. https://facebook.github.io/relay/docs/getting-started.html  

https://github.com/facebook/relay/blob/master/website/core/Site.js#L54
",kevinSuttle,2016-03-22 17:35:23
975,2016-03-22 17:35:23,"Thanks for bringing this up, but i think it was dealt with in 1fddf1f.

The website will get rebuilt and published when we cut the next release, so I'm going to close this one for now.
",wincent,2016-03-22 17:35:23
975,2016-03-22 22:55:22,":+1: 
",kevinSuttle,2016-03-22 17:35:23
974,2016-03-21 20:23:09,"This method works for RANGE_ADD, is there a way to use it with NODE_DELETE?
",jsierles,2016-03-21 20:35:48
974,2016-03-21 20:35:48,"Closing until I have a clear example of this.
",jsierles,2016-03-21 20:35:48
973,2016-03-21 18:00:03,"(We already have an internal task for this — t10388334 for anybody watching along at home — but creating this issue to give it some external visibility, seeing as it was asked about [here](https://github.com/facebook/relay/issues/967#issuecomment-199382654)).

As part of #538, we want to change the way we do tracked queries, which currently result in substantial amounts of memory use over time. The basic idea is to do this in two steps at mutation time:

1.Figure out what records in the store could be affected by a mutation by intersecting the fat query and the mutation config with what we have in the store. Mark those records as stale by moving them from `nodeData` to `cachedData`.
2. (Possibly asynchronously/incrementally, after applying the optimistic update) find all query resolvers observing affected IDs and do a traversal of the resolver fragments to reconstruct what would have been in the tracked query.

There are a few potential ""gotchas"" that we will want to handle here, but that's the basic overview.
",wincent,2016-09-03 00:35:43
973,2016-03-22 06:18:00,"First off, thanks!  Second off, feel free to ignore any / all of this -- I am just curious :).

I'm not sure I follow why two steps.  If in (1) you are intersecting the fat query I'm not sure what (2) does (I'm assuming query resolvers are components subscribed to the store?).

As for gotcha's with (1) I'm aware of an issue currently handled by Relay where the store has a `null` value but the tracking query might be:

<S_CODE_TOKEN>

Looking at the store data only you wouldn't know `text` and `completed` were being tracked since `selectedTodo` was currently `null` (or at least that is my understanding).  Any other major gotcha's for intersecting the fat query with the store data itself?

I previously had asked @josephsavona about the tracked queries and he mentioned performance was a big benefit.  I might not be fully understanding this, but are connections the performance driver here?  e.g. I have 100 edges in a connection, in order to intersect I don't want to have to traverse all 100 edges?  Or is that not how to handle the connection case anyways?

Do abstract types pose a problem for intersecting or in all cases does Relay have the type information required stored in the store?
",eyston,2016-09-03 00:35:43
973,2016-03-22 13:45:15,"@eyston if I follow this correctly, @wincent is saying that the query resolvers (basically Relay Containers, and Relay Routes, I think?) would take over from what the current query tracker does. This wouldn't change the behaviour of intersection since the query tracker essentially just stores the fragments registered by those containers/routes. So even in the case of a `null` record, those resolvers are still observing that node, so when asked to do so they could return the same fragments a query tracker would have.

My main question about the implications of this would be related to the ""query resolver"" lifecycle. As I understand it, those observers register/deregister when the containers mount/unmount. Therefore, it's quite likely that a container would mount, fetch a node, then unmount. The node remains in the store, and then is mutated later. In this scenario, this mutation wouldn't have access to the container's query, right? So in theory the node might not be refetched; how does the store ""remember"" that the node data might be stale and should be refetched before another container attempts to render it?
",NevilleS,2016-09-03 00:35:43
973,2016-03-22 15:54:09,"Hi @NevilleS ... I didn't want to tag you because I'm unsure if that is rude or not (I felt bad tagging en_js for example) but clearly I should have :)

And yah, your second paragraph is exactly my question.
",eyston,2016-09-03 00:35:43
973,2016-03-22 16:13:46,"Phenomenal questions! 

>  If in (1) you are intersecting the fat query I'm not sure what (2) does 

@eyston Step 1 ensures that records in the store that _could_ be affected by the mutation are marked as stale (regardless of whether they will be refetched in step 2). Step 2 ensures that records affected by the mutation that are _actively being viewed_ are refetched immediately. 

> So in theory the node might not be refetched; how does the store ""remember"" that the node data might be stale and should be refetched before another container attempts to render it?

@NevilleS This gets at the same thing @eyston is wondering about with step 1 - how do we _know_ to mark something as stale without a query resolver? There are a few options that we're still exploring: changing the diff algorithm to be more conservative (perhaps diffing at a more coarse-grained level) or requiring that fat queries be specific enough that intersecting the fat query with the store would invalidate all possibly-changed records. 
",josephsavona,2016-09-03 00:35:43
973,2016-03-22 16:18:26,"What does being ""marked as stale"" mean, in practice? Does this cause a refetch before another container attempts to query that data?
",NevilleS,2016-09-03 00:35:43
973,2016-03-22 16:35:26,"""Marked as stale"" is updating the cache such that future queries won't be diffed against those fields and they will be refetched in full. The simplest implementation today is to move records/fields from `nodeData` (diffed against) to `cachedData` (not diffed against). By keeping the fields in the cache somewhere (instead of immediately removing them) Relay can serve stale data while fresh data is being fetched.
",josephsavona,2016-09-03 00:35:43
973,2016-03-22 16:37:48,"OK, got it - but existing containers that have already rendered won't necessarily refetch that data, and will continue to render stale info until a new container mounts that refetches any shared fields...?
",NevilleS,2016-09-03 00:35:43
973,2016-03-22 16:49:34,"not 100% sure I'm following :)
- the current behavior is able to send a single query for everything tracked in the store
- an alternative behavior is to send a single query for everything actively being viewed, and refetch stale records as they become active
",eyston,2016-09-03 00:35:43
973,2016-03-22 17:43:32,"> existing containers that have already rendered won't necessarily refetch that data, and will continue to render stale info

Data for actively mounted components that could be affected by the mutation is queried immediately as part of the mutation query - this is step 2. Stale data would only be encountered if a _new_ component was mounted - it would see stale data while refetching fresh data.

Note that the mutation would still essentially construct a mutation query as it does today; the main difference is that tracked queries are determined lazily.
",josephsavona,2016-09-03 00:35:43
973,2016-03-22 17:46:38,"OK, got it - marking data as ""stale"" alone isn't a solution; the mutation query still needs to correctly refetch anything that is currently being rendered in order to avoid rendering incorrect data.

The reason I ask about the behaviour of ""stale data"" (since I didn't realize the Store had such a distinction) was more about #978 
",NevilleS,2016-09-03 00:35:43
973,2016-03-22 18:05:29,"> Note that the mutation would still essentially construct a mutation query as it does today; the main difference is that tracked queries are determined lazily.

The same algorithm, but with the 'tracked queries' being via the active 'query resolvers' vs a history?
",eyston,2016-09-03 00:35:43
973,2016-03-22 18:53:58,"> The same algorithm, but with the 'tracked queries' being via the active 'query resolvers' vs a history?

@eyston exactly
",josephsavona,2016-09-03 00:35:43
973,2016-07-01 22:24:26,"@xuorig pointed me here.

If I'm reading this issue correctly, this seems like it'd be a significant improvement in behavior as well.

If I have queried a connection with a bunch of arguments (say corresponding to querying with different names), and I need to refetch those connections, this would mean that I have an easy way to avoid refetching that connection with arguments corresponding to components that are no longer mounted.

Is that correct? Or e.g. am I misunderstanding something about the current behavior?
",taion,2016-09-03 00:35:43
973,2016-09-03 00:35:43,"Tracked queries (and fat queries, and diff queries) aren't going to be a thing in [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable), so we don't have any plans to work on this issue. Closing it to de-cruft the issue tracker a little bit. Thanks for everybody's input!
",wincent,2016-09-03 00:35:43
972,2016-03-20 23:25:22,"This came to my attention via https://github.com/relay-tools/relay-local-schema/pull/15. Recent versions of graphql-js use `null`-prototype objects for maps, which leads to the `payload.hasOwnProperty` call below failing when directly feeding the output of in-process graphql-js into Relay (e.g. with relay-local-schema).

I felt that it was trivial enough to just make this little patch here.
",taion,2016-03-22 20:10:34
972,2016-03-22 17:47:23,"Thanks, @taion. Looks reasonable. Will import.
",wincent,2016-03-22 20:10:34
972,2016-03-22 17:47:28,"@facebook-github-bot import
",wincent,2016-03-22 20:10:34
972,2016-03-22 17:47:42,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/446029832269841/int_phab) to review.
",facebook-github-bot,2016-03-22 20:10:34
971,2016-03-20 20:28:15,"Say I have a query with two root fragments: 

<S_CODE_TOKEN>

One of them takes very long to resolve, another resolves very quickly. I would be happy to render the component partially once the graphql response for the first query is there, but instead Relay is waiting for all the data to arrive for first render.

Is there a way to render component on partial query response?
I saw `getFragment().defer()` in the source code, which seems to be accomplishing similar goal, but it's not currently supported in OS version.
",anytimecoder,2016-03-21 18:08:02
971,2016-03-20 20:34:23,"Thanks for asking. You're right that `defer` isn't currently supported by the default open-source network layer. However, a similar behavior can be achieved using the `@include` directive and `setVariables` function. The basic idea is that you would conditionally skip the expensive field:

<S_CODE_TOKEN>

And then in the component's `componentDidMount` you can call `setVariables({isMounted: true})` to fetch the expensive data. This isn't _quite_ as optimal as deferred (the data isn't fetched until after mount), but it works fairly well in most cases.
",josephsavona,2016-03-21 18:08:02
971,2016-03-20 20:50:12,"Thanks for quick response! It's something to work with, but say if I have five `expensiveField` type of data that I start loading after component is mounted, I would still get them all at the same time, right? Ideally I'd like to show them as they arrive.
",anytimecoder,2016-03-21 18:08:02
971,2016-03-21 17:10:05,"Yes, the approach I outlined would return all fields marked as conditional at the same time. A more complete version of what you're describing is the `defer` attribute, which we're tracking in #288. What do you think about closing this issue and consolidating discussion there?
",josephsavona,2016-03-21 18:08:02
971,2017-02-10 03:30:48,"yeah..I used the same approach in my project. Glad that I'm using the 'Official' way!

the drawback is that we will have lots of boilerplate code which I tried to avoid. I still think that deferred query is the right way to go. I'll keep an close eye on this issue

",bochen2014,2016-03-21 18:08:02
970,2016-03-19 15:06:29,"I would be great have some guidelines on how to make tests when using relay. 
I suggest adding tests to at least the todoMVC example so people like myself can get an idea on how to go about doing tests.
",note89,2016-05-10 16:23:31
970,2016-03-19 16:44:24,"This is a good idea - though it isn't immediately clear exactly what the tests would demonstrate. The best way to proceed here is probably to submit a pull request that demonstrates the general shape of the tests you think would be useful, and we and the community can help fill in details about how to implement them. 
",josephsavona,2016-05-10 16:23:31
970,2016-05-10 16:23:31,"We're open to this, but we aren't likely to get to ourselves. Feel free to submit a PR though!
",josephsavona,2016-05-10 16:23:31
969,2016-03-19 02:44:31,"Add re:Culture as user of relay

re:Culture has been an early user of Relay; we wrote the first Rails/RelayGraphQL article, and contributed the first Rails/Relay starter kit, and also contributed to Relay/GraphQL articles, presentations, videos (not exhaustive list):
- https://github.com/nethsix/relay-on-rails
- https://medium.com/p/relay-facebook-on-rails-8b4af2057152
- https://youtu.be/YFuQlKBXlmA
- http://www.slideshare.net/KhorSoonHin/tokyo-reactjs-3-missing-pages-reactjsfluxgraphqlrelayjs
- http://www.slideshare.net/KhorSoonHin/from-back-to-front-rails-to-react-family
",nethsix,2016-03-19 23:10:32
969,2016-03-19 02:47:31,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-03-19 23:10:32
969,2016-03-19 22:16:41,"Awesome, thanks for this! And thanks for all your contributions.
",yungsters,2016-03-19 23:10:32
969,2016-03-19 22:16:44,"@facebook-github-bot shipit
",yungsters,2016-03-19 23:10:32
969,2016-03-19 22:19:19,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1132246656826404/int_phab) to review.
",facebook-github-bot,2016-03-19 23:10:32
968,2016-03-18 23:54:56,"I have been constantly getting the error `Error: TypeError: Object  has no method 'find'` and can't seem to understand this `Relay Transform Error` for days now. Tried all combinations. My GraphQL is setup and working (tested on Graphiql), but this is really confusing me.

<S_CODE_TOKEN>
",varunarora,2016-04-01 01:30:32
968,2016-03-19 01:04:10,"On the slightest amount of digging in, this seems to be because the line 143 in RelayQLast tries to call `find` on an Array, which seems to be an ES2015 thing (or what I figured from the MDN page for `.find`). The rest of the modules seem to clearly be for ES5. Is that right?
",varunarora,2016-04-01 01:30:32
968,2016-03-21 17:43:45,"Could it be that you're running a pretty old version of Node? Could you post the results of

<S_CODE_TOKEN>
",kassens,2016-04-01 01:30:32
968,2016-03-25 06:35:34,"NPM version is 1.3.10, and node version is v0.10.25
",varunarora,2016-04-01 01:30:32
968,2016-03-31 22:37:08,"Relay relies on ES6 features so you would need to polyfill these in 0.x versions of Node. 
Babel got a good one: https://babeljs.io/docs/usage/polyfill/
",edvinerikson,2016-04-01 01:30:32
968,2016-03-31 23:18:23,"This is a bug - the plugin is intended to work in older environments without a polyfill. We should be using the `find` helper (required at the top of the file) instead of calling `arr.find`. 

cc @kassens 
",josephsavona,2016-04-01 01:30:32
967,2016-03-18 17:30:57,"Relay currently applies the results of queries, mutations, and subscriptions by traversing the query and payload in parallel. The payload cannot be processed in isolation because it lacks sufficient context - for example, consider the following payload:

<S_CODE_TOKEN>

What does `friends.edges` signify? It could be a plain `List[Friend]`, it could be the `first: 10` friends in a connection, or it could be the `first: 10, after: foo` - a pagination result that should be _merged_ with any existing edges. Currently, a payload can _only_ be interpreted correctly in the context of a query. This process isn't optimal: a given field such as `id` may be queried multiple times by sibling fragments, and therefore has to be repeatedly processed. Further, the same object may appear multiple times in the response payload (e.g. the same person authored multiple `comments`), again causing duplicate processing.
## Goals

The primary goal of this proposal is to define **a data format that can be efficiently applied to a normalized client-side cache**.  The format should be capable of describing _any_ change that could be applied to a normalized object graph: i.e. both the results of queries as well as mutations and subscriptions. 

Specifically, we have found the following characteristics to be important to ensure efficient processing of query/mutation results:
- Normalized data: avoiding duplication of data in the response reduces the time spent processing it.
- Data-driven: queries themselves may have duplication (i.e. the same fields may be queried numerous times by sibling or nested fragments). The payload should be self-describing in order to reduce duplicate effort in processing.
- First-class support for describing partial results, e.g. to allow pagination without loading all items of a list up-front.

Non-goals include:
- Reducing byte-size over the wire in server -> client communication. 
- Defining a fully generic data response format. This proposal is specifically targeted at describing changes to a normalized object graph with the capabilities necessary for typical client-side applications.
## Specification Strawman

We're still figuring this out, but we'd prefer to develop this specification in the open and with input from the community. We'll continue to update this as we iterate, but here's a commented example with Flow annotations:

Example Query:

<S_CODE_TOKEN>

Standard ""Tree"" Response:

<S_CODE_TOKEN>

GraphMode Response:

<S_CODE_TOKEN>

Where the shape of the response is:

<S_CODE_TOKEN>
## Next Steps
- [ ] Implement proof-of-concept GraphMode response handler and use it in some real applications.
- [ ] Refine the specification.
- [ ] Use GraphMode for handling existing operations:
  - [ ] Transform and apply query payloads via GraphMode.
  - [ ] Transform and apply mutation & subscription responses via GraphMode.
- [ ] Expose a public method on `RelayEnvironment` for applying GraphMode payloads to the store (as part of #559).
",josephsavona,2016-11-15 21:47:10
967,2016-03-18 17:39:57,"In your example I think you have `employees` and `friends` intermixed. I think you just mean `friends` everywhere, right?
",wincent,2016-11-15 21:47:10
967,2016-03-18 17:52:03,"An important aspect of this is that we don't have redundant data.  Imagine this query:

<S_CODE_TOKEN>

The result tree will have lots of duplicates, since my cousins have me as a cousin, and most have each other as cousins.  In Graph Mode, we'll only have a single instance of each User.
",craffert0,2016-11-15 21:47:10
967,2016-03-18 18:02:53,"> An important aspect of this is that we don't have redundant data.

Surprisingly perhaps not quite as important as you may think, because gzip ends up eating up the redundancy for breakfast.
",wincent,2016-11-15 21:47:10
967,2016-03-18 18:18:42,"Sorry if I'm missing this part but would GraphMode require MutationConfig for adding edges or that information could be captured in GraphMode itself?
",eyston,2016-11-15 21:47:10
967,2016-03-18 18:23:17,"> would GraphMode require MutationConfig for adding edges or that information could be captured in GraphMode itself?

@eyston Great question - the idea is GraphMode could describe mutations w/o any additional config. For example a range add might be described with:

<S_CODE_TOKEN>
",josephsavona,2016-11-15 21:47:10
967,2016-03-18 19:52:57,"What is this...Falcor?!?!?

:trollface: 
",skevy,2016-11-15 21:47:10
967,2016-03-18 20:13:47,"Another question -- would non-node objects be embedded?  e.g.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

kind of like no `$type` means interpret literally?
",eyston,2016-11-15 21:47:10
967,2016-03-18 20:18:53,"@eyston yes, id-less records are inline 
",josephsavona,2016-11-15 21:47:10
967,2016-03-20 20:14:14,"After discussion with @leebyron I started looking for ways to avoid the special `$type/$data` keys. The main challenge is that connections simply can't be handled as-is: `edges` almost never just replaces the local edges and always requires some custom processing. A similar constraint holds for root fields, which are currently handled specially.

Here's an example query that demonstrates these challenges and an updated proposal for the data format:

<S_CODE_TOKEN>

The results could be described using operations similar to those in [JavaScript Object Notation (JSON) Patch](https://tools.ietf.org/html/rfc6902) but with semantics specifically tailored to describing GraphQL/Relay object graphs:

<S_CODE_TOKEN>

Note that the `add` operation does not include the `friends` field on record 123, because no scalar fields are fetched. The data for the `friends` field is supplied in a subsequent `connection` operation.

EDIT: I updated the issue description with a modified version of this proposal.
",josephsavona,2016-11-15 21:47:10
967,2016-03-21 04:52:44,"sorry, more questions...
- Where do you envision the translation from GraphQL query + payload into GraphMode happening?
- Any thoughts on how this affects tracking queries -- or is that not related at all?  When I say tracking I'm thinking about two scenarios which may not really be tracking (I am hazy on this part of Relay): diff'ing a query and intersecting the fat query.  For diff'ing a query isn't type information necessary due to polymorphic fields?  For instance just because field `age` is in the store doesn't mean `... on User { age }` is satisfied by the store? or maybe it does?  And the second thing is the fat query -- if I insert data directly into the store without the corresponding query wouldn't it be at risk of not being considered intersecting the fat query which could lead to stale data?

thanks!
",eyston,2016-11-15 21:47:10
967,2016-03-21 16:45:12,"> Where do you envision the translation from GraphQL query + payload into GraphMode happening?

For the foreseeable future this transform would happen on the client, possibly on another thread.

> Any thoughts on how this affects tracking queries -- or is that not related at all? ... if I insert data directly into the store without the corresponding query wouldn't it be at risk of not being considered intersecting the fat query which could lead to stale data?

Yes, inserting data w/o a query could lead to stale data with the _current_ approach to diffing and mutations. To prevent this, initially only Relay internals will use GraphMode, and we will use a pre/post traversal to update tracked queries along with every payload. We're also exploring an alternate approach to constructing mutation queries that avoids the need to store tracked queries.
",josephsavona,2016-11-15 21:47:10
967,2016-03-21 16:59:25,"> operations _similar_ to those in [JavaScript Object Notation (JSON) Patch](https://tools.ietf.org/html/rfc6902) but with semantics specifically tailored to describing GraphQL/Relay object graphs

I'm a bit worried about the potential confusion caused by making something that is similar-but-still-different. What's the value of getting rid of `$data`/`$type` special keys (but still keeping `$ref`) if it's only to move to something that isn't actually JSON Patch? We've gotten rid of two special keys, but only at the cost of adding two custom `op` values.
",wincent,2016-11-15 21:47:10
967,2016-03-21 17:05:33,"> We're also exploring an alternate approach to constructing mutation queries that avoids the need to store tracked queries.

I'm interested in this if you get to the point of something to share.
",eyston,2016-11-15 21:47:10
967,2016-03-21 18:00:50,"> I'm interested in this if you get to the point of something to share.

@eyston So as not to crowd this issue, I've written something up in #973.
",wincent,2016-11-15 21:47:10
966,2016-03-18 14:35:52,"I'm curious what you guys think of combining `Routes` and `RootContainer` into just one component.

It often is the case that most Relay pages / apps have a top level element that handles the initial entry point of Relay. This top level element is typically always paired with a specific route, and requires a `RootContainer` or `RelayRenderer` to work. As @ianstormtaylor has mentioned in https://github.com/facebook/relay/issues/822, the `Routes` / `RelayQueryConfig` concept is very lightweight and feels almost like a dangling object that needs to coexist with other things.

I know that containers are meant to be composable anywhere, but given that there often is this top level element in practice, I was wondering if we can get rid of the complexity of these concepts and just have a root component that combines these together. The root component can also take care of handling error states, if they're passed in as props:

<S_CODE_TOKEN>

This goes a step short of making this enabled for all relay containers (so `StarWarsPageContainer` is still composable just like any other component), but introduces a distinction that it's possible to compose a top level element into an initial entry point for Relay. It also gets rid of a few concepts that I hope would be a simplification for everyone :).
",dougli,2016-07-06 17:21:26
966,2016-03-18 15:11:14,"This idea came up in internal discussion too. CC'ing some of the participants in case they want to respond: @devknoll, @yungsters, @cpojer, @joshduck, @sahrens, @josephsavona, @elynde.

(If nobody chimes in, I'll try and summarize the thread later on.)
",wincent,2016-07-06 17:21:26
966,2016-03-18 15:48:09,"Yeah, this bubbled up internally too in P56213804. @josephsavona suggested I toss it here.
",dougli,2016-07-06 17:21:26
966,2016-03-18 16:17:46,"Thanks for moving the discussion here so the community can participate (this started as an internal discussion). Overall I agree that a higher-level component along the lines of your proposal could be useful in certain situations. This is a great example of something that should be possible (and not too difficult) to build in user-land after we've completed the [Relay Core API in #559](https://github.com/facebook/relay/issues/559). 

> It often is the case that most Relay pages / apps have a top level element that handles the initial entry point of Relay

This is a common pattern (let's call it one-root-per-page), but it isn't the only approach to handling top-level views. Many apps use a router such that there is one fixed `RelayRootContainer` that is mounted once and whose `Component` and `queryConfig` props change depending on the active route. See [`react-router-relay`](https://github.com/relay-tools/react-router-relay#usage) for examples of this pattern.

> I know that containers are meant to be composable anywhere, but given that there often is this top level element in practice, I was wondering if we can get rid of the complexity of these concepts and just have a root component that combines these together.

Here too, some containers that are rendered at the top-level may be reused as sub-containers elsewhere and some may not. Requiring _every_ container to implement handling for loading states and errors would introduce an unnecessary burden on developers - as you point out, there is something special about the root component.

The existing APIs - `RelayRootContainer`, `RelayContainer`, and query configs - are designed to be put together in different ways to support both the fixed root with routing, one-root-per-page, server rendering, etc. We've also separated the concerns of dealing with loading data (root containers) from rendering data once it's available (containers).

That said, it's clear that a merged query config + data fetcher + root container style API could be quite useful. At this point _most_ of what's necessary to implement this in user-land is exposed via the `RelayEnvironment` API (not yet public). I'd encourage you to submit a PR demonstrating the implementation of the `RootComponent` API, and let us know what (currently internal) methods you'd need on `RelayEnvironment` to make it feasible. We can use this to help flush out the API in #559. 

Note: I suspect you'll end up needing `getRelayQueries` and `RelayFragmentPointer.createForRoot`.
",josephsavona,2016-07-06 17:21:26
966,2016-03-18 16:25:16,"One additional thought: what if the API for the `RootContainer` was something like:

<S_CODE_TOKEN>

i.e., make this a higher-order component instead of sub-subclassing `React.Component`.
",josephsavona,2016-07-06 17:21:26
966,2016-03-19 04:22:48,"Our initial reasoning behind this was that we envisioned a single application component that would conditionally compose sub components. For example an `<App />` component may compose `<Chrome />` as well as either `<ProfilePage />`or `<InboxPage />` content depending on the current URI. 

This isn't incompatible with the initial suggestion. But it does mean that <App /> has to be aware of all possible root fields (which is currently the case) _and_ when to fetch those fields _and_ how to populate the properties of the fields. 

This becomes difficult when you consider that a root fields might have different meanings depending on the route. For example `/me` might require the fields `user(id: $currentID) { ... }` and `/profile/foo` might require `user(id: $paramID) { ... }`. Very quickly the `<App />` root component accumulates logic that covers every single route that could be loaded. 

This could be overcome if you had a root component per route, e.g. `<ProfileRoot />` and <InboxRoot /> and each root composed `<Chrome />`. But then you get into weirdness if you want to persist parts of the chrome, because React reconciliation won't try to preserve the underlying component. 
",joshduck,2016-07-06 17:21:26
966,2016-03-19 04:24:12,"@mroch has a lot of context on this, too. 
",joshduck,2016-07-06 17:21:26
966,2016-03-21 21:17:27,"I'm marking this as ""help wanted"" - the general direction is promising, but this seems like a prime candidate for something that should be achievable given #559. The best step is probably for someone to try implementing it, figure out what public API is missing to support this and then build that API as part of #559.
",josephsavona,2016-07-06 17:21:26
966,2016-03-22 02:02:15,"I can take a stab at it when I have time, after I come back from vacation :).

> On 22 Mar 2016, at 05:17, Joseph Savona notifications@github.com wrote:
> 
> I'm marking this as ""help wanted"" - the general direction is promising, but this seems like a prime candidate for something that should be achievable given #559. The best step is probably for someone to try implementing it, figure out what public API is missing to support this and then build that API as part of #559.
> 
> ―
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
",dougli,2016-07-06 17:21:26
966,2016-07-06 17:21:26,"Because of the progress that's been made developing `Relay.Renderer` and the soon-to-be-public `Relay.QueryConfig`, let's close this out. Thanks for the discussion everyone! It helped move us in the right direction.
",steveluscher,2016-07-06 17:21:26
965,2016-03-18 10:20:32,"#### Code and the comment below included in this [Gist](https://gist.github.com/ericallam/51ae9fbd654d8b692bff)

I'm having trouble figuring out how to get Relay + React Native's navigator component to work together. This uses navigator to show a list of ""Matchdays"" related to the current season of Premier League football. When the user taps on a matchday item, I want to navigate them to a list of Matches related to that single matchday. As you can see in MatchdayList.handleItemPress I'm using navigator.push to navigate to the MatchList, and passing in the single matchday in the route as is the practice with React Native's navigator.

The problem is when the MatchList is rendered, Relay displays the warning:

<S_CODE_TOKEN>

If I update the App.renderScene method to pass in the matchday as a prop to the component, I get a similar but different warning:

<S_CODE_TOKEN>

The problem seems to be that in Relay's model, MatchList should be a child to MatchdayItem? That way it would be able to resolve the GraphQL query to next the MatchList fragment inside the single Matchday record?

But with Navigator, when MatchList is pushed into the stack, it replaces the existing MatchdayList component, leaving Relay confused as to the hierarchy of the components and thus the GraphQL structure it needs to build.

Are there any facilities in Relay to fix this problem? Like, for example, a way to specify the Relay context for the `MatchList` component, so Relay can tell that is should be nested inside a single Matchday item?
",ericallam,2016-03-18 16:36:21
965,2016-03-18 13:42:47,"Thanks for such a well-documented issue. I noticed that the gist doesn't appear to make use of RealayRootContaineror any ""query configs"" (RelayRoute) - this is required at the top of a Relay component tree in order to ensure that data is fetched for all the components in the tree. It also passes the correct props to the top component. 

Generally with RN Navigators you would have one RelayRootContainer & route per distinct screen in the app (one for the outer list, one for the item page). Does this help?
",josephsavona,2016-03-18 16:36:21
965,2016-03-18 15:44:54,"@josephsavona thanks for the response! You are right, I was missing the RootContainer and the Route at the top of the component tree, I just forgot to include them in the gist (I've updated the gist to include these files now). 

I've followed your advice and have Relay + RN Navigators working! I've updated the Gist I linked to above in case anyone is curious how how I got it to work.
",ericallam,2016-03-18 16:36:21
965,2016-03-18 16:36:21,"@ericallam Great, glad that helped. Thanks for the follow-up - i'll go ahead and close the issue but will share the gist.
",josephsavona,2016-03-18 16:36:21
964,2016-03-18 09:15:42,,chentsulin,2016-03-18 18:45:26
964,2016-03-18 17:02:56,"@facebook-github-bot import
",kassens,2016-03-18 18:45:26
964,2016-03-18 17:03:15,"Thanks!
",kassens,2016-03-18 18:45:26
964,2016-03-18 17:05:20,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/764611163675876/int_phab) to review.
",facebook-github-bot,2016-03-18 18:45:26
963,2016-03-18 00:42:56,,kassens,2016-03-18 03:00:33
963,2016-03-18 00:43:21,"@facebook-github-bot shipit
",kassens,2016-03-18 03:00:33
963,2016-03-18 00:50:26,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/465337543669465/int_phab) to review.
",facebook-github-bot,2016-03-18 03:00:33
962,2016-03-17 19:06:40,"Would you consider providing UMD builds of `babel-relay-plugin` and `graphql-js`? These UMD builds, along with [`babel-standalone`](https://github.com/Daniel15/babel-standalone), will make Relay a viable tool in non-Node environments. It will also partially address https://github.com/facebook/relay/issues/828 without the need for refactoring `babel-relay-plugin`.
",DomKM,2016-12-20 17:52:00
962,2016-12-20 17:52:00,We'll consider this going forward. For now we're iterating on the core quite a bit and it's probably best to revisit after things calm down.,josephsavona,2016-12-20 17:52:00
961,2016-03-17 04:30:03,"The awesome codemod to rename var into let broke the website as it wasn't using 'use strict';. Adding it to the files fixes it :)
",vjeux,2016-03-17 20:10:31
961,2016-03-17 05:33:03,"lgtm, if you want to import or shipit.
",kassens,2016-03-17 20:10:31
961,2016-03-17 13:13:06,"@facebook-github-bot shipit
",vjeux,2016-03-17 20:10:31
961,2016-03-17 13:21:28,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1586154491711426/int_phab) to review.
",facebook-github-bot,2016-03-17 20:10:31
960,2016-03-17 03:05:54,,kassens,2016-03-17 18:45:58
960,2016-03-17 03:06:02,"@facebook-github-bot shipit
",kassens,2016-03-17 18:45:58
960,2016-03-17 03:08:11,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1685507138393918/int_phab) to review.
",facebook-github-bot,2016-03-17 18:45:58
959,2016-03-17 02:37:39,,kassens,2016-03-17 03:50:30
959,2016-03-17 02:37:46,"@facebook-github-bot shipit
",kassens,2016-03-17 03:50:30
959,2016-03-17 02:41:39,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/501684733352868/int_phab) to review.
",facebook-github-bot,2016-03-17 03:50:30
958,2016-03-17 00:32:56,,kassens,2016-03-17 03:16:01
958,2016-03-17 00:33:02,"@facebook-github-bot import
",kassens,2016-03-17 03:16:01
958,2016-03-17 00:35:28,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/206003749762337/int_phab) to review.
",facebook-github-bot,2016-03-17 03:16:01
957,2016-03-16 23:44:20,"Flow now know to keep refinements inside callbacks if there are no assignments.
",kassens,2016-03-17 03:40:26
957,2016-03-16 23:44:24,"@facebook-github-bot import
",kassens,2016-03-17 03:40:26
957,2016-03-16 23:46:17,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/565380626955285/int_phab) to review.
",facebook-github-bot,2016-03-17 03:40:26
956,2016-03-16 20:02:22,"cc @yungsters 
",cpojer,2016-03-16 21:35:30
956,2016-03-16 20:03:59,"@facebook-github-bot import
",cpojer,2016-03-16 21:35:30
956,2016-03-16 20:06:29,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1981835998707290/int_phab) to review.
",facebook-github-bot,2016-03-16 21:35:30
955,2016-03-16 07:35:48,"Currently the documentation website adapts to mobile screens, but some layout looks broken:
- Navigation items ""fall out"" from the nav wrapper;
- Marketing columns' text is center-aligned, but columns themselves are not centered;
- Buttons-unit buttons have no space between them when stacked on top of each other.

This commit fixes the issues.
Screenshots to compare:

![relay_compare_1](https://cloud.githubusercontent.com/assets/5347023/13805026/bc17f6f0-eb62-11e5-9452-6cc5894a26cf.png)

![relay_compare_2](https://cloud.githubusercontent.com/assets/5347023/13805030/c3773ae6-eb62-11e5-8067-6b2dd68425c0.png)
",everdimension,2016-03-18 15:55:30
955,2016-03-16 07:49:37,"resubmission of https://github.com/facebook/relay/pull/946
",everdimension,2016-03-18 15:55:30
955,2016-03-16 22:10:12,"Thanks for this, @everdimension!
",wincent,2016-03-18 15:55:30
955,2016-03-16 22:10:32,"@facebook-github-bot import
",wincent,2016-03-18 15:55:30
955,2016-03-16 22:16:23,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/609541152528372/int_phab) to review.
",facebook-github-bot,2016-03-18 15:55:30
954,2016-03-15 23:04:18,"I'd wanted to include this in 08acc7922847a but apparently my Git fu failed me.
",wincent,2016-03-16 23:20:28
954,2016-03-15 23:04:25,"@facebook-github-bot import
",wincent,2016-03-16 23:20:28
954,2016-03-15 23:09:07,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1024471040945000/int_phab) to review.
",facebook-github-bot,2016-03-16 23:20:28
953,2016-03-15 04:51:58,"There is some broken integration between the Babel 6 plugins in `fbjs-scripts` and the transform tests in the `babel-relay-plugin`. For now, I am going to reduce the scope of the `babel-relay-plugin` tests until we're fully upgraded to Babel 6. This revision should fix the breaking tests in master.
",yungsters,2016-03-15 18:15:35
953,2016-03-15 04:52:03,"@facebook-github-bot import
",yungsters,2016-03-15 18:15:35
953,2016-03-15 04:56:03,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/231941833822110/int_phab) to review.
",facebook-github-bot,2016-03-15 18:15:35
952,2016-03-14 21:19:46,"For consistency, and to eliminate potential confusion, let's make sure we always refer to the `RelayEnvironment` as an environment and not a context.
",wincent,2016-03-15 19:55:32
952,2016-03-14 21:41:17,"Travis is too slow. Importing anyway.
",wincent,2016-03-15 19:55:32
952,2016-03-14 21:41:22,"@facebook-github-bot import
",wincent,2016-03-15 19:55:32
952,2016-03-14 21:47:15,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/543887949123822/int_phab) to review.
",facebook-github-bot,2016-03-15 19:55:32
951,2016-03-14 18:41:25,"i cant get the example to run
i am on linux ubuntu 15.10

<S_CODE_TOKEN>
",divramod,2016-05-27 06:54:00
951,2016-03-15 15:35:46,"Strange! I just pulled a fresh copy of Relay from GitHub, performed the following steps, and got [the following output](https://gist.github.com/steveluscher/fbb4fb4872711411893d). Can you do the same and paste your output?

<S_CODE_TOKEN>
",steveluscher,2016-05-27 06:54:00
951,2016-03-15 15:53:49,"the same

<S_CODE_TOKEN>
",divramod,2016-05-27 06:54:00
951,2016-03-15 16:06:26,"I had analogously problem a week ago.
Solved by editing `relay/examples/todo/package.json` - need replace relative packages on it npm version:

<S_CODE_TOKEN>
",nodkz,2016-05-27 06:54:00
951,2016-03-26 16:40:18,"I think the problem is that the local reference (`""babel-relay-plugin"": ""file:../../scripts/babel-relay-plugin/""`) to the babel-relay-plugin is triggering the `babel-relay-plugin/package.json` scripts before the example's `scripts.preinstall`. Maybe due to the npm version? Am using 3.7.3.

Replacing the relative packages works, and another option is to run the preinstall script first

<S_CODE_TOKEN>
",guzart,2016-05-27 06:54:00
951,2016-04-01 01:42:53,"Duplicate of https://github.com/facebook/relay/issues/906
",edvinerikson,2016-05-27 06:54:00
951,2016-05-27 06:54:00,"I cleaned up the examples for the release of [0.9.0](https://github.com/facebook/relay/releases/tag/v0.9.0). Give them a try!

I tried (on OS X):

<S_CODE_TOKEN>

…and had success. [Here was the output](https://gist.github.com/steveluscher/ac88aaaa340c6f92c6cca611ec31e2c0). This was with npm v2.14.12 and Node v4.2.6.

If you experience trouble that I didn't, please do open an issue with your npm/Node versions and your output. Thanks for helping to keep the examples healthy everyone!
",steveluscher,2016-05-27 06:54:00
951,2016-05-27 11:17:29,"We're in the middle of a little bit of a revert/unrevert situation, so if anyone wants to try the examples in the next 24 hours or so be sure to check out the v0.9.0 tag:

<S_CODE_TOKEN>
",steveluscher,2016-05-27 06:54:00
950,2016-03-14 18:28:19,"Fixes printing of the fixtures so that ""pretty printing"" is preserved.

This will tie us over until #944 is ready to be merged.
",yungsters,2016-03-15 00:15:37
950,2016-03-14 21:05:06,"@facebook-github-bot import
",yungsters,2016-03-15 00:15:37
950,2016-03-14 21:09:16,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/573625732787585/int_phab) to review.
",facebook-github-bot,2016-03-15 00:15:37
949,2016-03-14 17:22:50,"Let's say you have one component displaying a list based on a connection with arguments e.g: 

<S_CODE_TOKEN>

You also have a mutation, `AddIceCreamFlavours`, that adds multiple edges to that connection in a single go, with a FIELDS_CHANGE mutation on `iceCreamParlour`, in which case our fat query looks like this:

<S_CODE_TOKEN>

The problem is that the connection field returned by the server, e.g `_iceCreamFlavours238yz9` is not going to match the ID of the connection field with the `onlyWithChocolate` and `noAddedPreservatives` arguments present, and so now the new flavours added by our mutation aren't going to be present, and therefore not visible to our users.

Is there any way around this, or is this something that will be tackled by #538?
",sgwilym,2016-03-14 20:35:58
949,2016-03-14 20:35:58,"Thanks for this, @sgwilym!

Related: #783 (multi-insert support) and #766 (mutations limited by only returning a single edge and cursor).

I think #538 will be the imminent relief for you here. I am currently implementing a lower-level mutations API that can be used to manually force the desired updates to take place when the current vanilla/auto-magic approach falls down. The idea is that the current API can be placed as a layer on top of the low-level API, but that you will also have the option of accessing the low-level API yourself to do any stuff that doesn't fall into the standard patterns that the high-level API supports.

Going to close this one for now as I think the need you've expressed here is already covered in those other issues.
",wincent,2016-03-14 20:35:58
948,2016-03-14 09:11:46,"https://github.com/facebook/relay/blob/712f4b683cfed3cae61a201b39936803bc6fbd41/examples/TodoMVC/components/TodoList.js#L34

<S_CODE_TOKEN>

when perform a mutation, `__dataID__` wouldn't change, so we can not see the updates when using ListView
",filod,2016-03-14 13:42:03
948,2016-03-14 10:33:34,"Relay returns the same objects if there are no changes, and a new object when there are changes. I.e. If `prevProps.foo === nextProps.foo` there are no changes, if `!==` then something has changed. This is also true for nested items, so you can compare prev/next sub-objects or array items. 

In summary: just compare 

<S_CODE_TOKEN>
",josephsavona,2016-03-14 13:42:03
947,2016-03-13 11:30:47,"When making a mutation should the 'fat query' not come from the server as it's the server that knows what might change?
",gilesbradshaw,2016-03-14 22:09:51
947,2016-03-13 19:49:32,"Ideally, yes. When we first introduced fat queries (pre open source) we felt that there would be advantages to doing it that way. The client still needs to know the query, however, because only the client can do anything useful with the fat query (like intersect it with the tracked query), so it would need to download it anyway. As such, we haven't given priority to moving this server-side, as there are other more useful and urgent things that we can do to improve mutations (for example, right now I am working or synthesizing tracked queries lazily rather than building them up ahead of time; this will save us a bunch of memory and make other operations which previously had to update the tracked queries faster and simpler too, at the cost of some complexity in the synthesis).
",wincent,2016-03-14 22:09:51
947,2016-03-13 21:14:49,"Thanks a lot for this answer :)
",gilesbradshaw,2016-03-14 22:09:51
946,2016-03-12 15:13:11,"Currently the documentation website adapts to mobile screens, but some layout looks broken:
- Navigation items ""fall out"" from the nav wrapper;
- Marketing columns' text is center-aligned, but columns themselves are not centered;
- Buttons-unit buttons have no space between them when stacked on top of each other.

This commit fixes the issues.

Not sure if modifying the `./css/relay.css` file directly is the correct way, but if it's not, please point me in the right direction.
",everdimension,2016-03-16 07:37:19
946,2016-03-14 20:26:06,"Thanks for this @everdimension. Can you resubmit please against [this file](https://github.com/facebook/relay/blob/master/website/src/relay/css/relay.css) in the master branch? The website files get generated from that.

Also, any chance of a before/after screenshot, to make this easier to review?
",wincent,2016-03-16 07:37:19
946,2016-03-16 07:37:19,"@wincent 
Ok, thanks for advice! I've resubmitted the PR here: https://github.com/facebook/relay/pull/955
",everdimension,2016-03-16 07:37:19
945,2016-03-11 16:33:29," As discussed in #574, #542

Introduce 2 new range behaviors:
- `REFETCH`: Will refetch the entire connection (to squelch the warning when no `rangeBehavior` matches the tracked connection)
- `IGNORE`: Replaces using null, means the range should not be refetched at all.

I've deprecated `null`, maybe we don't need to, what do you think ?

@yungsters @steveluscher 

let me what you think! 🍻
",xuorig,2016-04-01 21:25:22
945,2016-03-11 19:37:28,"Just realised failing tests, fixing this.
",xuorig,2016-04-01 21:25:22
945,2016-03-11 19:44:03,"Looks pretty good @xuorig. Thanks for this!

I'll let it sit here for couple of days to give others a chance to comment before importing.
",wincent,2016-04-01 21:25:22
945,2016-03-11 21:13:24,"thanks for the quick review @wincent! I addressed your comments.
",xuorig,2016-04-01 21:25:22
945,2016-03-21 15:47:00,"@wincent anything I can do to see this merged :) ?
",xuorig,2016-04-01 21:25:22
945,2016-03-21 17:36:46,"I'll pull it into our internal CR system and get the ball rolling.
",wincent,2016-04-01 21:25:22
945,2016-03-21 17:36:49,"@facebook-github-bot import
",wincent,2016-04-01 21:25:22
945,2016-03-28 20:52:11,"I don't know if that worked @wincent :panda_face:
",xuorig,2016-04-01 21:25:22
945,2016-03-28 21:14:32,"That bot... I've used it to import at least a couple things today. This time I'm just going to import it manually.
",wincent,2016-04-01 21:25:22
945,2016-03-30 20:09:26,"Turns out it was an issue with Unicode in your commit (your name). I believe the import will work now, so giving it another try.
",wincent,2016-04-01 21:25:22
945,2016-03-30 20:09:30,"@facebook-github-bot import
",wincent,2016-04-01 21:25:22
945,2016-03-30 20:10:58,"Blame my parents for naming me this way :sob: 
",xuorig,2016-04-01 21:25:22
945,2016-04-01 21:32:28,"After a long saga, the import worked, code review happened, I fixed some lint warnings and nits for you and it landed. Thanks once again for contributing!
",wincent,2016-04-01 21:25:22
945,2016-04-01 21:34:32,":tada:
",xuorig,2016-04-01 21:25:22
944,2016-03-11 08:38:38,"Completely upgrades the `babel-relay-plugin` package to use Babel 6.

Depends on facebook/fbjs#135.

Also, I got rid of all extraneous package dependencies and upgraded the rest.

And for the real reason I even did all of this... `npm run update-fixtures` now preserves pretty printing.
",yungsters,2016-06-23 18:06:56
944,2016-03-14 11:43:49,"@yungsters is this blocked on something? I need it to solve https://github.com/facebook/relay/pull/943#issuecomment-195069985 - just setting `compact: false` doesn't seem to be enough.
",josephsavona,2016-06-23 18:06:56
944,2016-03-14 16:41:52,"This is blocked on facebook/fbjs#127.
",yungsters,2016-06-23 18:06:56
944,2016-04-19 01:14:24,"Now blocked on facebook/fbjs#135 instead.
",kassens,2016-06-23 18:06:56
944,2016-05-08 19:34:34,"@steveluscher do we need this anymore?
",josephsavona,2016-06-23 18:06:56
944,2016-05-08 19:41:38,"Generally I think we should be building all of our Babel transforms atop the fbjs preset, but last time I tried this it proved to be non-trivial. I think someone just needs to sit down with it, start with the fbjs preset, and add in transforms until it works.
",steveluscher,2016-06-23 18:06:56
944,2016-06-23 18:06:56,"Going to close this (spring cleaning) seeing as this is woefully stale now and won't apply, and the original motivating cause is now resolved:

> And for the real reason I even did all of this... `npm run update-fixtures` now preserves pretty printing.

Confirmed by changing a fixture, running `npm run update-fixtures` and confirming that the desired pretty printing was applied.

We can look at using the `fbjs` preset as a base separately.
",wincent,2016-06-23 18:06:56
943,2016-03-10 20:28:28,"Now that we support `@relay(isStaticFragment: true)` to denote static fragments (thanks @yungsters!), we can use the fragment name as the id for static fragments instead of a hash. This means the identifier is stable across changes to the file, making it a bit easier to work with.
",josephsavona,2016-03-17 23:25:35
943,2016-03-10 20:28:37,"@facebook-github-bot import
",josephsavona,2016-03-17 23:25:35
943,2016-03-10 20:30:03,"Why is the formatting for the fixtures all messed up?
",yungsters,2016-03-17 23:25:35
943,2016-03-10 20:47:18,"> Why is the formatting for the fixtures all messed up?

Babel version change? Let me `rm -rf node_modules` and see what happens.
",josephsavona,2016-03-17 23:25:35
943,2016-03-10 20:56:36,"@yungsters i completely removed both node_modules directories and reinstalled - this is what i'm getting after `npm run update-fixtures`. Maybe a default setting changed in babel?
",josephsavona,2016-03-17 23:25:35
943,2016-03-10 21:01:59,"@facebook-github-bot import
",josephsavona,2016-03-17 23:25:35
943,2016-03-10 21:08:32,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/508902915959589/int_phab) to review.
",facebook-github-bot,2016-03-17 23:25:35
943,2016-03-10 21:56:01,"> Maybe a default setting changed in babel?

It's because 1886f6f8503c5497dfb9579ca2aa576692b0168b lost the `compact: false` flag in Babel.

Let's fix that before landing this. The compact transformed code makes it very hard to debug (and also abandons any hope of following blame).
",yungsters,2016-03-17 23:25:35
943,2016-03-10 23:03:23,"Aha, will add before landing. 
",josephsavona,2016-03-17 23:25:35
942,2016-03-10 19:44:26,"This simplifies state handling in `RelayRenderer`, but does not change external behaviour and API. It follows principles described in section ""[Thinking in React: Identify the minimal (but complete) representation of UI state](https://facebook.github.io/react/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state)"". I identified that only two things actually determine internal state of `RelayRenderer`:
- the most recent ready state (the `readyState` state param),
- and whether we received a ready state at least once (the new `active` state param).

The `active` param means that we made a render while having a ready state at least once, and next time we will rerender only if we also have a ready state (we might have reseted the ready state to `null` after sending new queries).

Previously other state params were either redundant or derivable from `readyState` and `active`.

After this refactoring it will probably be easy for `RelayRenderer` to make use of `RelayRedayStateRenderer` [proposed](https://github.com/facebook/relay/pull/921#issuecomment-194392149) by @yungsters.

But originally it was submitted as a part of #921 to simplify implementation of isomorphic rendering for `RelayRenderer`.
",denvned,2016-03-15 20:30:32
942,2016-03-10 20:18:09,"> and whether we received a ready state with truthy `ready` flag at least once (the new `active` state param).

This is close, but not quite accurate. Keeping in mind that `primeCache` (and `forceFetch`) asynchronously invokes the `onReadyStateChange` callback, what we actually care about is whether or not the `onReadyStateChange` callback has _ever_ fired for the current set of `(environment, container, router)` props.
",yungsters,2016-03-15 20:30:32
942,2016-03-10 21:01:06,"@yungsters Of couse you are right! And actually I also knew it when did refactoring. I don't know why I wrote ""with truthy `ready` flag"" in the description. :smile: Corrected the description. The actual implementation is correct, I believe.
",denvned,2016-03-15 20:30:32
942,2016-03-14 23:22:54,"@facebook-github-bot import
",yungsters,2016-03-15 20:30:32
942,2016-03-14 23:33:33,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1770790019816833/int_phab) to review.
",facebook-github-bot,2016-03-15 20:30:32
941,2016-03-10 10:32:10,"This adds a paragraph here, https://facebook.github.io/relay/docs/guides-babel-plugin.html#content, under Usage describing how to configure the babel-relay-plugin with React Native. Fixes issue #935.
",vjefri,2016-04-14 16:55:26
941,2016-04-14 16:10:55,"We totally missed this, our bad. Thank you for writing this up!
",josephsavona,2016-04-14 16:55:26
941,2016-04-14 16:11:14,"@facebook-github-bot shipit
",josephsavona,2016-04-14 16:55:26
941,2016-04-14 16:13:28,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1689931157946438/int_phab) to review.
",facebook-github-bot,2016-04-14 16:55:26
941,2016-04-15 14:55:38,"Thank you for reviewing it. 
",vjefri,2016-04-14 16:55:26
940,2016-03-10 04:38:15,"The path pointed at `scripts/node_modules` which doesn't exist and caused the
flow server to crash.

Test Plan:
`flow scripts/babel-relay-plugin/src` now starts a server which doesn't crash.
",kassens,2016-03-10 11:15:31
939,2016-03-10 04:37:46,,kassens,2016-03-10 11:35:27
938,2016-03-10 04:23:33,"The return value of `Map.prototype.get` is nullable, but the standard flow type
currently doesn't match that yet. Internally, we have the return value as
nullable which is why the `@FlowFixMe` annotation was added.
",kassens,2016-03-10 11:55:32
938,2016-03-10 04:23:42,"@facebook-github-bot import
",kassens,2016-03-10 11:55:32
938,2016-03-10 04:27:34,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1708425419372397/int_phab) to review.
",facebook-github-bot,2016-03-10 11:55:32
937,2016-03-10 00:22:24,"In making the React Native TodoMVC example app, a lot of code was copied without modifications. Fundamentally, the mutations, schema, and routes/queries are identical between the two projects.

It would be nice if the common parts were extracted into `examples/todo_common/` in such a way that they could be used to build both apps.
",steveluscher,2017-01-30 20:47:18
937,2016-03-10 08:08:05,"I would love to take this on. 
",vjefri,2017-01-30 20:47:18
937,2016-03-10 08:09:19,"I am going to work on this and get back to you if I have any questions. Should be fun first bug. 
",vjefri,2017-01-30 20:47:18
937,2016-03-10 15:52:00,"I would love to see how people approach this, I've done similar things in my projects but haven't found a ""nice"" way to do it yet...
",NevilleS,2017-01-30 20:47:18
937,2016-03-11 15:11:22,"I would like to see this too
",yodacom,2017-01-30 20:47:18
937,2016-03-11 15:48:16,"+1
",esutton,2017-01-30 20:47:18
937,2016-04-09 18:42:48,"Yes. I was wondering what are the steps to make a relay app compatible with react-native 
",nikhildaga,2017-01-30 20:47:18
937,2017-01-30 20:47:18,"(Spring cleaning.) This issue will soon be a year old so I am closing this one due to inactivity. In any case, we no longer host the examples in this repo.

We would be happy to entertain PRs over in the [relay-examples repo](https://github.com/relayjs/relay-examples).

Thanks to everybody who participated in this discussion!",wincent,2017-01-30 20:47:18
936,2016-03-10 00:17:34,,steveluscher,2016-03-10 01:20:30
936,2016-03-10 00:17:48,"@facebook-github-bot shipit
",steveluscher,2016-03-10 01:20:30
936,2016-03-10 00:21:58,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1041895545849610/int_phab) to review.
",facebook-github-bot,2016-03-10 01:20:30
935,2016-03-10 00:03:06,"Can someone add a little note to the docs that explains how and why to configure the babel-relay-plugin to run before the `react-native` Babel preset?

<S_CODE_TOKEN>
",steveluscher,2017-01-30 21:35:23
935,2016-03-10 00:03:33,"Further reading: #714.
",steveluscher,2017-01-30 21:35:23
935,2016-03-10 08:36:39,"I can read over #714 and add a paragraph that explains why we need to configure the babel-relay-plugin to run before the react-native. Modifications should be made here correct: https://facebook.github.io/relay/docs/guides-babel-plugin.html#content? Thanks again. 
",vjefri,2017-01-30 21:35:23
935,2016-03-10 22:15:05,"That sounds like a good place. Thanks!

> On Mar 10, 2016, at 8:36 AM, Jefri Vanegas notifications@github.com wrote:
> 
> I can read over #714 https://github.com/facebook/relay/pull/714 and add a paragraph that explains why we need to configure the babel-relay-plugin to run before the react-native. Modifications should be made here correct: https://facebook.github.io/relay/docs/guides-babel-plugin.html#content https://facebook.github.io/relay/docs/guides-babel-plugin.html#content? Thanks again.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/facebook/relay/issues/935#issuecomment-194734824.
",steveluscher,2017-01-30 21:35:23
935,2016-06-02 23:33:52,"Hey guys, is this broken for anyone else on 0.9? I'm getting `Unexpected invocation at runtimer` error, and have been trying to track it down all day today.
",abhishiv,2017-01-30 21:35:23
935,2016-06-03 04:05:21,"Hey @abhishiv! [Post a question on Stack Overflow with the tag #relayjs](https://stackoverflow.com/questions/ask?tags=relayjs) with as much detail as you possibly can about your setup. Be sure to post a link back here so we can follow up.
",steveluscher,2017-01-30 21:35:23
935,2016-06-03 04:10:16,"Thanks Steve, I was finally able to track it down. It seems to be a very strange issue. I'll just leave the resolution in this thread in case someone else gets stuck like me.

@BerndWessels/babel-relay-plugin-loader

https://stackoverflow.com/questions/37449580/this-is-no-longer-bound-when-using-arrow-functions-after-upgrading-to-react-nati/37474298#37474298
",abhishiv,2017-01-30 21:35:23
935,2016-06-19 12:06:57,"This configuration does not seem to work as soon as your code or one of your lib use the class property method of ES2015.

I mean this:

<S_CODE_TOKEN>

it breaks with the config mentioned above.

Why not just:

<S_CODE_TOKEN>

^^^ This seems to work and don't have the issue i'm mentionning.

( context https://github.com/ProjectSeptemberInc/gl-react-native/issues/90#issuecomment-226992859 )
",gre,2017-01-30 21:35:23
935,2016-07-07 00:53:41,"@gre class properties after babel-core 6.5 does not work with passPerPreset.(https://phabricator.babeljs.io/T7274)

@steveluscher wondering if `passPerPreset` is required now.
",chirag04,2017-01-30 21:35:23
935,2016-07-07 07:03:11,"@chirag04 been using this solution for quite a while, and it works fine for me
",stoffern,2017-01-30 21:35:23
935,2016-07-07 10:41:28,"My working setup is the same as @gre’s.
",alloy,2017-01-30 21:35:23
935,2016-08-04 00:13:02,"BTW, digging into this a bit –

The order in which plugins run is actually:
1. All `plugins` in order
2. All `presets` in reverse order

This means that if you apply the template literal transform in a preset, then as long as you specify the Relay transform in `plugins`, or you specify the preset with the Relay transform _after_ the preset with the template literal transform, then you don't need `passPerPreset`.
",taion,2017-01-30 21:35:23
935,2016-08-04 00:19:43,"BTW, I would suggest recommending against the use of `passPerPreset`. Various things tend to go wrong when using `passPerPreset`, such that it feels cleaner to just make sure the Relay Babel plugin gets listed in the correct place.
",taion,2017-01-30 21:35:23
935,2017-01-30 21:35:23,"(Spring cleaning.) This issue was created nearly a year ago and is now quite stale. Going to close it out, but please feel free to submit any improvements to the documentation as PRs; we're always happy to see the documentation get better.",wincent,2017-01-30 21:35:23
934,2016-03-09 23:23:53,"`npm install -g react-native-cli` is less likely to fail than `npm install`, so let's encourage people to run that one first when installing the React Native / Relay example app.
",steveluscher,2016-03-10 00:50:28
934,2016-03-09 23:24:07,"@facebook-github-bot shipit
",steveluscher,2016-03-10 00:50:28
934,2016-03-09 23:27:35,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/837734576372778/int_phab) to review.
",facebook-github-bot,2016-03-10 00:50:28
933,2016-03-09 19:52:12,"The pull request https://github.com/facebook/relay/pull/929 was accepted earlier today.  The Xcode project was in the pull request but it is not currently in the master branch.  
",krishamoud,2016-03-09 23:53:50
933,2016-03-09 19:53:27,"Our importer killed a bunch of those files. I'm fixing it now.
",steveluscher,2016-03-09 23:53:50
933,2016-03-09 19:54:50,"Wow!  Thanks for the fast reply and thank you for your work that you've done!  I look forward to using it in the near future.
",krishamoud,2016-03-09 23:53:50
933,2016-03-09 23:53:50,"Fixed by 712f4b683cfed3cae61a201b39936803bc6fbd41
",steveluscher,2016-03-09 23:53:50
932,2016-03-09 15:10:07,,steveluscher,2016-03-09 16:20:30
932,2016-03-09 15:10:18,"@facebook-github-bot shipit
",steveluscher,2016-03-09 16:20:30
932,2016-03-09 15:12:55,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/866951956747187/int_phab) to review.
",facebook-github-bot,2016-03-09 16:20:30
931,2016-03-09 01:53:16,"I have a GraphQL type like this

<S_CODE_TOKEN>

I can query directly with GraphQL:

<S_CODE_TOKEN>

returns

<S_CODE_TOKEN>

but when I make the same query from Relay, I end up with an object that looks like this (no way to access the name property).

<S_CODE_TOKEN>

Unfortunately I can't easily change the data's schema. Is there any way to support this in Relay?
",robrichard,2016-12-20 17:53:30
931,2016-03-09 11:47:00,"Thanks for opening an issue. This isn't currently supported in Relay - we haven't yet come across a use case for lists of lists. In general we've found that plain lists aren't very flexible - we'd recommend at least using a list of objects with ids in order to normalize the data. 

I don't see any reason we can't support lists of lists in Relay, but we're unlikely to prioritize this soon. We're happy to support you in implementing this in a PR though!
",josephsavona,2016-12-20 17:53:30
931,2016-12-20 17:53:30,Closing as won't fix. Arrays of arrays by nature don't have identities and are less amenable to consistent caching.,josephsavona,2016-12-20 17:53:30
930,2016-03-09 01:00:48,"See #922 for a detailed discussion.
",steveluscher,2016-03-09 07:00:43
930,2016-03-09 01:00:54,"@facebook-github-bot import
",steveluscher,2016-03-09 07:00:43
930,2016-03-09 01:10:27,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1073160312706436/int_phab) to review.
",facebook-github-bot,2016-03-09 07:00:43
929,2016-03-09 00:51:31,"![rntodomvc](https://cloud.githubusercontent.com/assets/13243/13621667/09af6dbc-e591-11e5-9c2b-a5cefc05d814.gif)
",steveluscher,2016-03-09 15:35:27
929,2016-03-09 00:52:55,"@facebook-github-bot import
",steveluscher,2016-03-09 15:35:27
929,2016-03-09 01:03:50,"Ooooooo...
",KyleAMathews,2016-03-09 15:35:27
929,2016-03-09 01:41:51,"This looks really (or should I say relay) good :) 
",l-urence,2016-03-09 15:35:27
929,2016-03-09 01:59:12,"finally :) :+1:  :clap: 
",chandu0101,2016-03-09 15:35:27
929,2016-03-09 02:17:24,"![image](https://cloud.githubusercontent.com/assets/679897/13623238/127d2fde-e5e0-11e5-9533-878dab92b377.png)
",filod,2016-03-09 15:35:27
929,2016-03-09 04:41:18,"Awesome stuff @steveluscher 
",skevy,2016-03-09 15:35:27
928,2016-03-08 22:10:03,"There are 2 bugs in the TodoMVC example (that I've come across):

1) Completing/Uncompleting all todos does not generate the correct mutation query and thus the response does not include the correct data

![todomvcmarkall](https://cloud.githubusercontent.com/assets/44398/13618059/daf4756c-e536-11e5-8a5d-dc12810d5281.gif)

2) Completing a todo, then clicking on the filters in the footer does not properly show Active and Completed todos.

![todomvcmarkfilters](https://cloud.githubusercontent.com/assets/44398/13618062/de0806a6-e536-11e5-9313-6ee95b6c282a.gif)

Looking into both but still new to Relay. Thanks.
",seanabrahams,2016-03-09 01:01:08
928,2016-03-08 23:19:48,"Thanks for reporting this. @steveluscher was looking into these just today.
",josephsavona,2016-03-09 01:01:08
928,2016-03-09 01:01:08,"You guys are quick! Fixed in #930 and once again in #922.
",steveluscher,2016-03-09 01:01:08
927,2016-03-08 19:12:35,"As per @steveluscher's [astute diagnosis of a bug](https://github.com/facebook/relay/issues/768#issuecomment-193887941), we probably want to enforce that fields specified as `connectionName` actually correspond to real connections (ie. with `isConnection` metadata set to `true`).
",wincent,2016-03-28 22:15:29
926,2016-03-08 18:56:39,,kassens,2016-03-09 12:25:25
926,2016-03-09 10:40:46,"@facebook-github-bot import
",kassens,2016-03-09 12:25:25
926,2016-03-09 11:14:16,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/487073911479780/int_phab) to review.
",facebook-github-bot,2016-03-09 12:25:25
925,2016-03-08 18:47:21,":raised_hands: :tada:

Uses Relay on the web app used by notaries; consumer web launching soon™.
",jamesdphillips,2016-03-08 23:25:36
925,2016-03-08 18:50:35,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-03-08 23:25:36
925,2016-03-08 21:02:49,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-03-08 23:25:36
925,2016-03-08 22:34:37,"@facebook-github-bot shipit
",wincent,2016-03-08 23:25:36
925,2016-03-08 22:34:45,"Thanks!
",wincent,2016-03-08 23:25:36
925,2016-03-08 22:35:15,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/583701555129857/int_phab) to review.
",facebook-github-bot,2016-03-08 23:25:36
924,2016-03-08 17:32:55,"Test Plan:
`flow`
",kassens,2016-03-08 17:51:13
924,2016-03-08 17:39:05,"@facebook-github-bot import
",kassens,2016-03-08 17:51:13
924,2016-03-08 17:44:32,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1676271322638134/int_phab) to review.
",facebook-github-bot,2016-03-08 17:51:13
924,2016-03-08 17:51:13,"Duplicate of #923.
",kassens,2016-03-08 17:51:13
923,2016-03-08 15:26:20,"For some reason Flow doesn't like `Promise` being used in a place that accepts `?Promise`. This makes no sense, but it's easiest to just relax the return type and move on.
",josephsavona,2016-03-08 19:55:27
923,2016-03-08 15:26:29,"@facebook-github-bot import
",josephsavona,2016-03-08 19:55:27
923,2016-03-08 15:30:16,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1725096061045441/int_phab) to review.
",facebook-github-bot,2016-03-08 19:55:27
922,2016-03-08 15:12:41,"So, here's the thing. Currently, the plugin allows you to write an invalid query: a subselection-supporting field that has no subselections:

<S_CODE_TOKEN>

That should fail, unless you've specifically marked the fragment as being a pattern:

<S_CODE_TOKEN>

Pattern fragments are those on which certain validations are disabled.

For now, we're going to treat all fat queries as pattern fragments to unbreak products. Next, we're going to start to warn in the Babel Relay plugin when you have a query like the first one above. Lastly, we'll revert this PR and make the Babel Relay plugin throw on a query like the first one above.
",steveluscher,2016-03-08 20:00:41
922,2016-03-08 15:12:47,"@facebook-github-bot import
",steveluscher,2016-03-08 20:00:41
922,2016-03-08 15:27:43,":ship: it
",josephsavona,2016-03-08 20:00:41
921,2016-03-08 14:40:32,"The first commit of this PR does refactoring that simplifies state handling, but does not change behaviour. And the second, very simple one, actually makes `RelayRenderer` isomorphic.

Now it is possible to pass an `initialReadyState` to `RelayRenderer`, allowing server-side rendering and initial rendering in the browser to use pre-primed data.

See #589
",denvned,2016-03-18 20:27:34
921,2016-03-08 19:15:20,"@denvned Can you provide an example of how this would be used to implement server rendering? Would the new `initialReadyState` prop be used on the server, client, or both? It isn't obvious how this prop would be sufficient to render on the client given that data was fetched on the server. Data would have to be provided to the store from the server regardless. 

As an alternative to this approach, how about creating an ""isomorphic"" RelayEnvironment implementation to be used as below. You could compose environment instances and override the implementation of key methods - forceFetch, primeCache - to skip work when data was already fetched:

<S_CODE_TOKEN>
",josephsavona,2016-03-18 20:27:34
921,2016-03-08 20:32:46,"@josephsavona 

> Can you provide an example of how this would be used to implement server rendering?

Sure, it mostly follows your recommendations in https://github.com/facebook/relay/issues/589#issuecomment-156169239, and https://github.com/facebook/relay/issues/589#issuecomment-156195977:

<S_CODE_TOKEN>

In both cases `props` are `{Container, environment, initialReadyState, queryConfig}`.

> Would the new `initialReadyState` prop be used on the server, client, or both?

We need it on both, because the data should be ready on the client during the initial render, otherwise React wouldn't reuse server-side rendered markup.

> override the implementation of key methods - forceFetch, primeCache - to skip work when data was already fetched

Actually, I have already tried that approach but unsuccessfully: https://github.com/facebook/relay/pull/625#issuecomment-185375491. Also I think passing `initialReadyState` is more clean solution.
",denvned,2016-03-18 20:27:34
921,2016-03-09 15:28:10,"I see, thanks for clarifying. You're referring to your [comment](https://github.com/facebook/relay/pull/625#issuecomment-185375491):

> ...React throws an error because onReadyStateChange calls setState, and React does not allow calling setState before mount.

This makes sense - `RelayRenderer` currently assumes rendering will be asynchronous, but if we're rendering on the client with data from the server it needs to be synchronous.

My concern here is that the shape and value of `initialReadyState` is an implementation detail that users shouldn't have to know about. However, exposing it as a prop makes it part of the public API and requires us to continue supporting it which we'd prefer to avoid.

I'd like to see a proposal that uses some form of composition in order to avoid the need to change the `RelayRenderer` API. For example, the API I proposed above could be achieved by creating an `<IsomorphicRelayRenderer>` that uses RelayRenderer internally _except_ for the first render on the client (add whatever prop you need to indicate that the first render should resolve synchronously from pre-populated data). In general, we'd like to move towards providing lower level primitives (#559) and encourage composition over a monolithic core.

To summarize, rather than proceed with this PR I propose that we:
- Implement an IsomorphicRelayRenderer outside of `react-relay` so that users can do server rendering today
- Provide lower-level primitives to make `isomorphic-relay` easier to implement via all public methods.

@denvned what do you think?
",josephsavona,2016-03-18 20:27:34
921,2016-03-09 16:50:07,"I have also been working on a lower-level component that RelayRenderer would compose. I came to the same conclusion as @denvned that feeding in a `readyState` object was sufficient. Where my line of thinking differed was that I was thinking of building a lower level `RelayReadyStateRenderer` that always synchronously rendered the supplied `readyState`.

@denvned Do you want to take a stab at this? Or want me to go ahead and build it (which is what I was planning on doing today)?
",yungsters,2016-03-18 20:27:34
921,2016-03-09 17:38:52,"> My concern here is that the shape and value of `initialReadyState` is an implementation detail that users shouldn't have to know about. However, exposing it as a prop makes it part of the public API and requires us to continue supporting it which we'd prefer to avoid.

I thought that it could be an undocumented, internals only prop that is passed exclusively as a part of opaque `props` returned by `prepareData` and `injectData` (as in my example above).

> creating an <IsomorphicRelayRenderer> that uses RelayRenderer internally _except_ for the first render on the client

Nice idea! I think I even see all the details of a possible implementation (probably the trickiest part is to not allow `RelayRenderer` to destroy DOM tree on the second render on the client). But we need to make a public API in Relay that will allow to get `props` (containing fragment pointers) by a given `Container` and `queryConfig` that we then would pass to `Container` during the first render, or alternatively we probably can use `RelayReadyStateRenderer` proposed above by @yungsters to solve this.

> Do you want to take a stab at this? Or want me to go ahead and build it (which is what I was planning on doing today)?

@yungsters, I can not wait to see it, but would not be able to build it myself today. So please do it! :+1: 

> To summarize, rather than proceed with this PR

@josephsavona, I think the first commit of this PR is still useful, it cleans up `RelayRenderer` a lot without changing API or behaviour. Maybe you can cherry-pick it?
",denvned,2016-03-18 20:27:34
921,2016-03-09 20:34:55,"> I thought that it could be an undocumented, internals only prop

I understand this line of thinking, and it's really tempting. Unfortunately if someone _can_ pass it as a prop and depend on its behavior, they _will_, and this limits our flexibility. I really like @yungsters idea of a lower-level `RelayReadyStateRenderer` that you can use if you know what you're doing, and keeping a higher-level component that most people will use.

> the trickiest part is to not allow RelayRenderer to destroy DOM tree on the second render on the client

I would imagine that this new component would render the root component directly at first, until the point that the props have changed and data needs to be fetched from the server. At that point you'd render a `RelayRenderer` and let it do the data-fetching (or possibly implement that yourself with other low-level APIs).

> ...Maybe you can cherry-pick it?

Agree that the first commit is worth discussing on its own; no rush, maybe split that off into a separate PR as time permits?
",josephsavona,2016-03-18 20:27:34
921,2016-03-10 19:47:01,"> Agree that the first commit is worth discussing on its own; no rush, maybe split that off into a separate PR as time permits?

@josephsavona I've made a separate PR, #942.
",denvned,2016-03-18 20:27:34
921,2016-03-18 19:06:03,"@denvned Does 8074aa0cdc7fb3fb85be9634d1a34d6650dfa307 suit your needs?
",yungsters,2016-03-18 20:27:34
921,2016-03-18 20:27:34,"@yungsters Looks like it should. Thanks!
",denvned,2016-03-18 20:27:34
920,2016-03-07 16:45:08,"I cannot for the life of me figure this out. I have a parent component that gets a 'layout' field from the database. That value determines which child component should be rendered. The parent component also needs to get a GraphQL fragment from the child component. The parent component looks like this:

<S_CODE_TOKEN>

The child component (in this example DefaultLayout) looks like this:

<S_CODE_TOKEN>

When the initial query is run, condition is false so it doesn't get any post data. Right before DefaultLayout mounts, condition variable is set to true so it SHOULD query post and get that data.

Here is the weird thing: I'm only getting the id and post_title of post. I'm not getting post_content or thumbnail. If I set condition to be true in initial variables, I get everything. 

Am I not supposed to be able to change the condition? 
",ramsaylanier,2016-12-20 17:58:08
920,2016-03-07 18:29:02,"In case this should be a stack overflow question:

https://stackoverflow.com/questions/35849499/relay-js-partial-fetch-when-conditional-statement-changes
",ramsaylanier,2016-12-20 17:58:08
920,2016-03-08 05:11:56,"Here's what really weird. A console log from this.props.viewer.post shows the post_title:
<img width=""426"" alt=""screen shot 2016-03-08 at 12 09 20 am"" src=""https://cloud.githubusercontent.com/assets/2359852/13592637/22e6fdce-e4c2-11e5-9793-e9a2a82c16be.png"">

However - here is the query results from React devtools:

<S_CODE_TOKEN>

Notice in the post fragment there is no post_title anywhere!
",ramsaylanier,2016-12-20 17:58:08
920,2016-12-20 17:58:08,@ramsaylanier Thanks for reporting this. I'm going to close this due to inactivity; upcoming releases (see #1369) use static queries which may avoid some quirks (and I believe address the problem here).,josephsavona,2016-12-20 17:58:08
919,2016-03-07 15:07:38,"One of my components has this fragment:

<S_CODE_TOKEN>

I am getting this error: `Syntax Error GraphQL request (1:2769) Expected {, found Name ""fragment""` while `@skip` is present in the query

Here is the entire query

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",robrichard,2017-01-30 21:54:56
919,2016-03-07 15:11:06,"This is a known issue, a quick workaround is to add some other field (`__typename` is a good neutral field that is always available regardless of the schema)
",josephsavona,2017-01-30 21:54:56
919,2017-01-30 21:54:56,"Given the workaround, closing due to staleness. Additionally, I believe the new Relay core (currently in the process of being rolled out) is unaffected by this issue, so we'd rather prioritize helping people move to the new core and APIs rather than fixing issues in the legacy core.

Thanks for the report!",wincent,2017-01-30 21:54:56
918,2016-03-06 23:33:00,"This puts Jest back from the pre-release track on to `0.9.x`. Apparently npm doesn't automatically go from `0.9.0-fb3` to above or equal `0.9.0`.
",cpojer,2016-03-07 15:25:29
918,2016-03-07 14:11:48,"@facebook-github-bot shipit
",kassens,2016-03-07 15:25:29
918,2016-03-07 14:22:57,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/607190692765484/int_phab) to review.
",facebook-github-bot,2016-03-07 15:25:29
917,2016-03-06 13:42:44,"This is a tentative fix for #916 - `diffRelayQuery` is generating invalid plural root calls because it assumes that their argument type is `ID`. The most straightforward solution is to annotate all arguments with their type, but this may increase application code size and/or affect performance. I'll benchmark this internally to verify the impact and may reconsider if it affects perf substantially.
",josephsavona,2016-03-07 13:10:28
917,2016-03-06 13:49:14,"@facebook-github-bot import
",josephsavona,2016-03-07 13:10:28
917,2016-03-06 13:51:06,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1745451652352283/int_phab) to review.
",facebook-github-bot,2016-03-07 13:10:28
917,2016-03-06 19:23:19,"@facebook-github-bot import
",josephsavona,2016-03-07 13:10:28
916,2016-03-06 11:54:04,"**Query :**

<S_CODE_TOKEN>

babel-generated : 

<S_CODE_TOKEN>

**Fragment :** 

<S_CODE_TOKEN>

babel-generated : 

<S_CODE_TOKEN>

**Actual Query generated while App Running :**

<S_CODE_TOKEN>

$names_0 is treated as ID instead of [String]!

am i missing something... ?  btw my app is working fine on 0.6.x version.
",chandu0101,2016-09-03 00:42:49
916,2016-03-06 13:44:42,"@chandu0101 Thanks for reporting this. It appears the problem is [in `diffRelayQuery`](https://github.com/facebook/relay/blob/master/src/traversal/diffRelayQuery.js#L97-L99) where we assume that a plural root field's argument type is `ID` (this is true for `nodes` but not true in the general case). See #917 for a fix that you can apply locally now if this issue is blocking you.
",josephsavona,2016-09-03 00:42:49
916,2016-03-06 14:53:45,"wow thanks alot for super fast fix :+1:  
",chandu0101,2016-09-03 00:42:49
916,2016-03-06 15:32:28,"@chandu0101 Can you confirm that this PR fixes your issue?
",josephsavona,2016-09-03 00:42:49
916,2016-03-06 22:49:30,"@josephsavona just got the new changes and app is working perfect :) 
",chandu0101,2016-09-03 00:42:49
916,2016-03-06 23:27:41,"Thanks for confirming!
",josephsavona,2016-09-03 00:42:49
916,2016-03-06 23:50:03,"@josephsavona 

i am seeing these warnings in my console 

<S_CODE_TOKEN>
",chandu0101,2016-09-03 00:42:49
916,2016-09-03 00:42:49,"Doing some cleaning of stale issues, so going to close this one. Original issue seems fixed, and as for the warnings, the write-side implementation is being completely replaced in [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable), so this is unlikely to remain an issue in the future. Thanks @chandu0101!
",wincent,2016-09-03 00:42:49
915,2016-03-06 05:25:27,"Gave #896 a try.

modifies `createNode` and `getChildren` to possibly return an array of nodes when a route conditional fragment reference returns an array.

Let me know what you think, It's seems weird to have `createNode` possibly return an Array but I'm not sure how it could be done without it!
",xuorig,2016-06-25 01:01:27
915,2016-04-16 17:35:29,"Switched to manual check!
",xuorig,2016-06-25 01:01:27
915,2016-06-24 22:57:48,"Sorry for leaving this one unattended for so long, @xuorig. Going to pull it in and see if it applies, tests pass etc.
",wincent,2016-06-25 01:01:27
914,2016-03-05 05:05:05,"Update the dependencies to the latest Babel version using Facebook's set of plugins from fbjs-scripts since Babel no longer has default plugins.
",kassens,2016-03-07 20:05:28
914,2016-03-05 05:05:12,"@facebook-github-bot import
",kassens,2016-03-07 20:05:28
914,2016-03-05 05:19:26,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/466550986878828/int_phab) to review.
",facebook-github-bot,2016-03-07 20:05:28
913,2016-03-04 21:38:33,"Breaks up the `@generated` string so the file is not incorrectly classified as generated.
",kassens,2016-03-04 23:00:30
913,2016-03-04 21:38:43,"@facebook-github-bot import
",kassens,2016-03-04 23:00:30
913,2016-03-04 21:48:05,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/182414248803483/int_phab) to review.
",facebook-github-bot,2016-03-04 23:00:30
912,2016-03-04 20:00:19,"I just saw the 0.7.2 release come across. Checking npm shows 0.7.3, though. Is this a mistake?
",ryancole,2016-03-04 22:53:37
912,2016-03-04 21:11:40,"Check github again, they made a new release :-)
On Fri, Mar 4, 2016 at 1:00 PM Ryan Cole notifications@github.com wrote:

> I just saw the 0.7.2 release come across. Checking npm shows 0.7.3, though.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/912.
",KyleAMathews,2016-03-04 22:53:37
912,2016-03-04 21:43:03,"Still seeing 0.7.2 as the latest on Github. I don't see 0.7.3 anywhere. I'm just thinking it's an npm mistake?
",ryancole,2016-03-04 22:53:37
912,2016-03-04 22:53:37,"Now it's also here, we we're getting a bit ahead of ourselves :)

See 45b1446097fce594d3a4f8bd0703364b58fef8fe
",kassens,2016-03-04 22:53:37
911,2016-03-04 18:30:35,,steveluscher,2016-03-04 22:20:37
911,2016-03-04 18:32:49,"@facebook-github-bot import
",steveluscher,2016-03-04 22:20:37
911,2016-03-04 18:37:12,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/236414510028355/int_phab) to review.
",facebook-github-bot,2016-03-04 22:20:37
910,2016-03-04 18:20:12,,steveluscher,2016-03-04 22:20:37
910,2016-03-04 19:11:04,"@facebook-github-bot shipit
",steveluscher,2016-03-04 22:20:37
910,2016-03-04 19:17:19,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1696779890536653/int_phab) to review.
",facebook-github-bot,2016-03-04 22:20:37
909,2016-03-04 18:13:27,"Previously, we were testing that `require('babel-core').version` started with `6.`. This could lead to unexpected results, since the return value of that require might or might not be the version of Babel you're using.
",steveluscher,2016-03-04 21:50:35
909,2016-03-04 18:13:37,"@facebook-github-bot import
",steveluscher,2016-03-04 21:50:35
909,2016-03-04 18:18:11,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/783226775154780/int_phab) to review.
",facebook-github-bot,2016-03-04 21:50:35
908,2016-03-04 17:59:46,,steveluscher,2016-03-04 22:20:37
908,2016-03-04 19:10:45,"@facebook-github-bot shipit
",steveluscher,2016-03-04 22:20:37
908,2016-03-04 19:17:23,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1130715046952120/int_phab) to review.
",facebook-github-bot,2016-03-04 22:20:37
907,2016-03-04 15:56:56,"Download link on http://facebook.github.io/relay/ leads to 0.7.2 tag and get 404, but current version seems to be 0.7.1
https://github.com/facebook/relay/blob/master/website/src/relay/index.js#L63
https://github.com/facebook/relay/blob/c7df007066548f48dc1749119aefdb5d2cc176a7/website/core/SiteData.js
",bikolya,2016-03-06 00:06:10
907,2016-03-04 18:16:08,"It looks like they pushed that tag about an hour ago: https://github.com/facebook/relay/releases/tag/v0.7.2

The download link works for me right now.
",NevilleS,2016-03-06 00:06:10
907,2016-03-06 00:06:10,"We were lagging with tagging the release. It should all work again now.
",kassens,2016-03-06 00:06:10
906,2016-03-04 15:34:26,"Following these steps:

<S_CODE_TOKEN>

Results in an exception while running `npm install`:

<S_CODE_TOKEN>

Running `npm install` in the root of the _relay_ directory before `npm install`ing the todo example fixes this exception.

Running on node v5.2.0 and npm 3.3.12
",ericallam,2016-05-27 06:53:34
906,2016-03-04 18:53:06,"Have you looked here: [https://github.com/facebook/relay/issues/850#issuecomment-191361083] 
namely:
I also had this problem until I found out the example has two global modules as prerequisites. This is not described in the current README.md: 
npm install -g babel-core
npm install -g babel-cli

I see there is a Pull Request to rectify this [#798](https://github.com/facebook/relay/pull/798), but it's been sitting there for 27 days now.
",nicerr,2016-05-27 06:53:34
906,2016-03-13 04:44:51,"It looks like a race to me. `babel-relay-plugin@0.7.3 prepublish` is being called before `todo preinstall`
",akeating,2016-05-27 06:53:34
906,2016-03-25 01:57:04,"Looks like the README in the todo example folder is incorrect.  I suspect you can globally install babel-core ad babel-CLI as @nicerr suggests.  I guessed the README author downloaded/cloned and npm installed https://github.com/facebook/relay first - then cd'd to the examples directory and npm install'ed there.
NOTE: this assumes the ""relay-master"" folder is where you downloaded/cloned https://github.com/facebook/relay. 

TL/DR - Here's what I had to do to get it running.   You'll need to edit the path if you put it somewhere else.
1. cd ~/relay-master; npm install
2. cd ~/relay-master/scripts/babel-relay-plugin; npm install
3. cd ~/relay-master/examples/todo; npm install
4. npm start

Additional info:
The README in the ""todo"" example say:  ""## Installation `npm install` ## Running Start a local server: ``` npm start"".  Unfortunately, that results in:

> Error: Cannot find module 'babel-core'.

To get the running I needed to:
1. cd ~/relay-master; npm install

After this tried ""cd ~/relay-master/examples/todo; npm install"", but got:

> babelAdapter.js: Unknown option: relay-master/scripts/babel-relay-plugin/.babelrc.presets

Next:
1. cd ~/relay-master/scripts/babel-relay-plugin; npm install

Finally 
1. cd ~/relay-master/examples/todo; npm install
2. npm start
",mgleason,2016-05-27 06:53:34
906,2016-03-25 04:28:34,"Good lord. You have to do this with every example.
",kevinSuttle,2016-05-27 06:53:34
906,2016-03-31 13:53:13,"`npm i --ignore-scripts` seems to work on NPM 3.3.6

**Edit**
This didn't work as I expected.. It won't fail at install but if you don't have a lib/ from a prior build it won't include the code when installing.
",edvinerikson,2016-05-27 06:53:34
906,2016-05-27 06:53:34,"I cleaned up the examples for the release of [0.9.0](https://github.com/facebook/relay/releases/tag/v0.9.0). Give them a try!

I tried (on OS X):

<S_CODE_TOKEN>

…and had success. [Here was the output](https://gist.github.com/steveluscher/ac88aaaa340c6f92c6cca611ec31e2c0). This was with npm v2.14.12 and Node v4.2.6.

If you experience trouble that I didn't, please do open an issue with your npm/Node versions and your output. Thanks for helping to keep the examples healthy everyone!
",steveluscher,2016-05-27 06:53:34
906,2016-05-27 11:17:35,"We're in the middle of a little bit of a revert/unrevert situation, so if anyone wants to try the examples in the next 24 hours or so be sure to check out the v0.9.0 tag:

<S_CODE_TOKEN>
",steveluscher,2016-05-27 06:53:34
905,2016-03-04 11:08:00,,steveluscher,2016-03-04 16:59:05
905,2016-03-04 11:08:44,"@facebook-github-bot shipit
",steveluscher,2016-03-04 16:59:05
905,2016-03-04 11:13:22,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/237490079923241/int_phab) to review.
",facebook-github-bot,2016-03-04 16:59:05
904,2016-03-04 09:14:05,,steveluscher,2016-03-04 16:59:05
904,2016-03-04 09:14:22,"@facebook-github-bot shipit
",steveluscher,2016-03-04 16:59:05
904,2016-03-04 09:19:42,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/570415773132684/int_phab) to review.
",facebook-github-bot,2016-03-04 16:59:05
903,2016-03-04 09:10:59,,steveluscher,2016-03-04 16:59:05
903,2016-03-04 09:11:15,"@facebook-github-bot shipit
",steveluscher,2016-03-04 16:59:05
903,2016-03-04 09:13:17,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1054524714619719/int_phab) to review.
",facebook-github-bot,2016-03-04 16:59:05
902,2016-03-04 07:32:45,"This another step toward #112. Here, we use the `ID` type to distinguish between identifying arguments and non-identifying arguments, and allow any combination of root calls _except_ multiple arguments of type `ID` or `[ID]` (the whole point is that they are ""identifying"", but multiple of them makes them non-identifying).

This is _part_ of the solution to arbitrary root fields, but it still has some limitations. In addition to the above, this isn't sufficient to support root-level connections. I'm leaning towards changing the query representation itself to be something like:

<S_CODE_TOKEN>

With this approach, root fields whose _only_ arguments had type `ID`/`[ID]` would be opted-in to being treated as identifying fields, while everything else would ""just work"" (as in, we'd have to change everywhere that we process queries to be aware of it having a root field, but at least that could now use the normal field-handling logic).
",josephsavona,2016-03-10 21:08:42
902,2016-03-10 21:08:42,"The more correct version of this is also far more involved. I'm going to move on from this and possibly revisit later.
",josephsavona,2016-03-10 21:08:42
901,2016-03-04 01:42:54,"Currently, the build checker test is tied to the exact output of the transform.
This means if people run different minor versions of babel, the test fails.

This change makes the test more resilient. Everytime the build is run, the
`SRC_HASH` is updated. The test hashes the source files again and makes sure the
hash matches. This makes sure we ran the build after modifying some sources.
",kassens,2016-03-04 23:20:39
901,2016-03-04 01:43:00,"@facebook-github-bot import
",kassens,2016-03-04 23:20:39
901,2016-03-04 01:43:53,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1689097594703192/int_phab) to review.
",facebook-github-bot,2016-03-04 23:20:39
900,2016-03-04 00:01:09,"I made a somewhat artificial example up for this. If anybody wants to suggest a more realistic use case derived from actual practice, please chime in!

Note that I also mentioned `@relay(pattern: true)` to give the technique a little more exposure. Maybe dragging connections into this is complicating the issue unnecessarily...

Also note that I explicitly avoided the ""sign-in mutation"" example from #166 because until we have `RelayContext` fully rolled out, I don't think we want to encourage the use of session handling too overtly.

Closes: https://github.com/facebook/relay/issues/166
",wincent,2016-03-07 20:55:32
900,2016-03-04 01:19:37,"In case it helps, my use case was a mutation that created a new node. I wanted to get a reference to the new node's `id` so that I could immediately `router.push` somewhere based on it (instead of just letting the UI re-render).
",ianstormtaylor,2016-03-07 20:55:32
900,2016-03-07 14:01:35,"@facebook-github-bot import
",wincent,2016-03-07 20:55:32
900,2016-03-07 14:22:52,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1711566132463917/int_phab) to review.
",facebook-github-bot,2016-03-07 20:55:32
899,2016-03-03 17:47:21,"I'm not sure if `viewer` used as a fragment name is a reserved keyword but it results in a query error:

<S_CODE_TOKEN>

I've created a playground [here](https://facebook.github.io/relay/prototyping/playground.html#source=%2F**%0A%20*%20Copyright%20%28c%29%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0A%2F%2F%20Welcome%20to%20Relay.%0A%2F%2F%20Allow%20us%20to%20introduce%20you%20to%20the%20four%20elements.%0A%0A%2F**%0A%20*%20%231%20-%20Your%20React%20components%0A%20*%20This%20will%20look%20familiar%20to%20React%20developers.%0A%20*%0A%20*%20To%20learn%20more%20about%20React%2C%20visit%3A%0A%20*%20%20https%3A%2F%2Ffacebook.github.io%2Freact%0A%20*%2F%0Aclass%20HelloApp%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20%2F%2F%20Relay%20will%20materialize%20this%20prop%20based%20on%20the%0A%20%20%20%20%2F%2F%20result%20of%20the%20query%20in%20the%20next%20component.%0A%20%20%20%20var%20%7Bhello%7D%20%3D%20this.props.viewer%3B%0A%20%20%20%20return%20%3Ch1%3E%7Bhello%7D%3C%2Fh1%3E%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%232%20-%20Relay%20containers%0A%20*%20Compose%20your%20React%20components%20with%20a%20declaration%20of%0A%20*%20the%20GraphQL%20query%20fragments%20that%20fetch%20their%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-containers.html%0A%20*%2F%0AHelloApp%20%3D%20Relay.createContainer%28HelloApp%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20%2F%2F%20This%20GraphQL%20query%20executes%20against%0A%20%20%20%20%2F%2F%20the%20schema%20in%20the%20'schema'%20tab%20above.%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20To%20learn%20more%20about%20Relay.QL%2C%20visit%3A%0A%20%20%20%20%2F%2F%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fapi-reference-relay-ql.html%0A%20%20%20%20viewer%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20hello%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0A%2F**%0A%20*%20%233%20-%20Relay%20routes%0A%20*%20Define%20a%20root%20GraphQL%20query%20into%20which%20your%0A%20*%20containers'%20query%20fragments%20will%20be%20composed.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20routes%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-routes.html%0A%20*%2F%0Aclass%20HelloRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%20%20%2F%2F%20A%20unique%20name%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20%2F%2F%20Here%2C%20we%20compose%20your%20Relay%20container's%0A%20%20%20%20%2F%2F%20'greetings'%20fragment%20into%20the%20'greetings'%0A%20%20%20%20%2F%2F%20field%20at%20the%20root%20of%20the%20GraphQL%20schema.%0A%20%20%20%20viewer%3A%20%28Component%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20GreetingsQuery%20%7B%0A%20%20%20%20%20%20%20%20viewer%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'viewer'%29%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0A%2F**%0A%20*%20%234%20-%20Relay%20root%20containers%0A%20*%20Compose%20a%20Relay%20container%20with%20a%20Relay%20route.%0A%20*%20This%20enables%20Relay%20to%20synthesize%20a%20complete%20query%0A%20*%20to%20fetch%20the%20data%20necessary%20to%20render%20your%20app.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20root%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-root-container.html%0A%20*%2F%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BHelloApp%7D%0A%20%20%20%20route%3D%7Bnew%20HelloRoute%28%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B%0A).

Here is the relevant code:

<S_CODE_TOKEN>
",schickling,2016-03-03 17:49:57
899,2016-03-03 18:10:11,"@schickling Did you resolve this? The error indicates that there is no `viewer` field on the Query type in your schema.
",josephsavona,2016-03-03 17:49:57
899,2016-03-03 19:14:58,"Yeah I've forgot this in the playground example. However the problem remains in my application. I'll try to reproduce this outside of my application.

Is there a repository for the playground? I assume it's always running the latest version of Relay?
",schickling,2016-03-03 17:49:57
899,2016-03-03 19:29:04,"The playground code is in the repo at https://github.com/facebook/relay/tree/master/website-prototyping-tools
",josephsavona,2016-03-03 17:49:57
899,2016-03-03 19:29:25,"The website version runs the latest tagged release at time of publish, but if you run locally it's on master
",josephsavona,2016-03-03 17:49:57
898,2016-03-03 12:46:22,"Fixes #233.

Tested it in one of our apps and seems to do the trick.

Since this is my first PR I am not so sure about all the conventions but tried to follow it as much as possible for unit tests, etc.
",Globegitter,2016-03-07 11:46:36
898,2016-03-03 12:48:50,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-03-07 11:46:36
898,2016-03-03 13:12:42,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-03-07 11:46:36
898,2016-03-03 15:32:48,"Thanks for working on this. Eventually we won't need a reset method because you will just create a new RelayContext instead. I'm not sure if we want to add an API that we'll delete so soon, but in this case there is enough demand that it might be best to proceed. Let's get some feedback here before proceeding. 

Cc @wincent 
",josephsavona,2016-03-07 11:46:36
898,2016-03-03 16:59:56,"Would love to use this! :+1: 
",schickling,2016-03-07 11:46:36
898,2016-03-03 18:02:01,"This is great!

_But_ as @josephsavona points out, won't be needed once everything is isolated inside `RelayContext`. The concern that we'll soon delete the `reset()` API is valid, but I actually think there's a deeper reason that even having the API in the first place is a bit wrongful. Being able to reset to a clean state via mutating is a fundamentally brittle design (even if it's right now, what if somebody ends up adding additional global state outside the `RelayStoreData`?) compared to literally replacing the entire context. So, I think we should hold off on this for now and if you need something like this you can run with a patch on top of base Relay. Thoughts?
",wincent,2016-03-07 11:46:36
898,2016-03-03 19:13:33,"> So, I think we should hold off on this for now and if you need something like this you can run with a patch on top of base Relay.

I'm inclined to agree. We're making good progress on #558 and expect to have `RelayContext` be public within the next few releases.
",josephsavona,2016-03-07 11:46:36
898,2016-03-07 11:41:50,"Felt like dipping a little bit into relay and this one seemed like a good, simple start. But that is totally fair and good to see things are progressing. 
",Globegitter,2016-03-07 11:46:36
898,2016-03-07 11:46:36,"@Globegitter Thanks for opening this PR - it helps us see what features people are most interested in and moves the discussion forward (even if the PR itself doesn't land). Definitely check out the [help-wanted tag](https://github.com/facebook/relay/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) for other places to contribute!

Closing per discussion above - there are pending diffs for all the remaining code changes on #558.
",josephsavona,2016-03-07 11:46:36
898,2016-04-07 02:36:40,"> Eventually we won't need a reset method because you will just create a new RelayContext instead.

Now that #558 has landed, can we expose RelayEnvironment to the public API (`Relay.Environment`) so we can instantiate it ?
",tlvenn,2016-03-07 11:46:36
897,2016-03-03 10:33:08,"This PR introduces an optional flag `pure` to `RelayContainer` which overrides `shouldComponentUpdate` to return true.

Closes https://github.com/facebook/relay/issues/674.
",peterhorne,2016-04-28 19:00:24
897,2016-03-03 19:31:23,"Instead of making this configurable, could we instead make our `this.context` vs `nextContext` check a little more sophisticated?

At the moment, we short-circuit with `true` as soon as we see Relay-specific context has changed. But if you look at what we do for non-query props (ie. non-Relay props) we also return `true` if any of them don't match. I wonder if we could/should do the same with context.
",wincent,2016-04-28 19:00:24
897,2016-03-03 21:04:49,"That would be ideal but I don't think it's possible because you can't introspect all possible context items. Perhaps I've overlooked some mechanism for doing so?
",peterhorne,2016-04-28 19:00:24
897,2016-03-04 00:14:21,"> Perhaps I've overlooked some mechanism for doing so?

I guess by default you're only going to get the `contextTypes` that you registered for, and the only way around it would be to reach into internal React book-keeping data structures, which probably isn't going to happen...
",wincent,2016-04-28 19:00:24
897,2016-03-09 14:37:17,"Is there anything outstanding preventing this from being merged?
",peterhorne,2016-04-28 19:00:24
897,2016-03-09 15:46:06,"> Is there anything outstanding preventing this from being merged?

I'd like to leave this one up for a bit to give people a chance to comment on it before we proceed. Three reasons why I'm inclined to be pretty conservative about this:
- It increases the (currently tiny) API surface area of Relay, something that we want to keep small (partly because it's much harder to revise or remove an API once it's out in the wild).
- Naming is hard: others might have opinions on `pure` as a name (my concerns: it is a very generic dictionary word, and it has substantial conceptual overlap with stateless functional components in React, yet saying `pure: false` doesn't necessarily mean that a component is impure in the the technical sense).
- That unresolved React thread (https://github.com/facebook/react/issues/2517) makes me wary that things may change in React context or alternative APIs/semantics may be introduced into React, and these in turn could make this new API at best temporary and at worst a liability for us.

So, let's gather a bit more input first.
",wincent,2016-04-28 19:00:24
897,2016-03-09 16:05:26,"Okay, thanks for the update :smiley:

The option name was originally `disableShouldComponentUpdate: true` and I changed it to `pure: false` following a suggestion on the original issue. On reflection I think the original name is better due to its explicitness.
",peterhorne,2016-04-28 19:00:24
897,2016-03-09 17:07:10,"I don't see the point of this tbh. If you really want this, just wrap your Relay component with https://github.com/reactjs/react-static-container
",KyleAMathews,2016-04-28 19:00:24
897,2016-03-09 18:21:21,"From react-static-container readme:

> This component should be used when you know that a subtree of components will never need to be updated.

However, this PR introduces the ability to override Relay and _enable_ updating of the subtree once again.
",peterhorne,2016-04-28 19:00:24
897,2016-03-09 20:11:38,"I agree that this is a valid use-case, but it also seems to be uncommon enough that it would be preferable to avoid increasing the API surface area, as @wincent mentioned. 

Rather than add more API/options, I think we'll make more progress as a community if we focus on low-level primitives that can be composed together. What if it was so easy to build your own Relay Container that you could just do that and write your own `shouldComponentUpdate`?
",josephsavona,2016-04-28 19:00:24
897,2016-03-09 20:11:53,"That's exactly what react-static-container is designed for. It doesn't introduce any new ReactElements so you can add or remove it without triggering any DOM changes e.g.

<S_CODE_TOKEN>
",KyleAMathews,2016-04-28 19:00:24
897,2016-03-09 20:12:17,"I should clarify that i'm referring to #559.
",josephsavona,2016-04-28 19:00:24
897,2016-03-09 20:13:04,"@KyleAMathews the problem is that Relay will currently act as a static container and block updates, when the OP would prefer that it doesn't (bc data has changed on context).
",josephsavona,2016-04-28 19:00:24
897,2016-03-09 20:13:56,"@josephsavona ah :) didn't read the OP very closely I guess.
",KyleAMathews,2016-04-28 19:00:24
897,2016-04-13 07:00:15,"Hi, sorry. This is partially my fault, but I forgot to subscribe to this PR.

I suggested `pure: false` because it mirrors the syntax for React Redux. It might not be the best name in a vacuum, but for better or for worse @gaearon has already staked out ground there, and I think it'd be less confusing overall to use a consistent name.

This is useful in the case where I'm using forms that communicate data via `context`, and I need to cause components to re-render based on contextual updates from the forms that would otherwise be blocked by the Relay containers.

The current userspace implementation is a bit gross:

<S_CODE_TOKEN>

This dance is necessarily of the lazy class initialization in `Relay.createContainer`.
",taion,2016-04-28 19:00:24
897,2016-04-14 15:47:29,"I'm not crazy about increasing the surface area of RelayContainer, but the workaround (as documented by @taion) is not at all obvious. Let's move forward with this. 
",josephsavona,2016-04-28 19:00:24
897,2016-04-14 15:47:31,"@facebook-github-bot import
",josephsavona,2016-04-28 19:00:24
897,2016-04-14 15:49:24,"We actually just hit the opposite problem, BTW, in that there are a few places where we wish we could configure the Relay container would do shallow equality checks on non-scalar props the way the Redux container does. Probably too much to ask that this part of the code have yet another branch, though. 😉 
",taion,2016-04-28 19:00:24
897,2016-04-14 16:13:35,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/170244093357272/int_phab) to review.
",facebook-github-bot,2016-04-28 19:00:24
897,2016-04-14 20:44:25,"It would be nice to have redux style shallow equality checks for non-scalars props. In react-native all my `RelayContainer` get a `navigator` object, Relay's SCU is not very helpful there.
",chirag04,2016-04-28 19:00:24
897,2016-04-14 22:22:44,"@chirag04 Relay's `shouldComponentUpdate` is intended as a safe default. If you have complex objects (such that Relay's SCU always returns true), we recommend implementing `shouldComponentUpdate` in your component.
",josephsavona,2016-04-28 19:00:24
897,2016-04-14 22:24:43,"Is there no downside to putting the SCU check both in the Relay container and in the contained component, though?

This came up in the context of the example F8 app, which uses a number of no-op Redux containers to make components be pure, like https://github.com/fbsamples/f8app/blob/b5df451259897d1838933f01ad4596784325c2ad/js/tabs/schedule/SharingSettingsModal.js#L91.
",taion,2016-04-28 19:00:24
897,2016-04-15 03:56:57,"> Is there no downside to putting the SCU check both in the Relay container and in the contained component, though?

The render logic of `RelayContainer` is very minimal - it basically just renders the component. Are you seeing a case where 2 SCUs is that much slower than one (compared to actually rendering the subtree)?
",josephsavona,2016-04-28 19:00:24
897,2016-04-28 19:09:17,"Nope – I'm good for now, thanks!
",taion,2016-04-28 19:00:24
897,2016-04-30 19:59:42,"Out of curiosity, per my line note at https://github.com/facebook/relay/commit/76477bba6c3e4d61ef8cefdc8bfc4cb1e528503d#commitcomment-17315176, what's the benefit of not allowing an actual `shouldComponentUpdate` implementation here? It looks like the API otherwise allows doing so.
",taion,2016-04-28 19:00:24
896,2016-03-03 05:33:27,"Presently there is a limitation in Relay that requires that any interpolation you perform in a `Relay.QL` block must evaluate to:
- a fragment reference
  
  `${Foo.getFragment('viewer')}`
- an array of fragment references
  
  `${COMPONENTS.map(c => c.getFragment('viewer'))}`
- a route-conditional function that returns _exactly one_ fragment reference
  
  `${route => COMPONENTS[route].getFragment('viewer')}`

The task at hand is to enable the interpolation of **route-conditional functions that return an array of fragment references**.

<S_CODE_TOKEN>
",steveluscher,2016-07-11 18:35:05
896,2016-03-03 05:35:15,"Origin issue: http://stackoverflow.com/a/35471007/802047
",steveluscher,2016-07-11 18:35:05
896,2016-03-04 18:21:35,"This is the same issue too: #775 
",NevilleS,2016-07-11 18:35:05
896,2016-03-26 20:10:33,"I have a similar use case. Can someone please elaborate on that 'route-conditional function'? Where is that 'route' parameter coming from? Thanks
",shaimo,2016-07-11 18:35:05
896,2016-03-27 04:23:38,"If you interpolate a function into your query:

<S_CODE_TOKEN>

That function will receive the `routeName` of the `Relay.Route` you used with `Relay.RootContainer` as its first argument, and will expect that you return a single fragment reference (eg. that which is returned from `Container.getFragment('viewer')`).
",steveluscher,2016-07-11 18:35:05
896,2016-03-27 10:05:48,"@steveluscher Thanks. I guess it won't work for me. I'm using react-router so the given route seems like something that was generated by it. I actually need to choose the component based on a parameter (called 'hash' in my case), but I don't see any way to do it...
",shaimo,2016-07-11 18:35:05
896,2016-07-11 18:35:05,"Closed by #915.
",steveluscher,2016-07-11 18:35:05
896,2016-07-25 17:28:09,"Apologies if I'm missing something here, but with the

<S_CODE_TOKEN>

syntax – is it the case that you _must_ define this function inline to the fragment if you want to have access to `variables`? In other words, I couldn't have a separate:

<S_CODE_TOKEN>
",taion,2016-07-11 18:35:05
896,2016-07-25 17:35:32,"@taion You can define the function wherever you want, as long as you make sure that `variables` are in scope.
",josephsavona,2016-07-11 18:35:05
896,2016-07-25 17:45:23,"The problem is that `variables` are only in scope if I am defining this within the fragment. If I want a reusable conditional fragment as above, where I define it outside the fragment definition in `Relay.createContainer`, there's no way for `variables` to be in scope.
",taion,2016-07-11 18:35:05
896,2016-07-25 21:21:25,"@taion This is just like any function - if you need access to `variables` in the helper, you have to pass it:

<S_CODE_TOKEN>
",josephsavona,2016-07-11 18:35:05
896,2016-07-25 21:31:12,"Oops, massive brain fart on my part. 😑

Would it make sense for the signature for conditional fragments to in fact be:

<S_CODE_TOKEN>

It'd be a minor quality-of-life improvement in the case above, since it'd allow avoiding the apparently unnecessary extra function bind above.
",taion,2016-07-11 18:35:05
895,2016-03-02 23:40:37,"Note: this is inspired by and partially based on @iamchenxin's work in #767 and #844. Thanks for the head start!

Relay currently assumes that identifying argument values are strings (numbers _sort_ of work, but not really). This builds on #894 (which added support to the plugin for parsing/printing literal InputObjects) by allowing identifying arguments to be basically anything - boolean, number, string, or array/object of the the same.

Key changes include:
- Change the `CallValue` type from mixed to an explicit list of the supported types
- Change `forEachRootCallArg` to return both the literal JS value of the argument as well as a serialized key
- Change all callers of `forEachRootCallArg` (and some places that manually inspected the identifying arg) to correctly choose between the identifying argument value (i.e. when constructing a query with it) or the identifying argument key (for use with `RelayRecordStore.{putDataID,getDataID}`).
- Added tests that the writer correctly creates root records for queries with non-string identifying arguments.
",josephsavona,2016-03-03 08:20:46
895,2016-03-02 23:44:14,"@facebook-github-bot import
",josephsavona,2016-03-03 08:20:46
895,2016-03-02 23:47:07,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1533675010262706/int_phab) to review.
",facebook-github-bot,2016-03-03 08:20:46
894,2016-03-02 21:34:27,"This is an expanded portion of just the plugin changes from #844. Changes:
- Support parsing and printing inline InputObject expressions.
- Clear error message when variables appear nested in ways that the Relay runtime cannot interpret.
- Tests for the above.
",josephsavona,2016-03-03 08:20:46
894,2016-03-02 21:36:20,"cc @iamchenxin 
",josephsavona,2016-03-03 08:20:46
894,2016-03-02 21:36:55,"@facebook-github-bot import
",josephsavona,2016-03-03 08:20:46
894,2016-03-02 21:39:51,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/467820286744367/int_phab) to review.
",facebook-github-bot,2016-03-03 08:20:46
893,2016-03-01 21:24:39,"We currently use a global auto-incrementing id to distinguish nested fragments with the same hash. This can cause issues where two build passes look at fragments in a different order or traverse a different total number of fragments. This diff changes this auto-incrementing suffix to be local to each root Relay.QL expression and therefore consistent regardless of how the expression is transformed.
",josephsavona,2016-03-02 02:53:22
893,2016-03-01 21:27:23,"@facebook-github-bot import
",josephsavona,2016-03-02 02:53:22
893,2016-03-01 21:28:26,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1034687636595921/int_phab) to review.
",facebook-github-bot,2016-03-02 02:53:22
892,2016-03-01 06:40:44,"I'm simply picking up where #573 left off.
",yungsters,2016-03-01 21:30:38
892,2016-03-01 18:37:10,"@facebook-github-bot shipit
",yungsters,2016-03-01 21:30:38
892,2016-03-01 18:56:10,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1687206398218005/int_phab) to review.
",facebook-github-bot,2016-03-01 21:30:38
891,2016-03-01 02:04:56,"Hi

if this is noise here then please close it and answer [this question](http://stackoverflow.com/questions/35713364/multiple-mutations-on-a-single-object) on StackOverflow instead.

I try to have a `addColumn` and a `removeColumn` mutation on a `Chart` component.

But when I call

<S_CODE_TOKEN>

I get this error

<S_CODE_TOKEN>

What am I doing wrong here?

<S_CODE_TOKEN>

With these mutations

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>
",BerndWessels,2016-03-02 00:18:41
891,2016-03-02 00:18:41,"Thanks for posting on Stack Overflow. That's definitely a better place to track questions. It also helps us to keep the Github issues strictly for tracking bugs and feature requests.
",kassens,2016-03-02 00:18:41
891,2016-11-25 08:20:20,Did you find a workaround to do this?,FX-HAO,2016-03-02 00:18:41
890,2016-03-01 01:18:20,"Avoid redirecting
",chentsulin,2016-03-01 21:30:38
890,2016-03-01 19:14:05,"@facebook-github-bot shipit
",yungsters,2016-03-01 21:30:38
890,2016-03-01 19:14:19,"Thanks, @chentsulin.
",yungsters,2016-03-01 21:30:38
890,2016-03-01 19:27:30,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/878680855581699/int_phab) to review.
",facebook-github-bot,2016-03-01 21:30:38
889,2016-03-01 00:52:54,"Babel 6.6 added `Plugin` back so it's truthy now, but it just throws a warning.
Changing to a simple regex to check the version.

Check in Babel was added with babel/babel@6425c475374972d3f11b9340a08a37d171714b25

Fixes #887.
",kassens,2016-03-01 17:35:49
889,2016-03-01 03:29:15,"Please merge this pull request, currently having to manually make this change. The above fix worked. 
",alexhawkins,2016-03-01 17:35:49
889,2016-03-01 15:15:09,"works for me
",chirag04,2016-03-01 17:35:49
889,2016-03-01 20:05:24,"When it will be on NPM?
",denvned,2016-03-01 17:35:49
889,2016-03-03 22:21:10,"Maybe it would make sense to create a separate repository for the `babel-relay-plugin` in order to make releases more flexible?
",schickling,2016-03-01 17:35:49
889,2016-03-03 23:07:49,"Yes, this is frustrating. Not sure if facebook would separate this one though. They like their mono-repositories
",mrjackdavis,2016-03-01 17:35:49
889,2016-03-03 23:38:28,"> Maybe it would make sense to create a separate repository for the babel-relay-plugin in order to make releases more flexible?

Intuitively this makes sense, but in practice having the plugin in the same repository doesn't impact our ability to release, while it does make iteration on Relay core simpler (most updates to the plugin correspond with changes in Relay core). 
",josephsavona,2016-03-01 17:35:49
889,2016-03-03 23:51:18,"When are we likely to see a release?
",mrjackdavis,2016-03-01 17:35:49
888,2016-02-29 23:17:37,"Prereq towards using a normalized response format.
",josephsavona,2016-03-04 16:59:05
888,2016-03-02 19:18:21,"@facebook-github-bot import
",josephsavona,2016-03-04 16:59:05
888,2016-03-02 19:22:21,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1687995651476374/int_phab) to review.
",facebook-github-bot,2016-03-04 16:59:05
887,2016-02-29 22:09:16,"Currently `babel-relay-plugin` checks for the existence of the `Plugin` field on the babel object passed to the plugin, and as of version 6.6.0, it is now a function which throws the error `Error: The (relay-query) Babel 5 plugin is being run with Babel 6.`. The Babel Relay plugin detects this function and runs in Babel 5 mode, which means this gets called and the whole thing bombs out. Or, at least that's my understanding after a quick glance at the code.
",Syynth,2016-03-01 17:35:49
887,2016-02-29 22:38:41,"Thanks for reporting this. It sounds like the plugin needs to be updated - we'll try to look at this soon, but contributions are also welcome :-)
",josephsavona,2016-03-01 17:35:49
887,2016-03-01 02:11:17,"+1
",maggiben,2016-03-01 17:35:49
887,2016-03-01 03:11:37,"+1
",alexhawkins,2016-03-01 17:35:49
887,2016-03-01 06:35:46,"Sorry about the delay here, I'm currently working on changing the internal flow to import the PRs. A quick fix is to change the babel version dependency to some 6.5 version.
",kassens,2016-03-01 17:35:49
887,2016-03-01 15:11:28,"+1
",chirag04,2016-03-01 17:35:49
887,2016-03-01 15:14:04,"+1
",arvitaly,2016-03-01 17:35:49
887,2016-03-01 15:14:41,"@kassens `67b6957` fixes the problem for me in react-native.
",chirag04,2016-03-01 17:35:49
887,2016-03-01 15:37:08,"+1
",xsistens,2016-03-01 17:35:49
887,2016-03-01 17:10:54,"Manually applied the changes from @kassens PR. Works for me. :+1: 
",schickling,2016-03-01 17:35:49
887,2016-03-12 01:27:23,"@schickling what do you think of this https://github.com/relayjs/relay-starter-kit/pull/77 ?
",eugenehp,2016-03-01 17:35:49
886,2016-02-29 21:53:11,"Hi

Having this render function:

<S_CODE_TOKEN>

and a `console.log` in the `Chart` component's `componentWillMount` and `componentWillReceiveProps` reveals that `componentWillMount` is not called when there is a new `chart` item added to the `charts` list by an `addChartMutation`. Instead only `componentWillReceiveProps` is called for newly added `Charts` from the mutation.

I wonder if that is a bug or intentionally. It seems like a bug to me.

Cheers
Bernd
",BerndWessels,2016-02-29 22:35:58
886,2016-02-29 22:34:31,"This is likely because you're using the index `i` as the React key.  When a new item is added to the list React will attempt to map the new set of n+1 items onto the existing n components; you will get a `componentWillMount` somewhere, but it may not match up with the new chart. In general, using the list iterator as a React `key` is not recommended for this very reason: it's best to use some value that identifies the object itself. If the chart item has an `id`, that would be best.
",josephsavona,2016-02-29 22:35:58
886,2016-02-29 22:35:58,"I'm going to close this since it doesn't appear to be a Relay issue. We can try to help debug as time permits, but for a faster answer about React usage I'd recommend reading the [docs about keys](https://facebook.github.io/react/docs/reconciliation.html#keys) or asking on Stack Overflow.
",josephsavona,2016-02-29 22:35:58
885,2016-02-29 20:27:57,"Hi
I ran into a very annoying bug today. `react-relay` `0.7.1`

Relay is not querying a property that returns an object type if you not specify at least one 'GraphQLString' property.

To explain, I have this `User`:

<S_CODE_TOKEN>

And this `Chart`:

<S_CODE_TOKEN>

Now this works fine:

<S_CODE_TOKEN>

I can inspect the browser making this query:

<S_CODE_TOKEN>

BUT this does not work  !!! (does not query the 'chart' property at all):

<S_CODE_TOKEN>

Resulting in this query:

<S_CODE_TOKEN>

Notice that the only difference is the `type` property on `chart` in the query.

I guess there is something in relay that expects at least one property to be of type `String` or maybe `Int` or so to include the property into the query - but that is only a guess.

Anyway, this is really an annoying bug because it forces me to always include properties that I don't actually need AND because it can drive you mad if you encounter this problem for the first time ;)

Cheers
Bernd
",BerndWessels,2016-12-20 17:56:04
885,2016-03-01 05:36:57,"You should not use `type` for your fieldname. Try use another name.

Also you should not use `id` field name in _embedded types_, if you use Relay and this field no global object id.

I think reserverd fieldnames should be provided in docs.
",nodkz,2016-12-20 17:56:04
885,2016-03-02 17:57:18,"@nodkz Thanks for helping out. Note, however, that `type` is not a reserved fieldname in Relay and that the use of `id` is correct here.
",josephsavona,2016-12-20 17:56:04
885,2016-03-02 17:59:22,"@BerndWessels When you request the second version of the query (and it is sent without the charts field), have you already loaded data on the client? Is `charts` requested if you make this query on a fresh load of the app? It looks like the `id` fields might be getting removed because they've already been fetched.
",josephsavona,2016-12-20 17:56:04
885,2016-12-20 17:56:04,"Closing due to inactivity. Upcoming versions of Relay core avoid modifying queries dynamically at runtime, which helps to avoid weird quirks such as this.",josephsavona,2016-12-20 17:56:04
884,2016-02-29 09:28:36,"Given following set of types:

<S_CODE_TOKEN>

and following fatQuery definition:

<S_CODE_TOKEN>

Relay would ignore `text` field in final mutation query. If I change fatQuery to:

<S_CODE_TOKEN>

then Relay would generate query as expected. But I had an impression that you don't need to descend to leaf nodes in fatQuery?
",vladar,2016-03-08 15:14:32
884,2016-02-29 18:07:21,"cc @wincent 
",josephsavona,2016-03-08 15:14:32
884,2016-03-04 00:29:26,"Correct, you shouldn't have to go to the leaf nodes, @vladar. There are instances where fields might not be queried for, such as when the mutation affects a record ID that we have't fetched data for before, so we end up not querying for the fields in question. The fix for that case is to use a `REQUIRED_CHILDREN` config, but that doesn't seem to be the case here, given that specifying the leaf field fixes the issue for you.

Can you provide a little more context on the mutation you're trying to perform and how you're rendering the entity? Then I'll be able to look into it.
",wincent,2016-03-08 15:14:32
884,2016-03-04 06:14:50,"Tried to quickly reproduce in Relay playground, but simplest case seems to be working as expected. So this is some edge situation. Will debug further as soon as I get to real code that causes this.
",vladar,2016-03-08 15:14:32
884,2016-03-08 15:14:32,"Fixing this, starting with #922. In the meantime, if you want to unbreak and future-proof your code, change your fat query to:

<S_CODE_TOKEN>
",steveluscher,2016-03-08 15:14:32
883,2016-02-26 21:43:17,"Hi!

I noticed an issue with the keys of some of my connections I get back from Relay when going from 0.6.1 to 0.7.0 (also appears in 0.7.1). Basically, what happens is the following:

In my container, I query for data with a few levels of nesting and various connections. Example (with a lot of variables omitted):

<S_CODE_TOKEN>

This used to give me a nice object with edges and nodes as expected that I could loop through and extract what data I needed. However, in Relay 0.7.0 and greater the key of _surveys_ comes back ""malformed"" (probably not the right word...), for instance like **_surveys1UzlHL**.  I did a little digging with the queries etc and this looks like some form of internal key for separating queries/fragments that query the same types but in different components...? Anyway, I guess my question is: Am I doing something wrong here, or am I missing something? Or is this perhaps a bug?

Please let me know if I can provide any more information to help. Like I said, it doesn't happen in 0.6.1 so it was introduced (for me at least) in 0.7.0, and 0.7.1 gives the same result.

Thanks for your time. 
",zth,2016-02-26 23:40:03
883,2016-02-26 22:27:58,"@zth Can you clarify exactly where you are accessing the data such that they keys are different than you would expect? I.e. are you seeing the `_surveys1UzlHL`-style  key in the network response or in the props passed to your component? 

Note that Relay auto-aliases fields when it requests data from the server, but always uses the original name when vending data to components (i.e. we would expect for this type of key to appear in the network response, we would not expect to see it in your props).
",josephsavona,2016-02-26 23:40:03
883,2016-02-26 22:38:06,"Thanks for your quick reply! I get it in the props passed to my component. I get it in the network request too of course, but that I understand and I figured it was something like aliasing. But yeah, it's in my props instead of ""surveys"" which is what I expected and get pre-0.7.0. 

All the data I queried for and expected to get is still there too in the props (including the data nested under ""surveys"" but with the aliased key), it's just a few keys that are weird and by that making the data inaccessible in a reasonable way for me. 
",zth,2016-02-26 23:40:03
883,2016-02-26 22:43:59,"@zth Can you provide the full container fragment definition and the props that it is receiving?
",josephsavona,2016-02-26 23:40:03
883,2016-02-26 22:57:01,"Sure! Here's the full fragment:

<S_CODE_TOKEN>

And here're the props I'm getting:

<S_CODE_TOKEN>
",zth,2016-02-26 23:40:03
883,2016-02-26 23:06:00,"Hmm - this doesn't look like data that was directly provided by Relay. RelayContainer provides props that have certain opaque metadata keys - such as `__dataID__` - on all records. The data you provided only has that key at the very top, not any of the other records. Are you accessing this data directly from the network or using another API to read this data from Relay?
",josephsavona,2016-02-26 23:40:03
883,2016-02-26 23:13:25,"The only thing I can think of that'd be involved would be react-router-relay. Could that perhaps be a factor? Nothing else should be interacting with the data before the component get it, it's a normal React component fed into Relay.createContainer, nothing fancy going on except the react-router-relay with react-router. 

This is the exact same props/object, just downgrading to Relay 0.6.1:

<S_CODE_TOKEN>

Quite different, so I guess something's going on.
",zth,2016-02-26 23:40:03
883,2016-02-26 23:27:37,"Hmm, it definitely could be due to the interaction between Relay and react-router-relay. If you render the same view directly (e.g. via a plain RelayRootContainer) does it get the expected data?
",josephsavona,2016-02-26 23:40:03
883,2016-02-26 23:40:03,"Super weird - I threw out my node_modules, did npm install again and now it's working! It was also mentioned in the Discord chat that someone had had a similar issue a few weeks back, which was solved by making sure babel-relay-plugin was at the same version as Relay itself. I tried that with no success before posting here, but maybe that was the issue anyway and a fresh npm install fixed it?

Anyway, I'll close this issue now as it's working but I'll keep this fresh in mind if I see anyone else with similar issues. @josephsavona thank you very much for your extremely quick replies and your help!
",zth,2016-02-26 23:40:03
883,2016-02-26 23:44:20,"Hmm, very strange but glad it's all working for you. Thanks for the extra context, too - I'll pay attention to see if this comes up again.
",josephsavona,2016-02-26 23:40:03
882,2016-02-25 21:25:36,"For the most part this adds missing `__typename` fields in the payloads which
triggered a warning and spammed full test runs.
",kassens,2016-02-26 02:00:37
882,2016-02-25 21:25:42,"@facebook-github-bot import
",kassens,2016-02-26 02:00:37
882,2016-02-25 21:35:46,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1674199996188186/int_phab) to review.
",facebook-github-bot,2016-02-26 02:00:37
881,2016-02-25 17:40:07,"Fixes an issue with `buildRQL` that uses `Set`.
",josephsavona,2016-02-25 18:56:20
881,2016-02-25 17:40:32,"per discussion with @zpao 
",josephsavona,2016-02-25 18:56:20
881,2016-02-25 17:40:49,"@facebook-github-bot import
",josephsavona,2016-02-25 18:56:20
881,2016-02-25 17:42:13,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/975515409150278/int_phab) to review.
",facebook-github-bot,2016-02-25 18:56:20
881,2016-02-25 18:25:36,"@facebook-github-bot shipit
",josephsavona,2016-02-25 18:56:20
881,2016-02-25 18:35:40,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/975515409150278/int_phab) to review.
",facebook-github-bot,2016-02-25 18:56:20
880,2016-02-25 01:21:38,"We should upgrade the dependencies. This is currently blocked by missing `fbjs` transforms for Babel 6 that are used for the tests.
",kassens,2016-05-12 00:58:45
880,2016-03-04 20:05:57,"Yep. Breaks https://github.com/facebook/relay-starter-kit out of the box. 

<S_CODE_TOKEN>
",kevinSuttle,2016-05-12 00:58:45
880,2016-03-05 19:48:08,"As well as the tutorial at https://facebook.github.io/relay/docs/tutorial.html#content.

<S_CODE_TOKEN>
",kevinSuttle,2016-05-12 00:58:45
880,2016-03-05 19:53:29,"Looks like this has been addressed in the starter-kit.
https://github.com/relayjs/relay-starter-kit/commit/3ce3d579bcc4c3731fa6894bd493673c5ef8b8f0
",kevinSuttle,2016-05-12 00:58:45
880,2016-03-31 22:48:55,"@kassens not sure if I'm missing something but Relay and babel-relay-plugin should be compiled with Babel 6 now? (checking if there's issues that should be closed)

**Edit** 
I see now that only babel-relay-plugin is compiled with babel 6
",edvinerikson,2016-05-12 00:58:45
880,2016-04-06 16:31:19,"This PR will help us upgrade the rest to Babel 6 more easily: facebook/fbjs#127
",kassens,2016-05-12 00:58:45
880,2016-05-12 00:58:45,"Fixed with #1109
",kassens,2016-05-12 00:58:45
879,2016-02-24 23:03:12,"With strict class transforms the methods are not enumarable, so I'm changing
this to an explicit list.
",kassens,2016-02-24 23:36:19
879,2016-02-24 23:03:17,"@facebook-github-bot import
",kassens,2016-02-24 23:36:19
879,2016-02-24 23:07:07,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1516345182003857/int_phab) to review.
",facebook-github-bot,2016-02-24 23:36:19
878,2016-02-24 19:26:45,,ryanlanciaux,2016-02-24 20:30:44
878,2016-02-24 19:34:50,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-02-24 20:30:44
878,2016-02-24 19:59:50,"Thanks!

@facebook-github-bot shipit
",josephsavona,2016-02-24 20:30:44
878,2016-02-24 20:03:55,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-02-24 20:30:44
878,2016-02-24 20:16:34,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/472825076253474/int_phab) to review.
",facebook-github-bot,2016-02-24 20:30:44
877,2016-02-24 08:11:08,"0.9.0-fb3 comes with all those sweet npm3 fixes. Also see #840 and #832.

Tests are passing for me on node4 both with npm2 and npm3.

See https://github.com/facebook/jest/commit/7b44ca0ab0270fe453a3c84cb1799fcac20993e9 and https://github.com/facebook/jest/commit/2d10421baf79081ce698791023360144fb595a27

cc @jkassens @raineroviir
",cpojer,2016-02-24 18:40:38
877,2016-02-24 09:19:38,"Cool! I'll update my pr to remove the jest changes
",raineroviir,2016-02-24 18:40:38
877,2016-02-24 17:11:47,"@facebook-github-bot shipit
",kassens,2016-02-24 18:40:38
877,2016-02-24 17:14:37,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/988505034562639/int_phab) to review.
",facebook-github-bot,2016-02-24 18:40:38
876,2016-02-24 07:56:31,"Extending object currently breaks `instanceof` checks which breaks the check in
the GraphQL `node` implementation of the `todo` example. This just removes
`Object` as the superclass.

Fixes #873

Test Plan:
1. Run the todo example
2. Go to http://localhost:3000/#/active
3. Mark all todos as done
4. Reload (still on `/active`), notice it correctly displays no more active todos
5. Switch to the completed tab and notice it displays the completed todos
   (before this diff, it wouldn't dislpay anything.
",kassens,2016-02-26 01:31:10
876,2016-02-24 07:57:17,"@facebook-github-bot import
",kassens,2016-02-26 01:31:10
875,2016-02-24 04:11:45,"Fixes an issue where passing an empty array as a prop corresponding to a plural fragment would warn about mock data. The empty array is now passed through to the component as-is.
",josephsavona,2016-02-24 06:25:30
875,2016-02-24 04:11:55,"@facebook-github-bot import
",josephsavona,2016-02-24 06:25:30
875,2016-02-24 04:13:30,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1559644151013334/int_phab) to review.
",facebook-github-bot,2016-02-24 06:25:30
874,2016-02-24 01:13:53,"I have a container that does a forceFetch when it knows (websocket) data is different on the server.  forceFetch retrieves the new data successfully, and the current container/component is re-rendered correctly with the new data, but the new data doesn't apply itself through Relay's local cache/store.  

Specifically, I am doing forceFetch on a detail page with the data for one node in a connection, but none of the connections with an edge of that node are updated with the new data.

This seems like a bug.  Relay should use a node's globalId to refresh its store with the most recently fetched data for that node.

Is there a way to get forceFetch to update the store, or is the only way to update a node throughout the store by using a mutation with a config of FIELDS_CHANGE?
",gallagher-stem,2016-03-02 18:04:39
874,2016-02-24 01:54:06,"Thanks for asking about this. Relay uses IDs to merge new information with existing data in the store, and updates all components that are rendering records that were modified. So in general, we'd expect forceFetch to update the relevant views. Note that forceFetch will only update that specific query - if you call it from one detail component, only that component's data will update. To update all the data for a list, call forceFetch at the list level. 

We'll need a bit more detail to help us debug. What are the containers and fragments that are/aren't updating? Where are you calling forceFetch? 
",josephsavona,2016-03-02 18:04:39
874,2016-02-24 02:17:45,"Thanks for the reply.

I have one container that displays the summary information of the nodes of a connection, and then when you click on one of the nodes you get taken to another container that displays detail information about that specific node.

The list container query is `query { user }` and its fragment gets back the connection with the edges/nodes I display in the list.  The detail container query is `query { node(id: $id) }` and its fragment gets back all the fields for that node.

I am calling forceFetch from the detail view container which uses the node query.  The detail view container updates correctly when forceFetch is called, but the list container, which uses the user query, does not update its connection with the new data that was forceFetched.
",gallagher-stem,2016-03-02 18:04:39
874,2016-02-24 02:23:13,"It sounds like the list container queries for only the list of items - something like `users(first: $n) { edges { node { ${Detail.getFragment(...)} } } }`. In that case, if some user's data updates (e.g. due to forceFetch), there are no properties to update in the list and only the detail item should/would update. 

What specific property would you expect to update in the list after the forceFetch?
",josephsavona,2016-03-02 18:04:39
874,2016-02-24 02:54:28,"User is my Viewer, so the List fragment is more like `fragment on User {  items(first: $n)  {  edges  {  node  {  id, name, status  }  }  }`

Also, Detail is a separate container from List and not a child.  The Detail fragment is  like `fragment on Node  {  id,  ... on Item  {  name, status, all, the, things }  }`

So the specific property that updates is 'status' which is explicitly in the fragment for each container. The node's globalId is also in the fragment for each container, which is why I was thinking that Relay would be able to update its store after the forceFetch: its got a node globalId, its got new data, it should just be able to update its store by the globalId, yah?
",gallagher-stem,2016-03-02 18:04:39
874,2016-02-24 04:20:07,"Thanks for the extra information. We'd like to help debug this issue, but we'll need more information. Given that this is such a core part of Relay functionality, I'm wondering if there is something specific about your schema, app, or configuration that is causing the view not to update appropriately in this case. For example, it could be something as innocuous as a `shouldComponentUpdate` in your app that is returning false or similar. 

Regardless, the best way to debug and find the cause is to create a minimal repro case. Is it possible to create one in the [Relay Playground](http://facebook.github.io/relay/prototyping/playground.html#/)? Alternately, what are the full fragments of the list and detail views, and the full data before/after the forceFetch?
",josephsavona,2016-03-02 18:04:39
874,2016-02-24 18:36:30,"Thanks for the help.  I'm up against a deadline this week (launching a React + Relay app into prod) but I will throw together a repro case when I am in the clear.
",gallagher-stem,2016-03-02 18:04:39
874,2016-02-24 19:10:38,"@gallagher-stem Sounds good. To unblock, i would recommend double-checking that you don't have a `shouldComponentUpdate` that is preventing the list/list item from re-rendering, or that you aren't somehow using the previous version of props. It's also worth checking that the ids all match up as you expect between the list and detail view.

Again, if you provide a bit more information about the container fragments and their props pre/post forceFetch we can help more.
",josephsavona,2016-03-02 18:04:39
874,2016-03-02 18:04:39,"@gallagher-stem I'm going to close this issue since we know data updates work in the general case and don't have a good repro. If you can, please let us know some of the information mentioned above and we'll be happy to reopen and investigate.
",josephsavona,2016-03-02 18:04:39
873,2016-02-24 00:18:12,"I haven't dug more into this yet, just documenting this issue here.

Repro:
1. Run the todo example
2. Go to http://localhost:3000/#/active
3. Mark all todos as done
4. Reload (still on `/active`), notice it correctly displays no more active todos
5. Switch to the completed tab and notice it's empty (it shouldn't be)
6. Reload `/completed` and notice it now displays the completed todos. (switching to the ""All"" tab correctly displays the todos)
",kassens,2016-02-26 01:31:10
873,2016-02-24 00:23:51,"duplicate of #871
",josephsavona,2016-02-26 01:31:10
873,2016-02-24 00:24:23,"Actually, this is a bug specific to the todo app, let's track here.
",josephsavona,2016-02-26 01:31:10
873,2016-02-24 00:59:46,"I done some digging on it, and it is not easy to make list right. As I understand, with current API it is not possible to insert element to specific place/index with `RANGE_ADD`, we may only append/prepend/remove elements. 
For example in todo we expect what todos will be in one order under different filters. While performing `RANGE_ADD` we actually don't know where to place new element.

Imagine we have 3 of todos 

<S_CODE_TOKEN>

Under Completed filter we see:

<S_CODE_TOKEN>

But what of we marking `item 2` as completed, we may expect it should be the same order as all items, right?

<S_CODE_TOKEN>

But we can't achieve this, we may do only `append` or `prepend`

<S_CODE_TOKEN>

While All list remains in this order:

<S_CODE_TOKEN>

So it makes weird effect, items are jumping while switching filter.

I think filtering like this is likely use case and issue related to Relay and its API as well.
",r0b1n,2016-02-26 01:31:10
873,2016-02-24 01:18:42,"One thing that seems very suspicious is that this `instanceof` check is false in `database.js`:

<S_CODE_TOKEN>

This causes a `node` call to return `null` when it shouldn't.
",kassens,2016-02-26 01:31:10
873,2016-02-24 01:22:38,"Looks like we just have to remove the `extends Object` from `Todo` and `User`. Will test that later.
",kassens,2016-02-26 01:31:10
873,2016-02-24 01:32:27,"@kassens I think it is babel related https://phabricator.babeljs.io/T6964
",r0b1n,2016-02-26 01:31:10
873,2016-02-24 07:58:22,"Thanks @r0b1n, that's exactly it. 
",kassens,2016-02-26 01:31:10
872,2016-02-23 20:50:11,,gouroujo,2016-02-23 22:03:03
872,2016-02-23 20:54:46,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-02-23 22:03:03
872,2016-02-23 22:03:03,"Thanks for sending the pull request. I'm closing this as I'm already merging #867 which has the same fix.
",kassens,2016-02-23 22:03:03
871,2016-02-23 13:00:46,"Looks like there is some issues with handling local cache together with filtering.
After changing records field which participates in filtration Relay doesn't re-filter lists and item remains in old list, not appears in right list.
After page reloading everything becomes normal, it means data on server side is ok.

Gif with error on todo example: 
After unchecking ""Taste Javascript"" remains in Completed list, and not moved to ""Active""
![relaybug-2](https://cloud.githubusercontent.com/assets/548774/13252193/fa47b9b4-da3d-11e5-98f4-90912b955bd5.gif)
",r0b1n,2016-02-24 00:24:36
871,2016-02-23 18:22:10,"Thanks for reporting this. It looks like the range configs need to be updated so that modifying a todo's completed status also adds/removes it to the appropriate active/completed lists.
",josephsavona,2016-02-24 00:24:36
871,2016-02-24 00:24:36,"Merging with #873 
",josephsavona,2016-02-24 00:24:36
870,2016-02-23 08:53:05,"I tried to run starwars example and the graphql request timeout and giving me this error.

<S_CODE_TOKEN>
",bfwg,2016-05-27 06:54:41
870,2016-02-23 18:26:48,"Thanks for reporting this. Technically IDs/strings are equivalent, and a single string literal is valid at a location that accepts an array of strings. This suggests that a `ID!` should flow into `[String]` and Relay is producing not-invalid queries. 

@leebyron @dschafer can you confirm?
",josephsavona,2016-05-27 06:54:41
870,2016-05-27 06:54:41,"I cleaned up the examples for the release of [0.9.0](https://github.com/facebook/relay/releases/tag/v0.9.0). Give them a try!
",steveluscher,2016-05-27 06:54:41
870,2016-05-27 11:17:20,"We're in the middle of a little bit of a revert/unrevert situation, so if anyone wants to try the examples in the next 24 hours or so be sure to check out the v0.9.0 tag:

<S_CODE_TOKEN>
",steveluscher,2016-05-27 06:54:41
869,2016-02-22 22:57:50,"I've been trying to run the Relay tests locally, but for an unknown reason, and sometimes non-deterministically, I get the following output:

<S_CODE_TOKEN>

I haven't seen any other issues so maybe it's somehow specific to my machine, but I wonder if anyone has seen this before and knows a workaround.
",stubailo,2016-02-23 01:20:11
869,2016-02-23 01:20:10,"I think I fixed this by updating to the newest `watchman`. I had 3.0.0, and the newest was 4.5.0 or something.
",stubailo,2016-02-23 01:20:11
869,2016-02-23 06:03:28,"thanks for following up :-)
",josephsavona,2016-02-23 01:20:11
868,2016-02-22 21:44:25,"We're running into problems sharing customizable Relay components between applications. Here's an example

<S_CODE_TOKEN>

A problem arises because `Profile`'s query fragment has already been constructed statically:

<S_CODE_TOKEN>

and has no knowledge of the query `CustomerHander` needs, so it can't be injected into the query (without jumping through some hoops). It would be ideal if Relay could handle this case better or construct the queries more automatically.
",clayallsopp,2016-09-03 00:57:57
868,2016-02-22 22:06:13,"cc @josephsavona what I mentioned IRL at react conf
",clayallsopp,2016-09-03 00:57:57
868,2016-09-03 00:57:57,"Thanks for sharing this issue, @clayallsopp. We're working on getting [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable) ready for release, and that will have an entirely static query construction system, with all queries being built at compile time, and so the `Header.getFragment()` interpolation will go away, replaced with vanilla GraphQL fragment spreads (`...HeaderUserFragment` or some such). I'm going to close this and label it with the ""relay 1"" label. If there are still things that are painful to do under the new Relay 2 API then we should open a separate issue for that.
",wincent,2016-09-03 00:57:57
867,2016-02-22 19:38:44,"use `babel-polyfill` which is listed in `package.json`.
",chentsulin,2016-02-23 22:15:34
867,2016-02-23 19:31:17,"Thanks, looks like this is also the recommended way on https://babeljs.io/docs/usage/polyfill/

@facebook-github-bot shipit
",kassens,2016-02-23 22:15:34
867,2016-02-23 19:45:36,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1562120417447959/int_phab) to review.
",facebook-github-bot,2016-02-23 22:15:34
866,2016-02-22 18:05:22,"Here is [playground](http://facebook.github.io/relay/prototyping/playground.html#source=%2F**%0A%20*%20Copyright%20%28c%29%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0A%0A%2F**%0A%20*%20%231%20-%20Your%20React%20components%0A%20*%20This%20will%20look%20familiar%20to%20React%20developers.%0A%20*%0A%20*%20To%20learn%20more%20about%20React%2C%20visit%3A%0A%20*%20%20https%3A%2F%2Ffacebook.github.io%2Freact%0A%20*%2F%0Aclass%20TestComponent%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20%2F%2F%20Relay%20will%20materialize%20this%20prop%20based%20on%20the%0A%20%20%20%20%2F%2F%20result%20of%20the%20query%20in%20the%20next%20component.%0A%20%20%20%20var%20%7Bhello%7D%20%3D%20this.props.greetings%3B%0A%20%20%20%20return%20%3Ch1%3E%7Bhello%7D%3C%2Fh1%3E%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%232%20-%20Relay%20containers%0A%20*%20Compose%20your%20React%20components%20with%20a%20declaration%20of%0A%20*%20the%20GraphQL%20query%20fragments%20that%20fetch%20their%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-containers.html%0A%20*%2F%0ATestComponent%20%3D%20Relay.createContainer%28TestComponent%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20language%3A%20'English'%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20%2F%2F%20This%20GraphQL%20query%20executes%20against%0A%20%20%20%20%2F%2F%20the%20schema%20in%20the%20'schema'%20tab%20above.%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20To%20learn%20more%20about%20Relay.QL%2C%20visit%3A%0A%20%20%20%20%2F%2F%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fapi-reference-relay-ql.html%0A%20%20%20%20greetings%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20hello%20%28lang%3A%20%24language%29%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0A%0A%0A%2F%2F%20Welcome%20to%20Relay.%0A%2F%2F%20Allow%20us%20to%20introduce%20you%20to%20the%20four%20elements.%0A%0A%2F**%0A%20*%20%231%20-%20Your%20React%20components%0A%20*%20This%20will%20look%20familiar%20to%20React%20developers.%0A%20*%0A%20*%20To%20learn%20more%20about%20React%2C%20visit%3A%0A%20*%20%20https%3A%2F%2Ffacebook.github.io%2Freact%0A%20*%2F%0Aclass%20HelloApp%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20%2F%2F%20Relay%20will%20materialize%20this%20prop%20based%20on%20the%0A%20%20%20%20%2F%2F%20result%20of%20the%20query%20in%20the%20next%20component.%0A%20%20%20%20var%20%7Bhello%7D%20%3D%20this.props.greetings%3B%0A%20%20%20%20return%20%3CTestComponent%20language%3D'german'%20greetings%3D%7Bthis.props.greetings%7D%20%2F%3E%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%232%20-%20Relay%20containers%0A%20*%20Compose%20your%20React%20components%20with%20a%20declaration%20of%0A%20*%20the%20GraphQL%20query%20fragments%20that%20fetch%20their%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-containers.html%0A%20*%2F%0AHelloApp%20%3D%20Relay.createContainer%28HelloApp%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20language%3A%20'English'%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20%2F%2F%20This%20GraphQL%20query%20executes%20against%0A%20%20%20%20%2F%2F%20the%20schema%20in%20the%20'schema'%20tab%20above.%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20To%20learn%20more%20about%20Relay.QL%2C%20visit%3A%0A%20%20%20%20%2F%2F%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fapi-reference-relay-ql.html%0A%20%20%20%20greetings%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20%24%7BTestComponent.getFragment%28'greetings'%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0A%2F**%0A%20*%20%233%20-%20Relay%20routes%0A%20*%20Define%20a%20root%20GraphQL%20query%20into%20which%20your%0A%20*%20containers'%20query%20fragments%20will%20be%20composed.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20routes%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-routes.html%0A%20*%2F%0Aclass%20HelloRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%20%20%2F%2F%20A%20unique%20name%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20%2F%2F%20Here%2C%20we%20compose%20your%20Relay%20container's%0A%20%20%20%20%2F%2F%20'greetings'%20fragment%20into%20the%20'greetings'%0A%20%20%20%20%2F%2F%20field%20at%20the%20root%20of%20the%20GraphQL%20schema.%0A%20%20%20%20greetings%3A%20%28Component%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20GreetingsQuery%20%7B%0A%20%20%20%20%20%20%20%20greetings%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'greetings'%29%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0A%2F**%0A%20*%20%234%20-%20Relay%20root%20containers%0A%20*%20Compose%20a%20Relay%20container%20with%20a%20Relay%20route.%0A%20*%20This%20enables%20Relay%20to%20synthesize%20a%20complete%20query%0A%20*%20to%20fetch%20the%20data%20necessary%20to%20render%20your%20app.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20root%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-root-container.html%0A%20*%2F%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BHelloApp%7D%0A%20%20%20%20route%3D%7Bnew%20HelloRoute%28%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B&schema=%2F**%0A%20*%20Copyright%20%28c%29%202013-present%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aimport%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%7D%20from%20'graphql'%3B%0A%0Avar%20GREETINGS%20%3D%20%7B%0A%20%20hello%3A%20'Hello%20world'%2C%0A%7D%3B%0A%0A%2F**%0A%20*%20Objects.%0A%20*%20Build%20up%20a%20portrait%20of%20your%20data%20universe%0A%20*%20using%20the%20object%20type.%20Here%2C%20we%20define%20a%0A%20*%20type%20of%20object%20that%20has%20a%20'hello'%20field%0A%20*%20that%20is%20of%20the%20string%20type.%0A%20*%2F%0Avar%20GreetingsType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Greetings'%2C%0A%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20hello%3A%20%7B%0A%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20lang%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20%20%20%20%20defaultValue%3A%20'Czech'%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20type%3A%20GraphQLString%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0A%2F**%0A%20*%20The%20schema.%0A%20*%20Here%20we%20export%20a%20schema%20that%20offers%20one%20root%0A%20*%20field%20named%20'greetings'%2C%20and%20a%20method%20to%0A%20*%20resolve%20its%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20writing%20GraphQL%20schemas%20for%20Relay%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Fgithub.com%2Fgraphql%2Fgraphql-relay-js%0A%20*%2F%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20greetings%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20GreetingsType%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20Here%20we%20define%20a%20resolver%20that%20returns%0A%20%20%20%20%20%20%20%20%2F%2F%20the%20data%20defined%20above.%20Were%20this%20schema%0A%20%20%20%20%20%20%20%20%2F%2F%20executing%20on%20the%20server%20side%2C%20you%20could%0A%20%20%20%20%20%20%20%20%2F%2F%20write%20a%20resolve%20method%20that%20fetches%0A%20%20%20%20%20%20%20%20%2F%2F%20live%20data%20from%20a%20database.%0A%20%20%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20GREETINGS%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%29%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A). 

If you change prop `language` of the `TestComponent`, it will start working. So pattern is that relay variable has same name as props.

It was tricky to find this pattern. Solution is not to use same variable and props names, but is there reason for it?  In any case it would be nice some warning. Currently field with clashing argument becomes undefined. 
",jardakotesovec,2016-12-20 17:54:53
866,2016-02-29 07:17:58,"When you need to render nested component with non-default variables in your parent component, you have to do both - variable mapping in fragment and passing props with same name in render.

#309 has more info on this.
",vladar,2016-12-20 17:54:53
866,2016-05-13 21:47:46,"+1

I'm a happy user of Relay, but this was quite unexpected behavior for me. I understand that you need to somehow pass non-default variables from parent component, but assuming the separation of data stored in such ""distant"" fields as `props` and `props.relay.variables` was really natural. Additionally there is a kind of similarity in names pattern `variables` -`setVariables` - `props` and `state` - `setState` - `props`. While the separation of data stored in `props` and `state` is completely clear.

If you are sure there is no better, more explicit, way of passing non-default variables, some documentation on that particular `props` - `variables` relation will be greatly appreciated (or may be there is, but where then?).  
",glowka,2016-12-20 17:54:53
866,2016-05-14 18:27:50,"@glowka Good points. I created #1142 to document how parents can override child variables, and b22c3eab7fe56789fe6ba335bb862bf323f47b2e improves the error messaging in cases where variables are not passed correctly.
",josephsavona,2016-12-20 17:54:53
866,2016-12-20 17:54:53,"Closing as upcoming APIs will no longer access variables from props, thanks for reporting this!",josephsavona,2016-12-20 17:54:53
865,2016-02-22 15:03:05,"Hi don't really know where this issue fits in. 
But I have trouble getting relay to work in my phoenix project. 

So here is my app 
https://github.com/note89/phoenix-hipster-stack/tree/master/web/static/js

package.json 

<S_CODE_TOKEN>

I get this error when i visit my localhost. 

<S_CODE_TOKEN>

Stack trace

<S_CODE_TOKEN>

**What I have tried.**
localhost:4000/graphql **works**
changing app.js into plain React without Relay **works**
making typos in the schema.json makes webpack complain. 
compiling with babel in the terminal seems to do what it should ?
(guess its using the .babelrc)

<S_CODE_TOKEN>
",note89,2016-09-03 00:59:36
865,2016-02-22 15:39:48,"Well of course i found the solution directly after posting this but after spending the whole day :P
Maby the Relay documentation should tell about this bug ? and that you need this hack if you dont want to use the relay starter kit. 
https://github.com/BerndWessels/babel-relay-plugin-loader
",note89,2016-09-03 00:59:36
865,2016-02-22 15:40:29,"It looks like the Relay plugin isn't configured correctly - the Relay.QL template literals are either being transformed away before the relay plugin sees them (note the call to _taggedTemplateLiteral at the top) or it isn't running at all. 

I'd recommend double checking your Babel configuration and the docs for the relay plugin. If that doesn't help, asking on stack overflow or the discord channel might be the best bet since there's a wider audience of users to help diagnose problems. 
",josephsavona,2016-09-03 00:59:36
865,2016-09-03 00:59:36,"Looks like the original issue was resolved, so closing due to inactivity. PRs welcome, however, from anybody who wants to improve the documentation. Thanks @note89.
",wincent,2016-09-03 00:59:36
864,2016-02-22 06:57:26,"Fix for #855. https://github.com/facebook/relay/commit/bf7ba6a31f9cc937141c73e55f6a37e46bcc85ce fixed #784 by only printing one variable for each unique variable value (which means that we don't use different variable names for the same serialization key/alias). However, that means that depending on the type of the argument first used to create a variable, the variable's type may be non-null. The fix here is to always print variable definitions using non-nullable types, which is safe since we know a value will be supplied. Note that variables aren't printed if the value is null.
",josephsavona,2016-03-02 18:43:13
864,2016-02-26 19:57:22,"@facebook-github-bot import
",josephsavona,2016-03-02 18:43:13
864,2016-02-26 20:08:33,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1198050273557530/int_phab) to review.
",facebook-github-bot,2016-03-02 18:43:13
864,2016-03-02 02:35:21,"@facebook-github-bot import
",josephsavona,2016-03-02 18:43:13
864,2016-03-02 02:36:46,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1198050273557530/int_phab) to review.
",facebook-github-bot,2016-03-02 18:43:13
864,2016-03-02 02:36:54,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1198050273557530/int_phab) to review.
",facebook-github-bot,2016-03-02 18:43:13
863,2016-02-22 06:44:58,"This is a follow up for https://github.com/facebook/relay/issues/547 but my proposal is different. I am against dev mode as well, but what if Relay only renamed fragment if fragment doesn't have name in Container definition?

Say in following case Relay will generate name for fragment (as it does now):

<S_CODE_TOKEN>

But in this case Relay will preserve original fragment name:

<S_CODE_TOKEN>

I realize that preserving original fragment name could produce conflicts when two components have same fragment names, but such errors would be obvious and very easy to fix for developers. 

I guess you could even raise an error (or warning) at static compile step if two components have fragment with same name.

This way every team could peek it's own style of dealing with fragment names. If you need short fragment aliases - don't set fragment names in your containers (they are useless right now anyway). But if you value readability of the query - just set fragment names. 

For us having readable queries is way more important than having shorter queries. Because debugging Relay-generated queries is very frustrating and time-consuming.
",vladar,2016-09-03 01:01:51
863,2016-02-22 07:13:55,"Thanks for filing this; this is really two issues in one. First is that it's hard to read the machine-generated queries, which we've optimized more for byte-size than we have for debugging. Second, there's the need to debug queries at all - please let us know when you encounter issues so we can also try to address these via documentation, fixes, etc.

As for printing readable queries, we'd like to keep the printed output as consistent and minimal as possible. However, a middle ground could be to offer a way to transform the current printer output into something more readable. If `printRelayOSSQuery` returned a nullable fragment map of printed fragment name -> original fragment name, then it would be possible to rewrite the printed query (swapping `...F0` for the corresponding name). You could use this in DEV, for example, to help debug. In production the map wouldn't be returned (hence making it nullable) to avoid the overhead of allocating this mapping.

@yungsters thoughts?
",josephsavona,2016-09-03 01:01:51
863,2016-02-22 08:16:03,"I had to debug Relay queries in following situations:
1. Some bugs in Relay. This doesn't happen often, but when it happens - you would want to isolate components that caused the bug, but mangled fragment names make it much harder than it could be.
2. Occasionally GraphQL server throws on some field and returns error. It may happen because of unexpected set of variables. Then you want to figure out which component produced these invalid variables, but mapping fragment name back to component is hard, so it requires more efforts to isolate the problem.
3. We use https://github.com/webonyx/graphql-php for GraphQL server and it is not always up-to-date with latest graphql-js features. So Relay may allow the query, but server fails and you need to debug it and sometimes adjust your component fragments.
4. Forgot to update schema. You get some error and go full scale debugging before you realize that it's not a bug %)

In general, the experience is pretty much the same as not having source maps for javascript. 

> As for printing readable queries, we'd like to keep the printed output as consistent and minimal as possible.

Yeah, but with my proposal it would always be consistent. If you omit fragment name in container definition (and right now fragment names are useless anyway) - you always get the same behavior (same as now). 

But if you set fragment name you always get consistent queries with full fragment names - regardless of dev / production mode. And it is predictable - you get what you define.

I am pretty sure that some teams would strongly prefer non-optimized queries with original fragment names even on production - for debugging and analysis (right now fragments have different names in different queries, which reduces value of queries for analysis).
",vladar,2016-09-03 01:01:51
863,2016-05-10 16:17:25,"@yuzhi recently added an option where queries are printed with newlines/spacing in DEV mode. Might be worth also printing the fragment name in DEV too (plus the hashed value as a prefix/suffix, which is necessary to distinguish multiple copies of the same fragment that may have different variables).
",josephsavona,2016-09-03 01:01:51
863,2016-09-03 01:01:51,"We're preparing [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable) for release soon, and with it we'll have statically generated, persistable queries. This will create new challenges and opportunities in terms of debuggability, logging, analysis, introspection etc. So I'm going to close this with the ""relay 1"" label and suggest that we open new issues for any specific ideas that we have for Relay 2.

Thanks for bringing this up @vladar!
",wincent,2016-09-03 01:01:51
862,2016-02-22 06:08:22,"Fix for #861. Copying my description there:

In this case, what's happening is that you're fetching some record:

<S_CODE_TOKEN>

Because everything is a concrete type it's okay to query fields directly w/o conditioning on type (i.e. you don't need to do `viewer { ... on SomeType { session } }`). However when Relay tries to refetch `session`, it doesn't have an id, so it looks up the ""path"" to session from the nearest node that does have an id, in this case the `viewer` record. It constructs a query:

<S_CODE_TOKEN>

And fills in everything that was on the path from node 123 down to session:

<S_CODE_TOKEN>

But this is invalid: while in the original query `session` was a direct field of a concrete type (so no need to condition), now it's a direct field on a different type, `Node`, which doesn't have a `session` field. Relay should use its knowledge of the type of record 123 to construct the conditioning fragment and generate the correct:

<S_CODE_TOKEN>
",josephsavona,2016-02-25 01:35:35
862,2016-02-22 06:10:50,"@facebook-github-bot import
",josephsavona,2016-02-25 01:35:35
862,2016-02-22 06:24:58,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1555947471388356/int_phab) to review.
",facebook-github-bot,2016-02-25 01:35:35
861,2016-02-21 01:33:37,"It's my first time using `setVariables`, so it's quite possible I'm doing something incorrectly and it's confusing Relay. With that said, I've got a React component, with a Relay container, that calls `setVariables` in response to a prop change. When I call `setVariables`, Relay dispatches a query that looks like the folliowing ...

<S_CODE_TOKEN>

The GraphQL server responds with the following error ...

<S_CODE_TOKEN>

Now, in that query, the type of the node being queried is `Viewer`. It makes complete sense to me that the `Node` type does not have this field, so the error there is correct, but the type returned by that query is `Viewer` which does have the field. If this query had the spread operator on `Viewer` then perhaps it'd work. I'm not sure if this is an issue with Relay building an incorrect query, though, or if it's me doing something wrong.

Here is my component that calls `setVariables` ...

<S_CODE_TOKEN>

As mentioned earlier, it will call `setVariables` in response to a prop change. This component also uses Redux for some local state.

Some additional info is that when this component is first rendered it does not cause the invalid query. The invalid query open happens after the call to `setVariables`, in response to the prop change.
",ryancole,2016-02-25 01:57:34
861,2016-02-21 02:29:46,"Thanks for the detailed bug report. To help us debug this, what is the original query that you used to fetch the data for this component? 
",josephsavona,2016-02-25 01:57:34
861,2016-02-21 02:56:23,"Also, just to be sure: what version of relay are you using?
",josephsavona,2016-02-25 01:57:34
861,2016-02-21 04:36:03,"I'm using version 0.7.0.

Alright, so here's the query that runs when the component is first rendered. I'm not going to trim it down, just so that it's kept in original state. You can see the fragment on `Session` (F6) in there. This is the fragment from the Relay container above.

<S_CODE_TOKEN>
",ryancole,2016-02-25 01:57:34
861,2016-02-21 05:45:26,"Great, thanks for confirming. I'm pretty sure I know what's causing this, will confirm tomorrow and hopefully send a PR to fix. 
",josephsavona,2016-02-25 01:57:34
861,2016-02-21 05:53:33,"Out of curiosity, what do you think causes it? I wouldn't mind getting more knowledge of the internals - I could take a look, too. If not too much trouble for you to explain, that is.
",ryancole,2016-02-25 01:57:34
861,2016-02-21 19:00:10,"@ryancole Yeah, I'm always happy to explain more about how Relay works ;-)

In this case, what's happening is that you're fetching some record:

<S_CODE_TOKEN>

Because everything is a concrete type it's okay to query fields directly w/o conditioning on type (i.e. you don't need to do `viewer { ... on SomeType { session } }`). However when Relay tries to refetch `session`, it doesn't have an id, so it looks up the ""path"" to foo from the nearest node that does have an id, in this case the `viewer` record. It constructs a query:

<S_CODE_TOKEN>

And fills in everything that was on the path from node 123 down to session:

<S_CODE_TOKEN>

Every part of this query is valid except the very first field: in the original query `session` was a direct field of a concrete type (so no need to condition), but now it's a direct field of different type, `Node`, which doesn't have a `session` field. Relay should use its knowledge of the type of record 123 to construct the conditioning fragment and generate the correct:

<S_CODE_TOKEN>

The logic for handling this case is in [RelayQueryPath](https://github.com/facebook/relay/blob/master/src/query/RelayQueryPath.js#L125-L182) - the fix is to wrap the final [set of children](https://github.com/facebook/relay/blob/master/src/query/RelayQueryPath.js#L174-L178) in a fragment whose type is determined by looking it up in the store. 
",josephsavona,2016-02-25 01:57:34
861,2016-02-21 22:12:24,"Gotcha. Thanks for the explanation.

I think in my situation, it would make sense for me to just give `Session` an `id` field, which would allow Relay to query it directly, via `node`.

As far as the issue itself, I checked out the code and I think it may be above my head in terms of attempting a fix myself. I may give it a shot and then compare it to yours, because I'm sure I'll be a bit slow on mine. If this situation is indeed an issue, then at least my odd scenario pointed it out! :)
",ryancole,2016-02-25 01:57:34
861,2016-02-21 22:19:56,"@ryancole yeah, an `id` on session is a good workaround.
",josephsavona,2016-02-25 01:57:34
861,2016-02-25 01:57:34,"@ryancole this is now fixed on master, i'm going to close out the issue. thanks again for reporting this :-)
",josephsavona,2016-02-25 01:57:34
860,2016-02-21 00:53:26,"Fixes a false-positive warning from #474.
",josephsavona,2016-02-23 20:10:37
860,2016-02-21 00:54:19,"@facebook-github-bot import
",josephsavona,2016-02-23 20:10:37
860,2016-02-21 00:55:42,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/840911486019187/int_phab) to review.
",facebook-github-bot,2016-02-23 20:10:37
859,2016-02-20 17:24:33,"It seems like you could get away with a single RootContainer, if you give it all the queries your server supports in a single route, but from the documentation, it seems like this means that your entire application will either load or fail to load, entirely removing the possibility of degrading gracefully.
",bigblind,2016-02-25 02:24:23
859,2016-02-25 02:24:23,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We (or another member of the Relay community) will be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",kassens,2016-02-25 02:24:23
859,2016-02-25 02:43:20,"Hi Jan,

Thank you for your reply. I've asked [this question on Stack Overflow](http://stackoverflow.com/questions/35518074/how-many-relay-rootcontainers-should-my-app-have),
but it got put on-hold, because it was somehow deemed primarily opinion
based. I'm not sure how I could edit my question to be more objective, so I
 gave Relay's issue tracker a try.
",bigblind,2016-02-25 02:24:23
858,2016-02-20 16:19:16,"I have an app that uses Hawk for authentication ([hueniverse/hawk](https://github.com/hueniverse/hawk))

The authentication is driven using a plain http endpoint `/api/auth`
**Edit**: I have moved authentication to a graphql mutation

My graphQL endpoint has the following relay compatible schema:

<S_CODE_TOKEN>

So when an unauthenticated user first visits the site, the following query is run:

<S_CODE_TOKEN>

Since this query is lacking Hawk credentials in the http headers, the above query returns null, causing the app to render a login form.

Upon login, the app will make a call to `/api/auth` in order to get credentials for future graphQL calls
**Edit**: Now using mutations instead

Then the login page will call `this.props.relay.forceFetch()` in order to update the required user data.

However, since the initial call returns `null` relay simply skips the graphQL call because it does not have an id query `node` with.

If I refresh the entire page, the `viewer` prop contains the user data of the logged in user, and if I login again, the following query runs:

<S_CODE_TOKEN>

Conversely, a similar issue arises when refreshing data after logout. `this.props.relay.forceFetch()` runs the above `node` query instead of querying `viewer`.

How can I force relay to use the inital query to refetch the currently logged in user?
",legomind,2016-12-20 17:57:12
858,2016-02-20 16:34:28,"perhaps similar to #742?
",legomind,2016-12-20 17:57:12
858,2016-03-03 11:49:59,"@legomind did you eventually figure out the problem or find a workaround? Facing a similar scenario at the moment.
",schickling,2016-12-20 17:57:12
858,2016-03-03 13:37:44,"I found a very hacky workaround.

Basically, I wrapped the User Type in a ViewerType and gave viewer an id of 1, even when user is null.
",legomind,2016-12-20 17:57:12
858,2016-03-03 15:48:55,"I had the same idea but feels really wrong :monkey_face: 
",schickling,2016-12-20 17:57:12
858,2016-03-03 16:20:04,"@legomind, @schickling - are logged out users able to access _any_ GraphQL data in your apps? An approach we often use is to not even query the GraphQL server until the user is logged in - this avoids having fields start out `null` when they really aren't.

Another approach going forward will be to have one RelayContext (currently not public API yet) before the user logs in to store unauthenticated data, and then create a new context after the user logs in. In the meantime, though, could you work around this by not issuing queries until login?
",josephsavona,2016-12-20 17:57:12
858,2016-03-03 17:40:18,"@schickling Yes, it feels very, very wrong.

@josephsavona Currently, authentication is actually performed using mutations (I just updated the original post), so that approach would not work. Even if I was to move authentication out of graphql, how would I prevent the initial queries? Just avoid rendering a RootContainer?
",legomind,2016-12-20 17:57:12
858,2016-03-03 18:10:34,"> how would I prevent the initial queries? Just avoid rendering a RootContainer?

@legomind Yup.
",josephsavona,2016-12-20 17:57:12
858,2016-03-03 20:01:59,"Thanks for the clarification @josephsavona! Is there any rough timeline for the multiple RelayContext feature?
",schickling,2016-12-20 17:57:12
858,2016-03-03 22:16:48,"> Is there any rough timeline for the multiple RelayContext feature?

Soon-ish - I posted an update on the main task [#558](https://github.com/facebook/relay/issues/558#issuecomment-191817073)
",josephsavona,2016-12-20 17:57:12
858,2016-12-20 17:57:12,"We added support for multiple contexts/environments a few releases back, which addresses the logout or change-user case.",josephsavona,2016-12-20 17:57:12
857,2016-02-20 11:44:54,"Avoid unnecessary misunderstanding:  word `container` for target render DOM element is not the best name. Cause term `container` in Relay used for another thing. 
",nodkz,2016-02-20 18:16:17
857,2016-02-20 17:55:59,"@facebook-github-bot shipit
",josephsavona,2016-02-20 18:16:17
857,2016-02-20 18:04:31,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/966158460142694/int_phab) to review.
",facebook-github-bot,2016-02-20 18:16:17
856,2016-02-20 11:10:00,"Fix typo when passing object to components's property.
",nodkz,2016-02-20 18:16:17
856,2016-02-20 17:55:10,"@facebook-github-bot shipit
",josephsavona,2016-02-20 18:16:17
856,2016-02-20 18:04:37,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/956120951125279/int_phab) to review.
",facebook-github-bot,2016-02-20 18:16:17
855,2016-02-20 09:18:08,"Got this error after upgrading to Relay 7.1: 

<S_CODE_TOKEN>

Here is a query generated by Relay (stripped unrelated parts as it is long):

<S_CODE_TOKEN>

The problem is that type `User` defines `size` argument as `PhotoSizeEnum` and type `File` defines `size` argument as `PhotoSizeEnum!` but Relay uses same variable for both.

Relay 6.x uses different variables in this case.

As a workaround made both definitions same, but this looks like a bug for me.
",vladar,2016-03-02 19:07:47
855,2016-02-20 18:04:00,"Thanks for reporting this, this is a bug. This is a side-effect of https://github.com/facebook/relay/commit/bf7ba6a31f9cc937141c73e55f6a37e46bcc85ce which fixed #784. To resolve both issues, we'll have to change the way the query variables are printed - since the variables are known to be non-null (else we wouldn't print them), we can print e.g. `query Routes($size_0: PhotoSizeEnum!)` (non-nullable). Non-null variables are a subset of of nullable variables, so this would allow `$size_0` to be used in both fields.

The variables are printed here: 
https://github.com/facebook/relay/blob/master/src/traversal/printRelayOSSQuery.js#L139-L149. Any interest in helping us fix? ;-)
",josephsavona,2016-03-02 19:07:47
855,2016-02-22 06:16:33,"I'd be happy to help, but have zero time now and also don't know Relay internals to the extent when I could contribute. Otherwise I would send pull request for this right away %)
",vladar,2016-03-02 19:07:47
855,2016-03-02 19:07:47,"Fix has landed. Thanks again for reporting this, @vladar!
",josephsavona,2016-03-02 19:07:47
854,2016-02-20 08:17:07,,denvned,2016-02-21 00:55:44
854,2016-02-20 08:20:24,"Just for reference, was usage of this module added recently? When I updated jest last week, all the tests were passing :)
",cpojer,2016-02-21 00:55:44
854,2016-02-20 08:21:07,"Yeah, it was added here: https://github.com/facebook/relay/commit/36472364f09ab1213adc2fbe951a508c1f2576b1
",denvned,2016-02-21 00:55:44
854,2016-02-20 08:23:48,"And last time I updated that PR (https://github.com/facebook/relay/pull/625), all the test were also passing :smile: 
",denvned,2016-02-21 00:55:44
854,2016-02-21 00:37:43,"@facebook-github-bot shipit
",cpojer,2016-02-21 00:55:44
854,2016-02-21 00:40:09,"what's up with the bot? Is it dead? @yungsters 
",cpojer,2016-02-21 00:55:44
854,2016-02-21 00:43:43,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1678276125748488/int_phab) to review.
",facebook-github-bot,2016-02-21 00:55:44
854,2016-02-21 00:44:29,"There you are buddy! Thought you were taking the Sunday off.
",cpojer,2016-02-21 00:55:44
853,2016-02-19 17:15:06,,wincent,2016-02-19 17:46:26
853,2016-02-19 17:46:26,"[Done](https://github.com/facebook/relay/wiki/2016-02-18-Relay-Team-Sync-Notes).
",wincent,2016-02-19 17:46:26
852,2016-02-19 01:52:17,,steveluscher,2016-02-19 02:17:08
852,2016-02-19 01:52:32,"@facebook-github-bot shipit
",steveluscher,2016-02-19 02:17:08
851,2016-02-19 01:35:00,,steveluscher,2016-02-19 02:17:08
851,2016-02-19 01:35:13,"@facebook-github-bot shipit
",steveluscher,2016-02-19 02:17:08
850,2016-02-18 17:07:37,"I have approximatively the same error (I am using a docker debian os :8.3)
#686

The error is at the end of the description.

To reproduce :

1  apt-get update; apt-get upgrade
2  apt-get install curl wget git sudo
3  curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -
4  sudo apt-get install -y nodejs
5  sudo apt-get install -y build-essential
6  cd /root/
7  git clone https://github.com/facebook/relay.git
8  cd relay/examples/todo && npm install
9  npm start

*_The npm install give this log *_:

<S_CODE_TOKEN>

**The npm start give this log**

<S_CODE_TOKEN>
",yo34,2016-02-19 06:51:09
850,2016-02-18 17:12:30,"So after this installation os + nodejs 

node --version
v4.3.1
npm --version
2.14.12
",yo34,2016-02-19 06:51:09
850,2016-02-18 23:19:10,"Just a guess: does `require('babel/polyfill')` need to be changed to `require('babel-polyfill')` now?
",steveluscher,2016-02-19 06:51:09
850,2016-02-19 06:39:07,"The change for babel polyfill is ok. But errors for the module react-relay are still there.

ERROR in ./js/components/TodoApp.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/js/components
 @ ./js/components/TodoApp.js 25:18-40

.....
",yo34,2016-02-19 06:51:09
850,2016-02-19 06:51:08,"I just tried all of the same steps, and [they worked](https://gist.github.com/steveluscher/33f82026cd3d973fb0a9).

Judging by that `npm WARN cannot run in wd` error up there, I'd guess that this is a permissions problem on your filesystem. Follow some of the advice here and return to reopen this issue if you don't reach a resolution: https://github.com/npm/npm/issues/3497
",steveluscher,2016-02-19 06:51:09
850,2016-03-01 21:40:04,"@steveluscher i am running the todo example, but this is all i see

![screen shot 2016-03-01 at 4 37 52 pm](https://cloud.githubusercontent.com/assets/1045265/13442808/fe0ab784-dfcb-11e5-912a-555b68646964.png)

the graphql post requests seem to return an error and then the page just reloads. 

the console shows `Warning: fetchWithRetries: HTTP timeout, retrying.` right before the page reloads

however, the webpack server and graphql server are both running...
",gad2103,2016-02-19 06:51:09
850,2016-03-02 18:16:35,"I also had this problem until I found out the example has two global modules as prerequisites. This is not described in the current README.md: 
npm install -g babel-core
npm install -g babel-cli
",nicerr,2016-02-19 06:51:09
850,2016-03-02 18:30:03,"Ok. I installed cli I'll add core and try again.
On Wed, Mar 2, 2016 at 1:16 PM nic notifications@github.com wrote:

> This example has two global modules as prerequisites. This is not
> described in the current README.md:
> babel-core
> babel-cli
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/850#issuecomment-191356647.
",gad2103,2016-02-19 06:51:09
849,2016-02-18 02:20:33,"Hi

I use `react-router-relay` and within one of my routes I have a dropdown.

Now I select a different value from that dropdown - that will call `this.props.relay.setVariables` which will fetch some data based on this variables. This data will be displayed in a chart component within the current route.

How can I provide a callback or something to know that the current component is fetching data now / finished fetching data now ?

I need this to be able to show a loading indicator on top of the chart component.

I think I can't use `react-router-relay` for this since it would only enable me to show a loading indicator instead of my current route - but I want to show the loading indicator within the current route.

Please help.
",BerndWessels,2016-02-18 02:28:40
849,2016-02-18 02:28:40,"@BerndWessels I have an answer for you, but we're trying to direct how-to questions to Stack Overflow to keep issues focused on bugs and enhancements. Can you post at Stack Overflow and link to your question here? 

http://stackoverflow.com/questions/ask?tags=relayjs
",josephsavona,2016-02-18 02:28:40
849,2016-02-18 02:46:26,"Thank you @josephsavona 

[Here is the Question](http://stackoverflow.com/questions/35471836/loading-indicator-after-this-props-relay-setvariables-triggered-fetch) on Stack Overflow.
",BerndWessels,2016-02-18 02:28:40
848,2016-02-17 15:26:09,"I am working on injecting prepared data via `isomorphic-relay`...see [this issue](https://github.com/denvned/isomorphic-relay/issues/19#issuecomment-183472418) for further details.

However, some properties of the graphql response have a value of `null`, and they seem to be getting passed off to [`isClientID`](https://github.com/facebook/relay/blob/ecf643231ed550f6fff197396a1765f49079e3e5/src/store/RelayRecord.js#L94-L100) as empty objects, and raising `Uncaught TypeError: dataID.substring is not a function`

Should JSON be sanitized before being passed onto `isClientID`, or should the function return if the argument passed to it is not a string?
",jeromecovington,2017-01-30 19:42:09
848,2016-02-17 16:41:08,"Relay treats null records as null and doesn't attempt to traverse into them or create IDs for them. Given that, if you're seeing empty objects passed to isClientID then the problem could be in isomorphic-relay or how your app is configured. Can you share a commit preview or gist of your isomorphic-relay setup? If that's tricky, where is isClientID called with the invalid value? (Stack trace would help). 
",josephsavona,2017-01-30 19:42:09
848,2016-02-17 18:19:55,"I don't think it is how my app is configured, as other graphql responses can be both prepared and injected without difficulty, it is one type of response only (again with _some_ null values) that ends up raising the error from `isClientID`.

Here is a stack trace:

<S_CODE_TOKEN>
",jeromecovington,2017-01-30 19:42:09
848,2016-02-17 18:59:15,"""Relay treats null records as null and doesn't attempt to traverse into them or create IDs for them.""

Does relay also treat `{}` records the same way (not traversing, creating IDs, etc.)? Because somewhere along the way, the `null` records are getting changed to `{}`.
",jeromecovington,2017-01-30 19:42:09
848,2016-02-17 20:03:38,"Relay treats empty objects as records, and synthesizes a client ID for them if `id` is not set. We haven't heard of this error with regular Relay, hence my suspicion that this has to do with isomorphic-relay's  `injectPreparedData` method. 

Can you paste (or link to a gist) with the query text and payload that is failing? Which record fails?
",josephsavona,2017-01-30 19:42:09
848,2016-02-17 20:08:54,"[Here](https://github.com/denvned/isomorphic-relay/issues/19#issuecomment-183472418) is an example of the kind of response from graphql that ends up being correlated to the `TypeError` in `isClientID`, as well as a log of the values coming through as the `dataID` argument. This is before it goes into `injectPreparedData`. As far as exactly which record fails...I'm not sure how best to pinpoint that at the moment.
",jeromecovington,2017-01-30 19:42:09
848,2016-02-17 20:27:14,"Perhaps [this](https://gist.github.com/jeromecovington/227f1541a3fd90827134) is more helpful, the query + result that is passed to `injectPreparedData` after having passed through `prepareData`.
",jeromecovington,2017-01-30 19:42:09
848,2016-02-18 05:22:47,"In the second gist there are multiple records that have `id: {}` - which means that either invalid data is being returned by the server - IDs should be strings - or prepareData is somehow transforming it incorrectly. I noticed that in the first paste the results do not have these malformed IDs, which also suggests that it is the transform step. Can you confirm that the IDs are correct prior to the transform step? It might be worth digging into isomorphic- relay to see where the ID objects are being generated (or maybe file an issue on that repo and link it here?)

Cc @denvned
",josephsavona,2017-01-30 19:42:09
848,2016-02-18 05:40:06,"> or prepareData is somehow transforming it incorrectly.

@josephsavona, `prepareData` just intercepts calls to `RelayStoreData#handleQueryPayload` and convert the query to a plain object using `toGraphQL.Query` from Relay (as you suggested [here](https://github.com/facebook/relay/issues/589#issuecomment-156469672)):
https://github.com/denvned/isomorphic-relay/blob/ac2ce85d48be592f7d735c1849b762f10b3ad72d/src/prepareData.js#L15-L16
",denvned,2017-01-30 19:42:09
848,2016-02-18 05:58:37,"Also `prepareData` does not transform the result. So, invalid data returned by the GraphQL server seems more probable. It might also be transformed by a custom network layer (@jeromecovington do you use any?).

@jeromecovington what is the GraphQL schema for `Image`?
",denvned,2017-01-30 19:42:09
848,2016-02-18 14:31:30,"@denvned - The only customization to our network layer allows for sending the request to graphql via `get` rather than `post` (for caching reasons). Although I did notice this issue prior to that customization.

The schema for `Image` is [here](https://gist.github.com/jeromecovington/c459f170a1604f74d6cb).
",jeromecovington,2017-01-30 19:42:09
848,2016-02-18 14:47:20,"@jeromecovington Looks like your GraphQL server at least sometimes returns an empty object `{}` as `id` of `Image`, although its type according to your schema should be scalar `ID`.
",denvned,2017-01-30 19:42:09
848,2016-02-18 17:28:57,"@denvned Yeah there may be issues with how `Image` is being handled in the data transform layer. Let me sort that out and then we'll see. I do appreciate you and @josephsavona taking the time to help me step through what may have ultimately turned out to be an internal data issue!
",jeromecovington,2017-01-30 19:42:09
848,2016-02-18 20:17:42,"@denvned I am (seeing)[https://gist.github.com/jeromecovington/4a2058b5f8c18b96a9ef] the `id` field of `Image` to be optional (not `GraphQLNonNull`), should we not be able to query against type `Image` without asking for or needing an `id`? In this query I am not asking for the `id`, yet am still bumping up against the `TypeError` in `isClientID`.
",jeromecovington,2017-01-30 19:42:09
848,2016-02-18 20:54:56,"@jeromecovington We can query against `Image` without asking for `id` even if it was `GraphQLNonNull`. I can't tell why Relay asks it in your case. Anyway the main problem here is not in Relay, but in your GraphQL server.
",denvned,2017-01-30 19:42:09
848,2016-02-18 21:27:56,"Hm. Although if I issue this request in graphiql, in the response I do not get any `null` or `{}` values for `id` on `photosTout` (or type `Image`), in fact I do not even ask for the `id` and so get no key/value for that at all...this is the identical query issued in the container which is leading to the `TypeError`. Should I be able to trust that the response in graphiql is the exact response that relay sees?

<S_CODE_TOKEN>
",jeromecovington,2017-01-30 19:42:09
848,2016-02-18 22:02:05,"Relay automatically queries for `id` if this field exists on a type. If your type does not always have an id, make sure that this is reflected in its type: it should not implement the `Node` interface, id should have type of nullable `ID`, and it should return `null` for id on records that don't have an id.
",josephsavona,2017-01-30 19:42:09
848,2017-01-30 19:42:09,"Going to close this due to inactivity, as I don't think there is anything actionable remaining here. Thanks for filing the report!",wincent,2017-01-30 19:42:09
847,2016-02-17 10:41:13,"Playing with Relay I got problems with accessing data. I was trying to reproduce the issues with official Todo example of the Relay project. Please consider gist in order to change Todo example. 
[here](https://gist.github.com/Efimster/886650d04f141e50c08d)

Here are the questions:
1. Why Summary component cant get access to sibling (viewer) component data?
2. What the reason for ""queries must have exactly one field""? GraphQL doesn't have such limitations I believe.
3.Why I got Invariant Violation: Relay(TodoApp).getFragment(): `summary` is not a valid fragment name ?

Thanks in advance!
",Efimster,2016-02-18 00:07:48
847,2016-02-18 00:07:48,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We (or another member of the Relay community) will be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2016-02-18 00:07:48
846,2016-02-17 03:40:44,"The babel-relay-plugin is failing right now but it seems unrelated to the Jest update.
",cpojer,2016-02-17 22:10:35
846,2016-02-17 18:22:29,"@facebook-github-bot import
",kassens,2016-02-17 22:10:35
846,2016-02-17 18:35:42,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/201218153573598/int_phab to review.
",facebook-github-bot,2016-02-17 22:10:35
845,2016-02-16 18:58:01,"Hi guys

I just noticed that you have released the `babel-relay-plugin` `0.7.0`.

But I thought the plan was to move on to the more common babel plugin naming `babel-plugin-relay`. I saw that you guys have already reserved the name but it is still an empty `1.0.0`.

When are you planning to move from `babel-relay-plugin` to `babel-plugin-relay`?

I think it is very confusing having both out there.

Cheers
Bernd
",BerndWessels,2016-02-16 21:30:03
845,2016-02-16 21:28:50,"We reserved the name `babel-relay-plugin` because we will make the transition at some point, but for now `babel-relay-plugin` is the official plugin (as noted in the docs.) I'm going to close this for now since there's nothing actionable and we have separate PRs/issues tracking the rename.
",josephsavona,2016-02-16 21:30:03
844,2016-02-16 17:39:51,"Please review me.
Template commit for review.
This fix just covert the input `identifyingArgValue`(string|number|object) in  `getDataID` and `putDataID` to a string.
Because GraphQL is already a type system ,so the number is covert to plain string,do not use maker to  distinguish from string.
The object is covert to something like JSON,but with sorted key-value.

At this time , i m a bit confused by Object args, maybe should fix more file to accept this.
at now unit test stop at `RelayQLAST.js:435`.
 [The failed unit test is object arg](https://github.com/iamchenxin/relay/blob/fixGraphQLFragment/src/query/__tests__/RelayFragmentPointer-test.js#L82)

<S_CODE_TOKEN>

worked in raw GraphQL server,but failed in relay. So this should be an additional type check error in RelayQLAST?  
Continue tomorrow.
",iamchenxin,2016-03-02 23:48:06
844,2016-02-17 02:30:38,"@steveluscher Thank you,i will fix them all this evening.
",iamchenxin,2016-03-02 23:48:06
844,2016-02-17 16:05:36,"@steveluscher Need one more day to complete this. 
Find that acceptting objects need to modify `babel-relay-plugin`.  
Seems at now Relay makes the argument as an array:  
 `(first:5 )` ->

<S_CODE_TOKEN>

I think maybe the object-arg would be placed as a value for key 'callValue' ?

From [RelayQLPrinter.js#L466](https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/RelayQLPrinter.js#L466) and [RelayQLAST.js#L361](https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/RelayQLAST.js#L361) ,it seems there is no ObjectType support at all level RelayQLArgument.  
Will add them tomorrow, maybe will modify another files which interactive with `RelayQLArgument`.
",iamchenxin,2016-03-02 23:48:06
844,2016-02-17 18:40:33,"@steveluscher Need help , When i use [t.valueToNode](https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/babelAdapter.js#L35) from `babelAdapter` , Pass a number type to it still return something like `{""type"":""Literal"",""value"":` .  
How could i make it return a numberType. What implement  the `valueToNode` use.

Its my first time to look into a babel plugin,so there are so much things i do not known.
I search the modules of `babel-relay-plugin`  find a function `Literal(node)` in babel's `inferers.js`

<S_CODE_TOKEN>

And i search the [babel-handbook](https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/plugin-handbook.md) ,find some function like `t.numberLiteral`.

Go to sleep,see you tomorrow,thanks.

---

**Seems i have wrong typing .. `t.valueToNode` is okay( return number type) , will recheck this tomorrow.**
",iamchenxin,2016-03-02 23:48:06
844,2016-02-18 17:59:37,"@steveluscher Almost done. and need some help. 
Did not find the function to let plugin generate Array `[]` . So i template write `[]` as key-value [RelayQLPrinter.js#L556](https://github.com/iamchenxin/relay/blob/fixGraphQLFragment/scripts/babel-relay-plugin/src/RelayQLPrinter.js#L556). Need to modify it tomorrow evening.
And i also a bit confused where to test the `getDataID` for new types.
",iamchenxin,2016-03-02 23:48:06
844,2016-02-20 20:05:18,"@josephsavona @steveluscher 
Maybe i should learn jest first, i do unit test whole night by hand, have no idea why `stableStringifyTmp.js` be mocked by some test files.(but when i touched that file,it suddenly can require the real  `stableStringifyTmp.js`).   (temporary rename my function to `stableStringifyTmp` ,later,i should check if it is work right by using `stableStringify`).

Now the only failed test is this:

<S_CODE_TOKEN>

CheckinSearchInput! vs CheckinSearchInput ( should check this,tomorrow)

And i have not set the webstorm right for eslint, so i will modify the code style later by hand,when i finish them. (i need to search how to get webstorm load the eslint plugins ?).
",iamchenxin,2016-03-02 23:48:06
844,2016-02-21 05:58:15,"@josephsavona Now , i mainly confused by some mechanism of Relay's unit test. I can not get the node-debug or bugger worked for unit test .and also I need to learn lots of things (jest , flow, babel-plugin ~~).
And need some help! the file `stableStringifyTmp` i wrote, cannt be require-actual ,in some unit test file. ( seems in that file `stableStringifyTmp` will be auto mocked, but if i modified  any character in that file,and save the file, suddenly the  real  `stableStringifyTmp` will be used rightly. How could i solve this problem？what things does i miss)
",iamchenxin,2016-03-02 23:48:06
844,2016-02-22 15:09:26,"@josephsavona Finished . 
Merge my function to `stableStringify`. and extend original `stableStringify` for possible expansions later.
But stay the returned string from `stableStringify`  to be a none standard JSON. Cause some unit test files assume the returned string has a raw `key` style. See : 
 [stableStringify.js#L107](https://github.com/iamchenxin/relay/blob/fixGraphQLFragment/src/query/stableStringify.js#L107) -> [stableStringify.js#L49](https://github.com/iamchenxin/relay/blob/fixGraphQLFragment/src/query/stableStringify.js#L49)
",iamchenxin,2016-03-02 23:48:06
844,2016-02-22 16:49:02,"Can you clarify what needed to change in stableStringify?
",josephsavona,2016-03-02 23:48:06
844,2016-02-22 17:25:28,"@josephsavona for `stableStringify` the different is in unit test.
The main need is for query arguments. The old `stableStringify` return a string to `""string""` ( this is caused by JSON.stringify). this will conflict with passed in string arguments (which be treated to raw `string`,in some old code ).

There are two changes in return:
1.  string type old `'""test""'` => `'test'` (This change is required by query arguments)
2.  array `[0:""a"",1:""b""]` =>  `[""a"",""b""]`  (This change is not required,but since the old style is only used by one unit test file, and do not affect old src code, so i change this, to make it simpler ,shorter and Standarder, and,the stringify string can be parsed back to object by JSON.parse.  ).
",iamchenxin,2016-03-02 23:48:06
844,2016-02-22 18:49:55,"@josephsavona i havent test this in a real relay project yet. I should test it tomorrow to check if it is all right.
",iamchenxin,2016-03-02 23:48:06
844,2016-02-23 07:12:00,"@josephsavona Since Relay  will allow use complex object as Arguments for query later.
Maybe there will be some strange values passed in  by user.
This is one reason i seperated the `type check` and `stringify algorithm` from `stableStringify`. So will be easier to add some relay store type which different from jstype. 

<S_CODE_TOKEN>

I have a thought about `holes-array`  [stableStringify-test.js#L55](https://github.com/iamchenxin/relay/blob/fixGraphQLFragment/src/query/__tests__/stableStringify-test.js#L55)
Consider this:

<S_CODE_TOKEN>

Should we treat `[null, undefined, null, 'foo']` and `[null, , null, 'foo']` as a same data or not ?

---

Seems the mostly input values will be passed in is from babel-relay-plugin,i should check all possible passed in values  by `babel-relay-plugin`. But `stableStringify` can also be used by other parts. So the behaviors should keep consistent with each other
",iamchenxin,2016-03-02 23:48:06
844,2016-02-24 18:46:05,"@josephsavona @steveluscher I test this fix in real relay project. And find something strange,this is the last point do not support object. [forEachRootCallArg](https://github.com/facebook/relay/commit/425f309e82976b974d291e63b4676ff9d45d4390#diff-41479ecf3670e4e60511fb37625a0e1aR54) 
In this function , i modified the code from old `fn('' + identifyingArgValue)` to fn( identifyingArgValue), but when test with an object arg, the `identifyingArgValue` was still automaticly converted to `[object object]` , im not sure why this will happen, its just a callback (an arrow function from [RelayOSSNodeInterface.js#L83](https://github.com/facebook/relay/blob/425f309e82976b974d291e63b4676ff9d45d4390/src/interface/RelayOSSNodeInterface.js#L83) ),when the `identifyingArgValue` passed in its immediately turned to a `[object object]`
",iamchenxin,2016-03-02 23:48:06
844,2016-02-24 19:05:33,"@iamchenxin thanks for working on this. it looks like it's pretty close. Rather than go back and forth here on stylistic concerns and minor functionality details, i'm going to go ahead and import this and make the last few edits necessary to ship it.

@facebook-github-bot import
",josephsavona,2016-03-02 23:48:06
844,2016-02-24 19:09:00,"@josephsavona Its all right now! I find it is some bugger from chrome's debug mode ? maybe from some cached code? when i reflash the `script` many times and shutdown chrome and reopen, the `fn( identifyingArgValue)` suddenly work well. and do not call toString() automaticly.
",iamchenxin,2016-03-02 23:48:06
844,2016-02-24 19:22:14,"@josephsavona 
Maybe still have some hidden problem .. `forEachRootCallArg` with `mixed` type the flow result is (i will check them tomorrow as soon as i have my free time)

<S_CODE_TOKEN>
",iamchenxin,2016-03-02 23:48:06
844,2016-02-24 19:25:18,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/963565357061197/int_phab) to review.
",facebook-github-bot,2016-03-02 23:48:06
844,2016-02-24 20:00:12,"@iamchenxin That's cool, i can look into it.
",josephsavona,2016-03-02 23:48:06
844,2016-02-25 05:11:38,"@josephsavona Seems , it is finally finished , i test this in some real project. But still need to write more new unit tests for this.I should add the unit test later ,after i learn jest .(at now i have some difficulties to write complex unit test).
",iamchenxin,2016-03-02 23:48:06
844,2016-02-25 05:50:16,"@josephsavona Rebased to master,But when i test with the new master.
even in the master branch , i get this error too.

<S_CODE_TOKEN>
",iamchenxin,2016-03-02 23:48:06
844,2016-02-25 21:36:01,"@iamchenxin That should be fixed with #881. Try to rebase on master again.
",kassens,2016-03-02 23:48:06
844,2016-02-26 06:04:03,"@kassens thank you , rebased
",iamchenxin,2016-03-02 23:48:06
844,2016-02-29 05:12:11,"@josephsavona should this need reimport? it rebased after import.
",iamchenxin,2016-03-02 23:48:06
844,2016-02-29 17:02:15,"Yup, i'll rebase internally.
",josephsavona,2016-03-02 23:48:06
844,2016-03-02 19:35:44,"@facebook-github-bot import
",josephsavona,2016-03-02 23:48:06
844,2016-03-02 19:39:34,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/963565357061197/int_phab) to review.
",facebook-github-bot,2016-03-02 23:48:06
844,2016-03-02 23:48:06,"@iamchenxin Thanks so much for working on this. When I imported and reviewed the code, I realized that all of the call sites of `forEachRootCallArg` were actually doing the same logic to convert the value to a key. Normally I'd make edits on the original PR, but in this case the changes ended up being quite extensive. I've created two new PRs that build on your implementation in #894 and #895, so I hope you don't mind if I close this PR and continue discussion there. Thanks again for doing so much work on this!
",josephsavona,2016-03-02 23:48:06
844,2016-03-03 12:57:15,"@josephsavona Its okay. Hope i did not add some hidden bugs  in ,  and will keep a watchful eye on them.
",iamchenxin,2016-03-02 23:48:06
843,2016-02-15 20:22:18,"I'm working on adding a new field to GraphQL that is a list of connections. It works perfectly when queried from GraphiQL but when I do the same query in Relay I get this error:

> warning.js:44 Warning: RelayQueryWriter: Cannot write edges for connection `category_cliques` on record `client:-1988558205148`, expected a response for field `edges``

Followed by:

> Uncaught Invariant Violation: RelayRecordStore.getLinkedRecordIDs(): Expected field `category_cliques` for record `RG9tYWluOmdvb2dsZS5jb20=` to have an array of linked records.

Relay seems to be assuming the list is the actual connection and is looking for a `edges` field (which is correctly set on the items in the list).

UPDATE:
So played around some more and if I remove the connection arguments (first/last/etc) from the list field then it starts working. So Relay has I'm assuming a heuristic for connections which looks for certain arguments and then treats the field as a connection. This makes this case a bit awkward as I want to be able to pass normal connection arguments to each of the child connections in the list. The simplest work-around here is probably to just use different argument names and then rewrite for passing to the next layer.

Is this something Relay core should fix or just ignore for now as it's a fairly edgy edge case?
",KyleAMathews,2016-02-18 17:05:15
843,2016-02-15 20:37:57,"@KyleAMathews Can you paste the relevant portion of the query and schema?
",josephsavona,2016-02-18 17:05:15
843,2016-02-15 23:59:03,"query:

<S_CODE_TOKEN>

schema:

<S_CODE_TOKEN>
",KyleAMathews,2016-02-18 17:05:15
843,2016-02-16 02:03:08,"Which field is the list of connections? That just looks like a normal collection (?). 
",josephsavona,2016-02-18 17:05:15
843,2016-02-16 02:07:48,"`category_cliques`

In graphql-js, I create it with `type: new GraphQLList(require(""./connections/clique-connection""))`
",KyleAMathews,2016-02-18 17:05:15
843,2016-02-16 22:06:31,"Got it, i see it in the schema now.

You're correct that Relay has a heuristic for detecting connections - it's based on the type name (ends in ""Connection""), the existence of connection-like fields, and the presence of edges and page info fields. Relay also assumes that connection fields are scalars, so if you need a list of them, you might have to create an intermediate object in the schema:

<S_CODE_TOKEN>
",josephsavona,2016-02-18 17:05:15
843,2016-02-18 17:05:15,"K, closing this as ""works as expected"". Thanks!
",KyleAMathews,2016-02-18 17:05:15
843,2016-02-18 17:23:36,"Cool, thanks for following up here.
",josephsavona,2016-02-18 17:05:15
843,2016-02-19 21:10:52,"Does Relay have a heuristic for detecting type names that end in ""Item""?
",jeromecovington,2016-02-18 17:05:15
843,2016-02-19 22:23:06,"I don't think so, @jeromecovington.

Generally heuristics aren't fun. The `Connection` heuristic was born out of how connections emerged historically at Facebook, but I don't think we would have necessarily designed them that way in Relay if we didn't have the historical precedent with which to maintain compatibility. Ideally you'd be able to name them anything you wanted, and we'd use some other means (like schema metadata) to annotate them unambiguously as connections.
",wincent,2016-02-18 17:05:15
843,2016-02-19 22:50:13,"You're right @wincent - testing in my current app seems to confirm no magic ""Item"".
",jeromecovington,2016-02-18 17:05:15
842,2016-02-15 18:16:57,"Fixes #839 
",josephsavona,2016-02-17 02:05:35
842,2016-02-15 18:17:45,"@facebook-github-bot import
",josephsavona,2016-02-17 02:05:35
842,2016-02-17 01:28:59,"just expressing my interest in this...
",legomind,2016-02-17 02:05:35
842,2016-02-17 01:42:49,"I'm just waiting for internal review, this should land soon.
",josephsavona,2016-02-17 02:05:35
841,2016-02-15 15:13:39,"Hi

I am doing a test app that is all es6 ... and i hit a bump when using this plugin ... the docs say to use this to configure the plugin and it works:

<S_CODE_TOKEN>

can anyone tell me why this syntax does not work?

<S_CODE_TOKEN>

thanks,
rarutu
",wowzaaa,2016-02-16 17:19:41
841,2016-02-15 17:49:38,"Thanks for your question! We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",josephsavona,2016-02-16 17:19:41
841,2016-02-15 21:21:36,"http://stackoverflow.com/questions/35419322/babel-relay-plugin-es6-configuration

thanks
",wowzaaa,2016-02-16 17:19:41
841,2016-02-16 10:17:06,"can u please confirm the answer on the stackoverflow question ... is the answer from there correct?
",wowzaaa,2016-02-16 17:19:41
841,2016-02-16 17:19:16,"@rarutu I commented at Stack Overflow, let's move discussion there.
",josephsavona,2016-02-16 17:19:41
840,2016-02-15 07:16:22,,raineroviir,2016-02-26 22:30:43
840,2016-02-15 21:14:18,"ugh I'm having some trouble merging all these commits .. I might give up and submit a new pr
",raineroviir,2016-02-26 22:30:43
840,2016-02-17 22:40:54,"No worries, when we merge this, it will all be combined into one commit.
",kassens,2016-02-26 22:30:43
840,2016-02-18 02:24:53,"Ok cool thanks!
On Wed, Feb 17, 2016 at 2:41 PM Jan Kassens notifications@github.com
wrote:

> No worries, when we merge this, it will all be combined into one commit.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/pull/840#issuecomment-185441933.
",raineroviir,2016-02-26 22:30:43
840,2016-02-19 18:33:49,"This is great, thanks for taking the extra step for cross compatibility! Just one more thing
",kassens,2016-02-26 22:30:43
840,2016-02-20 05:12:52,"fyi jest 0.9.0 (without the fb-suffix) will have fixed npm3 support in Jest. I'll try to get it out next week :)
",cpojer,2016-02-26 22:30:43
840,2016-02-20 07:09:47,"OK great! I moved the babel-relay-plugin into devDeps and you were right @kassens!
Also, Travis-CI is failing a test that will be fixed in #810
",raineroviir,2016-02-26 22:30:43
840,2016-02-25 01:28:17,"Looks like the flow fix didn't quite work. Sorry this is such a journey and thank you for keeping the updates coming!
",kassens,2016-02-26 22:30:43
840,2016-02-25 01:34:38,"Yeah! Its a big project, not easy! We can either ignore the 'base62' node_module or include it under Flow, in the flowconfig which one makes more sense?  (Both would fix the travis error)
",raineroviir,2016-02-26 22:30:43
840,2016-02-25 07:10:24,"Getting this error on `npm install`:

`Error: ModuleNotFoundError: Module not found: Error: Cannot resolve 'file' or 'directory' ./Set in /Users/raineroviir/relay/lib.`

as well as this on `npm test`:

<S_CODE_TOKEN>

Seems like ES6 Set isn't getting loaded?
",raineroviir,2016-02-26 22:30:43
840,2016-02-25 17:16:05,"@raineroviir that's from a commit of mine yesterday, i'm trying to figure out why Set isn't available and will report back here.
",josephsavona,2016-02-26 22:30:43
840,2016-02-25 17:41:55,"see #881 for the fix to the missing `Set` module
",josephsavona,2016-02-26 22:30:43
840,2016-02-25 17:44:00,"Thanks Mr. Savona
",raineroviir,2016-02-26 22:30:43
840,2016-02-26 02:50:04,"Awesome, great to see it finally all working :+1: 

@facebook-github-bot import
",kassens,2016-02-26 22:30:43
840,2016-02-26 02:54:20,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1517627825207870/int_phab) to review.
",facebook-github-bot,2016-02-26 22:30:43
840,2016-02-26 04:24:58,"Yes! This is great.
",cpojer,2016-02-26 22:30:43
840,2016-02-26 04:34:36,"Glad to help =)
",raineroviir,2016-02-26 22:30:43
839,2016-02-15 02:42:03,"Relay generates queries like this when fetching:

<S_CODE_TOKEN>

The type for ID should be `ID!` rather than `ID`, otherwise we get this error: 

<S_CODE_TOKEN>
",F21,2016-02-17 02:05:35
839,2016-02-15 03:45:10,"Thanks for reporting this. Is this a query that you wrote directly (i.e. in a route), or is this a query that Relay generated (i.e. from a setVariables call)? If the latter, how was the node originally fetched, and what was the type of its `id` field? 
",josephsavona,2016-02-17 02:05:35
839,2016-02-15 04:07:52,"That query is generated by relay.

This is the original query (generated using routes and fragments by relay):

<S_CODE_TOKEN>

I then use `this.props.relay.forceRefetch(...)` to force relay to poll the server for an update, which results in this query being generated:

<S_CODE_TOKEN>

The type (I am using the golang version of graphql + relay) is a string.
",F21,2016-02-17 02:05:35
839,2016-02-15 12:56:40,"Had the exact same problem today at my company for Innovation Day. Relay was generating the query when I called `setVariables` to increase the count of a `first` argument in a connection field. The original query that worked fine and was using a custom non-node ID as it's argument `property(id: ""XY-12341-GA"")` that returned the `Property` type which implements the `Node` interface. The subsequent query used the node field with it's GUID. I used the `graphql-relay` helper functions and it's a `graphql-js` server.

Hack I did to get it to work for demo day tomoz was to remove the non null wrapping on the ID argument of node:

<S_CODE_TOKEN>

And here is the query that errored:

<S_CODE_TOKEN>

Adding a `!` to the end of `$id_0: ID` in GraphiQL meant the query worked. 

Side note: Loving GraphQL and Relay the more I use it, keep up the good work!
",albertstill,2016-02-17 02:05:35
839,2016-02-15 18:06:04,"@F21 @albertstill thanks for the extra information, I see what's going on. This is an inadvertent side-effect of d55b04ebb11a105f7f63eb8a2ce82b782be22d78, which explicitly set all query metadata including the `node` field's argument type. The printer sees this type and prints it as-is - i'll change the type to `ID!`.
",josephsavona,2016-02-17 02:05:35
839,2016-02-17 02:21:53,"This is fixed and master and will go out in the next release. Thanks everyone for the examples and repro steps!
",josephsavona,2016-02-17 02:05:35
838,2016-02-13 10:18:17,"Hi!

A quick question from a Relay beginner: Would it be possible to configure Relay to use GET instead of POST for its' requests...? How would one go about doing that if it's possible?

Thanks in advance!
",zth,2016-02-13 17:25:19
838,2016-02-13 12:37:52,"This should be easy for you, and well documented too. [Start reading the documentation on Relay Network Layer](html). [Then have a look at the current _default_ implementation, it simply uses `fetch`](https://github.com/facebook/relay/blob/master/src/network-layer/default/RelayDefaultNetworkLayer.js#L138). 

With the above information you should be able to create a custom Network Layer, inject it into Relay, and send via requests with any method you would like.
",jurassix,2016-02-13 17:25:19
838,2016-02-13 17:25:19,"Thanks for the question! I'm going to close this since there is nothing actionable to do here, but please feel to continue to use this space for discussion. 

Also note that for ""how-to"" questions we recommend asking on [Stack Overflow](http://stackoverflow.com/questions/ask?tags=relayjs), which is a custom built support forum.
",josephsavona,2016-02-13 17:25:19
837,2016-02-13 09:59:27,"No answer to this on SO (http://stackoverflow.com/questions/35312277/why-doesnt-relay-call-renderfailure-if-network-requests-timeout) so I guess it's a bug:

I've got a `renderLoading` function that shows a spinner. I've also got a `renderFailure` function that contains a button to let a user retry a failed request. Finally, my network layer is configured with timeouts and retry delays:

<S_CODE_TOKEN>

If I take my local graphql server offline and and load my app, the loading spinner spins. If I start my server, within a few seconds, data is loaded, so the retries are working.

However, if I only do 2 retries (`retryDelays: [1000, 2000]`), take my server offline, reload my app and wait, the loading spinner is never replaced by the retry button I've got in my `renderFailed` function. If I bring my server back online, no data is loaded, which shows that no retries are taking place, as expected.

Is this a bug or am I missing something? Why doesn't relay call `renderFailed` (which I've tested separately and it works) if all network requests timeout and there are no more retries to try?
",blatch,2016-09-03 01:02:56
837,2016-02-14 19:16:38,"Thanks for reporting this, it sounds like a bug possibly in the default network layer. 
",josephsavona,2016-09-03 01:02:56
837,2016-03-31 23:00:47,"You seem to have a typo `renderFailed` should be `renderFailure`. However I couldn't reproduce this.
",edvinerikson,2016-09-03 01:02:56
837,2016-09-03 01:02:56,"Going to close this one due to inactivity. Please comment though if this is still an issue for you and we'll re-open it.
",wincent,2016-09-03 01:02:56
836,2016-02-13 09:47:28,"Consider the case:
1. Creating new Cart.  (Cart is Relay component)
2. Adding/removing items to/from cart 500 times. (Item is Relay component. Item is edge node of Cart connection)

I want ALL these changes performed locally on client side and be synchronous with server only on special signal (button click event ""SAVE"").

Creating item locally and binding to Item component props cause  warning. I believe because it is suppose to be Relay generated data and probably be a part of  Cart connection.

What you guys suggest to do in that case?
",Efimster,2016-02-16 19:06:07
836,2016-02-13 16:58:37,"This is actually one of the things `RelayMutationTransaction` was designed for. You can create a mutation with an optimistic update and use `Relay.Store.applyUpdate` to apply it locally, and use the returned `RelayMutationTransaction` instance to later `commit` to server or `rollback` altogether.
",voideanvalue,2016-02-16 19:06:07
836,2016-02-13 19:56:00,"@voideanvalue It looks like `RelayMutationTransaction` does allow you to defer the server request for each item until you actually issue a `commit`, but I don't see a way to batch transactions into a single commit. Without the batching we would still be sending a server request for each commit since [each `RelayMutationTransaction` is bound to a single `ClientMutationId`.](https://github.com/facebook/relay/blob/master/src/mutation/RelayMutationTransaction.js#L26) Maybe batching into a single server request is not possible?
",jurassix,2016-02-16 19:06:07
836,2016-02-14 08:16:53,"@jurassix: Yeah, it doesn't support batching. But here's some alternate suggestions:

(i) Perform batching through a custom network layer.
(ii) Track all the uncommitted transactions. Instead of committing them all separately at the end, rollback all of them and then create and commit a new one that represents all of them and commit that.
(iii) Similar to (ii), before applying a mutation, rollback the previous one (if there was a previous one) and actually apply a mutation that represents both the previous one and the new one you were about to apply.
",voideanvalue,2016-02-16 19:06:07
836,2016-02-14 17:22:34,"@voideanvalue Yeah I was leaning towards _ii_ as a solution as well. Thx for confirming.

I guess I need to build this out as an example to see the complexity involved. It seems that if I'm an _item_ then I will not have context of other _items_, so I would need to move the transaction mgmt to the parent since it would provide visibility to all _children items_. Then from the parent I could map over my children, [using _getPendingTransacitons_ API](https://facebook.github.io/relay/docs/api-reference-relay-container.html#getpendingtransactions), rollback the individual transactions, and consolidate those into a single mutation. There are still some open questions here I'll have to figure out during implementation, like actual _knowing_ what changed from each child, and translating that into a single transaction.

This does seems like something Relay could provide; managing individual transactions and consolidating to a single transaction seems like a lot of responsibility for a React Component. I'll wait to see how it works in practice tough before requesting a change to the Framework ;)
",jurassix,2016-02-16 19:06:07
836,2016-02-16 19:06:07,"Agreed that this is a lot of complexity for the client to manage, and also that we should gain some experience building this type of batching out by hand before trying to abstract it into something baked in in the framework. So I'm going to close this for now and ask that you open a new issue with a concrete proposal or even a pull request at some point in the future if you think it still makes sense. Thanks for your input!
",wincent,2016-02-16 19:06:07
835,2016-02-13 05:35:37,"It will make `update-schema` and `update-fixtures` work. Currently they produce error on lacking `babel-node`. Also there is version contention in babel-relay-plugin and relay for these packages: 5.8.35 against 5.8.25 respectively.

https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/package.json#L23
https://github.com/facebook/relay/blob/master/package.json#L41
",enaqx,2016-05-27 06:57:02
835,2016-04-01 13:12:40,"Thanks for the PR! It seems that babel have been updated to 6.x which causes this to be invalid. However if you change the `babel` dependency to `babel-cli` I think we can merge this. :)
",edvinerikson,2016-05-27 06:57:02
835,2016-05-27 06:57:02,"We have this now (`babel-cli` in the package.json). Thanks for your help!
",steveluscher,2016-05-27 06:57:02
834,2016-02-13 05:20:11,,enaqx,2016-02-18 23:55:37
834,2016-02-18 20:49:14,"@facebook-github-bot import
",kassens,2016-02-18 23:55:37
833,2016-02-12 23:30:56,"Resolves, among other things, #830.
",steveluscher,2016-02-13 00:45:35
833,2016-02-12 23:31:05,"@facebook-github-bot shipit
",steveluscher,2016-02-13 00:45:35
833,2016-02-13 00:28:40,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/533638613485170/int_phab to review.
",facebook-github-bot,2016-02-13 00:45:35
832,2016-02-12 22:05:34,"Right now, if you `npm install` using Node >=5 and NPM >=3 you'll run into a bunch of problems.

Most of these are due to the fact that npm installs dependencies in a flat directory structure, which makes the paths in `unmockedModulePathPatterns` (see `package.json`) no longer match.

Another problem is that the paths in our `.flowconfig` files may no longer match.

There are undoubtedly other problems.

The task is to make `npm test` pass all-green with both NPM 2 & 3, or make it pass exclusively with NPM 3 and update the `engines` config in `package.json` if dual-compatibility is too much of a pain.
",steveluscher,2016-05-09 17:48:29
832,2016-02-15 02:08:36,"I'll give this a try
",raineroviir,2016-05-09 17:48:29
832,2016-02-15 03:51:33,"I removed the nesting node_modules in `unmockedModulePathPatterns` and I'm at
75 tests failed, 1092 tests passed (1167 total in 96 test suites, run time 62.275s)
",raineroviir,2016-05-09 17:48:29
832,2016-02-15 06:06:29,"Related: https://github.com/facebook/jest/issues/554
",steveluscher,2016-05-09 17:48:29
832,2016-02-15 06:40:09,"Okay so based on that issue and also related: https://github.com/facebook/react/issues/5183, the issue is with jest and to solve it you unmock all the deps, except for 3 packages that are needed to pass the tests.  
I set the package.json to look like:

<S_CODE_TOKEN>

1167 tests passed (1167 total in 96 test suites, run time 60.464s) :tada: 
",raineroviir,2016-05-09 17:48:29
832,2016-02-22 02:18:23,"I'll publish a new version of `jest-cli@next` today that should resolve the npm3 mocking issues.
",cpojer,2016-05-09 17:48:29
832,2016-05-09 17:48:29,"We've been running node 5 for a while on travis by now.
",kassens,2016-05-09 17:48:29
831,2016-02-12 21:20:26,,steveluscher,2016-02-12 23:10:37
831,2016-02-12 21:20:41,"@facebook-github-bot shipit
",steveluscher,2016-02-12 23:10:37
831,2016-02-12 23:44:08,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/455964391281450/int_phab to review.
",facebook-github-bot,2016-02-12 23:10:37
831,2016-02-13 00:28:28,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/455964391281450/int_phab to review.
",facebook-github-bot,2016-02-12 23:10:37
830,2016-02-12 20:37:56,"Trying to run the example projects but running into the issues during `npm install`. Node version `5.5.0`, NPM version `3.3.12` running on El Capitan.

<S_CODE_TOKEN>

Tried to install `babel-relay-plugin` directly from NPM, but didn't resolve issue. 

Thank you.
",ishanthukral,2016-02-13 00:25:41
830,2016-02-12 21:29:48,"Same here... cannot get it to install cleanly on Node v4.2.6 or v4.3.0 either. Also El Capitan.
",nicerr,2016-02-13 00:25:41
830,2016-02-12 22:01:19,"Thanks for the report! We're mid-release, so things will be broken for the next few minutes.

You guys are fast!
",steveluscher,2016-02-13 00:25:41
829,2016-02-12 20:36:04,,steveluscher,2016-02-12 21:00:37
829,2016-02-12 20:37:11,"@facebook-github-bot shipit
",steveluscher,2016-02-12 21:00:37
829,2016-02-12 20:41:42,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/991977314181651/int_phab to review.
",facebook-github-bot,2016-02-12 21:00:37
828,2016-02-12 06:56:35,"It looks like Relay currently requires Babel to compile `Relay.QL` strings. This is unfortunate because it makes Relay unusable from compile-to-JS languages like ClojureScript (where React is the dominant rendering library) and TypeScript.

I searched for issues about decoupling Relay from Babel but didn't find any. What is the status of this? Is Relay going to be permanently tied to Babel or is this temporary? It would be great if there were a self-contained Relay package that could run entirely client-side. Perhaps this may not be possible or be too slow to be feasible, in which case the compilation logic could be packaged separately and thereby made accessible to build tools other than Babel.
",DomKM,2017-01-30 19:29:33
828,2016-02-12 10:51:25,":+1:  . I was also in same situation few months back , for now i am using macros to fire up relay-babel-plugin and then passing generated string to `js.eval(..)` in my scala.js project. [RelayQL Macro](https://github.com/chandu0101/sri/blob/master/relay/src/main/scala/sri/relay/macros/RelayMacro.scala). 

I'll love to see no babel dependency in future !.. :)   
",chandu0101,2017-01-30 19:29:33
828,2016-02-12 16:02:42,"Great questions! And thanks, @chandu0101, for following up with your approach.

> It would be great if there were a self-contained Relay package that could run entirely client-side.

This gets at why the plugin is necessary in the first place. Relay needs information from the GraphQL schema in order to interpret queries correctly. Examples include knowing the types of all fragments and fields, and being able to distinguish whether `friends(first: 10)` should return a list or connection. In practice, the schema can be far too large to load in full on the client (encoding bits of the schema in each query also ensures that performance is proportional to the part of the schema you actually use).

That said, we've discussed the idea of a schema-less Relay in which the queries themselves were simple objects, and any schema-level metadata was encoded in a composing layer (technically the queries _are_ simple objects, but there's enough metadata that they aren't fun to write by hand). If that sounds vague, it is. tl;dr we're open to this idea but for the foreseeable future we're likely to continue using the plugin.

> I searched for issues about decoupling Relay from Babel but didn't find any. What is the status of this? Is Relay going to be permanently tied to Babel or is this temporary?

We don't currently use Relay with any compile-to-JS languages internally, so the core team is not likely to work on this directly. However, we are open to making changes to support using Relay in these languages. The best bet might be to submit a PR that changes the plugin to work with your language so we can discuss something concrete.

If you're interested in working on this, note that we've tried to structure the plugin in a way that most of the babel-specific code is in `getBabelRelayPlugin`. The code to compile source string + schema into output code is in [RelayQLTransformer](https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/RelayQLTransformer.js). This file accepts a babel object as an input and uses it only for constructing JS AST nodes (we used to use string concatenation - not recommended). You might try exporting RelayQLTransformer and modifying it to work with your language - let's go from there.
",josephsavona,2017-01-30 19:29:33
828,2016-02-19 17:46:06,"@DomKM have you seen that https://github.com/apollostack/relay-runtime-query ?
It's more like a proof of concept and runs only in dev mode, as far as I know.

Hope it helps.
",schweller,2017-01-30 19:29:33
828,2016-02-22 22:25:34,"Currently working on improving that! My goal is to have exactly the thing requested above - a Relay client that can connect to any server at runtime, and still does query validation, etc. I think I'm pretty close, just need to improve things so that all of the Relay tests pass.
",stubailo,2017-01-30 19:29:33
828,2016-02-23 06:19:23,"Darn, looks like this commit in Relay 0.7.1 changed the API between the plugin and runtime: https://github.com/facebook/relay/commit/6a1fdc9a9e0646606127c270bbbc2240cb2d2199

Looks like there is an expectation that the version of the Babel plugin will always exactly match the Relay runtime version, so it could be really hard to make sure the tool I built above will work with new versions without some cooperation with the Relay team, or a more stable way to generate a working query AST.
",stubailo,2017-01-30 19:29:33
828,2016-02-23 06:40:07,"> Looks like there is an expectation that the version of the Babel plugin will always exactly match the Relay runtime version

@stubailo Yes - as we iterate on Relay we often need to adjust the plugin to provide more/less/different information about the queries. The commit you linked is a perfect example, where we needed a stable identifier for a fragment at build time. We expect to continue iterating on the plugin for the foreseeable future, so the best bet here is to reuse parts of the plugin.

> without some cooperation with the Relay team

We're happy to support changes that would allow reuse of the portion of the plugin that transforms source GraphQL to JS code outside of the babel plugin. How about sending a pull request that demonstrates what changes you'd need in `babel-relay-plugin` (ie. what you'd have to export as public API) in order to reuse that transform step outside of babel itself? 
",josephsavona,2017-01-30 19:29:33
828,2016-02-23 06:43:53,"Sounds great - I'll try to get together a PR soon, I don't think it will be a big problem because the Babel AST very closely matches the actual data structure (to the point where I was able to mock Babel in the package above to actually get the right data).

In the meanwhile, I've updated my NPM package to work with Relay 0.7.1!
",stubailo,2017-01-30 19:29:33
828,2016-03-13 20:25:21,"Sorry for dropping out. I've been using Relay via Babel and Webpack for the past few weeks since I needed to be immediately productive and I wanted to understand Relay better. However, I am still very interested in making Relay work with ClojureScript.

After working with Relay and understanding it better, I am no longer interested in a client-side only version. Instead, I think it would be fairly easy to make Relay work with ClojureScript during the build process in a similar way to how it works with JavaScript and Babel. I think the only thing I need is a portable JavaScript function that, given a `Relay.QL` query string and a Relay schema object (or schema JSON string), returns the parsed/annotated/compiled/whatever query that should replace the `Relay.QL` query string. By ""portable,"" I mean a function that does not depend on Babel, Webpack, or Node APIs; just plain ECMAScript. I could use this function to compile `Relay.QL` query strings using Java's Nashorn runtime during ClojureScript compilation. How does this sound? Could we provide a portable `Relay.QL` query string compiler? It would be a tremendous help for everyone who wants to use Relay in compile-to-JavaScript languages.
",DomKM,2017-01-30 19:29:33
828,2016-03-13 22:51:37,"> I think the only thing I need is a portable JavaScript function that, given a Relay.QL query string and a Relay schema object (or schema JSON string), returns the parsed/annotated/compiled/whatever query that should replace the Relay.QL query string. By ""portable,"" I mean a function that does not depend on Babel, Webpack, or Node APIs; just plain ECMAScript.

Yup, this is the direction that we recommend and are able to support (see my comments above). The only caveat is that the plugin replaces `Relay.QL`...`` templates with JavaScript _code_, not a modified query. We currently use babel helpers to construct an AST of the generated code - but these helpers are actually passed as arguments to the transformer, such that you could easily stub them out if you don't want to require babel within e.g. Nashorn. We would prefer to keep this approach (as compared with string concatenation for constructing the generated code) because it greatly increases our iteration speed on the plugin.

At this point I believe we have consensus on the high-level approach; feel free to submit a PR and we can discuss specifics there.
",josephsavona,2017-01-30 19:29:33
828,2016-03-14 19:57:31,"Thanks, @josephsavona. After looking through the code and discussing this with @stubailo in Slack, it seems quite a bit more complicated than I hoped, in large part due to my lack of familiarity with Babel, Flow, and the rest of the modern JS ecosystem. I'll try to get to it eventually, though I hope that someone who is familiar with this and can knock it out it a couple hours will do so. For what it's worth, this seems like a crucial step in growing Relay within the larger community (ClojureScript, TypeScript, etc.), and, if someone does refactor this to support a portable compiler function, I will commit to packaging it for use by the ClojureScript community.
",DomKM,2017-01-30 19:29:33
828,2016-03-18 17:33:06,":edit: oops I am dumb @chandu0101 posted this approach as the first comment ;p

I messed with this a month or so ago (just saw this issue).  The thing I was doing, and no idea if it was a good idea or not, was shelling to node.js from clojure.  So you might have something like:

<S_CODE_TOKEN>

This would call the babel transformer directly with the Relay plugin configured, get the AST, and then execute it (it turns an AST of a function call so you have to eval it), and return a JSON string of the AST.  This json string could then be parsed by clojure.

I am clojurescript dumb so I wasn't sure the best way to do this so it happens in clojure vs clojurescript.  I think a macro would happen in clojure and clojurescript could be left with just a js object?

<S_CODE_TOKEN>

I also tried a reader literal:

<S_CODE_TOKEN>

The downside to this whole approach was that I was shelling to node.js per query ... so that is slow.  Ideally nashorn could do this but I read it can't load babel so didn't even try.  I'm sure you could do it so that it fires node.js once and then just streams queries in / out ... but I am not that smart :).

Knowing that the babel stuff is passed as parameters to the Printer sounds rad.  I'd like to give that a try so I wouldn't need babel and could do this all in nashorn.
",eyston,2017-01-30 19:29:33
828,2016-03-18 17:38:28,"Here was the script:

<S_CODE_TOKEN>

So ... extremely low tech ;p  It would be rad if that could just run in nashorn but babel stops it?
",eyston,2017-01-30 19:29:33
828,2016-03-18 17:57:42,"@eyston That's very similar to what I am currently doing.

<S_CODE_TOKEN>

I opened https://github.com/facebook/relay/issues/962 specifically because I'd like to switch from shelling out to Node to directly compiling in Nashorn. The only thing stopping us JVM users (CC @chandu0101) from using Relay with Nashorn is that `babel-relay-plugin` and `graphql-js` currently lack UMD builds.
",DomKM,2017-01-30 19:29:33
828,2016-03-18 18:01:12,"awesome, thanks! I like that you can just inline the code directly versus having to eval. :)
",eyston,2017-01-30 19:29:33
828,2017-01-30 19:29:33,"(Spring-cleaning). Going to close this one due to inactivity. Summarizing the thread: a couple  of workarounds have been shared, and we're open to PRs. Note also that Relay has a new core now (pieces of which have been landing on the master branch for some time now, with more to come), so if we want to continue discussion of this further we should probably do so in a new issue, and based the discussion on the current reality (and imminent future) of the master branch. In them meantime, thanks for the discussion on this issue!",wincent,2017-01-30 19:29:33
827,2016-02-12 02:39:12,,jsierles,2016-02-12 20:55:35
827,2016-02-12 20:38:04,"Thanks!

@facebook-github-bot shipit
",steveluscher,2016-02-12 20:55:35
827,2016-02-12 20:41:35,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/456486131223257/int_phab to review.
",facebook-github-bot,2016-02-12 20:55:35
826,2016-02-10 23:46:51,"Another thing that was confusing was that the configuration for the effects of a mutation are all written and stored on the client, when they are tightly coupled to the what the mutation actually affects when run on the server. For something like:

<S_CODE_TOKEN>

All of that seems like effect logic that the server is actual the root source of truth for. It seems like the only time that code would change would be when the mutation on the server changed. And with that in mind, it seems weird for every Relay client that is interacting with the server to have to rewrite that logic (or go to the trouble of sharing it in a separate library, in the case of a publicly consumed GraphQL/Relay API…)

Why not let the server opt-in to support Relay by passing back that information with the returned values of the mutation. Something like this inside the mutation resolver:

<S_CODE_TOKEN>

(Or even something more descriptive than `relay` since that logic seems pretty framework-agnostic, as long as it remains completely declarative.)

If we were able to move that logic to the server, the clients would become a lot simpler, and each new client wouldn’t have to reimplement the same “config” code that is inherent to the actions the server is performing itself, making it even easier to get started once you have a Relay-ready server implementation.

There’s a good chance I’m missing something here :)

I now see that other issues have been created with this thought: https://github.com/facebook/relay/issues/489 https://github.com/facebook/relay/issues/293 https://github.com/facebook/relay/issues/125. And that there's a meta issue summarizing them: https://github.com/facebook/relay/issues/538!

In https://github.com/facebook/relay/issues/125 @yuzhi alluded to `getConfigs` being needed for the optimistic responses to be implemented, and those are always going to be purely client-side I'd imagine, so that's a limitation. In that case, I think it would be great to get the server to contain the logic in the schema definition, and for the client to just use it (like it does with the Schema definition itself). 

If there was a way to augment GraphQL for this to all happen with introspection, that would seem to be the cleanest solution—as long as it doesn't muddy up GraphQL. Seems like a way of attaching metadata to a type or query or mutation isn't crazy. Otherwise, maybe there's a separate Relay schema that a server could implement to keep all of that logic in one place, and not require it to be reimplemented by each client.
",ianstormtaylor,2016-02-11 00:55:03
826,2016-02-11 00:55:03,"Thanks for this, @ianstormtaylor. This is great feedback, and I see you've gone and found the related issues (like #538). I'll close this one out so that we don't have too much duplication, but I think your thoughts here are really valuable and I'll add a back-reference here so that we don't lose track of them.
",wincent,2016-02-11 00:55:03
825,2016-02-10 23:34:03,"One of the things I found annoying while trying to implement mutations is how much opinion Relay inflicts on my GraphQL schema—having to create `Input` and `Payload` definitions for each operation is really verbose, very Relay-specific, and not necessarily that “clean” of an API.

For example, ignoring Relay, it might be nice for a mutation in the GraphQL schema to look like:

<S_CODE_TOKEN>

That would be a fairly simple `createTeam` mutation, that is easy to understand. You pass the `userId` of the user you’re creating the team for, and a `team` JSON object containing team attributes (name, billing email, etc.). It maps fairly simply to a `POST /users/:userId/teams` call of traditional REST APIs (not that that’s a requirement, but REST does have a lot of good patterns).

Unfortunately, implementing that same mutation for Relay requires the GraphQL schema to be very Relay-specifc instead:

<S_CODE_TOKEN>

A lot more verbose, but also less easily used by other, non-Relay, GraphQL implementations now. Or at least without them having to adopt Relay’s naming opinions.

It seems like one reason the `Input` is used is so that creating the `$input` variable is as easy as possible for the client code. But it doesn’t seem like this should come at the expense of changing the schema itself. It seems like it would still be easy to implement arbitrary variable names, and have them be stringified properly by the query configuration logic in Relay. Such that passing something like:

<S_CODE_TOKEN>

Could be stringified into a mutation of:

<S_CODE_TOKEN>

Another reason for the `Input` and `Payload` is to attach a `clientMutationId`, which the documentation suggests is  `used to reconcile requests and responses`. But this seems like something that is NetworkLayer specific, and could be better implemented as a separate parameter to any HTTP calls made to the server, and even something that might need to be use-case specific. 

For example, I already support a `?requestId` parameter on my server for that exact purpose, and others might have differently named solutions. If all that’s needed is a unique identifier for requests, couldn’t it be implemented decoupled from the GraphQL part of the request? Potentially even implemented as an HTTP header instead of as part of the parameters of a request. Seems like something that’s going to be very server-specific, and so should be an option for the NetworkLayer, but have nothing to do with the GraphQL schema itself?
",ianstormtaylor,2017-01-30 22:06:07
825,2016-02-12 21:16:56,"Realized I forgot to add another fake-looking reason for the `clientMutationId`, to separate individual mutations from each other. But since they'd have to be named if multiple mutations were passed, this shouldn't actually be a need. The `clientMutationId` seems to really be a `clientRequestId`, which is why it would be even more awesome to remove it from the GraphQL schema part of the request.

Adding more mutations today and really feeling the extra complexity of having to define individual `Input` and `Payload` types for each and every mutation in the API. I'm thinking my ideal would be something like:

<S_CODE_TOKEN>

Here with `Payload` acting very similarly to `Query`, as a generic way to return multiple types of objects across all mutation requests. Such that for `createTeam` it could return `{ user, team }` so that the client can do whatever it pleases. (I'd use `Query` itself actually, but it seems a bit off since they shouldn't be able to dig into unrelated objects, or at least it would seem to encourage that.)

Note: `JSON` and not using `!` for required attributes are just because in this case I'm sharing the same database module across a GraphQL and REST API, and would prefer to keep all of the validation in that module itself, so that error handling is consistent across both APIs. But if I wasn't, it would totally make sense take things like `createTeam(userId: ID, teamName: String, teamEmail: String): Payload` or similar.

Just really wish the extra wrapper types were gone is all! Since right now that above code turns into something like:

<S_CODE_TOKEN>

Let me know if I'm missing something there though, happy to think through more.
",ianstormtaylor,2017-01-30 22:06:07
825,2017-01-30 22:06:07,"Thanks for this, and sorry for taking so long to explicitly respond to it.

There are really two issues here:

- One is about client mutation IDs, and that is addressed in #1083. There is some context in that thread, but the short version is that it's in there because of legacy reasons, where our iOS clients at FB needed it for book-keeping purposes. As noted in there, however, we'll can lift the restriction in the new Relay core/APIs.
- The other is about the ergonomics of creating mutations. This is another thing that will be largely addressed in the new core: while we will continue to support the ""Relay spec"" version of mutations out of the box, we will also supply lower-level tools and building blocks that allow people to construct their mutations pretty much any way they want. The new core and APIs aren't fully released yet, but if you watch the `master` branch you can see the pieces that we've started to roll out, and will continue doing over the coming weeks/months.

I'm going to suggest that we close this in the interests of spring-cleaning. If you still have concerns once the new APIs are out, we should start a new issue for that. Thanks for posting in such a detailed and thoughtful way!",wincent,2017-01-30 22:06:07
824,2016-02-10 23:24:54,"There’s a lot of boilerplate involved to invoke a single mutation with the current API. And each of the containers needs to be aware of the singleton `Relay.Store` in each of their calls. It would be easy to create a bit of convenience on `createContainer` that reduces the boilerplate, and allows for an easy way to remove the `Relay.Store` singleton dependency in the future.

Using the like button example from the docs, it would change from calling the singleton directly:

<S_CODE_TOKEN>

Into calling a method on `this.props.relay`, which is a nicer, thin wrapper over interacting with the raw mutations objects and the store itself. In the future, this could allow the Store to actually be passed down the Containers tree (via `context`, like Redux does it), instead of relying on a singleton:

<S_CODE_TOKEN>

Just an idea!
",ianstormtaylor,2016-02-11 00:29:39
824,2016-02-11 00:29:39,"> In the future, this could allow the Store to actually be passed down the Containers tree 

We're gradually transitioning from singletons and globals to fully encapsulated state. As of last week, Relay does pass an instance of `RelayContext` via the React context, and containers use this to access data. As part of this we'll change the mutations API to remove the `RelayStore` singleton, and will likely end up with something like `this.props.relay.commitUpdate(...)` (allowing users to locally name mutations doesn't seem to add much value and instead makes name collisions likely and code grepping harder).

We're tracking progress of all that at #558, so let's merge this discussion there.
",josephsavona,2016-02-11 00:29:39
824,2016-02-11 00:50:31,"Ah awesome, I hadn't found that meta issue yet, doh! Thanks!
",ianstormtaylor,2016-02-11 00:29:39
823,2016-02-10 23:13:56,"One of the most awesome parts of Relay is how it lets all of your components data requirements live right where the component itself is defined. I alluded to this a bit in the “removing routes” idea, but we could go even further along that line of thinking, and define the “relay bits” of logic as static properties on the `Component`s themselves, since they are already part of the component definition as far as the developer is concerned. 

It makes things feel even cleaner, and makes it feel more like just a thin layer on top of React that adds an additional layer of declarative-ness:

<S_CODE_TOKEN>

This way `createContainer` doesn’t need to take an additional argument, and it just finds the relay-specific properties of the component itself, making everything defined in one place. If people used decorators, it becomes even terser and easier to read.

I wrote a small module that lets me do this in my own codebase, and it feels really nice to just think in terms of the components themselves defining their data.
",ianstormtaylor,2016-02-11 00:52:19
823,2016-02-11 00:52:19,"We've debated this as well, but ultimately decided that these static annotations are properties of the container, not the component. We'd like to ensure that plain React components can continue to be used as-is without Relay, and to allow usage of basic Relay features without modification.

We appreciate the feedback, but ultimately this is enough of a stylistic choice that we're not likely to change without a strong reason. As you point out, it's easy to write this style and use an adapter function for `Relay.createContainer`.
",josephsavona,2016-02-11 00:52:19
822,2016-02-10 23:09:22,"One of the things I noticed while trying to understand “Routes” in the first place, was that they seemed very lightweight. So lightweight that I was wondering if they even needed to exist. We might instead be able to just combine their usage with Containers themselves.

For example, the first example in the docs uses a plain object as a Route, at which point it’s hardly anything special, it’s just a dictionary of options passed into a Root Container. The second example goes a step further, subclassing `Relay.Route`, but it seems like the only reason to do that is to get the error handling logic in `paramDefinitions`, which could be achieved in others ways.

The docs mention that `Routes must also define a string name.` but it’s unclear why this need exists, and I don’t think it’s ever mentioned again in the docs. I assume it’s for error handling too, but that too could be solved differently if it changing it allows for a simpler API?

Routes themselves seem like they'd rarely be re-used, and even if they were, why not just re-use the specific queries (via sharing them like regular functions) instead of needing an extra object to wrap them?

What if instead, containers could be declared with their own `queries` and `paramTypes` (renamed from `paramDefinitions` to match React’s naming scheme):

<S_CODE_TOKEN>

Instead of needing a `Route` object that throws without the proper parameters, that error handling logic can be taken on by the container itself, and the “Route” really is just a configuration dictionary at that point, hardly even needing a special name. Instead of passing in a `Route` to a `RootContainer`, the `RootContainer` could then just simply take `params={…}`:

<S_CODE_TOKEN>

This is similar to the simplicity that libraries like [`react-router-relay`](https://github.com/relay-tools/react-router-relay) (which was very nice to get setup and remove the complexity of Relay) achieve for you by abstracting away the need to touch Routes or Root Containers.
",ianstormtaylor,2017-01-30 21:57:50
822,2016-02-11 01:47:35,"This is great feedback, @ianstormtaylor. We've already taken some steps towards de-emphasizing routes, but there's still more that we can do. When we first designed them they were much closer to what developers typically thing of as ""routes"", and that's why we named them that way.

For an example of the direction we're headed, take a look at `RelayRenderer` ([here](https://github.com/facebook/relay/blob/master/src/container/RelayRenderer.js)), which dispenses with a route object much like you suggest, and instead takes a ""query config"". We haven't documented this yet, and it may continue to evolve, but our thinking is that this will replace `RelayRootContainer`.
",wincent,2017-01-30 21:57:50
822,2016-02-11 02:52:19,"Totally get you on the initial naming since they were closer to routes back then. 

Side note: if moving to `QueryConfig` from `Route`, I think it would make sense to call them `variables` now instead of `params` to better match GraphQL's naming? (Looks like it's [sometimes referred to as `variables`](https://github.com/facebook/relay/blob/master/src/query-config/RelayQueryConfig.js#L49) and [sometimes as `params`](https://github.com/facebook/relay/blob/master/src/query-config/RelayQueryConfig.js#L47) on master.)

For the changes, it sounds like `RootContainer` is going to become `Renderer`, which makes total sense. And that `Route` is going to be `QueryConfig`. Curious to know what we gain from the `QueryConfig` being a separate object that you need to subclass, instead of just letting renderer take them directly:

<S_CODE_TOKEN>

(Tried to look through the source to answer that, but I don't think I understood it all.) It looks like it's basically just a really thin wrapper that lets you specify `prepareVariables`, and also a `params` dictionary that validates variables being required or not? I wonder if that's even worth keeping.

(Warning, next idea is a potential derailer...) I was going to open a separate issue for this, but it seems like it's highly related, so I should just put it here...

I was wondering if there was a reason not to just let us put `queries` directly on containers like we already can with `fragments`. Following that logic, it could make sense to put the `params` validating there as well (as `variableTypes`), and even `prepareVariables` if it's needed:

<S_CODE_TOKEN>

Going even further, to arrive at something that's truly transparent to usage with React, if there was a way to invoke the renderer from inside the wrapped container, you could even just get components that fetch their own queries automatically so that you don't need any extra rendering logic:

<S_CODE_TOKEN>

But I don't know enough about rendering there (or server-side) to know if that's even possible. It would be really awesome if so though.

Edit: This might be something that's better handled by libraries like `react-relay-router`. Since it would need to do things like aggregate queries across the matched components. But it just felt so nice to try and get the top-level rendering to be completely transparent like the existing container are for components. Anywhoooo... (End derailing.)
",ianstormtaylor,2017-01-30 21:57:50
822,2017-01-30 21:57:50,"(Spring cleaning.) Closing due to staleness. In the new APIs and new core (parts of which are already landing on `master`, with more to come soon) the notion of ""route"" is much better separated from the Relay APIs, so I don't think there's anything further actionable here. Thanks for bring this up!",wincent,2017-01-30 21:57:50
821,2016-02-10 23:04:47,"I was a bit confused as to why the `renderLoading` function needed to be separate from the `render` method of the `Component` passed to `RootContainer`. It seemed like something that would be nicer to have handled as a `props.loading = true` case (or even `props.relay.loading` if namespacing is an issue), and have all of the rendering logic for that top-level component be handled in a single place, instead of separately having rendering logic in what is affectively the “router” of an application. 

Same goes for `renderFailure` that could be handled via `props.relay.error` or similar.

Similarly I’m not sure why the `renderFetched` needs to exist, although it definitely seems like there could be valid use cases. It might be simpler to just have users handle that logic in userspace, by wrapping whatever component they wanted with a parent one that proxies.

I feel like I might be missing something here, since I haven't needed to deal with any complex cases here. But it just seemed like an odd thing when getting familiarized.
",ianstormtaylor,2016-02-11 01:03:15
821,2016-02-11 01:03:15,">  was a bit confused as to why the renderLoading function needed to be separate from the render method of the Component passed to RootContainer

Relay was built to simplify the process of loading data for a view hierarchy. To that end, we designed it so that individual containers/components do not have to be concerned with their initial loading state - Relay will ensure that they are not rendered until their data is available. Without this guarantee, _every_ component would have to handle the theoretical possibility of being in a ""loading"" state - which is extra boilerplate that should only apply at the top of the view. We've found that the current approach simplifies the process of writing larger complex apps - there's a bit more background about this in [Thinking in Relay](http://facebook.github.io/relay/docs/thinking-in-relay.html#fetching-data-for-a-view). 

The existing callbacks - `renderFetched`, `renderLoading`, etc - are certainly confusing. In an upcoming release we will deprecate `<RelayRootContainer>` and offer access to `<RelayRenderer>`, which consolidates all of these props into a [single `render` callback](https://github.com/facebook/relay/blob/master/src/container/RelayRenderer.js#L80).

Again, we really appreciate your feedback here. Let's discuss this a bit more in your issue about removing routes as a concept (since the handling of loading states would have to move somewhere in that case).
",josephsavona,2016-02-11 01:03:15
821,2016-02-11 01:08:44,"Ah nice, that makes total sense, I hadn't thought that through enough. Makes total sense!
",ianstormtaylor,2016-02-11 01:03:15
820,2016-02-10 23:02:37,"In the docs, I saw the term `viewer` used a lot, and was never really sure of what it was referring to. I assumed it was just a random name for a piece of the data model, but I couldn’t shake the feeling that it was some special constant I wasn’t familiar with. Made worse by things like `relay-todomvc` example using the same `viewer` term, even though it seems to be meaningless there?

If this is just a random name, it would be a lot clearer as `user` or `person` or something that doesn’t feel like the name of some generic constructor/class that might be Relay-specific.

(Little thing, but I think it might help in people being onboarded!)

Edit: After stumbling on https://github.com/facebook/relay/issues/112, it seems like `viewer` actually _is_ some sort of Relay-specific convention, but what it actually does isn't clear.
",ianstormtaylor,2016-02-11 02:16:44
820,2016-02-11 02:16:44,"You describe well the confusion that all this `viewer` stuff produces, but I don't think we want to give more prominence to it in the docs by explaining it; the most desirable solution is actually just to fix #112, and we have a pretty clear idea of the steps that would need to be taken in order to do so. At that point we should revisit the docs and the sample code to ensure that it makes sense and there are no (now unnecessary) `viewer` fields in it.

So I am going to close this for now. Please comment again if you think there's something else we could be doing. Thanks for your input!
",wincent,2016-02-11 02:16:44
820,2016-03-03 09:52:50,"Great question @ianstormtaylor and thanks for the clarification @wincent.

But am I right with the assumption that as of now (currently version `0.7`) you **have to** use the `viewer` property?
",schickling,2016-02-11 02:16:44
820,2016-03-03 15:06:01,"@schickling: Yeah as of the current version you have to use `viewer` (or some other root field like it) to work around the limitations described in #112. See also [Dan's comment](https://github.com/facebook/relay/issues/112#issuecomment-170648934) on that issue and its predecessors for some caveats about working with `viewer`.
",wincent,2016-02-11 02:16:44
820,2016-03-03 16:05:54,"Thanks @wincent. I guess it would make sense to make this more clear in the docs, at least for now to avoid some confusion for new users :-)
",schickling,2016-02-11 02:16:44
820,2016-03-03 20:59:06,"We're [pretty close now](https://github.com/facebook/relay/issues/112#issuecomment-191912269), so I don't know if we'll get to the docs before it becomes a non-issue. We'd welcome a PR though if you want to take a stab at updating things to make them clearer.
",wincent,2016-02-11 02:16:44
819,2016-02-10 23:01:40,"One of the biggest blockers to me diving into Relay (and even getting a working example once I had started) was installing the babel plugin and getting the schema bit of it hooked up. It was really complicated, confusing, and a big blocker to actually experimenting with Relay itself.

I think it would be a lot easier if the babel plugin would allow being passed a path to the file containing the schema, instead of the schema itself (or both for convenience). This would allow it to be fully configured from the `.babelrc` file instead of needing to create a separate `babel-plugin-relay.js` file somewhere in the directory. Like so:

<S_CODE_TOKEN>

Which would be way simpler. I think this would require it being renamed to `babel-plugin-relay` instead of `babel-relay-plugin`. Or you could use `babel-plugin-react-relay` if you wanted as well. (Actually looks like the rename is already ready here https://github.com/facebook/relay/pull/732 .)
",ianstormtaylor,
819,2016-02-29 23:13:33,"@ianstormtaylor Until then you can use the [babel-relay-plugin-loader](https://github.com/BerndWessels/babel-relay-plugin-loader) in your `.babelrc`
",BerndWessels,
819,2016-03-04 18:36:21,"I totally agree with @ianstormtaylor's suggestion and think it would be a big win in terms of minimising first steps when getting started with Relay.

I just had a long conversation with the guys from Babel and learned that it's not really possible (or at least recommended) to wrap a babel plugin. The functionality should rather be included in the plugin itself.

I really like the syntax Ian has proposed and did some research: It is possible to access the provided options (`""file"": ""./support/schema.json""`) in the babel plugin via `FunctionDeclaration` ([see here](https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/plugin-handbook.md#plugin-options)).

@facebook-team: Is this something you would consider to implement?
",schickling,
819,2016-03-04 19:12:28,"We're happy to support this. Note that this proposal avoids the main complication of previous suggestions to simplify the plugin such as [this one](https://github.com/facebook/relay/issues/206#issuecomment-136932595), because it passes the schema in JSON form (loading a JS schema directly won't work bc of conflicting GraphQL versions and that cause `instanceof` checks to fail). 

Want to submit a PR for this?
",josephsavona,
819,2016-03-04 19:51:03,"Unfortunately I don't have to time right now to properly dive into Babel in order to implement it. But I'm glad that this is something you guys are happy with as well :-)
",schickling,
819,2016-04-20 18:14:49,"Update: We've built [babel-plugin-react-relay](https://github.com/graphcool/babel-plugin-react-relay) supporting different source types such as JSON files, JS schema definitions and even URL schema endpoints.

This is meant to provide a more convenient and powerful solution without the need for scripts like `build/babelRelayPlugin.js`.

@ianstormtaylor would love to hear your thoughts on the API 👍 
",schickling,
819,2016-05-25 08:08:39,"It would be great if Babel had some initialization stage, so that you could configure your plugins asynchronously.
",Vanuan,
819,2016-10-21 12:29:04,"I will show `Note: The code generator has deoptimised the styling of ""/Users/yutin/Develop/bunninn/client/mobile/node_modules/immutable/dist/immutable.js"" as it exceeds the max of ""100KB""`

when setting babelRelayPlugin in .babelrc
",yutin1987,
818,2016-02-10 23:00:53,"Part of the reason the Babel plugin setup was so complicated was also the need to write a separate script for saving the `schema.json` file yourself. I was confused at first as to how to obtain the schema to introspect it, but then realized that the current Relay example repo only works if you happen to be running the GraphQL server and your frontend from the same service (or have another way of sharing your schema as a package). 

In my case, the server is a separate service from the frontend app, so sharing the code is inconvenient. And this seems like a good default case to optimize for, since even when the server isn't separate, people would still be able to introspect it over HTTP.

Since the `__schema` introspection is available to all GraphQL API implementations, it would be nice if there was a simple CLI that would fetch the introspection JSON for you, provided a `url`. Like so:

<S_CODE_TOKEN>

That would make the 99% use case a lot simpler. Paired with the simpler Babel plugin setup, that whole step could be reduced to a few commands and adding a few lines to `.babelrc`. Which would make getting up and running with Relay a _lot_ faster.
",ianstormtaylor,2016-05-10 16:09:40
818,2016-02-14 20:58:38,"I was looking for exactly same, since right now it is plain code duplication. You need to define schema in backend and frontend, if you use different languages for it.
",dev-rkoshlyak,2016-05-10 16:09:40
818,2016-02-15 02:20:09,"That's a very good idea. The GraphQL introspection query is available in all GraphQL packages as a  global variable.

In the ruby package is available at `GraphQL::Introspection::INTROSPECTION_QUERY`

For the npm package is available at [`require('graphql/utilities').introspectionQuery`](https://github.com/graphql/graphql-js/blob/042e1620bb3a83e07e15586bb5b69b211c91e8de/src/utilities/introspectionQuery.js#L11). It should be straigth forward to build a CLI utility by making an http post with the introspection query as the query parameter.
",guzart,2016-05-10 16:09:40
818,2016-02-15 03:48:08,"The difficulty here is that this tool would then have to work with http proxies, firewalls, etc. Rather than build and maintain a module just to make an HTTP request, perhaps GraphQL servers themselves should expose the results of the standard introspection query directly (via a configurable URL?)

Cc @leebyron
",josephsavona,2016-05-10 16:09:40
818,2016-02-16 09:49:27,"@VolodymyrTkachuk
",dev-rkoshlyak,2016-05-10 16:09:40
818,2016-02-21 11:21:22,"@josephsavona I like the idea that the GraphQL server exposes the whole schema on an endpoint. Are there any possible downsides to this? I guess this could also be implemented by a external (express) library for now?
",schickling,2016-05-10 16:09:40
818,2016-05-10 16:09:40,"Closing due to inactivity - as discussed above, it should be easy to create an endpoint that returns the results of the introspection query.
",josephsavona,2016-05-10 16:09:40
817,2016-02-10 23:00:42,"Hey all, first off let me say thank you for working on this library with the awesome goal of making data on the frontend more declarative. After working with React, it's a breeze, and I was pretty excited to get Relay working for the app I'm working on.

I saw that people on the team mentioned welcoming ideas/feedback in new issues, so I wanted to write up a bunch of painpoints/issues that I ran into while getting started, hopefully some of the ""new user mindset"" can be useful. I'm going to split them up so it's easier to keep track of, but here's a list:
- [#818: Create a GraphQL schema introspector CLI?](https://github.com/facebook/relay/issues/818)
- [#819: Babel plugin should take a schema path from `.babelrc`?](https://github.com/facebook/relay/issues/819)
- ~~[#820: Remove `viewer` confusion?](https://github.com/facebook/relay/issues/820)~~
- ~~[#821: Let loading state be handled by `render`?](https://github.com/facebook/relay/issues/821)~~
- [#822: Remove the `Route` concept?](https://github.com/facebook/relay/issues/822)
- ~~[#823: Allow static definitions on the actual components?](https://github.com/facebook/relay/issues/823)~~
- ~~Remove the “Root Container” concept?~~
- ~~[#824: Simplify and encapsulate mutation calls?](https://github.com/facebook/relay/issues/824)~~
- [#825: Remove the mutation GraphQL specification requirements?](https://github.com/facebook/relay/issues/825)
- ~~[#826: Move “configs” to the GraphQL  #server?](https://github.com/facebook/relay/issues/826)~~
- Simplify fragments declaration?
- ~~Move away from the global singleton?~~
- Make the build-time logic opt-in?

Sorry if there's duplication, I looked through a lot of existing issues, but I probably missed some.

Some of these things might be no-brainers and already being worked on. Also, I'll admit, some of them might seem too drastic, or even not fully thought through (since I probably don't have full context on a lot of things yet), but figured I'd open them anyways for discussion.

Just for context: I was previously using Redux over REST, but I migrated to GraphQL and then Relay after running into lots of imperative data management issues with Redux weighing me down. The GraphQL piece is separate from (run alongside) the REST piece, instead of one consuming the other, and they both share the same DB calling modules.

Anyways, looking forward to discussing, and also seeing this library get more and more refined in the future. And thanks again!
",ianstormtaylor,2016-02-11 02:20:51
817,2016-02-11 02:20:51,"Thanks, @ianstormtaylor. This is a very generous contribution of time and effort. Thanks for the feedback and analysis!

Some of these we've closed already to try and group together duplicated or overlapping concepts. I'll close this one too because we're trying to keep the open issues list down to a smaller number of aggregated, actionable issues. As we merge stuff together there will be backreferences to your original issues, but please feel welcome to add your commentary to the existing issues as you see fit.

Thanks once again for your (considerable) input! It's great.
",wincent,2016-02-11 02:20:51
817,2016-02-11 02:53:03,"Sounds good, thanks!
",ianstormtaylor,2016-02-11 02:20:51
816,2016-02-10 19:48:00,"See a [demo](https://facebook.github.io/relay/prototyping/playground.html#source=class%20ChildComponent%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20const%20%7Bhello%7D%20%3D%20this.props.greetings%3B%0A%20%20%20%20return%20%3Ch1%3E%7Bhello%7D%3C%2Fh1%3E%3B%0A%20%20%7D%0A%7D%0A%0Aconst%20ChildContainer%20%3D%20Relay.createContainer%28ChildComponent%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20name%3A%20'A'%2C%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20greetings%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20hello%28name%3A%20%24name%29%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0Aclass%20ParentComponent%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20return%20%3CChildContainer%20greetings%3D%7Bthis.props.greetings%7D%20%2F%3E%3B%0A%20%20%7D%0A%7D%0A%0Aconst%20ParentContainer%20%3D%20Relay.createContainer%28ParentComponent%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20name%3A%20null%2C%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20greetings%3A%20%28%7Bname%7D%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20%24%7BChildContainer.getFragment%28'greetings'%2C%20%7Bname%7D%29%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0Aclass%20Route%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20greetings%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20GreetingsQuery%20%7B%0A%20%20%20%20%20%20%20%20greetings%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BParentContainer%7D%0A%20%20%20%20route%3D%7Bnew%20Route%28%7Bname%3A%20'B'%7D%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B%0A&schema=import%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%7D%20from%20'graphql'%3B%0A%0Avar%20GREETINGS%20%3D%20%7B%0A%20%20hello%3A%20'Hello%20world'%2C%0A%7D%3B%0A%0Avar%20GreetingsType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Greetings'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20hello%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20%7B%20type%3A%20GraphQLString%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resolve%3A%20%28%7B%7D%2C%20%7Bname%7D%29%20%3D%3E%20%60Hello%20%24%7Bname%7D!%60%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20greetings%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20GreetingsType%2C%0A%20%20%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20GREETINGS%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%29%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A). I expect ""Hello B!"" on the page, but got `TypeError: Cannot read property 'hello' of undefined` instead.

If I change `'A'` to `'B'` on line 10, or `'B'` to `'A'` on line 54, then the error disappears...
",denvned,2016-02-10 22:31:49
816,2016-02-10 22:31:49,"When parent components override variables in child components using the second param to `getFragment` they must _also_ pass the same variables in props. This is required because the same child fragment may be included more than once, and the child container needs a way to distinguish which data to use. This is something we'd like to address and simplify, but the fix is simple: pass the `name` variable to `<ChildContainer>` as a prop:

[here's a working version of the demo](https://facebook.github.io/relay/prototyping/playground.html#source=class%20ChildComponent%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20const%20%7Bhello%7D%20%3D%20this.props.greetings%3B%0A%20%20%20%20return%20%3Ch1%3E%7Bhello%7D%3C%2Fh1%3E%3B%0A%20%20%7D%0A%7D%0A%0Aconst%20ChildContainer%20%3D%20Relay.createContainer%28ChildComponent%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20name%3A%20'A'%2C%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20greetings%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20hello%28name%3A%20%24name%29%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0Aclass%20ParentComponent%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20%2F%2F%20***%20have%20to%20pass%20%60name%60%20prop%20here%20***%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3CChildContainer%20%0A%20%20%20%20%20%20%20%20greetings%3D%7Bthis.props.greetings%7D%20%0A%20%20%20%20%20%20%20%20name%3D%7Bthis.props.relay.variables.name%7D%20%0A%20%20%20%20%20%20%2F%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0Aconst%20ParentContainer%20%3D%20Relay.createContainer%28ParentComponent%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20name%3A%20null%2C%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20greetings%3A%20%28%7Bname%7D%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20%24%7BChildContainer.getFragment%28'greetings'%2C%20%7Bname%7D%29%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0Aclass%20Route%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20greetings%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20GreetingsQuery%20%7B%0A%20%20%20%20%20%20%20%20greetings%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BParentContainer%7D%0A%20%20%20%20route%3D%7Bnew%20Route%28%7Bname%3A%20'B'%7D%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B%0A&schema=import%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%7D%20from%20'graphql'%3B%0A%0Avar%20GREETINGS%20%3D%20%7B%0A%20%20hello%3A%20'Hello%20world'%2C%0A%7D%3B%0A%0Avar%20GreetingsType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Greetings'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20hello%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20%7B%20type%3A%20GraphQLString%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resolve%3A%20%28%7B%7D%2C%20%7Bname%7D%29%20%3D%3E%20%60Hello%20%24%7Bname%7D!%60%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20greetings%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20GreetingsType%2C%0A%20%20%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20GREETINGS%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%29%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A)
",josephsavona,2016-02-10 22:31:49
816,2016-02-11 09:29:28,"> This is required because the same child fragment may be included more than once, and the child container needs a way to distinguish which data to use.

Oh, sorry, I forgot I already seen it here: https://github.com/facebook/relay/issues/309#issuecomment-140485321

Probably some more illuminating error message than `TypeError: Cannot read property 'x' of undefined` would be more helpful here.

Also, isn't inclusion of the same fragment in the same place multiple times pretty rare? Maybe it makes sense to at least make the case with single inclusion more clean?
",denvned,2016-02-10 22:31:49
816,2016-02-11 16:56:45,"@denvned We agree on all counts. One option is to extend GraphQL to allow named fragment references:

<S_CODE_TOKEN>

This is great for Relay, but could mean that GraphQL response payloads are inflated, as data that would otherwise be available under the same key is now duplicated under each alias:

<S_CODE_TOKEN>
",josephsavona,2016-02-10 22:31:49
816,2016-09-28 16:26:42,"@josephsavona I have [one more nesting.](https://facebook.github.io/relay/prototyping/playground.html#source=class%20ChildComponent%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20const%20%7Bhello%7D%20%3D%20this.props.greetings%3B%0A%20%20%20%20return%20%3Ch1%3E%7Bhello%7D%3C%2Fh1%3E%3B%0A%20%20%7D%0A%7D%0A%0Aconst%20ChildContainer%20%3D%20Relay.createContainer%28ChildComponent%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20name%3A%20'A'%2C%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20greetings%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20hello%28name%3A%20%24name%29%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%20%20%0A%20%20class%20TeenComponent%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3CChildContainer%20%7B...this.props%7D%20%2F%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0Aconst%20TeenContainer%20%3D%20Relay.createContainer%28TeenComponent%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20name%3A%20null%2C%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20greetings%3A%20%28%7Bname%7D%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20%24%7BChildContainer.getFragment%28'greetings'%2C%20%7Bname%7D%29%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0Aclass%20ParentComponent%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20%2F%2F%20***%20have%20to%20pass%20%60name%60%20prop%20here%20***%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3CTeenContainer%20%7B...this.props%7D%20%2F%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0Aconst%20ParentContainer%20%3D%20Relay.createContainer%28ParentComponent%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20name%3A%20null%2C%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20greetings%3A%20%28%7Bname%7D%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Greetings%20%7B%0A%20%20%20%20%20%20%20%20%24%7BChildContainer.getFragment%28'greetings'%2C%20%7Bname%7D%29%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0Aclass%20Route%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20greetings%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20GreetingsQuery%20%7B%0A%20%20%20%20%20%20%20%20greetings%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BParentContainer%7D%0A%20%20%20%20route%3D%7Bnew%20Route%28%7Bname%3A%20'B'%7D%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B%0A&schema=import%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%7D%20from%20'graphql'%3B%0A%0Avar%20GREETINGS%20%3D%20%7B%0A%20%20hello%3A%20'Hello%20world'%2C%0A%7D%3B%0A%0Avar%20GreetingsType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Greetings'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20hello%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20%7B%20type%3A%20GraphQLString%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resolve%3A%20%28%7B%7D%2C%20%7Bname%7D%29%20%3D%3E%20%60Hello%20%24%7Bname%7D!%60%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20greetings%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20GreetingsType%2C%0A%20%20%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20GREETINGS%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%29%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A) why error in this case. thanks.

Edit:  I made a mistake. changing line 54 to `TeenContainer.getFragment` made it work
",bsr203,2016-02-10 22:31:49
815,2016-02-10 17:53:15,,wincent,2016-02-10 18:05:19
815,2016-02-10 18:05:19,"They're now up ([here](https://github.com/facebook/relay/wiki/2016-02-09-Relay-Team-Sync-Notes)).
",wincent,2016-02-10 18:05:19
814,2016-02-10 15:12:34,"I am facing a really strange issue with connections. I have an object named `Blog` with a connection field named `posts` described as below:

<S_CODE_TOKEN>

I've configured a container to fetch all posts from a specified blog:

<S_CODE_TOKEN>

Relay generates the following query:

<S_CODE_TOKEN>

And variables:

<S_CODE_TOKEN>

Playing the above query in GraphiQL returns the expected `Blog` and its posts. However when Relay runs it the fragment only contains the blog id.

<S_CODE_TOKEN>

What is really strange is that if I rename `$status` to `$statut` (_status_ in French) it works like a charm!

I suspect the variable to collide with some internal code. I added a break point in `getCallValue` before its final `return` and spot something weird. Here is what `variables` contains during the server fetch:

<S_CODE_TOKEN>

Something internally has changed the value of `status`. I suspect this mutation to prevent Relay from hydrating the fragment with the connection result.

Other findings:
- Removing `status` from `initialVariables` solves the issue
- Setting `status` to `null` in `initialVariables` does not solve the issue
",ooflorent,2016-02-12 15:15:51
814,2016-02-10 16:27:03,"cc @wincent - who recently changed internal metadata key names in a way that I believe would avoid this.
",josephsavona,2016-02-12 15:15:51
814,2016-02-11 07:23:33,"Here are the version of Relay tools I used:
- babel-relay-plugin@0.6.3
- react-relay@0.6.1
- react-router-relay@0.9.0
",ooflorent,2016-02-12 15:15:51
814,2016-02-11 16:57:25,"@ooflorent If possible, can you try your app on master? As I mentioned it should be fixed there.
",josephsavona,2016-02-12 15:15:51
814,2016-02-12 15:15:51,"@josephsavona I just did and the bug is no longer there. Thanks.
",ooflorent,2016-02-12 15:15:51
814,2016-02-12 15:44:29,"@ooflorent great, thanks for confirming :-)
",josephsavona,2016-02-12 15:15:51
813,2016-02-10 01:31:15,,steveluscher,2016-02-12 21:30:39
813,2016-02-10 01:38:04,"@facebook-github-bot import
",steveluscher,2016-02-12 21:30:39
813,2016-02-10 01:44:46,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1677561989185826/int_phab to review.
",facebook-github-bot,2016-02-12 21:30:39
812,2016-02-09 23:52:12,"I'm not sure whether this is a bug on Babel or babel-relay-plugin's end, but the plugin fails to transpile `Relay.QL` occurrences in the latest Babel version.

You can reproduce this by cloning the relay-starter-kit and [bumping the Babel deps](https://github.com/relayjs/relay-starter-kit/blob/master/package.json#L12) to 6.5.
",billyjanitsch,2016-02-10 02:11:12
812,2016-02-10 02:11:10,"This should be fixed by virtue of this trickery: https://github.com/relayjs/relay-starter-kit/commit/f3025cee82eacc0fbfb66cec075b3691663d0b9f#diff-e56633f72ecc521128b3db6586074d2cR2

Give it a shot, and re-open this issue if you're still having trouble!
",steveluscher,2016-02-10 02:11:12
812,2016-02-10 02:55:06,"Unfortunately the `passPerPreset` option is still experimental -- it happens to work in this case because relay-starter-kit doesn't use the spread operator, but if you add a spread, there's currently no way to order the four presets to avoid getting `Unexpected token ...` :(

Btw, non-contributors can't re-open issues.
",billyjanitsch,2016-02-10 02:11:12
811,2016-02-09 21:09:37,,steveluscher,2016-02-12 20:50:40
811,2016-02-09 21:09:45,"@facebook-github-bot import
",steveluscher,2016-02-12 20:50:40
811,2016-02-09 21:41:24,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/682723268535925/int_phab to review.
",facebook-github-bot,2016-02-12 20:50:40
810,2016-02-09 18:14:57,"This PR is another step toward making all Relay state contextual (#558). Originally this was submitted as a part of #683, but @josephsavona [suggested](https://github.com/facebook/relay/pull/683#issuecomment-166386149) to split it to smaller PRs.
",denvned,2016-03-07 14:45:46
810,2016-02-19 22:14:53,"Updated with the master.

Tests started failing recently. Looks like Jest can't find `ReactDOMServer`.
Cc @cpojer 
",denvned,2016-03-07 14:45:46
810,2016-02-20 05:13:42,"See https://github.com/facebook/relay/blob/master/scripts/jest/preprocessor.js#L46 – the correct path or node module needs to be added there :)
",cpojer,2016-03-07 14:45:46
810,2016-02-20 07:29:02,"I added this to the file on L46 cpojer mentioned: `'ReactDOMServer': 'react/lib/ReactDOMServer'` and it fixed the test
",raineroviir,2016-03-07 14:45:46
810,2016-02-20 08:13:36,"Can you send a separate PR for that? :)
",cpojer,2016-03-07 14:45:46
810,2016-02-20 08:19:07,"sure
",raineroviir,2016-03-07 14:45:46
810,2016-02-20 08:19:09,"I already did https://github.com/facebook/relay/pull/854/files
",denvned,2016-03-07 14:45:46
810,2016-02-20 08:20:29,"okay cool :+1: 
",raineroviir,2016-03-07 14:45:46
810,2016-03-03 17:00:19,"This is a great PR - yay tests!

@facebook-github-bot import
",josephsavona,2016-03-07 14:45:46
810,2016-03-03 17:03:04,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1073849619356998/int_phab) to review.
",facebook-github-bot,2016-03-07 14:45:46
810,2016-03-03 17:06:31,"@facebook-github-bot import
",josephsavona,2016-03-07 14:45:46
810,2016-03-03 17:13:31,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1073849619356998/int_phab) to review.
",facebook-github-bot,2016-03-07 14:45:46
809,2016-02-09 16:57:11,"I've same error described in #805. After manually update relay-treasurehunt package.json graphql to 0.4.17 it allows to query without error through GraphiQL. Despite that it still not working as app.

![Invaraiant Violation](https://monosnap.com/file/qJRaKP9YcYlnI2fw7lupGYGkOyff3E.png)

It produce invariant violation. getDataID requires object with `__dataID__` but receive id as you can see.

https://github.com/facebook/relay/blob/ecf643231ed550f6fff197396a1765f49079e3e5/src/store/RelayRecord.js#L91
",enaqx,2016-02-10 02:12:07
809,2016-02-10 02:12:07,"Merging into #804.
",steveluscher,2016-02-10 02:12:07
808,2016-02-09 16:54:18,"Noticed this diagnostic message when running `npm run typecheck`:

<S_CODE_TOKEN>

The directory didn't exist because I had previously used NPM 3, which
flattens the node_modules directory, and stores the ""promise"" module at
""node_modules/promise"".

So, the line had no effect -- we still typecheck with zero errors
without this line, and if I introduce an error I see it reported
correctly -- which means that Flow has probably gotten smart enough
about promises to not need this special case any more.
",wincent,2016-02-09 21:25:34
808,2016-02-09 20:10:12,"@facebook-github-bot import
",wincent,2016-02-09 21:25:34
808,2016-02-09 20:20:07,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/995334950512637/int_phab to review.
",facebook-github-bot,2016-02-09 21:25:34
807,2016-02-08 21:48:38,"These variables seems unnecessary.
",enaqx,2016-02-09 15:55:35
807,2016-02-08 22:06:17,"@facebook-github-bot import
",wincent,2016-02-09 15:55:35
807,2016-02-08 22:11:05,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/498640727012234/int_phab to review.
",facebook-github-bot,2016-02-09 15:55:35
806,2016-02-08 15:58:03,"Would it make sense to implement node de-duplication via a new serialisation format between GraphQL servers and Relay? There's an open issue on GraphQL's side, but perhaps the spec is fine as it already allows results other than plain JSON: https://github.com/facebook/graphql/issues/130 vs http://facebook.github.io/graphql/#sec-Serialization-Format

Any musings on the design space?
1. HTTP requests from Relay announce support via an Accept header / a query parameter?
2. GraphQL server renders the de-duped response as JSON Graph / JSON-LD / JSON (Hyper-)Schema / Protobuf / ... ?
3. In Relay, the network layer stores the new nodes in cache and passes on the spine of the response? How to save most time in JSON manipulation and get directly to React props?
",tuukka,2016-02-08 19:47:34
806,2016-02-08 19:03:31,"This is something we've explored and may implement going forward. The performance benefits - especially in terms of network bytes - are not necessarily what you'd expect, however. @wincent did some analysis here and can probably share more.
",josephsavona,2016-02-08 19:47:34
806,2016-02-08 19:47:34,"I did a some experimentation on this for a hackathon and wrote up the results in a fair amount of detail [here](https://github.com/wincent/relay/tree/hack/contrib/lightweight-results).

The (possibly counterintuitive) result is that no combination or normalization, binary encoding, and compression beats naive, fully-expanded JSON compressed with GZIP. GZIP is _really_ good at eliminating redundancy, and as I say in my write-up:

> In short, if you try to eliminate redundancy by applying some kind of clever transformation or restructuring your data object before piping it to gzip, you will probably just do a crappy job of reimplementing gzip at the wrong layer of abstraction, and get worse results overall.

Having said that, all hope is not lost. I listed some ideas under [the ""Future Work"" section](https://github.com/wincent/relay/tree/hack/contrib/lightweight-results#conclusions-and-future-work) of the write-up:
- Better align network format with what operations the Relay store uses during writes (won't be smaller over the network, but the writes could be made cheaper/faster).
- Relatedly, use a stream-ier network transport to enable beginning writing/processing of the data as soon as the first bytes get flushed and arrive back on the client.
- Keep a synchronized proxy of the client cache on the server side so that it can compute delta updates instead of full payloads (ie. avoid sending objects/fields which it knows to already exist on the client).

Unfortunately, all of these ideas require significant changes that span the client and server divide.

Thanks for bringing this up, @tuukka. I am going to close this for now as there's nothing immediately actionable in here for now. (It will probably be a long time before we get to some of the more ambitious/experimental ideas, but when we do we should create separate issues for them.) In the meantime if you wanted to share a hack or a proof-of-concept for any of these, we'd love to see it in the form of a PR (even if only a ""throwaway"" one).
",wincent,2016-02-08 19:47:34
805,2016-02-08 10:28:18,"I follow the instruction and tried relay-treasurehunt.
The build is ok, but when I point my browser to localhost:3000
I got 3 network errors.
POST http://localhost:3000/graphql 500 (Internal Server Error)
The response is 
{
  ""errors"": [
    {
      ""message"": ""_graphql.Source is not a function""
    }
  ]
}
",raymondsze,2016-02-10 02:11:46
805,2016-02-10 02:11:44,"Merging into #804.
",steveluscher,2016-02-10 02:11:46
804,2016-02-08 09:56:32,"in the script section
babel-node ./server.js

with babel 6.0, we cannot build the example successfully, but the command will use the babel-node installed globally.
should change to
node node_modules/babel/bin/babel-node ./server.js ?
or
upgrade to babel 6.0?
",raymondsze,2016-03-08 19:02:01
804,2016-02-10 02:12:36,"Should be fixed when #811 and #813 land.
",steveluscher,2016-03-08 19:02:01
803,2016-02-07 17:34:50,"Bumped graphql lib to match peer dependency coming from express-graphql.
",jurassix,2016-02-13 14:01:49
803,2016-02-13 14:01:49,"Closing this as other PR's are more exhaustive and seem to address this better.
",jurassix,2016-02-13 14:01:49
802,2016-02-07 17:20:52,"I was unable to run the _todo_ example on a clean install without these minor changes.
",jurassix,2016-02-13 14:02:04
802,2016-02-07 17:25:43,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-02-13 14:02:04
802,2016-02-07 17:36:16,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-02-13 14:02:04
802,2016-02-13 14:02:04,"Closing this as other PR's are more exhaustive and seem to address this better.
",jurassix,2016-02-13 14:02:04
801,2016-02-07 04:04:57,"This pull request relates to #784. I've adjusted the `createVariable` function, within `src\traversal\printRelayOSSQuery.js`, so that it first checks the existing variables before creating a new variable. This is to assist Relay when printing queries that contain overlapping arguments. (If the variable type and value is the same, do we need to continue creating variables with the same type and value? This PR adds the logic that answers that with a _no_.)

Without knowing what existing code is at my disposal within all of the FB libraries, I went ahead and just use a simple for loop over the existing keys, since the return state needs the key anyway.

I also created a test case that, prior to adjusting `createVariable`, failed. After adjusting `createVariable` the test passes, and no other existing tests seem to fail. Yay?
",ryancole,2016-02-09 18:45:35
801,2016-02-07 22:48:47,"@ryancole Thanks for working on this! See feedback for how to make this even better :-)
",josephsavona,2016-02-09 18:45:35
801,2016-02-08 19:04:59,"@josephsavona Alright, I think I've addressed your feedback. The code now uses `Map { value => { type, variableID }}`. Changing it from the previous `Object { variableID: { type, value }}` required a few changes elsewhere, and also removed the usage of a couple imports.
",ryancole,2016-02-09 18:45:35
801,2016-02-08 19:12:03,"Finally, let me know if you'd like me to squash these commits. I don't have a working Flow binary, on Windows, that was compatible with the required version, so one of the commits ended up being to use TravisCI's Flow. :)
",ryancole,2016-02-09 18:45:35
801,2016-02-08 21:16:21,"nice, thanks for the update!
",josephsavona,2016-02-09 18:45:35
801,2016-02-08 21:16:24,"@facebook-github-bot import
",josephsavona,2016-02-09 18:45:35
801,2016-02-08 21:23:00,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/592763510870649/int_phab to review.
",facebook-github-bot,2016-02-09 18:45:35
800,2016-02-07 00:50:13,"Hey Relay team, thanks for open sourcing Relay and supporting it as a product :)

We started using React/Flux in version 2 of our internal recruitment application (Rails backend) and have been hoping that Relay will help solve the problems around data loading. 

We've been using it in production in by building new features with it and slowly rewriting the other features. So far so good, the graphql-ruby gem and Relay has worked seamlessly for us. 
",daemonsy,2016-02-08 18:55:32
800,2016-02-07 00:51:45,"@josercruz01 take a look at this :)
",daemonsy,2016-02-08 18:55:32
800,2016-02-07 00:52:04,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-02-08 18:55:32
800,2016-02-07 01:03:50,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-02-08 18:55:32
800,2016-02-07 03:55:26,"Thanks for providing the context, @daemonsy, and for the PR! Glad that Relay it working well for you. 
",wincent,2016-02-08 18:55:32
800,2016-02-07 03:56:08,"@facebook-github-bot shipit 
",wincent,2016-02-08 18:55:32
799,2016-02-06 23:14:07,"This is the final task required for:

https://github.com/facebook/relay/issues/790
",wincent,2016-02-08 19:10:38
799,2016-02-07 00:12:53,"@facebook-github-bot import
",wincent,2016-02-08 19:10:38
799,2016-02-07 00:16:16,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/980652685338779/int_phab to review.
",facebook-github-bot,2016-02-08 19:10:38
798,2016-02-06 19:15:26,"This example requirement two global module.`babel-core`and `babel-cli`.Although,There is not describe in `README.md`.
So I fixed it.
",tkshi,2016-05-08 19:34:00
798,2016-02-06 19:18:17,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-05-08 19:34:00
798,2016-02-06 21:01:47,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-05-08 19:34:00
798,2016-03-03 19:20:41,"We actually need more than just these steps. Some of our build steps require some upgrades and/or a `.babelrc` file in order to be compatible with Babel 6 out of the box.

The safest command to use for now is `npm install -g babel@5.8.35`. But an even better improvement is upgrading everything to support Babel 6 without any global installs.
",yungsters,2016-05-08 19:34:00
798,2016-03-31 02:00:41,"Seems like https://github.com/facebook/relay/pull/813 fixed both the upgrade to Babel 6 and the global dependency requirement.
",edvinerikson,2016-05-08 19:34:00
798,2016-03-31 14:01:51,"However the examples install docs doesn't work out of the box (https://github.com/facebook/relay/issues/906). I could install all dependencies without any errors if I added `--ignore-scripts` to the install command. Maybe we could change this PR to document that instead? 

**Edit**
The above option won't include the lib/ if it doesn't already exist https://github.com/facebook/relay/issues/906#issuecomment-203950759.
",edvinerikson,2016-05-08 19:34:00
798,2016-05-08 19:34:00,"Per @edvinerikson's comment it looks like this isn't sufficient for running the examples. Let's continue discussion in #906 and move forward with a new PR when a full solution is identified.
",josephsavona,2016-05-08 19:34:00
797,2016-02-06 14:06:03,"Enjoy the merge conflicts :laughing: 
",taion,2016-02-06 22:05:34
797,2016-02-06 16:17:42,"Thanks @taion!
",wincent,2016-02-06 22:05:34
797,2016-02-06 21:35:58,"@facebook-github-bot shipit
",wincent,2016-02-06 22:05:34
797,2016-02-06 21:54:53,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/724692324334480/int_phab to review.
",facebook-github-bot,2016-02-06 22:05:34
796,2016-02-06 04:19:25,"I'm trying to run the Relay tests, on Windows. I have to use jest directly, because the npm script uses bash script. I'm running the tests as follows ...

<S_CODE_TOKEN>

All tests fails due to failed imports, such as ...

<S_CODE_TOKEN>

Any ideas? Flow doesn't seem to work either, for what it's worth, but that's for a different issue!
",ryancole,2016-02-07 07:04:56
796,2016-02-06 04:25:31,"I should mention that I'm using node 4.x and npm 2.x, as required by package.json, as well.
",ryancole,2016-02-07 07:04:56
796,2016-02-07 02:48:56,"Strange. I tried on a different PC today - exact same OS, specs, etc - and the tests work. They still don't work on the other PC, though. No clue. _shrug_
",ryancole,2016-02-07 07:04:56
796,2016-02-07 22:51:23,"Thanks for following up on this!
",josephsavona,2016-02-07 07:04:56
795,2016-02-06 01:49:43,,BobertForever,2016-02-06 23:00:34
795,2016-02-06 02:50:31,"Thanks @BobertForever! Will merge this a bit later. 
",wincent,2016-02-06 23:00:34
794,2016-02-06 01:20:09,,KyleAMathews,2016-02-06 22:55:41
794,2016-02-06 01:30:34,"Thanks @KyleAMathews! 

@facebook-github-bot shipit 
",wincent,2016-02-06 22:55:41
793,2016-02-05 19:49:42,,steveluscher,2016-02-05 20:56:16
793,2016-02-05 20:29:58,"@facebook-github-bot shipit
",steveluscher,2016-02-05 20:56:16
793,2016-02-05 20:43:13,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1070120553031894/int_phab to review.
",facebook-github-bot,2016-02-05 20:56:16
792,2016-02-05 18:09:27,,josephsavona,2016-02-11 01:00:35
792,2016-02-05 18:11:52,"@facebook-github-bot import
",josephsavona,2016-02-11 01:00:35
792,2016-02-05 18:14:48,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1222787484415231/int_phab to review.
",facebook-github-bot,2016-02-11 01:00:35
791,2016-02-05 17:28:23,"@cpojer any idea why the previous version was working internally but not in OSS?
",josephsavona,2016-02-05 17:50:37
791,2016-02-05 17:29:54,"@facebook-github-bot import
",josephsavona,2016-02-05 17:50:37
791,2016-02-05 17:39:20,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1707902576099467/int_phab to review.
",facebook-github-bot,2016-02-05 17:50:37
790,2016-02-04 21:52:05,"f5dc55da46517d9f3 renames it to `Container` but continues to support `Component` with a deprecation warning. This issue is a reminder to remove the deprecated code once existing internal call sites have been updated. There should be no callers in the open source community yet because `RelayRenderer` is not yet documented.

Eventually `Relay.RootContainer` will go away, leaving only `RelayRenderer`, but that is a separate step and one that will take longer because there _are_ external callers that are using it.

Related: #785
- [x] Sync f5dc55da46517d9f3 to central internal repo
- [x] Update all existing call sites
- [ ] Remove deprecation code path
",wincent,2016-02-08 19:24:41
789,2016-02-03 09:20:58,"This is feature I would like to see in Relay. 

It would require adding callback onProgress to `commitUpdate` and `applyUpdate` functions and pass this callback to `RelayMutationRequest` where it could be called from network layer.

Tricky is that `fetch` api does not support progress yet. So I suspect that it will be difficult to add this feature into standard relay network layer if there is no significant demand.

At the moment I can monitor with custom network layer (using xhr) that some files are being uploaded. It would be nice I could call individual callbacks that are passed on mutation creation, but currently I think there is no way to access mutation from network layer (to get callback from props or something).

Any ideas how to make this more feasible?

Thanks!
",jardakotesovec,2016-02-08 22:24:13
789,2016-02-03 09:51:07,"+1 we need that feature native as well.
03.02.2016 10:21 AM ""Jarda Kotěšovec"" notifications@github.com napisał(a):

> This is feature I would like to see in Relay.
> 
> It would require adding callback onProgress to commitUpdate and
> applyUpdate functions and pass this callback to RelayMutationRequest
> where it could be called from network layer.
> 
> Tricky is that fetch api does not support progress yet. So I suspect that
> it will be difficult to add this feature into standard relay network layer
> if there is no significant demand.
> 
> At the moment I can monitor with custom network layer (using xhr) that
> some files are being uploaded. It would be nice I could call individual
> callbacks that are passed on mutation creation, but currently I think there
> is no way to access mutation from network layer (to get callback from props
> or something).
> 
> Any ideas how to make this more feasible?
> 
> Thanks!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/789.
",GrzegorzKaczan,2016-02-08 22:24:13
789,2016-02-08 22:24:13,"Thanks for filing this issue @jardakotesovec!

This is important, so I'm going to fold it into #538, which is about overhauling the mutations API. (It will be easier to manage with the various interrelated mutations issues in a single place.)
",wincent,2016-02-08 22:24:13
789,2016-06-14 06:53:41,"@wincent May I ask whats the status for this feature? I will need it sometime soon, so wondering what route should I take.  Default network layers is using _fetch_, which does not have progress callback, so it basically means using XHR in my custom network layer..  

I could spend some time on PRs if you give me clues what you envision in relay core for that matter.
",jardakotesovec,2016-02-08 22:24:13
789,2016-06-14 14:43:32,"@jardakotesovec I did some work a while back on introducing an [alternative low-level API for mutations](https://github.com/facebook/relay/blob/829450ab74aa5c6b0cdb453cb76b1fbc45f16687/src/mutation/RelayGraphQLMutation.js), but that decidedly doesn't involve any changes at the network layer. We're still working on improving mutations: if you check out [the meeting notes](https://github.com/facebook/relay/tree/master/meta/meeting-notes) you'll see that right now one of the things we're working on is prototyping some new ideas ([context](https://www.youtube.com/watch?v=7TA4T2TJQx0)), and we'll be doing more work on mutations as part of that.

I think it's going to be difficult to change this without going the custom network layer route, as we are not likely to swap out `fetch` in the default layer.
",wincent,2016-02-08 22:24:13
789,2016-06-16 07:26:33,"@wincent Thanks. Using xhr in custom network layer works just fine. Issue is that in `sendMutation` method I am getting `RelayMutationRequest` where I can't access mutation callbacks nor props, so basically I can pass just one onProgress function to the network layer on initialization. 

So even if I track all file upload progresses in network layer I don't see nice way to match these progresses with particular committed mutations.

Any suggestions?
",jardakotesovec,2016-02-08 22:24:13
788,2016-02-03 01:01:33,"Update https://github.com/facebook/relay/wiki/Roadmap based on 2/2/2016 meeting.
",wincent,2016-02-03 01:54:10
788,2016-02-03 01:54:10,"Done.
",wincent,2016-02-03 01:54:10
788,2016-02-03 02:11:02,"@wincent there are ongoing community efforts to build subscriptions (#411), contextual state (#558), support server rendering, etc. What do you think about including these in the roadmap?
",josephsavona,2016-02-03 01:54:10
788,2016-02-03 02:40:17,"I think we can link to these but it will be most useful to draw a clean
line between what is prioritized internally and what's happening
externally. (Note the old roadmap is still at the bottom of the page and
does link to or mention these issues.)

[typed in my phone; apologies in advance for the errors.]
On Tue, Feb 2, 2016 at 6:11 PM Joseph Savona notifications@github.com
wrote:

> @wincent https://github.com/wincent there are ongoing community efforts
> to build subscriptions (#411
> https://github.com/facebook/relay/issues/411), contextual state (#558
> https://github.com/facebook/relay/issues/558), support server
> rendering, etc. What do you think about including these in the roadmap?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/788#issuecomment-178958404.
",wincent,2016-02-03 01:54:10
788,2016-02-03 03:24:40,"That makes sense. Perhaps we can link to a list of issues that have open PRs to provide a sense of what is being worked on by the community. 

Also, what about using gists for the weekly meetings so that people can ask questions in the comments?
",josephsavona,2016-02-03 01:54:10
788,2016-02-03 04:26:36,"I think the PR tab is the place to go for that; listing them in a wiki page
would be redundant and get out of date fast. If the PR tab isn't
sufficiently fine grained then we should use labels to make it so, but
there's a slippery slope there, making the judgment call about which PRs
should be highlighted.

re: gists, the commenting is nice but it's not a great interface for it (no
notifications). I think if we just post our meeting notes on Twitter we can
field questions there usefully. It's emphemeral, but so are plans, right?
On Tue, Feb 2, 2016 at 7:24 PM Joseph Savona notifications@github.com
wrote:

> That makes sense. Perhaps we can link to a list of issues that have open
> PRs to provide a sense of what is being worked on by the community.
> 
> Also, what about using gists for the weekly meetings so that people can
> ask questions in the comments?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/788#issuecomment-178980203.
",wincent,2016-02-03 01:54:10
787,2016-02-02 23:52:38,,wincent,2016-02-03 01:05:45
787,2016-02-03 01:05:45,"Done:
- https://github.com/facebook/relay/wiki/2016-02-02-Relay-Team-Sync-Notes

And linked to from:
- https://github.com/facebook/relay/wiki/Meeting-notes
",wincent,2016-02-03 01:05:45
786,2016-02-02 19:29:08,,steveluscher,2016-02-02 23:25:33
786,2016-02-02 23:00:47,"@facebook-github-bot shipit
",steveluscher,2016-02-02 23:25:33
786,2016-02-02 23:08:29,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/557665934397016/int_phab to review.
",facebook-github-bot,2016-02-02 23:25:33
786,2016-10-29 13:21:54,"I will not rubber stamp and land your change for you @steveluscher!  I can import it for you and you can get your change reviewed by someone though :)
",facebook-github-bot,2016-02-02 23:25:33
785,2016-02-02 13:00:07,"Hi there,

I'm pretty new to Relay, so correct me if I'm wrong, but it seems that `Relay.RootContainer` doesn't actually support vanilla `Components`, but a `Relay.Containers` instead.

Also, `route` is a pretty confusing name, does it make any sense to change it to something more suitable like `query`?

So, the idea is to use change a public interface to something like this:

<S_CODE_TOKEN>

Does it makes any sense?
",Kureev,2016-02-04 00:19:56
785,2016-02-04 00:19:56,"This is good feedback @Kureev. Thanks.

We are indeed moving away from the ""route"" terminology (see for example #456 and #503). If you look at `RelayRenderer`, which is a newer abstraction that `Relay.RootContainer`, you'll see that we've already moved towards using `RelayQueryConfig` shapes (passed in via a `queryConfig` prop) instead of routes, and we are shooting for `Container` rather than `Component` too (our inline docs actually say `Container`, but the implementation uses `Component`, so either the docs or the code are wrong; I'll see if I can fix this).

In the interests of not creating unnecessary compatibility-breaking changes, I think we're unlikely to make any major changes to the `RootContainer` API, so I am going to close this one for now, and I'll loop back with a link once I've looked into the `Container` vs `Component` issue on `RelayRenderer`.

Thanks once again for your input.
",wincent,2016-02-04 00:19:56
785,2016-02-04 00:33:13,"Thanks for the nice feedback, @wincent!
",Kureev,2016-02-04 00:19:56
784,2016-02-02 03:44:02,"Please see the issue originally filed by @fson at https://github.com/graphql/graphql-js/issues/263 where Relay could generate an invalid query:

<S_CODE_TOKEN>
",leebyron,2016-02-09 18:45:35
784,2016-02-03 00:35:46,"I've actually been encountering this issue over the past few days. In my particular case, a relay mutation's payload query seems to be where I'm seeing an invalid query format, resulting in the `""Fields \""_scrimInvitesBKmb7\"" conflict because they have differing arguments.""` error.

In my particular case, it only happens some times and not others. Also, it only seems to happen when I'm using `this.props.relay.forceFetch`. if I follow a longer user navigation flow (sign in, navigate to my react view that has the mutation and then execute the mutation) I will see the error every time. If I perform a hard refresh (clearing the relay store) and run the mutation, then it works every time without the duplicate field in the query.

I'm not sure if `forceFetch` or having data in the relay store already determines the query that gets built by relay, but I wanted to mention these two components of the issue, from my project. For now, just disabling `forceFetch` seems to fix it.
",ryancole,2016-02-09 18:45:35
784,2016-02-03 02:15:21,"@ryancole thanks for the extra info, this is super helpful for debugging!
",josephsavona,2016-02-09 18:45:35
784,2016-02-05 22:48:30,"There are two basic approaches here:
- Flatten the query prior to printing it.
- Print duplicated fields, but in a way that passes validation. Based on @leebyron's example this would mean printing:
  query ($orderBy: _GroupOrdering) {
    viewer {
      allGroups_...: allGroups(orderBy: $orderBy) { count }
      allGroups_...: allGroups(orderBy: $orderBy) { count } # same variable name when value is same
    }
  }

Flattening the query requires a full extra traversal (O(n) operation), so this isn't tenable from a performance perspective. The simpler solution would be to avoid creating new variables when the values are actually the same. This could be achieved by keeping a map in `printRelayQuery` of serialized value -> variable name, and only generating new variables if the current value is not already a key in the map. This logic would go in [`createVariable`](https://github.com/facebook/relay/blob/master/src/traversal/printRelayOSSQuery.js#L298-L310)

@ryancole or @fson any interest in submitting a PR for this? ;-)
",josephsavona,2016-02-09 18:45:35
784,2016-02-05 23:16:30,"I'll take a look right now. Ideally I could first come up with some test case that reproduces the issue, so I may focus on that first before focusing on the proposed fix.
",ryancole,2016-02-09 18:45:35
784,2016-02-06 01:37:22,"@ryancole Great, thanks! For a test case, take a look at the [test schema](https://github.com/facebook/relay/blob/master/scripts/jest/testschema.graphql) for fields to use in constructing a repro case - something like

<S_CODE_TOKEN>

_should_ probably be sufficient (or pretty close).
",josephsavona,2016-02-09 18:45:35
784,2016-02-06 02:05:26,"off topic question, but is there a build step to these test files, or something? fresh out of master, if i run the tests they work fine. if add a new test case, it fails with a run time error of ...

<S_CODE_TOKEN>
",ryancole,2016-02-09 18:45:35
784,2016-02-06 03:08:14,"if you manually run jest, be sure to prefix the command with `NODE_ENV=test ./node_modules/.bin/jest ...`
",josephsavona,2016-02-09 18:45:35
784,2016-02-07 04:08:20,"@josephsavona I managed to get the tests running. Not sure why they won't run on my other PC. I have a feeling it has something to do with me downgrading to node 4 / npm 2. Something might be cached in the npm 3 format, or something, idk.

Anyways, there's my first stab at the second approach you mentioned yesterday. There already exists a map of created variables, so I'm just checking that and returning the already-created id for it if the `name` and `value` match up.

I also added a test case that initially reproduced the issue, and failed as expected. After adjusting `createVariable` the test case passes. None of the prior existing test cases seem to fail after the change, either.

I don't fully understand all of the possible ramifications of this change, technically, so I just followed your suggestions and went that route.
",ryancole,2016-02-09 18:45:35
784,2016-02-07 22:51:07,"@ryancole thanks again for working on this, let's keep discussion of the implementation on the PR.

> I don't fully understand all of the possible ramifications of this change, technically

This is a very localized change, and the file has good test coverage. If you're curious to learn more about the implementation and ramifications of a change, I'd encourage you to experiment with changing things in the file and seeing which tests break and why :-)
",josephsavona,2016-02-09 18:45:35
783,2016-02-01 17:51:31,"or have a new RANGE_ADD_MUTLI or something.
",jaredly,2016-02-08 22:24:44
783,2016-02-04 00:21:56,"How would you see this differing from providing multiple `RANGE_ADD` configs (which is supported)? For example:

<S_CODE_TOKEN>
",NevilleS,2016-02-08 22:24:44
783,2016-02-04 05:04:37,"ah -- I mean ""multiple edges"" the number of which is not previously known. e.g. the server will return a list of edges that are to be added.

<S_CODE_TOKEN>
",jaredly,2016-02-08 22:24:44
783,2016-02-04 05:07:17,"Ah, yes. In that case I agree - Relay mutations aren't particularly good at expressing ""large"" changes to the graph. Things like cascading deletes are [similarly problematic](http://stackoverflow.com/questions/34428093/handling-destruction-of-a-parent-node-via-a-graphql-mutation-in-relay)...
",NevilleS,2016-02-08 22:24:44
783,2016-02-04 19:50:16,"Thanks for posting, @jaredly. Making common operations easy/simple, and harder operations possible/feasible is one of the goals of our current work on mutations (see #538); the surface area and scope of possible changes is huge however, so I am still gathering up all the issues and feedback trying to make a coherent plan. In the meantime please keep the feedback and ideas coming.
",wincent,2016-02-08 22:24:44
783,2016-02-08 22:24:44,"This is important, so I'm going to fold it into #538, which is about overhauling the mutations API. (It will be easier to manage with the various interrelated mutations issues in a single place.)
",wincent,2016-02-08 22:24:44
782,2016-02-01 13:57:04,"Hi there,

I have just implemented a new feature in our product using Relay and it worked like a charm so far. Thank you for your awesome work and for open sourcing Relay!

Unfortunately I have encountered a tricky issue, that I currently do not know how to circumvent and if it is a bug in relay or if my schema is just programmed in a stupid way. Both options are valid at this point in time... :D
### Situation

I have page showing a ""Claim"" that refers to a ""Medium"". This claim has an applied ""Policy"" that can be changed by a mutation. All these types implement a common Resource interface.
The shortened Schema looks like this.

<S_CODE_TOKEN>

The mutation is described as this:

<S_CODE_TOKEN>

The client side mutation code:

<S_CODE_TOKEN>

The displaying container has the following (shortened) fragment:

<S_CODE_TOKEN>

So far everything is fine. I can navigate to the page and update the policy by the given mutation.
### Problem

I have another page showing a list of occurred activities in the system.
An activity has a generic target that can be any type implementing the Resource interface.

<S_CODE_TOKEN>

As I need to render the target differently depending on the type, I need to query for different data for different objects.

<S_CODE_TOKEN>

I need both fragments, as the target can either be a Medium directly or a Claim whos medium information I want to get as well.

This still works fine!
But when I show an activity with a claim (and expanded Medium) and then navigate to the claim edit-page (which still works fine btw) and execute the change policy mutation, I get the following error:

> Fragment \""F3\"" cannot be spread here as objects of type \""Claim\"" can never be of type \""Medium\"".

In the network tab, I see the request to the server asking for a Fragment on Medium, even though the medium is not in the mutation or its fat query.

>   ""mutation UpdateClaimPolicyMutation($input_0:UpdatePolicyInput!){updateClaimPolicy(input:$input_0){clientMutationId,...F5}} fragment F0 on User{_id,fullName,id} fragment F1 on Claim{id} fragment F2 on Claim{policy{_id,name,id},id} fragment F3 on Medium{id} fragment F4 on Node{id} fragment F5 on UpdatePolicyPayload{claim{policy{_id,id},updatedBy{id,...F0},updatedOn,id,...F1,...F2,...F3,...F4,policy{_id,id},updatedBy{id,...F0},updatedOn,id}}""
### Random Guessing

I guess the issue is that Relay is internally still tracking the combined queries from activities and the claim edit page and is somehow mixing up the requested fragments.
Of course a claim can never be a Medium! But I never asked to do that. I asked to get a Medium-Fragment on a Resource earlier, which might be a Claim. But not both at the same time of course.

So this seems kind of strange to me. Why would it try to apply the Medium Fragment on the Claim.
- It only happens when I load the activities first (my guess is tracking of the nodes/queries). 
- And only when I make a mutation. 

Querying the data works without any issue and making the mutation without accessing the activities first also works smoothly.

Do you have any possibilities to replicate this issue or have any comments how this can be avoided?
I wouldn't have a problem to simply ""kill"" tracked queries from my Activity-List page when I navigate away from it. I do not need any caching or anything else here. But I guess this is not the root-cause in this issue.

Thank you very much in advance for your support and kind regards,
Daniel
",danielgriese,2016-12-20 17:37:09
782,2016-02-04 02:37:59,"This reminds me of #750. It likely shares the same root cause, probably triggered by the fact that the node that is being updated by the mutation, in your case `claim`, has been used in previous queries as a more generic type (in your case as the `target` in your `ActivityLine` container)...

> So this seems kind of strange to me. Why would it try to apply the Medium Fragment on the Claim.

My hunch is that the `Claim` in this case corresponds to the `target` in your previous query, which was a more generic interface. When that node was queried in the past, the tracked query included both the `Medium` and `Claim` fragments (rightfully so). Tracked queries are stored by ID, so it wouldn't be surprising to see that this gets muddled up. In other words, it's unlikely that the mutation query intersection currently considers the _type_ of the field in the mutation payload as a way to narrow the intersection to prune fragments. That might be the fix, although it's a pretty complex thing to do!

One thing you could do to workaround this issue in your code is to probably just loosen the type of the node in your mutation payload. Right now it's a `Claim`, but if you made it a `Target`, knowing full well it will _always_ be a `Claim`, then you probably would be safe. And yes, I'm aware of how gross that sounds :smile: 
",NevilleS,2016-12-20 17:37:09
782,2016-02-09 16:41:34,"OK, we ran into this issue in our codebase now too, so I was able to do a bit more digging.

So the immediate issue here (invalid mutation queries) appears to be caused by how `intersectRelayQuery` simply includes all tracked fields for a node without paying any attention to the _type_ of the node in the mutation payload. That means if you had a query like:

<S_CODE_TOKEN>

And a mutation like this:

<S_CODE_TOKEN>

...`intersectRelayQuery` will take the tracked fields for the node with id ""123"", including the two fragments (on `User` and `Blog`), and then try to expand them, something like this:

<S_CODE_TOKEN>

And that's how you get bad queries!
",NevilleS,2016-12-20 17:37:09
782,2016-02-09 16:47:17,"Amusingly, I found a rather obnoxious workaround: just wrap the problematic container fragments in a generic inline fragment so that the tracked query is valid :laughing: 

i.e. change this:

<S_CODE_TOKEN>

...to this:

<S_CODE_TOKEN>

Since `intersectRelayQuery` basically just copies over the tracked fields, this becomes a mutation query like this:

<S_CODE_TOKEN>

Since the invalid fragment expansion (`User` within `Blog`) has been indirected via a generic `Node` fragment first, it works!
",NevilleS,2016-12-20 17:37:09
782,2016-02-09 21:31:58,"> ...`intersectRelayQuery` will take the tracked fields for the node with id ""123"", including the two fragments (on User and Blog), and then try to expand them

@NevilleS Thanks for debugging this - it's super helpful to have a repro. Since we know the type of each field/fragment, `intersectRelayQuery` should be able to filter out tracked fragments of a mismatched type. In your example, given a concrete parent field `blog` of type `Blog`, intersection can skip concrete fragments (`!fragment.isAbstract()`) of any other type. If either the parent or child is abstract it _should_ be safe to keep (intersect) the child. Any interest in submitting another great PR? ;-)
",josephsavona,2016-12-20 17:37:09
782,2016-02-09 23:26:22,"Yup, I'd be happy to write a fix :+1:. You're saying `intersectRelayQuery` would be the place for this?

OK, so you're saying the Relay AST gives us a way to know definitely that a given fragment is abstract (e.g. `Node`) vs. concrete (e.g. `Blog`). That would be a relatively coarse filter though, because it's still entirely possible for the payload to be an abstract type, but not be compatible with some of the tracked fragments on the node itself...

For example, let's say `Blog` is, itself, abstract and has a few implementations: `PhotoBlog`, `TextBlog`, `VideoBlog`, etc. So our initial query might actually look like this:

<S_CODE_TOKEN>

With that in mind, the mutation payload type might be abstract, but we still know that we can't expand the `User` query in it:

<S_CODE_TOKEN>

What we'd really need to do would be determine whether the given fragment type is a valid option for the payload type. Is there an existing way to do that using the Relay AST?
",NevilleS,2016-12-20 17:37:09
782,2016-02-10 00:51:22,"In other words, I think we basically need to do exactly what GraphQL does, which is compare if the types overlap: see https://github.com/graphql/graphql-js/blob/master/src/utilities/typeComparators.js#L105 for an example of this.

The babel relay plugin does validation like this during transformation, but I get the feeling that a lot of that type information is discarded, or at least not immediately accessible from the `RelayQuery`...
",NevilleS,2016-12-20 17:37:09
782,2016-02-10 00:59:19,"One approach would be to modify the babel relay plugin to dump the ""possible types"" (available via GraphQL) into the metadata that actually gets stored by Relay, which would give us the information needed to perform the type intersection...
",NevilleS,2016-12-20 17:37:09
782,2016-02-10 02:13:13,"The list of possible types for a field/fragment could be quite large, so we'd prefer to avoid any solution that would require having that list on the client (e.g. as part of query metadata). Let me look into this a bit more and report back here.
",josephsavona,2016-12-20 17:37:09
782,2016-02-10 02:17:58,"Yeah, agreed... There are much more efficient ways to store the type
information required that don't involve decorating every fragment with
their possible types. Some kind of lookup...

On Tue, Feb 9, 2016, 9:13 PM Joseph Savona notifications@github.com wrote:

> The list of possible types for a field/fragment could be quite large, so
> we'd prefer to avoid any solution that would require having that list on
> the client (e.g. as part of query metadata). Let me look into this a bit
> more and report back here.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/782#issuecomment-182169457.
",NevilleS,2016-12-20 17:37:09
782,2016-02-10 02:31:49,"Unfortunately, lookups still require the type information to be on the client :-/ 
",josephsavona,2016-12-20 17:37:09
782,2016-02-10 03:16:31,"A generalized version of the problem is as follows. Data is loaded via some fragment:

<S_CODE_TOKEN>

Note that a given attachment record could also be loaded in other places in the app, perhaps in a list of documents:

<S_CODE_TOKEN>

This means that it's possible to have a tracked `fragment on Other` for some attachment, such that it could generate the following mutation query, where a `FIELDS_CHANGE` config sets the `id` for field `attachment` to be some `Attachment` record:

<S_CODE_TOKEN>

Relay cannot skip tracking the `... on Other` fragment since it _is_ a valid fragment that should be refetched in some cases, depending on the mutation. Relay also doesn't have enough information to know which tracked fragments can or can't be included in the mutation query (without having access to the full type hierarchy, which is impractical to load in the client).

This suggests a two-part solution:
1. Mutation fields must have generic types, e.g. the `attachment` field on the above mutation would have to be typed as `Node`, rather than `Attachment`. Relay could warn if it finds a mutation field with a specific type, although this requires both the fat query and config, and therefore may not be feasible to test during the build stage.
2. Relay should construct queries by wrapping any tracked fields (as opposed to fragments) within a fragment with the record's type. In this case, it would generate a mutation query such as:

<S_CODE_TOKEN>

This would impose an extra restriction on GraphQL schema, so I'm still curious if there is an alternative.

cc @wincent @yuzhi 
",josephsavona,2016-12-20 17:37:09
782,2016-02-10 03:34:12,"Well, one thing to remember is that it's perfectly valid (by GraphQL standards) to add that ""indirection"" layer that I mentioned in an earlier comment. So you could, technically, just always wrap the overall mutation query in a `... on Node` fragment and it would probably be valid GraphQL...

For example, this fails:

<S_CODE_TOKEN>

...but if we did this, it'd be valid:

<S_CODE_TOKEN>

This ""solution"" seems very suboptimal, since it's easy to infer that the `... on Node` is unnecessary and that the `... on Other` is impossible to ever expand, but it'd work.
",NevilleS,2016-12-20 17:37:09
782,2016-02-10 07:01:10,"Yeah the indirection via the anonymous Node fragment also works and is probably the least intrusive solution. If we also filter non-matching concrete types during tracked query intersection, this should eliminate most of the non-matching fragments in practice and those that aren't will be ignored.
",josephsavona,2016-12-20 17:37:09
782,2016-02-10 09:09:45,"Wow, thank you for investigating this so quickly!

I can confirm that wapping the query in the abstract type, even though it seems unnecessary, does solve the issue.

I did not change the mutation, I instead changed the Query when showing the activity list, as this one contained the different fragments.

<S_CODE_TOKEN>

I had to use target { ... on Resource } instead of Node, as ""name"" wouldn't be known.
But it's good to know that the generic Interface Type also works.

Still strange though as my schema already defines ""target"" to be of type Resource. Looks like unnecessary double-casting. But hey, if it does the job. Why not?! It's ok for me as a work around right now. :D

Thanks and kind regards,
Daniel
",danielgriese,2016-12-20 17:37:09
782,2016-02-10 16:22:40,"> Still strange though as my schema already defines ""target"" to be of type Resource. Looks like unnecessary double-casting

@danielgriese Thinking purely from the perspective of the mutation query, it is unnecessary casting. The difficulty is that the `Claim` was also fetched in other contexts (as a `Resource`), so there are valid fragments on the claim (`... on Medium`) that are not valid `Claim`s. We can change Relay to automatically output the extra fragment casts to avoid the need for it in components, but this is a good workaround for now.
",josephsavona,2016-12-20 17:37:09
782,2016-02-10 16:23:47,"It looks like the fix here is to wrap all mutation fragments in `... on Node { ... on FieldType { ${originalFragment} } }` - @NevilleS still interested in that PR? :-)
",josephsavona,2016-12-20 17:37:09
782,2016-02-10 16:28:52,"Yeah, I can do it... it's so gross though! LOL
",NevilleS,2016-12-20 17:37:09
782,2016-02-10 16:30:20,"Are we sure the `... on Node` is always valid? Intrinsically I believe that to be true, since fragment tracking only happens on nodes, but...
",NevilleS,2016-12-20 17:37:09
782,2016-02-10 16:35:23,"`... on Node` may not always be valid; we may have to add a boolean metadata flag indicating whether a field's type implements `Node`. I'd have to double-check `writeRelayUpdatePayload` to find any edge-cases that support mutation fields without `id`s.
",josephsavona,2016-12-20 17:37:09
782,2016-02-22 19:14:42,"Hey @josephsavona, I've been out for a week or so on ""IRL"" stuff, but I hope to pull a PR together this week. Are we in agreement that adding a defensive wrapper like `... on Node { ... on FieldType { ${originalFragment} } }` during the mutation query building step is the best solution today? That'd be pretty easy, but would of course make _all_ mutation queries that much uglier :laughing: 
",NevilleS,2016-12-20 17:37:09
782,2016-02-23 06:34:54,"@NevilleS Yes, the general shape of the solution - wrapping tracked fields in conditioning fragments - is correct. It isn't exactly clear what the most efficient way to determine the fragment type to wrap the field in (perhaps we have to store the parent field type of a fragment when we track it?). 

cc @wincent who is focusing on simplifying mutations - he might have more ideas here.
",josephsavona,2016-12-20 17:37:09
782,2016-02-23 07:03:44,"Actually, I was thinking I'd be able to just use the type of the node in
the mutation payload, unrelated to the tracked fragments. This means the
query tracking is unaffected and only the mutation query building logic
needs to be aware of this.

I haven't tried anything yet though - is it possible to get the type
information of the mutation payload at runtime? Is that stored at all?

On Tue, Feb 23, 2016, 1:35 AM Joseph Savona notifications@github.com
wrote:

> @NevilleS https://github.com/NevilleS Yes, the general shape of the
> solution - wrapping tracked fields in conditioning fragments - is correct.
> It isn't exactly clear what the most efficient way to determine the
> fragment type to wrap the field in (perhaps we have to store the parent
> field type of a fragment when we track it?).
> 
> cc @wincent https://github.com/wincent who is focusing on simplifying
> mutations - he might have more ideas here.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/782#issuecomment-187568438.
",NevilleS,2016-12-20 17:37:09
782,2016-02-23 07:26:40,"Do you mean the type of the field in the fat query? You can get the type of a field with [`RelayQueryNode#getType`](https://github.com/facebook/relay/blob/master/src/query/RelayQuery.js#L279-L281), but that wouldn't help since:

<S_CODE_TOKEN>

Is conceptually identical to :

<S_CODE_TOKEN>
",josephsavona,2016-12-20 17:37:09
782,2016-02-26 22:48:33,"Alright, I started poking around in the source a bit today to figure out how I might approach this.

I think we agree that it's generally true that an ""indirection layer"" is needed in the mutation query, so that we don't include invalid tracked queries. After some thought, I don't think we need to do any type inspection at all (of parents, etc.); just inserting a single `... on Node` fragment _should_ be sufficient. I could be forgetting a corner case, though.

In other words, intersected mutation fragments typically look something like this:

<S_CODE_TOKEN>

The issue is that one of `F0, F1, F2` might be an invalid type since `some_node_field` will probably be a concrete type, not just `Node`... and we want to ""fix"" this by inserting an indirection layer like this:

<S_CODE_TOKEN>

Alright, so the fix is simplified down to ""insert another fragment as a child of the intersected query"", I think. When I started poking around I was hoping to do this in `RelayMutationQuery`, but then I realized that `intersectRelayQuery` is the one that creates the entire `some_node_field { ... }` fragment, so I started poking around in that traversal. After a bit in there I changed my mind and I think I'll add code to `RelayMutationQuery` to ""transform"" the intersected query, since it really doesn't seem like something that `intersectRelayQuery` should ""know"" about.

I think I really just need to play with the Relay AST a bit more and figure out how to transform the intersected query with this indirection fragment.

Note that this will break a _lot_ of unit tests :smile: 
",NevilleS,2016-12-20 17:37:09
782,2016-02-27 00:05:29,"Yeah, that doesn't work... Tracked queries aren't always fragments like `...F0`, it seems. When I experiment sometimes the children of the intersected query are fields like `id`, `someFieldName`, etc. That means when you wrap all those tracked children in a `Node` fragment, those fields become invalid :cry:

I guess that means I've caught up to @josephsavona's train of thought - the trouble is figuring out a valid fragment type to wrap each tracked field in...
",NevilleS,2016-12-20 17:37:09
782,2016-02-27 00:18:02,"> the trouble is figuring out a valid fragment type to wrap each tracked field in...

Yeah, it isn't immediately clear what the best solution is. A good start would probably be to have a failing unit test that's well documented so we have a concrete case to discuss.
",josephsavona,2016-12-20 17:37:09
782,2016-02-27 00:22:25,"You can see https://github.com/NevilleS/relay/blob/add-indirection-to-mutation-queries/src/mutation/__tests__/RelayMutationQuery-test.js#L214 as a start. This covers the case where the tracked fields are fragments, so the single wrapper around all of them works...
",NevilleS,2016-12-20 17:37:09
782,2016-03-08 15:20:12,"This thread is tl;dr, but in case it's related: #922.

Regardless, if you want to future-proof your code, change your fat query to:

<S_CODE_TOKEN>
",steveluscher,2016-12-20 17:37:09
782,2016-03-08 15:25:15,"Heh, yeah, it's gotten pretty long.

As I understand it, you're saying that all fat queries should use the `pattern` directive since they are (technically) invalid GraphQL queries if they use unterminated fields like the `claim { policy }`, right?

For this particular issue, the problem is that there may be tracked queries on the `claim` node that are invalid when expanded within the `claim { ... }` fragment, but your point about future proofing is still valid :smile: 
",NevilleS,2016-12-20 17:37:09
782,2016-03-08 15:28:37,"Yeah, this is a separate issue from the `pattern` thing.
",josephsavona,2016-12-20 17:37:09
782,2016-03-28 20:05:53,"Just curious if there's a solution already in progress for this?

It sounds like the difficult part of the fix is determining the correct type to use on the fragment. What would be the consequences of adding the `__typename` field to queries for types that implement `Node`, similar to how Relay adds the `id` field now? Relay could then use that information when it's doing the tracked query intersection. It seems like wrapping field access in a fragment against the concrete type is guaranteed to always be valid.
",theorygeek,2016-12-20 17:37:09
782,2016-03-28 20:16:46,"Simply wrapping each intersected fragment in one for it's own type isn't quite enough, since that fragment expansion would still be invalid in many cases (namely, the ones identified here). What would work is a ""double wrap"" of the fragment type, then a generic `fragment on Node` wrapper; I think that works in all cases, but there could be corner cases as well where this results in an invalid query (which would break existing applications).

Generally speaking `__typename` is already added to most queries, I think. It doesn't necessarily help since queries are tracked regardless if a response is received; for example, you could do a `fragment on SomeSpecificType { __typename, fieldA }` which wouldn't return anything; this query still needs to be tracked though, so that future refetches send this query in case a matching node occurs later.

I believe what needs to happen is some way to carry the ""type"" information through from the babelRelayPlugin so that it is available in the Relay AST when constructing the mutation query, but I definitely wanted to defer to the Relay team's judgment on that...
",NevilleS,2016-12-20 17:37:09
782,2016-03-28 20:43:29,"> I believe what needs to happen is some way to carry the ""type"" information through from the babelRelayPlugin so that it is available in the Relay AST when constructing the mutation query,

@NevilleS  `babel-relay-plugin` records the type information for every node, along with whether the type is abstract or concrete - these can be accessed with `getType(): string` and `isAbstract(): boolean` on fields/fragments/queries. Can you put up a PR for your commit that you referenced above? That way we can import it easily and experiment.

cc @wincent this was the issue i mentioned the other day
",josephsavona,2016-12-20 17:37:09
782,2016-03-28 23:23:02,"If a PR helps, then a PR you shall have...
",NevilleS,2016-12-20 17:37:09
782,2016-03-29 01:29:04,"@NevilleS sweet, thanks!
",josephsavona,2016-12-20 17:37:09
782,2016-04-08 01:40:46,"Ran into this again in our codebase, this time on a RANGE_ADD constructing the mutation query for an edge... hmm.
",NevilleS,2016-12-20 17:37:09
782,2016-04-21 20:12:06,"@NevilleS I'm facing the same issue with RANGE_ADD right now
",zuker,2016-12-20 17:37:09
782,2016-04-21 20:22:17,"I take it you're using GraphQL interfaces too? It seems likely that people will run into this.
",NevilleS,2016-12-20 17:37:09
782,2016-04-21 20:36:34,"Yep, [`graphql-relay-js`](https://github.com/graphql/graphql-relay-js). Should I get rid of it?
",zuker,2016-12-20 17:37:09
782,2016-04-21 20:46:19,"?

No, I mean you probably have interfaces in your GraphQL schema, like `type Banana implements Fruit`, etc. Then you have things like `FruitConnection`, which you try to add a `Banana` too, and then something explodes like `Fragment ""F3"" cannot be spread here as objects of type ""Banana"" can never be of type ""Apple"".`

Right?
",NevilleS,2016-12-20 17:37:09
782,2016-04-21 20:51:28,"Yes, it explodes with error exactly like this. I've tried some workarounds from this thread (not sure if I've got them right though :) but no luck. 
",zuker,2016-12-20 17:37:09
782,2016-04-21 20:55:59,"The workaround is to manually add the indirection layers to your existing fragment definitions. So, following my fruit analogy, go find the places that look something like this:

<S_CODE_TOKEN>

...and add the indirection layers:

<S_CODE_TOKEN>
",NevilleS,2016-12-20 17:37:09
782,2016-04-21 21:45:18,"@NevilleS Thank you for your clarification! Mutation succeeds now.
",zuker,2016-12-20 17:37:09
782,2016-04-22 11:49:06,"Hi again!
I have new issue with fragments intersection. Hope someone will help me to resolve it.

### Input

Schema: https://gist.github.com/zuker/cb5a7385d4c8c51fdabb3b841a14ffcf#file-schema-graphqls
Component: https://gist.github.com/zuker/cb5a7385d4c8c51fdabb3b841a14ffcf#file-accountpassworditemlist-jsx (all comoponents futher are just React stateless components)
Mutation: https://gist.github.com/zuker/cb5a7385d4c8c51fdabb3b841a14ffcf#file-introducepassworditemmutation-js
Routes: https://gist.github.com/zuker/cb5a7385d4c8c51fdabb3b841a14ffcf#file-routes-js
Queries: https://gist.github.com/zuker/cb5a7385d4c8c51fdabb3b841a14ffcf#file-queries-js

### Cases

1 When component's fragment has:

<S_CODE_TOKEN>

`this.props.account.password_items.edges[].node` has all props populated. But mutation fails with

<S_CODE_TOKEN>

2 When component's fragment has: 

<S_CODE_TOKEN>

The same as above (PasswordItem and Account are merged)

3 When component's fragment has: 

<S_CODE_TOKEN>

`this.props.account.password_items.edges[].node` has only `{__dataID__: ""1""}` and mutation runs successfully.

4 When component's fragment has: 

<S_CODE_TOKEN>

`this.props.account` has only `{__dataID__: ""1""}` and mutation run fails with
`invariant.js:38 Uncaught Invariant Violation: writeRelayUpdatePayload(): Cannot insert edge without a configured `parentID` or a `newPasswordItemEdge.source.id` field.` 
also following warning is displayed:
`warning.js:44 Warning: RelayMutation: Expected prop `account` supplied to `IntroducePasswordItemMutation` to be data fetched by Relay. This is likely an error unless you are purposely passing in mock data that conforms to the shape of this mutation's fragment.`

Thanks in advance!
",zuker,2016-12-20 17:37:09
782,2016-04-22 12:34:07,"Hi @zuker. This looks unrelated to this issue so it'd be better to ask this on StackOverflow or a separate issue. I think you'll find several examples of the `Expected prop ... to be data fetched by Relay` elsewhere. I'd prefer to keep this issue discussion related to the problem of invalid fragment expansions in mutation queries, thanks 👍 
",NevilleS,2016-12-20 17:37:09
782,2016-04-22 12:41:29,"@NevilleS I think my problem is related to invalid fragment expansions since in case 1 and 2 `Account` and `PasswordItem` got probably merged (fields `tilte` and `pass` are `PasswordItem`'s fields) and all entire issue is a result of workaround you provided (anyway thanks again for it :).
**UPD**: basically if you could advice me how to wrap the `password_items` connection properly with `... on Node ... on Type` it would be great. Thanks!
",zuker,2016-12-20 17:37:09
782,2016-04-25 09:34:11,"It seems I've figured why I'm getting

<S_CODE_TOKEN>

Fields of `Account` should be explicitly stated `getFatQuery()`, not just `IntroducePasswordItemPayload { account }` but `IntroducePasswordItemPayload { account { id } }`

Thanks!
",zuker,2016-12-20 17:37:09
782,2016-04-26 06:49:16,"Faced with `Fragment ""F..."" cannot be spread here as objects of type ""xxx"" can never be of type ""yyy""` after some refactoring. Probably I've missed something while refactoring, but issue reproduce scenario got strange now and I think it is worth describing here.
The ""spread"" error happens only on first mutation request after full app restart (frontend and backend). After first failed mutation request (with the ""spread"" error) all other requests are successful until server restart AND page refresh. Mutation continues to run without an error after server restart or page refresh, but when page refresh and page reload happens afterwards it fails for the first time and then everything is ok. There are no any other mutations in my app now and before the mutation only one or two queries happen, also server rendering is used so maybe it also has its effect.
Thanks!
",zuker,2016-12-20 17:37:09
782,2016-06-02 16:11:41,"Just curious if there's been any progress on this issue? It's been a while since there was any activity on it. 
",theorygeek,2016-12-20 17:37:09
782,2016-06-02 17:23:16,"@theorygeek We haven't been able to make progress on a fix for this yet. For now, the workaround is documented here: https://github.com/facebook/relay/issues/782#issuecomment-213110469. 
",josephsavona,2016-12-20 17:37:09
782,2016-08-07 09:40:45,"I'm working with union types and the ""generic indirection workaround"" doesn't work for them.
What will work is instead to wrap the tracked fragments in a fragment of the union type.

Example:
This is my query which returns the union type Foo which is the union of Bar and Quux

<S_CODE_TOKEN>

Now if I mutate something of type Bar, the Quux fragment gets added as well

<S_CODE_TOKEN>

But if everything is wrapped in the union type of the query from which the fragments are taken, it should work fine

<S_CODE_TOKEN>

Anyway, at this point, it comes natural to me to ask why Quux fragment is tracked for Bar in the first place.
",mattecapu,2016-12-20 17:37:09
782,2016-08-07 11:24:37,"I made a PR that (maybe) fixes the behaviour I addressed in the last comment
",mattecapu,2016-12-20 17:37:09
782,2016-08-07 13:29:24,"Just to be clear, the Quux fragment is tracked because you defined that
fragment for that node - Relay doesn't attempt to ""prune"" fragments at all
based on the network response.

On Sun, Aug 7, 2016, 7:24 AM Matteo Capucci notifications@github.com
wrote:

> I made a PR that (maybe) fixes the behaviour I addressed in the last
> comment
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/facebook/relay/issues/782#issuecomment-238077063, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/ABv9N9b6E7YLmcQE9jFEc03shlirXv38ks5qdcCBgaJpZM4HQjrP
> .
",NevilleS,2016-12-20 17:37:09
782,2016-08-07 13:47:59,"Oh yeah, now I get it. It could be a subtype or something like that, right? 
Anyway the PR doesn't break this. It just makes sure fragments are placed in the right context. 
",mattecapu,2016-12-20 17:37:09
782,2016-10-10 15:30:22,"I ran into this issue but the workaround above did not help https://github.com/facebook/relay/issues/782#issuecomment-213110469

I have a generic component with a fragment like this (`Authorable` and `Displayable` are interfaces):

<S_CODE_TOKEN>

This component is used by many types, including `Author` which is not `Authorable`. When mutating an `Author` node which is being tracked for this fragment, I get the server error `GQL Error: Fragment ""F2"" cannot be spread here as objects of type ""Author"" can never be of type ""Authorable"".`

The fix mentioned in https://github.com/facebook/relay/issues/782#issuecomment-182179360 did work for my case.

<S_CODE_TOKEN>
",tomconroy,2016-12-20 17:37:09
782,2016-10-12 16:51:38,"Hmm, that's an interesting workaround @tomconroy... it requires schema changes of course, but the alternative (manually wrapping all your fragments in that ""indirection sandwich"" I proposed) is a pretty hideous solution.

We're trying to decide on our preferred solution for this issue and I see four options:
1) Add the ""indirection sandwich"" to the fragments that might lead to invalid expansion
2) Modify your schema to only return `Nodes` in mutations to avoid the invalid expansion
3) Use `Relay.GraphQLMutation` to manually specify the mutation query so it's guaranteed to be valid
4) Change schema to not use interfaces so that invalid expansions are (probably?) not possible

Right now options 1 and 4 are kinda off the table for me - the former is too clumsy and the latter way too extreme.

Option 3 is looking attractive... I haven't used `Relay.GraphQLMutation` much, but I think it might be the right way forward given that Relay 2 is going to ditch a lot of the declarative API. It looks like the Relay team did build out the basic features I'd want in this low-level API: optimistic updates, support for RANGE_ADD configs, etc.

Option 2 (from @tomconroy) requires schema changes and sacrifices type safety on the queries, which I don't like very much... but it could potentially work.

@josephsavona, since we've both had some time to subconsciously think about this one, what do you think are the pro/cons of these options for a Relay app today? I'm leaning towards rewriting most of my problematic mutations using the low-level API, but don't want to overlook things.
",NevilleS,2016-12-20 17:37:09
782,2016-10-12 17:59:50,"The best workaround to this category of mutation issues is to use [`RelayGraphQLMutation`](https://github.com/facebook/relay/blob/17096c3f22fbd98d0b4ace26762917e6c6a54832/src/mutation/RelayGraphQLMutation.js). This is a lower-level API than `RelayMutation`, and the mutation query is static (you have to specify all the fields to retch explicitly). Because the mutation queries are static and not generated, it avoids the issues here where the tracked query & fat query intersection can sometimes produce an invalid query.

To access this module you'll have to explicitly require it via the path, as it isn't available on the public `Relay` instance.
",josephsavona,2016-12-20 17:37:09
782,2016-10-12 18:10:45,"Yeah, I tend to agree. In the source comments it mentions not supporting optimistic updates or rollbacks, but it _does_ look like those features are supported...? With optimistic updates I think the low-level API is definitely a good option.
",NevilleS,2016-12-20 17:37:09
782,2016-10-12 19:17:36,"The comments may be out of date, so definitely go by the API ;-)
",josephsavona,2016-12-20 17:37:09
782,2016-10-12 19:18:18,"Thought so. Thanks for chiming in! 👍 
",NevilleS,2016-12-20 17:37:09
782,2016-10-13 16:35:15,"@josephsavona do u have an example of usage of `RelayGraphQLMutation`?
",sibelius,2016-12-20 17:37:09
782,2016-10-13 21:52:11,"@sibelius Not yet, the best bet is to look at the [unit tests](https://github.com/facebook/relay/blob/ea03e9ba6bc5763c18b9745eeab375087507307e/src/mutation/__tests__/RelayGraphQLMutation-test.js).
",josephsavona,2016-12-20 17:37:09
782,2016-10-13 22:27:52,"We've been using the low-level API a bit today, it's working pretty well! Thanks for implementing `RANGE_ADD` in there @josephsavona, it's definitely needed when mutating connections...
",NevilleS,2016-12-20 17:37:09
782,2016-11-10 08:54:32,"Hey ! If there any news on this issue? Do you think that a fix is possible on Relay 1 before the release of Relay 2 ?

I'm just wondering how to implement the @tomconroy workaround with [graphql-relay-js](https://github.com/graphql/graphql-relay-js). I mean, is it possible to set a mutation output field type as generic ""Node"" ?
",mrogelja,2016-12-20 17:37:09
782,2016-11-10 09:24:34,"I made a PR (#1322) which patches this but it's been sitting here for three months now...
",mattecapu,2016-12-20 17:37:09
782,2016-11-10 17:26:36,"If you're running into this issue we recommend checking out the static mutation API (`RelayGraphQLMutation`, has to be required by path). As I commented above, the [unit tests](https://github.com/facebook/relay/blob/ea03e9ba6bc5763c18b9745eeab375087507307e/src/mutation/__tests__/RelayGraphQLMutation-test.js#L351-L360) give an overview of the API.
",josephsavona,2016-12-20 17:37:09
782,2016-11-29 14:03:23,"It's hard for me to describe the queries, but I'm experimenting a similar bug. What I can see is a specific `query Q` generated by Relay is making one of my `mutation M` to break.
both Q and M works taken separately, but as soon as I trigger Q before M, then M will break (Relay generate a wrong fragment). So it's a bit unpredictable.",gre,2016-12-20 17:37:09
782,2016-12-20 17:37:09,"Thanks for filing this issue and your patience as we address it. The recommended workaround to this issue is to use [`Relay.GraphQLMutation`](https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html#content) for mutations, which gives you complete control over the mutation query sent to the server.",josephsavona,2016-12-20 17:37:09
781,2016-01-31 22:36:33,"Flow doesn't infer generics yet, so we need to annotate these
functions in order for Flow to understand what's going on.

Without this change, Flow didn't understand the type of `FIELDS`

Test Plan: Ran Flow v0.21.0 and v0.20.1
",gabelevi,2016-02-02 00:40:22
781,2016-02-01 14:36:02,"The version of babel that build-lib uses didn't seem to like the generics syntax for arrow functions, so I just switched to using regular anonymous functions. I think it's Babel 5, so it wasn't just a matter of installing the right plugin.

From the travis build for the previous arrow function version:

<S_CODE_TOKEN>
",gabelevi,2016-02-02 00:40:22
781,2016-02-02 00:16:41,"@facebook-github-bot shipit
",gabelevi,2016-02-02 00:40:22
781,2016-02-02 00:34:26,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/224723211202243/int_phab to review.
",facebook-github-bot,2016-02-02 00:40:22
781,2016-10-29 13:21:51,"I will not rubber stamp and land your change for you @gabelevi!  I can import it for you and you can get your change reviewed by someone though :)
",facebook-github-bot,2016-02-02 00:40:22
780,2016-01-30 23:30:29,"Hi, I stumbled upon an error while using babel-relay-plugin.

When I require babel-relay-plugin module and export the output with my graphql schema and call it in my webpack list of babel plugins as a path works.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

But when I create the plugin in the same file as this:

<S_CODE_TOKEN>

It throws this error stack:

<S_CODE_TOKEN>

Any pointers as to how fix this inside the same file would be awesome. Thanks in advance.
",alewaros,2016-01-30 23:52:07
780,2016-01-30 23:52:06,"@AJ-1310 This appears to be configuration related - the error `Cannot read property '__esModule' of null` is not specific to Relay or `babel-relay-plugin`, and suggests it might be due to how you have babel configured. The best way to get assistance is probably to ask on [Stack Overflow](http://stackoverflow.com/questions/ask), since there's a wide audience of developers who can assist.

If this does turn out to be related to something about `babel-relay-plugin` please don't hesitate to reopen this issue.
",josephsavona,2016-01-30 23:52:07
780,2016-01-31 00:09:25,"Ok thank you very much for your time.
",alewaros,2016-01-30 23:52:07
779,2016-01-30 22:25:51,"This adds support to the network layer for subscriptions.  And by support I mean properly throwing errors -- so not much really!

This builds off of https://github.com/facebook/relay/pull/736 purely for having schema support for subscriptions during tests.  It doesn't depend on the code change to `writeRelayUpdatePayload`.  So really the only diff should be the last commit: https://github.com/facebook/relay/commit/690da4d9e14bfb9a18ed5ebbe153aaccb786708d

I'm going to try adding some sweet, sweet github code comments for areas I have questions with!
",eyston,2016-03-16 23:38:08
779,2016-01-31 00:19:55,"I have lots of feedback above, but this is a great start. Thanks again for working on this, we're all really excited to see subscription support in OSS :-)
",josephsavona,2016-03-16 23:38:08
779,2016-01-31 00:57:43,"Count me in the ""we"" :-)
On Sat, Jan 30, 2016 at 4:20 PM Joseph Savona notifications@github.com
wrote:

> I have lots of feedback above, but this is a great start. Thanks again for
> working on this, we're all really excited to see subscription support in
> OSS :-)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/pull/779#issuecomment-177343024.
",KyleAMathews,2016-03-16 23:38:08
779,2016-01-31 01:27:43,"I had thought about the subject thing a bit, but ended up with this because the use case I ended up having was a single subscriber per request.  That is how the observer got in the constructor.  I'm happy to move it to an explicit `subscribe` method but have a few questions:
- Does FB end up with multiple subscribers for a single subscription request?  In the issue you had mentioned possibly de-duping subscriptions and I wasn't sure how that would end up happening.
- What are the semantics around `dispose` on the subject?  With a single subscriber I was essentially copying the `observable.create` semantics from RxJS.  The subscription was a cold observable and each 'subscribe' allocated / disposed resources independently based on the subscription -- when a user called `dispose` on the subscription it `disposed` the resources around the subscription.  With a subject it now becomes 'hot' and something has to call `dispose` on the subject (disposing a subscription just unsubscribes, right?).  Do we want the semantics that when observer count goes from X to 0 we dispose the subject resources (those defined by the network layer)?
- totally related to the above question, but if we go from 0 to 1 observers, we'd re-create the observable (e.g. call `sendSubscription`) again?

Here is the subscriber observer implementation I had: https://github.com/eyston/relay/blob/subscriptions/src/subscription/RelaySubscriptionObserver.js#L41-L163

:edit:

also I'm terrible at the words around Rx so if something doesn't make sense it is probably me :)

:edit2:

Just to make clearer ... maybe? ... what I was thinking in my head was that `sendSubscription` returns an observable.

<S_CODE_TOKEN>

But we want that as a single step due to the API for sendSubscription, so it was:

<S_CODE_TOKEN>

And then make it a single param, the request (now serving double duty as the data required to create the observable, and the observer for the observable):

<S_CODE_TOKEN>

Again, not advocating for this, just explaining how I got there ;p
",eyston,2016-03-16 23:38:08
779,2016-01-31 01:51:21,"Okay, I'm dumb and the link you sent defines the semantics:
- X -> 0 disposes
- 0 -> 1 a second time throws an invariant (e.g. you are trying to subscribe to something that has been disposed)
",eyston,2016-03-16 23:38:08
779,2016-01-31 04:53:46,"Updated from comments other than the subject stuff.  I'm still slightly confused on what we want.

The `SubscriptionRequest` is a subject.  Should the `sendSubscription` method of an injected network layer view the `request` as:
- an observer
- an observable
- a subject (both observer / observable)

If the answer is subject, that is weird to me... the network layer is the one calling 'onNext', why would it subscribe to itself?

Also confusing to me is that the `sendSubscription` methods job is to initialize a source of events -- right?  e.g. on `sendSubscription` I might allocate resources such as open a socket / long poll an end point / etc.

We don't want to do that work until someone `subscribes` to the subject.  e.g.: https://github.com/facebook/relay/blob/master/src/store/RelayQueryResultObservable.js#L85-L87

What the analogous `observe` / `unobserve` code for `SubscriptionRequest` be:

<S_CODE_TOKEN>

Or is `observe` assumed to have been done externally?

<S_CODE_TOKEN>

Or do i have no idea what I'm talking about :)
",eyston,2016-03-16 23:38:08
779,2016-02-14 20:03:36,"Updated / merged to be current with master.  I took a guess on the observer stuff and made a billion tests in an attempt to make clear the implementation although it is probably wrong.

I'm stumped on how this model works though.  The implementation I had been using was that the subscription was a cold observable.  When a user starts a subscription to the store it creates the observable and subscribes and hands this subscription back to the user.  When the user calls dispose it cleans up / disposes the subscription (network layer dispose is called).

If instead the request is a subject then it is unclear to me when we would call the observable (network layer) dispose.  We now can have multiple subscribers to the subject but some subscribers really shouldn't hold the subscription open -- they should dispose when the 'user' calls dispose on their subscription handle.  For example if the network layer itself calls subscribe on the request then it would hold that subscription open.

Would you model the initial creation of the subscription as two subscribes: one by the store which writes data, one to the user supplied callbacks?  If the user calls `dispose` on their subscription it would close one / both / all of the subscriptions?

I feel like I lack the big picture.  The picture I had in my mind is not the same one here :)
",eyston,2016-03-16 23:38:08
779,2016-05-18 11:23:43,"@eyston What is the reason for closing this? Your two PRs seems like some really great features that would benefit quite a few people :)
",Globegitter,2016-03-16 23:38:08
779,2016-05-18 15:08:59,"@Globegitter check out [this thread](https://github.com/facebook/relay/issues/541#issuecomment-213093469) for more context. 
",josephsavona,2016-03-16 23:38:08
779,2016-05-18 15:20:43,"@josephsavona I have seen that, which I understood as, that you (i.e. relay core team are not actively working towards it). But that also means community contributions won't be accepted?

The reason I am pinging on this PR is that we will start adding websocket to one of our apps and I am right now evaluating the best option. If subscriptions are close, then it would of course make most sense to use that. And given these PRs plus https://github.com/eyston/relay-chat-subscriptions it seems the pieces for relay native subscriptions are already here. But if there is no way any of that will make it into core any time soon I will of course use `handleQueryPayload`, `forceFetch`, etc.
",Globegitter,2016-03-16 23:38:08
779,2016-05-18 15:36:49,"I wasn't moving it forward and didn't want to discourage other takes on subscriptions.

I haven't looked at this in a bit, but if `handleUpdatePayload` works with subscription queries (the PR for this was small and I'm not sure if still required) then you could do it outside relay core.  The main benefit of `handleUpdatePayload` vs `handleQueryPayload` (and I might have the names slightly off) is you can use mutation configs on update which lets you append / prepend / remove edges.
",eyston,2016-03-16 23:38:08
779,2016-05-18 15:53:20,"> which I understood as, that you (i.e. relay core team are not actively working towards it). But that also means community contributions won't be accepted?

@Globegitter In general we're absolutely open to community contributions. In this particular case, @eyston did a ton of amazing work building subscription support, but there's a lot of complexity here and we simply don't have the bandwidth to review, import, and maintain all of this code. Upon further consideration, we realized that there a number of features such as this - server rendering being another one - that ideally could be built in user space instead of within the framework itself. Subscriptions can be implemented via `handleQueryPayload` (with a RelayQuery.Subscription for mutation-like behavior) or `handleQueryPayload` (with a RelayQuery.Root), so we'd like to see what people come up with in user-space and then evaluate again.

See also #559.
",josephsavona,2016-03-16 23:38:08
779,2016-05-18 16:01:07,"@eyston thanks for the clarification, that makes sense.

@josephsavona thanks for giving some background and a bot more information on this. That will help quite a bit with our decision on how to implement subscription/subscription-like features in our apps.
",Globegitter,2016-03-16 23:38:08
778,2016-01-29 02:14:31,,jaredly,2016-01-29 02:40:29
778,2016-01-29 02:15:47,"@facebook-github-bot shipit
",josephsavona,2016-01-29 02:40:29
778,2016-01-29 02:26:20,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/867249786720918/int_phab to review.
",facebook-github-bot,2016-01-29 02:40:29
777,2016-01-29 00:12:01,"I have been searching for ways to perform field validations for mutations.

For example, let's save we have a form for registering a user:

<S_CODE_TOKEN>

When performing the mutation, we need to check on the server that the `username` and `email` have not already been registered and signal that to the client and display the appropriate error messages.

As far as I can see from the graphql spec, the errors object (when a business rule fails and we throw an error) looks like so:

<S_CODE_TOKEN>

This does not allow us to associate which error message with an input field. In addition, it would be nice if an error code is returned as well, for example (`USERNAME_TAKEN`), so that its machine readable and the client code and produce an internationalized string out of it.

What do you guys think about adding a validation spec for relay? For example, relay could expect the following structure if an error has occurred:

<S_CODE_TOKEN>
",F21,2017-01-30 19:39:25
777,2016-02-15 11:20:11,"+1!
I've been banging my head over this the whole day.

As far as I'm concerned, I don't quite need a full blown validation feature. I would simply like to be able to return a machine-readable error. Internationalization is a good example, but also simply adding extra information so that the UI can react with something more useful than a plain string.
",balsamiqstefano,2017-01-30 19:39:25
777,2016-02-15 17:44:34,"Relay returns the full mutation error from the server as `transaction.getError().source`, so you should be able to implement any custom scheme for `errors` that you like, and access it in the mutation's `onFailure` callback. Does that solve your use case?
",josephsavona,2017-01-30 19:39:25
777,2016-02-15 20:10:30,"If I pass `onFailure` to `Relay.Store.commitUpdate` I get passed a `transaction` and so I can access the whole GraphQL return data, true. But the question is: how do I generate (server-side) something more interesting than this?

`""errors"": [
    {
      ""message"": ""foo"",
      ""locations"": [
        {
          ""line"": 1,
          ""column"": 56
        }
      ]
    }
  ]`
",balsamiqstefano,2017-01-30 19:39:25
777,2016-03-29 19:11:14,"According to the [Errors section of the GraphQL spec](http://facebook.github.io/graphql/#sec-Errors), the top-level errors entry is meant for developers rather than to display to users:

> Every error must contain an entry with the key message with a string description of the error intended for the developer as a guide to understand and correct the error.

A similar issue was closed on the GraphQL spec repo (https://github.com/facebook/graphql/issues/117#issuecomment-170180628) where it was suggested that errors for users should be provided as fields on the payload rather than using the top-level errors entry.
",dylanahsmith,2017-01-30 19:39:25
777,2016-05-13 21:22:21,"@dylanahsmith if errors are represented on the payload, wouldn't that imply to Relay that the mutation was successful, though? it seems as though if Relay sees that `errors` array, in the response, it knows that the mutation has failed, and triggers all the expected fail-case actions, such as the `onFailure` callback. if we have ""user errors"" as part of a _successful_ payload then Relay will proceed through it's succeed-case actions, such as `onSuccess` and whatever else it does (run Relay configs, adjust client graph, etc?)

The GraphQL spec says that the `errors` entries may be extended however needed. Despite that one seemingly confusing comment about `errors` being for developer-focused messages, it seems like extending an entry in `errors`, and adding a possible `field` property or something, would be a pretty good approach because it already works so well with Relay.

I'm not opposed to errors as part of the response payload. In fact, I'm currently implementing my errors this way. I just want to be sure that if I do it this way then Relay won't have any unintended side effects thinking that these mutations actually succeeded. @leebyron @josephsavona 
",ryancole,2017-01-30 19:39:25
777,2016-05-13 21:44:19,"Relay should be able to handle the configuration changes properly with that design as long as the server responds with the current state of the nodes without the changes applied that were considered invalid:
- FIELDS_CHANGE: Would just refresh those fields with the current state
- RANGE_ADD: The edgeName field should be null and cause it to not be added
- RANGE_DELETE: deletedIDFieldName field should not include the id if the deletion didn't happen
- REQUIRED_CHILDREN: Your onSuccess callback should check for a field that indicates that there were errors then handle the response appropriately
",dylanahsmith,2017-01-30 19:39:25
777,2016-05-13 21:56:12,"That's basically how I've proceeded. I do see why this seems a bit strange to some, though. There's already a mechanism for literally failing a query/mutation, but we're going to by pass that and instead opt to abide by these undefined rules so that our client side store doesn't get out of whack. I do think a more deliberate approach to these UI errors would be nice, and would make plenty of sense as part of Relay + GraphQL. It'd take coordination between the two, because I do see that UI errors don't really make sense as a first class concept in GraphQL, but they do somewhere in Relay perhaps.
",ryancole,2017-01-30 19:39:25
777,2017-01-30 19:39:25,"Thanks for the discussion everybody. I am going to close this now due to inactivity. I think there are a few ways forward here:

1. Work within the existing framework to provide user-visible validation messages.
2. Formally encode the notion of mutation validation errors at the level of the ""Relay spec"".
3. Formally encode the notion of mutation validation errors at the level of the GraphQL spec.

As pointed out above, the GraphQL spec doesn't (yet) say much about user-visible errors, although the scope for future extensions is explicitly mentioned:

>  however future versions of the spec may describe additional entries to errors.

I think I'd want to at least discuss the options there before proceeding down the path of any Relay-specific extensions, modifications or workarounds.  I know that there have been informal discussions about error-reporting internally at FB, so the team is definitely thinking about it; if you have opinions on the subject, now is a good time to make yourself heard.",wincent,2017-01-30 19:39:25
776,2016-01-28 19:16:44,,steveluscher,2016-01-28 19:40:41
776,2016-01-28 19:17:39,"@facebook-github-bot shipit
",steveluscher,2016-01-28 19:40:41
776,2016-01-28 19:24:45,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/497049797149601/int_phab to review.
",facebook-github-bot,2016-01-28 19:40:41
776,2016-10-29 13:21:38,"I will not rubber stamp and land your change for you @steveluscher!  I can import it for you and you can get your change reviewed by someone though :)
",facebook-github-bot,2016-01-28 19:40:41
775,2016-01-28 17:19:09,"I'm querying a parent component that gets a ""Layout"" field, which contains a React Layout component. When the parent mounts, its goes through its query, gets the layout, and the updated its own Relay Variables to store the Component. It then renders the Component. But, there is currently no way to get a Fragment from the Component, since it technically doesn't exist when the query is first built.

Here's my parent component:

<S_CODE_TOKEN>

As you can see, the parent gets the layout field, it goes through a ShouldComponentUpdate check, and then calls a function that updates Relay Variables. 
",ramsaylanier,2017-01-30 21:51:12
775,2016-02-06 19:04:01,"Thanks for your patience. Note that the `variables` passed to fragment functions are opaque descriptors of the variables. In: `viewer: ({Component, showPosts, limit}) => Relay.QL...`, the `Component` isn't the actual component value. 

An alternative approach here might be a container constructor:

<S_CODE_TOKEN>
",josephsavona,2017-01-30 21:51:12
775,2016-02-06 19:13:45,"Yeah that's actually the route I went after realizing my initial approach wasn't possible. Thanks!
",ramsaylanier,2017-01-30 21:51:12
775,2016-02-06 19:31:49,"@ramsaylanier great, glad you got it working!
",josephsavona,2017-01-30 21:51:12
775,2016-02-08 03:57:37,"@josephsavona sorry I realized that there is another issue. 

I'm calling the `createWordpressPage` function to create the component using react router. This is what the routes look like:

<S_CODE_TOKEN>

This works, but I think its creating a new component everytime I switch between :page routes —For example, when I got to '/articles' and then to '/about'. When I switch back I get:

<S_CODE_TOKEN>
",ramsaylanier,2017-01-30 21:51:12
775,2016-02-22 06:32:44,"@ramsaylanier sorry for the delay getting back to you. have you tried memoizing the results of the `createWordpressPage` function? it would definitely be wasteful to reallocate a component class on every transition.
",josephsavona,2017-01-30 21:51:12
775,2016-02-22 21:52:53,"I'm actually trying to go a different route based on the solution here: http://stackoverflow.com/a/35471007/2168061

Still having some issues though as noted in the comments.
",ramsaylanier,2017-01-30 21:51:12
775,2016-02-23 04:22:28,"@josephsavona Basically, the problem I'm running into is that I'm using part of the initial query to determine the layout - so the first time it runs through and renders the correct component, it doesn't pick up the fragment.

In a Page component I do this:

<S_CODE_TOKEN>

and the Page Container:

<S_CODE_TOKEN>

But this gives me an 

<S_CODE_TOKEN>
",ramsaylanier,2017-01-30 21:51:12
775,2016-02-23 18:31:27,"What is the render function of `Page`? It looks like what's happening is that the variables aren't updating such that the `if(condition)` returns false even after you'd expect it to update. Can you try calling `setVariables` on a transition?
",josephsavona,2017-01-30 21:51:12
775,2016-02-23 19:06:32,"<S_CODE_TOKEN>
",ramsaylanier,2017-01-30 21:51:12
775,2016-03-26 20:08:08,"Was there ever a solution to this? I have the same use case and am not sure how to overcome this...
",shaimo,2017-01-30 21:51:12
775,2016-03-26 23:17:41,"I still haven't found a way to resolve this.  :cry: 
",ramsaylanier,2017-01-30 21:51:12
775,2016-03-27 03:35:54,"Thanks for your patience on this issue. We've looked into it several times - I tried to repro, @steveluscher tried to repro, we hacked on it together - and it seems like there is a gap between our understanding of the problem and your actual use case (what we tried worked). 

I understand that it's a bit time consuming, but it would help to have a clear repro of the issue.  Either a full Relay playground link, or a failing unit test, would help us clarify exactly what's happening and determine a solution. 
",josephsavona,2017-01-30 21:51:12
775,2017-01-30 21:51:12,"(Spring cleaning.) This one is nearly a year old now, so closing due to staleness.

Thanks for filing the issue, and if you think it still exists in current Relay, please do send a repro so that we can investigate again.",wincent,2017-01-30 21:51:12
774,2016-01-27 23:01:21,"This fixes #745.

Essentially, what's happening is that the query tracker isn't being updated by `diffRelayQuery` when the query is on a node that is currently `null` in the local store. This causes Relay to lose track of what queries the components are expecting and therefore future mutations form incorrect queries.

My current fix just changes a bit of logic in `diffRelayQuery` to always track null linked fields. I'm not sure it's correct though - I'd like to write some code that ensures the `RelayQueryTracker` correctly merges the two tracked queries that `diffRelayQuery` registers via `trackNodeForID`, but maybe that's already covered by existing tests.
",NevilleS,2016-02-09 17:16:12
774,2016-01-27 23:15:42,"The general approach here feels correct, but there are other places within `diffRelayQuery` where a null link can be reached, and those should be handled similarly (plural linked fields and null connections). It might be helpful to add tests for these cases to find a common place to add the new logic.

> I'd like to write some code that ensures the RelayQueryTracker correctly merges the two tracked queries that diffRelayQuery registers

Tracked queries aren't merged, so no need to test this. 
",josephsavona,2016-02-09 17:16:12
774,2016-01-27 23:31:38,"I expected as much. I'll take a look later this week and make some changes.

Does a similar issue exist with the RelayQueryWriter, though? It also calls
into the query tracking logic. When I was poking around it seemed like that
wasn't the case (since that code only deals with what comes back from the
server, not what was asked for in the first place), but I could be wrong.

On Wed, Jan 27, 2016, 6:15 PM Joseph Savona notifications@github.com
wrote:

> The general approach here feels correct, but there are other places within
> diffRelayQuery where a null link can be reached, and those should be
> handled similarly (plural linked fields and null connections). It might be
> helpful to add tests for these cases to find a common place to add the new
> logic.
> 
> I'd like to write some code that ensures the RelayQueryTracker correctly
> merges the two tracked queries that diffRelayQuery registers
> 
> Tracked queries aren't merged, so no need to test this.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/pull/774#issuecomment-175906921.
",NevilleS,2016-02-09 17:16:12
774,2016-01-28 04:40:57,"The writer adds tracked queries for newly created nodes, which by definition are non-null, so i don't believe this issue could occur there.
",josephsavona,2016-02-09 17:16:12
774,2016-01-28 14:39:38,"OK, thanks for confirming that particular suspicion :smile: 

I think this issue could theoretically affect any field type that can have a sub-selection (and therefore need fragment tracking). I suppose that only rules out scalar fields, so I'll spend some time writing tests that exercise:
- [X] tracking fragments on null linked fields
- [x] tracking fragments on null connections
- [x] tracking fragments on null plural fields
- [x] tracking fragments on null edges (?)

Does that sound about right?
",NevilleS,2016-02-09 17:16:12
774,2016-01-28 15:55:37,"That sounds right. Note that we don't track queries for records with a ""client"" id - (ie any record where the server didn't return an `id`) - and edges fall into this category. So we don't need to worry about tracking queries on null edges.
",josephsavona,2016-02-09 17:16:12
774,2016-01-29 16:21:19,"OK, I added some tests this morning for plural fields & connections, and found that the same issue seemed to be present there (unsurprisingly). I've rebased this PR to the latest master and re-pushed. Let me know what to clean up, change, etc.
",NevilleS,2016-02-09 17:16:12
774,2016-02-04 16:06:09,"This is a phenomenal PR - awesome job on tests. Thank you!
",josephsavona,2016-02-09 17:16:12
774,2016-02-04 16:06:14,"@facebook-github-bot import
",josephsavona,2016-02-09 17:16:12
774,2016-02-04 16:07:23,"No problem. Shall I rebase to the latest master?

On Thu, Feb 4, 2016, 11:06 AM Joseph Savona notifications@github.com
wrote:

> This is a phenomenal PR - awesome job on tests. Thank you!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/pull/774#issuecomment-179919313.
",NevilleS,2016-02-09 17:16:12
774,2016-02-04 16:09:14,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1188011981228020/int_phab to review.
",facebook-github-bot,2016-02-09 17:16:12
774,2016-02-04 20:05:33,"@NevilleS its ok, our tool can rebase on import. 
",josephsavona,2016-02-09 17:16:12
774,2016-02-04 20:24:43,":open_mouth: We live in the future!
",NevilleS,2016-02-09 17:16:12
773,2016-01-27 22:45:40,"While testing each of the examples under Node 5 and npm 3 I ran `npm run
update-schema`. Turns out these haven't been refreshed in a while, so
the output format doesn't match that produced by the current version of
our ""graphql"" dependency. May as well update it.
",wincent,2016-01-28 17:40:31
773,2016-01-28 16:48:37,"@facebook-github-bot import
",wincent,2016-01-28 17:40:31
773,2016-01-28 16:55:46,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1563407423979134/int_phab to review.
",facebook-github-bot,2016-01-28 17:40:31
772,2016-01-27 22:42:18,"I think we can probably loosen our restriction on Node and npm versions
at this point.

I just tried this with Node 5.5.0 and npm 3.3.12, and compared with Node
4.2.6 and npm 2.15.12. There are no new lint or Flow issues under the
new versions, and install and build works. Also confirmed that examples
still run (actually found a real issue in one but will fix that
separately).

Closes: https://github.com/facebook/relay/issues/706
",wincent,2016-01-28 23:36:58
772,2016-01-28 23:36:58,"No longer necessary, as already happened in 60c8a76a47385d8f843e3.
",wincent,2016-01-28 23:36:58
771,2016-01-27 22:09:21,"Specifically:

<S_CODE_TOKEN>
",wincent,2016-01-28 17:55:39
771,2016-01-28 16:48:58,"@facebook-github-bot import
",wincent,2016-01-28 17:55:39
771,2016-01-28 16:55:51,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1063339947057682/int_phab to review.
",facebook-github-bot,2016-01-28 17:55:39
770,2016-01-27 19:48:06,"I am following [this issue here](https://github.com/facebook/relay/issues/541).

But I have a hard time to understand how connections can be updated based on event subscriptions.

Imagine I have a connection showing posts. Currently my connection shows posts between 8am and 10am. Now somebody deletes a post at 9am. I would expect that this post will disappear from my connection.
Obviously similar scenarios come up for `INSERT`/`UPDATE`/`DELETE`.
- Will this be possible to do with event subscriptions?
- Do cursors play a role in this?
- What about windowed connections with `offset` and `limit` rather than the infinite connections with `first` and `after`?

Can a connection like this below be updated efficiently via event subscriptions?

<S_CODE_TOKEN>
",BerndWessels,2016-01-27 21:19:56
770,2016-01-27 21:19:56,"Under the proposed API a product would likely subscribe to an ""event deletion"" event, maybe something like:

<S_CODE_TOKEN>

With a `NODE_DELETE` subscription configuration. Relay tracks the connections that contain any given node, so the subscription event firing would cause the node to be efficiently removed from the connection, as expected.

This isn't an issue or an enhancement, so I'm going to close it. Feel free to ask follow up questions and we'll try to address.
",josephsavona,2016-01-27 21:19:56
770,2016-01-27 21:32:19,"Oh, I see @josephsavona.

So there will be a subscription for each connection, since the NODE_DELETE config will act on a node id specific for each connection I guess?

I am keen to see how that feels in reality, especially non-infinite (windowed) connection are still giving me a bit of a headache in relay since I am never sure what the right way is to implement it with all the internal relay mechanisms to consider and now subscriptions coming into play as well.
",BerndWessels,2016-01-27 21:19:56
769,2016-01-27 03:13:14,"Hi

When running a NODE_DELETE mutation on a connection, it seems that it causes the connection to request updates for all already cached nodes.

This feels like a bug because it causes massive over-fetching even if the user only deletes a single node.

Is this a bug, am I doing something wrong?

Surely deleting a node should not cause maybe thousands of already fetched notes to be re-fetched?

[Here is a Project](https://github.com/BerndWessels/react-webpack) you can use to reproduce and analyse if you want.

Cheers
Bernd
",BerndWessels,2016-03-08 17:50:11
769,2016-01-29 11:42:04,"I'm having the same issue on both NODE_DELETE and RANGE_ADD. It's strange to me that the todo example still works fine even when it looks no different from my code.
",tuananhtd,2016-03-08 17:50:11
769,2016-02-08 22:30:39,"Is the issue because you have `viewer { posts }` in your fat query?
",wincent,2016-03-08 17:50:11
769,2016-02-09 18:22:02,"@wincent Possibly. Here it is:

<S_CODE_TOKEN>

But how else would you do it? What is the right way to insert to and delete from a connection without mass updates of the relay cache?
",BerndWessels,2016-03-08 17:50:11
769,2016-02-27 12:49:38,"@BerndWessels I recently gives this on another attempt and it works. My query is just like your. Actually not putting the connection field in the fat query will cause the overfetching.
",tuananhtd,2016-03-08 17:50:11
769,2016-03-08 17:50:11,"This is happening because `posts` is not a bonafide connection in your schema. See #768 for more discussion.
",steveluscher,2016-03-08 17:50:11
768,2016-01-27 02:18:46,"Hi
I have a `NODE_DELETE` mutation that should remove a `post` from the `viewer.posts` connection.

It works fine without `getOptimisticResponse` !

BUT with `getOptimisticResponse` it kind of breaks with a short flashing red screen and the following error:

Warning: Failed propType: Required prop `post` was not specified in `Post`. Check the render method of `Relay(Post)`.

So it seems after the `optimistic response` and before the `server response` the `deleted edge` is still being rendered but the `deleted post` is already gone which causes the `post component` render to fail.

It looks like that the `optimistic response` is not handled in the same way as the `server response` even though they are identical.

Is this a bug in relay?

[Here is the complete project](https://github.com/BerndWessels/react-webpack) to reproduce the problem.

This is the mutation:

<S_CODE_TOKEN>

This is the post component:

<S_CODE_TOKEN>

And this is the home component with the list of posts:

<S_CODE_TOKEN>
",BerndWessels,2016-03-08 17:49:25
768,2016-03-08 15:48:14,"Thanks for the detailed repro. I was able to run it and test a fix.

Fixing this, starting with #922. In the meantime, if you want to unbreak and future-proof your code, add `@relay(pattern: true)` to all of your fat queries:

<S_CODE_TOKEN>
",steveluscher,2016-03-08 17:49:25
768,2016-03-08 16:41:44,"Oh sorry. This doesn't fix this; wrong issue.
",steveluscher,2016-03-08 17:49:25
768,2016-03-08 17:49:23,"So, here's what I think is going on here.

`NODE_DELETE`, `RANGE_DELETE`, and `RANGE_ADD` depend on the thing you're targeting being a connection (having `isConnection` metadata added to it by the Babel Relay plugin). I suspect that your `postsConnection` isn't acquiring this metadata because it's not a real connection (you've rolled your own offset/limit solution that deviates from the spec somewhat). Look at how your printed `comments` field has `isConnection: true` while your 'posts' field does not. This might be because your `pageInfo` type has the type “paginationInfo” rather than “PageInfo”, but I didn't dig much deeper after figuring out that your posts aren't being stored in the Relay store as a bonafide connection.

We should probably do something here to check that `connectionName` actually represents a bonafide connection. I'll talk to @wincent about this.

Because it's not a connection, `NODE_DELETE` kills the node but not the edge. What you end up with, until the server comes back with what appears to be an ‘overfetched’ response (see #769), is a deleted node and an intact edge. That's why your post re-renders, but has no data, causing the exception.

I think what you want in this case is either to:
1. Find a way to make `posts` register as a bonafide connection
2. Use `FIELDS_CHANGE` and actually return a new set of edges in your optimistic response with the deleted edge removed. This is probably unsuitable for other reasons – it might be hard to ‘pull up’ results from the next page before the server returns.

Side note: make sure that when you return `deletedId` you use the global ID:

<S_CODE_TOKEN>
",steveluscher,2016-03-08 17:49:25
767,2016-01-26 06:59:04,,iamchenxin,2016-03-02 23:45:40
767,2016-01-26 16:16:31,"@steveluscher thoughts on this? The restriction on string arguments is largely arbitrary, how hard would it be to just allow any type?
",josephsavona,2016-03-02 23:45:40
767,2016-01-28 21:23:41,"Thanks for these contributions, @iamchenxin!

Instead of warning and documenting (#764) this behavior, how would you feel about fixing it? Here's what needs to happen:

Right now, we use the `identifyingArgValue` as a key in the `rootCallMap` and `cachedRootCallMap` of the `RelayRecordStore`. This is a map from `identifyingArgValue` to `DataID`. Because keys can only be strings, we enforce that every root call's `identifyingArgValue` is a string.

What you could do to fix this would be to modify `getDataID` and `putDataID` ([link](https://github.com/facebook/relay/blob/master/src/legacy/store/GraphQLFragmentPointer.js#L55-L67))to accept `identifyingArgValue`s other than strings, then to stringify them if they are not already a string:
- If `identifyingArgValue` is already a string, use it as the key like normal
- If `identifyingArgValue` is an object, stringify it using `stableStringify` and use the result as the key

Are you up for that?
",steveluscher,2016-03-02 23:45:40
767,2016-02-01 16:46:39,"@steveluscher I am not familiar with Relay yet,and I am learning both Relay and English these days ,So when i make sure i can figure out the meaning of most Relay Store's functions, i should and would do this. Maybe one or two weeks later.
BTW: I thought the string restriction is deliberately designed before . When i first learn to use relay, i tried to pass `Object` and `int` as args to the top-level .But then the string restriction lead me to another design semantic .. keep the top-level fields of query as simple `interfaces`. <br/>
I am learning more about Relay, then i may not be confused with the relationship between each parts.
",iamchenxin,2016-03-02 23:45:40
767,2016-02-15 08:06:22,"Someone just hit this restriction internally, where their identifying argument was an integer. Relay, as you've noticed above, turned it into a string. If you have time to open Relay up to objects, integer, and string identifying arguments, that would be a tremendous help, @iamchenxin!
",steveluscher,2016-03-02 23:45:40
767,2016-02-15 10:22:58,"@steveluscher Just back from Chinese new year today, i will try to fix it tomorrow .
",iamchenxin,2016-03-02 23:45:40
767,2016-02-16 15:58:23,"Hi @iamchenxin ! I had the same problem when I tried to use an integer identifying argument. If you have the opportunity to look into this issue, it would help a lot! Let us know if you need help!
",vdurmont,2016-03-02 23:45:40
767,2016-02-16 16:21:21,"@vdurmont  in the process of writing unit test  ,  will pull the code before i go to sleep. 
writing additional type for test in `testschema.graphql` now.
",iamchenxin,2016-03-02 23:45:40
767,2016-02-16 17:51:27,"@vdurmont hi,i go to sleep. and update the uncompleted code to a new pull request. (you review them first, check if i got the right idea).
[#844](https://github.com/facebook/relay/pull/844/files).
Im not familiar with flow and jest. so i use `?any` temporarily (should be something like number|string|object).
number support should already worked.
Object support maybe need modify more files? but maybe im tired so i misunderstand some files,or i write wrong GraphQL type for test.  will continue tomorrow. 
",iamchenxin,2016-03-02 23:45:40
767,2016-03-02 23:45:40,"@iamchenxin Thanks for starting the discussion about this! I've created two new PRs that build on these ideas in #894 and #895, so let's continue discussion there.
",josephsavona,2016-03-02 23:45:40
766,2016-01-25 22:48:21,"Splitting this one off from https://github.com/facebook/relay/issues/760, and the related question posted on Stack Overflow [here](https://stackoverflow.com/questions/34948216/how-to-manage-cursors-and-sorting-in-relay).

Originally this was a question about whether cursors should embed information about sort-order or filtering, and [elsewhere](https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-135887330) we've advised that people should ""figure out what data you would need to fetch the next page, and then throw all of that into the cursor"", but @eapache raised an example where this can lead to an inconsistent update:

> you have two views on the same relay-paginated list, sorted by different fields. The same object appears on both lists, but with different cursors. You have a mutation to create an object, with a RANGE_ADD that specifies different behaviours for the two views. The mutation on the server side has to return a single cursor in the response; which of the two cursors does it return, and what does the other view do since it doesn't have a cursor at all?

So it seems clear that if an object appears in a connection with a particular set of variables, and again in another instance of the connection with different variables, that if these variables influence the cursor then the mutation update can only return a single edge and a single cursor, which by definition can only work for one of these connection-variable tuples.

We'll either need to make a recommendation that cursors be independent of connection variables, which may make life harder for schema authors, or provide a way for mutations to provide consistent updates in the scenario described above (multiple connection-variable tuples, multiple edges each with a unique cursor).
",wincent,2016-02-08 22:35:34
766,2016-01-26 00:35:09,"cc @dylanahsmith
",eapache,2016-02-08 22:35:34
766,2016-02-04 14:30:10,"> make a recommendation that cursors be independent of connection variables, which may make life harder for schema authors

For us, specifically, this would lead to enormous cursors; we would end up serializing the entire object into the cursor so that we would be able to use that cursor for any given sort order. I suspect others would have similar problems.

> or provide a way for mutations to provide consistent updates in the scenario described above

I was thinking that the `cursor` result in the mutation should be parameterized in such a way that the client making the mutation can tell the server ""these are the parameter-sets for which I want the cursor for this mutation"". Does that make sense?
",eapache,2016-02-08 22:35:34
766,2016-02-08 22:35:34,"> Does that make sense?

Yes it does.

This is important, so I'm going to fold it into #538, which is about overhauling the mutations API and so has substantial overlap. (It will be easier to manage with the various interrelated mutations issues in a single place.)
",wincent,2016-02-08 22:35:34
765,2016-01-25 16:52:06,"### Problem Description

I have a Relay container defined below that fetches 15 items of a given category and is updated when a user switches categories on the frontend. The intent is to refetch the next set of films when a user switches categories. The initial query sent by the container is correct and returns the films attached to the viewer instance. However subsequent queries are not 'ViewerQueries' and are not attached to the viewer element. 

We are doing similiar refetches on other pages for slug based navigation to item pages and we don't suffer from this issue, however in each of those cases the setVariables call is made from componentWillMount whereas this particular case is being fired after the component is mounted and user input is changing the view.  Any help or tips are greatly appreciated! 
##### Relay Container Query definition:

<S_CODE_TOKEN>
##### Initial Full Query Logged on Server

<S_CODE_TOKEN>
##### initial response blueprint

`{ data: { viewer: { id: 'VXNlcjo0MDA=', _films1ednKd: [Object] } } }`
##### reFetch/setVariables query logged on server

<S_CODE_TOKEN>
query Index{
  node(id:""VXNlcjo0MDA=""){
    ...F0
  }
}
fragment F0 on User{_films1ednKd:films(first:15,category:""Upcoming Auctions""){
  edges{
    node{
      createdAt,
      URL,
      filmID,
      title,
      description,
      property{
        lifestyles,
       country{
          name,
          id
        },
       state{
          name,
          id
       },
       id
     },
     category,
     featuredPhoto{
        sizes{
          thumb2{
            src
          }
       },
       id
     },
     id
   },
   cursor
  },
  pageInfo{
    hasNextPage,
    hasPreviousPage
  }
},
id
}

##### Data signature of refetch
<S_CODE_TOKEN>

<S_CODE_TOKEN>
",brad-decker,2016-01-26 19:47:50
765,2016-01-25 17:32:45,"Thanks for asking. This is expected behavior: for objects with an `id`, Relay will always fetch additional information via the `node` root field. In this case, the initial response indicates that the `id` of viewer is ""VXNlcjo0MDA="", and Relay therefore fetches additional data for `setVariables` via `node(id: ""VXNlcjo0MDA="")`.

Is there data missing after the `setVariables` call resolves, or was the query just different than you expected?
",josephsavona,2016-01-26 19:47:50
765,2016-01-25 17:34:15,"The viewer.films in this case never updates, the values don't change and the query takes twice to three times as long to complete according to react-dev-tools
",brad-decker,2016-01-26 19:47:50
765,2016-01-25 17:42:35,"What variables are you changing? (It might help to paste the code where you call `setVariables`, for example) In the examples you gave both the initial query and `setVariables` query have the same parameters - `films(first:15,category:""Upcoming Auctions"")` - so the data would presumably be the same.
",josephsavona,2016-01-26 19:47:50
765,2016-01-25 18:01:27,"@josephsavona - I'm setting category, but I just discovered that the props are being set but some child component is not receiving the updated props. So all is operating well - i guess my only question then is why do these queries seem to take longer... is it because its using the node query to identify the source instead of the viewer query? 

Thanks! 
",brad-decker,2016-01-26 19:47:50
765,2016-01-25 18:24:13,"> my only question then is why do these queries seem to take longer

There's nothing inherent in a `node` query that would be slower - generally, the `resolve` function simply maps the string type to a GraphQL schema type - see the [todo example](https://github.com/facebook/relay/blob/master/examples/todo/data/schema.js#L51-L69) - you might double check that you don't have complex logic inside that function that could cause the slowdown.
",josephsavona,2016-01-26 19:47:50
765,2016-01-26 19:47:42,"Thanks for the help on this, this is resolved (user error)
",brad-decker,2016-01-26 19:47:50
765,2016-01-26 20:12:52,"Thanks for the follow up!
",josephsavona,2016-01-26 19:47:50
764,2016-01-25 07:17:38,"Add more detailed error message to indicate the constraint for (args must be string type) is just in root query,not a general constraint in Relay.
",iamchenxin,2016-03-03 06:52:02
764,2016-01-26 05:45:26,"@josephsavona rebased
",iamchenxin,2016-03-03 06:52:02
764,2016-01-26 05:49:19,"Sweet, thanks for this! 
",josephsavona,2016-03-03 06:52:02
764,2016-01-26 05:49:46,"@facebook-github-bot import
",josephsavona,2016-03-03 06:52:02
764,2016-01-26 06:11:22,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/461623587356830/int_phab to review.
",facebook-github-bot,2016-03-03 06:52:02
764,2016-01-26 07:08:03,"@josephsavona Add some information in `Guides-Routes.md` for this. This part rule for Graph-Relay Data model what i get right now is that,  the top-level interface of query must be used string as params for Relay store to indexed data?Cause im poor at english,there may be some misunderstanding.  
",iamchenxin,2016-03-03 06:52:02
764,2016-01-26 16:19:17,"Yeah, see my comment on your other PR - https://github.com/facebook/relay/pull/767#issuecomment-175097229 - we should just make non-strings work.
",josephsavona,2016-03-03 06:52:02
764,2016-03-03 06:52:02,"closing in favor of #895 
",josephsavona,2016-03-03 06:52:02
763,2016-01-25 06:34:52,,steveluscher,2016-01-25 18:25:35
763,2016-01-25 06:35:14,"@facebook-github-bot import
",steveluscher,2016-01-25 18:25:35
763,2016-01-25 06:41:33,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/922032997882530/int_phab to review.
",facebook-github-bot,2016-01-25 18:25:35
762,2016-01-24 02:28:55,"In relation to #706, trying to `npm install` from the root (or any of the examples of course) fails due to an expected version of `2.x` rather than the current (at this time) `3.5.3`.

While I understand certain things may or may not be set up to use something past the version it was developed under, it would be useful to place a **requirements** section at the top of the README files.

Anyways, going to go downgrade so I can enjoy some awesomeness and throw in some [GraphQL](https://facebook.github.io/relay/docs/getting-started.html) while I'm at it.

Thanks for all the hard work (and for open-sourcing this).
",dhenson02,2016-01-27 21:53:27
762,2016-01-25 07:48:14,"In the package.json you may change the npm version to 3.x and you overcome this error. 
",developersencha,2016-01-27 21:53:27
762,2016-01-27 21:53:27,"Thanks for reporting this, @dhenson02. I think we can actually tackle this as part of #706, which you've already referenced, so I am going to close this one out.
",wincent,2016-01-27 21:53:27
761,2016-01-22 21:17:35,"This PR is another step toward making all Relay state contextual (#558). Originally this was submitted as a part of #683, but @josephsavona [suggested](https://github.com/facebook/relay/pull/683#issuecomment-166386149) to split it to smaller PRs.
",denvned,2016-02-06 01:20:39
761,2016-01-25 19:17:04,"@denvned Thanks for this! I have lots of minor feedback but this is great. I'm going to import now to start testing it out, but feel free to make updates (if you can!) and i'll re-import. 
",josephsavona,2016-02-06 01:20:39
761,2016-01-26 00:43:37,"@facebook-github-bot import
",josephsavona,2016-02-06 01:20:39
761,2016-01-26 00:52:14,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1689763641270464/int_phab to review.
",facebook-github-bot,2016-02-06 01:20:39
761,2016-01-26 11:27:16,"@josephsavona Thanks for review! I updated PR with all your corrections except the one about the circular dependency (see my [comment](https://github.com/facebook/relay/pull/761#discussion_r50822499)).
",denvned,2016-02-06 01:20:39
761,2016-01-26 20:13:31,"@facebook-github-bot import
",josephsavona,2016-02-06 01:20:39
761,2016-01-26 20:17:53,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1689763641270464/int_phab to review.
",facebook-github-bot,2016-02-06 01:20:39
760,2016-01-21 16:18:31,"We have a graphql server (not written in javascript) serving a paginated list of objects. We're trying to conform to the relay specification, but we've hit a few interesting cases that need clarification.
1. `startCursor` and `endCursor` show up in a few examples but not in any official docs; based on my reading of #372 those fields are basically deprecated and we don't have to implement them?
2. Are cursors allowed to depend on other inputs to the connection? Similar to https://github.com/graphql/graphql-relay-js/issues/20, our connection takes a `sort_key` argument that determines the sort order of the returned list. Depending on the specified sort order, the edge for an object may return different cursor values (since the server needs different information in each case to determine the next object). However, a careful reading of https://facebook.github.io/relay/docs/guides-mutations.html#range-add suggests this is not permitted; mutations that return a newly created edge must return a single cursor that can be universally applied to all possible lists in which that edge may appear? How does facebook solve this problem?

cc @dylanahsmith
",eapache,2016-01-22 16:56:53
760,2016-01-21 21:58:09,"Thanks for your question! I have a couple of answers for you but we want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",wincent,2016-01-22 16:56:53
760,2016-01-22 14:00:56,"OK, thanks; I've just posted three separate questions:
- https://stackoverflow.com/questions/34948295/implementing-startcursor-and-endcursor-in-relay
- https://stackoverflow.com/questions/34948216/how-to-manage-cursors-and-sorting-in-relay
- https://stackoverflow.com/questions/34948420/which-relay-objects-must-implement-node

Looking forward to your answers!
",eapache,2016-01-22 16:56:53
760,2016-01-22 16:56:53,"Thanks for that. I've posted replies to each of those. Let's carry the discussion on there.
",wincent,2016-01-22 16:56:53
760,2016-01-25 22:48:33,"I commented on Stack Overflow that we should probably re-open this to figure out a solution for the problem you raised in [your second question](https://stackoverflow.com/questions/34948216/how-to-manage-cursors-and-sorting-in-relay), but on second thought, it will be cleaner if we make a separate issue for it: https://github.com/facebook/relay/issues/766
",wincent,2016-01-22 16:56:53
759,2016-01-21 02:41:17,"I'm getting false positives from the ""Expected record data for prop"" check on https://github.com/facebook/relay/blob/v0.6.1/src/container/RelayContainer.js#L577-L599, when I explicitly pass in a `null` for the prop in question.

This happens whenever any of the other props for the component is a sufficiently long string. This happens because `fragmentHash` is a stringified number, and can be used to index into a character in a string.

I think there are two ways to fix this; either don't check this when the matching prop is explicitly null on https://github.com/facebook/relay/blob/v0.6.1/src/container/RelayContainer.js#L580, or check that `props[propName]` is not a string on https://github.com/facebook/relay/blob/v0.6.1/src/container/RelayContainer.js#L588.

Does either approach seem reasonable?
",taion,2016-02-04 00:04:48
759,2016-02-03 23:54:39,"Thanks for highlighting this, @taion. Of those, the string check sounds a bit more cumbersome, but it feels like it's technically the more correct fix. Want to submit a PR?
",wincent,2016-02-04 00:04:48
759,2016-02-04 00:00:44,"Sure – I just needed confirmation that I wasn't missing something.
",taion,2016-02-04 00:04:48
759,2016-02-04 00:04:48,"Oops! Turns out this was fixed by https://github.com/facebook/relay/commit/839eeb36814d44b23aa4a57ea7625fcfa3d95835 on master before I even opened this issue.

I missed that somehow.
",taion,2016-02-04 00:04:48
759,2016-02-04 01:26:30,"Well spotted. That's what I get for not looking at the code in master.
On Wed, Feb 3, 2016 at 4:04 PM Jimmy Jia notifications@github.com wrote:

> Closed #759 https://github.com/facebook/relay/issues/759.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/759#event-538419775.
",wincent,2016-02-04 00:04:48
758,2016-01-20 19:36:19,"Add missing imports to fix the the tutorial following the example in the relay repository: https://github.com/facebook/relay/blob/master/examples/relay-treasurehunt/js/components/App.js
",tupy,2016-03-03 19:18:11
758,2016-01-20 19:47:54,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-03-03 19:18:11
758,2016-02-15 18:41:52,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-03-03 19:18:11
758,2016-03-03 19:18:11,"This was accomplished by 72580206f1e8eb790f78a6b4ffa3c2803d9654b6.
",yungsters,2016-03-03 19:18:11
757,2016-01-20 18:17:26,"We use the ""-present"" range in other open source projects, so let's do the same here, which means we won't need to update these every year.
",wincent,2016-01-26 06:35:08
757,2016-01-26 06:35:08,"Closing in favor of #749.
",wincent,2016-01-26 06:35:08
756,2016-01-20 17:59:11,"By default, Relay does not evict data from the cache. This can cause two main issues:
- Memory growth: As more data is loaded the amount of memory used by the cache can grow.
- Mutation performance: As more data is loaded, the number of fields that may need to updated by a mutation can also grow. 

Both cases can be addressed by evicting data (and tracked queries) that is not required for active views. We have an experimental implementation of garbage collection (aka cache eviction) at https://github.com/facebook/relay/blob/master/src/store/RelayGarbageCollector.js, but there are known edges cases that we're continuing to address before providing a public API for using it. This task is to track progress.

See also #537 and #479.
",josephsavona,
756,2016-01-20 20:25:44,"This makes a ton of sense. I worry a bit that if a user keeps a Relay application open long enough, they're local graph just gets bigger and bigger (and more and more stale), so being able to specify some basic garbage collection / expiration policies would be useful.
",NevilleS,
756,2016-01-22 18:40:38,"In parallel, an API to expire local data that you believe is out of date (but may still be needed for an active view) would be useful to handle mutations where the client cannot know ahead of time which nodes will be affected by the change.

For example, if we have a mutation that deletes a `Group` which has many `Users`, we might need to refetch the `groupsCount` for all the affected users. We can't necessarily guarantee that the client knows all the `Users` that will be affected by the deletion - a group might have 100,000+ `Users`, for example. However, the server could add a `affectedUserIDs` field to the mutation payload that the client could use to search for matching users in the local store and expire them manually (via something like `Relay.Store.expireNodes(affectedUserIDs)`). If any of those nodes are still subscribed to by active components, a refetch would be necessary.
",NevilleS,
756,2016-02-04 00:03:30,"Just adding a cross-reference to #538, which is about simplifying the mutations API. An unstated subgoal there is simplifying the underlying implementation too, which in turn means that things like tracked queries are up for discussion as well (the most extreme version of which is abolishing them; I'm not certain that's the right call yet, but I'm exploring it and alternatives to the current implementation).
",wincent,
756,2016-12-20 17:35:54,We're planning to support garbage-collection in a future release (see also #1369).,josephsavona,
755,2016-01-20 10:22:20,"Is there a reason why you user ascii as encoding and decoding base64 ids ?
I got bitten by this as i had a swedish character in an id and was incorrectly encoded.
Changed ascii to utf-8 in graphql-relay\lib\utils\base64.js and it worked.
",quazzie,2016-01-25 17:56:30
755,2016-01-25 17:38:28,"Thanks for raising this. Any interest in submitting a PR to change this at [graphql/graphql-relay-js](https://github.com/graphql/graphql-relay-js)? Looks like the line you're referencing is https://github.com/graphql/graphql-relay-js/blob/master/src/utils/base64.js#L14
",josephsavona,2016-01-25 17:56:30
755,2016-01-25 17:56:29,"Let's move this to https://github.com/graphql/graphql-relay-js/issues/62
",josephsavona,2016-01-25 17:56:30
754,2016-01-20 00:12:31,"Using isomorphic-relay to get relay to work on the server, and using a load testing tool to create repeated requests and find a memory leak in an application I'm building, I observed that 2 maps called queryCache were growing unbounded.

These maps are in getRelayQueries.js, and in buildRQL.js, and they grow to thousands of keys over 600 requests to a page I have with no less than 2 containers.

Longer explanation in:

https://github.com/facebook/relay/pull/683#issuecomment-173021689

I'll do my best to provide an example if it's necessary to reproduce the issue.
",fabiosantoscode,2016-09-03 18:49:44
754,2016-01-20 07:42:40,"Hi @fabiosantoscode. Does your testing app recreate containers on each request using `Relay.createContainer(...)`? I can't see any other reason for such `queryCache.size` growth (well, probably except some bug in core-js polyfill for `Map`).
",denvned,2016-09-03 18:49:44
754,2016-01-20 08:08:35,"Hello! Yes it does. Since the app is wrapped in react-router and
react-router itself needs a history object which changes for every URL,
we've created an isomorphic function that creates the entire thing.

On 07:42, Wed, 20 Jan 2016 Denis Nedelyaev notifications@github.com wrote:

> Hi @fabiosantoscode https://github.com/fabiosantoscode. Do your testing
> app recreates containers on each request using Relay.createContainer(...)?
> I can't see any other reason for such queryCache.size growth (well,
> probably except some bug in core-js polyfill for Map).
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/754#issuecomment-173119687.
",fabiosantoscode,2016-09-03 18:49:44
754,2016-07-15 04:21:47,"Hi, I'm facing the same behavior in our app. 
Is it reasonable to disable the `queryCache` and `fragmentCache` on the server? I can send a PR if that's ok.

I could try change how the react-router-relay create the routers if this makes more sense, but don't seem to be a simple change after a quick [look](https://github.com/relay-tools/react-router-relay/blob/master/src/QueryAggregator.js#L28-L118).
",rodrigopr,2016-09-03 18:49:44
754,2016-07-15 06:04:44,"@rodrigopr Does your app also redefine all the containers in every http request (by calling `createContainer`)? The fact that the cache size is being exceeded is an indication that the application is doing unnecessary recomputation on each request; you could probably get a general performance boost by defining components/containers just once (they're meant to be reusable). 

We would consider adding some way to reset these caches, but I suspect that doing so in this case would mask a larger performance problem in your app. 
",josephsavona,2016-09-03 18:49:44
754,2016-07-15 06:50:37,"I'm afraid react-router-relay and isomorphic-relay creates an instance of `QueryAggregator` (a kind of `RelayContainer`) per render (see [react-router-relay/blob/master/src/QueryAggregator.js](https://github.com/relay-tools/react-router-relay/blob/master/src/QueryAggregator.js#L186-L207) and [isomorphic-relay-router/src/prepareData.js](https://github.com/denvned/isomorphic-relay-router/blob/master/src/prepareData.js#L6-L12))
",rodrigopr,2016-09-03 18:49:44
754,2016-07-15 16:48:43,"@rodrigopr Hmm. Those packages may be somehow redefining containers, but there isn't anything immediately obvious in the sections you linked to. I would recommend adding a breakpoint in `buildRQL` or `getRelayQueries` for cache misses to see what's causing the memory to grow so much (maybe [here](https://github.com/facebook/relay/blob/master/src/container/getRelayQueries.js#L42)).
",josephsavona,2016-09-03 18:49:44
754,2016-07-15 17:03:33,"@josephsavona thanks for the quick feedback.

I'll debug it further on that line, but if I understood correctly the `Component` on the line you pointed is an instance of `QueryAggregator`, which are created once per request (on `isomorphic-relay-router/src/prepareData.js` I mentioned).

I'll also investigate how we can avoid creating a QueryAggregator instance per server-side render, but probably will require a big change in react-router-relay.
",rodrigopr,2016-09-03 18:49:44
754,2016-07-19 16:06:46,"We ran into this problem after putting a server-rendering relay app into production. Our app would crash every few hours. I forked relay to disable these queryCache and componentCaches and it appears to fix our problem.

https://github.com/tomconroy/relay/commit/c71e00bc84feb31b68f8714ab049a1e96fcc55b9

Deployed at 10am, the memory appears to have stabilized:

<img width=""2378"" alt=""nib-memory"" src=""https://cloud.githubusercontent.com/assets/1223187/16957084/fe106f9e-4da8-11e6-9dd8-5ca989dd0bef.png"">
",tomconroy,2016-09-03 18:49:44
754,2016-07-19 19:36:54,"Thanks for the feedback. Ideally we'd address the root cause - not repeatedly creating things that look like containers but aren't - but we're open to a PR that addresses this in Relay for now.

This could be a global, public function `Relay.disableQueryCache()` that sets a module-scoped flag in `getRelayQueries` and `buildRQL` to disable caching (where the flag would default to true). Note that the `typeof window === undefined` isn't a reliable check for the server, as window can also be undefined in other client environments (such as React Native). We're open to PRs along the lines of this `disableQueryCache()` function.
",josephsavona,2016-09-03 18:49:44
754,2016-07-22 08:01:56,"@tomconroy Are you using `isomorphic-relay-router`? `isomorphic-relay-router` creates a [new `QueryAggregator` for every request](https://github.com/denvned/isomorphic-relay-router/blob/master/src/prepareData.js#L6). Which is later passed to `RelayReadyStateRenderer` where `getRelayQueries` is [called for every `render()`](https://github.com/facebook/relay/blob/master/src/container/RelayReadyStateRenderer.js#L100). Causing the `queryCache` to grow.

Ideally there should be a way for `isomorphic-relay-router` to cache `QueryAggregator` for every possible route combination.
",nthtran,2016-09-03 18:49:44
754,2016-07-22 12:53:16,"Indeed, moving this over to https://github.com/denvned/isomorphic-relay-router/issues/40
",tomconroy,2016-09-03 18:49:44
754,2016-07-22 15:51:50,"> Ideally there should be a way for isomorphic-relay-router to cache QueryAggregator for every possible route combination.

Yes! This seems like the ideal solution to this issue.
",josephsavona,2016-09-03 18:49:44
754,2016-07-24 23:56:17,"@josephsavona I've been playing with this and I'm going to comment over on denvned/isomorphic-relay-router#40, but can you confirm for me that `getRelayQueries` is expecting a class/constructor and not an instance of a component?
",KCraw,2016-09-03 18:49:44
754,2016-07-25 02:12:33,"Yup, it expects a class. 
",josephsavona,2016-09-03 18:49:44
754,2016-07-25 06:46:01,"@josephsavona Thanks! Any chance of letting it accept either; i.e., check if Component is a function, and if not, use Component.constructor as the key?

The reason I ask is I don't think caching any sort of query config aggregator is going to work for SSR. Otherwise you're bound to have concurrency problems. And any sort of query config aggregator is likely going to have to fake the `RelayContainer` static methods with instance methods, since by definition the fragments on a query aggregator rely on the children it is wrapping. Nor do the `RelayContainer` static methods provide any sort of argument that might allow for a query config aggregator to identify an instance in an internal registry. And turning off caching to avoid the issue is undesirable. Maybe there is some implementation of a query config aggregator that avoids these problems, but if so, it eludes me. 

I'd be a little concerned with an 'accept an instance or a class' solution that there are other internal portions of Relay that rely on the Relay.Renderer Container prop being a class and not an instance. On the other hand, routing and nested routes seems pretty important, and having lots of nested Relay.Renderers sounds bad to me (but maybe I'm wrong on that). So a query aggregator is pretty much a given.
",KCraw,2016-09-03 18:49:44
754,2016-07-25 15:53:34,"> Any chance of letting it accept either; i.e., check if Component is a function, and if not, use Component.constructor as the key?

I don't think this solves the problem, since the constructor would presumably be shared amongst all `QueryAggregator` instances. This would mean that all aggregators would use the fragments of whatever aggregator happened to have been seen first -  not good.

I believe that the issue is that a new QueryAggregator is created for each new request. Instead, it should be possible to create one aggregator per unique route combination. Fo example if `/foo` can have two child routes `/foo/bar` and `/admin/baz`, then each of the latter would have a cached aggregator. It isn't clear why a new aggregator would need to be recreated when re-encountering a previously seen route, as only the params on the Route object change.

I'd really recommend submitting a PR to allow manually disabling the cache. If you are using `isomorphic-relay` you are not getting the benefits of the component/route cache anyway, so we might as well disable it to at least avoid the memory problem. Note that this cache is originally optimized for Relay running on low-end mobile devices: having the cache is not critical on the server.
",josephsavona,2016-09-03 18:49:44
754,2016-07-25 20:24:20,"Sorry to drag this convo out here, but I think it's relevant to anyone dealing with query aggregation and how to properly implement it with Relay, and not just iso-relay, react-relay-router, etc. 

> I don't think this solves the problem, since the constructor would presumably be shared amongst all QueryAggregator instances. This would mean that all aggregators would use the fragments of whatever aggregator happened to have been seen first - not good.

This brings up a concern with aggregation generally. `QueryAggregator` (as implemented in react-router-relay) appears to be generating responses to requests for fragments and queries dynamically, so when `getRelayQueries` is building its cache, we end up with with a single Component key in the `queryCache` which maps to a cache object with (eventually) a key for every possible route combination; e.g., something like this on the client (generated without SSR):

<img width=""1371"" alt=""screen shot 2016-07-25 at 1 36 30 pm"" src=""https://cloud.githubusercontent.com/assets/8075821/17112720/dec998a4-526c-11e6-9494-6de91204193b.png"">

From your perspective, is this problematic with how Relay does things internally?

> It isn't clear why a new aggregator would need to be recreated when re-encountering a previously seen route, as only the params on the Route object change.

My concern is whether anything async is happening between the time one request initiates use of the `QueryAggregator` and when it is released following the SSR. If so, another req for the same path from another user could modify the `QueryAggregator` while it is in use. If Relay doesn't do anything async until the actual GraphQL request, we could use one `QueryAggregator` cache for preparing data and another for the actual SSR, but you'd still have to guarantee nothing async would ever happen between checking out the `QueryAggregator` and the GraphQL request , and that's a problem if you use promises anywhere. You'd need to keep some sort of pool of QueryAggregators, you could even do it per unique route, but that would only slow down the memory leak.

Or as you suggest, just enable turning off the cache on the server. Definitely the simplest solution. Perfectly happy to work on it and submit a PR.

However, based on your reply, I'd like to verify that there isn't a problem with how `QueryAggregator` interacts with the query cache on the client, where we can't just turn the cache off to get around the issue. If so, then a completely different solution for query aggregation might be needed. 
",KCraw,2016-09-03 18:49:44
754,2016-07-26 05:28:01,"> It isn't clear why a new aggregator would need to be recreated when re-encountering a previously seen route, as only the params on the Route object change.

@josephsavona The problem was that _react-router-relay_, on which _isomorphic-relay-router_ is based, is designed in such a way that there supposed to be an unique instance of `QueryAggregator` per each `Router` instance, and trying to reuse a `QueryAggregator` concurrently would lead to problems even when the route is absolutely the same.

But I believe I finally managed to solve the issue by refactoring the container responsibility of `QueryAggregator` out to a new class `AggregateContainer`, and reusing instances of this class instead. See https://github.com/denvned/isomorphic-relay-router/commit/9a98a195f7d1287975958528ddf54275e28757d2
",denvned,2016-09-03 18:49:44
754,2016-07-26 15:34:38,"I think @denvned's solution fixes the issue with routing and query aggregation, and in a quick test, the cache seems to be building as intended by Relay on both the client and server.

That being said, I think we're still going to need to a way to manually disable Relay's caches on the server as @josephsavona suggested. This is completely independent of routing. 

Relay caches use the params in generating cache keys as well, which would quickly grow out of hand on the server (as @josephsavona stated, the cache was never intended for server use). Just imagine how many cache keys would be generated for a Component if something like a text search string were a param, or even just the ids of nodes for large applications. 
",KCraw,2016-09-03 18:49:44
754,2016-07-26 20:59:50,"Submitted a very simple PR that addresses the above issue and allows for disabling the query caches with `Relay.disableQueryCache()`

https://github.com/facebook/relay/pull/1302
",KCraw,2016-09-03 18:49:44
754,2016-07-27 04:46:36,"> Relay caches use the params in generating cache keys as well, which would quickly grow out of hand on the server

Or alternatively to disabling cache altogether this can be solved by incorporating LRU cache. This way we would not introduce new public API, also cache still might provide some performance benefit on the server.
",denvned,2016-09-03 18:49:44
754,2016-07-27 06:12:59,"I think an LRU would be a far more elegant solution for sure. It would also fix the issue client side--even though the likelihood of encountering the problem during normal usage is low, it still bothers me that it's possible. 
",KCraw,2016-09-03 18:49:44
754,2016-07-27 08:34:11,"Unless this serverside LRU cache can be turned off, I can personally say it is still an issue for me. Serverside users of Relay may not always want an in-process cache. In fact, it can be harmful to reactive architectures in situations where constructing a fresh version of the HTML is crucial.
",fabiosantoscode,2016-09-03 18:49:44
754,2016-07-27 09:14:04,"> In fact, it can be harmful to reactive architectures in situations where constructing a fresh version of the HTML is crucial.

@fabiosantoscode I don't quite understand what you mean. I think a combination of a container and a query configuration, which is used as the cache key, always yields the same set of relay queries, thus should be safe for caching (in case when the cache doesn't grow unboundedly).
",denvned,2016-09-03 18:49:44
754,2016-07-27 19:36:55,"> @fabiosantoscode I don't quite understand what you mean. I think a combination of a container and a query configuration, which is used as the cache key, always yields the same set of relay queries, thus should be safe for caching (in case when the cache doesn't grow unboundedly).

Thanks for the clarification, I seemed to have misread and thought an in-process cache for query _responses_ was being considered. I will keep quiet now :)
",fabiosantoscode,2016-09-03 18:49:44
754,2016-08-04 18:51:53,"@josephsavona  Any thoughts on using LRU cache for these two caches? Would you be open to a PR that implemented something like a `RelayLRUCache` module that would abstract all this away, and would allow globally setting the cache size (using `0` to turn them off and setting the default as `Infinity`)?

If so, I'm willing to take a stab at it in the nearish future (I'd have to make time), or maybe @denvned would be willing (he's cleverer than I am anyways).
",KCraw,2016-09-03 18:49:44
754,2016-09-03 13:26:49,"After an update to 0.9.3, which contains the above commit, it seems like our memory leak is completely gone. Further investigation will occur on my side, but my guess is that this issue can be closed.
",fabiosantoscode,2016-09-03 18:49:44
754,2016-09-03 18:49:44,"@fabiomcosta Thanks for confirming. I'm going to close as the use of this feature completely disables the caching that caused the bug - feel free to file a new issue if there are any remaining problems!
",josephsavona,2016-09-03 18:49:44
754,2016-11-03 16:35:22,"I think the query cache should be an LRU, or otherwise customizable (perhaps with continuation local context to be request-scoped).

Without some sort of caching, it's impossible to avoid doing extra work – the queries need to be built to fetch data, but then `Relay.ReadyStateRenderer` also needs to build the queries to actually do the render.
",taion,2016-09-03 18:49:44
754,2016-11-03 16:37:36,"Or – would it be possible to move `getQueries` to the Relay environment? At least in the OSS Relay code base (and in all of my own code), I don't call `getQueries` without access to an actual Relay environment. The top-level static implementation could just use `Relay.Store`.
",taion,2016-09-03 18:49:44
753,2016-01-19 21:35:53,"If I send to the relay component null as a fragment and this component also has other props with indexes(like string or array) then it can throw an error if fragment has instanceHash same as index in value one of these props

<S_CODE_TOKEN>

it's happened [here](https://github.com/facebook/relay/blob/master/src/container/RelayContainer.js#L586)
",yodairish,2016-02-08 22:13:50
753,2016-02-04 23:35:28,"Thanks for the report @yodairish. I am wondering, is this throwing an error, or just warning? If so, it may be a duplicate of #759, which is mitigated by 839eeb36814d (on `master`, but not in the current 0.6.1 release).
",wincent,2016-02-08 22:13:50
753,2016-02-08 22:13:50,"Going to optimistically close this one for now. If this turns out to be in error, please comment and I'll re-open.
",wincent,2016-02-08 22:13:50
752,2016-01-19 17:17:01,"Tested with 

<S_CODE_TOKEN>
",gabelevi,2016-01-20 23:10:35
752,2016-01-19 17:19:17,":+1: 
",josephsavona,2016-01-20 23:10:35
752,2016-01-20 22:46:00,"@facebook-github-bot shipit
",gabelevi,2016-01-20 23:10:35
752,2016-01-20 23:00:24,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/106852389697787/int_phab to review.
",facebook-github-bot,2016-01-20 23:10:35
752,2016-10-29 13:21:51,"I will not rubber stamp and land your change for you @gabelevi!  I can import it for you and you can get your change reviewed by someone though :)
",facebook-github-bot,2016-01-20 23:10:35
751,2016-01-18 16:54:55,"I have `User` that is implementing `Node` and have `id` field.
I have `Profile` that isn't implementing `Node` but have `id` field.
Also, `User` has `profile` field.

Here is a component decorator that requesting data:

<S_CODE_TOKEN>

Here is a mutation that updates data that used by the component.

<S_CODE_TOKEN>

Is it possible to use `FIELDS_CHANGE` like this?
",vslinko,2016-01-19 20:50:43
751,2016-01-19 15:13:07,"Are you expecting this mutation to update the `profileByNickname` field?
",NevilleS,2016-01-19 20:50:43
751,2016-01-19 15:53:30,"Yes
",vslinko,2016-01-19 20:50:43
751,2016-01-19 15:59:07,"The fields in the fat query need to match the fields in the local graph then. Since your `profileByNickname` field takes arguments I'm not 100% sure how to guarantee that, but if definitely will need to match. `profile` and `profileByNickname` won't match.

If you made your `profile` type into a node as well, you could just update the profile and match based off of ID. You'd want to make a `user { profiles }` connection in that case, though, to represent the relationship between the two types
",NevilleS,2016-01-19 20:50:43
751,2016-01-19 16:30:58,"The field name `profileByNickname` suggests that the component is querying the `profile` record directly, and not the user. However, the mutation `FIELDS_CHANGE` configuration is rooted at the user, which isn't queried by the component. Because the component queries the profile directly (not through the user), the mutation doesn't find any fields that need updating. If the mutation affects the profile directly and not the fields of the `user`, you might consider changing the mutation accordingly.
",josephsavona,2016-01-19 20:50:43
751,2016-01-19 20:50:42,"Thank you for your comments. Solved by adding `profile` to `FIELDS_CHANGE`
",vslinko,2016-01-19 20:50:43
751,2016-01-19 20:57:04,"@vslinko Glad that helped!
",josephsavona,2016-01-19 20:50:43
750,2016-01-16 21:47:19,"I have a mutation that simply toggles a boolean field on object implementing an interface and returns interface instance in payload. Toggled field is not a part of interface: I use inline fragments to specify concrete type. 

The problem is that when Relay constructs mutation query - it includes this field in query as if it was a part of the interface. So server rejects query on validation step.

This only happens with one concrete component. When this component is not mounted in React tree, mutation works just fine, but as soon as it is added - mutation produces invalid query and fails (see fragment definition below).

I am on Relay 6.1, babel-relay-plugin 6.3 and graphql 0.4.14:

Mutation:

<S_CODE_TOKEN>

When trying this mutation on `Topic` type, Relay produces following Query:

<S_CODE_TOKEN>

Field `isViewerSubscribed` is not a part of `Entity` interface, but is included in query. So server rejects this query with error:

<S_CODE_TOKEN>

Error only happens when this component is mounted:

<S_CODE_TOKEN>
",vladar,2016-02-10 03:16:51
750,2016-02-10 03:16:51,"Let's merge this with #782 
",josephsavona,2016-02-10 03:16:51
750,2016-10-13 16:49:33,"@vladar have u found any workaround for this?
",sibelius,2016-02-10 03:16:51
750,2016-10-13 21:51:04,"@sibelius The workaround is to use `RelayGraphQLMutation`.
",josephsavona,2016-02-10 03:16:51
750,2016-10-13 23:04:04,"do u have an example of RelayGraphQLMutation?
",sibelius,2016-02-10 03:16:51
750,2016-10-13 23:44:57,"Replied to you on another issue/pr - check out the unit tests!
",josephsavona,2016-02-10 03:16:51
750,2016-10-14 00:09:38,"tks for the reply, I'll check the unit test

tks for the awesome work on Relay 💯 
",sibelius,2016-02-10 03:16:51
749,2016-01-16 08:07:43,,pra85,2016-01-28 19:30:43
749,2016-01-20 16:48:23,"It's that time again, huh? Thanks for doing this!

Care to update this PR to include all references to ‘…-2015’ in Relay code, examples, and scripts?
",steveluscher,2016-01-28 19:30:43
749,2016-01-20 16:57:56,"@steveluscher I have updated the pull request to change all instances to 2016
",pra85,2016-01-28 19:30:43
749,2016-01-25 19:20:04,"@pra85 Thanks so much for taking the initiative to do this! @wincent noticed that our other projects are using `-present` to avoid the necessity for yearly updates. What do you think about moving forward with that change (#757) instead?
",josephsavona,2016-01-28 19:30:43
749,2016-01-25 21:13:33,"Also happy to close that one if you prefer to re-roll this one @pra85 (either way, they're both in need of a rebase).
",wincent,2016-01-28 19:30:43
749,2016-01-26 04:06:31,"@wincent I have rebased and updated this pull request to make it `-present` everywhere.
",pra85,2016-01-28 19:30:43
749,2016-01-27 20:26:30,"Nailed it. @facebook-github-bot import
",steveluscher,2016-01-28 19:30:43
749,2016-03-16 18:05:39,"Also, it's **@ Facebook 2015** in relay website footer
",vko-online,2016-01-28 19:30:43
749,2016-03-17 02:38:12,"@vko-online Thanks, I just sent #959 to update the remaining years.
",kassens,2016-01-28 19:30:43
748,2016-01-16 00:19:51,,cpojer,2016-01-19 18:50:37
748,2016-01-16 01:23:45,"@facebook-github-bot import
",cpojer,2016-01-19 18:50:37
748,2016-01-16 01:37:18,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1695071057440660/int_phab to review.
",facebook-github-bot,2016-01-19 18:50:37
748,2016-01-19 18:28:13,"@facebook-github-bot shipit
",cpojer,2016-01-19 18:50:37
748,2016-01-19 18:34:08,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1695071057440660/int_phab to review.
",facebook-github-bot,2016-01-19 18:50:37
748,2016-10-29 13:20:49,"I will not rubber stamp and land your change for you @cpojer!  I can import it for you and you can get your change reviewed by someone though :)
",facebook-github-bot,2016-01-19 18:50:37
747,2016-01-15 15:05:02,"Currently Flux is only mentioned once in the Relay docs (deep in the API reference for [Relay.Store](https://facebook.github.io/relay/docs/api-reference-relay-store.html#commitupdate-static-method)). I was initially very confused about the relationship between the Relay and Flux, and I don't think I'm alone.

I would be more than happy to help with the documentation here - I'd just like to hear what you'd like the official word on Flux w/r/t Relay to be.

For example, @josephsavona summed this up succinctly in #168 -

> Relay is an implementation of the Flux pattern

There is probably more to say, e.g. on the use of Flux alongside Relay for ephemeral client state (before #114 is closed).
",chrisbolin,2016-01-23 00:43:52
747,2016-01-22 21:20:09,"Thanks for your question! I have an answer for you, but we want to make sure to keep signal strong in the GitHub issue tracker by focusing on issues and enhancements – this helps to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",josephsavona,2016-01-23 00:43:52
747,2016-01-23 00:43:23,"Sounds good @josephsavona ! https://stackoverflow.com/questions/34958295/whats-relays-relationship-to-flux
",chrisbolin,2016-01-23 00:43:52
747,2016-01-23 00:44:26,"Again, if you'd like to incorporate your answer into the Relay docs I'd be happy to do it.
",chrisbolin,2016-01-23 00:43:52
746,2016-01-15 00:16:02,"Trivial change: making the ""Treasure"" box color blue instead of green. I honestly couldn't tell the difference between the red and green at first :tongue:  
",chrisbolin,2016-01-20 18:35:37
746,2016-01-20 16:50:05,"Awesome.

@facebook-github-bot import
",steveluscher,2016-01-20 18:35:37
746,2016-01-20 16:53:03,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/893580907405456/int_phab to review.
",facebook-github-bot,2016-01-20 18:35:37
745,2016-01-15 00:04:48,"This is a hard one to describe succinctly, so excuse the length. I think this is a bug, but can't rule out the possibility that we're just doing something wrong here...

We noticed some peculiar behaviour where our mutation queries get formed incorrectly in some circumstances. It seems that if multiple components register fragments for a linked field that is initially returned as `null`, the Relay store can get into a bad state wherein future mutation queries will only refetch the first fragment on that field, even though the fat query should include both. Basically, the store doesn't seem to be tracking fragments correctly in this case. Let me try to explain that in some more detail.
### Reproduction

I haven't built a repro for this in something like Relay Playground yet. I can probably figure out a way to do that, but I'm not particularly familiar with writing schemas with `graphql-js` yet, so instead I've just typed up the simplest example I could come up with... sorry.

(EDIT: I added a unit test that reproduces the issue here: https://github.com/NevilleS/relay/commit/a39ab59e62c0d466e7138cc90ea022e659f2408c)
### Example

Let's say we have this great app where we track `Users` and `Birthdays`.  A `User` type has a single `birthday` field, and a `Birthday` type has `year,`month`, and`day`fields, which are strings. Both`User`and`Birthday`are nodes, so they have ids. Our app has two components:`UserComponent`and`UserDetailsComponent`. We have a single`SetBirthdayMutation`that is used to create or update a`User`'s`birthday`.

Generally speaking, the user flow is something like this:
1) Navigate to some kind of user profile, where we use a `UserComponent` to render basic information about the user, including their birth year if the birthday is set.
2) Click on a ""details"" link which uses a `UserDetailsComponent` to render all the birthday information: year, month, and day - if it's set. There's also a form here that lets you edit the birthday data.
3) Complete a form that submits a `SetBirthdayMutation` that creates or updates the `birthday` field.

Step 1) `UserComponent` just shows the user's birthday year:

<S_CODE_TOKEN>

Step 2) `UserDetailsComponent` shows the month and day

<S_CODE_TOKEN>

Step 3) `SetBirthdayMutation` takes a `user_id`, `year,`month`, and`day`, and creates/updates a`Birthday`for the given`User`. The fat query looks like this:

<S_CODE_TOKEN>

Let's assume we use `FIELDS_CHANGE` and provide the `user_id` as the parentID, etc. etc.
### The Problem

Here's the thing - the `birthday` field for a user isn't defined until that mutation is run at least once, which creates the field. That means if we run those steps in order, the server returns `birthday: null` for the first step, and Relay doesn't even include the `birthday { day }` fragment in the second query, since it already knows that the `birthday` doesn't exist, I guess (that's a reasonable optimization). That looks something like this:

<S_CODE_TOKEN>

Alright, here's the curious part. When we run the mutation following steps 1 & 2, it looks something like this (omitting some obvious things like clientMutationId for brevity):

<S_CODE_TOKEN>

For some reason, **the mutation doesn't try to fetch birthday { month, day }**\* if you run that sequence. However, if you go straight to the `UserDetailsComponent` without doing the `UserComponent` first (e.g. only steps 2 and 3), the sequence looks more like this

<S_CODE_TOKEN>

In this sequence, Relay correctly tracks the second `Birthday` fragment, so we get back the new birthday data we were expecting.
### Theory

It seems that the problem is somehow related to there being two fragments defined on `Birthday`, and only the first one is being tracked. I'm guessing that the fact that `birthday: null` is returned is important, and probably ends up meaning that the fragment isn't added to the tracker. Since the record store isn't updated by either query (no data), and the tracker isn't updated, the intersection performed by `RelayMutationQuery` results in a query that only contains the fragment of the first query.

Thanks for your help!
",NevilleS,2016-02-09 17:16:12
745,2016-01-15 00:19:37,"Oops, almost forgot - this is on react-relay `0.6.0`
",NevilleS,2016-02-09 17:16:12
745,2016-01-15 15:17:16,"OK I did some more investigation this morning and I think I've tracked down what's causing this issue for me...

When the first query executes, a `trackedNode` is set up for the `User` that keeps track of the `Birthday` fragment (where we ask for the `year`).

When the second query executes, `diffRelayQuery` traverses the query constructed by the new container including our more extensive fragment on `Birthday`. However, when it visits the `birthday` field, it notices that the `dataID` is `null`, so it doesn't include the fragment in the new query. This is a reasonable optimization for the query, but it has the **side-effect** of not updating the parent `trackedNode` with the fact that there is a container that wants this new fragment!

I'm talking specifically about the code here: https://github.com/facebook/relay/blob/master/src/traversal/diffRelayQuery.js#L400

If I change the code to this instead, the final mutation query works well:

<S_CODE_TOKEN>

This, of course, means we end up _not_ pruning the fragment from the second query, so we end up requesting fields off a linked field we _know_ is `null`. So it's not necessarily a fix, and it might even end up meaning we remove the tracking of the original fragment (not sure yet), but it definitely explains what I'm seeing.
",NevilleS,2016-02-09 17:16:12
745,2016-01-15 18:36:44,"I've written a unit test https://github.com/NevilleS/relay/commit/a39ab59e62c0d466e7138cc90ea022e659f2408c that reproduces what I'm seeing - subsequent queries that request additional data off of a `null` node are not tracked.

I'm happy to submit a PR, too, but I don't know exactly how I might break other things by messing with `diffRelayQuery`... something as trivial as this (https://github.com/NevilleS/relay/commit/c5abe4616fb509d57377e9c14636f0df6b93a9f8) fixes the issue I see with my mutation and constructs the second query optimally (not re-requesting `address`), but I'm not convinced it'd be that easy. Also, my unit test still fails because the tracked query doesn't include the `lastName` , so I'm pretty sure it's still wrong, although I could just be misunderstanding how `RelayQueryTracker` works.

I'm going to stop messing with this issue for now; let me know what you guys think should happen in cases like this :+1: 
",NevilleS,2016-02-09 17:16:12
745,2016-01-22 19:18:43,"Any ideas? Like I said I'm happy to dig around a bit and submit a PR as needed, but I'd appreciate a bit of guidance since I'm poking around the codebase a bit blindly.
",NevilleS,2016-02-09 17:16:12
745,2016-01-27 22:40:41,"I am also having a having a similar fetching data with relay.
Here are the details:
1. Load initial page
   - queries a field `account` on `viewer` via Relay.Container
   - `account` field comes back `null` (correct behavior)
2. Redirect user to new page to fill out form (as they do not have an account)
   - User correctly fills out form and submits
   - account mutation is fired and completes successfully
3. User gets redirected back to initial page
   - `account` field is now no longer `null` when API is queried, but Relay does not re-fetch data or store user's form data locally
   - page is rendered incorrectly as Relay still thinks `account` is `null`

Problem is that Relay SHOULD refetch or store locally the `account` data since it will no longer be `null`, but it doesn't.

Ex: Mutation code:

<S_CODE_TOKEN>

**_NOTE**_
@NevilleS's [Patch](https://github.com/NevilleS/relay/commit/c5abe4616fb509d57377e9c14636f0df6b93a9f8) fixes this issue that I'm having.
",larsonjj,2016-02-09 17:16:12
745,2016-01-27 22:43:11,"Well, calling it a PR is a bit generous, but good to hear.

Like I said, I'm happy to clean up the code a bit and submit a real PR, I just want to make sure my change is doing the right thing.
",NevilleS,2016-02-09 17:16:12
745,2016-01-27 22:44:49,"@NevilleS, It definitely fixes the issue I've been having. It would be great if you submitted a PR to see if this gets more attention from the FB team.
",larsonjj,2016-02-09 17:16:12
745,2016-01-27 22:45:14,"@NevilleS can you submit a PR with your test and fix?
",josephsavona,2016-02-09 17:16:12
745,2016-01-27 22:48:20,"Yup, will do. Is that fix essentially correct though, or am I not considering some important side effect?
",NevilleS,2016-02-09 17:16:12
745,2016-01-27 22:53:25,"I'm not confident this is 100% correct, I updated my unit test to highlight this. I'll open a PR and we can discuss there, though.
",NevilleS,2016-02-09 17:16:12
745,2016-02-04 04:32:40,"@josephsavona my use case is exactly the same as @larsonjj, except rename `account` to `user` :D 
",dminkovsky,2016-02-09 17:16:12
744,2016-01-14 18:53:43,"Let's say we have a posts connection, with `first: 10`. We update that to `20` to fetch 10 more posts.
Great, with relay's store, we'll only fetch 10 more posts without re-fetching the rest, this is awesome.

Now what if one of the 10 ""old"" posts had changed ? Will we ever see a possibility for a GraphQL server to invalidate Relay's client side cache ?

Just wondering if you guys thought of this along the way, and if it's in the plans to introduce something like that.
",xuorig,2016-01-18 13:38:07
744,2016-01-18 13:20:02,"Great question! This is exactly the purpose that GraphQL subscriptions are meant to address. Determining when a previously cached datum should be invalidated is a non-trivial problem given that many inputs can affect any one output, so we've opted to pursue event-based subscriptions to balance practicality and liveness. The [blog post](http://graphql.org/blog/subscriptions-in-graphql-and-relay/) goes into much more detail about the rationale for this approach, and we're tracking work on implementing this in open source at #541. 

Does that address the question?
",josephsavona,2016-01-18 13:38:07
744,2016-01-18 13:38:07,"Thanks @josephsavona, wasn't sure if subscription were the answer to that problem!
",xuorig,2016-01-18 13:38:07
743,2016-01-14 02:17:29,"I try to get a connection with pagination working.

![pagination](https://cloud.githubusercontent.com/assets/1776695/12314132/1174bc02-bad3-11e5-8eef-1852a9cae9c8.png)

But it looks like that there is nothing in Relay that supports the basic pagination features like:
- total pages
- current page
- go to specific page

Unfortunately `first after` and `last before` are not good enough to implement proper pagination.

I even tried to extend the connection like this:

<S_CODE_TOKEN>

But even this is a dead end since `currentPage` is not updated with subsequent calls.

Is there anything in Relay to create proper pagination?

If not, can you guys implement a new connection that can do proper pagination?
",BerndWessels,2016-01-14 04:14:19
743,2016-01-14 04:14:19,"Closing as this is a duplicate of #540 - feel free to ask questions or comment there. 
",josephsavona,2016-01-14 04:14:19
743,2016-01-14 04:21:15,"Note that @taion has suggested a very simple way to achieve this type of pagination - see his comments and the discussion at https://github.com/facebook/relay/issues/540#issuecomment-155531357
",josephsavona,2016-01-14 04:14:19
742,2016-01-13 18:55:13,"I have a recursive data structure to be fetched and displayed. I have a graph ql type as follow:

<S_CODE_TOKEN>

Now I wanted to incrementally fetch data and hence used to react classes HumanList and HumanItem, where I've used relay to fetch children only when a item is clicked. In my actual code relay gives children a null on very click i.e. on rendering very first set of children. I tried test code on relay playground and found similar issue. [Here](https://gist.github.com/shahankit/409c8640b01f1d910fb0) is the link to gist. Playground.js contains the code part and Playground.gql.js contains schema part.

I've already checked #246 and #536 but none of them helped.
",shahankit,2016-06-28 00:31:56
742,2016-01-19 16:56:46,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",josephsavona,2016-06-28 00:31:56
742,2016-01-19 17:03:21,"I created a stackoverflow for same [here](https://stackoverflow.com/questions/34882707/relay-fetch-for-recursive-data-returns-null). Any insights to issue are greatly welcome or temporary work around for issue if possible.
",shahankit,2016-06-28 00:31:56
742,2016-01-19 17:08:19,"Thanks! Let's move discussion to the SO question.
",josephsavona,2016-06-28 00:31:56
742,2016-01-21 10:27:29,"@josephsavona This is actually a bug, so can you please reopen the issue.
",shahankit,2016-06-28 00:31:56
742,2016-01-21 16:04:21,"@shahankit just saw your SO comment - yeah this looks like a bug. I suspect this has to do with the fact that the schema doesn't use the `Node` interface, which means calls to fetch recursive data can't use `node(id: $id)` calls. We'll keep this open to track work on a fix, but as a workaround I would suggest implementing `Node` and see if that helps.
",josephsavona,2016-06-28 00:31:56
742,2016-06-28 00:31:56,"You were right all along. This was a bug. Fixed in https://github.com/facebook/relay/issues/1243
",steveluscher,2016-06-28 00:31:56
742,2016-06-28 06:45:45,"@steveluscher thanks.
",shahankit,2016-06-28 00:31:56
741,2016-01-13 17:12:46,"I get this message when importing react-relay with webpack

ReferenceError: self is not defined: self is not definedget home
",mattiasewers,2016-01-19 17:06:38
741,2016-01-13 19:00:39,"I've seen this crop up when trying to include Relay on the server side. You can use this library to help get around that for now: https://github.com/denvned/isomorphic-relay

Another technique is to create your own custom network layer and inject that, which is what I've done.
You can see that implementation here: https://gist.github.com/dphaener/a5c0a6ab87cb2297483f

In essence what's happening is Relay is trying to use `fetch` on the server. In my network layer I'm using isomorphic-fetch.
",dphaener,2016-01-19 17:06:38
741,2016-01-13 20:42:03,"@dphaener Yes that was the problem and isomorphic-relay solved it for me. Thanks man! Might try your solution as well
",mattiasewers,2016-01-19 17:06:38
741,2016-01-19 17:06:38,"@mattiasewers thanks for reporting this. We're aware of the compatibility issue with Relay in non-web environments - @skevy's pending #713 addresses the issue with `self`. For now, `isomorphic-relay` is a good workaround.
",josephsavona,2016-01-19 17:06:38
741,2016-01-29 07:20:26,"@dphaener If I'm not missing something, the problem with the second approach you mention is that you don't even get the chance to inject your custom network layer. Currently Relay loads its own fetch-dependent `RelayDefaultNetworkLayer` module at the very beginning.
",guigrpa,2016-01-19 17:06:38
741,2016-01-29 17:35:20,"@guigrpa Relay will use the `RelayDefaultNetworkLayer` if you do not inject one:

`Relay.injectNetworkLayer(new MyCustomNetworkLayer())`

I think I may have left that part out of my gist. :)

Good docs on this here: https://facebook.github.io/relay/docs/guides-network-layer.html#content
",dphaener,2016-01-19 17:06:38
740,2016-01-13 07:52:59,"Ref #735 
",vslinko,2016-03-10 22:30:28
740,2016-01-13 09:05:21,"I can squash commits if you want.
",vslinko,2016-03-10 22:30:28
740,2016-01-13 16:11:29,"@vslinko thanks for this! No need to squash commits ;-)
",josephsavona,2016-03-10 22:30:28
740,2016-01-20 17:01:48,"Did we decide to change this to “non-negative integers” to allow for 0 to mean “fetch the first zero” (eg. fetch none)? @josephsavona @kassens 
",steveluscher,2016-03-10 22:30:28
740,2016-01-20 17:42:54,"> Did we decide to change this to “non-negative integers” to allow for 0 to mean “fetch the first zero” (eg. fetch none)? 

Yes. @vslinko can you update the PR?
",josephsavona,2016-03-10 22:30:28
740,2016-01-20 20:03:27,"Yes, I'm going to update the PRs in the near future.
",vslinko,2016-03-10 22:30:28
740,2016-03-10 20:23:11,"@vslinko Are you planning on updating this PR to ""non-negative integers""?
",yungsters,2016-03-10 22:30:28
740,2016-03-10 20:29:06,"Updated
",vslinko,2016-03-10 22:30:28
740,2016-03-10 20:38:36,"Thanks!
",yungsters,2016-03-10 22:30:28
740,2016-03-10 20:38:37,"@facebook-github-bot shipit
",yungsters,2016-03-10 22:30:28
740,2016-03-10 20:51:33,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/441394582713062/int_phab) to review.
",facebook-github-bot,2016-03-10 22:30:28
739,2016-01-13 02:09:49,"Imagine you want to update a person.
Somewhere in your app you want to update only the email.
Somewhere else you want to update almost all properties.
And somewhere else you only want to update only the language.

At the moment it seems that you have to write a new mutation for each of these instead of having only one mutation like `updatePersonMutation` with optional parameters.

So what I suggest is basically allow optional parameters on mutations.

If that is already possible please let me know how.
",BerndWessels,2016-01-15 05:01:15
739,2016-01-15 00:28:41,"You can totally do this. Just make the `UpdatePersonMutationInput` have optional fields like `email`, `language`, etc. The server will need to then react to which fields are provided. In fact, Relay mutations _require_ there to just be a single parameter (`input`), but you define the shape of that param entirely.
",NevilleS,2016-01-15 05:01:15
739,2016-01-15 05:01:15,"@NevilleS Thanks you are right.
",BerndWessels,2016-01-15 05:01:15
738,2016-01-13 01:16:17,"Hello

It seems that at the moment it is not possible to provide a callback to `Relay.createContainer` which will be called when the initial and all following data is fetched.

In my example I need to know a value of the initially fetched data outside of the `render` function of my wrapped component.

It should be possible to supply a callback to the `Relay.createContainer` function that gets called whenever data was fetched and before the wrapped component gets updated.

If this is already possible can you please give an example?
",BerndWessels,2016-01-14 07:41:32
738,2016-01-14 07:41:32,"Thanks for your question! I have an answer (this is trivial), but as you know we're trying to keep GitHub issues focused on bugs and enhancements. Can you ask on stack overflow and lost a link here? Thanks for your cooperation!
",josephsavona,2016-01-14 07:41:32
738,2016-01-14 19:00:05,"@josephsavona Thank you, here's the [question](http://stackoverflow.com/questions/34797581/is-there-a-fetched-callback-to-relay-createcontainer).
",BerndWessels,2016-01-14 07:41:32
737,2016-01-12 23:35:54,"So, I spent a couple days attempting to find a way to pass variables through as query argument values in underlying fragments in a `Relay.Route`

A co-worker pointed out to me this comment: https://github.com/facebook/relay/issues/309#issuecomment-167403119

Apparently, `variables` is passed in, along w/ the Component into the method callbacks for defining the `static queries` on a `React.Relay` object...

Unfortunately, this functionality isn't documented as far as I can see: https://facebook.github.io/relay/docs/api-reference-relay-route.html

Maybe I'm missing it?

If not, it would probably save others a lot of time to have this mentioned somewhere along w/ maybe some explanation as to how `variables` can be used w/ `Component.getFragment()`?
",RavenHursT,2016-09-03 00:28:03
737,2016-03-31 23:27:57,"@josephsavona, any input on this?
",edvinerikson,2016-09-03 00:28:03
737,2016-03-31 23:35:02,"We should definitely update the docs with the API for passing variables from route/parents to child containers. The linked comment has most of the details, PRs welcome!
",josephsavona,2016-09-03 00:28:03
737,2016-09-03 00:28:03,"Going to close this as we're working on preparing for the release of [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable), so it is very unlikely that we'll be allocating resources to documenting the old APIs at this time. Like @josephsavona said, however, and we'd be happy to merge in a PR addressing this issue, but I'm still going to close this for now in order to clean out the issue tracker a bit.
",wincent,2016-09-03 00:28:03
736,2016-01-12 20:49:54,"I'm working on #541 and `handleRangeAdd` in `writeRelayUpdatePayload` has an invariant on `clientMutationID` being in the payload.  This won't be the case for a subscription payload configured as a RANGE_ADD.

From what I can tell the `clientMutationID` is used in order to link up a temporary node ID added by an optimistic mutation with the real one from the mutation payload.  This won't be necessary for subscriptions.

I replaced the invariant with a conditional check on the `clientMutationID`.  I also duplicated the test the for non-optimistic RANGE_ADD's without a `clientMutationID` which I'm not sure is necessary or not.
",eyston,2016-03-16 23:37:57
736,2016-01-12 21:37:31,"I updated the tests to use a `subscription` query to make it clear what functionality is being tested.  This required adding a subscription root with a field.  I'm not sure the proper naming conventions that would like to be maintained for the subscription schema but can change them to match.  Also, `Relay.QL` requires subscriptions to have a single `input` with at least `clientSubscriptionID` so that was done.  I'd be interested in the requirement of `clientSubscriptionID` if time permits :).
",eyston,2016-03-16 23:37:57
736,2016-01-25 21:56:24,"@eyston Sorry for the delay in providing feedback: this is great. Other than the one piece of feedback above, this is ready to import.
",josephsavona,2016-03-16 23:37:57
736,2016-01-30 19:46:03,"Updated with feedback -- which was way smarter check condition.  Also rebased off master to fix CI.  I can squish this or something too, dunno conventions!

Sorry for delay myself.  Busy week!  Good times.
",eyston,2016-03-16 23:37:57
736,2016-01-30 23:42:27,"@eyston thanks for this, looks great and we'll import next week. There's no need to squash commits for a single PR, our tool imports the combined patch. Thanks for offering though ;-)
",josephsavona,2016-03-16 23:37:57
736,2016-02-26 14:42:30,"@josephsavona Any update on getting this merged? Same for #779.
",Globegitter,2016-03-16 23:37:57
736,2016-08-22 17:08:20,"Following up on this – did this code ever get pulled in? Right now it's not possible to apply a RANGE_ADD subscription response without setting a dummy `clientMutationId`.
",taion,2016-03-16 23:37:57
736,2016-08-22 17:25:51,"I think we can solve this by moving: [writeRelayUpdatePayload.js#L320-L326](https://github.com/facebook/relay/blob/master/src/traversal/writeRelayUpdatePayload.js#L320-L326]) to [writeRelayUpdatePayload.js#L376-L383](https://github.com/facebook/relay/blob/master/src/traversal/writeRelayUpdatePayload.js#L376-L383)

like it is done here: [RelayStoreData.js#L376-L383](https://github.com/facebook/relay/blob/master/src/store/RelayStoreData.js#L376-L383)
",edvinerikson,2016-03-16 23:37:57
736,2016-08-22 17:27:04,"I feel like this PR does the trick pretty well, though.
",taion,2016-03-16 23:37:57
736,2016-09-02 19:43:35,"Ping! We're working around this in relay-subscriptions right now by adding a dummy `clientMutationId` that won't conflict, but it'd be good if we could remove that hack.
",taion,2016-03-16 23:37:57
735,2016-01-12 09:40:15,"Copy of https://github.com/facebook/graphql/issues/104

I'm trying to implement pagination algorithm for my data and I don't know how to handle cases when `first` and `last` are negative.

What is your opinion about this?

ref: https://facebook.github.io/relay/graphql/connections.htm#sec-Pagination-algorithm

I think that spec should answer that question.
",vslinko,2017-01-30 19:46:34
735,2016-01-13 02:48:37,"I agree with @leebyron's response in the original issue - `first` and `last` must be positive integers; this should be added to the Relay connection spec and `graphql-relay-js`'s connection helper should throw on invalid first/last values. 

Any interest in submitting a PR for this?
",josephsavona,2017-01-30 19:46:34
735,2016-01-13 07:48:00,"I can submit PR for `graphql-relay-js` and I can try to submit to Relay spec, but I'm not sure about my English.
",vslinko,2017-01-30 19:46:34
735,2016-01-14 04:10:27,"@BerndWessels this issue is about the semenatics of first/last calls and is largely resolved. Can you move your comment to #540?
",josephsavona,2017-01-30 19:46:34
735,2016-01-15 00:15:54,"Is there a reason not to allow 0? This might be useful for a case where you initially show no comments on an object and after pressing ""see more comments"" you increase from 0 upwards.

I would think we should update the spec and tests to non-negative. Thoughts?
",kassens,2017-01-30 19:46:34
735,2016-01-15 08:38:47,"@kassens In current implementation `first: 0` means ""give me them all"".
I think it isn't good decision and I agree with you that `first: 0` could be helpful in some cases, so I can change my PRs.

@josephsavona what are you think?
",vslinko,2017-01-30 19:46:34
735,2016-01-15 09:25:36,"I trust @kassens ;-)

My first thought was that `first:0` would be the same as `@include(if:false)`, but there might be fields on the connection that you want to fetch other than `edges`. Changing the semantics of first:0 to return zero edges makes sense, but we should verify that this won't impact products before making the change. Perhaps we could start with a warning in the writer if first is zero but edges are returned. 
",josephsavona,2017-01-30 19:46:34
735,2016-01-15 18:17:12,":+1: to `first: 0` just returning no edges. I'm an avid user of `connectionFields` and had been assuming I'd be able to use `first: 0` when I wanted no edge results.
",KyleAMathews,2017-01-30 19:46:34
735,2016-03-04 16:44:59,"Facebook's GraphQL servers throw an error when it receives either zero or a negative number. Having negative numbers throw an error is clearly the right call. I can go either way on zero; I very much like the current Facebook GraphQL server behavior since sending `first: 0` is almost always an indication that the client didn't need to send that query, but I don't know if we need to express an error/empty opinion in the connection spec.
",dschafer,2017-01-30 19:46:34
735,2017-01-30 19:46:34,"With 4eae620d86ed7fce1ee463c2fca88eb690d9, I believe there's nothing left to do here. Thanks to everybody for contributing to the discussion!",wincent,2017-01-30 19:46:34
734,2016-01-11 03:34:09,"A mutation doesn't require variables necessarily, but the class wants that function defined. Of course, can easily create the function and return an empty object, but why?
",ryancole,2016-01-11 07:28:48
734,2016-01-11 07:28:48,"In general we've found that explicit APIs lead to more consistent code and fewer unintended program behaviors. In this case, it's best to be explicit that there are no variables for a given mutation, as opposed to accidentally forgetting to specify them or specifying them incorrectly. As a counter example, if `getVariables` were optional then you could accidentally misspell the method name and wonder why no variables were being sent to the server. 

I'm going to close this since it isn't an issue per se, but feel free to ask follow-up questions and we'll try to answer. 
",josephsavona,2016-01-11 07:28:48
733,2016-01-10 05:35:35,"use fixed version of `react-router` to avoid breaking the peer dependency
currently it throws

<S_CODE_TOKEN>
",dmitriiabramov,2016-01-12 04:16:00
732,2016-01-10 04:38:27,"Renames the babel plugin internally, fixing #256. A follow up PR will change the package.json to use the new plugin name.
",devknoll,2016-05-08 19:30:12
732,2016-01-10 19:49:58,"@devknoll @steveluscher @josephsavona Will this replace the `babel-relay-plugin` on NPM ?
If so it should still be in sync with the version number of `react-relay` to avoid confusion ?!
But it looks like there is a `1.0.0` published to NPM - but `react-relay` is only `0.6.1`.
Can you please fix this or am I mistaken here?
",BerndWessels,2016-05-08 19:30:12
732,2016-01-10 20:10:08,"@BerndWessels Yes, the intention would be to publish a `babel-plugin-relay@0.6.3` at the same time as deprecating `babel-relay-plugin@0.6.3`.
",devknoll,2016-05-08 19:30:12
732,2016-01-10 20:44:03,"@devknoll OK, but why is there a `babel-plugin-relay` with version `1.0.0` already published to NPM? That seems wrong and might lead to confusion?
",BerndWessels,2016-05-08 19:30:12
732,2016-01-10 20:45:49,"@devknoll Oh, I see - just for holding on to the name on NPM - so you will delete the `1.0.0` later I guess.
",BerndWessels,2016-05-08 19:30:12
732,2016-01-19 21:38:18,"@devknoll import this!
",josephsavona,2016-05-08 19:30:12
732,2016-01-20 07:48:17,"@facebook-github-bot import
",devknoll,2016-05-08 19:30:12
732,2016-03-03 19:16:06,"So besides rebasing, what else do we need to do to get this in?
",yungsters,2016-05-08 19:30:12
732,2016-04-14 16:09:43,"A quick update here: we understand that this can be helpful in OSS. At the same time, we use this plugin heavily internally, and this PR requires quite a bit of work to successively land and reconfigure things in a few environments. It's a lot of work and doesn't seem to be super high-value relative to other feature requests and core improvements. 

The easiest thing might be to temporarily provide two packages, where `babel-relay-plugin` just re-exports `babel-plugin-relay` (or vice-versa). That way we can land the PR w/o breaking anything and then separately update our internal configuration as time permits.

Anyone interested in working on this?
",josephsavona,2016-05-08 19:30:12
732,2016-05-08 19:30:12,"I'm going to close this - see my previous comment for more context. We're happy to do the rename, but it has to be gradual in order to not break things.
",josephsavona,2016-05-08 19:30:12
731,2016-01-09 09:26:12,"say i have this query in my code:

<S_CODE_TOKEN>

i will get an error says: `url is used as an alias more than once. Please use unique aliases.`

if i remove the first url field of VoiceBlock, everything works fine
",filod,2016-05-08 20:11:51
731,2016-01-10 06:17:39,"Thanks for reporting this. This seems like a bug in the validation logic (which is only a DEV time warning); it doesn't take into account that the same alias can be safely used in fragments of different concrete types. 
",josephsavona,2016-05-08 20:11:51
731,2016-01-10 08:16:17,"yes, but `react-native` will take `console.error` as an error and brings up a redbox
",filod,2016-05-08 20:11:51
731,2016-05-08 20:11:51,"Following up here, this is actually invalid GraphQL. The same alias, `url`, is being used to represent two different pieces of information that could appear at the same level of the output: `VoiceBlock.url` and `ImageBlock.url(width: ..., larger: ...)`. These can't be merged, so at least one of the fields must be given a different alias.
",josephsavona,2016-05-08 20:11:51
730,2016-01-08 22:42:31,"In certain cases, if a RelayContainer is mounted and unmounted quickly, a warning about setting state on an unmounted component is thrown.

This happens due to the fact that in the callback for fragment data updates from the GraphQLStoreQueryResolver, we `setState` without checking whether or not the component is mounted.

This PR resolves that issue.
",skevy,2016-01-20 19:16:02
730,2016-01-08 23:10:27,"Thanks!

@facebook-github-bot import
",steveluscher,2016-01-20 19:16:02
730,2016-01-08 23:12:53,":rocket: 
",skevy,2016-01-20 19:16:02
730,2016-01-08 23:14:38,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/579169252235718/int_phab to review.
",facebook-github-bot,2016-01-20 19:16:02
729,2016-01-08 20:09:17,,steveluscher,2016-01-08 21:50:37
729,2016-01-08 20:09:27,"@facebook-github-bot import
",steveluscher,2016-01-08 21:50:37
729,2016-01-08 20:20:14,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/717402368362014/int_phab to review.
",facebook-github-bot,2016-01-08 21:50:37
728,2016-01-08 20:04:43,,steveluscher,2016-01-08 21:40:35
728,2016-01-08 20:04:53,"@facebook-github-bot import
",steveluscher,2016-01-08 21:40:35
728,2016-01-08 20:09:49,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/463068260550969/int_phab to review.
",facebook-github-bot,2016-01-08 21:40:35
727,2016-01-08 02:06:24,"Hi, I have an extremely simple query/route that just needs to query a particular team object and return it. But when the query is sent, it looks like it has the argument stripped out. I'm new to Relay so it may just be something I'm missing, but I believe I've set up everything according to the guides:

<S_CODE_TOKEN>

When I render the ContainerComponent, I expect this to fetch the Team with a `uuid` of `uuid-team-1`, but the query that gets created looks like this:

<S_CODE_TOKEN>

I would expect that the query would include the argument, something like `query Team{team(uuid:""uuid-team-1"")...`

Is there something I'm missing? Any help would be great. Relay looks awesome I just want to get it working!
",dhoward,2016-02-05 16:04:39
727,2016-01-10 19:25:22,"Thanks for your question! We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",devknoll,2016-02-05 16:04:39
727,2016-01-31 18:22:09,"Sorry for the slow reply. After messing around with it more, I think the issue lay elsewhere in my dev setup, with React loading multiple versions due to Relay requiring a different version than the one I was initially using.  When I tried running my code on a blank react starter project, it worked fine. I can still post the issue if you want but I don't want to send anyone on a wild goose chase tracking it down, since it looks like it may have been specific to my setup. Thanks!
",dhoward,2016-02-05 16:04:39
727,2016-02-05 16:04:39,"@dhoward thanks for following up on this. We have tests to confirm that queries are printed with the expected arguments, and since this worked correctly on a clean setup it definitely sounds like this was a configuration issue.

If you do see the issue again, don't hesitate to comment here so we can reopen and investigate further. Thanks!
",josephsavona,2016-02-05 16:04:39
726,2016-01-07 19:31:54,,steveluscher,2016-01-08 18:20:33
726,2016-01-07 19:32:10,"@facebook-github-bot import
",steveluscher,2016-01-08 18:20:33
726,2016-01-07 19:41:24,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1646297272288808/int_phab to review.
",facebook-github-bot,2016-01-08 18:20:33
725,2016-01-07 18:48:36,"This works fine in 0.5.0.

I have a route that fetches data

<S_CODE_TOKEN>

when I click the `sessions` link, we transition to `Sessions` where I need to grab more data from the query. 

<S_CODE_TOKEN>

Relay 0.6 doesn't detect any changes in the query in `diffRelayQuery.js`

<S_CODE_TOKEN>

and therefore, doesn't post the query to the server.

Relay 0.5 works correctly.
",trbngr,2016-03-31 18:03:37
725,2016-01-07 19:11:34,"Quick question: I see that the `Event` type has a `uuid` field, but does it have an `id` field?
",steveluscher,2016-03-31 18:03:37
725,2016-01-07 19:19:23,"It does, but perhaps I need to include it. 

BRB trying now.
",trbngr,2016-03-31 18:03:37
725,2016-01-07 19:27:17,"No luck.
",trbngr,2016-03-31 18:03:37
725,2016-01-07 19:49:39,"Is this using relay-tools/react-router-relay? How is the transition from one route to the next implemented?
",steveluscher,2016-03-31 18:03:37
725,2016-01-07 19:53:14,"I _am_ using react-router-relay.
",trbngr,2016-03-31 18:03:37
725,2016-01-10 04:07:09,"Maybe @taion has some insight. 
",devknoll,2016-03-31 18:03:37
725,2016-01-10 16:28:49,"Any chance this is related to https://github.com/relay-tools/react-router-relay/issues/76? I don't believe I've changed anything relating to that lately.
",taion,2016-03-31 18:03:37
725,2016-01-10 16:44:36,"I don't believe it is related, no. 

I will create a repro today.
",trbngr,2016-03-31 18:03:37
725,2016-02-05 16:08:12,"@trbngr Can you provide a bit more information to help us debug this? In particular, what are the queries for the initial route and the sessions route that doesn't work?
",josephsavona,2016-03-31 18:03:37
725,2016-03-30 23:49:28,"@trbngr Is this something that has been resolved, perhaps in a newer version of Relay or react-router-relay? I'm trying to find ""stalled"" issues and it would be great if could you give us an update. 
",edvinerikson,2016-03-31 18:03:37
725,2016-03-31 18:03:36,"My appologies for not updating this issue. I got stuck on another project since this was opened and haven't had a chance to get back to it.

Feel free to close this. When I get back on this project, I will have an answer ;)
",trbngr,2016-03-31 18:03:37
725,2016-03-31 22:01:48,"No worries and thanks for the fast reply! Feel free to reopen whenever you get time. :)
",edvinerikson,2016-03-31 18:03:37
724,2016-01-06 09:18:21,"On Page1 I have below query

<S_CODE_TOKEN>

On Page 2 i have below query

<S_CODE_TOKEN>

User lands on `page2` to start with and when user navigate from `page2` to `page1` relay sends approx 300 requests to `node(id:)` endpoint

300 is number of races returned from `races query`

one of 300 requests shown below

<S_CODE_TOKEN>

if you closely see the above request is a diff of page1 -> page2 query but instead of sending it to races endpoint it is send to node endpoint

response for node request

<S_CODE_TOKEN>

Interestingly if i add query params on page 2 query ex: `races(limit: 500){}` There is only one request

Note: I am not using node->edges in query request(see page 1 or page 2 request) Not sure if this is causing the above issue

also see https://github.com/facebook/relay/issues/691
",mailaneel,2016-02-22 06:36:00
724,2016-01-06 11:19:10,"Thanks for asking about this. Relay creates a new `node` query intentionally - it saves the server the work of fetching the list itself (it would also be more complicated to generate a more optimal query - to a person it's easy to see, but there can be weird edge cases and it's simplest to use node calls). The whole list is fetched again if you use some arbitrary param (such as `limit`) because Relay hasn't fetched that combination of calls yet and doesn't know whether the data could be different. 

For all of these reasons, we recommend using a connection instead of a list when you have many items. Again, though, Relay will use `node` queries to fulfill missing data on items in the connection. 
",josephsavona,2016-02-22 06:36:00
724,2016-01-07 00:21:03,"Thanks @josephsavona 

As per your comment even implementing `Connection Interface` will not solve issue of sending n requests.

I agree with you on the edge cases, but sending 300 requests(in my case) instead of sending one request for list does not make sense(especially if this is on mobile), Temporary solution on my for now is to use arbitrary param(ex: limit as per your suggestion with different values), this way relay will treat them as different queries.

How does FB/Instagram/AdsManager get around this problem(if you guys hit the same)?
",mailaneel,2016-02-22 06:36:00
724,2016-01-07 13:53:46,"There are a few strategies for handling this case. The first is to use a connection and fetch only the data that is needed for the initial screen - load the first 5 or 10 items and paginate to load more only as necessary. 

At Facebook, we also have a custom ""batch"" network layer that can send multiple queries in a single HTTP request and receive responses as they're evaluated by the server (note that the network layer interface is `sendQueries` - plural - which makes it easy to batch requests). If your app is making enough individual queries to be a performance problem, you might try implementing a simple version of a batched network layer. What's required is an endpoint that can accept a list of queries - `{id, query, variables}` - and return a list of `{id, response, error}` responses. Note that `RelayQueryRequest` provides access to a unique id for each query, which can be used to associate queries with their results. 
",josephsavona,2016-02-22 06:36:00
724,2016-01-11 02:54:59,"Thanks for your help.

The problem for us is we display all races(times) for that day, I am using arbitrary param `_` on every endpoint to solve this for now. 

I will also try and see if creating custom batch network layer works for us.
",mailaneel,2016-02-22 06:36:00
724,2016-01-25 11:18:26,"Also faced this. The problem is that it is so unexpected and it is so easy to get this behavor unintentionally and trash the server.

Batching requests will probably help though.
",vladar,2016-02-22 06:36:00
724,2016-01-25 16:03:09,"@vladar Yeah, it's relatively easy to get into this state, hopefully also reasonably obvious when it happens (lots of network requests by default). Ultimately, though, Relay is just doing what you might otherwise code manually: check each item and fetch any missing information. If you're trying to optimize a specific transition between two views (`a` to `b`), one option is to prefetch `b`'s fragment on page `a`:

<S_CODE_TOKEN>

Again, there are tradeoffs with this approach (the user may never view page b), but it's an option to consider in addition to batching queries at the network layer.
",josephsavona,2016-02-22 06:36:00
724,2016-01-29 00:21:25,"Do you really have to do batching outside of Relay here?

I don't see this in the spec now, but I thought there was a way to fetch multiple nodes by id in one request from a Relay-GraphQL server by sending the list of IDs up, like this:

<S_CODE_TOKEN>
",nickretallack,2016-02-22 06:36:00
724,2016-02-22 06:36:00,"@nickretallack it is possible to fetch data for multiple ids via `nodes`. However, different ids may be missing different sets of fields; given the complexity of diffing queries against the cache generally, we've chosen a balance of generating one `node` per id that is missing data. Network-level batching is a pretty big win here.

I'm going to close this since Relay is working as designed and there isn't any actionable next steps. If you have more questions about the batching approach please feel to comment here or start a new issue, or ask on Stack Overflow. Thanks!
",josephsavona,2016-02-22 06:36:00
724,2016-04-22 21:46:15,"Publish custom RelayNetworkLayer with batching queries and middlewares 
https://github.com/nodkz/react-relay-network-layer
",nodkz,2016-02-22 06:36:00
724,2017-02-13 23:35:59,"I'm curious whether it's possible to tweak the query diffing mechanism and (maybe globally) define that in the case that more than *n* queries would have to be sent, screw it and just force-refetch the whole thing. Does Relay allow for this in any way?",skosch,2016-02-22 06:36:00
724,2017-02-14 00:00:10,"The new Relay core doesn't do diffing, so such a tweak wouldn't apply (users explicitly specify the query they wish to fetch, so total control is in the hands of the user).",wincent,2016-02-22 06:36:00
724,2017-02-14 00:15:46,"> The new Relay core 

... isn't quite available yet though, is it? :cry: I ask because my backend (Elixir Absinthe) has dropped support for batching for now, and I'm grasping at straws now",skosch,2016-02-22 06:36:00
724,2017-02-14 00:35:04,"Nope, not quite. If you're curious, progress is being made on the `experimental` branch towards getting it shipped.",wincent,2016-02-22 06:36:00
724,2017-02-16 03:58:56,"I think implementing a custom batch network layer is the right decision. 
@skosch  Even in the cases where there are `n` nodes to fetch and `n` is big enough, Relay shouldn't do a  `connection`/`nodes` fetch to re-get all. e.g. Let's say a fruitStore endpoint returns 100 fruit on site's home page, and you are navigating to 'price' page to see detailed prices. 
<S_CODE_TOKEN>
in this case, just because there are 100 (n=100, seems big enough) fruits to fetch, doesn't mean we should fetch the entire fruitStore, because that means we are going to fetch pictures again which is the biggest overhead. 
So generating 100 node queries only for price makes more sense in this case 

",bochen2014,2016-02-22 06:36:00
724,2017-02-16 04:03:16,"an arbitrary `_`  would always cause relay to re-fetch everything, which could be a very expensive operation ",bochen2014,2016-02-22 06:36:00
724,2017-02-16 14:14:35,That's a great example for sure. I'm only dealing with lots of little text fields so that scenario never crossed my mind.,skosch,2016-02-22 06:36:00
723,2016-01-05 19:17:57,"Please check the attached log.

Thanks.
[npm-debug.log.txt](https://github.com/facebook/relay/files/78872/npm-debug.log.txt)
",andresallvs,2016-02-17 22:43:30
723,2016-01-05 19:44:36,"This solve the problem. https://github.com/relayjs/relay-starter-kit/issues/56

In short, update the old version of global babel-core and babel-cli.

npm install -g babel-core

npm install -g babel-cli
",andresallvs,2016-02-17 22:43:30
723,2016-01-05 20:43:13,"Sorry, that link don't solve the problem. 

I think the problem are incompatibilty of react-relay@0.6.0 and babel-relay-plugin@0.6.2 versions. For apps in examples folder.

Maybe incompatibility with Node@5.3.0 and NPM@3.5.2. 

To see the apps in examples folder, i add react-relay@0.6.0 and babel-relay-plugin@0.6.0 in each package.js files and install. That works.
",andresallvs,2016-02-17 22:43:30
723,2016-01-05 22:01:55,"@andresalves There is no babel-relay-plugin@0.6.2 as far as I can see, only a babel-relay-plugin@0.6.1 - and that is actually kind of the same like 0.6.0 but react-relay wants exactly 0.6.0.
react-relay and babel-relay-plugin are supposed to be in sync and they will be again as soon as 0.7.0 is released.
",BerndWessels,2016-02-17 22:43:30
723,2016-01-06 04:35:38,"Ok @BerndWessels, but in npm-debug.log.txt you can see:

184 silly resolveWithNewModule babel-relay-plugin@0.6.2 checking installable status

Thanks!
",andresallvs,2016-02-17 22:43:30
723,2016-01-20 04:32:50,"can you lockdown the npm package versions? npm install fails for /examples/todo.

<S_CODE_TOKEN>
kaizhu@minime2:~/src/relay/examples/todo$ npm install

> babel-relay-plugin@0.6.3 prepublish /Users/kaizhu/src/relay/scripts/babel-relay-plugin
> npm run build


> babel-relay-plugin@0.6.3 build /Users/kaizhu/src/relay/scripts/babel-relay-plugin
> scripts/build-lib

/Users/kaizhu/node_modules/babel/index.js:1
(function (exports, require, module, __filename, __dirname) { throw new Error(""The node API for `babel` has been moved to `babel-core`."");
                                                              ^

Error: The node API for `babel` has been moved to `babel-core`.
    at Object.<anonymous> (/Users/kaizhu/node_modules/babel/index.js:1:69)
    at Module._compile (module.js:398:26)
    at Object.Module._extensions..js (module.js:405:10)
    at Module.load (module.js:344:32)
    at Function.Module._load (module.js:301:12)
    at Module.require (module.js:354:17)
    at require (internal/module.js:12:17)
    at Object.<anonymous> (/Users/kaizhu/src/relay/scripts/babel-relay-plugin/scripts/build-lib:3:13)
    at Module._compile (module.js:398:26)
    at Object.Module._extensions..js (module.js:405:10)

npm ERR! Darwin 13.4.0
npm ERR! argv ""/usr/local/Cellar/node/5.3.0/bin/node"" ""/usr/local/bin/npm"" ""run"" ""build""
npm ERR! node v5.3.0
npm ERR! npm  v3.3.12
npm ERR! code ELIFECYCLE
npm ERR! babel-relay-plugin@0.6.3 build: `scripts/build-lib`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the babel-relay-plugin@0.6.3 build script 'scripts/build-lib'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the babel-relay-plugin package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     scripts/build-lib
npm ERR! You can get their info via:
npm ERR!     npm owner ls babel-relay-plugin
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /Users/kaizhu/src/relay/scripts/babel-relay-plugin/npm-debug.log
npm ERR! addLocal Could not install /Users/kaizhu/src/relay/scripts/babel-relay-plugin

> react-relay@0.6.1 prepublish /Users/kaizhu/src/relay
> node node_modules/fbjs-scripts/node/check-dev-engines.js package.json && npm run build

module.js:328
    throw err;
    ^

Error: Cannot find module '/Users/kaizhu/src/relay/node_modules/fbjs-scripts/node/check-dev-engines.js'
    at Function.Module._resolveFilename (module.js:326:15)
    at Function.Module._load (module.js:277:25)
    at Function.Module.runMain (module.js:430:10)
    at startup (node.js:141:18)
    at node.js:980:3
npm ERR! addLocal Could not install /Users/kaizhu/src/relay
npm ERR! Darwin 13.4.0
npm ERR! argv ""/usr/local/Cellar/node/5.3.0/bin/node"" ""/usr/local/bin/npm"" ""install""
npm ERR! node v5.3.0
npm ERR! npm  v3.3.12
npm ERR! code ELIFECYCLE

npm ERR! babel-relay-plugin@0.6.3 prepublish: `npm run build`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the babel-relay-plugin@0.6.3 prepublish script 'npm run build'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the babel-relay-plugin package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     npm run build
npm ERR! You can get their info via:
npm ERR!     npm owner ls babel-relay-plugin
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /Users/kaizhu/src/relay/examples/todo/npm-debug.log<S_CODE_TOKEN>```
",kaizhu256,2016-02-17 22:43:30
723,2016-02-17 06:01:24,"I have a freshly-installed node `5.6.0`

`npm install` fails

<S_CODE_TOKEN>
",naomik,2016-02-17 22:43:30
723,2016-02-17 22:43:30,"You're correct, we're still missing support for node 5/npm 3. #832 tracks to get us updated.
",kassens,2016-02-17 22:43:30
722,2016-01-05 08:09:06,"This is a fix for issue #693.

The method `getLinkedRecordIDs` in `RelayRecordStore` now filters ids of records,
which are marked as ""NONEXISTENT"".

A new test is added and a single assertion in `readRelayDiskCache-test` is removed,
which failed after the change and was not really relevant for the test.
",andimarek,2016-02-16 02:31:43
722,2016-01-27 19:14:55,"Hi,

I changed the implementation to use just one array and rebased it onto current master. The commits are not squashed.
",andimarek,2016-02-16 02:31:43
722,2016-01-27 20:12:47,"@josephsavona I changed it to make sure, that the item is only accessed after the invariant check. This what you meant, right?
",andimarek,2016-02-16 02:31:43
722,2016-01-27 20:34:27,"Thanks for taking time to review and thanks for the suggestions to improve
",andimarek,2016-02-16 02:31:43
722,2016-01-27 21:14:25,"yup, this is great. technically have to add `item !== null` since typeof null is object (thanks javascript!), but if you don't mind i can just add that when i import it.
",josephsavona,2016-02-16 02:31:43
722,2016-01-27 21:14:30,"@facebook-github-bot import
",josephsavona,2016-02-16 02:31:43
722,2016-01-27 21:24:45,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/987543614625048/int_phab to review.
",facebook-github-bot,2016-02-16 02:31:43
722,2016-01-28 03:50:22,"Yes, you are right: This check was missing missing (already before my change). I added it together with a test . I also improved a second test to check for  the error message too.
",andimarek,2016-02-16 02:31:43
722,2016-01-28 03:54:27,"@josephsavona I'm not sure why the test is failing now.
",andimarek,2016-02-16 02:31:43
722,2016-01-28 04:05:08,"It's probably because of the github outage. 
",andimarek,2016-02-16 02:31:43
722,2016-01-29 13:25:07,"@josephsavona Anything else here I can do/should do? Thanks!
",andimarek,2016-02-16 02:31:43
722,2016-02-03 22:20:07,"@andimarek Your PR has been imported into our internal Phabricator instance, but I see @josephsavona marked it as ""Changes planned"". Can you chime in on what you're wanting Joe?
",wincent,2016-02-16 02:31:43
722,2016-02-03 23:15:32,"@wincent @yuzhi Thoughts on this approach? Note that the equivalent function for reading range data returns both a filtered and unfiltered list of edges, but `getLinkedRecordID` returns the id regardless of the linked record's status. I'm torn about whether the filtering really belongs in the store or if it should happen at a higher level (such as the reader). Thoughts?
",josephsavona,2016-02-16 02:31:43
722,2016-02-08 21:46:30,"@andimarek thanks for your patience on this PR. Summarizing an offline discussion with @yuzhi: It turns out that this change would have unintended consequences and we can't proceed with it as-is. The cache reader needs to know what IDs are linked, even if they don't exist in the store at the moment (this is why `getRangeMetadata` returns both a filtered and unfiltered list of edges). Filtering the IDs at the store level also changes which IDs are used to set up component subscriptions, and could cause components not to update when they should. 

A more appropriate place to add this logic would be in `readRelayQueryData` when reading the results for plural linked fields.
",josephsavona,2016-02-16 02:31:43
722,2016-02-08 22:12:40,"Just adding to what @josephsavona already mentioned. The similar problem can also occur when we GC the linked nodes but not the parent. Filtering out at the RelayRecordStore level can cause us to think there are no linked nodes when in reality, these nodes just got temporarily cleared by GC. We won't be able to tell the difference between the node is null vs node is node missing there due to GC or DiskCache since many of our internal functions depend on this function.
",yuzhi,2016-02-16 02:31:43
722,2016-02-16 02:31:43,"@josephsavona  @yuzhi  Thanks for the background infos. I'm closing this PR, because as you explained it's the wrong approach.
",andimarek,2016-02-16 02:31:43
721,2016-01-05 02:10:58,"This PR has to the goal to make Relay usable without React.

**Overview:**
The core functions of Relay don't depend really on React, but currently it's only really useable with `RelayContainer`, which is a higher order React component.

The idea behind this PR is to introduce two new classes: `GenericRelayRootContainer` and `GenericRelayContainer`. Both are very similar to `RelayRootContainer/RelayRenderer` and `RelayContainer`. The main difference is that they don't wrap any React Component and don't deal with any rendering. They just maintain the data specified by fragments. 
Instead of rendering a Component they call a registered callback function to inform about new/changed data.
This way it is possible to use co-located data declaration with any rendering technology.

To make it more clear I added a modified star-wars example to use Angular instead React: [examples/star-wars-angular](https://github.com/andimarek/relay/tree/generic-relay-container/examples/star-wars-angular)

This is already working but it's not perfect. I'm sharing this here to get some feedback, if this is even possible to get merged and what to improve/change.

**Implementation Details:**
Like I said I added to new classes: [GenericRelayRootContainer](https://github.com/andimarek/relay/blob/generic-relay-container/src/container/GenericRelayRootContainer.js) and [GenericRelayContainer](https://github.com/andimarek/relay/blob/generic-relay-container/src/container/GenericRelayContainer.js).

The `GenericRelayRootContainer` combines some aspects of `RelayRootContainer` and `RelayRenderer`: It basically just calls `getRelayQueries` for the first data fetching.

`GenericRelayContainer` is a reduced version of `RelayContainer`: It's not a React Component, but a simple class.The important parts for the data declaration are the same as in `RelayContainer`: There is still a `RelayContainerSpec` and Routes are also the same. But for example because there is no React Context anymore, the route has to provided along with all the other props.

I added a few new types, but reused all of the existing types where possible/made sense.

There are also two new test files [GenericRelayContainer-test](https://github.com/andimarek/relay/blob/generic-relay-container/src/container/__tests__/GenericRelayContainer-test.js) and [GenericRelayRootContainer-test](https://github.com/andimarek/relay/blob/generic-relay-container/src/container/__tests__/GenericRelayRootContainer-test.js)

The tests are kept minimal because I think some aspects of `GenericRelayContainer` and `RelayContainer` should be pulled out into own modules to make it more DRY. I wanted to wait for some feedback before duplicating too much test cases.
",andimarek,2016-01-10 09:15:00
721,2016-01-05 03:16:03,"Thanks for your contribution! It's exciting to see interest in using Relay with other view libraries. As noted in the [roadmap](https://github.com/facebook/relay/wiki/Roadmap#in-progress), we're actively on working on making Relay more modular - including separating Relay into a core, imperative data-fetching API and a declarative React integration layer. The core could then be used to implement integrations with other view libraries. 

The community has been actively contributing toward a prerequisite of this - #558 - to make all Relay state contextual instead of global, and this is almost finished. We (Relay core) are working on the core/react split - see #559.

We definitely would like to support the community in integrating Relay with other libraries. Given that there is already active work to make this type of integration possible, we probably won't move forward with integrating this PR. Instead, our recommendation is to use this as the basis of a new package/repository - e.g. `relay-angular`. Note that `GenericRelay(Root)Container` is a good temporary solution for resolving Relay data until #558 and #559 are complete and there is a documented, public API for resolving data outside of Relay containers. At that point you can simplify your library to use the new API.
",josephsavona,2016-01-10 09:15:00
721,2016-01-05 04:06:08,"Thanks for your feedback and the references to the issues. 

Especially your comment about `DataContainer`(https://github.com/facebook/relay/issues/559#issuecomment-155703059):
This is I think the same idea as the `GenericRelayContainer`.

I will comment on this specific issue, as it seems the better place.
",andimarek,2016-01-10 09:15:00
721,2016-01-05 04:19:07,"About the `relay-angular` suggestion: I just wanted to make clear, that the goal of this PR was not to make Relay work with Angular specifically. It was just the example I created with Angular, because I know Angular better than e.g. ember. 
",andimarek,2016-01-10 09:15:00
721,2016-01-10 09:15:00,"I'm closing this PR, because the topic will be handled in #559.
",andimarek,2016-01-10 09:15:00
720,2016-01-05 00:07:48,"Hi,

After reading some doc and viewing some Relay/GraphQL talks I'm interested in the technology but I don't feel it right now because of the lack of fine-grained control of the Relay caching system (at least in the documentation)

I mean everywhere it mentions that Relay is caching data, but at no point it mentions how Relay manage to remove entries from that cache. It makes me think that Relay is an ever-growing cache that will just make the browser or mobile crash after a while...

So, can we have fine-grained control over the caching system under relay?

Features I would expect are:
- Empty cache (seems covered [here](https://github.com/facebook/relay/issues/233))
- Manual addition of a type or field
- Manual eviction of a type (remove user 123 from cache)
- Manual eviction of a type's field (remove user 123's name from cache)
- Manual refresh of a type or field
- Automatic eviction based on limiting the number of items of a given type
- Automatic eviction based on LRU / TTL policies
- Automatic eviction of items that are not currently used in mounted components
- Automatic refresh of a type after some time
- Be notified in a listener when a type or field gets updated

Also it would be good to be able to tune the cache per type. I mean I may want to be able to say that the users data is more akin to not change and to cache it more agressively than other types of my domain that are more collaborative.

Being able to manually add/remove/listen entries also mean that we can choose to implement whatever we want to implement real-time applications, without necessarily depending on relay subscriptions, and also being able to implement some persistence if we need it right now.
",slorber,
720,2016-01-06 15:39:10,"Ohhh I really need some insights on this please :) How do the big players do manage the memory of their caches? Do we simply assume that the session does last enough and that it's nearly impossible that the user reaches browsers memory limits? 

Weither we use Relay or Flux with ""normalized stores"" ([gaearon/normalizr](https://github.com/gaearon/normalizr)) I wonder how people manage cached data eviction in practice
",slorber,
720,2016-01-22 11:06:05,"@josephsavona any insights on this plzzz :)
",slorber,
720,2016-01-22 21:11:38,"This is a great question. Thanks for asking and apologies for the delay in our responding. You mention a lot of points, but it feels like they can largely be summarized into two questions:
- How does Relay manage memory? 
- How can cache-eviction and refetching be controlled in Relay? 

## Memory Management

Currently, Relay does not evict data from its (in-memory) cache under the default configuration. This means that memory usage may grow during the course of a session, and that all data is cleared e.g. when the user closes the browser tab. 

In practice, we've found that this isn't a problem for most apps. Because of the cyclic nature of social graphs there's a often significant amount of overlap in content, and as a result memory usage can grow more slowly than one might intuitively expect. 

We recognize that some apps may have different data access patterns and/or longer sessions, which would require some form of cache eviction. This raises of the question of how to determine _which_ data to evict _when_.

## Refetching & Cache Eviction Control

Relay currently offers very coarse-grained control of when data is refetched: `primeCache` defaults to fulfilling queries using in-memory data, while `forceFetch` bypasses the cache and refetches data in-full from the server. Again, in practice this has worked well for most of our use cases.

Regarding cache eviction, it's import to understand that Relay is fundamentally different from many typical caches. Whereas typical caches store independent key/value pairs, Relay caches a graph of interconnected objects. We cover the ramifications of this extensively in [Thinking in GraphQL](http://facebook.github.io/relay/docs/thinking-in-graphql.html#client-caching). In practice, this means that simple approaches to cache eviction such as TTL or LRU may have unintuitive consequences. For example, products typically care about _queries_ while the cache stores normalized _records_. If even a single record is evicted from the cache, it could cause an entire query to be effectively ""missing"" and need to be refetched. Further, the data dependencies of discrete parts of the application may overlap, such that they disagree about the allowable staleness of data.

## What's Next

We're actively developing a ""garbage collection"" (cache eviction)] mechanism for Relay. This is currently [experimental](https://github.com/facebook/relay/blob/master/src/store/RelayGarbageCollection.js), and we plan to make it part of the public API once we have sufficient experience using it in production.

The goal of this garbage collection would be to evict in-memory cached data (and associated metadata such as tracked queries) that is no longer depended on by any view. Products would be in control over when cache eviction was initiated (e.g. in response to a low memory warning), because automatically expiring data could negatively impact perceived performance of apps in the form of longer loading times.

# Miscellaneous

> Be notified in a listener when a type or field gets updated

Relay supports this internally - components re-render when their data changes. There are several proposals for observing data separately from containers, which we're tackling as part of #559.

> Manual eviction of a type…

See the above for background; we're still exploring this area. I opened #756 to track work on public APIs for managing cache eviction.
",josephsavona,
720,2016-01-24 17:01:22,"thanks a lot @josephsavona 

> Currently, Relay does not evict data from its (in-memory) cache under the default configuration. This means that memory usage may grow during the course of a session, and that all data is cleared e.g. when the user closes the browser tab.
> 
> In practice, we've found that this isn't a problem for most apps. Because of the cyclic nature of social graphs there's a often significant amount of overlap in content, and as a result memory usage can grow more slowly than one might intuitively expect.

So I guess I could simply stop worrying and start coding :) My app is not particularly different from other social apps so it should be ok for my usecase too!

Also happy to hear about that GC system :)
",slorber,
720,2016-02-11 10:53:13,"Is there any mileage in a Relay directive on queries themselves indicate how individual fields should be cached?

ie 

<S_CODE_TOKEN>

This way we get to have the components declaring how up-to-date they want the data to be. If two components are requesting the same parent data, you'd push the directive down the tree to minimise excessive refetching.
",AndrewIngram,
720,2016-02-11 16:49:53,"@AndrewIngram Definitely: we're currently exploring the idea of query-level TTL. Field-level directives have some problems: as I described above:

> the data dependencies of discrete parts of the application may overlap, such that they disagree about the allowable staleness of data.

This applies to container-level TTL as well: your container may be okay if fields A and B are stale, but some other container wants fields B and C on the same object to be fresh, so we refetch B and C and they don't match up with A (i.e. the user sees a partial update). Our goal is to balance performance, consistency, and predictability, which leads us to query-level TTL. There behavior here would be simple:
- Relay has all the data for your query cached locally and it is fresh enough: render from the cache.
- Else: fetch from the server, optionally serving stale data from the cache while waiting for results.

Feedback appreciated!
",josephsavona,
720,2016-02-27 06:12:25,"@josephsavona I am about to start coding on a new project that is very different from a social app. (first Relay one!). Query level TTLs would solve almost all of my problems and make it workable. I can't think of any problem that wouldn't be solved completely or partially by that. 

Showing stale data while refetching is perfect.
",evanderkoogh,
720,2016-07-27 09:43:54,"@josephsavona is there any update on this? The biggest issue i'm seeing in practice is related to mutations refetching everything in the cache. Whilst a better approach might be to do the fat query intersection twice; once with the ""active"" data (ie the store that matches currently rendered components) and once against the inactive data (everything else). The active match would be used to refetch as part of the mutation query, and everything in the inactive match would be evicted from the cache.
",AndrewIngram,
720,2016-07-27 15:54:06,"@AndrewIngram Thanks for asking. The approach you describe is definitely sound in theory, but turned out to be tricky to implement when we tried it. Instead, we are working on a more significant update to Relay core (see the meeting notes for mentions of a ""prototype""). Among other things it makes mutations more explicit and gives developers more control over what is refetched - hopefully addressing the issue you describe as well as making mutations simpler. We'll be sharing more information in the coming weeks once we make a bit more progress.
",josephsavona,
720,2016-08-02 19:00:16,"Hi All. Anyone tested the experimental cache eviction code https://github.com/facebook/relay/blob/master/src/store/RelayGarbageCollection.js ? Any comments/feedback?
",rturk,
720,2016-08-02 19:03:30,"@slorber FYI. I'm giving up on normalizr in the early stages of the project sounded like a good Ideia. However normalizr is now our main source of crashes and memory issues 
",rturk,
720,2016-08-03 09:07:15,"@rturk you mean it crashes because it takes too much memory after a while?
",slorber,
720,2016-08-03 12:24:50,"@slorber it 1) Doesn't play well with async functions, so it was often leaking when asynchronous data arrived from server (ie Push Notifications). 2) We use a `newsFeed` of Products so whenever something changed the hole app will re-render.
",rturk,
720,2016-08-03 15:22:47,"@rturk Sorry but I don't understand while I'd really like to :) If this is about memory maybe this would be a more appropriate issue for discussion: https://github.com/paularmstrong/normalizr/issues/47
",slorber,
720,2016-12-20 17:39:43,Just a note that a future release (see #1369) should address some of the use-cases discussed here.,josephsavona,
719,2016-01-04 22:50:46,"I'm trying to understand `RANGE_ADD`. I've provided the mutation config, for `RANGE_ADD`, with all the required information. I use the `viewer` naming convention, with my connections nested within `viewer`. Below is what my complete Relay Mutation looks like ...

<S_CODE_TOKEN>

I provide a fragment for the `viewer` id, which at run-time, within `getConfigs`, I can see is present.

In the GraphQL Mutation response payload, `CreateTeamPayload`, the `viewer` field is provided so that Relay can make use of the connection within the mutation config for `RANGE_ADD`. Also, within `CreateTeamPayload`, the new edge is provided as `edge`.

These three bits of info (viewer id for the parent, the connection information and the edge) seem to be all that `RANGE_ADD` demands. I also make sure to request this data from the server, via the fat query so that Relay has access to it for the mutation config.

Relay does not seem to be including what I've specified in the fat query, and what is required for the mutation config, in what it dispatches to the server, though. All that Relay is requesting is the `clientMutationId`. Here is the request made by Relay ...

<S_CODE_TOKEN>

And, in chain reaction fashion, this causes Relay, who is expecting the `viewer` and `edge` for the mutation config, to throw an error ...

<S_CODE_TOKEN>

Those required fields could totally be there if Relay had included them. Does `RANGE_ADD` have to be accompanied by `REQUIRED_CHILDREN` for this to work? The mutation goes through to the server, and the record is created on the server, it's just the client-side mutation config fails to incorporate the changed data into the store.
",ryancole,2016-01-05 17:41:04
719,2016-01-05 17:32:11,"@ryancole There's a few other threads floating around in regards to this and I can't find them right now, but essentially, if that data has never been requested by Relay before, then it doesn't know about it and won't request it by itself. I.E. if your query doesn't request `teams` explicitly somewhere, then Relay is not tracking it. In this case, you have to explicitly accompany it with the `REQUIRED_CHILDREN` config type. 
",dphaener,2016-01-05 17:41:04
719,2016-01-05 17:41:04,"@dphaener Ah, I see, OK. So if `teams` is requested, and therefore already being tracked, somewhere higher up in the container tree, or by a previous query, then all would work. So, in the event of creating a new node, which couldn't be in the store already somewhere, it might always be good to accompany this with `REQUIRED_CHILDREN`. Thanks for the info!
",ryancole,2016-01-05 17:41:04
718,2016-01-04 21:00:04,"Please find [this question](http://stackoverflow.com/questions/34192587/how-to-navigate-without-cursors-in-a-connection) on Stack Overflow.
",BerndWessels,2016-01-04 23:19:55
718,2016-01-04 23:19:55,"Thanks for the SO link!
",josephsavona,2016-01-04 23:19:55
717,2016-01-04 16:12:02,"I'm trying to implement optimistic update for relay mutation. When I try to pass variable in Relay.QL in any normal relay container I normally use the following syntax:

<S_CODE_TOKEN>

This works correctly. For mutations I've created a class extending Relay.Mutation. Here initialVaraibles and fragment are defined as follow:

<S_CODE_TOKEN>

However when mutation is called it gives error `Expected a declared value for variable $variable1`.
I've searched on stackoverflow but there was no similar issue.
",shahankit,2016-02-06 00:20:33
717,2016-01-07 19:38:44,"Thanks for this report! I was able to reproduce this using the [Relay Playground](https://facebook.github.io/relay/prototyping/playground.html#source=class%20Comment%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20%7Bcomment%7D%20%3D%20this.props%3B%0A%20%20%20%20var%20%7Bauthor%7D%20%3D%20comment%3B%0A%20%20%20%20var%20savePending%20%3D%20this.props.relay.hasOptimisticUpdate%28this.props.comment%29%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cdiv%20style%3D%7B%7Bopacity%3A%20savePending%20%3F%200.4%20%3A%20null%7D%7D%3E%0A%20%20%20%20%20%20%20%20%3Cimg%20src%3D%7Bauthor.avatar%7D%20width%3D%7B16%7D%20%2F%3E%20%3Cstrong%3E%7Bauthor.name%7D%3C%2Fstrong%3E%20%7Bcomment.text%7D%0A%20%20%20%20%20%20%20%20%7BsavePending%20%26%26%20%0A%20%20%20%20%20%20%20%20%20%20%3Cimg%20src%3D%22data%3Aimage%2Fgif%3Bbase64%2CR0lGODlhEgASAPMAADMzMw0NDUtLS21tbY%2BPj6%2Bvr83Nzf7%2B%2Fvr6%2BvPz8%2Bbm5gAAAAAAAAAAAAAAAAAAACH5BAAKAAAAIf8LTkVUU0NBUEUyLjADAQAAACwAAAAAEgASAAAEjPDISauViZiDCkHXpAgDKADKhSSHMghGAZQtOBVDoRACwROZAIGCGwwMvQGgcFpSEAYjQbFyAWCsCQKhKBiyB5xCkUiACMbB8CkIBK4stPSZALgDAts24SUOqBwUOwQ6e20BBRUGPhoFXl52QjZhGlAaMV8DAQMVWR5jjiBkFzuJHQVgIQYbLawhrxURACH5BAAKAAAALAAAAAASABIAgwsLCy0tLWxsbFBQUJGRka6urs7Ozv7%2B%2Fvn5%2BfPz8%2Bbm5gAAAAAAAAAAAAAAAAAAAASL8Mh5EKIYo2JqIRmmDAKSDIMSHokkCIZBSso1FfA2EMSeEAHQxPAiEHkDYmBQwBgIAoIKoRAsO5SLoqCSIJ6KhMUT5WUGgfRAwuM1MegAYF2xbLsSXNg22RIKFgkyAAGAFAYfXAUFAwCMAI58TwZfHAIAJUACWTaLW4R2fFmLFpBYKwcGXTiiqF4hEQAh%2BQQACgAAACwAAAAAEgASAIMLCwsyMjJsbGxRUVGRkZGvr6%2FQ0ND%2B%2Fv76%2Bvr09PTp6ekAAAAAAAAAAAAAAAAAAAAEivDISauVqBhZyqWKICCJMChfIhGEYQyEpCBUQXiFYOsJMXgTA0uj8xlMv4rwpkgkQgPBpoJQaGiHhLCZwHaGFkFgMOYMgRRyIDA6IN4KA2qSm2NlHc1ToZ5OrB0GAFEABWoEdwZXAgAiAAQ9ATETTm4BhQUAAV0zFgiCACqXdhclBTQ2XR8TWK0UEQAh%2BQQACgAAACwAAAAAEgASAIMxMTEMDAxvb29LS0uPj4%2B4uLipqanQ0ND%2B%2Fv76%2Bvrz8%2FPn5%2BcAAAAAAAAAAAAAAAAEkRDJSaud5chT0p0LQSSKICyfgiTEeQjEqnjTQWh2YQiFshsUGyFDMOxsA15lYRguSCHTgUZRHJ4Sq2GhmEl0hkKhkhAMzoIveEwpn5OTRGLBoxYIqIqiEAgMDgoLdAB%2FFQR9AAWEAomMAwZUAgECJZOMeAQDMROBcgABHAAAKnkWCwGjCqKlF2UdCHcqHxZUFBEAIfkEAAoAAAAsAAAAABIAEgCDCAgIMTExbW1tT09PjY2NsLCwzs7O%2Fv7%2B%2Bvr68%2FPz5eXlAAAAAAAAAAAAAAAAAAAABIjwyEmrncZIU%2B5ESkEgCUEoHkIWhaKYUlJxBmIQHFEghdBNIdaLdSIIBBpK0KBQlQQniorERGBa1lgAwA1kJ4SBQHxAbLvf8vFIKCfeCh%2FlpkikD4XtwAAf778IBFwDeUd7fj8SBAEEJQFQjHiEFAlNZgEZAQNWTRYgAQFvAwEoHmU6EiKmqxURACH5BAAKAAAALAAAAAASABIAgw0NDTIyMm5ubkxMTJGRkbCwsM3Nzf7%2B%2Fvr6%2BvPz8%2BXl5QAAAAAAAAAAAAAAAAAAAASL8MhJq5XIKGnMpUlRHAhRJJ%2BChIWimBJKCYCQGEVHGOE%2BlQBAAIfLEY6eXyE4SDh7vt9KIThNcAmEVjIIAgYISklAJnC9YDFBsDavnNTRlaAK%2FwyBgEABXwsMdhIFeQMFA2sDBgQDVRQEAAQJBAFHhSGNP3UDATmMYVkXCgNNCaMbJBclcoofH1sVEQAh%2BQQACgAAACwAAAAAEgASAIMLCwstLS1tbW1RUVGSkpKvr6%2FMzMz%2B%2Fv76%2Bvr09PTl5eUAAAAAAAAAAAAAAAAAAAAEhvDIeRCqNFNRpFJaZgBAchSFGYIIWSiopE4CQCC1YBQGYhCGCaJAGhAHOxiBRxkGAAJFApEoLEFCqoJDgU0tkkFgPLhQCAQBOgwgmydWdeeQqCuAlGSoINbZ03gUBWM6A2g6aTpnhlWGaR1WczJSOEgGAwIXUxoJCgMDdQJRIUKBOzOkTSERACH5BAAKAAAALAAAAAASABIAgwsLCzIyMmtra1FRUZGRkbCwsNDQ0P7%2B%2Fvr6%2BvX19ejo6AAAAAAAAAAAAAAAAAAAAASL8MhJEb1UFEmExZMBBEkCAAp4pEcAFMWYHDNFBB4BCMOOGAXDBFEIBAYxHgAIY0mIxoGiZGA6D4isgrCZKAyJ7GcwiGYpBS4XK4gKsGiCvIsobcGhwudiIBOmCQppBEJoZAJ9XIiDhRwDBAkFAooFkWsUYQgCiAaTFjUXCAqbFh1XGESFQCoXNXsUEQAh%2BQQACgAAACwAAAAAEgASAIMxMTEMDAxvb29KSkqPj4%2B4uLipqanPz8%2F%2B%2Fv76%2Bvr09PTn5%2BcAAAAAAAAAAAAAAAAEkBBJlGSlM%2BekiKEGcWnTAgCKGSyktHADcBgBmrwZARhdIAgBwgIomCQMJ0EB8AsgA8HNISZYKFIDaEGTuBEOI0O10kUIBmjBiFIwuMFm9KAodRu2lOvCcMgsDixcBz8EVzcFHoETBT8Cg25fIXwZBgM8jJB9B18aChIEjpsiGC0KPxUEQi1GkwgHBwprq7MIEQA7%22%20style%3D%7B%7BmarginLeft%3A%204%2C%20verticalAlign%3A%20'text-top'%7D%7D%20%2F%3E%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0AComment%20%3D%20Relay.createContainer%28Comment%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20comment%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Comment%20%7B%0A%20%20%20%20%20%20%20%20author%20%7B%20avatar%2C%20name%20%7D%0A%20%20%20%20%20%20%20%20text%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%20%20%0Aclass%20Story%20extends%20React.Component%20%7B%0A%20%20_augmentNumCommentsToShow%20%3D%20%28delta%29%20%3D%3E%20%7B%0A%20%20%20%20this.props.relay.setVariables%28%7B%0A%20%20%20%20%20%20numCommentsToShow%3A%20this.props.relay.variables.numCommentsToShow%20%2B%20delta%2C%0A%20%20%20%20%7D%29%3B%20%0A%20%20%7D%0A%20%20_handleKeyDown%20%3D%20%28e%29%20%3D%3E%20%7B%0A%20%20%20%20if%20%28e.keyCode%20%3D%3D%3D%2013%20%26%26%20e.target.value%20!%3D%20''%29%20%7B%20%20%2F%2F%20enter%20key%0A%20%20%20%20%20%20Relay.Store.update%28%0A%20%20%20%20%20%20%20%20new%20AddCommentMutation%28%7B%0A%20%20%20%20%20%20%20%20%20%20story%3A%20this.props.story%2C%0A%20%20%20%20%20%20%20%20%20%20text%3A%20e.target.value%2C%0A%20%20%20%20%20%20%20%20%20%20viewer%3A%20this.props.viewer%2C%0A%20%20%20%20%20%20%20%20%7D%29%0A%20%20%20%20%20%20%29%3B%0A%20%20%20%20%20%20this._augmentNumCommentsToShow%281%29%3B%0A%20%20%20%20%20%20e.target.value%20%3D%20''%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%20%20_handleMoreCommentsClick%20%3D%20%28e%29%20%3D%3E%20%7B%0A%20%20%20%20e.preventDefault%28%29%3B%0A%20%20%20%20this._augmentNumCommentsToShow%285%29%3B%0A%20%20%7D%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20%7Bstory%7D%20%3D%20this.props%3B%0A%20%20%20%20var%20%7Bauthor%2C%20comments%7D%20%3D%20story%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Cheader%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cimg%20src%3D%7Bauthor.avatar%7D%20width%3D%7B32%7D%20%2F%3E%20%3Cstrong%3E%7Bauthor.name%7D%3C%2Fstrong%3E%0A%20%20%20%20%20%20%20%20%3C%2Fheader%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7Bstory.text%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%7Bcomments.pageInfo.hasPreviousPage%20%26%26%0A%20%20%20%20%20%20%20%20%20%20%3Ca%20href%3D%22%23%22%20onClick%3D%7Bthis._handleMoreCommentsClick%7D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20View%20previous%20comments%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fa%3E%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%3Cul%3E%0A%20%20%20%20%20%20%20%20%20%20%7Bcomments%20%26%26%20comments.edges.map%28commentEdge%20%3D%3E%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cli%20key%3D%7BcommentEdge.node.id%7D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CComment%20comment%3D%7BcommentEdge.node%7D%20%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fli%3E%0A%20%20%20%20%20%20%20%20%20%20%29%7D%0A%20%20%20%20%20%20%20%20%20%20%3Cli%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20onKeyDown%3D%7Bthis._handleKeyDown%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20placeholder%3D%22Leave%20a%20comment%26hellip%3B%22%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20type%3D%22text%22%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fli%3E%0A%20%20%20%20%20%20%20%20%3C%2Ful%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0AStory%20%3D%20Relay.createContainer%28Story%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20numCommentsToShow%3A%203%2C%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20story%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Story%20%7B%20%0A%20%20%20%20%20%20%20%20author%20%7B%20avatar%2C%20name%20%7D%0A%20%20%20%20%20%20%20%20comments%28last%3A%20%24numCommentsToShow%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20id%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24%7BComment.getFragment%28'comment'%29%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20pageInfo%20%7B%20hasPreviousPage%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20text%20%0A%20%20%20%20%20%20%20%20%24%7BAddCommentMutation.getFragment%28'story'%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%20%20viewer%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Viewer%20%7B%20%0A%20%20%20%20%20%20%20%20avatar%0A%20%20%20%20%20%20%20%20id%20%0A%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20%24%7BAddCommentMutation.getFragment%28'viewer'%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0Aclass%20StoriesApp%20extends%20React.Component%20%7B%0A%20%20_handleLoadMoreClick%20%3D%20%28%29%20%3D%3E%20%7B%0A%20%20%20%20this.props.relay.setVariables%28%7B%0A%20%20%20%20%20%20numStoriesToLoad%3A%20this.props.relay.variables.numStoriesToLoad%20%2B%203%2C%0A%20%20%20%20%7D%29%3B%0A%20%20%7D%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20%7BstoryFeed%7D%20%3D%20this.props.viewer%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Cul%3E%0A%20%20%20%20%20%20%20%20%20%20%7BstoryFeed.edges.map%28edge%20%3D%3E%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cli%20key%3D%7Bedge.node.id%7D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CStory%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20story%3D%7Bedge.node%7D%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20viewer%3D%7Bthis.props.viewer%7D%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fli%3E%0A%20%20%20%20%20%20%20%20%20%20%29%7D%0A%20%20%20%20%20%20%20%20%3C%2Ful%3E%0A%20%20%20%20%20%20%20%20%20%20%7BstoryFeed.pageInfo.hasNextPage%20%26%26%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7Bthis._handleLoadMoreClick%7D%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20Load%20more%20stories%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0AStoriesApp%20%3D%20Relay.createContainer%28StoriesApp%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20numStoriesToLoad%3A%203%2C%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20viewer%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Viewer%20%7B%0A%20%20%20%20%20%20%20%20storyFeed%28first%3A%20%24numStoriesToLoad%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20id%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24%7BStory.getFragment%28'story'%29%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20pageInfo%20%7B%20hasNextPage%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%24%7BStory.getFragment%28'viewer'%29%7D%0A%20%20%20%20%20%20%7D%0A%09%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%20%20%0Aclass%20AddCommentMutation%20extends%20Relay.Mutation%20%7B%0A%20%20static%20initialVariables%20%3D%20%7B%0A%20%20%20%20numStories%3A%2010%2C%0A%20%20%7D%3B%0A%20%20static%20fragments%20%3D%20%7B%0A%20%20%20%20story%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Story%20%7B%0A%20%20%20%20%20%20%20%20id%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%20%20viewer%3A%20%28variables%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Viewer%20%7B%0A%20%20%20%20%20%20%20%20id%0A%20%20%20%20%20%20%20%20stories%28first%3A%20%24numStories%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20node%20%7B%20id%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%20%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%20%20getCollisionKey%28%29%20%7B%0A%20%20%20%20return%20%60story-%24%7Bthis.props.story.id%7D%60%3B%0A%20%20%7D%0A%20%20getMutation%28%29%20%7B%0A%20%20%20%20return%20Relay.QL%60mutation%7BaddComment%7D%60%3B%0A%20%20%7D%0A%20%20getFatQuery%28%29%20%7B%0A%20%20%20%20return%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20AddCommentPayload%20%7B%0A%20%20%20%20%20%20%20%20commentEdge%0A%20%20%20%20%20%20%20%20story%20%7B%20comments%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%3B%0A%20%20%7D%0A%20%20getConfigs%28%29%20%7B%0A%20%20%20%20return%20%5B%7B%0A%20%20%20%20%20%20type%3A%20'RANGE_ADD'%2C%0A%20%20%20%20%20%20parentName%3A%20'story'%2C%0A%20%20%20%20%20%20parentID%3A%20this.props.story.id%2C%0A%20%20%20%20%20%20connectionName%3A%20'comments'%2C%0A%20%20%20%20%20%20edgeName%3A%20'commentEdge'%2C%0A%20%20%20%20%20%20rangeBehaviors%3A%20%7B%0A%20%20%20%20%20%20%20%20''%3A%20'append'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%5D%3B%0A%20%20%7D%0A%20%20getVariables%28%29%20%7B%0A%20%20%20%20return%20%7B%0A%20%20%20%20%20%20storyId%3A%20this.props.story.id%2C%0A%20%20%20%20%20%20text%3A%20this.props.text%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%20%20getOptimisticResponse%28%29%20%7B%0A%20%20%20%20return%20%7B%0A%20%20%20%20%20%20commentEdge%3A%20%7B%0A%20%20%20%20%20%20%20%20node%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20author%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20avatar%3A%20this.props.viewer.avatar%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20id%3A%20this.props.viewer.id%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20this.props.viewer.name%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20story%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20id%3A%20this.props.story.id%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20text%3A%20this.props.text%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%7D%0A%0Aclass%20StoriesRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20params%20%3D%20%7B%7D%3B%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20viewer%3A%20%28Component%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20ViewerQuery%20%7B%0A%20%20%20%20%20%20%20%20viewer%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'viewer'%29%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%20%20static%20routeName%20%3D%20'Stories'%3B%0A%7D%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BStoriesApp%7D%0A%20%20%20%20route%3D%7Bnew%20StoriesRoute%28%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B&schema=import%20%7B%0A%20%20GraphQLBoolean%2C%0A%20%20GraphQLEnumType%2C%0A%20%20GraphQLFloat%2C%0A%20%20GraphQLID%2C%0A%20%20GraphQLInputObjectType%2C%0A%20%20GraphQLInt%2C%0A%20%20GraphQLInterfaceType%2C%0A%20%20GraphQLList%2C%0A%20%20GraphQLNonNull%2C%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%20%20GraphQLUnionType%2C%0A%7D%20from%20'graphql'%3B%0Aimport%20%7B%0A%20%20connectionArgs%2C%0A%20%20connectionDefinitions%2C%0A%20%20connectionFromArray%2C%0A%20%20cursorForObjectInConnection%2C%0A%20%20fromGlobalId%2C%0A%20%20globalIdField%2C%0A%20%20mutationWithClientMutationId%2C%0A%20%20nodeDefinitions%2C%0A%20%20toGlobalId%2C%0A%7D%20from%20'graphql-relay'%3B%0A%0A%2F**%0A%20*%20Set%20up%20some%20test%20data%0A%20*%2F%0Avar%20TUTORIAL_VERSION%20%3D%201%3B%0A%0Aclass%20Comment%20%7B%0A%20%20constructor%28data%29%20%7B%0A%20%20%20%20this.authorId%20%3D%20data.authorId%3B%0A%20%20%20%20this.id%20%3D%20data.id%3B%0A%20%20%20%20this.storyId%20%3D%20data.storyId%3B%0A%20%20%20%20this.text%20%3D%20data.text%3B%0A%20%20%7D%0A%7D%0A%0Aclass%20Person%20%7B%0A%20%20constructor%28data%29%20%7B%0A%20%20%20%20this.avatar%20%3D%20data.avatar%3B%0A%20%20%20%20this.id%20%3D%20data.id%3B%0A%20%20%20%20this.name%20%3D%20data.name%3B%0A%20%20%7D%0A%7D%0A%0Aclass%20Story%20%7B%0A%20%20constructor%28data%29%20%7B%0A%20%20%20%20this.authorId%20%3D%20data.authorId%3B%0A%20%20%20%20this.id%20%3D%20data.id%3B%0A%20%20%20%20this.text%20%3D%20data.text%3B%0A%20%20%7D%0A%7D%0A%0Aclass%20Viewer%20%7B%0A%20%20constructor%28data%29%20%7B%0A%20%20%20%20this.avatar%20%3D%20data.avatar%3B%0A%20%20%20%20this.id%20%3D%20data.id%3B%0A%20%20%20%20this.name%20%3D%20data.name%3B%0A%20%20%7D%0A%7D%0A%0Avar%20COMMENTS%3B%0Atry%20%7B%0A%20%20COMMENTS%20%3D%20JSON.parse%28localStorage.getItem%28%60relay-tutorial-%24%7BTUTORIAL_VERSION%7D-comments%60%29%29%3B%0A%7D%20catch%28e%29%20%7B%7D%0Aif%20%28COMMENTS%20%3D%3D%20null%29%20%7B%0A%20%20COMMENTS%20%3D%20%5B%0A%20%20%20%20new%20Comment%28%7Bid%3A%20'0'%2C%20authorId%3A%20'2'%2C%20storyId%3A%20'0'%2C%20text%3A%20'Yeah!'%7D%29%2C%0A%20%20%20%20new%20Comment%28%7Bid%3A%20'1'%2C%20authorId%3A%20'3'%2C%20storyId%3A%20'1'%2C%20text%3A%20'OK!'%7D%29%2C%0A%20%20%5D%3B%0A%7D%0A%0Avar%20PEOPLE%3B%0Atry%20%7B%0A%20%20PEOPLE%20%3D%20JSON.parse%28localStorage.getItem%28%60relay-tutorial-%24%7BTUTORIAL_VERSION%7D-people%60%29%29%3B%0A%7D%20catch%28e%29%20%7B%7D%0Aif%20%28PEOPLE%20%3D%3D%20null%29%20%7B%0A%20%20PEOPLE%20%3D%20%5B%0A%20%20%20%20new%20Person%28%7Bid%3A%20'0'%2C%20name%3A%20'You'%2C%20avatar%3A%20'data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABAAgMAAADXB5lNAAAABGdBTUEAALGPC%2FxhBQAAAAFzUkdCAK7OHOkAAAAMUExURcTM3%2F%2F%2F%2F%2Fv8%2BuDk6c%2B84MYAAACySURBVDjLpZLBFcIgEEQDPg4UYAn0kRI8ODEHD5RgCTaRftKE%2FShidAee2aDc%2BG9nZ9mh634%2F9sx3g8gA6OnugQOBGzBwB7DGJSA1IYGjAFMCIFMF7DKY2VX62gyuDcCoFZWtPmkFzBfb%2Fh%2BwYdLnkgcODjgJsC9z0UGVrU8grn0HHdh2SQU2vmVcqyg35vNOYxHtJ1y3gFgULF3CG2RnA3EuUvASOQKPvoHByIo0Szu4A87wlHkPruK3AAAAAElFTkSuQmCC'%7D%29%2C%0A%20%20%20%20new%20Person%28%7Bid%3A%20'1'%2C%20name%3A%20'Steve'%2C%20avatar%3A%20'data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAABGdBTUEAALGPC%2FxhBQAAAAFzUkdCAK7OHOkAAABgUExURc%2BgemdAQNuogWtDQrShlYZ5Ya6dfnRMRhoMDre9wVw6OeGvhYx%2BZbKggVIzM3Q7HItKJkUqKreGaY0ZHaB3W14lDoRUUW9iTZyLbTkaHMOTcV1QP3twWKWVeIxmTXINEfxvSIQAAAAKdFJOU%2F7%2F%2F%2F%2F%2B%2F%2F%2F%2B%2Fv7UjhA5AAAFGklEQVRYw6WXgZqjKBCEMa7BBcSIKIpK3v8trxowYxKTvdtjvswYTf9WVzdthl3%2F52LfLjbN3wKatLagmr8BIHJS07ZNnbv%2BBaC5TqFt21vbzss2bX9K4w3QTGFA%2BO2WfvF1a%2F4ToLFDm2Nvt4gppua%2FAHD7HNu2%2Bc%2FtVAOZ%2FArAmTDf9tUOO8c2J%2BXdsMhidjBvm25Jf0piVzCEt%2BBJqQpLbT8AeK%2BqhWJg4dAOw5ABJOWRQ0N3ibF5bU0GNBtOr8l8WlH%2BkDUMa%2FPQeIw%2BAiYS5BJgIA3G30Ku521w6eav0QTIKUzx3UKqbRtsMP5yYZdLqEnNbZhS3m%2FhFS6wn3iyoLWSIVJe0goD1RSA7SQamlMZmxyvHCSbPTYuyQwB1Gk4OUCAPT4B7BMACIjo1vP4uFVZsz3eh6QAPzJiJC0LwIf43MoHeagek8yGEGDihRnj%2FQV7o%2FicAADT4ZQggLE2AqQ3Nghj5%2FZ2Gp%2F3GDtqQhm8ZH6ZDaMymmDAQ1Os6lMCLwA3DFQFG2IC0nTWSz%2B0bv2YwDOg4m0dq0AvRkd0MJr1cwKvgDDYvX4sH8GKEwXqZ6AczjoXrGU7YT9i9ksCz4C1Kh8AKdnei959TuDFxGoxsI3ivPcmEmQDgPqYwIsHyjnukwJv0oHclq8CngHIYjGXXIbUz3JaVPVFwCtAJYDdfv1S3ETAWwJPAt4ALlbPbL9%2FrzEbqd7bcPsGWMdUfIsujil864ETAMaSyQakHY0M8vqXAFW5SPAmmuFXxxcsd%2BjGLwAa7WsINs9EebF%2B0iPnZVGITq9%2F9mARWBwDwccienTVSgDOx3GsH%2BVQ19M%2BUOtc4nOjCN4Ea4AxwOBkgTXy%2BlBONV1P98IixrEs9IhRhpb2jPbzossCP%2BM4u%2BpYz%2BlMARclAYTB8qkbWVdEBSXnulvWQy2m14Gi3P1OdpUCcwiEtJWmOsZHRKn1skKGerLyRwG%2F95o%2BWHTcZAAEiB0QEQXVYkluTM8KFOfFfaB0C6FhIwEk091PfGRAhbapJ1T6isL2BMQo7ne6X6mFQBFgoXmNjwLFxcTtodwSH21ZAcothl6XMYdCjBhuvNZv8bBolBGgFrdUD4BairEodD9ECeg6qED67%2FG4yKWNCricph2g1m7k0N73UTNKSdEn4bjWWTnCRex76R4mKk0NUOp7klB8CE4AI0sBwMKu624iCRhJ3dDfu4%2BhGaA9Ex16gct1egDQwzy61%2Fd3%2FQeCZr7rHE0u99MHgo9ReXfv%2B7n4RkByF9uJtXKsSf8KsFTDBIAJ35MoRT3ikWWXNchp2wEKe35Ml4f%2BCyFaS8NCYqNbWV0fAKfJgj2HXImTu89ocjzy7CUwby7rYzNRG2eAJgn9nAnxlniVqTnmGvuAMRZkwLcfpqeHArQhz5%2BfCXCfYwAGoe6w6JeGunouRGBocSNsYNe6egag%2FbSINiYbhNCILKml0dldUXQ1nWX0DQrTTk7zk4KSPlDXopwTQZeIx6agKYtwam2Bq6U2zMSBK0NXvQLmGvcQMQnYAEEaKSANiNACCc2xx1h64Hgt3DOg1PNMEmIhqJ90ioteFHFORAkLi9%2FAIGy5HgCxSUHATbpsQ9yS%2BxRJTUQTmoaM0FDTHQBlBFASpDIlMcR5%2FjSLyEUaSQKKODLbmh3AUyPCR0FjebfhtZ9meErp0BLdKPbdqFwCUJYp2dhO7du2mtGKRZdXwfU7gCr16Oh%2BmF9nCQD0nKX6UNNFwD8yN41VJSgkIQAAAABJRU5ErkJggg%3D%3D'%7D%29%2C%0A%20%20%20%20new%20Person%28%7Bid%3A%20'2'%2C%20name%3A%20'Yuzhi'%2C%20avatar%3A%20'data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAABGdBTUEAALGPC%2FxhBQAAAAFzUkdCAK7OHOkAAABgUExURSJ1sUKPxtXZ43uAihtqpFGMuUCBsV6bzCd%2Fvtzg6WSTu4WOmMXK1czS3I6YpXeaupeir3yly2uFobrCz2ZzhxEVKaatt11fabO5wXpycywvQUNJWkJqkZ%2BNesCof%2BDGkznvz6gAAAa6SURBVFjDbVWJgqM6DAuEq1whgRKu7vz%2FXz7JDm1n97kz0JJIlmWnNY88fzzy9Po78OwTA7f2Qz4MuPQDbgyT31v%2Fxd4vjccAbM6%2FHAy9xjyTAA8%2FDHrPf%2Bkhvn9gVz%2F3RPMvCejNY5AkWkH%2Bxv9iUAlUTx094PmbggSDItON238Xkwxg4t6umn%2B%2BazBY7DbRAIIhJf9yReEMiM%2FXZ9zu%2BgkXgmEfBYsd8xv%2BsX%2B4A4BHbuM2IxKaJvbDAwoGMWmGvpR%2BSOhvfD5sfT7120b37zDzY7bbTFPmx7r0eWohGzbc%2BVUvlgakkObNoJnnHFxm28ZzHfAI%2F2OX0g%2F9%2FA1l2%2Bf%2B8ZjXDbh%2BXqdpHddu7IZ5M%2FNqj67fehBu66xzA%2Fx84z%2BWQeM85OsGgnGctm603bhtZpxWO80gXrH6SCWLTXd%2BOjZjfVolO64bJEzRxsmus7Fg2Va8pnmQGU371ehZ7SICWcdJgoBp3%2B1u13EzXTetUzeO3Uo8AcRvavGmsa6CZd6xg2RGBMaudjPWgqGLp92onNs%2FsHXVlCP4pw4I3BEgW7cYLSTEiQR2nc6TPjCV8qtmAhSD4EardxFxxj3G4zTk4WMWSrxnSrwbp85KOqIsL6EjBbaDgTWdMZ7naWCGcKpTrBV5SdIhQbSjZuYeve9xWVA1wkaGAR5P1NlRsHrpIiUuN5iJGYsEEmIX8p%2FRxEUI0F8Wm1zCzZ50aV%2BYdLE3wbIE7F46SljjGUkQF%2BSZpFVqs1ytjTsjUkIIqD8EoQhhkXIwyFAIAljBmhSP7C8sORDs0ZIASSEghFFy4wErIAFMHulSIqCt2q3XqwvOdXAIBFZZWANwYpqwSp1dtwDMEvgJnV9lfH5gpvfiIeKMr22buD9QO6jwOFqpAH3GBwN13dJxdvofRP%2FTr875gBYTj9hxdENw3rl1w4Y%2FiHV0jn0go3E0CB64ictY%2F8Ey8cfJOTmPuFs8CG07rj8pttV7DBwIXi8QsM8ygX%2F%2BKD3EEn8exyE64GRgb0CuQY0IZ7ufH%2BPRHrRxgqiXELw6%2BCW5D47i68%2FLotEotNN17ghlW7c%2BdC8QsGUgYCXoAAMjtBxkwCxEDvCyXAwK1liqsqxLQEgQcKyXcXLS3517LJQ%2Fj%2BcTNAe6j%2FaHSggWKQd%2F11UhsAJN0gXbucDBD5Jjf5IADOCYAtwOoUwAnSYIqgoQhqVTApQXLuKnEU3e47nYpzAgfRfQsrYty6psncOIYRoCBIDgAgG6ECbOeVtSJYYlcG99PUXA4uEV0DUiy8oS71thy0h4hX1cDoOhsQthbRuk3S3XlCC6FtAWlmdgwA6HwFZUhP2ls1O4jPcoi0%2B5GiRBVQe14HS%2Brn2tAoQAzReCkuHsKASOBEiDeXUUCUwQ%2FPNwtchHlFqC85SIt3jewpKyMigyXAJUAsftVyIICU4BWcY3vuUIkABb0Z7MgC1ckM7TAjx31HV1Cv55XnjgRUCdKZVYSjE0rawy01RVe11aHglaUXc9n0kEyKmgTgStXtvWsyEozDQNunapwUzGHfBDJCSK24dPUG8rDWsMOOrykh5430oC%2Bt3ShkPqOM6k4Q33chbpvCgwWXVxzvDIJ4m1WJuKOI4LvSzb3wyTTAQUNE2TVWDQGuovuT45%2BRSC9k2Q%2FNIBJ0HWCEHZ3iVo42rX8UyhhAsLIi8Nlc4TpzeTEjLRUEprSu24NN1NO%2FGnlrx5%2F1YgbSC%2BJoERgrKSR0KaGPxy0sHgMRsev%2F2JISNcslXZR4Ec1284IvBLMcpJrvzwAIH%2F4DmOVZNl8AAXzEJZFBVP2QdvZBTx7QX2y83D5lxSIJm4WQlS8DuHC0qBz8vBGQgllcrpRYNkfORcUazgboKslUN%2BF9E0V4gHR6CSJ8zHb1JtVKZ47DLmSwEG0DGdfjYVfl2Op3x9ijyRCA2%2Brr%2FNfhMYA9%2B9IzNpTVOEJcIEwPCxktIaMngv3bpzf2loSk4492tUV8QkFfreqNtZRgJ2xkga%2BXtHhXlrb4KmwBcvhvksNO6ELaewLc1t35cO5MERUoKiAIHBcToUavSK4LltVYD5LgHzaApYjj42iQH%2F%2BH0jQdLKUqoqfQ2kEj7REFSl4vi%2BMLf2tLMRvByasskk8TcL7vIDVt34d1A%2B%2F6ubQBvz7t6bQEYgk82AXXKVD%2FeWq9KflArownzAjb6wwoOlKRVb3IWoKs2uLf3Qvquoas7gW%2FxdyF3O7UAlnMYUb4bbC1Yg3fuq3qTdwDaCv8Sj4jtL8zYTv9l%2FEaT8Rr29D8T%2FMKjcJLn4J0yyUrpcVCrrNuc%2FAjW43W1wR2IAAAAASUVORK5CYII%3D'%7D%29%2C%0A%20%20%20%20new%20Person%28%7Bid%3A%20'3'%2C%20name%3A%20'Joe'%2C%20avatar%3A%20'data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAABGdBTUEAALGPC%2FxhBQAAAAFzUkdCAK7OHOkAAABgUExURe%2Fv7zcxIGllV3JvZCwmFEpFNmBcTvP09Pj4%2BVVRQz87LZWRhR0YCIyIeYB9curo5wwHAZ2bk0o%2FHr27tX53Y2xeO7CvqKilmuHg3FlNLdbUzsvIvn9vSZGCXqeZesCwkGH6%2BkIAAAkcSURBVFjDbFaJmqQqs2QvAUGRTUCt93%2FLP6ju09Nz79D9WVYJuURGRkrIa65l%2Bbric%2Fm%2B%2BT%2FrZ9P3Ij%2Frc%2FL1s40sf4z9beBj4x%2Fnya%2Ft35Y%2Bzr4%2BfgXw5ejn%2FOtXAL%2FXt6%2Fl9TuMH9f%2F2SL%2FXF8%2B5iZs%2BIbitfwA8y8D2%2B9U%2FjOx%2FGz8ldjrn%2Fj9O4jpfiF%2FwTL%2Fyb%2BOb%2F%2FfAPmcP%2BN3NZb%2FivRl%2FA92fwz0cyPbQrYYR%2BkLWTZyxiXy89Xx6%2FIB49v%2Fp2K%2FM96mgeHqSV7bcoZi3Rjbdobha2GjM0RxzkCm8z8EeH2ffZHtxB8J1sTl3F7dee4dL9GaxFxI%2BmHPiHV7fSX2ldzrJ4MNCxd8t86Hc3ltm7WOK%2BVcddaylI58Ha7a8%2FXJf%2Bby95oWEMBGbPBhzO8xsOSUDdbtq9Qq5yzuNw89jpP8jf2LfM6STxDEJlttP0soNfGU3tU592SmxH3n52E%2BWls6WZa%2FgJ8nYeFzUbKW4XnQiNxd6VHM1rdzMJBzUslbBHj%2BVfDpmJw1xNh738jKOLdOKyNrvVK6kk8sHUojjOdJjnnNQv8NwWs7gf5AYM6WGogW7XLWHVkltzKV7%2Bdud8v5uZ9u4Z%2Fx5EdfvuMG2GeNscRn9FFcHJYYc12JK3EwrY007r6e%2B7rvK4wHOVVUd1jVP%2BcXnF%2FIUCEG%2FYSalLbIzkgljVqpFFIKSvNx3Hm97pxuoFvqsKwP33vscE76dvZtxBic00KsUthOvJLCCGo0pVRKue%2BH1orl5t5PtaOGgSLE6jSCGMX3IuvoPcRqlZLcjk6sYmKlZjVSTyuwpTUV%2BvCP8vAcRrC9MOVQsFi859pahDBCUBbnUWHOjBTrvq5CUAEzUppVHLjdqfZ91Khc8MbUT5NYAKUU4yAdsuA1hELwwwxg3WED%2FsWB3CguuFt59N6L5AvYuJwnQHWstcwt4nDc1BNUIJwaekyPYnrXYoeJltsBIzCovNKhb18LlTOtoUmYZDVaX8cAkSiXBrzHdoX4rD9ak%2B2YC3kZpVmKMU7uk633d56PxMFl6qSPs58n2Y1uCCvDtEiJW%2FQQMLiudjSGdKX2pUz3SKGDIeK6QHHPVZxMRlWJ0Ch9O658X0dmhiEUn5riLd0uBO9UijMFgq58g6UCGTzvRymIh6%2Bxn2imlO%2F7ebd8ZxjKdBXpuZlxjzYsOpeYBFvIK3r7TJqL6wZ1r8dzrrwFiNkVf%2BFJng%2BufIHP7XlDmLzUa%2FA8aR7qiCcqh%2B66b4p9dwrW%2BuSk9JUc2HvjYBrjngYuCpxua6tXTKHYVqgBLowzqnajR%2FKDTJSLHrGJ3UhQmat8XPf7fM%2FzGZFgyzUGmq2GCi5isVSKNnr2KEefX5JyrYBU8wkYGLOiCM9zTRjRzhOkqc5nh%2BKjTucotjrwD1Rtmcnr%2FaARdxzSR7JEowcFrQ7p5TZrdGHbdY95dNtekM2tT8liQglwFXEz61JiKDMYoTxhdBeaJve4O4FQE8ijgVfhIzyo9HnG4hTX3kuz0ybpuqLxwbdJHUmJpKBSgA4CIVAIFX2eo115L1O0EQU59c5YoM6XsEtJmZCzZ%2Bh0cyhDFFvp7FAYeBD7xHA8KGS7J3%2FOufwulbIVQ0drLaWiByTkoDDBpCA8GYk2r1MWkVe731CiB4XIAPJFJox1R9k6MxytD7FQCGGFeB3old0QzWYTaYnqHO1%2BfKpzuiT7HG%2FAh27p04J01mvvasX00wrqhaZHWxkhCZNcQcuMYQ7xP6dNDjRL8RH5HWvZPhb4Dj5CXyDHkCfDJZWw0ZrRkphPXExJdrlr5cGxFMawLtPjasmWUQrm1o4xGQsEtZ%2B9BE%2FpKplZkQ1SoBTHYcI8uUnJ0GZAi6srT5TvS3PmbVEsSTCyIB6oiE2aajlFWOyE7rvSK2TUM%2BiSQXxM7lDzZ5b5um6rqPGR7ZJzKMNAT7ganVi5F5StmpMViEJMAesqD41MrGMVbt6HoA2Nd1btwwMiauXKiTnjBbdKSu4QOxQLikSNAZnFrm5I1WojD7EgYyckl0dzwc2pbeWqPHJAsvAiZLCBQ7iZIc7Dgth32LjQFppxqiQ6GcTZZVsvpqrSWRrBEsNDxSDhwlCQV%2B2rkJ5Er53ehcSLjaDKML2bdhiQy6LhKORScYgs4kOxNaeM7TPlfZeYkKhdJcNyh%2BEI4bJacxBCQiKpwJwSUHvc613mgyIdhvAw7XeEixHG5ruMcjMCjGZgUmJlMmkwqoHkZt3NnBYHbRAMcK7BCSQFFUKlGC561Z5LFchnHKCjMYnTyt3emFGYm5r5ZCZhP0OOo3uYPERumFge03036Wgpwy2BMWOEQU5eC5uEnstiJDhQfp8LfGGwavRxpZaUqsWDXVKj6swWIlY0GMVYh4LaoOecZg5wrAbzfuKFEO%2BkoIIMzZ6VmuiaUDAXHEhaiRCOC9RtRc8WvDYY9OJ8U5y6AbnDovLGMIRTZARhwIdcXeCpjDDfkQDM%2Fzout1yHQRiIBhuQDAHBBcFH97%2FPexy1UtWqwfFjxicWxTyLfpjNfME9lC%2BlEEt92bL4%2FtxD6L%2FVe6lQjFCFXbY0kGUkyfVADjKVO7kNIcO6aRnsM8JfeL91n2zTu4s7Gq64FW7QjCsbTcRuX0ZoaIXADh7YS1VKwKgyN26%2FxNANFWMpBbTJDlCzIpEnfu7yjoizdF3w9cyInb3GpUQakMY3WY4%2B%2FYedZKic8OfeJU2ebzL5M%2BHmKvN3yXPzJXp7vzaQHZ5hlN3aRNzakMSc6qx0ze8gEH%2B8GffpYR3Tpm71lngPPzsGZAfswIWQK0sXQPdUAdV7HsicI7ggQ6Ar6xJLb3Lwg7Z4MflYRUhdXhqmXXqGNLU6bapoxZEKGiMsG%2Fj3uwNpgvt4BCMaWQjvSGxhLAciDe4GqoZfiN6%2BySc9WSOyqtqnnLOWGqTO%2FDJ%2FYZeoaLrMizSD7xQ1uU2Cuj0eNax8P7s55%2BMyzINwAkUuznudTiJE5NBAW37U9PliZ4VEqthOZfx7f0hESJvpwpnPOkrIQJkmCYLBVECpKqY9%2BIQseZgBDZJM6RTCjOWK0fSE7%2FDENA8sS9VRDA9QEKrRBSJnCum75dQcs%2FoeyKrM0c3xH7eYvSa4Uhk8AAAAAElFTkSuQmCC'%7D%29%2C%0A%20%20%20%20new%20Person%28%7Bid%3A%20'4'%2C%20name%3A%20'Tim'%2C%20avatar%3A%20'data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAABGdBTUEAALGPC%2FxhBQAAAAFzUkdCAK7OHOkAAADAUExURfrw0%2BSofzQrIz82LPfq1Pnw4sS5pfvv2v714ygiG7uxnnVIJ%2FGsgv703IFTMeGYaWY9H%2Bmjck8qEpJnQqh7UfHq2ebbxR4WDkw8K%2FDkzPv9%2FvWjZOfi1%2F25jVVIOOzp5v347cd9QdLDrNK1ktGPZZ%2BVgtaKTw0GAtKdeLdyPe2bXeORVPusccODVahkMZJWLNjNu8PCv%2Bzv862kkuu2kdXSzeTJqLqNY72mgZGFdWRYSPP3%2FOjVuf3ju9Xc4HxsVswXvdkAAAlxSURBVFjDZJeJYrJAsoVRIKDsq2AQUFFBRZDgLvr%2BbzWnGpP735lSwaj1dS2nl3CCIHBkkvS5aZwkSl03Kx3HcS%2Bui6tzuVzyc9d1zyjyPU%2FgOk7TOE2WyEngQBD%2BDyBLnCQI3XngOooLdx13hrrkXSdEiQdA2HX4qaZJGjifALjfABipay8X16ngSN6KrrsAXJZLTU7xlP3z%2BemHYfhxZQH8A8CtRegwXXccXdEdRcHNwQdPWZbTVH5%2BLWo%2FxNChH3IfyicMlkjXugVLXjHpZTq6bTomctGvAgByuFj4dEcotc%2F1BOFfwLIoSribimnjaQfwVhCFq5v69RxyYV37cjqdIpQoSv7f%2BAQItbN7KEsdwyq2bZt2ENimougmRYOyXp%2BCH3oiA3jidMr9VwaIID%2FM55UOfx3%2Bph3jZdr423FRCMc9U589UUw8v47SaV9DygCfozES17nF%2FKBUtqKYCsa2AwrDNBE%2FI%2BhLjpNFWRQlAX0Q0%2F%2BJQGsPh0NVmSYDUA1s5EIAENAS%2FQIViakoQgIkm08XKXSJWedWDKArMLjR8ArhcNMBqJyzJomQgwwVab0UOUHqC0g6PjtVdaj0ipn%2BicQ0qRAKBVApyEGUAQABFyjRE4TeWSPA0jGrg3JgVlAsh4ohCIJmKJVy5bRUhK8ok2F4MvgLmiZIWnhBxasKrvOimONVFAddp9h1SoQAl05OPa3XpCx%2BMsfYgiYjG9%2Bx0bJiDuf5fL3GsywqTIqKRK2wMrihnIp9%2FLj%2BAWRJlgWNexKgKsizt926PBzYzMC0tM0eILISUic0DtPTYwBRBFYIHTNQmPeOmWEY6%2Fm8hGVZWaGjulJ0LPiPcZIngEAMEKAO1KCar3fGdrvbbbdbAIwsy4w8H%2BS5C3EHittJAGifR9%2BFTyNE9GFp2s7a2FqG9Q3DzbIMwxowyxzoynSeMmvjH4A6wJ4UhnbWN661nhdlRoNbKgBwb9t2pg7yixIEpv4kIaME7MFWJKFvJbt07sZVUXlFP5SGRQwLwcMohFwHwHmKvZD6GmBhEv6kgEuXTUo125UuhFhkGD4DDUJwLxYB7NjWn5gJMgmJHlzdr25CyGKQpLa0y72xyy5lcSjWKCDutKRmuTqbDbA22W5IAPFj3M%2FPGCtc7ft%2BH4tR6NbeOGAiQolr6kEJCVwogx5QdRrWEywIGntyt9tttQKFYZ6%2Bb%2Byq%2FXc2L6tyjQi%2Bt4PcxcJyyd1soM5a06yyGdYDms8UhUwR%2FKxWK4ZZIZgvY3fY7y3or5wTYK%2FmKKgDDVwMABQFWXWooEeiYSmMyXoKYW7ZFoD995YEuN7u96pRYo0dUArqTK2c733ZkW77%2BQspf32MYQDJtsU3AUiI33inWqTEzEIJZzPrcNjus04IJfF3Dv0BfjG5le0pBCC%2Bt9%2F72UwlLRkqA6hU10EoMe329gdYfAjXwaAHgLDdMy8LjBkzFZPMegrar%2F7x5BYwcvwF%2FeQt4qZ5sIM%2FjYsAkAoDGOu1oXZ%2B6P%2BqDwDffz7rHsJS%2BLkuCYAq%2FAEMCokBst3eUlv8mqkvZPtr6EVR6D%2BJsFz2gGW7B2C3wxU%2Fn6kGmjnDbJrRpKJCk%2Fg%2B6vM5T4wiLxRCfwHA8YhmLJcDlB8B7A5zIztklrGzPoBlu2T9Xq1%2BxbfgmkfTJFhUQr8mwPG4WJyXfQl3tCLStLZQRgIslyzIvt89ZUWAR5qIohf55%2FHxdDrVZ%2F9s9TrY7mg2YU0wiDBrGeBPNL36uKZpHo8mTSXPe34dk6bxnwIBdjv0YWdkUCBSmA0QQst6Nf7HwOBOp1cznU4b7LbP%2BvWYPiJfeA6sLZZ07CzYGbIBlpUBAc6oXN%2Fzfwxz4fgCYComYlg3PSBsDQxfVJjQBhb1ojQGLQALlmG9YIAP58qh%2Bif4AZCGiODxOPmCcM63pOTtzkARSvireCzqV5Kg5TXpdnEmBS6WY87z%2FeMRZRCbRDgdX48kenKRP6CZtGXbgjVQVZqKg8WpmaJh3ulIkUCOT5IPNpboeHw1TdqIwgk%2FmSIF0VuuqZG79Tozen%2FYAl82qRedjqcoofNihGNnzTUiAPAXGzE8oYhp%2BPXzc3MMJgS08RdgtTUVG%2B1OcH8ksBSviGsS%2F0h%2BKKJQnx5TbxUEm9icEwAbE2mI4s%2BtFhE8GlGMEvjjHTXv0SRcEtXUhjRNPAnvxJ%2F4%2Fo439nrL1Ej%2Baovx0cbVOJmmEQNQ31n3pwn3Oi0QwSPFMhnWp%2BMquMdxzNvGmnbG717E2FkG%2B%2FYd32oPKUQJBZC8cCNAVEM%2FULOXis%2FF%2BBbAPQh45bM%2F076E%2FQQB7NX3hI9XQogiHqmfUQT9ignaGIYQsIcUwp87zwc4WPIjHTOJHTEy2pxz5AHAhg%2Fim8%2Fa%2BErQiATq9VBEXHG%2BqRf1LeB5CoAfbhwDAGgQWi5ZJ5GJsxkO4%2FhdR1B%2FkuBQAM%2FQ5xICaPVtOOLpe8Q%2FHI42egZAwQ5aH4AFwGhEMRxfLzZq1OsgSnHmHb9Hk2EM1%2BGQ522eH9kutgVGAIB02FqqC8AwCO5vIFIqAvR4OnKnJPK%2B3vFwEt%2FvaEBACH440akCOKIhA%2BwpLUmBIhihyPd4czuJCRXzCEB9iup3HG%2F4OwOgAkhlOFHcEumDwACwfe5sJhPkCQK%2FGR5pBmBO%2BNz467jCZ5sRys8P6cIPR6OJ7V7KeTnvAWxfy%2FQJAEMekcbDTVx7NCcin%2Fsar%2B4BH%2FATJMiihwGweV8vdDZzAYA%2FHTR0mwFYCPge3aAycqv3PYYfAMwVnNEQbzfx6ppn%2BNfr0gOwLCgMgBCDONiMNj%2BhH%2FkATDZBgMz43rf3Z7a6Xpd5fsnobJHnWVbo9pCKwLMsN5N7iP8hsS9c7xv4UnXIazJhGeCyeY%2BX2GOueW848VTmkL5GulRlPvhPy1W0wjAIAzuFQtzL2Ab65EOL5Gmjo8PGMvD%2F%2F2qXtIE%2BGS%2BXy1XbES5YlqG0zNH2UDQcQ1AaZZwCWFhs2%2Bt9vSWrhHfN6TwD5jiFQUp3zGoyI3Lyh1jRF5x%2B84lQL5ftuZNJnbKnmPIaPjhXAZAiWuJoQzARyHoAYAeAnZ4AqN9ZujoBpbCEWZQR30Tr8Lzz3mADrDH5wwQaCsENV63exb%2BKmCEX2X6vtdxecLOE4QEuK0evswcNSOQtg7KjnZpMvzriqUudi1MNdTNs01c4WkTAoAXIyOieNcwsmFQ%2BMptU%2FCmj%2FqQd%2BMNrmttLbqmL%2FAH66YI587WofgAAAABJRU5ErkJggg%3D%3D'%7D%29%2C%0A%20%20%20%20new%20Person%28%7Bid%3A%20'5'%2C%20name%3A%20'Jan'%2C%20avatar%3A%20'data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAABGdBTUEAALGPC%2FxhBQAAAAFzUkdCAK7OHOkAAADAUExURVN8tFaEumGQxI5ZPw0FB1yMwx0QDFuJvWCMwFV%2Ftz8rJFF9uYJNOCYZFmGSy3hINoRTPW5ALjEjHZNfRkY0LptoUlN6rFA7NGpZVWE3KA4SHmFFOd60nFx%2BrbyQeW2Pu9Ooj6d0XsabgmBMR7GDbYZnWGJ8omt4kktCRYNdTG9QQVxjd%2BnBqZh2ZGyHrE1liRchNIp5b358iVcnGD4ZDi4zP5uGfnVsbfLKsrOflFJRX1dymz1ScI2NmSc9X%2Fvcx86TuIcAAAkhSURBVFjDbJaHeqJaFIVBEBRFilQRpEoTe4smmfd%2Fq7v2wZSZ724zkYzu%2F6xdgeNgEzKOc0JcOqHjcBNuPJk46%2FJ4PVyvt9ux3O3ed2tnjG86%2BL7j0O%2BXTb4Ir7%2FH%2BJCfOM7YCdflx%2FV69Tzv2O627e4JtDMhj78A4%2FGY%2B4Ujzlgm7yf8P463zLJM73gsP0DYrcNxD%2BB%2BA3pNzpcQSAjDNbzL8lFlimS6iuU92lv7eH8v10%2FnXwAZ4g57fwDxMcSXx9tlvxBFUZVMxTt4VuVdxMWl3Dp90OO%2F%2FB06lPLGsdO327L8OCiiKImiqeLH9TxLyirTqtotO9z5GwALASAB0I7Ty%2BPxqIgSTK1MUVVVSbFE01IUpWr%2FDzAmY3GR9rJ9tMebp0oMQG%2Fwd03JzALFuryz7%2F0GjF9t4Mgs9o%2BPm%2Bex1EsUAnMXkQaQskOmABAyCZPfxzPA9hmS%2F%2FHgeYdDZqkiSwFyqJqmJJngqEqDajz7GMa%2FA2DF3623CP1wLZqgKAJTWiB2yqHUh4IfU1WqR4lkMdV%2FdxLE71pU7nY9NE3QNIqE01XEoahdlBfBWTqruJbMql2HrHcm45exDFLfHB%2BPG8QXRVEzf%2FUionzN2%2F3PZrnMA0WBAkm9VE9kcfzLiAb%2F4%2FH2sFw3COpDgYwToJKUouv%2B%2FPlz32yWUW0pJhK5uOwc5vajYEICkPzrregChO8qlDIEoCpuUXfL%2B2YZR2maN4FyPqvSfvdk0%2FMXAPo%2F3t6gviP5KpofFTBN0y2aIl5u4jTK864OAgsttXjfURP8CoEPS5SeIu%2Bu1zpD3lzXVFDHs5QhouiNLOpsrQn801lVLy1mcsIzBf0Ahx8fnoXMI31FoOBgybRcNI5ouYHbdG9v1%2BsbRHRUHctU9xcAuMnwdT4HBdtbpSjIX5C5%2BAKVS1QsSfU8CWN4fTtgmvGWMoKrLBbvVEn%2BJ4R1WZkYE9e1ECM1r4oGEEWPWvJ6KLKM9QSVJ2hqjOR%2Bvwtf5R%2FzPM9xAKiKghoiffCnBkQe0BJYZ8UByUVVTDS15XlN03jWZfEeyt%2F%2BPBc%2Bj17lkgAEz7rWFE3vcLsdrjfrcF8iBOyVBdpa8bLA86rL5TPkHZ75jxmgvHmZYlUKa3ucLkmWZXmNFzTF8q0OXFVcEEJcuFmWVdnl8zPsVwDPFDx3LQGQBjZ%2FKq0gGLZHUV%2B78wkdCG8gALGyzMsq2gkjjn8Zt27bzHORRctqssBEHkz0Abru5PuabWtIi8oIJMOsHl77%2BRxz8k8jtY9HBQCObIrOU6SzEuCcOjjDpFOyTBv4LXoCynGpHu0a6xN9wLMXhyFG%2FdGAgV%2FnReNTI7pBjSnAFHa%2BFqWdRGuFKUCRxUv5HA8nk%2B8QMIeBpVhm5eqJoNu6gZOVIo%2F%2BbGgQY%2F3URZ2C2tJOYekQF%2BgDbsb3Anju5gXIDPb2OZkaeNWnrgu6OL7DNvc410963vk4XBGVoLla4n6xeIYy%2F63g5rloItcS3eSsTQ3N0OKu7tLl5r6J4yixp1Mtye2iu57dQquvhbjY7xc7efwNsKgEFgCePbWnwimKN12Xp2wPpLktzAXNsBO7s3V9Oq1r77JY7MXPcPQNcDM3aCBBzIwkN3wDrlHRLQHYMAHzZD6dTv3TScCHWlEAsNgjiG9A5Qa0BDCC1yhH9e30nibRcok9lkaQlER5rflGYRsno278Zq8iCfvwVwgVAIpbAbDB5rHtaBnHzD%2FOk7luR8Bofh1vIigwfBcCLuI7hSCzF6dkWROgERTR3dzv2KA4vfdHAPY8T9MoqX0tjyPfN%2FxAoQj2axnWE7gKTyCey24gxWZ5X8Z2jA5CBdIcgCSiTNaapicdCQjcPYqAeX6dL8tc62HssIlolfiCbQvTCD3I%2FBM7SaIoSoSp4fvn08kwjCDbrXe7kOd4%2BWVcW1WKy3a%2BqhiaNp0KlAQswYQBIGOuGyeaLcM%2FGZm33oYrmR8MfwNQBAwxNqE2Ra2nCQEonWSJjT6AANTRZwA5hBeG4RuwbR%2B4BykUQg%2BYCyn0owJzAWbPhSkI0AbE6ZQdoZ3nh9yPgu22xVLGMgOg0XVhKgh5%2FOUuzEmFjgLquq4ZJ%2F9R9sHzPzmQaSuTP8YeAPhNk5T5zwVdt5Oc0mhrJ02HkqwtX34%2FgJGz%2FlyoJEA0A3gAME9svQcIqGMaU0pqdIFeey11wPBbPwGG4%2FX7fsEAkg8AScf59NOHQBJwc50jjtort%2FI%2FxvGD1fMCCdgUkguAzUIno9%2FQQ0rqurZRiuyxHg3%2FBQxH%2FHbHHimxMwDI53CZ2z0ChrqwOlIp8ZgovwA%2FVRjK3Gr9fsGmkkSUYZ7nc535vgAgaJpGdcTItKsZS8BwOByNvqqAq235wIyq4hmAJE6mwsvmlEfUjzWCETRZS65MAACjVxXwH6ORs1tg%2FZvGvLaX6RxFh6fQK0BzwR8pDPCENRp%2Bmfx650YDovHOhR4qdbtO8EilT4mhv3RQDEbg%2B1a1Ww2%2B%2FEhBD8DxZPKObl7NvEjie4xFNMUKJAJpQQ4C16U7yog5ftlLAcWCf2GLRZFRCHcEodEKJWdgsKgDci%2B3K3k4G%2F1jDMAgq08AikKgfZxPv40yGFD429VqNBj8AGT2AoDOH0DPavXc4UlNiHFDSBPtlz%2FWSFvSl4aDwS%2F9PwoABno8m22Pdaen9w32IO1yGu5egFeu%2BFHv%2FV2GwWjwArAPBsPZYLg6Fp2QbjZplOaUg1cTQcB2MGA%2BBBiwV19KmSkgAYPhaDgDAGsdNwRIsHVKJGtCZGA1Gw1msyEOnTEbDmdMRV8FhngB6hprnR5N53ofAQ2C2w6gb0ieMjuMLvFGV9zgiyCPAOh6AFap0KcQNSTAajbrVcOPfAckgF1ygy%2BTB7PVRz7%2Fr%2BgqWkEYhoFSGVYQ3INDhrqglMkezB6GD51j%2F%2F9ZXq4tCxQKJddLe%2FSaIcCUA630dE6X0F5nta1JnpuVukFhRzxbRJESu2bozNX3JuVCACJ%2Bi8gBGBg52WfmBQAKcZVG2JiV0NSMdAIAQLunEFIKXyZiaRsA4CW%2BwocAfODrnA8AtGuQ8q%2FXnpmqDwK6jYEdayX2LYc1358sn4bQ3i7TBO%2F9whPNV9dlHJfVAp3D0bs%2FjC5EG4jOzAQAAAAASUVORK5CYII%3D'%7D%29%2C%0A%20%20%5D%3B%0A%7D%0A%0Avar%20STORIES%3B%0Atry%20%7B%0A%20%20STORIES%20%3D%20JSON.parse%28localStorage.getItem%28%60relay-tutorial-%24%7BTUTORIAL_VERSION%7D-stories%60%29%29%3B%0A%7D%20catch%28e%29%20%7B%7D%0Aif%20%28STORIES%20%3D%3D%20null%29%20%7B%0A%20%20STORIES%20%3D%20%5B%0A%20%20%20%20new%20Story%28%7Bid%3A%20'0'%2C%20text%3A%20'Everybody%20ready%20to%20publish%20a%20new%20version%3F'%2C%20authorId%3A%20'1'%7D%29%2C%0A%20%20%20%20new%20Story%28%7Bid%3A%20'1'%2C%20text%3A%20'Anyone%20want%20to%20grab%20lunch%3F'%2C%20authorId%3A%20'2'%7D%29%2C%0A%20%20%20%20new%20Story%28%7Bid%3A%20'2'%2C%20text%3A%20'I%20have%20a%20new%20idea%3B%20anyone%20want%20to%20grab%20a%20whiteboard%20and%20sketch%20it%20out%3F'%2C%20authorId%3A%20'3'%7D%29%2C%0A%20%20%20%20new%20Story%28%7Bid%3A%20'3'%2C%20text%3A%20'%23728131%2C%20%23711151%2C%20and%20%23817129%20are%20fixed%20and%20landed.'%2C%20authorId%3A%20'4'%7D%29%2C%0A%20%20%20%20new%20Story%28%7Bid%3A%20'4'%2C%20text%3A%20'I%5C'm%20working%20on%20something%20that%20should%20increase%20developer%20efficiency.%20Stay%20tuned!'%2C%20authorId%3A%20'5'%7D%29%2C%0A%20%20%5D%3B%0A%7D%0A%0Avar%20VIEWER%20%3D%20new%20Viewer%28PEOPLE%5B0%5D%29%3B%0A%0A%2F**%0A%20*%20Let%20Relay%20map%20between%3A%0A%20*%20-%20global%20IDs%20and%20the%20object%20they%20represent%0A%20*%20-%20objects%20and%20the%20GraphQL%20type%20associated%20with%20them%0A%20*%2F%0Avar%20%7BnodeInterface%2C%20nodeField%7D%20%3D%20nodeDefinitions%28%0A%20%20%28globalId%29%20%3D%3E%20%7B%0A%20%20%20%20var%20%7Btype%2C%20id%7D%20%3D%20fromGlobalId%28globalId%29%3B%0A%20%20%20%20if%20%28type%20%3D%3D%3D%20'Comment'%29%20%7B%0A%20%20%20%20%20%20return%20COMMENTS.find%28obj%20%3D%3E%20obj.id%20%3D%3D%3D%20id%29%3B%0A%20%20%20%20%7D%20else%20if%20%28type%20%3D%3D%3D%20'Person'%29%20%7B%0A%20%20%20%20%20%20return%20PEOPLE.find%28obj%20%3D%3E%20obj.id%20%3D%3D%3D%20id%29%3B%0A%20%20%20%20%7D%20else%20if%20%28type%20%3D%3D%3D%20'Story'%29%20%7B%0A%20%20%20%20%20%20return%20STORIES.find%28obj%20%3D%3E%20obj.id%20%3D%3D%3D%20id%29%3B%0A%20%20%20%20%7D%20else%20if%20%28type%20%3D%3D%3D%20'Viewer'%29%20%7B%0A%20%20%20%20%20%20return%20VIEWER%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20null%3B%0A%20%20%7D%2C%0A%20%20%28obj%29%20%3D%3E%20%7B%0A%20%20%20%20if%20%28obj%20instanceof%20Comment%29%20%7B%0A%20%20%20%20%20%20return%20CommentType%3B%0A%20%20%20%20%7D%20else%20if%20%28obj%20instanceof%20Person%29%20%7B%0A%20%20%20%20%20%20return%20PersonType%3B%0A%20%20%20%20%7D%20else%20if%20%28obj%20instanceof%20Story%29%20%7B%0A%20%20%20%20%20%20return%20StoryType%3B%0A%20%20%20%20%7D%20else%20if%20%28obj%20instanceof%20Viewer%29%20%7B%0A%20%20%20%20%20%20return%20ViewerType%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20null%3B%0A%20%20%7D%0A%29%3B%0A%0A%2F**%0A%20*%20Define%20an%20interface%20that%20all%20person-like%20objects%20will%20conform%20to%0A%20*%2F%0A%0Avar%20PersonableInterface%20%3D%20new%20GraphQLInterfaceType%28%7B%0A%20%20name%3A%20'Personable'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20avatar%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20description%3A%20'The%20URL%20of%20a%20person%5C's%20avatar%20image'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20comments%3A%20%7B%0A%20%20%20%20%20%20type%3A%20CommentConnectionType%2C%0A%20%20%20%20%20%20description%3A%20'Comments%20made%20on%20stories%20by%20this%20person'%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28obj%2C%20args%29%20%3D%3E%20connectionFromArray%28%0A%20%20%20%20%20%20%20%20COMMENTS.filter%28comment%20%3D%3E%20comment.authorId%20%3D%3D%3D%20obj.id%29%2C%0A%20%20%20%20%20%20%20%20args%0A%20%20%20%20%20%20%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20name%3A%20%7B%20type%3A%20GraphQLString%20%7D%2C%0A%20%20%20%20stories%3A%20%7B%0A%20%20%20%20%20%20type%3A%20StoryConnectionType%2C%0A%20%20%20%20%20%20description%3A%20'Stories%20written%20by%20this%20person'%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28obj%2C%20args%29%20%3D%3E%20connectionFromArray%28%0A%20%20%20%20%20%20%20%20STORIES.filter%28story%20%3D%3E%20story.authorId%20%3D%3D%3D%20obj.id%29%2C%0A%20%20%20%20%20%20%20%20args%0A%20%20%20%20%20%20%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%20%20resolveType%28obj%29%20%7B%0A%20%20%20%20return%20obj%20instanceof%20Person%20%3F%20PersonType%20%3A%0A%20%20%20%20%20%20obj%20instanceof%20Viewer%20%3F%20ViewerType%20%3A%0A%20%20%20%20%20%20null%3B%0A%20%20%7D%2C%0A%7D%29%3B%0A%0A%2F**%0A%20*%20Configure%20each%20type%20of%20object%3A%20Comments%2C%20People%2C%20Stories%2C%20and%20the%20Viewer%0A%20*%2F%0Avar%20CommentType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Comment'%2C%0A%20%20description%3A%20'A%20comment%20on%20a%20story'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20author%3A%20%7B%0A%20%20%20%20%20%20type%3A%20PersonType%2C%0A%20%20%20%20%20%20description%3A%20'The%20author%20of%20this%20comment'%2C%0A%20%20%20%20%20%20resolve%3A%20%28obj%29%20%3D%3E%20PEOPLE%5Bobj.authorId%5D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20id%3A%20globalIdField%28'Comment'%29%2C%0A%20%20%20%20story%3A%20%7B%0A%20%20%20%20%20%20type%3A%20StoryType%2C%0A%20%20%20%20%20%20description%3A%20'The%20story%20this%20comment%20is%20attached%20to'%2C%0A%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20STORIES%5Bobj.storyId%5D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20text%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0Avar%20PersonType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Person'%2C%0A%20%20description%3A%20'A%20person%20who%20writes%20stories%20and%20comments'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20avatar%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20description%3A%20'The%20URL%20of%20a%20person%5C's%20avatar%20image'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20comments%3A%20%7B%0A%20%20%20%20%20%20type%3A%20CommentConnectionType%2C%0A%20%20%20%20%20%20description%3A%20'Comments%20made%20on%20stories%20by%20this%20person'%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28obj%2C%20args%29%20%3D%3E%20connectionFromArray%28%0A%20%20%20%20%20%20%20%20COMMENTS.filter%28comment%20%3D%3E%20comment.authorId%20%3D%3D%3D%20obj.id%29%2C%0A%20%20%20%20%20%20%20%20args%0A%20%20%20%20%20%20%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20id%3A%20globalIdField%28'Person'%29%2C%0A%20%20%20%20name%3A%20%7B%20type%3A%20GraphQLString%20%7D%2C%0A%20%20%20%20stories%3A%20%7B%0A%20%20%20%20%20%20type%3A%20StoryConnectionType%2C%0A%20%20%20%20%20%20description%3A%20'Stories%20written%20by%20this%20person'%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28obj%2C%20args%29%20%3D%3E%20connectionFromArray%28%0A%20%20%20%20%20%20%20%20STORIES.filter%28story%20%3D%3E%20story.authorId%20%3D%3D%3D%20obj.id%29%2C%0A%20%20%20%20%20%20%20%20args%0A%20%20%20%20%20%20%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%2C%20PersonableInterface%5D%2C%0A%7D%29%3B%0A%0Avar%20StoryType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Story'%2C%0A%20%20description%3A%20'A%20story%20written%20by%20a%20person'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20author%3A%20%7B%0A%20%20%20%20%20%20type%3A%20PersonType%2C%0A%20%20%20%20%20%20description%3A%20'The%20author%20of%20this%20story'%2C%0A%20%20%20%20%20%20resolve%3A%20%28obj%29%20%3D%3E%20PEOPLE%5Bobj.authorId%5D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20comments%3A%20%7B%0A%20%20%20%20%20%20type%3A%20CommentConnectionType%2C%0A%20%20%20%20%20%20description%3A%20'Comments%20people%20have%20made%20on%20this%20story'%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28obj%2C%20args%29%20%3D%3E%20connectionFromArray%28%0A%20%20%20%20%20%20%20%20COMMENTS.filter%28comment%20%3D%3E%20comment.storyId%20%3D%3D%3D%20obj.id%29%2C%0A%20%20%20%20%20%20%20%20args%0A%20%20%20%20%20%20%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20id%3A%20globalIdField%28'Story'%29%2C%0A%20%20%20%20text%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0Avar%20ViewerType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Viewer'%2C%0A%20%20description%3A%20'The%20acting%20person%20%28eg.%20the%20logged%20in%20visitor%29'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20avatar%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20description%3A%20'The%20URL%20of%20the%20viewer%5C's%20avatar%20image'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20comments%3A%20%7B%0A%20%20%20%20%20%20type%3A%20CommentConnectionType%2C%0A%20%20%20%20%20%20description%3A%20'Comments%20on%20stories%2C%20made%20by%20the%20viewer'%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28obj%2C%20args%29%20%3D%3E%20connectionFromArray%28%0A%20%20%20%20%20%20%20%20COMMENTS.filter%28c%20%3D%3E%20c.authorId%20%3D%3D%3D%20obj.id%29%2C%0A%20%20%20%20%20%20%20%20args%0A%20%20%20%20%20%20%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20id%3A%20globalIdField%28'Viewer'%29%2C%0A%20%20%20%20name%3A%20%7B%20type%3A%20GraphQLString%20%7D%2C%0A%20%20%20%20friends%3A%20%7B%0A%20%20%20%20%20%20type%3A%20PersonConnectionType%2C%0A%20%20%20%20%20%20description%3A%20'Friends%20of%20the%20viewer'%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28obj%2C%20args%29%20%3D%3E%20connectionFromArray%28%0A%20%20%20%20%20%20%20%20PEOPLE.filter%28p%20%3D%3E%20p.id%20!%3D%3D%20obj.id%29%2C%20%0A%20%20%20%20%20%20%20%20args%0A%20%20%20%20%20%20%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20stories%3A%20%7B%0A%20%20%20%20%20%20type%3A%20StoryConnectionType%2C%0A%20%20%20%20%20%20description%3A%20'Stories%20written%20by%20the%20viewer'%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28obj%2C%20args%29%20%3D%3E%20connectionFromArray%28%0A%20%20%20%20%20%20%20%20STORIES.filter%28story%20%3D%3E%20story.authorId%20%3D%3D%3D%20obj.id%29%2C%0A%20%20%20%20%20%20%20%20args%0A%20%20%20%20%20%20%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20storyFeed%3A%20%7B%0A%20%20%20%20%20%20type%3A%20StoryConnectionType%2C%0A%20%20%20%20%20%20description%3A%20'Stories%20visible%20to%20the%20viewer'%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28obj%2C%20args%29%20%3D%3E%20connectionFromArray%28STORIES%2C%20args%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%2C%20PersonableInterface%5D%2C%0A%7D%29%3B%0A%0A%2F**%0A%20*%20Set%20up%20the%20connections%20between%20types%0A%20*%2F%0Avar%20%7B%0A%20%20connectionType%3A%20CommentConnectionType%2C%0A%20%20edgeType%3A%20CommentEdgeType%2C%0A%7D%20%3D%20connectionDefinitions%28%7B%0A%20%20name%3A%20'Comment'%2C%0A%20%20nodeType%3A%20CommentType%2C%0A%7D%29%3B%0A%0Avar%20%7B%0A%20%20connectionType%3A%20PersonConnectionType%2C%0A%20%20edgeType%3A%20PersonEdgeType%2C%0A%7D%20%3D%20connectionDefinitions%28%7B%0A%20%20name%3A%20'Person'%2C%0A%20%20nodeType%3A%20PersonType%2C%0A%7D%29%3B%0A%0Avar%20%7B%0A%20%20connectionType%3A%20StoryConnectionType%2C%0A%20%20edgeType%3A%20StoryEdgeType%2C%0A%7D%20%3D%20connectionDefinitions%28%7B%0A%20%20name%3A%20'Story'%2C%0A%20%20nodeType%3A%20StoryType%2C%0A%7D%29%3B%0A%0A%2F**%0A%20*%20Configure%20a%20mutation%20to%20allow%20people%20to%20make%20comments%0A%20*%2F%0A%0Avar%20AddCommentMutation%20%3D%20mutationWithClientMutationId%28%7B%0A%20%20name%3A%20'AddComment'%2C%0A%20%20inputFields%3A%20%7B%0A%20%20%20%20storyId%3A%20%7B%20type%3A%20new%20GraphQLNonNull%28GraphQLID%29%20%7D%2C%0A%20%20%20%20text%3A%20%7B%20type%3A%20new%20GraphQLNonNull%28GraphQLString%29%20%7D%2C%0A%20%20%7D%2C%0A%20%20outputFields%3A%20%7B%0A%20%20%20%20commentEdge%3A%20%7B%0A%20%20%20%20%20%20type%3A%20CommentEdgeType%2C%0A%20%20%20%20%20%20resolve%3A%20%28%7BlocalCommentId%7D%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20var%20comment%20%3D%20COMMENTS.find%28%28c%29%20%3D%3E%20c.id%20%3D%3D%3D%20localCommentId%29%3B%0A%20%20%20%20%20%20%20%20return%20%7B%0A%20%20%20%20%20%20%20%20%20%20cursor%3A%20cursorForObjectInConnection%28COMMENTS%2C%20comment%29%2C%0A%20%20%20%20%20%20%20%20%20%20node%3A%20comment%2C%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20story%3A%20%7B%0A%20%20%20%20%20%20type%3A%20StoryType%2C%0A%20%20%20%20%20%20resolve%3A%20%28%7BstoryId%7D%29%20%3D%3E%20STORIES.find%28s%20%3D%3E%20s.id%20%3D%3D%3D%20storyId%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20viewer%3A%20%7B%0A%20%20%20%20%20%20type%3A%20ViewerType%2C%0A%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20VIEWER%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%2C%0A%20%20mutateAndGetPayload%3A%20async%20%28%7BstoryId%2C%20text%7D%29%20%3D%3E%20%7B%0A%20%20%20%20var%20localCommentId%20%3D%20COMMENTS.length%3B%0A%20%20%20%20COMMENTS.push%28%7B%0A%20%20%20%20%20%20authorId%3A%20VIEWER.id%2C%0A%20%20%20%20%20%20id%3A%20localCommentId%2C%0A%20%20%20%20%20%20storyId%3A%20fromGlobalId%28storyId%2C%20'Story'%29.id%2C%0A%20%20%20%20%20%20text%2C%0A%20%20%20%20%7D%29%3B%0A%20%20%20%20localStorage.setItem%28%60relay-tutorial-%24%7BTUTORIAL_VERSION%7D-comments%60%2C%20JSON.stringify%28COMMENTS%29%29%3B%0A%20%20%20%20await%20new%20Promise%28r%20%3D%3E%20setTimeout%28r%2C%20500%20%2B%20Math.random%28%29%20*%201000%29%29%3B%0A%20%20%20%20return%20%7BlocalCommentId%2C%20storyId%7D%3B%0A%20%20%7D%0A%7D%29%3B%0A%0A%2F**%0A%20*%20Finally%2C%20configure%20the%20root%20Query%20and%20Mutation%20type%0A%20*%2F%0Avar%20QueryType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Query'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20node%3A%20nodeField%2C%0A%20%20%20%20viewer%3A%20%7B%0A%20%20%20%20%20%20type%3A%20ViewerType%2C%0A%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20VIEWER%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0Avar%20MutationType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Mutation'%2C%0A%20%20fields%3A%20%7B%0A%20%20%20%20addComment%3A%20AddCommentMutation%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20QueryType%2C%0A%20%20mutation%3A%20MutationType%2C%0A%7D%29%3B).
",steveluscher,2016-02-06 00:20:33
717,2016-02-06 01:05:27,"If you'd like to give `master` a shot, I think it should fix your problem @shahankit!
",steveluscher,2016-02-06 00:20:33
717,2016-02-06 14:16:13,"Ok I'll try it later, because I'm using it with Relay patched for React-Native.
",shahankit,2016-02-06 00:20:33
716,2016-01-04 11:41:42,"It seems that only fields of a node can be changed that are known prior to commiting the mutation. In my payload there is a variable count of nodes that need to be updated, but the config examples I found rely on known IDs in the props.

Why do we even need `FIELDS_CHANGE`? Can't Relay just update every node that is in a payload?
And if it is needed, how about having a field in the config that returns the node to be changed, given the whole payload. e.g.:

<S_CODE_TOKEN>
",Gregoor,2016-01-04 14:38:05
716,2016-01-04 14:16:24,"Remember, the mutation config is used to design the mutation query passed to the server. With the constraint of a single round trip, you can't have the mutation query depend on the mutation payload, that's impossible.

In cases where a large portion of the graph is affected, the only thing you can do today is to use REQUIRED_CHILDREN to pull out some data from the payload and use that data to kick off a second fetch. For example you could ask for the `affectedNodeIDs`, and then use those IDs as variables to another Relay fragment.

It'd be useful to have a nice, repeatable way to do this via mutations though. Fundamentally it'll require two round trips so it'd be a new type of mutation config... maybe something like `EXPIRE_NODES` that instructs the Relay store to purge it's local cache of a list of IDs, and then ask the containers subscribing to those nodes to refetch their data...
",NevilleS,2016-01-04 14:38:05
716,2016-01-04 14:21:43,"Maybe I'm missing something: In what way can a config change the query?

I would imagine that without FIELDS_CHANGE, Relay could just require IDs for all the nodes in the fat query, so that it knows which fields to update.
",Gregoor,2016-01-04 14:38:05
716,2016-01-04 14:38:05,"Since we can't know what is already loaded (and can't do the intersection with the fat-query) without knowing the ID, letting the server just return everything would be overfetching. So I guess my ideas from the original post are against the spirit of Relay.
",Gregoor,2016-01-04 14:38:05
716,2016-01-04 14:40:41,"Heh, I don't think it's necessarily ""against the spirit"". Mutations that affect arbitrary portions of the graph are a real-world problem so there should be a ""Relay-ish"" way to solve it. Right now you can do two round trips using `REQUIRED_CHILDREN` to get the affected IDs from the payload, but that's a lot of boilerplate, so it might be nice to support something a bit more declarative. Personally I like the idea of building in a way for the GraphQL server to instruct Relay which nodes have been changed, so Relay can go ahead and at least expire those nodes from it's local store, but I haven't thought it through a ton yet.
",NevilleS,2016-01-04 14:38:05
715,2016-01-04 01:02:49,"I'm using react-router-relay, and this may be a limitation imposed by that, so if so I apologize.

When creating a Relay Container, perhaps via `Relay.createContainer`, why must there be fragments specified? In some cases, I must create Relay Containers just so that child Relay Containers can properly function. The parent Relay Container does not actually have any data dependencies of its own.

I see that you can omit any actual fragments, and just set `fragments` to an empty Object, but could it be taken a step further and allow `Relay.createContainer` to look something as simple as ...

<S_CODE_TOKEN>
",ryancole,2016-01-04 01:05:08
715,2016-01-04 01:05:08,"Hmm, nevermind, I guess you can't set `fragments` to an empty Object. I thought I recalled doing so.
",ryancole,2016-01-04 01:05:08
714,2016-01-03 17:37:08,"`babel-relay-plugin` depends transforms the “Relay.QL” TaggedTemplateExpression nodes in the source. If it does not run before the “es2015-template-literals” transform, it will not transform the Relay.QL template literals correctly.

This is important, because with Babel 6, you can’t control the plugin order. And so in a case like React Native, where plugins from React Native’s babelrc are loaded before the projects babelrc, it’s impossible to use the Babel Relay Plugin without overriding the entire transform list.

Note - I made this change in the babelAdapter, rather than in the plugin code itself, in order to retain Babel 5 compatibility.
",skevy,2016-03-02 19:11:06
714,2016-01-25 22:07:52,"@facebook-github-bot import
",josephsavona,2016-03-02 19:11:06
714,2016-01-25 22:17:32,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1509715672662867/int_phab to review.
",facebook-github-bot,2016-03-02 19:11:06
714,2016-01-26 16:32:07,"@skevy thanks!
",josephsavona,2016-03-02 19:11:06
714,2016-01-26 16:37:52,"@josephsavona woot! one step closer. :)
",skevy,2016-03-02 19:11:06
714,2016-01-31 20:55:21,"@skevy Since we ended up [having to revert](https://github.com/facebook/relay/commit/c0e6da5cca5ea71dd739f5200da2e6c0cd4a95b5#commitcomment-15737021) due to a conflict with an internal transform, let's reopen this to continue iterating - i'll follow-up hopefully tomorrow with more feedback about direction.
",josephsavona,2016-03-02 19:11:06
714,2016-02-01 23:08:03,"@skevy We resolved the conflict with our internal plugin, so we could proceed with reimporting this. However, @DmitrySoshnikov has recently added [an option to control plugin ordering](https://github.com/babel/babel/pull/3281#issuecomment-173684655) in babel. I haven't dug into the React Native OSS setup in a while, but I'm wondering if that same type of configuration would allow the Relay plugin to run before the default RN transforms?
",josephsavona,2016-03-02 19:11:06
714,2016-02-02 04:09:57,"This may not necessarily be needed anymore actually, with some changes that we've done on the RN side (we're going to use a preset now, which plays into taking advantage of @DmitrySoshnikov's changes). 

Will test when that gets merged in (should be tomorrow or so) and I'll report back. :-)

Thanks @josephsavona!
",skevy,2016-03-02 19:11:06
714,2016-02-05 18:53:45,"@josephsavona so as it turns out...presets still run before things defined in plugins...so really, @DmitrySoshnikov's doesn't help if we want to do this in babelrc:

<S_CODE_TOKEN>

This will still let `babel-plugin-transform-es2015-template-literals` (which is present in the preset) run before the Relay plugin, and thus still cause breakage.

The only way we'd be able to take advantage of `passPerPreset` is to actually create a `./babelRelayPlugin` preset. I guess you'd make it do something like:

<S_CODE_TOKEN>

And then do this in your .babelrc:

<S_CODE_TOKEN>

It would work...doesn't seem ideal though and seems kind of confusing. Thoughts?
",skevy,2016-03-02 19:11:06
714,2016-02-05 20:50:08,"@skevy i agree that isn't ideal, but it's not magic and makes it clear to users that the Relay plugin will run first. This means no code changes are required (right?) In that case, would you mind updating the plugin docs to describe how to configure for React Native? :-)
",josephsavona,2016-03-02 19:11:06
714,2016-02-05 21:51:37,"Yah. I suppose it's fine. I can update the docs when this actually becomes possible.

Us non-fb peeps have to wait until this feature is released out into the wild. Gonna check with the Babel folks to get a timeline on when that might be.
",skevy,2016-03-02 19:11:06
714,2016-02-06 01:23:52,"> so really, @DmitrySoshnikov's doesn't help if we want to do this in babelrc

Yeah, if you have presets, and `passPerPreset`, then it should be something like:

<S_CODE_TOKEN>

These presets should run in order. However plugins within each preset are still merged.
",DmitrySoshnikov,2016-03-02 19:11:06
714,2016-02-06 17:14:39,"When Babel 6.5.0 gets released (which I think is tomorrow?) I'm going to test all this out and I will report back. :)
",skevy,2016-03-02 19:11:06
714,2016-02-06 18:27:36,"@skevy sounds great, thanks again for following up on this :-)
",josephsavona,2016-03-02 19:11:06
714,2016-02-08 05:35:09,"@josephsavona I can confirm that doing:

<S_CODE_TOKEN>

works as we discussed.

Sometimes, interestingly, this is not necessary, and you can do the more normal:

<S_CODE_TOKEN>

However, I think the fact that it works sometimes is just a fluke in how Babel runs the transforms. Therefore, I think from a documentation perspective, we should recommend `passPerPreset` (despite it's status as an experimental option, I think it (or some version of it) will stick around)...
",skevy,2016-03-02 19:11:06
714,2016-02-08 15:09:09,"Yeah, I think we would want to change `passPerPreset` to be a flag in each preset you can set instead of a global one
",hzoo,2016-03-02 19:11:06
714,2016-02-08 21:13:01,"> Sometimes, interestingly, this is not necessary, and you can do the more normal

Yeah, if you put `presets` before `plugins` it seems might run them first, depending on order, which is bad. Anyways, I'd avoid indeterministic behavior, and rely only on fully working solution.

> Therefore, I think from a documentation perspective, we should recommend passPerPreset (despite it's status as an experimental option, I think it (or some version of it) will stick around)...

Exactly. I think documenting it is a temporary solution. And then we should just make it a default behavior in Babel: this increases maintainability, stability, and actually make it even working. So for users there is no need to mess with an explicit options, and Babel should just work for them.
",DmitrySoshnikov,2016-03-02 19:11:06
714,2016-02-11 23:15:13,"note that this is a prereq for #26 
",josephsavona,2016-03-02 19:11:06
714,2016-03-02 18:32:47,"Any update on this?
",pthrasher,2016-03-02 19:11:06
714,2016-03-02 19:11:06,"Ok, so the next steps here are:
- Document how to configure the Relay plugin to run before the default React Native plugins
- Work with @DmitrySoshnikov and Babel folks to make it easier to set up plugin/preset ordering.

I'm going to close this PR since we will make a documentation change instead of a code change.
",josephsavona,2016-03-02 19:11:06
713,2016-01-03 02:05:08,"**This PR depends on an unreleased version of `fbjs`, so DO NOT MERGE.**

When merged along with https://github.com/facebook/react-native/pull/5084, https://github.com/facebook/fbjs/pull/95, and whatever PR fixes https://github.com/facebook/react-native/issues/4062 (which I will update this issue with when I push it), this fixes #26.

The changes to Relay itself are super minor here:
1. Remove the reliance on ReactDOM. The only use of ReactDOM is `unstable_batchedupdates`. So to fix, I abstracted the reference to `unstable_batchedupdates` to it's own module, and then took advantage of the ""react-native"" `package.json` option, supported by the React Native packager, to load the correct version of this function given the execution context.
2. Removed `react-dom` from peerDependencies (but kept it in devDependencies, for use in tests), and also upgrade the `fbjs` dependency to a (yet unreleased) version that provides better compatibility with React Native.
",skevy,2016-01-28 23:05:45
713,2016-01-03 02:28:43,"Awesome, thanks for working on this!
",josephsavona,2016-01-28 23:05:45
713,2016-01-03 06:10:29,":100: 
",KyleAMathews,2016-01-28 23:05:45
713,2016-01-03 06:28:49,":+1:  :clap: 
",chandu0101,2016-01-28 23:05:45
713,2016-01-03 18:26:04,"This is great — thanks for tackling it. And great write ups, too.
",yungsters,2016-01-28 23:05:45
713,2016-01-18 01:08:21,"Do you suppose there's any chance to pull this `unstable_batchedUpdates` support into a separate package? I'd find this useful outside of just the Relay context.
",taion,2016-01-28 23:05:45
713,2016-01-25 22:09:56,"@skevy this is now blocked only on https://github.com/facebook/react-native/pull/5084, right?
",josephsavona,2016-01-28 23:05:45
713,2016-01-25 22:23:01,"@josephsavona yah. Hopefully being merged soon! :)
",skevy,2016-01-28 23:05:45
713,2016-01-27 22:42:42,"Fyi @josephsavona, fbjs 0.7.0 is now released, so presuming you don't have any changes on this PR, it can be merged :)
",skevy,2016-01-28 23:05:45
713,2016-01-27 22:43:46,"Would also be cool if you could release relay@0.6.2 -- nothing in here is breaking, so it should keep in line with semver.
",skevy,2016-01-28 23:05:45
713,2016-01-27 22:54:15,"@facebook-github-bot import
",josephsavona,2016-01-28 23:05:45
713,2016-01-27 22:58:19,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1014651835240270/int_phab to review.
",facebook-github-bot,2016-01-28 23:05:45
712,2015-12-31 19:41:58,"Relay source is heavily annotated with flow types, and I too like to use these types in my project. Currently I am getting lot of errors on `Missing annotation`. I am not sure if there a way to `import` relay type definition in my code.

I think the compiled code strip off all type def, so probably below import doesn't make sense
`import type RelayQuery from 'react-relay/lib/RelayQuery';`. So what is the proper way to annotate relay code with flow type from `react-relay` ?

It would be great if one of the example in `/examples` is annotated with flow types.

<S_CODE_TOKEN>
",bsr203,2016-04-09 13:11:50
712,2016-04-09 19:46:44,"I apologize for our lack of an answer here. The public types are all exported in `RelayTypes` - does that help?
",josephsavona,2016-04-09 13:11:50
712,2016-04-09 19:57:14,":-)  that's alright, and thanks for all your hard work and support on this project. I may try to make a standalone test case, but a detailed query on the same at SO here http://stackoverflow.com/questions/36023373/flowtype-annotate-relay-query 
",bsr203,2016-04-09 13:11:50
711,2015-12-30 16:54:59,"Should Relay.Mutation#getVariables be named something like `getInput`? Or something else that explicitly ties it to constructing the input argument?

My understanding and reading [the docs](http://facebook.github.io/relay/docs/api-reference-relay-mutation.html#getvariables-abstract-method) suggests that the method is only ever used to in context with the input - in fact there's even a warning in the docs that tries to mitigate naming confusion.
",clayallsopp,2016-02-08 22:42:35
711,2016-01-04 04:14:01,"`getFatQuery` might also be a candidate for renaming? i.e. `getPayloadFragment` / `getPayloadQuery`? (I believe it can only be a fragment on the payload type?)
",clayallsopp,2016-02-08 22:42:35
711,2016-02-08 22:42:35,"Thanks for filing this issue @clayallsopp!

There is some reasoning behind this: mostly, consistency with the ""variables"" terminology used in the `RelayDefaultNetworkLayer` for other kinds of queries (and you can think of mutations are just special kinds of queries). Nevertheless, there is definitely scope for improving the names here.

This is important, so I'm going to fold it into #538, which is about overhauling the mutations API. (It will be easier to manage with the various interrelated mutations issues in a single place.) Lots of details in the API are expected to change, so that is probably the best place to consider this.
",wincent,2016-02-08 22:42:35
710,2015-12-29 22:15:00,"If a fragment contains only one field and that field is conditionally @include -ed this may result in no query being sent to the server. I believe this is because of this check: https://github.com/facebook/relay/blob/master/src/query/RelayQuery.js#L221.

This is fine/expected except if the condition checked in the @include is then set via setVariables to some truthy value. In this case the fragment is not then re-included and no query is sent to the server. I've been weaving my way through the code to try and determine where this could be addressed. I can see things fall apart here: https://github.com/facebook/relay/blob/master/src/container/RelayContainer.js#L200. However, I've not yet been able to determine where best to address the issue.

Thanks
Mark
",mrogg,2017-01-30 19:44:59
710,2015-12-30 03:09:14,"@yungsters could this have to do with the way we previously de-duped fragments when printing?
",josephsavona,2017-01-30 19:44:59
710,2015-12-30 05:44:20,"@josephsavona I'm not sure, but I don't think so. The memoization that happens in `printRelayQuery` occurs using `getFragmentID()` which takes into account variable values. [There is a test case demonstrates this.](https://github.com/facebook/relay/blob/master/src/traversal/__tests__/printRelayOSSQuery-test.js#L341-L375)

I'll have to create a test case to debug this further.
",yungsters,2017-01-30 19:44:59
710,2015-12-30 06:21:59,"I can reproduce this using a container with the following fragment:

<S_CODE_TOKEN>

When `$showActor` is initialized to `false`, I'm observing that `this.props.viewer` is `null` instead of being an empty object. Also, there is no network request made if this is the only fragment in the entire tree.

It makes sense for there to be no network request — `Viewer` has no `id`, so we do not even send a request to fetch its `id`. Without ever ""writing the viewer"" into the Relay store, it is never even assigned a client-generated `id`. This means when `RelayContainer` tries to render, it can only populate `this.props.viewer` with `null`.

@mrogg Does this sound familiar? Is your `props.X` also `null`?

Assuming this is the problem, I think we need to do something better than merely vending `null`. One possible solution would be to ensure that a record always exists for each query, even if we do not end up sending a query to the server.
",yungsters,2017-01-30 19:44:59
710,2015-12-30 14:38:10,"@yungsters Yes, that's correct. It's null and there's no way for the setVariables path to recover.

I've been attempting to understand how an empty record could be dropped in instead since I assume there'd be some sort of response like that if the @include made it to the server with it's condition false and the server returned an empty response.

Thanks for your help.
",mrogg,2017-01-30 19:44:59
710,2016-02-21 02:06:30,"any progress on this?
",legomind,2017-01-30 19:44:59
710,2016-11-09 18:59:25,"Just ran into this issue myself. Anyone have any work arounds? 
",brad-decker,2017-01-30 19:44:59
710,2016-11-09 19:36:36,"One workaround is to include a dummy field - `__typename` for example - to ensure that there is a record supplied for a fragment prop.
",josephsavona,2017-01-30 19:44:59
710,2017-01-30 19:44:59,"Going to close this due to inactivity. We have a workaround (mentioned above), and in the new Relay core, `setVariables` as we know it is replaced with refetch containers (documentation and examples will be published in the near future as we continue to land the new code to the master branch). Thanks for the discussion!",wincent,2017-01-30 19:44:59
709,2015-12-29 16:08:27,"Object, which is sent to the server, has a `variables` property.
Accordingly to GraphQL spec it should contain query's variables. 
But it turned out that Relay compiles the query and inserts variables inside of it. 
Is it bug or feature? With current implementation it's almost impossible to use these values outside of GraphQL.
",ziflex,2016-01-02 03:01:35
709,2015-12-29 20:39:30,"Great question! This is intended - scalar values are printed inline, while input objects and enums are printed and sent as variables. This is somewhat of an arbitrary choice, though we have found that it's easier to debug queries with unlined argument values. 
",josephsavona,2016-01-02 03:01:35
709,2015-12-29 21:42:49,"@josephsavona, is it possible to change this behavior? 
",ziflex,2016-01-02 03:01:35
709,2015-12-30 03:10:11,"Possible, yes, but what's the use case? As I said, the current approach has made queries easy to read and debug. 
",josephsavona,2016-01-02 03:01:35
709,2015-12-30 13:26:51,"@josephsavona I need these values before data resolving in schema.
So, what can I do to change it?
",ziflex,2016-01-02 03:01:35
709,2015-12-30 22:56:07,"Ah, if I understand correctly you're trying to access the argument values at each `resolve` function. In GraphQL, It doesn't matter if the arguments are printed inline or using variables: they're accessible the same way, via the second `args` param to `resolve`. The `graphql-js` guide has an example at  http://graphql.org/docs/getting-started/ (Search for ""args""). 
",josephsavona,2016-01-02 03:01:35
709,2015-12-31 08:32:49,"@josephsavona no, I need it outside of GraphQL pipeline, before it reaches it, in a middleware. The thing is that I use dynamically generated schemas for some forms and based on root query I need to define which schema I should use for particular request.
Therefore, I need to be able to get these values from request's body.
",ziflex,2016-01-02 03:01:35
709,2015-12-31 10:39:22,"I see - thanks for clarifying your use case. While changing the way queries are printed _may_ work this is a brittle approach as we may change the format at any point. Instead, it sounds like this is ultimately a problem of identifying (on the server) the schema that the client is using. The general solution in Relay to transmitting extra information between client and server is to use a custom network layer. With this approach, you can send the printed query (regardless of inclined variables or not) along with whatever metadata you need to identify the schema being used. 
",josephsavona,2016-01-02 03:01:35
709,2015-12-31 12:04:45,"@josephsavona custom NetworkLayer is not an option, because during single session there might different forms which require different GraphQL schemas.
So, that's why I wanted to pass data with query in order to define proper schema.
",ziflex,2016-01-02 03:01:35
709,2015-12-31 13:36:29,"Hmm. A custom network layer does seem like the right approach here, but we'd need more information to give suggestions about implementing it:
- do you have multiple distinct apps each with their own schema, or one app that uses multiple schemas? (aside: if one app, why not merge the schemas?)
-  how did you configure `babel-relay-plugin` and how are you transforming your app code if there are multiple schemas?

The gist of these questions is that Relay requires the schema for a file to be known statically in order to transform it. Given that the schema is known statically per file, it should be possible to use that mapping in a custom network layer. 
",josephsavona,2016-01-02 03:01:35
709,2015-12-31 19:10:52,"@josephsavona let me explain what app does.
We have 2 services: Composer and Renderer.
Composer creates form definitions with fields, data sources for them and validation rules. During composing the form, we generate schemas and compile queries for dta fetching and mutation and store them as a part of definition.

Renderer is supposed to render form based on this definition. 
Here Relay comes. 
We have 2 root containers (agreed, probably it's bad), first root query fetch the form definition - here we have statically defined query, and once we got it, execute 2nd root query for data fetching using dynamically compiled query from fetched definition. And here, we've got a problem. On server side, we need to know, which schema should be used, since every form have it's own schema. That's why I need to have these variables in request body.
",ziflex,2016-01-02 03:01:35
709,2015-12-31 23:27:00,"Thanks again for clarifying. As I mentioned above, relying on how Relay formats queries is a brittle approach that we don't recommend. Further, we'd prefer to avoid adding constraints on the formatting just to satisfy one product - this would limit our ability to iterate to possibly make improvements that benefit all users. 

That said, my original suggestion seems to apply: _the supported approach here is to use a custom network layer_. Since your top level root container fetched the form, it must know to what schema that belongs. It can then inform your network layer what schema to use for the inner query. 

An alternative implementation of a custom network layer is to access the query representation itself (via `RelayQueryRequest.getQuery()`) to get the instance of [`RelayQueryRoot`](https://github.com/facebook/relay/blob/master/src/query/RelayQuery.js#L359) - and from there determine the variables being used (on the client), such that it can pass metadata to the server. 
",josephsavona,2016-01-02 03:01:35
709,2016-01-02 03:01:33,"@ziflex I'm going to close this since it isn't a bug or enhancement. Feel free to ask follow-up questions here, or even better on stack overflow or in the discord channel. 
",josephsavona,2016-01-02 03:01:35
709,2016-01-02 18:01:54,"@josephsavona ok, thanks for help!
",ziflex,2016-01-02 03:01:35
708,2015-12-29 14:51:12,"Relay Connections use a handful of arguments for pagination (first, last, before, after). These connection arguments are statically validated by the babel-relay-plugin, and then checked again at runtime by GraphQLRange. However, if the developer wants to use variables for the connection arguments (for example to support switching between `first` & `last` at runtime), the validation performed by babel-relay-plugin gets in the way and prevents this, which forces the developer to use some workarounds to ""trick"" the validation (see issue #677 for some examples).

This commit changes the babel-relay-plugin validation to allow otherwise invalid combinations (like `first`+`before`) as long as all the arguments are variables. When the connection arguments are variables, babel-relay-plugin effectively ""trusts"" that the developer will provide the correct arguments at runtime, and it becomes the job of GraphQLRange to validate the calls given the actual values. GraphQLRange was already doing this validation, so I simply added another unit test to verify that it does, in fact, reject the only unsupported runtime combination (`first`+`last`).

NOTE: babel-relay-plugin and GraphQLRange have different ""expectations"" for what combinations of arguments to a connection are, in fact, valid. For example, babel-relay-plugin claims that `before`+`first` is invalid, even though GraphQLRange happily accepts that combination. I chose not to change this, trusting that there was probably a good reason for the discrepancy and that babel-relay-plugin was just being more defensive. However, I did notice that babel-relay-plugin will (amusingly) allow the one combination of arguments that GraphQLRange cannot support: `first`+`last`, so I added a new validation to babel-relay-plugin to prevent that... unless they are both variables, of course!

This fixes issue #677.
",NevilleS,2016-03-15 20:10:30
708,2016-03-10 20:22:25,"Thanks for your contribution, @NevilleS. I apologize that it's taken this long for someone to review this. Are you interested in rebasing the changes? And if not, do you mind if someone on the team does?
",yungsters,2016-03-15 20:10:30
708,2016-03-10 20:24:30,"Hey, no worries. It's a super minor change, I'm glad you guys focused on my other PRs :+1: 

I can take some time to rebase this tomorrow, if that works?
",NevilleS,2016-03-15 20:10:30
708,2016-03-10 20:26:39,"Sure, thanks!
",yungsters,2016-03-15 20:10:30
708,2016-03-10 22:29:27,"Alright @yungsters I rebased to latest master, and fixed up some things in my changes. It looks like there was a decent amount of refactoring in the relay plugin code, but I think I'm following the new behaviours correctly.

For the ""happy path"" tests, I still feel a little weird just basically copying & pasting the generated code into the test fixture expected output, but I assume that's what you do too :smile:

Note that when I initially wrote this PR I tested that the change worked in a ""real"" app too, but in this case I'm just trusting the unit tests...
",NevilleS,2016-03-15 20:10:30
708,2016-03-10 23:07:18,"My workflow for the plugin is to make changes, use `npm run update-fixtures` to regenerate the output portions of the fixture files, and then use git diff to verify that the change in output is what I expected. 

Looks like the Babel config in transformGraphQL.js needs `compact: false` for this to work as expected. 
",josephsavona,2016-03-15 20:10:30
708,2016-03-10 23:16:27,"`npm run update-fixtures`, aha, noted. I copy & pasted the failure message and then prettified it :smile:
",NevilleS,2016-03-15 20:10:30
708,2016-03-11 19:00:43,"Thanks for rebasing, @NevilleS. This is great.

Currently, `npm run update-fixtures` is a bit borked due to dependency hell, but #944 will fix it.

Just one nit before I import this.
",yungsters,2016-03-15 20:10:30
708,2016-03-11 19:11:53,"Alright, fixed the style issue. Let me know if there's anything else amiss, I don't mind. I think I stuck to 80 character line lengths in this case...
",NevilleS,2016-03-15 20:10:30
708,2016-03-11 19:12:38,"@facebook-github-bot import
",yungsters,2016-03-15 20:10:30
708,2016-03-11 19:14:49,"That `@facebook-github-bot import` command is a missed opportunity to use `ship it` instead... Or `make it so`...
",NevilleS,2016-03-15 20:10:30
708,2016-03-11 19:16:18,"@NevilleS Haha, I generally only use **shipit** if the change is documentation-only. For everything else, I run through tests internally to triple-check that nothing breaks.
",yungsters,2016-03-15 20:10:30
708,2016-03-11 19:17:17,"Wait, `shipit` is a command for your bot? 

Nevermind, well played Facebook :clap: 
",NevilleS,2016-03-15 20:10:30
708,2016-03-11 19:19:41,"@NevilleS Haha, yup. **import** will create an internal Phabricator revision that we can then land internally (which will get automatically sync'd out to GitHub and close this PR). It has something to do with unidirectional data flow or something like that. ಠ◡ಠ

On the other hand, **shipit** will automatically land the revision internally.
",yungsters,2016-03-15 20:10:30
708,2016-03-11 19:20:07,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/171234809900011/int_phab) to review.
",facebook-github-bot,2016-03-15 20:10:30
708,2016-03-15 20:17:10,"@NevilleS thanks for this!
",josephsavona,2016-03-15 20:10:30
708,2016-03-15 20:52:20,"No problem! What else do you have for me @josephsavona? Or are we going to figure out what to do with #782?
",NevilleS,2016-03-15 20:10:30
707,2015-12-29 14:32:27,"Hi there,

I've faced with an issue that Relay doesn't support complex types (GraphQLInputObjectType) as argument for query, though GraphQL itself supports it .

Are there any plans to implement this feature? Because one argument for query is not enough.
",ziflex,2016-04-02 21:48:53
707,2015-12-29 20:43:42,"Ran you clarify how you're specifying your query or fragment? Relay does support input objects as argument values, but only when they are passed as a variable. 

I.e. This works:

`query { search(query: $inputObject) }`
With variables `{inputObject: {...}}`

This isn't supported:

`query { search(query: {...}) }`
",josephsavona,2016-04-02 21:48:53
707,2015-12-29 21:37:53,"Hi @josephsavona, thanks for response!
On route level I have such query:
`query GetFormContent($params: QueryParams!) { getModel(params: $params)}'`

and on container level:

`fragment on Model {...poperties...}`

The problem is that I'm getting an error: 

> Expected arguments to root field `getModel` to each be strings/numbers, got `{""id"":""a670f711"",""formId"":""app-10""}`.

Then I had taken a look at the code which is throwing the error (`forEachRootCallArg.js`) and found that there is no option for objects. It supports only scalar values (and array of them).
",ziflex,2016-04-02 21:48:53
707,2015-12-30 02:38:22,"Cc @steveluscher as this related to his work on root calls
",josephsavona,2016-04-02 21:48:53
707,2016-01-04 08:54:29,"@josephsavona any updates?
",ziflex,2016-04-02 21:48:53
707,2016-04-02 21:32:40,"I am getting the same error, any progress? It can be circumvented by getting your data from `resolve` on a nested field instead of on the root field.
",sboutzen,2016-04-02 21:48:53
707,2016-04-02 21:48:53,"We added support for this in https://github.com/facebook/relay/commit/38beb23b2105c4a7eaaca587b9fcc420512f3113 - this works now on master and will be available in the next release. 
",josephsavona,2016-04-02 21:48:53
706,2015-12-27 19:02:12,"Hi,
Im trying to use relay with node 5.x, and give me allways 
Current node version is not supported for development, expected ""5.3.0"" to satisfy ""4.x""

Could i use it?
tks
",kasselTrankos,2016-03-31 05:40:12
706,2015-12-28 01:12:44,"Thanks for filing this. I'm not aware of any reason that we _can't_ support node 5.x, but others will know more.

cc @zpao
",josephsavona,2016-03-31 05:40:12
706,2015-12-28 16:15:33,"thanks @josephsavona ,  meanwhile i'll try to use in one isomorphic project
",kasselTrankos,2016-03-31 05:40:12
706,2015-12-28 20:57:33,"I don't recall if there was a reason not to support node 5 for development, but npm 2 was still a requirement due to Flow configs IIRC.
",zpao,2016-03-31 05:40:12
706,2015-12-28 23:00:15,"hi @zpao, i put the error code.

<S_CODE_TOKEN>

 :(, so if npm requirement Flow change will be usefull, 
",kasselTrankos,2016-03-31 05:40:12
706,2016-03-30 23:40:20,"This seems to have been resolved in https://github.com/facebook/relay/commit/60c8a76a47385d8f843e35de72d16f758689abc0
",edvinerikson,2016-03-31 05:40:12
706,2016-03-30 23:55:31,"As @edvinerikson noted this should now be resolved.
",josephsavona,2016-03-31 05:40:12
706,2016-03-31 00:35:40,"Fwiw, bumping the npm version there is probably not right. Flow likely
won't work (because of nested node_modules in flowconfig)

On Wednesday, March 30, 2016, Joseph Savona notifications@github.com
wrote:

> As @edvinerikson https://github.com/edvinerikson noted this should now
> be resolved.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/706#issuecomment-203689486
",zpao,2016-03-31 05:40:12
706,2016-03-31 01:02:06,"Reopening per @zpao 
",josephsavona,2016-03-31 05:40:12
706,2016-03-31 01:27:56,"**Edit**
Node v5.0.0
NPM 3.3.6

---

@zpao can you elaborate a little bit more? I ran `flow check src/` and got `Found 0 errors` back.
When I added a type error I got:

<S_CODE_TOKEN>

and the code:

<S_CODE_TOKEN>
",edvinerikson,2016-03-31 05:40:12
706,2016-03-31 04:39:13,"Hmm, I guess it's ok then. I was only looking at the previously linked
commit where there was still a nested node_modules reference, not master.
Looks like master is free :). Sorry for the poorly informed noise!

On Wednesday, March 30, 2016, Edvin Erikson notifications@github.com
wrote:

> @zpao https://github.com/zpao can you elaborate a little bit more? I
> ran flow check src/ and got Found 0 errors back.
> When I added a type error I got:
> 
> ~/code/relay(master ✗) flow check src/
> src/RelayPublic.js:39
>  39:   return 1 \* 1;
>               ^^^^^ number. This type is incompatible with
>  38: function bar(): React$Element {
>                      ^^^^^^^^^^^^^ React$Element
> 
> src/RelayPublic.js:42
>  42: foo('string');
>      ^^^^^^^^^^^^^ function call
>  42: foo('string');
>          ^^^^^^^^ string. This type is incompatible with
>  34: function foo(a: number): React$Element {
>                      ^^^^^^ number
> 
> Found 2 errors
> 
> and the code:
> 
> function foo(a: number): React$Element {  return <span />;
> }
> function bar(): React$Element {  return 1 \* 1;
> }
> foo('string');bar();
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/706#issuecomment-203707541
",zpao,2016-03-31 05:40:12
706,2016-03-31 05:40:11,"All good!
",josephsavona,2016-03-31 05:40:12
706,2016-04-01 01:38:28,"No worries, maybe I should've linked to master instead. :) 
",edvinerikson,2016-03-31 05:40:12
705,2015-12-25 12:43:18,"Hi, here is my example code :  

<S_CODE_TOKEN>

And here is the output

<S_CODE_TOKEN>

For some reason all the IDs in the collection are the same.

Please help me!

my dependences:

<S_CODE_TOKEN>
",bfwg,2015-12-26 17:47:42
705,2015-12-26 02:41:07,"Hi there, happy holidays! We're trying to keep GitHub issue focused on bugs and enhancements to facilitate communication amongst contributors. Questions like these deserve a dedicated support channel - would you mind posting this on Stack Overflow? If you tag it with ""relayjs"" we or someone from the community can help out. Please post a link to the question here so we know where to look :-)
",josephsavona,2015-12-26 17:47:42
705,2015-12-26 08:37:15,"Thanks for the replay,
I posted the question on Stack Overflow and here is the link http://stackoverflow.com/questions/34469725/i-try-to-implement-a-connection-using-relay-and-all-the-nodes-ids-are-the-same

Merry Christmas
",bfwg,2015-12-26 17:47:42
705,2015-12-26 17:47:42,"Looks like it was answered, I'll close the issue. Thanks for asking!
",josephsavona,2015-12-26 17:47:42
704,2015-12-25 11:45:25,"This PR is another step toward making all Relay state contextual (#558).

Contextual `RelayNetworkLayer` is important for server-side rendering. It will allow to inject a contextual network layer initialized with client request specific params (e.g. authentication cookies) on the server. Currently it is impossible because the injected network layer is global, and shared between client requests.
",denvned,2016-03-07 14:45:45
704,2016-03-01 00:42:13,"Any updates on this front?
",salbito,2016-03-07 14:45:45
704,2016-03-03 01:35:03,"@denvned @salbito I'll be working on the react-relay / Relay core split over the next couple of months, starting with landing the remaining ""Contextualize ..."" PRs within the next week or so.
",josephsavona,2016-03-07 14:45:45
704,2016-03-03 13:48:53,"@josephsavona Really nice to hear! The global network layer is the last thing that blocks many projects from using Relay isomorphically.

I've just resolved the conflicts with the master, and added an ability to inject a network layer to `RelayContext`, with `RelayDefaultNetworkLayer` injected by default. Hope this will help.
",denvned,2016-03-07 14:45:45
704,2016-03-03 15:38:11,"@denvned awesome, quick turnaround as always! I'll import the latest version. 
",josephsavona,2016-03-07 14:45:45
704,2016-03-05 15:50:37,"@facebook-github-bot import
",josephsavona,2016-03-07 14:45:45
704,2016-03-05 16:03:34,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/903110793137431/int_phab) to review.
",facebook-github-bot,2016-03-07 14:45:45
703,2015-12-24 23:46:12,"The fragmentPointer field was not used except in the resolve function. But resolve gets a fragmentPointer anyway, so just use that. 

This makes it also more consistent and less confusing imho.
",andimarek,2016-03-03 17:10:37
703,2015-12-25 05:56:50,":+1:
",josephsavona,2016-03-03 17:10:37
703,2016-03-03 17:10:36,"@andimarek Thanks for submitting this. I recently updated `GraphQLStoreQueryResolver` to add better error messages, which uses the fragment passed to the constructor. We might reconsider this at a future date, but for now let's close this. Thanks again for contributing, please continue!
",josephsavona,2016-03-03 17:10:37
703,2016-03-03 18:08:36,"@josephsavona I will ... one day a PR will go through :-) 
",andimarek,2016-03-03 17:10:37
703,2016-03-03 18:59:23,"@andimarek Proposing ideas that _don't_ pan out can be just as helpful as proposing ones that do. I've closed tons of my own PRs and diffs - we really appreciate your contributions!
",josephsavona,2016-03-03 17:10:37
702,2015-12-22 17:37:09,"Client js
https://gist.github.com/z81/39db6f188087f6ad726f#file-main-js
Server js
https://gist.github.com/z81/47ad0a57ce9c527c2f0a#file-server-js
Generate this graphQL

<S_CODE_TOKEN>

Zero errors in console and not working.
In network xhr returned valid json result have users.

<S_CODE_TOKEN>

Sorry for very bad english.
",z81,2015-12-22 17:50:37
702,2015-12-22 17:50:37,"@z81 Thanks for your question and for providing so much detail - it made it very easy to see what's happening. Relay doesn't currently support connections as root fields (as you have with `users` on the `Query` type). We're gradually implementing support for a wider variety of root fields, but in the meantime please see the workaround at #112. We suggest creating a ""viewer"" root field and putting top-level connections under viewer.

I'll close this issue since it's a known limitation with a documented workaround, but please feel free to ask follow-up questions here and we'll try to address.
",josephsavona,2015-12-22 17:50:37
702,2015-12-24 15:06:09,"Thank you @josephsavona
I use veawer in #112, but still get do not get errors, please tell me in what is wrong.
GraphQl

<S_CODE_TOKEN>

The server returns the

<S_CODE_TOKEN>

Schema.js
https://gist.github.com/z81/39db6f188087f6ad726f
Client.js
https://gist.github.com/z81/47ad0a57ce9c527c2f0a
Sorry for bad english.
",z81,2015-12-22 17:50:37
701,2015-12-22 17:36:05,"Added information in Container API docs for null usage in initialVariables. Fixes https://github.com/facebook/relay/issues/700
",RavenHursT,2016-03-03 01:13:52
701,2015-12-22 17:45:52,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-03-03 01:13:52
701,2015-12-22 18:01:26,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-03-03 01:13:52
701,2016-03-02 21:07:58,"Thanks for documenting these. It's not great that these are necessary, but it's better to have the documented than not.
",yungsters,2016-03-03 01:13:52
701,2016-03-02 21:08:07,"@facebook-github-bot shipit
",yungsters,2016-03-03 01:13:52
701,2016-03-02 21:13:48,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1665188730425532/int_phab) to review.
",facebook-github-bot,2016-03-03 01:13:52
701,2016-03-08 01:21:18,"Thanks @yungsters 
",RavenHursT,2016-03-03 01:13:52
700,2015-12-22 17:33:40,"The docs for setting `initialVariables` for the Container API do not mention how to initialize unknown values for variables (i.e. The initial `cursor` value for pagination).

The correct way to initialize variables w/ an unknown value is to use `null`.  It took over half a day of searching and asking before this answer was given to me:

http://stackoverflow.com/questions/34406667/relay-pagination-how-to-initialize-after-value/34407181#34407181

This should _definitely_ be in the documentation for this feature.
",RavenHursT,2016-03-03 01:13:52
700,2016-01-10 20:28:23,"@RavenHursT This is technically true, but I'm curious: why are you managing the `after` cursor yourself? Relay will automatically add the argument and its value when you change the `first` variable.
",devknoll,2016-03-03 01:13:52
700,2016-01-11 19:55:27,"@devknoll : Server-side rendering.. if I go to `www.mysite.com/widgets?pageNumber=5` then we need a way to initialize what will be rendered when using https://github.com/denvned/isomorphic-relay
",RavenHursT,2016-03-03 01:13:52
699,2015-12-22 14:15:10,"This PR is another step toward making all Relay state contextual (#558). Originally this was submitted as a part of #683, but @josephsavona [suggested](https://github.com/facebook/relay/pull/683#issuecomment-166386149) to split it to smaller PRs.

Currently, Relay resolve mutations props using the global `RelayStore`, and store them in the `props` instance field of `RelayMutation`. That makes it impossible to contextualize Relay mutations without changing the public API.

<s>After analyzing different alternatives, I have found that the probably cleanest solution is not to store resolved mutation props in an instance field, but to pass them as an argument to each of the mutation methods. That way mutations can be reused in different `RelayStoreData` contexts, and also they can be reused in the same context but at different times, because props are re-resolved at each mutation execution.</s>
",denvned,2016-03-08 10:41:23
699,2015-12-22 17:05:34,"Thanks for splitting this up. It makes it clear, however, that this is a breaking change for all existing mutations. The `RelayMutation` API indicates that mutations can access `this.props` - see the example at http://facebook.github.io/relay/docs/api-reference-relay-mutation.html#fragments-static-property-example - and this PR removes that property. 

We're going to need to think this through and find a way to not change the public API of mutations, or come up with a transition plan. 

cc @yungsters 
",josephsavona,2016-03-08 10:41:23
699,2015-12-22 17:10:57,"> Currently, Relay resolve mutations props using the global `RelayStore`, and store them in the `props` instance field of `RelayMutation`. That makes it impossible to contextualize Relay mutations without changing the public API.

Can you explain why this is the case? Why can't we simply change _when_ we resolve the props (i.e. when enqueued) but continue to assign it onto the instance as `this.props`?
",yungsters,2016-03-08 10:41:23
699,2015-12-22 18:04:41,"@yungsters Yes, I thought about that, but came to a conclusion that it might _silently_ break existing mutations that might expect that props are resolved in the constructor and never changed after that. So, probably, explicitly changing the API here is the lesser of two evils, because it will break existing mutations _loudly_. :smile: By passing props as an argument to the methods we make it more clear that the props are not permanent, and that the mutation instance must not keep any state derived from the props.

But maybe I am exaggerating the problem too much, and we actually can do it. You decide.
",denvned,2016-03-08 10:41:23
699,2015-12-22 18:32:33,"> it might silently break existing mutations that might expect that props are resolved in the constructor and never changed after that.

On second though, we probably can mitigate the problem greatly by prohibiting reuse of the same mutation instances in different Relay contexts (e.g. throw an error). So, at least we could be sure that props once resolved never change.
",denvned,2016-03-08 10:41:23
699,2015-12-22 18:44:01,"> we probably can mitigate the problem greatly by prohibiting reuse of the same mutation instances in different Relay contexts (e.g. throw an error)

Yes, let's do this. A given instance of a mutation should not be applied to multiple Relay contexts - that isn't possible today, so adding the limitation will have zero impact on existing products. This is a much cleaner solution - thanks again for working on this!
",josephsavona,2016-03-08 10:41:23
699,2015-12-23 15:51:54,"@josephsavona Done. This is much cleaner indeed.
",denvned,2016-03-08 10:41:23
699,2015-12-23 16:41:30,"Sweet, thanks again. Will review and import today. 
",josephsavona,2016-03-08 10:41:23
699,2015-12-23 17:21:35,"@facebook-github-bot import 
",josephsavona,2016-03-08 10:41:23
699,2016-02-08 21:13:47,"@denvned nice. i'll import this week.
",josephsavona,2016-03-08 10:41:23
699,2016-02-08 21:13:55,"@facebook-github-bot import
",josephsavona,2016-03-08 10:41:23
699,2016-02-08 21:23:11,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/573227059491818/int_phab to review.
",facebook-github-bot,2016-03-08 10:41:23
698,2015-12-22 04:46:49,"This PR is another step toward making all Relay state contextual (#558). Originally this was submitted as a part of #683, but @josephsavona [suggested](https://github.com/facebook/relay/pull/683#issuecomment-166386149) to split it to smaller PRs.
",denvned,2016-01-20 23:30:46
698,2015-12-22 06:35:24,"Awesome, quick turnaround! I'll review in the morning but at a quick glance this looks great. 
",josephsavona,2016-01-20 23:30:46
698,2015-12-22 16:53:50,"Sweet, this looks great. Main theme of my feedback is that we should use `RelayStore` as the ""default"" RelayContext instance to aid in the transition: all existing Relay codebases are already targeting that module so they'll continue to work.
",josephsavona,2016-01-20 23:30:46
698,2015-12-22 19:23:02,"@josephsavona Committed your suggestions. Did I understand everything right?
",denvned,2016-01-20 23:30:46
698,2015-12-22 19:34:24,"nice job with this. thanks!
",josephsavona,2016-01-20 23:30:46
698,2015-12-22 19:34:36,"@facebook-github-bot import
",josephsavona,2016-01-20 23:30:46
698,2015-12-22 19:39:29,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1668105273478048/int_phab to review.
",facebook-github-bot,2016-01-20 23:30:46
697,2015-12-22 02:10:25,"Hi

I want to update a `person` with the `UpdatePerson` mutation. I don't want to specify each and every property in the `inputFields` - but rather want to pass the complete person object.

When I do that I get `Error: UpdatePersonInput.person field type must be Input Type but got: Person.`

Is there no way to pass complete objects rather than all of their properties to a mutation?

If there isn't, could you add one - because the amount of repetition of fields across a larger app with bigger objects can become very frustrating.

Same might be an issue on `getFatQuery` and `static fragments`. Repeating all the properties over and over again would be a nightmare.

Server:

<S_CODE_TOKEN>

Client:

<S_CODE_TOKEN>
",BerndWessels,2016-01-03 03:39:48
697,2016-01-03 03:39:48,"Apologies for the late reply. As we've mentioned before, we're trying to keep GiHub issues focused on bugs and enhancements. Questions like yours deserve a focused support forum - we'd recommend asking about this on Stack Overflow (tag with `relayjs`) and posting a link to the question. Thanks!
",josephsavona,2016-01-03 03:39:48
697,2016-01-04 18:49:46,"@josephsavona Happy New Year
I posted it on StackOverflow [here](http://stackoverflow.com/questions/34597773/error-field-type-must-be-input-type-cannot-pass-qltype-into-mutation)
Thank you
",BerndWessels,2016-01-03 03:39:48
696,2015-12-22 01:58:06,"No way to get an underlying GraphQL error from RelayMutationTransaction's `onFailure`:

<S_CODE_TOKEN>

The problem is `transaction.getError()` in the `onFailure` callback only gives me access to a Relay `Error`, which means I can't get at the underlying GraphQL `Error`:

<S_CODE_TOKEN>

GraphQL errors are likely more user friendly than the Relay errors. I think `onFailure` should get passed the underlying GraphQL errors somehow to let tools choose which (Relay or GraphQL) is important for their use-case.
",LegNeato,2015-12-22 02:46:58
696,2015-12-22 02:31:17,"Thanks for asking about this. Relay creates error objects with a `source` property that includes the original error information from the server, which can be accessed as `transaction.getError().source`. It's an object with all the error data returned from the server.
",josephsavona,2015-12-22 02:46:58
696,2015-12-22 02:46:58,"Ah sweet, that is exactly what I needed...guess I missed it. Thanks!
",LegNeato,2015-12-22 02:46:58
696,2016-01-04 03:26:20,"That's odd, I'm getting an object of type `Response` from my `transaction.getError()`.  Any ideas on what I'm doing wrong?  Running with the latest development snapshot.
",rapilabs,2015-12-22 02:46:58
696,2016-01-04 04:43:47,"@rapilabs are you using the default network layer? If yes, and the error property is not what's documented then it's a bug (and worth filing a new issue). 
",josephsavona,2015-12-22 02:46:58
696,2016-04-08 11:12:02,"How would you show that message to the end user?
Components are updated only in case transaction was successful..

I was thinking about using redux for that, but.. that looks like an overkill.
(onFailure would dispatch an action, which would then in turn trigger the component update)
",mloncaric,2015-12-22 02:46:58
696,2016-04-08 16:27:02,"@mloncaric: You could use `setState` if you wanted to avoid involving any Redux/Flux actions.
",wincent,2015-12-22 02:46:58
696,2017-02-27 10:13:52,Using transaction.getError().source  ..but should be included in docs...,somit,2015-12-22 02:46:58
696,2017-03-03 13:30:55,@somit you saved me from writing a whole custom error handler.,matart15,2015-12-22 02:46:58
695,2015-12-21 23:13:42,"Hello there, I noticed some unexpected behaviour here and I'm not sure whether it's an issue or I'm just misunderstanding the API. I'll try to be as specific as I can, although I don't know of a good way to set up a shareable test case (sorry).
#### Version

This is using react-relay 0.6.0.
#### Issue Description

I have a component that renders a list of `Groups` that an `Item` belongs to. There is a many-to-many relationship between `Items` and `Groups` so it does this by querying a `group_items` connection nested under the `Item` itself. I then have a mutation that removes an `Item` from a specific `Group`. Right now, the issue I'm seeing is that when I execute the remove mutation, the list of `Groups` is not updated, so the UI becomes out of date. A full page refresh correctly renders the new data, which means I'm doing something wrong in my mutation.

The fragments are:

<S_CODE_TOKEN>

...the mutation's fat query...:

<S_CODE_TOKEN>

...and the mutation's configs...:

<S_CODE_TOKEN>
#### Expected Behaviour

After running the mutation, the `group_item` node is destroyed on the server, and the `group_items` connection is updated & re-rendered on the client, with the specified node deleted.
#### Actual Behaviour

The server updates correctly, but the `group_items` connection is not updated, and the deleted node is still available.
#### Workaround

After some investigation I found that if I made the fat query more specific, the connection would update correctly:

<S_CODE_TOKEN>
#### Similar issues

Note that this issue is similar to #611 but the workaround given there (provide a `FIELDS_CHANGE` config to specify the `Item` that is being updated) has no effect in my application. The only way to get the tracked connection to update is to provide a more specific fat query as I specified above in the workaround.

Any ideas?
",NevilleS,2015-12-22 02:44:33
695,2015-12-22 02:44:33,"Aha! :tada: 

The more I thought about this, the more I felt that this was too fundamentally ""broken"" to be an actual Relay bug. After debugging a bit further, I realized that the `deletedGroupItemId` was the _wrong_ ID; it was a database ID, not a Relay GUID. Therefore the `NODE_DELETE` was, essentially, silently failing to find a node that matched the id it was given.

I suppose the workaround worked because I was so specific that Relay elected to fetch the entire `group_items` connection, and noticed there was a node missing.

It'd be nice if the `NODE_DELETE` had complained to the console in some way so I'd know to take a closer look at the IDs, but in the end this was definitely user error. Sorry for the noise :+1: 
",NevilleS,2015-12-22 02:44:33
695,2015-12-22 06:39:17,"Ah, that makes sense. Thank you for the detailed write up, and detailed follow up. We should definitely warn if the deleted of field doesn't match up in order to help catch these cases. If you're interested we'd be happy to accept a PR (take a look at writeRelayUpdatePayload). 
",josephsavona,2015-12-22 02:44:33
695,2015-12-22 15:28:59,"Sounds good, I'll take a look. Happy to help out :+1: 
",NevilleS,2015-12-22 02:44:33
695,2015-12-23 19:15:27,"OK @josephsavona I took a quick look at `writeRelayUpdatePayload` to see how I might go about adding a warning for this. It seems like it'd be relatively trivial to test the record status in `handleNodeDelete` just before the `deleteRecrod` method is invoked (i.e. lines 128 & 131 [here](https://github.com/facebook/relay/blob/master/src/traversal/writeRelayUpdatePayload.js#L131)). Alternatively, I could throw a warning in the existing check within `deleteRecord` although that seems a bit too ""low-level"" to trigger warnings to me since it is used in lots of other contexts (but it could be done [here](https://github.com/facebook/relay/blob/master/src/traversal/writeRelayUpdatePayload.js#L147))

Both of those implementations would be trivial, but my question is whether or not a warning whenever the given node ID's status is `RelayRecordState.NONEXISTENT` is a fair warning, since the way it is written now it just silently skips the operation assuming the record had already been deleted. I get the sense that it might be annoying to users to see this warning for mutations when they weren't explicitly tracking the node already, which would be common...

In my case, a more useful warning would be something like ""The given node ID doesn't appear to be a Relay GUID; are you sure you didn't mess that up?"". So I'd rather add a check like `isValidRecordID` to the mutation code to guard against that kind of user error... but I'm not sure it's possible. I think Relay GUIDs might be opaque to Relay, but I'm not sure since I haven't messed with the source code much before.

What do you think? Would a warning for NONEXISTANT records be annoying? Alternatively, is there a way to validate a record ID?
",NevilleS,2015-12-22 02:44:33
695,2015-12-29 02:06:43,"OK, hopefully you're enjoying a holiday break, but wanted to update this.

I poked around the Relay source code quite a bit over the last few days and there's definitely no way to ""validate"" that a record ID is valid, so that won't work. The question remains whether or not triggering a warning when a NODE_DELETE is attempted makes sense. I imagine that in the majority of use cases, the node being deleted should be in the Relay store already. That's probably because most node delete operations are triggered from a component and use the node ID from the props (e.g. deleting a comment from that comment's component). In those cases it'd be useful to trigger a warning saying ""Hey, we didn't actually delete a node, FYI"". But in other use cases you'll be deleting something that isn't tracked locally (e.g. a comment you haven't rendered yet) so the warning would be confusing.

Since there's not really a good way to selectively warn users about this, I'm not so sure it's a good idea. I don't like triggering warnings that people learn to ignore...

On another note, I did notice today that I was specifying `parentId` instead of `parentID` for a mutation, which is more clearly a user error... :smile: 
",NevilleS,2015-12-22 02:44:33
695,2016-07-12 07:09:46,"I just ran into this bug, stupid oversight. Perhaps a warning that the id was not found and outputting what the id was that was searched for would help catch this.
",Rodeoclash,2015-12-22 02:44:33
695,2016-11-11 08:48:35,"Just ran into this issue as well, some sort of warning can save a few hours for next guy :laughing: 
",sushantdhiman,2015-12-22 02:44:33
695,2016-12-16 03:43:20,"This has been driving me crazy for a week, Neville's comment made me check my code and sure enough, the deleted item id was not being encoded. Problem solved. A warning would certainly have helped here. Thanks!",dpehrson,2015-12-22 02:44:33
695,2016-12-16 16:04:11,This is a good idea. Anyone want to send a PR? :-),josephsavona,2015-12-22 02:44:33
695,2016-12-16 16:47:26,"Unfortunately a warning for a missing ID would probably fire a lot of false positives, since `NODE_DELETE` will commonly be configured even if the node doesn't necessarily exist.

For example let's pretend we've built a blog app with Relay with `Posts` and `Favourites`. `Favourites` are nodes that connect `Users` to `Posts` with some additional metadata, yada yada (pretty common ""join"" model of some kind).

So you can imagine a `RemovePostMutation` that returns both the `deletedPostID` and `deletedFavouriteID` to clean up both `posts` and `favourites` for the current user. The developer will have configured two `NODE_DELETE` mutation configs to handle the case where the post exists (obviously) but also the case where the user may have a `Favourite` referencing this post (optional).

When the mutation executes it'll query for the `deletedFavouriteID` regardless of whether or not the associated node exists locally, and then execute the `handleNodeDelete` logic to remove that node. If the local graph has queried for the `Favourite` node already, it'll delete it. If it hasn't been queried yet, it'll just silently ignore the delete. I think this is the right behaviour.

So with that said I'm not sure there's a great way to just do a warning like `NODE_DELETE failed to find node with ID ""eW91IGNhdWdodCBtZSwgdGhpcyBpc24ndCBhIHJlYWwgUmVsYXkgSUQ=""`, since it'll be 100% correct behaviour to not have the node in plenty of cases...

Maybe only show the warning when the mutation debugging is enabled?",NevilleS,2015-12-22 02:44:33
694,2015-12-21 21:50:36,"Hi

Looks like you released a new version `0.6.1` of the `babel-relay-plugin` to `npm` without releasing a new matching version of `react-relay`.

Any particular reason for that? Would be good if you could keep these in sync to avoid confusion.
",BerndWessels,2016-03-31 00:21:52
694,2015-12-21 23:15:10,"@BerndWessels Where did you see this warning, and what version of npm and relay are you using?

cc @kassens 
",josephsavona,2016-03-31 00:21:52
694,2015-12-21 23:57:29,"@josephsavona I maintain the `babel-relay-plugin-loader` module and regularly check for new versions of the `babel-relay-plugin`. This morning I noticed that somebody released `0.6.1` of the `babel-relay-plugin`. So I updated and published a matching version of the `babel-relay-plugin-loader`.

Maybe others want get it yet as long as they target a specific version of the plugin, but if you use `^0.6.0` then you get `0.6.1` automatically with the next fresh `npm install`.
And since `react-relay` has a `babel-relay-plugin` dependency targeting `0.6.0` it shows that warning.

It is not a real problem, I just thought I mentioned it here, since you said that `react-relay` and `babel-relay-plugin` should be in sync.
",BerndWessels,2016-03-31 00:21:52
694,2015-12-22 00:05:04,"Sorry, this is a problem that rippled through.
- The plugin's version was updated in a4d037fd386f62af9cc4831c409c6e15bac67d88 to make sure internally the transform cache was invalidated, but no new version released.
- This caused `npm install` inside the examples to fail since they had the 0.6.1 version, but expected 0.6.0. As a solution to this, I published the plugin, without doing a full release. This was okay for relay core, as that specifies the exact version.
- Now (this issue) other projects broke that specify a loose version for the plugin.

We have 2 solutions:
- Release 0.7.0 from master
- Release 0.6.1 of core with the same code as 0.6.0 and just the dependency fixed.
",kassens,2016-03-31 00:21:52
694,2015-12-22 00:09:18,"@kassens It doesn't really break anything, at least for me it only gives a `npm` warning `npm WARN react-relay@0.6.0 requires a peer of babel-relay-plugin@0.6.0 but none was installed.`

But having matching clean releases would be nice anyways ;)
",BerndWessels,2016-03-31 00:21:52
694,2015-12-22 00:35:06,"@kassens thanks for confirming, and @BerndWessels for pointing this out. 

We'll go forward with a `0.7.0` release this week.
",josephsavona,2016-03-31 00:21:52
694,2015-12-29 21:36:45,"Did you release this?  I'm getting npm install errors too: 

<S_CODE_TOKEN>
",treeder,2016-03-31 00:21:52
694,2016-01-04 19:07:36,"@treeder it looks like 0.7.0 hasn't yet been released - most likely due to Christmas ;)
",BerndWessels,2016-03-31 00:21:52
694,2016-03-31 00:04:40,"0.7 fixed this so I don't see any reason for this to be open and if it would bubble up again, this issue will still be searchable. 
",edvinerikson,2016-03-31 00:21:52
694,2016-03-31 00:21:52,"Thanks @edvinerikson :-)
",josephsavona,2016-03-31 00:21:52
694,2016-10-20 10:48:37,"Fyi: Got the same issue with relay version 0.9.4 and babel-relay-plugin (requering also 0.9.4) but babel-relay-plugin is the latest 0.9.2 
",valorize,2016-03-31 00:21:52
693,2015-12-21 18:04:50,"Using `NODE_DELETE`, related lists become `[null]` array with 1 item in them.

Given this mutation payload:

<S_CODE_TOKEN>

with this `getConfigs`:

<S_CODE_TOKEN>

There is also another field that has cars in it: `shop.cars`. Car should also be removed from `shop.cars` list. However It's only converted to `null`, It's not removed, unlike `viewer.cars`

<S_CODE_TOKEN>

I believe this is a bug. I can't think of a reason why this should be the behavior. 
",oguzbilgic,2016-02-03 22:25:52
693,2015-12-21 19:43:21,"Thanks for reporting this. Relay removes deleted nodes from connections, and we should probably remove them from lists for consistency. In this case that would mean returning an empty list instead of a list of `[null]`. 

@yuzhi can you think of any reason we shouldn't/can't do this? Implementation-wise it's a matter of making `RelayRecordStore.getLinkedRecordIDs` filter out IDs where the record was deleted (we do this in `getRangeMetadata`).
",josephsavona,2016-02-03 22:25:52
693,2015-12-21 22:38:16,"@oguzbilgic Yeah `NODE_DELETE` mainly support nodes and nodes in connections since we do keep some extra metadata about each connection. If you want to update `viewer {cars}` and you know that can change as a part of this mutation, you can add another `FIELDS_CHANGE` config.

<S_CODE_TOKEN>

@josephsavona  We can probably do some filtering, although I don't know if there are legit cases for having nulls in plural fields. 
",yuzhi,2016-02-03 22:25:52
693,2015-12-21 23:01:29,"@yuzhi Thank you. Thats exactly how I got around. However It's really pita at the moment. Basically `NODE_DELETE` doesn't do what its suppose to, and we need to find every list that may include this , get their ids in `getFragment`, and maybe add to `payload` ...
",oguzbilgic,2016-02-03 22:25:52
693,2015-12-21 23:11:28,"It definitely seems that filtering nulls would be the correct behavior here. @oguzbilgic any interest in submitting a PR to fix? 

For you or anyone else interested in a PR, the best place to start would be in RelayRecordStore where we return the list of IDs in the list in [`getLinkedRecordIDs`](https://github.com/facebook/relay/blob/master/src/store/RelayRecordStore.js#L509-L519). This could be changed to filter out IDs for known-deleted records, similarly to how we filter connection edges [here](https://github.com/facebook/relay/blob/master/src/store/RelayRecordStore.js#L681).
",josephsavona,2016-02-03 22:25:52
693,2015-12-21 23:14:01,"@josephsavona :+1: I have no experience, but It says 'good first bug', I can give it a try this weekend. :) 
",oguzbilgic,2016-02-03 22:25:52
693,2016-01-05 08:09:55,"I just submitted a PR, which should fix this Issue: #722
",andimarek,2016-02-03 22:25:52
693,2016-02-03 22:25:52,"Closing this one because you have the PR in flight. Thanks for contributing!
",wincent,2016-02-03 22:25:52
692,2015-12-18 01:33:53,"I have a query that is behaving very unexpectedly.

The query has a connection over a union, and a selection, both orthagonal.

<S_CODE_TOKEN>

when I change the variables to include the user section, relay does a node query for every node in the connection, trying to determine the type apparently (it only wants {id, __typename}).

If I throw errors in the type resolver of the union nodes, the connection part still works. But when doing that, the user part fails.
",ts-smith,2016-12-20 17:49:15
692,2015-12-18 02:01:49,"After more research, if I create an unused variable and change it, the same behavior occurs.
",ts-smith,2016-12-20 17:49:15
692,2015-12-19 21:17:51,"Thanks for asking about this. Could you clarify if this is a bug (data is missing in your app or it otherwise breaks) or if the queries are simply different than you expected? In either case, we'd be happy to help debug - what is the full query in your component, and what is the full query that is sent to the network?
",josephsavona,2016-12-20 17:49:15
692,2015-12-21 23:24:58,"There are a lot of new concepts with Relay, so it is hard to know if that is a bug or not. But if it is a bug, it is simply an under optimization, because I believe the type information of the nodes should already be present. It is hard to show all of the potentially relevant information, but I found that the problem only exists when I have a certain fragment on one of the union types of the query. I will try to reproduce it in isolation so it is easier to see.
",ts-smith,2016-12-20 17:49:15
692,2016-01-07 01:22:22,"I wasn't able to reproduce the bug, but fortunately there was an easy work around by implementing the union in code for this specific case. Somehow, asking for fields other than {id, __typename} on the client for some types of the union would cause it to always refetch the type, regardless of whether or not it was actually fetched. Some of the types on the union did not have this problem, though.
",ts-smith,2016-12-20 17:49:15
692,2016-12-20 17:49:15,"Thanks for filing this. I'm going to close since we don't have a repro case - going forward we're moving toward APIs where queries are not modified at runtime, which may help to alleviate weird quirks such as this.",josephsavona,2016-12-20 17:49:15
691,2015-12-18 00:51:18,"assumption: likes is the only mutable field

<S_CODE_TOKEN>

**Expected** : `Comments.render` is only called when likes count change for any comment
**Actual**:  `Comments.render` is called every time `CommentsFetcher` forceFetch i.e every second

<S_CODE_TOKEN>

**Expected** : `Comments.render` is only called when likes count change for any comment
**Actual**:   Works as expected

the only difference is `limit:10000` 

<S_CODE_TOKEN>
",mailaneel,2017-01-30 19:49:04
691,2015-12-18 04:29:17,"Also important to note `===` check fails even if there is no change in key => values

Ex: 

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I was thinking relay will return `same object` if there is no change in data. Please suggest if this is not true

**Full Example**

<S_CODE_TOKEN>
",mailaneel,2017-01-30 19:49:04
691,2015-12-19 21:27:46,"Does the `Comment` type implement the Node interface and/or have an `id` field? 

Note that calling forceFetch will refetch a connection in full, causing the comments list component to rerender (new range). If the comments themselves don't have an ID, the actual comments will be new items and each comment component will re-render (though the data is shallow equal it's technically a new comment object at a different point in the store). 
",josephsavona,2017-01-30 19:49:04
691,2015-12-19 21:30:42,"Forgot to mention - thanks for asking about this and providing so much detail!
",josephsavona,2017-01-30 19:49:04
691,2015-12-19 22:49:43,"thanks @josephsavona 

Yes comment implements node interface and has unique global id
I did not implement connection interface though
",mailaneel,2017-01-30 19:49:04
691,2015-12-20 22:39:20,"> Note that calling forceFetch will refetch a connection in full, causing the comments list component to rerender (new range)

Will this behavior change when we add `limit` or any other params to query? 
I can see there is a check [`areQueryResultsEqual`](https://github.com/facebook/relay/blob/master/src/container/RelayContainer.js#L629) which should not trigger `Comments.render` if results are same

Just to confirm, forceFetch is done by `CommentsFetcher` not `Comments`
",mailaneel,2017-01-30 19:49:04
691,2015-12-21 03:23:20,"I just noticed that your render examples don't set a `key` prop when rendering the list of comments, which may be the cause of the extra re-render. What happens if you set a `key` (for example using the comment's `id`)?

In general, Relay returns `===` props when the data has not changed between renders. The main exception is when some metadata has changed: for example a mutation that affected the data has resolved/failed, or deferred data has become available on children. That doesn't apply in this case, hence my suspecting the `key` prop. 

If that doesn't work, it would be helpful for debugging if you could paste an example of the data (props for the comments list and comment items) from before and after the forceFetch. 
",josephsavona,2017-01-30 19:49:04
691,2015-12-21 04:10:31,"My bad, I have key in my own code :) missed it here. Updated previous code(comment) with key.

I will add debug info soon
",mailaneel,2017-01-30 19:49:04
691,2015-12-21 04:31:37,"Below are the props for `races` list(I do not have comments endpoint)

Before

<S_CODE_TOKEN>

forceFetch

<S_CODE_TOKEN>

Before 

<S_CODE_TOKEN>

After forceFetch

<S_CODE_TOKEN>
",mailaneel,2017-01-30 19:49:04
691,2015-12-21 16:45:38,"Thanks - that confirms that there isn't some metadata that is different before/after.  Are you passing other props to the components in question? Relay Container implements shouldComponentUpdate, but it can only safely compare scalar props for equivalence. In practice, the most common cause for unnecessary re-rendering of components are things like object props or functions that are re-bound on every render. 
",josephsavona,2017-01-30 19:49:04
691,2015-12-21 20:53:57,"> Are you passing other props to the components in question? Relay Container implements shouldComponentUpdate, but it can only safely compare scalar props for equivalence.

Thanks for this, this will definitely save some time for others :)

I am using react-router-relay, which is passing history object as a prop to Comments - This explains why Comments is re rendered. I only figured this out after debugging (RelayContainerComparators.areNonQueryPropsEqual)

please confirm my comment on https://github.com/facebook/relay/issues/691#issuecomment-166159969

Main problem is behaviour of forceFetch is different with and without params

Comments is rerendered when forceFetched without any params(even if there is no change).
Comments is not rerendered when forceFetched with any param added ex: limit or date i.e works as expected

Rendering as a result of forceFetch is not started at root(AppComponent). This is started by a relay subscription callback in CommentsContainer. 
",mailaneel,2017-01-30 19:49:04
691,2017-01-30 19:49:04,(Spring cleaning.) Closing due to inactivity. I believe this was meant to stay closed before.,wincent,2017-01-30 19:49:04
690,2015-12-17 20:26:19,"Should we add some simple basic detection for missing polyfills so we can provide a helpful error message instead of some ""method x is undefined"" errors deep in the stack? (Example: #681)

Not full feature detection, but maybe something basic as:

<S_CODE_TOKEN>
",kassens,2016-04-06 02:30:28
690,2015-12-18 02:13:20,"This is a great idea. Ship it! ;-)
",josephsavona,2016-04-06 02:30:28
690,2016-02-04 21:15:29,":+1: this would of saved me some debugging time this morning :)
",KyleAMathews,2016-04-06 02:30:28
690,2016-04-01 00:28:40,"If this is something that we still want to do I'll be happy to hack on it.

<S_CODE_TOKEN>

Would something like that work and where should the check live? RelayPublic? 
",edvinerikson,2016-04-06 02:30:28
690,2016-04-01 00:38:27,"@edvinerikson the best place is [Relay.js](https://github.com/facebook/relay/blob/master/src/__forks__/Relay.js). The check should likely use `if (__DEV__) { ... }`, which i think we transform appropriately (probably easiest to just try that and see what it builds to).
",josephsavona,2016-04-06 02:30:28
689,2015-12-17 20:15:05,"`npm install` of the todo example failed for 2 reasons:
- The version of babel-relay-plugin was bumped to 6.0.1 without an update of the
  `peerDependency` or `relay` itself. I published 6.0.1 and bumped the peer
  dependency.
- `history@0.14` and `react-router` had incompatible dependencies. We should
  probably fix all dependency versions and bump them with a test instead of
  having them update whenever new versions are published.
",kassens,2015-12-19 00:56:10
689,2015-12-17 20:15:11,"@facebook-github-bot import
",kassens,2015-12-19 00:56:10
689,2015-12-17 20:58:42,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1657348817863176/int_phab to review.
",facebook-github-bot,2015-12-19 00:56:10
689,2015-12-21 23:14:29,"@kassens should we have bumped `react-relay` to 0.6.1 for this?
",josephsavona,2015-12-19 00:56:10
688,2015-12-17 03:23:32,"I'd really like to incorporate the Relay cache within my Flux store so I can do ""time-travel"" and gain deep insight into the application. It looks like the store and the actions are classes which arent serializable :( but it looks like I ought to be able to separate the cache from the network requests and save the cache in a Flux store.  Does that sound interesting or am I barking up the wrong tree?
",ccorcos,2015-12-22 05:51:20
688,2015-12-18 21:26:53,"Been interested in this [for a while](http://stackoverflow.com/questions/33512889/patterns-for-undo-redo-state-traversal-with-relay-graphql-mutations)! Would be great. 
",dminkovsky,2015-12-22 05:51:20
688,2015-12-18 21:45:12,"Have you heard of Datomic or Datascript -- its pretty interesting. It makes the whole caching side of things trivial at the expense of more computation.
",ccorcos,2015-12-22 05:51:20
688,2015-12-21 16:57:28,"Thanks for your question! I do have an answer for you, but we're trying to keep GitHub issues focused on tracking bugs and enhancements to help keep the signal high for contributors. 

Would you mind posting your question to [Stack Overflow](https://stackoverflow.com/questions/ask?tags=relayjs) with the `#relayjs` tag (or use that link)? If you post a link to your question here we'll be happy to answer - if the community doesn't beat us to it! 
",josephsavona,2015-12-22 05:51:20
688,2015-12-22 05:51:20,"Sounds good @josephsavona 

http://stackoverflow.com/questions/34409268/relay-cache-with-flux-pattern
",ccorcos,2015-12-22 05:51:20
688,2015-12-27 06:10:02,"@josephsavona I'd love an answer to this too, please do respond – I've been looking at http://github.com/gyzerok/adrenaline for this exact purpose, but I don't think it's quite up to snuff yet.
",skosch,2015-12-22 05:51:20
688,2015-12-27 20:09:02,"yeah, seems a little too hacky.
",ccorcos,2015-12-22 05:51:20
688,2015-12-28 01:08:58,"@skosch @ccorcos @dminkovsky I answered on Stack Overflow.
",josephsavona,2015-12-22 05:51:20
688,2015-12-28 07:53:15,"Thanks!

I suppose live queries of some sort would be necessary to make this work, but it would be nice – for my niche use case at least – if the clients could store not just the current data coming from the server, but also keep a history (i.e. Redux store) of all data changes that ever came down. In other words, I'd love a system that is
- realtime, 
- makes optimistic UI updating easy
- supports GraphQL-based component data requirements,
- _and_ allows for time travel through a (Relay _and_ local) state store on the client, such that clients can undo whatever just happened (and when they do, that's another mutation that gets sent to the server, etc., keeping everyone and everything in sync with the DB on the server)

I realize these are somewhat muddy and even contradictory requirements, but I do wonder if there's some way (based around immutability and GraphQL) to make this happen, preferably without intercepting requests and keeping multiple copies of data around.
",skosch,2015-12-22 05:51:20
688,2015-12-28 18:06:58,"@skosch What you're describing matches up with our goals for Relay at a high-level. For example, we support optimistic UI updates out of the box, and real-time updates are on the roadmap (#541). 

> and allows for time travel through a (Relay and local) state store on the client, such that clients can undo whatever just happened (and when they do, that's another mutation that gets sent to the server, etc., keeping everyone and everything in sync with the DB on the server)

We'd definitely like to work with the community to support local state and to make debugging easier and more powerful (see #114, #541, etc). Some of the main challenges to implementing your idea as-is are correctness and performance. For example, in practice not all mutations have an easily calculated inverse operation. Further, other users may make changes in between a client committing and undoing a mutation such that it can't even be undone - ultimately, an app is really a client in a distributed system. As for performance, we have to be careful that the changes necessary to support advanced developer tools don't negatively affect the production performance of applications.

Keep the ideas coming, and I encourage you to take a look at [Thinking in GraphQL](https://facebook.github.io/relay/docs/thinking-in-graphql.html) if you haven't yet - it helps explain some of the architectural choices - and get involved with one of the [help wanted issues](https://github.com/facebook/relay/labels/help%20wanted).
",josephsavona,2015-12-22 05:51:20
688,2015-12-30 06:46:59,"Thanks for the kind reply and the links to #541 and #114. I knew about those threads but hadn't kept up with them.

I'm not interested in time travel as an ""advanced developer tool"" a.k.a. debugging toy, but as a clean way to provide end user undo functionality in data-based apps (read: lots of big but boring trees and tables of stuff) – i.e. what Google Docs provides for text files and spreadsheets. Of course, that means that every participant in the distributed system (whether client or server) needs their own version of the schema specifying how changes are to be applied and how data is to be resolved. I now see that this is already being worked on (https://github.com/eyston/relay-composite-network-layer) ... yay!

That kind of use case – a few dozens of users editing a tree of data together ­– is significantly different from and probably more common than Facebook's, where thousands of users tinker with insanely complex graphs of comments and likes and their associated subscriptions. And my intuition (which has been wrong before) says that in the former case, a more fully synched system with a shared history is possible and practically feasible, and client stores can be mutation reducers, and non-conflicting mutations could be undone independently, latency problems notwithstanding.

If we can come up with a more rigorous abstraction of how Google Docs is different from Facebook (e.g. what an inversible mutation must look like), then maybe we can let devs say ""these queries/mutations here are self-contained and should behave in a shared, real-time and composable fashion"", at their own risk of course.

[I hope I'm not wasting your time with this high-level babble. It's high time I looked into the Relay code myself and experimented a bit, I just haven't found the time yet.]
",skosch,2015-12-22 05:51:20
687,2015-12-17 00:46:29,"(Apologies for length)
I'm not entirely sure if this is a bug, but I can't really work around it:

This is the schema:

<S_CODE_TOKEN>

When the user is logged out, `me` is false, when logged in it's a user object with said variables.

The page has two base components, both with separate RootContainers. One main ""app"" view and a Header view, both start of their route at `viewer`.

1 User comes onto site, landing page requires `viewer { me { user_id }`. Since user is not logged in `me` is returned as null. Header also requests `me` and gets null
2 User logs in gets redirected to a dashboard page. The dashboard view requires:

<S_CODE_TOKEN>

3 The dashboard is rendered but has stale data. `me` is null but the view can deal with it.
4 At the same time the Header view listens in on a ""logged in"" event and does `forceFetch`, it requires data:

<S_CODE_TOKEN>

5 The fetch from the Header (force fetched) returns from server before the request for the dashboard. The dashboard is observing `viewer` and is therefore re-rendered. The `me` is now not null, but it does not contain `payments`. The dashboard was not prepared for an `undefined` value for payments and therefore breaks.
",grydstedt,2015-12-17 22:42:43
687,2015-12-18 02:12:08,"@grydstedt were you able to resolve this?
",josephsavona,2015-12-17 22:42:43
687,2015-12-18 09:16:54,"I was not, but the example was contrived, I was going to come up with a reproducible test case. But I think the issue remains. It boils down being able to forceFetch while a another query is excuting. I think
",grydstedt,2015-12-17 22:42:43
686,2015-12-15 22:24:11,"So when I do npm install in the ""/example/todo"" directory I get the following exception.

<S_CODE_TOKEN>

Then I run:

<S_CODE_TOKEN>

This error is very understandable given my previous warning.  What am I missing?
",jeffj,2015-12-18 16:33:22
686,2015-12-16 04:53:21,"Are you using npm3? It doesn't install peer dependencies automatically, so I'd suggest manually installing the referenced packages `babel-relay-plugin` and `history`.
",josephsavona,2015-12-18 16:33:22
686,2015-12-18 16:33:22,"This appears to be due to using npm 3. I'm going to close the issue (see suggestion above), but feel free to reopen or comment if that doesn't work. 
",josephsavona,2015-12-18 16:33:22
686,2016-02-18 17:01:32,"I have approximatively the same error (I am using a docker debian os :8.3)

To reproduce : 

<S_CODE_TOKEN>

The npm install give this log :

`root@3c3c5425c066:~# git clone https://github.com/facebook/relay.git
Cloning into 'relay'...
remote: Counting objects: 9720, done.
remote: Total 9720 (delta 0), reused 0 (delta 0), pack-reused 9720
Receiving objects: 100% (9720/9720), 8.31 MiB | 3.88 MiB/s, done.
Resolving deltas: 100% (7184/7184), done.
Checking connectivity... done.
root@3c3c5425c066:~# cd relay/examples/todo && npm install
npm WARN cannot run in wd @ cd ../.. && npm install --ignore-scripts && cd scripts/babel-relay-plugin && npm install --ignore-scripts (wd=/root/relay/examples/todo)
npm WARN cannot run in wd react-relay@0.7.0 node node_modules/fbjs-scripts/node/check-dev-engines.js package.json && npm run build (wd=/root/relay)
npm WARN cannot run in wd babel-relay-plugin@0.7.0 npm run build (wd=/root/relay/scripts/babel-relay-plugin)
npm WARN optional dep failed, continuing fsevents@1.0.7

> history@1.17.0 postinstall /root/relay/examples/todo/node_modules/history
> node ./npm-scripts/postinstall.js
> 
> react-router@1.0.3 postinstall /root/relay/examples/todo/node_modules/react-router
> node ./npm-scripts/postinstall.js

npm WARN optional dep failed, continuing fsevents@1.0.7
todomvc-app-css@2.0.4 node_modules/todomvc-app-css

todomvc-common@1.0.2 node_modules/todomvc-common

classnames@2.2.3 node_modules/classnames

react-dom@0.14.7 node_modules/react-dom

babel-relay-plugin@0.7.0 node_modules/babel-relay-plugin

express-graphql@0.4.9 node_modules/express-graphql
├── content-type@1.0.1
├── http-errors@1.3.1 (statuses@1.2.1, inherits@2.0.1)
└── raw-body@2.1.5 (unpipe@1.0.0, bytes@2.2.0, iconv-lite@0.4.13)

express@4.13.4 node_modules/express
├── content-type@1.0.1
├── escape-html@1.0.3
├── array-flatten@1.1.1
├── utils-merge@1.0.0
├── cookie-signature@1.0.6
├── methods@1.1.2
├── merge-descriptors@1.0.1
├── vary@1.0.1
├── fresh@0.3.0
├── path-to-regexp@0.1.7
├── parseurl@1.3.1
├── content-disposition@0.5.1
├── etag@1.7.0
├── range-parser@1.0.3
├── cookie@0.1.5
├── serve-static@1.10.2
├── depd@1.1.0
├── qs@4.0.0
├── finalhandler@0.4.1 (unpipe@1.0.0)
├── on-finished@2.3.0 (ee-first@1.1.1)
├── debug@2.2.0 (ms@0.7.1)
├── proxy-addr@1.0.10 (forwarded@0.1.0, ipaddr.js@1.0.5)
├── send@0.13.1 (statuses@1.2.1, destroy@1.0.4, ms@0.7.1, mime@1.3.4, http-errors@1.3.1)
├── type-is@1.6.11 (media-typer@0.3.0, mime-types@2.1.10)
└── accepts@1.2.13 (negotiator@0.5.3, mime-types@2.1.10)

history@1.17.0 node_modules/history
├── deep-equal@1.0.1
├── query-string@3.0.0 (strict-uri-encode@1.1.0)
├── invariant@2.2.0 (loose-envify@1.1.0)
└── warning@2.1.0 (loose-envify@1.1.0)

react-router@1.0.3 node_modules/react-router
├── invariant@2.2.0 (loose-envify@1.1.0)
└── warning@2.1.0 (loose-envify@1.1.0)

babel-loader@6.2.2 node_modules/babel-loader
├── object-assign@4.0.1
├── mkdirp@0.5.1 (minimist@0.0.8)
└── loader-utils@0.2.12 (big.js@3.1.3, json5@0.4.0)

webpack-dev-server@1.14.1 node_modules/webpack-dev-server
├── connect-history-api-fallback@1.1.0
├── stream-cache@0.0.2
├── strip-ansi@3.0.0 (ansi-regex@2.0.0)
├── supports-color@3.1.2 (has-flag@1.0.0)
├── http-proxy@1.13.2 (eventemitter3@1.1.1, requires-port@1.0.0)
├── optimist@0.6.1 (wordwrap@0.0.3, minimist@0.0.10)
├── compression@1.6.1 (bytes@2.2.0, on-headers@1.0.1, vary@1.1.0, compressible@2.0.7, debug@2.2.0, accepts@1.3.1)
├── webpack-dev-middleware@1.5.1 (mime@1.3.4, memory-fs@0.3.0)
├── sockjs@0.3.15 (node-uuid@1.4.7, faye-websocket@0.9.4)
├── serve-index@1.7.3 (escape-html@1.0.3, parseurl@1.3.1, batch@0.5.3, http-errors@1.3.1, mime-types@2.1.10, accepts@1.2.13, debug@2.2.0)
└── sockjs-client@1.0.3 (inherits@2.0.1, json3@3.3.2, debug@2.2.0, url-parse@1.0.5, eventsource@0.1.6, faye-websocket@0.7.3)

webpack@1.12.13 node_modules/webpack
├── interpret@0.6.6
├── tapable@0.1.10
├── async@1.5.2
├── clone@1.0.2
├── esprima@2.7.2
├── supports-color@3.1.2 (has-flag@1.0.0)
├── enhanced-resolve@0.9.1 (graceful-fs@4.1.3, memory-fs@0.2.0)
├── mkdirp@0.5.1 (minimist@0.0.8)
├── optimist@0.6.1 (wordwrap@0.0.3, minimist@0.0.10)
├── memory-fs@0.3.0 (errno@0.1.4, readable-stream@2.0.5)
├── webpack-core@0.6.8 (source-map@0.4.4, source-list-map@0.1.5)
├── loader-utils@0.2.12 (big.js@3.1.3, json5@0.4.0)
├── watchpack@0.2.9 (graceful-fs@4.1.3, async@0.9.2, chokidar@1.4.2)
├── uglify-js@2.6.1 (async@0.2.10, uglify-to-browserify@1.0.2, source-map@0.5.3, yargs@3.10.0)
└── node-libs-browser@0.5.3 (string_decoder@0.10.31, https-browserify@0.0.0, tty-browserify@0.0.0, constants-browserify@0.0.1, path-browserify@0.0.0, punycode@1.4.0, os-browserify@0.1.2, process@0.11.2, assert@1.3.0, domain-browser@1.1.7, querystring-es3@0.2.1, timers-browserify@1.4.2, stream-browserify@1.0.0, events@1.1.0, vm-browserify@0.0.4, readable-stream@1.1.13, util@0.10.3, console-browserify@1.1.0, url@0.10.3, http-browserify@1.7.0, buffer@3.6.0, browserify-zlib@0.1.4, crypto-browserify@3.2.8)

babel-polyfill@6.5.0 node_modules/babel-polyfill
├── babel-regenerator-runtime@6.5.0
├── babel-runtime@5.8.35
└── core-js@1.2.6

react-relay@0.7.0 node_modules/react-relay
├── react-static-container@1.0.0
├── fbjs@0.7.2 (ua-parser-js@0.7.10, loose-envify@1.1.0, promise@7.1.1, isomorphic-fetch@2.2.1, core-js@1.2.6)
└── babel-runtime@5.8.24 (core-js@1.2.6)

graphql-relay@0.3.6 node_modules/graphql-relay
└── babel-runtime@5.8.35 (core-js@1.2.6)

react-router-relay@0.8.0 node_modules/react-router-relay
├── react-static-container@1.0.0
├── invariant@2.2.0 (loose-envify@1.1.0)
└── babel-runtime@5.8.35 (core-js@1.2.6)

babel-preset-react@6.5.0 node_modules/babel-preset-react
├── babel-plugin-syntax-jsx@6.5.0 (babel-runtime@5.8.35)
├── babel-plugin-syntax-flow@6.5.0 (babel-runtime@5.8.35)
├── babel-plugin-transform-react-display-name@6.5.0 (babel-runtime@5.8.35)
├── babel-plugin-transform-react-jsx-source@6.5.0 (babel-runtime@5.8.35)
├── babel-plugin-transform-flow-strip-types@6.5.0 (babel-runtime@5.8.35)
└── babel-plugin-transform-react-jsx@6.5.2 (babel-helper-builder-react-jsx@6.5.0, babel-runtime@5.8.35)

babel-core@6.5.2 node_modules/babel-core
├── slash@1.0.0
├── babel-messages@6.5.0
├── path-exists@1.0.0
├── shebang-regex@1.0.0
├── babel-template@6.5.0
├── path-is-absolute@1.0.0
├── babel-helpers@6.5.0
├── private@0.1.6
├── babylon@6.5.2
├── convert-source-map@1.1.3
├── debug@2.2.0 (ms@0.7.1)
├── source-map@0.5.3
├── babel-types@6.5.2 (to-fast-properties@1.0.1, esutils@2.0.2)
├── minimatch@2.0.10 (brace-expansion@1.1.3)
├── babel-code-frame@6.5.0 (js-tokens@1.0.2, esutils@2.0.2, line-numbers@0.2.0, chalk@1.1.1, repeating@1.1.3)
├── babel-generator@6.5.0 (trim-right@1.0.1, repeating@1.1.3, is-integer@1.0.6, detect-indent@3.0.1)
├── babel-traverse@6.5.0 (globals@8.18.0, repeating@1.1.3, invariant@2.2.0)
├── json5@0.4.0
├── lodash@3.10.1
├── babel-register@6.5.2 (home-or-tmp@1.0.0, mkdirp@0.5.1, source-map-support@0.2.10, core-js@1.2.6)
└── babel-runtime@5.8.35 (core-js@1.2.6)

babel-cli@6.5.1 node_modules/babel-cli
├── slash@1.0.0
├── log-symbols@1.0.2
├── path-exists@1.0.0
├── fs-readdir-recursive@0.1.2
├── path-is-absolute@1.0.0
├── convert-source-map@1.1.3
├── commander@2.9.0 (graceful-readlink@1.0.1)
├── v8flags@2.0.11 (user-home@1.1.1)
├── source-map@0.5.3
├── chalk@1.1.1 (escape-string-regexp@1.0.4, supports-color@2.0.0, ansi-styles@2.1.0, strip-ansi@3.0.0, has-ansi@2.0.0)
├── glob@5.0.15 (inherits@2.0.1, once@1.3.3, inflight@1.0.4, minimatch@3.0.0)
├── output-file-sync@1.1.1 (xtend@4.0.1, mkdirp@0.5.1)
├── chokidar@1.4.2 (inherits@2.0.1, async-each@0.1.6, glob-parent@2.0.0, is-glob@2.0.1, is-binary-path@1.0.1, readdirp@2.0.0, anymatch@1.3.0)
├── request@2.69.0 (aws-sign2@0.6.0, forever-agent@0.6.1, tunnel-agent@0.4.2, oauth-sign@0.8.1, caseless@0.11.0, is-typedarray@1.0.0, stringstream@0.0.5, isstream@0.1.2, json-stringify-safe@5.0.1, extend@3.0.0, tough-cookie@2.2.1, node-uuid@1.4.7, qs@6.0.2, mime-types@2.1.10, combined-stream@1.0.5, form-data@1.0.0-rc3, aws4@1.2.1, bl@1.0.3, hawk@3.1.3, http-signature@1.1.1, har-validator@2.0.6)
├── bin-version-check@2.1.0 (minimist@1.2.0, semver@4.3.6, semver-truncate@1.1.0, bin-version@1.0.4)
├── lodash@3.10.1
├── babel-register@6.5.2 (home-or-tmp@1.0.0, mkdirp@0.5.1, source-map-support@0.2.10, core-js@1.2.6)
└── babel-runtime@5.8.35 (core-js@1.2.6)

babel-preset-es2015@6.5.0 node_modules/babel-preset-es2015
├── babel-plugin-transform-es2015-block-scoped-functions@6.5.0 (babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-spread@6.5.2 (babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-template-literals@6.5.2 (babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-for-of@6.5.2 (babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-destructuring@6.5.0 (babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-typeof-symbol@6.5.0 (babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-arrow-functions@6.5.2 (babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-literals@6.5.0 (babel-runtime@5.8.35)
├── babel-plugin-check-es2015-constants@6.5.0 (babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-unicode-regex@6.5.0 (regexpu-core@1.0.0, babel-helper-regex@6.5.0, babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-shorthand-properties@6.5.0 (babel-types@6.5.2, babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-block-scoping@6.5.0 (babel-template@6.5.0, babel-types@6.5.2, babel-traverse@6.5.0, lodash@3.10.1, babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-function-name@6.5.0 (babel-types@6.5.2, babel-helper-function-name@6.5.0, babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-sticky-regex@6.5.0 (babel-helper-regex@6.5.0, babel-types@6.5.2, babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-computed-properties@6.5.2 (babel-helper-define-map@6.5.0, babel-template@6.5.0, babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-object-super@6.5.0 (babel-helper-replace-supers@6.5.0, babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-modules-commonjs@6.5.2 (babel-plugin-transform-strict-mode@6.5.2, babel-template@6.5.0, babel-types@6.5.2, babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-classes@6.5.2 (babel-helper-replace-supers@6.5.0, babel-messages@6.5.0, babel-helper-optimise-call-expression@6.5.0, babel-helper-function-name@6.5.0, babel-helper-define-map@6.5.0, babel-template@6.5.0, babel-types@6.5.2, babel-traverse@6.5.0, babel-runtime@5.8.35)
├── babel-plugin-transform-es2015-parameters@6.5.0 (babel-helper-get-function-arity@6.5.0, babel-helper-call-delegate@6.5.0, babel-template@6.5.0, babel-types@6.5.2, babel-traverse@6.5.0, babel-runtime@5.8.35)
└── babel-plugin-transform-regenerator@6.5.2 (babel-plugin-syntax-async-functions@6.5.0, private@0.1.6, babylon@6.5.2, babel-types@6.5.2, babel-traverse@6.5.0, babel-runtime@5.8.35)

graphql@0.4.17 node_modules/graphql
└── babel-runtime@5.8.35 (core-js@1.2.6)

babel-preset-stage-0@6.5.0 node_modules/babel-preset-stage-0
├── babel-plugin-transform-function-bind@6.5.2 (babel-plugin-syntax-function-bind@6.5.0, babel-runtime@5.8.35)
├── babel-plugin-transform-do-expressions@6.5.0 (babel-plugin-syntax-do-expressions@6.5.0, babel-runtime@5.8.35)
└── babel-preset-stage-1@6.5.0 (babel-plugin-transform-export-extensions@6.5.0, babel-plugin-transform-class-constructor-call@6.5.0, babel-plugin-transform-class-properties@6.5.2, babel-plugin-transform-decorators@6.5.0, babel-preset-stage-2@6.5.0)

react@0.14.7 node_modules/react
├── envify@3.4.0 (through@2.3.8, jstransform@10.1.0)
└── fbjs@0.6.1 (whatwg-fetch@0.9.0, ua-parser-js@0.7.10, loose-envify@1.1.0, promise@7.1.1, core-js@1.2.6)
`

The npm start give this log 

`root@3c3c5425c066:~/relay/examples/todo# npm start

> @ start /root/relay/examples/todo
> babel-node ./server.js

GraphQL Server is now running on http://localhost:8080
App is now running on http://localhost:3000
Hash: 6168e806d46cfb41c6d6
Version: webpack 1.12.13
Time: 3186ms
 Asset     Size  Chunks             Chunk Names
app.js  1.04 MB       0  [emitted]  main
chunk    {0} app.js (main) 985 kB [rendered]
    [0] ./js/app.js 2.16 kB {0} [built] [1 error]
    [1] ./~/todomvc-common/base.js 7.25 kB {0} [built]
    [2] ./~/history/lib/index.js 2.17 kB {0} [built]
    [3] ./~/history/lib/deprecate.js 299 bytes {0} [built]
    [4] ./~/history/lib/createLocation.js 1.72 kB {0} [built]
    [5] ./~/history/lib/Actions.js 720 bytes {0} [built]
    [6] ./~/history/lib/parsePath.js 1.16 kB {0} [built]
    [7](webpack)/~/node-libs-browser/~/process/browser.js 2.06 kB {0} [built]
    [8] ./~/history/~/warning/browser.js 1.81 kB {0} [built]
    [9] ./~/history/lib/extractPath.js 278 bytes {0} [built]
   [10] ./~/history/lib/createBrowserHistory.js 5.28 kB {0} [built]
   [11] ./~/history/~/invariant/browser.js 1.52 kB {0} [built]
   [12] ./~/history/lib/ExecutionEnvironment.js 175 bytes {0} [built]
   [13] ./~/history/lib/DOMUtils.js 2.5 kB {0} [built]
   [14] ./~/history/lib/DOMStateStorage.js 2.01 kB {0} [built]
   [15] ./~/history/lib/createDOMHistory.js 1.29 kB {0} [built]
   [16] ./~/history/lib/createHistory.js 8.35 kB {0} [built]
   [17] ./~/history/~/deep-equal/index.js 3.05 kB {0} [built]
   [18] ./~/history/~/deep-equal/lib/keys.js 202 bytes {0} [built]
   [19] ./~/history/~/deep-equal/lib/is_arguments.js 641 bytes {0} [built]
   [20] ./~/history/lib/AsyncUtils.js 441 bytes {0} [built]
   [21] ./~/history/lib/runTransitionHook.js 775 bytes {0} [built]
   [22] ./~/history/lib/createHashHistory.js 7.5 kB {0} [built]
   [23] ./~/history/lib/createMemoryHistory.js 4.34 kB {0} [built]
   [24] ./~/history/lib/useBasename.js 4.54 kB {0} [built]
   [25] ./~/history/lib/useBeforeUnload.js 3.67 kB {0} [built]
   [26] ./~/history/lib/useQueries.js 5.91 kB {0} [built]
   [27] ./~/history/~/query-string/index.js 1.47 kB {0} [built]
   [28] ./~/history/~/query-string/~/strict-uri-encode/index.js 182 bytes {0} [built]
   [29] ./~/history/lib/enableBeforeUnload.js 536 bytes {0} [built]
   [30] ./~/history/lib/enableQueries.js 501 bytes {0} [built]
   [31] ./~/react-router/lib/index.js 2.38 kB {0} [built]
   [32] ./~/react-router/lib/Router.js 5.82 kB {0} [built]
   [33] ./~/react-router/~/warning/browser.js 1.81 kB {0} [built]
   [34] ./~/react/react.js 56 bytes {0} [built]
   [35] ./~/react/lib/React.js 1.49 kB {0} [built]
   [36] ./~/react/lib/ReactDOM.js 3.71 kB {0} [built]
   [37] ./~/react/lib/ReactCurrentOwner.js 653 bytes {0} [built]
   [38] ./~/react/lib/ReactDOMTextComponent.js 4.32 kB {0} [built]
   [39] ./~/react/lib/DOMChildrenOperations.js 5 kB {0} [built]
   [40] ./~/react/lib/Danger.js 6.96 kB {0} [built]
   [41] ./~/react/~/fbjs/lib/ExecutionEnvironment.js 1.09 kB {0} [built]
   [42] ./~/react/~/fbjs/lib/createNodesFromMarkup.js 2.71 kB {0} [built]
   [43] ./~/react/~/fbjs/lib/createArrayFromMixed.js 2.36 kB {0} [built]
   [44] ./~/react/~/fbjs/lib/toArray.js 1.98 kB {0} [built]
   [45] ./~/react/~/fbjs/lib/invariant.js 1.51 kB {0} [built]
   [46] ./~/react/~/fbjs/lib/getMarkupWrap.js 3.06 kB {0} [built]
   [47] ./~/react/~/fbjs/lib/emptyFunction.js 1.09 kB {0} [built]
   [48] ./~/react/lib/ReactMultiChildUpdateTypes.js 861 bytes {0} [built]
   [49] ./~/react/~/fbjs/lib/keyMirror.js 1.27 kB {0} [built]
   [50] ./~/react/lib/ReactPerf.js 2.51 kB {0} [built]
   [51] ./~/react/lib/setInnerHTML.js 3.35 kB {0} [built]
   [52] ./~/react/lib/setTextContent.js 1.2 kB {0} [built]
   [53] ./~/react/lib/escapeTextContentForBrowser.js 849 bytes {0} [built]
   [54] ./~/react/lib/DOMPropertyOperations.js 7.88 kB {0} [built]
   [55] ./~/react/lib/DOMProperty.js 9.57 kB {0} [built]
   [56] ./~/react/lib/quoteAttributeValueForBrowser.js 746 bytes {0} [built]
   [57] ./~/react/~/fbjs/lib/warning.js 1.77 kB {0} [built]
   [58] ./~/react/lib/ReactComponentBrowserEnvironment.js 1.26 kB {0} [built]
   [59] ./~/react/lib/ReactDOMIDOperations.js 3.29 kB {0} [built]
   [60] ./~/react/lib/ReactMount.js 36.8 kB {0} [built]
   [61] ./~/react/lib/ReactBrowserEventEmitter.js 12.4 kB {0} [built]
   [62] ./~/react/lib/EventConstants.js 2.04 kB {0} [built]
   [63] ./~/react/lib/EventPluginHub.js 9.22 kB {0} [built]
   [64] ./~/react/lib/EventPluginRegistry.js 8.41 kB {0} [built]
   [65] ./~/react/lib/EventPluginUtils.js 6.79 kB {0} [built]
   [66] ./~/react/lib/ReactErrorUtils.js 2.27 kB {0} [built]
   [67] ./~/react/lib/accumulateInto.js 1.74 kB {0} [built]
   [68] ./~/react/lib/forEachAccumulated.js 893 bytes {0} [built]
   [69] ./~/react/lib/ReactEventEmitterMixin.js 1.3 kB {0} [built]
   [70] ./~/react/lib/ViewportMetrics.js 638 bytes {0} [built]
   [71] ./~/react/lib/Object.assign.js 1.26 kB {0} [built]
   [72] ./~/react/lib/isEventSupported.js 1.97 kB {0} [built]
   [73] ./~/react/lib/ReactDOMFeatureFlags.js 458 bytes {0} [built]
   [74] ./~/react/lib/ReactElement.js 8.07 kB {0} [built]
   [75] ./~/react/lib/canDefineProperty.js 629 bytes {0} [built]
   [76] ./~/react/lib/ReactEmptyComponentRegistry.js 1.38 kB {0} [built]
   [77] ./~/react/lib/ReactInstanceHandles.js 10.6 kB {0} [built]
   [78] ./~/react/lib/ReactRootIndex.js 723 bytes {0} [built]
   [79] ./~/react/lib/ReactInstanceMap.js 1.25 kB {0} [built]
   [80] ./~/react/lib/ReactMarkupChecksum.js 1.39 kB {0} [built]
   [81] ./~/react/lib/adler32.js 1.2 kB {0} [built]
   [82] ./~/react/lib/ReactReconciler.js 3.55 kB {0} [built]
   [83] ./~/react/lib/ReactRef.js 2.34 kB {0} [built]
   [84] ./~/react/lib/ReactOwner.js 3.45 kB {0} [built]
   [85] ./~/react/lib/ReactUpdateQueue.js 10.9 kB {0} [built]
   [86] ./~/react/lib/ReactUpdates.js 8.54 kB {0} [built]
   [87] ./~/react/lib/CallbackQueue.js 2.44 kB {0} [built]
   [88] ./~/react/lib/PooledClass.js 3.55 kB {0} [built]
   [89] ./~/react/lib/Transaction.js 9.55 kB {0} [built]
   [90] ./~/react/~/fbjs/lib/emptyObject.js 482 bytes {0} [built]
   [91] ./~/react/~/fbjs/lib/containsNode.js 1.43 kB {0} [built]
   [92] ./~/react/~/fbjs/lib/isTextNode.js 628 bytes {0} [built]
   [93] ./~/react/~/fbjs/lib/isNode.js 712 bytes {0} [built]
   [94] ./~/react/lib/instantiateReactComponent.js 4.52 kB {0} [built]
   [95] ./~/react/lib/ReactCompositeComponent.js 27.5 kB {0} [built]
   [96] ./~/react/lib/ReactComponentEnvironment.js 1.67 kB {0} [built]
   [97] ./~/react/lib/ReactPropTypeLocations.js 549 bytes {0} [built]
   [98] ./~/react/lib/ReactPropTypeLocationNames.js 611 bytes {0} [built]
   [99] ./~/react/lib/shouldUpdateReactComponent.js 1.49 kB {0} [built]
  [100] ./~/react/lib/ReactEmptyComponent.js 1.68 kB {0} [built]
  [101] ./~/react/lib/ReactNativeComponent.js 3.02 kB {0} [built]
  [102] ./~/react/lib/validateDOMNesting.js 13.1 kB {0} [built]
  [103] ./~/react/lib/ReactDefaultInjection.js 3.99 kB {0} [built]
  [104] ./~/react/lib/BeforeInputEventPlugin.js 14.9 kB {0} [built]
  [105] ./~/react/lib/EventPropagators.js 5.22 kB {0} [built]
  [106] ./~/react/lib/FallbackCompositionState.js 2.49 kB {0} [built]
  [107] ./~/react/lib/getTextContentAccessor.js 994 bytes {0} [built]
  [108] ./~/react/lib/SyntheticCompositionEvent.js 1.16 kB {0} [built]
  [109] ./~/react/lib/SyntheticEvent.js 5.79 kB {0} [built]
  [110] ./~/react/lib/SyntheticInputEvent.js 1.15 kB {0} [built]
  [111] ./~/react/~/fbjs/lib/keyOf.js 1.11 kB {0} [built]
  [112] ./~/react/lib/ChangeEventPlugin.js 11.5 kB {0} [built]
  [113] ./~/react/lib/getEventTarget.js 930 bytes {0} [built]
  [114] ./~/react/lib/isTextInputElement.js 1.03 kB {0} [built]
  [115] ./~/react/lib/ClientReactRootIndex.js 551 bytes {0} [built]
  [116] ./~/react/lib/DefaultEventPluginOrder.js 1.26 kB {0} [built]
  [117] ./~/react/lib/EnterLeaveEventPlugin.js 3.9 kB {0} [built]
  [118] ./~/react/lib/SyntheticMouseEvent.js 2.2 kB {0} [built]
  [119] ./~/react/lib/SyntheticUIEvent.js 1.64 kB {0} [built]
  [120] ./~/react/lib/getEventModifierState.js 1.3 kB {0} [built]
  [121] ./~/react/lib/HTMLDOMPropertyConfig.js 7.63 kB {0} [built]
  [122] ./~/react/lib/ReactBrowserComponentMixin.js 1.15 kB {0} [built]
  [123] ./~/react/lib/findDOMNode.js 2.17 kB {0} [built]
  [124] ./~/react/lib/ReactDefaultBatchingStrategy.js 1.92 kB {0} [built]
  [125] ./~/react/lib/ReactDOMComponent.js 36.9 kB {0} [built]
  [126] ./~/react/lib/AutoFocusUtils.js 816 bytes {0} [built]
  [127] ./~/react/~/fbjs/lib/focusNode.js 725 bytes {0} [built]
  [128] ./~/react/lib/CSSPropertyOperations.js 5.71 kB {0} [built]
  [129] ./~/react/lib/CSSProperty.js 3.5 kB {0} [built]
  [130] ./~/react/~/fbjs/lib/camelizeStyleName.js 1.03 kB {0} [built]
  [131] ./~/react/~/fbjs/lib/camelize.js 729 bytes {0} [built]
  [132] ./~/react/lib/dangerousStyleValue.js 1.93 kB {0} [built]
  [133] ./~/react/~/fbjs/lib/hyphenateStyleName.js 1 kB {0} [built]
  [134] ./~/react/~/fbjs/lib/hyphenate.js 822 bytes {0} [built]
  [135] ./~/react/~/fbjs/lib/memoizeStringOnly.js 778 bytes {0} [built]
  [136] ./~/react/lib/ReactDOMButton.js 1.15 kB {0} [built]
  [137] ./~/react/lib/ReactDOMInput.js 5.74 kB {0} [built]
  [138] ./~/react/lib/LinkedValueUtils.js 5.18 kB {0} [built]
  [139] ./~/react/lib/ReactPropTypes.js 12.3 kB {0} [built]
  [140] ./~/react/lib/getIteratorFn.js 1.17 kB {0} [built]
  [141] ./~/react/lib/ReactDOMOption.js 2.82 kB {0} [built]
  [142] ./~/react/lib/ReactChildren.js 5.83 kB {0} [built]
  [143] ./~/react/lib/traverseAllChildren.js 6.9 kB {0} [built]
  [144] ./~/react/lib/ReactDOMSelect.js 6.11 kB {0} [built]
  [145] ./~/react/lib/ReactDOMTextarea.js 4.35 kB {0} [built]
  [146] ./~/react/lib/ReactMultiChild.js 14.7 kB {0} [built]
  [147] ./~/react/lib/ReactChildReconciler.js 4.52 kB {0} [built]
  [148] ./~/react/lib/flattenChildren.js 1.65 kB {0} [built]
  [149] ./~/react/~/fbjs/lib/shallowEqual.js 1.28 kB {0} [built]
  [150] ./~/react/lib/ReactEventListener.js 7.51 kB {0} [built]
  [151] ./~/react/~/fbjs/lib/EventListener.js 2.65 kB {0} [built]
  [152] ./~/react/~/fbjs/lib/getUnboundedScrollPosition.js 1.09 kB {0} [built]
  [153] ./~/react/lib/ReactInjection.js 1.37 kB {0} [built]
  [154] ./~/react/lib/ReactClass.js 27.8 kB {0} [built]
  [155] ./~/react/lib/ReactComponent.js 5.04 kB {0} [built]
  [156] ./~/react/lib/ReactNoopUpdateQueue.js 3.94 kB {0} [built]
  [157] ./~/react/lib/ReactReconcileTransaction.js 4.58 kB {0} [built]
  [158] ./~/react/lib/ReactInputSelection.js 4.32 kB {0} [built]
  [159] ./~/react/lib/ReactDOMSelection.js 6.83 kB {0} [built]
  [160] ./~/react/lib/getNodeForCharacterOffset.js 1.66 kB {0} [built]
  [161] ./~/react/~/fbjs/lib/getActiveElement.js 924 bytes {0} [built]
  [162] ./~/react/lib/SelectEventPlugin.js 6.71 kB {0} [built]
  [163] ./~/react/lib/ServerReactRootIndex.js 868 bytes {0} [built]
  [164] ./~/react/lib/SimpleEventPlugin.js 17.4 kB {0} [built]
  [165] ./~/react/lib/SyntheticClipboardEvent.js 1.23 kB {0} [built]
  [166] ./~/react/lib/SyntheticFocusEvent.js 1.12 kB {0} [built]
  [167] ./~/react/lib/SyntheticKeyboardEvent.js 2.76 kB {0} [built]
  [168] ./~/react/lib/getEventCharCode.js 1.56 kB {0} [built]
  [169] ./~/react/lib/getEventKey.js 2.93 kB {0} [built]
  [170] ./~/react/lib/SyntheticDragEvent.js 1.13 kB {0} [built]
  [171] ./~/react/lib/SyntheticTouchEvent.js 1.33 kB {0} [built]
  [172] ./~/react/lib/SyntheticWheelEvent.js 1.99 kB {0} [built]
  [173] ./~/react/lib/SVGDOMPropertyConfig.js 3.8 kB {0} [built]
  [174] ./~/react/lib/ReactDefaultPerf.js 8.63 kB {0} [built]
  [175] ./~/react/lib/ReactDefaultPerfAnalysis.js 5.79 kB {0} [built]
  [176] ./~/react/~/fbjs/lib/performanceNow.js 844 bytes {0} [built]
  [177] ./~/react/~/fbjs/lib/performance.js 612 bytes {0} [built]
  [178] ./~/react/lib/ReactVersion.js 379 bytes {0} [built]
  [179] ./~/react/lib/renderSubtreeIntoContainer.js 463 bytes {0} [built]
  [180] ./~/react/lib/ReactDOMServer.js 766 bytes {0} [built]
  [181] ./~/react/lib/ReactServerRendering.js 3.3 kB {0} [built]
  [182] ./~/react/lib/ReactServerBatchingStrategy.js 673 bytes {0} [built]
  [183] ./~/react/lib/ReactServerRenderingTransaction.js 2.3 kB {0} [built]
  [184] ./~/react/lib/ReactIsomorphic.js 2.05 kB {0} [built]
  [185] ./~/react/lib/ReactDOMFactories.js 3.36 kB {0} [built]
  [186] ./~/react/lib/ReactElementValidator.js 10.8 kB {0} [built]
  [187] ./~/react/~/fbjs/lib/mapObject.js 1.47 kB {0} [built]
  [188] ./~/react/lib/onlyChild.js 1.21 kB {0} [built]
  [189] ./~/react/lib/deprecated.js 1.77 kB {0} [built]
  [190] ./~/react-router/lib/RouteUtils.js 3.49 kB {0} [built]
  [191] ./~/react-router/lib/RoutingContext.js 4.85 kB {0} [built]
  [192] ./~/react-router/~/invariant/browser.js 1.52 kB {0} [built]
  [193] ./~/react-router/lib/getRouteParams.js 578 bytes {0} [built]
  [194] ./~/react-router/lib/PatternUtils.js 6.79 kB {0} [built]
  [195] ./~/react-router/lib/useRoutes.js 10 kB {0} [built]
  [196] ./~/react-router/lib/computeChangedRoutes.js 1.69 kB {0} [built]
  [197] ./~/react-router/lib/TransitionUtils.js 1.89 kB {0} [built]
  [198] ./~/react-router/lib/AsyncUtils.js 1.06 kB {0} [built]
  [199] ./~/react-router/lib/isActive.js 3.11 kB {0} [built]
  [200] ./~/react-router/lib/getComponents.js 971 bytes {0} [built]
  [201] ./~/react-router/lib/matchRoutes.js 6.1 kB {0} [built]
  [202] ./~/react-router/lib/PropTypes.js 1.32 kB {0} [built]
  [203] ./~/react-router/lib/Link.js 5.13 kB {0} [built]
  [204] ./~/react-router/lib/IndexLink.js 1.74 kB {0} [built]
  [205] ./~/react-router/lib/IndexRedirect.js 2.59 kB {0} [built]
  [206] ./~/react-router/lib/Redirect.js 3.5 kB {0} [built]
  [207] ./~/react-router/lib/IndexRoute.js 2.48 kB {0} [built]
  [208] ./~/react-router/lib/Route.js 2.46 kB {0} [built]
  [209] ./~/react-router/lib/History.js 404 bytes {0} [built]
  [210] ./~/react-router/lib/Lifecycle.js 2.4 kB {0} [built]
  [211] ./~/react-router/lib/RouteContext.js 807 bytes {0} [built]
  [212] ./~/react-router/lib/match.js 2.32 kB {0} [built]
  [213] ./~/react-dom/index.js 63 bytes {0} [built]
  [214] ./~/react-router-relay/lib/index.js 500 bytes {0} [built]
  [215] ./~/react-router-relay/~/babel-runtime/helpers/interop-require-default.js 148 bytes {0} [built]
  [216] ./~/react-router-relay/lib/RelayRouter.js 1.18 kB {0} [built]
  [217] ./~/react-router-relay/~/babel-runtime/helpers/inherits.js 780 bytes {0} [built]
  [218] ./~/react-router-relay/~/babel-runtime/core-js/object/create.js 94 bytes {0} [built]
  [219] ./~/react-router-relay/~/babel-runtime/~/core-js/library/fn/object/create.js 103 bytes {0} [built]
  [220] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.js 417 bytes {0} [built]
  [221] ./~/react-router-relay/~/babel-runtime/core-js/object/set-prototype-of.js 104 bytes {0} [built]
  [222] ./~/react-router-relay/~/babel-runtime/~/core-js/library/fn/object/set-prototype-of.js 125 bytes {0} [built]
  [223] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/es6.object.set-prototype-of.js 159 bytes {0} [built]
  [224] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.export.js 1.73 kB {0} [built]
  [225] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.global.js 322 bytes {0} [built]
  [226] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.core.js 117 bytes {0} [built]
  [227] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.ctx.js 506 bytes {0} [built]
  [228] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.a-function.js 120 bytes {0} [built]
  [229] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.set-proto.js 914 bytes {0} [built]
  [230] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.is-object.js 107 bytes {0} [built]
  [231] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.an-object.js 150 bytes {0} [built]
  [232] ./~/react-router-relay/~/babel-runtime/helpers/class-call-check.js 211 bytes {0} [built]
  [233] ./~/react-router-relay/~/babel-runtime/helpers/extends.js 428 bytes {0} [built]
  [234] ./~/react-router-relay/~/babel-runtime/core-js/object/assign.js 94 bytes {0} [built]
  [235] ./~/react-router-relay/~/babel-runtime/~/core-js/library/fn/object/assign.js 107 bytes {0} [built]
  [236] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/es6.object.assign.js 161 bytes {0} [built]
  [237] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.object-assign.js 1.09 kB {0} [built]
  [238] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.to-object.js 130 bytes {0} [built]
  [239] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.defined.js 157 bytes {0} [built]
  [240] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.iobject.js 237 bytes {0} [built]
  [241] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.cof.js 103 bytes {0} [built]
  [242] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.fails.js 99 bytes {0} [built]
  [243] ./~/react-router-relay/lib/RelayRoutingContext.js 3.73 kB {0} [built] [1 error]
  [244] ./~/react-router-relay/~/babel-runtime/helpers/create-class.js 770 bytes {0} [built]
  [245] ./~/react-router-relay/~/babel-runtime/core-js/object/define-property.js 103 bytes {0} [built]
  [246] ./~/react-router-relay/~/babel-runtime/~/core-js/library/fn/object/define-property.js 130 bytes {0} [built]
  [247] ./~/react-router-relay/lib/RouteAggregator.js 8.02 kB {0} [built] [1 error]
  [248] ./~/react-router-relay/~/babel-runtime/core-js/weak-map.js 89 bytes {0} [built]
  [249] ./~/react-router-relay/~/babel-runtime/~/core-js/library/fn/weak-map.js 174 bytes {0} [built]
  [250] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/es6.object.to-string.js 0 bytes {0} [built]
  [251] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/web.dom.iterable.js 139 bytes {0} [built]
  [252] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/es6.array.iterator.js 1.14 kB {0} [built]
  [253] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.add-to-unscopables.js 43 bytes {0} [built]
  [254] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.iter-step.js 81 bytes {0} [built]
  [255] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.iterators.js 20 bytes {0} [built]
  [256] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.to-iobject.js 215 bytes {0} [built]
  [257] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.iter-define.js 2.6 kB {0} [built]
  [258] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.library.js 22 bytes {0} [built]
  [259] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.redefine.js 37 bytes {0} [built]
  [260] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.hide.js 286 bytes {0} [built]
  [261] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.property-desc.js 183 bytes {0} [built]
  [262] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.descriptors.js 178 bytes {0} [built]
  [263] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.has.js 117 bytes {0} [built]
  [264] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.iter-create.js 521 bytes {0} [built]
  [265] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.set-to-string-tag.js 252 bytes {0} [built]
  [266] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.wks.js 257 bytes {0} [built]
  [267] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.shared.js 199 bytes {0} [built]
  [268] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.uid.js 158 bytes {0} [built]
  [269] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/es6.weak-map.js 1.48 kB {0} [built]
  [270] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.collection-weak.js 2.72 kB {0} [built]
  [271] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.redefine-all.js 153 bytes {0} [built]
  [272] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.strict-new.js 152 bytes {0} [built]
  [273] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.for-of.js 891 bytes {0} [built]
  [274] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.iter-call.js 404 bytes {0} [built]
  [275] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.is-array-iter.js 279 bytes {0} [built]
  [276] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.to-length.js 218 bytes {0} [built]
  [277] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.to-integer.js 158 bytes {0} [built]
  [278] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/core.get-iterator-method.js 297 bytes {0} [built]
  [279] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.classof.js 565 bytes {0} [built]
  [280] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.array-methods.js 1.52 kB {0} [built]
  [281] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.array-species-create.js 541 bytes {0} [built]
  [282] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.is-array.js 138 bytes {0} [built]
  [283] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.collection.js 1.93 kB {0} [built]
  [284] ./~/react-router-relay/~/babel-runtime/core-js/object/keys.js 92 bytes {0} [built]
  [285] ./~/react-router-relay/~/babel-runtime/~/core-js/library/fn/object/keys.js 103 bytes {0} [built]
  [286] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/es6.object.keys.js 189 bytes {0} [built]
  [287] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.object-sap.js 371 bytes {0} [built]
  [288] ./~/react-router-relay/~/babel-runtime/core-js/get-iterator.js 93 bytes {0} [built]
  [289] ./~/react-router-relay/~/babel-runtime/~/core-js/library/fn/get-iterator.js 140 bytes {0} [built]
  [290] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/es6.string.iterator.js 525 bytes {0} [built]
  [291] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/$.string-at.js 613 bytes {0} [built]
  [292] ./~/react-router-relay/~/babel-runtime/~/core-js/library/modules/core.get-iterator.js 297 bytes {0} [built]
  [293] ./~/react-router-relay/~/invariant/browser.js 1.52 kB {0} [built]
  [294] ./~/react-router-relay/lib/getParamsForRoute.js 2.53 kB {0} [built]
  [295] ./~/react-router-relay/lib/RouteContainer.js 3.77 kB {0} [built]
  [296] ./~/react-router-relay/~/babel-runtime/helpers/object-without-properties.js 283 bytes {0} [built]
  [297] ./~/react-router-relay/~/react-static-container/index.js 360 bytes {0} [built]
  [298] ./~/react-router-relay/~/react-static-container/lib/StaticContainer.react.js 3.59 kB {0} [built]
  [299] ./js/components/TodoApp.js 11.2 kB {0} [built] [1 error]
  [300] ./js/mutations/AddTodoMutation.js 12.3 kB {0} [built] [1 error]
  [301] ./js/components/TodoListFooter.js 12.2 kB {0} [built] [1 error]
  [302] ./js/mutations/RemoveCompletedTodosMutation.js 13.9 kB {0} [built] [1 error]
  [303] ./js/components/TodoTextInput.js 9.95 kB {0} [built]
  [304] ./js/components/TodoList.js 13.9 kB {0} [built] [1 error]
  [305] ./js/mutations/MarkAllTodosMutation.js 13.5 kB {0} [built] [1 error]
  [306] ./js/components/Todo.js 13 kB {0} [built] [1 error]
  [307] ./js/mutations/ChangeTodoStatusMutation.js 12.3 kB {0} [built] [1 error]
  [308] ./js/mutations/RemoveTodoMutation.js 12 kB {0} [built] [1 error]
  [309] ./js/mutations/RenameTodoMutation.js 10.4 kB {0} [built] [1 error]
  [310] ./~/classnames/index.js 1.1 kB {0} [built]
  [311] ./js/queries/ViewerQueries.js 1.37 kB {0} [built] [1 error]

ERROR in ./js/app.js
Module not found: Error: Cannot resolve module 'babel/polyfill' in /root/relay/examples/todo/js
 @ ./js/app.js 3:0-25

ERROR in ./js/components/TodoApp.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/js/components
 @ ./js/components/TodoApp.js 25:18-40

ERROR in ./js/components/TodoList.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/js/components
 @ ./js/components/TodoList.js 21:18-40

ERROR in ./js/queries/ViewerQueries.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/js/queries
 @ ./js/queries/ViewerQueries.js 7:18-40

ERROR in ./js/components/TodoListFooter.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/js/components
 @ ./js/components/TodoListFooter.js 19:18-40

ERROR in ./js/components/Todo.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/js/components
 @ ./js/components/Todo.js 29:18-40

ERROR in ./js/mutations/MarkAllTodosMutation.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/js/mutations
 @ ./js/mutations/MarkAllTodosMutation.js 9:18-40

ERROR in ./js/mutations/AddTodoMutation.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/js/mutations
 @ ./js/mutations/AddTodoMutation.js 9:18-40

ERROR in ./~/react-router-relay/lib/RelayRoutingContext.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/node_modules/react-router-relay/lib
 @ ./~/react-router-relay/lib/RelayRoutingContext.js 19:18-40

ERROR in ./js/mutations/RemoveCompletedTodosMutation.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/js/mutations
 @ ./js/mutations/RemoveCompletedTodosMutation.js 9:18-40

ERROR in ./js/mutations/ChangeTodoStatusMutation.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/js/mutations
 @ ./js/mutations/ChangeTodoStatusMutation.js 9:18-40

ERROR in ./js/mutations/RemoveTodoMutation.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/js/mutations
 @ ./js/mutations/RemoveTodoMutation.js 9:18-40

ERROR in ./js/mutations/RenameTodoMutation.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/js/mutations
 @ ./js/mutations/RenameTodoMutation.js 9:18-40

ERROR in ./~/react-router-relay/lib/RouteAggregator.js
Module not found: Error: Cannot resolve module 'react-relay' in /root/relay/examples/todo/node_modules/react-router-relay/lib
 @ ./~/react-router-relay/lib/RouteAggregator.js 21:18-40
`
",yo34,2015-12-18 16:33:22
685,2015-12-15 20:41:29,"Creating super class seems to me as cleaner approach, so options can be easily passed to the newly created network layer when creating instance.

To make this example work (including old version), its necessary to return better promise (#684). 
",jardakotesovec,2016-03-21 20:40:32
685,2016-01-25 22:27:10,"Either composition or inheritance would work here, so this seems fine. See my [comment](https://github.com/facebook/relay/pull/684/files#r50766453) though about a simpler approach for waiting for the results of the mutation though.
",josephsavona,2016-03-21 20:40:32
685,2016-01-26 11:25:01,"Thanks for feedback. If I use the construction from [docs](https://facebook.github.io/relay/docs/api-reference-relay.html#injectnetworklayer-static-method-example)

<S_CODE_TOKEN>

It does not copy prototype or really anything from `DefaultNetworkLayer` and I end up with simple object having `sendMutation` prop.

I am using babel 6 with latest `babel-plugin-syntax-object-rest-spread` and `babel-plugin-transform-object-rest-spread`. 

So not sure how the composition is expected to work here. 
",jardakotesovec,2016-03-21 20:40:32
685,2016-01-26 16:30:06,"Yup, a class-based approach is cool too, let's keep that and just apply the changes in my comment above.

For reference, what I meant by composition was something like:

<S_CODE_TOKEN>
",josephsavona,2016-03-21 20:40:32
685,2016-01-26 17:02:42,"@josephsavona Thanks for explanation! PR is updated with your code.
",jardakotesovec,2016-03-21 20:40:32
685,2016-01-26 21:31:59,"@facebook-github-bot import 
",josephsavona,2016-03-21 20:40:32
685,2016-03-01 00:56:06,"@josephsavona Hmm... looks like the bot failed.
",yungsters,2016-03-21 20:40:32
685,2016-03-10 20:20:03,"@facebook-github-bot shipit
",yungsters,2016-03-21 20:40:32
684,2015-12-15 20:17:23,"`sendMutation` / `sendQueries` returns promise, but always fulfilled with undefined.  This PR suggest to return `request` promise which is what most people would expect I think. 

For me its valuable that I can do some extra logging/error detecting stuff by extending DefaultNetworkLayer class.

Let me know if that change makes sense and if you want tests for it.
",jardakotesovec,2016-01-26 16:46:09
683,2015-12-15 18:48:35,"This PR is meant to finish the work started by @devknoll on contextualizing the Relay store. The previous his attempt on that was #603, but he didn't have enough time to finish that soon, so he gave me a permission to continue his work.

Escape from the global Relay store is very important for server side rendering (https://github.com/denvned/isomorphic-relay/issues/6). It also solves the problem of resetting Relay store (#233).

I tried to make this PR as simple as possible to make the initial review easier. That's why there are few things not included yet:
- Unit tests for change of `relayContext` property.
- Updated docs.
- Updated examples.
- Fixed references to changed API in the code comments.

I removed the global Relay store singleton altogether to make sure it is not used anywhere. But it might  make sense to add placeholders for replaced API with deprecation messages, for backward compatibility (like [here](https://github.com/devknoll/relay/blob/0d545bb0b833d1631f55e4bc2fb8919ec898c005/src/store/RelayStore.js)).
",denvned,2016-02-06 18:47:56
683,2015-12-21 03:34:06,"@denvned My apologies for the delay in reviewing this. I'll write up more detailed thoughts in the morning, but for now I just wanted to thank you for your contribution :-)
",josephsavona,2016-02-06 18:47:56
683,2015-12-21 18:41:10,"At a high level, this is definitely the direction we want to go and is a good step towards implementing #558. However, it will be difficult to import and land this PR in the current form due to the sheer volume of code changes, the impact on public APIs, and the risk inherent in significantly changing core functionality. The only practical way to land this will be to split it up: first prepare the big change without affecting public APIs, then add one final PR to make the cutover. This will a) make it much easier to review, b) make the dependencies between changes explicit and c) isolate blame in the case something does go wrong. Kent Beck summed up this approach more succinctly than I can: ""for each desired change, make the change easy (warning: this may be hard), then make the easy change"" - https://twitter.com/KentBeck/status/250733358307500032.

Here's how that might look:
- Split off any changes that can be made safely today. An example is the changes to `RelayMutation` and `RelayMutationQueue` - these aren't dependent on the new `RelayContext` work and are a perfect example of something that can be safely changed now.
- Prepare the big change. We could create `RelayContext` first and make `RelayStore` export a default instance of it - without having any other callers of `RelayContext`. This will allow us to test and verify that module on its own first. The same PR could update `RelayGarbageCollection` to delegate to the context, since they're related. Note that this PR should/will completely preserve the existing public API.
- Again, change `RelayContainer` to access Relay data via `context.relay`, and change `RelayRenderer` to pass `RelayStore` (the default context instance) as `context.relay`. This will mean that we're now _using_ contextual data, without impacting public API.
- Finally, change RelayRender to accept the context instance as a prop, and change RelayRootContainer to pass the default instance instead. At this point, we can a) document RelayRenderer, b) mark RelayRootContainer as deprecated and c) document and make RelayContext part of RelayPublic.
",josephsavona,2016-02-06 18:47:56
683,2015-12-21 20:11:16,"@josephsavona Thanks for the great review! I have started working on splitting this. Hope to submit the ""prepare the big change"" PR tomorrow.
",denvned,2016-02-06 18:47:56
683,2016-01-03 20:45:32,"@josephsavona Should I submit the PR making `RelayContainer` access Relay data via `context.relay` now, or is it better to wait until the `RelayContext` PR (#698) is merged?
",denvned,2016-02-06 18:47:56
683,2016-01-04 00:42:28,"Probably better to wait until the other PR is merged so you can base your work on that. 
",josephsavona,2016-02-06 18:47:56
683,2016-01-19 23:26:11,"Excellent work!

Though, I'm surprised this does not touch the query caches (https://github.com/facebook/relay/search?utf8=%E2%9C%93&q=querycache)

Their `.size` seems to grow unbounded with each new query. Under a minigun-powered load test, I've performed 600 requests to the same page, and have observed that getRelayQueries.js's `queryCache` grows to 1171 in size, and that buildRQL.js's `queryCache` grows to 2342 in size.

Is this out of scope for this pull request?
",fabiosantoscode,2016-02-06 18:47:56
683,2016-01-19 23:43:30,"> Is this out of scope for this pull request?

@fabiosantoscode Yup, those query caches are unrelated to this PR. If you're seeing a behavior that seems incorrect or that might be a bug, definitely file a separate PR so we can confirm. Thanks!
",josephsavona,2016-02-06 18:47:56
683,2016-01-20 00:06:53,"I'll file an issue, but I only to confirmed this using the isomorphic-relay package (although the code that was leaking was relay, it had some things instrumented from the outside).
",fabiosantoscode,2016-02-06 18:47:56
683,2016-02-06 18:47:56,"The core of this was split off and landed in #761, so let's close this and continue discussion via follow-ups in #699 and #704.
",josephsavona,2016-02-06 18:47:56
682,2015-12-15 18:18:11,,joanna-chen,2015-12-16 18:45:31
682,2015-12-15 18:20:32,"@facebook-github-bot import
",steveluscher,2015-12-16 18:45:31
682,2015-12-15 18:23:22,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1142610195749935/int_phab to review.
",facebook-github-bot,2015-12-16 18:45:31
681,2015-12-14 14:22:43,"`react-relay` threw an error when ran a react app on Chrome 43.
Same app worked as expected on Safari 9.0.1

Seems that it's using [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Browser_compatibility) but it's not supported on some browsers.

Guess that this issue can be worked around by adding a polyfill for `Array.prototype.find` to my react app.

Maybe I haven't looked hard enough, but I can't information on browser compatibility for `react-relay`.

Cheers!

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",sogko,2015-12-17 04:11:04
681,2015-12-14 18:23:56,"Thanks for bringing this up. We extensively use the latest ES features and would recommend using a polyfill (the babel polyfill is :+1:)
",josephsavona,2015-12-17 04:11:04
680,2015-12-14 01:48:33,"based on this [discussion](https://phabricator.babeljs.io/T2027), this:

<S_CODE_TOKEN>

is a a non-standard arrow function call syntax allowed on babel 5, but it doesn't work on babel 6
",sibelius,2015-12-17 22:15:33
680,2015-12-16 23:39:27,"Thanks!

@facebook-github-bot import
",kassens,2015-12-17 22:15:33
680,2015-12-17 00:46:42,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/779356235525162/int_phab to review.
",facebook-github-bot,2015-12-17 22:15:33
679,2015-12-13 21:49:28,"~~https://tinyurl.com/zl6vgct~~ https://tinyurl.com/nfyfhff

I used Relay playground to sketch up an example, see above link.
link.commentCount is missing when rendering MyLink, should be 123.

Locally where i can check network  relay fetches:

<S_CODE_TOKEN>

but the fragment for commentCount does not make it through to the prop on my component.
All other properties are ok.
",quazzie,2015-12-14 22:23:33
679,2015-12-13 22:08:12,"Noticed an error in my first playground, missing breaks on cases in schema.
Had nothing to do with the problem.

Here is new link : https://tinyurl.com/nfyfhff

Also noticed if i set the local variable on MyLink to the same as passed in from HelloApp it works.
",quazzie,2015-12-14 22:23:33
679,2015-12-14 20:58:21,"cc. @steveluscher who know the most about the playground
",yuzhi,2015-12-14 22:23:33
679,2015-12-14 22:16:02,"This is a bug. When we write it into the store, we write using the storage key `commentCount{region:\""se\""}` but when we read it out, the storage key is `commentCount{region:\""\""}`.
",steveluscher,2015-12-14 22:23:33
679,2015-12-14 22:23:33,"Oh. Not a bug. You see, when querying, you passed the region down into the fragment:

<S_CODE_TOKEN>

…but when constructing the UI (the read pass) you didn't pass down the region:

<S_CODE_TOKEN>

Here's the [fixed playground](http://facebook.github.io/relay/prototyping/playground.html#source=class%20MyLink%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20%7Blink%7D%20%3D%20this.props%3B%0A%20%20%20%20console.log%28'mylink'%2C%20this.props%29%3B%0A%20%20%20%20return%20%3Cdiv%3E%7Blink.id%7D%20-%20%7Blink.title%7D%20-%20%7Blink.commentCount%7D%3C%2Fdiv%3E%3B%0A%20%20%7D%0A%7D%0AMyLink%20%3D%20Relay.createContainer%28MyLink%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20region%3A%20''%0A%20%20%7D%2C%20%20%0A%20%20fragments%3A%20%7B%0A%20%20%20%20link%3A%20%28%29%20%3D%3E%20Relay.QL%60%20%0A%20%20%20%20%20%20fragment%20on%20MyLink%20%7B%0A%20%20%20%20%20%20%20%20id%2C%20title%2C%20commentCount%28region%3A%20%24region%29%0A%20%20%20%20%20%20%7D%20%0A%20%20%20%20%60%0A%20%20%7D%20%0A%7D%29%3B%0A%0Aclass%20HelloApp%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20%7B%20viewer%20%7D%20%3D%20this.props%3B%0A%20%20%20%20console.log%28'app'%2C%20this.props%29%3B%0A%20%20%20%20return%20%28%3Cdiv%3E%0A%20%20%20%20%20%20%3Ch1%3Ehello2%20%7Bviewer.id%7D%3C%2Fh1%3E%0A%20%20%20%20%20%20%3CMyLink%20link%3D%7Bviewer.link%7D%20region%3D%7Bthis.props.relay.variables.region%7D%20%2F%3E%0A%20%20%20%20%3C%2Fdiv%3E%29%3B%0A%20%20%7D%0A%7D%0A%0AHelloApp%20%3D%20Relay.createContainer%28HelloApp%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20region%3A%20'se'%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20viewer%3A%20%28vars%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Viewer%20%7B%0A%20%20%20%20%20%20%20%20id%2C%20test%2C%0A%20%20%20%20%20%20%20%20link%20%7B%20%20%0A%20%20%20%20%20%20%20%20%20%20%24%7BMyLink.getFragment%28'link'%2C%20%7B%20region%3A%20vars.region%20%7D%29%7D%20%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%20%0A%7D%29%3B%0A%0Aclass%20HelloRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%20%20%2F%2F%20A%20unique%20name%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20viewer%3A%20%28Component%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20%7B%20viewer%20%7B%20%24%7BComponent.getFragment%28'viewer'%29%7D%20%7D%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20Component%3D%7BHelloApp%7D%0A%20%20route%3D%7Bnew%20HelloRoute%28%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B&schema=import%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%20%20GraphQLInt%2C%20%0A%7D%20from%20'graphql'%3B%0A%0Avar%20LinkType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'MyLink'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20%7B%20type%3A%20GraphQLString%20%7D%2C%20%0A%20%20%20%20title%3A%20%7B%20type%3A%20GraphQLString%20%7D%2C%0A%20%20%20%20commentCount%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLInt%2C%0A%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20region%3A%20%7B%20type%3A%20GraphQLString%20%7D%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resolve%3A%20%28link%2C%20args%29%20%3D%3E%20new%20Promise%28%28resolve%2C%20reject%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20var%20res%20%3D%200%3B%0A%20%20%20%20%20%20%20%20switch%28args.region%29%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20case%20'se'%3A%20res%20%3D%20123%3B%20break%3B%0A%20%20%20%20%20%20%20%20%20%20case%20'fi'%3A%20res%20%3D%20321%3B%20break%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20console.log%28'get%20comment%20count'%2C%20args.region%2C%20res%29%3B%0A%20%20%20%20%20%20%20%20resolve%28res%29%3B%0A%20%20%20%20%20%20%7D%29%20%0A%20%20%20%20%7D%0A%20%20%7D%29%0A%7D%29%3B%0A%0Avar%20ViewerType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Viewer'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20%7B%20type%3A%20GraphQLString%20%7D%2C%0A%20%20%20%20test%3A%20%7B%20type%3A%20GraphQLString%2C%20resolve%3A%20%28%29%20%3D%3E%20'hejsan'%20%7D%2C%0A%20%20%20%20link%3A%20%7B%20%0A%20%20%20%20%20%20type%3A%20LinkType%2C%0A%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20%28%7B%20id%3A%20%22link12%22%2C%20title%3A%20%22my%20title%22%20%7D%29%0A%20%20%20%20%7D%0A%20%20%7D%29%0A%7D%29%3B%0A%20%20%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20viewer%3A%20%7B%20%20%0A%20%20%20%20%20%20%20%20type%3A%20ViewerType%2C%20%0A%20%20%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20%28%7B%20id%3A%20'viewer'%20%7D%29%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%29%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0A). 
",steveluscher,2015-12-14 22:23:33
679,2015-12-14 22:26:08,"Ah had no idea that you need to pass the variable as an prop also, haven't seen it in any documentation.

~~Btw your playground link points to localhost :)~~
Thanks.
",quazzie,2015-12-14 22:23:33
678,2015-12-11 06:00:30,"Apparently `await` is missing from some lists of reserved words. Typically Babel or minifiers should quote `await` like they quote `function` in `var x = {function: 1, await: 2}`.

Instead of waiting for changes in Babel or webpack to trickle down, let's rename this for now.

Fixes #665.
",kassens,2015-12-11 17:40:41
678,2015-12-11 06:00:40,"@facebook-github-bot import
",kassens,2015-12-11 17:40:41
678,2015-12-11 06:05:32,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1056988307667078/int_phab to review.
",facebook-github-bot,2015-12-11 17:40:41
678,2015-12-11 08:17:29,"Thanks for the PR. +1
",kumarharsh,2015-12-11 17:40:41
678,2015-12-22 02:31:00,"is this fix going to be published to npm soon? thanks!
",gschammah,2015-12-11 17:40:41
678,2015-12-22 04:09:15,"@gschammah Yes, we're planning on publishing 0.7.0 on Wednesday.
",kassens,2015-12-11 17:40:41
678,2016-01-07 12:16:51,"@kassens any update on this?
",hannesj,2015-12-11 17:40:41
677,2015-12-11 03:33:57,"Hello
Using the following query:

<S_CODE_TOKEN>

causes the following error:

<S_CODE_TOKEN>

So obviously some combinations of parameters are not valid - and that is fair enough.

But I was expecting that the validation only happens after it excluded variables with value `null`. Unfortunately that doesn't seem to be the case, otherwise we could use the previous query with these variables:

<S_CODE_TOKEN>

And it should succeed since only the `first` variable is non-null and all the other variables should be ignored / not included.

So for now we have to use terrible workarounds like this:

<S_CODE_TOKEN>

So basically my feature request is that variables with `null` value will be ignored and excluded before query validation and submitting.
",BerndWessels,2016-05-10 16:18:23
677,2015-12-11 16:35:00,"Yeah, this has come up before. We'd be happy to accept a PR. `GraphQLRange` should (already) have the correct logic for validating arguments after excluding nulls - we just need to confirm that, and remove the validation in RelayQLPrinter (in the plugin). 
",josephsavona,2016-05-10 16:18:23
677,2015-12-29 14:54:36,"I was looking for a good way to poke around the internals of the babel-relay-plugin so I've prepared a quick PR to fix this! @josephsavona, you're correct that GraphQLRange does validate the arguments it is given at runtime, so the plugin's static validation can be loosened a bit.

I didn't end up removing the validation entirely, I just added an check to see if the arguments are variables. That means @BerndWessels's query will now be supported, but other invalid combinations using hardcoded values will still be rejected. 
",NevilleS,2016-05-10 16:18:23
677,2016-05-10 16:18:23,"This was implemented in a300da1
",josephsavona,2016-05-10 16:18:23
676,2015-12-11 01:12:11,"We're planning to use Relay for a messaging application we're building with React Native. As you'd assume the 2 things that are key to achieving this are subscriptions and offline support both of which seem to be in the works.

We'd love to contribute to these efforts but need some validation if the below proposal could work for offline support or if it's plain stupid!

Inject a custom network layer that does the following before handing queries and mutations over to Relay's default network layer:

Queries:
1. When online, log all query responses to a persistent local store.
2. When offline, switch out the default network layer for something like https://github.com/relay-tools/relay-local-schema to query the persistent local store instead of the GraphQL endpoint. 

Mutations:
1. Create an immutable persistent log producer for React Native. (perhaps use Kafka?)
2. Provide optimistic updates as well as log all mutations on device when offline
3. When the device comes online, connect to a log consumer service and compact mutation logs into  GraphQL requests, then somehow trigger fatQueries for the logged mutations so any data not covered by the optimistic updates is applied to state via standard relay.

How do you Facebook folk currently handle offline for native relay apps? such as the Ads Manager? And other GraphQL clients like Facebook for mobile?
",zuhair-naqvi,2016-01-03 03:36:48
676,2015-12-11 04:01:36,"The `RelayStore` has the idea of a `CacheManager` which sets as a layer in the store hierarchy:
- queued : place optimistic mutations go
- records : normal cache where query responses go
- cache : `your thingy goes here`

When you issue a query to the store it takes the first result it hits -- so your cache manager layer would sit at the bottom and be able to handle data requests _before_ anything goes to the network layer.

I haven't done anything with this, so could be 100% wrong, but @steveluscher mentioned it in his meetup talk.  I believe it would allow you to save this to local storage or any other place that would be longer lasting than the normal store layer.
",eyston,2016-01-03 03:36:48
676,2015-12-11 04:09:43,"@eyston do you mind linking me to this meet-up talk? Is there currently a way of hydrating RelayStore and bootstrapping the Cache from this hydrated Store at a later point?
",zuhair-naqvi,2016-01-03 03:36:48
676,2015-12-11 04:18:03,"It was an aside to the talk -- maybe an answer to a question -- so not on slides or anything (and I'm not sure if there are even slides).

The part in code: `RelayStoreData#injectCacheManager` : https://github.com/facebook/relay/blob/master/src/store/RelayStoreData.js#L158

I don't think `RelayStoreData` is exposed publicly (just `RelayStore`).  `RelayStoreData#getDefaultInstance` would get it privately tho~.

Again, haven't done anything with this myself, but here is the interface: https://github.com/facebook/relay/blob/master/src/tools/RelayTypes.js#L154
",eyston,2016-01-03 03:36:48
676,2015-12-11 21:54:03,"Ordinarily this would be an ideal question to post on Stack Overflow (we're trying to keep GitHub issues focused on bugs and enhancements), but since the discussion has already started let's keep it here.

There are two main things to handle for offline:

## Queries

One option is to inject a custom network layer and cache queries/responses, and play them back when offline. This might work depending on your use case. 

As an alternative, Relay supports injecting a cache manager (with the normal network layer). Whenever data is queried while online, responses will be logged to the cache manager so that it can persist data. When a query is executed while offline, Relay will attempt to fulfill the query by reading from the cache manager.

You can inject the manager with `RelayStoreData.getDefaultInstance().injectCacheManager()`. The interface is [documented in code](https://github.com/facebook/relay/blob/master/src/tools/RelayTypes.js#L154).

## Mutations

Mutations are a combination of the mutation class and props. One option here would be to maintain a queue of mutation calls, caching them when offline and playing them back when online.
",josephsavona,2016-01-03 03:36:48
676,2015-12-12 01:10:43,"@josephsavona I'll post any how to's on StackOverflow moving forward but offline support is an enhancement right?

Thanks :100: for your answers   

Ultimately we want to contribute the work on offline sync back to upstream so wondering if anyone at Facebook's working on this / planning to work on this in near term? If so, might make sense to join efforts rather than potentially go in different directions.
",zuhair-naqvi,2016-01-03 03:36:48
676,2015-12-12 01:43:33,"As mentioned in the [Roadmap](https://github.com/facebook/relay/wiki/Roadmap#in-progress), offline support is something we're actively exploring. In practice, this means that:
- The cache manager interface is reasonably stable and you're welcome to try it out. Just keep in mind that the interface _is_ experimental and may change going forward.
- We're not ready to open-source an implementation of the cache manager interface, and we don't have the bandwidth to provide support for a default implementation in `react-relay`. Instead, we'd encourage you to publish your own implementation as a separate repository. We'll do our best to answer questions if you cc us on PRs.
",josephsavona,2016-01-03 03:36:48
676,2015-12-19 07:31:39,"@josephsavona @eyston 

Let me know if the below makes sense:

We've got relay working with React Native, the next challenge is to offer an offline first experience. To do this one approach I've been thinking of is to bundle the schema with the app using https://github.com/relay-tools/relay-local-schema and back it up with https://github.com/facebook/dataloader persisting the cache to disk. The trade off is you'll still be making multiple requests from the client however majority of the requests will be resolved locally through data loader and the few that do go over the network will be asynchronous as far as the app is concerned as Relay abstracts these for us. So this drawback may not be so much of an issue depending on your use case.

There will also be a pub/sub mechanism on top of the dataloader that can selectively invalidate the cache when the data changes on the server.

The business logic and communication with the database will be kept outside of the resolvers and loaders (in a persistence API on the server) which is good practice anyway.

This way, with minimal change you might be able to build offline native apps using Relay - unless I'm missing something obvious, keen to hear your thoughts!
",zuhair-naqvi,2016-01-03 03:36:48
676,2015-12-19 17:54:22,"That sounds like a solid approach. Data loader will help to reduce the number of network requests, and the injected relay-local-schema is just a network later as far as Relay knows. 

Let us know how this works for you!
",josephsavona,2016-01-03 03:36:48
676,2015-12-22 10:34:17,"We were really excited to give this a shot but we can't seem to get graphql-relay-js to import into the React Native app as the https://github.com/graphql/graphql-relay-js is still based on babel 5.x and our fork of RN 0.16 (which is working with Relay) is using babel 6. We tried upgrading graphql-relay-js to babel 6 but then it wouldn't find babel-runtime helpers even though we're using `babel-plugin-transform-runtime`. 

Then we tried manually importing babel-helpers (extends, createClass etc.) but `babel-helpers/typeof` would just not work.

Possibly related to https://github.com/facebook/react-native/issues/2000 ?

Any suggestions?
",zuhair-naqvi,2016-01-03 03:36:48
676,2015-12-22 17:33:11,"good question. cc @sebmck @amasad @DmitrySoshnikov 
",josephsavona,2016-01-03 03:36:48
676,2015-12-22 17:49:14,"cc @tadeuzagallo 
",vjeux,2016-01-03 03:36:48
676,2015-12-22 19:04:10,"@josephsavona 

Thanks for linking me here. That makes a lot of sense, and it's a really neat implementation. I'll update the README on relay-local-schema appropriately.

In a perfect world, I'd like to be able to entirely avoid the waterfalls and send un-cached GraphQL queries wholesale to the master (especially in a mobile context), but just using DataLoader sounds like a really neat implementation.
",taion,2016-01-03 03:36:48
676,2015-12-22 22:20:08,"@zuhair-naqvi this is a known issue with how the RN packager deals with babelrc.

The way around it is to define your own transformer, that either does something similar or extends https://github.com/facebook/react-native/blob/master/packager/transformer.js. You can put in the babelRelayPlugin there. This is how its done:

https://gist.github.com/skevy/1a814befb036b98b30d2

You would then call the packager with ""--transformer=`pwd`/transformer.js""
",skevy,2016-01-03 03:36:48
676,2015-12-23 05:57:54,"@skevy thanks for the suggestion. @josephsavona thanks for your help so far, you've been great!

At this stage, we've decided to use Redux for our project given the timelines we're working with but I'd be keenly watching how the Relay and React Native communities toy with this idea as it could potentially kill three very hairy birds (i.e. Offline, Real-time and Local state) with one teeny-tiny stone (if it works). 
",zuhair-naqvi,2016-01-03 03:36:48
676,2015-12-23 10:49:32,"cc @hzoo @thejameskyle @loganfsmyth any insights on the babel-runtime issue mentioned above?
",amasad,2016-01-03 03:36:48
676,2015-12-23 15:12:12,"@amasad I'm almost positive all the issues @zuhair-naqvi described above have to do with https://github.com/facebook/react-native/issues/4062
",skevy,2016-01-03 03:36:48
676,2015-12-23 16:34:00,"@zuhair-naqvi thanks for starting the discussion, bringing up the Babel issue, and for the follow up. Good luck with the project and let us know how it goes!
",josephsavona,2016-01-03 03:36:48
676,2015-12-23 16:44:16,"I thought the typeof issue was resolved by @loganfsmyth as of `babel-runtime@6.3.19`. https://phabricator.babeljs.io/T6644#68981
",thejameskyle,2016-01-03 03:36:48
676,2015-12-23 16:50:19,"@thejameskyle you're probably right. I'm 90% positive this a RN packager issue that's being described, not a babel one.
",skevy,2016-01-03 03:36:48
676,2016-07-06 10:30:43,"@josephsavona I'm trying to make relay offline using relam db and relay-local-schema. I want to update relay store manually where I have a query and payload from my custom network layer. I have used `Relay.Store.getStoreData().handleQueryPayload(query, payload)`. where query is created using `Relay.createQuery(relayQueryQL, variables)` where relayQueryQL is create using `Relay.QL `${queryString}``

When I try to provide queryString like this:

<S_CODE_TOKEN>

similar to one that goes over network it throws error. Can you suggest how to use `handleQueryPayload` using such type of query strings. I tried looking in RelayRenderer.js to check how query and data are written `RelayStore`.
",shahankit,2016-01-03 03:36:48
676,2016-07-07 00:51:17,"@shahankit this is a good question for stack overflow: tag your question with #relayjs and post a link to it here and we or the community can answer. I'd recommend including a full code snippet so we can help diagnose. 
",josephsavona,2016-01-03 03:36:48
676,2016-07-07 01:08:13,"@josephsavona I have created a stackoverflow thread here: http://stackoverflow.com/questions/38236178/updating-relay-store-for-queries-with-multiple-definitions. I would be very nice if you could answer it there or here if possible.
",shahankit,2016-01-03 03:36:48
676,2017-03-05 03:24:45,"@josephsavona I also created a SO question: http://stackoverflow.com/questions/42604115/use-relay-cache-data-on-react-native-app-while-fresh-data-is-being-fetched
I would appreciate if you share some thoughts there.
Thanks in advance.",helielson,2016-01-03 03:36:48
675,2015-12-10 21:57:21,"`npm run build` on Windows caused:

> 'scripts' is not recognized as an internal or external command,
> operable program or batch file.

This fixes it by manually specifying the `node` executable.
",LouisStAmour,2016-02-27 00:05:36
675,2016-02-24 22:19:35,"Looks good, bear with me as I import a pull request for the first time :)

@facebook-github-bot import
",elynde,2016-02-27 00:05:36
675,2016-02-24 22:24:12,"@facebook-github-bot import
",elynde,2016-02-27 00:05:36
675,2016-02-24 22:33:15,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1490511097923295/int_phab) to review.
",facebook-github-bot,2016-02-27 00:05:36
675,2016-02-24 22:33:19,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1490511097923295/int_phab) to review.
",facebook-github-bot,2016-02-27 00:05:36
674,2015-12-10 15:01:04,"I have a few use cases where I have components that receive data via React `context`. The current implementation of `shouldComponentUpdate` on Relay containers blocks updates to those components via `context`.

Would it make sense to allow disabling the optimized `shouldComponentUpdate` as a configuration option for `Relay.createContainer`? Right now I have to do something a bit ugly to get the behavior I want.
",taion,2016-04-28 19:00:24
674,2016-01-10 20:42:15,"This seems pretty reasonable. You should open a PR :smile: 
",devknoll,2016-04-28 19:00:24
674,2016-01-10 23:44:54,"I wanted someone to tell me if it seemed reasonable :p

Given https://github.com/facebook/react/issues/2517#issuecomment-169838716, it looks like this will at most just be a temporary workaround – but it might be useful for some months.
",taion,2016-04-28 19:00:24
674,2016-03-02 15:55:42,"I'd like to pick this up if no one else is currently working on it?

I've had a quick stab at it here: https://github.com/peterhorne/relay/commit/3e437dfb7e5ae2029686c56247c041b8ccfa0945. If that looks alright please let me know and I shall add tests/docs and submit a PR.
",peterhorne,2016-04-28 19:00:24
674,2016-03-02 16:30:54,"I never started working on this.

Your code is roughly what I had in mind. For consistency with e.g. React-Redux containers, it might make sense to make the setting be something like `pure: false`, though.
",taion,2016-04-28 19:00:24
674,2016-03-03 10:44:41,"I've changed the setting name to `pure` as suggested and have submitted a PR https://github.com/facebook/relay/pull/897
",peterhorne,2016-04-28 19:00:24
674,2016-05-05 15:45:23,"This is inconvenient timing, but @gaearon has convinced me that `shouldComponentUpdate` blocking context updates is something that should be addressed by the library using context, not the library providing the container with `shouldComponentUpdate`: https://github.com/reactjs/react-router/issues/470, https://github.com/reactjs/react-router/pull/3430.

Specifically in the context of React Router, we're working on making our context use bypass intervening SCU checks by default, and extracting the utilities into a separate library for use by other context-using libraries: https://github.com/reactjs/react-router/pull/3430/files#diff-933e86e8d3d465b7c3d503e664607d59.

It's possible, then, that this is a bit of an anti-feature now, since I'm not aware of any other good reason to disable the Relay container pure render optimizations other than to allow context updates to propagate.
",taion,2016-04-28 19:00:24
674,2016-05-05 16:23:08,"@taion thanks for the follow-up. We'd be happy to remove the sCU option, we'll probably wait until `react-router` and other popular libraries using context have updated with the approach you described.
",josephsavona,2016-04-28 19:00:24
674,2016-05-05 16:58:17,"@josephsavona Our current tentative plan is to cut a React Router v3.0.0-pre.0 (or some other prerelease tag) within the next day or two, with the live links.
",taion,2016-04-28 19:00:24
674,2017-02-01 06:17:27,"@taion @devknoll @josephsavona   the current replay container allows user to specify its own implementation of scu. 
so if you pass a `()=>true`, you effectively disabled RelayContainer SCU

what I'm interested in, is to integrate default SCU with customer provided SCU together. something like this:
<S_CODE_TOKEN>
there are 2 main changes in above code
1. if relay thinks it should re-render the component, then do it
2. if relay thinks it doesn't need to re-render the component, then asks the user's opinion
3. when calling customer provided SCU, **please bind `this` and pass along props, state and context** as the current implementation pass nothing

Please suggest if the idea makes sense and I can create a PR for it once confirmed.",bochen2014,2016-04-28 19:00:24
673,2015-12-10 09:59:31,"Hi can i access props in prepareVariables on a container ?

I have a recursive structure :

<S_CODE_TOKEN>

And on the root i expand the first level by :

<S_CODE_TOKEN>

But i want to preserve the whole state and restore it when i return.
The preserve state i have covered and i pass down a object-tree with state to all nodes.
So i would like to be able to do this in prepareVariables:

<S_CODE_TOKEN>

I tried using a contructor:

<S_CODE_TOKEN>

but then relay complains about 
`Expected prop `location` supplied to `LocationList` to be data fetch by Relay.`

Is this possible ?
",quazzie,2015-12-11 18:04:40
673,2015-12-11 18:04:40,"Thanks for your question! We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",kassens,2015-12-11 18:04:40
673,2015-12-13 19:59:47,"https://stackoverflow.com/questions/34255662/props-in-relay-preparevariables
",quazzie,2015-12-11 18:04:40
672,2015-12-10 06:24:25,,steveluscher,2015-12-10 17:51:08
671,2015-12-10 06:11:10,,steveluscher,2015-12-10 18:01:15
670,2015-12-10 01:33:12,"Hello

I use `first` `after` and `last` `before` to do pagination.
`hasNextPage` and `hasPreviousPage` are very useful.

But what I need is also the `total count` so that I can calculate and show things like `page 5 of 343 pages` on the client.

Unfortunately that is not part of `pageInfo` even though I have the information on the server site.

Can you please include a `total` field in the `pageInfo` and extend `connectionFromArray` to take in the total `arrayLength` like `connectionFromArraySlice` already does?

Thanks
Bernd
",BerndWessels,2015-12-10 02:00:51
670,2015-12-10 02:00:51,"You can add a `count` field on the connection itself. It doesn't need to be nested under `pageInfo`.

If you'd like to post this to Stack Overflow as a question I can answer in more detail there (just share the link back here). For now I'm going to close this one as I don't think there is anything to be implemented in Relay.
",wincent,2015-12-10 02:00:51
670,2015-12-10 02:15:58,"Thank you @wincent 

I asked 2 questions on Stackoverflow. Please have a look [here](http://stackoverflow.com/questions/34192507/how-to-pass-total-count-to-the-client-in-pageinfo) and [here](http://stackoverflow.com/questions/34192587/how-to-navigate-without-cursors-in-a-connection)
",BerndWessels,2015-12-10 02:00:51
670,2015-12-10 02:16:02,"@BerndWessels We appreciate your trying out Relay and we definitely want to encourage you to keep asking questions. However, we'd ask that you prefer posting questions to [Stack Overflow](http://stackoverflow.com/questions/ask?tags=relayjs) or on [Discord](https://discordapp.com/channels/102860784329052160/102861057189490688). These are much more visible and have a larger audience who can provide support. Using these channels for questions helps us to keep GitHub high-signal for important bugs or enhancements.
",josephsavona,2015-12-10 02:00:51
670,2015-12-10 02:18:18,"@josephsavona OK, no worries. Was just thinking that this was a missing feature.
",BerndWessels,2015-12-10 02:00:51
669,2015-12-09 21:52:41,"Hi
I believe that there is something wrong with `connectionFromArraySlice`.

If I use the following values:

`args = { after: 'YXJyYXljb25uZWN0aW9uOjQ=', first: 3 }` // `cursorToOffset(args.after) = 4`
`meta = { sliceStart: 4, arrayLength: 10 }`
`arraySlice = ['a', 'b', 'c']`

I expect the following result edges:

`'a', 'b', 'c'`

But I only get:

`'a', 'b'`

I believe the bug is in `connectionFromArraySlice` in this line:

<S_CODE_TOKEN>

To fix this case I can just replace that line with:

<S_CODE_TOKEN>

But I am not sure if that will screw up other query combinations.

Can you please have a look into that.

Thank you
Bernd
",BerndWessels,2015-12-09 22:22:30
669,2015-12-09 22:22:30,"Sorry, I think the problem was outside of `connectionFromArraySlice` in my database retrieval code.

All this `after` and `before` and `zero based indexes` mess with my brain ;)

Cheers
Bernd
",BerndWessels,2015-12-09 22:22:30
669,2015-12-10 00:04:55,"thanks for following up!
",josephsavona,2015-12-09 22:22:30
668,2015-12-09 21:24:17,"Hello everyone!

I am trying to figure out passing parameters to components that were already encapsulated with relay.createContainer method.

If I encapsulate a container using relay.createContainer method, then It seems I no longer can read props. They are simply not there after encapsulation. 

The only props available after container creation are, this.props.relay and the this.props.viewer prop which I defined as a data dependency.

The only workaround I see is to pass data to child components directly from Store's using Flux. I do not understand the reason why this behavior is implemented?

Thanks.
",cettox,2015-12-09 22:00:26
668,2015-12-09 22:00:26,"@cettox Thanks for posting - this sounds like it might be due to your specific configuration, as RelayContainer does pass props through to components. 

We're trying to keep GitHub issues limited to discussion of bugs and enhancements. Can you post a question at [Stack Overflow](http://stackoverflow.com/questions/ask?tags=relayjs) and paste a link to it here? Thanks!
",josephsavona,2015-12-09 22:00:26
668,2015-12-09 22:13:34,"@josephsavona It might be it. However, my configurations is as simple as possible, I just used what relay starter kit offers. I wonder if others experienced this behavior. And if this happens on a slight configuration change, which I am not sure 100%, then since this is a huge behavior that is totally unexpected and and affects developer experience, my guess is that it should better be documented here and after a confirmation, it should be considered as a bug. Lets wait if this incidence really limited to my case. Thanks. I am opening that Stack Overflow thread.
",cettox,2015-12-09 22:00:26
667,2015-12-09 16:29:52,"We are currently stuck with this Relay error: `Validation error of type FieldsConflict: cycle: they return differing types TypeA and TypeB`.

Basically this is the query that we attempt:

<S_CODE_TOKEN>

`owner` of a Pet is of type `Human`, `owner` of a `TVShow` is of type `Business`. Relay doesn't seem to like that.

On the GraphQL issue tracker there was a discussion about a very similar issue over a month ago. It was said that a workaround would be to use an alias. But this doesn't work for us in Relay (yet in Graphiql the error actually disappears!).

Eventually, the issue was closed and the behavior was changed to allow 'conflicts' like this: ""[...] two fields which could not overlap are still treated as a potential conflict. This change loosens this rule, allowing fields which can never both apply in a frame of execution to diverge.""

Am I missing something or is Relay being too strict here?
",stephanos,2015-12-10 09:49:04
667,2015-12-09 17:13:38,"When does this error occur? In the babel plugin or when sending the query to the server?
",josephsavona,2015-12-10 09:49:04
667,2015-12-09 18:17:44,"It's from the browser console, so when sending it to the server.
",stephanos,2015-12-10 09:49:04
667,2015-12-09 22:02:18,"Relay logs babel transform errors in the browser console as well - is the request being sent to the server?
",josephsavona,2015-12-10 09:49:04
667,2015-12-10 09:49:04,"We investigated this further. We didn't realize that the error was reported by our backend (Java implementation). Sorry for the false alarm :(
",stephanos,2015-12-10 09:49:04
667,2015-12-10 17:29:11,"Glad you figured it out and thanks for following up!
",josephsavona,2015-12-10 09:49:04
666,2015-12-09 12:44:35,"We have a use-case in our app, where we are using one (big) mutation right now to create a new user. That is done via a multi-page form and at each stage of this form we want to cache what the user entered locally (using the optimisticResponse) in case they go back etc. So for that we are using `applyUpdate` which works well.

But at the end of the multi-page form we want to send one http request which sends the whole mutation (i.e. all the data in the cache) to the server. For that we are currently using `update` to send off a new mutation with all the newly cached data. But at this point the old transactions still 'linger' in the queue.

After discussing internally, what would be good to have for us, is either some way of batching/merging theses transactions into one single request or simply being able to remove transactions from the queue without reverting their optimisticResponse.

Without knowing too much of the source-code the second method seems to me like it would be quite a bit simpler. But in any case I would be happy to PR any of the two solutions, or any other solution that would be able to full-fill this use-case.
",Globegitter,2017-01-30 19:11:40
666,2016-01-10 20:21:57,"@Globegitter Is there a reason why something like the following wouldn't work:
1. Keep track of all of the `RelayMutationTransaction`'s you generate with `applyUpdate`
2. After `onSuccess` of your actual mutation, call `rollback` on the list

This assumes that your actual mutation's fat query includes the changed fields.

FWIW in a past project of mine with a similar UI, I decided to send off incremental updates like this for UX and analytics, e.g. in the case the browser was closed without submitting. 
",devknoll,2017-01-30 19:11:40
666,2017-01-30 19:11:40,"(Spring-cleaning). Going to close this one out due to inactivity, and given that a workaround like the one recommended by @devknoll is likely to be viable. Sorry for letting this one sit stale for so long!",wincent,2017-01-30 19:11:40
665,2015-12-08 09:01:58,"I'm getting an error while trying to run an app which has Relay in the Edge browser. The browser keeps throwing this error:

<S_CODE_TOKEN>

I have tracked it down to the file: [RelayTaskScheduler.js](https://github.com/facebook/relay/blob/288d6a16b45ba098e742c664bfb2f9e225d0f39f/src/tools/RelayTaskScheduler.js#L94) in the **compiled** code (which is generated by Babel):

<S_CODE_TOKEN>

I've verified that this is the problem by replacing the await function name with something non-reserved. `await` is a future reserved keyword: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FReserved_Words#Future_reserved_keywords
",kumarharsh,2015-12-11 17:40:41
665,2015-12-08 16:10:22,"Interesting, `await` is missing from https://github.com/estools/esutils which affects babel. 'enum' is there.
",plievone,2015-12-11 17:40:41
665,2015-12-10 21:31:45,"The same issue is also making us unable to bundle relay using Webpack 2 beta (See webpack/webpack#1725)
",hannesj,2015-12-11 17:40:41
665,2015-12-22 02:30:19,"is this fix going to be published to npm soon? thanks!
",gschammah,2015-12-11 17:40:41
664,2015-12-08 00:03:36,"Hi
When a `graphql request` hits my server it jumps into several different `resolve functions` depending on the query.
But I don't want to hit my database with sometimes dozens of small requests (basically a `select` in each `resolve` function). That would not really scale very well.

Is there a way to accumulate all these resolve calls for a single graphql request - so that at the end I can do some magic and build only a single `select` to my database and then resolve all promises?

I can see a few ways of building something myself by accumulating all the promises I return in the resolve functions, but I don't know when all resolve functions for a single request have been called.

Is there a solution to this problem? How does Facebook deal with that scenario?

Cheers
Bernd
",BerndWessels,2015-12-08 00:16:17
664,2015-12-08 00:16:17,"I have an answer for you - but can you post this on [Stack Overflow](http://stackoverflow.com/questions/ask?tags=graphql,graphql-js)? We're trying to keep the GitHub issues high-signal for bugs and enhancements. Please post a link to your SO question here and we'll answer!
",josephsavona,2015-12-08 00:16:17
664,2015-12-08 00:27:54,"@josephsavona 
Ok, I posted the question on [Stack Overflow here](http://stackoverflow.com/questions/34145915/how-to-accumulate-resolve-calls-for-a-single-request).
Cheers
",BerndWessels,2015-12-08 00:16:17
664,2015-12-08 00:46:56,"answered!
",josephsavona,2015-12-08 00:16:17
664,2015-12-08 00:56:54,"@josephsavona Thanks, added a comment to your answer, please check.
",BerndWessels,2015-12-08 00:16:17
663,2015-12-07 16:50:26,"I'm not sure what's goin' on here. I've seen a lot of examples in the wild that take multiple arguments for a mutation.

The introspection looks like:
Query:

<S_CODE_TOKEN>

Response

<S_CODE_TOKEN>

Is this actually a problem with my schema or something else?
",jaredonline,2015-12-07 16:55:51
663,2015-12-07 16:55:51,"See the [Relay Mutation Spec](http://facebook.github.io/relay/docs/graphql-mutations.html#content).
",josephsavona,2015-12-07 16:55:51
663,2015-12-07 16:56:52,"Relay requires that GraphQL schema follow a few conventions - single arguments to mutations is one of them.
",josephsavona,2015-12-07 16:55:51
663,2015-12-07 17:15:59,"Aha, I see. Thanks for the super fast response! I was looking at [this mutations guide](http://facebook.github.io/relay/docs/guides-mutations.html#content) which seems to be a bit out of date? It doesn't mention the special ""input"" variable anywhere ]=
",jaredonline,2015-12-07 16:55:51
663,2015-12-07 19:26:56,"@jaredonline Yeah, that guide is meant to cover mutations on the Relay side, but we should probably link to the Mutations Spec from that guide. PRs welcome! ;-)
",josephsavona,2015-12-07 16:55:51
663,2016-11-17 08:58:42,"@jaredonline 

> single arguments to mutations is one of them.

Is there any chance to pass multiple arguments to mutations? I have seen some code like this  somewhere
`getVariables() {
    return {
      text: this.props.text,
      id:this.props.id,
      time:this.props.time
    };
  }`
",Ansalibrahim,2015-12-07 16:55:51
663,2016-11-22 06:57:58,"@Ansalibrahim I have the same problem too.

The [document](https://facebook.github.io/relay/docs/api-reference-relay-mutation.html#getvariables-abstract-method) states that:

> Implement this required method to prepare *variables* to be used as input to the mutation.

so I assumed we can pass multiple arguments when doing mutations.

I'm getting the same `mutation fields must have exactly one argument named 'input'` when I do the following:

<S_CODE_TOKEN>`

I checked out my **schema.js** just to make sure an `input` argument wasn't automatically added, but seems like thats not the case. I can also successfully do the same mutation from GraphiQL.

So this could be something in `react-relay` or `babel-relay-plugin`?


!**UPDATE**!

After looking through [more recent issues](https://github.com/facebook/relay/issues/1447), it seems that it is true that input is required.

So on the GraphQL side I wrapped all my previous args in a field called `input` with the type `GraphQLInputObjectType`. Problem solved. But I think the documentation needs clarification on this.",Naoto-Ida,2015-12-07 16:55:51
663,2016-11-24 00:53:23,"@Naoto-Ida Glad you got this solved. We've documented this requirement in the [Relay Mutation Spec](https://facebook.github.io/relay/docs/graphql-mutations.html#content), but if there are other places that you expected to see it and didn't, please submit a PR to update the docs!",josephsavona,2015-12-07 16:55:51
663,2016-11-24 02:42:05,"@josephsavona Ok, thank you for pointing that out. I'll see if I can submit a PR this week.",Naoto-Ida,2015-12-07 16:55:51
662,2015-12-07 13:37:51,"Tried out what happens if one upgrades flow and removes some type suppressions that may be obsolete now. I don't know if removing them is intended, but you can cherrypick the changes you care about.
",plievone,2016-01-28 16:27:31
662,2016-01-28 16:27:30,"This is fantastic, @plievone. I've wanted to get rid of those workarounds for the longest time!

Sorry that we let this one get stale; since you pushed this we already updated (to an even later version of Flow) and fixed some of the issues independently. I've gone through and picked out the changes that are still relevant, so I am going to mark this one as closed. Thanks once again for your contribution!
",wincent,2016-01-28 16:27:31
662,2016-01-29 19:29:14,"Thanks!
",plievone,2016-01-28 16:27:31
661,2015-12-07 13:22:51,"Fixes most of the `npm run lint` issues. There are three commits here: the first codemods the dangling comma, the second one fixes a few other eslint issues, and the third one fixes a few unnecessary warnings during tests. Take in full or in part, with or without attribution (as there are quite many lines changed!).
",plievone,2015-12-16 18:36:41
661,2015-12-14 17:39:10,"Hi @plievone, sorry for letting this sit for a while. We've had some bigger updates to the codebase. I see you're change consists of a codemod diff and some manual changes. Would you mind redoing the automated part on master? This should reduce the work required to rebase the manual part.
",kassens,2015-12-16 18:36:41
661,2015-12-15 17:17:06,"This is great, thanks!

@facebook-github-bot import
",kassens,2015-12-16 18:36:41
661,2015-12-15 17:20:13,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/701908166575597/int_phab to review.
",facebook-github-bot,2015-12-16 18:36:41
661,2015-12-15 19:57:42,"There's also a bonus commit fixing most of the unnecessary warnings during tests, you can cherry pick what you need.
",plievone,2015-12-16 18:36:41
661,2015-12-15 20:09:59,"> I would also update all the lint deps here to make sure you have latest eslint, babel-eslint (and then fix the version numbers - the ranges have been annoying in other projects as rules change).

@kassens One could also pin some devDependencies here to a point version as zpao suggested.
",plievone,2015-12-16 18:36:41
661,2015-12-16 06:44:26,"This is amazing.
",yungsters,2015-12-16 18:36:41
661,2015-12-16 18:15:25,"Landing all the changes from this PR internally now. It was easier to include the test fixes now.
",kassens,2015-12-16 18:36:41
660,2015-12-07 11:40:35,"Say I perform a ""Like"" mutation and my fat query updates a number of child components down the tree. One of those components is a ""Counter"" component which whenever updated, must trigger a number of superficial UI updates, e.g. show a toast / notification and perhaps trigger a beep sound. 

Say both the `<toast>` and `<beep>` are arbitrary components i.e. NOT BACKED BY DATA but do need to accept props and render in response to arbitrary  events. In a typical Flux case, I could just set the component state to LikeStore.getState() - how do I go about this in my Relay application?

If there isn't a way for arbitrary components to subscribe to mutations (better yet, results of the fat query) then most applications WILL need to use Flux along side Relay. This would mean I end up tracking two branches of my application state one for arbitrary components outside of Relay and the other for components with data managed by Relay - this can get messy!
",zuhair-naqvi,2015-12-11 03:19:42
660,2015-12-07 12:43:21,"Found this on StackOverflow http://stackoverflow.com/questions/33616360/how-to-fire-flux-actions-for-relaymutations/34113583#34113583

But it's only ever going to be optimistic but you can't undo a toast or a beep, so I need the result of the fat query before I dispatch actions my arbitrary components are listening to.
",zuhair-naqvi,2015-12-11 03:19:42
660,2015-12-09 23:25:45,"**listens intently**
",terrisgit,2015-12-11 03:19:42
660,2015-12-10 00:18:55,"> If there isn't a way for arbitrary components to subscribe to mutations (better yet, results of the fat query) 

Relay Containers subscribe to the store for updates to their fragment data. Rather than directly update components, mutations cause data to be updated in the store, which then notifies any affected containers. 

> Say both the <toast> and <beep> are arbitrary components i.e. NOT BACKED BY DATA but do need to accept props and render in response to arbitrary events.  In a typical Flux case, I could just set the component state to LikeStore.getState()...

It's a bit unclear how these components decide to when to update. Do they respond to arbitrary events? In which case, the linked StackOverflow question provides a mechanism for notifying your application when a mutation completes. Alternately, do they respond to data? In this case, why not make these Relay containers and fetch the data they need?
",josephsavona,2015-12-11 03:19:42
660,2015-12-11 03:19:04,"@josephsavona Thanks for the answers.

I think #114 will address the use-cases I was getting at!
",zuhair-naqvi,2015-12-11 03:19:42
659,2015-12-07 10:37:22,"Is it possible to use ES6 template strings to generate dynamic fragment query as below?
babel will prompt a error `Error: Syntax Error`

<S_CODE_TOKEN>
",indiejoseph,2015-12-07 15:54:58
659,2015-12-07 15:54:58,"Good question. This isn't supported, because the exact field has to be known statically in order for Relay to verify the type of the fields, its arguments, and the possible field selections. Also answered in https://github.com/facebook/relay/issues/170#issuecomment-135175640.
",josephsavona,2015-12-07 15:54:58
658,2015-12-07 05:20:59,"A bit different from the example in start kit. the illustration use promise directly instead of async to keep code short and simple.
",iamchenxin,2016-03-08 09:30:32
658,2015-12-07 07:15:19,"What problem is this addressing?
",josephsavona,2016-03-08 09:30:32
658,2015-12-07 12:49:40,"@josephsavona  adding a direct explanation for how to generate Schema JSON.(the old docs do not explain how to generate Schema JSON ,but give a link to the code of starter kit )

The example code in `starter kit` is too long for illustration ( await just one function does not make sense there ).  So i modified that codes from async/await to directly promise.
The original code in start kit is

<S_CODE_TOKEN>

be simplified to 

<S_CODE_TOKEN>

as the code is short enough,so it maybe suit for putting in the .MD file directly to illuminate how to generate Schema JSON.
",iamchenxin,2016-03-08 09:30:32
658,2016-03-07 22:48:40,"@facebook-github-bot import
",yungsters,2016-03-08 09:30:32
658,2016-03-07 22:49:06,"If you don't mind, I will take the liberty of cleaning these up before landing them internally.
",yungsters,2016-03-08 09:30:32
658,2016-03-07 23:13:18,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/568904009932092/int_phab) to review.
",facebook-github-bot,2016-03-08 09:30:32
658,2016-03-08 10:03:59,"@yungsters Im so sorry, just saw this yet . modified them by review.
",iamchenxin,2016-03-08 09:30:32
658,2016-03-08 10:05:21,"@yungsters never mind , thank you! its my fault.
",iamchenxin,2016-03-08 09:30:32
657,2015-12-07 00:26:34,"Addresses the warning noted in #474 and #653, fetching `__typename` for newly created edges. 
",josephsavona,2015-12-08 01:00:35
657,2015-12-07 00:26:50,"@facebook-github-bot import
",josephsavona,2015-12-08 01:00:35
657,2016-09-21 22:14:20,"Can anyone explain why __typename is needed for new edges? Thanks.
",GrigoryPtashko,2015-12-08 01:00:35
657,2016-09-22 04:12:59,"Without the typename for a record, we can't tell whether fragments match against it. It's also helpful for debugging purposes. 
",josephsavona,2015-12-08 01:00:35
656,2015-12-06 19:51:18,"Hi
@josephsavona mentioned [here](https://github.com/facebook/relay/issues/635) that this should have been fixed with version 0.6.0 - but unfortunately is seem not to be fixed.

Can you please have a look again. It prevents us from upgrading beyond `0.3.0` at all.

Here are the details again with how to reproduce.

The problem comes when upgrading from `babel-relay-plugin(-loader)` `0.3.0` to `0.4.0`, `0.4.1` or `0.6.0`.

With `0.3.0` everything works just fine but with `0.6.0` I get this error in Chrome:

`Uncaught TypeError: Cannot read property 'length' of undefined`

relay.0.4.0.js in line 5394

`if (GraphQL.isQuery(node) && node.fragments.length === 0) {`

The problem is that the `node` object does not have a fragments property.

![relay040](https://cloud.githubusercontent.com/assets/1776695/11459451/aa8a02f0-973b-11e5-9a33-a269e50781bd.png)

You can easily reproduce it yourself with my [Git Repo](https://github.com/BerndWessels/react-webpack).

To reproduce just change the dependencies in `package.json` to

`""babel-relay-plugin"": ""^0.6.0""`
`""babel-relay-plugin-loader"": ""^0.6.0""`
`""react-relay"": ""^0.6.0""`

Setup and run:

`npm install`

Change `data/database/db.js` to point to your mysql/postgres database:

<S_CODE_TOKEN>

Create some sample data:

babel-node ./scripts/databaseCreate.js

Create the schema:
`npm run schema:update`

Then in one console run:
`npm run schema:serve`

and in another console run:
`npm start`

Now you will see the error in the Chrome DevTools.

Thank you
Bernd
",BerndWessels,2015-12-06 20:12:36
656,2015-12-06 20:12:36,"The screenshot clearly indicates that you are running react-relay 0.4.0, which is two versions out of date. Please update to 0.6.0.
",josephsavona,2015-12-06 20:12:36
656,2015-12-06 20:34:50,"@josephsavona was right - the problem was that I use webpack and have react and relay as external dependencies rather than compiling it into the application bundle - and the external dependency to react-relay was not updated.
Thanks again Joseph - sometimes it helps if somebody else just points out the obvious, especially when you work alone on a project.
Cheers
Bernd
",BerndWessels,2015-12-06 20:12:36
656,2015-12-07 00:12:51,"happy to help! :-)
",josephsavona,2015-12-06 20:12:36
655,2015-12-06 18:16:05,"While trying to [implement long polling](http://stackoverflow.com/questions/34110463/how-to-implement-long-polling-with-relay) with Relay, I discovered that Relay could not resolve the connection field from which my polling container was fragmented.

Here is a [playground](https://facebook.github.io/relay/prototyping/playground.html#source=%2F**%0A%20*%20Copyright%202013-2015%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aclass%20VocabList%20extends%20React.Component%20%7B%0A%20%20componentDidMount%28%29%20%7B%0A%20%20%20%20var%20self%20%3D%20this%3B%0A%20%20%20%20%2F*setInterval%28function%28%29%20%7B%0A%20%20%20%20%20%20self.props.relay.forceFetch%28%29%3B%0A%20%20%20%20%7D%2C%2015000%29%3B*%2F%0A%20%20%7D%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20%7B%20vocabulary%20%7D%20%3D%20this.props%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cul%3E%0A%20%20%20%20%20%20%20%20%7Bvocabulary.edges.map%28edge%20%3D%3E%20%28%0A%20%20%20%20%20%20%20%20%20%20%3Cli%3E%7Bedge.node.content%7D%3C%2Fli%3E%0A%20%20%20%20%20%20%20%20%29%29%7D%0A%20%20%20%20%20%20%3C%2Ful%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0A%0Aclass%20Novel%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20%7B%20novel%20%7D%20%3D%20this.props%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Ch2%3EWords%20you%20can%20use%20in%20this%20novel%3A%3C%2Fh2%3E%0A%20%20%20%20%20%20%20%20%3CVocabList%20vocabulary%3D%7Bnovel.vocabulary%7D%20%2F%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0Aclass%20HelloApp%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20%2F%2F%20Relay%20will%20materialize%20this%20prop%20based%20on%20the%0A%20%20%20%20%2F%2F%20result%20of%20the%20query%20in%20the%20next%20component.%0A%20%20%20%20return%20%3CNovel%20novel%3D%7Bthis.props.novel%7D%20%2F%3E%3B%0A%20%20%7D%0A%7D%0A%0AVocabList%20%3D%20Relay.createContainer%28VocabList%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20vocabulary%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20VocabTermConnection%20%7B%0A%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20content%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0ANovel%20%3D%20Relay.createContainer%28Novel%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20novel%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Novel%20%7B%0A%20%20%20%20%20%20%20%20vocabulary%28first%3A%2020%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BVocabList.getFragment%28'vocabulary'%29%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0AHelloApp%20%3D%20Relay.createContainer%28HelloApp%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20%2F%2F%20This%20GraphQL%20query%20executes%20against%0A%20%20%20%20%2F%2F%20the%20schema%20in%20the%20'schema'%20tab%20above.%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20To%20learn%20more%20about%20Relay.QL%2C%20visit%3A%0A%20%20%20%20%2F%2F%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fapi-reference-relay-ql.html%0A%20%20%20%20novel%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Novel%20%7B%0A%20%20%20%20%20%20%20%20%24%7BNovel.getFragment%28'novel'%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0Aclass%20HelloRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%20%20%2F%2F%20A%20unique%20name%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20%2F%2F%20Here%2C%20we%20compose%20your%20Relay%20container's%0A%20%20%20%20%2F%2F%20'greetings'%20fragment%20into%20the%20'greetings'%0A%20%20%20%20%2F%2F%20field%20at%20the%20root%20of%20the%20GraphQL%20schema.%0A%20%20%20%20novel%3A%20%28Component%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20NovelQuery%20%7B%0A%20%20%20%20%20%20%20%20novel%28novelId%3A%20%221%22%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'novel'%29%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BHelloApp%7D%0A%20%20%20%20route%3D%7Bnew%20HelloRoute%28%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B%0A&schema=%2F**%0A%20*%20Copyright%202013-2015%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aimport%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%20%20GraphQLNonNull%0A%7D%20from%20'graphql'%3B%0A%0Aimport%20%7B%0A%20%20connectionArgs%2C%0A%20%20connectionDefinitions%2C%0A%20%20connectionFromArray%2C%0A%20%20fromGlobalId%2C%0A%20%20globalIdField%2C%0A%20%20nodeDefinitions%2C%0A%7D%20from%20'graphql-relay'%3B%0A%0Aclass%20Novel%20extends%20Object%20%7B%7D%0Aclass%20VocabTerm%20extends%20Object%20%7B%7D%0Avar%20novel%20%3D%20new%20Novel%28%29%3B%0Anovel.id%20%3D%20'1'%3B%0A%0Avar%20vocabulary%20%3D%20%5B%5D%3B%0A%0A%28function%28%29%20%7B%0A%20%20var%20vocabTerm1%20%3D%20new%20VocabTerm%28%29%3B%0A%20%20vocabTerm1.id%20%3D%20'1'%3B%0A%20%20vocabTerm1.content%20%3D%20%22hello%22%3B%0A%20%20vocabulary.push%28vocabTerm1%29%3B%0A%20%20var%20vocabTerm2%20%3D%20new%20VocabTerm%28%29%3B%0A%20%20vocabTerm2.id%20%3D%20'2'%3B%0A%20%20vocabTerm2.content%20%3D%20%22world%22%3B%0A%20%20vocabulary.push%28vocabTerm2%29%3B%0A%7D%29%28%29%3B%0A%0Afunction%20getNovel%28id%29%20%7B%0A%20%20return%20novel%3B%0A%7D%0A%0Afunction%20getVocabTerm%28id%29%20%7B%0A%20%20return%20vocabulary%5Bid-1%5D%3B%0A%7D%0A%0Afunction%20getVocabulary%28%29%20%7B%0A%20%20return%20vocabulary%3B%0A%7D%0A%0Avar%20%7BnodeInterface%2C%20nodeField%7D%20%3D%20nodeDefinitions%28%0A%20%20%28globalId%29%20%3D%3E%20%7B%0A%20%20%20%20var%20%7Btype%2C%20id%7D%20%3D%20fromGlobalId%28globalId%29%3B%0A%20%20%20%20if%20%28type%20%3D%3D%3D%20'Novel'%29%20%7B%0A%20%20%20%20%20%20return%20getNovel%28id%29%3B%0A%20%20%20%20%7D%20else%20if%20%28type%20%3D%3D%3D%20'VocabTerm'%29%20%7B%0A%20%20%20%20%20%20return%20getVocabTerm%28id%29%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20null%3B%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%28obj%29%20%3D%3E%20%7B%0A%20%20%20%20if%20%28obj%20instanceof%20Novel%29%20%7B%0A%20%20%20%20%20%20return%20NovelType%3B%0A%20%20%20%20%7D%20else%20if%20%28obj%20instanceof%20VocabTerm%29%20%7B%0A%20%20%20%20%20%20return%20VocabTermType%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20null%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%29%3B%0A%0Avar%20VocabTermType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'VocabTerm'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20globalIdField%28'VocabTerm'%29%2C%0A%20%20%20%20content%3A%20%7Btype%3A%20GraphQLString%7D%2C%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0Avar%20NovelType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Novel'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20globalIdField%28'Novel'%29%2C%0A%20%20%20%20vocabulary%3A%20%7B%0A%20%20%20%20%20%20type%3A%20vocabTermConnection%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28novel%2C%20args%29%20%3D%3E%20connectionFromArray%28getVocabulary%28%29%2C%20args%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0Avar%20%7BconnectionType%3A%20vocabTermConnection%7D%20%3D%0A%20%20connectionDefinitions%28%7Bname%3A%20'VocabTerm'%2C%20nodeType%3A%20VocabTermType%7D%29%3B%0A%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20novel%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20NovelType%2C%0A%20%20%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20novelId%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20type%3A%20new%20GraphQLNonNull%28GraphQLString%29%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20Here%20we%20define%20a%20resolver%20that%20returns%0A%20%20%20%20%20%20%20%20%2F%2F%20the%20data%20defined%20above.%20Were%20this%20schema%0A%20%20%20%20%20%20%20%20%2F%2F%20executing%20on%20the%20server%20side%2C%20you%20could%0A%20%20%20%20%20%20%20%20%2F%2F%20write%20a%20resolve%20method%20that%20fetches%0A%20%20%20%20%20%20%20%20%2F%2F%20live%20data%20from%20a%20database.%0A%20%20%20%20%20%20%20%20resolve%3A%20%28root%2C%20%7BnovelId%7D%29%20%3D%3E%20getNovel%28novelId%29%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%29%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A) that demonstrates the reduced test case. Simply uncomment the 3 lines of polling code at line 13 in the `Code` tab.

The following exception occurs:

<S_CODE_TOKEN>
",thebritican,2016-03-06 10:34:06
655,2015-12-06 22:57:27,"Thanks :100: for the playground repo. We should have a fix out with 0.6.1.
",steveluscher,2016-03-06 10:34:06
655,2015-12-07 01:56:10,"No problem! Excited for the fix, such an easy way to refresh my data had it worked immediately :laughing: 
",thebritican,2016-03-06 10:34:06
655,2015-12-22 01:35:15,"I think that the refetch problem was fixed by e2b533b47ffb33d701ac288679fd18c6846fdc5c, but now I'm seeing a different problem on [this playground](http://facebook.github.io/relay/prototyping/playground.html#source=%2F**%0A%20*%20Copyright%202013-2015%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aclass%20VocabList%20extends%20React.Component%20%7B%0A%20%20componentDidMount%28%29%20%7B%0A%20%20%20%20var%20self%20%3D%20this%3B%0A%20%20%20%20setInterval%28function%28%29%20%7B%0A%20%20%20%20%20%20self.props.relay.forceFetch%28%29%3B%0A%20%20%20%20%7D%2C%201500%29%3B%0A%20%20%7D%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20%7B%20vocabulary%20%7D%20%3D%20this.props%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cul%3E%0A%20%20%20%20%20%20%20%20%7Bvocabulary.edges.map%28edge%20%3D%3E%20%28%0A%20%20%20%20%20%20%20%20%20%20%3Cli%3E%7Bedge.node.content%7D%3C%2Fli%3E%0A%20%20%20%20%20%20%20%20%29%29%7D%0A%20%20%20%20%20%20%3C%2Ful%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0A%0Aclass%20Novel%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20%7B%20novel%20%7D%20%3D%20this.props%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Ch2%3EWords%20you%20can%20use%20in%20this%20novel%3A%3C%2Fh2%3E%0A%20%20%20%20%20%20%20%20%3CVocabList%20vocabulary%3D%7Bnovel.vocabulary%7D%20%2F%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0Aclass%20HelloApp%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20%2F%2F%20Relay%20will%20materialize%20this%20prop%20based%20on%20the%0A%20%20%20%20%2F%2F%20result%20of%20the%20query%20in%20the%20next%20component.%0A%20%20%20%20return%20%3CNovel%20novel%3D%7Bthis.props.novel%7D%20%2F%3E%3B%0A%20%20%7D%0A%7D%0A%0AVocabList%20%3D%20Relay.createContainer%28VocabList%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20vocabulary%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20VocabTermConnection%20%7B%0A%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20content%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0ANovel%20%3D%20Relay.createContainer%28Novel%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20novel%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Novel%20%7B%0A%20%20%20%20%20%20%20%20vocabulary%28first%3A%2020%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BVocabList.getFragment%28'vocabulary'%29%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0AHelloApp%20%3D%20Relay.createContainer%28HelloApp%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20%2F%2F%20This%20GraphQL%20query%20executes%20against%0A%20%20%20%20%2F%2F%20the%20schema%20in%20the%20'schema'%20tab%20above.%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20To%20learn%20more%20about%20Relay.QL%2C%20visit%3A%0A%20%20%20%20%2F%2F%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fapi-reference-relay-ql.html%0A%20%20%20%20novel%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Novel%20%7B%0A%20%20%20%20%20%20%20%20%24%7BNovel.getFragment%28'novel'%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0Aclass%20HelloRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%20%20%2F%2F%20A%20unique%20name%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20%2F%2F%20Here%2C%20we%20compose%20your%20Relay%20container's%0A%20%20%20%20%2F%2F%20'greetings'%20fragment%20into%20the%20'greetings'%0A%20%20%20%20%2F%2F%20field%20at%20the%20root%20of%20the%20GraphQL%20schema.%0A%20%20%20%20novel%3A%20%28Component%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20NovelQuery%20%7B%0A%20%20%20%20%20%20%20%20novel%28novelId%3A%20%221%22%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'novel'%29%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BHelloApp%7D%0A%20%20%20%20route%3D%7Bnew%20HelloRoute%28%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B%0A&schema=%2F**%0A%20*%20Copyright%202013-2015%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aimport%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%20%20GraphQLNonNull%0A%7D%20from%20'graphql'%3B%0A%0Aimport%20%7B%0A%20%20connectionArgs%2C%0A%20%20connectionDefinitions%2C%0A%20%20connectionFromArray%2C%0A%20%20fromGlobalId%2C%0A%20%20globalIdField%2C%0A%20%20nodeDefinitions%2C%0A%7D%20from%20'graphql-relay'%3B%0A%0Aclass%20Novel%20extends%20Object%20%7B%7D%0Aclass%20VocabTerm%20extends%20Object%20%7B%7D%0Avar%20novel%20%3D%20new%20Novel%28%29%3B%0Anovel.id%20%3D%20'1'%3B%0A%0Avar%20vocabulary%20%3D%20%5B%5D%3B%0A%0A%28function%28%29%20%7B%0A%20%20var%20vocabTerm1%20%3D%20new%20VocabTerm%28%29%3B%0A%20%20vocabTerm1.id%20%3D%20'1'%3B%0A%20%20vocabTerm1.content%20%3D%20%22hello%22%3B%0A%20%20vocabulary.push%28vocabTerm1%29%3B%0A%20%20var%20vocabTerm2%20%3D%20new%20VocabTerm%28%29%3B%0A%20%20vocabTerm2.id%20%3D%20'2'%3B%0A%20%20vocabTerm2.content%20%3D%20%22world%22%3B%0A%20%20vocabulary.push%28vocabTerm2%29%3B%0A%7D%29%28%29%3B%0A%0Afunction%20getNovel%28id%29%20%7B%0A%20%20return%20novel%3B%0A%7D%0A%0Afunction%20getVocabTerm%28id%29%20%7B%0A%20%20return%20vocabulary%5Bid-1%5D%3B%0A%7D%0A%0Afunction%20getVocabulary%28%29%20%7B%0A%20%20return%20vocabulary%3B%0A%7D%0A%0Avar%20%7BnodeInterface%2C%20nodeField%7D%20%3D%20nodeDefinitions%28%0A%20%20%28globalId%29%20%3D%3E%20%7B%0A%20%20%20%20var%20%7Btype%2C%20id%7D%20%3D%20fromGlobalId%28globalId%29%3B%0A%20%20%20%20if%20%28type%20%3D%3D%3D%20'Novel'%29%20%7B%0A%20%20%20%20%20%20return%20getNovel%28id%29%3B%0A%20%20%20%20%7D%20else%20if%20%28type%20%3D%3D%3D%20'VocabTerm'%29%20%7B%0A%20%20%20%20%20%20return%20getVocabTerm%28id%29%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20null%3B%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%28obj%29%20%3D%3E%20%7B%0A%20%20%20%20if%20%28obj%20instanceof%20Novel%29%20%7B%0A%20%20%20%20%20%20return%20NovelType%3B%0A%20%20%20%20%7D%20else%20if%20%28obj%20instanceof%20VocabTerm%29%20%7B%0A%20%20%20%20%20%20return%20VocabTermType%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20null%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%29%3B%0A%0Avar%20VocabTermType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'VocabTerm'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20globalIdField%28'VocabTerm'%29%2C%0A%20%20%20%20content%3A%20%7Btype%3A%20GraphQLString%7D%2C%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0Avar%20NovelType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Novel'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20globalIdField%28'Novel'%29%2C%0A%20%20%20%20vocabulary%3A%20%7B%0A%20%20%20%20%20%20type%3A%20vocabTermConnection%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28novel%2C%20args%29%20%3D%3E%20connectionFromArray%28getVocabulary%28%29%2C%20args%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0Avar%20%7BconnectionType%3A%20vocabTermConnection%7D%20%3D%0A%20%20connectionDefinitions%28%7Bname%3A%20'VocabTerm'%2C%20nodeType%3A%20VocabTermType%7D%29%3B%0A%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20node%3A%20nodeField%2C%0A%20%20%20%20%20%20novel%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20NovelType%2C%0A%20%20%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20novelId%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20type%3A%20new%20GraphQLNonNull%28GraphQLString%29%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20Here%20we%20define%20a%20resolver%20that%20returns%0A%20%20%20%20%20%20%20%20%2F%2F%20the%20data%20defined%20above.%20Were%20this%20schema%0A%20%20%20%20%20%20%20%20%2F%2F%20executing%20on%20the%20server%20side%2C%20you%20could%0A%20%20%20%20%20%20%20%20%2F%2F%20write%20a%20resolve%20method%20that%20fetches%0A%20%20%20%20%20%20%20%20%2F%2F%20live%20data%20from%20a%20database.%0A%20%20%20%20%20%20%20%20resolve%3A%20%28root%2C%20%7BnovelId%7D%29%20%3D%3E%20getNovel%28novelId%29%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%29%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A).

<S_CODE_TOKEN>

Any idea why the `vocabulary` field isn't wrapped in a `fragment on Novel { … }` @josephsavona?
",steveluscher,2016-03-06 10:34:06
655,2016-01-16 20:02:01,"@steveluscher Should we open up a new issue for this query building problem? I checked via the debugger and am pretty sure the refetching (in terms of building the fragment pointer object) is now successful.
",thebritican,2016-03-06 10:34:06
655,2016-01-27 20:49:43,"I just tried to write a second repro for this problem to rule out that there might be something peculiar with the vocab example, and I was still able to reproduce the problem. It seems that when we print the node query to refetch the connection, we fail to wrap it in the appropriate fragment. See [repro](http://facebook.github.io/relay/prototyping/playground.html#source=%2F**%0A%20*%20Copyright%202013-2015%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aclass%20VocabList%20extends%20React.Component%20%7B%0A%20%20componentDidMount%28%29%20%7B%0A%20%20%20%20var%20self%20%3D%20this%3B%0A%20%20%20%20setInterval%28function%28%29%20%7B%0A%20%20%20%20%20%20self.props.relay.forceFetch%28%29%3B%0A%20%20%20%20%7D%2C%201500%29%3B%0A%20%20%7D%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20%7B%20vocabulary%20%7D%20%3D%20this.props%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cul%3E%0A%20%20%20%20%20%20%20%20%7Bvocabulary.edges.map%28edge%20%3D%3E%20%28%0A%20%20%20%20%20%20%20%20%20%20%3Cli%3E%7Bedge.node.content%7D%3C%2Fli%3E%0A%20%20%20%20%20%20%20%20%29%29%7D%0A%20%20%20%20%20%20%3C%2Ful%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0A%0Aclass%20Novel%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20%7B%20novel%20%7D%20%3D%20this.props%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Ch2%3EWords%20you%20can%20use%20in%20this%20novel%3A%3C%2Fh2%3E%0A%20%20%20%20%20%20%20%20%3CVocabList%20vocabulary%3D%7Bnovel.vocabulary%7D%20%2F%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0Aclass%20HelloApp%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20%2F%2F%20Relay%20will%20materialize%20this%20prop%20based%20on%20the%0A%20%20%20%20%2F%2F%20result%20of%20the%20query%20in%20the%20next%20component.%0A%20%20%20%20return%20%3CNovel%20novel%3D%7Bthis.props.novel%7D%20%2F%3E%3B%0A%20%20%7D%0A%7D%0A%0AVocabList%20%3D%20Relay.createContainer%28VocabList%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20vocabulary%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20VocabTermConnection%20%7B%0A%20%20%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20content%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0ANovel%20%3D%20Relay.createContainer%28Novel%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20novel%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Novel%20%7B%0A%20%20%20%20%20%20%20%20vocabulary%28first%3A%2020%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BVocabList.getFragment%28'vocabulary'%29%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%2C%0A%7D%29%3B%0A%0AHelloApp%20%3D%20Relay.createContainer%28HelloApp%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20%2F%2F%20This%20GraphQL%20query%20executes%20against%0A%20%20%20%20%2F%2F%20the%20schema%20in%20the%20'schema'%20tab%20above.%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20To%20learn%20more%20about%20Relay.QL%2C%20visit%3A%0A%20%20%20%20%2F%2F%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fapi-reference-relay-ql.html%0A%20%20%20%20novel%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Novel%20%7B%0A%20%20%20%20%20%20%20%20%24%7BNovel.getFragment%28'novel'%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0Aclass%20HelloRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%20%20%2F%2F%20A%20unique%20name%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20%2F%2F%20Here%2C%20we%20compose%20your%20Relay%20container's%0A%20%20%20%20%2F%2F%20'greetings'%20fragment%20into%20the%20'greetings'%0A%20%20%20%20%2F%2F%20field%20at%20the%20root%20of%20the%20GraphQL%20schema.%0A%20%20%20%20novel%3A%20%28Component%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20NovelQuery%20%7B%0A%20%20%20%20%20%20%20%20novel%28novelId%3A%20%221%22%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'novel'%29%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BHelloApp%7D%0A%20%20%20%20route%3D%7Bnew%20HelloRoute%28%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B%0A&schema=%2F**%0A%20*%20Copyright%202013-2015%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aimport%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%20%20GraphQLNonNull%0A%7D%20from%20'graphql'%3B%0A%0Aimport%20%7B%0A%20%20connectionArgs%2C%0A%20%20connectionDefinitions%2C%0A%20%20connectionFromArray%2C%0A%20%20fromGlobalId%2C%0A%20%20globalIdField%2C%0A%20%20nodeDefinitions%2C%0A%7D%20from%20'graphql-relay'%3B%0A%0Aclass%20Novel%20extends%20Object%20%7B%7D%0Aclass%20VocabTerm%20extends%20Object%20%7B%7D%0Avar%20novel%20%3D%20new%20Novel%28%29%3B%0Anovel.id%20%3D%20'1'%3B%0A%0Avar%20vocabulary%20%3D%20%5B%5D%3B%0A%0A%28function%28%29%20%7B%0A%20%20var%20vocabTerm1%20%3D%20new%20VocabTerm%28%29%3B%0A%20%20vocabTerm1.id%20%3D%20'1'%3B%0A%20%20vocabTerm1.content%20%3D%20%22hello%22%3B%0A%20%20vocabulary.push%28vocabTerm1%29%3B%0A%20%20var%20vocabTerm2%20%3D%20new%20VocabTerm%28%29%3B%0A%20%20vocabTerm2.id%20%3D%20'2'%3B%0A%20%20vocabTerm2.content%20%3D%20%22world%22%3B%0A%20%20vocabulary.push%28vocabTerm2%29%3B%0A%7D%29%28%29%3B%0A%0Afunction%20getNovel%28id%29%20%7B%0A%20%20return%20novel%3B%0A%7D%0A%0Afunction%20getVocabTerm%28id%29%20%7B%0A%20%20return%20vocabulary%5Bid-1%5D%3B%0A%7D%0A%0Afunction%20getVocabulary%28%29%20%7B%0A%20%20return%20vocabulary%3B%0A%7D%0A%0Avar%20%7BnodeInterface%2C%20nodeField%7D%20%3D%20nodeDefinitions%28%0A%20%20%28globalId%29%20%3D%3E%20%7B%0A%20%20%20%20var%20%7Btype%2C%20id%7D%20%3D%20fromGlobalId%28globalId%29%3B%0A%20%20%20%20if%20%28type%20%3D%3D%3D%20'Novel'%29%20%7B%0A%20%20%20%20%20%20return%20getNovel%28id%29%3B%0A%20%20%20%20%7D%20else%20if%20%28type%20%3D%3D%3D%20'VocabTerm'%29%20%7B%0A%20%20%20%20%20%20return%20getVocabTerm%28id%29%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20null%3B%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%28obj%29%20%3D%3E%20%7B%0A%20%20%20%20if%20%28obj%20instanceof%20Novel%29%20%7B%0A%20%20%20%20%20%20return%20NovelType%3B%0A%20%20%20%20%7D%20else%20if%20%28obj%20instanceof%20VocabTerm%29%20%7B%0A%20%20%20%20%20%20return%20VocabTermType%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20null%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%29%3B%0A%0Avar%20VocabTermType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'VocabTerm'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20globalIdField%28'VocabTerm'%29%2C%0A%20%20%20%20content%3A%20%7Btype%3A%20GraphQLString%7D%2C%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0Avar%20NovelType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Novel'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20globalIdField%28'Novel'%29%2C%0A%20%20%20%20vocabulary%3A%20%7B%0A%20%20%20%20%20%20type%3A%20vocabTermConnection%2C%0A%20%20%20%20%20%20args%3A%20connectionArgs%2C%0A%20%20%20%20%20%20resolve%3A%20%28novel%2C%20args%29%20%3D%3E%20connectionFromArray%28getVocabulary%28%29%2C%20args%29%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0Avar%20%7BconnectionType%3A%20vocabTermConnection%7D%20%3D%0A%20%20connectionDefinitions%28%7Bname%3A%20'VocabTerm'%2C%20nodeType%3A%20VocabTermType%7D%29%3B%0A%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20node%3A%20nodeField%2C%0A%20%20%20%20%20%20novel%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20NovelType%2C%0A%20%20%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20novelId%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20type%3A%20new%20GraphQLNonNull%28GraphQLString%29%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20Here%20we%20define%20a%20resolver%20that%20returns%0A%20%20%20%20%20%20%20%20%2F%2F%20the%20data%20defined%20above.%20Were%20this%20schema%0A%20%20%20%20%20%20%20%20%2F%2F%20executing%20on%20the%20server%20side%2C%20you%20could%0A%20%20%20%20%20%20%20%20%2F%2F%20write%20a%20resolve%20method%20that%20fetches%0A%20%20%20%20%20%20%20%20%2F%2F%20live%20data%20from%20a%20database.%0A%20%20%20%20%20%20%20%20resolve%3A%20%28root%2C%20%7BnovelId%7D%29%20%3D%3E%20getNovel%28novelId%29%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%29%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A).
",steveluscher,2016-03-06 10:34:06
655,2016-01-27 21:22:59,"Thanks for the repro, I'll look into this more.
",josephsavona,2016-03-06 10:34:06
655,2016-03-06 05:26:08,"Have you had any luck with this @josephsavona?
",thebritican,2016-03-06 10:34:06
655,2016-03-06 10:34:06,"Oops, forgot to follow up here. This is fixed as of 0.7.1 - fix was in https://github.com/facebook/relay/commit/132605eef3ec93891ddb194952c7708ef6c5b605
",josephsavona,2016-03-06 10:34:06
654,2015-12-06 04:44:28,"Hello,

This is more of an information request / check of sanity.

I'm toying around with making a custom network layer to modify / split queries.  The problem I'm running into is that the `RelayNetworkLayer` interface doesn't support modifying the `RelayQueryRequest`.  The return value for `RelayNetworkLayer#sendQueries` doesn't seem to be used for anything internally:

https://github.com/facebook/relay/blob/02f2a3b0ba1a36d1cdcead965d2313338ac71291/src/network/fetchRelayQuery.js#L50

I can still make the custom network layer, the downside being that if I break a query into pieces I can only resolve the entire original `RelayQueryRequest` at once and would need to merge the responses.

The other option would be to call `RelayStoreData#handleQueryPayload` directly and incrementally and then resolve the original `RelayQueryRequest` when all sub queries have been completed.  Does this sound sane or insane?

It doesn't seem really feasible to refactor `RelayNetworkLayer` to return new `RelayQueryRequest`'s since it puts them into the query tracker before calling the network layer (plus they network layer is called via `setImmediate`).

That said, `RelayQueryNode#createNode` and `RelayQueryNode#clone` are so far making it easy screw around with the query data structure.
",eyston,2015-12-07 01:28:58
654,2015-12-07 01:08:30,"> the RelayNetworkLayer interface doesn't support modifying the RelayQueryRequest

This is intentional in order to keep the API surface area small, and allow faster iteration on Relay internals. In particular, allowing users or network layers to modify the query would require us to document and be careful to support the `RelayQuery` API. We're constantly iterating on this API and are not yet at a point where can support it as public API. 

That said, it's easy to imagine how this could work in the future: RelayQueryRequest would be an observable subject, which allows multiple values to be yielded, instead of a deferred which only allows a single value. The network layer could then resolve pairs of query & reponses before closing the request to indicate all data was fetched. 

Before we consider that, though, what is your use case? It may very well be something we could support in the core. 
",josephsavona,2015-12-07 01:28:58
654,2015-12-07 01:28:58,"I was seeing if local data could be implemented via a Network Layer (inspired by the reactjs meetup talk by @steveluscher -- the network layer was a common answer on how to extend Relay).  This will eventually be done as part of #114, so I'll close this with your answer :).

The idea was having a composite network layer where a query is split and routed to different network layers -- one of which could be local (e.g. https://github.com/relay-tools/relay-local-schema).  This is easy for top level fields, but is proving ridiculous if you allow arbitrary mixing ... I'm ending up post-walking the query and building up a queue of queries with each entry of the queue an array of queries capable of being done in parallel.

<S_CODE_TOKEN>

default network layer:

<S_CODE_TOKEN>

local network layer:

<S_CODE_TOKEN>

And then if each draft had `author` it would go back to the default network layer per draft (but could be done in parallel):

<S_CODE_TOKEN>

So basically -- a terrible idea it is turning out (ps. this doesn't work at all).  Even if this did work an unfortunate thing is that you need the entire local schema on the device at once (vs having the schema downloaded incrementally attached to components).

thanks!
",eyston,2015-12-07 01:28:58
653,2015-12-06 02:26:22,"Repro:
1. Load the TodoMVC example
2. Create a new todo

<S_CODE_TOKEN>

Should we add `__typename` as a requisite field everywhere for mutation queries?
",steveluscher,2015-12-07 00:27:39
653,2015-12-06 05:35:24,"We should be already adding `__typename` wherever there is an abstract type. I can look into this. 
",josephsavona,2015-12-07 00:27:39
653,2015-12-07 00:27:39,"closing as a duplicate of #474.
",josephsavona,2015-12-07 00:27:39
652,2015-12-05 11:41:39,"Is there a Relay construct analogous to Mongoose QueryStreams (http://mongoosejs.com/docs/2.7.x/docs/querystream.html) with Relay? i.e. rather than polling the GraphQL endpoint, perhaps subscribe to a QueryStream over web-sockets into the GraphQL server?
1. I think this would fit nicely with GraphQL subscriptions
2. Being able to play / pause / close / open streams for queries would be very useful - i.e. you would get the benefits of observables (ability to cancel a promise / unsubscribe aka close a queryStream) without using RxJS
",zuhair-naqvi,2015-12-06 19:17:48
652,2015-12-05 18:21:23,"Subscriptions are designed as a sort of declarative analogue to imperative stream mechanisms (querying data inside a stream callback could cause the n+1 query problem because the streams aren't statically conposable).

What specific functionality about streams would you want separate from the subscriptions API? (see the issue for this). 
",josephsavona,2015-12-06 19:17:48
652,2015-12-06 10:39:22,"The usecase is push messaging, if the app is primarily event driven, you don't want to be constantly polling the graphql server for updates. 

I see DiscordApp which apparently is built on Relay uses websockets 
<img width=""1436"" alt=""screen shot 2015-12-06 at 9 37 00 pm"" src=""https://cloud.githubusercontent.com/assets/262722/11612917/a58caaca-9c61-11e5-8e16-149dcd466144.png"">

Any ideas on a canonical way to achieve this?
",zuhair-naqvi,2015-12-06 19:17:48
652,2015-12-06 19:17:48,"Just checking. This is exactly the use-case that GraphQL Subscriptions are meant to address. This is still an active area of exploration, and we're tracking progress at #541.
",josephsavona,2015-12-06 19:17:48
652,2015-12-06 23:31:01,"Thanks I'll follow the issue.. PS did some digging found this https://gist.github.com/ngthorg/21a986962228f53a3ec5 .. your thoughts?
",zuhair-naqvi,2015-12-06 19:17:48
652,2015-12-07 00:11:18,"We've documented our thoughts on subscriptions pretty extensively in a [dedicated blog post](http://graphql.org/blog/subscriptions-in-graphql-and-relay/) :-)
",josephsavona,2015-12-06 19:17:48
651,2015-12-04 22:53:10,"I want to create a server mutation that updates a currently authorized user without passing userId as an input argument: `mutation { updateUser(input: {name: ""John""}) }`.
This approach should highly simplify permission checking.

But I have problem with this on the client side: `FIELDS_CHANGE` requires `dataID` to apply changes to the client store.
Is it possible to remove `id` from the mutations but still have store updates?
",vslinko,2016-01-10 20:45:44
651,2016-01-10 20:40:03,"@vslinko Do you mean that you don't want to pass the userId as an input argument (in the GraphQL sense) or as an argument to the mutation?

The only requirement is having the ID passed as a prop to the mutation. If you can pass it as a _mutation prop_, you can reference it with e.g. `this.props.user_id` _without_ including it in `getVariables()` and passing it as a GraphQL input argument.
",devknoll,2016-01-10 20:45:44
651,2016-01-10 20:45:44,"Hmm. It makes sense. Thank you! :smile: 
",vslinko,2016-01-10 20:45:44
650,2015-12-04 21:11:27,"New limits were imposed on the size of a `GraphQLInt`. While we figure out what to do about this, this pull request will ensure that the examples keep working.
",steveluscher,2015-12-04 21:45:29
650,2015-12-04 21:12:41,"Change introduced here: https://github.com/graphql/graphql-js/commit/06f97b67491f0215df7536aac50361bd90d5097d#diff-87c5e74dd1f7d923143e0eee611f598eR19
",steveluscher,2015-12-04 21:45:29
650,2015-12-05 15:01:55,"Are you thinking of modifying how the connection arguments are modelled, or just trying to sort out how to update the examples?
",taion,2015-12-04 21:45:29
650,2015-12-05 20:33:03,"We're trying to decide whether to change the connection argument types from `GraphQLInt`s to a custom `SuperReallyReallyBigInt` type, or whether to just modify the examples to fetch `(first: ${Math.pow(2, 32) - 1)})`. The former is what it is, and the latter will break anyone who's been employing the `(first: ${Math.MAX_SAFE_INTEGER})` pattern.
",steveluscher,2015-12-04 21:45:29
650,2015-12-05 20:49:41,"That makes sense - is there no way to make this be implementation-specific though? Java has gotten away with 32-bit array indices for over a decade now - to the extent that there is a formal `GraphQLInt` type, it's not a bad default for this sort of thing, rather than forcing everyone to use a non-native int type. `int64` is un-natural in JS, but `int53` is un-natural _everywhere_.

I've actually switched all of my code to the above (but as `-1 >>> 1` because I hate readable code), and it wasn't awful.
",taion,2015-12-04 21:45:29
650,2015-12-05 21:40:40,"It kind of already is implementation specific. `graphql-relay-js` happens to use `GraphQLInt` wholesale for connection arguments ([link](https://github.com/graphql/graphql-relay-js/blob/master/src/connection/connection.js#L25-L49)) but another implementation (Ruby? Python?) could make a different choice. Also, when crafting your schema, you could choose not to use the `graphql-relay-js` helpers, and define connections in your own way.

> because I hate readable code

LOL.
",steveluscher,2015-12-04 21:45:29
650,2015-12-05 21:51:53,"Oh, right - I see. Relay itself doesn't care, so it's just a `graphql-relay-js` question? That makes sense. Thanks!
",taion,2015-12-04 21:45:29
649,2015-12-04 20:34:09,"@facebook-github-bot import
",steveluscher,2015-12-04 22:15:32
649,2015-12-05 14:53:47,"Does the reversion mean that we should hold off on upgrading to 0.6.0 for now?
",taion,2015-12-04 22:15:32
649,2015-12-05 20:29:23,"Nope! It was auto-reverted because of some Facebook-internal cache nonsense. I reapplied the commit this morning!
",steveluscher,2015-12-04 22:15:32
649,2015-12-06 19:09:01,"Updated [babel-relay-plugin-loader](https://github.com/BerndWessels/babel-relay-plugin-loader/commit/f68feb16b78dbbb83f1c8e8661b9c71d6949385c) to 0.6.0 too.
Cheers
Bernd
",BerndWessels,2015-12-04 22:15:32
649,2015-12-06 22:48:23,"Love it! :heart: 
",steveluscher,2015-12-04 22:15:32
648,2015-12-04 20:31:11,,steveluscher,2015-12-04 22:10:26
648,2015-12-04 20:31:39,"@facebook-github-bot import
",steveluscher,2015-12-04 22:10:26
648,2015-12-04 20:37:45,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1700944890143164/int_phab to review.
",facebook-github-bot,2015-12-04 22:10:26
647,2015-12-04 14:32:44,"I noticed new `@relay(pattern: true)` in change log, but can't figure out from description nor tests what exactly it does and when I should use it when writing _fatQueries_.

Some example would be very helpful.

Thanks.
",jardakotesovec,2016-02-08 22:57:22
647,2015-12-04 18:10:32,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2016-02-08 22:57:22
647,2015-12-05 09:31:01,"http://stackoverflow.com/questions/34103296/purpose-of-relaypatterntrue

Sure, no problem. I tend to open such issues when I think that it likely will result in updating docs.
",jardakotesovec,2016-02-08 22:57:22
647,2015-12-05 23:12:29,"That's a good point! Renaming this issue and reopening.
",steveluscher,2016-02-08 22:57:22
647,2016-02-08 22:57:22,"This is important, so I'm going to fold it into #538, which is about overhauling the mutations API. (It will be easier to manage with the various interrelated mutations issues in a single place.)

Thanks once again for filing the report, @jardakotesovec!
",wincent,2016-02-08 22:57:22
646,2015-12-04 14:19:55,"This is follow up to #607 that adds posibility to rollback transaction with status `COMMIT_QUEUED`.

There is one more missing piece for this use case that I was not sure how to approach. 

To replace transaction that is queued I need to first check if its status is still `COMMIT_QUEUED`. Issue is that transaction is removed from pendingTransactionMap once its successfully committed. So I can easily end up with exception from `getStatus()`, which is bit overreaction :-).

So maybe return some status like `FINISHED` instead of throwing if its not in pending queue? I am of course very opened about naming :-).
",jardakotesovec,2016-03-08 09:35:29
646,2015-12-04 14:21:35,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-03-08 09:35:29
646,2015-12-04 14:34:05,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-03-08 09:35:29
646,2016-01-05 15:59:53,"Can I ask for feedback here?
",jardakotesovec,2016-03-08 09:35:29
646,2016-03-02 21:01:24,"@jardakotesovec Thanks for your contribution. I definitely want to see this fix land, but I have some feedback.
",yungsters,2016-03-08 09:35:29
646,2016-03-07 22:48:12,"@facebook-github-bot import
",yungsters,2016-03-08 09:35:29
646,2016-03-07 23:08:03,"@yungsters Thanks a lot. Do you have some thoughts on getStatus issue I mentioned in my initial comment?  Would be handy if getStatus would return something when its processed instead of exception.
",jardakotesovec,2016-03-08 09:35:29
646,2016-03-07 23:13:30,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/1684910181724203/int_phab) to review.
",facebook-github-bot,2016-03-08 09:35:29
646,2016-03-08 00:34:17,"> Do you have some thoughts on getStatus issue I mentioned in my initial comment? Would be handy if getStatus would return something when its processed instead of exception.

Indeed, but the difficultly is in differentiating between completed and invalid IDs. One solution would be to keep around the map of IDs that have been successfully committed, but that will continue to leak memory into the future.

Another solution would be to change `RelayMutationQueue` to expose methods on some instance that callers can obtain a reference for as long as needed.

@josephsavona Do you remember the reason for why we chose to use IDs instead of exposing a public form of the pending transaction (which would have all the methods like `getError`, `getStatus`, `commit`, etc.)?
",yungsters,2016-03-08 09:35:29
645,2015-12-03 21:04:53,"In the current docs it says we should use `prepareVariables` and `initialVariables` as `static` variables of a class.

That doesn't work and is misleading, so I updated it to display it the way it actually works: As keys of an Object.

i.e.: 

<S_CODE_TOKEN>

Hope it helps.
",gustavoguichard,2015-12-09 02:11:23
645,2015-12-08 23:20:25,"Thanks!

@facebook-github-bot import
",kassens,2015-12-09 02:11:23
645,2015-12-08 23:32:23,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/929879390394246/int_phab to review.
",facebook-github-bot,2015-12-09 02:11:23
644,2015-12-03 16:31:05,"Natively so without external polyfills. Especialy when it comes to IEs. I cannot find anywhere any definite info listing browsers and version supported.

The Relay playground (https://facebook.github.io/relay/prototyping/playground.html) seems to be working under IE11 and IE10, but under IE9 red background with Syntax Error is shown (no console errors).

Did you add some polyfills for the playground specifically (that aren't in the relay lib itself)?
",GrzegorzKaczan,2016-09-03 01:09:05
644,2016-05-23 15:44:38,"Currently Relay Playground is not working on IE10
",gabriel-laet,2016-09-03 01:09:05
644,2016-05-23 21:03:19,"Also, regarding IE10 - it's probably related to class inherintance, which can be fixed following Babel's instructions: https://babeljs.io/docs/usage/caveats/
",gabriel-laet,2016-09-03 01:09:05
644,2016-08-16 14:43:52,"Yeah, I guess adding these plugins would fix the issue - https://www.npmjs.com/package/babel-plugin-transform-es2015-classes and https://babeljs.io/docs/plugins/transform-class-properties/
",gauravtiwari,2016-09-03 01:09:05
644,2016-09-03 01:09:05,"Relay is being extensively rewritten and we plan to release a preview soon (for more info, see [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable)), and at that time we plan to entirely replace the existing documentation and playground. As such, I am going to close this and label it with ""relay 1"". We'd still welcome PRs adding better documentation or improving the site though, in the meantime, so feel free to go ahead and do that if you'd like and we'd be happy to review.
",wincent,2016-09-03 01:09:05
644,2016-09-12 15:33:45,"@wincent React has dropped IE8 support but still supports IE9, is Relay going to support IE9 as well? If it is then I have to mention that IE9 doesn't support FormData nor FileReader API which means the only way to send file from front-end is to send it using hidden iframe. So if Relay intends to support IE9 fully is it going to support fallback for IE9 to support file upload?

Second thing is CORS. If API and web application are not on the same domain IE9 will have CORS issue. In this case, if GraphQL server is on one domain and client side Relay app is on another does this mean Relay will still be able to support xDomain object workarounds to support IE9 CORS? This problem was somewhat fixed for our Angular apps using https://github.com/jpillora/xdomain module.
",niksajanjic,2016-09-03 01:09:05
644,2016-09-13 01:27:55,"We're not testing Relay 2 on IE9 at this time (in fact, all of our testing at the moment is in the context of React Native), so it is possible but not likely that we will support IE 9 out of the box. We will be open to considering PRs though that add such support, when the time comes. For now though, focussing on getting Relay 2 out the door. 
",wincent,2016-09-03 01:09:05
643,2015-12-03 04:13:32,"This caused me trouble just now as I needed to query for some changes to a field a type implementing an interface.

This was an unexpected limitation—any plan to remove it?

Invariant at https://github.com/facebook/relay/blob/4e671a316bbb09dee0fcc14aa414f0d31076948f/src/traversal/intersectRelayQuery.js#L86

`Nodes in`patternNode`must be fields.`
",KyleAMathews,2015-12-03 05:31:25
643,2015-12-03 05:31:25,"We enabled fragments in fat queries in ca0afe134d29fc8c2dc046be5f91253aebdf8565 - will go out in 0.6.0 :-)
",josephsavona,2015-12-03 05:31:25
643,2015-12-03 17:08:25,"Haha :-) guess I can wait then. Thanks!
On Wed, Dec 2, 2015 at 9:31 PM Joseph Savona notifications@github.com
wrote:

> We enabled fragments in fat queries in ca0afe1
> https://github.com/facebook/relay/commit/ca0afe134d29fc8c2dc046be5f91253aebdf8565
> - will go out in 0.6.0 :-)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/643#issuecomment-161521663.
",KyleAMathews,2015-12-03 05:31:25
643,2015-12-03 17:19:07,"sure thing!
",josephsavona,2015-12-03 05:31:25
642,2015-12-02 03:26:05,"Currently each RANGE_ADD config only supports adding a single item to a connection. The server must return a single new edge, as opposed to a list of new edges. 

There will be times when a mutation would take a list of objects as input and hence it would be expected that the response payload contains list of newly created edges. RANGE_ADD should check if an array of new edges and append/prepend all of them. 

The alternative right now to achieve something like this is to use FIELDS_CHANGE to update the complete parent node but that might be a costly operation.
",kaychaks,2016-09-03 01:11:16
642,2015-12-02 07:27:16,"Note: edited the original post for clarity. 
",josephsavona,2016-09-03 01:11:16
642,2016-07-19 23:34:57,"Just came across this as well.  I think the best way to support this would be to detect if `edgeNode` is a list and if so append that entire list. That way the outward facing API wouldn't need to change. 
",ekosz,2016-09-03 01:11:16
642,2016-09-03 01:11:16,"[Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable) is going to bring with it a new mutations API that is more expressive and imperative in nature. With it, users should be able to surpass limitations like this that were intrinsic to the old declarative API.

As we are unlikely to undertake further work on the Relay 1 mutations infrastructure, I'm going to close this with a ""relay 1"" label. We'd still be open to PRs with enhancements for the existing API, but we're probably not going to work on them directly.

Thanks for the input folks!
",wincent,2016-09-03 01:11:16
642,2017-02-13 03:20:23,@wincent is this currently achievable with Relay 2's GraphQLMutation today?,juhaelee,2016-09-03 01:11:16
642,2017-02-13 22:52:14,"`GraphQLMutation` isn't part of the new Relay core; it's already shipped in Relay. But it doesn't have build-in support for adding multiple items to a connection at once because it still needs to integrate with the pre-existing mutation configs (and those only have basic `RANGE_ADD` support).

The new Relay core will come with a default connection handler that knows how to cover the same basic cases (append/prepend) as the old implementation. Nobody has built an out-of-the-box abstraction for inserting multiple items at once because we haven't needed to do so internally yet, but it is certainly possible to implement something that would meet this use case using the low-level primitives we have (we have, for example, an `insertEdgeAfter` function that could be called repeatedly).",wincent,2016-09-03 01:11:16
641,2015-12-02 00:00:59,"Hi

Can I have multiple instances of graphQLServers behind a single endpoint?

Basically what I try to understand is if the graphQLServer is stateless - so a relay client can make a query to server instance A, the next query to server instance B and so on.

So I want to start more and more graphQLServer instances when the demand rises.

All instances will be behind the same endpoint and will have the exact same code and connect to the exact same data sources like SQL and NOSQL databases.

I ask this especially because I haven't yet figured out how the ""real"" database ids persist and map to the relay GraphQLObjectType ids.
",BerndWessels,2015-12-02 02:10:59
641,2015-12-02 02:10:20,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",josephsavona,2015-12-02 02:10:59
640,2015-12-01 23:53:39,"Hello

I try to make sense of it but can't figure it out.

In all examples I see that relay types use `id: globalIdField('type')`.

But how do I actually handle objects from a SQL database that have their own database ID?

For example:
I have `users` in a `user` table with `id` as primary key in a SQL database.
I know how to query my SQL database and make updates.
Now I want the relay graphql server to serve and mutate these users.
But I don't know how to deal with the 'id'.

Can anybody please provide a tiny example or code snippets?

Thank you so much
Bernd
",BerndWessels,2015-12-02 02:10:53
640,2015-12-02 02:10:43,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",josephsavona,2015-12-02 02:10:53
639,2015-12-01 16:19:02,"Fix for #615, proposed in #538

Makes `rangeBehaviors` a function that receives the connection arguments and returns one of `GraphQLMutatorConstants.RANGE_OPERATIONS`.

Will try and write a codemod for this during the week if I have time.

To check if the tracked connections where included in rangeBehaviors, the old behavior was to check if the connection's `rangeBehaviorKey` was in the `rangeBehaviors` map. Now that we don't have access to the `rangeBehaviors` map I've followed @josephsavona 's advice. I am fetching the connectionIds and calling `getRangeFilterCalls` on each one to get all the `rangeBehaviors` using the parentID.

Since these rangeBehaviors are not in the same format I've wrote a new function for connections called `getRangeBehaviors`. It is almost the same as `getRangeBehaviorKey` except it returns a list of the actual calls instead of a string representation. I can then make the correct check using these values.

Other thing I've added is a function `getObjectFromCalls` in `writeRelayUpdatePayload`. It transforms calls like this  `[{name: 'orderby', value: 'recent'}]` to an object like this `{orderby: 'recent'}` that can be passed to the `rangeBehaviors` function.

Rest is pretty straight forward I think, let me know what you think! 
",xuorig,2016-04-16 05:02:37
639,2016-04-14 15:52:03,"@xuorig This is great! We should definitely move in this direction. However a codemod seems to be non-trivial to write, and either way we'd ideally have at least one release that supports both the old and new behaviors. How about instead of immediately _replacing_ ``rangeBehaviors` with a function, we instead add the option of defining a `getRangeBehaviors` function. Only one or the other can be provided, and internally RelayMutationQuery can use `getRangeBehaviors` to construct the `rangeBehaviors` object.
",josephsavona,2016-04-16 05:02:37
639,2016-04-14 15:56:58,"That would make a lot of sense, I'm going to rebase and work on this in the next few days :)
",xuorig,2016-04-16 05:02:37
639,2016-04-16 05:02:37,"Closing in favor of #1054
",xuorig,2016-04-16 05:02:37
638,2015-12-01 06:07:12,"Hi,

Found my way to #484 and saw that `scripts/build-lib` should work. I'm running Node 4.x under Git bash on Windows, so I'm not sure it's typical, but I encountered the following error on Windows while running `npm install` in `examples/relay-treasurehunt` as it tried to build ../scripts/babel-relay-plugin.

Here's the short way to repro, at least under Git bash on Windows:

<S_CODE_TOKEN>

The fix for me was simple:

<S_CODE_TOKEN>

It's strange this was required, as under Git bash, at least, running `script/build-lib` at the prompt directly worked fine.

With this one-word addition, everything in relay-treasurehunt installs and builds successfully on my copy of Windows 10. (Assuming you've globally installed babel-cli or perhaps have paths configured correctly (I haven't checked), running `npm start` from the relay-treasurehunt folder works too, just visited http://localhost:3000/ and it all looks good.)
",LouisStAmour,2016-02-18 00:17:02
638,2015-12-01 06:09:44,"I now see that #484 suggests adding `./` as a prefix to the existing build command. I can confirm that all you get is `'.' is not recognized as an internal or external command, operable program or batch file.`
",LouisStAmour,2016-02-18 00:17:02
638,2015-12-06 04:13:40,"Sounds great! Would you like to send us a [pull request](https://github.com/facebook/relay/edit/master/scripts/babel-relay-plugin/package.json) that adds the `node` executable, as you've outlined above?
",steveluscher,2016-02-18 00:17:02
637,2015-11-30 18:54:00,"When connection payload contains null nodes, Relay will automatically re-request items after last non-null node in connection.

Say first 5 items requested and server returns following connection value:

<S_CODE_TOKEN>

In this case Relay will re-request items after last non-null node: `connectionField(first: 3, after: 'c')`. When there are no null nodes in payload - second request is not sent and everything works as expected.

Relay GraphQL spec doesn't forbid `node` to be null: https://facebook.github.io/relay/graphql/connections.htm#sec-Node

So I assume this is a bug?
",vladar,2016-05-10 15:58:11
637,2015-12-03 05:40:38,"> Relay will re-request items after the last non-null node

Do you mean the next time setVariables is called? 

Relay treats a null node as indicating the edge as deleted or unavailable. If we fetch five edges and three nodes are null, it means three more edges need to be fetched to fulfill the requested five. This request won't happen until the next setVariables call. 

This isn't a bug, but we may need to clarify in the connection spec how null connection nodes are treated. 
",josephsavona,2016-05-10 15:58:11
637,2015-12-03 06:14:20,"In my case it happens automatically on first render. Relay sends second query without setVariables call (but there is variable mapping between containers, so maybe props passing does it implicitly somehow). 

This also happens when number of edges returned is less than `first` value, but `hasNextPage` is `true`.

> This isn't a bug, but we may need to clarify in the connection spec how null connection nodes are treated

That would be helpful. And there are actually 3 different cases where behavior is unclear:
1. Number of edges returned is less than requested `first` value (but `hasNextPage` is true)
2. `null` values for some edges
3. `null` values for nodes (but `cursor` is defined)
",vladar,2016-05-10 15:58:11
637,2015-12-03 06:59:25,"Are you using react-router-relay or some other companion library that could be kicking off the re-request? Relay itself will not make an automatic follow-up request in this case. 

And yes, agree that we should document those three cases :+1:
",josephsavona,2016-05-10 15:58:11
637,2016-05-10 15:58:11,"Closing due to lack of activity - Relay doesn't automatically refetch in this case and it appears something else is kicking off the second query. 
",josephsavona,2016-05-10 15:58:11
636,2015-11-29 20:04:02,"Hello

As mentioned [here](https://github.com/facebook/relay/issues/635) by @josephsavona `It's important to upgrade react-relay and babel-relay-plugin together.`

To be able to do that and also to be able to update the [babel-relay-plugin-loader](https://github.com/BerndWessels/babel-relay-plugin-loader) we need the new `0.5.0` version of the `babel-relay-plugin` published to NPM.

Chan you please do that and let me know here? I will update the loader then right away.

Thank you
Bernd
",BerndWessels,2015-11-29 21:17:28
636,2015-11-29 21:17:26,"Please see my comment on the original issue: you're using an out of date version of react-relay. 
",josephsavona,2015-11-29 21:17:28
636,2015-11-30 12:22:04,"@josephsavona The issue is that `npm view babel-relay-plugin` shows that latest is still `0.4.1`, so the plugin releases haven't been published to npm for a while. (Also it seems that `react-relay` 0.5.0 package has peerDependency to babel-relay-plugin 0.4.x)
",plievone,2015-11-29 21:17:28
636,2015-11-30 16:35:36,"The OP was using react-relay 0.4.0 (out of date) with the current Babel-relay-plugin 0.4.x. 
",josephsavona,2015-11-29 21:17:28
636,2015-11-30 18:41:09,"@josephsavona Would be good if with the upcoming `react-relay` `0.6.0` release you could bump the `babel-relay-plugin` version to `0.6.0` too. Especially since they are tightly related anyway. That would stop all the confusion and lots of unnecessary git issues.
",BerndWessels,2015-11-29 21:17:28
636,2015-11-30 18:52:37,"@BerndWessels yup, that's the plan.
",josephsavona,2015-11-29 21:17:28
636,2015-11-30 21:08:20,"Ah ok, I thought they were in sync and that plugin version pump to 0.4.2 a couple of weeks ago was not published to npm in error. It is the in progress version then, ok.
",plievone,2015-11-29 21:17:28
635,2015-11-29 19:34:30,"Hello
I have a problem when upgrading from `babel-relay-plugin` `0.3.0` to `0.4.x`.

With `0.3.0` everything works just fine but with `0.4.x` I get this error in Chrome:

`Uncaught TypeError: Cannot read property 'length' of undefined`

relay.0.4.0.js in line 5394

`if (GraphQL.isQuery(node) && node.fragments.length === 0) {`

The problem is that the `node` object does not have a fragments property.

![relay040](https://cloud.githubusercontent.com/assets/1776695/11459451/aa8a02f0-973b-11e5-9a33-a269e50781bd.png)

You can easily reproduce it yourself with my [Git Repo](https://github.com/BerndWessels/react-webpack).

To reproduce just change from
`""babel-relay-plugin-loader"": ""^0.3.0""`
to
`""babel-relay-plugin-loader"": ""^0.4.0""`

then run
`npm install`
then in one console run
`npm run schema:serve`
and in another console run
`npm start`

Now you will see the error in the Chrome DevTools.

Thank you
Bernd
",BerndWessels,2015-11-29 19:52:34
635,2015-11-29 19:52:34,"@BerndWessels this has been fixed on master, and i believe the fix is also available in react-relay 0.5.0. It's important to upgrade react-relay and babel-relay-plugin together.
",josephsavona,2015-11-29 19:52:34
635,2015-11-29 19:54:56,"Thank you @josephsavona , but it looks like that there is no `babel-relay-plugin` with version `0.5.0` on npm.

Can you please publish it?

Thank you
Bernd
",BerndWessels,2015-11-29 19:52:34
635,2015-11-29 21:16:39,"@berndwessels the issue is that you are using a newer plugin version (0.4.0) with an out of date version of react-relay, 0.4.0. Please upgrade react-relay to 0.5.0. 
",josephsavona,2015-11-29 19:52:34
635,2015-11-29 21:25:41,"@josephsavona I am already referencing `react-relay` in version `0.5.0`:

<S_CODE_TOKEN>

But that doesn't solve the problem. The problem must be with the `babel-relay-plugin` itself?
",BerndWessels,2015-11-29 19:52:34
635,2015-11-29 21:37:25,"Hmm, the fix might not have made it into the latest versions. We'll release 0.6.0 soon, which will address this. 
",josephsavona,2015-11-29 19:52:34
635,2015-11-29 22:02:54,"@josephsavona OK, thank you. I will wait for that then and let you know if that fixes it.

I am still confused about if there needs to be a `babel-relay-plugin`  release in sync with the `react-relay` releases?

Thanks
Bernd
",BerndWessels,2015-11-29 19:52:34
635,2015-11-29 22:49:12,"We do release the two packages in parallel, but the version numbers aren't identical. It could definitely reduce confusion if we kept the minor version numbers in sync, though. 
",josephsavona,2015-11-29 19:52:34
635,2015-12-06 19:54:06,"Hi @josephsavona 
I upgraded to `0.6.0` but unfortunately the error is still present. Can you please have a look at it again if  it is really fixed?
Updated details can be found [here](https://github.com/facebook/relay/issues/656)
Thank you
Bernd
",BerndWessels,2015-11-29 19:52:34
634,2015-11-28 00:18:07,"Fragments can be empty if all non-generated fields are skipped due to `@include` or `@skip` directives - these shouldn't be printed.
",josephsavona,2015-11-28 04:35:31
633,2015-11-26 00:53:18,"Adds logic to `checkRelayQueryData` to skip looking at fragments whose types do not match the existing record.
",josephsavona,2015-12-07 17:51:00
633,2015-11-26 00:56:50,"@facebook-github-bot import
",josephsavona,2015-12-07 17:51:00
633,2015-11-26 00:59:04,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1075012995843393/int_phab to review.
",facebook-github-bot,2015-12-07 17:51:00
632,2015-11-25 23:48:01,"`RelayQueryWriter` no longer writes the results of unmatched fragments. However, `diffRelayQuery` still attempts to diff fragments that don't match the known type. The logic is:
- when diffing, we shouldn't look at fragments whose types don't match
- but we can't _remove_ those fragments, because if we end up refetching the node, it might be a different record whose type could match that fragment
- so we should treat non-matching fragments as requisite fields and only keep them if the node would otherwise be refetched
",josephsavona,2015-11-26 02:03:35
631,2015-11-24 20:31:43,"Hello Relay team. @leebyron sent me over. https://github.com/facebook/graphql/issues/124

Wondering if you have some perspective on Relay/React/GraphQL intelligent caching, state reconciliation, etc. Was wondering if you had any strategies, or have been testing during [2G Tuesdays](https://code.facebook.com/posts/1556407321275493/building-for-emerging-markets-the-story-behind-2g-tuesdays/).
",kevinSuttle,2015-11-24 22:28:48
631,2015-11-24 22:28:48,"We cover Relay's approach to caching in-depth as part of the [Thinking in GraphQL guide](https://facebook.github.io/relay/docs/thinking-in-graphql.html#client-caching). Typical approaches such as HTTP caching don't really apply with overlapping, hierarchical queries (as @leebyron mentioned, this is the same problem with caching the results of SQL queries). 

State reconciliation might refer to several things - what specifically do you mean? Note that Relay allows developers to optionally conform to the [Object Identification specification](https://facebook.github.io/relay/docs/graphql-object-identification.html#content), allowing Relay to automatically de-dupe results from queries and normalize response for you.

We're also working on caching data for offline use as mentioned on the [roadmap](https://github.com/facebook/relay/wiki/Roadmap). 

Re service workers, you could for example inject a [custom network layer](https://facebook.github.io/relay/docs/guides-network-layer.html#content) that was backed by a service worker.

I'm going to close this since there's no issue or bug to track, but feel free to continue the discussion here.
",josephsavona,2015-11-24 22:28:48
631,2015-11-24 22:30:10,"This is also covered in the [initial blog post](http://facebook.github.io/react/blog/2015/08/11/relay-technical-preview.html#whats-next):

> Finally, it's all too easy as developers to focus on those people with the newest devices and fastest internet connections. We're working to make it easier to build applications that are robust in the face of slow or intermittent connectivity.
",josephsavona,2015-11-24 22:28:48
631,2015-11-25 05:20:06,"Whoa, nice. First item on the wiki, too. Thanks @josephsavona! 
",kevinSuttle,2015-11-24 22:28:48
631,2016-03-24 17:26:14,"@leebyron does DataLoader factor into the strategy here? https://github.com/facebook/dataloader
",kevinSuttle,2015-11-24 22:28:48
631,2016-03-24 20:04:05,"DataLoader is useful for batching together many frequent requests that can be sent to a database's batch API call. DataLoader's caching is really nothing more than simple memoization, and it has no concept of ""offline"" since it's intended for a server environment.

Relay's cache model is far more sophisticated and offline support likely requires a different approach than DataLoader. 
",leebyron,2015-11-24 22:28:48
630,2015-11-24 19:28:23,"This module has been replaced with `QueryBuilder` (helpers) and `ConcreteQuery` (type definitions for the plain-object query representation).
",josephsavona,2015-11-30 18:35:29
629,2015-11-24 13:10:19,"In my case, I am attempting to modify an object with a large number of connections. These connections primarily represent different methods for querying on descendant objects. When I move descendant objects around, all of the connections become invalid. These connections are pageable and can be very large if the user has been doing multiple searches and the request size has been continually upped on a number of connections. If I set this up as a FatQuery, Relay will end up requesting an update to every single node of every connection of the ancestor object even though most of the connections won't be needed again.  What I really need to do is to be able to simple reset the store state of those ancestors.  I could accomplish this with a page load of course, but that would be resetting the entire store which contains a lot of information which I would rather not fetch again as well as being ugly.
",OverclockedTim,2015-11-24 16:20:29
629,2015-11-24 14:41:18,"So you'd need something like `RANGE_DELETE`, but only for connections with certain arguments?
",johanobergman,2015-11-24 16:20:29
629,2015-11-24 15:00:02,"No, not really, although that would be useful too.  RANGE_DELETE indicates that the items have been deleted.  I need to specify that I don't really know what has happened on the server.  In some connections, it may be deleted, in some added, and in some the ordering may have changed.  And I may only be interested in say the first:20 for a particular connection (or a connection with certain arguments) because that is all that is currently displaying to the user. 

If that first:20 on ConnectionA lets call it had been the only thing ever requested, then I could do a FIELDS_CHANGE on the parent node and the mutation request would include ConnectionA::first:20.  However, if I'd been mucking around for a while, playing with the data grid sorts and filters and different views, then the Relay store would have a number of different connections (or connections with arguments) and as such would issue and absolutely msasive update request for ConnectionA:first:2000, ConnectionB: first:500, ConnectionC['byTitle']::first:50, etc etc.  even if those components are not currently displayed.  What I need is a way to tell it to just toss all that info.  Or, possibly toss all of the info except what is currently being displayed by a component.
",OverclockedTim,2015-11-24 16:20:29
629,2015-11-24 16:20:29,"@OverclockedTim This is definitely something we plan to address, and we're tracking progress at #537.

From the summary there:

> [Relay's query tracking] causes a problem in larger apps that mutations must refetch all affected data, as opposed to only the affected data that is also being actively rendered.
",josephsavona,2015-11-24 16:20:29
628,2015-11-23 10:13:24,"There is a component `UserListWidget` with following container definition:

<S_CODE_TOKEN>

There is also parent component that needs to render connection of users as plain list. But following won't work:

<S_CODE_TOKEN>

It fails with error:

<S_CODE_TOKEN>

Changing `UserListWidget` to accept userConnection instead of plain list of users is not an option, because it is a generic component and other parent components will only provide lists of users, not connections.

So I guess there should be a way to treat connection as plain list of nodes somehow?
",vladar,2015-11-23 17:22:25
628,2015-11-23 17:22:10,"Thanks for your question! I have an answer for you, but we want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",josephsavona,2015-11-23 17:22:25
628,2015-11-23 17:42:22,"Posted at https://stackoverflow.com/questions/33877207/how-to-convert-relayjs-connection-to-plain-array
",vladar,2015-11-23 17:22:25
627,2015-11-22 23:28:02,"Simplifies the flattening/refragmenting of tracked queries and synthesized mutations, as well as addressing #596.
",josephsavona,2015-12-02 02:10:32
626,2015-11-22 16:25:08,"There is no good reason to call `diffRelayQueries` synchronously, it only needlessly block execution of other code (e.g. currently it blocks initial render of `RelayRenderer`). So, it have moved to the rest of the code inside task scheduler callback.

Also cleaned up some duplicate code.

API and behaviour have not changed.
",denvned,2016-03-02 20:54:37
626,2016-03-02 20:54:37,"This has been rebased and landed as 8058d21f6b9e33702124658d2c19a715027694b9. I apologize for not pulling it in through the typical import toolchain (because we were doing some internal maintenance on it when I was pulling this in).
",yungsters,2016-03-02 20:54:37
626,2016-03-11 16:22:41,"Thanks for the fix! This made a material impact in the responsiveness of some of our internal apps that use Relay with React Native - diffRelayQueries can sometimes take quite a while on complex apps running on slow Android phones, so it's really helpful to break it off into another async task.

Keep up the awesome work :)
",sahrens,2016-03-02 20:54:37
626,2016-03-11 16:59:28,"@sahrens Nice to know it was so helpful for you!
",denvned,2016-03-02 20:54:37
625,2015-11-22 06:59:07,"...to make sure `RelayRenderer` does not run queries during synchronous server-side rendering.

In the `RelayRenderer` tests, I had to replace `ShallowRenderer.render` with the traditional `ReactDOM.render`, because `ShallowRenderer.render` does not invoke some component lifecycle methods including `componentDidMount` that now run queries. But I did not change the logic of the tests, as **visible behaviour of `RelayRenderer` was fully retained.**

Added a test to check that `RelayRender` does not run queries on the server.

This PR is a forerunner of the PR that will make `RelayRenderer` isomorphic (see #589). That next PR will be pretty small and easily comprehensible, because this PR already did much of the necessary dirty work.
",denvned,2016-02-19 18:05:38
625,2015-12-01 15:04:49,"I would very much appreciate any feedback on this PR. My further work on [the server-side rendering PR](https://github.com/facebook/relay/issues/589#issuecomment-158766319) depends on it.
",denvned,2016-02-19 18:05:38
625,2015-12-06 04:49:11,"Sorry for the delay. Love how you've piped everything through `_buildState()`.

Can you talk for a moment about why you switched from the shallow renderer to the fully-fledged renderer? I can only guess that you wanted to use the same type of renderer between the DOM and the server tests, but I'd like to hear your reasoning before I pull this in.
",steveluscher,2016-02-19 18:05:38
625,2015-12-06 04:50:45,"Oh. Nevermind. You already explained why. I'll pull this in for a deeper review.

@facebook-github-bot import
",steveluscher,2016-02-19 18:05:38
625,2015-12-06 09:16:04,"@steveluscher Thanks for feedback!
Applied all of your corrections.
",denvned,2016-02-19 18:05:38
625,2015-12-08 22:55:05,"Dumb question: since `GraphQLQueryRunner` already [schedules fetches using the `RelayTaskScheduler`](https://github.com/facebook/relay/blob/master/src/legacy/store/GraphQLQueryRunner.js#L258), could we have prevented fetching in the server rendering case by simply injecting a noop scheduler?

<S_CODE_TOKEN>
",steveluscher,2016-02-19 18:05:38
625,2015-12-08 23:07:59,"> could we have prevented fetching in the server rendering case by simply injecting a noop scheduler?

talked offline, this would theoretically work but would leak memory (as the scheduled tasks built up in the queue)
",josephsavona,2016-02-19 18:05:38
625,2015-12-09 05:07:44,"Also we will still need to run queries on the server to prepare data before rendering, and injecting a noop scheduler might break it because `RelayTaskScheduler` is a global singleton currently, and there might be multiple requests in parallel.

There might also be an exotic cases like the user needs to simultaneously use both, traditional `ReactDOM.render`, and `ReactDOMServer.renderToString` in the browser, so he cannot inject a noop scheduler because it will break traditional render.

As I see it, injecting a scheduler is generally too hacky solution, and it is hard to tell what additional problems it might have. On the other hand, making `RelayRenderer` run queries after mount is pretty clear and predictable.
",denvned,2016-02-19 18:05:38
625,2016-02-17 18:41:07,"@denvned I recently committed f1373602073972ffa06854c676cf61f79c4fa3cc which introduces two new props to `RelayRenderer` — `onPrimeCache` and `onForceFetch` — that allow you to supply the behavior when a set of queries is to be fetched. If instead of reordering when queries are run, you simply supplied dummy functions into these props, would that solve your use case?
",yungsters,2016-02-19 18:05:38
625,2016-02-17 19:54:12,"@yungsters Actually, when upgrading [isomorphic-relay](https://github.com/denvned/isomorphic-relay/) to Relay 0.7, I tried to make use of these new props, but it didn't work out. Not running the queries on the server is only part of the deal, we also need to initialize the state with preloaded data before the first render, i.e. before mount. But if pass prepared ready state to `onReadyStateChange` callback before render, React throws an error because  `onReadyStateChange` calls `setState`, and React does not allow calling `setState` before mount.

So, to make these props useful for isomorphic rendering we probably have to allow calling `onReadyStateChange` callback synchronously, before render.
",denvned,2016-02-19 18:05:38
625,2016-02-17 20:24:32,"Another problem with `onPrimeCache` and `onForceFetch` and isomorphic rendering is that we need to use prepared data for the first render not only on the server, but also on the client, so we have to supply these props on the client also. But on the client the situation is more complex, because in addition to setting prepared state for initial render, we might also need to run actual queries in the case of `forceFetch`, or if some data is not available. In the end, it turns out that the implementation of the function to be passed as `onPrimeCache` and `onForceFetch` would probably be pretty hacky, complicated, and error prone. But I might be mistaken.
",denvned,2016-02-19 18:05:38
624,2015-11-22 04:15:38,"Does Relay support IE 8? I couldn't find a mention of it on the site anywhere, but I know React does (or did?)

In my testing with the Star Wars example, it is getting a stack overflow somewhere in React. It seems to be related to the `route` prop on the `Relay.RootContainer`. It gives `Warning: Failed propType: Function expected`, then the ""out of stack space"" error at app.js line 11918, character 15 (I'm not sure if this is useful due to webpack, but its in the finally block of the Transaction Mixin's perform method).

Stepping through it shows it is crashing somewhere in the validate prop methods when it is validating the `route` prop. I had trouble getting more details because IE8's developer tools are impossible to use.

EDIT:
Additionally, it seems that there is an infinite recursion where `RelayQueryNode.create` calls `createNode` which calls `RelayQueryNode.create` until it gets a stack overflow. This may be unrelated to the other issue, as it seems to happen when parsing the response from the server. It looks like on Chrome a completely different createNode function gets called. Really weird.
",DylanSale,2015-11-25 20:46:26
624,2015-11-23 19:41:48,"Same question here. Can we get Relay to support IE 8? We have React working with the polyfills, but can't seem to get Relay working... Is it a dead end, or some additional polyfills are needed?
",shalomvolchok,2015-11-25 20:46:26
624,2015-11-23 21:13:53,"Thanks for your question. Unfortunately, we are unable to provide support for IE8. It may be possible to get Relay working on IE8 by using polyfills or workarounds, but we can't make guarantees that future changes won't cause a regression.
",josephsavona,2015-11-25 20:46:26
624,2015-11-23 21:22:59,"Thanks for the reply. What is the lowest version you do support?

On Tue, 24 Nov 2015, 07:44 Joseph Savona notifications@github.com wrote:

> Thanks for your question. Unfortunately, we are unable to provide support
> for IE8. It may be possible to get Relay working on IE8 by using polyfills
> or workarounds, but we can't make guarantees that future changes won't
> cause a regression.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/624#issuecomment-159065825.
",DylanSale,2015-11-25 20:46:26
624,2015-11-25 16:26:09,"I was intrigued and got Star Wars example working in IE8 with a couple of changes:
- You can get rid of infinite recursion by renaming `createNode` in [RelayQuery.js](https://github.com/facebook/relay/blob/f7c61d8/src/query/RelayQuery.js#L1274). You can see the problem in built file, where [the other `createNode`](https://github.com/facebook/relay/blob/f7c61d8/src/query/RelayQuery.js#L338) has also a local function name `createNode` (to be displayed in stack traces), confusing IE8 scopes. @josephsavona You may want to rename the outer `createNode` helper to avoid confusion?
- You can use some IE8-compatible fetch polyfill instead of whatwg-fetch, such as `fetch-polyfill`, otherwise the data won't be available and only a blank page renders.

Haven't tested it further, but the example renders fine. There are proptype and contexttype validation warnings due to shims adding extra Symbol-related properties to `RelayPropTypes.QueryConfig`, and React shape validator doesn't check the hasOwnProperty. But they won't kill the page. There may well be other errors yet uncovered, though.
",plievone,2015-11-25 20:46:26
624,2015-11-25 17:38:57,"For now, we're happy to accept PRs for supporting IE9 and above.
",josephsavona,2015-11-25 20:46:26
623,2015-11-21 13:10:24,"Hey there!

Been playing around with GraphQL and wanted to try out relay, but can't get any of the examples to install.

Here's a gist containing the error and the output of the build log:

https://gist.github.com/jaredonline/df1f0c022aebe60764b0
",jaredonline,2015-11-25 20:47:26
623,2015-11-21 13:40:18,"Try running npm install separately on package root and scripts/babel-relay-plugin, then on examples. There are order issues.
",plievone,2015-11-25 20:47:26
623,2015-11-25 20:47:26,"Closing as @plievone's suggestion should solve this. 
",josephsavona,2015-11-25 20:47:26
622,2015-11-20 23:44:37,"graphql/language/schema was merged with graphql/language in graphql-js v0.4.3.
Also fixed needed `npm run update-schema` in root by adding `babel` as a devDependecy, which provides `node_modules/.bin/babel-node` executable. The changes in `babel-relay-plugin/lib/RelayQLAST.js` are perhaps due to differing babel helper versions. This version is built using a clean install. 
",plievone,2015-11-21 00:40:32
622,2015-11-21 00:13:31,"@facebook-github-bot import
",josephsavona,2015-11-21 00:40:32
622,2015-11-21 00:15:58,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/923271867726767/int_phab to review.
",facebook-github-bot,2015-11-21 00:40:32
622,2015-11-21 00:46:18,"@plievone thanks!!!!
",josephsavona,2015-11-21 00:40:32
622,2015-11-21 00:59:25,"Thanks and have a nice weekend
",plievone,2015-11-21 00:40:32
621,2015-11-20 15:55:05,"Addresses #618 - developers shouldn't have to write `__typename`s for optimistic records. `RelayQueryWriter` already traverses _any_ fragment when handling optimistic payloads, and the other place where we would use the type - the cache writer - doesn't receive optimistic writes either.
",josephsavona,2015-11-23 17:50:32
621,2015-11-20 16:03:32,"@facebook-github-bot import
",josephsavona,2015-11-23 17:50:32
621,2015-11-20 16:15:18,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/182859302062329/int_phab to review.
",facebook-github-bot,2015-11-23 17:50:32
621,2015-11-20 17:05:45,"Thanks for the quick fix @josephsavona !
",Globegitter,2015-11-23 17:50:32
620,2015-11-20 15:52:51,"I am getting following error. when trying to run a mutation via graphiql

<S_CODE_TOKEN>

Here is the mutation definition

<S_CODE_TOKEN>
",ansarizafar,2015-11-29 18:47:10
620,2015-11-20 16:04:16,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",josephsavona,2015-11-29 18:47:10
620,2015-11-20 16:49:39,"@josephsavona I have posted this question to Stack Overflow. Here is the link

https://stackoverflow.com/questions/33831911/cannot-set-property-clientmutationid-of-undefined
",ansarizafar,2015-11-29 18:47:10
620,2015-11-29 18:47:10,"thanks for posting on SO, let's continue discussion there.
",josephsavona,2015-11-29 18:47:10
619,2015-11-20 15:48:53,,josephsavona,2015-11-23 17:50:31
619,2015-11-20 17:49:21,"@facebook-github-bot import
",josephsavona,2015-11-23 17:50:31
619,2015-11-20 17:59:46,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/576406512506606/int_phab to review.
",facebook-github-bot,2015-11-23 17:50:31
618,2015-11-20 14:51:48,"I have a mutation which returns an optimistic response as follows:

<S_CODE_TOKEN>

Which leads to: `'RelayQueryWriter: Could not find a type name for record`%s`.',` here: 'RelayQueryWriter: Could not find a type name for record `%s`.',

When debugging I can see that the passed-in payload does not have a `__typename`. If I set it manually to `Customer` in the `getOptimisticResponse` the warning disappears.

I am using a version from master with the commit id `090b2b1c1228fb3337d8af68648b34150da682e6`, so from about 2 days ago,
",Globegitter,2015-11-23 17:59:44
618,2015-11-20 15:55:28,"@Globegitter thanks for filing this, see #621 for a fix
",josephsavona,2015-11-23 17:59:44
618,2015-11-23 17:59:44,"@Globegitter thanks again for bringing this up!
",josephsavona,2015-11-23 17:59:44
617,2015-11-20 06:12:16,"The problem was that variables of the implicit query fragment were not updated after query parameters had changed. The query produced by `buildRQL.Query` for an implicit definition was not equal to the query produced for an analogous explicit definition (see the added test).
",denvned,2015-12-14 20:21:10
617,2015-12-06 09:47:07,"@steveluscher, Applied your suggestion. Thanks!
",denvned,2015-12-14 20:21:10
616,2015-11-19 18:40:09,"I get this error since I've updated to 0.5.0. Seems like ReactDOM is undefined but I do have react-dom 0.14.3 installed too... Anybody has had this problem before ?
",xuorig,2015-11-23 00:50:43
616,2015-11-23 15:41:36,"@xuorig did you resolve this?
",josephsavona,2015-11-23 00:50:43
616,2015-11-23 15:55:44,"@josephsavona yes I forgot to add a script tag for react-dom :facepalm:
",xuorig,2015-11-23 00:50:43
616,2015-11-23 16:20:14,":+1: 
",josephsavona,2015-11-23 00:50:43
615,2015-11-19 18:28:26,"As mentioned by @johanobergman in #604 and similar to what @AndrewIngram [proposed](https://github.com/facebook/relay/issues/538#issuecomment-156396132) in #538, let's make `rangeBehaviors` a function that receives the connection arguments and returns one of `GraphQLMutatorConstants.RANGE_OPERATIONS`.

<S_CODE_TOKEN>

Add an appropriate deprecation warning to `RelayDeprecated`.

Bonus: write a [jscodeshift](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb#.pe5meqdiz) codemod that will mod this:

<S_CODE_TOKEN>

…to this:

<S_CODE_TOKEN>
",steveluscher,2016-05-10 15:56:49
615,2015-11-19 19:02:15,"Awesome, this will help a lot since I won't have to track all cached parameter combinations myself.

You could also pass the entire connection to that function and let the developer manually insert the record wherever he wants it. This would be a great deal more flexible than `append`, `prepend` and `remove` are (even though I don't have a use case for it myself right now).
",johanobergman,2016-05-10 15:56:49
615,2015-11-20 04:52:56,"Just wanted to chuck this in here, since it has been discussed a little before: https://github.com/facebook/relay/issues/293#issuecomment-139417086
",devknoll,2016-05-10 15:56:49
615,2015-11-20 10:04:17,"As mentioned in the related ticket, I'm still not convinced the mutation is the place to handle this. It feels like it could be defined in the actual query on the connection, or in the schema itself (as briefly discussed in the other ticket). If this doesn't make sense, it'd be good to have some insight as to why.
",AndrewIngram,2016-05-10 15:56:49
615,2015-11-25 00:36:07,"Questions about this issue:

First, since `rangeBehaviors` wont be an object anymore, these lines here wont work as expected. I'm not sure how they can be modified now that we don't have access to what rangeBehaviors will be used? https://github.com/facebook/relay/blob/master/src/mutation/RelayMutationQuery.js#L211-L219

Second question:
To be able to receive argument as an object like this:

<S_CODE_TOKEN>

It means we'll need to transform the RangeFilterCalls from this `[{name: 'orderby', value: 'recent}]` to this `{orderby: 'recent'}` before calling `config.rangeBehaviors`. Just checking I'm understanding this well.
",xuorig,2016-05-10 15:56:49
615,2015-11-29 18:55:53,"> It feels like [range configs] could be defined in the actual query on the connection

@AndrewIngram This would force developers to repeat the append/prepend logic everywhere that a connection was used. Furthermore, what would Relay do if two components disagreed? Whether to append/prepend/etc is really something known best by the implementor of the mutation; the logic belongs as close as possible to the mutation definition.

> , or in the schema itself

We're continuing to explore this option. There are lots of possibilities and we'd like to prove out an approach on the client first. The proposal here is a first step in that direction.
",josephsavona,2016-05-10 15:56:49
615,2015-11-29 19:06:03,"> First, since rangeBehaviors wont be an object anymore, these lines here wont work as expected.

@xuorig Good point. It's possible to list all combinations of fetched connection calls given the parent id of the connection. For example, given `viewer { friends(...) }`, if we know the `viewer` id then we can list out all the combinations of arguments on `friends` that have been fetched. That's available as [`RelayRecordStore#getConnectionIDsForField`](https://github.com/facebook/relay/blob/master/src/store/RelayRecordStore.js#L571-L595). That will give you a list of connection IDs which you can then use to call [`RelayRecordStore#getRangeFilterCalls`](https://github.com/facebook/relay/blob/master/src/store/RelayRecordStore.js#L611-L620). Together this should give you all the sets of calls needed to replace the check you mentioned in [RelayMutationQuery](https://github.com/facebook/relay/blob/master/src/mutation/RelayMutationQuery.js#L211).

> To be able to receive argument as an object like this: ... It means we'll need to transform the RangeFilterCalls

Yup, we'll have to map the array into an object for convenience.
",josephsavona,2016-05-10 15:56:49
615,2015-11-30 16:06:25,"@josephsavona good to know! 

I'm trying to get the recordStore by requiring `RelayStoreData` and getting the record store like this `RelayStoreData.getDefaultInstance().getRecordStore()`. It works in tests but somehow when I test it with the todo example, `RelayStoreData` is an empty object and `getDefaultInstance` is `undefined`... Any idea what's going on ?
",xuorig,2016-05-10 15:56:49
615,2015-11-30 16:41:08,"@xuorig are you trying to require `RelayStoreData` from outside of Relay? If so, you'll have to use `require('react-relay/path/to/RelaySoreData')` - individual files from npm packages aren't publicly available via `require('<name>')` so you have to require by path.
",josephsavona,2016-05-10 15:56:49
615,2015-11-30 16:42:42,"@josephsavona Not even, I'm requiring it inside `RelayMutationQuery`, the require throws no errors either, just returns an empty object!
",xuorig,2016-05-10 15:56:49
615,2015-11-30 17:31:40,"Ah - it could also be a circular dependency, you may have to require the store somewhere else (`RelayMutationQueue` is passed an instance of `RelayStoreData`, for example).
",josephsavona,2016-05-10 15:56:49
615,2015-12-03 14:02:42,"For me the larger issue is regarding whether append/prepend is enough. For use cases I have right now, it's not. A function to get a sorting key is the obvious solution. But this means you'd also need to apply that function to everything in the connection.

I'm a little uneasy about the solution proposed in this issue, mainly because it feels like changing the rangeBehaviours API in a way that'll have to be changed yet again if we need to support sorting (which obviously I think we do).

Of course, there may already be a way of handling adding nodes to arbitrary positions that i'm not aware of.
",AndrewIngram,2016-05-10 15:56:49
615,2015-12-03 14:05:31,"Even with the proposed solution, do we not also need access to the edge and node being added? Depending on arguments passed to the mutation, or backend behaviour, we may not know whether to append/prepend/ignore without looking at the node itself.
",AndrewIngram,2016-05-10 15:56:49
615,2016-05-10 15:56:49,"@xuorig implemented this in 56e52d3
",josephsavona,2016-05-10 15:56:49
615,2016-06-15 20:37:05,"This doesn't work for arguments that have a non string value, like boolean.
",brysgo,2016-05-10 15:56:49
615,2016-06-15 21:40:55,"@brysgo Good catch, @xuorig has put up #1216 to address this.
",josephsavona,2016-05-10 15:56:49
614,2015-11-19 17:03:23,"First, memoization of `toGraphQL` is no longer requiered. Second, `RelayQuery.Node` is [supposed](https://github.com/facebook/relay/blob/v0.5.0/src/query/RelayQuery.js#L92) to be immutable, while memoization of the result of `toGraphQL` in the `__concreteNode__` property of `RelayQuery.Node` breaks immutability, as, for example, `RelayQuery.Fragmet.getConcreteFragmentID()` returns another ID after the memoization. That sometimes causes problems.
",denvned,2015-12-07 23:35:34
614,2015-12-06 04:59:14,"Thanks for this! Is there a reason that you chose to keep the getter function, rather than to go straight for `__concreteNode__` in all cases?
",steveluscher,2015-12-07 23:35:34
614,2015-12-06 05:39:16,"A getter function is more consistent with existing `getRoute` and `getVariables` methods - also mediating access with a method gives us option value at virtually no cost. 
",josephsavona,2015-12-07 23:35:34
614,2015-12-06 05:46:58,":+1:
",steveluscher,2015-12-07 23:35:34
613,2015-11-19 16:03:12,"Relay is BSD licensed but for some reason all the example files are marked with following:

<S_CODE_TOKEN>

This more restrictive licence seems to clash with the more permissive terms of the BSD and makes it a little weird to use the examples as a base to build on.

Any thoughts on moving these examples to BSD?
",sleepycat,2015-11-20 03:23:54
613,2015-11-19 16:42:28,"This is the standard license that we apply to all such sample code across
our projects, as recommended by our legal peeps. I don't have enough legal
knowledge to explain exactly why.
On Thu, Nov 19, 2015 at 8:03 AM Mike Williamson notifications@github.com
wrote:

> Relay is BSD licensed but for some reason all the example files are marked
> with following:
> 
> /**
> - This file provided by Facebook is for non-commercial testing and evaluation
> - purposes only.  Facebook reserves all rights not expressly granted.
>   *
> - THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
> - IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
> - FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
> - FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
> - ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
> - CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
>   */
> 
> This more restrictive licence seems to clash with the more permissive
> terms of the BSD and makes it a little weird to use the examples as a base
> to build on.
> 
> Any thoughts on moving these examples to BSD?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/613.
",wincent,2015-11-20 03:23:54
613,2015-11-19 17:16:37,"Example code is obviously still code, and if someone (me for instance) is considering taking one of those examples, and cleaning it up to use as a starting point similar to the relay-starter-kit... well, those restrictions make it seem like people won't be able to use that starting point for commercial projects.

Obviously you all care about making this all accessible, and easy for anyone to work with and build on, hence the development here on Github and the BSD licence. Having the example code held up as somehow different is kinda weird.

If you are able to flag down one of the ""legal peeps"", I'd love to understand the thinking behind that.
",sleepycat,2015-11-20 03:23:54
613,2015-11-20 03:23:54,"Interesting discussion, but we're way out of our depth here as mere devs. Before someone says something they'll regret, I'm going to jump at the chance to close this issue!
",steveluscher,2015-11-20 03:23:54
612,2015-11-19 11:18:27,"I want to test some of the last features on the master-branch and be able to install relay e.g. via `npm install 'https://github.com/facebook/relay#090b2b1c1228fb3337d8af68648b34150da682e6'.

This currently leads to an almost empty react-relay folder, which just has as `node_modules` folder as well as `LICENSE`, `PATENTS`, etc.
",Globegitter,2015-11-20 03:46:06
612,2015-11-20 01:24:34,"In the meantime, can you achieve this if you:
1. `git clone git@github.com:facebook/relay.git`
2. `(cd relay && npm link)`
3. `(cd yourproject && npm install react-relay)`
",steveluscher,2015-11-20 03:46:06
611,2015-11-18 09:29:57,"In my application, a tabular Relay container uses the following fragment to show information on a number of items:

<S_CODE_TOKEN>

When clicking on an item, the application unmounts that container and mounts another one that allows the user to edit and delete an item:

<S_CODE_TOKEN>

When the user deletes the item, the `DeletePipeMutation` is run, which has the following fat query:

<S_CODE_TOKEN>

However, Relay retrieves only very limited information about the _remaining_ items, which may have changed (as is the case):

<S_CODE_TOKEN>

Note that no field from the items (pipes) is re-fetched. I would have expected the intersection of the fat query above and Relay's internal tracked query to include the cached item fields (`id`, `idx`, `name`...). I can work around this problem by writing a more complete fat query, but this seems not in line with the expected _intersection_ behaviour:

<S_CODE_TOKEN>

Might this be a bug?
",guigrpa,2015-11-19 18:48:03
611,2015-11-18 18:31:55,"The issue is that Relay doesn't know that the `viewer { pipes }` in your fat query corresponds to the same one that your container is using. You can add a `FIELDS_CHANGE` config for the `viewer` field to get the behavior you're looking for.
",devknoll,2015-11-19 18:48:03
611,2015-11-18 23:45:47,"Right. We'll need to know what node `viewer { pipes}` maps to since field in mutation doesn't always match up with root field names. What's in the `getConfig` of your mutation?
",yuzhi,2015-11-19 18:48:03
611,2015-11-19 06:28:32,"@devknoll With the additional `FIELDS_CHANGE` config, the unexpected behaviour indeed disappears (thanks!). @yuzhi Here is the complete `getConfigs()`:

<S_CODE_TOKEN>

However, two things remain unclear to me:
1. Relay _does_ already have the information on the `viewer`'s ID (from the `NODE_DELETE` config). It could already use this information to perform a more complete intersection.
2. Why did the workaround work? I mean, this fat query without the additional `FIELDS_CHANGE` config:

<S_CODE_TOKEN>
",guigrpa,2015-11-19 18:48:03
611,2015-11-19 06:52:28,"I'll try to answer myself: if I only specify a `NODE_DELETE` config and the fat query does not expand the `pipes` field, Relay understands that the possible result of this mutation is limited to the deletion and does not affect other connection edges. This is reasonable since that is the typical case in a deletion mutation and avoids costly refetches. If either the `FIELDS_CHANGE` is specified (related to my first question) _or_ the fat query becomes more specific (second question), Relay performs the complete intersection.

Am I too far off?
",guigrpa,2015-11-19 18:48:03
611,2015-11-19 06:56:44,"That sounds plausible, but I'll leave it to someone else to confirm.

Just wanted to add, if you're using `FIELDS_CHANGE` then you should be able to remove `NODE_DELETE`, as it _should_ cause the entire range (minus the deleted edge) to be fetched again.
",devknoll,2015-11-19 18:48:03
611,2015-11-19 18:46:40,"You are totally correct! With a `NODE_DELETE` mutation, we simple remove the node from the store and remove it from all connections we know about. We do not refetch anything else. 
Adding a `FIELDS_CHANGE` well let us know other things could have changed and will cause us to do the intersection step and refetch data. 
You probably want to keep the `NODE_DELETE` mutation since that will actually delete the node from the store since we know it no longer exists. With only `FIELDS_CHANGE`, Relay can only figure out that node is no longer in this particular connection but doesn't know that it's actually gone from everywhere else as well.
",yuzhi,2015-11-19 18:48:03
611,2015-11-19 18:47:38,"Awesome, thanks for the clarification @yuzhi :smile: I was kinda hoping that it would be garbage collected at that point...
",devknoll,2015-11-19 18:48:03
611,2015-11-19 19:07:58,"@yuzhi: just a final question: if the node is removed ""from all known connections"", why do you need to specify a particular one in the `NODE_DELETE` config?
",guigrpa,2015-11-19 18:48:03
611,2015-11-19 19:54:10,"It's mainly for refetching metadata in the connections like `count`. Since we assume only something is deleted, we don't try to refetch the individual items.
",yuzhi,2015-11-19 18:48:03
610,2015-11-18 03:57:22,"say, i have 3 answers in a question.

step1, visit url `/a`, in this route i will issue a query like (nested in other queries)

<S_CODE_TOKEN>

then jump to `/b`, will issue query like (same Question):

<S_CODE_TOKEN>

actually server return 3 results as expected
![ecdaff65-24da-4ea0-8ef2-a69fa6edcfaa](https://cloud.githubusercontent.com/assets/679897/11232159/c60fbd26-8dea-11e5-9995-2b5ea7f18997.png)

but in container component, i cound get **only one answer**
![e3d125a8-650c-487f-9910-640403c70c2e](https://cloud.githubusercontent.com/assets/679897/11232149/ac5f3550-8dea-11e5-8ae6-302c11f0678d.png)
",filod,2015-11-20 07:10:00
610,2015-11-18 23:41:39,"This could happen if Relay is having trouble resolving what has been cached with the additional data from the server (ie. if they mismatch). What does the query to the server look like? What are the IDs of the nodes each time you hit a route?

also are you using `react-router-relay`?
",yuzhi,2015-11-20 07:10:00
610,2015-11-19 02:56:42,"yep, i am using `react-router-relay`

I am sure the ids were comply `relay graphql spec`,  in the case above, the query didn't issue any `node` query.
",filod,2015-11-20 07:10:00
610,2015-11-19 04:41:35,"I meant the `node` field inside the connection. Can you include the query that was sent to the server? I am mainly interested to see if a diff query was generated properly after the first page you loaded.
",yuzhi,2015-11-20 07:10:00
610,2015-11-19 06:31:29,"first query 

<S_CODE_TOKEN>

second

<S_CODE_TOKEN>

ignore some unrelated fields & fragments, if you need the full queries, pls tell me
",filod,2015-11-20 07:10:00
610,2015-11-19 18:03:25,"Thanks. That has all the parts that I wanted to check. Did you see any warnings or errors in the console anywhere. Did the first edge of the first query match with the first edge of the second query? Relay might barf if they don't match because we are not sure if something got added or removed.
",yuzhi,2015-11-20 07:10:00
610,2015-11-20 07:10:00,"ok, i got the problem, because i generate a wrong cursor of edge in my sever side.
thx your patient !
",filod,2015-11-20 07:10:00
610,2015-11-20 07:35:18,"@yuzhi  also i have a question is that how should i generate cursor of a connection which could present a dynamic list (like some answers of a question, the list will resort after user like one of them or as time pass by)
",filod,2015-11-20 07:10:00
610,2015-11-20 07:46:53,"I'm not an expert on that. @dschafer might have suggestion for best practices for cursors.
",yuzhi,2015-11-20 07:10:00
609,2015-11-18 00:33:12,"The examples in this project are really helpful and educational. But I did not see a bidirectional data pattern on connections, such as:

<S_CODE_TOKEN>
",rojobuffalo,2015-11-26 02:19:05
609,2015-11-18 00:34:03,"See PR #608 
",rojobuffalo,2015-11-26 02:19:05
609,2015-11-20 01:36:39,"Check the PR for comments!
",steveluscher,2015-11-26 02:19:05
609,2015-11-26 02:19:05,"Let's move discussion to the PR
",josephsavona,2015-11-26 02:19:05
608,2015-11-18 00:28:33,"Issue #609
The use-case I was going for with this example is bidirectional data relationships. In an app, at any given point, you may wish to have the UI show a user and her associated groups. In another place you may want to show a group and its associated users. I didn't see this represented in the current examples.

<S_CODE_TOKEN>

In this example users are soccer players and the groups are their positions. In the UI, each player is listed with switches that can be turned on/off to indicate whether that player can play a given position.

Next to the list of players is a list of positions. Below each position is a list of players who are switched on for that position.

You can also add a new player via the text input below the player list.
",rojobuffalo,2015-11-20 03:09:37
608,2015-11-20 01:36:23,"This is great! I don't think that we can accept new examples though, because each one adds work for our very small team – to upgrade it with every API change in Relay.

Would you be interested in breaking this out into a repo of its own?
",steveluscher,2015-11-20 03:09:37
608,2015-11-20 03:09:37,"@steveluscher 
Thanks, that makes sense. I will break this out as an independent example.
",rojobuffalo,2015-11-20 03:09:37
608,2015-11-27 18:17:23,"See https://github.com/rblakeley/relay-example-players-positions for the stand-alone repo.
",rojobuffalo,2015-11-20 03:09:37
607,2015-11-17 15:08:09,"Follow up to #599, #550 

Deprecate `RelayStore.update`, rename to `RelayStore.commitUpdate`

`commitUpdate` now returns the `RelayMutationTransaction` just like `applyUpdate`.

Changed to `commitUpdate` in the docs.

I used `warning` to deprecate and also call the correct method, let me know if this is the way we should deprecate the function.
",xuorig,2016-01-08 07:45:36
607,2015-11-17 16:09:15,"Addressed the comments :coffee: 
",xuorig,2016-01-08 07:45:36
607,2015-11-17 21:17:55," @plievone done
",xuorig,2016-01-08 07:45:36
607,2015-11-17 21:24:16,"Perhaps also the few mentions in examples and docs could be commitUpdated, as they are in the same repo and easy to grep?
https://github.com/facebook/relay/search?utf8=%E2%9C%93&q=%22Store.update%22&type=Code
",plievone,2016-01-08 07:45:36
607,2015-11-17 21:34:49,"Good catch, I've updated docs and examples
",xuorig,2016-01-08 07:45:36
607,2015-11-18 05:20:30,"@facebook-github-bot import
",josephsavona,2016-01-08 07:45:36
607,2015-11-18 05:26:58,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1679180675656670/int_phab to review.
",facebook-github-bot,2016-01-08 07:45:36
607,2015-11-19 15:03:23,"@xuorig we'll land this as time permits - shipping it requires a codemod bc we don't want warnings everywhere we call `update`.
",josephsavona,2016-01-08 07:45:36
607,2015-11-19 15:04:28,":+1: 
",xuorig,2016-01-08 07:45:36
607,2015-11-22 20:10:22,"It seems to me that this implementation does not cover use case, when it just wants to avoid stacking many mutations in collision queue.  Which is the use case for updating text input or anything where user can change values quickly and it wants to remove previous transaction if its just sitting on the queue with newer one.

As far as I can see - to put mutation on the collision queue I have to commit it, but I can't rollback if it just sits on the queue and has not been sent, right?

Maybe if rollback would be also possible when transaction is in `COMMIT_QUEUED`?
",jardakotesovec,2016-01-08 07:45:36
607,2015-12-01 15:11:57,"@josephsavona @xuorig What do you think? Should I provide another PR that adjust `rollback` function that can rollback also transactions with status `COMMIT_QUEUED`?  
",jardakotesovec,2016-01-08 07:45:36
607,2015-12-01 17:18:22,"> Should I provide another PR that adjust rollback function that can rollback also transactions with status COMMIT_QUEUED?

@jardakotesovec That would be great - all that should be required is updating the status check in `RelayMutationTransaction` to allow calling `rollback` when the transaction is queued. The actual logic for the rollback in `RelayMutationQueue` should already handle this case.
",josephsavona,2016-01-08 07:45:36
607,2015-12-03 22:09:48,"Does this cover the use case where I want to commit data to my local cache in different places (don't care about the transactions returned) but then just want to update everything that is stored in the cache, but now out of sync with the backend?
",Globegitter,2016-01-08 07:45:36
607,2015-12-04 14:44:12,"@Globegitter It does not..   as decided in #550,  control of transaction handling is given to the programmer. So with this PR, you have to keep track of the transactions on your own. 

But api could be extended for example to either provide function that commit all uncommited transactions as you suggested, or just provide you list of uncommited transactions so you can commit them.
",jardakotesovec,2016-01-08 07:45:36
607,2015-12-08 21:19:49,"@jardakotesovec So right now we would have to manually keep track of each transaction that is being returned by `applyUpdate` (and e.g. store them in an array). Then at some point just go through all the transactions and commit them? Would this then make an individual request for each committed transaction or is there a way to commit all transactions in one HTTP request? 

But yeah for our use-case it would be useful to have an API to commit all uncommitted transactions (in one request).
",Globegitter,2016-01-08 07:45:36
607,2015-12-09 06:33:55,"@Globegitter I think you should open new issue/PR to keep track of this use case and discuss potential improvements.

Relay currently sends [one](https://github.com/facebook/relay/issues/205) http request per mutation.

What you have described is correct (keeping list of transaction and committing all of them individually)
",jardakotesovec,2016-01-08 07:45:36
606,2015-11-17 14:12:04,"`RelayQuery` nodes are [supposed](https://github.com/facebook/relay/blob/v0.5.0/src/query/RelayQuery.js#L92) to be immutable. But `toGraphQL`, which is used to serialize queries, breaks immutability by replacing the concrete node of the `RelayQuery` node with a plain object version of it. So, for example, `RelayQuery.Fragmet.getConcreteFragmentID()` now returns another ID... That sometimes causes problems.

Initially, I was planning to solve that by disabling replacement of the old concrete node with the concrete node produced by `toGraphQL`, since it was performed for caching purposes only. But, ended up with a bigger refactor by completely replacing `toGraphQL` with a new method `toJSON()` on `RelayQuery.Root`, `RelayQuery.Field`, and `RelayQuery.Fragment`. :smile: The implementation was copied from `toGraphQL` without noticeable modifications.

**UPDATE:**
Also replaced `fromGraphQL` with `fromJSON`.
",denvned,2015-12-06 19:01:39
606,2015-11-17 15:19:36,"A couple nits, but this is great!
",josephsavona,2015-12-06 19:01:39
606,2015-11-17 17:45:43,"Fixed.
",denvned,2015-12-06 19:01:39
606,2015-11-18 07:35:38,"@josephsavona I extended the PR by replacing `fromGraphQL` with `fromJSON` (in a separate commit).
",denvned,2015-12-06 19:01:39
606,2015-11-19 15:09:39,"@denvned Thanks again for working on this. Thinking about the implications of landing this, though, there are really two aspects to this change:
- Change query serialization to stop modifying `__concreteNode__` - this is a simple change to make `getConcreteQueryNode` just return the concrete node and not support overwriting it. The results of `toGraphQL` no longer need to be cached.
- Changing the internal API from `to/fromGraphQL` to `to/fromJSON` and rewriting the modules.

The former has immediate value for server rendering and requires minimal API changes (only affects RelayQuery and toGraphQL) - we're happy to support and land this. The latter is aesthetic and requires updating a bunch of APIs internally - we don't have the time to support this second change for now. Would you mind splitting this PR along those lines?
",josephsavona,2015-12-06 19:01:39
606,2015-11-19 16:01:09,"> we don't have the time to support this second change for now

Dang! I've just updated the PR with the master. OK, I'll send another PR.
",denvned,2015-12-06 19:01:39
606,2015-11-19 16:18:48,"BTW, yes, that change is mostly aesthetic, but I thought, FB also desired it, because of this:

> [TODO (#6937314): RelayQueryNode support for toJSON/fromJSON](https://github.com/facebook/relay/blob/v0.5.0/src/query/RelayQuery.js#L103)
",denvned,2015-12-06 19:01:39
606,2015-11-19 16:29:29,"> but I thought, FB also desired it, because of this:

Sorry for the confusion - GitHub issues reflect current priorities, while TODOs in code may be out of date. It's probably better to check before making a large change based only on a TODO.
",josephsavona,2015-12-06 19:01:39
606,2015-11-19 16:41:59,"> It's probably better to check before making a large change based only on a TODO.

Luckily, that wasn't a large change. :smiley: 
",denvned,2015-12-06 19:01:39
606,2015-11-20 10:42:23,"> Change query serialization to stop modifying `__concreteNode__` - this is a simple change to make `getConcreteQueryNode` just return the concrete node and not support overwriting it. The results of `toGraphQL` no longer need to be cached.

Done in #614 
",denvned,2015-12-06 19:01:39
605,2015-11-16 17:20:53,"Hi!

I have a connection which has a required argument of an enum type:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Everything works fine when I use Graphiql, but in Relay, I get an error:

<S_CODE_TOKEN>

even though it's clearly specified:

<S_CODE_TOKEN>

Is there something I don't get about using enums? `PeriodInterval` seems to be correctly defined in `schema.graphql` and its json counterpart. Do they have to be registered or initialized in Relay?

Is this a bug or is it my fault?
",mikberg,2015-11-16 19:28:54
605,2015-11-16 18:54:58,"Hey @mikberg, weird that it works in graphiql and not in relay, could you post what query relay is actually sending to your server ?
",xuorig,2015-11-16 19:28:54
605,2015-11-16 19:28:54,"Hi, @xuorig 

Thanks for a bump in the right direction! The error was on my part: The server was only passing on the `query` part of the JSON to `graphql()`, missing the `variables` part. The problem was completely resolved using `express-graphql` instead of ""manually"" parsing the body and passing it on.

Thank you!
",mikberg,2015-11-16 19:28:54
604,2015-11-16 17:08:43,"I have a `Calendar` component with a query that looks like this:

<S_CODE_TOKEN>

It is possible to navigate between time periods (like months), and this is done with a `react-router` link together with `react-router-relay`. So far, everything works fine.

When I run a mutation to add an item using `RANGE_ADD`, it does fire off the correct network request, but no item is added to the cache. After this has happened, navigating to previously loaded calendar views breaks because `relay` serves the calendar the cache which was currently in use when the `RANGE_ADD` mutation happened, even though the connection params are different.

I was able to make the mutation work correctly by specifying my `rangeBehaviors` in two ways, one with `startDate` first and one with `endDate` first. This is obviously not the way to go and even throws an error in `relay 0.5`, and the cache still breaks (although not as consistently).

I am generating my `rangeBehaviors` on the fly by looping over a list of all visited start- and endDates. I don't know if that's the issue, but I see no other way of specifying correct `rangeBehaviors`.
",johanobergman,2015-11-29 19:09:48
604,2015-11-17 14:25:09,"I think this is effectively just https://github.com/facebook/relay/issues/542.

Make sure you also have an unterminated query for the connection field, like in the TodoMVC example.
",taion,2015-11-29 19:09:48
604,2015-11-17 16:21:28,"What does the `getConfig` of your mutation look like? Can you also include the server response?
",yuzhi,2015-11-29 19:09:48
604,2015-11-17 21:45:51,"The mutation:

<S_CODE_TOKEN>

I have double checked the generated dates in `rangeBehaviors` and they correspond exactly to those in my queries. Some dates may not have been fetched yet (user has never switched from ""month"" to ""four week""), but I guess those `rangeBehaviors` are ignored.

The response:

<S_CODE_TOKEN>

I made another interesting discovery. If I order my `startDate` and `endDate` alphabetically in my queries as well, the item gets added. Unfortunately, the cache still breaks.
",johanobergman,2015-11-29 19:09:48
604,2015-11-17 22:20:16,"Sounds like you were able to get the edges to be added by having `startDate` and `endDate` in alphabetical order. 
We should have fixed the alphabetical order issue already. What version of Relay are you using? What error is it throwing in `Relay 0.5`?

Also, what can you clarify you mean by the cache still breaks? Is it still showing old data? Could it be something `react-router-relay` is caching by accident? We should be fetching data from Relay cach
",yuzhi,2015-11-29 19:09:48
604,2015-11-17 22:36:55,"I'm using `relay 0.5`. I don't get any error at all if my `rangeBehaviors` are in alphabetical order. However, i also have to specify the parameters in my _query_ in alphabetical order in order for the item to actually appear in my views.

Regarding the cache problem - let's say I refresh the page, and click through a few months so that there are a couple of cached queries. I then add a new item with the mutation above, and it shows up. This is where the cache breaks. When I navigate back to the previous views, they all receive the same items - namely the ones that were fetched from the **first** displayed month (at page load).

I have checked the query params that `react-router-relay` feeds into the container, and they are correct for every month. The container just won't retrieve the correct items.
",johanobergman,2015-11-29 19:09:48
604,2015-11-17 23:13:03,"Thanks! That's really useful.
1. It sounds like there is a bug, since the query shouldn't need to be in alphabetical order. I think @steveluscher will be the best person to look into that.
2. I am not familiar with `react-router-relay` and what side effect it might have. Just to be sure, can you check the query variables inside the container with the query of the connection where it includes dates as the variables? Do you know whats the top-level code Relay it calls with when `back` is clicked? Does it make a new RelayRootContainer? Does it remember the results of all the `setVariables` calls that were used? 
",yuzhi,2015-11-29 19:09:48
604,2015-11-17 23:15:21,"Currently we use a single `RootContainer` that aggregates all the queries together, then distribute the results of those queries back to each route container.

@johanobergman Are you doing anything w/e.g. `prepareParams`? There is an open issue there w/https://github.com/relay-tools/react-router-relay/issues/79.
",taion,2015-11-29 19:09:48
604,2015-11-17 23:23:21,"> Just to be sure, can you check the query variables inside the container with the query of the connection where it includes dates as the variables?

The variables are correct as far as I can see (I console.log'd them in `prepareVariables`). Also, when I mean navigate back it doesn't have to be using the back button. Simply pressing a navigation arrow in my calendar ui does the same thing.

@taion I am using `prepareVariables` on the relay container to compute the relay variables `startDate` and `endDate` from the url query params `date` and `mode`. Not using `prepareParams` though.
",johanobergman,2015-11-29 19:09:48
604,2015-11-19 01:44:08,"We're missing a `.sort()` [here](https://github.com/facebook/relay/blob/master/src/traversal/writeRelayUpdatePayload.js#L561). My bad. Fix coming.
",steveluscher,2015-11-29 19:09:48
604,2015-11-19 10:59:44,"@steveluscher Great!

I'm still not sure if the cache issue is caused by `relay` or `react-router-relay`. I changed my implementation to use `relay.setVariables` instead of query params with `react-router-relay`, but the result was still the same.
",johanobergman,2015-11-29 19:09:48
604,2015-11-19 18:27:27,"Awesome! We found the root cause of the one of the problems. Let's keep digging into the other one.
So the mutation went through and updated one of the connection, but either it didn't update the other connections or they were not read out again properly. 
When you do `this.props.relay.setVariables`, do you still get the very first page that was rendered or does it just not show the new item that should have been added?
Is it possible for you to add a `console.log` around here: https://github.com/facebook/relay/blob/master/src/traversal/writeRelayUpdatePayload.js#L426  and see if it is getting called for each of the cached connections?
",yuzhi,2015-11-29 19:09:48
604,2015-11-19 20:02:31,"After I ordered the parameters in my queries (while waiting for the fix), my mutation is now 100% successful, and the item is always added to `viewer.items` and consequently to the view.

`writeRelayUpdatePayload.js#L426` is only called once, and it should be - my item does only belong in one or possibly two connections at the same time (the ""month"" and the ""four weeks"" view).

The issue is that after I do `relay.setVariables` with parameters for already cached connections, _no matter if they should contain the newly added item or not_, `viewer.items` returns the wrong set of data. Earlier today it was always the first loaded query data, but right now it appears to be the data from the second cached query (makes no sense).
",johanobergman,2015-11-29 19:09:48
604,2015-11-19 22:05:41,"That sounds super weird.  @taion could react-router-relay be doing any weird caching?
@johanobergman do you think you can make minimal repro case for the `setVariables` problem?
",yuzhi,2015-11-29 19:09:48
604,2015-11-19 22:11:39,"I don't explicitly do any caching.

@johanobergman When you drop RRR, are you still using `prepareVariables`? If so, can you see what happens if you drop `prepareVariables`?
",taion,2015-11-29 19:09:48
604,2015-11-19 22:28:57,"@taion It made no difference, sadly. When you say drop - `react-router-relay` is still around, I've just replaced my `<Link>`s with `relay.setVariables`. 
",johanobergman,2015-11-29 19:09:48
604,2015-11-19 22:32:30,"Can you try dropping `prepareParams`?
",taion,2015-11-29 19:09:48
604,2015-11-19 22:35:18,"I haven't defined `prepareParams`. I dropped `prepareVariables` and made the computations (transforming a single date into `startDate` and `endDate`) before the call to `relay.setVariables`.
",johanobergman,2015-11-29 19:09:48
604,2015-11-19 23:01:19,"@yuzhi I made some digging starting from `RelayContainer@componentWillReceiveProps`. In `_getQueryData()`, the `fragmentPointer` appears to be correct, and `queryResolver.resolve(fragmentPointer)` returns an object where the `__dataID__` property corresponds to the connection I want to load, but the `edges` property contain the wrong edges.

Is it possible to set a breakpoint somewhere to see all cached connections keyed by `__dataID__`? I'm curious if my mutation overwrites all caches with the first (or second or whatever) cache.
",johanobergman,2015-11-29 19:09:48
604,2015-11-19 23:33:43,"Oops, sorry, I meant `prepareVariables`.

I'm really not sure - I've seen some weird things happen when I used `setVariables`, but I never got around to setting up a consistent repro, and just cargo culted stuff around until it worked.
",taion,2015-11-29 19:09:48
604,2015-11-19 23:43:24,"I'm going to try to whip something up tomorrow if I have time for it.
",johanobergman,2015-11-29 19:09:48
604,2015-11-22 14:45:16,"A quick question - do I have to specify all queried connections with their respective params in `rangeBehaviors`? In other words, is there a difference between specifying `rangeBehaviors['endDate(xxxx).startDate(xxxx)'] = ''` and omitting that `rangeBehavior`?

I've made a test repo based of `relay-starter-kit`, and `relay` seems to do a full query on `viewer { items }` unless I specify all possible `rangeBehaviors`. #615 would simplify this a lot.
",johanobergman,2015-11-29 19:09:48
604,2015-11-22 17:32:01,"So, I haven't been able to 100% reproduce the issue. In my test repo, `relay` re-fetched all of the previously visited connections, since I only specified `rangeBehaviors` for where the item should be added. In my real app however, it didn't even do that, instead the cache broke.

I was able to work around it by caching the arguments for every single visited connection and set all of their `rangeBehaviors` to an empty string (except the `append` one).

I made something that resembles what's proposed in #615 to simplify this a bit: https://gist.github.com/johanobergman/8f829faa0eb76cdc22a8
",johanobergman,2015-11-29 19:09:48
604,2015-11-22 18:19:30,"https://github.com/facebook/relay/issues/604#issuecomment-158764421: I believe specifying `''` or `null` means ""nothing changes"" - I use it for e.g. https://github.com/facebook/relay/blob/master/examples/todo/js/mutations/AddTodoMutation.js#L49
",taion,2015-11-29 19:09:48
604,2015-11-29 19:09:48,"> I made something that resembles what's proposed in #615 to simplify this a bit:

@johanobergman Nice! It sounds like this gives you a workaround for now, and #615 will make it easier to do this. I'll close this for now, but feel free to continue discussion and we can reopen if necessary.
",josephsavona,2015-11-29 19:09:48
603,2015-11-16 06:10:07,"This is a cleaner shot at #570.
- `RelayGarbageCollection` hasn't been updated yet (needs clarification)
- `RelayRenderer` takes `RelayContext` as a prop (instead of as context from RelayRootContainer).
- Not using Joe's newest `GraphQLStoreQueryResolver` changes.
- Adds `Relay.Store` deprecation calls.
- Fixes `RelayStore` mock.

This ignores the clean up of interdependencies in `RelayStoreData`, since the discussion on that is ongoing.
",devknoll,2015-12-04 06:42:33
603,2015-11-16 07:48:13,"`RelayRenderer` should abort the pending request and run new queries when the Relay context is replaced. 

`RelayContainer` should also react to the change of the context.
",denvned,2015-12-04 06:42:33
603,2015-11-16 18:04:33,"Good catch :+1: Thanks for the feedback!
",devknoll,2015-12-04 06:42:33
602,2015-11-16 01:11:17,"<S_CODE_TOKEN>

I've been gritting my teeth trying to make it work for a few days now. I only today found the issue that notes you can't have connectionType at the root. So I wrapped my two connectionTypes, but still can't make it work.

Is there an example with this kind of data relationship or is it known whether this is supported?
",rojobuffalo,2015-11-16 02:48:16
602,2015-11-16 02:49:12,"In my wrapper I had not properly set the types to be connections. All good now.
",rojobuffalo,2015-11-16 02:48:16
601,2015-11-15 21:07:01,"Hey, I was pretty confused about about the usage of the term ""GraphQL call"" on the documentation for RANGE_ADD. Fortunately @taion [clarified this for me on SO](http://stackoverflow.com/questions/33631322/what-are-the-graphql-calls-in-the-rangebehaviors-attribute-of-the-range-add). Is it worth updating the docs? Thanks.
",dminkovsky,2015-11-16 04:02:59
601,2015-11-15 21:32:07,"I think this just falls under https://github.com/facebook/relay/issues/538.
",taion,2015-11-16 04:02:59
601,2015-11-16 03:52:59,"@dminkovsky We previously referred to field arguments as calls and it looks like we slipped up and used the old terminology in places. We'll fix it as time permits, but we're always happy to receive PRs to make the documentation more clear.
",josephsavona,2015-11-16 04:02:59
601,2015-11-16 04:02:59,"Thanks I will submit a PR.
",dminkovsky,2015-11-16 04:02:59
600,2015-11-14 17:00:15,"Hello,

I'm new to relay and have been going over the docs and creating a project with relay. Is there a way to define Relay.Route without using classes like so:

<S_CODE_TOKEN>

Is there a more functional approach that you guys could recommend? 
",kennetpostigo,2015-11-15 18:24:53
600,2015-11-15 18:24:31,"Yup, Relay now accepts plain object route definitions. Here's a complete example (using a stateless functional React component for brevity):

<S_CODE_TOKEN>
",josephsavona,2015-11-15 18:24:53
599,2015-11-14 15:20:40,"For #550

Adds an `updateLocal` method to `RelayStore` that creates a transaction in the Queue, but doesn't commit it. 

Returns a reference to the transaction so it can be committed or rollbacked afterwards.

There weren't any tests for update so I added a test for `update` and `updateLocal`, just making sure if the correct functions on the Queue and Transaction are called.
",xuorig,2015-11-17 02:15:29
599,2015-11-15 05:28:59,"This looks good, and thanks for the tests! 

Having two such similar methods is definitely redundant though. @yungsters @wincent - thoughts on making it the default for `update` to not commit the transaction, and require users to call `commit()`? We could keep the old behavior for one release with a warning.
",josephsavona,2015-11-17 02:15:29
599,2015-11-15 07:09:54,"> thoughts on making it the default for `update` to not commit the transaction

We should optimize for the most common use case, although figuring out _what_ exactly that is is tricky. My intuition is that controlled inputs bound to mutations are actually the edge case, so the existing auto-commit behavior should be _easy_ and the deferred-commit-managed-by-the-user behavior should be _possible_.

So another possible option to consider:
- Make it a single method, with the commit behavior controllable via an options object where `{commit: true}` is the default.

If we go with two methods, I am not sure the meaning of the `updateLocal` method is obvious from its name. Naming is hard, but other ideas that crossed my mind are `enqueueUpdate`/`commitUpdate`.

Finally, as for the idea of making `update` the only method and not committing by default, I could live with that (and it would conveniently liberate us from having to come up with decent names for two methods).
",wincent,2015-11-17 02:15:29
599,2015-11-15 08:17:14,"Good points. So there are three options:
- two methods, which should then both return a MutationTransaction for consistency 
- one method that auto-commits by default, with an option to not commit. It returns the transaction. This means `store.update(mutation, callbacks).commit()` will throw (already committing) but `store.update(mutation, callbacks, {commit: false}).commit()` is ok
- one method, never auto-commits: `store.update(mutation, callbacks).commit()` or leave off the commit() call to defer. 

The last option feels the least awkward (especially with a rename s/update/enqueueUpdate/), and it also makes the option to enqueue a mutation but not commit it more discoverable. 
",josephsavona,2015-11-17 02:15:29
599,2015-11-15 16:49:59,"> the existing auto-commit behavior should be easy and the deferred-commit-managed-by-the-user behavior should be possible.

Totally agree with this, I really think the deferred commit way will be used in edge cases and probably should not be the default.

> This means store.update(mutation, callbacks).commit() will throw (already committing) but store.update(mutation, callbacks, {commit: false}).commit() is ok

Which means this would make sense, but it does seem fairly awkward. I would personally probably go for this anyway I think.

Let me know what you guys decide to go for and I'll update the PR
",xuorig,2015-11-17 02:15:29
599,2015-11-16 18:49:36,"@xuorig thanks for your patience. We chatted offline and came up with the following API:
1. `Relay.Store.applyUpdate(mutation, callbacks): RelayMutationTransaction` - does not commit the mutation immediately (e.g: rename `updateLocal` to `applyUpdate`)
2. `Relay.Store.commitUpdate(mutation, callbacks): RelayMutationTransaction` - commits the mutation immediately (this replaces the existing `update`)
3. `Relay.Store.update(...): void` - mark this as deprecated and suggest using `commitUpdate`.

Would you mind changing `updateLocal` -> `applyUpdate` and adding docs for this method (item 1)? We can address 2 & 3 separately (of course you're welcome to do these too if you have time). Thanks!
",josephsavona,2015-11-17 02:15:29
599,2015-11-16 19:39:56,"Alright, I changed the method name to `applyUpdate` + updated the docs with example and some info.

Squashed + reworded commit also.

I will tackle 2 and 3 in another PR
",xuorig,2015-11-17 02:15:29
599,2015-11-16 23:26:57,"@xuorig awesome, thanks! just two minor nits, otherwise this looks good to go.
",josephsavona,2015-11-17 02:15:29
599,2015-11-16 23:58:39,"Addressed your nits!
",xuorig,2015-11-17 02:15:29
599,2015-11-17 00:15:18,"@facebook-github-bot import
",josephsavona,2015-11-17 02:15:29
599,2015-11-17 00:15:29,":+1: 
",josephsavona,2015-11-17 02:15:29
599,2015-11-17 00:28:30,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1727015024195186/int_phab to review.
",facebook-github-bot,2015-11-17 02:15:29
598,2015-11-13 21:55:04,,josephsavona,2016-01-19 19:46:00
598,2016-01-19 19:46:00,"We may eventually move forward with this, but it isn't urgent so i'm closing for now.
",josephsavona,2016-01-19 19:46:00
598,2016-01-20 14:44:57,"So Relay still tracks all connection (and reload them on fatQuery) with all used arguments.. (which can be a lot combinations if its used for example for searching)?

I think this is important issue.. and should not end up as closed. 
",jardakotesovec,2016-01-19 19:46:00
598,2016-01-20 15:54:46,"@jardakotesovec I'm only closing the PR, we're still thinking about ways to address the growth of tracked queries on connections.
",josephsavona,2016-01-19 19:46:00
598,2016-01-20 16:14:23,"@josephsavona ok.. but all related issues are also closed.. so there is nothing to track..  This was last opened piece :-)...
",jardakotesovec,2016-01-19 19:46:00
598,2016-01-20 17:59:46,"@jardakotesovec good call! I created https://github.com/facebook/relay/issues/756 to track the issue itself as opposed to this specific approach to solving it.
",josephsavona,2016-01-19 19:46:00
597,2015-11-13 19:29:05,"`RelayFragmentResolver` is intended as a simpler replacement for the singular form of `GraphQLStoreQueryResolver`. The major difference is the added the ability to have multiple subscribers to the same resolver. This means two components could potentially share the same resolver, reducing overhead. The main public methods are:
- `read(): Data`: synchronously read the current result of the fragment
- `observe({onNext}): {dispose}`: subscribe to changes on the results
",josephsavona,2016-01-19 19:45:20
597,2015-11-13 19:29:13,"@facebook-github-bot import
",josephsavona,2016-01-19 19:45:20
597,2015-11-13 19:33:01,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/873986506049274/int_phab to review.
",facebook-github-bot,2016-01-19 19:45:20
597,2016-01-19 19:45:19,"see #598 
",josephsavona,2016-01-19 19:45:20
596,2015-11-13 16:59:56,"I have an interface Customization and several object types implementing this interface, three of the subtypes have a field called iconUrl but they mean different things depending on the concrete type in which they are. They just happen to be called the same. These fields have no arguments, but we may add them in the future.

<S_CODE_TOKEN>

when querying for all the Customizations of a given customizable, the query looks like this:

<S_CODE_TOKEN>

What happens is that only the iconUrl of the first subtype listed in the query above gets requested to the server during the Add mutation. In this case, if I add a ShowIconInTitle, the iconUrl gets requested fine as part of the mutation, because it is the first in the list, but if I do add a ShowSomethingElseSomewhereElse, the iconUrl of that subtype does not get requested to the server as part of the mutation.

When refreshing the entire page all the fields come back just fine. I workaround this issue with forceFetching the component after the mutation

These are my deps:

<S_CODE_TOKEN>

Hope this helps.
",luisobo,2015-12-02 02:14:03
596,2015-11-13 17:28:38,"Thanks for filing this. This is caused by queries being flattened prior to creating the mutation query. 

Cc @yungsters - we should flatten only the optimistic query. 
",josephsavona,2015-12-02 02:14:03
596,2015-11-29 19:10:39,"@luisobo #627 fixes this and should land in master soon.
",josephsavona,2015-12-02 02:14:03
596,2015-12-02 02:14:03,"The fix landed - thanks @luisobo for reporting this!
",josephsavona,2015-12-02 02:14:03
595,2015-11-13 13:38:25,"Related to discussions about pagination strategies, as well as serious limitations i've found with rangeBehaviors. I think it would be prudent to list any common UI patterns that Relay doesn't support well (if at all) in its current state. Given the amount of effort involved in getting a Relay project up and running, it's disconcerting that 2 months later i'm stumbling upon limitations that are fairly problematic. Relay is no longer a technical preview, so there's an expectation that even if it's not feature-complete, that most limitations can be worked around easily enough.
",AndrewIngram,2015-11-13 21:59:24
595,2015-11-13 21:59:24,"Thanks for your feedback. Relay is designed to support common use cases at Facebook first, and there are certainly alternate forms of pagination that other products may need. We're happy to accept pull requests to document the currently supported forms of connections (maybe add a ""Pagination"" page to the guides section of the docs) or to add support in core for alternate forms of pagination (limit/offset, etc.).
",josephsavona,2015-11-13 21:59:24
595,2015-11-14 01:14:03,"I think you've misunderstood my aim with this issue. I used pagination merely as an example.  The bigger issue is that an important part of any project is to allow potential user to evaluate whether it's fit for purpose. Using myself as an anecdote, i've been working with Relay full-time basically since the day it was open-sourced, and I'm only now reaching the conclusion that it's not really ready for my usage. I'm okay with making mistakes and choosing the wrong technologies, but generally if i'm wrong I like to find out as soon as possible.

There are conversations distributed across various mediums (github issues, chat rooms, stackoverflow mainly) that touch on the limitations, but nothing that says ""If you want to X, Relay probably isn't ready for you yet, and won't be until Y"". Now, I can go ahead and start a wiki page on this repo (I assume the public can do that), but if it's going to end up being some kind of source of truth, it'd be good to have the blessing of some core contributors.
",AndrewIngram,2015-11-13 21:59:24
595,2015-11-14 10:27:04,"Maybe have a tips section in Relay docs similar to the [React docs](http://facebook.github.io/react/tips/introduction.html) sidebar? It would help in evaluation, as one could see the pain points and possible unwieldy workarounds easier.
",plievone,2015-11-13 21:59:24
595,2015-11-16 03:46:31,"Thanks for living on the bleeding edge and trying Relay since day one! Relay is still a new framework, and we appreciate your trying it out early, filing issues, and giving us feedback.

Since the initial launch we've worked to document the current and planned features in the form of our [roadmap](https://github.com/facebook/relay/wiki/Roadmap), and we review the issues list to make it easy to see the upcoming fixes and enhancements. We've also flushed out the [guides](http://facebook.github.io/relay/docs/guides-containers.html#content) and [examples](https://github.com/facebook/relay/tree/master/examples) to demonstrate use-cases where Relay excels.

We're happy to accept pull-requests updating the documentation, examples, etc - if the supported features are unclear, we'd like to fix that. Otherwise, it sounds like we need to flush out the guides section of the documentation. For example, it might be worth adding a ""Pagination"" section (or other areas) to cover various scenarios and how they can be implemented in Relay.

Finally, there's only so much the core team can do at one time, but we're happy to support external contributors in adding features or fixing bugs. If you're interested in contributing but not sure where to start, get in touch! (at mention on [Discord](discordapp.com/channels/102860784329052160/102861057189490688), email us, etc.).
",josephsavona,2015-11-13 21:59:24
594,2015-11-13 03:27:20,"Some improvement for #487 

Errors on fields should only make the request rejected if the data is empty or null. If we receive some data from the GraphQL server and also errors, `console.error` them but resolve the request.

Implemented this in `RelayDefaultNetworkLayer`
-  if payload has errors
  -  if data is not null/undefined and is not an empty object.
    - log the errors and resolve the request
  - else ( data is null or an empty object )
    - reject the request with errors

Let me know if the logic can be made simpler and if the error message should be different!
",xuorig,2016-01-08 23:11:23
594,2015-11-13 19:10:35,"Not totally sure how I feel about this... In my case, we're using errors in e.g. mutations to pass along any application specific user visible errors (as suggested by @dschafer).

At the very least, resolve should probably _also_ include any errors, and since this changes the semantics of mutation callbacks (I think), should be documented as a breaking change.
",devknoll,2016-01-08 23:11:23
594,2015-11-17 01:20:03,"@devknoll I see what you mean, I guess this solution would make errors inaccessible for anybody wanting to use them when there is data. @josephsavona what do you think ?
",xuorig,2016-01-08 23:11:23
594,2015-12-06 04:23:57,"@devknoll or @josephsavona, can you give this one last look, then close if you decide we should leave the current behavior as it is?
",steveluscher,2016-01-08 23:11:23
594,2016-01-04 23:34:52,"Ping @devknoll. Do we have other ideas, or shall we close this up?
",steveluscher,2016-01-08 23:11:23
594,2016-01-05 01:04:30,"@steveluscher I'm no longer maintaining code that relies on this (hooray for objective opinions!) but still stand by my previous thoughts. 

I think that any errors should also be passed to the success callback (could just be sibling to `response`) and this documented as a breaking change.

My reasoning is: A) this matches the GraphQL behavior and B) an invariant of ""errors from the server are always passed to application code"" just seems nicer for the developer
",devknoll,2016-01-08 23:11:23
594,2016-01-08 23:11:23,"Thanks for the contribution @xuorig! I'm going to close this up. Feel free to open it again if any new information comes up that might change things.
",steveluscher,2016-01-08 23:11:23
594,2016-11-08 12:07:43,"I think it would be still a nice feature. Maybe it would be better if configurable like failOnError which default to true.
",valorize,2016-01-08 23:11:23
593,2015-11-12 21:23:36,"I have a question about RelayContainer usage.
For example I have a Parent Relay Container, where I fetch data for Child elements.

<S_CODE_TOKEN>

And in this case each child will have name from received data.

If I changed Parent Relay Container to next variant

<S_CODE_TOKEN>

And my Child file looks like this

<S_CODE_TOKEN>

Instead of data, I will receive the array of next object 

<S_CODE_TOKEN>

In first case data looks like

<S_CODE_TOKEN>

Why is it happened, and how to receive data in second variant of Parent. Thank you.

note: edited code formatting for readability
",mikhail-riabokon,2015-11-12 21:40:44
593,2015-11-12 21:40:44,"This is covered in the docs on [Data Masking](http://facebook.github.io/relay/docs/thinking-in-relay.html#data-masking).

In summary, components can only access fields they request. In the second example, the parent cannot access the `name` property because that field is only requested by the child. If the parent needs the name, just add it in the parent as follows:

<S_CODE_TOKEN>
",josephsavona,2015-11-12 21:40:44
593,2015-11-13 18:06:11,"@josephsavona Something else is amiss here, as the parent does not use the `name` property and should not need to know about it?

Does it need `@relay(plural:true)` on the parent? Or perhaps the `{...child}` spread  in `children.map( )` acts funnily? 

Also speaking about data masking, todo example manages to depend on [`viewer.todos`](https://github.com/facebook/relay/blob/7e96455/examples/todo/js/components/TodoApp.js#L47)  in quite an implicit way without declaring it?
",plievone,2015-11-12 21:40:44
593,2015-11-13 18:56:33,"@plievone Can you clarify what is different than you expected? It would be helpful to see:
- the component definition with fragments, for the component that is receiving unexpected data
- the actual data received by that component
- the expected data that you thought it would receive

Note that in the above example, the actual data received by the `Parent` component seems to be:

<S_CODE_TOKEN>

Which is correct per `Parent`'s fragment definition and Relay's data-masking.
",josephsavona,2015-11-12 21:40:44
593,2015-11-13 19:20:45,"@josephsavona Can I declare in Parent component what should be fetched for Child via `Child.getFragment('child')`?

I have a Parent, where I described what should to be fetched by `viewer` query. But in this case I would not receive data from `Child.getFragment('child')`.

<S_CODE_TOKEN>

But as you mentioned, I can receive exactly what I want if I would not use `Child.getFragment('child')`. 

<S_CODE_TOKEN>

So, when should I use it `Child.getFragment('child')`? How to compose relay containers? Thank you.
",mikhail-riabokon,2015-11-12 21:40:44
593,2015-11-13 19:33:28,"Your code is correct - that is how to compose Relay containers. I'll repeat my question: **what component is receiving data that is different than you expected, and what is the actual/expected data?**
",josephsavona,2015-11-12 21:40:44
593,2015-11-13 19:42:26,"@joshuaevenson  I expected receive data which declare via `Child.getFragment('child')` in Parent Component (this.props.viewer.children)

Actual

<S_CODE_TOKEN>

Expected

<S_CODE_TOKEN>

I thought that   `Child.getFragment('child')`  equal 

<S_CODE_TOKEN>
",mikhail-riabokon,2015-11-12 21:40:44
593,2015-11-13 19:58:48,"**Please read the docs** - this is covered in [Data Masking](http://facebook.github.io/relay/docs/thinking-in-relay.html#data-masking). If you want to access `id` and `name` in the `Parent` component, _just request them_:

<S_CODE_TOKEN>
",josephsavona,2015-11-12 21:40:44
593,2015-11-13 20:06:49,"But `Child` component definition and its fragments are in issue description (search for ""class Child extends Component"") and it looks reasonable to me? Parent just gives the child its props, without knowing what they are, using getFragment. I am just an onlooker to this issue, but also curious to hear the solution for this kind of simple array fetching, haven't used relay yet.
",plievone,2015-11-12 21:40:44
593,2015-11-13 20:16:22,"@josephsavona Thank you for the article. I already read it. But I still have problems. If I changed `Parent` render method and will render  `Child` Relay Container instead of `Child.jsx` I got a warning

<S_CODE_TOKEN>

So If I want to fetch data for children, and did not declare that children should have in `Parent` relay container, I should pass `Child` in `RootContainer` and render that in `Parent`?

Could you share an example of Relay and GraphQL, without `graphql-relay``  usage? Thank you in advanced. 
",mikhail-riabokon,2015-11-12 21:40:44
593,2015-11-13 21:07:40,"Ohhhh, that error makes the problem clear. `Parent` is not passing data to `Child` with the correct prop.

Incorrect:

<S_CODE_TOKEN>

Correct:

<S_CODE_TOKEN>
",josephsavona,2015-11-12 21:40:44
593,2015-11-13 22:02:12,"Thanks, now I see it! So the spread was the culprit, and in the `Child` one should use `this.props.child.name` instead of `this.props.name`, didn't see that. Hopefully this clears the issue. :)
",plievone,2015-11-12 21:40:44
593,2015-11-14 07:33:10,"@josephsavona Thank you a lot.
",mikhail-riabokon,2015-11-12 21:40:44
592,2015-11-12 19:41:04,"I'm am getting an error whenever I attempt to submit a mutation: `Relay: Warning: RelayMutation: Expected prop `customer` supplied to `UpdateCustomerEmailMutation` to be data fetched by Relay. This is likely an error unless you are purposely passing in mock data that conforms to the shape of this mutation's fragment.warning`

Additionally, if I attempt to submit the mutation through GraphiQL it works as intended. However, the response I get back from the server when submitting the mutation through relay is different (it doesn't contain the email of the customer in this example). 

Is there something missing in my relay mutation?

<S_CODE_TOKEN>

Component:

<S_CODE_TOKEN>

My [schema.json](https://gist.github.com/chrissm79/28b95536d26396252e63)

<img width=""1512"" alt=""screen shot 2015-11-12 at 12 32 17 pm"" src=""https://cloud.githubusercontent.com/assets/1976169/11128951/21458d02-893a-11e5-97db-874d65603766.png"">

<img width=""1589"" alt=""screen shot 2015-11-12 at 12 33 20 pm"" src=""https://cloud.githubusercontent.com/assets/1976169/11128952/214836f6-893a-11e5-88c9-8f7d6be148f9.png"">
",chrissm79,2015-11-12 20:42:19
592,2015-11-12 20:42:19,"As the error message says, you're currently not fetching the data for the mutation anywhere. This error should go away when you include the customer fragment of the mutation in your Relay container like this:

<S_CODE_TOKEN>

Please prefer other channels for questions or problems so we keep the github issues for likely bugs or enhancements (for options see http://facebook.github.io/relay/support.html )
",kassens,2015-11-12 20:42:19
591,2015-11-12 15:16:34,"Just keepin' it fresh.
",taion,2015-11-12 19:15:28
591,2015-11-12 16:18:43,"Thanks for updating!

@facebook-github-bot import
",kassens,2015-11-12 19:15:28
591,2015-11-12 16:26:30,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/139176626441819/int_phab to review.
",facebook-github-bot,2015-11-12 19:15:28
590,2015-11-12 10:08:39,"Both RelayContainer#state and RelayContainer#pending have this non-alphabetical ordering throughout this file.
",plievone,2015-11-12 16:25:54
590,2015-11-12 15:57:44,":+1: 

@facebook-github-bot shipit
",kassens,2015-11-12 16:25:54
590,2015-11-12 16:07:22,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1642752945981075/int_phab to review.
",facebook-github-bot,2015-11-12 16:25:54
589,2015-11-12 07:41:27,"I could make a PR based on this: https://github.com/denvned/isomorphic-relay/blob/v0.2.1/src/IsomorphicRenderer.js

Currently, `_runQueries` is an async operation, so it should not be called during server side rendering. That's why I moved it to `componentDidMount`, which is not called on the server.

`isDataReady` checks if the data has been already fetched (current implementation is not so important, and might be replaced). If the data is available, initialize with a preloaded state, otherwise with an empty state.

What do you think?
",denvned,2016-05-10 15:59:42
589,2015-11-12 17:10:54,"Great work on `isomorphic-relay`! It is _very_ similar to the API we've been exploring internally, and we'd love to have support for this in Relay proper:

<S_CODE_TOKEN>

It would be relatively simple to change `RelayRenderer` to support synchronously rendering the component when its props contained data created by `Relay.prepare`. Basically: if those props are present, render synchronously, otherwise fetch data.

Any interest in submitting a PR? :-)
",josephsavona,2016-05-10 15:59:42
589,2015-11-12 18:16:35,"Thanks! Sure, I'll be glad to submit a PR.

How about triggering synchronous rendering in `RelayRenderer` by passing it a `ReadyState` received from `Relay.prepare`?

I think, the first render on the client should also be synchronous, otherwise server side rendered DOM will not match DOM after the first render on the client (it will be just `<noscript data-reactid=...></noscript>`), so React will not reuse it, also there will be flickering at page load. That's why, I think that data on the client should also be prepared before the first render.
",denvned,2016-05-10 15:59:42
589,2015-11-12 18:37:08,"Good point, injecting the data from the server into the client's network layer means we can't synchronously render on the client. It might be reasonable to adjust the above such that `Relay.prepare` resolves with `{props, data, error}`, to be used on the client as:

<S_CODE_TOKEN>
",josephsavona,2016-05-10 15:59:42
589,2015-11-12 19:03:06,"In _isomorphic-relay_, on the client I use [`storePreloadedData`](https://github.com/denvned/isomorphic-relay/blob/v0.2.1/src/storePreloadedData.js) to inject prepared data. It uses `DliteFetchModeConstants.FETCH_MODE_PRELOAD` and `RelayPendingQueryTracker.resolvePreloadQuery` as suggested [here](https://github.com/facebook/relay/issues/36#issuecomment-130402024).

I like the symetry of `storePreloadedData` to corresponding [`loadAndStoreData`](https://github.com/denvned/isomorphic-relay/blob/v0.2.1/src/loadAndStoreData.js), which is used on the server.

`queryResults` produced by `loadAndStoreData` on the server and consumed by `storePreloadedData` on the client, is an object with the keys corresponding to the keys in `querySet`, and the values are response payloads corresponding to these queries.

What about incorporating a similar implementation?
",denvned,2016-05-10 15:59:42
589,2015-11-12 19:22:16,"The [README](https://github.com/denvned/isomorphic-relay/blob/v0.2.1/README.md) contains info about how `storePreloadedData` and `loadAndStoreData` are used.
",denvned,2016-05-10 15:59:42
589,2015-11-12 20:36:25,"Yeah, `isomorphic-relay`'s design is very, very similar to what we're considering. It's primarily a name change:
- `Relay.prepare` corresponds to `loadAndStoreData`
- `Relay.injectPreparedData` corresponds to `storePreloadedData` 

But the implementation can also be simplified. `injectPreparedData` can use internal methods (`RelayStoreData#handleQueryPayload`), which means there's no need for a special network layer on the client. Also note that a single query from the route may ultimately execute as multiple queries, so it's important to record queries and results at the right point.

Below is a more complete API specification - we'd happily accept contributions along these lines!

<S_CODE_TOKEN>
",josephsavona,2016-05-10 15:59:42
589,2015-11-12 20:37:22,"cc @yungsters 
",josephsavona,2016-05-10 15:59:42
589,2015-11-13 06:43:47,"Sorry for delays. I wish I were in the same time-zone as you.

> But the implementation can also be simplified. `injectPreparedData` can use internal methods (`RelayStoreData#handleQueryPayload`), which means there's no need for a special network layer on the client.

`storePreloadedData` do not require any special network layer on the client already. But probably yes, calling `RelayStoreData#handleQueryPayload` directly could simplify it, i.e. make it synchronous.

> Also note that a single query from the route may ultimately execute as multiple queries

Do you just mean that Component-route pair can resolve to multiple `RelayQuery.Root`s? Yes, I am aware of that. We can get all of these `RelayQuery.Root`'s with a call to `Relay.getQueries(Component, route)`, right?

> The main challenge here is determining a suitable injection point, an injected network layer would be the easiest place, but ideally `prepare` would not require one.

Yeah, _isomorphic-relay_ [intercepts](https://github.com/denvned/isomorphic-relay/blob/v0.2.1/src/InterceptingNetworkLayer.js) calls to `NetworkLayer#sendQueries` (it supports any network layer supplied by the user, including `Relay.DefaultNetworkLayer`).

But probably a better place to intercept queries is right in the `RelayDataStore#handleQueryPayload`, we could supply an interceptor by calling something like `RelayDataStore#injectQueryPayloadInterceptor((query, payload) => {...})`. Is that ok?
",denvned,2016-05-10 15:59:42
589,2015-11-13 10:45:14,"Seems like that to recreate a `RelayQuery` on the client we need not only `ConcreteQuery`, but also a route name and variables. So, `PreparedData` should probably be extended:

<S_CODE_TOKEN>

Then the implementation of `injectPreparedData` might be:

<S_CODE_TOKEN>

It mostly works, but there is a problem: when I tried to `JSON.stringify` a `ConcreteQuery` on the server to send it to the client, it throwed `TypeError: Converting circular structure to JSON`...
",denvned,2016-05-10 15:59:42
589,2015-11-13 15:50:18,"> Do you just mean that Component-route pair can resolve to multiple RelayQuery.Roots? Yes, I am aware of that. We can get all of these RelayQuery.Root's with a call to Relay.getQueries(Component, route), right?

More than that: plural root fields (`nodes[ids: [""a"", ""b""])`) may be split into multiple singular root fields, and any top-level query may be split into an arbitrary number of required query + split deferred queries (not supported by the OSS network layer yet, but we use this internally).

> But probably a better place to intercept queries is right in the RelayDataStore#handleQueryPayload, we could supply an interceptor by calling something like RelayDataStore#injectQueryPayloadInterceptor

This seems reasonable for an initial implementation, and we can discuss details more on the PR.

> Seems like that to recreate a RelayQuery on the client we need not only ConcreteQuery, but also a route name and variables.

Yeah it seems that way, but it actually isn't necessary. `RelayQueryRoot` objects can be serialized to plain objects/arrays via the `toGraphQL.Query(relayQuery)` function. This function creates a description of the query in which any non-matching route-conditional fragments have been removed, and in which all variables are inlined. The return value is a plain object compatible with the `ConcreteQuery` flow type. On the client this can be revived with `fromGraphQL.Query(concreteQuery)`, and the outward shape/values of the query will match the original.
",josephsavona,2016-05-10 15:59:42
589,2015-11-13 18:55:53,"> More than that: plural root fields (nodes[ids: [""a"", ""b""])) may be split into multiple singular root fields, and any top-level query may be split into an arbitrary number of required query + split deferred queries (not supported by the OSS network layer yet, but we use this internally).

Now I see. I have found that deferred queries are split here: https://github.com/facebook/relay/blob/v0.5.0/src/legacy/store/GraphQLQueryRunner.js#L162-L170
But where are plural root fields split?

And as far as I understand, we have to match intercepted split queries with the original ones returned by `Relay.getQueries` for given `Component` and `route`. Does a splitted query store any reference to the original query?

P.S.
Does it make sense to execute deferred queries on the server? Or they should be ignored somehow?
",denvned,2016-05-10 15:59:42
589,2015-11-13 19:05:18,"`diffRelayQuery` also splits plural queries [here](https://github.com/facebook/relay/blob/c437b2733740d86889637f40472c9df57b4fac4d/src/traversal/diffRelayQuery.js#L101-L107).

> And as far as I understand, we have to match intercepted split queries with the original ones returned by Relay.getQueries

There's no need to match up the queries and results from the server with those on the client. So long as the `variables` used on the client match those on the server (i.e. you're not relying on the browser environment, time, etc), the client will generate identical queries to the server. That means the client will be able to fulfill its queries synchronously from the cache (so long as the user calls `injectPreparedData`).

> p.s. Does it make sense to execute deferred queries on the server?

That's a good question - this should be configurable by the product as it can have a significant impact on initial load time. In the case that the server does not prepare deferred data, the client will be able to render without it (it doesn't wait for deferred data) and then send requests for the additional deferred data.
",josephsavona,2016-05-10 15:59:42
589,2015-11-13 19:46:42,"> There's no need to match up the queries and results from the server with those on the client.

Sorry, I was not clear. I meant matching on the server. It will serve multiple requests in parallel (`Relay.prepare` is asynchronous), so how will it know which intercepted query results send in response to which requests? We know that the `querySet` returned by `Relay.getQueries` belong to the current request, but what about split queries?
",denvned,2016-05-10 15:59:42
589,2015-11-13 20:01:08,"The server just has to record the (query, response) pairs written to `handleQueryPayload`, it doesn't have to match anything up to the queryset.
",josephsavona,2016-05-10 15:59:42
589,2015-11-13 20:11:36,"But how will we know to which HTTP-request this intercepted (query, response) pair belong?
",denvned,2016-05-10 15:59:42
589,2015-11-13 20:19:57,"Probably, intercepting in `RelayDataStore#handleQueryPayload` is not so good idea...
",denvned,2016-05-10 15:59:42
589,2015-11-13 21:13:33,"> But how will we know to which HTTP-request this intercepted (query, response) pair belong?

This isn't necessary. If the server records all pairs of (query, response) that are written to the store and injects this data on the client, then the client won't even need to make network requests. Intercepting `handleQueryPayload` seems reasonable here.
",josephsavona,2016-05-10 15:59:42
589,2015-11-14 04:55:12,"> then the client won't even need to make network requests.

And this is how _isomorphic-relay_ already works. But I was talking about server side only.

Consider a hypothetical implementation of `Relay.prepare`:

<S_CODE_TOKEN>

Note that multiple requests might be processed concurrently because `Relay.prepare` is asynchronous, so `queryPayloadSubscriber` might receive (query, payload) pairs belonging to other requests. The question is how could `isQueryBelongToThisRequest(query)` be implemented?

In _isomorphic-relay_ I just check if the `query` is in the `querySet` returned by `Relay.getQueries`, and it works well when deferred query support is not enabled in the network layer. BTW, looks like `diffRelayQuery` [is not called](https://github.com/facebook/relay/blob/v0.5.0/src/legacy/store/GraphQLQueryRunner.js#L87-L104) in the force fetch mode, so there is no split of plural queries in that mode, is that correct?
",denvned,2016-05-10 15:59:42
589,2015-11-14 15:27:06,"Ohhh - you're assuming one global Relay context shared amongst multiple HTTP requests, and trying to distinguish which query/payload goes with which. I'm assuming that we can have a unique Relay context per HTTP request - see #558 which is moving along rapidly.
",josephsavona,2016-05-10 15:59:42
589,2015-11-15 14:03:30,"Local Relay context would be a blessing. I have been able to use some enhancements from #558 in _isomorphic-relay_ already, but with some hacks: https://github.com/denvned/isomorphic-relay/blob/v0.3.0/src/prepareData.js Probably, we can consider that as a prototype of `Relay.prepare`.

And https://github.com/denvned/isomorphic-relay/blob/v0.3.0/src/injectPreparedData.js as a prototype of `Relay.injectPreparedData`.
",denvned,2016-05-10 15:59:42
589,2015-11-17 06:58:43,"Working on the PR now. I hope to make it ready this week.
",denvned,2016-05-10 15:59:42
589,2015-11-20 13:57:39,"> It would be relatively simple to change `RelayRenderer` to support synchronously rendering the component when its props contained data created by `Relay.prepare`. Basically: if those props are present, render synchronously, otherwise fetch data.

I thought a lot about this recently, and came to the conclusion that passing special properties to `RelayRenderer` to trigger synchronous rendering should be avoided. The problems are:
- The properties should be passed to the `RelayRenderer` not only on the server, but also on the client. If the properties are produced by `Relay.prepare` on the server, then the user have to implement not only transfer of the `data`, but also the `props` to the client. This is already complicated. And we must consider that there might be multiple instances of `RelayRenderer` on the page.
- If user passed the `props` to the `RelayRenderer` to trigger synchronous render on the server or the client, but the data required to perform render is not actually loaded to the store (as a result of an user or technical error), then the behaviour is undefined. That is too much error-prone and unpredictable.

Instead, we could simply make `RelayRenderer` to check if the data is already in the store when it mounts, and if data is ready then render, otherwise send the queries later, from the `componentDidMount` method, which is not called on the server, to insure that we don't asynchronously send queries on the server.

The question is how we will implement it.

`GraphQLQueryRunner` can be used to check if the data is already cached in the store. But the problem is that, while it checks the cache synchronously, it calls the callback with the result only on the next tick (using `resolveImmediate(...)`) anyway. So, currently, `GraphQLQueryRunner` can not be used to check the cache synchronously.

Also, in the server-side rendering mode, `RelayRenderer` should be able to check the cache, but not send queries at all. `GraphQLQueryRunner` do not allow that currently.

But, it is not too hard to modify `GraphQLQueryRunner` to make it possible to use it to check the cache synchronously, and make sending the queries an optional operation.

I've already experimented with it by making `GraphQLQueryRunner` a consumable object instead of a contextual singleton. So, instead of `storeData.getQueryRunner(querySet, callback)`, it can be used as:

<S_CODE_TOKEN>

Is it OK if I will work on the PR along these lines?
",denvned,2016-05-10 15:59:42
589,2015-11-20 16:16:43,"> Instead, we could simply make RelayRenderer to check if the data is already in the store when it mounts, 

This is conceptually simple, but RelayRenderer checks the cache asynchronously (after mount) explicitly because that operation can be expensive and block rendering.

> But, it is not too hard to modify GraphQLQueryRunner to make it possible to use it to check the cache synchronously, and make sending the queries an optional operation.

There are existing functions in Relay for synchronously checking if the results of a query are cached - there's no need to refactor the QueryRunner API for this.

> Is it OK if I will work on the PR along these lines?

`RelayRenderer` and `GraphQLQueryRunner` are part of the critical path for application startup and we can't support PRs making major changes to these APIs. We need to find a solution that requires minimal changes to RelayRenderer and has near-zero impact on its initialization in the case that the user is _not_ bootstrapping server props on the client.
",josephsavona,2016-05-10 15:59:42
589,2015-11-20 17:41:51,"> `RelayRenderer` checks the cache asynchronously (after mount)

That is not quite true. Currently, `RelayRenderer` runs queries before rendering, [from the constructor](https://github.com/facebook/relay/blob/v0.5.0/src/container/RelayRenderer.js#L125), and `GraphQLQueryRunner` checks cache by performing `diffQueries` [synchronously](https://github.com/facebook/relay/blob/v0.5.0/src/legacy/store/GraphQLQueryRunner.js#L89-L97), and I believe that this is the most expensive operation. So, if cache check could block rendering, then it does that already.

(I am aware, that there are also asynchronous calls to `checkRelayQueryData`, but I believe that this operation is not as expensive as `diffQueries`, furthermore, it actually redundant when `diffQueries` have been already performed, i.e. it makes sense only for force fetch mode. And there is an asynchronous call to `storeData.readFromDiskCache` when disk cache manager is enabled, but it is not usable for synchronous cache checking anyway.)

> There are existing functions in Relay for synchronously checking if the results of a query are cached - there's no need to refactor the QueryRunner API for this.

Yes, but there is a problem. If we check cache aside from `GraphQLQueryRunner`, and after that run queries using `GraphQLQueryRunner`, then cache check is performed twice - by us, and by `GraphQLQueryRunner`. And as you said, cache check could be expensive.

> We need to find a solution that requires minimal changes to RelayRenderer and has near-zero impact on its initialization in the case that the user is not bootstrapping server props on the client.

Fortunately, changes to `RelayRenderer` that I propose don't change its API at all, and are backward compatible with the existing behaviour except that they make synchronous rendering possible when data is cached. Also these changes have near-zero impact on its initialization, because as I said above, currently, cache is already synchronously checked before rendering (it just doesn't have a chance to do initial render using that cached data, because `onReadyStateChange` callback is always called by `GraphQLQueryRunner` asynchronously, i.e. after the initial render).

Also, if any changes to the API of `GraphQLQueryRunner` are banned, then I could just minimally extend it to add support for synchronous cache check while maintaining full backward compatibility with the existing API.
",denvned,2016-05-10 15:59:42
589,2015-11-22 15:23:55,"Here is my work on isomorphic `RelayRenderer`: https://github.com/denvned/relay/commits/isomorphic-renderer

It uses #625 as a base.

@josephsavona as you suggested I added to `RelayRenderer` a property that triggers synchronous render, and I didn't touch `GraphQLQueryRunner`. The property is a boolean named `prepared`. If the property is set, `RelayRenderer` initializes its state by checking the store cache. If all the data is already in the store and the force fetch mode is not used, then it doesn't send any queries. If only deferred data is missing, then it renders with available required data, and sends queries to fetch the remaining deferred data.

So, it is enough to set the `prepared` property to switch on the isomorphic mode in `RelayRenderer`:

<S_CODE_TOKEN>

But you should examine the source to see the details. It looks pretty solid for me.

Is that good for a PR?

TODO: tests for the new mode.
",denvned,2016-05-10 15:59:42
589,2015-12-03 03:23:12,"Hi @josephsavona, I am currently working on a project that will need this feature; and wondering if the above mentioned PR is a feasible solution?  or what needs to be done to make progress on this feature? and thanks @denvned for your work :+1: 
",willopez,2016-05-10 15:59:42
589,2015-12-30 04:03:20,"> Yeah it seems that way, but it actually isn't necessary. RelayQueryRoot objects can be serialized to plain objects/arrays via the toGraphQL.Query(relayQuery) function. 

@josephsavona , @yungsters Looks like it is not possible anymore because of https://github.com/facebook/relay/commit/a26c8b4703adb3ae1b28421fdd06a9b7e8140f85. Is it possible to revert that commit back? It will be hard to implement `Relay.prepare`, as discussed above, without `toGraphQL`. Also [isomorphic-relay](https://github.com/denvned/isomorphic-relay), which many people use, already actively [uses](https://github.com/denvned/isomorphic-relay/blob/v0.4.0/src/prepareData.js#L20) `toGraphQL`.
",denvned,2016-05-10 15:59:42
589,2015-12-30 05:58:51,"@denvned Sorry about that. I have a revision awaiting internal review that will bring this back.
",yungsters,2016-05-10 15:59:42
589,2015-12-30 08:28:35,"@yungsters please add a note about `toGraphQL` method, that it used for isomorphic apps, for debugging and logging. Its removing should be prevented in future.
",nodkz,2016-05-10 15:59:42
589,2015-12-31 05:17:50,"@yungsters Thanks for bringing `toGraphQL` back!
",denvned,2016-05-10 15:59:42
589,2016-05-10 15:59:41,"This has been implemented as `Relay.ReadyStateRenderer`. @denvned can you confirm that there's nothing left to do here?
",josephsavona,2016-05-10 15:59:42
589,2016-05-13 16:36:28,"@josephsavona In _isomorphic-relay_ I have managed to implement [`IsomorphicRelayRenderer`](https://github.com/denvned/isomorphic-relay/blob/v0.7.0-beta.0/src/IsomorphicRenderer.js) that does not use Relay private API anymore, thanks to `Relay.ReadyStateRenderer`. So, yeah, this specific issue is probably solved.

But some other parts of _isomorphic-relay_ still have to use few Relay internals, namely `toGraphQL.Query`, `fromGraphQL.Query` and `RelayStoreData#handleQueryPayload`. Any ideas how we would replace these with public API? Would [GraphMode](https://github.com/facebook/relay/issues/967) help with this?
",denvned,2016-05-10 15:59:42
589,2016-05-13 16:46:59,"> But some other parts of isomorphic-relay still have to use few Relay internals, namely `toGraphQL.Query`, `fromGraphQL.Query` and `RelayStoreData#handleQueryPayload`

@denvned thanks for confirming. We should add public methods for serializing/deserializing queries (the to/fromGraph stuff). `handlQueryPayload` is now accessible via `RelayEnvironment#getStoreData()#handleQueryPayload`.
",josephsavona,2016-05-10 15:59:42
589,2016-05-13 16:53:17,"> `handlQueryPayload` is now accessible via `RelayEnvironment#getStoreData()#handleQueryPayload`.

I know, but is `RelayStoreData` a public API? `getStoreData()` is still marked with `@internal` in the [sources](https://github.com/facebook/relay/blob/v0.8.1/src/store/RelayEnvironment.js#L101).
",denvned,2016-05-10 15:59:42
588,2015-11-12 06:14:12,"I have a `RANGE_DELETE` mutation. Suppose it is called `deletedCommentId` and represents comments that were deleted from the comments connection of an article node.

Without optimistic updates, it works as expected. I can delete one or more comments, the server returns:

<S_CODE_TOKEN>

and they are removed from the connection as expected.

However, when I return an optimistic update from the mutation, the optimistic update only works when there is one comment. Either way I return an array, but the optimistic update only works when there is one element in the array. If there are multiple comment IDs in the `deletedCommentId` array, the update only takes hold when the response from the server arrives. That response contains the same exact comment IDs as returned by `getOptimisticResponse()`.

Could this be a bug? I am sorry I am not familiar enough with the tests to write one.
",dminkovsky,2016-12-16 16:50:35
588,2015-11-12 16:47:00,"This sounds like it could be a bug. It's definitely odd since we handling optimistic and server payloads almost identically. 

@yuzhi any chance you can look into this?
",josephsavona,2016-12-16 16:50:35
588,2015-11-12 18:11:29,"@dminkovsky
To make debugging easier, can you copy paste the config for your mutation and the optimistic payload?
",yuzhi,2016-12-16 16:50:35
588,2015-11-12 18:16:40,"Thanks @yuzhi.

I could do that, but I am guessing to really make it worth your while to spend time on this, I should 
provide a little working project that shows a complete round trip. 

I am working toward a deadline now; but this is important for me. I'm sure you wouldn't mind if I get back to you in a few days?
",dminkovsky,2016-12-16 16:50:35
588,2015-11-12 19:00:19,"Just the config and optimistic payload will be plenty for me to start.
If I am still having trouble then I might ask for a small test case.
",yuzhi,2016-12-16 16:50:35
588,2015-11-12 19:39:24,"Sure, thank you. Here you go:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

And then actual responses look like this (see screenshot of corresponding `console.logs` out optimistic responses below):

**Singe item**

Relay doesn't need wait for this response to process the optimistic payload. The UI is updated immediately and then this response arrives some time later.

<S_CODE_TOKEN>

**Multiple items**

Relay only updates the UI once this response arrives.

<S_CODE_TOKEN>

`getOptimisticResponse()` returns the following for these two payloads, respectively:

![screen shot 2015-11-12 at 2 37 28 pm](https://cloud.githubusercontent.com/assets/218725/11128976/071fe9de-894b-11e5-881d-0482b530f2e2.png)

I just found out that 0.5 came out yesterday. I am on 0.4.
",dminkovsky,2016-12-16 16:50:35
587,2015-11-11 23:11:11,,kassens,2015-11-11 23:35:30
587,2015-11-11 23:11:18,"@facebook-github-bot import
",kassens,2015-11-11 23:35:30
587,2015-11-11 23:17:09,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/836146246504881/int_phab to review.
",facebook-github-bot,2015-11-11 23:35:30
586,2015-11-11 23:06:59,"Is there a way to upload array of files?

<S_CODE_TOKEN>

Would it make sense to improve FileMap type to something like this: 

<S_CODE_TOKEN>
",oguzbilgic,2016-02-08 22:25:21
586,2016-01-10 20:50:53,"@oguzbilgic Neat idea. Would you mind opening a PR?

You could work around this today by passing in an array to your mutations constructor and mapping each file to a unique key in `getFiles`, but it seems useful to be able to take advantage of the built-in support for arrays in the browser and web servers.
",devknoll,2016-02-08 22:25:21
586,2016-02-08 22:25:20,"Thanks for filing this issue @oguzbilgic!

This is important, so I'm going to fold it into #538, which is about overhauling the mutations API. (It will be easier to manage with the various interrelated mutations issues in a single place.)
",wincent,2016-02-08 22:25:21
586,2016-06-14 23:11:43,"@oguzbilgic were you able to find a solution for this?
",eugenehp,2016-02-08 22:25:21
586,2016-08-09 17:12:48,"@oguzbilgic also interested to hear if you found a solution 👍 
",chrise86,2016-02-08 22:25:21
586,2016-11-30 15:54:14,"I think a file map makes more sense, should use the filename in the key and disregard it on server",sibelius,2016-02-08 22:25:21
585,2015-11-11 22:37:18,"Getting this error with Relay 0.5.0:

<S_CODE_TOKEN>

Everything worked fine with 0.4.0. I have the latest GraphQL and React.

Not sure what info you need to debug or if the issue is on my side and 0.4.0 is more tolerant...let me know what you need.
",LegNeato,2015-11-12 01:08:05
585,2015-11-11 22:50:59,"@LegNeato can you paste your route definition?
",josephsavona,2015-11-12 01:08:05
585,2015-11-11 22:58:17,"I'm using `react-router` and `react-router-relay` so there is likely magic going on under the hood I am not aware of. This is how I have it configured anyway, not sure it helps...

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",LegNeato,2015-11-12 01:08:05
585,2015-11-11 23:13:51,"@LegNeato what browser are you using? Relay checks the function length to see whether it takes arguments - your query definition (`(Component) => Relay.QL`...``) takes an argument, but the fn.length check seems to be returning 0 instead of 1.
",josephsavona,2015-11-12 01:08:05
585,2015-11-11 23:18:11,"Could you paste what the code looks like transformed? Maybe it's the way the arrow function is transformed in your pipeline that breaks this detection?
",kassens,2015-11-12 01:08:05
585,2015-11-11 23:20:33,"@josephsavona latest Chrome. Attached is a (crappy) screenshot with values from the debugger.

<img width=""1787"" alt=""screen shot 2015-11-11 at 3 19 42 pm"" src=""https://cloud.githubusercontent.com/assets/368904/11106016/ac547fba-8887-11e5-88cf-98eaa4c45814.png"">
",LegNeato,2015-11-12 01:08:05
585,2015-11-11 23:22:35,"From the screenshot, it appears that `queryBuilder` is a function with zero arguments. Can you paste the transformed code for your route? 
",josephsavona,2015-11-12 01:08:05
585,2015-11-11 23:28:27,"The call to `isDeprecatedCallWithArgCountGreaterThan(queryBuilder, 0)` is supposed to return false since your `queryBuilder` has 1 argument. `queryBuilder` is the arrow function defined here in your code:

<S_CODE_TOKEN>

...and it has 1 argument. How does the arrow function look like transformed?
",kassens,2015-11-12 01:08:05
585,2015-11-11 23:30:51,"<S_CODE_TOKEN>

FWIW I'm using pretty standard babel (5, not 6) and webpack AFAIK. But I am a JS n00b :-D.
",LegNeato,2015-11-12 01:08:05
585,2015-11-11 23:36:55,"<img width=""753"" alt=""screen shot 2015-11-11 at 3 36 15 pm"" src=""https://cloud.githubusercontent.com/assets/368904/11106314/fed3e724-8889-11e5-83c5-d827abd41155.png"">
",LegNeato,2015-11-12 01:08:05
585,2015-11-11 23:42:48,"`children` here has 2 elements, and one is not a `Field` (it is a `RelayFragmentReference`) which appears to make the `children.every()` fail.

<img width=""732"" alt=""screen shot 2015-11-11 at 3 42 14 pm"" src=""https://cloud.githubusercontent.com/assets/368904/11106415/d32795e8-888a-11e5-94b7-0bbc63c08e55.png"">
",LegNeato,2015-11-12 01:08:05
585,2015-11-11 23:45:48,"This looks like a problem with `react-router-relay` - the function `onboarding_data` is being wrapped as

<S_CODE_TOKEN>
",josephsavona,2015-11-12 01:08:05
585,2015-11-11 23:59:00,"Cool, do you want me to close this out or is it a behavior/expectation change that needs to be reverted in relay?
",LegNeato,2015-11-12 01:08:05
585,2015-11-12 00:04:41,"I think I just need to update this on my side.
",taion,2015-11-12 01:08:05
585,2015-11-12 00:14:19,"Although I am curious what changed.
",taion,2015-11-12 01:08:05
585,2015-11-12 00:38:24,"This is expected behavior for Relay; `react-relay-router` shouldn't wrap the query builder (`(Component) => Relay.QL`). The change in Relay was to remove support for a deprecated form of query builders that accepted 3 arguments (not used in open source).
",josephsavona,2015-11-12 01:08:05
585,2015-11-12 00:41:29,"@taion We previously allowed argument-less query builders to have fragments, but this doesn't make sense. The stricter check is here: https://github.com/facebook/relay/commit/c9baf7f19a05b20bed6474d14fdbc8e3111e913e#commitcomment-14343423
",josephsavona,2015-11-12 01:08:05
585,2015-11-12 00:45:52,"Thanks! I'm going to roll this fix on my side into part of a broader fix now that I have some new APIs available on the React Router side as well. Should have this fixed soon.
",taion,2015-11-12 01:08:05
585,2015-11-12 00:51:46,"@LegNeato for your case the shorthand version might fix your immediate issue (at least for this case):

<S_CODE_TOKEN>
",kassens,2015-11-12 01:08:05
585,2015-11-12 01:08:05,"Sounds good, i'll close this out but feel free to continue the discussion here.
",josephsavona,2015-11-12 01:08:05
584,2015-11-11 20:08:05,,kassens,2015-11-11 21:37:50
584,2015-11-11 20:10:53,"@facebook-github-bot import
",kassens,2015-11-11 21:37:50
584,2015-11-11 20:14:14,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/632986330177760/int_phab to review.
",facebook-github-bot,2015-11-11 21:37:50
583,2015-11-11 19:24:19,"Need to include 12139c8 for the release.
",kassens,2015-11-11 19:45:38
583,2015-11-11 19:24:29,"@facebook-github-bot import
",kassens,2015-11-11 19:45:38
583,2015-11-11 19:31:38,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1008790432476940/int_phab to review.
",facebook-github-bot,2015-11-11 19:45:38
582,2015-11-11 18:46:26,"Test Plan:

<S_CODE_TOKEN>
",kassens,2015-11-11 19:18:04
582,2015-11-11 18:46:36,"@facebook-github-bot import
",kassens,2015-11-11 19:18:04
582,2015-11-11 18:50:16,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1049327768434397/int_phab to review.
",facebook-github-bot,2015-11-11 19:18:04
582,2015-11-11 19:18:04,"Was part of 12139c8da15fbdf2d3a2d13cf5baf0cc5983309e
",kassens,2015-11-11 19:18:04
581,2015-11-11 18:06:27,"One of the most important aspects of `RelayQueryRequest` and `RelayMutationRequest` are that they extend `Deferred` which gives them the `resolve` and `reject` methods (among others). Documentation is missing this important detail.

Example: https://facebook.github.io/relay/docs/interfaces-relay-query-request.html
",yungsters,2016-02-08 22:26:34
581,2016-02-08 22:26:34,"I'm going to fold this into a checklist in #538, which is about overhauling the mutations API. (It will be easier to manage with the various interrelated mutations issues in a single place.)
",wincent,2016-02-08 22:26:34
580,2015-11-11 17:40:16,,kassens,2015-11-11 18:25:31
580,2015-11-11 17:40:28,"@facebook-github-bot import
",kassens,2015-11-11 18:25:31
580,2015-11-11 17:46:09,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/933372516755825/int_phab to review.
",facebook-github-bot,2015-11-11 18:25:31
579,2015-11-11 08:12:35,"Fixes issues with transpiling graphql queries code with babel 6.x as described in #533 
",amenuor,2015-11-21 00:56:50
579,2015-11-11 08:14:12,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-11-21 00:56:50
579,2015-11-11 09:05:25,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-11-21 00:56:50
579,2015-11-13 14:44:51,"@amenuor @joshuaevenson - Any news on this? It seems to be failing at:

<S_CODE_TOKEN>
",leebenson,2015-11-21 00:56:50
579,2015-11-13 15:41:26,"@leebenson of course the build fails. To have that work correctly the whole project need to be updated to use babel 6. 
I have looked briefly into it and it is quite a major change. 
I can work on it if needed since I started this...
",amenuor,2015-11-21 00:56:50
579,2015-11-13 16:30:44,"@amenuor I included you on this since you kindly submitted a PR, but this is more a prompt for FB re: next steps for fix + merge. Babel 6.x seems to be gaining traction, and I imagine this is quickly going to become a roadblock to adoption.
",leebenson,2015-11-21 00:56:50
579,2015-11-13 16:43:49,"Ah ok :) Let me know if I can help.
",amenuor,2015-11-21 00:56:50
579,2015-11-17 06:53:04,"This is definitely becoming a roadblock. :+1: to getting this merged in.
",jwaldrip,2015-11-21 00:56:50
579,2015-11-17 15:21:50,"@amenuor this PR only contains changes to the files in `lib/`, which are generated. Can you commit the changes to the original `src/` files?
",josephsavona,2015-11-21 00:56:50
579,2015-11-17 18:35:09,"@josephsavona as I stated also in the issue #533 this code is mostly for guidance.
I just focused on how to make it work for the projects I am working on which depend on this plugin.
For simplicity I just modified the output of the generated files. However, from that it should be quite straightforward to modify the source files.

I will check later today if you got this to work, if not I will work on the source files.
Let's get it done :)
",amenuor,2015-11-21 00:56:50
579,2015-11-18 00:21:08,"@josephsavona I have checked-in the major changes to have this plugin working on babel6.

I have had some issues with es6 Spread operator. Somehow it doesn't work on babel6 (it gives Syntax errors) or I couldn't make it work. Based on http://babeljs.io/repl/ (which still run babel 5.x) I have defined an _extends function and use that instead. Not elegant but it seems to work.

I receive several errors when trying to run the tests and check that everything is actually fine.
Flow doesn't like several hundreds statements in /node_modules/*
Jest complains about some syntax errors related to destructuring assignments as far as I can see...

However, the plugin builds fine... we just need to verify that it actually works :)
I do not have so much experience with Flow and Jest, so if you have maybe you can figure this out faster than I can?
",amenuor,2015-11-21 00:56:50
579,2015-11-18 09:13:35,"@amenuor for rest/spread, make sure you're including `babel-plugin-syntax-object-rest-spread` in package.json and in your plugins config, as well as `babel-plugin-transform-object-rest-spread` to actually do the _extend transform.
",leebenson,2015-11-21 00:56:50
579,2015-11-18 18:53:00,"@leebenson well spotted! :) Now it works correctly.
@josephsavona I have checked in the changes, and all tests pass on the plugin side. The build is still failing because of two main issues:

1) the main relay package is not supporting babel6 yet. I only worked on the babel-relay-plugin. I could help also on the main package if needed.
2) Flow gives 7000+ errors. I haven't looked much into it yet, but it seems to be related to the new packages in node_modules (as for instance babel-core). 
",amenuor,2015-11-21 00:56:50
579,2015-11-21 00:56:42,"If you're on master, babel-relay-plugin should work out of the box with babel 6 as of ba004a4. We'll upgrade the examples, tests, etc to use babel 6 at a later date.
",josephsavona,2015-11-21 00:56:50
579,2015-11-21 00:57:44,"@amenuor thanks for your help with this!
",josephsavona,2015-11-21 00:56:50
579,2015-11-21 02:08:50,"@josephsavona glad I could help :)
",amenuor,2015-11-21 00:56:50
578,2015-11-11 05:51:21,"Currently, `prepareVariables` is only called when creating the fragments: https://github.com/facebook/relay/blob/v0.4.0/src/container/RelayContainer.js#L836-L838

Specifically, the variables injected into the component on `props.relay.variables` never include the effects of `prepareVariables`: https://github.com/facebook/relay/blob/v0.4.0/src/container/RelayContainer.js#L470-L471, https://github.com/facebook/relay/blob/v0.4.0/src/container/RelayContainer.js#L488-L492.

Is this intentional?
",taion,2016-05-09 22:50:23
578,2015-11-17 18:05:09,"@yungsters  @josephsavona thoughts?
",yuzhi,2016-05-09 22:50:23
578,2016-03-27 14:28:14,"Anything on this?
",shaimo,2016-05-09 22:50:23
578,2016-04-11 12:29:35,"I have faced same issue on my side.I think we should have preparedVariables in `this.props.relay.variables` unless there is a good reason for not to do so.
",mailaneel,2016-05-09 22:50:23
578,2016-04-11 14:17:06,"Having `props.variables` be the prepared values seems reasonable. We'd be open to accepting pull-requests to change this.
",josephsavona,2016-05-09 22:50:23
578,2016-05-09 22:51:27,"Yay
",taion,2016-05-09 22:50:23
577,2015-11-11 03:59:09,"`fbjs-scripts` 0.5 hasn't been shipped yet but tested locally with `npm link`

cc @DmitrySoshnikov 
",zpao,2015-12-04 18:20:28
577,2015-11-11 04:15:04,"@zpao do you mind importing this? lgtm
",josephsavona,2015-12-04 18:20:28
577,2015-11-11 06:40:29,"Will do in the AM. Would like to make sure https://github.com/facebook/fbjs/pull/80 is right before shipping 0.5
",zpao,2015-12-04 18:20:28
577,2015-11-11 19:51:11,"@facebook-github-bot import
",zpao,2015-12-04 18:20:28
577,2015-11-11 20:05:54,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/787308811395226/int_phab to review.
",facebook-github-bot,2015-12-04 18:20:28
577,2015-12-03 00:44:24,"I got into a state where tests weren't passing but all cleared up now. I split out the changes to the actual `require` statements since @DmitrySoshnikov is doing that separately - this will go in after.

@facebook-github-bot import
",zpao,2015-12-04 18:20:28
577,2015-12-03 00:54:31,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/787308811395226/int_phab to review.
",facebook-github-bot,2015-12-04 18:20:28
576,2015-11-10 18:48:19,"Fixed a grammar typo in documentation.
",rojobuffalo,2015-11-10 19:25:56
576,2015-11-10 19:05:59,"@facebook-github-bot shipit
",josephsavona,2015-11-10 19:25:56
576,2015-11-10 19:10:59,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1488384751463311/int_phab to review.
",facebook-github-bot,2015-11-10 19:25:56
575,2015-11-10 18:09:27,"There is return an other promise in sendQueries function. When you do 

<S_CODE_TOKEN>

you resolve request's promise, but you don't return it further. So we have problem in upper functions which wait for resolving or rejecting promise in sendQueries.
",ErrorPro,2015-11-11 04:25:30
575,2015-11-11 04:25:30,"I'm going to close this because we don't want to move forward with the code as written, but feel free to continue the discussion or if you come up with an alternate approach and update the branch.
",josephsavona,2015-11-11 04:25:30
574,2015-11-10 14:40:35,"Possible improvement for #542

Lot's of issues and misunderstanding with that one, range add mutations can be confusing with the current warning messages.

Better solution as @steveluscher said:
- When relay does not query the new edge because it was not included in the intersection of tracked and fat queries, show a different warning saying it's a client-side problem ( Connection was never used in the app )
- If the edge was queried but is not in the payload, explain it's a server side problem.

In `handleRangeAdd`, if the edge is missing from the payload, check if the operation `RelayQueryMutation` contained the newEdge field. If it didn't, it means the new edge was not included because it wasn't in the intersection of the tracked/fat query. If it did, it means the server should've returned that field and didn't.

I've added a function `getNodeByFieldName` to check if the operation contained the field to get the new edge. Not sure if it is the best way to check that, let me know.

The actual warning messages probably need some work, let me know what you think would be the best messages for these cases.
",xuorig,2016-03-09 03:10:31
574,2015-11-10 15:56:06,"cc @steveluscher @kassens 
",josephsavona,2016-03-09 03:10:31
574,2015-11-10 18:34:59,"Thank you!!! :heart: 
",devknoll,2016-03-09 03:10:31
574,2015-11-18 18:18:12,"@josephsavona @kassens any comments on this ? Would be helpful to add that in :dancers: 
",xuorig,2016-03-09 03:10:31
574,2015-12-08 01:54:32,"Thanks for your patience on this. It's taken us a long time to get to it, I know. Here's what we're thinking.

To recap, these are two distinct cases.
1. If the query includes the field but the response payload doesn't, it indicates a server error (the server should have returned `null` if it can't fetch a field).
2. If the query **doesn't** include the field, it indicates that the _range configs_ do not account for the tracked fields. Since this is a problem with the query rather than the response payload, what do you think about _moving_ this warning out of the writer and into `RelayMutationQuery`, making it clear that the problem is range behaviors in RANGE_ADD not matching up with what the application is actually querying for by way of a helpful and well-written error message?
",steveluscher,2016-03-09 03:10:31
574,2015-12-17 05:10:02,"@steveluscher sorry for the wait, (finals week 😪) I have updated the PR with what you have recommended. I make the check in `buildFragmentForEdgeInsertion`. If the newEdge is not present in `mutatedFields` after it's been populated, we can assume `rangeBehaviors` was not matching the trackedConnection and we can warn.

Should this be an invariant or keep it as a warn ? Let me know if this is what you had in mind!
",xuorig,2016-03-09 03:10:31
574,2015-12-17 16:47:11,"Thanks for updating this! We should also remove the warning in `writeRelayUpdatePayload` (and just return if appropriate).
",josephsavona,2016-03-09 03:10:31
574,2015-12-17 16:50:59,"Shouldn't we keep the current warning in the case where the server is not returning the newEdge ?
",xuorig,2016-03-09 03:10:31
574,2015-12-17 16:52:19,"We should keep warning if the _server_ doesn't return the edge, but only if we asked for the edge and didn't get it. The warning currently still occurs even if no range behaviors matched.
",josephsavona,2016-03-09 03:10:31
574,2015-12-17 16:56:14,"Ah you're right! Updated the PR to address your comments.
",xuorig,2016-03-09 03:10:31
574,2015-12-17 17:08:44,"A few more nits, but otherwise this looks great :-)
",josephsavona,2016-03-09 03:10:31
574,2016-01-06 00:20:26,"Thanks for your patience, @xuorig. We just went over this internally, and I'd like to share a summary of our discussion. I wrote:

> Let me try to work through this to make sure I understand it.
> 
> Client devs have the option of configuring a RANGE_ADD config or not. If they do configure one, it's likely because they expect it to be of use.
> 
> Now, if you've specified a RANGE_ADD config, there are tracked connections that match, but none of them match your rangeBehaviors, it's because you have a connection in your app with arguments that you haven't accounted for in your RANGE_ADD config. This is the aim of the warning, to say “hey… we found at least one tracked connection for that parentID/connectionName combination, but we couldn't find an associated rangeBehavior – did you forget to configure one?”
> 
> > @yungsters: …this warning … can be triggered [if] the key does not have a range behavior defined.
> 
> Interesting. To fallback by refetching the whole connection is good (and what the code does now if you don't have a matching range behavior) but one of the nice things about RANGE_ADD configs is to prevent refetching and to enable optimistic mutations. When you miss a rangeBehavior, you lose all of that without warning.

What if we changed the warning to indicate that the entire connection has been refetched and that the developer can't expect optimistic mutations to work, with a little bit about how to write a more efficient and optimism-compatible mutation. Something like:

> “Relay.Mutation: Since the connection `ships(orderby:""latest"")` of the field `faction` with id `123` matched none of the rangeBehaviors specified in your `RANGE_ADD` config, the entire connection has been refetched. Configure a range behavior for this connection to fetch only the new edge and to enable optimistic mutations. See http://… for more information.”

The only problem here is that there's no way for the developer to squelch this warning if their desired behavior _was_ to refetch the connection. Thoughts, @yuzhi @xuorig @yungsters?
",steveluscher,2016-03-09 03:10:31
574,2016-01-06 01:12:22,"I discussed with @yuzhi a bit. Currently, setting a range behavior configuration to `null` means the range should not be refetched at all. I think we should change this to `IGNORE` instead of `null`.

We can add a `REFETCH` or `ALL` constant to squelch the warning.
",yungsters,2016-03-09 03:10:31
574,2016-01-06 14:37:00,"Correct me if I'm wrong but If the desired behavior was to refetch the connection, why would there be a `RANGE_ADD` then ? wouldn't you use something like `REQUIRED_CHILDREN` instead ?

> We can add a REFETCH or ALL constant to squelch the warning.

That would definitly help remove any ambiguity about the behavior.
",xuorig,2016-03-09 03:10:31
574,2016-01-07 03:08:31,"A `RANGE_ADD` may be an `APPEND` for some but `REFETCH` for others (e.g. if a particular argument causes sorting that can only be determined by the server).
",yungsters,2016-03-09 03:10:31
574,2016-01-10 23:02:34,"@steveluscher @yungsters I propose that we change the warning message to something like @steveluscher proposed, where we clearly state which connection wasn't found in the rangeBehaviors. 

In another PR we can address the `REFETCH` / `ALL`  and `IGNORE` behaviors ? I would gladly work on a solution for this too.
",xuorig,2016-03-09 03:10:31
574,2016-01-11 03:12:50,"I have modified the PR with the message @steveluscher proposed. I think this might be a good first step to clear up the small confusion people have with `RANGE_ADD` mutations.
",xuorig,2016-03-09 03:10:31
574,2016-03-07 22:45:36,"@facebook-github-bot import
",yungsters,2016-03-09 03:10:31
574,2016-03-07 23:13:25,"Thanks for importing. If you are an FB employee go to [Phabricator](https://our.intern.facebook.com/intern/opensource/github/pull_request/763408933802637/int_phab) to review.
",facebook-github-bot,2016-03-09 03:10:31
573,2015-11-09 20:36:46,"Hi, 
I implemented the mutation on app side, now the example not only can add ship from `POST` requests but also from the app its self.
",bfwg,2016-03-01 06:42:38
573,2015-11-09 20:43:05,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2016-03-01 06:42:38
573,2015-11-09 20:45:57,"@jabagawee 
Oh I forgot to change it back to ""react-relay"": ""file:../../"",
",bfwg,2016-03-01 06:42:38
573,2015-11-09 20:47:48,"me? i think you meant to mention someone else here
",jabagawee,2016-03-01 06:42:38
573,2015-11-09 20:49:26,"@josephsavona 
Oh I forgot to change it back to ""react-relay"": ""file:../../"",
@jabagawee 
Sorry, my eyes isn't working today :P
",bfwg,2016-03-01 06:42:38
573,2015-11-09 20:55:46,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2016-03-01 06:42:38
573,2015-11-10 03:12:21,"@kassens or @steveluscher can you take a look?
",josephsavona,2016-03-01 06:42:38
573,2016-01-04 23:00:38,"Sorry for the delay. This is a great start!

I've inlined some comments. You'll have to rebase after you take care of them. Also, do a quick once over of the code for missing trailing commas and alpha ordered properties in object literals. I'll do another round of feedback with you when you're done!
",steveluscher,2016-03-01 06:42:38
573,2016-03-01 06:42:38,"I've rebased this and addressed all feedback in #892.
",yungsters,2016-03-01 06:42:38
572,2015-11-09 17:49:35,"Builds on #569. Part of #558

As part of the bundle of changes, RelayRecordStore (and its users) became implicitly dependent on a singleton RelayStoreData. This PR removes that dependency by moving ID canonicalization into RelayStoreData proper.

_edit_: This could probably use tests.
",devknoll,2015-11-13 19:10:31
572,2015-11-09 18:16:49,"@facebook-github-bot import
",josephsavona,2015-11-13 19:10:31
572,2015-11-09 18:29:05,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/993755083980474/int_phab to review.
",facebook-github-bot,2015-11-13 19:10:31
572,2015-11-12 17:13:42,"Can this be merged into the commit that introduced the implicit dependency? You took my advice and went the other extreme - so many PRs! :-)
",josephsavona,2015-11-13 19:10:31
572,2015-11-12 20:30:49,":+1: Won't be able to get to it until the evening though.
",devknoll,2015-11-13 19:10:31
572,2015-11-12 20:38:59,"@devknoll no worries!
",josephsavona,2015-11-13 19:10:31
572,2015-11-13 03:14:55,"@josephsavona let me know if this works
",devknoll,2015-11-13 19:10:31
572,2015-11-13 03:24:20,"Awesome, that helps to confirm that my changes are compatible. Note that I also had to refactor `RelayPendingQueryTracker` because the pending query map was module-global (same issue as `RelayMutationTransaction`). This PR is all good to go, just waiting on internal review of my changes.
",josephsavona,2015-11-13 19:10:31
572,2015-11-13 03:26:18,":+1: Good catch
",devknoll,2015-11-13 19:10:31
572,2015-11-13 19:15:06,"@devknoll nice job on this!
",josephsavona,2015-11-13 19:10:31
572,2015-11-13 19:16:23,"Ha, thanks for cleaning it all up, too :smile: 
",devknoll,2015-11-13 19:10:31
572,2015-11-13 19:33:47,";-)
",josephsavona,2015-11-13 19:10:31
571,2015-11-09 17:26:26,"`RelayQueryWriter` currently traverses _all_ fragments when processing a payload and attempts to write their fields, regardless of whether the result type and fragment type actually match. For fields with an abstract/union type, we should instead only follow fragments whose type matches the actual result type.

Example:

<S_CODE_TOKEN>

We should only write the results for the fragment on type ""A"".
",josephsavona,2015-11-19 02:55:29
571,2015-11-09 17:26:48,"@facebook-github-bot import
",josephsavona,2015-11-19 02:55:29
571,2015-11-09 17:28:44,"partly addresses #539 
",josephsavona,2015-11-19 02:55:29
571,2015-11-09 17:29:16,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1517416231884619/int_phab to review.
",facebook-github-bot,2015-11-19 02:55:29
570,2015-11-09 10:23:46,"Builds on #569. Part of #558

This is actually just a PoC until `RelayContext` is implemented. With this PR, `RelayStoreData. getDefaultInstance` has been completely removed and `RelayStore` turned into a class.

The last steps here are to pass an instance of `RelayStore` via the context and remove the (temporary) `RelayStore.getDefaultInstance` calls.
",devknoll,2015-11-16 06:06:32
570,2015-11-09 10:42:14,"Whoops, just realized `RelayRecordStore` needs some love too. I'll open another PR that fixes both `RelayRecordStore` and `RelayMutation`. But first, sleep :wink: 
",devknoll,2015-11-16 06:06:32
570,2015-11-09 18:25:46,"Alright, with the latest passing commit, all singleton state (with the exception of tests) should be pushed out to the React layer. I think at this point we just need to define `RelayContext` and the upgrade path.
",devknoll,2015-11-16 06:06:32
570,2015-11-09 19:02:56,"This is awesome!!! Regarding the upgrade path: existing public APIs must continue to work as-is, which means that `RelayStore` must export an object with the same shape as before (`forceFetch`, `primeCache` etc methods). 

At the same time, we also  need to transition RelayRenderer and RelayContainer over to accessing the store instance via `this.props.relay`. A good approach might be something like:
- Create a `RelayContext` class that has instance methods to  match the current RelayStore static methods
- Define RelayStore as an exported instance of RelayContext
- Make RelayRenderer set the `relay` context value to `RelayStore`
- Make RelayContainer access the store via context.

That means everything will technically be contextual on the inside, while still having the same outward API. Then we can deprecate RelayStore, expose RelayContext, and document all this :-)
",josephsavona,2015-11-16 06:06:32
570,2015-11-09 19:36:16,"@josephsavona What about the `injectBatchingStrategy` in `RelayContainer`? Should this just move to the `RelayContainer` constructor?
",devknoll,2015-11-16 06:06:32
570,2015-11-09 19:40:38,"how about moving it to RelayRenderer?
",josephsavona,2015-11-16 06:06:32
570,2015-11-09 19:42:42,"And then make this a public method on the new RelayContext (e.g. `RelayContext.prototype.injectBatchingStrategy`)
",josephsavona,2015-11-16 06:06:32
570,2015-11-09 20:22:33,"Something like that?

Next up is cleaning up the `_getStoreData` calls... but, later. I'll let you catch up :wink: 
",devknoll,2015-11-16 06:06:32
570,2015-11-10 07:26:17,"See `RelayDeferredFragmentState` for an example of what I meant.

Rather than adding a bunch of public API methods, it exposes the state (`hasFragmentData` and `getFragmentError`) for deferred query operations. Then you call `createDeferredFragmentState` if you want one.

The last non-test use of `_getStoreData()` is `GraphQLFragmentPointer.createForRoot` in `RelayRenderer`...
",devknoll,2015-11-16 06:06:32
570,2015-11-10 08:37:30,"And then there were none!
",devknoll,2015-11-16 06:06:32
570,2015-11-10 15:51:24,"So good! I'll have more comments as I work my way through the stack of PRs
",josephsavona,2015-11-16 06:06:32
570,2015-11-10 16:06:36,":+1: definitely a WIP so don't be afraid to be brutal :wink:
",devknoll,2015-11-16 06:06:32
570,2015-11-12 09:44:38,"I've rebased this on top of the latest changes. I need to look back through to make sure I didn't accidentally bash over any important changes that landed in master (already fixed one instance of this...) but that'll have to wait.
",devknoll,2015-11-16 06:06:32
570,2015-11-13 01:38:53,"@devknoll I would recommend rebasing this after #572 closes. The best bet to avoid conflicting changes from earlier commits might be to just pull over all the changes starting with ""Move the garbage collector API into RelayStore"" onto a new branch off master. Obviously no rush :-)
",josephsavona,2015-11-16 06:06:32
570,2015-11-13 03:43:25,"There's a lot to review here! My main feedback is that the changes should be sequenced in a way that doesn't rely on exposing a ""private"" API temporarily - we shouldn't need `RelayContext#_getStoreData` ever. There are a few steps to this:
1. Clean up the interdependencies between the core modules - for example RelayStoreData creates a GraphQLQueryRunner, which accepts a RelayStoreData instance. RelayStoreData shouldn't pass a reference itself to any submodule, instead it should pass only the things that module needs (ex: pass just a pending query tracker to query runner)
2. At this point almost nothing should be calling `RelayStoreData.getDefaultInstance()`. Now we can create `RelayContext`: this should have public methods for everything needed by RelayRenderer and RelayContainer. For example, instead of RelayContainer creating a `GraphQLStoreQueryResolver`, we should have a `RelayContext#createResolver(fragment, id)` method. Now RelayStoreData.getDefaultInstance can be replaced, and instead we can have a default RelayContext instance that holds a RelayStoreData object.
3. Finally, convert to passing the instance of RelayContext via react context instead of using the singleton.
",josephsavona,2015-11-16 06:06:32
570,2015-11-13 03:52:45,":+1: 
",devknoll,2015-11-16 06:06:32
570,2015-11-13 04:24:41,"Hmm...

So the issue I see with number 1 is that most modules (like `GraphQLQueryRunner`) require references to other objects (like `RelayPendingQueryTracker`) in _addition_ to `RelayStoreData` itself (for functions like `readFromDiskCache`).

Any particular way you'd like to deal with situations like that?

_edit_: It looks like there's actually a fairly common pattern. Going to do some experimenting, please hold. :smile: 
",devknoll,2015-11-16 06:06:32
570,2015-11-13 04:50:48,"Gooe point about needing access to those functions, this is definitely pretty involved. If you don't mind, I may go ahead and experiment with this. 
",josephsavona,2015-11-16 06:06:32
570,2015-11-13 05:08:12,"Go for it :+1: 

I'm looking at `GraphQLQueryRunner`. If we defined these:

<S_CODE_TOKEN>

And then did this:

<S_CODE_TOKEN>

We gain a lot of types... but avoid leaking `RelayStoreData` and possibly make it a little easier to refactor it down later on...
",devknoll,2015-11-16 06:06:32
570,2015-11-13 06:10:20,"Here's a more complete example of what I meant: https://github.com/devknoll/relay/commit/733c0a16de9bc439d376526b31e4110806cf778d
",devknoll,2015-11-16 06:06:32
569,2015-11-09 08:41:50,"Builds on #568. Part of #558
",devknoll,2015-11-12 22:37:16
569,2015-11-09 08:52:18,"Incredible work, how many peoples under @devknoll user? )))
",nodkz,2015-11-12 22:37:16
569,2015-11-09 18:16:20,"@facebook-github-bot import
",josephsavona,2015-11-12 22:37:16
569,2015-11-09 18:28:57,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/331002523737099/int_phab to review.
",facebook-github-bot,2015-11-12 22:37:16
569,2015-11-12 22:37:16,"merging into #572
",josephsavona,2015-11-12 22:37:16
568,2015-11-09 08:03:16,"Builds on #567. Part of #558
",devknoll,2015-11-12 17:32:59
568,2015-11-09 17:31:27,"@devknoll I'll be importing these internally and recreating your stack of commits to isolate each change, bear with me.
",josephsavona,2015-11-12 17:32:59
568,2015-11-09 18:16:07,"@facebook-github-bot import
",josephsavona,2015-11-12 17:32:59
568,2015-11-09 18:28:39,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/175866139428304/int_phab to review.
",facebook-github-bot,2015-11-12 17:32:59
568,2015-11-12 17:32:59,"merging this with #565 
",josephsavona,2015-11-12 17:32:59
567,2015-11-09 07:16:04,"Builds on #566. Part of #558
",devknoll,2015-11-12 22:37:11
567,2015-11-10 18:31:44,"@facebook-github-bot import
",josephsavona,2015-11-12 22:37:11
567,2015-11-10 18:40:23,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1525177804464729/int_phab to review.
",facebook-github-bot,2015-11-12 22:37:11
567,2015-11-12 22:37:11,"merging into #572
",josephsavona,2015-11-12 22:37:11
566,2015-11-09 02:12:40,"Builds on #565. Part of #558

@josephsavona ~~It seemed important that `GraphQLStoreRangeUtils` continue converting IDs -> broadcast IDs, for non-`RelayStoreData` users like `GraphQLStoreQueryResolver`. That said, since `GraphQLStoreQueryResolver` also relies on `RelayStoreData`, maybe that could change.~~ _edit:_ nvm.

I think it might make sense to rename `GraphQLStoreRangeUtils` to `GraphQLStoreRangeData`... let me know what you think.
",devknoll,2015-11-12 22:37:08
566,2015-11-09 18:15:40,"@facebook-github-bot import
",josephsavona,2015-11-12 22:37:08
566,2015-11-09 18:28:49,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/924510137596644/int_phab to review.
",facebook-github-bot,2015-11-12 22:37:08
566,2015-11-12 22:37:07,"merging into #572
",josephsavona,2015-11-12 22:37:08
565,2015-11-09 00:38:05,"Builds on #562. Part of #558
",devknoll,2015-11-12 22:02:20
565,2015-11-09 18:15:33,"@facebook-github-bot import
",josephsavona,2015-11-12 22:02:20
565,2015-11-09 18:28:37,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1667923220159441/int_phab to review.
",facebook-github-bot,2015-11-12 22:02:20
565,2015-11-12 04:53:48,"See comments on https://github.com/devknoll/relay/commit/3f654dc3028fdc9654020b894af376763900ee36. Also, would you mind rebasing now that the first 3 commits have landed?
",josephsavona,2015-11-12 22:02:20
565,2015-11-12 07:45:55,"@josephsavona Looks like all of those changes were made, just in a later commit (99ead02) and PR

_edit_: This is suuuuper confusing, haha. Let me rebase and see if 99ead02 can be moved to this PR.
",devknoll,2015-11-12 22:02:20
565,2015-11-12 08:29:28,"@josephsavona Done. Rebased on master and rearranged the commits for the `GraphQLStoreQueryResolver` changes to come first.

I'll go back and get the rest of the PRs updated now.
",devknoll,2015-11-12 22:02:20
565,2015-11-12 16:44:57,"awesome, i'll land these together
",josephsavona,2015-11-12 22:02:20
564,2015-11-08 20:03:27,"I've got a controlled React form backed by the Relay store. The UI for this form has no explicit ""save"" functionality. Changes should be persisted as the user updates the form. I was investigating how I might debounce this interaction because the user can trigger many mutations per second by interacting with this form. 

First I tried `_.debounce` on the the handler that triggers `Relay.Store.update(mutation)`. But that prevented optimistic updates from occurring which was a non-starter with the controlled from components. 

The optimistic update, however, happens very soon after the call to `Relay.Store.update()`, inside the `RelayMutationTransaction` constructor. Inside that constructor you also find the mutation transactions getting queued up. This seems like a pretty good place to do debouncing: if debouncing is enabled, the transaction is queued up but the subsequent call to `.commit()` is ignored and the transaction is eventually dequeued and the transaction is de-queued unless no new mutations of this same type come in after the debounce wait time.

Something similar could work for throttling.

I am guessing this will not be popular because debouncing and throttling, I've gathered, are not popular. But I don't want to change my form's UI to require the user to explicitly trigger the mutation. Also, I looked at solving this issue by implementing a custom network layer, but that seems to be at odds with the whole transaction mechanism. Wouldn't it be weird to have my custom network layer just ignore some transactions?
",dminkovsky,2015-11-09 16:32:30
564,2015-11-09 16:32:30,"@dminkovsky This is a great idea. We'd like to support the option to skip pending mutations with the same collision key instead of enqueueing them. There's an open issue at #550 discussing this, let's continue discussion there.
",josephsavona,2015-11-09 16:32:30
564,2015-11-10 04:39:36,"Thank you @josephsavona. Sorry I didn't find that issue. 
",dminkovsky,2015-11-09 16:32:30
563,2015-11-08 09:25:32,"All the examples use graphql-relay-js on server
Can I handle graphql server without graphql-relay-js and use relay on client ?
Situation if one client use only graphql api and another client use relay to get data how to handle it ?
",ButuzGOL,2015-11-09 20:06:17
563,2015-11-09 16:14:34,"Thanks for your question! I have an answer for you, but we want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",josephsavona,2015-11-09 20:06:17
563,2015-11-09 20:07:02,"Done https://stackoverflow.com/questions/33617319/graphql-relay-graphql-relay-js-dependency
",ButuzGOL,2015-11-09 20:06:17
562,2015-11-08 00:08:22,"Builds on #561. Part of #558
",devknoll,2015-11-12 02:30:31
562,2015-11-09 00:04:01,":+1: 
",josephsavona,2015-11-12 02:30:31
562,2015-11-09 18:15:26,"@facebook-github-bot import
",josephsavona,2015-11-12 02:30:31
562,2015-11-09 18:28:47,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/138793229812829/int_phab to review.
",facebook-github-bot,2015-11-12 02:30:31
562,2015-11-12 02:35:39,"@devknoll I have a follow-up that should land soon to address the remaining module-scope state.
",josephsavona,2015-11-12 02:30:31
561,2015-11-07 23:48:11,"Builds on #560. Part of #558
",devknoll,2015-11-11 02:03:24
561,2015-11-09 18:15:14,"@facebook-github-bot import
",josephsavona,2015-11-11 02:03:24
561,2015-11-09 18:28:59,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1003655709697168/int_phab to review.
",facebook-github-bot,2015-11-11 02:03:24
560,2015-11-07 21:05:58,"@josephsavona Is this more along the lines of what you're looking for?

Part of #558
",devknoll,2015-11-10 19:10:29
560,2015-11-07 21:23:10,"Yeah, this is great!
",josephsavona,2015-11-10 19:10:29
560,2015-11-07 21:23:56,"@facebook-github-bot import
",josephsavona,2015-11-10 19:10:29
560,2015-11-07 21:36:04,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/760698680724493/int_phab to review.
",facebook-github-bot,2015-11-10 19:10:29
560,2015-11-07 22:25:50,"@devknoll this is definitely on the right track in terms of splitting up the changes incrementally. I'll review in more detail when I'm at a computer. 
",josephsavona,2015-11-10 19:10:29
560,2015-11-10 19:13:39,"nice job - see the final commit, i made a few minor changes
",josephsavona,2015-11-10 19:10:29
559,2015-11-07 20:32:57,"# Relay Core API

The current (public) Relay API is primarily focused on high-level integration with React via RelayContainer and RelayRenderer. Internally at Facebook, we make use of Relay internals in a variety of ways, notably to implement several variations on server ""rendering"" and for GraphQL subscriptions. We've also experimented with things like running parts of Relay in a web worker.

These types of features are currently somewhat difficult to implement in open source due to the restricted set of functionality exposed in the public API. This issue is to track work toward a new, more modular public API. We plan to strike a balance between overly monolithic and overly decomposed, and split Relay into two main parts:
- Relay Core: imperative API for fetching, observing, and updating data.
- React/Relay: React integration in the form of `RelayContainer` and `RelayRenderer`, implemented purely in terms of the public Relay Core API.
## Goals

Our goal with this approach is to enable more experimentation in user space, while retaining the ability to efficiently fetch data for entire view hierarchies in a single round trip.

Examples of things that should be possible with this new API:
- Server rendering (or pre-fetching data on the server and rendering on the client).
- Implementing real-time updates (subscriptions) in user-space.
- Offline persistence.
- Implementing your own alternatives to RelayContainer/RelayRenderer.
- Using Relay Core with non-React view libraries.

As mentioned, we're already doing some of these things internally: what's involved here is exposing more of the internal APIs in a slightly more user-friendly way, documenting them, and providing examples.
## Strawman API

Below is a possible list of core primitives along with examples of how they could be composed:
- readFragmentData - get the data for a fragment give some node id
- observeFragmentData - like read, but get notifications as data changes
- readQueryData - get the data for a query
- observeQueryData - like read, but get notifications of changes
- buildQueryFromFragment - turn a fragment into a query (useful for refetching select parts of data)
- canResolveQueryLocally - can a query be resolved from cached data?
- fetchQueryFromCache - load data from persisted storage. returns a payload that can be applied with `writeQueryPayload`
- fetchQueryFromNetwork(forceFetch) - fetch data from the network, optionally riffing against the cache. returns a payload that can be applied with `writeQueryPayload`
- sendOperation(operation) - send a mutation/subscription to the server, asynchronously get the response
- createOperation - given a mutation/subscription description and props, construct a mutation transaction
- createQuery - construct a runtime query descriptor from a Relay.QL expression
- createFragment - construct a runtime fragment descriptor from a Relay.QL expression
- writeQueryPayload(query, payload) - write data for a payload into the store, triggering notifications of observers on data that changes
- writeOptimtimisticOperationPayload(operation, payload, configs) - write an optimistic response to the store. would return a way to undo/revert the write.
- writeOperationPayload(operation, payload, configs) - write a mutation/subscription response directly to the main store
### Example: Fetching Data
- Check if the data can be fulfilled from the cache with `canResolveQueryLocally`.
- If not, fetch the data with `fetchQueryFromNetwork` and then apply the result with `writeQueryPayload`
- Render components, resolving their data with `readFragment` and setting up subscriptions with `observeFragment` to know when to update components
### Example: Ad-hoc Subscriptions
- Listen for server events e.g. via web sockets
- Apply updates via `writeOperationPayload`
### Example: Server-less Relay
- Create a schema description using the GraphQL schema definition language (`type User {name: String}`) so that you can compile Relay.QL queries
- Write data into the store with `writeQueryPayload` or `writeOperationPayload`
- Render components with `readFragment` and listen for updates with `observeFragment`.
## Tasks
- [ ] Implement the primitive methods described above
- [ ] Implement existing Relay functionality (especially RelayContainer/RelayRenderer) via the core methods
- [ ] TBD
",josephsavona,2016-12-20 17:41:26
559,2015-11-10 19:34:51,"> Get the set of queries from a Relay.Route & Relay.Container pair (getRelayQueries)

Where `Relay.Container` is defined as just the structure with `fragments`, `variables`, `initialVariables`, and `prepareVariables`, and not the React HOC, right?
",devknoll,2016-12-20 17:41:26
559,2015-11-10 19:40:22,"Yeah, something like `RelayContext.prototype.getQueries(new MyRoute(...), MyContainer)`
",josephsavona,2016-12-20 17:41:26
559,2015-11-10 19:55:31,"If it's separated from React, is there a better name for the data structure besides `Relay.Container`? Without the React component, there's not really anything being contained -- it's more of a query definition I guess...

_edit_: How about something like `QueryFragments` (to go along with `RelayQueryRoots`)?
",devknoll,2016-12-20 17:41:26
559,2015-11-11 05:14:50,"I see what you mean - the method to create a query set from route + container can probably live in react-relay, separate from core. 
",josephsavona,2016-12-20 17:41:26
559,2015-11-11 08:03:30,"Wait, it seems like it might be beneficial to have route + container\* config in core :smile: I just think the concept is broader than the React implementation.

Consider the previous mixin implementation, where it wasn't a Ho**C**, but still took some _fragments_ and a _route_ to generate a query set (as far as I know at least :wink:) At least to me it seems like a fundamental and common operation :smile: 

\* Probably just not called container. 
",devknoll,2016-12-20 17:41:26
559,2015-11-11 08:32:47,"I'm thinking that core should have a notion of a generic `DataContainer` that contains most of the logic for reading out data for fragments, observing changes to that data, updating variables, etc (all the stuff that Relay Container passes to the inner component). Then RelayContainer could be a lightweight wrapper over this.
",josephsavona,2016-12-20 17:41:26
559,2015-11-24 20:09:33,"I think this will really help `GraphQL` and `Relay` go to the next level. Not only helping adoption in `React` but also other libraries like `Vue.js` or `Angular`.

Could be great if are separated repos so we can reuse and port the code easily to other platforms. Python? Go? Swift?
Looking forward for seeing how this evolves!
",syrusakbary,2016-12-20 17:41:26
559,2016-01-05 04:20:55,"I created a PR recently (https://github.com/facebook/relay/pull/721) which is more or less a Implementation of @josephsavona `DataContainer`.

That PR is based on the current version of Relay, which means there is no clear notion of ""Relay Core"".  In that sense it doesn't resolve this issue here.
",andimarek,2016-12-20 17:41:26
559,2016-01-06 06:14:43,"I would like to help moving this topic forward, if possible:

For example we could start moving some aspects of `RelayContainer`, which are React independent into own modules (e.g. creation of the FragmentPointers/QuerSet).

I'm happy to create a PR for this.
What do you think?
",andimarek,2016-12-20 17:41:26
559,2016-01-06 07:20:39,"@andimarek thanks for your interest in this. Because this change is so fundamental to Relay, the core/react split is something that the Relay core team will be working on in the next few weeks and months (Note that we've documented in the roadmap which projects the core team is focusing on). We use Relay in a lot of complex ways (server rendering, deferred queries, disk caching, subscriptions, and prototypes of future enhancements) and ultimately we have the best context for making this change in a way that is compatible with these features and the projects that are using them. 

That said, we want to support the community in developing Relay integrations. The best way to contribute is exactly what you did in your PR: build an example integration via the current API, and find & document what's missing in order to achieve the integration more cleanly. 
",josephsavona,2016-12-20 17:41:26
559,2016-01-06 07:36:20,"@josephsavona Thanks for this quick response. I understand your position and that you want to make sure that those fundamental changes are going into the right decision.

Because my PR #721 will not be merged soon I might end up maintaining a temporary fork of relay to be able to use it without React. Of course I'm happy to contribute back the lessons learned. 
",andimarek,2016-12-20 17:41:26
559,2016-01-06 09:08:13,"@andimarek You might also want to take a look at how https://github.com/denvned/isomorphic-relay and https://github.com/relay-tools/react-router-relay are implemented - rather than fork Relay, an alternative is to simply [pull in the parts that you need](https://github.com/denvned/isomorphic-relay/blob/master/src/prepareData.js#L2-L4) from Relay.
",josephsavona,2016-12-20 17:41:26
559,2016-01-06 12:05:54,"@josephsavona Thanks for these hints... I will check it out.
",andimarek,2016-12-20 17:41:26
559,2016-01-16 07:59:38,"Fyi: Based on my PR (#721) I created a modified version Relay which is not longer dependent on React and provides a generic Container:

https://github.com/andimarek/generic-relay

I think this will be just a temporary project and will be deprecated once this Issue here is resolved. It's clearly marked as experimental and I have put a clear note on the beginning of the README, which links back to here. 

I hope to gain some more insights and maybe get some feedback from some early adopters about how to use Relay without React to help with this Issue here.
",andimarek,2016-12-20 17:41:26
559,2016-03-09 16:01:24,"Note: updated the description to reflect our current thinking. Feedback welcome!
",josephsavona,2016-12-20 17:41:26
559,2016-03-10 15:25:35,"@andimarek If you have time, it would be great to get your feedback on this proposal.
",josephsavona,2016-12-20 17:41:26
559,2016-03-11 07:57:37,"@josephsavona sure ... I will give feedback soon.
",andimarek,2016-12-20 17:41:26
559,2016-03-12 13:28:26,"@josephsavona Overall it looks very good.
As a general goal I would also hope that relay-core will be a new npm module, with no dependency on react. 

About the proposed API: I think it covers already a lot.

I am not so sure about the cache specific methods: It could be more a implementation detail of the core and only visible through some flag (e.g.`useCacheOnly`) instead of specific methods like `fetchQueryFromCache`.
Based on my `generic-relay` experiment and the integration in Angular the  API seems a bit more low-level than needed. (Not saying this is wrong: Better this way than a too high level API, imho).

The server-less rendering is great, because it will help to have a central Relay-Store even when some data is fetched over the network outside of Relay.

What about methods for all running queries/tasks? This could also be useful. 
",andimarek,2016-12-20 17:41:26
559,2016-07-06 01:25:39,"Any update/working progress on this?
",syrusakbary,2016-12-20 17:41:26
559,2016-07-06 01:35:20,"@syrusakbary: yes, check out [the meeting notes](https://github.com/facebook/relay/tree/master/meta/meeting-notes) in this repo. You'll find various references to ""prototype"", which all refer to our work on building out this new API.

No timeline yet for any of this stuff to be published, but we're working towards it and plan to provide more detail as we get closer. For now, the meeting notes are the best place to get a sense of what we're working on.
",wincent,2016-12-20 17:41:26
559,2016-07-06 02:30:00,"Thanks for the quick reply @wincent!
",syrusakbary,2016-12-20 17:41:26
559,2016-12-20 17:41:26,Rolling into #1369 ,josephsavona,2016-12-20 17:41:26
558,2015-11-07 20:11:33,"This is a meta-task to track progress toward making all Relay state contextual, such that multiple instances of Relay can be run in the same JS context. The primary motivation is to support server rendering in open source, where sharing JS contexts is the norm.

Tasks:
- [x] `GraphQLQueryRunner`
- [x] `GraphQLPendingQueryTracker` should write query results into the contextual RelayStoreData instance
- [x] `GraphQLDeferredQueryTracker`: should read query root IDs from the contextual RelayStoreData instance
- [x] `RelayMutationTransaction` should write mutation results into the contextual RelayStoreData instance
- [x] `GraphQLStoreRangeUtils` - this holds a global mapping of dataID -> range information, and will have to be made contextual. The primary caller is `readRelayQueryData`.
- [x] `GraphQLStoreChangeEmitter` notifies components (or other observers) of data when it changes.
- [x] Create RelayEnvironment
- [x] Make `RelayStore` a singleton instance of `RelayEnvironment`
- [x] Change `RelayContainer`/`RelayRenderer` to access data via the React context
- [x] Contextualize `RelayRenderer`
- [x] Make `Relay.injectTaskScheduler` a method on `RelayEnvironment`
- [x] Contextualize the network layer and `Relay.injectNetworkLayer`
- [x] Contextualize Relay mutations (cannot create props until the store to which it will be applied is known) (#699)

Note: the following will be completed as part of #559:
- [ ] ~~Document `RelayEnvironment`, make it accessible via `Relay.Environment` or other, and remove any unsupported APIs (or mark them as such).~~
- [ ] ~~Promote `RelayRenderer` to public API~~
",josephsavona,2016-03-09 13:45:15
558,2015-11-07 20:11:38,"cc @devknoll who's started experimenting with this in #557
",josephsavona,2016-03-09 13:45:15
558,2015-11-08 21:14:53,"> Optionally, Relay.injectTaskScheduler and Relay.injectNetworkLayer could be moved to the Relay Context class to allow different schedulers/network layers per context.

I think this is actually fairly critical for server side rendering.
",devknoll,2016-03-09 13:45:15
558,2015-11-08 21:23:21,"@josephsavona Do we want `RelayStore` to own the `RelayStoreData` instances? Seems like yes, but wanted to confirm.
",devknoll,2016-03-09 13:45:15
558,2015-11-08 21:32:17,"@josephsavona Also `GraphQLStoreRangeUtils` seems a little tough. Not sure who should own the instance in this case. Going to try keeping it in `RelayStoreData` and passing it down.
",devknoll,2016-03-09 13:45:15
558,2015-11-08 21:51:47,"The methods for injecting these should be on Relay.Store since that's public, but they should save the scheduler/network layer to RelayStoreData. 
",josephsavona,2016-03-09 13:45:15
558,2015-11-08 21:52:56,"Re RangeUtils, agree this map can be saved into StoreData. 
",josephsavona,2016-03-09 13:45:15
558,2015-11-08 22:37:58,"Looks like `GraphQLStoreChangeEmitter` depends on `GraphQLStoreRangeUtils` too. How should we approach that?
",devknoll,2016-03-09 13:45:15
558,2015-11-08 22:47:47,"I was on my phone earlier, so here's more context on each of the above

`GraphQLStoreChangeEmitter` also needs to be contextualized. It doesn't need to depend on `GraphQLStoreRangeUtils` - instead, `RelayStoreData` could be changed to call `changeEmitter.broadcastChangeForID` with an ID that is already in canonical form. `RelayStoreData` will own the range utils so this should be okay.

Re the distinction between `RelayStore` and `RelayStoreData` - in the interim, it's probably best to put all public methods on `RelayStore`, while holding and modifying all state in `RelayStoreData`. 
",josephsavona,2016-03-09 13:45:15
558,2015-11-08 22:55:56,"Super helpful, thanks :+1: 
",devknoll,2016-03-09 13:45:15
558,2016-01-10 10:23:13,"@josephsavona you can use this syntax to track subtasks:

<S_CODE_TOKEN>

Result:
- [ ] In progress
- [x] Done
",vslinko,2016-03-09 13:45:15
558,2016-03-03 15:07:39,"is there a timeline for release? I'd love to contribute, but finding the time to get up to speed with the internals would probably be longer than it'd take you to finish.
",leebenson,2016-03-09 13:45:15
558,2016-03-03 15:35:35,"Just a heads up that this and the react-relay/Relay core split will be my main area of focus for the next couple months. Contributions are welcome, but definitely reach out to us before starting a major PR in this area.
",josephsavona,2016-03-09 13:45:15
558,2016-03-03 15:37:09,"@leebensen there are always things that need attention. I'd recommend starting with a small task at first - take a look at issues tagged with ""good first bug""!
",josephsavona,2016-03-09 13:45:15
558,2016-03-07 16:58:50,"Heads up that we're renaming `RelayContext` to `RelayEnvironment`. It's common in Relay apps to render multiple `RelayRootContainer`s (e.g. one for each tab in a TabView), and `RelayContext` suggests an incorrect association with React contexts which are one-per-root component.
",josephsavona,2016-03-09 13:45:15
558,2016-03-09 13:45:15,"As of 8e53183bd4f323196a71f471d6275fe024706a66, all of Relay's internal state tracking has been contextualized. Each instance of `RelayEnvironment` is an isolated environment with its own cache of data, network layer, task scheduler, etc. This is an important prerequisite for server rendering in open source as well as allowing some new use cases. The next step is #559 - splitting Relay Core and the React/Relay integration layer - follow along there for more details.

Thanks especially to @denvned and @devknoll for their impressive contributions!
",josephsavona,2016-03-09 13:45:15
558,2016-03-09 14:27:05,"Awesome. Looking forward to it! :tada: 
",schickling,2016-03-09 13:45:15
558,2016-03-09 14:59:26,"Amazing work! Thanks @denvned, @devknoll, @josephsavona . :tada:
",rodrigopr,2016-03-09 13:45:15
558,2016-03-09 17:02:39,"Yeah!

On Wed, Mar 9, 2016 at 6:59 AM Rodrigo Ribeiro notifications@github.com
wrote:

> Amazing work! Thanks @denvned https://github.com/denvned, @devknoll
> https://github.com/devknoll, @josephsavona
> https://github.com/josephsavona . [image: :tada:]
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/558#issuecomment-194333793.
",KyleAMathews,2016-03-09 13:45:15
558,2016-03-12 12:38:20,"Great news. Big thanks to all the contributors!

![img](https://media.giphy.com/media/MOWPkhRAUbR7i/giphy.gif)
",koistya,2016-03-09 13:45:15
557,2015-11-07 06:15:48,"Opening PR just to track progress and interest, and promote feedback and discussion. The plan is to factor out Relay's global state.

...ignore the failing tests :smile: 
",devknoll,2015-11-07 23:47:43
557,2015-11-07 09:04:48,"@devknoll - great to see you're thinking about this! Moving away from singletons will have to be done incrementally to keep everything working in the interim, but we're happy to provide support and help guide you through these PRs.

I can share an internal doc that I wrote detailing the high-level steps for removing singletons and global state, will follow-up tomorrow. 
",josephsavona,2015-11-07 23:47:43
557,2015-11-07 09:33:58,":+1: That'd be super. My current plan is something along the lines of:

##### PR 1
- Convert singletons to classes with members
- Change internal Relay call sites to use a specified instance (w/ fallback)

##### PR 2
- Introduce `RelayContext` component
- Change singleton accessors to issue a deprecation warning

##### PR 3
- Remove singleton accessors

This should hopefully make the process relatively pain free allowing the changes to flow upstream...
",devknoll,2015-11-07 23:47:43
557,2015-11-07 19:42:38,"This is a great start. My overall feedback is that any singleton module that is converted to a class should export the class, and all call sites of that module should be updated to either instantiate an instance or be passed one from somewhere. To help understand the implications of each change and make this reviewable, would you mind sending one PR per module? 
",josephsavona,2015-11-07 23:47:43
557,2015-11-07 19:45:38,"Ahhh, sorry, wasn't ready yet :wink: I avoided changing exports to avoid an explosion of changes, and to ensure all of the existing tests would keep passing :smile: 
",devknoll,2015-11-07 23:47:43
557,2015-11-07 19:57:36,"Haha ok :-)

Feel free to keep iterating here while you're exploring, and I'll add comments and feedback. When you're ready let's split into separate PRs.
",josephsavona,2015-11-07 23:47:43
557,2015-11-07 20:11:04,"Can you clarify that you mean you want PRs at e.g. the `RelayMutationTransaction.js` level?
",devknoll,2015-11-07 23:47:43
557,2015-11-07 20:15:15,"They don't necessarily have to be exactly one PR per module, but try to think about ways to split it up into incremental changes. Note that `RelayStoreData` is where we are aggregating Relay state, so you can store instances of the new classes on RelayStoreData during the transition. For example if you convert `RelayPendingQueryTracker` to a class and need a place to store the instance (bc you haven't converted QueryRunner yet), you can store the RelayPendingQueryTracker instance in RelayStoreData.
",josephsavona,2015-11-07 23:47:43
557,2015-11-07 20:34:42,"@devknoll In addition to the previous issue to go with this PR, also take a look at #559 which describes our thoughts on drawing a clear boundary between Relay Core and the Relay/React integration. The proposed `RelayContext` there is a merge of the operations supported by the current `Relay.Store` and `RelayStoreData`.
",josephsavona,2015-11-07 23:47:43
557,2015-11-08 21:11:39,"Closed this to open smaller & more focused PRs.
",devknoll,2015-11-07 23:47:43
556,2015-11-07 00:11:44,,josephsavona,2015-11-07 00:45:30
556,2015-11-07 00:17:50,"@facebook-github-bot shipit
",josephsavona,2015-11-07 00:45:30
556,2015-11-07 00:29:34,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/435166260014637/int_phab to review.
",facebook-github-bot,2015-11-07 00:45:30
556,2016-10-29 13:16:17,"I will not rubber stamp and land your change for you @josephsavona!  I can import it for you and you can get your change reviewed by someone though :)
",facebook-github-bot,2015-11-07 00:45:30
555,2015-11-06 21:58:17,,josephsavona,2015-11-06 22:06:49
554,2015-11-06 21:57:28,"- babel plugin
- Optimistic query generation
",josephsavona,2015-11-11 21:28:21
554,2015-11-11 21:28:21,"This is merged as part of #584.
",kassens,2015-11-11 21:28:21
553,2015-11-06 17:41:06,"Not 100% sure, but seems like Relay bug.

Using such query:

<S_CODE_TOKEN>

I end up with error from server:

<S_CODE_TOKEN>

Request looks like

<S_CODE_TOKEN>

And I know querying same thing from the one component does not make sense - but I got same error when I was using same field with same argument in child component, so it was included via fragment. 

Hope that description is clear. If not let me know.. I will spend more time to extract some basic example with request and response.
",jardakotesovec,2016-02-09 15:33:49
553,2015-11-06 18:25:57,"Did more testing. And noticed that relay use same generated names for fields that have same arguments, which is redundant but works ok as it gets merged on graphql server. 

Issue is if argument is ENUM, than I end up with this error, so it looks like `graphql-js` bug.

Closing for now. Sorry for noise.
",jardakotesovec,2016-02-09 15:33:49
553,2015-11-06 18:45:49,"I'll reopen this to find the cause of this error. Here's a somewhat simplified [test case](http://facebook.github.io/relay/prototyping/playground.html#source=class%20StoriesApp%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20var%20%7BnameRed%2C%20nameBlue%7D%20%3D%20this.props.viewer%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%20%20%3Cpre%3E%0A%20%20%20%20%20%20%20%20%20%20%7BJSON.stringify%28%7BnameRed%2C%20nameBlue%7D%2C%20null%2C%20'%20%20'%29%7D%0A%20%20%20%20%20%20%20%20%3C%2Fpre%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0AStoriesApp%20%3D%20Relay.createContainer%28StoriesApp%2C%20%7B%0A%20%20initialVariables%3A%20%7B%0A%20%20%20%20numStoriesToLoad%3A%203%2C%0A%20%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20viewer%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Viewer%20%7B%0A%20%20%20%20%20%20%20%20nameRed%3A%20name%28color%3A%20RED%29%0A%20%20%20%20%20%20%20%20nameBlue%3A%20name%28color%3A%20RED%29%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0Aclass%20StoriesRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20params%20%3D%20%7B%7D%3B%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20viewer%3A%20%28Component%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20ViewerQuery%20%7B%0A%20%20%20%20%20%20%20%20viewer%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'viewer'%29%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%20%20static%20routeName%20%3D%20'Stories'%3B%0A%7D%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BStoriesApp%7D%0A%20%20%20%20route%3D%7Bnew%20StoriesRoute%28%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B&schema=import%20%7B%0A%20%20GraphQLBoolean%2C%0A%20%20GraphQLEnumType%2C%0A%20%20GraphQLFloat%2C%0A%20%20GraphQLID%2C%0A%20%20GraphQLInputObjectType%2C%0A%20%20GraphQLInt%2C%0A%20%20GraphQLInterfaceType%2C%0A%20%20GraphQLList%2C%0A%20%20GraphQLNonNull%2C%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%20%20GraphQLUnionType%2C%0A%7D%20from%20'graphql'%3B%0Aimport%20%7B%0A%20%20connectionArgs%2C%0A%20%20connectionDefinitions%2C%0A%20%20connectionFromArray%2C%0A%20%20cursorForObjectInConnection%2C%0A%20%20fromGlobalId%2C%0A%20%20globalIdField%2C%0A%20%20mutationWithClientMutationId%2C%0A%20%20nodeDefinitions%2C%0A%20%20toGlobalId%2C%0A%7D%20from%20'graphql-relay'%3B%0A%0Aclass%20Viewer%20%7B%0A%20%20constructor%28data%29%20%7B%0A%20%20%20%20this.avatar%20%3D%20data.avatar%3B%0A%20%20%20%20this.id%20%3D%20data.id%3B%0A%20%20%20%20this.name%20%3D%20data.name%3B%0A%20%20%7D%0A%7D%0A%0Avar%20RGBType%20%3D%20new%20GraphQLEnumType%28%7B%0A%20%20name%3A%20'RGB'%2C%0A%20%20values%3A%20%7B%0A%20%20%20%20RED%3A%20%7B%20value%3A%200%20%7D%2C%0A%20%20%20%20GREEN%3A%20%7B%20value%3A%201%20%7D%2C%0A%20%20%20%20BLUE%3A%20%7B%20value%3A%202%20%7D%0A%20%20%7D%0A%7D%29%3B%0A%0Avar%20VIEWER%20%3D%20new%20Viewer%28%7B%0A%20%20name%3A%20'Test'%0A%7D%29%3B%0A%0A%2F**%0A%20*%20Let%20Relay%20map%20between%3A%0A%20*%20-%20global%20IDs%20and%20the%20object%20they%20represent%0A%20*%20-%20objects%20and%20the%20GraphQL%20type%20associated%20with%20them%0A%20*%2F%0Avar%20%7BnodeInterface%2C%20nodeField%7D%20%3D%20nodeDefinitions%28%0A%20%20%28globalId%29%20%3D%3E%20%7B%0A%20%20%20%20var%20%7Btype%2C%20id%7D%20%3D%20fromGlobalId%28globalId%29%3B%0A%20%20%20%20if%20%28type%20%3D%3D%3D%20'Comment'%29%20%7B%0A%20%20%20%20%20%20return%20COMMENTS.find%28obj%20%3D%3E%20obj.id%20%3D%3D%3D%20id%29%3B%0A%20%20%20%20%7D%20else%20if%20%28type%20%3D%3D%3D%20'Person'%29%20%7B%0A%20%20%20%20%20%20return%20PEOPLE.find%28obj%20%3D%3E%20obj.id%20%3D%3D%3D%20id%29%3B%0A%20%20%20%20%7D%20else%20if%20%28type%20%3D%3D%3D%20'Story'%29%20%7B%0A%20%20%20%20%20%20return%20STORIES.find%28obj%20%3D%3E%20obj.id%20%3D%3D%3D%20id%29%3B%0A%20%20%20%20%7D%20else%20if%20%28type%20%3D%3D%3D%20'Viewer'%29%20%7B%0A%20%20%20%20%20%20return%20VIEWER%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20null%3B%0A%20%20%7D%2C%0A%20%20%28obj%29%20%3D%3E%20%7B%0A%20%20%20%20if%20%28obj%20instanceof%20Comment%29%20%7B%0A%20%20%20%20%20%20return%20CommentType%3B%0A%20%20%20%20%7D%20else%20if%20%28obj%20instanceof%20Person%29%20%7B%0A%20%20%20%20%20%20return%20PersonType%3B%0A%20%20%20%20%7D%20else%20if%20%28obj%20instanceof%20Story%29%20%7B%0A%20%20%20%20%20%20return%20StoryType%3B%0A%20%20%20%20%7D%20else%20if%20%28obj%20instanceof%20Viewer%29%20%7B%0A%20%20%20%20%20%20return%20ViewerType%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20null%3B%0A%20%20%7D%0A%29%3B%0A%0Avar%20ViewerType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Viewer'%2C%0A%20%20description%3A%20'The%20acting%20person%20%28eg.%20the%20logged%20in%20visitor%29'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20id%3A%20globalIdField%28'Viewer'%29%2C%0A%20%20%20%20name%3A%20%7B%0A%20%20%20%20%20%20type%3A%20GraphQLString%2C%0A%20%20%20%20%20%20args%3A%20%7Bcolor%3A%20%7Btype%3A%20RGBType%7D%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%20%20interfaces%3A%20%5BnodeInterface%5D%2C%0A%7D%29%3B%0A%0A%2F**%0A%20*%20Finally%2C%20configure%20the%20root%20Query%20and%20Mutation%20type%0A%20*%2F%0Avar%20QueryType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Query'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20node%3A%20nodeField%2C%0A%20%20%20%20viewer%3A%20%7B%0A%20%20%20%20%20%20type%3A%20ViewerType%2C%0A%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20VIEWER%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20QueryType%2C%0A%7D%29%3B).
",kassens,2016-02-09 15:33:49
553,2015-11-06 18:50:09,"We should probably use the field alias as the basis for the serialization key, not the schema name.
",josephsavona,2016-02-09 15:33:49
553,2015-11-06 19:00:09,"For a fragment like this:

<S_CODE_TOKEN>

We send something like this:

<S_CODE_TOKEN>

Causing a collision of the field names.
",kassens,2016-02-09 15:33:49
553,2015-11-07 16:24:40,"@kassens Thanks. I will just mention some observations. You said that fields with the same name should merge, which I agree with.   But thats not happening for any fields right now (including simple ones not having any argument) as far as I can see. 

So for something like this

<S_CODE_TOKEN>

Relay sends

<S_CODE_TOKEN>

If its fragment

<S_CODE_TOKEN>

Relay sends

<S_CODE_TOKEN>

I don't see any merging going on. My understanding is that it somehow got merged on the server...

And that merging goes wrong on server for fields with enum argument. Thats reason why I blamed graph-ql for it.

In your example it makes sense to me that nameRed and nameRed2 resulted in the same name fields (_namevidys9) - because they will get same value..  and should be merged, no need to hash them differently in my opinion.
",jardakotesovec,2016-02-09 15:33:49
553,2015-11-07 19:23:09,"Relay sends queries to the server as-is, without flattening or merging fields. This is primarily for efficiency - flattening a query requires in the worst case two full tree traversals (first to flatten, then to re-expand fragments by type) - but has the side benefit of making the printed output more debuggable. This is why you're seeing queries such as 

<S_CODE_TOKEN>

The current ""serialization key"" - the dynamically generated field alias in the printed output - is based on the assumption that queries are flattened before being printed. Changing this to use the application defined alias instead of the schema name should fix this. Instead of `_relatedImagescfvst1`, we should send something like `relatedBySeries_cfvst1`
",josephsavona,2016-02-09 15:33:49
553,2015-11-08 07:46:50,"I suspect that If you use application alias for generated field alias it still would not solve situation, because you end up with collision when alias is not used:

<S_CODE_TOKEN>

And still not sure if I understand why you want to avoid that name field conflict - since these fields are identical (has same arguments) it make sense to resolve them just once and consider them as same thing.  Which is what server currently does with all fields with exception of ones with ENUM arguments (and maybe input objects would go wrong, have not tried).
",jardakotesovec,2016-02-09 15:33:49
553,2015-11-13 16:36:50,"EDIT: moved to #596 
",luisobo,2016-02-09 15:33:49
553,2015-11-16 18:42:16,"Have problem with conflicting fields too. Error occurs with following type hierarchy with `query` operation:

<S_CODE_TOKEN>

And following fragments:

<S_CODE_TOKEN>

In my case Relay simply removes aliases, so that final query becomes:

<S_CODE_TOKEN>

GraphQL server returns error: `Fields ""affordances"" conflict because they return differing types [UserAffordancesEnum] and [TopicAffordancesEnum]`. 

I manually tested with aliases in place and GraphQL correctly processed the query. 

My deps:

<S_CODE_TOKEN>
",vladar,2016-02-09 15:33:49
553,2015-11-16 18:51:57,"This is another case where the serialization key should perhaps be based off of the alias, not the canonical schema name.
",josephsavona,2016-02-09 15:33:49
553,2015-11-29 19:14:20,"@vladar do you still get this error on the latest graphql?
",josephsavona,2016-02-09 15:33:49
553,2015-11-30 07:19:35,"@josephsavona Nope, wokrs fine now (on graphql 4.13). Thanks!
",vladar,2016-02-09 15:33:49
553,2016-02-09 10:05:58,"Yet original issue doesn't seem to be fixed, as I just faced with it on GraphQL 0.4.14
",vladar,2016-02-09 15:33:49
553,2016-02-09 15:33:49,"Closing as a duplicate of #784, for which there is a pending fix #801. 
",josephsavona,2016-02-09 15:33:49
552,2015-11-06 16:27:41,,josephsavona,2015-11-06 19:02:42
552,2015-11-06 16:27:59,"@facebook-github-bot import
",josephsavona,2015-11-06 19:02:42
552,2015-11-06 16:32:18,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1486849674977868/int_phab to review.
",facebook-github-bot,2015-11-06 19:02:42
551,2015-11-06 13:38:50,"I'm trying to use a mutation that exists at a nested level in my schema:

<S_CODE_TOKEN>

However, Relay validation plugin throws: 

> Error: Your schema defines a mutation field `me` that takes 0 arguments, but mutation fields must have exactly one argument named `input`.

Does that mean Relay doesn't support nesting or is that just a bug in the validation plugin?
",gre,2015-11-09 16:27:12
551,2015-11-06 16:17:11,"Mutations must be defined as top-level fields of the mutation type in your GraphQL schema. In the example above, `me` is the mutation, and `setStatus` is a field in the response payload. 
",josephsavona,2015-11-09 16:27:12
551,2015-11-06 17:11:49,"but GraphQL spec allows it, right? (that you can group mutations into sub-objects)
so I guess Relay only support a subset of that spec where mutation are all in top level?
",gre,2015-11-09 16:27:12
551,2015-11-06 17:12:41,"(maybe this should be written somewhere in the documentation, I don't know where exactly)
",gre,2015-11-09 16:27:12
551,2015-11-06 18:06:21,"I'm no expert on the GraphQL spec, but it seems pretty clear to me that mutations have to be top level fields under a `mutation`. See [Starting Types in the GraphQL spec](http://facebook.github.io/graphql/#sec-Starting-types).

What gave you the impression the mutations could be nested? There might be something to clarify in the spec!
",kassens,2015-11-09 16:27:12
551,2015-11-06 18:09:17,"Just because you can do it.
The graphql reference implementation doesn't throw an error, you can define
a nested object with mutation.
I don't know on spec side but maybe graphQL spec missed to say this?
Le 6 nov. 2015 19:06, ""Jan Kassens"" notifications@github.com a écrit :

> I'm no expert on the GraphQL spec, but it seems pretty clear to me that
> mutations have to be top level fields under a mutation. See Starting
> Types in the GraphQL spec
> http://facebook.github.io/graphql/#sec-Starting-types.
> 
> What gave you the impression the mutations could be nested? There might be
> something to clarify in the spec!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/551#issuecomment-154487925.
",gre,2015-11-09 16:27:12
551,2015-11-06 18:10:26,"Basically it is a spec ambiguity. No examples show nesting but also graphQL
don't disallow (AFAIK)
Le 6 nov. 2015 19:09, ""Gaëtan Renaudeau"" renaudeau.gaetan@gmail.com a
écrit :

> Just because you can do it.
> The graphql reference implementation doesn't throw an error, you can
> define a nested object with mutation.
> I don't know on spec side but maybe graphQL spec missed to say this?
> Le 6 nov. 2015 19:06, ""Jan Kassens"" notifications@github.com a écrit :
> 
> > I'm no expert on the GraphQL spec, but it seems pretty clear to me that
> > mutations have to be top level fields under a mutation. See Starting
> > Types in the GraphQL spec
> > http://facebook.github.io/graphql/#sec-Starting-types.
> > 
> > What gave you the impression the mutations could be nested? There might
> > be something to clarify in the spec!
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/facebook/relay/issues/551#issuecomment-154487925.
",gre,2015-11-09 16:27:12
551,2015-11-06 18:52:23,"@gre can you paste the part of your schema where you're defining this mutation? (or send a link to a Relay playground?)
",josephsavona,2015-11-09 16:27:12
551,2015-11-06 18:54:11,"I'm curious how you're defining it so that we can adjust `graphql-js` - but as stated previously, mutations are top-level fields and sub-items are fields in the response.
",josephsavona,2015-11-09 16:27:12
551,2015-11-06 19:02:26,"I don't have a ready to use relay playground but basically:

<S_CODE_TOKEN>

and a query:

<S_CODE_TOKEN>

We are using sangria scala implementation for the GraphQL server.
",gre,2015-11-09 16:27:12
551,2015-11-09 16:26:13,"@gre Yup, in that case `me` is the mutation and `bar` is a field in the response payload. We'll update the documentation if this continues to be a source of confusion - thanks for opening this issue!
",josephsavona,2015-11-09 16:27:12
551,2017-03-02 21:18:27,Why does it have to be? It seems to me this would be a good way to do authentication if you can say all these mutations can only be performed by X user,BossGrand,2015-11-09 16:27:12
551,2017-03-03 06:54:25,"actually I think it's better design to have auth outside of your GraphQL, changing the auth of a user is likely to completely change the graph and you likely will want a total cache refresh anyway, so there is no real benefit of having auth inside.
This is the biggest mistake we've taken at my company (to do it inside graphql) and we have lost so much time because of this. so if you have opportunity to, consider doing auth the more ""classic way"" (cookie, etc.).",gre,2015-11-09 16:27:12
551,2017-03-03 07:17:14,"Thank you, that makes a lot of sense!

On Mar 2, 2017 10:54 PM, ""Gaëtan Renaudeau"" <notifications@github.com>
wrote:

actually I think it's better design to have auth outside of your GraphQL,
changing the auth of a user is likely to completely change the graph and
you likely will want a total cache refresh anyway, so there is no real
benefit of staying in auth.
This is the biggest mistake we've taken at my company (to do it inside
graphql) and we have lost so much time because of this. so if you have
opportunity to, consider doing auth the more ""classic way"" (cookie, etc.).

—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub
<https://github.com/facebook/relay/issues/551#issuecomment-283880578>, or mute
the thread
<https://github.com/notifications/unsubscribe-auth/ACAlS4pw0l9wHS6JUCiVqHhJ0wSjwS02ks5rh7kkgaJpZM4Gda90>
.
",BossGrand,2015-11-09 16:27:12
550,2015-11-06 08:44:20,"I have several use cases with optimistic updates  where user can make several changes on the same thing quickly which results in several mutations on the same thing. Lets say I have text input for user name.

If I handle that with optimistic updates - it works nicely, only issue is that it sends request for every letter (serially thanks to collision key), which can take a while. It would be handy for these situations be able to set some option on mutation which says that it can skip all queued mutations with that same collision key.
",jardakotesovec,2016-02-08 22:20:42
550,2015-11-06 16:15:43,"That's a good idea, it would be great to have support for this. Any interest in submitting a PR?
",josephsavona,2016-02-08 22:20:42
550,2015-11-09 11:06:03,"@josephsavona Yes.. that should not be that difficult as my first time Relay contribution.

But not sure if make more sense to just silently remove pending transactions from the queue or make them fail so the transaction callback gets always called. It would be necessary indicate that the failing reason (probably via status) is that it is skipped.

I am inclining to the first option - just remove pending transactions (and all relevant clean up) as its easier and I don't see much benefit of calling the failure callbacks. But would like your opinion.

Also we need good api name for it, here are some ideas: `shouldClearCollisionQueue`/`shouldSkipCollisionQueue` or shorter options: `shouldClearQueue`/`shouldSkipQueue`
",jardakotesovec,2016-02-08 22:20:42
550,2015-11-09 16:39:04,"Two mutations with the same collision key may be initiated from different parts of UI and be unaware of each other. There should be _some_ callback that fires in the case of a mutation to allow for any cleanup, though I agree that `onFailure` isn't appropriate for this case. 

@yungsters @wincent Thoughts on switching to either an `onReadyStateChange`-style callback with props such as `{error, aborted, data}`? Calling `onSuccess` when a mutation isn't intuitive.
",josephsavona,2016-02-08 22:20:42
550,2015-11-09 21:33:54,"What if throttling/debounce was made a user responsibility instead? I.e. Relay just provided control to add/remove mutations from the pending store, and a function to finally commit (and send) the mutation?
",devknoll,2016-02-08 22:20:42
550,2015-11-09 21:44:56,"Implementing throttle/debounce on top of that would be trivial: create a mutation and add it to the store, but don't commit it. If another mutation comes in, the app can remove the last mutation, and add a new one. After the debounce threshold, it can commit the change (with normal collision key behaviors).
",devknoll,2016-02-08 22:20:42
550,2015-11-10 14:44:06,"I like @devknoll 's idea as it helps cover reasonable use case when user want to control (postpone) when update is sent to server. 

To keep discussion moving forward, here are some api ideas based on that idea:
Relay.Store.queue(mutation).commit(callbacks) could be equivalent to Relay.Store.Update(mutation, callbacks).

Both methods `queue` and `update` would return reference to transaction, which would have method `dequeue()`. This method would return `true` if dequeue was done (has not been sent to server yet).

So for use case when you just want to skip pending mutations, I would just keep reference to one transaction and call `dequeue()` before passing new mutation to `update`.

And for situation I want to postpone (wait for some saving event) updating server I would use `queue(mutation)` method and once I want to save it I would call `commit(callbacks)` on that transaction.

Also it can be easily combination of these two use cases. Thoughts?
",jardakotesovec,2016-02-08 22:20:42
550,2015-11-10 16:04:09,"Hmm. How about:

<S_CODE_TOKEN>

This covers all of the above use cases, and also allows Relay to track the sequence in which the updates were originally created. This means Relay can revert/apply them in the correct order in cases where the user did create two overlapping mutations and want to commit both.

EDIT: modified per @devknoll's suggestion below.
",josephsavona,2016-02-08 22:20:42
550,2015-11-10 16:39:31,"Do we need a `preview()`? What if _previewed_ was the default state after calling `RelayStore.update` and `MutationTransaction` just allowed for committing & rolling back?

Definitely agree on more explicit naming too.
",devknoll,2016-02-08 22:20:42
550,2015-11-10 16:56:01,"That makes so much sense.
",josephsavona,2016-02-08 22:20:42
550,2015-11-10 18:51:33,"I like the way this is headed. I want to add is that we should make a basic API that auto-""commits"". The manual control seems like it should be the advanced use case. We could rename the `update` method from @josephsavona's comment to `updateLocal` which makes it clear that it's uncommitted. This would free up `update` to be defined as `updateLocal().commit()`.
",kassens,2016-02-08 22:20:42
550,2015-11-10 19:01:30,":+1:

How about something like `commitToServer` and `rollbackLocal`?
",devknoll,2016-02-08 22:20:42
550,2015-11-10 19:03:39,"anyone want to write the PR? ;-)
",josephsavona,2016-02-08 22:20:42
550,2015-11-13 04:14:58,"@josephsavona @devknoll I'd like to come up with a PR for this unless someone has started. From what I understand this is basically just coming up with a new function on the store, `updateLocal`, that will create a transaction without commiting it ? 

It seems like thats all we need to allow debounce since we have `commit` and `rollback` on the `Transaction` already. Let me know if I underestimate the issue :dancer: 
",xuorig,2016-02-08 22:20:42
550,2015-11-13 04:53:31,"No on is working on this, and it is now trivial to implement thanks to 6c41756 - the new method can be 

`Relay.Store.updateLocal(mutation, ?callbacks): RelayMutationTransaction` - basically return the object created by RelayMutationQueue.createTransaction w/o committing it. 
",josephsavona,2016-02-08 22:20:42
550,2015-11-13 04:54:12,"@xuorig - all yours! :-)
",josephsavona,2016-02-08 22:20:42
550,2016-02-08 22:20:42,"Unless I'm mistaken, I believe all related work for this issue is now complete, so I'm going to close this. If that turns out to be wrong, please comment and I'll re-open.
",wincent,2016-02-08 22:20:42
550,2016-02-09 07:11:26,"@wincent Its possible to delay committing mutation to server, but its not possible to skip mutation that is already in queue yet.

This use case make sense for situations when there is no save button and user is changing input or some slider that could potentially generate many mutation requests and its necessary to skip queued mutations to do that efficiently - basically skip intermediate values.

Most convenient for developer would be to have api directly in mutation `shouldSkipQueue` that I suggested at the beginning, that would just say if mutation should remove mutations in the queue.

Agreement here was to handle this out of relay, so I attempted to add possibility to rollback queued mutation in #646 .

But I am generally opened to any other solution for such use case that will play nicely with new mutation api. Using optimistic updates became very convenient..  as its not necessary to keep some additional state.
",jardakotesovec,2016-02-08 22:20:42
550,2016-11-15 10:11:12,"hello everyone! just wanted to see the state of the `skipping queries` in the que. This would greatly improve my application (written in react-native) where there's always a problem with datafetching. Skipping queries in the que doesnt seem to be implemented yet? Are there other ways to do this?
",proProbe,2016-02-08 22:20:42
550,2016-11-15 16:31:46,"Hey @proProbe I wrote a small blog post on how you can use the `applyUpdate` API to do this. http://mgiroux.me/2016/relays-apply-update-function/

Let me know if it helps?
",xuorig,2016-02-08 22:20:42
550,2016-11-16 09:43:10,"thanks for the blogpost @xuorig! It looks really useful but Im not sure how it ties into my problems with `skipping queries` that is qued up. Lets say I make during 2 seconds about 10 queries via user interaction. Im currently seeing that only 6 of the queries are sent and the other 4 is qued up. What I actually want to do is to somehow have control on when to skip these 4 queries :)
",proProbe,2016-02-08 22:20:42
549,2015-11-06 08:16:29,"step1: make a query like :

<S_CODE_TOKEN>

step2:  then i try to edit one answer, before that i need to fetch detail content of this answer: 

<S_CODE_TOKEN>

step3:  in `AnswerQuestionMutation`, i made a fat query like: 

<S_CODE_TOKEN>

this fat query will generate **malformed** queries like :

<S_CODE_TOKEN>

**if** i change concrete query in step1 like this :

<S_CODE_TOKEN>

everything is ok now.
i guess maybe some there are some issues in QueryBuilder when build concrete type query.
ps, with relay 0.4.0

---

update, when i change fat query to 

<S_CODE_TOKEN>

everything is ok again
Did i miss anything.
",filod,2016-11-15 21:55:19
549,2015-12-04 22:27:56,"I wasn't able to repro this. We've also made a number of improvements to how Relay handles fields/fragments, avoiding flattening fields across fragment types and other things that could cause edge case bugs such as this. Please try out 0.6.0 and comment here if this is still an issue.
",josephsavona,2016-11-15 21:55:19
549,2015-12-24 10:02:18,"concrete query issue still. 

And this time (0.6.0),  relay complains

<S_CODE_TOKEN>

and build a query like this: 

<S_CODE_TOKEN>

NOTE:  `__RelayQueryFragment2rl6l6h` fragment is **malformed**

if i generate query directly (without generate concrete query first), the right fragment would be:

<S_CODE_TOKEN>
",filod,2016-11-15 21:55:19
549,2015-12-24 10:06:16,"@josephsavona can you reopen this ?
",filod,2016-11-15 21:55:19
549,2015-12-24 19:21:10,"> if i generate query directly (without generate concrete query first), the right fragment would be:

@filod It seems like you're using these terms differently than their meanings in Relay. What exactly do you mean by ""generate query directly""? Are you calling setVariables? 

To help debug this issue, can you clarify the actual steps - in code - that you took to generate the malformed query? For example, ""first I rendered ... component with ... fragment(s), then I called Relay.Store.update with a mutation with ... fat query"".
",josephsavona,2016-11-15 21:55:19
549,2015-12-25 04:01:11,"say i have routing steps like:

`/timeline` -> `/question/123` -> `/question/123/answer-edit`
1. first I rendered question&answer list in route `/timeline` (a concrete/union list), say i rendered `question:123` & `answer:321` in the list
2. then I view `/question/123` in the list above, this will render question page along with some answers (say like `/question/123/answer/321`), in this step, i will fetch more fields in same answer compare to step 1.  (like the `answer.content`) 
3. then i click the edit button, try to update a answer edit mutation, this will generate the malformed fat query i mentioned

> ""generate query directly"" 

i mean ignore step 1, view `/question/123` directly

also in step 1, **every thing is fine if i change this query**

<S_CODE_TOKEN>

to

<S_CODE_TOKEN>

i guess something went wrong when relay deal with concrete type which have same field(name), both Answer and Question have `content` field.

if you want more about the schema, you can check http://shengupiao.com/graphql?debug=1

hope i clarified myself, thank you for reply
",filod,2016-11-15 21:55:19
549,2015-12-30 21:17:42,"+1 on this

My use case is as follows:

Go to ""Activity Stream"" route, which uses this fragment (note the union type on ""object""):

<S_CODE_TOKEN>

Go to the event detail page (new Relay Root Container)...fragment is:

<S_CODE_TOKEN>

Click ""Add Comment"", brings up new relay root container using this fragment:

<S_CODE_TOKEN>

Then, we perform the EventCommentMutation, which is defined as:

<S_CODE_TOKEN>

The mutation generates the following query:

<S_CODE_TOKEN>
",skevy,2016-11-15 21:55:19
549,2016-01-11 15:41:34,"I have probably the same error, depending on what queries has run before mutations fail with ""Fragment 'xxx' cannot be spread here as objects of type 'xxxx' can never be of type 'yyyy'.""

I have not yet been able to extract the error into something small.
",quazzie,2016-11-15 21:55:19
549,2016-02-04 02:58:39,"@josephsavona any news on this ? or can i take any temporary solution to avoid this bug ?
",filod,2016-11-15 21:55:19
549,2016-04-02 22:02:58,"I got this error when I had forgotten to add `interfaces: [nodeInterface]` to my types. Might help someone.
",prewk,2016-11-15 21:55:19
549,2016-08-05 05:14:47,"+1 Here, We've been having the same issue, without changing anything most of the time works fine, but at some point we got the spread error, @josephsavona any new about this?
",CoericK,2016-11-15 21:55:19
549,2016-08-05 06:11:18,"@CoericK We've looked into this, but there isn't a straightforward solution. There is a workaround that solves most instances of this bug - see https://github.com/facebook/relay/pull/1000. The idea is to wrap the offending part of the query in `...on Node { ... }` to work around the validation. 

Ultimately, however, we haven't been able to identify a way to guarantee that an auto-generated mutation query is valid. Instead, we're working on an update to Relay that will use static mutations - what you write is what Relay sends. For now, I'd recommend checking out that PR.
",josephsavona,2016-11-15 21:55:19
549,2016-11-15 21:55:19,"I'm going to close this, our solution going forward is #1241 (static mutations).
",josephsavona,2016-11-15 21:55:19
548,2015-11-05 20:34:02,"Babel's recent release of version 6 changes how plugins are written, slightly. If babel-relay-plugin had its own repository, it could be updated to support Babel 6, with clear tags for Babel 5, etc. Not sure if worth or not, but just wanted to toss the idea out there.
",ryancole,2015-11-05 23:08:00
548,2015-11-05 23:08:00,"The plugin has its own npm package, but having it in the same repository simplifies bookkeeping (one place for issues, one repo to sync between FB & OSS) and also simplifies the process of testing plugin changes. The OSS tests use the latest (master) version of the plugin so that we're sure the output of the plugin works in Relay.
",josephsavona,2015-11-05 23:08:00
547,2015-11-05 09:15:46,"Hi,

GraphQL queries generated by Relay are barely readable, and when debugging something (especially on a server side bug), it is important to have it readable.

**(1)** Wouldn't it be possible to have a **DEV mode**, where queries would be at least well formatted (indented and with new lines) ?

**(2)** At best, it would be neat to have better naming for the fragments and renamed properties (like A, B, C, D ...), i'm curious to know the reason why these are that long? (don't you want to minimize the bandwidth)

<S_CODE_TOKEN>

=>

<S_CODE_TOKEN>

---

> The same way React is helping the developer in **DEV**, I think it's important that Relay help on this subject.
",gre,2015-11-06 19:04:33
547,2015-11-06 04:31:38,"Making queries easier to debug is a great idea. Having different implementations between DEV and production can lead to subtle bugs, so we probably won't have a DEV printing mode. However, we should look at making the future Relay dev tools pretty-print queries.

cc @kassens 
",josephsavona,2015-11-06 19:04:33
547,2015-11-06 17:01:35,"In our relay server we've been using this in dev mode:

<S_CODE_TOKEN>

It doesn't help with the mangled names, but at least everything is formatted nicely & it's much easier to read.
",yusefnapora,2015-11-06 19:04:33
547,2015-11-06 17:14:15,"nice!
",gre,2015-11-06 19:04:33
547,2015-11-06 19:04:33,"@yusefnapora awesome! @kassens let's keep this in mind for dev tools (if you didn't implement it already ;-)
",josephsavona,2015-11-06 19:04:33
546,2015-11-04 04:27:44,"bug or feature ?
",filod,2015-11-06 08:52:43
546,2015-11-04 19:20:34,"`forceFetch` instructs Relay to fetch the full query from the server and not leave out fields it already has. If it fetched them and they're still identical, we shouldn't force a React re-render.

Did you see that the props indeed changed but `componentWillReceiveProps` was not called?
",kassens,2015-11-06 08:52:43
546,2015-11-06 08:52:43,"this could be my mistake, sorry about that
",filod,2015-11-06 08:52:43
545,2015-11-03 19:29:34,"Fixes #536 

I've been working with graphql-ruby and relay and been wanting to use directives. I found #536 yesterday night and tried to work on a solution today.

Following what @josephsavona said in the issue, I've modified`RelayQueryNode.getChildren` so it only return children that are not skipped (meaning `skip if: true` and `include if: false`). I've implemented the function `RelayQueryNode.shouldBeIncluded` which
- Checks if a skip directive is present ( It has priority over include)
  - If an if argument is present, return the negated value
- Checks if an include directive is present
  - if an if argument, return the value
- return true in all other cases

I've tried to take into consideration that other directives and arguments other than `if:` might be added, which might make the code a little bit more complicated, let me know if I should just assume that the argument is if right now.

Let me know if the solution makes sense. I've added 2 tests, modified a printing test that included a field that should be skipped and also modified the metric test since the getChildren method now calls getDirectives for every field.

Haven't had much chance to look at Relay in detail so let me know how I can improve this!
",xuorig,2015-11-10 04:55:33
545,2015-11-03 20:50:05,"@xuorig This is awesome!!! I have some minor feedback but overall looks good.
",josephsavona,2015-11-10 04:55:33
545,2015-11-03 22:34:40,"@facebook-github-bot import
",josephsavona,2015-11-10 04:55:33
545,2015-11-03 22:35:37,"@josephsavona I've addressed your comments. Let me know what you think about my solution for iterating only once over directives. Not the most pretty but it's hard to make it with that Skip > Include priority.
",xuorig,2015-11-10 04:55:33
545,2015-11-03 22:49:34,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/960769150683898/int_phab to review.
",facebook-github-bot,2015-11-10 04:55:33
544,2015-11-03 02:18:58,"Also, fixed the error message i `BuildChecker-test.js`.

Test Plan:

<S_CODE_TOKEN>
",yungsters,2015-11-03 16:25:31
544,2015-11-03 02:19:02,"@facebook-github-bot import
",yungsters,2015-11-03 16:25:31
544,2015-11-03 02:23:34,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1030135617007306/int_phab to review.
",facebook-github-bot,2015-11-03 16:25:31
543,2015-11-02 22:46:50,"Part of the effort to enable us to change the internal storage format without having to manually update hundreds of test cases. More to come after this commit.
",wincent,2016-03-03 17:11:58
543,2015-12-06 05:07:58,"Sorry we left this so long, and now it's a rebase-tastrophe. :(
",steveluscher,2016-03-03 17:11:58
543,2015-12-06 18:58:09,"Yeah, I wanted to import it but then parenting. Probably easiest to just reroll it, which I'll do.

/literally sent from phone while laboring over a hot stove
",wincent,2016-03-03 17:11:58
543,2016-03-03 17:11:58,"@wincent we didn't end up changing the store format (yet) - should we just close this and continue with it later if necessary? (feel free to reopen)
",josephsavona,2016-03-03 17:11:58
543,2016-03-03 17:52:11,"@josephsavona: @yungsters was asking me about this yesterday. I was going to reroll it, but it didn't seem like the highest impact thing I could to so I just let it sit. Closing is the right call for now!
",wincent,2016-03-03 17:11:58
542,2015-11-02 20:49:55,"RANGE_ADD mutations are common cause of confusion for users. In particular, if the application does not query for the connection, the field for the new edge is not included in the mutation fragment. This winds up issuing [this warning](https://github.com/facebook/relay/blob/411780d258fe3d4845ca9ab5d9f292100f2306c4/src/traversal/writeRelayUpdatePayload.js#L326-L333). Users expect the new edge to be fetched, but Relay doesn't have sufficient information to do so. This is because Relay doesn't know what fields should be fetched.

We should make it easier for users to get predictable behavior with range add mutations - either by strict `invariant`s to require the connection to be queried in advance or, possibly, with some other way to define the fields that should be queried on an edge in the case that the connection is not already queried.
",josephsavona,2016-02-08 22:25:57
542,2015-11-02 21:21:01,"per @steveluscher:

> The task. Given a RANGE_ADD mutation config:
> 1) If Relay never queries for the new edge because they were eliminated during the intersection of the tracked and fat queries, explain that there's a client-side problem and how to fix it (namely to make sure the parent/connection is used – ie. tracked – in your app)
> 2) If the server never responds with the newly created edge despite having been queried for it, explain that the problem is on the server side.
",josephsavona,2016-02-08 22:25:57
542,2015-11-05 16:22:09,"Shouldn't it be possible as well to have mutations that change connections which might or might not be tracked? Why even throw an error in the case where the connection is not tracked (and thereby no edge is returned)?
",Gregoor,2016-02-08 22:25:57
542,2016-01-06 21:42:32,"Re:

> Users expect the new edge to be fetched, but Relay doesn't have sufficient information to do so. This is because Relay doesn't know what fields should be fetched. —@josephsavona 

In troubleshooting this issue, I considered this may be the case, but then thought: ""but then why `RANGE_ADD` configuration have the `edgeName` field? Isn't that how Relay determines what to query for?"" I guess just knowing the `edgeName` field isn't enough because it doesn't know the structure of the node? Might this structure come from the fat query?
",dminkovsky,2016-02-08 22:25:57
542,2016-02-08 22:25:57,"I'm going to fold this into a checklist in #538, which is about overhauling the mutations API. (It will be easier to manage with the various interrelated mutations issues in a single place.)
",wincent,2016-02-08 22:25:57
541,2015-11-02 19:51:38,"Realtime data in GraphQL is something that we and the community are actively exploring. There are many ways to achieve ""realtime"" or near-realtime updates: polling, ""live"" queries, or event-based approaches (more on these tradeoffs [on the GraphQL blog](http://graphql.org/blog/subscriptions-in-graphql-and-relay/)). Furthermore, there are a variety of transport mechanisms to choose from depending on the platform: web sockets, MQTT, etc.

Rather than support any one approach directly, we would prefer to allow developers to implement any of these approaches. Therefore, we don't plan to create a `RelayMutation`-style API for subscriptions. Instead we're working create a ""write"" API that will make it easy for developers to tell Relay about new data (along the lines of `store.write(query, data)`). See #559 for more information.

For now, we recommend checking out @edvinerikson's [`relay-subscriptions`](https://github.com/edvinerikson/relay-subscriptions) module.
",josephsavona,
541,2015-11-02 20:28:36,"Just fwiw, I've actually started implementing this. I'm only so far into it - but I just wanted to put here that I'm actively working on it.
",skevy,
541,2015-11-02 20:37:49,"@skevy I'm not sure why, but I can't assign this to your directly - but thanks for the heads up, looking forward to this!
",josephsavona,
541,2015-11-02 20:39:21,"@josephsavona it's cuz I'm not a collaborator. Silly Github.

Is anyone at FB working on this for OSS release? Or only for internal use
",skevy,
541,2015-11-02 20:53:40,"Aha! No one is actively working on the OSS Subscriptions (the API described above) - so you won't conflict :-)
",josephsavona,
541,2015-11-02 22:10:17,"The ""subscribe/dispose"" API seems awfully imperative and fiddly to control... what about something like this where RelayContainers define subscriptions declaratively:

<S_CODE_TOKEN>
",dallonf,
541,2015-11-02 22:36:48,"@dallonf That's a great idea. Ultimately there has to be an imperative API _somewhere_: in Relay, that's `Relay.Store`. We do need imperative APIs for opening subscriptions and disposing them, but the API you described would be a great way to provide declarative access to those methods from containers.

Note that the query tree is static and `props` are unavailable: instead the API should use `variables`:

<S_CODE_TOKEN>
",josephsavona,
541,2015-11-02 22:46:02,"@dallonf yah some type of declarative API to wrap it is smart. 100% agree.
",skevy,
541,2015-11-02 22:52:43,"@josephsavona Agreed, I would definitely need the subscribe/unsubscribe methods in some cases.

Although now I wonder if the RelayContainer is the right place for this... you'd still have to add this _particular_ subscription to any component that requests `story { likeCount }`. And it kind of runs the risk of coincidence-driven-development where every component that uses `likeCount` will benefit from _just one_ RelayContainer in the tree that defines a subscription - but remove that component, and suddenly your real time updates stop working!

I wonder if it would be possible to implement ""live queries"" _on the client_, so that whenever the current route contains `likeCount`, it automatically subscribes to every (opt-in) Subscription that could update `likeCount`... kind of like a fat query in reverse? This feels like one of those models which would reveal a lot of intractable edge cases as soon as you got in too deep to get back out :stuck_out_tongue: . It certainly works for the given example of `StoryLikeSubscription, but the whole point of the Subscription thing seems to be to provide more flexibility than live queries allow. What sort of use cases would break this model?
",dallonf,
541,2015-11-03 07:16:43,"@dallonf great idea. But I recommend use Hash for `subscriptions` like in `fragments`. In order to be able to have several subscriptions, and be able to get access to their state:

<S_CODE_TOKEN>

@josephsavona It would be great if we can get subscriptions status and ability to manipulate them in Component:

<S_CODE_TOKEN>
",nodkz,
541,2015-11-04 10:21:49,"What's the plan in terms of the network layer for this? I would imagine that for push notifications, we would need websocket or socket.io's fallback method of long-polling or flash.

Will we be able to have real-time notifications on a websocket connection and mutations and queries still happening over http?
",F21,
541,2015-11-04 15:01:42,"@F21 Because there are multiple approaches to pushing data from server to client, we will likely leave the implementation of `sendSubscription` up to the user. This would allow developers to, for example, use HTTP for queries/mutations and some other method for establishing subscriptions.

This is per the description: 

> Provide a stub implementation in RelayDefaultNetworkLayer which throws when subscriptions are requested
",josephsavona,
541,2015-11-09 22:48:01,"It would be actually really cool if subscriptions had a fat query like mutations do :)
",pasviegas,
541,2015-11-10 00:33:05,"@pasviegas Good idea! Unfortunately it isn't quite so simple. Subscription queries may execute on the server at _any_ time after the subscription is opened, which means that the ""tracked"" (active) queries on the client can be different between executions. While we _could_ allow users to define a fat query for subscriptions, it would mean that the data fetched by the subscription would depend on what had been queried when the subscription was first created. In other words, it would create a non-deterministic query that would be difficult to reason about.

Requiring a static subscription query makes it clear exactly what data will be refreshed when a subscription event occurs.
",josephsavona,
541,2015-12-21 13:16:13,"+1
",faceyspacey,
541,2015-12-21 13:33:43,"Once the API is down (perhaps in some pre-release form) I would love to figure out how to put this to use in the Meteor world. We have a client/server pubsub API that uses a custom Json format, DDP, to communicate LiveQuery updates to clients. There have been lots of scalability issues with LiveQuery and plans to move to a _pre-write webserver layer event-based_ approach to push changes to clients, which my assumption is what Relay subscriptions would be all about. 

The questions I'm interested in exploring are:
- using Relay, would we even use our pubsub API anymore?
- what about the DDP Json protocol?
- or do we resolve just to the base websockets API Meteor uses?
- exactly what that Meteor already offers would we reuse if anything?

As soon as I find the answers to these questions and have some base Relay subscriptions tools to use, I'd love to start implementing this for Meteor (along with something like Graffiti of course since Meteor uses Mongo). I think Meteor could be a great guinea pig given it's one of the longest standing most used solutions for the whole subscription + reactivity enchilada here. I personally don't even know of any other LiveQuery solutions besides rethinkdb which isn't in the same stages as meteor, which has been offering this as their bread and butter for approaching 4 years. Our community has a lot of developers that would be willing--rather, eager--to test this out. I also know Meteor Development Group (the company behind the framework) is seriously considering this route as well. 

LiveQuery won't work for us anymore. GraphQL/Relay is really looking like the way forward to many in the Meteor community. Let me know what I can do.
",faceyspacey,
541,2015-12-22 08:40:02,"@faceyspacey I would love to test your implementation.
",ansarizafar,
541,2015-12-23 11:26:15,"@faceyspacey We would love to explore how to use Relay / GraphQL together with Meteor as well, Let me know if you end up going down this route further. @qimingfang fyi. 
",tonyxiao,
541,2015-12-31 03:13:01,"Anyone I can coordinate with on trying to help out on this?
",eyston,
541,2016-01-12 06:25:13,"I'm going to try and take a stab at this.  I checked with @skevy and he might start next week so I'll try and communicate anything I do in case it is useful.

I spent this afternoon looking at Relay mutation code.  I have a few questions:

1) Is it desirable to keep a central reference to all subscriptions?  There is the `RelayMutationQueue` which holds all mutations, but from what I can tell this is required for:
- queueing collisions
- optimistic updates get re-run multiple times (if I understand the code) so a reference is required to all mutations
- `RelayContainer` can check if there are pending mutations on a record

There might be other reasons I'm missing / not understanding.

I'm not sure if subscriptions would require something similar.  It could be useful for visibility and maybe some kind of mass dispose.  Either way it would be easy to add them to a central map someplace if desired.

2) For `writeRelayUpdatePayload`, again, just a quick glance, it looks like it can be re-used for subscriptions.  This sounds reasonable / expected?  The only issue I saw was `handleRangeAdd` has an invariant on `clientMutationID`.  Could that invariant be removed and the code with `RelayMutationTracker` only be run when `clientMutationID` is in the payload?

I haven't looked at the functionality of `RelayMutationTracker` yet -- todo list for tomorrow -- so this might answer itself.

3) Finally, I looked at RxJS to try and familiarize myself with the lingo.  Here is rough pseudo-code for `Relay#subscribe`:

<S_CODE_TOKEN>

code for `RelayNetworkLayer#sendSubscription` would return a function that performs unsubscribe / dispose:

<S_CODE_TOKEN>

Seem reasonable?

Thanks!
",eyston,
541,2016-01-15 20:45:40,"I have an initial implementation of subscriptions and have questions / request of feedback from the Relay team if possible.

1) Relay.Subscription / Relay.Mutation code duplication:

Right now I just duplicated code from Mutation to Subscription.  This is mostly ok as its just a skeleton, but the function `_resolveProps` seems like logic that should be shared / not duplicated.  Do you think this should be handled via extracting `_resolveProps` or making a base class or something?  I know this is like a preference question, I just want to try and match accepted practices in Relay.

2) clientSubscriptionId

I'm not sure why this is required.

3) Query Building with MutationConfigs

With mutations the query is built from configs + fat query.  With subscriptions it is provided.  That said, the configs need to augment the query.  For example, given a `RANGE_ADD`:

<S_CODE_TOKEN>

The `todoEdge` field (edgeName) in the above query needs `__typename` and `cursor` added.  They are added during the edge field creation for mutations.  My assumption is that subscriptions should modify the provided query to make sure all required fields have been added.  That would result in:

<S_CODE_TOKEN>

The logic I'm going with is:
- `clientSubscriptionId` is added to everything
- `RANGE_ADD` : add `__typename` to all `edgeName` fields (cursor is handled by `Range.QL`)
- `RANGE_DELETE` / `NODE_DELETE` : add `deletedIDFieldName` to the call.

Is this reasonable?

4) `sanitizeRangeBehaviors`

Should this be run against subscriptions as well?  If so, would you suggest moving it from `RelayMutationQuery` into a different namespace as an export?

5) breaking the PR up

A lot of this can be smaller PR's.  I'm happy to break things up!

---

Thanks.  I haven't really done much OSS work so I'm not really sure the workflow.  I feel a bit blind ... just do stuff and submit a PR and see what happens? ;p
",eyston,
541,2016-01-16 02:30:47,"sorry for being chatty... but...

here is the commit with the work / comments in it: https://github.com/eyston/relay/commit/4405fa70fa6d5bbe1047357963252594dbcdfc1c

here is a stubbed implementation of a network layer: https://gist.github.com/eyston/ce723b38b1756cb5f81e

there are no tests atm, waiting on feedback on if this is sane or not ;p

thanks again~
",eyston,
541,2016-01-25 21:46:26,"@eyston Thanks for working on this! My apologies in the delay in our response, we're all back now after the holidays :-)

#### part 1

> 1) Is it desirable to keep a central reference to all subscriptions?

Yes. There doesn't strictly have to be, but having a central reference to all subscriptions would allow for disposing of all subscriptions (e.g. with the Relay context was collected) or for de-duping subscriptions.

> 2) For `writeRelayUpdatePayload`, again, just a quick glance, it looks like it can be re-used for subscriptions. This sounds reasonable / expected?

Yup! That method was intended for handling mutation and subscription payloads. I saw that you have a PR to update the one invariant that blocks this, let's continue discussion about it there.

> 3) Finally, I looked at RxJS to try and familiarize myself with the lingo.

The example you gave looks about right - `RelayStore.subscribe` returns a `{dispose}`-able (user-facing disposable), as does `RelayNetworkLayer#sendSubscription` (internal disposable). When the user-facing disposable is called the framework calls the internal one to teardown the subscription on the server.

#### part 2

> 1) Relay.Subscription / Relay.Mutation code duplication: Right now I just duplicated code from Mutation to Subscription. This is mostly ok as its just a skeleton, but the function `_resolveProps` seems like logic that should be shared / not duplicated.

I'm not aware of a use-case that would require Subscriptions to have their own fragments (and therefore an equivalent to `resolveProps`). How about we start without this feature and add it as necessary? This will keep things simple for now.

> 2) clientSubscriptionId .. I'm not sure why this is required.

Yeah, seemingly this could be a network-layer concern and doesn't have to be part of the subscription query itself. Let me double check how it's used in our implementation.

> 3) Query Building with MutationConfigs

Generally, subscriptions should be able to reuse all the [utilities for constructing mutations queries](https://github.com/facebook/relay/blob/master/src/mutation/RelayMutationQuery.js). Let's discuss specific logic in the PR, but what you described sounds right.

> 4) sanitizeRangeBehaviors

This exists only for legacy reasons - to warn users that the format has changed - so we can skip calling this for mutations.

> 5) breaking the PR up

Breaking up the PR might help to land it, but also feel free to send a bunch of commits in one PR so that we can give high-level feedback, including how best to break it up.
",josephsavona,
541,2016-01-25 22:27:52,"> I'm not aware of a use-case that would require Subscriptions to have their own fragments

Ah, okay, not sure why I assumed this.

In a small / short example app with subscriptions I found that they were almost useful for deciding whether I needed to update (dispose / create new sub) the subscription.  e.g.

<S_CODE_TOKEN>

This ended up not being sufficient though as I ended up having other requirements of when to be subscribing / not subscribing so I still had to write specific logic around managing their lifecycle.  e.g. 'subscribe to `sendMessage` only if `channel.joined === true`.

> Generally, subscriptions should be able to reuse all the utilities for constructing mutations queries. Let's discuss specific logic in the PR, but what you described sounds right.

I'll have to look it over again, but I didn't think `RelayMutationQuery` could be reused since mutations build up a new query by working on the fat query and the mutation configs.  With subscriptions the user supplies a query, not a fat query, so no intersection work is done.  That said I found I still needed to modify the subscription query slightly due to mutation configs (add `__typename` to edge for instance).

---

I'll look over the code again and update as appropriate.
",eyston,
541,2016-03-27 02:27:51,"+1
",shogs,
541,2016-03-31 01:34:04,"+1
",aliatsis,
541,2016-04-02 17:01:20,"+1
",AhmadEl-Banna,
541,2016-04-21 18:41:45,"Currently evaluating Relay and this came up as a requirement.  So, real-time updates are not something that's implemented yet?  Or are there any demos / sample code that do have this implemented somehow?
",fingermark,
541,2016-04-21 20:05:33,"We aren't actively working on supporting subscriptions in open-source. That said, all the important pieces exist to implement real-time subscriptions if you're willing to put in some work. The simplest approach would be to set up something _outside_ of Relay to listen for updates from the server (e.g. via a websocket), and then tell Relay that the data has changed by using e.g. `RelayStore.getStoreData().handleQueryPayload(query, payload)`. Note that you need a query so that Relay can interpret the data - you can construct one with

<S_CODE_TOKEN>
",josephsavona,
541,2016-04-21 20:22:44,"@josephsavona so @leeb's tweet in March wasn't quite accurate?  https://twitter.com/leeb/status/710362545282875392
",timhaines,
541,2016-04-21 21:15:52,"@josephsavona kindof thinking out loud, but is there a way today for me to give a query and query vars, relay force fetches the data based on that query and merges it with the local cache.

above would let me just send ids in the websocket payload and then relay can just fetch the required data using the query config. wondering if this approach is an anti pattern.
",chirag04,
541,2016-04-21 21:24:40,"@chirag04 you can:

<S_CODE_TOKEN>

Replace `primeCache` with (I think) `forceFetch` to ignore the cache and send the query in total.
",eyston,
541,2016-04-21 21:33:58,"You can also read from the store directly:

<S_CODE_TOKEN>

There are also methods for reading a fragment and observing a query / fragment too but I haven't used them.  I've used the above `primeCache` and `readQuery` in order to implement an `onEnter` handler in `relay-react-router` (in this case checking if a user has joined a channel or not before routing to the channel data).

Lots of cool stuff here: https://github.com/facebook/relay/blob/master/src/store/RelayEnvironment.js (exposed on `Relay.Store`).
",eyston,
541,2016-04-21 22:03:14,"@timhaines I amended my comment - we _are_ experimenting with subscriptions and real-time updates internally ([more info](http://graphql.org/blog/subscriptions-in-graphql-and-relay/)), but the core team is not currently working on providing a public API for subscriptions in open-source. This is in large part because it's possible to use pieces of Relay API to implement this in userspace as I outlined.
",josephsavona,
541,2016-05-21 19:22:27,"@josephsavona in which format payload should be specified for `RelayStore.getStoreData().handleQueryPayload(query, payload)`. Can you please provide an example as there is no reference for above in docs. Even if I try to provide same query that my component has and this.props.rootQ in payload, in next render cycle it nullifies all data.

Example:

<S_CODE_TOKEN>
",shahankit,
541,2016-05-22 10:38:42,"Okay got it working now by making payload object manually instead of directly using `this.props.rootQ`.

<S_CODE_TOKEN>
",shahankit,
541,2016-05-27 20:12:07,"> I amended my comment - we are experimenting with subscriptions and real-time updates internally (more info), but the core team is not currently working on providing a public API for subscriptions in open-source. This is in large part because it's possible to use pieces of Relay API to implement this in userspace as I outlined.

@josephsavona out of curiosity, why are subscriptions not on the agenda to support as part of Relay's core api? Or is just a matter of priorities?

One of the main reasons why I would adopt REST instead of GraphQL at the moment is since there doesn't seem to be a solution out there that's dealt with consuming GraphQL in a reactive web app (in a consistent way). Maybe it's not that big a deal since it _can_ be done, but it would be great to keep under the umbrella of Relay for consistency and simplicity. It also seems like a very common use case so would add a lot of value. 
",sampeka,
541,2016-05-28 00:39:37,"> why are subscriptions not on the agenda to support as part of Relay's core api? Or is just a matter of priorities?

@sampeka We do plan to support subscriptions as part of the API; what I was referring to is that we don't intend to provide a high-level `RelayMutation`-style API as this would increase the framework size and complexity. Instead, we plan to focus on providing [core primitives](https://github.com/facebook/relay/issues/559) so that things like real-time subscriptions can be implemented in user space. There are a variety of ways that developers may need to push updates from their backend to the client, and we don't want to restrict this too early by imposing the requirements of a network layer, etc.

As I mentioned, it's possible to implement subscriptions today by calling into the `handleUpdatePayload` API. Ideally, the community could help inform what the core API described at #559 should look like.
",josephsavona,
541,2016-05-28 00:54:53,"We have realtime working within our relay application, I will release how we did it within a week, it isn't very fancy and not as powerful as subscription but it's a first step, and something that could turn into subscriptions.
",miketamis,
541,2016-05-28 00:56:28,"In our Relay application (with a Ruby On Rails/GraphQL backend) we simulated subscriptions using Pusher, on both backend and frontend.
",caiosba,
541,2016-05-28 01:04:53,"@miketamis @caiosba Great to hear!
",josephsavona,
541,2016-05-29 17:42:30,"I'm also implementing this in my app. Is it possible to modify one item in a connection at the moment without having to create a query containing the whole connection ?
",xuorig,
541,2016-05-29 17:59:05,"The individual item is a node, right? You can definitely construct a node
query to modify it in that case.

On Sun, May 29, 2016, 1:42 PM Marc-Andre Giroux notifications@github.com
wrote:

> I'm also implementing this in my app. Is it possible to modify one item in
> a a connection at the moment without having to create a query containing
> the whole connection ?
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/facebook/relay/issues/541#issuecomment-222372943, or mute
> the thread
> https://github.com/notifications/unsubscribe/ABv9N7lB6nMo8gp0kvU9a7cmSAn66XBlks5qGdAbgaJpZM4GaY63
> .
",NevilleS,
541,2016-05-29 18:00:30,"good point @NevilleS! Node Interface to the rescue!
",xuorig,
541,2016-06-04 19:14:45,"@miketamis did you ever get a chance to release a write up of how you're handling real-time data? 😃 
",aweary,
541,2016-06-05 23:39:24,"I have a similar example as @shahankit but with a twist.

I'm trying to add a new node to a previously fetched connection (my terminology could be wrong here).  A single location can have multiple orders.  If a new order is added to a location a websocket payload is received with the new order data.

I want to append the new order to the existing list of orders.

I've tried all kinds of different permutations of the following:

<S_CODE_TOKEN>

The above code results in `this.props.location.orders` becoming undefined

If if I run `Relay.Store.forceFetch({locationQuery}, readyState => {})` and inspect the outgoing query it seems like Relay is adding an alias to the `orders` field in a format similar to `_orders2RjKo3`

I suspect that Relay is expecting the `payload` to contain the key `_orders2RjKo3` and because it doesn't exist it sets `this.props.location.orders = null` as a result.

Assuming I am correct, how do I work around this?  Is there a way to retrieve the value for the `orders` key that Relay is expecting in the `payload` object passed to `Relay.Store.getStoreData().handleQueryPayload(locationQuery, payload)`?

I'd love to hear if anyone has an alternative way of handling this without using `forceFetch` to retrieve an entire list of orders.
",alexanderlamb,
541,2016-06-06 03:13:08,"@alexanderlamb the `_orders2RjKo3` you see in there is the `serializationKey` for this connection. (Hashed based on calls and values I believe).

If you know your connection's `dataId` already, here's a way you could find that key, knowing that.

<S_CODE_TOKEN>

Actually since you have the query already, you might be able to find the connection and call `getSerializationKey()` on the node to get it too.

There might be a better way to get it 💭 Let me know if the query works if you use the `serializationKey` in there!
",xuorig,
541,2016-06-06 03:56:57,"@xuorig 
To confirm the `dataId` of my connection would be found at `this.props.location.orders.__dataID__` correct?  Or am I looking in the wrong place?

<S_CODE_TOKEN>
",alexanderlamb,
541,2016-06-06 03:59:24,"@alexanderlamb  I just realized the dataID in the store and the dataID in the props are different. I'm a bit confused at this point. If you remove the last part `_first(300)` you'll get the right record, but this is beginning to be super hacky 😿 

`getPathToRecord('client:-3139241862')`

Edit: Cleaner way of finding the ID.

<S_CODE_TOKEN>
",xuorig,
541,2016-06-06 04:04:47,"Here's another way you could do it:

<S_CODE_TOKEN>

`// Find the field corresponding to your connection by going through the AST`

<S_CODE_TOKEN>
",xuorig,
541,2016-06-06 07:04:31,"@alexanderlamb I've not troed this on connection types but there's one more thing you can try, not sure but it worked for me.

<S_CODE_TOKEN>
",shahankit,
541,2016-06-06 16:14:21,"@alexanderlamb It sounds like you're trying to do a mutation (adding an item to a list). For that, you can use [`handleUpdatePayload`](https://github.com/facebook/relay/blob/master/src/store/RelayStoreData.js#L333-L337). 

Again, remember that `handleQueryPayload` and `handleUpdatePayload` are internal APIs. We don't recommend using them for most cases (hence they'll remain undocumented for a while), but if you need real-time subscriptions _today_ and you're willing to do a bit of digging, try out those APIs and let us know how they work for you.
",josephsavona,
541,2016-06-16 04:45:53,"What is the current status of this, does real-time updates are supported yet? If so, where can I find the related docs?
",papigers,
541,2016-06-16 05:51:16,"Last half of this talk brings up this topic http://youtu.be/ViXL0YQnioU
",m64253,
541,2016-06-16 16:43:47,"@m64253 Cool, `@stream` and `@defer` also seems awesome. Any eta for any of these to be released? 
Is there any interim solution for implementing live updates in the meantime? 
",papigers,
541,2016-06-16 20:53:03,"> Cool, @stream and @defer also seems awesome. Any eta for any of these to be released?

@papigers These are experimental features that we are still exploring. For an interim approach to real-time subscriptions, my [comment in this thread](https://github.com/facebook/relay/issues/541#issuecomment-213093469).
",josephsavona,
541,2016-06-17 15:34:35,"I got real-time working by using the mutation api.
I plan on releasing the code (and example) when I have cleaned it up a little bit.

The current api allows you to have a similar api as mutations.

<S_CODE_TOKEN>

![PoC](http://g.recordit.co/zZfGNmYJTr.gif)
",edvinerikson,
541,2016-06-17 15:38:23,"Is this an official Facebook thing? 😄
",taion,
541,2016-06-17 15:41:21,"@taion Nope, I'm just playing in the wild :smile: 

**Edit**
I'm not an FB employee
",edvinerikson,
541,2016-06-17 17:13:49,"@edvinerikson incredible thing! 

I planned to implement it after finishing [graphql-compose](https://github.com/nodkz/graphql-compose) as middleware on the server side for schema. And on the client side via [react-relay-network-layer](https://github.com/nodkz/react-relay-network-layer) as middleware for websockets for next major release.

So I am looking forward to your code release. You'll save me a lot of time by your working solution. You are my idol on this week!
",nodkz,
541,2016-06-17 17:27:02,"@edvinerikson , I'd love to see how you've implemented what you have, even before a release. I'm relatively new to relay, and I am not familiar with the source yet. I am about to attempt to implement subscriptions in relay myself. Seeing your modifications would help me see the effected parts of relay, and allow me to make the same or similar changes to get a temporary solution into my project much much faster.

Thanks and let me know!
",tjmehta,
541,2016-06-17 21:35:20,"An initial version is available at [edvinerikson/relay-subscriptions](https://github.com/edvinerikson/relay-subscriptions). Feel free to do whatever you want with it (PRs very welcome :smile: ). I am happy to answer any questions you have about it in the new repo.
",edvinerikson,
541,2016-08-16 20:39:48,"Given that https://github.com/facebook/relay/pull/1298 is closed and that relay-subscriptions is a library, is there anything additional to track here?
",taion,
541,2016-08-17 16:56:14,"@taion We get a fair number of questions about this, so I think leaving this open for now makes sense. I've updated the description though, to make it clear that we are not actively pursuing a full subscriptions API within the core.
",josephsavona,
541,2016-08-17 19:26:59,"@josephsavona if not subscriptions, then I think you are almost ready to release 1.0.0 with new features, better performance and new mutation api.

Most of all I am waiting new mutation api, cause all other things are quite comfortable. For me Relay is the best store keeper, than ReduxAppolo things.
",nodkz,
541,2016-08-19 17:55:51,"@josephsavona 

Looking through #1298 and discussing with @edvinerikson – would you be okay with merging the scaffolding for subscription support in #1298?

I mean specifically https://github.com/facebook/relay/pull/1298/files#diff-320b6df8cf530a681d201c75772401eaR163, https://github.com/facebook/relay/pull/1298/files#diff-3a2c3b1ea174f413b5118b1aac4ecc2eR115, and an skeletal implementation of `RelayEnvironment#subscribe` that just throws.

This would allow actually implementing subscriptions in user-space, but still maintaining first-class API support.

Right now, with relay-subscriptions, an additional HoC is required to inject subscription support into components, which feels unnecessary given that there already is a Relay environment and a Relay container.
",taion,
541,2016-08-19 21:15:03,"@taion Is the main reason for adding those to avoid an extra HOC for those components that have subscriptions? If that's the case, this can probably be handled purely in user space. You could, for example, create a `RelaySubscriptionContainer.create(Component, subscriptions, spec)` function that delegates to `Relay.createContainer` (so that users only have to write one wrapper function instead of two). The extra HOC should be trivial in practice, given that relatively few containers would have subscriptions.

Please let me know if I'm overlooking something though!
",josephsavona,
541,2016-08-21 03:19:42,"That works.

One more thing – it looks like babel-relay-plugin has a special carve-out for `clientSubscriptionId` on subscription payloads.

It seems easier all around to keep track of identifying subscriptions in the network layer. There's no bookkeeping like with mutation queues I'm aware of that requires `clientSubscriptionId` at the library level.

In fact, #1298 doesn't implement `clientSubscriptionId`.

Am I missing any benefit that in fact does obtain from using `clientSubscriptionId`?
",taion,
541,2016-08-24 15:55:50,"I did not include clientSubscriptionId, bc i ended up just handling it in the network layer ( like josephsavona pointed out it could be done, earlier in this thread: https://github.com/facebook/relay/issues/541#issuecomment-174679941). In my full implementation, it was only used in the network layer to the network layer to correlate requests and responses for primus ( this may not be necessary for other transports that handle this correlation for you, like socket.io).
",tjmehta,
541,2016-11-18 21:49:04,"I am toying with the idea of transforming our existing mutation payloads into subscription payloads. That way, only one payload would need to be maintained instead of two. I am currently able to take a mutation class and either extract a RelayMutationQuery object or the actual graphql string. Neither of these representations get me to the point where I can transform it into the object like that which is created when passing a template string into the Relay.QL function which can be used to create a subscription object from the RelayQuery.Subscription.create method. Any ideas? I can paste code examples if you need more context for what I am attempting.
",jg123,
541,2016-11-18 21:58:55,"@jg123 quick note for now check out http://npmrepo.com/relay-subscriptions or http://npmrepo.com/primus-graphql

I am using primus-graphql in prod for https://codeshare.io
",tjmehta,
541,2016-11-18 22:09:46,"Thanks @tjmehta. I have been borrowing heavily from the relay-subscriptions project, and primus looks nice and concise. What I really want to do is use my current mutation payloads as subscription payloads, so I only need to maintain the mutations.
",jg123,
541,2016-11-18 22:11:44,"If you use fragments you can share that fragment between the mutation and
subscription. ${TodoMutation.getFragment('todo')}

On Fri, 18 Nov 2016 at 23:09, Josh Geller notifications@github.com wrote:

> Thanks @tjmehta https://github.com/tjmehta. I have been borrowing
> heavily from the relay-subscriptions project, and primus looks nice and
> concise. What I really want to do is use my current mutation payloads as
> subscription payloads, so I only need to maintain the mutations.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/facebook/relay/issues/541#issuecomment-261655245, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/ADtdjD3s2CBgfJlhrvvrdtIfI3g5xKkAks5q_iItgaJpZM4GaY63
> .
",edvinerikson,
541,2016-11-19 00:34:07,"Thanks @edvinerikson. Maybe a mutation doesn't translate to a subscription. The fat query intersection is dynamic based on previous data retrieved and doesn't make sense in the context of a more static subscription payload.
",jg123,
540,2015-11-02 19:48:13,"Relay's pagination model is optimized for infinite scrolling, in which a view requests an increasing larger number of items. A common requirement is windowed pagination in which the UI shows pages of e.g. 10 items, with support for jumping to the first/previous/next/last page (or to an arbitrary page number in between). 

This is currently difficult to implement in Relay (see #466 for a writeup by @faassen). 

Challenges include:
- Allowing both `first/after` and `last/before` arguments in the same field so long as values are only provided for one of these pairs. This is currently prevented in `babel-relay-plugin`; the check should be moved to e.g. `GraphQLRange`.
- Providing a way to determine a value for the `after` or `before` argument value when jumping to an arbitrary page (more generally, how to do offset based pagination over a cursor-based schema).
- Ensuring that `hasNextPage` and `hasPreviousPage` provide meaningful values - the connection spec currently states that the value of `hasNextPage` and `hasPreviousPage` must be returned as `false` unless the user is paginating in the correct direction, even though there may be previous or next edges.
",josephsavona,2016-12-22 17:05:39
540,2015-11-10 05:29:32,"Thank you for your summary @josephsavona. 

Having read #466, the connection specs and docs, what I wonder most is how it might be possible to reconcile these two paging methods while keeping cursors opaque. If cursors are opaque, jumping to arbitrary pages seems impossible. 

The thing about the opaque cursor-based approach as I understand it is not just that it reflects the infinite scrolling use-case. Given that Relay came from Facebook—a massive distributed system—I assumed its cursor-based paging is more significantly related to the peculiarities of paging in distributed systems: specifically that skip/limit paging is non-performant in distributed applications. The issues are described in this blog post about [MongoDB paging](http://blog.mongodirector.com/fast-paging-with-mongodb/), but basically any distributed DB that I've played with has warned about skip/limit paging for this reason[1]. It might make sense to think about this issue from this angle.

[1] c.f. [Elasticsearch paging](https://www.elastic.co/guide/en/elasticsearch/guide/current/pagination.html)
",dminkovsky,2016-12-22 17:05:39
540,2015-11-10 15:49:45,"@dminkovsky Yup, we use cursor-based pagination precisely because skip/limit isn't performant in large data sets. Also, skip/limit can return overlapping results if items are added between fetching pages.

One option might be to make connection handling injectable. Something like `Relay.injectConnectionHandler(handler)` where the handler had methods to read the list of edge IDs given the GraphQL arguments, as as well as methods to add/remove sets of edge IDs along with the arguments used to fetch them. This could be based off the existing GraphQLRange API.

@yuzhi - thoughts?
",josephsavona,2016-12-22 17:05:39
540,2015-11-10 18:05:45,"I'm much less cool than @yuzhi, but I've been prodding at this a bit and have some thoughts.

I think there's really 3 kinds of common pagination patterns: page number pagination, limit/offset pagination, and cursor pagination. As a reference point, DRF is fairly comprehensive and [implements all three](http://www.django-rest-framework.org/api-guide/pagination/) (though its cursor-based pagination approach is not directly compatible with Relay's assumptions because it only provides start and end cursors).

Relay already handles cursor pagination just fine, so we don't need to talk too much about it, except mention that most cursor paginated REST APIs actually only provide start and end cursors rather than per-element cursors.

Page number based pagination seems like it'd be really ""easy"" in some sense to handle in Relay - your queries would take the form of `connection(page: $page)`; this essentially works out-of-the-box right now if you write the query as `connection(page: $page, first: $DUMMY)`. This works just fine for window-based pagination based on explicit pages, and the existing `PageInfo` is essentially fine.

Limit/offset pagination in this context actually seems very similar to cursor pagination; it seems like essentially the same as cursor pagination, except that (1) the cursors are non-opaque to the client, and (2) the cursors can change underneath the client as records are inserted and removed.

One complexity in both cases is how to handle new elements getting inserted into the collections, but frankly neither method of pagination really deals well with dynamic lists anyway.

Partially, #466 I think just speaks to the difficulties of trying to do window-based pagination when using cursors. I think that complexity is more at the application layer conceptually though; imagine the following:
1. Page displays first 10 items starting at #1; previous page unavailable, next page available
2. Go to next page
3. See first 10 items starting at #11; previous page available
4. A new element #0 is prepended to the beginning
5. Go to previous page
6. Page displays 10 items starting at #1; previous page available
7. Go to previous page again
8. Page displays only #0 (???)

I think there are meaningful practical difficulties with windowing on cursor-based APIs, which make it a bad enough fit that it might be better to not try to shoehorn it in.
",taion,2016-12-22 17:05:39
540,2015-11-10 18:07:58,"To add: IMO one of the complexity points in Relay with e.g. automatically discovering which new nodes to fetch when using cursor-based pagination for infinite scrolling is just largely not relevant when using windowed pagination (via either page numbers or even limit/offset to an extent). That level of rich support just isn't as relevant in the windowed case.
",taion,2016-12-22 17:05:39
540,2015-11-10 18:44:52,"@taion Agreed, these are distinct use cases and ultimately Relay should support all of them. Allowing connection handling to be injectable would make it easier for products to choose between approaches, without having to build both models (page number & limit/offset are isomorphic) into the core and test them separately. Note that connections account for much of the complexity in Relay internals, so testing against one well-defined injection API is preferable to `n` arbitrary connection models.
",josephsavona,2016-12-22 17:05:39
540,2015-11-10 18:58:23,"That's not exactly what I'm saying - I feel like the current pagination API offers enough to (with at most minor tweaks) satisfactorily implement page-based pagination and limit/offset-based pagination in user space.

Limit/offset might have slightly different semantics, but it seems perfectly suitable to model e.g. page-based pagination as just another argument to the current connection style.
",taion,2016-12-22 17:05:39
540,2015-12-16 13:06:13,"I also would like to be able to jump to a specific page. @taion - you write above ""I feel like the current pagination API offers enough to (with at most minor tweaks) satisfactorily implement page-based pagination"". Can you please explain how to achieve this? Many thanks...
",shaimo,2016-12-22 17:05:39
540,2015-12-16 15:55:35,"You just add a `page` arg or something to the field. Just don't bother with the cursor-related stuff. 
",taion,2016-12-22 17:05:39
540,2015-12-16 15:58:32,"to a GraphQLList-type field, right? And then just do whatever, right?

On Wed, Dec 16, 2015 at 10:56 AM, Jimmy Jia notifications@github.com
wrote:

> You just add a page arg or something to the field. Just don't bother with
> the cursor-related stuff.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/540#issuecomment-165153633.
",dminkovsky,2016-12-22 17:05:39
540,2015-12-16 16:30:33,"Pretty much. You can make it a connection if you want connection-style behavior on mutations... depends what you want, really. But windowed pagination is in some sense easy - it's just a custom filter arg.
",taion,2016-12-22 17:05:39
540,2015-12-17 08:07:00,"@taion - that's indeed easy - my concern was that using some arbitrary page parameter rather than the cursor I would be losing the benefits of the connection type. If there are no such benefits, then not even sure why bother with connection in the first place rather than just some standard field...?
",shaimo,2016-12-22 17:05:39
540,2015-12-17 14:17:17,"Which specific benefits were you thinking about that would be relevant when doing windowed pagination?
",taion,2016-12-22 17:05:39
540,2015-12-17 16:33:06,"Not sure. I'm really new to Relay and might not have enough understanding of all the concepts, but I read somewhere that Connection was created to work well with large datasets. But if not using the Connection mechanisms and instead just using some page number parameter, is there any reason to stick with a Connection rather than a standard field?
",shaimo,2016-12-22 17:05:39
540,2015-12-17 16:39:12,"You get nice stuff like just inserting new edges after mutations. Otherwise there are great conveniences for infinite scroll type views. But if you're just doing windowed pagination, I don't think it matters much.
",taion,2016-12-22 17:05:39
540,2015-12-17 16:50:57,"@taion Thanks for your help. I'll check if I can relax my requirements and maybe just use what Connection provides. Maybe indeed in large datasets it doesn't make much sense to allow the viewer to ""jump"" to a particular page anyway (especially if the dataset is not fixed, in which case next time you will get different results anyway)...
",shaimo,2016-12-22 17:05:39
540,2016-01-14 18:49:39,"@taion Can you please clarify what the nice stuff is exactly?
Even for windowed pagination I would like new edges to be inserted/removed ""magically"" after insert/delete mutations.
Is there other ""nice stuff"" that has to be considered?
",BerndWessels,2016-12-22 17:05:39
540,2016-01-14 19:15:19,"That doesn't really make sense in the context of windowed pagination. Suppose you're on page _n_. If an insert happens, where the new node is not inserted on this page, what should you do? That's why I say it's not particularly well-defined.
",taion,2016-12-22 17:05:39
540,2016-01-14 19:25:21,"@taion Thats true, even though in some of my previous apps the visible window would be updated to reflect inserts and updated correctly. But that might be actually a bit out of scope here since it usually also requires a ""real-time"" connection or notifications from the back-end.

So what you are saying is: forget about connections and implement a simple windowed pagination as a simple query for a list - because connections do not provide any benefit in this case?
",BerndWessels,2016-12-22 17:05:39
540,2016-01-14 20:25:11,"I think if you're doing inserts or deletes, using a connection will still be more like what you want – it's just that there will be additional edge cases to think about in the context of insertions and deletions. You're probably going to just end up re-fetching that entire page on insertions or deletions, which is probably what you want anyway.
",taion,2016-12-22 17:05:39
540,2016-01-14 20:29:45,"Thanks @taion. There is only one last thing I am concerned about - memory. What if a user pages through huge amounts of rows - maybe even in different connections - will the store get bigger and bigger - or is there some kind of garbage collection in the Relay Store as well?
",BerndWessels,2016-12-22 17:05:39
540,2016-01-14 20:32:57,"You get the same thing no matter what pagination scheme you use.
",taion,2016-12-22 17:05:39
540,2016-01-14 21:03:22,"@taion I thought that Relay Connections might be able to remove unused edges from the Store. But maybe memory concerns is a totally different discussion.
",BerndWessels,2016-12-22 17:05:39
540,2016-12-22 17:05:38,"I'm going to close due to inactivity. However, in the new core we've developed a more generalized abstraction of pagination/connections that should allow developing windowed pagination in user-space. We'll document and revisit once the new core is available (#1369).

Thanks all - we really appreciate your being vocal about this use-case.",josephsavona,2016-12-22 17:05:39
539,2015-11-02 19:37:19,"We recently changed `babel-relay-plugin` to ensure that the `__typename` of all records is known - either via fetching the `__typename` field or using the parent type of the `id` field (when it is present). Now that Relay knows the type of each record several new optimizations are possible. The general pattern of optimization is that in _any_ query processing stage, fragments may be skipped if their type does not match the concrete type of the record being processed. 

Some possible optimizations:
- `RelayQueryWriter` can skip processing fragments whose type does not match the parent record.
- `diffRelayQuery` _may_ choose to remove fragments whose type does not match the stored record. It is possible, however, that the parent field may point to a new record that has a new type, however, so this may be unsafe.
- Avoid tracking fragments that do not match the known type of a record.
",josephsavona,2016-03-07 11:48:19
539,2016-03-07 11:48:19,"I forgot to update this - all the traversals have been optimized to skip fragments that don't match the concrete type of a record (where it is safe to do so).
",josephsavona,2016-03-07 11:48:19
538,2015-11-02 17:49:56,"This is a meta-task to track progress toward making Relay mutations simpler to both understand and to define in common cases.

In a client/server system there is an unavoidable complexity in handling writes: 
- Making network requests
- Handling error (and possibly retries)
- Sequencing possibly overlapping writes
- Handling optimistic changes and reverting them on error, or clearing them on success
- Handling server response payloads
- (server) Implementing business logic to process incoming writes

Relay handles the vast majority of this complexity on behalf of developers. The tradeoff is that GraphQL mutations are abstracted from the underlying data store, and therefore the system _cannot automatically know what changed_. This requires the developer to tell the system what changed in the form of mutation configs (`getConfigs`). 

There are several avenues for exploration:
1. Simplify the process of defining mutation configs. @steveluscher proposed creating helper functions that would replace the need for the mutation config objects.
2. Require product developers to manually convert the mutation payload into a set of change operations (e.g. `set('record', 'field', 'value')` or `append('connection', 'edgeId')`). If Relay could understand a small set of these change operations, the community could work to define helpers for converting payloads into this form.
3. Create a standard response format for GraphQL mutations to match the change operations from 2, such that mutations would return a description of what changed. This would not reduce the work of defining mutations, but would allow defining the changes once instead of once per client.

It's important to note that the current mutations API is heavily skewed toward practicality: it has allowed us to iterate quickly and produce resilient applications. We're interested in making this API better and welcome contributions from the community. In particular, the best form of contribution is either links to prototypes or pull requests, which will help us and the community understand the practical tradeoffs of any alternative APIs.
",josephsavona,2016-12-20 17:40:58
538,2015-11-13 10:54:29,"In terms of getConfigs, the biggest issue for me is that rangeBehaviors don't really work that well. Essentially a connection can be augmented such that it's filterable and sortable, by an arbitrary number of arguments. It's not enough to be able to take a single argument and decide whether to append/prepend/ignore. We need to be able to look at all the arguments (at the same time) and return a sort key that tells Relay where to add it to the list (or whether to remove it).

<S_CODE_TOKEN>

Of course, it wouldn't be enough to just run this against the new edges, it'd need to be done for the existing edges in the connection too.

At this point, there's no real reason that these behaviours need to be defined in the mutation at all, since it's the component querying on that connection that ultimately cares whether an edge should be in it or not. So it might be preferable to have a way of annotating the actual GraphQL query with a sortKey function, maybe like this:

<S_CODE_TOKEN>
",AndrewIngram,2016-12-20 17:40:58
538,2015-11-13 11:02:22,"I feel like given a choice, though, that sort key behavior is more a property of the connection field than of the query.

You wouldn't really want to define it differently if you were using the same connection in more than one place, and ideally you'd define it on the server anyway.
",taion,2016-12-20 17:40:58
538,2015-11-13 11:38:43,"That's true, I didn't think about pushing it further down the stack. It might make optimistic responses trickier though - If the client knows about the sort function, they could be handled more cleanly too.
",AndrewIngram,2016-12-20 17:40:58
538,2016-02-04 00:48:25,"Since you're taking a look at this right now, I'd say one of the things I dislike the most about the current API is that the fat-query is a client-side concern. If you're implementing an `AddCommentMutation` on the client, it's likely that you'll specify a fat query like: `post { comments }`, since that's what the client is up to. However, maybe there's another part of the server graph that is affected, like `analytics { totalCommentCount }`. The server-side developer _knows_ that she has affected the `analytics` node, and can even add the `analytics` node to the mutation payload, but the client will continue neglecting to update that node until the client fat query is fixed.

Conceivably, the fat query could simply be the mutation payload definition, but that precludes the ability to narrow the affected fields via selections (e.g. `analytics` vs. `analytics { totalCommentCount }`). So maybe the fat query is a string attached to the payload type as metadata...?
",NevilleS,2016-12-20 17:40:58
538,2016-02-08 22:22:38,"I'm going to fold some other issues into this one as a checklist. This will be make things more manageable, seeing as these all end up being interrelated:
- [ ] Add an `onProgress`-type callback for mutations with files (was #789)
- [ ] Support adding multiple edges to a range in one operation (was #783)
- [ ] Handle plural file uploads (was #586)
- [ ] Make `RANGE_ADD` easier to use by solving fragile dependency on having also queried for the connection (was #542)
- [ ] Fill in gaps in `Relay{Mutation,Query}Request` documentation (was #581)
- [ ] Make mutations and returned cursors work with sorted/filtered connections (was #766)
- [ ] Consider renaming `RelayMutation`'s `getVariables` method (and maybe `getFatQuery`) to reduce confusion (was  @#711)
- [ ] Add `@relay(pattern: true)` to docs (was #647)
- [ ] Rename `REQUIRED_CHILDREN` to `EXTRA_FRAGMENT` and document its use (was #237)
- [ ] Address server-side configs (was #826, see also #489, #293, #125)

(More to come, but I'm still curating...)
",wincent,2016-12-20 17:40:58
538,2016-02-10 04:44:50,"Hey @wincent, if I wanted to run some more mutation-related ideas/questions past you, how would you prefer to see it? Just comment here? For example, I'm curious to hear what the Relay team's thoughts are about scenarios where the client _can't_ know in advance which nodes might be affected by a mutation...
",NevilleS,2016-12-20 17:40:58
538,2016-02-10 06:18:40,"@NevilleS: I'm fine with you creating separate issues, as they provide us with a space to explore each topic. But just bear in mind that they might ultimately get closed and folded into the checklist above if it they end up being something that we can tackle as part of the mutations overhaul.
",wincent,2016-12-20 17:40:58
538,2016-06-14 22:02:58,"Hi @wincent 
Do you have any ETA about multiple file uploads?
",eugenehp,2016-12-20 17:40:58
538,2016-06-15 18:41:38,"@eugenehp: I don't have any work in progress on that specific front, but you should be able to do this today using the workaround noted in #586 (keying the files in the `FileMap`, as opposed to an array). If somebody feels urgency to get array support baked in sooner, we'd love to take a look at a PR.
",wincent,2016-12-20 17:40:58
538,2016-07-01 22:09:44,"Regarding points 2 and 3 above in the OP, I feel like a nice optimum might be to define those change operations in userspace, as e.g. reducers that operate on the store, if this is applicable.

This would then allow both a high level API for defining those operations from the server, but also offer the option of dropping to a lower level API in case the existing set of verbs is insufficient, but handling the latter entirely in user space.
",taion,2016-12-20 17:40:58
538,2016-10-24 19:31:35,"Would it be possible for `RANGE_ADD` to have behaviors like `after` or `before` that specify cursors? I am, for example, inserting an edge into an alphabetically sorted list.

(edit: looks like this was previously discussed at #293)
",dminkovsky,2016-12-20 17:40:58
538,2016-10-26 18:18:09,"I wouldn't hold my breath on that - trying to design an API for `RANGE_ADD` to allow for (basically) arbitrary collection mutations via some combination of JSON config params seems like a losing battle... the real solution here is to allow for arbitrary mutations of the store via a controlled API, which is what you see in the Relay 2 presentations 👍 
",NevilleS,2016-12-20 17:40:58
538,2016-10-26 18:21:17,"Hi @NevilleS. Long time! I've been out of the Relay loop a bit lately: Relay 2 presentations? Are you talking about talks (like https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable) or a feature called ""presentations""?
",dminkovsky,2016-12-20 17:40:58
538,2016-10-26 18:24:28,"I'm seeing something about a new ""imperative mutations API"" in this talk (will watch the YouTube later—exciting!)
",dminkovsky,2016-12-20 17:40:58
538,2016-11-02 19:10:05,"Yeah, I was talking about the presentations Greg and Joe gave recently about some Relay 2 goals, one of which is a different approach to mutations, hopefully you found some of that? Joe's talk at React Rally had an example.
",NevilleS,2016-12-20 17:40:58
538,2016-12-20 17:40:58,Done thanks to @wincent - check out [`Relay.GraphQLMutation`](https://facebook.github.io/relay/docs/api-reference-relay-graphql-mutation.html#content).,josephsavona,2016-12-20 17:40:58
537,2015-11-02 17:18:30,"Relay currently retains two sets of information for the lifetime of a user session:
1. The cache of previously fetched server data.
2. The corresponding ""tracked queries"" that describe the queries used to fetch the cached data.

This has served us well, but causes a problem in larger apps that mutations must refetch _all_ affected data, as opposed to only the affected data that is also being actively rendered.

Furthermore, some records in the cache can grow quite big - for example the 'viewer' node - and ideally unreferenced fields could be evicted from the cache.

This is a meta task to track the work on changes to query tracking and field-level cache eviction.

Work is ongoing in #485.
",josephsavona,2015-12-16 23:53:17
537,2015-12-16 22:26:48,"@josephsavona Is there any undocumented way to do this currently (before this is done)? Primarily to throw away the entire store and all cached data?
",grydstedt,2015-12-16 23:53:17
537,2015-12-16 23:23:08,"The `forceFetch` ([docs](https://facebook.github.io/relay/docs/guides-root-container.html#force-fetching)) property of RelayContainer can be used to load the full query of the component tree overwriting that's been fetched. This can often help work around this issue.
",kassens,2015-12-16 23:53:17
537,2015-12-16 23:53:17,"I experimented with this in #485 and spun off some ideas into separate commits, but this ultimately didn't pan out. We'll continue exploring ideas around cache eviction. As @kassens noted, `forceFetch` can be used to forcibly refetch information when necessary.
",josephsavona,2015-12-16 23:53:17
537,2015-12-16 23:59:27,"Unfortunately I can't use `forceFetch` in this case. I have to deal with a stale values in strange ways. I can create a separate ticket for it.
",grydstedt,2015-12-16 23:53:17
536,2015-11-02 16:59:14,"Relay currently passes through directives to the server, but does not directly implement support for `@include` or `@skip`. The outward effects of this are that skipped fields (either `include: false` or `skip: true`) are not sent to the server, and that data for skipped fields is not returned to components in `props`.

The simplest implementation of the above is to make `RelayQueryNode.getChildren()` not return child fields that are skipped. 

Contributions welcome, otherwise we'll get to this as time permits.
",josephsavona,2015-11-10 04:55:34
536,2015-11-10 15:43:16,"@xuorig thanks for the PR!
",josephsavona,2015-11-10 04:55:34
536,2015-11-10 16:05:17,":tada: 
",xuorig,2015-11-10 04:55:34
535,2015-11-02 16:53:05,"Removes the `Relay.Query` template tag; instead let's encourage `Relay.createQuery(Relay.QL`...`, variables)`.
",josephsavona,2015-11-02 19:02:27
535,2015-11-02 16:53:21,"@facebook-github-bot import
",josephsavona,2015-11-02 19:02:27
535,2015-11-02 16:57:54,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/888047744615232/int_phab to review.
",facebook-github-bot,2015-11-02 19:02:27
534,2015-11-02 12:06:45,"Hi everyone,
I don't understand how _tracked queries_ work.

Here there is a piece of my application:

_GRAPHQL_

<S_CODE_TOKEN>

_SERVER SIDE MUTATION_

<S_CODE_TOKEN>

_CLIENT SIDE MUTATION_

<S_CODE_TOKEN>

Now I have a `Container` called `ProgramCard` with a `fragment` like this:

<S_CODE_TOKEN>

The `Mutation` is called by `ProgramAutoInviteToggle` and should toggle the value of this `Program` `subjectSubscription` field. 
In the `ProgramCard` render method I want to show or not `ProgramSubjectRegistrationLink` depending on the `subjectSubscription` value.

The problem is that the actual mutation made by the client is the following:

<S_CODE_TOKEN>

There is no trace of `subjectSubscription` field. Why??

Thank you very mutch for helping me with this. I really cannot figure it out!
",davide-ganito,2015-11-02 16:39:22
534,2015-11-02 16:39:22,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2015-11-02 16:39:22
533,2015-11-02 02:25:35,"<S_CODE_TOKEN>
",teaegg,2015-12-04 22:01:21
533,2015-11-02 06:17:05,"That's most probably because babel 6.x changed smoothly the way that babel's plugin API works.

Docs: http://babeljs.io/blog/2015/10/29/6.0.0/
",schweller,2015-12-04 22:01:21
533,2015-11-02 07:43:30,"I simply removed the `new Plugin()` in babel-relay-plugin and rebuild,  got error

<S_CODE_TOKEN>

after converted the router in relay-starter-kit

<S_CODE_TOKEN>

to: 

<S_CODE_TOKEN>

error disappeared and transformed successfully. however, it's still not working.
",teaegg,2015-12-04 22:01:21
533,2015-11-02 14:57:03,"Yup! The new version _just_ came out, and we'll update as soon as feasible. 
",josephsavona,2015-12-04 22:01:21
533,2015-11-05 09:55:45,"Any workaround for now besides reverting back to babel v5.x?
",alvinthen,2015-12-04 22:01:21
533,2015-11-10 23:59:47,"+1 just hit this and would love a workaround without have to downgrade
",philostler,2015-12-04 22:01:21
533,2015-11-11 02:00:57,"+1
",indiejoseph,2015-12-04 22:01:21
533,2015-11-11 02:03:48,"+1
",mikestaub,2015-12-04 22:01:21
533,2015-11-11 02:04:48,"@sebmck himself is helping out on this - hang in there!
",josephsavona,2015-12-04 22:01:21
533,2015-11-11 02:39:02,"Hello, I hit this issue too but I couldn't wait :)
I have a working solution at this repo: https://github.com/YanchWare/relay 
Maybe it can help for the final solution.

It is not based on the latest version of your code, but on the release 0.3.0 (I think - version from facebook/relay-starter-kit)
",amenuor,2015-12-04 22:01:21
533,2015-11-18 12:02:38,"+1. Got stuck...:-(
",shaimo,2015-12-04 22:01:21
533,2015-11-19 22:09:51,"+1
",gblache,2015-12-04 22:01:21
533,2015-11-20 09:46:26,"+1
",shuhaodo,2015-12-04 22:01:21
533,2015-11-20 10:50:15,"+
",namtran3005,2015-12-04 22:01:21
533,2015-11-20 17:37:11,"+
",chrisgwgreen,2015-12-04 22:01:21
533,2015-11-20 17:51:13,"Per the above comment, we will upgrade the plugin for babel 6 as soon as feasible. 
",josephsavona,2015-12-04 22:01:21
533,2015-11-20 17:52:04,"guys, other alternatives? I'm pretty much stuck at this point. If someone can point me to Babel transpile doc I can try fixing it. I'm down to ""Program(node, parent, scope, state)"" and ""TaggedTemplateExpression(node, parent, scope, state)"" - the problem is that, ""state"" is always undefined but lots of references to it:  var documentName = state.opts.extra.documentName;

I guess the ""state"" parameter is changed in Babel 6. I see other plugins using ""(node, parent, scope, file)"" parameters. @sebmck, if you can point me to the doc would be great!
",shuhaodo,2015-12-04 22:01:21
533,2015-11-20 17:56:11,"I downgraded to 5.  I spent some time trying to update the plugin yesterday but punted after a few hours because it sounded like the whole Relay app was being updated/ported internally (per this thread).

Happy to jump on a branch and take a stab this weekend if you have anything public/pushed.
",gblache,2015-12-04 22:01:21
533,2015-11-20 18:51:34,"@shuhaodo @gblache I have spent some hours on this and I pushed all my changes to the branch here: https://github.com/YanchWare/relay
The plugin should be 100% working all tests passing, but I haven't had the time to test it in a real application.

The full relay package is also building fine now, but around 70% of the unit tests are failing. So... something is clearly wrong :) I do not think I will have more time this weekend for this, but if you feel like it that is quite a nice challenge :) You can continue where I left.

Btw I also suspect that someone else is ""officially"" porting this to babel6, but no idea if that is the case and when that is going to happen.
",amenuor,2015-12-04 22:01:21
533,2015-11-20 19:15:35,"@amenuor So cool! Should the whole relay package be replaced or just the babel-relay-plugin?
",shuhaodo,2015-12-04 22:01:21
533,2015-11-20 20:15:08,"@shuhaodo well depends what you want. If you want the latest version in the relay repository, then you will may try the full relay package as it is, but as I said unit tests are not passing so I do not think it will work.

If instead you need a quick and dirty solution (as I did too :) ) then you can use the latest official release of relay (the one for instance used in the starter kit at https://github.com/relayjs/relay-starter-kit ) with the plugin modified as in this change set https://github.com/YanchWare/relay/commit/c56891ac52c6c4aba41b4e5f7c5b41eba0818ac6 (modify directly the 2 js files under the plugin folder in node_modules/babel-relay-plugin/lib )
",amenuor,2015-12-04 22:01:21
533,2015-11-20 20:25:35,"@amenuor  I just took the plugin and it works like a charm, thank you!
",shuhaodo,2015-12-04 22:01:21
533,2015-11-21 00:18:43,"If you're on master, `babel-relay-plugin` should work out of the box with babel 6 as of ba004a491f6a5ee278c01522d9f17a92a18b56bb. We'll upgrade the examples, tests, etc to use babel 6 at a later date.
",josephsavona,2015-12-04 22:01:21
533,2015-11-21 00:30:02,":clap: 
",gblache,2015-12-04 22:01:21
533,2015-12-04 13:29:20,"Please push this to npm. I can't wait to start working on my new project. 
",voodooattack,2015-12-04 22:01:21
533,2015-12-04 22:01:21,"@voodooattack OK!
",steveluscher,2015-12-04 22:01:21
532,2015-11-01 14:44:23,"This error appears in examples, in browser console after all `npm install`, `npm start`.
Obviously https://github.com/facebook/relay/blob/master/examples/todo/package.json#L21 does not work, because after installing react-relay from scratch as dependency it works. My npm version: 2.10.1
",designeng,2016-05-10 16:01:01
532,2015-11-02 23:01:04,"I just tried this in a new directory and it worked for me.

<S_CODE_TOKEN>

This was running node v4.1.1 and npm 2.14.4. Which version of node are you running?
",kassens,2016-05-10 16:01:01
532,2015-11-07 19:02:20,"@kassens, When I open this issue I had node v0.12 installed.
Now after upgrade to last stable node: v5.0.0, npm: 3.3.6.
But error the same. Should I have node v4.1.1 and npm 2.14.4 exactly?
",designeng,2016-05-10 16:01:01
532,2015-11-07 19:51:32,"I think we might not support npm 3 yet, I'll check this later
",kassens,2016-05-10 16:01:01
532,2016-05-10 16:01:01,"closing due to inactivity.
",josephsavona,2016-05-10 16:01:01
531,2015-11-01 13:21:49,"""Forward pagination arguments"" & ""Backward pagination arguments"" both end with ""More formally:"", yet nothing follows.

![image](https://cloud.githubusercontent.com/assets/43438/10869104/a185a66e-80de-11e5-9966-d8d6fd6bf56a.png)
",timoxley,2015-11-02 23:25:29
531,2015-11-01 13:23:31,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-11-02 23:25:29
531,2015-11-01 13:37:50,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-11-02 23:25:29
531,2015-11-02 23:03:38,"@facebook-github-bot shipit
",kassens,2015-11-02 23:25:29
531,2015-11-02 23:05:29,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/916627988375168/int_phab to review.
",facebook-github-bot,2015-11-02 23:25:29
530,2015-11-01 02:03:29,"Changes `babel-relay-plugin` to output plain-object query representations instead of `new GraphQL.Foo()` calls. The object representation matches the format described by `ConcreteQuery`, though this is not yet enforced. 
",josephsavona,2015-11-06 21:30:32
530,2015-11-01 18:58:43,"@facebook-github-bot import
",josephsavona,2015-11-06 21:30:32
530,2015-11-01 19:00:10,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1647264672220007/int_phab to review.
",facebook-github-bot,2015-11-06 21:30:32
529,2015-10-31 08:45:34,"Hi. Can anyone explain how I can define fragments on Relay container based on data which currently fetched in component? Consider this example:

<S_CODE_TOKEN>

TreeNode component is simple enough - it has mutation which changed 'expanded' field on server. 

<S_CODE_TOKEN>
",bgnorlov,2015-10-31 13:10:02
529,2015-10-31 13:10:02,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",kassens,2015-10-31 13:10:02
529,2015-10-31 13:24:23,"https://stackoverflow.com/questions/33452090/define-fragments-based-on-fetched-data.
",bgnorlov,2015-10-31 13:10:02
528,2015-10-30 10:50:25,"- [ ] Replace `Relay.RootContainer` documentation with some for `<RelayRenderer>`
- [x] Make `context` a required prop of `<RelayRenderer>`
- [ ] Have `Relay.RootContainer` make the choice of a default context
- [ ] Deprecate `Relay.RootContainer`
",yungsters,2016-09-03 00:19:58
528,2016-02-20 01:27:43,"I'm starting to implement an app using Relay. How drastic is this change going to be? Should I look into RelayRenderer from the start, to minimize work in the (near) future, or will the upgrade process be smooth enough that I can just start out using RootContainer, and replace it once this is implemented and released?
",bigblind,2016-09-03 00:19:58
528,2016-02-20 02:12:13,"If we're going to make `context` a required prop, this will depend on #558 which has a few outstanding tasks and pending diffs. The alternative is to go ahead with the deprecation now and introduce the context prop later - possibly gradually by first making it optional with a warning, then required in a subsequent release.
",josephsavona,2016-09-03 00:19:58
528,2016-09-03 00:19:58,"We're unlikely to take any more concrete steps on this, with [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable) just around the corner (which will have a new renderer), so I am going to close this out.

To belatedly answer, @bigblind's question:

> I'm starting to implement an app using Relay. How drastic is this change going to be?

The APIs for `Relay.RootContainer` and `RelayRenderer` are very similar, so the conversion path is pretty straightforward. And to answer the question you didn't ask, we're aiming to make the path to Relay 2 as smooth as possible too. We'll provide more details as we get closer to release.
",wincent,2016-09-03 00:19:58
527,2015-10-30 01:58:18,"Just a removal of an extra `removeTodo` in the imports from `./database`.
",joshblack,2015-10-30 11:01:39
527,2015-10-30 11:01:39,"Thanks for the PR! We still need this though, since `removeTodo` is used in this mutation: https://github.com/joshblack/relay/blob/31cc5204cd5dd2bd955052050e3af39ad49be2db/examples/todo/data/schema.js#L241
",steveluscher,2015-10-30 11:01:39
527,2015-10-30 11:30:02,"Thanks for the response! And you're totally right, I just happened to misread it and think it was a duplicate `import` declaration. Sorry!
",joshblack,2015-10-30 11:01:39
526,2015-10-30 01:42:40,"Currently, when cloning from master and running `npm install` while running any version of `npm@3.x` you'll receive an Assertion Error during the prepublish step saying: `Current npm version is not supported for development, expected ""3.3.9"" to satisfy ""2.x"".`

This PR just updates the semver range of the npm devEngine to support `npm@3.x` versions in addition to `npm@2.x` ranges.
",joshblack,2015-10-30 10:49:37
526,2015-10-30 05:34:15,"This is actually intentional, mostly due to the way we have to use Flow and modules. See #495 & #396 for some previous discussions. So in order to have a reliable development environment, we have to restrict to npm@2
",zpao,2015-10-30 10:49:37
526,2015-10-30 10:49:36,"@joshblack Thanks for filing this, but due to the restrictions that @zpao mentioned we can't support npm3 yet. I'll close this for now.
",josephsavona,2015-10-30 10:49:37
526,2015-10-30 11:30:42,"Sounds good!
",joshblack,2015-10-30 10:49:37
525,2015-10-30 00:28:36,"Resolves the React warnings seen when passing a function component to Relay.createContainer().
Adds a check to skip adding a ""ref"" to the container component if it is a function component.

This does mean setVariables() & forceUpdate() callbacks will not be provided the component
if you passed createContainer() a function component. 

Please let me know if I am on the right track here or what needs more work. :)
",joshthecoder,2015-12-07 23:35:34
525,2015-10-30 11:00:07,"Thanks for this @joshthecoder!

Since we can't be guaranteed a ref, we should get rid of this `this` binding too: https://github.com/facebook/relay/blob/master/src/container/RelayContainer.js#L302-L304

Can you send an update?
",steveluscher,2015-12-07 23:35:34
525,2015-10-30 18:11:24,"@steveluscher Wouldn't this break the current behavior of onReadyStateChange callback you provide when calling setVariables() or forceUpdate()? I'm not sure what use case there is for having access to your component instance in that callback. Maybe for invoking setState()?
",joshthecoder,2015-12-07 23:35:34
525,2015-10-30 19:15:29,"@joshthecoder We should only pass `null` as the instance _if_ it's a stateless functional component, otherwise RelayContainer should continue to pass the instance.
",josephsavona,2015-12-07 23:35:34
525,2015-10-30 20:22:20,"@josephsavona These changes should maintain the current behavior for non-stateless functional components. `this` should still be the component instance.

Also I'm not sure if there's a better way to detect that besides looking for `isReactComponent` on the prototype. Seen the React code use it in a few spots for similar use cases.
",joshthecoder,2015-12-07 23:35:34
525,2015-11-17 15:03:18,":+1: 
",josephsavona,2015-12-07 23:35:34
525,2015-11-18 01:03:30,"@kassens Addressed your comment. Good catch! 
",joshthecoder,2015-12-07 23:35:34
524,2015-10-29 19:23:37,"Hi guys! I have the big problem with relay. I tried to create a simple tree component and got stack overflow error in this part of Relay's code

<S_CODE_TOKEN>

My code is simple tree component (demo on [heroku](https://relay-sample-tree.herokuapp.com), full source code [here](https://github.com/bgnorlov/relay-sample-tree) ):

<S_CODE_TOKEN>
",bgnorlov,2015-11-02 16:59:32
524,2015-10-30 06:40:49,"I suppose that `Relay.QL` is isolated from data/state when convert the graphql-template to a js-code. So I think that `@include(if: $expanded)` works only when query is already converted to JS. According to this, you get `Stack overflow`.  

Try to move `children` to another component. And and check `if $expanded` like normal js code in arrow function. May be it help.

<S_CODE_TOKEN>

PS. It would be great I FB-relay team add example how to construct tree with Relay.
",nodkz,2015-11-02 16:59:32
524,2015-10-30 12:09:09,"We support recursive queries, except via directives (like `@include`). I'll mark this as an enhancement.

In the meantime, you can use `.if(…)` on a fragment to stop the recursion, as demonstrated in this Stack Overflow answer: http://stackoverflow.com/a/32508427/802047

<S_CODE_TOKEN>
",steveluscher,2015-11-02 16:59:32
524,2015-11-02 16:59:32,"merged into #536 
",josephsavona,2015-11-02 16:59:32
523,2015-10-28 01:22:39,"This is related to #478, where having multiple fields that query for different ranges on a Connection come back in random order causing the RelayQueryWriter to get confused and fail to build all the edges.

It is also related to #490. The difference between the PR and #490 is that this request uses a type first sorting that does not otherwise change the order of the elements in the array.
",HurricaneJames,2015-11-04 21:45:30
523,2015-10-28 03:17:23,"This is equivalent to dropping the underlying sort, with the exception of keeping types at the top, and [I don't think we want to drop the sort](https://github.com/facebook/relay/pull/490#issuecomment-151617620) (because then we rely on implementation-specific semantics of key enumeration order, which are not guaranteed to be stable/consistent).
",wincent,2015-11-04 21:45:30
523,2015-10-28 03:43:25,"The sort is reordering an array that is intentionally sequenced in a specific order (the order of the original queries). This is not a case where it is sorting the keys from some object. If it was I would absolutely agree with you. However, the keys for an array are supposed to have an enumeration order.

The only other way to avoid the bug is to rebuild that ordered array when the payload returns and use it to choose which fragment to use. However, due to the recursive nature of the query writer, that proved an exceptionally difficult problem in the general case.

#479 may fix this issue, but only if it is able to toss out split queries for subsequent calls. My guess is it cannot do that in the general case because there are good reasons to have split queries.
",HurricaneJames,2015-11-04 21:45:30
523,2015-10-28 03:56:14,"Forgot to include the updated test in the last push. Pushed it up. Travis CI should pass now.
",HurricaneJames,2015-11-04 21:45:30
523,2015-10-28 09:51:41,"> The sort is reordering an array that is intentionally sequenced in a specific order 

The sort is applied to the list of field names which is the result of calling `Object.keys`. The order is implementation-specific and there is no guarantee that field names will be returned in the same order they were created in the original query. 

Ultimately, the sort needs to be aware of the values of calls such that range segments are ordered, e.g. `first: 10` before `first: 10, after: 10th` before `first: 10, after: 20th`. 
",josephsavona,2015-11-04 21:45:30
523,2015-10-28 15:17:59,"See, this is why I should never respond to a comment after midnight, especially when I'm relying on week old knowledge. I would have sworn it was based on an array, but I must have been thinking about another rabbit hole I went down while working on this problem.

I'm not sure that making sort aware of the values of the calls would help, even if you limit the calls to just first/after. Maybe if you made after/before use a format like `10th` instead of a cursor, but that opens a whole other can of worms.

You are right, the order is implementation specific, though currently all implementations maintain the order for everything but numbers. The best solution is probably to use some kind of OrderedMap that allows lookups based on a key and iterates based on the order the items were inserted (the way the current implementation works). Would you be open to such a solution?
",HurricaneJames,2015-11-04 21:45:30
523,2015-10-28 17:06:31,"I took some time during lunch to prototype up an OrderedMap style data structure for the flattenedFieldMap. That way the algorithm no longer relies on an implementation detail. Sort does not change order other than keeping types at top to meet the internal requirement.
",HurricaneJames,2015-11-04 21:45:30
523,2015-10-30 11:10:44,"Can I ask you to take a look at this solution, @josephsavona?
",steveluscher,2015-11-04 21:45:30
523,2015-10-30 14:06:45,"@HurricaneJames Thanks for working on this. Introducing a custom map implementation could affect performance and before we go down this path we'll need to understand by how much. I'll import this internally and try benchmarking.
",josephsavona,2015-11-04 21:45:30
523,2015-10-30 14:06:52,"@facebook-github-bot import
",josephsavona,2015-11-04 21:45:30
523,2015-10-30 14:07:58,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/854753757955554/int_phab to review.
",facebook-github-bot,2015-11-04 21:45:30
523,2015-10-30 14:17:37,"@HurricaneJames After double-checking the spec we realized that ES2015 `Map`s preserve insertion order, so it should be sufficient to use those. Can you update to just use `Map`?
",josephsavona,2015-11-04 21:45:30
523,2015-10-30 17:09:32,"Sure, I can update it to use ES2015 `Map`s. However, I suspect that ES2015 `Map` might have worse performance than my implementation for this specific problem.

My implementation is fairly streamlined for this specific case. The slowest method is the `array.splice` when updating a key, and we might be able to remove even that. In reviewing the ES2015 docs, I do not believe it changes the key position when updating an existing key, but I'll verify. If that is the case, then we can drop the `splice` call. Also, I'm not sure that we would ever hit that bit of code because we are just walking a tree, so there should be no overwrites.

ES2015 `Map` does a whole lot more ""stuff"" (tm). Being much more generic I suspect it will be slower, especially since many environments will need a Babel transpiled version. If we do not need all the power of a full `Map`, it does not make sense to pay the performance penalty.

I will work on an implementation using Map, then try it against my `FlattenedMap` implementation in jsperf so we can make an informed decision.
",HurricaneJames,2015-11-04 21:45:30
523,2015-10-30 18:52:26,"Well, looks like I was wrong, at least in the case where the browser implements ES2015. ES2015 native Map is 35% faster.

[JSPerf: FlattenedMap vs ES2015 Map](http://jsperf.com/flattenedmap-vs-es2015-map)
",HurricaneJames,2015-11-04 21:45:30
523,2015-10-30 19:13:50,"Yup! Let's use `Map` - thanks for checking though ;-)
",josephsavona,2015-11-04 21:45:30
523,2015-10-30 19:23:35,"I was just looking back over your diff comments and I noticed that you `require('Map')`. Is that needed? I thought Babel runtime handled that for us.
",HurricaneJames,2015-11-04 21:45:30
523,2015-10-31 02:14:14,"> I noticed that you require('Map'). Is that needed?

Yes.
",josephsavona,2015-11-04 21:45:30
523,2015-10-31 13:40:38,"You want it, so I will add it. Can you explain why it is required? I know the babel runtime automatically includes it. Browsers that support `Map` have it by default, just like `Array`. I cannot find anywhere that says it needs to be `require`d first. I am always interested in expanding my knowledge, so I am curious what you ran into that taught you to `require('Map')`.
",HurricaneJames,2015-11-04 21:45:30
523,2015-11-01 18:34:26,"Using `require` makes the dependency explicit, allowing us to a) use our own version of a polyfill if necessary and b) not even send a polyfill to the user if no code relies upon it.
",josephsavona,2015-11-04 21:45:30
523,2015-11-01 18:35:53,"@facebook-github-bot import
",josephsavona,2015-11-04 21:45:30
523,2015-11-01 18:51:56,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/854753757955554/int_phab to review.
",facebook-github-bot,2015-11-04 21:45:30
523,2015-11-04 17:23:22,"I know that `require('Map')` in any of my repos blows up. Is the code coming from the `fbjs` package?
",HurricaneJames,2015-11-04 21:45:30
523,2015-11-04 22:29:07,"@HurricaneJames yup, it's provided by `fbjs`. I believe the OSS version uses the same polyfill as babel.
",josephsavona,2015-11-04 21:45:30
523,2015-11-04 22:29:14,"btw, thanks again for this!
",josephsavona,2015-11-04 21:45:30
522,2015-10-28 00:42:17,"Note: not 100% sure this is a bug... 

I have user-specific config data that saves choices entered in a setup wizard. For each wizard step, I prefill any saved data from the server...but I don't know if the user has loaded the view before or not and there may not be a record on the server. When I write data back, it may or may not have been fetched from the server via Relay depending on if the record exists.

Everything works when there is an existing record...Relay basically sends something like this:

<S_CODE_TOKEN>

:beetle: When there isn't an existing record (that is, when `this.props.onboarding_data` is `null`, as there was nothing to fetch) Relay sends the ""wrong"" query, which only includes the `clientMutationId`, and thus doesn't pull down the newly written onboarding data:

<S_CODE_TOKEN>

GraphQL (correctly) does not call `onboarding_data`s `resolve`, because the query did not ask for `onboarding_data`

I am using `FIELDS_CHANGE` and not `RANGE_ADD`. The page both creates a record if it doesn't exist and updates one if it does.

My fat query includes all the fields, including `onboarding_data`...so I would expect it to be always requested:

<S_CODE_TOKEN>

:point_right: This seems like a fairly general pattern that should be supported. How do I convince relay to request `onboarding_data` when it locally got no data back for the initial query? Do I need two mutations? Do I need one mutation that switches in `getConfigs` based on `this.prop.onboarding_data` (`RANGE_ADD` if `null` and `FIELDS_CHANGE` if a value)?
## More concrete example

**Step 1**: Viewer loads onboarding flow component for first time
- [ ] Personal account
- [ ] Corporate account

Because there is no record in the database, `this.props.onboarding_data` is `null`. Everything seems to work fine.

**Step 2**: Viewer clicks on option:
- [x] Personal account
- [ ] Corporate account

An `onChange` handler fires off an update to the relay store:

<S_CODE_TOKEN>

Note `this.props.onboarding_data` is null when the user goes to the page the first time and the GraphQL mutation query sent doesn't include it in the fields. While the server correctly gets the mutation query and creates the record in the database, because the client never requested `onboarding_data` the server never returns the newly written row to populate `this.props.onboarding_data`.

The component is blissfully unaware of the newly-created database row until the page is reloaded.

**Step 3**: Viewer reloads the page:

:beetle: Note that the user shouldn't have to reload the page.

When the page is reloaded `this.props.onboarding_data` is not null (as the original read query succeeded) which means when the mutation happens `onboarding_data` is requested from the server and the updated values are written to `this.props.onboarding_data`.
",LegNeato,2015-10-30 14:01:49
522,2015-10-28 11:28:11,"See the answer at https://github.com/facebook/relay/issues/521#issuecomment-151660497 - fields for newly created edges are only fetched if the connection is actively being fetched by some container (otherwise Relay doesn't know what fields to fetch on the edge).
",josephsavona,2015-10-30 14:01:49
522,2015-10-29 22:30:24,"Not sure I understand...this is a node I am adding, not an edge. So to do this pattern I need to wrap my component it in another container that explicitly asks for `onboarding_data`? What would that look like? Sorry if this is obvious, I am a n00b.

(also happy to close this if it is a dupe of that other issue)
",LegNeato,2015-10-30 14:01:49
522,2015-10-30 14:01:49,"What @josephsavona means is that, somewhere in your app, there's a query for `onboarding_data` that's not represented in your fat query. The fat query is a query that represents all the possible things that could change in your application as a result of this mutation. Whatever way you're fetching `onboarding_data` in the first place, replicate it in the fat query, and support it in your mutation's backend implementation. Relay will notice that the running app has a query for this data, and will include it in the mutation query.

If you need more information, or you want to go through an example, reopen this question on Stack Overflow and paste a URL to it here!

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2015-10-30 14:01:49
521,2015-10-27 19:26:06,"I am getting this error:

<S_CODE_TOKEN>

Can someone explain how to solve the issue of Relay not requesting an Edge object. I have seen numerous posts, but no real clear solution. Here is a gist will all the information:

https://gist.github.com/jwaldrip/a1aa07745151a6ce6add
",jwaldrip,2015-10-30 14:07:56
521,2015-10-27 22:11:31,"My response from discord:

> johanobergman: @jwaldrip I think it might happen if your rangeBehaviors doesn't cover all possible cases of query arguments.
> I think relay checks rangeBehaviors twice, once before the request and once after. I had an issue with multiple arguments where it required the order of arguments to be both arg1.arg2 and arg2.arg1
> so I specified it twice...

Is this a bug? I've seen a recent commit (4aef0696a2db3422bea1b6c8236dd73a09ac25cc) which should allow arguments in any order. Will that fix the issue?
",johanobergman,2015-10-30 14:07:56
521,2015-10-28 11:25:37,"Relay will only fetch the newly created edge if some part of the application is actively querying for the range. In the gist the mutation configs include the following:

<S_CODE_TOKEN>

The new edge (field `listEdge`) will not be fetched unless some part of the application is rendering the `lists` connection -otherwise, Relay doesn't know what fields on `listEdge` are necessary - recursively expanding all possible subfields would fetch too much data.
",josephsavona,2015-10-30 14:07:56
521,2015-10-29 17:36:15,"@josephsavona, I have  StoriesPage which is a root container. Along with StoriesPage I have AddStoryPage which is also a rootContainer so when I go from StoriesPage to AddStoryPage there I do AddStoryMutation (RangeAdd on StoryConnection) which succeeds (new edge's fields match the stories connection node fields which is queried in StoriesPage) and on success I go back to StoriesPage but there the new edge has not been added unless I do full reload, shouldn't it be updating as it is the only page requesting stories connection? for rangeBehaviors I have {'' : ''}
",IlyasM,2015-10-30 14:07:56
521,2015-10-30 14:07:56,"Thanks for your question! I have an answer for you, but…

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to copy/paste this question to Stack Overflow with the tag #relayjs? I'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2015-10-30 14:07:56
521,2015-11-03 11:35:21,"Hi thanks, here is the link https://stackoverflow.com/questions/33498099/range-add-mutation-successful-not-updating-the-view
",IlyasM,2015-10-30 14:07:56
521,2015-11-03 21:11:09,"Oh, I was talking to @jwaldrip, @IlyasM. I have an answer to his question, but not yours yet. Can you supply code samples in your Stack Overflow question?
",steveluscher,2015-10-30 14:07:56
521,2016-02-07 10:32:01,"@steveluscher Hi, I run into the same problem out of nowhere, can you tell me the answer to jwaldrip's problem? 
Thanks
",bfwg,2015-10-30 14:07:56
520,2015-10-27 18:30:24,"I have a `Relay.Route` that defines multiple queries and Relay is making one call for `graphql` for each query.

<S_CODE_TOKEN>

How can I make Relay aggregate those queries in just one request? How this aggregation works? 
Thanks in advance!
",schweller,2016-04-22 21:21:19
520,2015-10-30 16:12:04,"We just had a conversation about what role core can play here. Broadly:
1. You could create a new batching network layer (and an associated server implementation) that batches those queries together into a single fetch, streams back the results as they're available, and calls `request.resolve(…)` on each `RelayQueryRequest`. This is what we do at Facebook.
2. Relay core could combine each query into one so you get batching by default. Would have to auto-alias each root field (eg. `user` to `user as user0`, in case there are multiple `user` root calls in the batch).

We should carefully trade off against:

a. New demands we place on the implementation of GraphQL servers
b. The ability to maintain choice with respect to _how_ queries are parallelized (client-side? server-side?)
c. The ability to stream responses into the system as they become ready

Looping in @josephsavona and @wincent.

Are you interested in helping with this?
",steveluscher,2016-04-22 21:21:19
520,2015-10-30 17:15:47,":+1: 
",RavenHursT,2016-04-22 21:21:19
520,2015-11-02 06:03:20,"Thanks for you response @steveluscher 
Currently, I'm going with a solution similar to the first option you pointed out. I feel better for now, since I'm not the only one doing this way, but yes, would be awesome to see this in the core.
",schweller,2016-04-22 21:21:19
520,2016-04-21 04:49:37,"Can you provide here proper example of merging several `RelayQueryRoot` into one another? 
Right now I wrote own network layer with JWT, last piece is reducing 7 requests into one in `sendQueries` method. 
",nodkz,2016-04-22 21:21:19
520,2016-04-21 05:23:10,"Relay doesn't support ""merging"" queries together. Instead, we recommend creating a custom network layer that takes the list of queries passed to `sendQueries`  and sends them to the server in a single http request. This is what we do in our internal network layer implementation. 

I wrote a bit more about how to do this [here](https://github.com/facebook/relay/issues/724#issuecomment-169669734), but you can use the getID() method on each query request as a key to identify which data goes with which query. 
",josephsavona,2016-04-22 21:21:19
520,2016-04-21 12:20:05,"@josephsavona thanks for clarification.

If somebody needs example of `BatchNetworkLayer`, and wrapping `express-graphql` you can found it here https://gist.github.com/nodkz/d9a6380d55067192295382e8e490f39f
",nodkz,2016-04-22 21:21:19
520,2016-04-21 17:15:42,"@nodkz would be cool to publish that as an npm module :-)
",josephsavona,2016-04-22 21:21:19
520,2016-04-21 17:17:27,"+1 to that. I was going to ask the same :-) I'd help maintain it!

On Thu, Apr 21, 2016 at 12:15 PM Joseph Savona notifications@github.com
wrote:

> @nodkz https://github.com/nodkz would be cool to publish that as an npm
> module :-)
> 
> —
> You are receiving this because you are subscribed to this thread.
> 
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/520#issuecomment-213023236
",KyleAMathews,2016-04-22 21:21:19
520,2016-04-22 21:01:16,"@josephsavona @KyleAMathews 
I can not publish my gist as npm module. It is too dumb.

So, I spent all current day and made this great thing: https://github.com/nodkz/react-relay-network-layer
With some simple middlewares. Open for review and PRs.
",nodkz,2016-04-22 21:21:19
520,2016-04-22 21:21:19,"@nodkz awesome! Thanks for publishing this! I'm going to go ahead and close this issue :-)
",josephsavona,2016-04-22 21:21:19
519,2015-10-27 15:55:00,"The `Relay.QL` and `RelayQL` tags convert to `GraphQL` nodes (which do not know the value of variables), but all `RelayStore` APIs use `RelayQuery` objects that are a combination of GraphQL nodes plus variables. 

This adds the `Relay.Query`...`` tag to create RelayQuery objects with empty variables (all argument values must be inline in the query).
",josephsavona,2015-10-28 11:02:24
519,2015-10-27 15:57:15,"@facebook-github-bot import
",josephsavona,2015-10-28 11:02:24
519,2015-10-27 16:01:06,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1070785089621395/int_phab to review.
",facebook-github-bot,2015-10-28 11:02:24
519,2015-10-27 16:01:42,"Any idea why regenerating the fixtures causes the EOF newlines to be stripped?
",yungsters,2015-10-28 11:02:24
518,2015-10-27 00:49:39,"update is a method on `Store`
",raineroviir,2015-10-27 14:40:29
518,2015-10-27 00:53:34,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-10-27 14:40:29
518,2015-10-27 00:58:26,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-10-27 14:40:29
518,2015-10-27 09:06:20,"Thanks!

@facebook-github-bot import
",wincent,2015-10-27 14:40:29
518,2015-10-27 09:17:17,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/173508932994848/int_phab to review.
",facebook-github-bot,2015-10-27 14:40:29
517,2015-10-27 00:20:15,,dnshi,2015-10-27 15:15:28
517,2015-10-27 09:08:23,"Thanks!

@facebook-github-bot import
",wincent,2015-10-27 15:15:28
517,2015-10-27 09:17:15,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/588799194591328/int_phab to review.
",facebook-github-bot,2015-10-27 15:15:28
516,2015-10-26 15:08:01,"Hi,

I'm implementing a RANGE_DELETE mutation, which all does is removing an entity from a collection but it does not delete the entity itself.

My `getFatQuery` looks like this:

<S_CODE_TOKEN>

My `getConfigs` looks like this: 

<S_CODE_TOKEN>

It seems to make sense to include the entire entity object in the payload so it seems redundant to include its id in the top level of the payload. Ideally, I'd remove that `entityId` field from the payload and allow to pass an array to `deletedIDFieldName` like `['entity', 'id']`, just like `pathToConnection` . So it resolves the id from there, allowing the payload to be cleaner and more generic.

Thoughts?

Thank you!
",luisobo,2016-05-21 02:50:47
516,2016-05-21 02:50:47,"This was added in b43dc72683c285e21d9e0e52be87b7d66dab5029.

`deletedIDFieldName`: the field name in the response that contains the DataID of the removed node, or the path to the node removed from the connection.
",sampepose,2016-05-21 02:50:47
515,2015-10-26 00:16:05,"Bumped relay-local-schema to the latest version.
<img width=""1137"" alt=""screenshot 2015-10-25 15 45 22"" src=""https://cloud.githubusercontent.com/assets/3792228/10718900/49acacde-7b3a-11e5-8a21-7d222ed5909e.png"">

Also added local `npm install` of `babel-relay plugin` to the website's installation command because otherwise `babel-relay-plugin` would not build due to some dependencies of its build script only available as `devDependencies`.
<img width=""882"" alt=""screenshot 2015-10-25 17 15 23"" src=""https://cloud.githubusercontent.com/assets/3792228/10718984/0d24db36-7b3c-11e5-8527-0429688de528.png"">
",michaelchum,2015-10-30 11:10:30
515,2015-10-27 14:44:28,"@facebook-github-bot import
",steveluscher,2015-10-30 11:10:30
515,2015-10-27 14:45:53,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/983016321757594/int_phab to review.
",facebook-github-bot,2015-10-30 11:10:30
514,2015-10-25 22:57:56,"I broke this in https://github.com/facebook/relay/commit/0e68725c495ad4c23.
",wincent,2015-10-25 23:25:26
513,2015-10-25 22:41:49,"I actually fixed this in two ways, first by adding a `setImmediate` shim (which worked) and then by switching to `resolveImmediate` (which didn't work, but I failed to adequately test this). It seems the tests are very sensitive, with their use of `jest.run{All,OnlyPending}Timers`.

Third time lucky; let's just use `setTimeout`, which should be fine as this is just the test suite.
",wincent,2015-10-25 23:20:27
512,2015-10-25 17:33:32,"Reported here: https://github.com/graphql/express-graphql/issues/29

Chrome sends an `Accept` header of `Accept: */*`, but Firefox sends `Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`, which is causing ""express-graphql"" to return the HTML for GraphiQL to Relay clients running on Firefox, rather than the response for the query. In other words, Relay is completely broken on Firefox.

I tested this with `Accept: */*` and `Accept: application/json` on Firefox. Both work, but I've gone with the more liberal `*/*` for a few reasons:
- Match existing Chrome behavior, because consistency is good (even if just consistency with pre-existing behavior).
- Historical issues with IE not liking `application/json`.
- Don't want to introduce a breaking change for people serving GraphQL
  on some non-JS environment that may be picky about JSON MIME types.
",wincent,2015-10-25 22:02:18
512,2015-10-25 17:35:29,"Note: I could be persuaded to go with the stricter `application/json` type if people feel like my concerns about compatibility with unknown/legacy environments aren't worth worrying about.
",wincent,2015-10-25 22:02:18
512,2015-10-25 17:41:39,"Going to import this because failing tests on master are unrelated (and being tracked separately at https://github.com/facebook/relay/pull/509).

@facebook-github-bot import
",wincent,2015-10-25 22:02:18
512,2015-10-25 17:53:22,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/894736870620483/int_phab to review.
",facebook-github-bot,2015-10-25 22:02:18
511,2015-10-24 18:00:38,"I'm using Relay with [recompose](https://github.com/acdlite/recompose).
Recompose using stateless components inside.
When I wrap any Recompose decorator with Relay Container then I get this error:

<S_CODE_TOKEN>
",vslinko,2015-12-07 23:35:34
511,2015-10-28 14:27:55,":+1: 
same warning with any simple stateless component/function

I am using this helper to get around this issue:

<S_CODE_TOKEN>

This way after react-relay start supporting it - I can easily refactor out the wrapper
",tarun,2015-12-07 23:35:34
511,2015-10-29 22:27:28,"Seeing the same warnings as well. :cry: 
",joshthecoder,2015-12-07 23:35:34
511,2015-11-17 14:20:59,"The upstream React issue is at https://github.com/facebook/react/issues/4936.

Would it be reasonable just to not add the `ref` when the component in question is stateless?
",taion,2015-12-07 23:35:34
511,2015-11-17 14:21:44,"Oh, I see this is already being handled in #525.
",taion,2015-12-07 23:35:34
510,2015-10-24 17:41:10,"While I try to composing two components from different Fields, I built a composing Field:

<S_CODE_TOKEN>

And a composing type:

<S_CODE_TOKEN>

And then writing composing component like this:

<S_CODE_TOKEN>

It says:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Errors are the same.

Then I tried:

<S_CODE_TOKEN>

And it said:

<S_CODE_TOKEN>

Oh my Facebook , I'm depressed.SO, What's the real way to compose two component from different background?
",linonetwo,2015-10-25 07:41:35
510,2015-10-25 01:10:58,"搞定了，晚上熬夜果然使人傻，早上起床洗个澡，坐到电脑前仔细一想，5分钟就解决了，日了动物园了。

<S_CODE_TOKEN>

Where I have this in Schema:

<S_CODE_TOKEN>

在我研究Relay过程中，国内同行大多在用durex和redux享福，四下看去，几乎没有可以参考的资料，而国外资料语焉不详十分抽象，官网给的 helloworld 同一个变量用来用去不分你我鱼目混珠，因此我只能控制变量一点一点搭建一步一步做实验，常常卡在几个变量的关系上无法理解其错综复杂的传递，我开始怀疑自己的智力是否配得上我的理想、什么是生命的意义，怎么真正地活着，我开始相信人在追求真理的道路上注定孤独，人生就像秋千在无聊和痛苦间来回摇摆…
望着窗外的夜空，我在想，如果我一开始去了我第一志愿报的那所男女比例3:7的学校，没有被提前批招进来遇到这些牛逼的导师和同学，就没有兴趣关注前沿动态，没有这么多想完成的理想，我或许正在华师大开心地打打游戏陪陪女票享受生活，而不是困于一个又一个的deadline，又一直卡在 bug 上让自己心情低落，看着眼前的代码，我回忆起了我的一个又一个选择。

但是，是你自己的每一个选择，造就了现在的自己，有的人对选择感到后悔，而我在见识了更大的世界后，无悔。

我只后悔昨晚熬夜debug，今晨清醒后花5分钟仔细想了想，就搞清楚昨晚4个小时都错在哪了，错就错在熬夜智商低。
少年不识愁滋味，爱debug，爱debug，为debug熬一宿；
而今识尽愁滋味，欲de还休，欲de还休，先去睡觉de个球。

This issue can be close now, Hoping this can amuse some one hhh.
",linonetwo,2015-10-25 07:41:35
510,2015-10-25 07:41:35,"> This issue can be close now

Glad to hear that you got it sorted out.
",wincent,2015-10-25 07:41:35
510,2015-11-03 03:33:08,"@lineves  长跪不起……
",filod,2015-10-25 07:41:35
509,2015-10-24 08:44:42,"Tests were broken due to a minor bug in [this recent commit](https://github.com/facebook/relay/commit/cc7c0e5b16999e045937a5f75a4ef0fe05b4695e) where the `setImmediate()` module is imported. However, there is no need to import `setImmediate()`, it seems to be a native function in Node.
",michaelchum,2015-10-25 21:44:08
509,2015-10-24 15:14:08,"Ah, thanks for pointing this out. We use `require('setImmediate')` because internally at Facebook there is a polyfill that we use for this.

I think that we might actually have to add a forked version of the module for OSS, that just calls the native implementation.

cc @yuzhi 
",wincent,2015-10-25 21:44:08
509,2015-10-25 21:44:08,"Internal fix for this is D2579879 — we're using `resolveImmediate` (from fbjs) elsewhere instead of `setImmediate`, so we should use that here too; I'll get that synced out soon, so I'll close this one out. In the meantime though, thanks for noticing the breakage and submitting the PR!
",wincent,2015-10-25 21:44:08
508,2015-10-24 00:02:49,"Fixes #505 Moved postinstall => prepublish to fix broken dependency when using relay pointing to a local path. This fixes `npm install` in all three examples.
",michaelchum,2015-10-25 22:02:18
508,2015-10-24 00:26:40,"Tests are failing on the latest `master` branch :(
",michaelchum,2015-10-25 22:02:18
508,2015-10-25 14:41:35,"Thanks!

@facebook-github-bot import
",wincent,2015-10-25 22:02:18
508,2015-10-25 14:55:48,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1642457929325578/int_phab to review.
",facebook-github-bot,2015-10-25 22:02:18
507,2015-10-23 19:09:02,"I have following fragment: 

<S_CODE_TOKEN>

Then somewhere in the app I have a list of `Stories`. When `$showComments` is `true` everything works as expected. But when `$showComments` is `false` Relay sends additional GraphQL query for each story after initial load.

This query is sent to `Node` interface and includes this Story fragment (+child fragments if any) as well as `id` and `__typename` fields.

The response returned is always the same:

<S_CODE_TOKEN>

Same applies to `@skip(if: true)` directive.
",vladar,2015-11-02 16:59:37
507,2015-10-23 21:58:32,"Relay currently passes through directives to the server but does not directly implement support for `@include` or `@skip`. We should add support such that:
- unincluded fields (include: false or skip: true) are removed during diffing
- reader does not return unincluded fields

Contributions welcome, otherwise we'll get to this as time permits.
",josephsavona,2015-11-02 16:59:37
507,2015-11-02 16:59:37,"merged into #536 
",josephsavona,2015-11-02 16:59:37
506,2015-10-23 16:20:02,"This simplifies the build process to avoid excessive i/o and process spawning, instead doing the work in a single pass.

cc @wincent 
",zpao,2015-10-26 21:35:28
506,2015-10-23 18:53:30,"lg2m
",wincent,2015-10-26 21:35:28
506,2015-10-26 18:34:38,"@facebook-github-bot import
",zpao,2015-10-26 21:35:28
506,2015-10-26 18:40:40,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/837324029720485/int_phab to review.
",facebook-github-bot,2015-10-26 21:35:28
505,2015-10-23 07:46:25,"`npm install` fails in `examples/star-wars`, `examples/todo` and `examples/relay-treasurehunt` with missing module error.
<img width=""1192"" alt=""screenshot 2015-10-23 00 40 39"" src=""https://cloud.githubusercontent.com/assets/3792228/10687045/e348686a-791e-11e5-9dc2-6f52b6edd15f.png""> I'm on the latest `master` branch with `node 4.2.1` and`npm 2.14.7` on OS X Yosemite. 

`npm install` in `relay/` works fine.
",michaelchum,2015-10-25 22:02:18
505,2015-10-23 08:05:23,"After some investigation, I believe this is caused by the addition of the `postinstall` script to Relay's `package.json` in [this recent commit](https://github.com/facebook/relay/commit/3035c12b5a46914e3fb847993effb3e31d0ca6fa#diff-b9cfc7f2cdf78a7f4b91a753d10865a2R25). Removing the `postinstall` script makes it work properly.

I think when a project `npm install` its dependencies, all the corresponding `postinstall`'s of every dependency is also run. However, there must be a bug in `npm`. During the `postinstall` of the `react-relay` dependency, it thinks `react-relay` is located in `./node_modules/react-relay` while we specified it to be in `../..`
",michaelchum,2015-10-25 22:02:18
505,2015-10-23 16:26:02,"Ah yea. The bigger issue is that the `postinstall` hook will also be run when you ship a package to npm. The failure looks a lot like this. But we can't use `preinstall`. Perhaps we can use `prepublish` (and then we might need to fix some resolution pieces to make it work in examples).
",zpao,2015-10-25 22:02:18
505,2015-10-23 17:52:37,"Moving `postinstall` to `prepublish` actually makes `examples/` work. I think when we `npm install` a project the `prepublish`'s of it dependencies is not run, it is only run on a local `npm install`. Should I submit a PR for this?
",michaelchum,2015-10-25 22:02:18
505,2015-10-23 22:31:21,"I think that would be acceptable, @michaelchum.

The main intention of this check is to make sure that people developing in the Relay repo are using a known-to-be-supported tool-set, so that they can do things like run the tests without spurious failures. So in this case, `prepublish`, which will run when you do a top-level `npm install`, is probably good enough.

If you run `npm install` from the `examples/` directories, then this parent `prepublish` may not run, like you say (although it would be good to confirm that for sure), although that may be ok.
",wincent,2015-10-25 22:02:18
505,2015-10-23 23:56:05,"@wincent Thanks for the clarification! It says in the [npm docs](https://docs.npmjs.com/misc/scripts) that `prepublish` only runs before a package is published or in a ""local"" `npm install`. There's no mention of dependency install.

As you mentioned, since this script helps people developing Relay and not people using Relay as a dependency, I think it makes sense to move it to `prepublish`.

I'm issuing a PR so that people who try out Relay will have working examples :)
",michaelchum,2015-10-25 22:02:18
504,2015-10-23 06:05:45,"Hi, 

I don't get this error when I avoid loading the relay components on the server, and I don't get this error when I do load the relay components on the client. FWIW, I'm using `koa-graphql` and `react-router`. The base route on my react-router points to the `Relay.RootContainer`, whose `Component` is the relay Container around my base React component. 

Stack trace:

<S_CODE_TOKEN>
",rattrayalex,2015-10-30 16:14:39
504,2015-10-30 16:14:39,"Server rendering support is in the works. Follow along in #136!
",steveluscher,2015-10-30 16:14:39
503,2015-10-22 16:55:53,,steveluscher,2016-12-20 17:41:59
503,2015-10-25 01:18:57,"@steveluscher The [Relay public API](https://github.com/facebook/relay/blob/master/src/RelayPublic.js) currently does not expose `RelayQueryConfig`. Are you planning on exposing it to subclass `Relay.RelayQueryConfig` as a standard instead of `Relay.Route`? 

I think `Relay.RelayQueryConfig` should be exposed and released (perhaps 0.4.1?) before showing its usage on the homepage.
",michaelchum,2016-12-20 17:41:59
503,2015-10-27 15:23:55,"Indeed. I just created this issue so that I wouldn't forget about the homepage when this happens!
",steveluscher,2016-12-20 17:41:59
503,2016-12-20 17:41:59,Closing; we'll update the examples when we release the new APIs from #1369.,josephsavona,2016-12-20 17:41:59
502,2015-10-22 14:52:03,"I noticed an odd bug when my Relay application was trying to fetch the following two fragments in a parent and child component, respectively:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

The queries that actually get issued to my GraphQL backend are as follows:

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>

A keen eye may notice that the `paymentMethods` field is missing from the second query that's sent to GraphQL.

This seemed extremely odd to me, so I dove in a bit (and by dove in, I mean stepped through the whole `RelayQuerySubtractor`). It turns out that what was happening is that the `id` field of the `paymentMethod` field on `Viewer` was being marked as a requisite field by the Babel plugin, so when it checks if `paymentMethods` is empty, as it does the query subtraction, it thinks that `paymentMethod` is empty (the code I'm referencing is here: https://github.com/facebook/relay/blob/4e671a316bbb09dee0fcc14aa414f0d31076948f/src/traversal/subtractRelayQuery.js#L184-L198).

Interestingly, there's that sneaky comment in there: 

""Note: product-specific hacks use aliased cursors/ids to poll for data. Without the alias check these queries would be considered empty.""

Sure enough, when I either do:

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

it requests the paymentMethods list with the id correctly.

Note, that in my schema, `paymentMethods` is just a normal `GraphQLList` type, not a connection.
## 

So, TLDR; is this desired and correct behavior? If so, what is the reasoning behind it? What problem is this solving? We should somehow figure out how to document this behavior...because I feel like in general, without a super deep knowledge of Relay and how the Babel plugin works, it would be very difficult to understand why this was happening.

If it ISN'T desired and correct behavior, it seems that it needs to be fixed in here - https://github.com/facebook/relay/blob/4e671a316bbb09dee0fcc14aa414f0d31076948f/scripts/babel-relay-plugin/src/RelayQLPrinter.js#L152-L154. I noticed that, in other places in the printer, it's much more careful about how it sets a field to be requisite: https://github.com/facebook/relay/blob/1e2067bea5c7a4c3f9f7432ded529f4c0a32f39a/scripts/babel-relay-plugin/src/RelayQLPrinter.js#L264-L268

Thanks, and sorry for the long issue!
",skevy,2015-10-23 23:15:33
502,2015-10-23 23:15:33,"Thanks for bringing this up, and in such a well-detailed way!

It's possible that this issue will simply go away in the future because we as almost certainly going to remove query subtraction as a concept from Relay.

> So, TLDR; is this desired and correct behavior? If so, what is the reasoning behind it? What problem is this solving?

In short, yes, and I'll try to explain why.

### Why we subtract queries now

The idea of query subtraction is that if you fire off multiple queries in a batch, later queries in the batch may redundantly request fields that prior in-flight queries from the batch are already in the process of retrieving. So, we subtract any in-flight queries from newly-added queries before sending them (the newly-added queries). Sometimes, these queries can get subtracted away to nothing, in the sense of them being ""empty"", which means there's no point in sending them. Here's an example of an obviously ""empty"" query:

<S_CODE_TOKEN>

In this query, we already know the `id`, so there is no point in requesting it.

#### An aside on requisite fields

Note that there are a few different field types at play here:
- **requisite:** Without these fields, Relay won't work. They should not be stripped.
- **generated:** These are generated by Relay whenever we notice a place where we'll need them (ie. they are also requisite) but the query author hasn't explicitly provided them.
- **normal:** Fields supplied by the query author (which means non-generated, although they may be requisite).

So, a field can be:
- requisite and generated
- requisite and non-generated
- non-requisite and non-generated

But not non-requisite and generated (we wouldn't have generated it if it weren't requisite).

#### Back to what I was saying about subtraction...

As you saw, we are going to consider a field to be ""empty"" if, after subtraction, it is a scalar (no children), it's requisite, it's _not_ a ""ref query dependency"" (this is related to our support for deferring part of a query, and these fields can never be stripped), and it's not aliased. That aliasing check is the escape hatch, and the nasty hack that you discovered to hint to the subtractor that it shouldn't consider your field to be content-less and unworthy of sending.

We do all of this so that a tree that consists of _only_ requisite fields and their parents may be considered empty, because there is no demonstrated reason why you would want to fulfill such a query in practice. If we were to let these through, we'd end up letting a lot of basically empty/pointless queries slip through to the server for no good reason.

### Why we think it may not be worth subtracting queries in the future

In practice, we suspect that the actual amount of data-over-the-wire that we save by doing this subtraction is minimal. We could probably just delete the whole thing, get a nice reduction in complexity, with little or no impact on performance (any over-the-wire costs could be offset by cheaper processing costs, an easier-to-iterate code base, and scope for doing other clever things to reduce query upload size).

The only reason we need this still, for now, is to support the ""preload"" mode that @voideanvalue  describes [here](https://github.com/facebook/relay/issues/36#issuecomment-130402024). In this mode, we run queries on the server, the client starts downloading static resources, we tell the client about the queries and it registers them as pending. The query results come in and we stream them down. In the meantime, the client can use query subtraction to ensure that it doesn't redundantly request data which is already being fetched by ""in-flight"" queries (even if they are in-flight on another machine, in a data center).

There are other ways to solve this problem without relying on query subtraction, but that is the (temporary) solution that we have for now.

### Recommendation

You should probably run with your alias hack for now, and know that this problem will eventually go away. I don't know if we actually want to document this right now (beyond what I've written here), because I am hoping that this is all just temporary.

As this is not a bug but is working as intended, I'm going to mark this as closed, but feel free to add comments with any more questions or thoughts that you might have.
",wincent,2015-10-23 23:15:33
502,2015-10-23 23:19:51,"@wincent Why is the correct behavior in that check not to only strip off the `generated` fields rather than all the `requisite` ones? It seems like in practice you'd get all the relevant benefits if you considered only the `generated` ones, while offering a nicer and less unintuitive escape hatch in the case that someone actually wants to query for e.g. `widgets { id }` per the above example (where we have `widgets: [Widget]`, so the query is not actually completely pointless - gives a generic, if potentially expensive, way to get the length of the list).
",taion,2015-10-23 23:15:33
502,2015-10-23 23:21:50,"Ah... I guess it handles the case where one query wants e.g. `widgets { name }` and another wants `widgets { id, name }`... oh well.
",taion,2015-10-23 23:15:33
501,2015-10-22 07:19:19,"I'm not sure if this is right, feel free to discard. The `id` input argument to the `nodeField` query type seems to be an `ID!` as indicated in graphql-relay-js [here](https://github.com/graphql/graphql-relay-js/blob/9e7401450c2458c6a45048a049c785100f3a622b/src/node/node.js#L68). If I understand it correctly, the node query type can only be fetched using a base64 unique ID? It would then be more accurate to label the `nodeField` type as `node(id: ID!): Node`.
",michaelchum,2015-10-23 20:45:28
501,2015-10-22 14:09:09,"Thank you for the PR!

> I'm not sure if this is right

It is right, and you can verify this by running `npm run update-schema` in the Star Wars example directory and inspecting the generated `schema.graphql` file.
",wincent,2015-10-23 20:45:28
501,2015-10-22 14:09:22,"@facebook-github-bot shipit
",wincent,2015-10-23 20:45:28
500,2015-10-22 01:12:10,"`Invariant Violation: RelayQueryWriter: Cannot write edges for connection`urls_viewed`on record`client:18528716183`without`first`,`last`, or`find`argument.`

Having them show up at build is faster than discovering them in browser console + is consistent with other checks done in Babel plugin.
",KyleAMathews,2015-11-13 04:56:44
500,2015-10-23 20:30:38,"On the surface, this looks reasonable to me.

@yuzhi , @josephsavona: Can you think of any reason why we'd want to defer this check until runtime?The other invariants in the writer are all about validating the response shape and internal state, which can only be known at runtime.
",wincent,2015-11-13 04:56:44
500,2015-10-23 20:44:54,"@josephsavona  probably has better context on this. My guess is that depending on the fragment structure, we might not be able to detect if all `edges` fields are under connections with those calls if the fragments starts as a fragment at the edge it self. It would be harder to tracked the actual structure since the parent node could be in a different file.
",yuzhi,2015-11-13 04:56:44
500,2015-10-23 22:08:30,"As @yuzhi mentioned, it's possible that the `edges` field is in a different file from the connection field such that the plugin can't catch all cases. That said, we could definitely detect missing connection arguments when an `edges` subfield _is_ present.

The change would need to happen in [`RelayQLPrinter#printField`](https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/RelayQLPrinter.js#L316-L320) - if the field is a connection and has an `edges` field, then validate the presence of the necessary arguments.
",josephsavona,2015-11-13 04:56:44
500,2015-11-13 03:42:38,"Is this still an issue ? Just saw this fixture here: https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/__fixtures__/connectionWithoutArgs.fixture#L22
",xuorig,2015-11-13 04:56:44
500,2015-11-13 04:56:44,"Oh, yeah @yungsters fixed this for `5.0`
",josephsavona,2015-11-13 04:56:44
500,2015-11-13 04:57:01,"@xuorig thanks!
",josephsavona,2015-11-13 04:56:44
499,2015-10-22 00:08:43,"We've [had reports](https://github.com/facebook/relay/issues/484) of `npm install` not working on Windows because our `build-lib` script makes platform-specific assumptions,

This commit rewrites it in JS, which in theory should run everywhere `node` runs. (Note, I haven't actually tested this on Windows yet, although I have confirmed that it continues to do the right thing on OS X.)

Thing is, JS isn't actually that awesome for ""shell"" scripting, so I am relying on a couple of third-party modules -- rimraf for an equivalent to `rm -rf` and node-find-files to stand in for `find` -- which I chose based on the fact that we've previously used them at FB (at least, copies exist under `scripts/third_party/node_modules`).
",wincent,2015-10-22 17:55:30
499,2015-10-22 14:10:14,"@facebook-github-bot import
",wincent,2015-10-22 17:55:30
499,2015-10-22 14:11:25,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1696472237254342/int_phab to review.
",facebook-github-bot,2015-10-22 17:55:30
499,2015-10-23 00:32:52,"Thoughts on simplifying this to avoid spawning and the whole read-write-read-write (making it just read-write). I can press the PR button on https://github.com/zpao/relay/commit/0efb66d4220774ac773991aea6f794dcd037b588 if you want.
",zpao,2015-10-22 17:55:30
499,2015-10-23 03:27:20,"Go for it!
",wincent,2015-10-22 17:55:30
498,2015-10-21 14:57:53,"Something like

<S_CODE_TOKEN>

does not seem to work currently. Relay throws `Uncaught Error: Invariant Violation: RelayQL: Invalid fragment composition, use`${Child.getFragment('name')}`.`.  As soon as I replace that join and add the keys manually the request all works fine.

The reason I want to define the keys in an array is that I am using the exact same keys for table-headers and do keep the code dry and the update effort low.
",Globegitter,2015-10-21 16:53:08
498,2015-10-21 16:53:08,"Thanks for the question! Relay.QL queries are transformed at compile time via the `babel-relay-plugin`, which requires all the fields of a query to be known (declared) statically. This step annotates each field with metadata from the schema without which Relay can't process the query. 

So for this use-case we'd recommend adding the keys to the query manually. 
",josephsavona,2015-10-21 16:53:08
498,2015-11-11 16:14:40,"@josephsavona Sorry to just get back so late, just taking relay-implementation up again. It would be nice if babel-relay-plugin could detect a 'statically' declared variable in the same file but I suppose that would be a lot of effort to gain just a little bit of DRYness.

Thanks for getting back so quickly though, loving relay and graphql so far!
",Globegitter,2015-10-21 16:53:08
497,2015-10-20 19:35:56,"Hi there,

I'm trying to implement pagination, I've got to a point where I can make pagination ""work"" based on [this example](https://facebook.github.io/react/blog/2015/03/19/building-the-facebook-news-feed-with-relay.html#all-the-news-fit-to-be-relayed). Initially the component loads 5 items, but when asking to load the next five it request the server the `first: 10`, basically, refetching the first 5 again. I'd hope it would only request items 6 to 10 using cursors. 

I failed miserably at finding an example that accomplished that. I couldn't make it work myself either, trying to track a variable for the `after` cursor, because the collection of items gets replaces by the next 5, instead of being appended.

Any pointers on how to properly implement this?

Thank you!
",luisobo,2015-10-21 00:49:17
497,2015-10-21 00:49:17,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",wincent,2015-10-21 00:49:17
497,2015-11-18 01:01:00,"@luisobo have you got any solutions?
",soonlive,2015-10-21 00:49:17
497,2015-11-18 19:39:48,"@soonlive I'm afraid not. 
",luisobo,2015-10-21 00:49:17
497,2015-11-18 20:49:40,"@luisobo @soonlive Please post on [Stack Overflow](https://stackoverflow.com/questions/ask?tags=relayjs) and provide a link here - we're happy to answer this type of how-to question there.
",josephsavona,2015-10-21 00:49:17
496,2015-10-20 19:15:41,"`react-router-relay` merges all the queries from `react-router` routes into a top level `relay` route. When `react-router` transitions into a new route, `react-router-relay` merges the new queries into a new top level `relay` route.

This breaks relay's `shouldComponentUpdate`, because of [this](https://github.com/facebook/relay/blob/master/src/container/RelayContainer.js#L769-L771) (returns false when `context.route` has changed). @taion suggested I'd post the issue here since there's no easy way for `react-router-relay` to get around this.
",johanobergman,2015-11-02 17:05:15
496,2015-10-20 19:20:36,"To clarify a bit on what's happening -

`react-router-relay` supports nested React Router routes with per-route queries.

It generates a Relay route by aggregating together all of those sets of queries together into a single set of queries, and passing that to a top-level Relay `RootContainer`.

As a result, we can have cases where the Relay route changes, but most of the queries do not in fact change (i.e. when only a single deeply nested React Router route gets switched out). However, because the Relay route has changed, the `shouldComponentUpdate` check always returns `true`.

I'm not sure if I'm missing something, or if there's a better way to deal with this on our side.
",taion,2015-11-02 17:05:15
496,2015-10-21 10:36:42,"Could the route's name be used to check for equality in `shouldComponentUpdate`? That would give `react-router-relay` an option to specify whether the route is a new one or not.
",johanobergman,2015-11-02 17:05:15
496,2015-10-21 15:38:20,"No - we change the name of the generated route whenever the queries change anyway. It is in fact a different route.
",taion,2015-11-02 17:05:15
496,2015-10-27 22:15:11,"@josephsavona Do you have any input on this?
",johanobergman,2015-11-02 17:05:15
496,2015-10-28 11:15:46,"The active route affects both the shape of the container fragments/variables and what the wrapped component renders - any change in route _requires_ a re-render. Routes are meant to aggregate all the queries for a single, root container. 

`react-router-relay` is designed to support multiple levels of root containers - one at each level of the route hierarchy - and therefore a single route doesn't seem like the right fit. How about creating a new context at each level of the route hierarchy, each with its own route? When the route changes, only the affected contexts would need to change their route, and components in unaffected portions of the tree would not be affected. This might require a custom alternative to RelayRootContainer/RelayRenderer.
",josephsavona,2015-11-02 17:05:15
496,2015-10-28 12:51:22,"!

I hadn't thought of just re-implementing RootContainer/Renderer entirely. That makes a ton of sense though.
",taion,2015-11-02 17:05:15
496,2015-10-28 13:22:58,"@taion Yeah, this seems like the most robust option. Feel free to cc us on pull requests/branches (even on `react-router-relay`) if you'd like feedback on an implementation.
",josephsavona,2015-11-02 17:05:15
496,2015-10-28 13:31:01,"Actually, do you think it'd be awful to just render a bunch of `RelayRenderer`s into a detached DOM node, then just manage the plumbing of the data myself? Effectively what I'm doing right now, but with one `RelayRenderer` per route, and moving the `RelayRenderer`s off the main component tree entirely (since I need more than one, but don't want to e.g. add a `<div>` or whatever to wrap them all).
",taion,2015-11-02 17:05:15
496,2015-10-28 13:34:09,"Will that cause a network request for every `RelayRenderer` in a nested route hierarchy?
",johanobergman,2015-11-02 17:05:15
496,2015-10-28 13:56:10,"> Actually, do you think it'd be awful to just render a bunch of RelayRenderers into a detached DOM node

That sounds kinda familiar ;-)

'RelayRenderer'? Man things are changing. I need to catch up with Relay again :-)
",devknoll,2015-11-02 17:05:15
496,2015-10-28 14:04:49,"Yeah, the more things change... that said I don't think I'm going to get to this any time soon.

I don't know about the network requests. The default network layer already sends one request per query anyway.
",taion,2015-11-02 17:05:15
496,2015-11-02 17:05:15,"> do you think it'd be awful to just render a bunch of RelayRenderers into a detached DOM node, then just manage the plumbing of the data myself?

This sounds really inefficient - this really seems like a good use-case for a custom alternative to RelayRenderer. Let's move discussion to relay-tools/react-router-relay#68
",josephsavona,2015-11-02 17:05:15
495,2015-10-20 17:44:58,"At the moment, our test suite won't run properly under npm 3.x, so let's
specify our requirement in the package.json.

Once npm 3.x goes ""final"" we'll make sure that we support both. In the
meantime, this will prevent developers running the tests from seeing
spurious failures like the ones reported here when using npm 3:

https://github.com/facebook/relay/issues/396

Tested by installing npm 3, then running `npm install`, and seeing the
expected error from the `check-dev-engines.js` script:

<S_CODE_TOKEN>
",wincent,2015-10-20 21:55:28
495,2015-10-20 17:53:32,"👍
",zpao,2015-10-20 21:55:28
495,2015-10-20 17:55:17,"@facebook-github-bot import
",wincent,2015-10-20 21:55:28
495,2015-10-20 18:00:03,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/329483780508680/int_phab to review.
",facebook-github-bot,2015-10-20 21:55:28
494,2015-10-20 15:49:50,"This is Feature request, based on #464, to keep track of it.

@yuzhi said:

> We currently fetch based on the fragments that was cached, which means having a lot of ranges can be inefficient. In the future, we might look into dirtying cached data and only fetch data needed for the current view to make this step a but more efficient.

I think its important feature, especially for use cases when many different arguments for one connection are used to filter results. If I need to reload that connection, it currently reloads connections with all argument combinations used since application started, which can get crazy.
",jardakotesovec,2015-11-02 17:21:13
494,2015-10-20 16:10:35,"Work is ongoing in #485 
",josephsavona,2015-11-02 17:21:13
494,2015-10-20 16:19:51,"@josephsavona Thanks, thats awesome!
",jardakotesovec,2015-11-02 17:21:13
494,2015-11-02 17:21:13,"merging into #537 
",josephsavona,2015-11-02 17:21:13
493,2015-10-20 12:07:49,"I recently updated to Relay 0.4.0 and react-router-relay 0.7.0 (which only updates it's dependencies: https://github.com/relay-tools/react-router-relay/compare/v0.6.2...v0.7.0). After updating the query generation completely left out the arguments for a the user query:

<S_CODE_TOKEN>

What it should have been:

<S_CODE_TOKEN>

My schema (generated by graphql-sequelize): 

<S_CODE_TOKEN>

I checked and react-router-relay passes the right arguments along to Relay, so I guess Relay is doing something it's not supposed to.
The rest of my code: https://github.com/DanielHuisman/relay-isomorphic-starter-kit
",DanielHuisman,2015-10-20 12:16:30
493,2015-10-20 12:16:30,"Duplicate of issue #470 (forgot to look at closed issues)
",DanielHuisman,2015-10-20 12:16:30
492,2015-10-19 22:28:51,"Reactiflux has moved to [Discord](http://facebook.github.io/react/blog/2015/10/19/reactiflux-is-moving-to-discord.html) and we're going along with them.
",wincent,2015-10-20 17:10:23
492,2015-10-19 22:29:18,"@facebook-github-bot import
",wincent,2015-10-20 17:10:23
492,2015-10-19 22:33:57,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1190211554341999/int_phab to review.
",facebook-github-bot,2015-10-20 17:10:23
491,2015-10-19 19:48:23,"I'm using react-router-relay and currently every query is named `Router` e.g. `query Router{viewer{id}}` _unless_ I manually set the query name.

This name I think comes from these lines https://github.com/facebook/relay/blob/a0ba844fbce1aca795570046d9a4fcf186c58cd7/src/traversal/printRelayOSSQuery.js#L108-L111

I'd rather not maintain query names for every component though. It'd be nice if react-router-relay could have some way of auto-setting the query name based on the component perhaps the query comes from or if there's a route name set.

Unique query names are important for tracking query execution per component.
",KyleAMathews,2015-11-02 17:28:36
491,2015-10-23 20:15:57,"Can you show a sample of how you're setting up the routes and the query configs?

For example, if I set up a module like `ArticleQueries`:

<S_CODE_TOKEN>

And then set up routes like this:

<S_CODE_TOKEN>

Then the query gets named `ArticlesQueries`:

<S_CODE_TOKEN>

All of this using:
- react-router-relay 0.7.0
- babel-relay-plugin 0.3.0
- react-relay 0.4.0
- react-router 1.0.0-rc3
",wincent,2015-11-02 17:28:36
491,2015-10-23 23:21:35,"I'm doing something very similar except my query configs are in `router.js` hence why they're named `Router` I suppose :)

I'd rather query names be pulled from their component rather than the query config as I have only two query configs basically `node: () => Relay.QL`query { node(id: $id) }`and`viewer: () => Relay.QL`query {viewer}`.
",KyleAMathews,2015-11-02 17:28:36
491,2015-11-02 17:28:36,"We have some internal clients that depend on the query name matching the route name for logging and tracking purposes. Changing query names to match the root component is something that should be possible to do in `react-router-relay` when queries are generated from the route + component.
",josephsavona,2015-11-02 17:28:36
490,2015-10-19 16:38:20,"This is related to #478, where having multiple fields that query for different ranges on a Connection come back in random order causing the RelayQueryWriter to get confused and fail to build all the edges.
",HurricaneJames,2015-10-28 01:22:53
490,2015-10-19 18:27:22,"Thanks for the PR, @HurricaneJames.

We originally added the type-first sorting — somewhat reluctantly — to satisfy an internal requirement (integration with another cache that relied on type-first behavior; D2022689 for any FBers that might be reading along). I'm going to check around and see whether this is still a requirement (I expect it is) and if we can fork this particular detail so that the open source world doesn't have to deal with this.
",wincent,2015-10-28 01:22:53
490,2015-10-19 18:35:05,"If it is a requirement, then it might work to modify the sort algorithm to only sort type first and not alphanumeric.

I switched to a different task for the next couple hours, but something like

<S_CODE_TOKEN>

should still sort type first, but leave the sequencing alone otherwise.
",HurricaneJames,2015-10-28 01:22:53
490,2015-10-19 18:42:44,"Alright, so I was too curious to try and see if it would work. It does seem to fix the problem I found, but it also causes tests to fail. Fortunately, it looks like just tests for `sortTypeFirst` which expected the previous behavior of sorting for type first and name second. I do not see anywhere else that uses the sortTypeFirst algorithm in the code, so perhaps this change is acceptable.
",HurricaneJames,2015-10-28 01:22:53
490,2015-10-27 17:23:12,"@wincent did we ever find out if this could be merged or if we needed to use the alternate sort algorithm?
",HurricaneJames,2015-10-28 01:22:53
490,2015-10-27 19:27:32,"I don't think we want to drop the sorting entirely, as we want printed queries to preserve the ordering of the original underlying query (other than the noted constraint that types have to come first) for consistency, determinism and debuggability.

It seems that once #479 is resolved, your issue hopefully will be too. @josephsavona is actively working on addressing that, although it is a multi-step process with no quick fix.
",wincent,2015-10-28 01:22:53
490,2015-10-28 01:22:53,"Git sometimes sucks. I tried to change the PR to the new sort method and merge that change, but it got all messed up. It would take longer to figure out than just to refork. So I'm just doing that.

New PR: #523
",HurricaneJames,2015-10-28 01:22:53
489,2015-10-19 02:52:25,"Sorry in advance for the long post. This is also relates to #125 and #293 .  I'm a bit new to Relay, so apologies up front if I am missing the point somewhere here/my understanding is mistaken. 

I believe the issue raised in #293 touches on a slightly larger problem with writing mutation definitions in the client. With the current API, the relay mutation needs to have knowledge of the implementation of the GraphQL mutation to a) write a reasonable getOptimisticResponse method, b) write the correct getConfigs method by knowing all the side effects the server-side mutation had, c) write the correct getFatQuery  (though I'm not entirely clear on why you would not always just write the fat query to get every possible field since it gets intersected with the tracked query anyway/why relay wouldn't just use introspection on the GraphQL API here to figure out every possible field and auto-generate this fat query).  Furthermore, with getConfigs, it seems like the relay mutation needs to know what data the rest of the app cares about (and, if that's not the case, why is it necessary to, e.g., define fieldIDs for a FIELDS_CHANGE? Why not assume all the fields in the response changed and map those to the correct relay store fields via the ID and type in the response)?

Here are some possible directions to explore to help with this issue, ranging from smallest change to biggest change, but feel free to let me know if I'm way off base here:
1. Move getConfigs to the server. We already have a way for a GraphQL server to return outputFields - why not include data about how each outputField changed there?
2. Auto-generate getFatQuery based on the outputFields of the mutation's payload. This would involve being able to do introspection on a mutation in GraphQL - is that possible already?
3. This would be the largest departure from the current model, but also the one that feels cleanest to me (and I'm sure you guys have thought of this too so I'd be curious to hear where this idea fails). Based on the options for getConfigs in relay, it seems like we already agree that the way data changes is: a field on an object is modified, an object can be deleted, or an object can be created in a list of objects.  This is nothing new - it is CRUD, just operating on the leaves of a data tree. So why have a concept of mutation functions in GraphQL at all? Unless I am missing something, these mutation functions are, at the end of the day, just a grouping of various create/update/delete operations on different parts of the data?  The only time this seems not entirely true to me is when these mutation functions have side effects outside of your own application's data (e.g. a mutation function creates a new user in your database and also charges that user money via a third-party API).   So, why not model a mutation as a list of create/update/delete operations on the data tree and have side effects that live outside of your application data be modeled as something separate (I have not put a ton of thought into how this part would look - probably just within the implementation of a create/delete/update on a field in the GraphQL server)?  This has a number of advantages:
   - Optimistic updates will be automatic (the client-side relay store just applies the list of CRUD operations on the data tree on the client before sending the list of CRUD operations to the server)
   - The set of fields that get changed is defined by the mutation, so there is no need for getConfigs or getFatQuery
   - GraphQL permissions become cleaner/more unified.  Currently, I do access authorization for GraphQL objects in the resolve methods of fields. You can imagine a world where, if mutations are just sets of CRUD operations on the fields of GraphQL objects, I define field-level modification permissions in the same place instead of having to have a second set of authorization logic in my GraphQL server per-mutation.  This means less permission logic duplication.
   - Adding new mutations to an existing GraphQL API becomes much simpler. You just enable create-ability/delete-ability/update-ability to some field of your existing GraphQL schema.
   - The API for writing mutations on the client-side could be very similar to the existing (and simple) API for creating state changes on React components. A nice API here could be something where the relay store is the single store for all client-side state and modifying it re-renders the entire React-app (see something like https://github.com/arqex/freezer).   Now, when making state changes client-side, you no longer care if that state lives in memory, on local storage, or behind a GraphQL server. Obviously in practice it may not be so clean and we may still need to distinguish between optimistically updated changes that still hit the server vs. purely client-side state changes, but it could be a lot simpler I think.
   - I realize that one of the things that you lose in this approach is the ability to group together common operations on the server into single functions (e.g. liking a story on Facebook is something you may want to expose to all users of the Facebook GraphQL API without having every client re-implement all the steps to doing this).  But these common operations (which are what we call mutations in the current world) can just be described as a set of create/update/delete operations on the fields of the GraphQL schema objects. This also makes the actual logic of these ""higher order mutations"" introspect-able, so the relay client can still be smart about optimistically updating a client that calls something like likeStory on a GraphQL API.  
",saikat,2015-11-02 17:53:02
489,2015-11-02 17:53:02,"@saikat Awesome writeup! We've discussed a lot of these ideas internally as well, and the mutations API is definitely something we want to improve. There are currently several issues related to this so I've consolidated them in one meta-task at #538. Let's continue the discussion there!
",josephsavona,2015-11-02 17:53:02
488,2015-10-18 19:16:00,"I've tested on Node v4.1 and it complete without errors.
![relay enaqx macbook-pro -zsh 181x45 2015-10-18 22-08-03](https://github-cloud.s3.amazonaws.com/assets/182219/10566046/c16bbb94-75e4-11e5-9182-0df0495b984c.png)

But after removing `node_modules` and switching to Node v4.2 it fails.
![relay enaqx macbook-pro -zsh 181x45 2015-10-18 22-15-37](https://github-cloud.s3.amazonaws.com/assets/182219/10566086/c8f293c8-75e5-11e5-8a1d-7d23efd935ba.png)
",enaqx,2015-10-20 16:59:59
488,2015-10-19 12:02:18,"This seems to be the same problem reported in #396. Can you try again using `npm2`?
",clentfort,2015-10-20 16:59:59
488,2015-10-20 16:59:59,"Thanks for the report @enaqx! I suspect @clentfort is right about this being a dupe, so I'm going to close this one.

Please feel free to comment again if this isn't the case and we can look into this further.
",wincent,2015-10-20 16:59:59
487,2015-10-18 12:46:45,"Relay currents rejects requests whenever the `errors` response field is non-empty. However, these errors may all be for nullable fields. Relay should not reject requests in this case, and instead should resolve a `RelayQueryRequest` whenever the `data` field is non-null _or_ there are no `errors` (indicating that all required fields could be resolved).

-- original issue --

Currently when server returns errors for nullable fields Relay will execute fail callbacks and not render.

This is different from GraphQL behavior. GraphQL still returns all other data in response, so it should be possible to render anyway.

 Only errors in non-nullable fields should break the application.
",vladar,
487,2015-10-18 19:28:38,"@vladar Thanks for bringing this up. By errors you're referring to application errors while resolving the nullable fields, as opposed to GraphQL validation errors, correct?
",josephsavona,
487,2015-10-19 09:53:37,"Yes. When `resolve` method of some nullable field throws, GraphQL will just return `null` for this field, add entry to `errors`, but still evaluate all other fields and return usable result.

Relay doesn't seem to follow this model and breaks if there is any error in response - `renderFailure` is called on such responses.
",vladar,
487,2015-10-19 16:38:49,"@leebyron @dschafer Is there any way for a client (Relay) to detect whether an error occurred on a nullable field instead of a non-null field?
",josephsavona,
487,2015-10-20 23:47:41,"> @leebyron @dschafer Is there any way for a client (Relay) to detect whether an error occurred on a nullable field instead of a non-null field?

Nothing built in; you could check to see if `data` is completely null before erroring; that feels like the right thing to do here. The server can also customize what it returns in the error, so we could add that data there if we wanted.
",dschafer,
487,2015-10-21 00:45:36,"@dschafer Thanks for confirming. 

In this case, `RelayDefaultNetworkLayer` should be changed to resolve the request when `data` is non-null or there are no `errors` (if non-null but there errors just log them to console), and only `reject` the request when data is null and there are errors.

@vladar any interest in submitting a PR? ;-)
",josephsavona,
487,2015-10-22 17:40:36,"Yeah, will do in next couple days :)
",vladar,
487,2016-07-09 17:54:42,"I have posted a related question at SO http://stackoverflow.com/questions/38284556/relay-graphql-nullable-response-or-a-way-to-catch-query-error

question is different that, I don't have any error but the response can be optional.
make the response an list, and sending an empty one is a workaround, but if I know there could only be one entity as response, I like to keep it as an object.

any response is appreciated. thanks.
",bsr203,
487,2016-07-12 13:57:56,"@josephsavona any hint on how would you model a request where error condition not block rendering the component? I hit a roadblock and just a one liner would help me to proceed. thanks in advance
",bsr203,
487,2016-07-12 16:34:01,"@bsr203 One workaround is to use a custom network layer that resolves the `RelayQueryRequest` if there is any data (regardless of `errors`), and only rejects the request if there is no data and errors. 
",josephsavona,
487,2016-07-12 16:40:42,"@josephsavona  Thanks a lot for the response. I already have a custom network layer to format the error and would be easy to adapt.

One thing to confirm. Does this ok to do in case of null response as well (if the response can be completely optional - and client can identify this from server error code). would it cause any issue with the internal cache.
",bsr203,
487,2016-07-12 17:53:42,"> Does this ok to do in case of null response as well (if the response can be completely optional - and client can identify this from server error code). would it cause any issue with the internal cache.

Hmm. In general, when a response is `null` Relay records that as an indication that the field cannot be fetched. If the same query is executed again it will be diffed out (unless you use `forceFetch`). I would recommend trying this approach to confirm that the behavior is as you'd expect (possibly using an empty object instead of null if necessary).
",josephsavona,
487,2016-12-22 16:44:18,In an upcoming release we will change from rejecting requests if `errors` is present to only rejecting if `data` is missing. Thanks for the feedback here!,josephsavona,
486,2015-10-18 10:44:18,"I had an impression that Relay should extract all query and fragment variables to separate object, that is sent to the server alongside with query.

But scalar fragment variables are inlined in query. This makes some server side optimizations impossible (like caching query validation step which may be expensive).

Is it intentional? Or am I missing something?
",vladar,2015-10-19 16:09:25
486,2015-10-18 19:26:35,"Relay inlines scalar values largely for historical reasons - it's simple and results in printed queries that are easy to debug (they can also be slightly smaller overall). This is certainly something we could reevaluate. 

How would you cache the results of query validation? By hashing the query text? Note that the printer avoids printing the same fragment twice: for example, if you use `<ProfilePicture>` container in multiple places all with the same photo `$size`, the corresponding fragment will be printed once. If the container is used with two different sizes, the fragment will be printed once for each value of `$size`. In other words, whether or not variables are inlined, different variable values can cause the query text to be different anyway. This may make query validation caching less effective. 
",josephsavona,2015-10-19 16:09:25
486,2015-10-19 10:02:37,"I got such impression after this comment of Lee Byron: https://github.com/graphql/graphql-js/issues/158#issuecomment-136888434 where he mentions ability to store queries on the server, validate at build time and just use query id in clients.

Would be great if we could do something like that with Relay, but I guess it might be hard for dynamic queries built by Relay.
",vladar,2015-10-19 16:09:25
486,2015-10-19 16:09:25,"> Would be great if we could do something like that with Relay, but I guess it might be hard for dynamic queries

Yup! We're exploring ways to save Relay queries in a build step and then upload ID + variables. The main challenges are Relay's dynamic queries and the need to map Relay's local variables into a global namespace. This is definitely on our radar though! I'm going to close this issue and file another one for the ability to save queries at build time. Thanks for asking about this!
",josephsavona,2015-10-19 16:09:25
485,2015-10-17 19:13:32,"Refactor query tracking to track only the fields that correspond to data referenced by active views, instead of all the fields corresponding to all the data that has been fetched.

Changes:
- Remove tracking from the diff phase
- Record tracking information during the read phase
- Ensure that queries are not diffed against stale data
",josephsavona,2015-11-28 00:42:49
485,2015-11-28 00:42:49,"I'm splitting this into smaller PRs such as #597 and #598.
",josephsavona,2015-11-28 00:42:49
484,2015-10-17 10:31:40,"I am a new for `Relay`, from `Meteor JS`.
I have problem with install

<S_CODE_TOKEN>

I base on `Win 7`.
",thearabbit,2015-10-22 21:38:17
484,2015-10-18 19:12:25,"Have a same problem when trying to do `npm install` inside treasure hunt sample.
",PharaohMaster,2015-10-22 21:38:17
484,2015-10-20 17:04:28,"Thanks for the report, @thearabbit. I don't have access to a Windows install for testing right now (I'll be trying to get one).

I wonder if a patch like this might work:

<S_CODE_TOKEN>

Are you able to give that a try and let me know what happens with it?
",wincent,2015-10-22 21:38:17
484,2015-10-20 17:21:09,"https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/scripts/build-lib is almost definitely not going to run on Windows unless you're in something like Cygwin. You'll probably want to end up rewriting your build script to use Node (https://github.com/facebook/relay/pull/432#issuecomment-146011726).
",zpao,2015-10-22 21:38:17
484,2015-10-21 00:52:30,"Thanks for your reply.
",thearabbit,2015-10-22 21:38:17
484,2015-10-22 21:38:17,"Now that https://github.com/facebook/relay/commit/438c47b049a2c6a3e6b3215484f43264c264df45 is merged, I'm going to mark this one as closed. Please feel free to report a new issue if the new version of the code still has trouble on Windows.
",wincent,2015-10-22 21:38:17
483,2015-10-17 05:40:28,,samerbuna,2015-10-19 23:35:31
483,2015-10-17 05:42:06,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-10-19 23:35:31
483,2015-10-17 15:57:19,"Thanks!

@facebook-github-bot import
",wincent,2015-10-19 23:35:31
483,2015-10-17 16:03:32,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1260339830658567/int_phab to review.
",facebook-github-bot,2015-10-19 23:35:31
483,2015-10-18 05:51:20,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-10-19 23:35:31
482,2015-10-17 01:44:07,"Note: not sure if my suggestion is the ""right"" way (I am a JS n00b).

To do auth I use a bearer token and this Relay code in my App.js:

<S_CODE_TOKEN>

The problem is I _also_ use [react-router](https://github.com/rackt/react-router) to have reload-free page transitions (using `this.context.history.pushState`). This means the code above reading from `localStorage` is only loaded / executed once unfortunately. If the token ever changes (like say in a login form) Relay is blissfully unaware and keeps sending the old value even after the new value is written. :cry:  While I currently do a `window.location` whole reload after login, that doesn't help the case where I need to transparently refresh an expiring token while the user is on a page.

Ideally I would just inject a slightly custom networking layer that reads from localStorage before every request like [this](https://facebook.github.io/relay/docs/api-reference-relay.html#injectnetworklayer-static-method-example) (with a memory cache to not kill perf), but because `DefaultNetworkLayer` only lets me set `headers` at init time I either need to reimplement most of its logic or do custom networking layer. Reimplementing `DefaultNetworkLayer` is a non-starter for me at this point because I can't track Relay changes too closely and `DefaultNetworkLayer` does almost what I need it to do.

 In a custom networking layer,`RelayQuery` doesn't expose anything related to networking of course...so I can't just intercept `sendQueries`, add some headers and go. I **can** directly modify [this._init.headers](https://github.com/facebook/relay/blob/a0ba844fbce1aca795570046d9a4fcf186c58cd7/src/network-layer/default/RelayDefaultNetworkLayer.js#L132) but I take it from the underscore that it is private API and could break at any time :person_frowning: :

<S_CODE_TOKEN>

:point_right:  It would be super useful to have some supported way of editing the headers sent in `DefaultNetworkLayer` from custom networking layers, so I can do something like https://facebook.github.io/relay/docs/api-reference-relay.html#injectnetworklayer-static-method-example, leveraging most logic in `DefaultNetworkLayer` and just messing with the headers.
",LegNeato,2015-10-17 18:17:24
482,2015-10-17 12:46:34,"A similar question was asked in #426.
For now the easiest way is to create a custom network layer that creates a new default network layer for each requests with the correct headers set and then delegates the request to it.
I wouldn't worry too much about changes to the DefaultNetworkLayer, I am confident the team would announce any breaking changes in a similar way the react team does.
",clentfort,2015-10-17 18:17:24
482,2015-10-17 18:17:24,"As mentioned in #481, application-specific logic such as this belongs in a custom network layer. As I mentioned there:

> The API is designed to be constrained enough that it can be implemented relatively easily.

Feel free to comment with additional questions, and let us know how it goes when implementing this!
",josephsavona,2015-10-17 18:17:24
482,2016-06-26 20:41:47,"Hi All can someone share code or comment how you solved implemented this? 
",rturk,2015-10-17 18:17:24
482,2016-06-27 05:53:04,"@rturk try this open sourced implementation of relay network layer https://github.com/nodkz/react-relay-network-layer
",nodkz,2015-10-17 18:17:24
482,2016-06-27 07:19:19,"@rturk take a look at [this comment](https://github.com/facebook/relay/issues/426#issuecomment-224032838) on the linked thread - does that help?
",josephsavona,2015-10-17 18:17:24
482,2016-06-28 16:58:55,"@josephsavona tks helps a lot! 
However after reading this post [graphql-and-authentication](https://medium.com/the-graphqlhub/graphql-and-authentication-b73aed34bbeb#.hsoqxwdhz) I'm considering passing the token in the Viewer and not in the Header.
",rturk,2015-10-17 18:17:24
482,2016-11-17 16:46:43,"@LegNeato u can try use a custom RelayStore that accepts to reset a network layer

like this: https://github.com/sibelius/react-native-relay-example/blob/master/src/RelayStore.js#L18
",sibelius,2015-10-17 18:17:24
481,2015-10-17 00:08:57,"Currently `DefaultNetworkLayer` is hardcoded to keep retrying if it doesn't get a hardcoded success status code.  This doesn't work in my auth/viewer setup as far as I can see. I could maybe write my own network layer, but this behavior seems pretty inflexible and maybe a knob should be added to `DefaultNetworkLayer`?

More details:
- I have a graphql server that requires a valid `Bearer` header to accept the request (via [passportjs](http://passportjs.org/)).
- I auth outside of Relay, write the auth token to localStorage, and pass it around via `injectNetworkLayer` as suggested in various places:

<S_CODE_TOKEN>
- I pass this to GraphQL via `rootValue` for resolution of those queries.

**This all works.** :tada: 

Now for the :beetle: . I create a component like this:

<S_CODE_TOKEN>

I want the component to render ""Unknown"" if the GraphQL server returns a `401` (or maybe just checking if `this.props.viewer` is null...do components have access to the response code?) or the viewer's `firstName` if they are authed.

:beetle: Unfortunately, Relay's `DefaultNetworkLayer` sees the 401 status code as an error and just keeps retrying until failure.

:point_right: It would be great for `DefaultNetworkLayer` to get a list of HTTP status codes it ignores as failures. In my case, I could ignore `401` and then have the application logic assume that because Relay couldn't pull a viewer that no one is logged in.

I could also see this being useful for `500`s...with this change you could potentially show a UI message to the user that the server is having trouble rather than it throwing an error and failing.

:question: Is the idea that the GraphQL server is always supposed to be accessible and returns errors/information via a payload instead of status codes?
",LegNeato,2015-10-17 18:13:39
481,2015-10-17 01:10:02,"I know I can do something like https://facebook.github.io/relay/docs/api-reference-relay.html#injectnetworklayer-static-method to handle the errors but I don't see any way to override the default retry behavior without duplicating a lot of logic, hence this issue. Let me know if I am missing something!
",LegNeato,2015-10-17 18:13:39
481,2015-10-17 12:32:19,"If I understood the idea behind the default network layer it is more an example/reference on how to implement your own network layer and to provide a sensible default people can work with.
IMHO adding more functionality to the network layer would cause more harm than do good. It makes the usage harder and discourages people to build their own. Instead people will stuff ever more functionality that is specific to their use case into the reference implementation, making the thing bloated and hard to maintain.

Maybe the `DefaultNetworkLayer` could be renamed to `ReferenceNetworkLayer` to make it clear that it is only a reference. I'd even advocate for moving it into its own NPM package and making it an optional dependency of relay. (And mention it in the documentation a gazillion times, that it is easy to build your own.)
",clentfort,2015-10-17 18:13:39
481,2015-10-17 18:13:39,"@LegNeato The intention of the default network layer is exactly as @clentfort mentioned - it's a reference implementation that covers the basic cases to get people started. For custom functionality such as application-specific error handling, we'd recommend writing your own network layer. The API is designed to be constrained enough that it can be implemented relatively easily.

I'm going to close this issue, but feel free to comment if you have additional questions about implementing your own network layer.
",josephsavona,2015-10-17 18:13:39
480,2015-10-16 21:41:08,"I got an error that 0.4.0 didn't exist...
",nick,2015-10-16 21:41:42
479,2015-10-16 18:22:54,"Sorry if this is has been discussed somewhere, but I cannot find it. Is there a way to make Relay purge old queries. For example, I want to infinite scroll through a list of items. At some point while scrolling down the list I want to purge the old queries and just re-fetch them when scrolling back up.
",HurricaneJames,2015-11-02 17:21:28
479,2015-10-16 20:24:10,"At the moment, the only way to force a refetch is using a mechanism like [`forceFetch`](http://facebook.github.io/relay/docs/api-reference-relay-container.html#forcefetch), but in the example that you describe that would refetch everything in the connection, which may be an intractably large amount of data.

Note that we already have some code in place ([RelayStoreGarbageCollector](https://github.com/facebook/relay/blob/master/src/store/RelayStoreGarbageCollector.js) and related classes) to do a simple form of garbage collection, but it is based on the notion of subscribed components (ie. which components are mounted; it has no notion of what is visible within a viewport nor how long since a given piece of data was accessed) and it is not active by default.

The use case you describe is one that we've talked about internally, although I don't know if we have a GitHub issue for it yet. If not, this one can be it!
",wincent,2015-11-02 17:21:28
479,2015-10-16 20:24:47,"Added the ""discussion"" label as there are a number of ways this problem could be approached.
",wincent,2015-11-02 17:21:28
479,2015-10-19 03:06:56,"Even with forceFetch, it does not appear to actually throw out everything and fetch all the data again. I'm working on issue #478 where tracking sub-query fragments (`trackedNodes`) returns those fragments with random ordering causing issues rebuilding connection edges. I will admit that I have not gone too deep into forceFetch, but it appears to still run the `diffRelayQuery` which builds up all those sub-fragments instead of tossing out all trackedNodes and refetching everything. 

As for my example, when I said refetch them, I didn't mean all at once. If I extend my infinite scroll by 20 items when I'm scrolling down, then I would probably do the same when scrolling back up. Though in practice I would try to avoid this type of infinite scroll. I implemented it once and the view position issues were a nightmare.
",HurricaneJames,2015-11-02 17:21:28
479,2015-10-19 14:18:49,"Does `untrackNodesForID` in RelayQueryTracker.js help you?  It's not a documented method and I have not used it.
",saikat,2015-11-02 17:21:28
479,2015-10-19 15:57:12,"@HurricaneJames Currently there is no way to avoid the buildup of multiple distinct tracked queries for connections. Note that `forceFetch` refetches the given queries but does not cause other data to be purged. Note that we're actively working on changing tracked queries in #485.

Re mutations that affect connections, we typically recommend specifying the result of connection changes via configs such as `RANGE_ADD`, which tell Relay how a connection will change as the result of a modification. This can help to avoid refetching the entire range - have you tried that? 

@saikat `untrackNodesForID` is private API and may (read: almost certainly will) change at any time. Also, using it in this case on the connection would cause Relay not to fetch the connection nodes at all, which doesn't seem to be the desired behavior.
",josephsavona,2015-11-02 17:21:28
479,2015-11-02 17:21:27,"merging into #537 
",josephsavona,2015-11-02 17:21:28
478,2015-10-16 15:48:16,"Summary: Relay does not merge query fragments when calling setVariables. Instead it uses a unique id for each query. This works fine, until a mutation means everything must be refetched. Then, it tries to rebuild edges from those previous queries, but the edges are sorted in alpha order on the unique ids. `putRangeEdges` tosses out a warning (cannot find segment) when it reaches a segment that has a cursor that has not been processed yet, then quietly abandons the data and keeps going.

Full Description:
Lets say we have a simple list component.

<S_CODE_TOKEN>

This Simple component is wrapped in a Relay container.

<S_CODE_TOKEN>

Clicking on the ""Load More"" button works as expected and loads more items. Each time it generates an optimized query fragment to only load the extra. The first fetch, `items0000`, grabs 2 items. The second fetch, `items0002`, only grabs the next 4. The third fetch, `items0001`, requests the next 4 and returns 2 from my sample data.

The fragment names are not the actual names used. Relay uses random keys, `itemsemfrel`, `itemsywxi0w`, and `itemsx3ao8b`. These keys, in an alpha sort may as well be items0000, items0002, and items0001.

Now, lets assume there is another component on the page somewhere else that calls a mutation.

<S_CODE_TOKEN>

This mutation works fine where it is called. This is because the regions component specifies a query to MAX_INT for region edges and the item edges in those regions. That means there is only a single query to consolidate.

However, because of the load more functionality, the ItemList container ends up with various fragments, which may or may not be ordered correctly when being processed by `RelayRecordStore::putRangeEdges`. This leads to a warning `Warning: GraphQLRange cannot find a segment that has the cursor: [cursorId]`. It continues processing the remaining data, but misses everything from the skipped edges, and I would imagine anything that relies on those edges cursors.

I do not have a solution to this problem yet. It could be that the viewer design an anti-pattern for Relay. In which case, it should probably be avoided in the examples. I suspect merging the queries is impossible (each fragment could have different params, though this seems like Relay simply trying to be too flexible). It might also be possible to use a timestamp in the query fragment name instead of the (random?) characters.

Any suggestions?
",HurricaneJames,2016-05-10 16:01:48
478,2015-10-19 03:21:26,"The original name for this issue was the console warning. However, that was not very descriptive. The new name helps to clarify the real issue.

After working with the relay code base for a while tonight it looks like any time `props.relay.setVariables` updates an edge fetch count (ex. first: 1 -> first: 5), it splits the query into 2 tracked nodes, `{ first: 1}` and `{ first: 4, after: [current end cursor] }`. The fragments for this split query are run through a global id generator to get their `__serializationKey__`.

This works fine until something, a mutation perhaps, means Relay needs to refetch everything. At which point `RelayQueryTracker::getTrackedChildrenForID` returns a query with the split query fragments ordered on `__serializationKey__`. I believe this is happening in `flattenRelayQuery`.
",HurricaneJames,2016-05-10 16:01:48
478,2015-10-19 03:27:30,"Not sure why it submitted that last comment, I was not done writing and definitely did not hit comment. 

Anyway, I wanted to point out that it should not matter what order those fragments are in when the query is made because there is really no guarantee that they will come back in that order. Even if they do, it seems all too easy to sort them by accident at some processing step. Instead, it seems like connection queries need to have a sequence value that the GraphQL server would parrot.
",HurricaneJames,2016-05-10 16:01:48
478,2015-10-19 16:00:38,"@HurricaneJames this appears to be basically the same issue as #479 as both ultimately are caused by the building of tracked queries for a connection. I'm going to close this - let's move discussion to that issue. 
",josephsavona,2016-05-10 16:01:48
478,2015-10-19 16:23:01,"I think this is a different issue. One that actually seems to have a simple fix (even if it did take hours to find and tons of dead ends while I learned the relay code base).

`toQuery` in `flattenRelayQuery.js` sorts the keys. Changing `var keys = Object.keys(flattenedFieldMap).sort(sortTypeFirst);`) to `var keys = Object.keys(flattenedFieldMap)` seems to fix the bug. It also does not seem to make any tests fail. Is there a reason the keys were sorted?
",HurricaneJames,2016-05-10 16:01:48
478,2015-10-19 18:28:20,"> Is there a reason the keys were sorted?

@HurricaneJames: I replied on your PR.
",wincent,2016-05-10 16:01:48
478,2016-05-10 16:01:48,"Fixed in 389d25a
",josephsavona,2016-05-10 16:01:48
477,2015-10-16 14:16:49,"I have the following mutation

<S_CODE_TOKEN>

The query that it generates does not include gameEdge:

<S_CODE_TOKEN>

 and i get the 'Warning: writeRelayUpdatePayload(): Expected response payload to include the newly created edge `gameEdge` and its `node` field. Did you forget to update the `RANGE_ADD` mutation config?' error.

I simulated mutation via graphiql and it correctly responds with newly created edge:
<img width=""885"" alt=""screen shot 2015-10-16 at 8 08 35 pm"" src=""https://cloud.githubusercontent.com/assets/9557307/10543861/2060b0ea-7442-11e5-8d70-19038c0fe1e6.png"">

Why doesn't Relay include gameEdge into query? it isn't subtracted as the app requests for the data, what other issue might be causing this error
",IlyasM,2015-11-02 20:50:18
477,2015-10-16 14:34:45,"Have same problem, seems like a bug to me
",almascript,2015-11-02 20:50:18
477,2015-10-16 16:30:50,"Have the same problem.
",vslinko,2015-11-02 20:50:18
477,2015-10-16 16:31:25,"confirmed.
",ErrorPro,2015-11-02 20:50:18
477,2015-10-16 17:06:50,"Does something in your application query for the `gamesForPlayerOrCity` connection on the applicable `hackRoot` object?
",josephsavona,2015-11-02 20:50:18
477,2015-10-16 17:09:09,"In my case, connection isn't queried before mutation.
",vslinko,2015-11-02 20:50:18
477,2015-10-16 17:13:29,"yes the games component asks for it in its container 

<S_CODE_TOKEN>
",IlyasM,2015-11-02 20:50:18
477,2015-10-20 04:29:19,"Having same issue with
    ""react-relay"": ""^0.4.0"",
",bsr203,2015-11-02 20:50:18
477,2015-10-23 16:04:51,"I had the same problem, until I realized the issue comes from not including a proper getOptimisticResponse() definition in the client side mutation. So for the above example, something like this would eliminate the warning:

<S_CODE_TOKEN>
",nlifors,2015-11-02 20:50:18
477,2015-11-02 20:50:17,"merging into #542
",josephsavona,2015-11-02 20:50:18
477,2016-01-06 21:37:17,"`REQUIRED_CHILDREN` can be used to ensure that the new edge field is included in the mutation query.

That said, I am not sure that querying for the connection before the mutation actually does include the new edge field in the mutation! Can somebody confirm this? Because—why would the querying the connection include the new edge field in the tracked query, given that the connection field is not the same as the edge field?
",dminkovsky,2015-11-02 20:50:18
477,2016-04-26 05:39:21,"I still have this issue.
I almost copied the example code from <a href=""https://github.com/facebook/relay/blob/master/examples/todo/js/mutations/AddTodoMutation.js"">here</a> and I get a warning: `warrning: writeRelayUpdatePayload(): Expected response payload to include the newly created edge `todoEdge` and its `node` field. Did you forget to update the `RANGE_ADD` mutation config?`

Here's my code:

<S_CODE_TOKEN>

I'm sure my graphql works. Do I miss something?
",mickeyinfoshan,2015-11-02 20:50:18
477,2016-05-03 12:57:23,"Hmm.. 
I've figured out that it's `variables` that causes this issue in my case.
For example:

<S_CODE_TOKEN>

will work as what I expect, but

<S_CODE_TOKEN>

will cause such issue.

I don't know why.
",mickeyinfoshan,2015-11-02 20:50:18
477,2016-05-08 12:50:20,"I see the same behavior as @mickeyinfoshan in regards to the warning. For example, I see the warning if my query fragment looks like this:

`purchases(first: 100, status: $status) { ... }`

The warning does not appear if I change my query to this:

`purchases(first: 100) { ... }`

If my `rangeBehaviors` look like this then I see the warning when using both the `first` and `status` arguments:

<S_CODE_TOKEN>

However, if I update my `rangeBehaviors` so that they match the default values set in the schema, the warning goes away and everything works as expected. For example:

<S_CODE_TOKEN>

It feels right to me that the `rangeBehaviors` should specify `status(all)` and not `status()` because `""all""` is my default value. It was easy to miss though. I hope this helps someone!
",piinecone,2015-11-02 20:50:18
477,2016-05-09 06:35:10,"@piinecone You do help me a lot! Thank you.
",mickeyinfoshan,2015-11-02 20:50:18
476,2015-10-16 11:45:44,,Bulforce,2015-10-16 22:20:25
476,2015-10-16 11:47:17,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-10-16 22:20:25
476,2015-10-16 12:02:44,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-10-16 22:20:25
476,2015-10-16 19:53:26,"@facebook-github-bot import
",wincent,2015-10-16 22:20:25
476,2015-10-16 20:07:12,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/410028149166115/int_phab to review.
",facebook-github-bot,2015-10-16 22:20:25
476,2015-10-16 21:56:13,"@facebook-github-bot shipit
",wincent,2015-10-16 22:20:25
476,2015-10-16 22:00:05,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/410028149166115/int_phab to review.
",facebook-github-bot,2015-10-16 22:20:25
475,2015-10-16 06:51:26,"If you do a mutation in Relay and it causes your server to crash, Relay will not execute the onFailure callback.
",nickretallack,2016-03-31 23:21:04
475,2015-10-16 16:58:33,"> and it causes your server to crash

What is the HTTP response (status code, headers, content) when the server crashes?
",josephsavona,2016-03-31 23:21:04
475,2015-10-20 06:38:21,"No response.  I'm talking `net::ERR_CONNECTION_REFUSED`.
",nickretallack,2016-03-31 23:21:04
475,2016-03-31 22:28:51,"A little late answer.. 
I don't think renderFailure should be executed when a mutation fails. There is apis like [getPendingTransactions](https://facebook.github.io/relay/docs/api-reference-relay-container.html#getpendingtransactions) to check whenever a mutation failed or not.
",edvinerikson,2016-03-31 23:21:04
475,2016-03-31 23:20:59,"The mutation `onFailure` callback **should** be called if the mutation fails. I'm going to close this, feel free to comment with additional steps to repro.

@edvinerikson note that the OP is referring to `onFailure` (callback on `RelayStore.{apply,commit}Update`).
",josephsavona,2016-03-31 23:21:04
475,2016-03-31 23:26:00,"Aha, thought it was renderFailure.. my bad.. 
",edvinerikson,2016-03-31 23:21:04
474,2015-10-16 04:26:03,"I'm experimenting with Relay and Graphql and I've got an error message on the browser console:

> Warning: RelayQueryWriter: Could not find a type name for record `UHJvZHVjdDpwXzE=`.

Here is a runnable example of the issue: https://github.com/brenoc/relay-starter-kit/tree/relay/typenameIssue

This error disappears when I add `__typename` to the query here:
https://github.com/brenoc/relay-starter-kit/blob/relay/typenameIssue/js/components/App.js#L20

What am I doing wrong?
",brenoc,2016-05-10 16:01:33
474,2015-10-28 00:49:47,"I got `RelayQueryWriter: Could not find a type name for record '1'` too in this example:

<S_CODE_TOKEN>

The `1` is the returned id value from the resolve.

@brenoc could you figure it out?
",BerndWessels,2016-05-10 16:01:33
474,2015-10-28 01:10:07,"Are you using the latest version of Relay _and_ `babel-relay-plugin`? Older versions of the plugin did not add the necessary `__typename` field, and a version mismatch could cause this issue.
",josephsavona,2016-05-10 16:01:33
474,2015-10-28 01:20:45,"@josephsavona  `babel-relay-plugin` `0.3.0`

That is the latest version I guess.

Any ideas what else could be wrong?

Before I used

<S_CODE_TOKEN>

but that wasn't really what I wanted - or maybe I just don't understand what that `id` is supposed to be. My assumption is that I can stick the ""real"" id in there that comes back from my database?
",BerndWessels,2016-05-10 16:01:33
474,2015-10-28 11:31:22,"@BerndWessels - Can you paste the fragment from your container?
",josephsavona,2016-05-10 16:01:33
474,2015-10-28 13:25:19,"@josephsavona Yes, I'm using the lastest version of them, v0.4.0 and v0.3.0 ([my package.json](https://github.com/brenoc/relay-starter-kit/blob/relay/typenameIssue/package.json))

@BerndWessels Unfortunately no, I couldn't :(
",brenoc,2016-05-10 16:01:33
474,2015-10-28 18:43:44,"@josephsavona 

<S_CODE_TOKEN>

As @brenoc pointed out, if I add `__typename` to the requested properties the error goes away - but I expected the system to take care of that?
",BerndWessels,2016-05-10 16:01:33
474,2015-10-29 13:33:33,"I've unable to repro this. First I [recreated this schema](https://facebook.github.io/relay/prototyping/playground.html#schema=import%20%7B%0A%20%20GraphQLID%2C%0A%20%20GraphQLNonNull%2C%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%7D%20from%20'graphql'%3B%0A%0Avar%20APP%20%3D%20%7B%0A%20%20id%3A%20'APP_ID'%2C%0A%20%20email%3A%20'joesavona%40fb.com'%2C%0A%7D%3B%0A%0Avar%20AppType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'App'%2C%0A%20%20%20%20description%3A%20'The%20application%20configuration%20for%20the%20current%20user.'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20%20%20id%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20type%3A%20GraphQLID%2C%0A%20%20%20%20%20%20%20%20%20%20description%3A%20'The%20identifier'%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20email%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20type%3A%20new%20GraphQLNonNull%28GraphQLString%29%2C%0A%20%20%20%20%20%20%20%20%20%20description%3A%20'The%20user%5C's%20email%20address'%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%29%0A%7D%29%3B%0A%0A%2F**%0A%20*%20The%20schema.%0A%20*%20Here%20we%20export%20a%20schema%20that%20offers%20one%20root%0A%20*%20field%20named%20'greetings'%2C%20and%20a%20method%20to%0A%20*%20resolve%20its%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20writing%20GraphQL%20schemas%20for%20Relay%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Fgithub.com%2Fgraphql%2Fgraphql-relay-js%0A%20*%2F%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'Query'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20app%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20AppType%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20Here%20we%20define%20a%20resolver%20that%20returns%0A%20%20%20%20%20%20%20%20%2F%2F%20the%20data%20defined%20above.%20Were%20this%20schema%0A%20%20%20%20%20%20%20%20%2F%2F%20executing%20on%20the%20server%20side%2C%20you%20could%0A%20%20%20%20%20%20%20%20%2F%2F%20write%20a%20resolve%20method%20that%20fetches%0A%20%20%20%20%20%20%20%20%2F%2F%20live%20data%20from%20a%20database.%0A%20%20%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20APP%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%0A%20%20%20%20%7D%29%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0A%0A&source=%2F%2F%20Welcome%20to%20Relay.%0A%2F%2F%20Allow%20us%20to%20introduce%20you%20to%20the%20four%20elements.%0A%0Aclass%20App%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20return%20%3Cdiv%3E%7Bthis.props.app.email%7D%3C%2Fdiv%3E%3B%0A%20%20%7D%0A%7D%0A%0A%0AApp%20%3D%20Relay.createContainer%28App%2C%20%7B%0A%20%20fragments%3A%20%7B%0A%20%20%20%20app%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20App%20%7B%0A%20%20%20%20%20%20%20%20email%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%0A%20%20%7D%0A%7D%29%3B%0A%0Aclass%20AppRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'App'%3B%20%20%2F%2F%20A%20unique%20name%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20%2F%2F%20Here%2C%20we%20compose%20your%20Relay%20container's%0A%20%20%20%20%2F%2F%20'greetings'%20fragment%20into%20the%20'greetings'%0A%20%20%20%20%2F%2F%20field%20at%20the%20root%20of%20the%20GraphQL%20schema.%0A%20%20%20%20app%3A%20%28Component%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20AppQuery%20%7B%0A%20%20%20%20%20%20%20%20app%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BApp.getFragment%28'app'%29%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BApp%7D%0A%20%20%20%20route%3D%7Bnew%20AppRoute%28%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B%0A) in Relay Playground, but the fragment is fetched and written without error.

I also created an extra test for `diffRelayQuery` to make sure that the `id` field wasn't being removed in the diff stage (since the examples above are types that define an `id` field but do not implement the `Node` interface).

@brenoc @BerndWessels - Can you create a repro case in Relay Playground to demonstrate this issue?
",josephsavona,2016-05-10 16:01:33
474,2015-10-29 16:10:12,"@josephsavona I have a repo that you can run and see the issue:
https://github.com/brenoc/relay-starter-kit/tree/relay/typenameIssue

It's just a fork of relay-starter-kit with some minor changes in the code. Is that helpful?

Sorry for not providing a case in Relay Playground as you asked. I think it will take some time for me to port that code into Relay Playground.
",brenoc,2016-05-10 16:01:33
474,2015-10-29 19:42:40,"I think maybe I was just wrong thinking to be able to stick a database id in to object id. It seems that Relay needs type identification within the id to be able to operate. I am still not very comfortable with it, but slowly understand why I can't just put a plain database id into the id property.

Here is a more detailed information about that whole area: http://stackoverflow.com/questions/33399901/in-relay-what-role-do-the-node-interface-and-the-global-id-spec-play

Cheers
",BerndWessels,2016-05-10 16:01:33
474,2015-10-30 10:39:32,"@BerndWessels Yes, see also the [Node Interface Specification](http://facebook.github.io/relay/docs/graphql-object-identification.html#content) - does implementing the `Node` interface for these types solve the problem?
",josephsavona,2016-05-10 16:01:33
474,2015-12-06 19:40:43,"That same error:

> Warning: RelayQueryWriter: Could not find a type name for record ...

occurs when I bump:
`react-relay ^0.5.0 -> ^0.6.0`
`babel-relay-plugin ^0.4.1 -> ^0.6.0`
per #649
",rojobuffalo,2016-05-10 16:01:33
474,2015-12-06 20:15:59,"@rblakeley can you provide more information? What is the unabbreviated error message? How did you query for that record (i.e. what field did you query that returned it), and what is the schema definition for that field?
",josephsavona,2016-05-10 16:01:33
474,2015-12-06 20:49:03,"Hello
Not sure if this is still related, but all my problems came from trying to fiddle around with the `id` property of entities.
I tried to use my database ids instead of sticking with the relay generated ids from the `nodeDefinitions` functions.
So just in case you try the same and end up with errors like the one mentioned in this issue - you should really stick to the relay generated `ids` and use the `nodeDefinitions` function to serialize and deserialize.
It took me some time to understand how that all fits together and how to resolve from and to my database objects and ids in relay.
I created a kind of [starter-kit](https://github.com/BerndWessels/react-webpack) that should help to understand how a database like mysql can be plugged in to a react-relay graphql project.
Cheers
Bernd
",BerndWessels,2016-05-10 16:01:33
474,2015-12-06 22:01:27,"@josephsavona the unabbreviated error looks like:

> Warning: RelayQueryWriter: Could not find a type name for record `client:client:6810115162:UmVzb3VyY2U6NA==`.

The app works without issue when I don't bump to `0.6.0`. But when I do bump, a specific mutation is triggering the error. The mutation pattern is to create a new item, `Group`, add the new `groupEdge` to my `User`'s `groups` connection, and to add the `userEdge` to the new `Group`'s `users` connection.

I am using a central [registry](https://github.com/rblakeley/pluck-yourself/blob/master/data/types/registry.js) for my object types which [wraps](https://github.com/rblakeley/pluck-yourself/blob/master/data/types/node.js) `nodeDefinitions`, if that's relevant.

I'm not sure how to answer:

> How did you query for that record (i.e. what field did you query that returned it), and what is the schema definition for that field?

...but the relevant files are:
[js/components/NewGroupPanel.js](https://github.com/rblakeley/pluck-yourself/blob/master/js/components/NewGroupPanel.js)
[js/mutations/NewGroupMutation.js](https://github.com/rblakeley/pluck-yourself/blob/master/js/mutations/NewResourceMutation.js)
[data/mutations/NewGroupMutations.js](https://github.com/rblakeley/pluck-yourself/blob/master/data/mutations/NewGroupMutation.js)
[data/types/GroupType](https://github.com/rblakeley/pluck-yourself/blob/master/data/types/GroupType.js)
[data/types/UserType](https://github.com/rblakeley/pluck-yourself/blob/master/data/types/UserType.js)

Edit: looks like #653 may get at the same problem
",rojobuffalo,2016-05-10 16:01:33
474,2015-12-07 00:15:52,"Thanks for filing this - i've identified the missing `__typename`, will send a fix.
",josephsavona,2016-05-10 16:01:33
474,2015-12-07 00:17:22,"@rblakeley Note that this is just a warning, and Relay will continue to work as-expected when that occurs. At worst, some operations may be _slightly_ less efficient due to the missing typename.
",josephsavona,2016-05-10 16:01:33
474,2015-12-07 00:54:07,"@josephsavona :ok_hand:
",rojobuffalo,2016-05-10 16:01:33
474,2015-12-08 03:06:53,"the fix is on master and will go out in the next release. thanks for reporting!
",josephsavona,2016-05-10 16:01:33
474,2016-02-19 21:21:54,"I'm still getting this warning, at relay 0.7.1 `Warning: RelayQueryWriter: Could not find a type name for record 'VXNlcjox'.` 

this is the request i make:

<S_CODE_TOKEN>

The `VXNlcjox` id is the id the User is getting from `globalIdField('User')`
When i request more friends, the warning appears, my data is:

<S_CODE_TOKEN>

if i read `RelayQueryWriter.prototype.getRecordTypeName` correctly, its expecting to get `__typename` next to the `id`, but it's not getting it from the node request, and i don't see how i can add it to my node.

Thanks for any help, i hope my code makes it more clear.
",laurenskling,2016-05-10 16:01:33
474,2016-02-19 22:47:29,"> When i request more friends, the warning appears

@laurenskling how are you requesting more fields? For example, are you fetching a new query via `RelayRootComponent`, or are you using `setVariables/forceFetch` in a component? If the latter, what is the component's fragment?
",josephsavona,2016-05-10 16:01:33
474,2016-02-20 14:50:08,"setVariables:

<S_CODE_TOKEN>

 the fragment i posted above, right? This is my route:

<S_CODE_TOKEN>
",laurenskling,2016-05-10 16:01:33
474,2016-02-20 15:27:25,"+1

#### Infinite scroll feature:

Set Variables: 

<S_CODE_TOKEN>

Fragment: 

<S_CODE_TOKEN>
",gauravtiwari,2016-05-10 16:01:33
474,2016-02-20 18:05:53,"Thanks for the extra info. Reopening to track this.
",josephsavona,2016-05-10 16:01:33
474,2016-02-20 20:29:33,"@josephsavona For some reason, this doesn't throw the warning on Heroku, but only on local development: [https://relay-rails-blog.herokuapp.com/](https://relay-rails-blog.herokuapp.com)
",gauravtiwari,2016-05-10 16:01:33
474,2016-02-21 00:41:47,"Thanks again for all the info - I think I see what's happening. In both cases, Relay isn't querying for `__typename` because the type is already known (for @laurenskling the type is `User`, for @gauravtiwari  it's `Viewer`). We can squash this warning by using the existing information about the type in the store, i'll send a PR.

Note that in the meantime this is just a warning and Relay should be working just fine.
",josephsavona,2016-05-10 16:01:33
474,2016-02-21 04:50:31,"#860 fixed the warning for me. :+1: 
",chirag04,2016-05-10 16:01:33
474,2016-02-21 12:38:33,"Awesome, glad I could have been of help. Thanks for fixing it!
",laurenskling,2016-05-10 16:01:33
474,2016-05-10 16:01:33,"This should be fixed - feel free to comment if not!
",josephsavona,2016-05-10 16:01:33
473,2015-10-16 02:01:57,"I am dealing with a strange issue. Whenever a make a forceFetch or setVariables call in my app, the response is empty.

I isolated this problem down to the simplest app possible and it is still occurring. 

Test it out here:
https://github.com/khe123/Relay-forceFetch-problem

It is a single component that makes a read and receives a user object from memory.  The initial response is correct:

<S_CODE_TOKEN>

The problem occurs when I make a forceFetch. I get back this reponse:

<S_CODE_TOKEN>

The resolve method for user node is not even being hit.

This looks like a bug to me. But if I making an obvious mistake please let know.

Interestingly there are no errors if I add an extra type in the schema so that the component looks like this:

<S_CODE_TOKEN>

As opposed to:

<S_CODE_TOKEN>

Thanks,
Kris
",khe123,2015-10-16 17:03:58
473,2015-10-16 02:49:30,"@khe123 Thanks for reporting this. Can you paste the query that is sent to the server initially, and the query after forceFetch/setVariables that returns the empty response?
",josephsavona,2015-10-16 17:03:58
473,2015-10-16 03:57:04,"Initial query:

<S_CODE_TOKEN>

Query sent after forceFetch with empty response:

<S_CODE_TOKEN>

It seems like re-fetching using the node root field is broken. Now I understand why when I made a dummy node that didn't implement nodeInterface it worked. It avoids node re-fetching. My query looks like this with the dummy node (in both cases):

<S_CODE_TOKEN>

Could it be a problem with how I set up nodeField and nodeInterface? I followed the samples:

<S_CODE_TOKEN>

Thanks,
Kris
",khe123,2015-10-16 17:03:58
473,2015-10-16 15:52:33,"Figured it out. My nodeDefinitions was incorrect. It should type === 'user' in accordance to using globalIdField('user'). I guess this can be closed now.

<S_CODE_TOKEN>
",khe123,2015-10-16 17:03:58
473,2015-10-16 17:03:58,"Yup, the queries all look correct, the `null` response definitely seems to from the `nodeDefinitions` name mismatch. Thanks for following up with how you resolved this!
",josephsavona,2015-10-16 17:03:58
472,2015-10-15 20:30:26,"Should eliminate warnings seen with the example apps.

Tested with `npm install && npm run start` in each app.

Fixes: https://github.com/facebook/relay/issues/469
",wincent,2015-10-15 23:50:24
472,2015-10-15 20:30:51,"@facebook-github-bot import
",wincent,2015-10-15 23:50:24
472,2015-10-15 20:42:35,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1686926161521402/int_phab to review.
",facebook-github-bot,2015-10-15 23:50:24
471,2015-10-15 20:05:55,"Currently there is nothing to guarantee that the version of `babel-relay-plugin` being used by an application matches the version of Relay. This can cause features to break when an upgraded Relay expects metadata that is not provided by older versions of the plugin - see #470 for an example.

Making the plugin a peer dependency helps to ensure that versions match.
",josephsavona,2015-10-15 23:20:26
471,2015-10-15 20:06:03,"@facebook-github-bot import
",josephsavona,2015-10-15 23:20:26
471,2015-10-15 20:08:55,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1045536495491154/int_phab to review.
",facebook-github-bot,2015-10-15 23:20:26
470,2015-10-15 15:58:16,"I have a version of the relay-starter-kit that I've been trying to upgrade to 0.4.0.  I have this route:

https://gist.github.com/saikat/37b4c0dc6fec363d0607

And this is how I'm rendering it:

https://gist.github.com/saikat/fba0d41a7dbd61c18e47

This worked fine in 0.3.2 but the id parameter is no longer sending in the request payload in 0.4.0.  Here are printouts of the respective payloads:

https://gist.github.com/saikat/97c56a4a2c49b033ca8b

Has the syntax for sending parameters changed in 0.4.0?  Or is this a bug?  Thanks!
",saikat,2015-10-15 20:22:15
470,2015-10-15 20:00:22,"@saikat Can you confirm the version of `babel-relay-plugin` that you're using? Relay 0.4.0 requires plugin version 0.3.0.
",josephsavona,2015-10-15 20:22:15
470,2015-10-15 20:22:15,"That was the problem, I was on 0.2.3.  Upgrading to 0.3.0 fixed it, thanks!
",saikat,2015-10-15 20:22:15
469,2015-10-15 13:17:57,"Hey guys. It would be amazing if you could keep the examples up to date, when you release a new version. After updating the examples to the latest version i get a lot of warnings and i don't know if its because of a mistake by me or the example being outdated. 
For example they are still using old react-rc1 versions

Thanks a lot in advance!
",xsistens,2015-10-15 23:50:24
469,2015-10-15 17:07:30,"Thanks for the reminder!

I'm going to update our internal release checklist so that we don't forget this in future releases, and push an update presently to update the examples.
",wincent,2015-10-15 23:50:24
468,2015-10-15 05:45:59,"Hello, I can't seem to get the babel-relay-plugin to work with my webpack config. So far I have:

<S_CODE_TOKEN>

And whenever I run `webpack-dev-server --hot --inline --port 3030 --host 0.0.0.0`, I get the following error:

<S_CODE_TOKEN>

I have a `schema.json` inside `data/`, and my `plugins/babelRelayPlugin` is:

<S_CODE_TOKEN>

Here is my package.json:

<S_CODE_TOKEN>

This has been stumping me for a bit, some help would be really nice!

EDIT: Some more info, I also do code splitting in this app, but I made sure that none of this is happening because of any code. it seems to be webpack.
",Agrosis,2015-10-15 18:45:17
468,2015-10-15 05:52:50,"Ugh, I figured it out. Appaerntly `webpack.config.js` needs to be renamed to `webpack.config.babel.js`. I have no clue why this works, would someone be able to tell me why, before I close it?
",Agrosis,2015-10-15 18:45:17
468,2015-10-15 18:45:17,"@Agrosis Thanks for following up that you were able to resolve the issue :-) Maybe consult the webpack docs about the config file naming?
",josephsavona,2015-10-15 18:45:17
467,2015-10-14 14:45:44,"This does 2 real things:
- Update `react-router-relay` per https://github.com/relay-tools/react-router-relay/pull/63
- Use the top-level exported `Link` components that are now available from React Router
",taion,2015-10-14 22:20:24
467,2015-10-14 17:14:06,"Great, I like that we no longer need to load a ""private"" module.

@facebook-github-bot import
",kassens,2015-10-14 22:20:24
467,2015-10-14 22:34:08,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1623904677859266/int_phab to review.
",facebook-github-bot,2015-10-14 22:20:24
466,2015-10-14 14:16:07,"It seems to me that implementing pagination through a connection with both a previous and a next button is currently rather difficult to implement. (I want the previous/next buttons to be hidden or disabled when there's no previous or next page). I finallly managed to implement it, it's pretty hairy:
- am I making things too complicated?  I'm a noob. But in that case there needs to be documentation or an example that shows the easy way.
- is this really a supported use case? If not, the documentation needs to make that very clear. You'd _think_ it is a supported use case, though.

My initial attempt was to define a query along these lines:

<S_CODE_TOKEN>

The idea was to set the variables to something like this when clicking previous:

<S_CODE_TOKEN>

and when going next, do this:

<S_CODE_TOKEN>

(incidentally, `pageInfo.startCursor` and `pageInfo.endCursor` don't appear here: https://facebook.github.io/relay/graphql/connections.htm Should they?)

This failed because the compiler complains when I include those variables at the same time.

So then I split up the code to please the compiler:

<S_CODE_TOKEN>

Note that I noticed that Relay when you pass in a variable of `null` in these cases _does_ omit the variables, so is the compiler currently too strict?

In the React code I then have to decide whether to display `previousStories` or `nextStories` depending on whether there is any content there. 

Now I can paginate previously and next. I do get a ton of warnings I have no clue what to do about:

<S_CODE_TOKEN>

This may be related to #247, but it's a different warning...

I'm incidentally confused about the behavior of `@include` as even when `$wantPrevious` is false I still get a full-fledged 'previousStories' object, and I have to check `edges.length` to see whether it's really empty. I guess `@include` only applies to that field and other fields are loaded but empty? It's unclear to me what it's supposed to do from the GraphQl spec...

Now I get to the next problem: the previous button shouldn't do anything (or be greyed out or hidden) if you are at the start of the content, and the next button shouldn't do anything (or be greyed out or hidden) if you're at the end. But how does one accomplish this? At first sight you'd think `hasPreviousPage` and `hasNextPage` in `pageInfo` can do it, but they can't, as `hasPreviousPage` is always `false` if you're paginating forward and vice versa. That's not what is needed for this use case, but it is at the very least rather misleading. Here are these fields that given their names you think are perfect for this use case, but it's a lot more subtle than that.

So I came up with something like this:

<S_CODE_TOKEN>

but I was defeated again: `previousStory` gives back 1 story, even if I'm at the start of the array: the last item! This is because I actually pass in `$before` as `null` in the initial query, which means no `before` parameter is passed in at all, and this gives the last entry. The same problem occurs for `nextStory`.

So back to `pageInfo` again. Can I somehow get the information I want out of it after all? It turns out I can, but it's hairy:

<S_CODE_TOKEN>

so, if we just retrieved the previous page (`wantPrevious`), we know that `hasPreviousPage` has useful information, and we know there must be a next batch as we just came from there.

if we just retrieved the next page, then we know that `hasNextPage` has useful information, and we know
that there must be a previous page, _unless_ we're at the first page which we can detect by checking whether the `after` variable is the initial `null`, as at the first page we never have a previous page anyway.

This appears to work, but it requires at least two things that are rather non-obvious:
- conditionally get previous and next page based on additional `wantPrevious`/`wantNext` variables, and logic to check which we got in React component to show the stuff we really did get.
- hairy logic to determine whether we have a previous and next page.

So in conclusion, again: am I missing something obvious here in which documentation may be able to help)? Or is this an unsupported use case I should've stayed away from? Perhaps a Relay Connection only support expanding web pages with ""load more"", not a batch display. If so, documentation could point this out - in fact the whole API currently is misleading with its 'hasNextPage' naming too. Perhaps for next/previous batching some other connection-like facility (with limit/offset?) would be more useful.
",faassen,2015-11-02 19:48:57
466,2015-10-15 02:06:52,"@faassen Thanks for the question! You're definitely not missing something: Relay was designed to make infinite scroll easy and hence the API for this is relatively simple. However, windowed pagination hasn't been a common requirement so it currently requires more work (as you've seen). That said, we're open to suggestions and contributions to make this use-case simpler for developers. 

Do you need to be able to jump to arbitrary pages in the list (e.g. would you have links to non-adjacent pages such as ""...[2] [3] [4] ... [10]""), or would the user always page through from the beginning (via previous/next links)? 
",josephsavona,2015-11-02 19:48:57
466,2015-10-15 18:50:31,"@josephsavona Although not entirely connected with initial question above i jumped in because i see this going in the direction i need. So im adding my question.

What you asked:
`would you have links to non-adjacent pages such as ""...[2] [3] [4] ... [10]`

is exactly what i need. 
Our current graphql server is extended so that it can send back total count along with native `pageInfo` information. So i have `pageInfo.total` but Relay does not know it and completely ignores.

How can i pass it nicely to the component (i need total count to be able to render page numbers)?
",GrzegorzKaczan,2015-11-02 19:48:57
466,2015-10-15 19:51:52,"@GrzegorzKaczan Instead of putting the count on `pageInfo`, make it a field on the connection. E.g.

<S_CODE_TOKEN>
",josephsavona,2015-11-02 19:48:57
466,2015-10-15 20:32:26,"ha, thought so, thx.
Awesome stuff btw, hail Relay+GraphQL!
",GrzegorzKaczan,2015-11-02 19:48:57
466,2015-10-19 09:37:59,"This was is not driven by any concrete need, just my experimentation
with Relay. I was thinking about writing a Relay tutorial, but we'll
see. I'll get back to this in the end of my comment.

I wanted to report on my adventures first to give an impression of the
struggles of a beginner, but will try to distill this to some concrete
questions/suggestions.

My main point is that it would be better if _either_:
- The server clearly separates between a forward and backwards
  connections, with two connection types. The Relay JS API on the
  server could indicate which type with a flag for convenience. The
  current situation is _almost_ that due to the behavior of the
  compiler, but it's more misleading than it has to be.
- Relay fully supports bidirectional navigation for connection.

This may mean you actually want both: a forward type, a backward type and a
bidirectional type.

Now into the details:
- Hitting on the idea of using an `@include(if` to make this work is
  quite involved:
  - you need to realize `@include(if` is needed to solve this at all.
  - you need to create an extra variable to signal with a flag what
    branch you want to take. I cannot rely on the state of `after` and
    `before` because they start out with `null` in the first page.
  - you need to add additional logic to determine whether you got
    information in `previousStories` or `nextStories` (or use the
    state of the flag described above) and then return this information.
  - to enable/disable the `previous` and `next` buttons appropriately
    you also need to be aware of the state of the flag, and in additional you
    need to know whether you're on the first page. Far from obvious.
  
  If there were explicit unidirectional connection types then this
  solution would become more obvious.
- If you want to truly support bidirectional navigation then I think
  you need this:
  - not have the compiler forbid passing in all parameters at once. I believe
    the compiler only got more strict recently, but the previous
    behavior of runtime checks for impossible combinations is better for
    this use case (if there is a `first` then `last` should be `null`).
  - both `pageInfo.hasPreviousPage` and `pageInfo.hasNextPage` should
    always return useful values. The current naming invites you to
    think it will work, and only digging in the docs leads to find out
    that one of the two will always be `false` depending in which
    direction you are going.
- The `GraphQLRange currently only handles first(<count>),
  after(<cursor>).first(<count>), last(<count>),
  before(<cursor>).last(<count>), before(<cursor>).first(<count>), and
  after(<cursor>).last(<count>)` warnings that show up confuse me. I
  don't understand why I get them, or what I should do about them? It
  leads me to think perhaps my current solution even though it seems
  to work actually still has issues I don't understand, but is that
  true?
- It is suprising that I have to inspect
  `previousStories.edges.length` to see whether it's empty even though
  I signaled I don't want `previousStories` with `@include(if`. I
  expected `previousStories` to be `null` instead. I don't understand
  what is going on here.

You may be right in that in a bidirectional UI people generally want
to know something about the total and have the facility to link
directly to individual pages. Though I think forward/backward
pagination without such direct jumping does exist; maybe someone more
familiar with UI requirements can speak up. It may be we need four
connection types:
- forward
- backwards
- bidirectional
- bidirectional with total and direct page jumps.
",faassen,2015-11-02 19:48:57
466,2015-10-19 09:43:26,"Oh, another potential pagination feature that is needed sometimes is ""jump to start"" and ""jump to end"".
",faassen,2015-11-02 19:48:57
466,2015-11-02 19:48:57,"@faassen thanks again for bringing this up. I've opened a new issue that documents some of the main tasks to better support windowed pagination at #540 - let's continue discussion there now that the requirements are more well defined.
",josephsavona,2015-11-02 19:48:57
466,2015-11-10 05:05:27,"Thanks for posting this @faassen. I prototyped a version of my current app with traditional window-based paging. Realized that's not what Relay is after, and your post and this thread really helped distill all the issues for me. Much appreciated. 

I don't have hard requirements for how paging will work, so I will re-work the paging to be Relay style. But if I had a hard requirement from a boss or client, this would be a bummer!
",dminkovsky,2015-11-02 19:48:57
465,2015-10-14 12:41:59,"Its related to #464   but separate issue to ask question make sense.

If I use extra connection arguments to filter results - it can quickly result in many connections cached with different arguments. Which results in refetching all of them if I set fatQuery for that connection. 

Is there mechanism to control what gets cached? If it refetch all connection argument variants ever used in application lifetime once some mutation that affects this connection get used  -  it will result in huge queries.

And one more question: is possible to use arrays/objects as these extra connection arguments? Its handy for example to list tag ids to filter down images. It works ok.. but not sure how relay handle comparing these arguments - which could result in even more duplicate queries with same arguments.

Thanks a lot for your insights.
",jardakotesovec,2015-10-15 05:54:56
465,2015-10-15 01:23:43,"> If I use extra connection arguments to filter results - it can quickly result in many connections cached with different arguments.

As @yuzhi mentioned in #464, Relay currently caches the results for all combinations of connection arguments that have been fetched, which can sometimes grow quite large depending on the product's access patterns. In the future we will likely change this so that only connections that are actively viewed are refetched, and others are marked as stale.

> is [it] possible to use arrays/objects as these extra connection arguments?

Yup! The arguments defined in the connection spec must be as specified (e.g. `first: Int`), but otherwise custom arguments can be of arbitrary types!
",josephsavona,2015-10-15 05:54:56
465,2015-10-15 05:54:56,"@josephsavona Ok, thanks a lot for answer. Should I open issue with feature request for dirtying unused connections? I would like to track it somehow as its very important feature for our use case.
",jardakotesovec,2015-10-15 05:54:56
464,2015-10-14 12:31:48,"I am using connections with extra parameters to filter results. And it seems to go wrong on following circumstances. I will try to explain it well enough.. and if not sufficient I will work to reproduce it on some of the examples you have provided.

Lets say I have two independent components using images connection like this

<S_CODE_TOKEN>

and similarly second component:

<S_CODE_TOKEN>

For initial fetch relay asks separately for both, which is redundant (but still acceptable):

<S_CODE_TOKEN>

Next step is that I change custom parameter on second one to filter results, so I have

<S_CODE_TOKEN>

Relay generates query, which is also redundant (relay does not have reason to think that more results got available meanwhile since I have not done any mutation) and reason probably is that component 2 is inside component1 tree. I tried it other way round - changing custom arg for component2 and does not generate extra query, just one.

<S_CODE_TOKEN>

And finally I do mutation, which has fatQuery `viewer` and reloads everything and here is what relay reloads

<S_CODE_TOKEN>

I understand that its caching results, therefore it still interested in `images(first:50)`, but the `after` variant should not be there I think.

Using relay `0.4.0` and babel plugin `0.3.0`.
",jardakotesovec,2015-10-15 08:44:39
464,2015-10-14 14:09:00,"One more detail that actually caught my attention at first. If I do following sequence 

start with

<S_CODE_TOKEN>

1) change to

<S_CODE_TOKEN>

2) change back to

<S_CODE_TOKEN>

3) send mutation with viewer in fat query to reload everything, relay requests:

<S_CODE_TOKEN>

And on client I get

<S_CODE_TOKEN>

Maybe because the `after` variant get processed first, it will cause this warning, but thats guessing. In my previous example I did not get this warning. 
",jardakotesovec,2015-10-15 08:44:39
464,2015-10-14 20:55:17,"Thanks you for your questions! I'll try to go through them one by one. 

> For initial fetch relay asks separately for both, which is redundant (but still acceptable):
> 
> <S_CODE_TOKEN>

Relay doesn't merge these because each of those connections might ask for very different set of fields and fragments. We also don't want to just put all of the fields and fragments under `image(first:100)` because `image(first:50)` could be asking for a much larger set of fields, where it would be inefficient to fetch them for the `first:100`. Because there are a lot of factors that can go in to whether we should merge those two fields, Relay doesn't try to be smart in combining these fields.

> Relay generates query, which is also redundant (relay does not have reason to think that more results got available meanwhile since I have not done any mutation) and reason probably is that component 2 is inside component1 tree. I tried it other way round - changing custom arg for component2 and does not generate extra query, just one.
> 
> <S_CODE_TOKEN>

It shouldn't do that if there are no more edges. My best bet is to check your `pageInfo`. It should return ""hasNextPage: false"" on the first time you queried for `first:100`. When that happens, Relay will know to stop trying to fetch for more data from this connection. If it doesn't return that, Relay can't be sure there aren't any more items and tries to fetch more the next time around. If the `hasNextPage:false` and you are still seeing the second `images(after:""YXJyYXljb25uZWN0aW9uOjE="",first:98)` query, that would be a bug. Definitely report it to us and we would greatly appreciate repro steps.

> And finally I do mutation, which has fatQuery viewer and reloads everything and here is what relay reloads

We currently fetch based on the fragments that was cached, which means having a lot of ranges can be inefficient. In the future, we might look into dirtying cached data and only fetch data needed for the current view to make this step a but more efficient.

> Maybe because the `after` variant get processed first, it will cause this warning, but thats guessing. 

Yup, you are 100% right. Relay can't handle connection fields with `cursors` we haven't seen before. This shouldn't be a problem anymore if we dirty the data and just fetch for data based on the current view requirements.

Let me know if I missed anything or if any part is confusing.
",yuzhi,2015-10-15 08:44:39
464,2015-10-15 08:44:39,"> It shouldn't do that if there are no more edges. My best bet is to check your pageInfo. It should return ""hasNextPage: false"" on the first time you queried for first:100. When that happens, Relay will know to stop trying to fetch for more data from this connection. If it doesn't return that, Relay can't be sure there aren't any more items and tries to fetch more the next time around. If the hasNextPage:false and you are still seeing the second images(after:""YXJyYXljb25uZWN0aW9uOjE="",first:98) query, that would be a bug. Definitely report it to us and we would greatly appreciate repro steps.

That was great catch. You were right, it was our bug with `hasNextPage`. So fixing that removed the extra queries with `after`, so also the warning `GraphQLRange cannot find a segment that has the cursor: YXJyYXljb25uZWN0aW9uOjE=`  disappeared.

Now I can only hope that the cache dirtying functionality comes along in foreseeable future :-).  And maybe #233 could be temporary workaround to occasionally reset the cache for us as it might land sooner.

Thanks a lot for detailed answers.
",jardakotesovec,2015-10-15 08:44:39
463,2015-10-14 02:25:46,,josephsavona,2016-02-22 07:16:20
463,2015-10-14 03:14:01,"@facebook-github-bot import
",josephsavona,2016-02-22 07:16:20
463,2015-10-14 03:23:12,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1490733934556202/int_phab to review.
",facebook-github-bot,2016-02-22 07:16:20
462,2015-10-14 00:46:34,,yungsters,2015-10-14 00:55:24
462,2015-10-14 00:46:56,"@facebook-github-bot import
",yungsters,2015-10-14 00:55:24
462,2015-10-14 00:47:42,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/566535336836242/int_phab to review.
",facebook-github-bot,2015-10-14 00:55:24
461,2015-10-13 19:18:34,,colllin,2015-10-14 18:20:26
461,2015-10-13 19:28:43,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-10-14 18:20:26
461,2015-10-13 19:52:09,"Good catch and thanks for sending a fix! Happy to pull this in after you sign the license agreement.
",kassens,2015-10-14 18:20:26
461,2015-10-14 03:44:29,"Signed.  Thank you!
",colllin,2015-10-14 18:20:26
461,2015-10-14 03:46:40,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-10-14 18:20:26
461,2015-10-14 16:44:07,"@facebook-github-bot import
",kassens,2015-10-14 18:20:26
461,2015-10-14 16:56:23,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/492861630871964/int_phab to review.
",facebook-github-bot,2015-10-14 18:20:26
460,2015-10-13 18:48:51,"This fixes a few lint issues and also uses a single `.eslintrc` to prevent duplication and divergence of lint rules.

Follow up for concerns raised in #453.
",kassens,2015-10-14 17:00:28
460,2015-10-13 18:49:50," 👍
",zpao,2015-10-14 17:00:28
460,2015-10-13 18:51:49,"@facebook-github-bot import
",kassens,2015-10-14 17:00:28
460,2015-10-13 19:12:23,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/922561211151454/int_phab to review.
",facebook-github-bot,2015-10-14 17:00:28
459,2015-10-13 13:06:17,"Recently I started  working on relay with graphql. I want to display list of users but it always displaying single user.

When i print user in console it display multiple user but my container always displaying  single user , I am using mongodb as database.

 let me know any issues on that code please suggest to resolve this issue

Here is my DB schema 

<S_CODE_TOKEN>

Here is my query to fetch data  from data base

<S_CODE_TOKEN>

Here is my graphql query

<S_CODE_TOKEN>

Here is my Component code

<S_CODE_TOKEN>

Here is my container code

<S_CODE_TOKEN>
",varmab,2015-10-15 05:10:30
459,2015-10-13 13:09:45,"I am also facing the  same problem, please let me know if  you got any solution. Thank you 
",mahesh08,2015-10-15 05:10:30
459,2015-10-14 01:56:10,"see #112 for more.
",filod,2015-10-15 05:10:30
459,2015-10-14 04:07:55,"Your code is unformatted.  Please add triple backticks around it.

[The answer to your question can be found on stackoverflow](http://stackoverflow.com/questions/32491117/how-to-get-relayjs-to-understand-that-a-response-from-graphql-is-an-array-of-ite).
",nickretallack,2015-10-15 05:10:30
459,2015-10-15 05:10:30,"@varmab I hope you don't mind that I took the liberty to format your code for you.

If `Application` is being passed into `RelayRootContainer`, then you should take a look at #112 (which also suggests a workaround) as @mahesh08  mentioned.

If `Application` is being composed by another component fragment, take a look at the Stack Overflow answer as @nickretallack suggested.
",yungsters,2015-10-15 05:10:30
458,2015-10-13 10:19:46,"When i use union type along with  `Connection`  or  `GraphQLList`, i got wired behevior when **reload** component (like jump back use `react-router-relay`), relay will issue some queries like 

<S_CODE_TOKEN>

`node QW5zd2VyVm9pY2VCbG9jazo5Mjox` is actually a `AnswerVoiceBlock`, seems relay are trying to find  which type of this node is (or diffing against cached data)? how would i prevent these queries?

Did i miss something ? or this is a bug of relay ?
",filod,2015-11-02 19:37:34
458,2015-10-15 05:05:28,"Hmm... these queries are not bugs, but they are indeed under-optimized for the case where we already know the concrete type of a node. I can think of two potential optimizations here:
1. We should never have to re-fetch the `__typename` of a record which a known concrete type.
2. We should omit fragments that are conditional on concrete types if that concrete type does not match the concrete type of the node we are fetching.

Regarding the issue title, this should not be specific to connections, right?
",yungsters,2015-11-02 19:37:34
458,2015-10-15 20:12:55,"This is a great idea. Until recently Relay didn't record the concrete type of records but now that it does `diffRelayQuery` can remove fragments on types that don't match.
",josephsavona,2015-11-02 19:37:34
458,2015-11-02 19:37:34,"merging into #539 
",josephsavona,2015-11-02 19:37:34
457,2015-10-13 08:28:40,"I wrote a Relay app and I noticed that after loading a list of widgets, if I visited a page for just a single widget that queried for exactly the same fields that were already known from the list, Relay would still issue a new query.

Then I switched from `query { widget( id: $id ) }` to `query { node( id: $id ) }` in my route and it stopped doing the extra queries.  Is there something special about `node`?  `widgetType` implements the `nodeInterface` so shouldn't its id be treated the same?  Or is there some way I need to inform Relay that I'm querying for something by its id?  Or should I just not do that and always use `node` queries instead?
",nickretallack,2015-10-13 16:29:44
457,2015-10-13 14:13:51,"> Is there something special about `node`?

The Relay GraphQL spec does declare `node` to be special. As it is currently implemented, all object refetching [happens](http://facebook.github.io/relay/docs/graphql-object-identification.html) through the `node` field, so implementing the [Node Interface](http://facebook.github.io/relay/graphql/objectidentification.htm#sec-Node-Interface) is a necessary but not sufficient condition to avoid re-querying.

We have an internal data structure called the `rootCallMap` which enables us to associate fields like `widget(id: $id)` with an underlying, normalized record, but (disclaimer!) I am not super familiar with it. My understanding is that we update it when writing the results for a query like `widget(id: $id) { something}`, but the _first_ time we see such a query, no mapping has been set up yet and so we can't know that we already have the data, even though we may have fetched it via a different field like `widgets` previously. (If this is egregiously wrong, please correct me @yuzhi, @josephsavona...)

I'd recommend for now sticking with `query { node( id: $id ) }` in your route.
",wincent,2015-10-13 16:29:44
457,2015-10-13 14:52:26,"What @wincent said - for now, use `node` to get efficient refetches. 

@steveluscher is working on supporting a wider variety of root calls (fields) including connections and I believe non-`node` ""identifying"" fields such as fields of the pattern `foo(id: $id)`.
",josephsavona,2015-10-13 16:29:44
457,2015-10-13 16:29:43,"I'm going to close this out for now. If you want to follow along with @steveluscher's work you can subscribe to #112.
",wincent,2015-10-13 16:29:44
456,2015-10-13 08:21:59,"I tried to write [a more complex query in my route](https://gist.github.com/nickretallack/66ebbfdc920393bcf649).  It didn't work.

> Invariant Violation: Relay.QL: Expected query `viewer` to be empty. For example, use `node(id: $id)`, not `node(id: $id) { ... }`

Can these queries only go one level deep?  Why is this restricted?  I already have to give up one level to get out of the one-argument-only restriction or to use connections, which makes these routes pretty useless.  The only time I wouldn't want it to be exactly `query {viewer}` is if I wanted it to be `query { node( id: $id ) }` instead, because that's the only way I've seen to get Relay to look at its caches.

Anyway, it would be nice if I could put something more complex in the route here.  Especially when I'm using react-router-relay.  Otherwise I need to create a bunch of wrapper components just to pick up the slack because the queries argument won't do anything for me.
",nickretallack,2015-11-02 20:31:43
456,2015-10-13 16:26:59,"> which makes these routes pretty useless.

The essential (and only) function that they serve right now is to anchor a `Relay.Container`'s relatively-specified query fragments at a concrete position in the tree.

The beauty of containers is that they can be composed anywhere, and they don't need to ""know"" anything about where they will be placed. But we need a route (or ""query config"" if you prefer) to turn these independent fragments that don't make sense in isolation into something that we can actually send to GraphQL to be executed.
",wincent,2015-11-02 20:31:43
456,2015-10-14 04:00:09,"If `Relay.Container` is so powerful, why do we need `Relay.Route`?

Instead of writing a container that depends on a route, like:

<S_CODE_TOKEN>

What if we could write a container that can stand on its own, like this:

<S_CODE_TOKEN>

or like this:

<S_CODE_TOKEN>

My first experiences with Relay were very frustrating, mostly because I couldn't figure out how I was supposed to split up my GraphQL query between a `Relay.Container` and a `Relay.Route`.  Now that I know how limited `Relay.Route` is, I think it doesn't deserve to exist.  It's a piece of boilerplate that only serves to make the API more complicated.  Its functionality should be merged into `Relay.Container`.  Then `Relay.Container` components could stand on their own, which would make examples much simpler.

There is a real lack of testable examples in the documentation right now, partly because you have to understand how to assemble a `React.Component` in a `Relay.Container` with a `Relay.Route` in a `Relay.RootContainer` before you can do anything.  What if all you had to do was put a `React.Component` in a `Relay.Container` and be done with it?
",nickretallack,2015-11-02 20:31:43
456,2015-10-15 04:53:30,"@nickretallack You are absolutely right, and I think there is a good chance we //will// get rid of `Relay.Route`. Routing will still be important to most applications, but the query configuration portion is kind of unnecessary.

There are a few things currently in progress that are getting us closer to this:
- We're handicapping the current `Relay.Route` (as you can see with the existence of `RelayQueryConfig`). Routing does not need to be strictly tied to Relay in any particular way, as long as you can supply parameters from the router into queries.
- Relay currently special case fields on the root type in order to reduce redundant fetching of nodes. @steveluscher is working on generalizing this special case so that it can _eventually_ be applied to not only root fields, but arbitrary fields. (#112)
- Finally, Relay needs to support fragments on the root type in containers.
",yungsters,2015-11-02 20:31:43
456,2015-10-15 05:39:13,"Cool.  I hope you do make `Relay.Container` able to stand on its own eventually.  What's `RelayQueryConfig`?  Also, what fields does Relay special case?  Just `nodes`?  I tried creating a field that was exactly like `nodes` but was named something else, but it didn't get the same caching behavior.
",nickretallack,2015-11-02 20:31:43
456,2015-10-15 05:44:09,"[`RelayQueryConfig`](https://github.com/facebook/relay/blob/4e671a316bbb09dee0fcc14aa414f0d31076948f/src/query-config/RelayQueryConfig.js#L23-L28) is a decomposition of `Relay.Route` in an effort to remove routing from the Relay vocabulary. It's still a work in progress. :-)

Relay special cases `nodes`, but it also special cases other root fields. #112 goes into more details. Of particular interest to you is the **Rationale** for why we are where we are, and the **Problem** which demonstrates the special cases. If your custom non-`nodes` query conforms to one of the three outlined types of root fields, you should get similar caching behavior to `nodes`.
",yungsters,2015-11-02 20:31:43
456,2015-10-15 05:59:11,"Oh.  Maybe I'm mistaken, but when I tried it that did not work.  If I fetched a list of things, then tried to fetch the individual thing through nodes it would work without performing another query, while fetching it through some other field it would.  Maybe you need to do something special to annotate this field as cacheable?
",nickretallack,2015-11-02 20:31:43
456,2015-11-02 20:31:43,"The main issues discussed here are covered by #112 (arbitrary root fiels) and #503 (replacing routes with lighter-weight query configs), so I'm going to close this out. 
",josephsavona,2015-11-02 20:31:43
456,2015-11-10 23:24:07,"Ran into this same issue before realizing I should have checked here a long time ago!

Lo and behold.

Thing about this issue is that the documentation encourages you to think that `Route` can compose its containers fragment deeper than one level down. 

For example, on the [Routes guide](https://facebook.github.io/relay/docs/guides-routes.html#queries-vs-fragments), you get this whole thing about how you can make a `ProfilePicture` `Container` and then use compose it with various root queries:

<S_CODE_TOKEN>

> However, the fragment could also fetch each of user 123's friends' profile photos:

<S_CODE_TOKEN>

No mention in the [Route API reference](https://facebook.github.io/relay/docs/api-reference-relay-route.html#queries-static-property) either.

Given the the docs stress this so hard, I was so fully sold on this that I wasted at least an hour trying to figure out what was wrong with my code!

Not posting on #112 or #503 to avoid polluting those issues, but would be great if `Route` allowed complex leaves at any depth that composed fragments from its paired container. 
",dminkovsky,2015-11-02 20:31:43
456,2015-11-10 23:26:41,"I mean, if `Route`s indeed only allow you get one one level into the graph before deferring to `Container` fragments, then `Containers` are not actually reusable because you have to pick up where the one-level-deep `Route` leaves off. Right?
",dminkovsky,2015-11-02 20:31:43
456,2015-11-10 23:29:45,"@dminkovsky I'm sorry to hear that this was frustrating. You raise good points about the tradeoff of nesting fields in the query vs container.

Rather than allow more nesting within route queries, we'd like to go in the opposite direction: eliminating the need for routes & their queries, and instead allow express data dependencies solely via containers. @steveluscher is building the prerequisite to this in #112, which adds support for arbitrary root fields. 
",josephsavona,2015-11-02 20:31:43
456,2015-11-10 23:36:32,"@josephsavona Oh no, please—thank you for Relay in general and your work here on GitHub. Really appreciate both! Was less expressing frustration and more providing feedback regarding confusion caused by the docs.

If you are planning to eliminate routes and their queries, then all compositing will be done via containers? Got to read #112... :)

Thanks again
",dminkovsky,2015-11-02 20:31:43
456,2015-11-10 23:39:23,"I mean, that `UserProfilePhoto` example from the docs is really cool and it would be nice if it was possible to compose in that manner, one way or another.
",dminkovsky,2015-11-02 20:31:43
455,2015-10-13 07:05:57,"Running the examples I run into this problem.
![image](https://cloud.githubusercontent.com/assets/4157749/10447980/8b0ea570-7189-11e5-8876-994a32961342.png)
",tothandras,2015-10-13 07:10:33
455,2015-10-13 07:10:33,"Thanks for the report!

Should be fixed by https://github.com/facebook/relay/pull/453
",wincent,2015-10-13 07:10:33
455,2015-10-13 07:13:45,"@wincent Thank you!
",tothandras,2015-10-13 07:10:33
454,2015-10-13 01:25:06,"Hello
It seems that having a local plugin in the `.babelrc` breaks babel-node.

This is my `.babelrc` file:

<S_CODE_TOKEN>

And this is my local `./build/babelRelayPlugin`:

<S_CODE_TOKEN>

This results in the following error:

<S_CODE_TOKEN>

The only way I found to fix this is moving my local `babel-relay-plugin` into the `node_modules` folder and make it like being a complete package. That works but I would rather be able to use local plugins in my `.babelrc` file.

Any ideas how to fix this?

Thank you
Bernd
",BerndWessels,2015-10-13 03:22:12
454,2015-10-13 03:22:12,"@BerndWessels Thanks for reporting this. This appears to be an issue with how babel handles plugin resolution when configured via `.babelrc`. There's an issue at babel/babel#2443 which gets at the root of this problem, so I'm going to close this issue.
",josephsavona,2015-10-13 03:22:12
454,2015-10-13 03:23:46,"@BerndWessels For now, we'd recommend using the workaround you described of creating a local package for the plugin in `node_modules` (or placing it someplace else and using `npm link ...` to link it into node_modules).
",josephsavona,2015-10-13 03:22:12
454,2015-10-13 03:29:20,"Agreed that this looks like https://github.com/babel/babel/issues/2443
",wincent,2015-10-13 03:22:12
454,2015-10-13 19:47:39,"OK, thank you.

Until this issue is fixed you can use this [babel-relay-plugin-loader](https://github.com/BerndWessels/babel-relay-plugin-loader) I made to get around this particular problem.

Cheers
Bernd
",BerndWessels,2015-10-13 03:22:12
454,2015-10-13 23:03:56,"Nice hack @BerndWessels!
",wincent,2015-10-13 03:22:12
454,2016-07-13 09:46:35,"New URL to the issue. https://phabricator.babeljs.io/T2474, still open BTW
",tim-field,2015-10-13 03:22:12
453,2015-10-12 20:51:24,"Test Plan:
For every example `npm install` and `npm start` then open it in a browser and
see it render.
",kassens,2015-10-13 18:48:24
453,2015-10-12 20:52:03,"@facebook-github-bot import
",kassens,2015-10-13 18:48:24
453,2015-10-12 21:13:47,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/393582277519735/int_phab to review.
",facebook-github-bot,2015-10-13 18:48:24
453,2015-10-12 22:45:50,"Dude I removed those relay import line because it is unused var. Lint was showing that var relay is not used so I removed it.
",akashnimare,2015-10-13 18:48:24
453,2015-10-12 23:05:25,"cc @zpao @spicyj 

I assume this is an implicit dependency due to JSX? Is this something we could fix in `eslint-plugin-react`?
",yungsters,2015-10-13 18:48:24
453,2015-10-12 23:07:10,"Yeah, you're supposed to import React. I guess that could be a nice lint rule, though in some cases React will be a global so you wouldn't want to warn.
",spicyj,2015-10-13 18:48:24
453,2015-10-13 01:43:15,"> though in some cases React will be a global so you wouldn't want to warn.

But in that case, we should use the existing ESLint mechanisms for declaring `React` as a global, right?

---

Regardless, @kassens :+1: 
",yungsters,2015-10-13 18:48:24
453,2015-10-13 01:44:54,"Yep. You'll want to enable https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-uses-react.md
",zpao,2015-10-13 18:48:24
453,2015-10-13 01:46:51,"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md too.
",spicyj,2015-10-13 18:48:24
453,2015-10-13 01:46:56,"Ahh, nice.

@kassens Can you incorporate @zpao's suggestion so that this pull request does not re-introduce the lint errors?
",yungsters,2015-10-13 18:48:24
452,2015-10-12 19:59:28,"Not sure why this worked internally but not in OSS, but suspect it has to do with the jest version (?).
",josephsavona,2015-10-12 20:56:36
452,2015-10-12 19:59:33,"@facebook-github-bot import
",josephsavona,2015-10-12 20:56:36
452,2015-10-12 20:01:04,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1531172003840555/int_phab to review.
",facebook-github-bot,2015-10-12 20:56:36
451,2015-10-12 12:55:45,"1. Some of the relative paths mentioned in the tutorial are not accurate. This fixes those affected paths.
2. Explicitly import `react-relay` in the mutation section.
3. Add the `key` attribute to each cell created by `renderGameBoard`. The key attribute already exist in the example directory.
",yihangho,2015-10-12 16:50:31
451,2015-10-12 16:13:54,"Thanks, @yihangho.

@facebook-github-bot import
",wincent,2015-10-12 16:50:31
451,2015-10-12 16:20:44,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1724208554473669/int_phab to review.
",facebook-github-bot,2015-10-12 16:50:31
451,2015-10-13 01:38:43,"Most welcomed. I assume I do not need to update the gh-pages branch and you guys will take care of that?
",yihangho,2015-10-12 16:50:31
451,2015-10-13 03:24:15,"That's right. It'll go out next time we rebuild.
On Mon, Oct 12, 2015 at 6:38 PM Yihang Ho notifications@github.com wrote:

> Most welcomed. I assume I do not need to update the gh-pages branch and
> you guys will take care of that?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/pull/451#issuecomment-147570047.
",wincent,2015-10-12 16:50:31
451,2015-10-13 03:33:36,"Awesome! :+1: 
",yihangho,2015-10-12 16:50:31
450,2015-10-12 04:29:07,"We should track the latest released version of React, to avoid this kind
of clash with other packages that want the latest React:

<S_CODE_TOKEN>

(Either this, or we should loosen our requirements.)
",wincent,2015-10-13 07:10:33
450,2015-10-12 13:06:05,"+1
",pasviegas,2015-10-13 07:10:33
450,2015-10-12 19:37:57,":+1: 
",yungsters,2015-10-13 07:10:33
450,2015-10-12 22:09:55,"@facebook-github-bot import
",wincent,2015-10-13 07:10:33
450,2015-10-12 22:18:17,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/488038028034104/int_phab to review.
",facebook-github-bot,2015-10-13 07:10:33
450,2015-10-13 06:06:17,"It would be great if new relay version get released soon (with ^0.14 dependency).  I am still on relay 0.1.1 because in 0.2 was introduced bug that was fixed few hours after last release 0.3.2.

So if there is no good reason to hold release, it would be awesome to see version bump. There is probably several bug fixes people are waiting to be released.
",jardakotesovec,2015-10-13 07:10:33
450,2015-10-13 06:15:41,"> So if there is no good reason to hold release, it would be awesome to see version bump. There is probably several bug fixes people are waiting to be released.

:+1: 
",chandu0101,2015-10-13 07:10:33
450,2015-10-13 06:18:14,"I will publish a new version tomorrow after a couple more fixes (including this one) get in! Thanks for your patience.
",yungsters,2015-10-13 07:10:33
450,2015-10-14 01:35:23,"@chandu0101 @jardakotesovec Just published react-relay@0.4.0 and babel-relay-plugin@0.3.0.
",yungsters,2015-10-13 07:10:33
450,2015-10-14 02:59:37,"thank you :) :+1: 
",chandu0101,2015-10-13 07:10:33
449,2015-10-10 18:59:54,"Despite the Object Identification documentation, there has been some confusion in the community about whether the `node` field should be at the root or nested inside `Viewer`. This adds a validation check to the babel relay plugin to reject non-root `node(id: ...)` fields.
",josephsavona,2015-10-13 15:00:45
449,2015-10-12 16:19:19,"This is probably worth it, to avoid confusion.

I guess if I ever wanted to re-use `node(id: $id)` as field name deep down in the tree (probably a terrible idea) I'd have to come up with another name, or at least a different/additional argument, which seems fair.
",wincent,2015-10-13 15:00:45
449,2015-10-12 17:06:55,"@facebook-github-bot import
",josephsavona,2015-10-13 15:00:45
449,2015-10-12 17:15:22,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/428362150700233/int_phab to review.
",facebook-github-bot,2015-10-13 15:00:45
448,2015-10-09 22:40:28,"fixes https://github.com/facebook/relay/issues/445
",chandu0101,2015-10-12 17:40:36
448,2015-10-09 22:47:14,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-10-12 17:40:36
448,2015-10-09 23:03:49,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-10-12 17:40:36
448,2015-10-10 00:26:55,"@facebook-github-bot import
",josephsavona,2015-10-12 17:40:36
448,2015-10-10 00:33:26,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/429529403911849/int_phab to review.
",facebook-github-bot,2015-10-12 17:40:36
447,2015-10-09 13:08:05,"Following on from my StackOverflow question: http://stackoverflow.com/questions/33001632/patterns-for-transient-user-notifications-with-relay

I have a need to display success/error/warning/info messages in my UI, with text provided by the server. They don't get stored in a database, and don't get marked as read, they're simply shown once and then dismissed.

If there is an idiomatic way of handling this use case, it'd be useful to know what it is. It doesn't feel like this notification should live in the GraphQL schema, because it's never accessible afterwards. Conceptually it feels like metadata that's returned with a response, but I don't know how i'd achieve that. I'm also not sure if this is a GraphQL issue or a Relay issue.
",AndrewIngram,2015-10-09 15:53:35
447,2015-10-09 15:53:08,"Answered on SO - closing to move discussion there.
",josephsavona,2015-10-09 15:53:35
447,2015-10-12 12:15:09,"@josephsavona any chance on elaborating on SO? I've been working on this for a day now, and don't feel any closer to getting it working.
",AndrewIngram,2015-10-09 15:53:35
446,2015-10-09 12:43:32,"After clean todo example installation i got the following error in console log: ""Uncaught TypeError: GraphQL.QueryFragment is not a function"". The app is not showing. 
",imasl,2015-10-09 17:02:55
446,2015-10-09 15:15:49,"Thanks for reporting, we're looking into it.
",josephsavona,2015-10-09 17:02:55
446,2015-10-09 17:02:55,"Fixed in 4e671a316bbb09dee0fcc14aa414f0d31076948f. Thank you!
",steveluscher,2015-10-09 17:02:55
445,2015-10-09 10:28:14,"Hi,
      Scala.js-relay mutation queries not working because of this reason https://github.com/facebook/graphql/issues/102

i don't see any activity from graphql side may be it requires more work!, In my understanding graphql should allow javascript valid identifiers as its not the case now and scala.js can't do anything either so is it possible to allow option( static queryName) to define mutation query names ? or can we modify query name to match graphql ASCII set before sending  ? 

please let me know if either of cases can possible ?  , i am happy to send a PR!
",chandu0101,2015-10-12 17:40:36
445,2015-10-09 15:42:11,"Mutations can specify a custom name with `Relay.QL`mutation YourNameHere { ... }`` - does this help?
",josephsavona,2015-10-12 17:40:36
445,2015-10-09 21:20:27,"@josephsavona is the code you referring to the one from the `getMutation` method like in this example? 

<S_CODE_TOKEN>

if yes, then this does not solve the problem. 
@chandu0101 is talking about the mutation name that is actually used in the query that is send to the graphql server. 

As an example from scala.js relay version we developed, the query looks like this, even after applying the change you suggested:

<S_CODE_TOKEN>

as you can see in scala.js it still has a weird name, that indicates me that the name that is used in the query is generated of the name from the actual mutation instance in the global namespace (just a guess). In scala.js this must be unique over the whole javascript libraries that are used, thats why the package name is used. If your suggestion would affect the name used in the query i guess it should be reflected somewhere in this path even in scala.js. but i'm not 100% certain.
",xsistens,2015-10-12 17:40:36
445,2015-10-09 22:05:46,"@xsistens Thanks for providing more detail, I see what's happening.

It seems reasonable to use the name of the mutation (from the `Relay.QL`mutation YourName {...}``) as the name that is sent to the server. Note that `babel-relay-plugin` defaults to using the filename when no mutation name is provided in the query, so the default behavior shouldn't change (we should confirm). The change would be [in RelayMutationTransaction](https://github.com/facebook/relay/blob/c67358894c7c48588c48fdd56e726b053e6e5d64/src/mutation/RelayMutationTransaction.js#L197-L198) - we can replace `this._mutation.constructor.name` with `this._getMutationNode().name`. Want to submit a PR? ;-)
",josephsavona,2015-10-12 17:40:36
445,2015-10-09 22:43:15,"@josephsavona  thanks alot for pointer , i just opened a PR https://github.com/facebook/relay/pull/448 please review it , i can confirm that scalajs mutations working fine now :+1: 
",chandu0101,2015-10-12 17:40:36
444,2015-10-09 07:36:50,"I know that in docs it says that RANGE_ADD add new edge to connection, so I assume its only for connections (with edges and node).

So want to basically ask if there is some other option how to add item to normal graphql list without refetching the whole list or if its planned.

Thanks.
",jardakotesovec,
444,2015-10-09 15:46:56,"@jardakotesovec Currently append/prepend/remove operations are only supported on connections and not for plain lists. In general connections are more powerful and we recommend using when designing schemas. I'll mark this as an enhancement - we'll accept contributions for similar operators for lists (e.g. append/prepend/remove).
",josephsavona,
444,2015-10-12 18:50:00,"Cross-referencing: I made [a post on SO](http://stackoverflow.com/questions/33088119/when-should-i-use-a-relay-graphql-connection-and-when-a-plain-list/33088120#33088120) about the differences between connections and lists, with a link back here to this feature request.
",wincent,
444,2015-10-13 09:28:37,"The other issue with requiring connections is that you have to do a lot of boilerplate to model the types, edges and connections. Sometimes the items in an array may not even have a meaningful ID, so you have to somehow invent one. It's actually quite a lot of hoops to jump through just to be able to add an item to a simple array.
",AndrewIngram,
444,2015-10-13 10:33:34,"I use connections only where I expect long lists with pagination, but for other cases I also prefer to avoid boilerplate. 

And since there is no reason not having these fine grained mutations also for lists, we just need someone amazing, who will implement it :-).
",jardakotesovec,
444,2015-10-15 00:59:44,"For posterity, the only way to deal with plural fields (i.e. a field of type `GraphQLList`) is to refetch the entire field which understandably sucks.
",yungsters,
444,2016-03-01 12:01:33,"@wincent Maybe this issue also could be part of the #538? Just in case you have missed that.
",jardakotesovec,
444,2016-03-04 00:23:54,"Yeah, it's definitely related, @jardakotesovec, but I don't think we'll get to any list changes as part of that work, except indirectly (ie. we won't change lists to have connection-like features, but we might be able to make connections as easy as working with lists). Let's this keep this open until the dust settles from that work; we can close it if necessary once we know how things end up.
",wincent,
444,2016-03-29 10:38:13,"Is it possible to craft a `getOptimisticResponse` for `GraphQLList` based mutations? Brief experimentation with appending my new item onto the existing Relay array results in errors with client ids.
",Rodeoclash,
444,2016-12-22 16:42:38,"Thanks for filing this - this was great input as we developed the new core, which supports this feature (#1369).",josephsavona,
443,2015-10-08 21:35:14,"`babel-relay-plugin` [still depends on `graphql` `0.2.4`](https://github.com/facebook/relay/blob/2a86be3e71cdc6511fa994e3de539f72070da1b4/scripts/babel-relay-plugin/package.json#L20)

I'm having some trouble using some recently introduced features like https://github.com/facebook/graphql/pull/100 and I'm thinking this might be the issue.

I'd be happy to PR with an updated dependency, unless there's some things that need to be updated in the plugin to work with `^0.4.7`
",aweary,2015-10-09 15:55:56
443,2015-10-09 15:55:56,"Thanks for the reminder! There are a few things we'd like to test and possibly add (such as the type of fragments you mentioned) during the upgrade, we got this one ;-)
",josephsavona,2015-10-09 15:55:56
443,2015-10-09 15:57:53,"Cool, thank you! :smile: any estimate on when those changes might be made/published?
",aweary,2015-10-09 15:55:56
442,2015-10-08 20:55:00,"Summary:
Instead of mutating `state.opts.extra`, this constructs a single `RQLTransformer` per plugin. (Yay, less global mutable state.)

Test Plan:

<S_CODE_TOKEN>

Also, verify that Relay Playground still works.
",yungsters,2015-10-09 16:40:24
442,2015-10-08 20:55:16,"@facebook-github-bot import
",yungsters,2015-10-09 16:40:24
442,2015-10-08 20:58:50,"@steveluscher FYI, this is why I was asking about the plugin w.r.t. Relay Playground.
",yungsters,2015-10-09 16:40:24
442,2015-10-08 21:00:52,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1500415036951807/int_phab to review.
",facebook-github-bot,2015-10-09 16:40:24
441,2015-10-08 18:34:38,,octref,2015-10-08 22:10:26
441,2015-10-08 19:08:14,"@facebook-github-bot import
",kassens,2015-10-08 22:10:26
441,2015-10-08 20:33:40,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1028373460535842/int_phab to review.
",facebook-github-bot,2015-10-08 22:10:26
441,2015-10-08 21:47:48,"@kassens 
There is a merge conflict because of https://github.com/facebook/relay/commit/89d62360d5133e43ec16500f1407d48792c6704b
",octref,2015-10-08 22:10:26
441,2015-10-08 23:32:46,"@octref: Yes, saw that, but was easy to resolve.
",kassens,2015-10-08 22:10:26
440,2015-10-08 16:53:09,"How to reproduce:

<S_CODE_TOKEN>

npm start:

<S_CODE_TOKEN>

The problem is mentioned [here](https://github.com/facebook/relay/issues/136), but it's there is no `bug` label on it
",droganov,2015-10-08 17:20:06
440,2015-10-08 17:20:06,"This is on our radar and being tracked at facebook/fbjs#60.
",josephsavona,2015-10-08 17:20:06
439,2015-10-08 16:52:25,"Fresh clone. For the todo example, run `npm i` and `npm start`. Here is the error message:

<S_CODE_TOKEN>

Manually installing `qs` and `deep-equal` solve the problem. But I guess that's not the way the problem should be resolved.

I'm using Node v4.1.2 and npm 2.14.4 if that matters.
",octref,2015-10-08 22:10:26
439,2015-10-08 17:18:13,"@octref These are dependencies of `react-router`, not Relay. I'd recommend filing an issue with `react-router`. Feel free to comment again here though if that doesn't solve the problem!
",josephsavona,2015-10-08 22:10:26
439,2015-10-08 17:38:13,"Yeah the problem is https://github.com/rackt/react-router/issues/2195. They are saying `rc3` will be released soon and it'll solve the problem. Should I keep an eye on it and submit a PR to update the dependencies for relay examples?
",octref,2015-10-08 22:10:26
439,2015-10-08 18:21:25,"@octref that would be great, thanks!
",josephsavona,2015-10-08 22:10:26
439,2015-10-08 18:29:27,"@octref: rc3 is released now. Want to send the PR for the fix?
",kassens,2015-10-08 22:10:26
439,2015-10-08 18:36:35,"@kassens 
Done and signed CLA.
",octref,2015-10-08 22:10:26
438,2015-10-08 15:36:14,"Minor typo fixes, already signed CLA. Thanks to all contribs for fantastic tool!
Line 49: ""dependecies"" => ""dependencies""
Line 58: ""apppropriate"" => ""appropriate""
",machineloop,2015-10-08 18:00:30
438,2015-10-08 16:39:08,"@facebook-github-bot import
",josephsavona,2015-10-08 18:00:30
438,2015-10-08 16:39:14,"@jabbrass  thanks!
",josephsavona,2015-10-08 18:00:30
438,2015-10-08 17:04:12,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/154825244864713/int_phab to review.
",facebook-github-bot,2015-10-08 18:00:30
437,2015-10-08 13:25:44,"I am using Relay with express-graphql and express-session. I would like to use the session in my GraphQL schema but unfortunately the `connect.sid` cookie is not passed in graphql requests. 
Should I create my own network layer for that or is this supposed to be built-in ? 
",benoitguigal,2015-10-08 15:02:24
437,2015-10-08 14:04:34,"The default network layer uses `fetch` which does not pass cookies by default, but can enable them by passing an init object for `fetch` when you're creating the network layer:

<S_CODE_TOKEN>
",fson,2015-10-08 15:02:24
437,2015-10-08 14:09:05,"Great ! Reading the documentation for injecting a network layer, it is not clear to me where this should be done. Just before declaring the RootContainer ? I am using react-router-relay so I wonder if I have control over the network layer or if I should look inside react-router-relay.
",benoitguigal,2015-10-08 15:02:24
437,2015-10-08 14:13:27,"@benoitguigal It shouldn't matter as long as you do it before rendering your app with `ReactDOM.render()`. You probably have some sort of entry point for your app where you set up the router and call `ReactDOM.render()` – do it there.
",fson,2015-10-08 15:02:24
437,2015-10-08 15:02:24,"Works like a charm, thanks a lot ! 
",benoitguigal,2015-10-08 15:02:24
437,2015-11-10 16:11:35,"@benoitguigal Can you give me an example how you pass the connect.sid to the requests? I am at the same point and don't know how to set the cookie.
",cpotemski,2015-10-08 15:02:24
437,2015-11-14 09:01:22,"@dasarma, just add:  

<S_CODE_TOKEN>

an then cookies will be passed. 
Then just follow documentation from `express-graphql`: 

<S_CODE_TOKEN>
",benoitguigal,2015-10-08 15:02:24
436,2015-10-07 21:07:55,"Since @josephsavona improved the API for react-router-relay, we can now make the index route be a lot less hacky/weird.
",taion,2015-10-08 20:20:25
436,2015-10-08 18:22:08,"@facebook-github-bot import
",josephsavona,2015-10-08 20:20:25
436,2015-10-08 18:32:55,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/401150963415633/int_phab to review.
",facebook-github-bot,2015-10-08 20:20:25
435,2015-10-07 11:42:07,"**First question:** Is it good idea to use connections instead of array even when I don't need pagination (I need fetch all data all the time)? I want to do this thing because mutations performed with connections are easier than with arrays (e.g. creating or deleting).

**Second question:** How can I get all data from connections using Relay? When I do something like this in Relay fragment

<S_CODE_TOKEN>

I'm getting error `Error: Invariant Violation: readRelayQueryData(): The field 'roles' is a connection. Fields 'edges' and 'pageInfo' cannot be fetched without a 'first', 'last' or 'find' argument.`. I know that I need pass some arguments to `roles`, but it's there any chance to get all data somehow?
",Nutelac,2015-10-12 18:46:40
435,2015-10-07 16:00:07,"1) How long is a typical array for this field?

2) Relay doesn't provide a method to get all items in a connection; it's assumed that there will be a lot. You can use `roles(first: $someLargeNumber)` as a workaround to get all items.
",josephsavona,2015-10-12 18:46:40
435,2015-10-07 16:57:16,"1) ~50 records.
2) Thank you.
",Nutelac,2015-10-12 18:46:40
435,2015-10-12 18:46:40,"Hopefully you have enough information to answer your questions now, @Nutelac, so I'm going to close this. Feel free to comment again if you still have doubts.

I've published the content here [over at Stack Overflow](http://stackoverflow.com/questions/33088119/when-should-i-use-a-relay-graphql-connection-and-when-a-plain-list/33088120) as it may prove useful to others in the future.
",wincent,2015-10-12 18:46:40
435,2015-10-30 23:07:46,"For getting all edges on a connection, the workaround is to choose a big number for `first`. Is this limitation something that can be _fixed_? Or is it here to stay?
",jvliwanag,2015-10-12 18:46:40
435,2015-10-31 02:06:13,"@jvliwanag This is an intentional restriction to prevent applications from fetching an entire connection with potentially thousands (or more) items. If you always plan to fetch all items a simple array may be more appropriate.
",josephsavona,2015-10-12 18:46:40
434,2015-10-07 06:15:06,"Summary:
After 6261fd2a48eda695d0cfde4b413ce9e2ac0277d8, directives are properly validated. This fixes `printRelayOSSQuery-test.js` by removing the use of directives that do not exist in the test schema.

Test Plan:

<S_CODE_TOKEN>
",yungsters,2015-10-07 16:10:27
434,2015-10-07 06:15:27,"@facebook-github-bot import
",yungsters,2015-10-07 16:10:27
434,2015-10-07 06:19:45,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1692095251005476/int_phab to review.
",facebook-github-bot,2015-10-07 16:10:27
433,2015-10-06 22:16:55,"1. Fixed the licence of examples. Now it is same as define [here](https://github.com/facebook/relay/tree/master/examples/todo#license).
2. Fixed some lint errors and warnings.

Ps - All npm test are passed and lint shows no major errors. Please see the diff.

Npm Test
<img src=""https://box.everhelper.me/attachment/301722/NuD6t5ei9i0VAGxX7avOK5Ifa4bkQt12/312416-0JwJzhXkXu4ZATUS/screen.png""/>

Lint test
<img src=""https://box.everhelper.me/attachment/301723/pGqakY01HpgeAsKPfGOtus6xDsK7NCIc/312416-AJM6V5LS06uq0P5c/screen.png""/>
",akashnimare,2015-10-12 15:50:40
433,2015-10-06 22:28:08,"@facebook-github-bot import
",josephsavona,2015-10-12 15:50:40
433,2015-10-06 22:45:21,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/177678392570540/int_phab to review.
",facebook-github-bot,2015-10-12 15:50:40
433,2015-10-07 17:08:59,"@josephsavona Is it ok?
",akashnimare,2015-10-12 15:50:40
433,2015-10-07 22:49:49,"@akashnimare: This got held up because our internal linter blocked it. I've now fixed that, so we can proceed to land this.
",wincent,2015-10-12 15:50:40
433,2015-10-07 22:51:57,"Awesome.
",akashnimare,2015-10-12 15:50:40
433,2015-10-12 19:44:20,"Why it is not merged?
",akashnimare,2015-10-12 15:50:40
433,2015-10-12 22:10:43,"It is merged (see 1e1131371f756f46bcbcf739f1b98af1002e6c8a).
",wincent,2015-10-12 15:50:40
432,2015-10-06 21:47:40,"GNU and BSD `sed` have some differences. Make the script compatible with both by
using neither of them.
",kassens,2015-10-07 02:56:30
432,2015-10-06 21:47:45,"@facebook-github-bot import
",kassens,2015-10-07 02:56:30
432,2015-10-06 21:50:27,"Next up: write it in JS :wink:
",zpao,2015-10-07 02:56:30
432,2015-10-06 21:52:59,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/471215589706718/int_phab to review.
",facebook-github-bot,2015-10-07 02:56:30
431,2015-10-06 18:45:44,"**Use case:** I have a calendar with events, for which I have a query with two arguments, `startDate` and `endDate`.

<S_CODE_TOKEN>

Sometimes, I have to expand or narrow the range, or completely change it, all based on user input. But everytime Relay sees a pair of arguments it hasn't seen before, it goes over the network to fetch the data.

If the arguments `(startDate: 2015-01-01, endDate: 2015-03-01)` are changed to `(startDate: 2015-02-01, endDate: 2015-02-20)`, ideally no fetch would be needed. It would be great if we had an API that could teach Relay how to handle the arguments on a case by case basis. I thought about this myself for a while and came up with the following API (forgive me for being pretty ignorant of Relay's internals).

<S_CODE_TOKEN>

I'd love to see something like this get implemented, and I'm sure it covers many use cases.
",johanobergman,
431,2015-10-06 20:45:13,"@johanobergman Thanks for posting! This is one example of a larger pattern of use-cases where certain argument values may describe a strict subset of data that has already been fetched. In these cases there is an opportunity to allow clients to inject some amount of custom behavior and potentially ""resolve"" calls locally.

Some challenges include determining an appropriate API and managing access to the Relay store (so that applications can inspect what data has been fetched). I'm going to mark this as an enhancement so it stays on our radar.
",josephsavona,
431,2015-10-13 07:56:48,"I wonder if it would be possible for you to implement this using connections and cursors?
",nickretallack,
431,2015-10-14 18:39:05,"@nickretallack The OP _is_ using connections and cursors. The issue here is that Relay treats field arguments as opaque values and can't automatically optimize for the fact that the results for some argument values may be strict subsets of the result of already cached argument values. E.g. the items for March 1 - April 1 don't need to be fetched from the server if Jan 1 - Dec 31 are already fetched. 
",josephsavona,
431,2015-10-14 18:46:24,"I have another question. What if I add a new edge to a connection with arguments like the ones above? I might have had multiple fetches with different dates as arguments. Can I somehow tell `rangeBehaviors` to add it to all caches where the new edge meet the date criteria?
",johanobergman,
431,2015-10-14 19:36:00,"I meant if you made the startDate be a cursor value instead of an argument. Not sure what you'd do with the endDate though, or how relay could be smarter about handling it. Just putting forward a more generic way of modeling the problem. 
",nickretallack,
431,2015-10-14 21:14:42,"> I have another question

@johanobergman - Would you mind posting this second question to [Stack Overflow](http://stackoverflow.com/questions/ask?tags=relayjs)? Doing so keeps the issues here targeted around bugs and enhancements, while Stack Overflow provides an experience tailored for general Q&A and a wider audience to help get your question answered faster. Thank you!
",josephsavona,
431,2015-11-30 23:45:40,"This reminds me a lot of a related issue of being able to have something like ""typed nodes"", where e.g. if I am fetching `query { widget(widget: $widgetId) }`, I should also be able to resolve that locally if the relevant node is already available locally (e.g. `query { node(type: 'widget', localId: $widgetId) }`).
",taion,
431,2016-12-22 16:55:13,"Some brief notes about how I'd approach this architecturally (in the new core  #1369):
- Fields can be annotated with a directive (e.g. `@relay(resolver: ""foo"")`
- When a query is fetched with caching enabled (not force-fetch), execute the query against the cache. 
  - If a field is missing and it does *not* have the `@relay(resolver)` directive, the field is missing and the query cannot be fulfilled from cache: fall back to the server 
  - If a field is missing and it *does* have the directive, lookup the value of the ""resolver"" property in a user-defined table of field resolver functions. Throw if user failed to specify a function. Otherwise execute the function with some context (the record/field/args in question) and allow the resolver function to write data into the store for that field. After calling the resolver, resume query execution: if the resolver was able to populate a value then data will be there and the query may be able to resolve from cache: if the field is still missing it means the resolver couldn't populate a value.",josephsavona,
430,2015-10-06 17:33:31,"Fixed licence issue.
",akashnimare,2015-10-06 22:18:16
430,2015-10-06 17:43:45,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-10-06 22:18:16
430,2015-10-06 18:17:30,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-10-06 22:18:16
430,2015-10-06 18:26:42,"@akashnimare The headers need to be changed for _all_ the .js files in `examples/`. Can you confirm that lint passes after the change?
",josephsavona,2015-10-06 22:18:16
430,2015-10-06 19:51:43,"@josephsavona  Please See #433 
",akashnimare,2015-10-06 22:18:16
429,2015-10-06 01:44:24,"Fixed a newline issue that caused a list to not render properly. Also, got rid of an unnecessary newline and replaced `-` with `—`.
",yungsters,2015-10-06 04:25:29
429,2015-10-06 03:56:20,"@facebook-github-bot shipit
",yungsters,2015-10-06 04:25:29
429,2015-10-06 04:12:28,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/902096669826877/int_phab to review.
",facebook-github-bot,2015-10-06 04:25:29
429,2016-10-29 13:11:19,"I will not rubber stamp and land your change for you @yungsters!  I can import it for you and you can get your change reviewed by someone though :)
",facebook-github-bot,2015-10-06 04:25:29
428,2015-10-05 19:00:51,"In the Relay new docs, the query specifies a `text` field but the response has `message` instead. Feel free to ignore if I misunderstood anything. Thank you!
",dmfrancisco,2015-10-05 20:55:26
428,2015-10-05 20:29:20,"Looks reasonable to me. Thanks for the PR!

@facebook-github-bot shipit
",wincent,2015-10-05 20:55:26
428,2015-10-05 20:37:10,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1708602776021695/int_phab to review.
",facebook-github-bot,2015-10-05 20:55:26
427,2015-10-05 17:55:33,,KyleAMathews,2015-10-05 19:51:37
427,2015-10-05 19:14:50,"This one may be controversial, so I am going to sneak it in while everybody is at lunch. ;-)

@facebook-github-bot shipit
",wincent,2015-10-05 19:51:37
427,2015-10-05 19:16:43,"Haha 👍🏻
On Mon, Oct 5, 2015 at 12:15 PM Greg Hurrell notifications@github.com
wrote:

> This one may be controversial, so I am going to sneak it in while
> everybody is at lunch. ;-)
> 
> @facebook-github-bot https://github.com/facebook-github-bot shipit
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/pull/427#issuecomment-145635863.
",KyleAMathews,2015-10-05 19:51:37
427,2015-10-05 19:34:15,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1722531471315648/int_phab to review.
",facebook-github-bot,2015-10-05 19:51:37
426,2015-10-05 14:18:48,"Hi,

I'm looking to use the DefaultNetworkLayer but I need to set a header (`X-Request-ID`) with a different value on every request. Right now I'm passing a harcoded value:

<S_CODE_TOKEN>

but I was hoping to pass a function so that it get evaluated every time a new request is built, something like this:

<S_CODE_TOKEN>

Is anything like this possible without creating a new NetworkLayer? If not I'm happy to contribute that patch, just let me know.

Thanks!
",luisobo,2015-10-06 15:40:56
426,2015-10-05 14:51:45,"`RelayDefaultNetworkLayer` simply forwards any options to the used `fetch`-polyfill, so no this won't work. An easy work-around would be to create your own network layer that simply creates a new `RelayDefaultNetworkLayer` for every request. This could have heavy runtime cost!
",clentfort,2015-10-06 15:40:56
426,2015-10-05 16:06:49,"@luisobo This seems like a good use-case for a custom network layer. As @clentfort suggested, you can delegate to the default layer internally. I suspect that the runtime cost would be negligible. Let us know how this works out for you!
",josephsavona,2015-10-06 15:40:56
426,2015-10-06 15:40:56,"@luisobo Does this suggestion help? I'll close this issue for now, but feel free to comment with more questions or provide feedback on this approach.
",josephsavona,2015-10-06 15:40:56
426,2016-06-06 17:43:56,"Hi, a bit late but I faced the same problem and used the following solution:

<S_CODE_TOKEN>

cheers
",IcanDivideBy0,2015-10-06 15:40:56
426,2016-06-07 05:24:26,"Example of adding `X-Request-ID` to request headers (which changes with every request) can be found here https://github.com/nodkz/react-relay-network-layer#example-of-injecting-networklayer-with-middlewares-on-the-client-side

<S_CODE_TOKEN>
",nodkz,2015-10-06 15:40:56
426,2016-06-07 05:30:03,"@IcanDivideBy0 tokens are implemented via [authMiddleware](https://github.com/nodkz/react-relay-network-layer)

<S_CODE_TOKEN>
",nodkz,2015-10-06 15:40:56
426,2016-06-07 12:55:34,"@nodkz thanks ! this looks definitly cleaner ;)
",IcanDivideBy0,2015-10-06 15:40:56
426,2016-06-27 16:34:41,"@IcanDivideBy0 Clever idea, but that actually didn't work for me. I had to use:

<S_CODE_TOKEN>
",miracle2k,2015-10-06 15:40:56
426,2016-06-27 17:38:28,"@miracle2k I finally used the authMiddleware which handle a refresh token function as well. You should try the @nodkz solution too, the getter/setter is definitly some kind of a hack

PS: we still write `var self = this;` in 2016 ? xD
",IcanDivideBy0,2015-10-06 15:40:56
425,2015-10-05 13:34:00,"The [README files of the examples](https://github.com/facebook/relay/tree/master/examples/todo#license) state that they are provided with a ""Facebook reserves all rights"" type of non-commercial evaluation license.

The file headers in examples say that they are BSD licensed, however: https://github.com/facebook/relay/blob/bd86c048cf0c8a4a5938a4a9c5913d7fc3985a7d/examples/todo/js/app.js#L1-L8

Which one is the license for examples at the moment?
",fson,2015-10-12 18:23:33
425,2015-10-05 16:03:06,"I believe the `README` is correct. We should fix the headers in the other example files, although we might have to tweak our linter to recognize that the modified headers are legit.
",wincent,2015-10-12 18:23:33
425,2015-10-05 16:07:00,"Thanks for answering @wincent. I'll keep this issue open as a reminder to update the headers.
",fson,2015-10-12 18:23:33
425,2015-10-12 18:23:33,"I believe this is now taken care of (via 1e1131371f756f46bcbcf739f1b98af1002e6c8a).
",wincent,2015-10-12 18:23:33
424,2015-10-04 22:34:52,"Makes a few improvements to the transform script in `babel-relay-plugin`:
- Trims off `.js` extension and makes it executable.
- More precise error messages for invalid input paths.
- Accept source to transform via stdin.
- Fix bug with path to dependent module.
",yungsters,2015-10-06 04:40:46
424,2015-10-05 15:43:29,":+1: 
",josephsavona,2015-10-06 04:40:46
423,2015-10-04 22:03:29,"Configures the Babel Relay Plugin to use Jest for testing.
",yungsters,2015-10-06 04:40:46
423,2015-10-05 15:43:48,":+1: 
",josephsavona,2015-10-06 04:40:46
422,2015-10-04 13:11:29,"Currently `GraphQLStoreQueryResolver` is aware of the
`RelayStoreGarbageCollection` and updates the subscription-count directly. This
unnecessarily makes the `GraphQLStoreQueryResolver` aware of garbage collection.
Using `RelayStoreData` as a layer between decouples the components. Furthermore
this will help implementing `RelayStoreData#reset` since we can in the future
keep track of active subscriptions in `RelayStoreData` itself.
",clentfort,2015-10-11 02:25:06
422,2015-10-04 19:42:06,"Hmm. This doesn't reduce coupling - it only shifts the coupling such that `RelayStoreData` needs to understand more of how GC works. Can you describe more of how this helps implement `reset()`?
",josephsavona,2015-10-11 02:25:06
422,2015-10-04 20:03:10,"Well `RelayStoreData` is coupled with the `RelayStoreGarbageCollector` anyway, so I don't see any harm done. 
If I understood the discussion in #233 we need to keep track of the number of active subscriptions, so `{de,in}creaseSubscriptionFor` can be used to do the bookkeeping.
",clentfort,2015-10-11 02:25:06
422,2015-10-05 15:50:00,"Although `RelayStoreData` holds a reference to a garbage collector instance, it isn't currently coupled to its implementation. Adding increment/decrement methods actually increases coupling & complexity. 

An alternate approach (which I've started in #370) is to pass an instance of `RelayStoreData` to the query resolver, from which it can access the GC instance.
",josephsavona,2015-10-11 02:25:06
422,2015-10-11 02:25:06,"Closing in favor of #370 - thanks @clentfort for exploring this idea! 
",josephsavona,2015-10-11 02:25:06
421,2015-10-04 10:28:45,"One of my mutations updates a fragment that is displayed completely somewhere else, though they do have a common ancestor. I could try to get the fragment and pass it through the whole hierarchy and the common ancestor, but I feel like there should be a more direct way.

Given that we already have the node-interface, can't we just update the appropriate node via its ID?

I would imagine something like this:

<S_CODE_TOKEN>
",Gregoor,2015-10-08 20:17:26
421,2015-10-05 16:14:11,"cc @yuzhi 
",josephsavona,2015-10-08 20:17:26
421,2015-10-05 17:00:41,"Just to clarify, why do you need to pass the fragment around for the mutation?
Given an terminated fat query field, Relay will automatically include everything that we have about that node so that it gets updated before the next render.
",yuzhi,2015-10-08 20:17:26
421,2015-10-06 09:55:00,"What is a _terminated_ query?

I guess part of my problem is, that the mutation does not necessarily know where this particular todoContainer exists in the graph. In my model todoContainers can be nested inside of each other.

So I think I need a way of updating a field (or rather a node?) without knowing where it is positioned in the data model.
",Gregoor,2015-10-08 20:17:26
421,2015-10-06 15:03:19,"Sorry, I am not sure I understand the exact question.
https://facebook.github.io/relay/docs/guides-mutations.html#a-complete-example
Fat queries are just a description of what can change in terms of the of mutation fields. In the example above, `story` can be anywhere on the graph as well. Stories can also be nested inside of each other. Relay figures out which story you are talking about by looking at result from 'getConfigs()', which can be a function of set of values you pass into the mutation.
I am not sure what you mean by `updating a field`, since fields are generally belong to a node. Also if the server sends back JUST a field, Relay won't know which node that field belongs to and thus can't apply the right change.

If that doesn't answer your question, can you include more information about what you are trying to do? For example: what fragment does your component have? What are types of each of the fields? What fields does your mutation have? which fields are you trying to update?
",yuzhi,2015-10-08 20:17:26
421,2015-10-08 20:17:26,"Ah, I should be sorry. I got it wrong, I forgot that because of relay's node-interface/object-ID convention  the position in the query is not important, but its ID. Somehow I blocked that out of my mind.

Thanks for taking the time :+1: 
",Gregoor,2015-10-08 20:17:26
420,2015-10-03 15:08:29,"In this [video](https://www.youtube.com/watch?v=Pxdgu2XIAAg) at the @ Scale conference Yuzhi Zheng talked about Incremental Rendering but looking trough the documentation i could not find anything describing how to do this so I was wondering if it is already possible? 
",cmodijk,2015-10-03 16:15:36
420,2015-10-03 16:12:12,"See https://github.com/facebook/relay/issues/288
",fson,2015-10-03 16:15:36
420,2015-10-03 16:15:36,"Yes, the support for defer is what's missing here. See the issue mentioned above.
",kassens,2015-10-03 16:15:36
420,2015-10-03 16:52:41,"@fson & @kassens Tnx! 
",cmodijk,2015-10-03 16:15:36
419,2015-10-03 15:00:20,"Currently i don't see a good way of doing the following as the initialVariables object is created before the props have been set. Correct me if i am mistaken.

<S_CODE_TOKEN>

Is there a reason for needing the initial variables before props have been set? Otherwise i propose allowing initialVariables to be defined as a function which is invoked with the initial props of the component.

<S_CODE_TOKEN>
",emilsjolander,2015-10-03 19:40:47
419,2015-10-03 19:40:47,"@emilsjolander Relay uses static queries in order to fetch data _before_ rendering components. This means that queries don't have access to `props`, because there are none yet!

Containers are designed to be relative - they fetch data for any object of a certain type. Here, that means the `Profile` query should probably be `fragment on User { name }`. Then the **Route** would specify which `User`. The [Routes Guide](http://facebook.github.io/relay/docs/guides-routes.html#queries-vs-fragments) provides an example for exactly this scenario.
",josephsavona,2015-10-03 19:40:47
419,2015-10-04 09:34:58,"ok thanks,  i'll have a look!
",emilsjolander,2015-10-03 19:40:47
418,2015-10-03 00:05:06,"Hi,

I'm going to create a relay connection for Mongo. Is there anyone who tried to built it?
Then, I can use that.
",arunoda,2015-10-03 19:31:45
418,2015-10-03 09:11:16,"> @josephsavona [commented on 22 Aug](https://github.com/facebook/relay/issues/143#issuecomment-133738951)
> GraphQL is agnostic of data storage and programming languages. As for how to integrate with MongoDB, this is a really great question to ask at the graphql repo

Someone contributed an example how to use relay together with mongo as the database for graphql, please have a look at their example. https://github.com/sayden/relay-mongoose-example, this might be a good starting point.
",clentfort,2015-10-03 19:31:45
418,2015-10-03 12:10:11,"Thanks.
On 2015 ඔක් 3, සෙන at ප.ව. 2.41 C. A. Lentfort notifications@github.com
wrote:

> Someone contributed an example how to use relay together with mongoose.
> https://github.com/sayden/relay-mongoose-example, this might be a good
> starting point.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/418#issuecomment-145230018.
",arunoda,2015-10-03 19:31:45
418,2015-10-03 19:31:45,"Thanks for the question and answer!
",josephsavona,2015-10-03 19:31:45
418,2015-11-16 20:55:53,"I just created a small helper library with a function `connectionFromMongoCursor()` which works just like `connectionFromArray()`: [relay-mongodb-connection](https://github.com/mikberg/relay-mongodb-connection)
",mikberg,2015-10-03 19:31:45
418,2015-11-17 01:23:15,"@mikberg awesome! 

Try found time on this week to test it.
",nodkz,2015-10-03 19:31:45
418,2015-11-17 01:27:14,"BTW 
1 connection = 10mb RAM at mongodb server.
So if 1000 connection, then server with mongo should have 10GB RAM!!!
",nodkz,2015-10-03 19:31:45
417,2015-10-02 22:45:22,,wincent,2015-10-05 17:20:26
417,2015-10-03 00:10:22,":+1: 
",josephsavona,2015-10-05 17:20:26
417,2015-10-03 00:39:43,"@facebook-github-bot import
",wincent,2015-10-05 17:20:26
417,2015-10-03 00:44:41,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/860849377355933/int_phab to review.
",facebook-github-bot,2015-10-05 17:20:26
416,2015-10-02 17:58:12,"When I hit http://facebook.github.io/relay/, there's a noticeable delay before I can interact with the page, which seems to come from the time it takes to set up all the Relay Playground instances.

Would it make sense to use something like react-waypoint or react-lazy to only load the playground instances when they enter the viewport? It takes a very tall viewport for anything but the first playground to be visible, so in expectation this should improve things noticeably for most users.
",taion,2016-09-03 00:24:01
416,2015-10-02 18:46:14,"I've noticed this too. What do you think, @steveluscher?
",wincent,2016-09-03 00:24:01
416,2016-09-03 00:24:01,"We're planning on totally replacing the Relay website for the release of [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable), including rethinking how the Playground works, so I am going to close this for now.

Thanks for bringing this issue up, @taion. This had bugged me as well. We'll do our best to make things a bit smoother on the new documentation site.
",wincent,2016-09-03 00:24:01
415,2015-10-02 17:04:00,"When a mutation payload includes union or interface types which must be queried with fragment type directives, the mutation query does not include the type directives, leading to an invalid query.

For example, I have the following types:

<S_CODE_TOKEN>

In my Relay container I use a fragment spread to get either the `paths` or `url`, depending on the concrete type of the `LinkDestination` union type.  

<S_CODE_TOKEN>

This works as expected.

However, if a mutation payload contains an object which contains a `Link`, the resulting query on the mutation payload looks like this: 

<S_CODE_TOKEN>

This is invalid, because the `LinkDestination` union type does not contain the `paths` or `url` fields; they're defined on the member types `InternalLink` and `ExternalLink`
",yusefnapora,2015-10-22 23:08:55
415,2015-10-02 18:06:43,"Looking at `refragmentRelayQuery`, it looks like that only operates on Nodes, so perhaps I'm seeing this because the types above don't conform to `Node`?
",yusefnapora,2015-10-22 23:08:55
415,2015-10-02 18:47:43,"@yusefnapora Can you paste the fat query for this mutation?
",josephsavona,2015-10-22 23:08:55
415,2015-10-02 18:48:49,"Also `getConfigs()`
",josephsavona,2015-10-22 23:08:55
415,2015-10-02 18:49:34,"I suspect this is the result of how we construct the mutation query (w/o the necessary metadata for `refragmentRelayQuery` to have an effect)
",josephsavona,2015-10-22 23:08:55
415,2015-10-06 16:43:09,"@yusefnapora can you attach the fat query and configs for this mutation?
",josephsavona,2015-10-22 23:08:55
415,2015-10-08 16:23:00,"@josephsavona sorry about the delay.

I ended up resolving the issue by making `Link` be the dynamic type, instead of a container for another dynamic type (`LinkDestination` above).   It seems that the `refragmentRelayQuery` only checks to see if the child fields of a node are of a dynamic type, but it doesn't check if the ""grandchildren"" are dynamic.

Here's the fatQuery and configs for one of the mutations that was failing (several were affected):

<S_CODE_TOKEN>

The problem isn't really apparent looking at the mutation; the `Link` is a child of `Post`, which is the `node` for `newPostEdge`.  When relay was generating the query on `AddSourceAnnotationToImagePayload`, it was constructing something like

<S_CODE_TOKEN>

and not including the `... on ExternalLink`  around the `url` field.
",yusefnapora,2015-10-22 23:08:55
415,2015-10-22 16:35:16,"I'm having this problem too. @yusefnapora what do you mean by ""Making a type dynamic""?

Any other workarounds? /cc  @josephsavona 

Thank you!
",luisobo,2015-10-22 23:08:55
415,2015-10-22 20:52:46,"@luisobo Are you on the latest version of Relay and `babel-relay-plugin`?
",josephsavona,2015-10-22 23:08:55
415,2015-10-22 21:03:34,"@josephsavona nope, 0.2.5. It seems the latest is 0.3.0. Updating now. Should this fix the issue tho?
",luisobo,2015-10-22 23:08:55
415,2015-10-22 21:09:50,"it works! Can this issue be closed then?
",luisobo,2015-10-22 23:08:55
415,2015-10-22 23:08:55,"Yup, I'll close it. Thanks for confirming the fix.
",josephsavona,2015-10-22 23:08:55
414,2015-10-02 16:49:59,"addresses #408 
",josephsavona,2015-10-02 17:45:25
414,2015-10-02 16:50:23,"@facebook-github-bot import
",josephsavona,2015-10-02 17:45:25
414,2015-10-02 16:54:33,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/152816178400234/int_phab to review.
",facebook-github-bot,2015-10-02 17:45:25
413,2015-10-02 02:27:59,,enaqx,2015-10-02 04:50:28
413,2015-10-02 04:24:07,"Thanks, @enaqx!

@facebook-github-bot shipit
",wincent,2015-10-02 04:50:28
413,2015-10-02 04:32:57,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/418609868349601/int_phab to review.
",facebook-github-bot,2015-10-02 04:50:28
413,2016-10-29 13:10:54,"@wincent has imported this pull request.  If you are a Facebook employee, you can view this diff [on Phabricator](https://phabricator.intern.facebook.com/D4101176).
",facebook-github-bot,2015-10-02 04:50:28
412,2015-10-01 23:46:11,"Also suggestions:
- move eslint rules from dependency to relay own .eslintrc like in [graphql-js](https://github.com/graphql/graphql-js/blob/master/.eslintrc)
- include lint step in test
",enaqx,2015-10-12 20:05:32
412,2015-10-02 00:42:54,"> move eslint rules from dependency to relay own .eslintrc

No, the point of the shared config is that we can share that across our projects and enforce the same rules :)

> include lint step in test

Yea, that should be done (though personally I don't know that `npm test` should fail but having it be part of the matrix on travis ci makes sense)
",zpao,2015-10-12 20:05:32
412,2015-10-02 01:26:41,"@zpao Thanks for detailed instructions

> move eslint rules from dependency to relay own .eslintrc
> 
> > No, the point of the shared config is that we can share that across our projects and enforce the same rules :)

Ok. Then vice versa. graphql-js should depend on general rules rather than implementing its own, but it seems have quite different codestyle. :)
",enaqx,2015-10-12 20:05:32
412,2015-10-02 01:59:18,"Updated. Hope I've understood instructions correctly. :)
",enaqx,2015-10-12 20:05:32
412,2015-10-12 18:57:15,"@facebook-github-bot import
",yungsters,2015-10-12 20:05:32
412,2015-10-12 19:13:21,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/165762317098466/int_phab to review.
",facebook-github-bot,2015-10-12 20:05:32
412,2015-10-12 19:36:21,"@enaqx I'm going to make the following changes as I merge this upstream:
1. Change `diffRelayQuery.js` to return `null` to have a consistent return.
2. Remove disabling `no-unused-vars` from `RelayQueryTransform`. (This warning is a bug with ESLint and Flow, and not with the code itself.)

Let me know if either of these will be a problem!
",yungsters,2015-10-12 20:05:32
412,2015-10-12 19:43:26,"@yungsters No problem, thanks!

Although if you remove `no-unused-vars` from `RelayQueryTransform` it will impact tests with warning if lint step will be included.
",enaqx,2015-10-12 20:05:32
411,2015-10-01 19:37:46,"In the subscriptions channel on Slack, a few of us (@taion, @skevy, and I) were discussing what are the missing pieces needed to implement subscriptions.

One important piece in Relay is the ability for a real-time network layer to apply ""mutations"" to the Relay Store. People will use different technologies to push data to their client. In each there needs to be a way to tell Relay this field changed or this node should be prepended to this connection, etc.
",KyleAMathews,2015-11-02 19:52:56
411,2015-10-01 20:05:41,"I think it'd be clearer to say ""apply mutation/subscription payloads from the network layer"" rather than more generally ""from userland"".
",taion,2015-11-02 19:52:56
411,2015-10-01 20:47:22,"The way we've been thinking of subscriptions is as a mix of push/pull semantics. In particular, the client would explicitly request updates from the server for a particular event, and the server could then notify the client when the event occurs (until the client closes the subscription). 

Here's the rough API we're considering:

## Public API

The public API would be similar to mutations. The main difference is that subscriptions would have fixed/static queries (unlike mutations which intersect the fat query with those fields queried by the application).

1) Define a subscription by subclassing `Relay.Subscription`:

<S_CODE_TOKEN>

2) Initiate a subscription, requesting updates from the server:

<S_CODE_TOKEN>

## Internal Changes

The rough steps to implementing the above are:
- Update the `graphql` dependency to the latest version which supports parsing `subscription { .. }`.
- Modify `babel-relay-plugin` to handle parsing those queries, outputting `GraphQL.Subscription` objects (note that `GraphQL.Subscription` and the corresponding `RelayQuery.Subscription` are already implemented ;-)
- Create a `Relay.Subscription` base class similarly to  `Relay.Mutation`.
- Create a `RelaySubscriptionRequest` class, similar to `RelayMutationRequest` for describing a subscription to send to the network layer. The public API would be roughly:

<S_CODE_TOKEN>
- Provide a stub implementation in `RelayDefaultNetworkLayer` which throws when subscriptions are requested
- Docs, examples, tests
- Last but not least, a working example implementation.
",josephsavona,2015-11-02 19:52:56
411,2015-10-01 21:08:50,"@josephsavona 

I think that makes a good low-level API. My concern is that this doesn't necessarily match how I might want to think about subscriptions from the front end.

Echoing @KyleAMathews's comment, I feel like I really think more about wanting live updates for a particular query, rather than wanting to subscribe to a specific named subscription. Moreover, I think having specific subscriptions requires closer coupling between the front end and the back end - unlike with mutations and few fields, if the server starts defining a new subscription type that I'm not handling from my front end, I'll lose some set of updates, some of which I might care about.

Do you think it might be possible to define some higher-level subscription API that works on the level of nodes rather than on the level of ""subscriptions""? I definitely want to define mutation-style `getConfigs` for connections, but I feel like there should be some concept of ""here is a generic update to this node that you don't know how to handle, just re-fetch everything in the Relay store for this node from the GraphQL server"".
",taion,2015-11-02 19:52:56
411,2015-10-01 21:15:39,"I guess to be more concrete, suppose there were `StoryLikeCountSubscription`, `StoryLikeStringSubscription`, and `StoryLikersSubscription`, which respectively covered the like count, the like string, and the list of likers. Would I have to make multiple subscriptions from my front end if I needed to listen to more than one of those? Would the back end have to know to update each of those subscriptions (and any additional ones that get added) every time someone likes a story?
",taion,2015-11-02 19:52:56
411,2015-10-01 21:36:33,"This is the issue for the `@live` directive idea https://github.com/graphql/graphql-js/issues/188
",KyleAMathews,2015-11-02 19:52:56
411,2015-10-02 16:11:30,"> I really think more about wanting live updates for a particular query, rather than wanting to subscribe to a specific named subscription

This is an _ideal_ end-state for subscriptions. However, this can be difficult to scale fully and correctly. For Relay core, we'd like to add support for patterns that we or the community have proven to be effective and practical to implement. For now, we'll pursue (and accept contributions for) the event-based subscription API that I described above because we've found this to be effective in practice.

That said, we certainly welcome you to explore other options such as `@live` queries - get something working and send a pull request so we can discuss!
",josephsavona,2015-11-02 19:52:56
411,2015-10-03 22:27:58,"@josephsavona what are the steps to add support for a `@live` directive? 
",KyleAMathews,2015-11-02 19:52:56
411,2015-10-20 13:14:25,"Just FYI to all those on this issue...I'm actively working on implementing the general concepts @josephsavona outlined above. Nothing in PR state yet...but hopefully it won't take me toooo much longer to get it there.
",skevy,2015-11-02 19:52:56
411,2015-11-02 19:52:55,"@KyleAMathews thanks for starting this discussion! I've created a new task with the API described above to help guide contributions. Let's continue discussion at #541
",josephsavona,2015-11-02 19:52:56
411,2015-11-02 19:53:05,"also cc @skevy 
",josephsavona,2015-11-02 19:52:56
411,2016-03-26 00:47:10,"@taion 's idea is feasible if each node type is subscribable to.  I did something like this with Entity Framework and signalR where each change to the database was published.  

So any tree of graphQL nodes on the client would result in a tree of subscriptions to the server.  I then did additional filtering on the client so the server didn't do 'live queries' it just published events when a node's related nodes changed.
",gilesbradshaw,2015-11-02 19:52:56
410,2015-10-01 19:23:34,"Pretty much all mutation examples have the client doing a mutation without passing an explicit new value (for example, `LikeStoryMutation` doesn't send up the like count...the server instead has the logic to calculate the new value).

It turns out there _is_ an example, but it is tucked in https://facebook.github.io/relay/docs/guides-mutations.html#fields-change (note the `newName` variable). Using that example in a component isn't shown but it would look like:

:clap: This is the way to do it :clap: 

<S_CODE_TOKEN>

This was a bit non-obvious, docs were lacking, and I was looking for a ""sanctioned way"". I tried these things first before stumbling on the above example:
- **Setting the prop with the new value:**

:beetle: This is not the way to do it! :beetle: 

<S_CODE_TOKEN>

Of course this is incorrect and throws, but it was confusing as a n00b...all but the above mutation examples just transparently pass in `this.props.[someObject]`.
- **Adding plain value:**

:beetle: This is not the way to do it! :beetle: 

<S_CODE_TOKEN>

This is incorrect and throws, as Relay is expecting a Relay-specific object here. As a n00b I thought Relay might have some magic to reconcile the values and what it tracks internally.
- **Cloning props, adding new value**:

:beetle: This is not the way to do it! :beetle: 

<S_CODE_TOKEN>

This is incorrect and **silently** fails. Relay internals reconcile what is in the store and effectively blows away this value with the existing one in `this.props.document.name`.

:point_right: So I think the mutation docs should have a clearer example actually sending a value back to help out n00bs (or maybe it was just me?). Happy to write a PR if you agree!
",LegNeato,2016-09-03 00:12:23
410,2015-10-01 22:49:50,"It would be awesome if you can add more info to the mutation docs!
",yuzhi,2016-09-03 00:12:23
410,2015-11-02 18:02:01,"@LegNeato Any interest in adding an example to the docs?
",josephsavona,2016-09-03 00:12:23
410,2016-09-03 00:12:23,"Going to close this out as stale. We'd still welcome a PR enhancing the docs, but as [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable) is just around the corner, and it will have a dramatically simpler API for mutations, we aren't going to directly allocate any resources to documenting the old system any further.

Thanks for opening the issue, @LegNeato!
",wincent,2016-09-03 00:12:23
409,2015-10-01 18:32:15,"While investigating an issue reported for the todomvc example
(https://github.com/facebook/relay/issues/408), I tried to repro as follows:

<S_CODE_TOKEN>

But it went boom during the `npm install` because I didn't have `babel`
installed globally:

<S_CODE_TOKEN>

(Full output at https://gist.github.com/wincent/3221694ee3fdc46084f4)

What's happening here:
- example's `preinstall` tries to run `install` from the top-level
- top-level `install` tries to install babel-relay-plugin dependency
- babel-relay-plugin `build` step runs and tries to shell out to `babel`
- `babel` call will blow up if not globally installed, even though babel
  is listed as a dev dependency

Workaround:

<S_CODE_TOKEN>

Fix employed here: we add `npm install --ignore-scripts` to the
babel-relay-plugin `build` recipe, causing it to become available in
`node_modules` and therefore the `$PATH` when the `babel` command later
runs. Note that without the `--ignore-scripts` we get into an infinite
loop, although I am not sure of the exact chain of cause and effect
because all we see on the console at that point is this, endlessly
repeated:

<S_CODE_TOKEN>

Also note the use of `;` instead of `&&` in the interest of preserving
potential future compatibility with Windows.

I think this change should be ok for end users or the
babel-relay-plugin, as they don't end up running the `build` script and
instead just get whatever we built into `lib/`.

Test Plan: Blow away global babel (`npm uninstall -g babel`) and example
`node_modules` and then `npm install` from inside example or top-level,
see it no longer blows from.
",wincent,2015-10-13 18:48:24
409,2015-10-01 18:33:09,"CC @yungsters who knows this stuff; I might be unaware of some constraints.
",wincent,2015-10-13 18:48:24
409,2015-10-12 18:55:55,">  Note that without the --ignore-scripts we get into an infinite loop, although I am not sure of the exact chain of cause and effect [...]

According to [npm-build(1)](https://docs.npmjs.com/cli/build), the `build` script is a plumbing command called by `npm install` and `npm link`. So if the `build` script calls `npm install`, you have an infinite loop.

---

My understanding is that if you have a `file://...` dependency in your `package.json` (like our examples do), it won't install the dependency's dependencies. This is why `babel-relay-plugin`'s dependency on `babel` is not installed, which is what causes the problem raised by this pull request.

If you take a look at the example's `preinstall` script, you'll notice it works around this by installing the root directory's dependencies:

<S_CODE_TOKEN>

The `--ignore-scripts` flag means `npm install` should install the dependencies without running the `build` script. Why's that? Well, it appears that running `npm install` _does_ run the `build` script of `file://...` dependencies. If we left out `--ignore-scripts`, we would end up building the `react-relay` package twice (which is not wrong, just unnecessarily time consuming).

> **NOTE:**
> In my opinion, npm's behavior around `file://...` dependencies is kind of messed up.

---

So back to the problem at hand — `babel` is a dependency of `babel-relay-plugin`, which is a `file://...` dependency of the examples. The reason that `babel` has an error when installing an example is that the `babel-relay-plugin`'s `build` script is being executed without first installing its dependencies.

I don't think that changing `babel-relay-plugin`'s `build` script is the right fix. This would be the equivalent of replacing the example's existing `preinstall` script by adding `npm install --ignore-scripts` to `react-relay`'s `build` script, which is definitely wrong.

Instead, it seems that any package that has a `file://...` dependency needs to ensure that dependency's package dependencies are installed using `npm install --ignore-scripts`. So instead, we can just change the example's preinstall script to _also_ correctly handle `babel-relay-plugin`:

<S_CODE_TOKEN>
",yungsters,2015-10-13 18:48:24
409,2015-10-13 15:59:32,"Whoops, I accidentally closed this. I'll fix it up and resubmit.
",wincent,2015-10-13 18:48:24
409,2015-10-13 17:17:08,"Ok, I think this should be good to go now.

@facebook-github-bot import
",wincent,2015-10-13 18:48:24
409,2015-10-13 17:26:55,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1650880361858182/int_phab to review.
",facebook-github-bot,2015-10-13 18:48:24
408,2015-10-01 07:30:41,"I tried to remove items in the todo list and I got this error 

'Uncaught Error: Invariant Violation: RelayQueryField(): Expected field `id` to be annotated with the type of the parent field.'
",reginedanica,2015-10-03 19:32:28
408,2015-10-01 17:56:29,"Thanks for the report, @reginedanica. What version of the code are you running? I can't repro this on the current `HEAD` of master.

Maybe you are running an old version of the babel-relay-plugin. Try running `npm install && npm run update-schema && npm run start` in the todo example and see if you can repro.
",wincent,2015-10-03 19:32:28
408,2015-10-01 20:43:04,"@wincent I have same problem. I'm running 1844dc940b46021befd7703b574ddbbcee8656f8 atm. 
Running `npm run update-schema` will fill few `description` fields inside `schema.json`.
",zigomir,2015-10-03 19:32:28
408,2015-10-02 01:00:03,"Also, at fe3e78f7fd4f9f16c883136a05efbb83a82d82b9 I'm unable to add a new todo, probably for the same reason?

Full error message:
`Uncaught Error: Invariant Violation: RelayQueryField(): Expected field`id`to be annotated with the type of the parent field.`
",N0hbdy,2015-10-03 19:32:28
408,2015-10-02 02:26:50,"i have also this same error on the current HEAD - I _did_ run:

<S_CODE_TOKEN>

The error is due to an invariant at:
https://github.com/facebook/relay/blob/master/src/query/RelayQuery.js#L890

under debugger, it appears that 
`this.__concreteNode__` is:

<S_CODE_TOKEN>

but `this.__concreteNode__.metadata` is:

<S_CODE_TOKEN>

and so that fails the invariant in:

<S_CODE_TOKEN>
",pcarion,2015-10-03 19:32:28
408,2015-10-02 06:13:31,"Yep! We broke this. @josephsavona is on it!
",steveluscher,2015-10-03 19:32:28
408,2015-10-02 16:19:26,"Oops! Looking at it.
",josephsavona,2015-10-03 19:32:28
408,2015-10-03 15:07:40,"I can confirm that the TodoMVC app is working now. Thanks!
",pcarion,2015-10-03 19:32:28
408,2015-10-03 19:32:28,"@pcarion thanks for double-checking ;-)
",josephsavona,2015-10-03 19:32:28
408,2015-10-05 02:18:56,"Thanks a lot guys!
",reginedanica,2015-10-03 19:32:28
407,2015-10-01 03:43:06,"is it good idea to support this feature ? 

UseCase : I am using relay in scala.js app , i want to pass type safe classes to the component ( instead of manually deserializing json to scala classes every time i call props).

Pseudo code : 
https://github.com/facebook/relay/blob/5e77de5f2495a2932b066d225d567d594b2a5823/src/container/RelayContainer.js#L783

<S_CODE_TOKEN>

or process all pieces ({this.props,this.state.queryData,ref,relayprops})
",chandu0101,2016-05-10 23:29:09
407,2015-10-01 13:13:23,":+1: 
",xsistens,2016-05-10 23:29:09
407,2015-11-17 10:55:42,"Something that would be useful for us as well in certain use-cases. E.g. we query the same data all over our app, but in a few parts we need to prepare the data, e.g. to display it in our select-component.
",Globegitter,2016-05-10 23:29:09
407,2015-11-17 11:06:47,"any objections for this proposal ? please let me know if none i'll send a PR!
",chandu0101,2016-05-10 23:29:09
407,2016-05-10 16:06:09,"I'm a bit wary of adding more complexity to RelayContainer. What are you doing as a workaround?
",josephsavona,2016-05-10 23:29:09
407,2016-05-10 20:00:48,"The current workaround that we are using is modifying the data in the render function (e.g. before we pass it down into a generic component).
",Globegitter,2016-05-10 23:29:09
407,2016-05-10 23:29:09,"It appears to me that this is a fine workaround and doesn't add much boilerplate to your app and if common in your case could be moved into a higher order component or some other abstraction.

I'm with @josephsavona on this one that we should try to keep the API small.
",kassens,2016-05-10 23:29:09
406,2015-09-30 22:07:58,"Also, fixes build script.
",yungsters,2015-09-30 22:15:17
405,2015-09-30 18:21:00,"Changes `babel-relay-plugin` to be compiled via Babel. This will let us start using ES2015 features without having to require all users to use node v4+.

Tested by removing all `node_modules` and `lib` directories and running installation steps on the `README.md`.
",yungsters,2015-09-30 20:40:26
405,2015-09-30 18:44:42,"Due to limitations internally (cc @cpojer @amasad), I am going to change this to instead check in the build products — `lib/`.
",yungsters,2015-09-30 20:40:26
405,2015-09-30 19:12:22,":+1: 
",josephsavona,2015-09-30 20:40:26
404,2015-09-29 23:40:39,"Brings across:
- https://github.com/relayjs/relay-starter-kit/pull/36
- https://github.com/wincent/relay-starter-kit/pull/1

from the starter kit. Benefit here is explicitness and robustness, but the cost is that the webpack bundle may take longer to build (I'm going to look at tweaking the config though to not reparse React/Relay when bundling, if that can be done without [causing problems](http://stackoverflow.com/questions/32708927/how-do-you-move-from-stock-relay-to-relay-with-a-router)).

Let me know if this seems silly.
",wincent,2015-09-30 18:31:32
404,2015-09-29 23:48:30,"I think it's a great idea - maps better to what people would be more likely to do if they are using webpack.
",zpao,2015-09-30 18:31:32
404,2015-09-30 00:23:59,"This is great!
",kassens,2015-09-30 18:31:32
404,2015-09-30 00:54:48,"@facebook-github-bot import
",wincent,2015-09-30 18:31:32
404,2015-09-30 00:57:27,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1629650070657484/int_phab to review.
",facebook-github-bot,2015-09-30 18:31:32
403,2015-09-29 01:02:44,"If I try to start an initial fetch of connection with a `after` cursor the request fails with `GraphQLRange cannot find a segment that has the cursor`.

The use case for this is to fetch a range that's in middle of a connection somewhere, eg. I navigate to a `?page=2` url. I'd like to create a cursor on the front end with encoded offset information for the initial fetch.

Is this case not supported intentionally?
",grydstedt,2015-09-29 16:54:02
403,2015-09-29 16:44:09,"Sorry, Currently GraphQLRange (Connections with first and last field calls) only supports storing data based on the cursor we already have. There is little Relay can use to figure out what's before or after the edges if we encounter another segment of results without knowing about the cursor first. After all cursors are opaque and can't sorted.
If you want to page directly to something like `?page=2` you might be able to use a `offset` and `limit` model instead or just return a list with (page: 2). That will just cached the results directly without trying to stitch the edges together.
",yuzhi,2015-09-29 16:54:02
403,2015-09-29 16:54:02,"Gotcha, thanks @yuzhi 
",grydstedt,2015-09-29 16:54:02
402,2015-09-29 00:02:03,"When I originally tested 4f15484dade090092cf4000d42b7b410d0ab3948, tests weren't using the master version of the plugin and so this was missed.
",josephsavona,2015-09-29 06:33:55
402,2015-09-29 00:02:10,"@facebook-github-bot import
",josephsavona,2015-09-29 06:33:55
402,2015-09-29 00:05:02,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/726044097539903/int_phab to review.
",facebook-github-bot,2015-09-29 06:33:55
401,2015-09-28 20:50:19,"If you remove the last item in a GraphQLList it does not broadcast the update and the local version is not changed.
",quazzie,2015-10-02 20:50:24
401,2015-09-28 20:53:26,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-10-02 20:50:24
401,2015-09-28 20:56:59,"cla signed
",quazzie,2015-10-02 20:50:24
401,2015-09-28 21:13:11,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-10-02 20:50:24
401,2015-09-28 21:14:43,"Can you add a unit test that tests this to ensure futures changes won't break this?
",yuzhi,2015-10-02 20:50:24
401,2015-09-28 21:28:35,"Sorry, I've never written a unit test and i can't even figure out where you test the function i changed.
",quazzie,2015-10-02 20:50:24
401,2015-09-28 22:00:52,"No worries! We can work through that if you don't mind. There is a first time for everything. 
The best place to add a unit test for what you added would be here: 
https://github.com/quazzie/relay/blob/patch-2/src/traversal/__tests__/writeRelayQueryPayload_pluralLinkedField-test.js

There are already a few examples for tests that writes to a plural linked field. You can use them as template. All you have to do is write to the field with some value and then write to it again with a shorter list of results and make sure the node with the update list shows up in the list of the updated nodes (something like line 62-67 of the above file).

To test it, you can do `npm test <path to test>`
Hope that helps! Let me know if you need more pointers.
",yuzhi,2015-10-02 20:50:24
401,2015-09-29 11:08:57,"After lots of trial and error i figured out i could not use windows as dev environment... 
But i think this is a correct test. Fails without fix and completes with it.
",quazzie,2015-10-02 20:50:24
401,2015-09-30 03:10:14,"nice!
",josephsavona,2015-10-02 20:50:24
401,2015-09-30 07:42:14,"When i broke out the logic flow complained about possibly undefined value.
Flow did not find this when logic was in `if (isUpdate || ...)`

Added a check if prevLinkedIDs is defined.
",quazzie,2015-10-02 20:50:24
400,2015-09-28 13:07:31,"I am seeing this upon running a migration:

<S_CODE_TOKEN>

Here is my setup:
1. I'm using react-router to either route to ""ItemsPage"" or ""AddItemPage"". 
2. Every page is a Relay RootContainer.
3. When AddItemPage triggers the location, it doesn't really know if the ""viewer.items"" connection was already loaded. If the entry point into the app was the AddItemPage component, the items have not been loaded.

Am I not using this right? Arguably, it shouldn't be necessary to load a connection to add items. I prefer not do have to know when I want to run a mutation what objects are already in the Relay store or not.
",miracle2k,2015-11-02 20:50:13
400,2015-09-28 17:47:46,"You are right. Relay shouldn't try to fetch and store the edge if the connection has not been fetched yet.

Do you know if that error is from the optimistic mutation or the response from the server?
Did you figure out a work around to be unblocked?
",yuzhi,2015-11-02 20:50:13
400,2015-09-28 22:33:24,"I do not use an optimistic response here.

What happens I believe, is this:
- The AddItem mutation defines a ""newItem"" field in it's output. This is the newly created edge.
- In getConfigs(), this output field is mapped to the ""items"" connection via RANGE_ADD.
- Because the ""items"" connection is not loaded in React, Relay will not ask for this output field when sending the mutation.
- The mutation query responds without the ""newItem"" output field present.
- Relay now complains the ""newItem"" field, that it wants to use in RANGE_ADD, is missing.
",miracle2k,2015-11-02 20:50:13
400,2015-10-05 20:11:24,"Think I might have just hit this as well:

I have user-specific config data that saves choices entered in a setup wizard. For each wizard step, I prefill any saved data from the server...but I don't know if the user has loaded the view before or not and there may not be a record on the server. When I write data back, it may or may not have been fetched from the server via Relay depending on if the record exists.

When I do `FIELDS_CHANGE`, it all works as long as there is a record in the database but fails to do the mutation if there is no existing record because it is looking for the `id` in the store. With `RANGE_ADD` (creating a record in the database with the user-specific value the first time the view page is loaded) I get the warning message in this issue.

:point_right:  Is there a better way to go about this pattern (updating a record if there otherwise add a new one) in Relay?
",LegNeato,2015-11-02 20:50:13
400,2015-11-02 20:50:13,"merging into #542
",josephsavona,2015-11-02 20:50:13
399,2015-09-28 09:21:54,"React has some pretty awesome warning messages, such as when you use componentShouldUpdate instead of shouldComponentUpdate. 

It might be useful to add a development-only warning in [RelayMutationQuery.js](https://github.com/facebook/relay/blob/c67358894c7c48588c48fdd56e726b053e6e5d64/src/mutation/RelayMutationQuery.js#L325), checking that the user passed `parentID` instead of `parentId` (for the variations that expect it).

I ended up spending a while tracking down why a mutation was failing. The codebases I work with use `fooId` instead of `fooID`, and it's really easy to overlook that you're using `parentId` instead of `parentID`.
",cesarandreu,2015-09-28 17:42:43
399,2015-09-28 17:42:43,"@cesarandreu thanks for reporting this issue. We understand that current mutation configs need some work. Others have voiced this concern as well. I am going to merge this to #232
",yuzhi,2015-09-28 17:42:43
398,2015-09-27 19:50:03,"Could not reopen, creating a new issue with better description, prev issues #295 
When you remove the last item in a GraphQLList the list does not update the list.

My change in ~~18964ef05d753ef991d5f621367d7b1849352fc6~~ fixes this issue.
It does not check if the graphqllist changes in length and does not update.
",quazzie,2015-10-04 16:51:57
398,2015-09-27 20:03:17,"Uhmm i see that i have update the wrong place in the file. 
Correct change whould be 59f8e2315b43d570388b0bb43c0b3ffc8878167b.
",quazzie,2015-10-04 16:51:57
398,2015-09-28 17:39:49,"Can you create a PR for this?
",yuzhi,2015-10-04 16:51:57
398,2015-09-28 20:50:36,"#401 
",quazzie,2015-10-04 16:51:57
398,2015-10-04 16:51:57,"Closed by #401 
",quazzie,2015-10-04 16:51:57
397,2015-09-27 19:35:10,"The result from the hasPreviousPage and hasNextPage algorithms are backwards in the connection specification.  It was saying to return `false` if they are _more_ than the requested number of elements, but in that case there is another page, so it hasn't reached the end of the set of edges.
",dylanahsmith,2015-09-28 18:45:35
397,2015-09-27 19:39:31,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-09-28 18:45:35
397,2015-09-28 17:13:36,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-09-28 18:45:35
396,2015-09-27 11:40:34,"By default npm3 flattens the `node_modules` directory. This results in the nested path defined in [`.flowconfig`](https://github.com/facebook/relay/blob/master/src/.flowconfig#L9) not being valid. Furthermore there are problems running `jest`. All tests fail with a runtime error (see attached output of `npm t`). I assume this has something to do how jest is configured to transform the source before running the tests.

<S_CODE_TOKEN>
",clentfort,2015-11-02 17:58:32
396,2015-10-12 19:04:22,"Thanks for reporting this, @clentfort. I don't think any of us have updated to npm v3 yet (and I personally haven't because I am wary of productivity-sapping teething problems like this one), but it would be nice to deal with this before v3 is declared ""final"".

I've added the ""help wanted"" tag to see if anybody wants to jump in and help out with this before we get to it.
",wincent,2015-11-02 17:58:32
396,2015-10-12 19:23:14,"If we want to be strict and only support npm@2 we can add the devEngines check we have in React.
",zpao,2015-11-02 17:58:32
396,2015-10-12 22:16:48,"@zpao I guess that would be a good solution for the moment.
@wincent Arch Linux already uses to npm3 by default, that's how I encountered this problem.
",clentfort,2015-11-02 17:58:32
396,2015-10-20 17:46:24,"Spring cleaning, so I threw up https://github.com/facebook/relay/pull/495 for this.

@zpao: I see that you relaxed the requirement in React a few days ago, but I don't think we're ready to go there yet.
",wincent,2015-11-02 17:58:32
396,2015-10-20 18:00:26,"Yea, Relay will have issues but React escapes because we don't use Flow there. That part kinda sucks but hopefully will get fixed by the work @gabelevi is doing (can't find the issue right now).
",zpao,2015-11-02 17:58:32
396,2015-11-02 17:58:32,"Closing as Relay now explicitly sets its required node/npm versions in package.json
",josephsavona,2015-11-02 17:58:32
396,2016-02-25 10:27:18,"@clentfort This is the only place I found the `es6.symbol.js: Cannot read property 'type' of null` error when googling. I'm getting the same thing when trying to run `babel-jest` on a js module with flow types. It triggers on `function foo(bar: Object) {}` but not on `function foo(bar: any) {}`.

Can you provide any guidance? (This question has nothing to do with `relay`)
",prewk,2015-11-02 17:58:32
396,2016-02-25 12:15:30,"@prewk: If you have a question regarding the usage of jest please turn to [StackOverflow](http://stackoverflow.com/questions/tagged/jestjs) or their [Discord-Channel](https://discordapp.com/channels/102860784329052160/103622435865104384). If you think you encountered a bug with babe-jest or jest please report it on the respective GitHub project.
",clentfort,2015-11-02 17:58:32
396,2016-02-25 12:31:20,"I had a specific problem concerning a specific error message which you and I are alone on the internet to encounter it seems. That's why I asked here. I'll try elsewhere, thanks.
",prewk,2015-11-02 17:58:32
395,2015-09-26 05:05:51,"Installing projects in `examples/` with npm v2 outputs a warning.

<img width=""845"" alt=""screenshot 2015-09-25 21 44 28"" src=""https://cloud.githubusercontent.com/assets/3792228/10115943/61aebf00-63d1-11e5-85e0-a0e4baacccad.png"">

Added the latest version of babel-core (same as the one used in `relay/`) to fix the warning.
",michaelchum,2015-09-30 20:35:27
395,2015-09-30 18:28:49,"Thanks!
",yungsters,2015-09-30 20:35:27
395,2015-09-30 18:35:01,"@facebook-github-bot import
",yungsters,2015-09-30 20:35:27
395,2015-09-30 18:38:29,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1468340510140936/int_phab to review.
",facebook-github-bot,2015-09-30 20:35:27
395,2015-09-30 19:32:50,"@michaelchum Thanks! @yungsters rebased this diff internally already and he'll land it shortly, so don't worry about the merge conflict.
",kassens,2015-09-30 20:35:27
394,2015-09-26 03:29:58,"looks like inheriting static members doesn't work in all browsers ?  recently we(sclala.js devs) faced similar issue when upgrading to react 0.14 rc  
https://github.com/scala-js/scala-js/issues/1900
https://github.com/facebook/react/issues/4836

react team reconsidering this change!, is relay team also working along same guidelines ? if not can we get an API `Relay.createMutation(options)` similar to `Relay.createContainer` ? 
",chandu0101,2016-09-03 00:22:13
394,2015-09-29 22:12:59,"Thanks for he heads up, @chandu0101. @voideanvalue might have thoughts on this, as he did most of the implementation for the current version of the `RelayMutation` API.
",wincent,2016-09-03 00:22:13
394,2015-09-29 22:25:25,"An alternative to a custom class creator would be to try to avoid using inherited static properties. A possible API could be:

<S_CODE_TOKEN>
",kassens,2016-09-03 00:22:13
394,2016-05-20 20:08:59,"I'm also seeing this behavior in IE <= 10.  The static method getFragment from RelayMutation does not get added to inherited components, which causes this:

<S_CODE_TOKEN>

to result in:

<S_CODE_TOKEN>

I'm currently able to work around this problem by calling getFragment on RelayMutation directly:

<S_CODE_TOKEN>

But this is less than ideal.  I believe this is actually a Babel limitation in converting ES6 classes to IE <= 10 (static properties specifically don't seem to work), so I'm unsure at the moment what the best fix is.
",03eltond,2016-09-03 00:22:13
394,2016-08-16 14:42:50,"@03eltond You could use https://babeljs.io/docs/plugins/transform-class-properties/ and https://www.npmjs.com/package/babel-plugin-transform-es2015-classes
",gauravtiwari,2016-09-03 00:22:13
394,2016-08-16 16:07:41,"Thanks @gauravtiwari, I'd tried this already but with no luck.  I think the problem is that the relay package has already been run through Babel by the time you get it via npm (as it should be), and so those plugins never have a chance to do their thing to RelayMutation.js.  Those plugins would actually need to be used by relay's own build process in order for this to work.

It's been several months since I messed with this, so please let me know if you took this approach and it worked for you.  I should probably try using those plugins on a clone of relay to verify my own theory on the problem.
",03eltond,2016-09-03 00:22:13
394,2016-08-16 16:10:29,"@03eltond I see. No, it works for me with those plugins. I actually installed a couple, especially the transform ones. Yeah, give it a shot and it should work now 👍 
",gauravtiwari,2016-09-03 00:22:13
394,2016-09-03 00:22:13,"Thanks for the input, everybody. I'm going to close this given @gauravtiwari's workaround, and also because the mutation API is changing dramatically for the better in [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable), so this problem should simply go away in the near future.

Thanks once again!
",wincent,2016-09-03 00:22:13
394,2016-11-11 20:19:53,"@gauravtiwari I'm running into the same issue with IE10,
`Object doesn't support property or method 'getFragment'`

and I still cannot get it to work by using the 2 babel plugins that you mentioned, https://babeljs.io/docs/plugins/transform-class-properties/ and https://www.npmjs.com/package/babel-plugin-transform-es2015-classes

Are you sure that it's working in IE10? Could you or someone provide more help?
",jaden-chen,2016-09-03 00:22:13
394,2017-02-06 11:31:47,"I fixed it myself with following code on Mutation class
<S_CODE_TOKEN>
I found it better, because I don't need to handle it outside of Mutation and I need to write it only once for every mutation :)

Example:
<S_CODE_TOKEN>",svrcekmichal,2016-09-03 00:22:13
393,2015-09-26 00:22:35,"I was testing some fbjs changes and got tired of waiting ~23s for each build so I made it faster.
1. Removed duplicate `modules` task. We already run it for `dist` and `dist:min` (where it gets deduped) so we don't need to run it before then.
   
   _(saves ~5s)_
2. Removed the babel webpack loader. We've already transformed our code. `fbjs` is already transformed. We shouldn't need to transform again. There are some differences (https://gist.github.com/zpao/16e13b4a85010c6fbdff) as a result of this - mostly because we don't reprint, though there are also a couple `'use strict'` statements missing but that's probably ok.
   
   _(saves ~6-7s for each `dist` and `dist:min` but they run in parallel so only see the win once)_

I ran a few times before and after to get some stable numbers with a warm disk cache. I dropped from 23s to 12s.
",zpao,2015-09-26 02:10:34
393,2015-09-26 00:56:48,"Thanks!

@facebook-github-bot import
",kassens,2015-09-26 02:10:34
393,2015-09-26 01:07:03,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/888826177831498/int_phab to review.
",facebook-github-bot,2015-09-26 02:10:34
392,2015-09-25 20:55:39,"Improves the handling of auto-generated `__typename` fields from  bdbaf3e78456d1d42f74801f2553e60f12806e85:
- Add `__typename` within fragments of an abstract type
- Update tests to work with generated `__typename` fields
- Ensure that Relay-generated queries contain `__typename` wherever they existed in the original query or when generating new `node` root calls.
",josephsavona,2015-09-25 23:15:34
392,2015-09-25 20:57:30,"@facebook-github-bot import
",josephsavona,2015-09-25 23:15:34
392,2015-09-25 21:02:02,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/146328499049281/int_phab to review.
",facebook-github-bot,2015-09-25 23:15:34
391,2015-09-25 15:45:03,"Bump version to include the `__typename`-handling logic.
",josephsavona,2015-09-28 23:06:39
391,2015-09-25 15:45:43,"@facebook-github-bot import
",josephsavona,2015-09-28 23:06:39
391,2015-09-25 15:48:54,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1655152468075845/int_phab to review.
",facebook-github-bot,2015-09-28 23:06:39
391,2015-09-26 01:48:17,"@facebook-github-bot import
",josephsavona,2015-09-28 23:06:39
391,2015-09-26 01:49:02,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1655152468075845/int_phab to review.
",facebook-github-bot,2015-09-28 23:06:39
390,2015-09-25 12:53:03,"I found [this](https://gist.github.com/wincent/598fa75e22bdfa44cf47#does-relay-support-isomorphic-js) answer, but then I'm trying use react-relay on the server I got an error `self is not defined`, this error occurs because `fetch` library, which used in relay, [is not isomorphic](https://github.com/github/fetch/issues/184#issuecomment-126523046).
",mikhail-riabokon,2015-09-25 21:02:47
390,2015-09-25 12:59:25,"Probably, though I have not yet tried it. I think the only thing that currently depends on the browser is the default network layer, but you can easily swap it when you're on the server: https://facebook.github.io/relay/docs/guides-network-layer.html#content

Though you should probably just check these issues:
https://github.com/facebook/relay/issues/36
https://github.com/facebook/relay/issues/136
",Gregoor,2015-09-25 21:02:47
390,2015-09-25 13:11:58,"@Gregoor thank you for quick answer, I will try, and share my result in success case.
",mikhail-riabokon,2015-09-25 21:02:47
390,2015-09-25 13:19:51,"[This comment](https://github.com/facebook/relay/issues/136#issuecomment-142681224) shows how it can be fixed, but only on local level. So this can not be solid solution.
",mikhail-riabokon,2015-09-25 21:02:47
390,2015-09-25 21:02:47,"Thanks for your interest!

#136 covers the remaining issues to make this happen. Internally, we already server render some Relay pages, so this can definitely be done :smile: 
",kassens,2015-09-25 21:02:47
390,2015-10-06 12:55:22,"@kassens Hi,

How did you do that? If it's not a secret ) 

I have created [repo](https://github.com/mikhail-riabokon/relay-server-rendering) where I am trying to run Relay + GraphQL on server, but I still have error, which have not resolved yet. In case if you have time and interest, could you have a look on it and write that I did wrong?

Thank you in advance.
",mikhail-riabokon,2015-09-25 21:02:47
390,2015-10-06 15:41:43,"@mikhail-riabokon There's more discussion about server rendering with Relay in #136
",josephsavona,2015-09-25 21:02:47
389,2015-09-25 12:51:00,"I just went through the docs and tutorials as I was introducing GraphQL & Relay to a project and found a few places that the docs could be improved on - let me know what you think, feedback is obviously welcome :)

In summary:
- Linked to Conference pages where videos came through & added dates so that people have a little more context on a video's recency
- Added reference to [Relay and Routing medium post](https://medium.com/@cpojer/relay-and-routing-36b5439bad9)
- Changed a couple of sentences at the end of some guides referencing what's coming up next; for example, at the end of the Tutorial section it says you'll be taken to the Guides, but actually you get to the Videos section first
- Added links to external dependencies / plugins / functions that are mentioned and I had to look for rather than click on and be taken there
",AnSavvides,2015-09-25 21:30:05
389,2015-09-25 17:02:09,"@AnSavvides This is great! Thank you!!
",josephsavona,2015-09-25 21:30:05
389,2015-09-25 17:45:20,"Updated :tada: 
",AnSavvides,2015-09-25 21:30:05
389,2015-09-25 20:54:17,"Thanks, this is great!

@facebook-github-bot import
",kassens,2015-09-25 21:30:05
389,2015-09-25 21:01:56,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/513196378833612/int_phab to review.
",facebook-github-bot,2015-09-25 21:30:05
388,2015-09-25 10:20:52,"Hi,

I can't get the relay-treasurehunt example to work. I get this errors when loading http://localhost:3000 into my chrome browser:

![treasure-hunt graphql errors](https://cloud.githubusercontent.com/assets/100044/10098119/e449bcba-637e-11e5-86d5-dbce590710b2.png)

I am running node v4.1.0 on a Mac os x Yosemite 10.10.3, chrome Version 45.0.2454.99 (64-bit) and Relay master branch at commit d2c821efb6f9620c7e3597ad92b3e1e1a838829e.

I ran `npm run update-schema` then `npm install` and finally `npm start` to run the example server. Did I miss something?

Thanks.
",happypoulp,2015-10-07 13:48:56
388,2015-10-06 18:07:15,"I can't repro this locally on master
",josephsavona,2015-10-07 13:48:56
388,2015-10-07 12:43:07,"I just took the last master and the issue is still here. What's weird is that the graphQL server is supposed to run on http://localhost:8080 but the screenshot above shows that graphQL requests that fail are emitted on http://localhost:3000/graphQL. Below is the same request, reproduced via curl:

<S_CODE_TOKEN>

And here the same request but played on 8080 port (it works correctly):

<S_CODE_TOKEN>

Since I did not touch in any way to the code of the example, how does it come that graphQL requests are emitted on the wrong domain (localhost:3000 instead of localhost:8080)? Is it there anything I can do to pinpoint the issue more precisely?

Thanks!
",happypoulp,2015-10-07 13:48:56
388,2015-10-07 13:48:56,"Ok I found the issue. It was a local mitmproxy install (https://mitmproxy.org/) that was somehow messing with my request to graphql. Not sure why but after un-installing it, the example works correctly.

Thanks.
",happypoulp,2015-10-07 13:48:56
388,2015-10-07 22:48:14,"Glad to hear that you got to the bottom of this!
",wincent,2015-10-07 13:48:56
387,2015-09-25 10:00:03,"Hi,

It seems that since https://github.com/facebook/relay/commit/fb2720516ccadf1d696299780084296a7966288e we can longer run `npm run-script update-schema`. The copyright headers at top of script files (`todo/scripts/updateSchema.js`, `star-wars/scripts/updateSchema.js`, `relay-treasurehunt/scripts/updateSchema.js`) are preventing babel-node from correctly parsing the shebang interpreter directive. I noticed it on the treaasure-hunt example but I guess that this issue is present on all examples.
",happypoulp,2015-09-25 23:51:35
387,2015-09-25 15:13:44,"Thanks for noticing this! Would you like to submit a PR to fix?
",wincent,2015-09-25 23:51:35
387,2015-09-25 16:37:50,"I'd be glad to! But to be honest I am not sure about what's the correct fix for this issue.

I could move headers below the shebang directive but I don't know if this is correct since those headers were added automatically via `arc lint --lintall --apply-patches static_upstream/relay/**/*.js` according to fb2720516ccadf1d696299780084296a7966288e. So I guess that there are chances that a manual fix would be overwritten the next time this command is run. Then the best way would be to fix the command above and only after that, to manually update those scripts (and I don't know where/when this command is actually run). Am I over-thinking here?
",happypoulp,2015-09-25 23:51:35
387,2015-09-25 17:03:18,"I believe the linter is smart enough to look past the shebang line (and it it isn't, we'll fix it).
",wincent,2015-09-25 23:51:35
386,2015-09-24 21:18:04,"I have an `Item` Type. I want it's title to be translated into a variable number of languages. I was imagining a structure like this:

<S_CODE_TOKEN>

The admin interface needs to load all of the titles for editing, and optionally add new ones. In other words, I am looking for a ""dict"".

The only way I can come up with to solve this right now is to use a `GraphQLString` and encode the language-strings as a JSON objects.

Is there another one, or should there be?
",miracle2k,2015-09-25 12:49:34
386,2015-09-24 23:24:48,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",kassens,2015-09-25 12:49:34
386,2015-09-25 12:49:34,"I posted it here:

https://stackoverflow.com/questions/32782604/dynamic-children-map-type-in-relay-js
",miracle2k,2015-09-25 12:49:34
385,2015-09-24 17:27:13,"Potential fix for #381.
",taion,2015-09-28 23:06:39
385,2015-09-24 17:34:10,"This is what I meant with https://github.com/facebook/relay/issues/381#issuecomment-142979970.

I believe this solution is more correct in when it requests `pageInfo`. Two things worth noting:
- Compared to https://github.com/facebook/relay/issues/381#issuecomment-142967061, this can potentially generate larger queries on the wire, in the event that there are multiple fragments on a given connection type that each request `pageInfo`, since each fragment will embed the `pageInfo` query
- I switched the check for the type being a connection for adding `pageInfo` from `getConnectionMetadata` to just `isConnectionType` - not sure if this would be a problem
",taion,2015-09-28 23:06:39
385,2015-09-24 21:42:41,"Latest commit pulls out the type-only portions of `getConnectionMetadata` and uses that for adding `pageInfo` as a requisite field.
",taion,2015-09-28 23:06:39
385,2015-09-24 21:43:18,"(the `schema` arg to `getConnectionMetadata` wasn't used at all, so I removed it)
",taion,2015-09-28 23:06:39
385,2015-09-24 22:28:48,"@facebook-github-bot import
",josephsavona,2015-09-28 23:06:39
385,2015-09-24 22:28:58,"@taion thanks for working on this!
",josephsavona,2015-09-28 23:06:39
385,2015-09-24 22:42:01,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1528332534124697/int_phab to review.
",facebook-github-bot,2015-09-28 23:06:39
384,2015-09-24 16:29:18,"I'm having trouble figuring out how to accomplish what seems to be a pretty standard pattern when doing a `RANGE_ADD` mutation.

Say on page load I pull in and render a connection `messages` with `first: 10` pagination. I now do a `AddMessageMutation` which does a `prepend` to the that same connection. Since the connection is paginated by `first: 10` the last item of the connection is now gone to give room for my new edge and is thus removed from rendering. I can of course add +1 to `first` on the `onSuccess` of the mutation, but this  often leaves a weird flickering effect of removing and reinserting the edge at the end.

This problem seem to get even more difficult if I want to do an optimistic update to the connection since there is no `onOptimistic` callback. 

Since this seems like a pretty common pattern I figured I'd ask if I'm approaching this the wrong way.
",grydstedt,2015-09-25 05:17:17
384,2015-09-24 18:40:06,"If this is better suited for StackOverflow, I can post it there as well.
",grydstedt,2015-09-25 05:17:17
384,2015-09-25 05:17:17,"Yes, since there's no direct bug or concrete missing feature here, let's move this to StackOverflow. This will help us keep Github for issues that can be worked on and also better SEO for the questions so others can find them on StackOverflow. Thanks :)

PS: please post a link here in case someone else should find this page.
",kassens,2015-09-25 05:17:17
384,2015-09-25 06:35:58,"https://stackoverflow.com/questions/32776189/paginated-connection-plus-added-edge-from-mutation
",grydstedt,2015-09-25 05:17:17
384,2015-09-29 00:58:11,"Anyone available to answer this one?
",grydstedt,2015-09-25 05:17:17
383,2015-09-24 15:51:36,"Imagine a server that dynamically generates a GraphQL schema based on database content. The schema is only known during runtime, not compile time.

How does this interact with babel-relay-plugin? babel-relay-plugin requires a static dump of the server schema, but with a dynamic GraphQL schema that schema does not exist at this time. Recompiling the JS frontend code each time the server schema changes is not an option.

How would you make this work?
",faassen,2015-09-29 10:50:02
383,2015-09-24 16:45:54,"I think there was a discussion around this in Reactiflux (and I thought in an issue as well, but I can't find it). The conclusion, as I recall, was basically to avoid it.

If there's stuff you want to avoid exposing to users (such as admin-only stuff), you could generate two schemas and compile the app with each. Otherwise you return null for stuff a user can't access. What prevents you from knowing the schema at compile-time? 
",cesarandreu,2015-09-29 10:50:02
383,2015-09-24 17:19:20,"Forgot compiling, how would you even _write_ product code against a schema that is effectively unknown?
",josephsavona,2015-09-29 10:50:02
383,2015-09-24 18:17:11,"An architecture where the complete schema is only known at runtime is quite common in software in my experience. Take a CMS where users can create new types of content using a UI during runtime. Or take any random enterprise software system where types and their fields are defined in a database, again by users with an UI. 

Not everybody is building single-deployment web applications. A lot of software has a multiple independent deployments, each with a different configuration and extensions. Some core types and fields will be in common between all of them, but there are also fields and entire types unique to a deployment. Each schema effectively has its own schema.

Whether this is the best way to architect a system is another debate: can we discuss this accepting that such systems already exist and that it may be interesting to use Relay with them? In some ways a database-generated schema makes software like this a great fit for GraphQL, as this kind of software typically _already_ has sufficient information in its database to generate a schema.

There are multiple ways you can write UIs for software where you don't know the complete schema:
- the schema can be introspected during runtime, and a UI can in part be auto-generated. This may of course need supplementary information beyond what's in a GraphQL schema.
- a subset of the schema may be completely known during development time, even though the software makes you store its definition in the database due to legacy reasons -- that's how all schema information is stored.
- you may not know everything about concrete types in complete deployments, but you may know quite a lot about their interface, and thus you can write a generic UI that can handle these.

graphql-js seems, as far as I can see, to be explicitly engineered to allow the generation of schema information at runtime where needed. But babel-relay-plugin, whatever it does exactly (I don't quite understand yet), is a problem.

Can babel-relay-plugin be avoided entirely? What are the consequences of doing so?

@cesarandreu points at a possible approach: it may be possible to know a subset of the complete schema at compile time. But how would this work for new fields or complete types that only known during runtime?

@josephsavona  I chatted with you briefly at React Conf Europe I believe, just before your Relay talk. So, are you asking me how people can write code in a dynamically typed language? I can try to explain... :)
",faassen,2015-09-29 10:50:02
383,2015-09-24 20:51:34,"@faassen I apologize if my question came off as snarky, but I was genuinely curious and want to further understand the problem space. What I was getting at with my question is that the code clearly has to have _some_ understanding of the structure of the data it will receive (this isn't about static/dynamic languages). Let's take as example a simple CMS that allows users to define custom types, custom fields on those types, and provides UIs for editing objects of these types. It would seem that all product code in this system would fall into one of two categories:
- Meta-code. For example, a view that queried for the fields of a user-defined type and displays a dynamic form based on the (dynamically) defined form fields. 
- Product-specific code. For example, a product-specific customization might assume the existence of a `Foo` type with a `bar` field, and show a tailored UI just for this type.

In both cases, the schema is _actually knowable at build time_. In the meta-code example the schema is the meta-schema -  the schema the CMS framework uses to describe the custom types and fields. In the product-specific case, the product schema can be dynamically generated at build time to validate the code. 

Overall, it's _absolutely_ possible to build Relay apps using the type of system you're describing. The schema _is_ required for compiling queries, but this can be dynamically generated by executing the introspection query against the server prior to the build step. This is actually how we compile Relay queries at Facebook - by fetching the introspection queries from our GraphQL server and caching the results on disk. 

> Can babel-relay-plugin be avoided entirely

No, because Relay needs information about the schema in order to process queries. However, as described above it should always be possible to get a schema such that queries can be compiled.
",josephsavona,2015-09-29 10:50:02
383,2015-09-27 20:58:04,"@faassen Did this address your question? It definitely seems that what you're looking for is possible, unless I'm missing something.
",josephsavona,2015-09-29 10:50:02
383,2015-09-28 13:25:59,"@josephsavno Thank you for the helpful answer!

I think meta code is a good way to understand the problem of dynamically generated UIs, and instead of a concrete schema we'd have a schema that describes the schema and build on that.

That leaves what you call  ""product-specific code"". I think the question transforms into how one would create a composable GraphQL server.

So imagine you're working on an extension to a CMS that handles a particular type of content, say ""customer"". You can define the schema that deals with customer-related information as part of this extension. In it, you can also build on the schema defined by the core of the CMS, and possibly the schemas of other extensions that your extension depends on.

So, during development you could export this schema and use it to compile the JS code. But in reality this schema is only a subset of the complete subset available during deployment. What is available during deployment depends on what extensions get installed.

Is it possible to compile the code against a partial schema (a working subset of the full schema) or is the full schema necessary? Would recompilation be needed during deployment once the full schema is known or can this be avoided entirely? This depends a bit on what babel-relay-plugin actually _does_: if it's just about validating a query, then it sounds like recompilation after deployment can be avoided, but if it's also about intelligent cache invalidation, then perhaps it cannot.

In other words, can one develop code against a subset of a larger schema that only contains those aspects of the total schema that are in fact in use by the code? 
",faassen,2015-09-29 10:50:02
383,2015-09-28 15:46:57,"> In other words, can one develop code against a subset of a larger schema that only contains those aspects of the total schema that are in fact in use by the code?

Yes. So long as every field/type that your queries _use_ are in the schema that you compile against, this should be fine. The plugin does a combination of validation (do those types/fields/arguments exist?) and annotation. Annotation includes marking fields as connections so that they can be processed as such, or ensuring that queries contain an `id` field if it exists in the schema. 
",josephsavona,2015-09-29 10:50:02
383,2015-09-29 10:50:02,"Okay, that's good to know! So recompilation would not be needed after code composition time; this is something that one would like to avoid in some architectures. Thanks for helping to make this whole issue more clear in my head. I'll close this issue now.

If we ever end up implementing this we'll undoubtedly run into details but I'll ask those if and when needed.
",faassen,2015-09-29 10:50:02
383,2016-09-05 06:55:20,"For future googlers:
@taion released awesome [scalar GraphQLType JSON](https://github.com/taion/graphql-type-json) that supports dynamic values for a field!

I'm using it in [graphql-compose-mongoose](http://graphql-compose.herokuapp.com/), so live demos with dynamic field's type can be found here: 
- [Find User with field of MIXED type](http://graphql-compose.herokuapp.com/user/?query=%0A%7B%0A%20%20userById%28_id%3A%20%2257bb44dd21d2befb7ca3f001%22%29%20%7B%0A%20%20%20%20_id%0A%20%20%20%20name%0A%20%20%20%20someMixed%0A%20%20%7D%0A%7D%0A%20%20%20%20%20%20)
- [Create user mutation (with arg of MIXED type)](http://graphql-compose.herokuapp.com/user/?query=%0Amutation%20%7B%0A%20%20userCreate%28record%3A%20%7B%0A%20%20%20%20name%3A%20%22My%20Name%22%2C%0A%20%20%20%20age%3A%2024%2C%0A%20%20%20%20gender%3A%20ladyboy%2C%0A%20%20%20%20contacts%3A%20%7B%0A%20%20%20%20%20%20email%3A%20%22mail%40example.com%22%2C%0A%20%20%20%20%20%20phones%3A%20%5B%0A%20%20%20%20%20%20%20%20%22111-222-333-444%22%2C%0A%20%20%20%20%20%20%20%20%22444-555-666-777%22%0A%20%20%20%20%20%20%5D%0A%20%20%20%20%7D%2C%0A%20%20%20%20someMixed%3A%20%7B%0A%20%20%20%20%20%20a%3A%201%2C%0A%20%20%20%20%20%20b%3A%202%2C%0A%20%20%20%20%20%20c%3A%20%5B%201%2C%202%2C%203%2C%20true%2C%20false%2C%20%7B%20sub%3A%201%20%7D%5D%0A%20%20%20%20%7D%0A%20%20%7D%29%20%7B%0A%20%20%20%20recordId%0A%20%20%20%20record%20%7B%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20age%0A%20%20%20%20%20%20gender%0A%20%20%20%20%20%20contacts%20%7B%0A%20%20%20%20%20%20%20%20email%0A%20%20%20%20%20%20%20%20phones%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20someMixed%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A%20%20%20%20%20%20)
",nodkz,2015-09-29 10:50:02
382,2015-09-24 10:28:04,"Fixes #367 where `npm install` on the projects in `examples/` would build twice. This is due to the nature of `npm install` which recursively executes `npm install --production` on parent directories, including `relay/`. 

Since the `preinstall` script of the projects already executes `npm install` on `relay/`, `npm install` runs twice on `relay/` therefore running the `build` script of `relay/` twice.

Adding `--ignore-scripts` to the `preinstall` script of the projects fixes this by not executing any scripts in the first `npm install` on `relay/`.
",michaelchum,2015-09-28 22:55:26
382,2015-09-24 23:29:17,"Thanks!

@facebook-github-bot import
",wincent,2015-09-28 22:55:26
382,2015-09-24 23:35:06,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/511333862354859/int_phab to review.
",facebook-github-bot,2015-09-28 22:55:26
382,2015-09-26 00:09:33,"@michaelchum According to the summary, wouldn't it be enough if we just removed the preinstall line (since install already installs parent directories?)
",kassens,2015-09-28 22:55:26
382,2015-09-26 01:10:41,"@kassens I've done a bit of research before the commit :) Because the automatic install on parent directory `relay/` is  `npm install --production` which only installs `dependencies` and ignores `devDependencies`, it will therefore not build since `gulp` (and some other tools required for build) are only in `devDependencies`. 

We need to manually go to `relay/` and run `npm install` at least once in order have `gulp` installed so that any subsequent `npm install` or `npm run build` commands would build Relay.

If the `preinstall` script is removed, we'd have to tell the user to `npm install` in `relay/` first before installing projects in `examples/`.
",michaelchum,2015-09-28 22:55:26
382,2015-09-26 03:27:32,"Thanks for doing the research, I don't have much experience with npm.

@wincent ship it
",kassens,2015-09-28 22:55:26
381,2015-09-24 06:59:51,"This looks like a bug in babel-relay-plugin. The logic here: https://github.com/facebook/relay/blob/615787490db3bd62b15e8bf22d9c46b2d59bbf73/scripts/babel-relay-plugin/src/GraphQLPrinter.js#L503 for pulling in `pageInfo` on connections doesn't seem to work when the connection `edges` are only pulled in via a fragment.

For example, in the current (non-routing) TodoMVC example, if you remove these lines: https://github.com/facebook/relay/blob/58e45dbb9fd08215884597171ce072551f344c06/examples/todo/js/components/TodoApp.js#L64-L68 (the data fetched there isn't actually used by the `TodoApp` component at all, so naively that part of the GraphQL query seems vestigial), you can see that the GraphQL query sent to the server does not request `pageInfo`, and correspondingly does not request `hasNextPage` or `hasPreviousPage`, and consequently, Relay assumes that those fields are false, and pagination doesn't work (or wouldn't work, in more elaborate cases that involve pagination).
",taion,2015-09-29 01:53:32
381,2015-09-24 15:37:17,"Good find! Fix it? ;-)
",josephsavona,2015-09-29 01:53:32
381,2015-09-24 15:40:13,"Re the fix: it seems reasonable to always add `pageInfo` on a connection field if it isn't already present **and** one of the following applies:
- the `edges` field is present
- a fragment reference is present (which is likely enough to contain `edges` that we should fetch `pageInfo`).

Put another way, the only time we shouldn't add `pageInfo` is if only connection-level fields are being fetched (ex: `storiesConnection { totalCount }` doesn't need page info)
",josephsavona,2015-09-29 01:53:32
381,2015-09-24 16:29:24,"I have literally never looked at a Babel plugin before. But fine, challenge accepted.

I would think the right way to handle this would just be to extend the `pageInfo` check to cases where a fragment is on a connection type, though, rather than when a field is on a connection. Is there some reason why this would not be a good approach?
",taion,2015-09-29 01:53:32
381,2015-09-24 16:52:18,"We're adding the `pageInfo` during the static transform of the code [here in GraphQLPrinter](https://github.com/facebook/relay/blob/58e45dbb9fd08215884597171ce072551f344c06/scripts/babel-relay-plugin/src/GraphQLPrinter.js#L502-L504). During the transform, we can only look at the current file / GraphQL fragment we're transforming. This means we can't inspect what's inside fragments.

When you want to work on the transform, it will be helpful to create a new test by adding a fixture to [this directory](https://github.com/facebook/relay/tree/58e45dbb9fd08215884597171ce072551f344c06/scripts/babel-relay-plugin/src/__fixtures__).

We could potentially look at this metadata when we generate the query during runtime, but I'm not sure what the implications are of that. I think the heuristic that @josephsavona suggested is pretty good. (How likely is it that you have a fragment just to display the count?)
",kassens,2015-09-29 01:53:32
381,2015-09-24 17:27:55,"@kassens Probably easier just to demonstrate with code what I mean - see https://github.com/facebook/relay/pull/385
",taion,2015-09-29 01:53:32
381,2015-09-29 01:54:01,"Fixed by #385.
",taion,2015-09-29 01:53:32
380,2015-09-24 01:50:48,"Since React Native shows a big red box for `console.error` it can get in the way
of development when working on error handling.

Fixes #366.
",kassens,2015-09-24 17:25:50
380,2015-09-24 01:51:08,"@facebook-github-bot import
",kassens,2015-09-24 17:25:50
380,2015-09-24 02:02:44,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1642265392680062/int_phab to review.
",facebook-github-bot,2015-09-24 17:25:50
379,2015-09-24 01:10:12,"Adds a check that `recordID` is a string, fixes https://github.com/facebook/relay/issues/376
",aweary,2015-10-15 01:10:55
379,2015-09-24 03:54:54,"Awesome - thanks for working on this! Per comments, the `invariant` check should be wherever the `id` value is pulled from the payload object.
",josephsavona,2015-10-15 01:10:55
379,2015-09-24 14:42:25,"Sorry about that @josephsavona, still wrapping my head around the Relay source. I added the checks to `writeRelayUpdatePayload` and `writeRelayQueryPayload`. Let me know if anything else looks off!
",aweary,2015-10-15 01:10:55
379,2015-09-24 15:34:53,"Nice! Bear with me on the back & forth, I just want to help you make this PR even better. There are a few other places in `writeRelayUpdatePayload` that access IDs - for example `deleteRecord` should check that its input `recordID` is a string, and everywhere else in that file where we have the form `payload[ID]`.
",josephsavona,2015-10-15 01:10:55
379,2015-09-24 19:56:04,"@josephsavona I really appreciate it, this is helping me get a better handle on things. I added some additional `invariant` checks for the ID in `writeRelayUpdatePayload` and reformatted per your recommendations.
",aweary,2015-10-15 01:10:55
379,2015-09-26 01:53:13,"@Aweary I got sidetracked but will pull this in first thing next week - thanks again for working on this!
",josephsavona,2015-10-15 01:10:55
379,2015-09-28 14:29:58,"@josephsavona no problem, thanks for bearing with me on it!
",aweary,2015-10-15 01:10:55
379,2015-09-28 15:47:19,"@facebook-github-bot import
",josephsavona,2015-10-15 01:10:55
379,2015-09-28 16:06:20,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1388462424786723/int_phab to review.
",facebook-github-bot,2015-10-15 01:10:55
379,2015-10-08 18:24:28,"@Aweary Just a heads up that I'm making a slightly more extensive version of this change, using Flow types to find places that need invariants. So be patient (please)!
",josephsavona,2015-10-15 01:10:55
379,2015-10-08 18:25:39,"@josephsavona sounds great, thanks for the update!
",aweary,2015-10-15 01:10:55
378,2015-09-23 22:35:57,"I have a `GraphQL` server running that exposes `property` as a root field, with the following schema:

<S_CODE_TOKEN>

It should return a list of `propertyType` items which have properties such as `propertyName`, `propertyDescription`, etc. 

<S_CODE_TOKEN>

`property` is a property of the returned `fields` object and everything works fine with direct queries. Now I also have a Relay app with the route:

<S_CODE_TOKEN>

Which is used by the component

<S_CODE_TOKEN>

The issue is, I'm getting the error:

<S_CODE_TOKEN>

300 is the right number and what I want is a `property` property returned with an array of objects with the `propertyName` and `id`. I thought https://github.com/facebook/relay/pull/361 would fix it, but I've pulled and built the most current version of Relay from this repository and the issue still occurs.
",aweary,2015-09-24 20:08:26
378,2015-09-23 23:11:04,"This relates to #112
",josephsavona,2015-09-24 20:08:26
378,2015-09-24 20:08:26,":+1: closing
",aweary,2015-09-24 20:08:26
377,2015-09-23 22:07:23,"I get 

<S_CODE_TOKEN>

And the app looks like this:

![screen shot 2015-09-24 at 00 08 01](https://cloud.githubusercontent.com/assets/3899/10060309/5f29a81c-6250-11e5-9212-44f45bd471b7.png)

Tried in Chrome and Safari
",davidhq,2015-10-02 10:37:54
377,2015-09-23 22:12:26,"When you use the browser developer tools, can you see what the request/response is from the server?

What node version and OS are you running?
",kassens,2015-10-02 10:37:54
377,2015-09-23 22:15:00,"Sounds like its using CORS and `express-graphql` is [sending a 405 response to the `OPTIONS`call](https://github.com/graphql/express-graphql/issues/14)
",aweary,2015-10-02 10:37:54
377,2015-09-23 22:23:46,"I just tried treasurehunt example, same problem...

`node 4.1.0` on Mavericks

![screen shot 2015-09-24 at 00 23 12](https://cloud.githubusercontent.com/assets/3899/10060631/843393a0-6252-11e5-9847-31eca852b054.png)
",davidhq,2015-10-02 10:37:54
377,2015-09-23 23:05:24,"The `[RWeb]` and `PAGE_LOADED` are not part of Relay. Sounds like you might have some extra layer that would trigger the problem @Aweary referenced?
",kassens,2015-10-02 10:37:54
377,2015-09-23 23:27:48,"Not likely... RWeb is just a Chrome extension but here is the Safari error log:

![screen shot 2015-09-24 at 01 27 07](https://cloud.githubusercontent.com/assets/3899/10061697/7520d496-625b-11e5-9ba7-ea686284ad7c.png)
",davidhq,2015-10-02 10:37:54
377,2015-09-24 14:48:25,"I wasn't able to reproduce this on `4.0.0` or `4.1.1`, did you pull the source directly from this repository and did you make any changes at all? `express-graphql` doesn't support CORS, so the examples work around that by proxying the GraphQL path, but for some reason that doesn't seem to be working for you.
",aweary,2015-10-02 10:37:54
377,2015-09-24 14:54:42,"I didn't do anything extra... I can ask a friend later today to check at his machine.. will report tomorrow if the same happens there
",davidhq,2015-10-02 10:37:54
377,2015-10-02 10:37:54,"The problem was that I had RethinkDB running on 8080 and GraphQL Server couldn't start on that port..

Maybe there should be error message in console if this happens...

thank you for you time
",davidhq,2015-10-02 10:37:54
377,2015-10-02 10:45:44,"I checked again and in case something is already on port 8080, there is still this message:

`GraphQL Server is now running on http://localhost:8080`

in console... should probably detect that and show error in red

Something else I found out:

if I run puma ruby server on this port for example, it somehow gets overriden with GraphQL server but in RethinkDB case, it doesn't
",davidhq,2015-10-02 10:37:54
376,2015-09-23 21:26:29,"<S_CODE_TOKEN>

I had an instance where `dataID` was a being returned as a number from the server and this caused Relay to throw an error.

It should either check that it's a string or coerce. 

<S_CODE_TOKEN>

Or if a numerical ID is something Relay doesn't want to support it should throw a more descriptive error.
I had a pull request ready using the `typeof` check, but figured I'd check with the contributors first.
",aweary,2015-11-02 20:27:56
376,2015-09-23 22:30:31,"Yes, we should have a better error message to make it clear that `id` values are required to be strings (per the [spec](http://facebook.github.io/relay/docs/graphql-object-identification.html#content)). The place to check would be in the response processing phase - `RelayQueryWriter`, `RelayNodeInterface`, maybe `forEachRootCallArg` (anywhere we grab `result.id` from the raw payload) - and add an `invariant` that `id` is a string. 
",josephsavona,2015-11-02 20:27:56
376,2015-09-23 22:31:32,"@Aweary thanks for filing this, good catch!
",josephsavona,2015-11-02 20:27:56
376,2015-09-23 22:38:09,"Awesome, I'll get on this and get a PR going :+1: 
",aweary,2015-11-02 20:27:56
376,2015-11-02 20:27:56,"This was addressed in c54d49d62ac05095fe3fea8325aa2d92c7ca41e8
",josephsavona,2015-11-02 20:27:56
375,2015-09-23 14:59:50,"I have a really simple Relay app at the moment which fails with the error:

<S_CODE_TOKEN>

The query that is supposed to be submitted to my API is, according to the `_printedQuery` property:

<S_CODE_TOKEN>

Which I've verified returns the expected results if I run the query directly against the server using `curl`.  My API is running on a different port so I'm using `Relay.injectNetworkLayer` to point Relay to the proper endpoint. I've noticed that, whenever I start my Relay application, my GraphQL API logs the `request.body` as an empty object, which says to me that its making the request but not with the right information.

Here are my files, as they pertain to the Relay app:

**app.js**

<S_CODE_TOKEN>

**components/Property.js**

<S_CODE_TOKEN>

**routes/AppHomeRoute.js**

<S_CODE_TOKEN>

I'm hoping its just user error, but in any case it shouldn't be returning `undefined` as a reason.
",aweary,2015-09-23 21:03:44
375,2015-09-23 20:47:24,"Looks like the issue was that Relay was setting the `Content-Type` header to `application/json` and my API was set to parse `application/graphql`. 

Should `application/graphql` be supported?
",aweary,2015-09-23 21:03:44
375,2015-09-23 21:02:52,"@Aweary express-graphql supports both.
- `application/json` means the body is JSON, e.g.

<S_CODE_TOKEN>
- `application/graphql` means the body is the query string itself, e.g.

<S_CODE_TOKEN>

The default network layer in Relay always uses `application/json`.
",fson,2015-09-23 21:03:44
375,2015-09-23 21:03:44,"@fson beat me to it - Relay sends JSON, hence `application/json`.
",josephsavona,2015-09-23 21:03:44
375,2015-09-23 21:04:12,":+1: 
",aweary,2015-09-23 21:03:44
374,2015-09-23 08:30:11,"#362 Added unique title for each unique page on the Relay website

![ddilf5dkq-u0pqo-vck9qcsoxzk1p80mj-1cxw09p08](https://cloud.githubusercontent.com/assets/3792228/10040665/7332f598-6192-11e5-9f60-3a5d766bd9b1.png)
",michaelchum,2015-09-24 17:25:50
374,2015-09-23 08:33:18,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-09-24 17:25:50
374,2015-09-23 08:47:49,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-09-24 17:25:50
374,2015-09-23 23:17:47,"Thanks @michaelchum!

@facebook-github-bot import
",kassens,2015-09-24 17:25:50
374,2015-09-23 23:23:10,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1644927629112311/int_phab to review.
",facebook-github-bot,2015-09-24 17:25:50
373,2015-09-23 01:59:03,"I don't know if you're looking for a PR to further elaborate on the use of `rangeBehaviors`, especially around when the connection is refreshed, but it seems like it'd be an improvement to fix the form of the range behavior key used in the existing example.
",taion,2015-09-24 23:50:28
373,2015-09-24 22:53:37,"Thanks!

@facebook-github-bot import
",wincent,2015-09-24 23:50:28
373,2015-09-24 22:56:06,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/471234543048442/int_phab to review.
",facebook-github-bot,2015-09-24 23:50:28
372,2015-09-23 01:53:35,"@schrockn told me to file this -

Currently it appears that there's some code around `startCursor` and `endCursor` in the connection code and the examples. However, it looks like pagination instead uses the per-edge `cursor`s.

It would make it a lot easier to wrap REST APIs with a GraphQL adapter for use with Relay if there were actual support for pagination based on `startCursor` and `endCursor` in `pageInfo` rather than per-edge `cursor`s.

The motivation is that implementations of cursor-based pagination on REST APIs generally only return start and end cursors rather than a cursor per item, so someone wrapping such a backend (assuming it generates opaque cursors) won't actually have access to the per-element cursors that the Relay connection interface requests.

This isn't a show-stopper for me, since I can just modify my backend to return all the cursors, but I think developers trying to wrap REST APIs that they can't change would have an easier time of using Relay connections if they could just specify start and end cursors for each page.
",taion,2015-09-26 09:26:14
372,2015-09-23 15:15:54,"Relay uses the `cursor` from the nodes for pagination because there is no guarantee that users will consistently page through a connection with the same offsets. One part of the app might do first 5, 10, 15, another part could should first 2, 4, 6. Therefore Relay needs a cursor at every edge from which it can correctly paginate. Also, note that `startCursor` and `endCursor` should be _identical_ to the `cursor` value of the first and last edge, respectively.
",josephsavona,2015-09-26 09:26:14
372,2015-09-23 16:11:03,"For a simple/common case where I don't specify e.g. `after` in the args to the connection, I don't see why that's the case.

If component 1 asks for `widgets(first: 10)`, then `widgets(first: 20)`, it seems like Relay only needs the end cursor for the first page to retrieve items 11 through 20 in the connection.

If I have another component that asks for `widgets(first: 3)`, then `widgets(first: 6)`, it seems like Relay should in principle be able to satisfy this request without looking at cursors at all. Furthermore, if this component later goes from `widgets(first: 18)` to `widgets(first: 21)`, Relay could in principle still use the end cursor from above to query just for item 21 in the connection.

Am I missing something here? I'm just outlining something that sounds plausible in my head.

This wouldn't support the case where someone tried to explicitly do `widgets(after: $someCursor, first: $whatever)`, but this seems like a somewhat more rare case, and anyway if the connection only returns start and end cursors, there's no easy way to get ahold of the `$someCursor`.
",taion,2015-09-26 09:26:14
372,2015-09-23 17:56:18,"Actually, I guess you need only `endCursor` when paginating with `first` (or just `startCursor` when paginating with `last`).

I would argue that, on net, the benefit of having an easier way to do pagination that works better when wrapping existing REST APIs can outweigh the extra complexity and potential confusion from having two schemes for cursoring.
",taion,2015-09-26 09:26:14
372,2015-09-24 03:55:24,"@yuzhi can you provide additional context here? I know we discussed this a while back.
",josephsavona,2015-09-26 09:26:14
372,2015-09-26 07:10:43,"Sorry for the slow response! I haven't had much internet access in the last couple of days. Just caught up on this and saw that I got mentioned in slack about the same issue.

##### Context on why Relay gets cursors for each edge

When we were building Relay, we tried to gets data so that it can be cached and support as many views as possible with minimal round trips. As @josephsavona mentioned above, different component can paginate with different page sizes. We only ever need the very last and first cursor to paginate correctly, as @taion mentioned. However, getting cursor on every edge means Relay can always generate the correct `pageInfo`, more specifically `startCursor`, `endCursor` fields, without having to do another round trips to get the proper `pageInfo` for a different page size from the server for a different page size.  It didn't make sense to wait for a server round trip for something that's fetching `first:3` when we already have `first:5`. Having cursor on every edge is also handy when mutations can add and remove edges and might make the very last cursor out of date. In those cases, Relay just have to look at the cursor for the last or first not deleted edge.

##### Work around for existing REST endpoints

Provided that you only ever paginate in one direction with this particular connection (Always use `first:<count>` or always use `last:<count>`), you can just generate cursors for edges with something like `<endCursor> + 'i'` where `i` is the number/distance of edges to the last edge. You can optionally hash it, encode it, and etc. to make it seem more opaque. Just make sure your GraphQL wrapper around your REST endpoint knows how to parse it and strip out the `i` portion before sending the request to your REST endpoint.

Things to avoid:
-  `null` cursors
  - if the last edge gets deleted, Relay won't have any cursors to paginate with, and will have to try to refetch the whole connection.
- repeating the same cursor
  - If multiple edges have the same cursor, when a server response for `(first:5, after: <repeatedCursor>)` comes back, Relay won't know which of all the edges with that cursor to insert the newly fetched edges after.

Let me know if this helps.
",yuzhi,2015-09-26 09:26:14
372,2015-09-26 09:04:29,"Thank you for taking the time to answer. Apologies if this caused you any inconvenience. This wasn't causing me any direct issues - it just seemed a little more difficult than it should have been.

I think I see what you mean now with `startCursor` and `endCursor`. I guess the use case must be something like, for a paginated view rather than an infinite scrolling view, to enable the developer to do something like:

<S_CODE_TOKEN>

Is that right? It wasn't previously clear to me how those two fields could be used since I've only done endless scroll lists that just kept incrementing `first` so far, but I think this makes sense now.

In general it shouldn't be too difficult to modify most backends to generate per-item cursors anyway, and the benefits of Relay minimizing trips to the server even when doing multiple kinds of pagination seem pretty compelling.
",taion,2015-09-26 09:26:14
372,2015-09-26 09:26:14,"On second thought, the ""modifying the backend"" point is completely moot, since if the user ever wants to use a `RANGE_ADD` mutation, then the backend needs to return a cursor for the newly created item, and it's pretty unusual for REST APIs to include a cursor on a `201 CREATED` response to a `POST` request.

The rest of the pagination stuff can be worked around, but the benefit just isn't there. This does mean that most REST APIs are going to need some tweaking to work nicely with Relay connections, but that's probably for the best all around.

Thanks!
",taion,2015-09-26 09:26:14
371,2015-09-23 01:41:18,,drabinowitz,2015-09-23 04:40:26
371,2015-09-23 03:08:16,"Thanks!

@facebook-github-bot shipit
",kassens,2015-09-23 04:40:26
371,2015-09-23 03:31:32,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/479679262205711/int_phab to review.
",facebook-github-bot,2015-09-23 04:40:26
370,2015-09-22 22:05:09,"This PR simplifies the implementation of Relay's public methods for observing the results of queries (this is for only observing changes to the data in the local cache and is _not_ the same as ""live"" queries or server subscriptions). Key changes include:
- Combine the two `Observable` implementations into a single `RelayQueryResultObserver`.
- Consolidate the logic for reading data and managing GC counts by delegating to `GraphQLStoreQueryResolver`.
- Pass a `RelayRecordStore` as an instance to the query resolver as a first step toward making containers use a contextual store.

Todos:
- Refine flow types to support singular/plural results
- Handle root nodes
",josephsavona,2015-10-15 23:15:26
370,2015-10-14 00:02:57,"@facebook-github-bot import
",josephsavona,2015-10-15 23:15:26
370,2015-10-14 00:17:12,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1115266871819414/int_phab to review.
",facebook-github-bot,2015-10-15 23:15:26
369,2015-09-22 21:57:53,"This was missed when the implementation and test were removed. We were able to simplify `RelayContainer` to the point where this manager was no longer necessary.
",josephsavona,2015-09-24 17:25:50
369,2015-09-22 22:50:58,"@facebook-github-bot import
",josephsavona,2015-09-24 17:25:50
369,2015-09-22 22:55:46,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/891123664302863/int_phab to review.
",facebook-github-bot,2015-09-24 17:25:50
368,2015-09-22 17:43:11,"I have a custom scalar that is called `coordinate` that takes a shape like this {x: INT, y: INT}

When I try to do use `getOptimisticResponse` on an `""RANGE_ADD""` I have something like this:

<S_CODE_TOKEN>

but when my container receives this update, coordinate exists, but appears as an empty object without the coordinate attributes. ( coordinate: {**dataID**: ""client:SOMENUMBER""} ). `this.props.point` has the correct value before it is returned in `getOptimisticResponse` as well.

I've also tried something like this, to no success:

<S_CODE_TOKEN>

Wondering if Relay can't support custom scalars in optimistic updating yet?
",juhaelee,2016-05-10 16:04:59
368,2015-09-22 18:01:55,"It looks like that objects can't be passed through a field in `getOptimisticResponse`? I'm getting around this situation currently, by using JSON.stringify(coordinate) and passing that though
",juhaelee,2016-05-10 16:04:59
368,2015-09-22 22:50:39,"@juhaelee What is the fat query for this mutation?
",josephsavona,2016-05-10 16:04:59
368,2015-09-23 03:45:20,"@josephsavona 

<S_CODE_TOKEN>

Here is also my custom scalar for reference: (I'm using Joi for validation)

<S_CODE_TOKEN>
",juhaelee,2016-05-10 16:04:59
368,2015-09-23 15:29:33,"Custom scalar types are a new feature in OSS GraphQL, but it would seem that the value for such a field would have to actually be a scalar, ie, it should serialize to a string, number, or boolean. I think that `JSON.stringify` is the right solution here.
",josephsavona,2016-05-10 16:04:59
368,2015-09-23 16:52:43,"Just to clarify, `JSON.stringify` in `getOptimisticResponse` and not the custom scalar implementation correct?
",juhaelee,2016-05-10 16:04:59
368,2015-09-23 22:32:40,"I'm double-checking my assumption with @dschafer - but yeah, I was thinking  in `getOptimisticPayload`
",josephsavona,2016-05-10 16:04:59
368,2015-09-23 22:53:45,"I looked into this and the problem is in `inferRelayFieldsFromData`, where we attempt to infer the query that would correspond to an optimistic payload: objects are assumed to correspond to records, so in this case Relay traverses `coordinate` as if it were a non-scalar and writes the optimistic values for x/y as if they were subfields.

Using `JSON.stringify` in `getOptimisticResponse` is a temporary workaround, but this means that view code will have to handle both the JSON-stringified value and object value for `coordinate`. Long-term we should evaluate using tracked queries to construct a more correct query to match the optimistic response payload.

cc @yuzhi @yungsters 
",josephsavona,2016-05-10 16:04:59
368,2015-09-23 23:19:43,"Cool, thanks for all your help!
",juhaelee,2016-05-10 16:04:59
368,2015-09-28 17:25:20,"`inferRelayFieldsFromData` does an best effort for inferring queries for optimistic. We didn't intend it to work for every case. It's mainly for basic queries. It doesn't work for fields with calls or custom scalar types. It also doesn't have access to the schema. 
We used to have a way for people to supply custom queries for optimistic payloads for these cases. We should consider bringing that back.
",yuzhi,2016-05-10 16:04:59
368,2016-05-10 16:04:59,"This looks related to #91 - Relay only supports custom ""scalar"" types if those types are JS scalar values - boolean, number, or strings. Let's merge the discussion into #91.
",josephsavona,2016-05-10 16:04:59
367,2015-09-22 16:31:21,"If you `npm install` from any of the projects in `examples/`, Relay will be built (with Gulp/Webpack) twice. It should only be built once.
",steveluscher,2015-09-28 22:55:26
366,2015-09-22 04:03:36,"https://github.com/facebook/relay/commit/a0d80d5f4c9802b5eb6bda4a5d3d2855fb301197

This commit changed to using `console.error()` to report query failures. In a browser, hidden away in dev tools, this doesn't really matter. On React Native however, in development specifically, using `console.error()` rather than `console.log()` causes a red screen of death. This seems like incorrect behavior for relay, as it prevents the developer from handling query errors (such as an unavailable server) gracefully.
",skevy,2015-09-24 17:25:50
366,2015-09-22 04:39:14,"We should probably change this to `console.warn`. What do you think @yungsters?
",kassens,2015-09-24 17:25:50
366,2015-09-22 21:12:26,"When I originally decided on `console.error`, my assumption was that in development, you spend majority of your time assuming the request does not fatal. Under this assumption that server errors are unexpected in development, I thought a big red box was better.

That said, I have not had sufficient experience iterating on a product and its error states. I would be fine with changing this to use `console.warn` if this is a source of pain.
",yungsters,2015-09-24 17:25:50
366,2015-09-23 22:48:05,"The specific use case, if it helps, is the first screen in my app. My graphql endpoint is authenticated, and so when the app first loads (because this first screen is a RelayContainer), the request fails. This is ok - i want to show data on this screen AFTER the user has tapped the 'login w/ Facebook' button.
",skevy,2015-09-24 17:25:50
366,2015-09-24 01:00:49,"Ahh... okay. We should definitely change that to use `console.warn`.
",yungsters,2015-09-24 17:25:50
365,2015-09-22 01:44:53,"I've got this strange issue where sometime part of a fragment would be missing from the actual query.

<S_CODE_TOKEN>

Using react-router-relay for client-side route handling. When the page loads directly into this route, somehow the fragment composer would omit the categories portion, and only fetch back the user and products fields. But if the page initializes in a different route, then navigated to this route, then the query will be whole.

Where should I be looking first to track this problem?
",u9520107,2015-10-06 17:58:09
365,2015-09-22 06:49:49,"The first place I would look at is the network tab on the browser to see if the query is being properly sent and if the server is returning reasonable payloads. 
Can you check that first to see if you find anything useful?
I can suggest a few more places to look after you do that.
It might also be useful if you share more information about the specific route you have and the fragments in the component in question.
",yuzhi,2015-10-06 17:58:09
365,2015-09-22 07:11:51,"The query that was sent to server contains the portion with products, but not categories. This is by printing the raw text received on the server side.
So I think the error happens when Relay is gathering up fragments.
The strange thing is that products and categories are requested on the same fragment. Dunno why one of them goes missing.
",u9520107,2015-10-06 17:58:09
365,2015-09-22 07:38:16,"Can you include more information about what your current route looks like and also what's defined on the schema for `categories`? Did you get any babel transform errors?

cc @josephsavona could this be printer related?
",yuzhi,2015-10-06 17:58:09
365,2015-09-22 07:52:17,"Type Category is basically like this.

<S_CODE_TOKEN>

Type Viewer:

<S_CODE_TOKEN>

Router setup:

<S_CODE_TOKEN>

App queries basically only viewer's id,
Product's fragments: 

<S_CODE_TOKEN>

There are no babel errors. In fact, if the page is loaded via '/test', then navigated to '/products', then the data fetch would be complete. ProductCategories is only missing when I try to access '/products' from the server directly.
",u9520107,2015-10-06 17:58:09
365,2015-09-23 00:35:44,"I understand that the `productCategories` field isn't sent to the server, but is the data for this field available in the component? Is this field queried anywhere else in the app, such that it might have already been cached?
",josephsavona,2015-10-06 17:58:09
365,2015-09-23 00:57:00,"@josephsavona This field would be undefined when the query's missing. This is the only place productCategories is used in a fragment. 
",u9520107,2015-10-06 17:58:09
365,2015-09-23 15:40:01,"Ok, this is definitely weird. Can you produce a minimal repro case? The [Relay playground](http://facebook.github.io/relay/prototyping/playground.html#/) would be perfect for this.
",josephsavona,2015-10-06 17:58:09
365,2015-09-23 16:41:28,"Ok... I can't seem to reproduce this on the Relay playground.

Our team has decided in favor of dropping relay for now, and rely on basic flux architecture, while using graphQL as the query language. So, my hands are pretty much tied at the moment.

I'll try to put together a repro case over the weekend.
",u9520107,2015-10-06 17:58:09
365,2015-09-23 21:18:11,"@u9520107 Yeah, a repro case would be great to have if possible. Thanks again for filing an issue!
",josephsavona,2015-10-06 17:58:09
365,2015-10-06 17:58:09,"We have extensive tests that fields aren't removed from queries unless data exists in the cache. There isn't much we can do without a repro case - @u9520107, let us know if you're able to create one!
",josephsavona,2015-10-06 17:58:09
365,2015-10-07 15:35:57,"Sorry, I am currently caught up on project schedules, and probably won't be able to work on this for a while. I'll try to create a repro case if I can squeeze out some time during next month.
",u9520107,2015-10-06 17:58:09
364,2015-09-21 23:29:55,,vjeux,2015-09-22 00:10:53
364,2015-09-21 23:30:02,"cc @steveluscher 
",vjeux,2015-09-22 00:10:53
364,2015-09-21 23:31:59,"@facebook-github-bot import
",kassens,2015-09-22 00:10:53
364,2015-09-21 23:37:44,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/992031874169670/int_phab to review.
",facebook-github-bot,2015-09-22 00:10:53
363,2015-09-21 23:29:47,"`getQuery` is deprecated and we're trying to get rid of it.
",kassens,2015-09-22 00:00:28
363,2015-09-21 23:31:20,"@facebook-github-bot import
",kassens,2015-09-22 00:00:28
363,2015-09-21 23:31:51,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/874332789288950/int_phab to review.
",facebook-github-bot,2015-09-22 00:00:28
362,2015-09-21 20:43:15,"For instance, the page title for http://facebook.github.io/relay/docs/getting-started.html should be: “Getting Started | Relay Docs” and the page title for http://facebook.github.io/relay/support.html should be “Relay Support”.

The _only_ page that should have the title “Relay | A JavaScript framework for building data-driven React applications” should be the home page.
",steveluscher,2015-09-25 05:18:04
362,2015-09-21 21:03:23,"See https://github.com/facebook/react-native/commit/129d1548a8f8537ee90c17ed1e9d5d5ec35204e0 for how React Native did it.
",zpao,2015-09-25 05:18:04
362,2015-09-24 19:25:48,"Made the changes in #374 exactly as @steveluscher stated but not quite like the React Native website. I think this can be closed!
",michaelchum,2015-09-25 05:18:04
362,2015-09-25 05:18:04,"Thanks for your help @michaelchum!
",kassens,2015-09-25 05:18:04
361,2015-09-21 15:56:11,"Addreses #358 - ensures that when `diffRelayQuery` splits plural root calls into queries per value, that the root call values are arrays of a singular values instead of scalars. This ensures that the check in `RelayOSSNodeInterface` for matching root call / payload plurality passes.
",josephsavona,2015-09-22 00:26:34
361,2015-09-21 16:00:38,"@facebook-github-bot import
",josephsavona,2015-09-22 00:26:34
361,2015-09-21 16:22:20,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1062507993789613/int_phab to review.
",facebook-github-bot,2015-09-22 00:26:34
360,2015-09-21 08:33:18,"Can't find [info](https://facebook.github.io/relay/graphql/mutations.htm) what exactly server should return when mutation fails. 

I guess there should be some particular format for relay, so it somehow contains `clientMutationId` and error, right?
",jardakotesovec,2015-10-04 10:55:40
360,2015-09-22 06:41:12,"cc @dschafer 
",yuzhi,2015-10-04 10:55:40
360,2015-09-22 09:58:07,"For errors on mutations, we usually return a null `data` and non-null `errors`. So we don't return the `clientMutationId` in that case; we haven't needed it, but it's reasonable to return it in some way if that is useful.
",dschafer,2015-10-04 10:55:40
360,2015-09-28 17:13:33,"@jardakotesovec  Is Dan's response what you were looking for?
",yuzhi,2015-10-04 10:55:40
360,2015-10-04 10:55:40,"@yuzhi Yes, thanks. I did not realize that this convention is described directly in graphQL [spec](https://facebook.github.io/graphql/#sec-Errors), so I guess no need to have it explicitly in [graphQL - Relay spec](https://facebook.github.io/relay/graphql/mutations.htm). 

So closing, thanks!
",jardakotesovec,2015-10-04 10:55:40
359,2015-09-21 06:52:15,"After facebook/fbjs#53, the `Error` object will contain the failure response (if any). However, it is a `Response` object (as returned by `fetch`) which has asynchronous `text()` and `json()` methods. By the time `renderFailure` (in `RelayRootContainer`) receives the response, it needs to synchronously resolve to a view, making the response essentially useless.

In the `RelayDefaultNetworkLayer`, we should do something to make the response body useful.
",yungsters,2016-05-10 16:05:37
359,2015-09-21 15:29:30,"Would it be also useful to throw a custom `Error` type, based on like the status code? Or at least provide some meta info of the `Response` in the error.

If I have to do error handling in the `renderFailure` function I probably want to know as much as possible about the response, for example:

<S_CODE_TOKEN>
",emmenko,2016-05-10 16:05:37
359,2015-09-21 16:04:37,"IMHO it would be good enough to ""pre-execute"" `text()` and `json()` of the response and pass down the error that is returned from `fetchWithRetries`. This will give the programmer all information available, what he does with it inside of `renderFailure` is up to himself.
",clentfort,2016-05-10 16:05:37
359,2016-05-10 16:05:37,"Closing due to inactivity - feel free to comment and reopen or send a PR to address!
",josephsavona,2016-05-10 16:05:37
358,2015-09-20 11:47:26,"With a fresh clone of relay, then running `npm install` and `npm start` from examples/star-wars/, going to http://localhost:3000 displays the following error in the console:

> Invariant Violation: RelayOSSNodeInterface: Expected payload for root field `factions` to be a single non-array result, instead received an array with 1 results.
> _markAsRejected @ relay.js:7312
",shanecav,2015-09-22 16:29:33
358,2015-09-20 20:00:41,"cc/ @yungsters
",steveluscher,2015-09-22 16:29:33
358,2015-09-21 07:01:42,"I was able to reproduce the issue.

It seems like when we try to write the payload for `['empire', 'rebels']`, the query we have looks like:

<S_CODE_TOKEN>

I suspect this issue is due to `diffRelayQuery` splitting off the `faction(names: ...)` query and not correctly preserving the `Array`-ness of the argument.
",yungsters,2015-09-22 16:29:33
358,2015-09-22 03:00:37,"be0111d doesn't seem to fix the issue
",kassens,2015-09-22 16:29:33
358,2015-09-22 16:29:33,"@kassens Are you sure you updated? I've confirmed the fix on latest.
",josephsavona,2015-09-22 16:29:33
358,2015-09-22 16:30:37,"@shanecav thanks for reporting this issue, this is fixed on master :-)
",josephsavona,2015-09-22 16:29:33
358,2015-09-22 17:03:44,"Okay, works for me as well now. Not sure what was going on.
",kassens,2015-09-22 16:29:33
358,2015-09-22 21:08:28,"Perfect, thanks @josephsavona!
",shanecav,2015-09-22 16:29:33
358,2016-03-25 04:41:39,"This is what I'm getting. 

<img width=""1440"" alt=""screen shot 2016-03-25 at 12 40 58 am"" src=""https://cloud.githubusercontent.com/assets/95672/14038085/434bd036-f222-11e5-8462-e9aa840523e0.png"">

<img width=""1440"" alt=""screen shot 2016-03-25 at 12 34 22 am"" src=""https://cloud.githubusercontent.com/assets/95672/14038086/4ae453e0-f222-11e5-8bd2-f4a6cb96730e.png"">
",kevinSuttle,2015-09-22 16:29:33
357,2015-09-19 22:49:05,"Not sure if this belongs here or graphql-relay-js.

If you have validation that can only be done on the server, it's not clear how you can notify the client and how to handle it.

I asked about this in Reactiflux and someone pointed out I can throw in `mutateAndGetPayload`, and handle it in the onFailure callback of [update](https://facebook.github.io/relay/docs/api-reference-relay-store.html#update-static-method).

Having a small server-side failure example would be really helpful.
",cesarandreu,2015-09-20 19:58:53
357,2015-09-20 01:08:13,"If you throw in mutateAndGetPayload, the errors will be sent to the browser.
But currently in the onFailure callback, transaction.getError() will return the errors in a string.
If you have multiple errors, their error messages will be listed out.

Come to think about it, this is rather inconvenient if we want to address those errors differently.
Or if I simply want to send an error code and display some error message in the language of the browser.
I think having a way to access the error objects separately is better. This may even allow us to provide more data to the client-side if necessary.
",u9520107,2015-09-20 19:58:53
357,2015-09-20 14:38:09,"@u9520107 transaction.getError() actually [returns an error object](https://github.com/facebook/relay/blob/c67358894c7c48588c48fdd56e726b053e6e5d64/src/mutation/RelayMutationTransaction.js#L122). And it seems you can get an array of the individual errors from `transaction.getError().source.errors`.
",murz,2015-09-20 19:58:53
357,2015-09-20 19:58:53,"This is great discussion. Can we get this on Stack Overflow as a question, where it will endure long after this issue is closed?

https://stackoverflow.com/questions/ask?tags=relayjs

If you think there's something better Relay could be doing here, feel free to open a separate issue with a suggestion.
",steveluscher,2015-09-20 19:58:53
357,2016-08-01 19:19:49,"@cesarandreu  Would love a snippet or a more detailed example of handing server side validation. I see tons of examples of relay but none are geared towards real world scenarios. 

http://stackoverflow.com/questions/38706347/relay-mutation-with-serverside-validation 
",rterysen-openroad,2015-09-20 19:58:53
356,2015-09-19 14:08:07,"I am bit confused as to when to use globalIdField.
Suppose I have a data like this:

<S_CODE_TOKEN>

In terms of actual data structure, the folders are stored within the User object in a document based storage. Folders do have ids so that some other entities may reference it under the context of the user.
So if I give it a global id, does that mean I have to be able to fetch the specific folder from nodeDefinitions. That would mean cycling through all the users in the data base to hunt the folder down.
Is it ok for the id field to be treated as a simple string in this case? If so, what happens if I try to update fields of the folder object?

I guess another way to ask this question is, does every object type that contains an id field counts has a node, and have to implement the node interface?
",u9520107,2015-09-20 19:59:57
356,2015-09-20 19:59:57,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2015-09-20 19:59:57
356,2015-09-21 01:34:38,"As requested:
http://stackoverflow.com/questions/32686133/when-to-use-globalidfield
",u9520107,2015-09-20 19:59:57
355,2015-09-19 04:36:02,"When the playground controller sets the hash to `''`, it caused the browser to scroll the page around. This prevents that.
",steveluscher,2015-09-22 21:45:26
355,2015-09-19 04:36:06,"@facebook-github-bot import
",steveluscher,2015-09-22 21:45:26
355,2015-09-19 04:57:03,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1488258664802403/int_phab to review.
",facebook-github-bot,2015-09-22 21:45:26
354,2015-09-19 03:44:01,"This allows us to do things like make the homepage examples purely static. Your changes will be blown away on every refresh.
",steveluscher,2015-09-21 16:00:25
354,2015-09-19 04:15:50,"@facebook-github-bot import
",steveluscher,2015-09-21 16:00:25
354,2015-09-19 04:18:30,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/177584525909414/int_phab to review.
",facebook-github-bot,2015-09-21 16:00:25
353,2015-09-19 03:16:16,"@facebook-github-bot import
",steveluscher,2015-09-19 03:25:46
353,2015-09-19 03:25:46,"On second thought. I think I need to add an option that lets you opt _out_ of local storage for examples such as these, so that:
1. We don't have to cache bust them when they change
2. You can get yourself out of trouble by refreshing
",steveluscher,2015-09-19 03:25:46
352,2015-09-19 02:57:05,,steveluscher,2015-09-19 03:45:24
352,2015-09-19 02:57:10,"@facebook-github-bot import
",steveluscher,2015-09-19 03:45:24
352,2015-09-19 03:06:46,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/914444438647048/int_phab to review.
",facebook-github-bot,2015-09-19 03:45:24
351,2015-09-19 02:56:44,,steveluscher,2015-09-19 03:40:27
351,2015-09-19 02:56:52,"@facebook-github-bot import
",steveluscher,2015-09-19 03:40:27
351,2015-09-19 03:06:46,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1673154126255521/int_phab to review.
",facebook-github-bot,2015-09-19 03:40:27
350,2015-09-19 02:56:33,,steveluscher,2015-09-19 03:40:26
350,2015-09-19 02:56:36,"@facebook-github-bot import
",steveluscher,2015-09-19 03:40:26
350,2015-09-19 03:06:49,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/513874865436226/int_phab to review.
",facebook-github-bot,2015-09-19 03:40:26
349,2015-09-19 00:57:52,"Contains an update without which we can't publish the website.
",steveluscher,2015-09-19 01:40:28
349,2015-09-19 01:04:16,"@facebook-github-bot import
",steveluscher,2015-09-19 01:40:28
349,2015-09-19 01:06:42,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1610909809173458/int_phab to review.
",facebook-github-bot,2015-09-19 01:40:28
348,2015-09-18 23:19:38,,yungsters,2015-09-19 00:16:32
348,2015-09-18 23:21:40,"If you just say `4` it'll keep updating across the 4 version family (eg, 4.1 is already out and it would install that). Your call.
",zpao,2015-09-19 00:16:32
348,2015-09-18 23:23:42,"Oh, nice!
",yungsters,2015-09-19 00:16:32
348,2015-09-18 23:49:02,"@facebook-github-bot shipit
",yungsters,2015-09-19 00:16:32
348,2015-09-18 23:59:57,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/866299626772665/int_phab to review.
",facebook-github-bot,2015-09-19 00:16:32
348,2016-10-29 13:08:43,"I will not rubber stamp and land your change for you @yungsters!  I can import it for you and you can get your change reviewed by someone though :)
",facebook-github-bot,2015-09-19 00:16:32
347,2015-09-18 22:50:33,"I was looking into the `renderFailure` callback and it actually returns a `Response` object from the `fetch` library. The documentation says it returns an object and you can access the message like `error.message`.

<img width=""660"" alt=""screen shot 2015-09-19 at 00 39 21"" src=""https://cloud.githubusercontent.com/assets/1110551/9972667/2d16935e-5e67-11e5-8794-7c4124e89d4d.png"">

Which one is correct? How should I render the error with the fetch response object?
If I resolve the response and then return the render component I get an error.

<S_CODE_TOKEN>

<img width=""713"" alt=""screen shot 2015-09-19 at 00 48 49"" src=""https://cloud.githubusercontent.com/assets/1110551/9972734/3c23a6d8-5e68-11e5-9ece-32c8ac7c6d8d.png"">
",emmenko,2015-09-19 00:50:24
347,2015-09-19 00:50:24,"You're right! When `fetchWithRetries` errors out, it rejects the promise with an `Error`. When it simply gets tired of retrying, though, it rejects the promise with a `Response` object. It should really be an `Error` object that says “I gave up.”

Do you mind hopping over to `facebook/fbjs` and filing a bug [for this line](https://github.com/facebook/fbjs/blob/master/src/fetch/fetchWithRetries.js#L89) (or send us a PR!).
",steveluscher,2015-09-19 00:50:24
347,2015-09-19 06:04:31,"Will do, thanks!

PS: the error should also contain the parsed response body right? For example the validation response from a malformed graphql query.
",emmenko,2015-09-19 00:50:24
346,2015-09-18 22:16:57,"Do not assume `..` exists as an alias.
",yungsters,2015-09-19 00:10:26
346,2015-09-18 22:52:40,"Doesn't look like I have the right permissions on Travis but I fixed the failure - jest got an update that assumed it was running in node v4 (specifically it it was using an arrow function) and pushed as a patch update.
",zpao,2015-09-19 00:10:26
346,2015-09-18 23:08:25,"@facebook-github-bot import
",steveluscher,2015-09-19 00:10:26
346,2015-09-18 23:13:43,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/157453851263364/int_phab to review.
",facebook-github-bot,2015-09-19 00:10:26
345,2015-09-18 21:34:48,"Note: No relation to “local schema.” It's just a network layer that operates against an in-memory schema.
",steveluscher,2015-09-19 05:25:29
345,2015-09-18 21:36:04,"@facebook-github-bot import
",steveluscher,2015-09-19 05:25:29
345,2015-09-18 21:40:08,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1614902612092910/int_phab to review.
",facebook-github-bot,2015-09-19 05:25:29
344,2015-09-18 18:46:39,"Addresses #307 - We currently assume that mutations have exactly one variable `$input` - however, tracked queries may contain fields with calls that have Enum/InputObject types. These call values must also be printed as variables.

Changes:
- add a `preset` argument to `profilePicture` that accepts an Enum value, as a way of testing call variables in tracked queries
- change `RelayMutationQuery` to accept the value of `$input` as a param and pass it through to `RelayQuery.Node.buildMutation`
- Change the printer to handle variables in mutations the same as they are handled in queries.
- Change `RelayMutationRequest` to return the variables from the printer instead of hard-coding to `$input`
",josephsavona,2015-09-18 23:05:43
344,2015-09-18 18:47:24,"@facebook-github-bot import
",josephsavona,2015-09-18 23:05:43
344,2015-09-18 18:52:50,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/411063092423283/int_phab to review.
",facebook-github-bot,2015-09-18 23:05:43
343,2015-09-18 18:36:04,"Wrote a new ‘Hello World’ app and schema to use as the default code in the Relay Playground, and added a link to the playground in the nav bar.

Complete text of the Hello World app: https://github.com/facebook/relay/blob/a7fd50678f06314f1c3eb351792cc8f7fb5c4724/website-prototyping-tools/HelloApp.js
Complete text of the Hello World schema: https://github.com/facebook/relay/blob/a7fd50678f06314f1c3eb351792cc8f7fb5c4724/website-prototyping-tools/HelloSchema.js
",steveluscher,2015-09-19 02:15:26
343,2015-09-18 21:09:13,"The comments in those files are just beautiful. Makes things very, very clear.
",wincent,2015-09-19 02:15:26
343,2015-09-19 01:47:32,"@facebook-github-bot import
",steveluscher,2015-09-19 02:15:26
343,2015-09-19 01:53:55,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/130722353945076/int_phab to review.
",facebook-github-bot,2015-09-19 02:15:26
342,2015-09-18 17:42:56,"This will enable us to host an instance of the Relay playground on facebook.github.io whose permalinks can be shared. Being able to share playgrounds should make it easy for people to share ideas and bug reports.

This diff enables this while protecting against code injection vulnerabilities. Auto-execution is whitelisted for localhost and wherever a playground is being run in an `<iframe>` on the Relay website (we need this for the tutorial materials). Everywhere else, a mismatch between what you have cached locally and what's in the URL will disable auto-execution and trigger a confirmation dialog. The user will have an opportunity to evaluate the code before choosing to execute it.

![relay](https://cloud.githubusercontent.com/assets/13243/9966456/e9ff9324-5df1-11e5-8810-c5bc2bdd1db1.gif)
",steveluscher,2015-09-19 01:45:28
341,2015-09-18 16:53:17,"A lot of our tests have to write data into the store before testing some other logic. However, the payloads must be manually constructed using `generateRQLFieldAlias()`. It's not a big deal, but it's annoying. 

So this PR adds a new module `transformClientPayload(query: RelayQuery.Node, payload: Payload): Payload` - it accepts payloads where the keys correspond to field names/aliases (which cannot be written into the store as-is), and returns an equivalent payload where keys are renamed to the serialization key of the corresponding field (which _can_ be written to the store). See the unit test for this module for an example, and how it (slightly) simplifies tests that write to the store.

I didn't convert all tests - I wanted to get feedback first.
",josephsavona,2015-09-22 02:25:24
341,2015-09-18 16:54:19,"cc @wincent who had talked about doing something like this a while back.
",josephsavona,2015-09-22 02:25:24
341,2015-09-18 17:19:16,"@facebook-github-bot import
",josephsavona,2015-09-22 02:25:24
341,2015-09-18 17:26:42,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/140817766264897/int_phab to review.
",facebook-github-bot,2015-09-22 02:25:24
341,2015-09-18 18:01:26,"Excellent! Haven't actually looked at the code yet, but I love the idea of this.
",wincent,2015-09-22 02:25:24
340,2015-09-18 07:35:22,"Closes #118
",taion,2015-09-24 17:50:28
340,2015-09-18 07:58:28,"I broke out that last commit just in case I'm doing something wrong in there - would prefer to squash it into the original commit before merging.
",taion,2015-09-24 17:50:28
340,2015-09-18 16:41:41,"Last update is mostly as mentioned, except:
- I'm using `completed` as the last status to match the route
- I don't think I can correctly simplify the range behaviors specified in the mutation:
  - Even when I specify the default value of `""any""` for `status`, any query on the `todos` field that omits explicitly specifying status gets a range behavior key of `''` (instead of `'status(any)'`)
  - If I require the `status` argument to be non-null, then all the mutations that just specify an unterminated `todos` fail GraphQL validation for omitting status in the fat queries, and I don't know how to correctly set those up
  - As mentioned above, if I don't explicitly specify the falsy range behavior for `status(completed)`, Relay re-fetches all the edges when I add a new todo, which seems undesirable
",taion,2015-09-24 17:50:28
340,2015-09-18 16:43:11,"Although strictly speaking the `'': 'append'` range behavior doesn't do anything any more in this example, because I don't have any more unqualified queries on `todos`, but it feels more correct than not to still have it there.
",taion,2015-09-24 17:50:28
340,2015-09-19 04:50:21,"> As mentioned above, if I don't explicitly specify the falsy range behavior for status(completed), Relay re-fetches all the edges when I add a new todo, which seems undesirable

That sounds legit. cc/ @yuzhi
",steveluscher,2015-09-24 17:50:28
340,2015-09-19 04:50:35,"@facebook-github-bot import
",steveluscher,2015-09-24 17:50:28
340,2015-09-19 04:56:54,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1618423181750839/int_phab to review.
",facebook-github-bot,2015-09-24 17:50:28
340,2015-09-19 05:05:59,"Super excited to get this landed. Thanks @taion!
",steveluscher,2015-09-24 17:50:28
340,2015-09-19 05:18:18,"Understanding this range behavior thing is going to be really useful for me.

I squashed the commits, in case you're looking for something without the git autosquash commits.
",taion,2015-09-24 17:50:28
340,2015-09-20 21:25:32,"It's cool. Our robots autosquash them when they land.
",steveluscher,2015-09-24 17:50:28
340,2015-09-23 22:13:06,"PR updated.
",taion,2015-09-24 17:50:28
340,2015-09-23 22:53:27,"Thanks @taion.

Now let's see if this machine wants to obey me:

@facebook-github-bot import
",wincent,2015-09-24 17:50:28
340,2015-09-23 22:57:03,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1618423181750839/int_phab to review.
",facebook-github-bot,2015-09-24 17:50:28
339,2015-09-18 03:57:38,"If I serve up a relay app on say, port 3000, is it possible to configure Relay to make GraphQL requests to another port, or an entirely different domain?

Thanks!
",stevewillard,2015-09-18 04:22:00
339,2015-09-18 04:22:00,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs

(Note that there are already some questions there related to configuring the network layer, such as [this one](http://stackoverflow.com/questions/32494136/injecting-custom-network-url-not-working-relayjs), which may already answer your question for you.)
",wincent,2015-09-18 04:22:00
339,2015-09-18 18:00:12,"Thanks a bunch! That post actually answered my question. I didn't realize  you could do:

<S_CODE_TOKEN>
",stevewillard,2015-09-18 04:22:00
338,2015-09-18 03:25:03,"cc @vjeux 
",josephsavona,2015-09-18 18:10:27
338,2015-09-18 17:49:52,"@facebook-github-bot shipit
",vjeux,2015-09-18 18:10:27
338,2015-09-18 17:51:53,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1650882125196803/int_phab to review.
",facebook-github-bot,2015-09-18 18:10:27
338,2015-09-18 18:03:52,"@facebook-github-bot shipit
",vjeux,2015-09-18 18:10:27
338,2015-09-18 18:05:04,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/1650882125196803/int_phab to review.
",facebook-github-bot,2015-09-18 18:10:27
337,2015-09-18 01:13:48,"I'm following the instructions in the main readme but get this error when I try to `npm install` in the todo example:

> No compatible version found: babel-relay-plugin@'file:../../scripts/babel-relay-plugin/'

Pasting full contents of npm-debug.log below:

0 info it worked if it ends with ok
1 verbose cli [ '/Users/maxwellheiber/.nvm/v0.10.36/bin/node',
1 verbose cli   '/Users/maxwellheiber/.nvm/v0.10.36/bin/npm',
1 verbose cli   'install' ]
2 info using npm@1.4.28
3 info using node@v0.10.36
4 verbose readDependencies using package.json deps
5 verbose install where, deps [ '/Users/maxwellheiber/dev/tut/relay/examples/todo',
5 verbose install   [ 'babel',
5 verbose install     'babel-eslint',
5 verbose install     'babel-loader',
5 verbose install     'babel-relay-plugin',
5 verbose install     'classnames',
5 verbose install     'eslint',
5 verbose install     'eslint-loader',
5 verbose install     'eslint-plugin-react',
5 verbose install     'express',
5 verbose install     'express-graphql',
5 verbose install     'graphql',
5 verbose install     'graphql-relay',
5 verbose install     'react',
5 verbose install     'react-dom',
5 verbose install     'react-relay',
5 verbose install     'todomvc-app-css',
5 verbose install     'todomvc-common',
5 verbose install     'webpack',
5 verbose install     'webpack-dev-server' ] ]
6 info preinstall @
7 verbose unsafe-perm in lifecycle true
8 verbose readDependencies using package.json deps
9 verbose cache add [ 'babel@5.8.23', null ]
10 verbose cache add name=undefined spec=""babel@5.8.23"" args=[""babel@5.8.23"",null]
11 verbose parsed url { protocol: null,
11 verbose parsed url   slashes: null,
11 verbose parsed url   auth: null,
11 verbose parsed url   host: null,
11 verbose parsed url   port: null,
11 verbose parsed url   hostname: null,
11 verbose parsed url   hash: null,
11 verbose parsed url   search: null,
11 verbose parsed url   query: null,
11 verbose parsed url   pathname: 'babel@5.8.23',
11 verbose parsed url   path: 'babel@5.8.23',
11 verbose parsed url   href: 'babel@5.8.23' }
12 verbose cache add [ 'babel-eslint@4.1.0', null ]
13 verbose cache add name=undefined spec=""babel-eslint@4.1.0"" args=[""babel-eslint@4.1.0"",null]
14 verbose parsed url { protocol: null,
14 verbose parsed url   slashes: null,
14 verbose parsed url   auth: null,
14 verbose parsed url   host: null,
14 verbose parsed url   port: null,
14 verbose parsed url   hostname: null,
14 verbose parsed url   hash: null,
14 verbose parsed url   search: null,
14 verbose parsed url   query: null,
14 verbose parsed url   pathname: 'babel-eslint@4.1.0',
14 verbose parsed url   path: 'babel-eslint@4.1.0',
14 verbose parsed url   href: 'babel-eslint@4.1.0' }
15 verbose cache add [ 'babel-loader@5.3.2', null ]
16 verbose cache add name=undefined spec=""babel-loader@5.3.2"" args=[""babel-loader@5.3.2"",null]
17 verbose parsed url { protocol: null,
17 verbose parsed url   slashes: null,
17 verbose parsed url   auth: null,
17 verbose parsed url   host: null,
17 verbose parsed url   port: null,
17 verbose parsed url   hostname: null,
17 verbose parsed url   hash: null,
17 verbose parsed url   search: null,
17 verbose parsed url   query: null,
17 verbose parsed url   pathname: 'babel-loader@5.3.2',
17 verbose parsed url   path: 'babel-loader@5.3.2',
17 verbose parsed url   href: 'babel-loader@5.3.2' }
18 verbose cache add [ 'babel-relay-plugin@file:../../scripts/babel-relay-plugin/',
18 verbose cache add   null ]
19 verbose cache add name=undefined spec=""babel-relay-plugin@file:../../scripts/babel-relay-plugin/"" args=[""babel-relay-plugin@file:../../scripts/babel-relay-plugin/"",null]
20 verbose parsed url { protocol: null,
20 verbose parsed url   slashes: null,
20 verbose parsed url   auth: null,
20 verbose parsed url   host: null,
20 verbose parsed url   port: null,
20 verbose parsed url   hostname: null,
20 verbose parsed url   hash: null,
20 verbose parsed url   search: null,
20 verbose parsed url   query: null,
20 verbose parsed url   pathname: 'babel-relay-plugin@file:../../scripts/babel-relay-plugin/',
20 verbose parsed url   path: 'babel-relay-plugin@file:../../scripts/babel-relay-plugin/',
20 verbose parsed url   href: 'babel-relay-plugin@file:../../scripts/babel-relay-plugin/' }
21 verbose cache add [ 'classnames@^2.1.3', null ]
22 verbose cache add name=undefined spec=""classnames@^2.1.3"" args=[""classnames@^2.1.3"",null]
23 verbose parsed url { protocol: null,
23 verbose parsed url   slashes: null,
23 verbose parsed url   auth: null,
23 verbose parsed url   host: null,
23 verbose parsed url   port: null,
23 verbose parsed url   hostname: null,
23 verbose parsed url   hash: null,
23 verbose parsed url   search: null,
23 verbose parsed url   query: null,
23 verbose parsed url   pathname: 'classnames@^2.1.3',
23 verbose parsed url   path: 'classnames@^2.1.3',
23 verbose parsed url   href: 'classnames@^2.1.3' }
24 verbose cache add name=""babel"" spec=""5.8.23"" args=[""babel"",""5.8.23""]
25 verbose parsed url { protocol: null,
25 verbose parsed url   slashes: null,
25 verbose parsed url   auth: null,
25 verbose parsed url   host: null,
25 verbose parsed url   port: null,
25 verbose parsed url   hostname: null,
25 verbose parsed url   hash: null,
25 verbose parsed url   search: null,
25 verbose parsed url   query: null,
25 verbose parsed url   pathname: '5.8.23',
25 verbose parsed url   path: '5.8.23',
25 verbose parsed url   href: '5.8.23' }
26 verbose addNamed [ 'babel', '5.8.23' ]
27 verbose addNamed [ '5.8.23', '5.8.23' ]
28 verbose cache add name=""babel-eslint"" spec=""4.1.0"" args=[""babel-eslint"",""4.1.0""]
29 verbose parsed url { protocol: null,
29 verbose parsed url   slashes: null,
29 verbose parsed url   auth: null,
29 verbose parsed url   host: null,
29 verbose parsed url   port: null,
29 verbose parsed url   hostname: null,
29 verbose parsed url   hash: null,
29 verbose parsed url   search: null,
29 verbose parsed url   query: null,
29 verbose parsed url   pathname: '4.1.0',
29 verbose parsed url   path: '4.1.0',
29 verbose parsed url   href: '4.1.0' }
30 verbose addNamed [ 'babel-eslint', '4.1.0' ]
31 verbose addNamed [ '4.1.0', '4.1.0' ]
32 verbose cache add name=""babel-loader"" spec=""5.3.2"" args=[""babel-loader"",""5.3.2""]
33 verbose parsed url { protocol: null,
33 verbose parsed url   slashes: null,
33 verbose parsed url   auth: null,
33 verbose parsed url   host: null,
33 verbose parsed url   port: null,
33 verbose parsed url   hostname: null,
33 verbose parsed url   hash: null,
33 verbose parsed url   search: null,
33 verbose parsed url   query: null,
33 verbose parsed url   pathname: '5.3.2',
33 verbose parsed url   path: '5.3.2',
33 verbose parsed url   href: '5.3.2' }
34 verbose addNamed [ 'babel-loader', '5.3.2' ]
35 verbose addNamed [ '5.3.2', '5.3.2' ]
36 verbose cache add name=""babel-relay-plugin"" spec=""file:../../scripts/babel-relay-plugin/"" args=[""babel-relay-plugin"",""file:../../scripts/babel-relay-plugin/""]
37 verbose parsed url { protocol: 'file:',
37 verbose parsed url   slashes: null,
37 verbose parsed url   auth: null,
37 verbose parsed url   host: null,
37 verbose parsed url   port: null,
37 verbose parsed url   hostname: null,
37 verbose parsed url   hash: null,
37 verbose parsed url   search: null,
37 verbose parsed url   query: null,
37 verbose parsed url   pathname: '../../scripts/babel-relay-plugin/',
37 verbose parsed url   path: '../../scripts/babel-relay-plugin/',
37 verbose parsed url   href: 'file:../../scripts/babel-relay-plugin/' }
38 verbose addNamed [ 'babel-relay-plugin',
38 verbose addNamed   'file:../../scripts/babel-relay-plugin/' ]
39 verbose addNamed [ null, null ]
40 verbose cache add name=""classnames"" spec=""^2.1.3"" args=[""classnames"",""^2.1.3""]
41 verbose parsed url { protocol: null,
41 verbose parsed url   slashes: null,
41 verbose parsed url   auth: null,
41 verbose parsed url   host: null,
41 verbose parsed url   port: null,
41 verbose parsed url   hostname: null,
41 verbose parsed url   hash: null,
41 verbose parsed url   search: null,
41 verbose parsed url   query: null,
41 verbose parsed url   pathname: '^2.1.3',
41 verbose parsed url   path: '^2.1.3',
41 verbose parsed url   href: '^2.1.3' }
42 verbose addNamed [ 'classnames', '^2.1.3' ]
43 verbose addNamed [ null, '>=2.1.3-0 <3.0.0-0' ]
44 verbose cache add [ 'eslint@^1.0.0', null ]
45 verbose cache add name=undefined spec=""eslint@^1.0.0"" args=[""eslint@^1.0.0"",null]
46 verbose parsed url { protocol: null,
46 verbose parsed url   slashes: null,
46 verbose parsed url   auth: null,
46 verbose parsed url   host: null,
46 verbose parsed url   port: null,
46 verbose parsed url   hostname: null,
46 verbose parsed url   hash: null,
46 verbose parsed url   search: null,
46 verbose parsed url   query: null,
46 verbose parsed url   pathname: 'eslint@^1.0.0',
46 verbose parsed url   path: 'eslint@^1.0.0',
46 verbose parsed url   href: 'eslint@^1.0.0' }
47 verbose cache add [ 'eslint-loader@^1.0.0', null ]
48 verbose cache add name=undefined spec=""eslint-loader@^1.0.0"" args=[""eslint-loader@^1.0.0"",null]
49 verbose parsed url { protocol: null,
49 verbose parsed url   slashes: null,
49 verbose parsed url   auth: null,
49 verbose parsed url   host: null,
49 verbose parsed url   port: null,
49 verbose parsed url   hostname: null,
49 verbose parsed url   hash: null,
49 verbose parsed url   search: null,
49 verbose parsed url   query: null,
49 verbose parsed url   pathname: 'eslint-loader@^1.0.0',
49 verbose parsed url   path: 'eslint-loader@^1.0.0',
49 verbose parsed url   href: 'eslint-loader@^1.0.0' }
50 verbose cache add [ 'eslint-plugin-react@^3.2.0', null ]
51 verbose cache add name=undefined spec=""eslint-plugin-react@^3.2.0"" args=[""eslint-plugin-react@^3.2.0"",null]
52 verbose parsed url { protocol: null,
52 verbose parsed url   slashes: null,
52 verbose parsed url   auth: null,
52 verbose parsed url   host: null,
52 verbose parsed url   port: null,
52 verbose parsed url   hostname: null,
52 verbose parsed url   hash: null,
52 verbose parsed url   search: null,
52 verbose parsed url   query: null,
52 verbose parsed url   pathname: 'eslint-plugin-react@^3.2.0',
52 verbose parsed url   path: 'eslint-plugin-react@^3.2.0',
52 verbose parsed url   href: 'eslint-plugin-react@^3.2.0' }
53 verbose cache add [ 'express@^4.13.1', null ]
54 verbose cache add name=undefined spec=""express@^4.13.1"" args=[""express@^4.13.1"",null]
55 verbose parsed url { protocol: null,
55 verbose parsed url   slashes: null,
55 verbose parsed url   auth: null,
55 verbose parsed url   host: null,
55 verbose parsed url   port: null,
55 verbose parsed url   hostname: null,
55 verbose parsed url   hash: null,
55 verbose parsed url   search: null,
55 verbose parsed url   query: null,
55 verbose parsed url   pathname: 'express@^4.13.1',
55 verbose parsed url   path: 'express@^4.13.1',
55 verbose parsed url   href: 'express@^4.13.1' }
56 verbose cache add [ 'express-graphql@^0.3.0', null ]
57 verbose cache add name=undefined spec=""express-graphql@^0.3.0"" args=[""express-graphql@^0.3.0"",null]
58 verbose parsed url { protocol: null,
58 verbose parsed url   slashes: null,
58 verbose parsed url   auth: null,
58 verbose parsed url   host: null,
58 verbose parsed url   port: null,
58 verbose parsed url   hostname: null,
58 verbose parsed url   hash: null,
58 verbose parsed url   search: null,
58 verbose parsed url   query: null,
58 verbose parsed url   pathname: 'express-graphql@^0.3.0',
58 verbose parsed url   path: 'express-graphql@^0.3.0',
58 verbose parsed url   href: 'express-graphql@^0.3.0' }
59 verbose cache add [ 'graphql@^0.4.2', null ]
60 verbose cache add name=undefined spec=""graphql@^0.4.2"" args=[""graphql@^0.4.2"",null]
61 verbose parsed url { protocol: null,
61 verbose parsed url   slashes: null,
61 verbose parsed url   auth: null,
61 verbose parsed url   host: null,
61 verbose parsed url   port: null,
61 verbose parsed url   hostname: null,
61 verbose parsed url   hash: null,
61 verbose parsed url   search: null,
61 verbose parsed url   query: null,
61 verbose parsed url   pathname: 'graphql@^0.4.2',
61 verbose parsed url   path: 'graphql@^0.4.2',
61 verbose parsed url   href: 'graphql@^0.4.2' }
62 verbose cache add [ 'graphql-relay@^0.3.1', null ]
63 verbose cache add name=undefined spec=""graphql-relay@^0.3.1"" args=[""graphql-relay@^0.3.1"",null]
64 verbose parsed url { protocol: null,
64 verbose parsed url   slashes: null,
64 verbose parsed url   auth: null,
64 verbose parsed url   host: null,
64 verbose parsed url   port: null,
64 verbose parsed url   hostname: null,
64 verbose parsed url   hash: null,
64 verbose parsed url   search: null,
64 verbose parsed url   query: null,
64 verbose parsed url   pathname: 'graphql-relay@^0.3.1',
64 verbose parsed url   path: 'graphql-relay@^0.3.1',
64 verbose parsed url   href: 'graphql-relay@^0.3.1' }
65 verbose cache add [ 'react@^0.14.0-rc', null ]
66 verbose cache add name=undefined spec=""react@^0.14.0-rc"" args=[""react@^0.14.0-rc"",null]
67 verbose parsed url { protocol: null,
67 verbose parsed url   slashes: null,
67 verbose parsed url   auth: null,
67 verbose parsed url   host: null,
67 verbose parsed url   port: null,
67 verbose parsed url   hostname: null,
67 verbose parsed url   hash: null,
67 verbose parsed url   search: null,
67 verbose parsed url   query: null,
67 verbose parsed url   pathname: 'react@^0.14.0-rc',
67 verbose parsed url   path: 'react@^0.14.0-rc',
67 verbose parsed url   href: 'react@^0.14.0-rc' }
68 verbose cache add [ 'react-dom@^0.14.0-rc', null ]
69 verbose cache add name=undefined spec=""react-dom@^0.14.0-rc"" args=[""react-dom@^0.14.0-rc"",null]
70 verbose parsed url { protocol: null,
70 verbose parsed url   slashes: null,
70 verbose parsed url   auth: null,
70 verbose parsed url   host: null,
70 verbose parsed url   port: null,
70 verbose parsed url   hostname: null,
70 verbose parsed url   hash: null,
70 verbose parsed url   search: null,
70 verbose parsed url   query: null,
70 verbose parsed url   pathname: 'react-dom@^0.14.0-rc',
70 verbose parsed url   path: 'react-dom@^0.14.0-rc',
70 verbose parsed url   href: 'react-dom@^0.14.0-rc' }
71 verbose cache add [ 'react-relay@file:../../', null ]
72 verbose cache add name=undefined spec=""react-relay@file:../../"" args=[""react-relay@file:../../"",null]
73 verbose parsed url { protocol: null,
73 verbose parsed url   slashes: null,
73 verbose parsed url   auth: null,
73 verbose parsed url   host: null,
73 verbose parsed url   port: null,
73 verbose parsed url   hostname: null,
73 verbose parsed url   hash: null,
73 verbose parsed url   search: null,
73 verbose parsed url   query: null,
73 verbose parsed url   pathname: 'react-relay@file:../../',
73 verbose parsed url   path: 'react-relay@file:../../',
73 verbose parsed url   href: 'react-relay@file:../../' }
74 verbose cache add [ 'todomvc-app-css@^2.0.1', null ]
75 verbose cache add name=undefined spec=""todomvc-app-css@^2.0.1"" args=[""todomvc-app-css@^2.0.1"",null]
76 verbose parsed url { protocol: null,
76 verbose parsed url   slashes: null,
76 verbose parsed url   auth: null,
76 verbose parsed url   host: null,
76 verbose parsed url   port: null,
76 verbose parsed url   hostname: null,
76 verbose parsed url   hash: null,
76 verbose parsed url   search: null,
76 verbose parsed url   query: null,
76 verbose parsed url   pathname: 'todomvc-app-css@^2.0.1',
76 verbose parsed url   path: 'todomvc-app-css@^2.0.1',
76 verbose parsed url   href: 'todomvc-app-css@^2.0.1' }
77 verbose cache add [ 'todomvc-common@^1.0.2', null ]
78 verbose cache add name=undefined spec=""todomvc-common@^1.0.2"" args=[""todomvc-common@^1.0.2"",null]
79 verbose parsed url { protocol: null,
79 verbose parsed url   slashes: null,
79 verbose parsed url   auth: null,
79 verbose parsed url   host: null,
79 verbose parsed url   port: null,
79 verbose parsed url   hostname: null,
79 verbose parsed url   hash: null,
79 verbose parsed url   search: null,
79 verbose parsed url   query: null,
79 verbose parsed url   pathname: 'todomvc-common@^1.0.2',
79 verbose parsed url   path: 'todomvc-common@^1.0.2',
79 verbose parsed url   href: 'todomvc-common@^1.0.2' }
80 verbose cache add [ 'webpack@^1.10.5', null ]
81 verbose cache add name=undefined spec=""webpack@^1.10.5"" args=[""webpack@^1.10.5"",null]
82 verbose parsed url { protocol: null,
82 verbose parsed url   slashes: null,
82 verbose parsed url   auth: null,
82 verbose parsed url   host: null,
82 verbose parsed url   port: null,
82 verbose parsed url   hostname: null,
82 verbose parsed url   hash: null,
82 verbose parsed url   search: null,
82 verbose parsed url   query: null,
82 verbose parsed url   pathname: 'webpack@^1.10.5',
82 verbose parsed url   path: 'webpack@^1.10.5',
82 verbose parsed url   href: 'webpack@^1.10.5' }
83 silly lockFile e71331eb-babel-5-8-23 babel@5.8.23
84 verbose lock babel@5.8.23 /Users/maxwellheiber/.npm/e71331eb-babel-5-8-23.lock
85 silly lockFile 8be725bf-babel-eslint-4-1-0 babel-eslint@4.1.0
86 verbose lock babel-eslint@4.1.0 /Users/maxwellheiber/.npm/8be725bf-babel-eslint-4-1-0.lock
87 silly lockFile 5fba6876-babel-loader-5-3-2 babel-loader@5.3.2
88 verbose lock babel-loader@5.3.2 /Users/maxwellheiber/.npm/5fba6876-babel-loader-5-3-2.lock
89 silly lockFile 62a53726--file-scripts-babel-relay-plugin babel-relay-plugin@file:../../scripts/babel-relay-plugin/
90 verbose lock babel-relay-plugin@file:../../scripts/babel-relay-plugin/ /Users/maxwellheiber/.npm/62a53726--file-scripts-babel-relay-plugin.lock
91 silly lockFile d45f3805-classnames-2-1-3 classnames@^2.1.3
92 verbose lock classnames@^2.1.3 /Users/maxwellheiber/.npm/d45f3805-classnames-2-1-3.lock
93 verbose cache add name=""eslint"" spec=""^1.0.0"" args=[""eslint"",""^1.0.0""]
94 verbose parsed url { protocol: null,
94 verbose parsed url   slashes: null,
94 verbose parsed url   auth: null,
94 verbose parsed url   host: null,
94 verbose parsed url   port: null,
94 verbose parsed url   hostname: null,
94 verbose parsed url   hash: null,
94 verbose parsed url   search: null,
94 verbose parsed url   query: null,
94 verbose parsed url   pathname: '^1.0.0',
94 verbose parsed url   path: '^1.0.0',
94 verbose parsed url   href: '^1.0.0' }
95 verbose addNamed [ 'eslint', '^1.0.0' ]
96 verbose addNamed [ null, '>=1.0.0-0 <2.0.0-0' ]
97 silly lockFile 7c3d9d24-eslint-1-0-0 eslint@^1.0.0
98 verbose lock eslint@^1.0.0 /Users/maxwellheiber/.npm/7c3d9d24-eslint-1-0-0.lock
99 verbose cache add name=""eslint-loader"" spec=""^1.0.0"" args=[""eslint-loader"",""^1.0.0""]
100 verbose parsed url { protocol: null,
100 verbose parsed url   slashes: null,
100 verbose parsed url   auth: null,
100 verbose parsed url   host: null,
100 verbose parsed url   port: null,
100 verbose parsed url   hostname: null,
100 verbose parsed url   hash: null,
100 verbose parsed url   search: null,
100 verbose parsed url   query: null,
100 verbose parsed url   pathname: '^1.0.0',
100 verbose parsed url   path: '^1.0.0',
100 verbose parsed url   href: '^1.0.0' }
101 verbose addNamed [ 'eslint-loader', '^1.0.0' ]
102 verbose addNamed [ null, '>=1.0.0-0 <2.0.0-0' ]
103 silly lockFile 811d0e24-eslint-loader-1-0-0 eslint-loader@^1.0.0
104 verbose lock eslint-loader@^1.0.0 /Users/maxwellheiber/.npm/811d0e24-eslint-loader-1-0-0.lock
105 verbose cache add name=""eslint-plugin-react"" spec=""^3.2.0"" args=[""eslint-plugin-react"",""^3.2.0""]
106 verbose parsed url { protocol: null,
106 verbose parsed url   slashes: null,
106 verbose parsed url   auth: null,
106 verbose parsed url   host: null,
106 verbose parsed url   port: null,
106 verbose parsed url   hostname: null,
106 verbose parsed url   hash: null,
106 verbose parsed url   search: null,
106 verbose parsed url   query: null,
106 verbose parsed url   pathname: '^3.2.0',
106 verbose parsed url   path: '^3.2.0',
106 verbose parsed url   href: '^3.2.0' }
107 verbose addNamed [ 'eslint-plugin-react', '^3.2.0' ]
108 verbose addNamed [ null, '>=3.2.0-0 <4.0.0-0' ]
109 silly lockFile f2ad3cb2-eslint-plugin-react-3-2-0 eslint-plugin-react@^3.2.0
110 verbose lock eslint-plugin-react@^3.2.0 /Users/maxwellheiber/.npm/f2ad3cb2-eslint-plugin-react-3-2-0.lock
111 verbose cache add name=""express"" spec=""^4.13.1"" args=[""express"",""^4.13.1""]
112 verbose parsed url { protocol: null,
112 verbose parsed url   slashes: null,
112 verbose parsed url   auth: null,
112 verbose parsed url   host: null,
112 verbose parsed url   port: null,
112 verbose parsed url   hostname: null,
112 verbose parsed url   hash: null,
112 verbose parsed url   search: null,
112 verbose parsed url   query: null,
112 verbose parsed url   pathname: '^4.13.1',
112 verbose parsed url   path: '^4.13.1',
112 verbose parsed url   href: '^4.13.1' }
113 verbose addNamed [ 'express', '^4.13.1' ]
114 verbose addNamed [ null, '>=4.13.1-0 <5.0.0-0' ]
115 silly lockFile f0495473-express-4-13-1 express@^4.13.1
116 verbose lock express@^4.13.1 /Users/maxwellheiber/.npm/f0495473-express-4-13-1.lock
117 verbose cache add name=""express-graphql"" spec=""^0.3.0"" args=[""express-graphql"",""^0.3.0""]
118 verbose parsed url { protocol: null,
118 verbose parsed url   slashes: null,
118 verbose parsed url   auth: null,
118 verbose parsed url   host: null,
118 verbose parsed url   port: null,
118 verbose parsed url   hostname: null,
118 verbose parsed url   hash: null,
118 verbose parsed url   search: null,
118 verbose parsed url   query: null,
118 verbose parsed url   pathname: '^0.3.0',
118 verbose parsed url   path: '^0.3.0',
118 verbose parsed url   href: '^0.3.0' }
119 verbose addNamed [ 'express-graphql', '^0.3.0' ]
120 verbose addNamed [ null, '>=0.3.0-0 <0.4.0-0' ]
121 silly lockFile 46ede1e0-express-graphql-0-3-0 express-graphql@^0.3.0
122 verbose lock express-graphql@^0.3.0 /Users/maxwellheiber/.npm/46ede1e0-express-graphql-0-3-0.lock
123 verbose cache add name=""graphql"" spec=""^0.4.2"" args=[""graphql"",""^0.4.2""]
124 verbose parsed url { protocol: null,
124 verbose parsed url   slashes: null,
124 verbose parsed url   auth: null,
124 verbose parsed url   host: null,
124 verbose parsed url   port: null,
124 verbose parsed url   hostname: null,
124 verbose parsed url   hash: null,
124 verbose parsed url   search: null,
124 verbose parsed url   query: null,
124 verbose parsed url   pathname: '^0.4.2',
124 verbose parsed url   path: '^0.4.2',
124 verbose parsed url   href: '^0.4.2' }
125 verbose addNamed [ 'graphql', '^0.4.2' ]
126 verbose addNamed [ null, '>=0.4.2-0 <0.5.0-0' ]
127 silly lockFile 50658abc-graphql-0-4-2 graphql@^0.4.2
128 verbose lock graphql@^0.4.2 /Users/maxwellheiber/.npm/50658abc-graphql-0-4-2.lock
129 verbose cache add name=""graphql-relay"" spec=""^0.3.1"" args=[""graphql-relay"",""^0.3.1""]
130 verbose parsed url { protocol: null,
130 verbose parsed url   slashes: null,
130 verbose parsed url   auth: null,
130 verbose parsed url   host: null,
130 verbose parsed url   port: null,
130 verbose parsed url   hostname: null,
130 verbose parsed url   hash: null,
130 verbose parsed url   search: null,
130 verbose parsed url   query: null,
130 verbose parsed url   pathname: '^0.3.1',
130 verbose parsed url   path: '^0.3.1',
130 verbose parsed url   href: '^0.3.1' }
131 verbose addNamed [ 'graphql-relay', '^0.3.1' ]
132 verbose addNamed [ null, '>=0.3.1-0 <0.4.0-0' ]
133 silly lockFile 9b209bd9-graphql-relay-0-3-1 graphql-relay@^0.3.1
134 verbose lock graphql-relay@^0.3.1 /Users/maxwellheiber/.npm/9b209bd9-graphql-relay-0-3-1.lock
135 verbose cache add name=""react"" spec=""^0.14.0-rc"" args=[""react"",""^0.14.0-rc""]
136 verbose parsed url { protocol: null,
136 verbose parsed url   slashes: null,
136 verbose parsed url   auth: null,
136 verbose parsed url   host: null,
136 verbose parsed url   port: null,
136 verbose parsed url   hostname: null,
136 verbose parsed url   hash: null,
136 verbose parsed url   search: null,
136 verbose parsed url   query: null,
136 verbose parsed url   pathname: '^0.14.0-rc',
136 verbose parsed url   path: '^0.14.0-rc',
136 verbose parsed url   href: '^0.14.0-rc' }
137 verbose addNamed [ 'react', '^0.14.0-rc' ]
138 verbose addNamed [ null, '>=0.14.0-rc <0.15.0-0' ]
139 silly lockFile cd63a83e-react-0-14-0-rc react@^0.14.0-rc
140 verbose lock react@^0.14.0-rc /Users/maxwellheiber/.npm/cd63a83e-react-0-14-0-rc.lock
141 verbose cache add name=""react-dom"" spec=""^0.14.0-rc"" args=[""react-dom"",""^0.14.0-rc""]
142 verbose parsed url { protocol: null,
142 verbose parsed url   slashes: null,
142 verbose parsed url   auth: null,
142 verbose parsed url   host: null,
142 verbose parsed url   port: null,
142 verbose parsed url   hostname: null,
142 verbose parsed url   hash: null,
142 verbose parsed url   search: null,
142 verbose parsed url   query: null,
142 verbose parsed url   pathname: '^0.14.0-rc',
142 verbose parsed url   path: '^0.14.0-rc',
142 verbose parsed url   href: '^0.14.0-rc' }
143 verbose addNamed [ 'react-dom', '^0.14.0-rc' ]
144 verbose addNamed [ null, '>=0.14.0-rc <0.15.0-0' ]
145 silly lockFile 0db534c4-react-dom-0-14-0-rc react-dom@^0.14.0-rc
146 verbose lock react-dom@^0.14.0-rc /Users/maxwellheiber/.npm/0db534c4-react-dom-0-14-0-rc.lock
147 verbose cache add name=""react-relay"" spec=""file:../../"" args=[""react-relay"",""file:../../""]
148 verbose parsed url { protocol: 'file:',
148 verbose parsed url   slashes: null,
148 verbose parsed url   auth: null,
148 verbose parsed url   host: null,
148 verbose parsed url   port: null,
148 verbose parsed url   hostname: null,
148 verbose parsed url   hash: null,
148 verbose parsed url   search: null,
148 verbose parsed url   query: null,
148 verbose parsed url   pathname: '../../',
148 verbose parsed url   path: '../../',
148 verbose parsed url   href: 'file:../../' }
149 verbose addNamed [ 'react-relay', 'file:../../' ]
150 verbose addNamed [ null, null ]
151 silly lockFile bc541f25-react-relay-file react-relay@file:../../
152 verbose lock react-relay@file:../../ /Users/maxwellheiber/.npm/bc541f25-react-relay-file.lock
153 verbose cache add name=""todomvc-app-css"" spec=""^2.0.1"" args=[""todomvc-app-css"",""^2.0.1""]
154 verbose parsed url { protocol: null,
154 verbose parsed url   slashes: null,
154 verbose parsed url   auth: null,
154 verbose parsed url   host: null,
154 verbose parsed url   port: null,
154 verbose parsed url   hostname: null,
154 verbose parsed url   hash: null,
154 verbose parsed url   search: null,
154 verbose parsed url   query: null,
154 verbose parsed url   pathname: '^2.0.1',
154 verbose parsed url   path: '^2.0.1',
154 verbose parsed url   href: '^2.0.1' }
155 verbose addNamed [ 'todomvc-app-css', '^2.0.1' ]
156 verbose addNamed [ null, '>=2.0.1-0 <3.0.0-0' ]
157 silly lockFile 88a2d1c2-todomvc-app-css-2-0-1 todomvc-app-css@^2.0.1
158 verbose lock todomvc-app-css@^2.0.1 /Users/maxwellheiber/.npm/88a2d1c2-todomvc-app-css-2-0-1.lock
159 verbose cache add name=""todomvc-common"" spec=""^1.0.2"" args=[""todomvc-common"",""^1.0.2""]
160 verbose parsed url { protocol: null,
160 verbose parsed url   slashes: null,
160 verbose parsed url   auth: null,
160 verbose parsed url   host: null,
160 verbose parsed url   port: null,
160 verbose parsed url   hostname: null,
160 verbose parsed url   hash: null,
160 verbose parsed url   search: null,
160 verbose parsed url   query: null,
160 verbose parsed url   pathname: '^1.0.2',
160 verbose parsed url   path: '^1.0.2',
160 verbose parsed url   href: '^1.0.2' }
161 verbose addNamed [ 'todomvc-common', '^1.0.2' ]
162 verbose addNamed [ null, '>=1.0.2-0 <2.0.0-0' ]
163 silly lockFile 7367451d-todomvc-common-1-0-2 todomvc-common@^1.0.2
164 verbose lock todomvc-common@^1.0.2 /Users/maxwellheiber/.npm/7367451d-todomvc-common-1-0-2.lock
165 verbose cache add name=""webpack"" spec=""^1.10.5"" args=[""webpack"",""^1.10.5""]
166 verbose parsed url { protocol: null,
166 verbose parsed url   slashes: null,
166 verbose parsed url   auth: null,
166 verbose parsed url   host: null,
166 verbose parsed url   port: null,
166 verbose parsed url   hostname: null,
166 verbose parsed url   hash: null,
166 verbose parsed url   search: null,
166 verbose parsed url   query: null,
166 verbose parsed url   pathname: '^1.10.5',
166 verbose parsed url   path: '^1.10.5',
166 verbose parsed url   href: '^1.10.5' }
167 verbose addNamed [ 'webpack', '^1.10.5' ]
168 verbose addNamed [ null, '>=1.10.5-0 <2.0.0-0' ]
169 silly lockFile 6290066c-webpack-1-10-5 webpack@^1.10.5
170 verbose lock webpack@^1.10.5 /Users/maxwellheiber/.npm/6290066c-webpack-1-10-5.lock
171 verbose cache add [ 'webpack-dev-server@^1.10.1', null ]
172 verbose cache add name=undefined spec=""webpack-dev-server@^1.10.1"" args=[""webpack-dev-server@^1.10.1"",null]
173 verbose parsed url { protocol: null,
173 verbose parsed url   slashes: null,
173 verbose parsed url   auth: null,
173 verbose parsed url   host: null,
173 verbose parsed url   port: null,
173 verbose parsed url   hostname: null,
173 verbose parsed url   hash: null,
173 verbose parsed url   search: null,
173 verbose parsed url   query: null,
173 verbose parsed url   pathname: 'webpack-dev-server@^1.10.1',
173 verbose parsed url   path: 'webpack-dev-server@^1.10.1',
173 verbose parsed url   href: 'webpack-dev-server@^1.10.1' }
174 verbose cache add name=""webpack-dev-server"" spec=""^1.10.1"" args=[""webpack-dev-server"",""^1.10.1""]
175 verbose parsed url { protocol: null,
175 verbose parsed url   slashes: null,
175 verbose parsed url   auth: null,
175 verbose parsed url   host: null,
175 verbose parsed url   port: null,
175 verbose parsed url   hostname: null,
175 verbose parsed url   hash: null,
175 verbose parsed url   search: null,
175 verbose parsed url   query: null,
175 verbose parsed url   pathname: '^1.10.1',
175 verbose parsed url   path: '^1.10.1',
175 verbose parsed url   href: '^1.10.1' }
176 verbose addNamed [ 'webpack-dev-server', '^1.10.1' ]
177 verbose addNamed [ null, '>=1.10.1-0 <2.0.0-0' ]
178 silly lockFile d5f91d78-webpack-dev-server-1-10-1 webpack-dev-server@^1.10.1
179 verbose lock webpack-dev-server@^1.10.1 /Users/maxwellheiber/.npm/d5f91d78-webpack-dev-server-1-10-1.lock
180 info addNameTag [ 'babel-relay-plugin',
180 info addNameTag   'file:../../scripts/babel-relay-plugin/' ]
181 silly addNameRange { name: 'classnames',
181 silly addNameRange   range: '>=2.1.3-0 <3.0.0-0',
181 silly addNameRange   hasData: false }
182 silly addNameRange { name: 'eslint', range: '>=1.0.0-0 <2.0.0-0', hasData: false }
183 silly addNameRange { name: 'eslint-loader',
183 silly addNameRange   range: '>=1.0.0-0 <2.0.0-0',
183 silly addNameRange   hasData: false }
184 silly addNameRange { name: 'eslint-plugin-react',
184 silly addNameRange   range: '>=3.2.0-0 <4.0.0-0',
184 silly addNameRange   hasData: false }
185 silly addNameRange { name: 'express', range: '>=4.13.1-0 <5.0.0-0', hasData: false }
186 silly addNameRange { name: 'express-graphql',
186 silly addNameRange   range: '>=0.3.0-0 <0.4.0-0',
186 silly addNameRange   hasData: false }
187 silly addNameRange { name: 'graphql', range: '>=0.4.2-0 <0.5.0-0', hasData: false }
188 silly addNameRange { name: 'graphql-relay',
188 silly addNameRange   range: '>=0.3.1-0 <0.4.0-0',
188 silly addNameRange   hasData: false }
189 silly addNameRange { name: 'react', range: '>=0.14.0-rc <0.15.0-0', hasData: false }
190 silly addNameRange { name: 'react-dom',
190 silly addNameRange   range: '>=0.14.0-rc <0.15.0-0',
190 silly addNameRange   hasData: false }
191 info addNameTag [ 'react-relay', 'file:../../' ]
192 silly addNameRange { name: 'todomvc-app-css',
192 silly addNameRange   range: '>=2.0.1-0 <3.0.0-0',
192 silly addNameRange   hasData: false }
193 silly addNameRange { name: 'todomvc-common',
193 silly addNameRange   range: '>=1.0.2-0 <2.0.0-0',
193 silly addNameRange   hasData: false }
194 silly addNameRange { name: 'webpack', range: '>=1.10.5-0 <2.0.0-0', hasData: false }
195 silly addNameRange { name: 'webpack-dev-server',
195 silly addNameRange   range: '>=1.10.1-0 <2.0.0-0',
195 silly addNameRange   hasData: false }
196 verbose request where is /babel-eslint
197 verbose request registry https://registry.npmjs.org/
198 verbose request id 74fef05eccb9a210
199 verbose url raw /babel-eslint
200 verbose url resolving [ 'https://registry.npmjs.org/', './babel-eslint' ]
201 verbose url resolved https://registry.npmjs.org/babel-eslint
202 verbose request where is https://registry.npmjs.org/babel-eslint
203 info trying registry request attempt 1 at 21:09:04
204 verbose etag ""2OVTZ5322LBTA5KSDEUETU3R8""
205 http GET https://registry.npmjs.org/babel-eslint
206 verbose request where is /babel-loader
207 verbose request registry https://registry.npmjs.org/
208 verbose url raw /babel-loader
209 verbose url resolving [ 'https://registry.npmjs.org/', './babel-loader' ]
210 verbose url resolved https://registry.npmjs.org/babel-loader
211 verbose request where is https://registry.npmjs.org/babel-loader
212 info trying registry request attempt 1 at 21:09:04
213 verbose etag ""AEY537SKEM4GJTVCUWJ29WMX9""
214 http GET https://registry.npmjs.org/babel-loader
215 verbose request where is /babel-relay-plugin
216 verbose request registry https://registry.npmjs.org/
217 verbose url raw /babel-relay-plugin
218 verbose url resolving [ 'https://registry.npmjs.org/', './babel-relay-plugin' ]
219 verbose url resolved https://registry.npmjs.org/babel-relay-plugin
220 verbose request where is https://registry.npmjs.org/babel-relay-plugin
221 info trying registry request attempt 1 at 21:09:04
222 verbose etag ""7PMF03FW6E2F3HJKB5H4EP2M7""
223 http GET https://registry.npmjs.org/babel-relay-plugin
224 verbose request where is /babel
225 verbose request registry https://registry.npmjs.org/
226 verbose url raw /babel
227 verbose url resolving [ 'https://registry.npmjs.org/', './babel' ]
228 verbose url resolved https://registry.npmjs.org/babel
229 verbose request where is https://registry.npmjs.org/babel
230 info trying registry request attempt 1 at 21:09:04
231 verbose etag ""A95DCIOOCOXMID33HT2G8ILH7""
232 http GET https://registry.npmjs.org/babel
233 verbose request where is /classnames
234 verbose request registry https://registry.npmjs.org/
235 verbose url raw /classnames
236 verbose url resolving [ 'https://registry.npmjs.org/', './classnames' ]
237 verbose url resolved https://registry.npmjs.org/classnames
238 verbose request where is https://registry.npmjs.org/classnames
239 info trying registry request attempt 1 at 21:09:04
240 verbose etag ""BK3CY2UTJ3G4D7BRTNQA9QV7O""
241 http GET https://registry.npmjs.org/classnames
242 verbose request where is /eslint-loader
243 verbose request registry https://registry.npmjs.org/
244 verbose url raw /eslint-loader
245 verbose url resolving [ 'https://registry.npmjs.org/', './eslint-loader' ]
246 verbose url resolved https://registry.npmjs.org/eslint-loader
247 verbose request where is https://registry.npmjs.org/eslint-loader
248 info trying registry request attempt 1 at 21:09:04
249 verbose etag ""161ZIUP6WPLAXY2IW0V6KE08C""
250 http GET https://registry.npmjs.org/eslint-loader
251 verbose request where is /eslint-plugin-react
252 verbose request registry https://registry.npmjs.org/
253 verbose url raw /eslint-plugin-react
254 verbose url resolving [ 'https://registry.npmjs.org/', './eslint-plugin-react' ]
255 verbose url resolved https://registry.npmjs.org/eslint-plugin-react
256 verbose request where is https://registry.npmjs.org/eslint-plugin-react
257 info trying registry request attempt 1 at 21:09:04
258 verbose etag ""5QDEAO0KVFLOFMB2V04KBC73E""
259 http GET https://registry.npmjs.org/eslint-plugin-react
260 verbose request where is /eslint
261 verbose request registry https://registry.npmjs.org/
262 verbose url raw /eslint
263 verbose url resolving [ 'https://registry.npmjs.org/', './eslint' ]
264 verbose url resolved https://registry.npmjs.org/eslint
265 verbose request where is https://registry.npmjs.org/eslint
266 info trying registry request attempt 1 at 21:09:04
267 verbose etag ""3WIYJ3XR15OV1PB2FU2T1ZBRM""
268 http GET https://registry.npmjs.org/eslint
269 verbose request where is /express-graphql
270 verbose request registry https://registry.npmjs.org/
271 verbose url raw /express-graphql
272 verbose url resolving [ 'https://registry.npmjs.org/', './express-graphql' ]
273 verbose url resolved https://registry.npmjs.org/express-graphql
274 verbose request where is https://registry.npmjs.org/express-graphql
275 info trying registry request attempt 1 at 21:09:04
276 verbose etag ""V2WUAP3APPF3JZM9EE8PN34C""
277 http GET https://registry.npmjs.org/express-graphql
278 verbose request where is /graphql
279 verbose request registry https://registry.npmjs.org/
280 verbose url raw /graphql
281 verbose url resolving [ 'https://registry.npmjs.org/', './graphql' ]
282 verbose url resolved https://registry.npmjs.org/graphql
283 verbose request where is https://registry.npmjs.org/graphql
284 info trying registry request attempt 1 at 21:09:04
285 verbose etag ""2RGVXDY9KWWMZC3SE5I63I1I5""
286 http GET https://registry.npmjs.org/graphql
287 verbose request where is /graphql-relay
288 verbose request registry https://registry.npmjs.org/
289 verbose url raw /graphql-relay
290 verbose url resolving [ 'https://registry.npmjs.org/', './graphql-relay' ]
291 verbose url resolved https://registry.npmjs.org/graphql-relay
292 verbose request where is https://registry.npmjs.org/graphql-relay
293 info trying registry request attempt 1 at 21:09:04
294 verbose etag ""3Z0KQWXKII8H81S76WS53P5BN""
295 http GET https://registry.npmjs.org/graphql-relay
296 verbose request where is /react-dom
297 verbose request registry https://registry.npmjs.org/
298 verbose url raw /react-dom
299 verbose url resolving [ 'https://registry.npmjs.org/', './react-dom' ]
300 verbose url resolved https://registry.npmjs.org/react-dom
301 verbose request where is https://registry.npmjs.org/react-dom
302 info trying registry request attempt 1 at 21:09:04
303 verbose etag ""8TXF4DNMTS5VTMT4ASM7YBZND""
304 http GET https://registry.npmjs.org/react-dom
305 verbose request where is /react
306 verbose request registry https://registry.npmjs.org/
307 verbose url raw /react
308 verbose url resolving [ 'https://registry.npmjs.org/', './react' ]
309 verbose url resolved https://registry.npmjs.org/react
310 verbose request where is https://registry.npmjs.org/react
311 info trying registry request attempt 1 at 21:09:04
312 verbose etag ""27XESAUSL8EVM7SPH201LO8EY""
313 http GET https://registry.npmjs.org/react
314 verbose request where is /react-relay
315 verbose request registry https://registry.npmjs.org/
316 verbose url raw /react-relay
317 verbose url resolving [ 'https://registry.npmjs.org/', './react-relay' ]
318 verbose url resolved https://registry.npmjs.org/react-relay
319 verbose request where is https://registry.npmjs.org/react-relay
320 info trying registry request attempt 1 at 21:09:04
321 verbose etag ""6Y8PAOJGTTEFCJQ6X7MBOIEHY""
322 http GET https://registry.npmjs.org/react-relay
323 verbose request where is /todomvc-app-css
324 verbose request registry https://registry.npmjs.org/
325 verbose url raw /todomvc-app-css
326 verbose url resolving [ 'https://registry.npmjs.org/', './todomvc-app-css' ]
327 verbose url resolved https://registry.npmjs.org/todomvc-app-css
328 verbose request where is https://registry.npmjs.org/todomvc-app-css
329 info trying registry request attempt 1 at 21:09:04
330 verbose etag ""6WCTF55F2O1LQVC1IWI9OZ9QU""
331 http GET https://registry.npmjs.org/todomvc-app-css
332 verbose request where is /todomvc-common
333 verbose request registry https://registry.npmjs.org/
334 verbose url raw /todomvc-common
335 verbose url resolving [ 'https://registry.npmjs.org/', './todomvc-common' ]
336 verbose url resolved https://registry.npmjs.org/todomvc-common
337 verbose request where is https://registry.npmjs.org/todomvc-common
338 info trying registry request attempt 1 at 21:09:04
339 verbose etag ""46EYMTHTBT7P6EZWIWC69HYEE""
340 http GET https://registry.npmjs.org/todomvc-common
341 verbose request where is /express
342 verbose request registry https://registry.npmjs.org/
343 verbose url raw /express
344 verbose url resolving [ 'https://registry.npmjs.org/', './express' ]
345 verbose url resolved https://registry.npmjs.org/express
346 verbose request where is https://registry.npmjs.org/express
347 info trying registry request attempt 1 at 21:09:04
348 verbose etag ""1SG62H64ICJIKA35JKW49W7LF""
349 http GET https://registry.npmjs.org/express
350 verbose request where is /webpack-dev-server
351 verbose request registry https://registry.npmjs.org/
352 verbose url raw /webpack-dev-server
353 verbose url resolving [ 'https://registry.npmjs.org/', './webpack-dev-server' ]
354 verbose url resolved https://registry.npmjs.org/webpack-dev-server
355 verbose request where is https://registry.npmjs.org/webpack-dev-server
356 info trying registry request attempt 1 at 21:09:04
357 verbose etag ""142C350G1FZOZU5Y2YF2H5ZHT""
358 http GET https://registry.npmjs.org/webpack-dev-server
359 verbose request where is /webpack
360 verbose request registry https://registry.npmjs.org/
361 verbose url raw /webpack
362 verbose url resolving [ 'https://registry.npmjs.org/', './webpack' ]
363 verbose url resolved https://registry.npmjs.org/webpack
364 verbose request where is https://registry.npmjs.org/webpack
365 info trying registry request attempt 1 at 21:09:04
366 verbose etag ""2MRUTL6AKS1VN9ZV8XKS9MCFA""
367 http GET https://registry.npmjs.org/webpack
368 http 304 https://registry.npmjs.org/babel
369 silly registry.get cb [ 304,
369 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:33 GMT',
369 silly registry.get     via: '1.1 varnish',
369 silly registry.get     'cache-control': 'max-age=60',
369 silly registry.get     etag: '""A95DCIOOCOXMID33HT2G8ILH7""',
369 silly registry.get     age: '58',
369 silly registry.get     connection: 'keep-alive',
369 silly registry.get     'x-served-by': 'cache-jfk1031-JFK',
369 silly registry.get     'x-cache': 'HIT',
369 silly registry.get     'x-cache-hits': '1',
369 silly registry.get     'x-timer': 'S1442538393.989592,VS0,VE1',
369 silly registry.get     vary: 'Accept' } ]
370 verbose etag https://registry.npmjs.org/babel from cache
371 http 304 https://registry.npmjs.org/classnames
372 silly registry.get cb [ 304,
372 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:33 GMT',
372 silly registry.get     via: '1.1 varnish',
372 silly registry.get     'cache-control': 'max-age=60',
372 silly registry.get     etag: '""BK3CY2UTJ3G4D7BRTNQA9QV7O""',
372 silly registry.get     age: '0',
372 silly registry.get     connection: 'keep-alive',
372 silly registry.get     'x-served-by': 'cache-jfk1026-JFK',
372 silly registry.get     'x-cache': 'HIT',
372 silly registry.get     'x-cache-hits': '1',
372 silly registry.get     'x-timer': 'S1442538393.994959,VS0,VE22',
372 silly registry.get     vary: 'Accept' } ]
373 verbose etag https://registry.npmjs.org/classnames from cache
374 http 304 https://registry.npmjs.org/babel-relay-plugin
375 silly registry.get cb [ 304,
375 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:33 GMT',
375 silly registry.get     via: '1.1 varnish',
375 silly registry.get     'cache-control': 'max-age=60',
375 silly registry.get     etag: '""7PMF03FW6E2F3HJKB5H4EP2M7""',
375 silly registry.get     age: '0',
375 silly registry.get     connection: 'keep-alive',
375 silly registry.get     'x-served-by': 'cache-jfk1022-JFK',
375 silly registry.get     'x-cache': 'MISS',
375 silly registry.get     'x-cache-hits': '0',
375 silly registry.get     'x-timer': 'S1442538393.995558,VS0,VE23',
375 silly registry.get     vary: 'Accept' } ]
376 verbose etag https://registry.npmjs.org/babel-relay-plugin from cache
377 silly addNameRange number 2 { name: 'classnames',
377 silly addNameRange   range: '>=2.1.3-0 <3.0.0-0',
377 silly addNameRange   hasData: true }
378 silly addNameRange versions [ 'classnames',
378 silly addNameRange   [ '1.0.0',
378 silly addNameRange     '1.1.0',
378 silly addNameRange     '1.1.1',
378 silly addNameRange     '1.1.2',
378 silly addNameRange     '1.1.3',
378 silly addNameRange     '1.1.4',
378 silly addNameRange     '1.2.0',
378 silly addNameRange     '1.2.1',
378 silly addNameRange     '1.2.2',
378 silly addNameRange     '2.0.0',
378 silly addNameRange     '2.1.0',
378 silly addNameRange     '2.1.1',
378 silly addNameRange     '2.1.2',
378 silly addNameRange     '2.1.3' ] ]
379 verbose addNamed [ 'classnames', '2.1.3' ]
380 verbose addNamed [ '2.1.3', '2.1.3' ]
381 silly lockFile a679c1db-classnames-2-1-3 classnames@2.1.3
382 verbose lock classnames@2.1.3 /Users/maxwellheiber/.npm/a679c1db-classnames-2-1-3.lock
383 http 304 https://registry.npmjs.org/babel-loader
384 silly registry.get cb [ 304,
384 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
384 silly registry.get     via: '1.1 varnish',
384 silly registry.get     'cache-control': 'max-age=60',
384 silly registry.get     etag: '""AEY537SKEM4GJTVCUWJ29WMX9""',
384 silly registry.get     age: '0',
384 silly registry.get     connection: 'keep-alive',
384 silly registry.get     'x-served-by': 'cache-jfk1029-JFK',
384 silly registry.get     'x-cache': 'HIT',
384 silly registry.get     'x-cache-hits': '1',
384 silly registry.get     'x-timer': 'S1442538394.001127,VS0,VE21',
384 silly registry.get     vary: 'Accept' } ]
385 verbose etag https://registry.npmjs.org/babel-loader from cache
386 silly lockFile 62a53726--file-scripts-babel-relay-plugin babel-relay-plugin@file:../../scripts/babel-relay-plugin/
387 silly lockFile 62a53726--file-scripts-babel-relay-plugin babel-relay-plugin@file:../../scripts/babel-relay-plugin/
388 silly lockFile e71331eb-babel-5-8-23 babel@5.8.23
389 silly lockFile e71331eb-babel-5-8-23 babel@5.8.23
390 silly lockFile a679c1db-classnames-2-1-3 classnames@2.1.3
391 silly lockFile a679c1db-classnames-2-1-3 classnames@2.1.3
392 silly lockFile d45f3805-classnames-2-1-3 classnames@^2.1.3
393 silly lockFile d45f3805-classnames-2-1-3 classnames@^2.1.3
394 silly lockFile 5fba6876-babel-loader-5-3-2 babel-loader@5.3.2
395 silly lockFile 5fba6876-babel-loader-5-3-2 babel-loader@5.3.2
396 http 304 https://registry.npmjs.org/eslint-plugin-react
397 silly registry.get cb [ 304,
397 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
397 silly registry.get     via: '1.1 varnish',
397 silly registry.get     'cache-control': 'max-age=60',
397 silly registry.get     etag: '""5QDEAO0KVFLOFMB2V04KBC73E""',
397 silly registry.get     age: '58',
397 silly registry.get     connection: 'keep-alive',
397 silly registry.get     'x-served-by': 'cache-jfk1026-JFK',
397 silly registry.get     'x-cache': 'HIT',
397 silly registry.get     'x-cache-hits': '1',
397 silly registry.get     'x-timer': 'S1442538394.040057,VS0,VE0',
397 silly registry.get     vary: 'Accept' } ]
398 verbose etag https://registry.npmjs.org/eslint-plugin-react from cache
399 silly addNameRange number 2 { name: 'eslint-plugin-react',
399 silly addNameRange   range: '>=3.2.0-0 <4.0.0-0',
399 silly addNameRange   hasData: true }
400 silly addNameRange versions [ 'eslint-plugin-react',
400 silly addNameRange   [ '1.0.0',
400 silly addNameRange     '1.1.0',
400 silly addNameRange     '1.2.0',
400 silly addNameRange     '1.2.1',
400 silly addNameRange     '1.2.2',
400 silly addNameRange     '1.3.0',
400 silly addNameRange     '1.4.0',
400 silly addNameRange     '1.4.1',
400 silly addNameRange     '1.5.0',
400 silly addNameRange     '1.6.0',
400 silly addNameRange     '1.6.1',
400 silly addNameRange     '2.0.0',
400 silly addNameRange     '2.0.1',
400 silly addNameRange     '2.0.2',
400 silly addNameRange     '2.1.0',
400 silly addNameRange     '2.1.1',
400 silly addNameRange     '2.2.0',
400 silly addNameRange     '2.3.0',
400 silly addNameRange     '2.4.0',
400 silly addNameRange     '2.5.0',
400 silly addNameRange     '2.5.1',
400 silly addNameRange     '2.5.2',
400 silly addNameRange     '2.6.0',
400 silly addNameRange     '2.6.1',
400 silly addNameRange     '2.6.2',
400 silly addNameRange     '2.6.3',
400 silly addNameRange     '2.6.4',
400 silly addNameRange     '2.7.0',
400 silly addNameRange     '2.7.1',
400 silly addNameRange     '3.0.0',
400 silly addNameRange     '3.1.0',
400 silly addNameRange     '3.2.0',
400 silly addNameRange     '3.2.1',
400 silly addNameRange     '3.2.2',
400 silly addNameRange     '3.2.3',
400 silly addNameRange     '3.3.0',
400 silly addNameRange     '3.3.1',
400 silly addNameRange     '3.3.2',
400 silly addNameRange     '3.4.0',
400 silly addNameRange     '3.4.1' ] ]
401 verbose addNamed [ 'eslint-plugin-react', '3.4.1' ]
402 verbose addNamed [ '3.4.1', '3.4.1' ]
403 silly lockFile 934bb42e-eslint-plugin-react-3-4-1 eslint-plugin-react@3.4.1
404 verbose lock eslint-plugin-react@3.4.1 /Users/maxwellheiber/.npm/934bb42e-eslint-plugin-react-3-4-1.lock
405 silly lockFile 934bb42e-eslint-plugin-react-3-4-1 eslint-plugin-react@3.4.1
406 silly lockFile 934bb42e-eslint-plugin-react-3-4-1 eslint-plugin-react@3.4.1
407 silly lockFile f2ad3cb2-eslint-plugin-react-3-2-0 eslint-plugin-react@^3.2.0
408 silly lockFile f2ad3cb2-eslint-plugin-react-3-2-0 eslint-plugin-react@^3.2.0
409 http 304 https://registry.npmjs.org/eslint-loader
410 silly registry.get cb [ 304,
410 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
410 silly registry.get     via: '1.1 varnish',
410 silly registry.get     'cache-control': 'max-age=60',
410 silly registry.get     etag: '""161ZIUP6WPLAXY2IW0V6KE08C""',
410 silly registry.get     age: '0',
410 silly registry.get     connection: 'keep-alive',
410 silly registry.get     'x-served-by': 'cache-jfk1031-JFK',
410 silly registry.get     'x-cache': 'MISS',
410 silly registry.get     'x-cache-hits': '0',
410 silly registry.get     'x-timer': 'S1442538394.017828,VS0,VE45',
410 silly registry.get     vary: 'Accept' } ]
411 verbose etag https://registry.npmjs.org/eslint-loader from cache
412 http 304 https://registry.npmjs.org/babel-eslint
413 silly registry.get cb [ 304,
413 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:33 GMT',
413 silly registry.get     via: '1.1 varnish',
413 silly registry.get     'cache-control': 'max-age=60',
413 silly registry.get     etag: '""2OVTZ5322LBTA5KSDEUETU3R8""',
413 silly registry.get     age: '0',
413 silly registry.get     connection: 'keep-alive',
413 silly registry.get     'x-served-by': 'cache-jfk1022-JFK',
413 silly registry.get     'x-cache': 'HIT',
413 silly registry.get     'x-cache-hits': '1',
413 silly registry.get     'x-timer': 'S1442538393.989035,VS0,VE84',
413 silly registry.get     vary: 'Accept' } ]
414 verbose etag https://registry.npmjs.org/babel-eslint from cache
415 silly addNameRange number 2 { name: 'eslint-loader',
415 silly addNameRange   range: '>=1.0.0-0 <2.0.0-0',
415 silly addNameRange   hasData: true }
416 silly addNameRange versions [ 'eslint-loader',
416 silly addNameRange   [ '0.1.0',
416 silly addNameRange     '0.2.0',
416 silly addNameRange     '0.2.1',
416 silly addNameRange     '0.3.0',
416 silly addNameRange     '0.4.0',
416 silly addNameRange     '0.5.0',
416 silly addNameRange     '0.6.0',
416 silly addNameRange     '0.7.0',
416 silly addNameRange     '0.8.0',
416 silly addNameRange     '0.9.0',
416 silly addNameRange     '0.10.0',
416 silly addNameRange     '0.11.0',
416 silly addNameRange     '0.11.1',
416 silly addNameRange     '0.11.2',
416 silly addNameRange     '0.12.0',
416 silly addNameRange     '0.13.0',
416 silly addNameRange     '0.14.0',
416 silly addNameRange     '0.14.1',
416 silly addNameRange     '0.14.2',
416 silly addNameRange     '1.0.0' ] ]
417 verbose addNamed [ 'eslint-loader', '1.0.0' ]
418 verbose addNamed [ '1.0.0', '1.0.0' ]
419 silly lockFile 13215381-eslint-loader-1-0-0 eslint-loader@1.0.0
420 verbose lock eslint-loader@1.0.0 /Users/maxwellheiber/.npm/13215381-eslint-loader-1-0-0.lock
421 http 304 https://registry.npmjs.org/express-graphql
422 silly registry.get cb [ 304,
422 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
422 silly registry.get     via: '1.1 varnish',
422 silly registry.get     'cache-control': 'max-age=60',
422 silly registry.get     etag: '""V2WUAP3APPF3JZM9EE8PN34C""',
422 silly registry.get     age: '0',
422 silly registry.get     connection: 'keep-alive',
422 silly registry.get     'x-served-by': 'cache-jfk1029-JFK',
422 silly registry.get     'x-cache': 'MISS',
422 silly registry.get     'x-cache-hits': '0',
422 silly registry.get     'x-timer': 'S1442538394.054880,VS0,VE25',
422 silly registry.get     vary: 'Accept' } ]
423 verbose etag https://registry.npmjs.org/express-graphql from cache
424 silly lockFile 13215381-eslint-loader-1-0-0 eslint-loader@1.0.0
425 silly lockFile 13215381-eslint-loader-1-0-0 eslint-loader@1.0.0
426 silly lockFile 811d0e24-eslint-loader-1-0-0 eslint-loader@^1.0.0
427 silly lockFile 811d0e24-eslint-loader-1-0-0 eslint-loader@^1.0.0
428 silly addNameRange number 2 { name: 'express-graphql',
428 silly addNameRange   range: '>=0.3.0-0 <0.4.0-0',
428 silly addNameRange   hasData: true }
429 silly addNameRange versions [ 'express-graphql', [ '0.1.0', '0.1.1', '0.2.0', '0.3.0' ] ]
430 verbose addNamed [ 'express-graphql', '0.3.0' ]
431 verbose addNamed [ '0.3.0', '0.3.0' ]
432 silly lockFile f1a4bce1-express-graphql-0-3-0 express-graphql@0.3.0
433 verbose lock express-graphql@0.3.0 /Users/maxwellheiber/.npm/f1a4bce1-express-graphql-0-3-0.lock
434 silly lockFile 8be725bf-babel-eslint-4-1-0 babel-eslint@4.1.0
435 silly lockFile 8be725bf-babel-eslint-4-1-0 babel-eslint@4.1.0
436 silly lockFile f1a4bce1-express-graphql-0-3-0 express-graphql@0.3.0
437 silly lockFile f1a4bce1-express-graphql-0-3-0 express-graphql@0.3.0
438 silly lockFile 46ede1e0-express-graphql-0-3-0 express-graphql@^0.3.0
439 silly lockFile 46ede1e0-express-graphql-0-3-0 express-graphql@^0.3.0
440 http 304 https://registry.npmjs.org/react
441 silly registry.get cb [ 304,
441 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
441 silly registry.get     via: '1.1 varnish',
441 silly registry.get     'cache-control': 'max-age=60',
441 silly registry.get     etag: '""27XESAUSL8EVM7SPH201LO8EY""',
441 silly registry.get     age: '23',
441 silly registry.get     connection: 'keep-alive',
441 silly registry.get     'x-served-by': 'cache-jfk1029-JFK',
441 silly registry.get     'x-cache': 'HIT',
441 silly registry.get     'x-cache-hits': '1',
441 silly registry.get     'x-timer': 'S1442538394.109511,VS0,VE0',
441 silly registry.get     vary: 'Accept' } ]
442 verbose etag https://registry.npmjs.org/react from cache
443 silly addNameRange number 2 { name: 'react', range: '>=0.14.0-rc <0.15.0-0', hasData: true }
444 silly addNameRange versions [ 'react',
444 silly addNameRange   [ '0.0.1',
444 silly addNameRange     '0.0.2',
444 silly addNameRange     '0.0.3',
444 silly addNameRange     '0.1.2',
444 silly addNameRange     '0.2.0',
444 silly addNameRange     '0.2.1',
444 silly addNameRange     '0.2.2',
444 silly addNameRange     '0.2.3',
444 silly addNameRange     '0.2.4',
444 silly addNameRange     '0.2.5',
444 silly addNameRange     '0.2.6',
444 silly addNameRange     '0.3.0',
444 silly addNameRange     '0.3.4',
444 silly addNameRange     '0.3.5',
444 silly addNameRange     '0.5.0',
444 silly addNameRange     '0.5.1',
444 silly addNameRange     '0.5.2',
444 silly addNameRange     '0.6.0',
444 silly addNameRange     '0.6.1',
444 silly addNameRange     '0.6.2',
444 silly addNameRange     '0.6.3',
444 silly addNameRange     '0.7.0',
444 silly addNameRange     '0.7.1',
444 silly addNameRange     '0.8.0',
444 silly addNameRange     '0.9.0-rc1',
444 silly addNameRange     '0.9.0',
444 silly addNameRange     '0.10.0-rc1',
444 silly addNameRange     '0.10.0',
444 silly addNameRange     '0.11.0-rc1',
444 silly addNameRange     '0.11.0',
444 silly addNameRange     '0.11.1',
444 silly addNameRange     '0.11.2',
444 silly addNameRange     '0.12.0-rc1',
444 silly addNameRange     '0.12.0',
444 silly addNameRange     '0.12.1',
444 silly addNameRange     '0.12.2',
444 silly addNameRange     '0.13.0-alpha.1',
444 silly addNameRange     '0.13.0-alpha.2',
444 silly addNameRange     '0.13.0-beta.1',
444 silly addNameRange     '0.13.0-beta.2',
444 silly addNameRange     '0.13.0-rc1',
444 silly addNameRange     '0.13.0-rc2',
444 silly addNameRange     '0.13.0',
444 silly addNameRange     '0.13.1',
444 silly addNameRange     '0.13.2',
444 silly addNameRange     '0.13.3',
444 silly addNameRange     '0.14.0-alpha1',
444 silly addNameRange     '0.14.0-alpha2',
444 silly addNameRange     '0.14.0-alpha3',
444 silly addNameRange     '0.14.0-beta1',
444 silly addNameRange     '0.14.0-beta2',
444 silly addNameRange     '0.14.0-beta3',
444 silly addNameRange     '0.14.0-rc1' ] ]
445 verbose addNamed [ 'react', '0.14.0-rc1' ]
446 verbose addNamed [ '0.14.0-rc1', '0.14.0-rc1' ]
447 silly lockFile c36ac3df-react-0-14-0-rc1 react@0.14.0-rc1
448 verbose lock react@0.14.0-rc1 /Users/maxwellheiber/.npm/c36ac3df-react-0-14-0-rc1.lock
449 http 304 https://registry.npmjs.org/graphql-relay
450 silly registry.get cb [ 304,
450 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
450 silly registry.get     via: '1.1 varnish',
450 silly registry.get     'cache-control': 'max-age=60',
450 silly registry.get     etag: '""3Z0KQWXKII8H81S76WS53P5BN""',
450 silly registry.get     age: '0',
450 silly registry.get     connection: 'keep-alive',
450 silly registry.get     'x-served-by': 'cache-jfk1031-JFK',
450 silly registry.get     'x-cache': 'MISS',
450 silly registry.get     'x-cache-hits': '0',
450 silly registry.get     'x-timer': 'S1442538394.098280,VS0,VE19',
450 silly registry.get     vary: 'Accept' } ]
451 verbose etag https://registry.npmjs.org/graphql-relay from cache
452 silly lockFile c36ac3df-react-0-14-0-rc1 react@0.14.0-rc1
453 silly lockFile c36ac3df-react-0-14-0-rc1 react@0.14.0-rc1
454 silly lockFile cd63a83e-react-0-14-0-rc react@^0.14.0-rc
455 silly lockFile cd63a83e-react-0-14-0-rc react@^0.14.0-rc
456 silly addNameRange number 2 { name: 'graphql-relay',
456 silly addNameRange   range: '>=0.3.1-0 <0.4.0-0',
456 silly addNameRange   hasData: true }
457 silly addNameRange versions [ 'graphql-relay',
457 silly addNameRange   [ '0.1.0', '0.2.0', '0.3.0', '0.3.1', '0.3.2' ] ]
458 verbose addNamed [ 'graphql-relay', '0.3.2' ]
459 verbose addNamed [ '0.3.2', '0.3.2' ]
460 silly lockFile 5c06e4a5-graphql-relay-0-3-2 graphql-relay@0.3.2
461 verbose lock graphql-relay@0.3.2 /Users/maxwellheiber/.npm/5c06e4a5-graphql-relay-0-3-2.lock
462 silly lockFile 5c06e4a5-graphql-relay-0-3-2 graphql-relay@0.3.2
463 silly lockFile 5c06e4a5-graphql-relay-0-3-2 graphql-relay@0.3.2
464 silly lockFile 9b209bd9-graphql-relay-0-3-1 graphql-relay@^0.3.1
465 silly lockFile 9b209bd9-graphql-relay-0-3-1 graphql-relay@^0.3.1
466 http 304 https://registry.npmjs.org/graphql
467 silly registry.get cb [ 304,
467 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
467 silly registry.get     via: '1.1 varnish',
467 silly registry.get     'cache-control': 'max-age=60',
467 silly registry.get     etag: '""2RGVXDY9KWWMZC3SE5I63I1I5""',
467 silly registry.get     age: '0',
467 silly registry.get     connection: 'keep-alive',
467 silly registry.get     'x-served-by': 'cache-jfk1026-JFK',
467 silly registry.get     'x-cache': 'HIT',
467 silly registry.get     'x-cache-hits': '1',
467 silly registry.get     'x-timer': 'S1442538394.069850,VS0,VE90',
467 silly registry.get     vary: 'Accept' } ]
468 verbose etag https://registry.npmjs.org/graphql from cache
469 silly addNameRange number 2 { name: 'graphql', range: '>=0.4.2-0 <0.5.0-0', hasData: true }
470 silly addNameRange versions [ 'graphql',
470 silly addNameRange   [ '0.0.2',
470 silly addNameRange     '0.1.0',
470 silly addNameRange     '0.1.1',
470 silly addNameRange     '0.1.2',
470 silly addNameRange     '0.1.3',
470 silly addNameRange     '0.1.4',
470 silly addNameRange     '0.1.5',
470 silly addNameRange     '0.1.6',
470 silly addNameRange     '0.1.7',
470 silly addNameRange     '0.1.8',
470 silly addNameRange     '0.1.9',
470 silly addNameRange     '0.1.10',
470 silly addNameRange     '0.1.11',
470 silly addNameRange     '0.1.12',
470 silly addNameRange     '0.2.0',
470 silly addNameRange     '0.2.1',
470 silly addNameRange     '0.2.2',
470 silly addNameRange     '0.2.3',
470 silly addNameRange     '0.2.4',
470 silly addNameRange     '0.2.5',
470 silly addNameRange     '0.2.6',
470 silly addNameRange     '0.3.0',
470 silly addNameRange     '0.4.1',
470 silly addNameRange     '0.4.2',
470 silly addNameRange     '0.4.3',
470 silly addNameRange     '0.4.4' ] ]
471 verbose addNamed [ 'graphql', '0.4.4' ]
472 verbose addNamed [ '0.4.4', '0.4.4' ]
473 silly lockFile c1314c81-graphql-0-4-4 graphql@0.4.4
474 verbose lock graphql@0.4.4 /Users/maxwellheiber/.npm/c1314c81-graphql-0-4-4.lock
475 silly lockFile c1314c81-graphql-0-4-4 graphql@0.4.4
476 silly lockFile c1314c81-graphql-0-4-4 graphql@0.4.4
477 silly lockFile 50658abc-graphql-0-4-2 graphql@^0.4.2
478 silly lockFile 50658abc-graphql-0-4-2 graphql@^0.4.2
479 http 304 https://registry.npmjs.org/todomvc-app-css
480 silly registry.get cb [ 304,
480 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
480 silly registry.get     via: '1.1 varnish',
480 silly registry.get     'cache-control': 'max-age=60',
480 silly registry.get     etag: '""6WCTF55F2O1LQVC1IWI9OZ9QU""',
480 silly registry.get     age: '0',
480 silly registry.get     connection: 'keep-alive',
480 silly registry.get     'x-served-by': 'cache-jfk1031-JFK',
480 silly registry.get     'x-cache': 'MISS',
480 silly registry.get     'x-cache-hits': '0',
480 silly registry.get     'x-timer': 'S1442538394.173040,VS0,VE19',
480 silly registry.get     vary: 'Accept' } ]
481 verbose etag https://registry.npmjs.org/todomvc-app-css from cache
482 silly addNameRange number 2 { name: 'todomvc-app-css',
482 silly addNameRange   range: '>=2.0.1-0 <3.0.0-0',
482 silly addNameRange   hasData: true }
483 silly addNameRange versions [ 'todomvc-app-css',
483 silly addNameRange   [ '1.0.0', '1.0.1', '1.0.2', '1.0.3', '2.0.0', '2.0.1', '1.0.4' ] ]
484 verbose addNamed [ 'todomvc-app-css', '2.0.1' ]
485 verbose addNamed [ '2.0.1', '2.0.1' ]
486 silly lockFile 01e1218e-todomvc-app-css-2-0-1 todomvc-app-css@2.0.1
487 verbose lock todomvc-app-css@2.0.1 /Users/maxwellheiber/.npm/01e1218e-todomvc-app-css-2-0-1.lock
488 silly lockFile 01e1218e-todomvc-app-css-2-0-1 todomvc-app-css@2.0.1
489 silly lockFile 01e1218e-todomvc-app-css-2-0-1 todomvc-app-css@2.0.1
490 silly lockFile 88a2d1c2-todomvc-app-css-2-0-1 todomvc-app-css@^2.0.1
491 silly lockFile 88a2d1c2-todomvc-app-css-2-0-1 todomvc-app-css@^2.0.1
492 http 304 https://registry.npmjs.org/todomvc-common
493 silly registry.get cb [ 304,
493 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
493 silly registry.get     via: '1.1 varnish',
493 silly registry.get     'cache-control': 'max-age=60',
493 silly registry.get     etag: '""46EYMTHTBT7P6EZWIWC69HYEE""',
493 silly registry.get     age: '0',
493 silly registry.get     connection: 'keep-alive',
493 silly registry.get     'x-served-by': 'cache-jfk1026-JFK',
493 silly registry.get     'x-cache': 'MISS',
493 silly registry.get     'x-cache-hits': '0',
493 silly registry.get     'x-timer': 'S1442538394.193784,VS0,VE19',
493 silly registry.get     vary: 'Accept' } ]
494 verbose etag https://registry.npmjs.org/todomvc-common from cache
495 silly addNameRange number 2 { name: 'todomvc-common',
495 silly addNameRange   range: '>=1.0.2-0 <2.0.0-0',
495 silly addNameRange   hasData: true }
496 silly addNameRange versions [ 'todomvc-common',
496 silly addNameRange   [ '0.1.9',
496 silly addNameRange     '0.1.11',
496 silly addNameRange     '0.2.0',
496 silly addNameRange     '0.3.0',
496 silly addNameRange     '0.3.1',
496 silly addNameRange     '1.0.0',
496 silly addNameRange     '1.0.1',
496 silly addNameRange     '1.0.2' ] ]
497 verbose addNamed [ 'todomvc-common', '1.0.2' ]
498 verbose addNamed [ '1.0.2', '1.0.2' ]
499 silly lockFile ec9df527-todomvc-common-1-0-2 todomvc-common@1.0.2
500 verbose lock todomvc-common@1.0.2 /Users/maxwellheiber/.npm/ec9df527-todomvc-common-1-0-2.lock
501 silly lockFile ec9df527-todomvc-common-1-0-2 todomvc-common@1.0.2
502 silly lockFile ec9df527-todomvc-common-1-0-2 todomvc-common@1.0.2
503 silly lockFile 7367451d-todomvc-common-1-0-2 todomvc-common@^1.0.2
504 silly lockFile 7367451d-todomvc-common-1-0-2 todomvc-common@^1.0.2
505 http 304 https://registry.npmjs.org/react-relay
506 silly registry.get cb [ 304,
506 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
506 silly registry.get     via: '1.1 varnish',
506 silly registry.get     'cache-control': 'max-age=60',
506 silly registry.get     etag: '""6Y8PAOJGTTEFCJQ6X7MBOIEHY""',
506 silly registry.get     age: '0',
506 silly registry.get     connection: 'keep-alive',
506 silly registry.get     'x-served-by': 'cache-jfk1029-JFK',
506 silly registry.get     'x-cache': 'MISS',
506 silly registry.get     'x-cache-hits': '0',
506 silly registry.get     'x-timer': 'S1442538394.138321,VS0,VE83',
506 silly registry.get     vary: 'Accept' } ]
507 verbose etag https://registry.npmjs.org/react-relay from cache
508 http 304 https://registry.npmjs.org/express
509 silly registry.get cb [ 304,
509 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
509 silly registry.get     via: '1.1 varnish',
509 silly registry.get     'cache-control': 'max-age=60',
509 silly registry.get     etag: '""1SG62H64ICJIKA35JKW49W7LF""',
509 silly registry.get     age: '57',
509 silly registry.get     connection: 'keep-alive',
509 silly registry.get     'x-served-by': 'cache-jfk1031-JFK',
509 silly registry.get     'x-cache': 'HIT',
509 silly registry.get     'x-cache-hits': '3',
509 silly registry.get     'x-timer': 'S1442538394.225186,VS0,VE0',
509 silly registry.get     vary: 'Accept' } ]
510 verbose etag https://registry.npmjs.org/express from cache
511 silly lockFile bc541f25-react-relay-file react-relay@file:../../
512 silly lockFile bc541f25-react-relay-file react-relay@file:../../
513 silly addNameRange number 2 { name: 'express', range: '>=4.13.1-0 <5.0.0-0', hasData: true }
514 silly addNameRange versions [ 'express',
514 silly addNameRange   [ '0.14.0',
514 silly addNameRange     '0.14.1',
514 silly addNameRange     '1.0.0',
514 silly addNameRange     '1.0.1',
514 silly addNameRange     '1.0.2',
514 silly addNameRange     '1.0.3',
514 silly addNameRange     '1.0.4',
514 silly addNameRange     '1.0.5',
514 silly addNameRange     '1.0.6',
514 silly addNameRange     '1.0.7',
514 silly addNameRange     '1.0.8',
514 silly addNameRange     '2.0.0',
514 silly addNameRange     '2.1.0',
514 silly addNameRange     '2.1.1',
514 silly addNameRange     '2.2.0',
514 silly addNameRange     '2.2.1',
514 silly addNameRange     '2.2.2',
514 silly addNameRange     '2.3.0',
514 silly addNameRange     '2.3.1',
514 silly addNameRange     '2.3.2',
514 silly addNameRange     '2.3.3',
514 silly addNameRange     '2.3.4',
514 silly addNameRange     '2.3.5',
514 silly addNameRange     '2.3.6',
514 silly addNameRange     '2.3.7',
514 silly addNameRange     '2.3.8',
514 silly addNameRange     '2.3.9',
514 silly addNameRange     '2.3.10',
514 silly addNameRange     '2.3.11',
514 silly addNameRange     '2.3.12',
514 silly addNameRange     '2.4.0',
514 silly addNameRange     '2.4.1',
514 silly addNameRange     '2.4.2',
514 silly addNameRange     '2.4.3',
514 silly addNameRange     '2.4.4',
514 silly addNameRange     '2.4.5',
514 silly addNameRange     '2.4.6',
514 silly addNameRange     '2.4.7',
514 silly addNameRange     '2.5.0',
514 silly addNameRange     '2.5.1',
514 silly addNameRange     '2.5.2',
514 silly addNameRange     '2.5.3',
514 silly addNameRange     '2.5.4',
514 silly addNameRange     '2.5.5',
514 silly addNameRange     '2.5.6',
514 silly addNameRange     '2.5.7',
514 silly addNameRange     '2.5.8',
514 silly addNameRange     '2.5.9',
514 silly addNameRange     '2.5.10',
514 silly addNameRange     '2.5.11',
514 silly addNameRange     '3.0.0',
514 silly addNameRange     '3.0.1',
514 silly addNameRange     '3.0.2',
514 silly addNameRange     '3.0.3',
514 silly addNameRange     '3.0.4',
514 silly addNameRange     '3.0.5',
514 silly addNameRange     '3.0.6',
514 silly addNameRange     '3.1.0',
514 silly addNameRange     '3.1.1',
514 silly addNameRange     '3.1.2',
514 silly addNameRange     '3.2.0',
514 silly addNameRange     '3.2.1',
514 silly addNameRange     '3.2.2',
514 silly addNameRange     '3.2.3',
514 silly addNameRange     '3.2.4',
514 silly addNameRange     '3.2.5',
514 silly addNameRange     '3.2.6',
514 silly addNameRange     '3.3.0',
514 silly addNameRange     '3.3.1',
514 silly addNameRange     '3.3.2',
514 silly addNameRange     '3.3.3',
514 silly addNameRange     '3.3.4',
514 silly addNameRange     '3.3.5',
514 silly addNameRange     '3.3.6',
514 silly addNameRange     '1.0.0-beta',
514 silly addNameRange     '1.0.0-beta2',
514 silly addNameRange     '1.0.0-rc',
514 silly addNameRange     '1.0.0-rc2',
514 silly addNameRange     '1.0.0-rc3',
514 silly addNameRange     '1.0.0-rc4',
514 silly addNameRange     '2.0.0-beta',
514 silly addNameRange     '2.0.0-beta2',
514 silly addNameRange     '2.0.0-beta3',
514 silly addNameRange     '2.0.0-rc',
514 silly addNameRange     '2.0.0-rc2',
514 silly addNameRange     '2.0.0-rc3',
514 silly addNameRange     '3.0.0-alpha1',
514 silly addNameRange     '3.0.0-alpha2',
514 silly addNameRange     '3.0.0-alpha3',
514 silly addNameRange     '3.0.0-alpha4',
514 silly addNameRange     '3.0.0-alpha5',
514 silly addNameRange     '3.0.0-beta1',
514 silly addNameRange     '3.0.0-beta2',
514 silly addNameRange     '3.0.0-beta3',
514 silly addNameRange     '3.0.0-beta4',
514 silly addNameRange     '3.0.0-beta6',
514 silly addNameRange     '3.0.0-beta7',
514 silly addNameRange     '3.0.0-rc1',
514 silly addNameRange     '3.0.0-rc2',
514 silly addNameRange     '3.0.0-rc3',
514 silly addNameRange     '3.0.0-rc4',
514 silly addNameRange     '3.0.0-rc5',
514 silly addNameRange     '3.3.7',
514 silly addNameRange     '3.3.8',
514 silly addNameRange     '3.4.0',
514 silly addNameRange     '3.4.1',
514 silly addNameRange     '3.4.2',
514 silly addNameRange     '3.4.3',
514 silly addNameRange     '3.4.4',
514 silly addNameRange     '3.4.5',
514 silly addNameRange     '3.4.6',
514 silly addNameRange     '3.4.7',
514 silly addNameRange     '3.4.8',
514 silly addNameRange     '4.0.0-rc1',
514 silly addNameRange     '4.0.0-rc2',
514 silly addNameRange     '3.5.0',
514 silly addNameRange     '4.0.0-rc3',
514 silly addNameRange     '4.0.0-rc4',
514 silly addNameRange     '3.5.1',
514 silly addNameRange     '4.0.0',
514 silly addNameRange     '3.5.2',
514 silly addNameRange     '4.1.0',
514 silly addNameRange     '4.1.1',
514 silly addNameRange     '3.5.3',
514 silly addNameRange     '4.1.2',
514 silly addNameRange     '3.6.0',
514 silly addNameRange     '4.2.0',
514 silly addNameRange     '3.7.0',
514 silly addNameRange     '3.8.0',
514 silly addNameRange     '4.3.0',
514 silly addNameRange     '4.3.1',
514 silly addNameRange     '3.8.1',
514 silly addNameRange     '4.3.2',
514 silly addNameRange     '3.9.0',
514 silly addNameRange     '4.4.0',
514 silly addNameRange     '4.4.1',
514 silly addNameRange     '3.10.0',
514 silly addNameRange     '3.10.1',
514 silly addNameRange     '3.10.2',
514 silly addNameRange     '3.10.3',
514 silly addNameRange     '3.10.4',
514 silly addNameRange     '4.4.2',
514 silly addNameRange     '3.10.5',
514 silly addNameRange     '4.4.3',
514 silly addNameRange     '3.11.0',
514 silly addNameRange     '4.4.4',
514 silly addNameRange     '3.12.0',
514 silly addNameRange     '3.12.1',
514 silly addNameRange     '4.4.5',
514 silly addNameRange     '3.13.0',
514 silly addNameRange     '4.5.0',
514 silly addNameRange     '4.5.1',
514 silly addNameRange     '3.14.0',
514 silly addNameRange     '4.6.0',
514 silly addNameRange     '4.6.1',
514 silly addNameRange     '3.15.0',
514 silly addNameRange     '4.7.0',
514 silly addNameRange     '3.15.1',
514 silly addNameRange     '4.7.1',
514 silly addNameRange     '3.15.2',
514 silly addNameRange     '4.7.2',
514 silly addNameRange     '4.7.3',
514 silly addNameRange     '3.15.3',
514 silly addNameRange     '4.7.4',
514 silly addNameRange     '3.16.0',
514 silly addNameRange     '4.8.0',
514 silly addNameRange     '3.16.1',
514 silly addNameRange     '4.8.1',
514 silly addNameRange     '3.16.2',
514 silly addNameRange     '4.8.2',
514 silly addNameRange     '3.16.3',
514 silly addNameRange     '3.16.4',
514 silly addNameRange     '4.8.3',
514 silly addNameRange     '3.16.5',
514 silly addNameRange     '3.16.6',
514 silly addNameRange     '4.8.4',
514 silly addNameRange     '3.16.7',
514 silly addNameRange     '4.8.5',
514 silly addNameRange     '3.16.8',
514 silly addNameRange     '4.8.6',
514 silly addNameRange     '3.16.9',
514 silly addNameRange     '4.8.7',
514 silly addNameRange     '3.16.10',
514 silly addNameRange     '4.8.8',
514 silly addNameRange     '3.17.0',
514 silly addNameRange     '3.17.1',
514 silly addNameRange     '4.9.0',
514 silly addNameRange     '3.17.2',
514 silly addNameRange     '4.9.1',
514 silly addNameRange     '4.9.2',
514 silly addNameRange     '3.17.3',
514 silly addNameRange     '4.9.3',
514 silly addNameRange     '3.17.4',
514 silly addNameRange     '4.9.4',
514 silly addNameRange     '3.17.5',
514 silly addNameRange     '4.9.5',
514 silly addNameRange     '3.17.6',
514 silly addNameRange     '3.17.7',
514 silly addNameRange     '4.9.6',
514 silly addNameRange     '4.9.7',
514 silly addNameRange     '3.17.8',
514 silly addNameRange     '4.9.8',
514 silly addNameRange     '3.18.0',
514 silly addNameRange     '3.18.1',
514 silly addNameRange     '4.10.0',
514 silly addNameRange     '3.18.2',
514 silly addNameRange     '4.10.1',
514 silly addNameRange     '5.0.0-alpha.1',
514 silly addNameRange     '3.18.3',
514 silly addNameRange     '4.10.2',
514 silly addNameRange     '3.18.4',
514 silly addNameRange     '4.10.3',
514 silly addNameRange     '4.10.4',
514 silly addNameRange     '4.10.5',
514 silly addNameRange     '3.18.5',
514 silly addNameRange     '3.18.6',
514 silly addNameRange     '4.10.6',
514 silly addNameRange     '4.10.7',
514 silly addNameRange     '3.19.0',
514 silly addNameRange     '4.10.8',
514 silly addNameRange     '4.11.0',
514 silly addNameRange     '3.19.1',
514 silly addNameRange     '4.11.1',
514 silly addNameRange     '3.19.2',
514 silly addNameRange     '4.11.2',
514 silly addNameRange     '3.20.0',
514 silly addNameRange     '4.12.0',
514 silly addNameRange     '3.20.1',
514 silly addNameRange     '4.12.1',
514 silly addNameRange     '4.12.2',
514 silly addNameRange     '3.20.2',
514 silly addNameRange     '4.12.3',
514 silly addNameRange     '3.20.3',
514 silly addNameRange     '4.12.4',
514 silly addNameRange     '3.21.0',
514 silly addNameRange     '4.13.0',
514 silly addNameRange     '3.21.1',
514 silly addNameRange     '4.13.1',
514 silly addNameRange     '5.0.0-alpha.2',
514 silly addNameRange     '3.21.2',
514 silly addNameRange     '4.13.2',
514 silly addNameRange     '4.13.3' ] ]
515 verbose addNamed [ 'express', '4.13.3' ]
516 verbose addNamed [ '4.13.3', '4.13.3' ]
517 silly lockFile 51f1744e-express-4-13-3 express@4.13.3
518 verbose lock express@4.13.3 /Users/maxwellheiber/.npm/51f1744e-express-4-13-3.lock
519 silly lockFile 51f1744e-express-4-13-3 express@4.13.3
520 silly lockFile 51f1744e-express-4-13-3 express@4.13.3
521 silly lockFile f0495473-express-4-13-1 express@^4.13.1
522 silly lockFile f0495473-express-4-13-1 express@^4.13.1
523 http 304 https://registry.npmjs.org/webpack
524 silly registry.get cb [ 304,
524 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
524 silly registry.get     via: '1.1 varnish',
524 silly registry.get     'cache-control': 'max-age=60',
524 silly registry.get     etag: '""2MRUTL6AKS1VN9ZV8XKS9MCFA""',
524 silly registry.get     age: '0',
524 silly registry.get     connection: 'keep-alive',
524 silly registry.get     'x-served-by': 'cache-jfk1029-JFK',
524 silly registry.get     'x-cache': 'HIT',
524 silly registry.get     'x-cache-hits': '1',
524 silly registry.get     'x-timer': 'S1442538394.252067,VS0,VE24',
524 silly registry.get     vary: 'Accept' } ]
525 verbose etag https://registry.npmjs.org/webpack from cache
526 silly addNameRange number 2 { name: 'webpack', range: '>=1.10.5-0 <2.0.0-0', hasData: true }
527 silly addNameRange versions [ 'webpack',
527 silly addNameRange   [ '0.1.0',
527 silly addNameRange     '0.1.1',
527 silly addNameRange     '0.1.2',
527 silly addNameRange     '0.1.3',
527 silly addNameRange     '0.1.4',
527 silly addNameRange     '0.1.5',
527 silly addNameRange     '0.1.6',
527 silly addNameRange     '0.2.0',
527 silly addNameRange     '0.2.1',
527 silly addNameRange     '0.2.2',
527 silly addNameRange     '0.2.3',
527 silly addNameRange     '0.2.4',
527 silly addNameRange     '0.2.6',
527 silly addNameRange     '0.2.7',
527 silly addNameRange     '0.2.8',
527 silly addNameRange     '0.3.0',
527 silly addNameRange     '0.3.1',
527 silly addNameRange     '0.3.2',
527 silly addNameRange     '0.3.3',
527 silly addNameRange     '0.3.4',
527 silly addNameRange     '0.3.6',
527 silly addNameRange     '0.3.7',
527 silly addNameRange     '0.3.8',
527 silly addNameRange     '0.3.9',
527 silly addNameRange     '0.3.10',
527 silly addNameRange     '0.3.11',
527 silly addNameRange     '0.3.12',
527 silly addNameRange     '0.3.13',
527 silly addNameRange     '0.3.14',
527 silly addNameRange     '0.3.15',
527 silly addNameRange     '0.3.16',
527 silly addNameRange     '0.3.17',
527 silly addNameRange     '0.3.18',
527 silly addNameRange     '0.3.19',
527 silly addNameRange     '0.3.20',
527 silly addNameRange     '0.4.0',
527 silly addNameRange     '0.4.1',
527 silly addNameRange     '0.4.2',
527 silly addNameRange     '0.4.3',
527 silly addNameRange     '0.4.4',
527 silly addNameRange     '0.4.5',
527 silly addNameRange     '0.4.6',
527 silly addNameRange     '0.4.7',
527 silly addNameRange     '0.4.8',
527 silly addNameRange     '0.4.9',
527 silly addNameRange     '0.4.10',
527 silly addNameRange     '0.4.11',
527 silly addNameRange     '0.4.12',
527 silly addNameRange     '0.4.13',
527 silly addNameRange     '0.4.14',
527 silly addNameRange     '0.4.15',
527 silly addNameRange     '0.4.16',
527 silly addNameRange     '0.4.17',
527 silly addNameRange     '0.4.18',
527 silly addNameRange     '0.4.19',
527 silly addNameRange     '0.4.20',
527 silly addNameRange     '0.4.21',
527 silly addNameRange     '0.4.23',
527 silly addNameRange     '0.4.24',
527 silly addNameRange     '0.4.25',
527 silly addNameRange     '0.5.0',
527 silly addNameRange     '0.5.1',
527 silly addNameRange     '0.5.2',
527 silly addNameRange     '0.5.3',
527 silly addNameRange     '0.5.4',
527 silly addNameRange     '0.5.5',
527 silly addNameRange     '0.5.6',
527 silly addNameRange     '0.5.7',
527 silly addNameRange     '0.5.8',
527 silly addNameRange     '0.5.10',
527 silly addNameRange     '0.6.0',
527 silly addNameRange     '0.6.1',
527 silly addNameRange     '0.6.2',
527 silly addNameRange     '0.7.0-beta',
527 silly addNameRange     '0.7.0-beta2',
527 silly addNameRange     '0.7.0-beta3',
527 silly addNameRange     '0.7.0-beta4',
527 silly addNameRange     '0.7.0-beta5',
527 silly addNameRange     '0.7.0-beta6',
527 silly addNameRange     '0.7.0-beta7',
527 silly addNameRange     '0.7.0-beta8',
527 silly addNameRange     '0.7.0',
527 silly addNameRange     '0.7.1',
527 silly addNameRange     '0.7.2',
527 silly addNameRange     '0.7.3',
527 silly addNameRange     '0.7.4',
527 silly addNameRange     '0.7.5',
527 silly addNameRange     '0.7.6',
527 silly addNameRange     '0.7.7',
527 silly addNameRange     '0.7.8',
527 silly addNameRange     '0.7.9',
527 silly addNameRange     '0.7.11',
527 silly addNameRange     '0.7.12',
527 silly addNameRange     '0.7.13',
527 silly addNameRange     '0.7.14',
527 silly addNameRange     '0.7.15',
527 silly addNameRange     '0.7.16',
527 silly addNameRange     '0.7.17',
527 silly addNameRange     '0.8.0-beta1',
527 silly addNameRange     '0.8.0-beta2',
527 silly addNameRange     '0.8.0-beta3',
527 silly addNameRange     '0.8.0-beta4',
527 silly addNameRange     '0.8.0',
527 silly addNameRange     '0.8.2',
527 silly addNameRange     '0.8.3',
527 silly addNameRange     '0.9.0-beta1',
527 silly addNameRange     '0.9.0-beta2',
527 silly addNameRange     '0.9.0-beta4',
527 silly addNameRange     '0.9.0-beta5',
527 silly addNameRange     '0.9.0-beta6',
527 silly addNameRange     '0.9.0-beta7',
527 silly addNameRange     '0.9.0-beta8',
527 silly addNameRange     '0.9.0-beta9',
527 silly addNameRange     '0.9.0-beta10',
527 silly addNameRange     '0.9.0-beta11',
527 silly addNameRange     '0.9.0-beta12',
527 silly addNameRange     '0.9.0-beta13',
527 silly addNameRange     '0.9.0-beta14',
527 silly addNameRange     '0.9.0-beta15',
527 silly addNameRange     '0.9.0-beta16',
527 silly addNameRange     '0.9.0-beta17',
527 silly addNameRange     '0.9.0-beta18',
527 silly addNameRange     '0.9.0-beta19',
527 silly addNameRange     '0.9.0-beta20',
527 silly addNameRange     '0.9.0-beta21',
527 silly addNameRange     '0.9.0-beta22',
527 silly addNameRange     '0.9.0-beta23',
527 silly addNameRange     '0.9.0-beta24',
527 silly addNameRange     '0.9.0-beta25',
527 silly addNameRange     '0.9.0-beta26',
527 silly addNameRange     '0.9.0-beta27',
527 silly addNameRange     '0.9.0-beta28',
527 silly addNameRange     '0.9.0-beta29',
527 silly addNameRange     '0.9.0-beta30',
527 silly addNameRange     '0.9.0-beta31',
527 silly addNameRange     '0.9.0-beta32',
527 silly addNameRange     '0.9.0-beta33',
527 silly addNameRange     '0.9.0-beta34',
527 silly addNameRange     '0.9.0-beta35',
527 silly addNameRange     '0.9.0-beta36',
527 silly addNameRange     '0.9.0-beta37',
527 silly addNameRange     '0.9.0-beta38',
527 silly addNameRange     '0.9.0',
527 silly addNameRange     '0.9.1',
527 silly addNameRange     '0.9.2',
527 silly addNameRange     '0.9.3',
527 silly addNameRange     '0.10.0-beta2',
527 silly addNameRange     '0.10.0-beta3',
527 silly addNameRange     '0.10.0-beta5',
527 silly addNameRange     '0.10.0-beta6',
527 silly addNameRange     '0.10.0-beta7',
527 silly addNameRange     '0.10.0-beta8',
527 silly addNameRange     '0.10.0-beta9',
527 silly addNameRange     '0.10.0-beta10',
527 silly addNameRange     '0.10.0-beta11',
527 silly addNameRange     '0.10.0-beta12',
527 silly addNameRange     '0.10.0-beta13',
527 silly addNameRange     '0.10.0-beta14',
527 silly addNameRange     '0.10.0-beta15',
527 silly addNameRange     '0.10.0-beta16',
527 silly addNameRange     '0.10.0-beta17',
527 silly addNameRange     '0.10.0-beta18',
527 silly addNameRange     '0.10.0-beta19',
527 silly addNameRange     '0.10.0-beta20',
527 silly addNameRange     '0.10.0-beta21',
527 silly addNameRange     '0.10.0-beta22',
527 silly addNameRange     '0.10.0-beta23',
527 silly addNameRange     '0.10.0-beta24',
527 silly addNameRange     '0.10.0-beta25',
527 silly addNameRange     '0.10.0',
527 silly addNameRange     '0.11.0-beta1',
527 silly addNameRange     '0.11.0-beta2',
527 silly addNameRange     '0.11.0-beta3',
527 silly addNameRange     '0.11.0-beta4',
527 silly addNameRange     '0.11.0-beta5',
527 silly addNameRange     '0.11.0-beta6',
527 silly addNameRange     '0.11.0-beta7',
527 silly addNameRange     '0.11.0-beta8',
527 silly addNameRange     '0.11.0-beta9',
527 silly addNameRange     '0.11.0-beta10',
527 silly addNameRange     '0.11.0-beta11',
527 silly addNameRange     '0.11.0-beta12',
527 silly addNameRange     '0.11.0-beta13',
527 silly addNameRange     '0.11.0-beta14',
527 silly addNameRange     '0.11.0-beta15',
527 silly addNameRange     '0.11.0-beta16',
527 silly addNameRange     '0.11.0-beta17',
527 silly addNameRange     '0.11.0-beta18',
527 silly addNameRange     '0.11.0-beta19',
527 silly addNameRange     '0.11.0-beta20',
527 silly addNameRange     '0.11.0-beta21',
527 silly addNameRange     '0.11.0-beta22',
527 silly addNameRange     '0.11.0-beta23',
527 silly addNameRange     '0.11.0-beta24',
527 silly addNameRange     '0.11.0-beta25',
527 silly addNameRange     '0.11.0-beta26',
527 silly addNameRange     '0.11.0-beta27',
527 silly addNameRange     '0.11.0-beta28',
527 silly addNameRange     '0.11.0-beta29',
527 silly addNameRange     '0.11.0',
527 silly addNameRange     '0.11.1',
527 silly addNameRange     '0.11.2',
527 silly addNameRange     '0.11.3',
527 silly addNameRange     '0.11.4',
527 silly addNameRange     '0.11.5',
527 silly addNameRange     '0.11.6',
527 silly addNameRange     '0.11.7',
527 silly addNameRange     '0.11.8',
527 silly addNameRange     '0.11.9',
527 silly addNameRange     '0.11.10',
527 silly addNameRange     '0.11.11',
527 silly addNameRange     '0.11.12',
527 silly addNameRange     '0.11.13',
527 silly addNameRange     '0.11.14',
527 silly addNameRange     '0.11.15',
527 silly addNameRange     '1.0.0-beta1',
527 silly addNameRange     '1.0.0-beta2',
527 silly addNameRange     '1.0.0-beta3',
527 silly addNameRange     '1.0.0-beta4',
527 silly addNameRange     '0.11.16',
527 silly addNameRange     '0.11.17',
527 silly addNameRange     '0.11.18',
527 silly addNameRange     '1.0.0-beta5',
527 silly addNameRange     '1.0.0-beta6',
527 silly addNameRange     '1.0.0-beta7',
527 silly addNameRange     '1.0.0-beta8',
527 silly addNameRange     '1.0.0-beta9',
527 silly addNameRange     '1.0.0-rc1',
527 silly addNameRange     '1.0.0-rc2',
527 silly addNameRange     '1.0.0-rc3',
527 silly addNameRange     '1.0.0-rc4',
527 silly addNameRange     '1.0.0-rc5',
527 silly addNameRange     '1.0.0-rc7',
527 silly addNameRange     '1.0.0-rc8',
527 silly addNameRange     '1.0.0-rc9',
527 silly addNameRange     '1.0.0-rc11',
527 silly addNameRange     '1.0.0-rc12',
527 silly addNameRange     '1.0.0',
527 silly addNameRange     '1.0.1',
527 silly addNameRange     '1.0.3',
527 silly addNameRange     '1.0.4',
527 silly addNameRange     '1.0.5',
527 silly addNameRange     '1.1.0-beta1',
527 silly addNameRange     '1.1.0-beta2',
527 silly addNameRange     '1.1.0-beta3',
527 silly addNameRange     '1.1.0-beta4',
527 silly addNameRange     '1.1.0-beta5',
527 silly addNameRange     '1.1.0-beta6',
527 silly addNameRange     '1.1.0-beta7',
527 silly addNameRange     '1.1.0-beta8',
527 silly addNameRange     '1.1.0-beta9',
527 silly addNameRange     '1.1.0-beta10',
527 silly addNameRange     '1.1.0-beta12',
527 silly addNameRange     '1.1.0',
527 silly addNameRange     '1.1.1',
527 silly addNameRange     '1.1.2',
527 silly addNameRange     '1.1.3',
527 silly addNameRange     '1.1.4',
527 silly addNameRange     '1.1.5',
527 silly addNameRange     '1.1.6',
527 silly addNameRange     '1.1.7',
527 silly addNameRange     '1.1.8',
527 silly addNameRange     '1.1.9',
527 silly addNameRange     '1.1.10',
527 silly addNameRange     '1.1.11',
527 silly addNameRange     '1.2.0-beta1',
527 silly addNameRange     '1.2.0-beta2',
527 silly addNameRange     '1.2.0-beta4',
527 silly addNameRange     '1.2.0-beta5',
527 silly addNameRange     '1.2.0-beta6',
527 silly addNameRange     '1.3.0-beta1',
527 silly addNameRange     '1.3.0-beta2',
527 silly addNameRange     '1.3.0-beta3',
527 silly addNameRange     '1.3.0-beta4',
527 silly addNameRange     '1.3.0-beta5',
527 silly addNameRange     '1.3.0-beta6',
527 silly addNameRange     '1.3.0-beta7',
527 silly addNameRange     '1.3.0-beta8',
527 silly addNameRange     '1.3.0-beta9',
527 silly addNameRange     '1.3.1-beta1',
527 silly addNameRange     '1.3.1-beta2',
527 silly addNameRange     '1.3.1-beta3',
527 silly addNameRange     '1.3.1-beta4',
527 silly addNameRange     '1.3.1-beta5',
527 silly addNameRange     '1.3.1-beta6',
527 silly addNameRange     '1.3.1-beta7',
527 silly addNameRange     '1.3.1-beta8',
527 silly addNameRange     '1.3.1-beta9',
527 silly addNameRange     '1.3.2-beta1',
527 silly addNameRange     '1.3.2-beta2',
527 silly addNameRange     '1.3.2-beta3',
527 silly addNameRange     '1.3.2-beta4',
527 silly addNameRange     '1.3.2-beta5',
527 silly addNameRange     '1.3.2-beta6',
527 silly addNameRange     '1.3.2-beta7',
527 silly addNameRange     '1.3.2-beta8',
527 silly addNameRange     '1.3.2-beta9',
527 silly addNameRange     '1.3.3-beta1',
527 silly addNameRange     '1.3.3-beta2',
527 silly addNameRange     '1.3.4',
527 silly addNameRange     '1.3.5',
527 silly addNameRange     '1.3.6',
527 silly addNameRange     '1.3.7',
527 silly addNameRange     '1.4.0-beta1',
527 silly addNameRange     '1.4.0-beta2',
527 silly addNameRange     '1.4.0-beta3',
527 silly addNameRange     '1.4.0-beta4',
527 silly addNameRange     '1.4.0-beta5',
527 silly addNameRange     '1.4.0-beta6',
527 silly addNameRange     '1.4.0-beta7',
527 silly addNameRange     '1.4.0-beta8',
527 silly addNameRange     '1.4.0-beta9',
527 silly addNameRange     '1.4.0-beta10',
527 silly addNameRange     '1.4.1-beta1',
527 silly addNameRange     '1.4.2',
527 silly addNameRange     '1.4.3',
527 silly addNameRange     '1.4.4',
527 silly addNameRange     '1.4.5',
527 silly addNameRange     '1.4.6',
527 silly addNameRange     '1.4.7',
527 silly addNameRange     '1.4.8',
527 silly addNameRange     '1.4.9',
527 silly addNameRange     '1.4.10',
527 silly addNameRange     '1.4.11',
527 silly addNameRange     '1.4.12',
527 silly addNameRange     '1.4.13',
527 silly addNameRange     '1.4.14',
527 silly addNameRange     '1.4.15',
527 silly addNameRange     '1.5.0',
527 silly addNameRange     '1.5.1',
527 silly addNameRange     '1.5.2',
527 silly addNameRange     '1.5.3',
527 silly addNameRange     '1.6.0',
527 silly addNameRange     '1.7.0',
527 silly addNameRange     '1.7.1',
527 silly addNameRange     '1.7.2',
527 silly addNameRange     '1.7.3',
527 silly addNameRange     '1.8.0',
527 silly addNameRange     '1.8.1',
527 silly addNameRange     '1.8.2',
527 silly addNameRange     '1.8.3',
527 silly addNameRange     '1.8.4',
527 silly addNameRange     '1.8.5',
527 silly addNameRange     '1.8.6',
527 silly addNameRange     '1.8.7',
527 silly addNameRange     '1.8.8',
527 silly addNameRange     '1.8.9',
527 silly addNameRange     '1.8.10',
527 silly addNameRange     '1.8.11',
527 silly addNameRange     '1.9.0',
527 silly addNameRange     '1.9.1',
527 silly addNameRange     '1.9.2',
527 silly addNameRange     '1.9.3',
527 silly addNameRange     '1.9.4',
527 silly addNameRange     '1.9.5',
527 silly addNameRange     '1.9.6',
527 silly addNameRange     '1.9.7',
527 silly addNameRange     '1.9.8',
527 silly addNameRange     '1.9.9',
527 silly addNameRange     '1.9.10',
527 silly addNameRange     '1.9.11',
527 silly addNameRange     '1.9.12',
527 silly addNameRange     '1.9.13',
527 silly addNameRange     '1.10.0',
527 silly addNameRange     '1.10.1',
527 silly addNameRange     '1.10.2',
527 silly addNameRange     '1.10.3',
527 silly addNameRange     '1.10.4',
527 silly addNameRange     '1.10.5',
527 silly addNameRange     '1.11.0',
527 silly addNameRange     '1.12.0',
527 silly addNameRange     '1.12.1',
527 silly addNameRange     '1.12.2' ] ]
528 verbose addNamed [ 'webpack', '1.12.2' ]
529 verbose addNamed [ '1.12.2', '1.12.2' ]
530 silly lockFile 11802b3d-webpack-1-12-2 webpack@1.12.2
531 verbose lock webpack@1.12.2 /Users/maxwellheiber/.npm/11802b3d-webpack-1-12-2.lock
532 silly lockFile 11802b3d-webpack-1-12-2 webpack@1.12.2
533 silly lockFile 11802b3d-webpack-1-12-2 webpack@1.12.2
534 silly lockFile 6290066c-webpack-1-10-5 webpack@^1.10.5
535 silly lockFile 6290066c-webpack-1-10-5 webpack@^1.10.5
536 http 304 https://registry.npmjs.org/webpack-dev-server
537 silly registry.get cb [ 304,
537 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
537 silly registry.get     via: '1.1 varnish',
537 silly registry.get     'cache-control': 'max-age=60',
537 silly registry.get     etag: '""142C350G1FZOZU5Y2YF2H5ZHT""',
537 silly registry.get     age: '0',
537 silly registry.get     connection: 'keep-alive',
537 silly registry.get     'x-served-by': 'cache-jfk1026-JFK',
537 silly registry.get     'x-cache': 'HIT',
537 silly registry.get     'x-cache-hits': '1',
537 silly registry.get     'x-timer': 'S1442538394.235679,VS0,VE93',
537 silly registry.get     vary: 'Accept' } ]
538 verbose etag https://registry.npmjs.org/webpack-dev-server from cache
539 silly addNameRange number 2 { name: 'webpack-dev-server',
539 silly addNameRange   range: '>=1.10.1-0 <2.0.0-0',
539 silly addNameRange   hasData: true }
540 silly addNameRange versions [ 'webpack-dev-server',
540 silly addNameRange   [ '0.6.0',
540 silly addNameRange     '0.6.1',
540 silly addNameRange     '0.6.2',
540 silly addNameRange     '0.7.0',
540 silly addNameRange     '0.7.1',
540 silly addNameRange     '0.7.2',
540 silly addNameRange     '0.8.0',
540 silly addNameRange     '0.8.1',
540 silly addNameRange     '0.8.2',
540 silly addNameRange     '0.9.0',
540 silly addNameRange     '0.9.1',
540 silly addNameRange     '0.9.2',
540 silly addNameRange     '0.9.3',
540 silly addNameRange     '0.9.4',
540 silly addNameRange     '0.10.0',
540 silly addNameRange     '0.10.1',
540 silly addNameRange     '0.11.0',
540 silly addNameRange     '0.11.1',
540 silly addNameRange     '1.0.0',
540 silly addNameRange     '1.0.1',
540 silly addNameRange     '1.0.2',
540 silly addNameRange     '1.1.0',
540 silly addNameRange     '1.2.0',
540 silly addNameRange     '1.2.1',
540 silly addNameRange     '1.2.2',
540 silly addNameRange     '1.2.3',
540 silly addNameRange     '1.2.4',
540 silly addNameRange     '1.2.5',
540 silly addNameRange     '1.2.6',
540 silly addNameRange     '1.2.7',
540 silly addNameRange     '1.2.8',
540 silly addNameRange     '1.2.9',
540 silly addNameRange     '1.3.0',
540 silly addNameRange     '1.3.1',
540 silly addNameRange     '1.3.2',
540 silly addNameRange     '1.4.0',
540 silly addNameRange     '1.4.1',
540 silly addNameRange     '1.4.2',
540 silly addNameRange     '1.4.3',
540 silly addNameRange     '1.4.4',
540 silly addNameRange     '1.4.5',
540 silly addNameRange     '1.4.6',
540 silly addNameRange     '1.4.7',
540 silly addNameRange     '1.4.9',
540 silly addNameRange     '1.4.10',
540 silly addNameRange     '1.5.0',
540 silly addNameRange     '1.6.0',
540 silly addNameRange     '1.6.1',
540 silly addNameRange     '1.6.2',
540 silly addNameRange     '1.6.3',
540 silly addNameRange     '1.6.4',
540 silly addNameRange     '1.6.5',
540 silly addNameRange     '1.6.6',
540 silly addNameRange     '1.7.0',
540 silly addNameRange     '1.8.0',
540 silly addNameRange     '1.8.1',
540 silly addNameRange     '1.8.2',
540 silly addNameRange     '1.9.0',
540 silly addNameRange     '1.10.0',
540 silly addNameRange     '1.10.1',
540 silly addNameRange     '1.11.0' ] ]
541 verbose addNamed [ 'webpack-dev-server', '1.11.0' ]
542 verbose addNamed [ '1.11.0', '1.11.0' ]
543 silly lockFile 1a1e52ab-webpack-dev-server-1-11-0 webpack-dev-server@1.11.0
544 verbose lock webpack-dev-server@1.11.0 /Users/maxwellheiber/.npm/1a1e52ab-webpack-dev-server-1-11-0.lock
545 silly lockFile 1a1e52ab-webpack-dev-server-1-11-0 webpack-dev-server@1.11.0
546 silly lockFile 1a1e52ab-webpack-dev-server-1-11-0 webpack-dev-server@1.11.0
547 silly lockFile d5f91d78-webpack-dev-server-1-10-1 webpack-dev-server@^1.10.1
548 silly lockFile d5f91d78-webpack-dev-server-1-10-1 webpack-dev-server@^1.10.1
549 http 304 https://registry.npmjs.org/eslint
550 silly registry.get cb [ 304,
550 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
550 silly registry.get     via: '1.1 varnish',
550 silly registry.get     'cache-control': 'max-age=60',
550 silly registry.get     etag: '""3WIYJ3XR15OV1PB2FU2T1ZBRM""',
550 silly registry.get     age: '0',
550 silly registry.get     connection: 'keep-alive',
550 silly registry.get     'x-served-by': 'cache-jfk1022-JFK',
550 silly registry.get     'x-cache': 'HIT',
550 silly registry.get     'x-cache-hits': '1',
550 silly registry.get     'x-timer': 'S1442538394.040651,VS0,VE349',
550 silly registry.get     vary: 'Accept' } ]
551 verbose etag https://registry.npmjs.org/eslint from cache
552 silly addNameRange number 2 { name: 'eslint', range: '>=1.0.0-0 <2.0.0-0', hasData: true }
553 silly addNameRange versions [ 'eslint',
553 silly addNameRange   [ '0.0.4',
553 silly addNameRange     '0.0.5',
553 silly addNameRange     '0.0.6',
553 silly addNameRange     '0.0.7',
553 silly addNameRange     '0.1.0-dev',
553 silly addNameRange     '0.1.0',
553 silly addNameRange     '0.1.1',
553 silly addNameRange     '0.1.2',
553 silly addNameRange     '0.1.3',
553 silly addNameRange     '0.1.4',
553 silly addNameRange     '0.2.0',
553 silly addNameRange     '0.3.0',
553 silly addNameRange     '0.4.0',
553 silly addNameRange     '0.4.1',
553 silly addNameRange     '0.4.2',
553 silly addNameRange     '0.4.3',
553 silly addNameRange     '0.4.4',
553 silly addNameRange     '0.4.5',
553 silly addNameRange     '0.5.0',
553 silly addNameRange     '0.5.1',
553 silly addNameRange     '0.6.0',
553 silly addNameRange     '0.6.1',
553 silly addNameRange     '0.6.2',
553 silly addNameRange     '0.7.1',
553 silly addNameRange     '0.7.2',
553 silly addNameRange     '0.7.3',
553 silly addNameRange     '0.7.4',
553 silly addNameRange     '0.8.0',
553 silly addNameRange     '0.8.1',
553 silly addNameRange     '0.8.2',
553 silly addNameRange     '0.9.0',
553 silly addNameRange     '0.9.1',
553 silly addNameRange     '0.9.2',
553 silly addNameRange     '0.10.0-alpha',
553 silly addNameRange     '0.10.0-alpha.1',
553 silly addNameRange     '0.10.0-alpha.2',
553 silly addNameRange     '0.10.0',
553 silly addNameRange     '0.11.0-alpha.0',
553 silly addNameRange     '0.10.1',
553 silly addNameRange     '0.10.2',
553 silly addNameRange     '0.11.0',
553 silly addNameRange     '0.12.0',
553 silly addNameRange     '0.13.0',
553 silly addNameRange     '0.14.0',
553 silly addNameRange     '0.14.1',
553 silly addNameRange     '0.15.0',
553 silly addNameRange     '0.15.1',
553 silly addNameRange     '0.16.0',
553 silly addNameRange     '0.16.1',
553 silly addNameRange     '0.16.2',
553 silly addNameRange     '0.17.0',
553 silly addNameRange     '0.17.1',
553 silly addNameRange     '0.18.0',
553 silly addNameRange     '0.19.0',
553 silly addNameRange     '0.20.0',
553 silly addNameRange     '0.21.0',
553 silly addNameRange     '0.21.1',
553 silly addNameRange     '0.21.2',
553 silly addNameRange     '0.22.0',
553 silly addNameRange     '0.22.1',
553 silly addNameRange     '0.23.0',
553 silly addNameRange     '0.24.0',
553 silly addNameRange     '0.24.1',
553 silly addNameRange     '1.0.0-rc-1',
553 silly addNameRange     '1.0.0-rc-2',
553 silly addNameRange     '1.0.0-rc-3',
553 silly addNameRange     '1.0.0',
553 silly addNameRange     '1.1.0',
553 silly addNameRange     '1.2.0',
553 silly addNameRange     '1.2.1',
553 silly addNameRange     '1.3.0',
553 silly addNameRange     '1.3.1',
553 silly addNameRange     '1.4.0',
553 silly addNameRange     '1.4.1',
553 silly addNameRange     '1.4.2',
553 silly addNameRange     '1.4.3' ] ]
554 verbose addNamed [ 'eslint', '1.4.3' ]
555 verbose addNamed [ '1.4.3', '1.4.3' ]
556 silly lockFile 64e49e35-eslint-1-4-3 eslint@1.4.3
557 verbose lock eslint@1.4.3 /Users/maxwellheiber/.npm/64e49e35-eslint-1-4-3.lock
558 silly lockFile 64e49e35-eslint-1-4-3 eslint@1.4.3
559 silly lockFile 64e49e35-eslint-1-4-3 eslint@1.4.3
560 silly lockFile 7c3d9d24-eslint-1-0-0 eslint@^1.0.0
561 silly lockFile 7c3d9d24-eslint-1-0-0 eslint@^1.0.0
562 http 304 https://registry.npmjs.org/react-dom
563 silly registry.get cb [ 304,
563 silly registry.get   { date: 'Fri, 18 Sep 2015 01:06:34 GMT',
563 silly registry.get     via: '1.1 varnish',
563 silly registry.get     'cache-control': 'max-age=60',
563 silly registry.get     etag: '""8TXF4DNMTS5VTMT4ASM7YBZND""',
563 silly registry.get     age: '0',
563 silly registry.get     connection: 'keep-alive',
563 silly registry.get     'x-served-by': 'cache-jfk1022-JFK',
563 silly registry.get     'x-cache': 'MISS',
563 silly registry.get     'x-cache-hits': '0',
563 silly registry.get     'x-timer': 'S1442538394.099040,VS0,VE339',
563 silly registry.get     vary: 'Accept' } ]
564 verbose etag https://registry.npmjs.org/react-dom from cache
565 silly addNameRange number 2 { name: 'react-dom',
565 silly addNameRange   range: '>=0.14.0-rc <0.15.0-0',
565 silly addNameRange   hasData: true }
566 silly addNameRange versions [ 'react-dom',
566 silly addNameRange   [ '0.1.0',
566 silly addNameRange     '0.14.0-beta1',
566 silly addNameRange     '0.14.0-beta2',
566 silly addNameRange     '0.14.0-beta3',
566 silly addNameRange     '0.14.0-rc1' ] ]
567 verbose addNamed [ 'react-dom', '0.14.0-rc1' ]
568 verbose addNamed [ '0.14.0-rc1', '0.14.0-rc1' ]
569 silly lockFile e5dfc66c-react-dom-0-14-0-rc1 react-dom@0.14.0-rc1
570 verbose lock react-dom@0.14.0-rc1 /Users/maxwellheiber/.npm/e5dfc66c-react-dom-0-14-0-rc1.lock
571 silly lockFile e5dfc66c-react-dom-0-14-0-rc1 react-dom@0.14.0-rc1
572 silly lockFile e5dfc66c-react-dom-0-14-0-rc1 react-dom@0.14.0-rc1
573 silly lockFile 0db534c4-react-dom-0-14-0-rc react-dom@^0.14.0-rc
574 silly lockFile 0db534c4-react-dom-0-14-0-rc react-dom@^0.14.0-rc
575 error notarget No compatible version found: babel-relay-plugin@'file:../../scripts/babel-relay-plugin/'
575 error notarget Valid install targets:
575 error notarget [""0.1.0"",""0.1.1"",""0.1.2"",""0.1.3"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4""]
575 error notarget
575 error notarget This is most likely not a problem with npm itself.
575 error notarget In most cases you or one of your dependencies are requesting
575 error notarget a package version that doesn't exist.
576 error System Darwin 14.5.0
577 error command ""/Users/maxwellheiber/.nvm/v0.10.36/bin/node"" ""/Users/maxwellheiber/.nvm/v0.10.36/bin/npm"" ""install""
578 error cwd /Users/maxwellheiber/dev/tut/relay/examples/todo
579 error node -v v0.10.36
580 error npm -v 1.4.28
581 error code ETARGET
582 verbose exit [ 1, true ]
",mheiber,2015-09-18 18:51:16
337,2015-09-18 16:54:49,"This problem occurs when using `npm` 1.4 - you need to update to 2.0+ (`npm install -g npm@2` should do it). See more discussion in #319.
",zpao,2015-09-18 18:51:16
337,2015-09-18 18:51:15,"@mheiber I'm going to close this since there's related discussion in #319 - thanks for the question!
",josephsavona,2015-09-18 18:51:16
336,2015-09-18 00:56:51,"![screen shot 2015-09-17 at 5 56 14 pm](https://cloud.githubusercontent.com/assets/55161/9949709/7460c9ee-5d65-11e5-858b-6de8b97128ad.png)
",yungsters,2015-09-18 02:40:22
336,2015-09-18 02:18:42,"@facebook-github-bot shipit
",josephsavona,2015-09-18 02:40:22
336,2015-09-18 02:20:49,"Thanks for importing. If you are an FB employee go to https://our.intern.facebook.com/intern/opensource/github/pull_request/597495100388202/int_phab to review.
",facebook-github-bot,2015-09-18 02:40:22
335,2015-09-17 18:18:39,"This happened to work only because we only ever call it with
`VIEWER_ID`, making it a latent but harmless bug.
",wincent,2015-09-18 21:10:28
334,2015-09-17 02:54:25,"Modified RelayDefaultNetworkLayer's formatRequestErrors function to check for locations array before attempting to call locations.map.
#325
",u9520107,2015-09-18 19:15:24
334,2015-09-17 16:48:17,"@u9520107 thanks for the contribution!
",josephsavona,2015-09-18 19:15:24
334,2015-09-18 01:30:31,"Fixed coding styles accordingly.
",u9520107,2015-09-18 19:15:24
334,2015-09-18 06:02:36,"err.. not sure why the travis-ci build failed.. 
Anything else I should change?
",u9520107,2015-09-18 19:15:24
334,2015-09-18 20:15:41,"@u9520107 it looks like the failure was related to a flow update and not related to your PR. Thanks for contributing!
",josephsavona,2015-09-18 19:15:24
333,2015-09-17 01:46:33,"Currently Relay offers no warning for failing to compose a fragment all the way down to the root of your application. We have no sensible way of presenting such a warning, since all fragments are considered optional.

Let's consider introducing the notion of required/optional fragments, to both containers and to mutations.

Consider, in the latter case, a mutation that could make use of a fragment for the purposes of crafting an optimistic mutation, but otherwise doesn't absolutely need it to operate. This might look something like this:

<S_CODE_TOKEN>

Upon introduction, we can slowly migrate to making fragments required-by-default. That way, we'll be able to warn when a developer misses a composition step.
",steveluscher,2016-12-22 16:49:54
333,2016-08-09 17:29:38,"Any update on the idea of optional fragments/fields for mutations?
",BlooJeans,2016-12-22 16:49:54
333,2016-12-22 16:49:54,"This comes up periodically but hasn't been enough of a problem to warrant needing a fix. I'm going to close for now: if you have a strong use-case for this, feel free to reopen or file a new issue!",josephsavona,2016-12-22 16:49:54
332,2015-09-17 00:34:18,"This is needed to build the new version of the Babel plugin into the prototyping tools, since there's a module in the build tree that's a JSON file.
",steveluscher,2015-09-17 01:50:26
331,2015-09-17 00:31:41,"Makes it possible to build this for use in non-Node environments.
",steveluscher,2015-09-17 00:55:22
330,2015-09-16 20:54:37,"Consider this query fragment:

<S_CODE_TOKEN>

If `showComments` is false, the GraphQL server will throw an error that `comments` must have a sub selection.

We can prevent this by hoisting the inner fragment to the connection level:

<S_CODE_TOKEN>

…but perhaps there's something we should do to protect against leaving a field without sub selections and sending it up to the server.

Is the solution to deprecate `if()` and `unless()` in favor of a directive on the connection itself?

<S_CODE_TOKEN>
",steveluscher,2015-09-17 02:07:39
330,2015-09-16 20:54:50,"cc/ @josephsavona
",steveluscher,2015-09-17 02:07:39
330,2015-09-16 21:12:30,"> Is the solution to deprecate if() and unless() in favor of a directive on the connection itself?

Yup, these directives (actually, _any_ directives) are supported on master now.
",josephsavona,2015-09-17 02:07:39
330,2015-09-17 02:07:39,"So they are! Let's use those instead.
",steveluscher,2015-09-17 02:07:39
330,2016-08-10 15:09:34,"Is it possible to do this on a root query? If I have the following:

<S_CODE_TOKEN>

I'm getting ""Field ""viewer"" of type ""Root"" must have a sub selection.""
",alex-wilmer,2015-09-17 02:07:39
329,2015-09-16 20:07:18,"![screen shot 2015-09-16 at 4 18 18 pm](https://cloud.githubusercontent.com/assets/13243/9921054/93063398-5c8e-11e5-83fd-88f9950677c6.png)
",steveluscher,2015-09-17 00:30:27
329,2015-09-16 21:13:10,"Should we encourage the `@include` and `@skip` directives instead?
",josephsavona,2015-09-17 00:30:27
329,2015-09-16 22:15:35,"Done!
",steveluscher,2015-09-17 00:30:27
328,2015-09-16 17:23:03,"Bump the version now that the plugin supports printing directive metadata  (from e924c1783681b02cca5a8dfdf981d6b4399e5629)
",josephsavona,2015-09-16 18:00:34
327,2015-09-16 17:17:57,"`graphql@0.4.3` and above have changes to validation rules and parsing that affect Relay query compilation, so let's fix at `0.4.2` until we're ready to upgrade.

cc @dschafer @leebyron 
",josephsavona,2015-09-16 20:05:29
326,2015-09-16 16:05:32,"- Adds `.directives` property to `GraphQL` nodes defaulting to an empty array
- Adds `RelayQueryNode#getDirectives()` for accessing the directives on a node
- `printRelayOSSQuery` now prints directives

Note that directive values are always inlined when printing, because the schema currently does not provide information about the types of arguments for custom directives.
",josephsavona,2015-09-16 18:30:29
326,2015-09-16 16:07:38,"This will address #245 - Relay won't handle the directives itself, but will now pass them through to the server which can then skip the fields/fragments/etc.
",josephsavona,2015-09-16 18:30:29
325,2015-09-16 08:54:14,"How do we deal with mutation failures?
More specifically, how do we return the cause of the failure such as 'not enough cash', or 'health too low'?
In my server side implementation, I am prompted to throw messages as errors in the mutateAndGetPayload function:

<S_CODE_TOKEN>

However, on the client-side:

<S_CODE_TOKEN>

The above code would throw error:

<S_CODE_TOKEN>

What formatRequestError was trying to do is the look for the locations property on the error object, which since it is not a syntaxError, locations is undefined.

How do we avoid this problem?
",u9520107,2015-09-19 00:33:09
325,2015-09-16 18:24:01,"@u9520107 thanks for filing an issue - `RelayDefaultNetworkLayer` needs to be updated to handle non-syntax errors. 

For anyone interested in contributing, the fix should be a matter of testing for `locations` being null-ish, and just returning the `message` for that error.
",josephsavona,2015-09-19 00:33:09
325,2015-09-17 01:06:31,"@josephsavona 
Ok. I'll try that out today and submit a PR later.
",u9520107,2015-09-19 00:33:09
325,2015-09-19 00:33:06,"Closed by #334.
",steveluscher,2015-09-19 00:33:09
324,2015-09-16 05:38:05,"This reduces a lot of warning spam in unit tests and makes us more compatible
with the next React upgrade.
",kassens,2015-09-16 16:20:25
323,2015-09-16 02:20:13,"fe8843c089b5d6310e537f0a83444207c2a14c5f changed the schema and make `Story` implement `Node`, but this meant that `splitDeferredRelayQuery()` test cases produced different output (since story can be refetched). The fix is to add a new dummy type `NonNodeStory` that implements `FeedUnit` but not Node and use it in the test.
",josephsavona,2015-09-16 18:00:34
323,2015-09-16 02:29:57,"addresses #321 
",josephsavona,2015-09-16 18:00:34
322,2015-09-16 00:46:13,"Should ameliorate #257.
",steveluscher,2015-09-16 20:00:28
321,2015-09-16 00:01:39,"I think [this PR](https://github.com/facebook/relay/pull/316/commits) introduced some failures on master ([Travis CI output](https://travis-ci.org/facebook/relay/jobs/80348852)). I can repro locally. Going to look into it presently.

cc @josephsavona
",wincent,2015-09-16 18:24:42
321,2015-09-16 18:24:42,"fixed in #323 
",josephsavona,2015-09-16 18:24:42
320,2015-09-15 23:57:33,"Just a straight rename and relocating some static methods:
- `RelayQuery.Node.buildField` -> `RelayQuery.Field.build`
- `RelayQuery.Node.buildFragment` -> `RelayQuery.Fragment.build`
- `RelayQuery.Node.buildMutation` -> `RelayQuery.Mutation.build`
- `RelayQuery.Node.buildRoot` -> `RelayQuery.Root.build`

This shaves a few characters off each API, and moves both the code and
the concepts closer to the code for the constituent subclass
implementations, which feels like an improvement to me.

If people agree that this is a good idea, I'll apply the same treatment
to the `RelayQuery.create*` methods as well.
",wincent,2015-09-18 21:30:31
320,2015-09-16 00:02:42,":+1: 
",josephsavona,2015-09-18 21:30:31
319,2015-09-15 23:50:43,"System: Laravel Homestead VM (http://laravel.com/docs/5.1/homestead)

Issue:

Upon `cd ~/repos/relay/examples/todo && npm install`, install fails with the following output: 

576 error notarget No compatible version found: babel-relay-plugin@'file:../../scripts/babel-relay-plugin/
576 error notarget Valid install targets:
576 error notarget [""0.1.0"",""0.1.1"",""0.1.2"",""0.1.3"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3""]
576 error notarget
576 error notarget This is most likely not a problem with npm itself.
576 error notarget In most cases you or one of your dependencies are requesting
576 error notarget a package version that doesn't exist.
577 error System Linux 3.13.0-24-generic
578 error command ""/usr/bin/node"" ""/usr/bin/npm"" ""install""
579 error cwd /home/vagrant/repos/relay/examples/todo
580 error node -v v0.10.37
581 error npm -v 1.4.28
582 error code ETARGET
583 verbose exit [ 1, true ]`
",RichardForrester,2015-09-16 05:08:18
319,2015-09-15 23:53:35,"You need a newer version of npm (2.0+) which supports file references.

`npm i -g npm@latest`
",zpao,2015-09-16 05:08:18
319,2015-09-15 23:59:37,"Let us know if that fixes your problem, @RichardForrester, or simply close this issue.
",steveluscher,2015-09-16 05:08:18
319,2015-09-16 00:00:12,"@zpao Thanks!
",RichardForrester,2015-09-16 05:08:18
319,2015-09-16 04:52:09,"I think we can warn for older versions of `npm`.
",kassens,2015-09-16 05:08:18
319,2015-09-16 04:58:55,"Not well. I was going to say you could use the `devEngines` thing I wrote (in `fbjs-scripts`) as a `preinstall` hook, but you need to install `fbjs-scripts` first…

If you really wanted you could just make `npm install ../../scripts/babel-relay-plugin` a `postinstall` step.
",zpao,2015-09-16 05:08:18
319,2015-09-16 05:08:18,"Ugh, I misunderstood the `""engines""` field in `package.json`. It's only used when the package is installed somewhere else, not when `npm install` is run inside the package.
",kassens,2015-09-16 05:08:18
319,2015-09-16 05:09:43,"I was talking to @josephsavona about this the other day. One of the reasons that these are file references is so that if there's a breaking change in the framework, and we update the examples, any given clone of master will still work.

The file references are also here for the convenience of people who want to change framework code and see the effect on the examples. I think the canonical approach to this is to use `npm link` to link the example and the local copy of the npm module you're hacking on (we used to recommend this) but it doesn't get us the above-mentioned feature for free.

Programming is hard.
",steveluscher,2015-09-16 05:08:18
318,2015-09-15 19:12:38,"Not super sure if this belongs here or on SO... 

Anyway, `RANGE_ADD` requires an `edgeName`. It doesn't seem realistic to expect to know every field argument that could affect a connection or how... 

Does this mean that it's intended for cursors (as defined by the connection spec) to be stable across any set of field args on a connection?

(rmosolgo/graphql-relay-ruby#6)
",devknoll,2015-09-16 16:48:04
318,2015-09-15 21:23:40,"cc @yuzhi 
",josephsavona,2015-09-16 16:48:04
318,2015-09-15 23:01:24,"This might be a better question for GraphQL peeps @dschafer. My understanding is that cursors needs to be opaque but as long as they can be understood by the server to continue fetching additional items on a connection (with or without set of field args) then it shouldn't really matter.
But with the range add config, we would be storing the same edge.
",yuzhi,2015-09-16 16:48:04
318,2015-09-16 00:03:02,"While we're reaching out to the GraphQL folks, let's get this question on Stack Overflow. I'll ping @dschafer to answer it there, if you'd like to post the URL here.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2015-09-16 16:48:04
318,2015-09-16 11:13:19,"We have noticed the same thing about the edge for `RANGE_ADD`.

We used to encode information about the connection field arguments in our cursors, so we could raise an error if a cursor was incorrectly used with changed arguments. This was discussed in https://github.com/facebook/relay/issues/32 (see @dschafer's [answer](https://github.com/facebook/relay/issues/32#issuecomment-130410202)).

However, when adding a support for Relay mutations we noticed that we would need to return the edge from the mutations, so for example a `createStory` mutation payload would have

<S_CODE_TOKEN>

But the server doesn't know which connections (and connection field args) the client uses the edge for, so we had to remove the extra information from our cursors. They are now basically just object IDs and can be used for any connection / set of arguments. As @devknoll said, it seems like this stability is required for `RANGE_ADD`.

If cursors being compatible across different connection fields / arguments is a requirement for `RANGE_ADD` mutations, maybe it the connection spec needs to be clarified to suggest this behavior?
",fson,2015-09-16 16:48:04
318,2015-09-16 16:22:19,"I posted the question [here](https://stackoverflow.com/questions/32613879/should-the-opaque-cursors-in-connections-be-stable-across-different-field-args), but agree with @fson: if they should be stable, it should definitely be in the spec.
",devknoll,2015-09-16 16:48:04
318,2015-09-16 16:48:04,"I'm going to have someone from the GraphQL team answer this on Stack Overflow. Thanks everyone!
",steveluscher,2015-09-16 16:48:04
317,2015-09-15 17:36:32,"Fixes `story.likers.count` of `getOptimisticResponse` in the `LikeStoryMutation` example for the case where the current viewer already likes the story (this should unlike the story, thus decrementing the optimistic `likers.count` by 1).
",jshanson7,2015-09-15 18:50:37
317,2015-09-15 17:50:17,"Well caught! Thanks.
",wincent,2015-09-15 18:50:37
317,2015-09-15 17:50:32,"Nice one. Thanks!
",steveluscher,2015-09-15 18:50:37
316,2015-09-15 00:29:33,"Addresses the issue in #305: `diffRelayQuery` creates top-level queries for missing information but did not wrap the fields in fragments based on type. Rather than use `refragmentRelayQuery` which requires a full traversal of the query, this change relies on the fact that input queries are already correctly fragmented, and only needs to group the top-level fields into fragments by type.

The schema changes are required because otherwise `... on FeedUnit` would not be allowed in a `Node` context.
",josephsavona,2015-09-15 18:50:37
315,2015-09-14 23:31:34,"There was one place that I missed.
",wincent,2015-09-14 23:49:56
314,2015-09-14 22:28:18,"If you want to be sure to get the raw, unencoded product, use `window.location.href.split('#')[1];`
",steveluscher,2015-09-15 00:00:30
313,2015-09-14 21:49:55,"The old query string parser stopped parsing in Firefox when it encountered an equal sign.
",steveluscher,2015-09-14 23:10:26
312,2015-09-14 20:42:01,"As announced today, we're officially launched now and out of technical
preview:

https://twitter.com/fbOpenSource/status/643522742042628096
",wincent,2015-09-14 22:50:28
311,2015-09-14 17:48:09,"Instead of just logging, actually treat webpack compilation errors as
a failure so that we don't continue.

Test Plan: `gulp dist && echo 'foo'` (with `fbjs@0.2.0`), don't see `foo` echoed.

cc @steveluscher @wincent 

This is the shortest path to prevent the specific issue in #303. Longer term, we might want to something a bit more versatile that also checks at the npm dependency level (might be some packages that do it already, but also pretty easy to do with some `npm outdated --json` and some semver checking or `npm ls --depth=0 | grep 'ERR!'`)
",zpao,2015-09-15 00:05:27
311,2015-09-14 20:46:24,"Thanks, @zpao. Want to go ahead and import this on the FB side so we can get this in?
",wincent,2015-09-15 00:05:27
310,2015-09-14 17:11:31,"This came up as a question on Stack Overflow[0](http://stackoverflow.com/questions/32550061), so I thought we should
document this.
",wincent,2015-09-14 21:00:50
309,2015-09-14 11:30:08,"Apparently it is currently possible to set variables via identically named props. The subsequent(?) request however does not consider that set value.

I saw that you already have an issue for this in your internal bug tracker (https://github.com/facebook/relay/blob/d2f9ae54ba1a8810a1a43ef199e073687932c2d3/src/container/RelayContainer.js#L832), but I thought this issue might be valuable for other people who run in the same problem.

i just renamed the variable, which worked fine for me.
",Gregoor,2016-06-28 00:44:54
309,2015-09-15 18:04:22,"For context, `variables` have to passed as as props to child components because of cases like this:

<S_CODE_TOKEN>

But rendering `<Picture pic={this.props.user} size={32} />` makes it clear which set of variables apply to the child.

That said, this is an area of the API that we'd like to clean up. One proposal is the following:

<S_CODE_TOKEN>
",josephsavona,2016-06-28 00:44:54
309,2015-09-15 18:32:15,"@josephsavona Why not use the [GraphQL syntax for aliases](http://facebook.github.io/graphql/#sec-Field-Alias) instead of the special `@relay` directive in this case?

<S_CODE_TOKEN>
",fson,2016-06-28 00:44:54
309,2015-09-15 18:34:15,"@fson That would be awesome - but that syntax is not supported for fragments. The above is equivalent to the following:

<S_CODE_TOKEN>
",josephsavona,2016-06-28 00:44:54
309,2015-09-15 18:47:10,"@josephsavona Oh, I see.

In the `@relay(alias: 'bigPic')` example, I assume Relay would convert it to something like this:

<S_CODE_TOKEN>

Where is the name of the field (`profilePic` in this case) defined?
",fson,2016-06-28 00:44:54
309,2015-09-15 18:51:42,"cc @schrockn @leebyron 
",josephsavona,2016-06-28 00:44:54
309,2015-09-18 22:50:26,"@fson Relay can't convert to `lilPic: profilePic ...` because that assumes the fragment has one root field, which is rarely the case. 

Per offline discussion with @leebyron and @dschafer we'll probably have to add support for fragment aliases in the language to make this seamless. This would use your earlier proposal, @fson:

<S_CODE_TOKEN>
",josephsavona,2016-06-28 00:44:54
309,2015-09-18 23:04:15,"Thanks for the clarification @josephsavona.

This seems like the most obvious syntax. However, wouldn't it also assume a fragment with just one field that it can alias? What would happen if you try to apply it to fragment with many fields?
",fson,2016-06-28 00:44:54
309,2015-09-18 23:12:10,"@fson the response for aliased fragments would be an object:

<S_CODE_TOKEN>

Then use it:

<S_CODE_TOKEN>
",josephsavona,2016-06-28 00:44:54
309,2015-09-18 23:27:56,"If that's how it would work, how does that differ from this (currently supported) syntax?

<S_CODE_TOKEN>

Maybe there is some more complex use case that I'm not seeing right now...
",fson,2016-06-28 00:44:54
309,2015-09-18 23:37:26,"@fson the new syntax would create a new object, into which the results of the fragment are spread. The current syntax spreads the result into the _outer_ object.

Old result:

<S_CODE_TOKEN>

New result:

<S_CODE_TOKEN>
",josephsavona,2016-06-28 00:44:54
309,2015-09-18 23:50:16,"Ah, I got it now :+1: Thanks.
",fson,2016-06-28 00:44:54
309,2015-11-11 17:16:34,"Am I right in thinking that this issue is saying that if I have a Relay container with variables set up like this:

<S_CODE_TOKEN>

And then I render it like this:

<S_CODE_TOKEN>

anotherId will override the value of callId but will not actually cause a re-fetch?
",saikat,2016-06-28 00:44:54
309,2015-11-11 17:18:28,"You need to pass through the variable mapping with `getFragments` as well, e.g. `${CallViewer.getFragments('viewer', variables)}`
",taion,2016-06-28 00:44:54
309,2015-11-21 13:55:09,"@josephsavona Looks like we have to pass both - variable mapping **and** prop with same name to make this work as @taion mentions above.

My example:
I need to display different number of items in connection for different scenarios. Child fragment has variable `commentsShown`.

But if I only pass variable mapping (without props) - Relay fetches all items as expected, but truncates them to initial variable value on render.

If I only pass `prop` with same name - Relay won't fetch all items (subject of this issue).

If I pass both - `commentsShown` variable and `commentsShown` prop everything works as expected. But that seems odd for me. 

Am I missing something?
",vladar,2016-06-28 00:44:54
309,2015-11-21 14:46:30,"@vladar yup! This is because you might use the same fragment twice with different variables. See my answer above: https://github.com/facebook/relay/issues/309#issuecomment-140485321
",josephsavona,2016-06-28 00:44:54
309,2015-12-16 22:47:33,"Variables set via props are (silently) breaking the fetch indeed.

Is this supposed to work ?

If not, what's the proper way to fetch data using variables based on props owned by the parent ? I tried setting relay variables in the component constructor, but:
- I suspect this is an anti-pattern
- relay triggers a first fetch with initial values for variables before using the variables set in the component  constructor
",netgusto,2016-06-28 00:44:54
309,2015-12-16 23:14:35,"You're doing it wrong - follow the pattern above and inject the variables in via the container as well as via props.
",taion,2016-06-28 00:44:54
309,2015-12-17 08:18:46,"@taion but these prop'd variables are known only in the component context, and not statically in the `fragments` section of the relay container (for instance, a piece of state handled by a component).

Is there something I'm missing ? I mean, fragment variables live in a static context, and I can't see how I would be able to access component runtime data within that static context. Could you explain me, please ?
",netgusto,2016-06-28 00:44:54
309,2015-12-17 13:09:32,"@netgusto 

You should define variable mapping when including nested fragment:

<S_CODE_TOKEN>

Then when your component is rendered with custom `myProp` Relay will assign it to nested container variable (`variable2` in this example). Note, that `myProp` must also be defined in `initialVariables` even if it's `null`.
",vladar,2016-06-28 00:44:54
309,2015-12-21 12:23:31,"How to do this for nested structure ?

https://stackoverflow.com/questions/34255662/props-in-relay-preparevariables

I want to set expanded for some of the tree.
I have saved the expanded state and when i navigate i save this in sessionStorage, when i return i want to restore the expanded state of all the branches and leafs.
",quazzie,2016-06-28 00:44:54
309,2015-12-21 17:05:13,"@quazzie Thanks for asking. I'm writing an answer to your question on Stack Overflow.
",josephsavona,2016-06-28 00:44:54
309,2015-12-22 09:40:04,"@taion @vladar Thanks for you answers.

**(react-relay v 0.6.0)**

Still, the relay variables set in the parent (`Freelance`) are set in the nested component (`FreelanceList`; when `console.log`ing this.props.relay.variables I can see them), but not used by relay in the query fragment defined by `FreelanceList`.

I'm puzzled, to say the least.

<S_CODE_TOKEN>
",netgusto,2016-06-28 00:44:54
309,2015-12-22 12:05:24,"I've set up this playground that reproduces the problem: https://goo.gl/i7uuMt
On line 24, change `""the static message""` by `$message` : props are passed, variables are set, but no query results
",netgusto,2016-06-28 00:44:54
309,2015-12-27 10:29:47,"anyone ?
",netgusto,2016-06-28 00:44:54
309,2015-12-27 11:49:34,"@netgusto Yeah, this variable mapping process is one of the most error-prone and unclear areas in Relay.

It is better to understand it's internals better to avoid pitfalls. You must realize that GraphQL query is prepared in static time - before components are rendered. Relay cannot know value of your `props` at  this point in time. That is why it must be passed in as variable (route param for initial rendering and `setVariables` for subsequent renderings).

But in your example `HelloRoute` doesn't define any variable mappings and is rendered without any params. As a result GraphQL query is constructed with default values!

To make your example work you must 1) change your Route:

<S_CODE_TOKEN>

2) Add your message as route param on render:

<S_CODE_TOKEN>

3) As far as I understand Relay expects explicit mapping, so your `HelloApp` container must be also tweaked:

<S_CODE_TOKEN>

Note: this is how you do it to construct initial query for route. But for subsequent queries, you use `setVariables()` + `props`.
",vladar,2016-06-28 00:44:54
309,2015-12-27 15:04:01,"Thank you @vladar for your detailed answer. Applying your advices, I can't get it to work on the React Playground.

It's bugging me how difficult it is to use relay for some simple use cases. Maybe my approach is wrong.

What I've found difficult so far :
- Static query resolution; I understand why it's done that way, and do not complain; but some use cases (using a piece of component state as a variable) are simply not possible (I'd be happy if someone could prove me wrong on the Relay playground above :) )
- Viewer to work around issue #112
- naming is very slippery; especially, everything seems to breaks if a fragment is named the same as one of it's nested fragments; every parent component has to know the name of the fragments its children expect to be fetched
- the flow of data as props between parent / child is unclear to me; also, very difficult to debug when data does not flow correctly (until the Relay dev tools are released maybe ?)
- No integrated paginated connection; some apps still make good use of paged lists, and do not use infinite scroll

This is not a complain, do not get me wrong. I appreciate the effort the community and FB puts in this project.

Thanks !
",netgusto,2016-06-28 00:44:54
309,2015-12-27 17:36:35,"Hey, try https://goo.gl/08PZ7g - working version on playground.

Also note that I am not a member of Relay team, so no comments on your points, although I do share some of them.
",vladar,2016-06-28 00:44:54
309,2015-12-27 20:03:03,"@vladar thanks for answering so many questions here and for the working playground. there's one hand-coded message left though...

@netgusto [here](https://facebook.github.io/relay/prototyping/playground.html#source=%2F%2F%20LINE%2024%20below%3B%20change%20%22the%20static%20message%22%20below%20by%20%24message%20%3A%20boom%20!%0A%0Aclass%20HelloNested%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20%2F%2F%20Relay%20will%20materialize%20this%20prop%20based%20on%20the%0A%20%20%20%20%2F%2F%20result%20of%20the%20query%20in%20the%20next%20component.%0A%20%20%20%20var%20%7Bmessageback%7D%20%3D%20this.props.echoz.echo%3B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Ch1%3E%7Bmessageback%7D%20!%3C%2Fh1%3E%0A%20%20%20%20%20%20%20%20%3Chr%20%2F%3E%0A%20%20%20%20%20%20%20%20%3Cpre%3E%7BJSON.stringify%28this.props%2C%20null%2C%202%29%7D%3C%2Fpre%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0AHelloNested%20%3D%20Relay.createContainer%28HelloNested%2C%20%7B%0A%20%20initialVariables%3A%20%7B%20message%3A%20null%20%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20%2F%2F%20change%20%22the%20static%20message%22%20below%20by%20%24message%20%3A%20boom%20!%0A%20%20%20%20echoz%3A%20%28%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Viewer%20%7B%0A%20%20%20%20%20%20%20%20echo%28message%3A%20%24message%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20messageback%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0A%2F**%0A%20*%20%231%20-%20Your%20React%20components%0A%20*%20This%20will%20look%20familiar%20to%20React%20developers.%0A%20*%0A%20*%20To%20learn%20more%20about%20React%2C%20visit%3A%0A%20*%20%20https%3A%2F%2Ffacebook.github.io%2Freact%0A%20*%2F%0Aclass%20HelloApp%20extends%20React.Component%20%7B%0A%20%20render%28%29%20%7B%0A%20%20%20%20return%20%28%0A%20%20%20%20%20%20%3CHelloNested%20%0A%20%20%20%20%20%20%20%20echoz%3D%7Bthis.props.echoz%7D%20%0A%20%20%20%20%20%20%20%20message%3D%7Bthis.props.relay.variables.message%7D%0A%20%20%20%20%20%20%20%20%2F%3E%0A%20%20%20%20%29%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%232%20-%20Relay%20containers%0A%20*%20Compose%20your%20React%20components%20with%20a%20declaration%20of%0A%20*%20the%20GraphQL%20query%20fragments%20that%20fetch%20their%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-containers.html%0A%20*%2F%0AHelloApp%20%3D%20Relay.createContainer%28HelloApp%2C%20%7B%0A%20%20initialVariables%3A%20%7Bmessage%3A%20null%7D%2C%0A%20%20fragments%3A%20%7B%0A%20%20%20%20echoz%3A%20%28variables%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20fragment%20on%20Viewer%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BHelloNested.getFragment%28'echoz'%2C%20%7Bmessage%3A%20variables.message%7D%29%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%0A%7D%29%3B%0A%0A%2F**%0A%20*%20%233%20-%20Relay%20routes%0A%20*%20Define%20a%20root%20GraphQL%20query%20into%20which%20your%0A%20*%20containers'%20query%20fragments%20will%20be%20composed.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20routes%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-routes.html%0A%20*%2F%0Aclass%20HelloRoute%20extends%20Relay.Route%20%7B%0A%20%20static%20routeName%20%3D%20'Hello'%3B%20%20%2F%2F%20A%20unique%20name%0A%20%20static%20paramDefinitions%20%3D%20%7B%0A%20%20%20%20message%3A%20%7Brequired%3A%20true%7D%0A%20%20%7D%3B%0A%20%20static%20queries%20%3D%20%7B%0A%20%20%20%20echoz%3A%20%28Component%2C%20variables%29%20%3D%3E%20Relay.QL%60%0A%20%20%20%20%20%20query%20%7B%0A%20%20%20%20%20%20%20%20Viewer%20%7B%0A%20%20%20%20%20%20%20%20%20%20%24%7BComponent.getFragment%28'echoz'%2C%20%7Bmessage%3A%20variables.message%7D%29%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%60%2C%0A%20%20%7D%3B%0A%7D%0A%0A%2F**%0A%20*%20%234%20-%20Relay%20root%20containers%0A%20*%20Compose%20a%20Relay%20container%20with%20a%20Relay%20route.%0A%20*%20This%20enables%20Relay%20to%20synthesize%20a%20complete%20query%0A%20*%20to%20fetch%20the%20data%20necessary%20to%20render%20your%20app.%0A%20*%0A%20*%20To%20learn%20more%20about%20Relay%20root%20containers%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Ffacebook.github.io%2Frelay%2Fdocs%2Fguides-root-container.html%0A%20*%2F%0AReactDOM.render%28%0A%20%20%3CRelay.RootContainer%0A%20%20%20%20Component%3D%7BHelloApp%7D%0A%20%20%20%20route%3D%7Bnew%20HelloRoute%28%7Bmessage%3A%20%22my%20message%20from%20props%22%7D%29%7D%0A%20%20%2F%3E%2C%0A%20%20mountNode%0A%29%3B%0A&schema=%2F**%0A%20*%20Copyright%202013-2015%2C%20Facebook%2C%20Inc.%0A%20*%20All%20rights%20reserved.%0A%20*%0A%20*%20This%20source%20code%20is%20licensed%20under%20the%20BSD-style%20license%20found%20in%20the%0A%20*%20LICENSE%20file%20in%20the%20root%20directory%20of%20this%20source%20tree.%20An%20additional%20grant%0A%20*%20of%20patent%20rights%20can%20be%20found%20in%20the%20PATENTS%20file%20in%20the%20same%20directory.%0A%20*%2F%0A%0Aimport%20%7B%0A%20%20GraphQLObjectType%2C%0A%20%20GraphQLSchema%2C%0A%20%20GraphQLString%2C%0A%7D%20from%20'graphql'%3B%0A%0A%20%20var%20EchoType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Echo'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20messageback%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20GraphQLString%0A%20%20%20%20%20%20%7D%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0Avar%20ViewerType%20%3D%20new%20GraphQLObjectType%28%7B%0A%20%20name%3A%20'Viewer'%2C%0A%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20echo%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20EchoType%2C%0A%20%20%20%20%20%20%20%20args%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20message%3A%20%7B%20type%3A%20GraphQLString%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20resolve%3A%20%28root%2C%20args%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20console.log%28'ARGS%20IN%20GRAPHQL'%2C%20args%29%3B%0A%20%0A%20%20%20%20%20%20%20%20%20%20return%20%7B%20messageback%3A%20'YOU%20SAID%20%3A%20'%20%2B%20args.message%20%7D%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%7D%29%2C%0A%7D%29%3B%0A%0A%0A%2F**%0A%20*%20The%20schema.%0A%20*%20Here%20we%20export%20a%20schema%20that%20offers%20one%20root%0A%20*%20field%20named%20'greetings'%2C%20and%20a%20method%20to%0A%20*%20resolve%20its%20data.%0A%20*%0A%20*%20To%20learn%20more%20about%20writing%20GraphQL%20schemas%20for%20Relay%2C%20visit%3A%0A%20*%20%20%20https%3A%2F%2Fgithub.com%2Fgraphql%2Fgraphql-relay-js%0A%20*%2F%0Aexport%20default%20new%20GraphQLSchema%28%7B%0A%20%20query%3A%20new%20GraphQLObjectType%28%7B%0A%20%20%20%20name%3A%20'RootQueryType'%2C%0A%20%20%20%20fields%3A%20%28%29%20%3D%3E%20%28%7B%0A%20%20%20%20%20%20Viewer%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20ViewerType%2C%0A%20%20%20%20%20%20%20%20resolve%3A%20%28%29%20%3D%3E%20%28%7B%20%7D%29%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%29%2C%0A%20%20%7D%29%2C%0A%7D%29%3B%0A) is an edited version of the playground with variables passing though from the route through to the bottom component.

Thanks for the great questions and observations. I'll try to provide a bit more context:

> Static query resolution; I understand why it's done that way, and do not complain; but some use cases (using a piece of component state as a variable) are simply not possible (I'd be happy if someone could prove me wrong on the Relay playground above :) )

We agree that passing variables in both the static query and as props is not ideal, but it's currently necessary to distinguish between the same container being referenced multiple times with different variables - see my [earlier comment](https://github.com/facebook/relay/issues/309#issuecomment-140485321). Also note that it's absolutely possible to use component state as a variable - if you're willing to make multiple round trips for data. Relay optimizes for a single round-trip by default using static variables, but for complex use-cases you can use `setVariables` after the component mounts to fetch additional data (based on the previously fetched data or local state).

> naming is very slippery; especially, everything seems to breaks if a fragment is named the same as one of it's nested fragments; every parent component has to know the name of the fragments its children expect to be fetched
> the flow of data as props between parent / child is unclear to me; also, very difficult to debug when data does not flow correctly (until the Relay dev tools are released maybe ?)

Fragments can be named the same as children fragments without issue, but I can see how it might have appeared that this wasn't the case while you were debugging other issues. We agree with your second point here that Relay could (should) be more debuggable. Now that the core functionality is stable, this is something we'd like to work with the community on. Ideas and contributions welcome!

> No integrated paginated connection; some apps still make good use of paged lists, and do not use infinite scroll

Agreed: we've focused on making infinite scroll easy (since we use it heavily internally), while other forms of pagination are less obvious to implement. Again, this is an area where community contributions would be especially welcome.
",josephsavona,2016-06-28 00:44:54
309,2016-02-11 15:46:26,"I'm pretty well on track with how to do this via @josephsavona's example. But while working with similar code, I am getting the following error:

<S_CODE_TOKEN>

This is the fragment I am working with:

<S_CODE_TOKEN>
",jeromecovington,2016-06-28 00:44:54
309,2016-02-11 16:41:48,"@jeromecovington To reference a variable, just use `$var`:

<S_CODE_TOKEN>
",josephsavona,2016-06-28 00:44:54
309,2016-02-11 18:19:44,"@josephsavona  - But here I am trying to set the values of `termSlug` and `taxSlug` to those passed in via the route. Ex.

<S_CODE_TOKEN>
",jeromecovington,2016-06-28 00:44:54
309,2016-02-11 18:25:54,"Ah! I see that works...I thought I needed to explicitly reference `variables` in the query template string. Thanks!
",jeromecovington,2016-06-28 00:44:54
309,2016-02-18 04:21:51,"@josephsavona Is there a place to track if the fragment alias will be added to the language? Thank you.

<S_CODE_TOKEN>
",guzart,2016-06-28 00:44:54
309,2016-02-18 05:27:08,"@guzart see https://github.com/facebook/graphql/issues/137

This is something that makes sense for Relay because of the way we do fragment composition with effectively local variables. It isn't so clear if this makes sense for GraphQL clients generally, though, so we may pursue alternatives (for example, a relay directive for providing an alias). 
",josephsavona,2016-06-28 00:44:54
309,2016-04-21 14:49:56,"why not use something else instead of `props` to set variables?
",mickeyinfoshan,2016-06-28 00:44:54
309,2016-06-28 00:44:54,"Thanks for all of the interesting discussion, everyone. This GitHub issue is going a bit off the rails though; I'm going to close it now that we understand how and when variables get overwritten with props. If anyone would like to raise a follow-on issue, please feel free to open a new one!
",steveluscher,2016-06-28 00:44:54
308,2015-09-14 08:29:19,"As per #258 
",freiksenet,2015-09-16 20:30:27
308,2015-09-14 17:20:02,"I've imported this into our internal Phabricator instance so we can get some other eyes on it. Thanks for the PR, @freiksenet.
",wincent,2015-09-16 20:30:27
308,2015-09-15 18:14:13,"Relay currently assumes that `clientMutationId` is non-null; we should add the requisite invariant checks before updating the spec.
",josephsavona,2015-09-16 20:30:27
308,2015-09-16 07:27:15,"Does it assume that in the schema or in result? Current spec enforces resulting `clientMutationId` to be non-null if it was passed in query, so relay will always get it and not getting it is a valid error.
",freiksenet,2015-09-16 20:30:27
308,2015-09-16 17:45:07,"I see, I was probably being overly cautious. :+1: 
",josephsavona,2015-09-16 20:30:27
307,2015-09-14 08:02:43,"I am getting this invariant in relay 0.3.1.

Reason is that query in the mutation also requires some variables for field arguments. 

I shortened output, as its very long but should illustrate the issue.

This invariant is in [getQueryString](https://github.com/facebook/relay/blob/master/src/network/RelayMutationRequest.js#L80)

`printedQuery.text`

<S_CODE_TOKEN>

`printedQuery.variables`

<S_CODE_TOKEN>
",jardakotesovec,2015-09-18 23:21:13
307,2015-09-14 08:34:18,"And if I remove this invariant, server gives me:

<S_CODE_TOKEN>

Since field arguments were moved to `variables` I have troubles. Is this also bug or I am doing something wrong? Clearly `variables` can't have only $input, as they need to contain also field arguments for the query.

So I am still stuck with 0.1.1.
",jardakotesovec,2015-09-18 23:21:13
307,2015-09-14 14:44:29,"This is a bug, and I missed this when adding support for extracting enums & input objects from `query` types to the printer. For context, enums and input objects are new in GraphQL RFC so our support for them isn't as fully tested. @jardakotesovec we apologize that you've run into some bugs when using them and we'll get this fixed for the next release.
",josephsavona,2015-09-18 23:21:13
307,2015-09-14 14:48:53,"@josephsavona ok, thanks a lot for quick response. I will look forward to new version and meanwhile stick with 0.1.1
",jardakotesovec,2015-09-18 23:21:13
307,2015-09-14 14:50:31,"Alternately, use strings instead of enums ;-)
",josephsavona,2015-09-18 23:21:13
307,2015-09-18 23:21:13,"@jardakotesovec this is now addressed on master and will be out in the next release. thanks for filing the issue!
",josephsavona,2015-09-18 23:21:13
307,2015-09-20 11:13:56,"@josephsavona Great, thanks..  Noticed that it just missed 0.3.2 release. Hope another minor version bump will be soon :-).
",jardakotesovec,2015-09-18 23:21:13
306,2015-09-14 04:17:20,"`GraphQLPrinter` previously worked by concatenating strings, which makes composition and reusing functions much harder (see #297 for the workarounds that this required - bc a string may represent a literal value _or_ some already printed code). This refactors the printer to use babel's builder functions, so that `print*` functions all return JavaScript AST nodes.
",josephsavona,2015-09-14 20:25:37
306,2015-09-14 04:22:50,":moneybag: in the :bank: !
",yungsters,2015-09-14 20:25:37
306,2015-09-14 04:38:39,"> using an AST instead of strings

**YES**

<img width=""300"" src =""http://previews.123rf.com/images/noltelourens/noltelourens0611/noltelourens061100058/603567-Businessman-wearing-black-sunglasses-showing-thumbs-up-and-smiling-Stock-Photo.jpg"">
",kittens,2015-09-14 20:25:37
305,2015-09-14 03:07:29,"I have one component with this query fragment:

<S_CODE_TOKEN>

If I click from that component to another one that has the same query except it also asks for the body field e.g.:

<S_CODE_TOKEN>

Relay then sends in parallel 5 queries that look like:
`{ query: 'query Router{node(id:""UG9zdDo1MA==""){body,id}}`​

This errors as the `Node` type doesn't have a body field.
",KyleAMathews,2015-09-15 21:26:36
305,2015-09-14 03:15:05,"Thanks for reporting this. It looks like `diffRelayQuery()` isn't taking into account the parent type.
",josephsavona,2015-09-15 21:26:36
305,2015-09-15 21:26:36,"@KyleAMathews thanks again for reporting this - the issue is now fixed on master, i'm going to close.
",josephsavona,2015-09-15 21:26:36
305,2015-09-15 21:30:39,"Thanks for the fix! Also great talk yesterday @scale. Watched it this
morning.
On Tue, Sep 15, 2015 at 2:26 PM Joseph Savona notifications@github.com
wrote:

> Closed #305 https://github.com/facebook/relay/issues/305.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/305#event-410309954.
",KyleAMathews,2015-09-15 21:26:36
305,2015-09-16 00:04:52,"thanks! :-)
",josephsavona,2015-09-15 21:26:36
304,2015-09-12 07:51:01,"I'm getting this error in the following fragment:

<S_CODE_TOKEN>

 I've tried changing my use of `getFragment` to all of the following as per the error, none of which have worked:

<S_CODE_TOKEN>

So whatever this error message means, its suggested fix is incorrect and confusing. Please try to make it more descriptive. Thanks.
",boosh,2015-10-12 20:48:59
304,2015-09-12 08:12:16,"That's one thing with the error messages - it's not very clear exactly where the cause is. I.e. the messages might say _what_ is wrong, but you have to hunt around to try to find exactly which bit of code is responsible. Is there some way for error messages to include the file name & line that triggered them, or at least the component name or something?

Well I guess you can see this in the stack trace, but I still can't find how to fix this....
",boosh,2015-10-12 20:48:59
304,2015-09-12 18:34:10,"@boosh what is the exact error message that you're getting? `Invariant Violation: RelayQL: Invalid fragment composition, use `${Child.getFragment('name')}`.` ?

Are you sure that `StatusMutation.getFragment('viewer')` is returning a non-null value?
",josephsavona,2015-10-12 20:48:59
304,2015-10-12 19:55:48,"Ping @boosh.
",yungsters,2015-10-12 20:48:59
304,2015-10-12 20:48:59,"I can't reproduce this now. It was probably fixed by upgrading to 0.3.2, I'm not sure. I'm about to restart work on the client again once I've put the finishing touches to the server. If I run into this issue again I'll reopen this issue with more details.
",boosh,2015-10-12 20:48:59
303,2015-09-12 05:17:58,"So v0.3.0 was a broken build (see #301) that I had to redo and supersede with v0.3.1.

This was the first time I'd done the release, so I inspected the `package.json` to see what would happen on running `npm publish`. Based on that reading, I expected this to happen:
- `prepublish` would run, which would...
- run `build`, which would...
- kick off `gulp`, which would...
- build things such as the files under `dist`, then...
- actually publish to NPM

What actually happened:
- as above, but the `gulp` build threw an error, and ...
- the module got published anyway

I blew away my state, reinstalled and ran `gulp` again to be sure it could run to completion without error, but I didn't realize that the built package itself was faulty until #301 was reported.

So, this is unfortunate and I am sorry it happened, but we should try to make the whole thing more resilient such that this particular failure mode can't happen again.

Open questions:
- did the `gulp` build actually exit with a non-zero exit status on hitting the error?
- if so, does that failure affect the overall return status of the `build` subtask?
- and correspondingly, is a `build` failure enough to make `prepublish` abort?
",wincent,2015-09-15 17:20:56
303,2015-09-12 21:28:43,"I don't think gulp did exit with non-zero. And yes, I'm pretty sure a non-zero `prepublish` would have aborted `publish`.

There are 2 pieces here.
1. The very dumb module rewriting, which in order to be fast (and simple), doesn't actually resolve modules, just works purely in inputs (though will throw on duplicates). We could make it actually do some resolution (eg, just in map or relative), would just slow it down a little bit.
2. In this case it was the webpack step which ""failed"" and I would have expected to error with non-zero but perhaps this doesn't do what we want (https://github.com/facebook/relay/blob/master/gulpfile.js#L98).
",zpao,2015-09-15 17:20:56
303,2015-09-14 17:21:23,"I'll see if I can repro what actually happened so that we're not shooting in the dark here.
",wincent,2015-09-15 17:20:56
303,2015-09-14 17:50:35,"`npm install fbjs@0.2.0` and then you should see exactly what happened (perhaps with a minor difference of something saying how you got the dependency installed - `fbjs@^0.2.0` vs `fbjs@0.2.0`)
",zpao,2015-09-15 17:20:56
303,2015-09-15 17:20:56,"I think ab2afb30b7c53bca75638758acc4a3a4f0542309 is mitigation enough for now. Thanks, @zpao.
",wincent,2015-09-15 17:20:56
302,2015-09-12 04:15:09,"We need to rebuild the just-released (as v0.3.0) NPM package, which had
faulty `dist/` contents.

Fixes https://github.com/facebook/relay/issues/301
",wincent,2015-09-12 04:30:26
302,2015-09-12 04:17:11,"(any way to avoid this in the future?)
",mhart,2015-09-12 04:30:26
302,2015-09-12 04:20:13,"> (any way to avoid this in the future?)

I think so. I think there was a failure in our `prepublish` task and it didn't correctly abort the `publish`. I'll file a separate issue for fixing that.
",wincent,2015-09-12 04:30:26
301,2015-09-12 02:13:08,"I'm getting:

<S_CODE_TOKEN>

When trying to use `dist/relay.js` (or `dist/relay.min.js`) just included in a script tag on the page:

<S_CODE_TOKEN>

(`/relay` is serving statically from `node_modules/react-relay/dist`)

This does not occur in 0.2.1
",mhart,2015-09-12 04:30:26
301,2015-09-12 02:29:38,"FWIW I also have a browserified bundle.js included as a script tag further down – it does not include any of React or Relay in the bundle though, only my components. React and Relay are referenced in the following manner:

<S_CODE_TOKEN>

Again, this worked fine in 0.2.1
",mhart,2015-09-12 04:30:26
301,2015-09-12 02:46:48,"Actually, scratch that, the error occurs even if I comment out the browserified bundle, so we can remove that from the equation.

Literally these three lines can reproduce the error:

<S_CODE_TOKEN>
",mhart,2015-09-12 04:30:26
301,2015-09-12 03:43:04,"Thanks for the heads up. You need a later version of fbjs to get `filterObject` (see https://github.com/facebook/relay/commit/3f39600969b90294eeffd7a8bd3c1a2586fef387). Not at a computer now, but that hunk looks like it somehow got reverted. I'll push a fix presently.
",wincent,2015-09-12 04:30:26
301,2015-09-12 03:51:43,"> but that hunk looks like it somehow got reverted

Er, actually, no. I just suck at reading diffs on my phone, the dependency is still intact in the `package.json`.

Can you check for me whether you still see this error after an `npm update`? 
",wincent,2015-09-12 04:30:26
301,2015-09-12 04:07:25,"The problem described above is actually with the dist file, not the other parts of the node module. I can reproduce this easily just by loading the dist file as mentioned. And actually, it just looks like v0.3 was built & packaged without updating fbjs locally (which would explain why it's looking at `./filterObject`, it didn't have an updated module map from fbjs). `lib/buildRQL` also isn't pointing into fbjs for filterObject.

You should rebuild and publish 0.3.1 asap.
",zpao,2015-09-12 04:30:26
301,2015-09-12 04:08:24,"> You should rebuild and publish 0.3.1 asap.

Doing that right now.
",wincent,2015-09-12 04:30:26
301,2015-09-12 04:10:10,":thumbsup: Thanks Greg!
",zpao,2015-09-12 04:30:26
301,2015-09-12 04:42:47,"Confirmed, thanks all.
",mhart,2015-09-12 04:30:26
300,2015-09-11 23:13:25,,steveluscher,2015-09-12 07:05:24
300,2015-09-12 05:00:32,"Did you mean to create a `website-building-docs` branch directly on the https://github.com/facebook/relay repo? (I thought you might have done it by accident.)
",wincent,2015-09-12 07:05:24
300,2015-09-12 06:51:57,"I did.

I don't have my own fork of Relay, and I prefer to keep feature branches as close to `facebook/relay#master` as possible. That, and I _always_ clean up merged branches.

I realize that this is an unpopular way of working, and an exclusive privilege of those with push access to this repository. Though I find this workflow to be simple and effective, I'm open to being compelled to change.
",steveluscher,2015-09-12 07:05:24
300,2015-09-14 22:29:42,"> Though I find this workflow to be simple and effective, I'm open to being compelled to change.

I think it's fine, so I wouldn't try to compel you. FWIW, the two reasons I push to my fork rather than here directly are that:
1. There are a lot of eyes on this repo, so I prefer to avoid any confusion about such a branch enjoying ""official"" status when it's actually just a work-in-progress that's going to get deleted.
2. I like the layer of indirection that prevents me from doing something silly or destructive like pushing the wrong branch, or overwriting a branch etc in a highly visible place.

But I think you should keep doing whatever works for you.
",wincent,2015-09-12 07:05:24
299,2015-09-11 20:16:35,"Publishing this one prior to v0.3.0 of the react-relay package, which
will depend on it.
",wincent,2015-09-12 01:05:30
298,2015-09-11 18:26:54,,wincent,2015-09-12 01:35:25
298,2015-09-11 19:02:26,"Note: I'm going to publish and bump the babel-relay-plugin dependency before shipping this.
",wincent,2015-09-12 01:35:25
298,2015-09-11 20:11:46,"Looks like Travis wants the plugin published separately and previously, so I'll split that bit off into a separate PR.
",wincent,2015-09-12 01:35:25
297,2015-09-11 18:26:38,"Adds support for directives to `babel-relay-plugin` which were previously ignored. Directives are now passed to `GraphQL.*` nodes as metadata on root fields, fragments, and plain fields.
",josephsavona,2015-09-16 01:10:29
297,2015-09-12 18:38:47,"this will address #245 
",josephsavona,2015-09-16 01:10:29
296,2015-09-11 14:58:01,"When you have defined field as an union of two types (in example machines contains Ships and Droid) then in Relay you can do something like that:

<S_CODE_TOKEN>

so under machines prop your objects are correctly evaluated, but if you want to do that using fragments from external components:

<S_CODE_TOKEN>

then you end up with fragment definitions under machines. It looks like you are trapped and can't check which object is which type in machines array so you can't decide which component should be used.
",jzalucki,2015-09-14 07:09:17
296,2015-09-11 16:16:07,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2015-09-14 07:09:17
296,2015-09-14 06:26:49,"Ping! I'm really dying to answer that you can include a `__typename` field in your query, but I'd like you to post the question on Stack Overflow where people can continue to benefit from the answer long after this GitHub issue is closed.
",steveluscher,2015-09-14 07:09:17
296,2015-09-14 06:59:59,"Posted here:
http://stackoverflow.com/questions/32558861/union-types-support-in-relay
",jzalucki,2015-09-14 07:09:17
295,2015-09-11 11:06:00,"How do i get the mutation to update a GraphQLList property.

Say i have `user { id: '...', tags: ['hey', 'ho', 'do'], ...}`
Then i have a mutation that removes 'ho' from the list and i return the new list in the payload:
`payload { user: { id: '...', tags: ['hey', 'do'] } }`

If i use FIELDS_CHANGE its not reflected (because it merges ?) in the store.

<S_CODE_TOKEN>

And i can't use NODE_DELETE because it requires a connection ?

Update: Its when you remove item(s) at the end of the list.
",quazzie,2015-09-21 23:46:23
295,2015-09-11 11:16:48,"<S_CODE_TOKEN>
",quazzie,2015-09-21 23:46:23
295,2015-09-11 12:04:50,"Found a bug, see 18964ef05d753ef991d5f621367d7b1849352fc6

It was when i deleted the last item, not in the middle.
I have no idea if thats the correct way of doing it, don't understand relay codebase =)
",quazzie,2015-09-21 23:46:23
295,2015-09-11 16:03:40,"Curious: when you remove the last item, does the payload return `tags: null` or `tags: []`?
",steveluscher,2015-09-21 23:46:23
295,2015-09-11 16:08:27,"I ment the item at the last index. But i plan to return [] if empty.
",quazzie,2015-09-21 23:46:23
295,2015-09-18 17:44:25,"@quazzie did 18964ef fix it for you? That code is for connections. Basic lists are considered as scalars and should have been updated here: https://github.com/facebook/relay/blob/18964ef05d753ef991d5f621367d7b1849352fc6/src/store/RelayQueryWriter.js#L259 
",yuzhi,2015-09-21 23:46:23
295,2015-09-21 08:05:24,"yuzhi: yes 18964ef did fix it and it's a GraphQLList(othertype).
",quazzie,2015-09-21 23:46:23
295,2015-09-21 23:46:23,"Sounds like all issues are resolved here.
",kassens,2015-09-21 23:46:23
294,2015-09-11 06:19:59,"I am currently handling authentication outside of relay with custom header set in DefaultNetworkLayer.
Is it preferred way and Is there a way to do it in relay?
I was stuck when trying to implement sign up functionality in relay: in relay there are following configs: FIELDS_CHANGE, NODE_DELETE,  RANGE_ADD, RANGE_DELETE. So RANGE_ADD is the only one applicable here, however I need a parent and connection for that, which I do not have for a newly created user....
",almascript,2015-09-12 03:53:01
294,2015-09-11 15:59:25,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2015-09-12 03:53:01
294,2015-09-12 03:53:01,"I'm going to close this now, but please do comment on it with a link back to your Stack Overflow post if you do make one, @almasakchabayev.
",wincent,2015-09-12 03:53:01
294,2015-09-12 04:26:07,"Posted question on stackoverflow: http://stackoverflow.com/questions/32535141/relayjs-authentication-using-relay-which-mutation-to-use
",almascript,2015-09-12 03:53:01
294,2015-11-06 22:55:30,"Posted a [similar question](http://stackoverflow.com/questions/33550843/authentication-and-access-control-with-relay), except I'm wondering how people are handling access control. Maybe I'm not imaginative enough, but I really am not really seeing this :<
",dminkovsky,2015-09-12 03:53:01
294,2015-11-07 02:47:11,"I second @dminkovsky, a sample code for handling access control with Relay will be much appreciated.
",mugli,2015-09-12 03:53:01
294,2015-11-07 03:33:02,"Does @kassens' answer [here](http://stackoverflow.com/a/33577928/802047) help? There, he demonstrates a pattern for implementing privacy at the data loader level.
",steveluscher,2015-09-12 03:53:01
294,2015-11-07 18:02:29,"@kassens' answer does help. Thank you @kassens.

If I may follow up here, please, because it's difficult to discuss his answer via SO comments. 

@kassen writes:

> An approach that I have seen pretty successful is to bake the privacy/access control into the data model/data loader framework.

Totally makes sense. That's how I load users too and will extend this approach to the loading of all nodes.

But in order to make that happen—for example, to do `User.load(id, viewer)`—you need `viewer` at least in the root resolve methods. If so, given Relay today, the only way to get `viewer` into these resolve methods is through `args`. And to get an argument into server-side `args`, you must pass the parameter from the client. An example of this flow:
- A client authenticates by some mechanism outside of Relay.
- As part of the successful authentication, the server provides the user a token to use via HTTP request header—say a `Cookie` or `Authorization`.
- This authentication token must then be available to `Relay.Route`s on the client to use in queries.
- At the server, the token/user ID combination is validated and resolved into and ""hydrated"" `viewer`.

Such a flow seems to have the following implications:
- The `nodeDefinitions` function that comes with `graphql-relay-js` can no longer be used because the `idFetcher` in that implementation only receives and object ID and not the `viewer`.
- I need to decorate all my root field resolvers with a method that validates and hydrates user information.
- The token must be available to the JS runtime. I cannot use `httpOnly` cookies as I've done in the past to protect the token because it needs to be available to `Relay.Route`.
- The `viewer` as hydrated on the server then needs to be available to resolve methods further down the graph for any data loading that might be necessary deeper than the root field.

I'm only not sure about the last of these consequences. I suppose there is some ""context"" I can use. But I am new to this stack.

Anyway, thank you very much. What a wonderful platform.
",dminkovsky,2015-09-12 03:53:01
294,2015-11-07 19:40:00,"This [helpful post](http://rmosolgo.github.io/blog/2015/08/04/authorization-in-graphql/) helps with my last bullet point from above, regarding the `viewer` being available at all depths of field resolution:

> GraphQL execution systems should allow the consumer to pass some arbitrary data “through” the query, so it is accessible at any time during execution. For example, you could take some information from an HTTP request, pass it into the query, then use that information during field resolution.

The post then explains how this works.

As @mugli says, would be great to distill all of this into an example in the repository so that users can get up and running quickly and also learn these features of the stack more easily.
",dminkovsky,2015-09-12 03:53:01
294,2015-11-07 20:19:18,"Oh, and sorry for the incremental updates—should have collected this into one follow-up post.

But, anyway, having read the post mentioned above I looked at the `express-graphql` source to see about getting a `rootValue` into the resolve methods.

I was really happy to find that you can pass an `Options` object to configure the middleware, and this `Options` object can either be [the final configuration for all requests, or a function to return per-request configuration](https://github.com/graphql/express-graphql/blob/v0.4.2/src/index.js#L25). The per-request configuration can then contain a per-request `rootValue` which can include the `viewer` above, determined from the raw request.

So this basically addresses all my questions above:
- Regarding `nodeDefinitions`—no problem, the `idFetcher` in the default implementation gets a `GraphQLResolveInfo`, which includes the `rootValue`.
- No need to make credentials available to the JS run time. 
- `rootValue` is available to all field resolution methods at all levels.

Great. Thank you!
",dminkovsky,2015-09-12 03:53:01
294,2016-03-29 09:55:55,"If anyone has problems with this topic: I made an example [repo](https://github.com/jkettmann/relay-authentication) for Relay/GraphQL/express authentication. It saves session data (userId and role) in a cookie using express middleware and a GraphQL Mutation
",jkettmann,2015-09-12 03:53:01
293,2015-09-11 00:17:13,"Currently when a mutation returns a new item, in `getConfig` you can tell Relay to `append` or `prepend` the item to a list. This covers most cases as most lists are sorted by the created or updated date but there are times when using custom sorts that a new item would end up somewhere in the middle of a range. In these cases, it'd be nice if we could instruct the server to tell the client where a new item should be inserted.
",KyleAMathews,2015-11-02 17:53:50
293,2015-09-11 00:22:13,"Some ideas...

### Server Side

One way to achieve this would probably be to somehow query the server with the different sets of field args being used locally on a connection call, with a result being e.g. before/after cursors to help place it.

(_Would this even work? What if the cursors aren't local because the list was changed by someone else? Might involve sending the list of cursors/records we do have..._)

The problem is that optimistic updates wouldn't be correct, unless you also implemented some sorting/filtering logic on the client side...

### Client Side

Another solution would be to allow `rangeBehaviors` to be set to a function. It would receive the newEdge, currentEdges, and any field arguments, and return a new index for the edge:

<S_CODE_TOKEN>

The disadvantage here is obviously that you'll always have to reimplement some server logic, but it would work for optimistic and server responses.
",devknoll,2015-11-02 17:53:50
293,2015-09-12 00:52:12,"Another option is to provide a way for the schema to define how field arguments correlate to sorting logic. For example, in the query `friends(first: 10, orderBy: ""name"")` the schema might indicate that edges should be sorted by the `name` field. Relay could use this metadata to automatically insert new edges at the correct location (and ensure that the `name` field was always fetched when this sort criteria was applied, so that every edge can be sorted correctly).

There are some cases where this may not be possible - in particular, algorithmically sorted connections such as the Facebook News Feed. In these cases, the schema could simply not define ""order by"" semantics for any arguments, and the client would have to specify append/prepend logic when adding edges.

These type of semantic schema annotations could apply more generally around connections, for example allowing for arbitrary names for `edges` and `node` fields and `first`/`after` arguments.

cc @dschafer @leebyron 
",josephsavona,2015-11-02 17:53:50
293,2015-09-13 01:17:31,">  ensure that the `name` field was always fetched when this sort criteria was applied, so that every edge can be sorted correctly

Interesting!

But one of the features of GraphQL that I really like is that it _doesn't_ have notion of or semantics for sorting built in, and I'd love for it to stay that way :wink: 

Couldn't renaming connection fields/args just be Relay specific configuration? 

My original client side proposal also had an option for `rangeBehaviors` that looked like:

<S_CODE_TOKEN>

It seems like these would cover the same use cases while remaining flexible and not having to add anything specific to the spec...

Thoughts? :+1: 
",devknoll,2015-11-02 17:53:50
293,2015-09-16 15:18:16,"Caveat here that my understanding of `RANGE_ADD` is mediocre, but I believe that as a stopgap, it would be nice if one of the potential range behaviors were to ""refresh"" the connection from the server (perhaps it could even be the default).

Unless I'm misunderstanding something, right now I can't really express the case where I might want to prepend or append in default-ish cases, but re-pull the entire connection when using more complex arguments on the connection.
",taion,2015-11-02 17:53:50
293,2015-09-16 15:45:51,"@taion The default is to refetch from the server, otherwise `append` or `prepend` behavior is used if specified. 

cc @yuzhi @steveluscher 
",josephsavona,2015-11-02 17:53:50
293,2015-09-16 15:55:17,":+1: to that, then.

I feel like the cases where I care the most about not refetching the entire connection are usually the ones where operations look like simple appends or prepends.

I think @devknoll's server-side proposal is the most generic and broadly applicable solution, assuming the difficulties with identifying the edge for insert are manageable. I feel like putting even more of this sort of logic in the client is a messier direction API-wise, since I really want my server to own these aspects of the data.

I don't think it's very important that this makes optimistic updates more difficult - rather, I think optimistic updates in these cases in general look more like nice-to-haves, and specifically figuring out where the edge goes optimistically on the client side may not be necessary in many cases, or could be special-cased for important cases.
",taion,2015-11-02 17:53:50
293,2015-09-16 18:17:52,"> Another option is to provide a way for the schema to define how field arguments correlate to sorting logic. For example, in the query friends(first: 10, orderBy: ""name"") the schema might indicate that edges should be sorted by the name field.

I think this is really interesting. Semantic knowledge of sort/filters could allow cache stores like Relay's to fulfill more cases. However I don't have much knowledge on what would actually need to be encoded in type definitions and schema introspection to provide Relay with relevant data. As you point out, it can only do so much though, it can't tackle anything where information isn't provided in a field like an ""edge rank"" mechanism or where the sort order is a derivation of multiple fields. I'm happy to entertain more specific proposals on this front. 

> I think @devknoll's server-side proposal is the most generic and broadly applicable solution

I concur! It seems to me that there are two problems to solve here:

**1) Send a mutation to a server that results in a modified list then query a minimal set of information to update the list on the client. (The OP's question)**

This problem is broader than Relay and is about best practices when designing GraphQL mutations. 90% of cases can be solved by making an assumption that append/prepend will be the right behavior. Otherwise, I really like the idea of a server responding with a sort of ""placement context"". Just spitballing ideas here, for example:

<S_CODE_TOKEN>

If `previousEdge` is null, then this is a ""prepend"", otherwise this is an ""insert after"". This example could be extended to include `nextEdge` as well to quickly determine ""append"". Caveat this approach with the mutation would need to know things like sort/filters to determine these prev/next edges, and it may not be possible for the server to do this efficiently at all.

**2) Optimistic mutations by Relay**

Here, in order to support more variable behaviors like this one discussed in this issue, I think @devknoll's ""client side"" approach is in directionally correct. In my eyes an ideal ""gloves off"" approach would be to allow optimistic mutations to be specified by the app developer as ""this is what I think the GraphQL response will be"" - effectively mocking the server. That's a heavy API, but would allow for support of broader behavior.
",leebyron,2015-11-02 17:53:50
293,2015-09-16 19:41:15,"@dschafer posted an answer [here](http://stackoverflow.com/questions/32613879/should-the-opaque-cursors-in-connections-be-stable-across-different-field-args/32615799#32615799) that I thought was related, since it recommends embedding field arguments into edge creation on a mutation.

With that in mind, maybe we could write a spec for field types like `newFriendsEdge` that includes some additional data in the input or result to help place it.
",devknoll,2015-11-02 17:53:50
293,2015-09-18 07:41:45,"@josephsavona Can you clarify what you mean by

> The default is to refetch from the server

Per my comment on #340, I can't seem to trigger this behavior at all.
",taion,2015-11-02 17:53:50
293,2015-09-18 08:02:11,"Okay, I think I understand that now.

For the refetch behavior, I need to actually specify the connection as an unterminated field in the fat query. Then if every call to the connection is mapped to either a valid range behavior (or a falsy value), then the unterminated field gets filtered out when intersecting the fat query and the subscribed set. Otherwise the full re-fetch happens, but it won't do what we want unless the unterminated field is specified in the fat query.

I'm sure I'm missing a half-dozen important things here - is there a chance of getting an update to the docs there, including to reflect the actual form of the calls (`field(value)` instead of `field:value`)? It's quite difficult to figure out how to even use the current implementation of range behaviors right now, even using the docs plus the source code plus stepping through the logic in a debugger.
",taion,2015-11-02 17:53:50
293,2015-09-18 08:36:23,"Regarding the server side thing, I just realized something in conjunction with working on my cursor-based pagination. There's a very standard ""position plus offset"" cursor-building strategy often used e.g. when sorting on timestamps that aren't guaranteed to be unique: http://cramer.io/2011/03/08/building-cursors-for-the-disqus-api/. In this case, if inserting a new edge in the middle of a connection leads to a new collision in timestamp, then this can potentially lead to cursors for other edges with the same timestamp changing.

Another thought here, though, is that general arbitrary sorting by field of connections doesn't really go well with cursor-based pagination. In the general case, for tables with lots of columns you might want to sort by, many of those columns may well not be particularly suited for cursor-based pagination anyway, so maybe the whole ""understand arbitrary `orderBy` statements for connections in Relay"" part is a bit moot, since often cursor pagination would not be appropriate for those types of collections anyway.
",taion,2015-11-02 17:53:50
293,2015-09-26 17:31:13,"One more complication here - there's no guarantee that the cursors are going to be the same for different server-side sorting behaviors. In fact most cursor-building strategies lead to different cursors based on the server-side sorting behavior. In other words, I don't think it's even possible to solve this with the current API for returning the created edge at all.
",taion,2015-11-02 17:53:50
293,2015-11-02 17:53:50,"This is a great discussion, and we'd very much like to improve the mutations API. I've created a new meta-task at #538 to track this and several other related issues. Let's continue the discussion there!
",josephsavona,2015-11-02 17:53:50
292,2015-09-10 23:21:33,"As discussed in #265, adds an option to `babel-relay-plugin` to abort on validation errors, instead of logging and carrying on. Also adds some basic documentation about using the plugin including the new option.

The new option can be used as `getBabelRelayPlugin(schema, {abortOnError: true})`
",josephsavona,2015-09-11 16:25:32
291,2015-09-10 22:26:04,"Addresses #203 - `printRelayQuery` does not inline complex argument values, instead it synthesizes new query arguments and sends the data as variables. This was failing for non-null or list types - fixed!
",josephsavona,2015-09-10 23:50:23
290,2015-09-10 21:59:07,,steveluscher,2015-09-11 04:15:28
289,2015-09-10 21:54:01,"npm install for the TODO example currently fails from a fresh git pull of master. The build script fails when attempting to preinstall react-relay since it cannot find babel-relay-plugin.  The babel-relay-plugin is in the root scripts directory and npm build of the root directory works fine. It is the build of the TODO example only that fails. NPM output is below:

> react-relay@0.2.1 preinstall /Users/bluefire/Documents/workspaces/web/relay/examples/todo/node_modules/react-relay
> cd scripts/babel-relay-plugin && npm install

sh: line 0: cd: scripts/babel-relay-plugin: No such file or directory
npm ERR! Darwin 14.5.0
npm ERR! argv ""node"" ""/usr/local/bin/npm"" ""install""
npm ERR! node v0.12.7
npm ERR! npm  v2.11.3
npm ERR! code ELIFECYCLE

npm ERR! react-relay@0.2.1 preinstall: `cd scripts/babel-relay-plugin && npm install`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the react-relay@0.2.1 preinstall script 'cd scripts/babel-relay-plugin && npm install'.
npm ERR! This is most likely a problem with the react-relay package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     cd scripts/babel-relay-plugin && npm install
npm ERR! You can get their info via:
npm ERR!     npm owner ls react-relay
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /Users/bluefire/Documents/workspaces/web/relay/examples/todo/npm-debug.log
",OverclockedTim,2015-09-11 04:08:08
289,2015-09-10 22:18:32,"This looks like it should get fixed by #287. cc @josephsavona
",zpao,2015-09-11 04:08:08
289,2015-09-10 22:49:15,"Yes, when I applied the same revert as #287 locally, the example does indeed build, thanks!
",OverclockedTim,2015-09-11 04:08:08
289,2015-09-10 22:52:38,"Once #287 is applied, the todo application fails with the following in the console: 

Uncaught TypeError: Cannot read property 'unstable_batchedUpdates' of undefined
app.js:5728 Uncaught ReferenceError: Relay is not defined

Since it looks as though there are several issues with the examples, is there a better place to look at working code? A different branch perhaps?
",OverclockedTim,2015-09-11 04:08:08
289,2015-09-10 22:58:33,"For what it is worth, the todo example in branch react-14-rc seems to be working.
",OverclockedTim,2015-09-11 04:08:08
289,2015-09-10 23:09:05,"<S_CODE_TOKEN>

Possibly related to https://github.com/facebook/relay/commit/2d822400dbcf14f9636ab3149477f4ff0a0ee466

Perhaps we need to update the React deps in the examples' `package.json` files?
",wincent,2015-09-11 04:08:08
289,2015-09-10 23:10:38,"> Perhaps we need to update the React deps in the examples' `package.json` files?

Which is already happening in https://github.com/facebook/relay/pull/290 I see, so I think we might be good here.
",wincent,2015-09-11 04:08:08
289,2015-09-11 04:08:07,"Sorry, @OverclockedTim. I went through all of the same steps that you went through today, called for the revert in #287, and fixed the rest of the issues in #290. Should land soon! Thanks for your patience.
",steveluscher,2015-09-11 04:08:08
289,2015-09-11 14:18:34,"Thanks Steve!
",OverclockedTim,2015-09-11 04:08:08
288,2015-09-10 21:47:50,"In our public talks we've discussed Relay's ability to divide your queries into required and deferred parts, wherein your component won't get rendered until all of the required data that it requested is available, and it will get rendered again subsequently once the deferred data has arrived. There are a bunch of use cases for this, but the typical pattern is dividing your UI into a cheap, critical section that must be displayed fast before you can declare TTI, and a potentially more expensive but less crucial section which you're happy to display later on (example: a post [required] and its attached comments section [deferred]).

So we've talked about it, it works internally at FB, and you can see traces of support for in the code (such as [this](https://github.com/facebook/relay/blob/8ab8ff5ee9318abe5e5aaa7dec41e15b31449a72/src/traversal/splitDeferredRelayQueries.js)), but it's not currently exposed externally. This issue is for tracking progress towards getting this ported and released in some form.

(Extracted per comment [here](https://github.com/facebook/relay/issues/284#issuecomment-139382278).)
",wincent,2016-09-03 00:50:15
288,2015-09-13 20:28:17,"@wincent Any info you can provide for how this will work & what it'll entail to set up on an existing GraphQL server? :+1: 
",devknoll,2016-09-03 00:50:15
288,2015-09-14 18:20:20,"@devknoll: Internally, the way `defer` works is that you can denote certain fragments as ""deferred"", distinguishing them from the ""required"" part of the data. Canonical use-case example: the data for showing a post is ""required"" and rendering should be blocked until it arrives, but the data for the comments on the post can be ""deferred"" and get shown later, on arrival.

You can see code in `splitDeferredRelayQueries` that traverses the query splitting off these deferred fragments and producing a tree of new queries: the required part, and any deferred parts; note that the deferred parts are themselves recursively broken down into ""required"" and deferred parts. Note that you can't necessarily fetch all these parts in parallel, because there may be a data dependency here where you won't know for which object to fetch some deferred data until you get the ID of the object in the response to the required part of the query.

Internally, we have a ""batch"" endpoint for the incumbent version of GraphQL that knows how to understand this kind of graph of queries with possible interdependencies. It also understands that one of these dependent queries may need to reference the result of the query that is its dependency, and it knows how to orchestrate all this and flush it all back to the client in chunks.

When we open-sourced GraphQL, we did not include an equivalent notion to this batch endpoint because we wanted to keep the spec minimal and we view the batch endpoint as a separate layer above and not part of GraphQL itself. Additionally, we wanted to take the opportunity to reset and revisit the assumptions that we'd accumulated over years of internal GraphQL use. We didn't want to bake too much in, in a way that would limit our options for implementing batch-like semantics, or others like streaming, prioritization and subscriptions and so on. Many of these ideas are being discussed on the GraphQL Slack channel and on GitHub if you want to learn more.

Anyway, in terms of what all this means for `defer`, there is a short-term plan and a longer-term one.

The short-term plan is to enable use of `defer` by doing query splitting and managing the orchestration of the split queries entirely on the client side. In other words, we can send batches of queries and do dependency management to hold back dependent queries until they have the data they need in order to be fetchable. This approach will incur some overhead, because it may require multiple round trips to the server, but it at least enables `defer` to be used.

The longer-term plan is to continue to work with GraphQL to flesh out the semantics and directives that would need to be in place to get a more integrated approach to deferring data, one which wouldn't depend on client-side management of multiple round trips. We're being deliberately non-committal about this because we want to involve the community and don't want to commit prematurely to a course of action that could limit our options later on.

In the meantime, there is a mid-term possibility, which is that it's all just JavaScript: if you want to take the client side batching logic and put a server-side layer in front of your GraphQL endpoint that gets rid of the roundtrips and does all the management server-side, then that should be totally possible. But for now, the immediate step is to get the purely client-side prototype out the door, which is what I am working on.
",wincent,2016-09-03 00:50:15
288,2016-03-21 18:50:53,"Any reason why `getFragment().defer()` is not yet officially out? Relay seems to be supporting it - there's lots of `isDeferred()` checks in the code and looks like class GraphQLQueryRunner ignores deferred queries when updating the readyState.
Furthermore - I've just removed the `supports('defer')` check in GraphQLQueryRunner and at first glance everything seems to work as expected, at least for my simple needs: 
- the query is split into deferred and non deferred queries,
- component is rendered on first response to arrive,
- then re-rendered when the next (deferred) response arrives. 

That's of course the short-term plan described in the post above, but I'm perfectly happy to accept the overhead of extra queries for the deferred functionality to be available
",anytimecoder,2016-09-03 00:50:15
288,2016-03-21 22:08:45,"@anytimecoder: I'm guessing it only _seems_ to work because the `RelayDefaultNetworkLayer` is going to send the queries in parallel and in your case, your split deferred queries don't happen to have any dependencies on one another and they also happen to be arriving back in the desired order.

In the real batch implementation, we have the notion of dependent queries, such that you might have an initial query `foo{bar{baz{id}}}` and then something else that is deferred underneath `baz`, and which we can't even begin to fetch until we know `baz`'s `id`. We fetch `baz` first, and only once we know its `id` do we proceed to fetch the deferred stuff under `baz`: eg. `node(id: $baz_id){stuff{under{baz}}}`) (note: another place where this can easily come up is if you defer something that is inside a connection). If your queries are independent, or `baz` isn't independently refetchable, Relay will end up querying for `foo{bar{baz{id}}}` and `foo{bar{baz{stuff{under{baz}}}}}`, which is what may be making it look like it's working.
",wincent,2016-09-03 00:50:15
288,2016-03-22 08:09:55,"@wincent you're right - I'm deferring independent queries and I don't care about the order they're coming back, but I'm happy to comply to these restrictions to have `defer()` working.
",anytimecoder,2016-09-03 00:50:15
288,2016-05-16 13:37:43,"What is the progress on this issue? Can we expect to see defer in the OS version any time soon? Thanks!
",hmaurer,2016-09-03 00:50:15
288,2016-05-16 15:55:14,"@a3gis Thanks for asking.

We aren't actively working on this right now and probably won't be able to focus on soon (see the [Roadmap and Meeting Notes](https://github.com/facebook/relay/tree/master/meta) for current priorities of the core team). However, we're happy to support the community in building support for this in an open-source network layer. This could be a good candidate for adding to https://github.com/nodkz/react-relay-network-layer, for example (cc @nodkz).
",josephsavona,2016-09-03 00:50:15
288,2016-05-17 14:32:16,"Just released new version of [react-relay-network-layer@1.1.0](https://github.com/nodkz/react-relay-network-layer/blob/master/CHANGELOG.md):
- add `gqErrorsMiddleware` to display graphql errors from server
- add experimental `deferMiddleware`. 

Right now `deferMiddleware` just set `defer` as supported option for Relay. So @anytimecoder may use this middleware to avoid hacking `GraphQLQueryRunner`. Also this middleware allow to community use defer in cases, which was described [above](https://github.com/facebook/relay/issues/288#issuecomment-199510058) by @wincent.

So I'll try to play deeper with defer fragments in near future.
",nodkz,2016-09-03 00:50:15
288,2016-07-27 15:11:09,"I have started to work on this for a pure client side solution as @wincent suggested in one of the posts above. For some use-cases simply activating `defer` does indeed work. For other use cases we quickly ran into: `Uncaught Invariant Violation: printRelayOSSQuery(): Deferred queries are not supported.`. 

I managed to hack together a NetworkLayer that gets around this invariant, by accessing `request._query` and other bits I probably shouldn't touch. But I could not find another way to just in the NetworkLayer. Does that mean to support all use-cases code also needs to change in Relay and not just in the NetworkLayer?

The other thing I don't entirely understand is the `splitDeferredRelayQueries` function. Why does it split certain queries into ref queries?
E.g. we have

<S_CODE_TOKEN>

As long as I just have `${Component.getFragment('customer').defer()}` it all works fine and the split queries look as I would have expected. But as soon as I add the `holding` fragment it splits the deffered fragment off into a nodes query as seen in this test: https://github.com/facebook/relay/blob/master/src/traversal/__tests__/splitDeferredRelayQueries-test.js#L290

What I would have expected is simply these 3 queries:
1: 

<S_CODE_TOKEN>

2:

<S_CODE_TOKEN>

3:

<S_CODE_TOKEN>

Then at least conceptually all queries should work independently. Relay only needs to know that 2 and 3 are deferred, so it can render as soon as 1 has arrived. How come there is this distinction of ref queries? Is this normally handled by the server? How exactly can one use this batchCall information that is stored on the query?

Would my suggested approach make sense for handling everything on the client side? Or given some other directions I would be happy to take a stab at this.

@nodkz have you had any chance to look into this more?
",Globegitter,2016-09-03 00:50:15
288,2016-07-28 07:04:17,"Great questions. Deferred queries use ""ref"" queries to handle cases where a fragment is deferred at a point without a known ID. In the example you gave, it's possible for the value of `customer.holding` to change between execution of the original and deferred fragments, but we want the results of the fragments to be internally consistent. Ref queries allow a deferred query's input to depend upon the results of a previous query in the same ""batch"" (a set of queries that are requested at the same time). 

To handle ref queries, you'd have to delay fetching them until the query they reference is fetched, extract the value from the parent, and use that as the input to the dependent query. Feel free to share a gist with what you have so far, and I'd be happy to comment with suggestions for handling the ref query case. 

However, we have some good news on this issue: we've implemented a variant of our batch API in pure JavaScript as a layer over the standard GraphQL resolve function. The actual async function to resolve a query is passed as an argument, so it can be used by Relay on the client (with multiple round trips) or in the server to fetch multiple queries in one http request (if you're using node & GraphQL-JS). We'll be open sourcing this soon as part of the new relay core. 
",josephsavona,2016-09-03 00:50:15
288,2016-07-28 09:26:36,"@josephsavona Yes, at the very least for understanding's sake it would be great if you could comment on my little hack: https://gist.github.com/Globegitter/553f7dffd1f7ceaead1aba0dd56c5554

Even though we are not using js on the backend this is great news! Either if we can use it on the client-side or just port it ourselves to python. And this batch API would just as-is take care of deferred queries?
",Globegitter,2016-09-03 00:50:15
288,2016-09-03 00:50:14,"I'm going through and cleaning out old issues that were filed against Relay 1, so I'll close this one. As @josephsavona mentioned, we have the primitives in place to straightforwardly implement a `@defer`-like directive in [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable). Thanks to everybody who commented on this issue!
",wincent,2016-09-03 00:50:15
288,2017-02-10 03:15:58,"@wincent  @josephsavona @devknoll    does Relay 2 officially support 'short term' `deferred queries`?

I have a similar user case as your ""post and comments"" example. 
let's say I came to the post page via ""search by keyword"", and I have a section that will display either 'loading comments' or actual comments depending on whether comments data is ready.

At the moment we are using relay 1 and I'm handling the 2 queries manually. Like you said, the comments query depends on post query because we don't know the post id until the post query is resolved by server (we only know keywords initially). This is my demo code
<S_CODE_TOKEN>


as you can see, the `componentWillMount` and `isCommentsReady` are boilerplate code and should be handled somewhere else.  I would assume I  could 
* remove boilerplate code. remove `should_fetch_comments`
* wrap my `comnets_by_post_id` in a component
* call `${comments_by_postid.getFrament('comments',variables}.defer()`?

My questions are:
(*---try to anwser my own question*)
* how do I pass additional parameters to my deferred query?
*----no you can't. dependent node 's id is the only parameter that Relay passes to your deferred query. Not more other parameters can be passed*
* in my `MyPost` component, how do I know when`comments` fragment gets resolved?
*---you can only check whether the field in `props` is null. There is no `pendingDeferredQueries` available in relay as this feature is not supported yet*
I hope it all makes sense. thanks for reading my long post
(also can you also point out whether I'm following the right relay pattern?
*--yes it is as conformed by Greg int the follow ups*)


 ",bochen2014,2016-09-03 00:50:15
288,2017-02-10 03:24:02,"(i know it's awkward to explicitly pass `$post_id` to `comments_by_post_id`.
If I use deferred query,  should I define `comments` inside `post` so that once `post` is resolved, Relay will **automatically** passes `post`'s id to `comments`'s deferred query **by magic**?",bochen2014,2016-09-03 00:50:15
288,2017-02-12 18:45:13,"The initial release of the new core and API will not include `@defer` support. We've found in porting existing large apps at Facebook that the manual equivalent (I should really say near-equivalent because there is a difference between running multiple round trips from the client and doing a server-side phased request, but in practical terms in real apps it is close) has been sufficient, so we don't want to delay the release for a feature which is closer to a ""nice to have"" than a ""launch blocker"".

Having said that, the core primitives are in place to make it possible to add this, so it's something that we look forward to doing after the release. Clearly there is an interest in making a convenient abstraction over this usage pattern and other similar ones around streaming data, optional data etc.",wincent,2016-09-03 00:50:15
288,2017-02-12 23:58:55,"thanks @wincent . is it a way for client to know when deferred queries are resolved (like `pendingDeferredQueries`, just like `pendingVariables`)? or do I have to check the deferred fields are `null` in code. 
@josephsavona. I'm not quite familiar with `nodes` query. How is it different from `node` query and `connections` query? is the query type created only for deferred query?

<S_CODE_TOKEN>
https://github.com/facebook/relay/blob/master/src/traversal/__tests__/splitDeferredRelayQueries-test.js#L323",bochen2014,2016-09-03 00:50:15
288,2017-02-13 18:07:05,"> is it a way for client to know when deferred queries are resolved

Given that there is no support, no. When the feature is actually built, we'll have some mechanism in place for this. For now the way to fake it is to either render a new root container after the initial fetch and render (triggered by calling `setState` in your `componentDidMount` callback) or fetch additional data by toggling a variable (`setVariables`) that switches an `@include`/`@skip` directive on a fragment (again, from `componentDidMount`).

`nodes` is just a shorthand that skips over the `edges` field in the connection; ie. the following are equivalent:

<S_CODE_TOKEN>

In practice, we don't recommend implementing `nodes`: explicit is generally better than implicit, and having two ways to access connection nodes can lead to confusion about which one is best used, and it can shield people from learning how connections are actually structured in reality, something which will likely cost them later on.",wincent,2016-09-03 00:50:15
288,2017-02-14 11:21:25,"thanks @wincent  that helps me a lot!
""to either render a new root container after the initial fetch and render (triggered by calling setState in your componentDidMount callback) or .."" ((I'm familar with the latter one and use it a lot in my work)
 can you please elaborate on the former pattern? e.g. what is the user case for it. thanks",bochen2014,2016-09-03 00:50:15
287,2015-09-10 21:42:38,"This reverts commit 47f2602c30b4e7940e26b15825cea5e4980af503.

@steveluscher pointed out that travis already tests the plugin, and for
local testing developers can run the extra `npm test` manually.
",josephsavona,2015-09-10 23:00:30
286,2015-09-10 20:45:48,"Closes #283 
",kassens,2015-09-11 04:15:28
286,2015-09-10 21:13:15,"I think this is already fixed by 8ab8ff5ee9318abe5e5aaa7dec41e15b31449a72. Is there any reason we still need this in `.flowconfig`?
",yungsters,2015-09-11 04:15:28
286,2015-09-10 21:18:47,"I for example use flow that's installed with homebrew. This forces the expected flow version or will error that you don't have the latest flow version installed. (It has a few versions of backwards compatibility, so if you have a newer version, it would still use the older version for the checking)
",kassens,2015-09-11 04:15:28
285,2015-09-10 20:45:29,"We've had feedback that:
- Relay has a large number of new concepts with new terminology attached that can make it hard to apprehend.
- It is hard to get a ""big picture"" sense of _why_ things are designed the way they are. As such, people are reduced to monkey-see-monkey-do copying of examples and may not really understand how things are working, or whether their approach ends up being The Correct Way™.
- Without the ""big picture"", making sense of the API docs and guides can be difficult, and they seem relatively terse or thin.

The idea here, then, is to produce a top-down conceptual doc that complements the existing bottom-up tutorial-based documentation and reference material.

I'm thinking here of something like the wonderful ""Git for computer scientists"", that I read years ago when DVCS was still a new thing, and which laid a foundation for understanding all the new stuff (then-foreign concepts like rebasing and the index) that rest upon some simple under pinnings like the DAG and a content-addressable database.

cc @josephsavona per our offline discussion
",wincent,2015-10-06 18:05:59
285,2015-09-10 20:46:09,"Ugh.... hit Return before I'd actually typed anything... will fill out with actual content.
",wincent,2015-10-06 18:05:59
285,2015-09-14 13:50:25,"This sounds awesome! Looking forward to it :)
",kastermester,2015-10-06 18:05:59
285,2015-09-25 13:05:47,"This would be incredibly helpful actually. Having just gone through the docs, the first half did feel a lot like ""Let's copy paste a bunch of stuff and try figure out how it all works together"". Going through the GraphQL and API Reference sections did help with understanding what's happening and why, but there is quite a lot there which makes it a tad difficult to digest without reading it all over and over again a few times.

If all this information could somehow be put into a high-level one-pager sort of thing, that'd be great.
",AnSavvides,2015-10-06 18:05:59
285,2015-10-06 18:05:59,"We've now added [Thinking in GraphQL](http://facebook.github.io/relay/docs/thinking-in-graphql.html) and [Thinking in Relay](http://facebook.github.io/relay/docs/thinking-in-relay.html), which is our first cut at this. Anywhere where we still feel like this is lacking, we can probably add to those docs, so I am going to close this for now.
",wincent,2015-10-06 18:05:59
285,2015-10-07 09:41:07,"Awesome :+1: 
",AnSavvides,2015-10-06 18:05:59
284,2015-09-10 20:45:02,"Splitting this off as an actionable subtask from #263.

The notion is to give a suitably vague/tentative overview of some of the major upcoming areas of work. Issues themselves are a little too fine-grained and numerous to get a sense for the big picture of what lies in store.
",wincent,2015-11-02 21:49:34
284,2015-09-10 21:19:22,"Thanks @wincent :+1: 

Concrete ideas for the short term:
1. An inverse of the ""help wanted"" label. This is mostly covered by the issue assignments that are already happening, but I'm not sure if this is codified yet. Then ""help wanted"" just becomes the set of everything that isn't already assigned to FB :wink: 
2. Add/assign GH issues for current internal tasks -- I don't see any GH tasks for the deferred query work that you're currently doing :wink:
3. I like facebook/react's ""good first bug"" label. It helped encourage me to try and contribute!

Given the current age of the project and that most development is happening internally, I think 1+2 would provide a sufficient roadmap in the short term.
",devknoll,2015-11-02 21:49:34
284,2015-09-10 21:51:57,"> I don't see any GH tasks for the deferred query work

Good point. Created one.

> I like facebook/react's ""good first bug"" label. It helped encourage me to try and contribute!

Nice idea!
",wincent,2015-11-02 21:49:34
284,2015-11-02 21:49:34,"We now have a [roadmap](https://github.com/facebook/relay/wiki/Roadmap).
",josephsavona,2015-11-02 21:49:34
283,2015-09-10 20:43:35,,kassens,2015-09-11 04:15:28
282,2015-09-10 20:30:54,"Daydreaming a little bit, it might be nice if the sort of thing in #268 could be baked into Relay (or a Relay add-on) in some capacity in a way that prevents developer errors. I'm imagining something like:

<S_CODE_TOKEN>

(notice that there's no explicit `__typename` query)

Instead, a developer would just do something like:

<S_CODE_TOKEN>

Now the babel plugin could find any calls to `matchFragmentType` and automatically insert `__typename` into the fragment as appropriate.

`matchFragmentType` would raise an invariant if a key passed in does not match one of the possible types. There would be a required 3rd parameter that specifies the return value if none of the types match (for forward compatibility), that will also raise a warning.

Thoughts?

(Extracted from #280)
",devknoll,2015-09-10 21:50:53
282,2015-09-10 20:34:20,"`matchFragmentType` could almost be implemented today in a separate library (with `__typename` added by the developer).

Whether or not this belongs in the Relay core probably depends on how common this pattern actually is.
",devknoll,2015-09-10 21:50:53
282,2015-09-10 20:34:38,"The plugin can (and perhaps should) insert `__typename` automatically whenever the type is not concrete, based purely off information on the schema (ie no need for `matchFragmentType`). You could then trivially implement `matchFragmentType()`.
",josephsavona,2015-09-10 21:50:53
282,2015-09-10 20:35:28,"@wincent @yuzhi  @yungsters thoughts on automatically adding `__typename` for interface/union types?
",josephsavona,2015-09-10 21:50:53
282,2015-09-10 20:42:13,"> thoughts on automatically adding `__typename`

This adds a small amount of overhead, but I think it's likely worth it in terms of the value it could add.
",wincent,2015-09-10 21:50:53
282,2015-09-10 20:55:04,"Updated the proposal:  `matchFragmentType` would **require** a 3rd argument that acts as a default (and warns in development when it's used), so that backward/forward compatibility is _always_ considered, even if just ignored like in the example.

...

I was also originally concerned about the overhead of `__typename`, but if you're not concerned with it, then neither am I :wink: 
",devknoll,2015-09-10 21:50:53
282,2015-09-10 21:50:53,"We discussed this offline and agreed that for now, it's best for product developers to manually add `__typename` when necessary. Relay doesn't need this field to operate correctly, and applications won't need the field for every instance of an interface or union. Not including the field reduces network/cpu/memory overhead by default, and leaves open the option of adding it later.

A `matchFragmentType` function is easy enough to implement outside of Relay core.

@devknoll Thanks for bringing up this idea! I'm going to close but feel free to comment to continue the discussion
",josephsavona,2015-09-10 21:50:53
281,2015-09-10 16:17:07,"Ensures that the latest `babel-relay-plugin` in master is tested on every PR.
",josephsavona,2015-09-10 18:51:03
280,2015-09-10 15:34:42,"Supports compiling introspection queries/fields:
- `query { __schema }` 
- `query { __type(name: ""Name"") }` 
- `__typename` on any field.
",josephsavona,2015-09-10 20:55:38
280,2015-09-10 15:37:30,"addresses #268 #162 
",josephsavona,2015-09-10 20:55:38
280,2015-09-10 15:38:53,"cc @devknoll @drabinowitz
",josephsavona,2015-09-10 20:55:38
280,2015-09-10 17:29:48,":+1: 

Daydreaming a little bit, it might be nice if the sort of thing in #268 could be baked into Relay (or a Relay add-on) in some capacity in a way that prevents developer errors. I'm imagining something like:

<S_CODE_TOKEN>

(notice that there's no explicit `__typename` query)

Instead, a developer would just do something like:

<S_CODE_TOKEN>

Now the babel plugin could find any calls to `matchFragmentType` and automatically insert `__typename` as appropriate. There would be an invariant thrown if a key passed in does not match one of the possible types, and a warning if there is some type that is not handled (and perhaps a default key or parameter added to handle/silence that case).

Thoughts?
",devknoll,2015-09-10 20:55:38
280,2015-09-10 20:07:46,"@devknoll interesting. can you file an issue to discuss the idea? 
",josephsavona,2015-09-10 20:55:38
279,2015-09-10 13:17:51,"I want to start using Relay in my application but it can be done only part by part. This means that I will end up with several applications embedded inside page each with its own entry point. This way every entry point will be creating its own graphql query and will send it as separate request which obviously is not what I want to achieve.

Is there any possibility to have multiple entry points that will be collected and send to server as one request with multiple root queries? If not maybe there is a workaround that can be applied? Any suggestions are welcome.
",jzalucki,2015-09-10 20:02:56
279,2015-09-10 20:02:56,"Thanks for your question!

We want to make sure to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track issues that affect the development of Relay.

Questions like yours deserve a purpose-built Q&A forum. Would you like to post this question to Stack Overflow with the tag #relayjs? We'll be happy to answer there. Post a link to your Stack Overflow question here, to so that we don't lose track of it.

https://stackoverflow.com/questions/ask?tags=relayjs
",wincent,2015-09-10 20:02:56
279,2015-09-11 07:00:46,"http://stackoverflow.com/questions/32517450/multiple-entry-points-routes-as-single-request-with-multiple-queries
",jzalucki,2015-09-10 20:02:56
278,2015-09-10 12:26:45,"I admire the OSS we get from the Facebook team these days. Top quality stuff.
I don't get though why you enforce everyone to use every single ES6 feature when it's not really practical yet.

I'm trying to get a sample project with GraphQL and Relay, and although I like the concept a lot, I have to go through code that it's entirely written with every ES6 feat you can think of. Classes, destructuring, modules, you name it.
I love ES6, but not everyone is used to it yet, we are far from that.
And 99% of real production projects cannot actually ship those things. 
Actually no single browser supports all of those ES6 features.

Yes, I know we can use Babel, but by writing all the code in ES6, you practically make usage of babel a dependency. And for better or for worse, some people might not want to use babel ( it is a huge dependancy on many levels ).
At least you should give people an option.

So is there any way to get some ES5 examples?

Thanks. 
",AntouanK,2015-09-10 20:35:25
278,2015-09-10 20:35:25,"Thanks for posting!

How fast to migrate towards new language features is something we've discussed internally.

One issue is the one you raise about engine support (which obviously will always lag behind the cutting edge), but there's also the question of readability: being very early adopters of new features may make the code less readable to people for whom things like destructuring and so on are new (or even unknown) concepts.

But it's complicated, as always. Here are a few reasons why we've consciously chosen to bias towards new features:
- Relay is (and will be) dependent on a transpilation/build step because of our heavy use of static analysis, our build time validation of queries (which is one of the big ""fail fast"" value-adds of GraphQL), and the necessity of turning those query fragments into the underlying concrete representation. Once you've got the build step, making use of additional build-enabled features comes at a negligible cost.
- People like playing with shiny new things (evidence of this is the pace of evolution of JavaScript, which is driven by people and not by technological change), so we think embracing the future will on the balance attract more users/contributors to the community than otherwise would be the case. My personal sense is that this is true internally at Facebook as well, where people are subjectively happier and objectively more effective when writing ""modern"" JavaScript.
- We see ourselves as not merely wanting to follow where the community is (and certainly not synchronizing with the ""lowest common denominator"" from among what is widely used and supported) but to actually help define what the future is. Some new features may feel a bit ""out there"", but we explicitly want to drive adoption so that they _don't_ feel ""out there"" like that in the future. This is why we participate actively on TC39 and adopt what we consider to be beneficial new features early on.
- We feel that some of these new features (many of which we've originated at Facebook, such as JSX, Flow annotations, object spread notation etc) deliver substantial (not merely incremental) improvements to the developer experience and the ability of developers to produce reliable, robust, readable code. Some of these are highly experimental (stage 0 ES proposals, or not even slated to be baked into the language), but we push them because we think the upside is so large.
- With the explosion in the transpilation, linting, tooling ecosystem in recent years, the change to the yearly ""train"" model for ES specification, and future developments such as Web Assembly, we think the way people build JavaScript applications has fundamentally changed. All major browser vendors participate in the standards process and have baked-in autoupdaters on their platforms; they have effectively signed off on the idea that JavaScript is a fluid, moving target, and that polyfills and transpilers are (or are becoming) both the standard delivery mechanisms for JavaScript code and also the means with which the future shape of the language should be elaborated, vetted and tested.

So hopefully that gives you some insight into the reasons for our approach. We honestly think that the future may feel a little strange now, but before you know it it will seem the most natural thing in the world.

I'm going to close this for now, but feel free to comment further if you have additional thoughts on the topic.
",wincent,2015-09-10 20:35:25
278,2015-09-11 06:24:11,"@wincent  Thanks for the detailed response.
I respect your reasons, and most of them do sound valid. 
I believe you'll find that while some developers like ""playing with shiny things"", myself included, most are not comfortable with doing that on production, and companies/managers certainly don't want or allow that.

I do agree that you should push for evolving the language, but all I said is, give at least some option for the rest of the audience.
Like in React, there was a notion that ""JSX is optional"" and ""here's how you do it with ES5 or without JSX"". Although most devs used JSX. 
But, there was a choice.

Relay feels it went all in. ES6 and Babel or forget it.

In any case, thanks for sharing all of those libraries with everyone.
",AntouanK,2015-09-10 20:35:25
277,2015-09-10 09:17:35,"fix schema transformation accroding to changes [RFC] Expand GraphQL language https://github.com/graphql/graphql-js/commit/73b4d4d301a232ebdd790bb3cf1042e3a67a8fca
",vedmalex,2015-09-26 01:54:36
277,2015-09-10 09:22:22,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-09-26 01:54:36
277,2015-09-10 09:29:31,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-09-26 01:54:36
277,2015-09-10 18:24:51,"@vedmalex I patched this, but it doesn't work on the currently installed version of `graphql`. That package needs to be upgraded to latest for this to work (you can then verify that it works by running `npm run update-schema` from the plugin directory).
",josephsavona,2015-09-26 01:54:36
277,2015-09-26 01:54:36,"@vedmalex I'm going to close this due to inactivity, but thanks for helping with this! We'll revisit when we're ready to update versions
",josephsavona,2015-09-26 01:54:36
276,2015-09-10 01:13:40,,devknoll,2015-09-10 19:25:32
275,2015-09-10 00:32:50,"Fix tag from reactjs to relayjs.
",kassens,2015-09-10 00:55:26
274,2015-09-10 00:23:12,"Changed the tag from reactjs to relayjs
",kassens,2015-09-10 00:29:43
273,2015-09-09 22:09:44,"I’m creating a component where the user can create a new post and then after the post is created and while the user continues to edit, update the post periodically in the background.

Creating the post is easy and I know I can get the response object in an ​`onSuccess`​ handler but how do I then create ​`EditPostMutations`​? I’m not sure how to set things up so my newly created Post is a fragment in the component.

Am I thinking about this correctly?
",KyleAMathews,2015-09-10 00:18:47
273,2015-09-09 23:16:50,"You're at ground zero of a new thing we would like to try out! We want to tease apart:
1. Issues that affect the development of Relay
2. Questions about how to build Relay apps

We believe that GitHub Issues is the right place for the first, and a purpose-built Q&A forum is the right place for the second.

Would you like to post the _very first_ question on Stack Overflow, tagged #relayjs? We'll be happy to answer there.

https://stackoverflow.com/questions/ask?tags=relayjs
",steveluscher,2015-09-10 00:18:47
273,2015-09-09 23:30:00,"Post a link to your Stack Overflow question here, to so that we don't lose track of it.
",steveluscher,2015-09-10 00:18:47
273,2015-09-10 00:18:47,"Great idea—posted it at https://stackoverflow.com/questions/32491090/use-newly-created-object-from-mutation-in-additional-mutations

Someone cooler than me needs to create a post with a `relayjs` tag. I don't have enough reputation on Stackoverflow to do that.
",KyleAMathews,2015-09-10 00:18:47
272,2015-09-09 18:26:19,,steveluscher,2015-09-09 20:40:31
271,2015-09-09 18:05:12,"Also, tweaks some spacing.

<img width=""1249"" alt=""screen shot 2015-09-09 at 11 04 13 am"" src=""https://cloud.githubusercontent.com/assets/55161/9770030/93657440-56e2-11e5-8bb9-95f56312d94c.png"">
<img width=""1249"" alt=""screen shot 2015-09-09 at 11 04 15 am"" src=""https://cloud.githubusercontent.com/assets/55161/9770031/936d6434-56e2-11e5-9231-1a8df18e991e.png"">
",yungsters,2015-09-09 18:45:28
270,2015-09-09 17:27:49,"So, it turns out that GitHub's varnish cluster is configured with a maximum URL length. This thwarted the deployment of our homepage examples, since we inject the source code into them via the URL.

This PR makes the injection happen via the hash instead of `location.search`, where the server can't touch it.

![giphy](https://cloud.githubusercontent.com/assets/13243/9769176/67f62d68-56dd-11e5-9498-8213d01bea9c.gif)
",steveluscher,2015-09-09 18:20:28
269,2015-09-09 16:09:02,"I hit this while setting up my own ""Relay TodoMVC with routing"" example.

You need to set up `data-framework` and the framework key on `learn.json` to get the sidebar to show up (otherwise `learn.json` doesn't do anything). The `source_path` key from the `learn.json` template also doesn't do anything, and you need to drop in the `templates` from their example as well.

The `""url"": """"` bit in the example is just to keep the ""demo"" link from showing up, since as far as I'm aware this isn't running publicly on the internet anywhere.
",taion,2015-09-09 17:55:29
269,2015-09-09 16:19:26,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-09-09 17:55:29
269,2015-09-09 16:51:38,"BTW, per https://github.com/facebook/relay/blob/v0.2.1/examples/todo/js/components/TodoListFooter.js#L20 I do also have a working TodoMVC example that includes routing.

However, it depends on React Router, so I don't know if it'd be in scope here. It's also set up more as a demonstration of routing than of an optimal Relay TodoMVC implementation.
",taion,2015-09-09 17:55:29
269,2015-09-09 17:24:43,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-09-09 17:55:29
269,2015-09-09 17:26:14,"Very nice! Thanks for fixing this, and I am excited for your React Router implementation of the TodoMVC.

For posterity, here is what gets rendered:

<img width=""1095"" alt=""screen shot 2015-09-09 at 10 23 49 am"" src=""https://cloud.githubusercontent.com/assets/55161/9769125/0d6da0d8-56dd-11e5-88a5-8ac18d5e23f1.png"">
",yungsters,2015-09-09 17:55:29
269,2015-09-09 17:30:21,"@yungsters 

The React Router based implementation is here - https://github.com/taion/relay-todomvc. I'd be happy to PR it if you think it fits.

Aside from the caveat above with how the schema is set up, it has a few other external dependencies and uses webpack a bit differently from the existing examples, though.
",taion,2015-09-09 17:55:29
268,2015-09-09 07:37:31,"`__typename` is [implicit](https://facebook.github.io/graphql/#sec-Type-Name-Introspection), but babel-relay-plugin doesn't know about it and won't compile fragments containing it (partially related to #162?)

It seems like it might be beneficial to have, otherwise developers will have to manually expose one themselves any time they are composing more than one child fragment:

<S_CODE_TOKEN>

(p.s. would be a lovely time for @dschafer to jump in and drop some news feed knowledge again, since that has since disappeared from the slack archives :wink:)
",devknoll,2015-09-10 22:09:34
268,2015-09-09 17:09:42,"Products should _definitely_ be able to ask for `__typename` - @dschafer @leebyron thoughts on whether the JSON -> schema builder should generate these fields, or whether we should just hardcode handling for them in the plugin?
",josephsavona,2015-09-10 22:09:34
268,2015-09-09 20:28:09,"Also faced with this problem.

Looks like babel plugin code will have to be altered anyway. One of the problems is that `Union` types do not have fields. But they can have this magic `__typename` field.

And plugin code doesn't handle this case.

I just played with it - and simply adding `__typename` to Introspection results doesn't fix the problem. Plugin fails with error `undefined is not a function` in the `printField` function of `GraphQLPrinter` on following line:

<S_CODE_TOKEN>

(line 347 on my checkout)
",vladar,2015-09-10 22:09:34
268,2015-09-09 21:26:45,"@vladar Yeah, that error indicates that the type of the `__typename` field isn't found - this would also have to be provided by the `graphql` toolchain.
",josephsavona,2015-09-10 22:09:34
268,2015-09-10 01:20:20,"Shall I move this to facebook/graphql-js then, @josephsavona?
",devknoll,2015-09-10 22:09:34
268,2015-09-10 01:34:10,"__typename is not a field of a type, but a special metafield (hence why its allowed on unions which do not define fields at all) - tools that operate on GraphQL like Relay need to be aware of this metafield.

I think the solution here is for Relay's compiler to be aware of this metafield so that it behaves correctly.
",leebyron,2015-09-10 22:09:34
268,2015-09-10 01:46:04,"@leebyron :+1: thanks for confirming
",josephsavona,2015-09-10 22:09:34
268,2015-09-10 22:09:34,"Fixed by #280 
",devknoll,2015-09-10 22:09:34
267,2015-09-09 01:54:55,,josephsavona,2015-09-09 02:15:23
266,2015-09-08 23:39:23,"As you type into [the prototyper](http://facebook.github.io/relay/prototyping/playground.html), update the URL with `#source={URLEncodedAppSource}&schema={URLEncodedSchemaSource}` such that it can be copy and pasted to a friend.

Notes:
- When loading a prototype with injected code, don't evaluate and run it. Cover the UI on the right side with a message and a button. The viewer must click the button to hide the cover and start the prototyper.
- Once this is done, turn on localStorage-caching-by-default; right now it's opt-in.
",steveluscher,2015-09-19 01:35:32
266,2015-09-08 23:48:20,"Since URLs have a maximum length, we should consider saving the source on parse?
",kassens,2015-09-19 01:35:32
266,2015-09-09 00:31:44,"I'm not too fussed about URL length. Chrome, Safari, and Firefox accept over 100K characters.
",steveluscher,2015-09-19 01:35:32
266,2015-09-09 00:38:17,"> Since URLs have a maximum length

Alas, they [don't all agree](http://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers) about what that length should be.
",wincent,2015-09-19 01:35:32
266,2015-09-19 01:35:32,"Closed by #342.
",steveluscher,2015-09-19 01:35:32
265,2015-09-08 22:44:43,"Currently, here's what the Relay Prototyping tool does to surface errors that originate from the Babel Relay plugin:
1. Collect `console.warn` logs; throw them out after they're 500 ms old.
2. Watch for exceptions thrown that contain the text “GraphQL Validation error”
3. Present the collected warnings

This means that errors that crop up under the following conditions will not be displayed:

a. You performed a mutation with GraphQL errors >500ms after the transform
b. You late-added a RelayContainer with GraphQL errors to the tree >500ms after the transform

To fix this, we could modify the `babel-relay-plugin` to accept a config param that tells it to throw errors right away instead of printing console warnings. Thoughts, @josephsavona?
",steveluscher,2016-11-15 21:55:48
265,2015-09-09 00:36:23,"A param to throw on errors instead of logging makes sense. This would be useful in static build steps too.
",josephsavona,2016-11-15 21:55:48
265,2015-09-09 16:44:11,"+1
",grydstedt,2016-11-15 21:55:48
265,2015-09-11 17:38:53,"added an option for this in #292
",josephsavona,2016-11-15 21:55:48
265,2015-09-11 17:39:22,"Realized that the option is present but we still need to use this in the prototyping tools ;-)
",josephsavona,2016-11-15 21:55:48
264,2015-09-08 22:31:10,"Added three examples to the homepage:
- A simple list
- A simple parameterization
- A simple mutation

![home](https://cloud.githubusercontent.com/assets/13243/9749074/8aa4f302-563e-11e5-8d08-51f361860b46.gif)
",steveluscher,2015-09-09 00:10:24
264,2015-09-08 22:36:58,"Cool!
",KyleAMathews,2015-09-09 00:10:24
264,2015-09-08 22:37:44,"+1 awesome! 
",cesarandreu,2015-09-09 00:10:24
263,2015-09-08 19:40:04,"I'd love to be able to contribute more meaningfully (+ encourage others to contribute more) to Relay! Most of the outside contributions so far are have been small; mostly fixing bugs, documentation issues, or build/release issues. 

It would be great if we could set up some milestones (or similar) on GitHub so that we can get an idea of not just what is already being worked on by FB, but also a sense of any bigger or longer term projects that the community can contribute to as well.

The former can partially be gleaned from some existing GitHub issues, like...
- [ ] Server-side rendering hooks #136 (@voideanvalue)
- [ ] Client-side schema #114 (@josephsavona)
- [ ] Better intro tutorials #6 (@steveluscher)
- [ ] Support root fields w/o node mapping #112 (?)
- [ ] Better developer tools (@kassens)
- [ ] Support deferred queries (@wincent)

The latter is harder, but probably looks something like:
- [ ] Improved mutation config/error handling #231 #261
- [ ] Easier to use Babel plugin #206
- [ ] ...more

The _Help Wanted_ tags that @yungsters has been adding seem like a good step in this direction, though.
",devknoll,2015-09-10 21:02:48
263,2015-09-09 00:14:53,"> I'd love to be able to contribute more meaningfully (+ encourage others to contribute more) to Relay!

Yes, we'd love that too. Thanks for bringing this up!

You have a pretty good list there of what we're working on internally. The one or two things that seem to be missing is better developer tools (@kassens) and porting our already-existing internal support for deferred queries (@wincent).

I am not sure if we're ready to start planning at the milestone level (the project is still so young, that we expect to be doing regular releases at a cadence of about every two weeks or so, and a lot of this early work is reactive/responsive to emergent needs), but doing a better job with labels is something we should do right now.

I also think a bit more of a (tentative) roadmap document could be useful.
",wincent,2015-09-10 21:02:48
263,2015-09-09 14:14:57,"> I also think a bit more of a (tentative) roadmap document could be useful.

Thanks for the response! I think that this + labels would be a great place to start in the interim!
",devknoll,2015-09-10 21:02:48
263,2015-09-10 21:02:48,"I've split off #284 to track producing a roadmap. The label thing is a bit fuzzier, but I'm going through now making sure that everything is properly labeled, and the other team members are already CC'd here, so I think we can close this now.

Let us know if you have any concrete suggestions for labels that you think we should start using but aren't yet, or labels which we're misusing or could use better.

And thanks once again for contributing and helping us improve our processes.
",wincent,2015-09-10 21:02:48
262,2015-09-08 18:21:08,"Via @l-urence in #243:

>  I noticed a second deprecated warning with `React.render(/*....*/)` in the example. It seems that `React.render(/*...*/)` should be replaced with `ReactDOM.render(/*....*/)` in React v0.14.0.
",wincent,2015-09-11 04:09:09
262,2015-09-08 20:38:11,"I only get the deprecated warning if react is imported / required with `import React from 'react'`. I looked into to the unminified source of react which is loaded via:

<S_CODE_TOKEN>

there ReactDOM is assigned to React. So I guess for the examples it should be okay to call `React.render(/*...*/)`.
",l-urence,2015-09-11 04:09:09
262,2015-09-08 23:27:41,"> So I guess for the examples it should be okay to call `React.render(/*...*/)`.

Those will begin warning as well in the RC.
",zpao,2015-09-11 04:09:09
262,2015-09-09 05:24:22,"@zapo How to use ReactDOM with `react.min.js`? In the examples React is loaded via the `<script>` Tag. I dont't know if it is a good idea to change this and `require` it in the js source. 

I try to submit a PR by the weekend.
",l-urence,2015-09-11 04:09:09
262,2015-09-09 05:30:15,"@zapo isn't here, just me 😜

We're going to be building a `react-dom.min.js` as another browser package which will reach into the `react.min.js` file (so `react-dom.min.js` is only 712 bytes but you'll need react loaded). That's happening in https://github.com/facebook/react/pull/4814 so you won't be able to do it before the next version we ship (almost certainly RC later this week).

You'll want to do this when you can:

<S_CODE_TOKEN>
",zpao,2015-09-11 04:09:09
262,2015-09-09 05:35:00,"@zpao Thanks. Then I will fix this after the RC release.
",l-urence,2015-09-11 04:09:09
262,2015-09-11 04:09:09,"Done in #290.
",steveluscher,2015-09-11 04:09:09
261,2015-09-08 17:47:17,"When a `RANGE_ADD` mutation is sent but the new edge is not a part of the tracked query (i.e. it was never queried in the user interface), Relay should not warn that the new edge field is missing.

https://github.com/facebook/relay/blob/master/src/traversal/writeRelayUpdatePayload.js#L308-L317

Originally reported in #231.
",yungsters,2016-05-10 15:55:39
261,2016-05-10 15:55:39,"@xuorig and @yuzhi have recently implemented this and improved the messaging.
",josephsavona,2016-05-10 15:55:39
260,2015-09-08 16:30:18,"Fixes #248
",devknoll,2015-09-08 18:40:28
260,2015-09-08 16:47:50,"Looks reasonable to me. Thanks, @devknoll.
",wincent,2015-09-08 18:40:28
259,2015-09-08 14:36:23,"Hi,
I'm trying to add `relay` to [this](https://github.com/granze/react-starterify) boilerplate.

This one uses `browserify` and `gulp`.
I've added the required dependencies 

<S_CODE_TOKEN>

And tried to mimic the todo example.

However at build-time I get 

<S_CODE_TOKEN>

I can't really understand the issue here.
It looks like something related to ES6 but the project uses `babelify` to deal with it -> [gulpfile.babel.js](https://github.com/Granze/react-starterify/blob/master/gulpfile.babel.js)

Any hint will be much appreciated.
",mfirry,2015-09-09 00:44:03
259,2015-09-08 16:53:08,"Not sure if this is much help, but I finally got around to publishing a little starter kit I created a while back that uses browserify here: https://github.com/mhart/simple-relay-starter
",mhart,2015-09-09 00:44:03
259,2015-09-08 16:54:01,"(if you have a look at https://github.com/mhart/simple-relay-starter/blob/master/App.js#L50-L61 you can see you don't really even need to use `Relay.Route` at all)
",mhart,2015-09-09 00:44:03
259,2015-09-08 19:58:59,"Thanks a lot @mhart. I'll start again using your starter kit.
",mfirry,2015-09-09 00:44:03
259,2015-09-08 20:14:49,"@mfirry I had run into exactly same issue, I got it working adding es7 features

<S_CODE_TOKEN>
",michshat,2015-09-09 00:44:03
259,2015-09-08 20:29:46,"Awesome! Thank you so much.
",mfirry,2015-09-09 00:44:03
259,2015-09-09 00:44:03,"@mfirry, I'll close this seeing as it looks like you've resolved your issue. Let me know if i've misunderstood and we can reopen this and investigate.
",wincent,2015-09-09 00:44:03
258,2015-09-08 13:38:11,"Hi!

Currently in the spec the `clientMutationId` in mutations has to be non-null. The requirement seems overly strict - in GraphiQL usage or while using other clients but Relay, one doesn't _have_ to use `clientMutationId` to actually make a mutation.

I propose to remove the requirement on non-nullness from clientMutationId, both in input and in payload. Instead one can say that clientMutationId _must_ be returned if it was provided.

Pinging stakeholders - @dschafer.
",freiksenet,2015-09-17 00:44:30
258,2015-09-08 20:04:08,"Yeah, I'm fine with this; let's change it to state that clientMutationId _may_ be non-null, and it is non-null on the input if and only if it's non-null on the payload. Either way, the value of clientMutationId in the payload must be the value provided in the input, or null if the value was not provided.
",dschafer,2015-09-17 00:44:30
258,2015-09-09 07:43:48,"Great! Do you want me to do pull request to the spec?
",freiksenet,2015-09-17 00:44:30
258,2015-09-09 08:59:39,"Yep, go for it!
",dschafer,2015-09-17 00:44:30
258,2015-09-17 00:44:30,"Closed by #308.
",steveluscher,2015-09-17 00:44:30
257,2015-09-08 12:12:29,"When I run npm install for todo examples,
I get the following error: --> `'[' is not recognized as an internal or external command,`

<S_CODE_TOKEN>
C:\Users\User\nodejs\relaymaster\examples\todo>npm i
|


> react-relay@0.2.1 prepublish C:\Users\User\nodejs\relaymaster
> npm run build

/
> react-relay@0.2.1 build C:\Users\User\nodejs\relaymaster
> [ $(ulimit -n) -lt 4096 ] && ulimit -n 4096; gulp

'[' is not recognized as an internal or external command,
operable program or batch file.
\
npm ERR! Windows_NT 6.3.9600
npm ERR! argv ""C:\\Users\\User\\nodejs\\\\node.exe"" ""C:\\Users\\User\\nodejs\\n
de_modules\\npm\\bin\\npm-cli.js"" ""run"" ""build""
npm ERR! node v0.12.5
npm ERR! npm  v2.11.2
npm ERR! code ELIFECYCLE
npm ERR! react-relay@0.2.1 build: `[ $(ulimit -n) -lt 4096 ] && ulimit -n 4096;
gulp`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the react-relay@0.2.1 build script '[ $(ulimit -n) -lt 4096
 && ulimit -n 4096; gulp'.
npm ERR! This is most likely a problem with the react-relay package,
npm ERR! not with npm itself.
ERR! Tell the author that this fails on your system:
npm ERR!     [ $(ulimit -n) -lt 4096 ] && ulimit -n 4096; gulp
npm ERR! You can get their info via:
npm ERR!     npm owner ls react-relay
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     C:\Users\User\nodejs\relaymaster\npm-debug.log
-
npm ERR! addLocalDirectory Could not pack C:\Users\User\nodejs\relaymaster to C<S_CODE_TOKEN>```
",spyalert01,2015-09-17 01:50:19
257,2015-09-08 14:10:06,"I looks like the command is failing because there is some bash-script before the actual command, which the windows command line does not supprt.
You could try to run `gulp` from your command line instead of `npm run build`.
",clentfort,2015-09-17 01:50:19
257,2015-09-08 14:12:06,"Thanks for reporting the issue, @spyalert01. Looks like this is happening on Windows where the shell doesn't have a `[` (`test`) command. I wouldn't be surprised if the `ulimit` call would fail in any case, even if `[` weren't an issue.

I don't have a Windows install right now to test a fix, but will look into getting one. In the meantime, if you beat me to a PR we'd be happy to accept one.
",wincent,2015-09-17 01:50:19
257,2015-09-09 03:08:17,"@clentfort 
I am not even doing the npm run build yet. I am only doing npm install and that message already popup.
and How to Gulp? sorry. I am only familiar with npm. I am a newbie
",spyalert01,2015-09-17 01:50:19
257,2015-09-09 03:08:46,"@wincent 
sorry, what do you mean by beat you to a PR?
",spyalert01,2015-09-17 01:50:19
257,2015-09-09 03:55:04,"@spyalert01: He meant that if you want to work on a pull request (PR) before he's able to get access to a Windows install, we're all happy to accept that contribution.
",kassens,2015-09-17 01:50:19
257,2015-09-09 07:01:25,"We might actually not need the `ulimit` bit anymore now that we're past node 0.10 (apparently https://github.com/nodejs/node-v0.x-archive/commit/6820054d2d42ff9274ea0755bea59cfc4f26f353 was in node 0.12 so is probably still around in v3, v4)
",zpao,2015-09-17 01:50:19
257,2015-09-09 16:12:33,"Cool. If we do end up keeping it, we'd need to get rid of the `;` as Windows doesn't grok that. It does, however, grok `&&`, but we'd still need to work around `ulimit` not existing on Windows (not sure how, as it doesn't have `which` either... probably need to wrap it up in a separate script that we call with `node`).
",wincent,2015-09-17 01:50:19
257,2015-09-17 01:50:19,"The `ulimit` command is gone as of #322. Feel free to open a new issue if you encounter any more problems on Windows!
",steveluscher,2015-09-17 01:50:19
256,2015-09-08 05:54:01,"The babel plugin in `scripts/babel-relay-plugin` should be named according to the `babel-plugin-*` naming scheme. However, the name is currently taken by an empty project.

I've contacted the package owner on npm and CC'd npm support according to https://docs.npmjs.com/misc/disputes. Hopefully the owner releases the name without any issue.
",thejameskyle,2016-05-10 15:54:48
256,2015-09-08 06:21:14,"The module name has been released by the owner https://www.npmjs.com/package/babel-plugin-relay
",thejameskyle,2016-05-10 15:54:48
256,2015-09-08 06:27:29,"I've reseved the name for now and added all the owners of the `babel-relay-plugin` module on npm to it. Feel free to remove me and replace it, if you have any issues just ping me.
",thejameskyle,2016-05-10 15:54:48
256,2015-09-08 06:27:58,"p.s. the intention was to publish #206 separately under this package name, but since there's interest in having this functionality in the current `babel-relay-plugin` / I haven't had time to actually work on the project yet, I went ahead and released the name so this issue could be resolved
",devknoll,2016-05-10 15:54:48
256,2015-09-08 17:05:58,"@devknoll thanks!
",josephsavona,2016-05-10 15:54:48
256,2015-09-09 01:07:12,"also thanks @thejameskyle!
",josephsavona,2016-05-10 15:54:48
256,2015-09-16 17:59:15,"@josephsavona this happening? :wink: 
",devknoll,2016-05-10 15:54:48
256,2015-09-16 18:17:55,"@devknoll Yeah, we should eventually move to the recommended naming scheme. This might take a few rounds of PRs:
- change the package name in the code (and then publish it)
- update everything to depend on it
- also update the docs

Community help appreciated! ;-)
",josephsavona,2016-05-10 15:54:48
256,2015-09-16 18:19:51,"Thanks for the list and the tag, that's what I wanted to see :+1: 
",devknoll,2016-05-10 15:54:48
256,2016-01-08 00:11:55,"ping
",thejameskyle,2016-05-10 15:54:48
256,2016-01-10 19:50:50,"@devknoll steveluscher @josephsavona Will this replace the `babel-relay-plugin` on NPM ?
If so it should still be in sync with the version number of `react-relay` to avoid confusion ?!
But it looks like there is a `1.0.0` published to NPM - but `react-relay` is only `0.6.1`.
Can you please fix this or am I mistaken here?
",BerndWessels,2016-05-10 15:54:48
256,2016-03-04 23:12:27,":+1: 
",frodosamoa,2016-05-10 15:54:48
256,2016-04-20 18:13:32,"Until this is happening we've built [babel-plugin-react-relay](https://github.com/graphcool/babel-plugin-react-relay) supporting different source types such as JSON files, JS schema definitions and even URL schema endpoints.

This is meant to provide a more convenient and powerful solution without the need for scripts like `build/babelRelayPlugin.js`.
",schickling,2016-05-10 15:54:48
256,2016-05-10 15:54:48,"See my [comment on the PR](https://github.com/facebook/relay/pull/732#issuecomment-210023522) - we're happy to change the name, but the change has to be done incrementally in order to not break things for us. If someone wants to work on this, send a PR!
",josephsavona,2016-05-10 15:54:48
256,2016-12-22 18:05:09,"BabelRelayPlugin with hot reload 🔥
Reflect GraphQL Schema changes in json file without completely restarting dev server.
https://github.com/nodkz/babel-plugin-transform-relay-hot",nodkz,2016-05-10 15:54:48
255,2015-09-08 00:38:44,"This is fixing an issue I had which is detailed here: https://github.com/facebook/relay/issues/254.

In examples, `react-relay` is using the local version and `babel-relay-plugin` needs to use the local one as well or the examples won't start.
",adriantoine,2015-09-08 18:10:22
255,2015-09-08 00:41:27,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-09-08 18:10:22
255,2015-09-08 00:44:28,"Hi @facebook-github-bot, I just signed up!
",adriantoine,2015-09-08 18:10:22
255,2015-09-08 00:45:57,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-09-08 18:10:22
255,2015-09-08 16:52:02,"Thanks, @adriantoine. This looks reasonable to me. I also see #260, which fixes this this in a different way. Let me check out both of these.
",wincent,2015-09-08 18:10:22
255,2015-09-08 16:55:14,"@wincent Not sure, but I think we might need both? #260 was intended to fix a slightly different problem. This one seems to be closer to #201
",devknoll,2015-09-08 18:10:22
255,2015-09-08 17:00:15,":+1: 
",josephsavona,2015-09-08 18:10:22
255,2015-09-08 17:01:38,"This makes sense. We keep features in sync between the main & plugin packages so the examples should use the ""same"" version.
",josephsavona,2015-09-08 18:10:22
255,2015-09-08 17:27:31,"Merging both through our internal tool. They should sync back out here shortly.
",wincent,2015-09-08 18:10:22
254,2015-09-08 00:16:59,"I cloned the repo and tried:
`cd relay/`
`npm install` (this is needed to avoid issue stated here: https://github.com/facebook/relay/issues/248)
`cd examples/todo`
`npm install`
`npm start`

And I get this error on `npm start`:

<S_CODE_TOKEN>

Note that I don't have any errors on install, only on `npm start`, I have tried `npm cache clean` and I get the same error with the other examples: `relay-treasurehunt/` and `star-wars/`.
",adriantoine,2015-09-08 00:39:13
254,2015-09-08 00:39:13,"I found the issue and fixed it, see PR.
",adriantoine,2015-09-08 00:39:13
253,2015-09-07 23:13:16,"I was curious on what the Relay team is thinking re: subscriptions on the question of whether data is pushed to Relay or if Relay controls when it pulls data.

I've been researching Kafka recently and thought [their discussion of the design for their consumer API was relevant](https://kafka.apache.org/08/design.html).

> Another advantage of a pull-based system is that it lends itself to aggressive batching of data sent to the consumer. A push-based system must choose to either send a request immediately or accumulate more data and then send it later without knowledge of whether the downstream consumer will be able to immediately process it. If tuned for low latency this will result in sending a single message at a time only for the transfer to end up being buffered anyway, which is wasteful. A pull-based design fixes this as the consumer always pulls all available messages after its current position in the log (or up to some configurable max size). So one gets optimal batching without introducing unnecessary latency.

This matches well I think with many of the goals of Relay e.g. working well on low-bandwidth devices that often go off line. Relay could dynamically change how often it polls for new updates depending on network quality, battery level, etc. On very poor connections/low-battery, Relay could wait minutes even between polls. On good connections, Relay could use long-polling or WebSockets. While waiting for a new pull request, the server could queue updates as well as squash objects with multiple updates.

Pull instead of push also solves the out-of-order problem that affects naive push messaging. The server can track the read position of each consumer and ensure that new messages are sent in the correct order when pushed.
",KyleAMathews,2015-09-10 23:55:32
253,2015-09-08 03:21:20,"> the question of whether data is pushed to Relay or if Relay controls when it pulls data

Subscriptions are still an active area of work so details are likely to change (check the GraphQL slack channel for discussion). Specifically for Relay, the basic idea is that the application can declare that it wants to receive updates for some subset of events (perhaps ""likes on story xyz"") and be notified when such an event occurs (via push, with updated data). Similar to queries and mutations, this isolates the ""what"" from the ""how"" - and could allow for the network layer to use a variety of different strategies (polling, websockets, etc.). 
",josephsavona,2015-09-10 23:55:32
253,2015-09-10 23:34:26,"I'd also note that this doesn't necessarily be a dichotomy of either push or pull, it could actually be a mix of both (ie. periodic, eager push notification of the availability of updates, but with the client making the call about when to actually pull them). Regardless, separating the ""what"" from the ""how"" is the right idea (both on the Relay side on the client, but also on the server side where there are a bunch of ways that subscriptions _could_ be implemented, but GraphQL won't want to be overly opinionated about the details).
",wincent,2015-09-10 23:55:32
253,2015-09-10 23:55:32,"> periodic, eager push notification of the availability of updates, but with the client making the call about when to actually pull them

Agree a mix could be better depending on tradeoffs you're making. My main point is naive push leads to out-of-order/missing updates. But to your what vs. how point, this is probably not a GraphQL/Relay concern but something I'd need to build into my own application. For many applications, naive push would be fine (e.g. stock ticker) so missing an update or two wouldn't matter.
",KyleAMathews,2015-09-10 23:55:32
252,2015-09-07 19:28:53,"Makes the use of `field(before: .., first: ..)` or after/last an error. This combination is only supported when generated by Relay during the diffing process.

Also, the previous version replaced invalid GraphQL templates with a function that throws - while I was at it, I changed this to include the actual validation error message.

Addresses #247 
",josephsavona,2015-09-09 01:15:29
252,2015-09-07 19:30:06,"cc @steveluscher re. the more informative error messages
",josephsavona,2015-09-09 01:15:29
251,2015-09-07 18:53:50,"Can't seem to be able to write simple query with my [schema](https://gist.github.com/mfirry/10aeeb8fdf2352d8fb96).

When running `upadateSchema` I always get `Error: Ticket.id field type must be Output Type but got: [object Object].`

I tried mimicking the one on the tutorial but to no avail

<S_CODE_TOKEN>

I must be missing something.

Thanks
",mfirry,2015-09-07 19:32:20
251,2015-09-07 19:14:50,"Try to change the id definition in your schema. 

From:

<S_CODE_TOKEN>

to 

<S_CODE_TOKEN>

[globalIdField(typeName)](https://github.com/graphql/graphql-relay-js/blob/e4f019c9aeb3936f6c9fdbe4d2172fae722a67f8/src/node/node.js#L110) returns the field config.
",l-urence,2015-09-07 19:32:20
251,2015-09-07 19:32:20,":+1: That should do it. Thanks @l-urence!
",steveluscher,2015-09-07 19:32:20
251,2015-09-07 19:57:05,"Great, I'll try this out first thing tomorrow.
Should the [tutorial](https://github.com/facebook/relay/blob/master/docs/QuickStart-Tutorial.md) be updated accordingly or is my case somehow different?
",mfirry,2015-09-07 19:32:20
251,2015-09-07 19:59:27,"It looks like the tutorial follows the pattern mentioned by @l-urence above:

<S_CODE_TOKEN>
",steveluscher,2015-09-07 19:32:20
251,2015-09-07 20:05:00,"You're totally right. My bad. Thank you so much.
",mfirry,2015-09-07 19:32:20
250,2015-09-06 13:30:26,"I have a mutation that changes a field on every node in a connection — like a `Book` object with a `pages` connection, where you change the `pageNumber` of each `page`.

At the moment I'm doing this as a `FIELDS_CHANGE` mutation, the field that’s changing being the `pages` of the `book`. This works great — the only problem is that I'd like to have this update optimistically.

I've tried returning an optimistic response that looks like this:

<S_CODE_TOKEN>

Where `reorderPages` is an imagined function that returns an object conforming to the structure of a connection field, with the `node`s containing their updated `pageNumber` values. But this doesn’t seem to do anything.

How should I be doing this?
",sgwilym,2015-09-06 15:29:34
250,2015-09-06 15:29:34,"Dang, I was caught out by #119.
",sgwilym,2015-09-06 15:29:34
250,2015-09-08 14:25:12,"Thanks for the report, @sgwilym, and glad that you where able to get to the bottom of things.
",wincent,2015-09-06 15:29:34
249,2015-09-06 07:38:38,"Mutation queries were being refragmented too early - this removes most calls to `flattenRelayQuery` during mutation query construction and moves the `refragmentRelayQuery` call to the very end.

Addresses #234 
",josephsavona,2015-09-08 23:45:28
248,2015-09-06 05:31:21,"I tried running the TodoMVC example from the README file but got the below error. 

I'm running node 0.12.3 and npm 3.2.2. I also have gulp CLI 3.9.0 installed globally.

Running npm install from `relay/` first solved the issue.

<S_CODE_TOKEN>
",mjw56,2015-09-08 18:40:28
248,2015-09-07 19:35:13,"Thanks for bringing this up!

The examples used to depend on the npm `react-relay` module, but they've since been changed to depend on `""../../""` to allow local development.

We either need to:
1. Document this.
2. Automate the building of `react-relay` when you try to install/run the examples.
",steveluscher,2015-09-08 18:40:28
247,2015-09-06 00:41:21,"I'm getting this warning:

<S_CODE_TOKEN>

For this query fragment:

<S_CODE_TOKEN>

Which appears to convert to:

<S_CODE_TOKEN>
",amccloud,2015-09-10 00:23:39
247,2015-09-06 00:43:10,"I should note that `first: $count` works fine.
",amccloud,2015-09-10 00:23:39
247,2015-09-06 23:37:37,"cc @yuzhi 
",josephsavona,2015-09-10 00:23:39
247,2015-09-07 15:11:19,"Thanks for reporting and providing such complete information.
TLDR: You can probably ignore the warning.

Looking at the query it is trying to send to the server, it has both a before and after call. That can only happen when we have a gap of unknown edges between two segment of known edges. 

<S_CODE_TOKEN>

My best guess is you have some components fetching the `first:n` of this photos connection and some components fetching the `last:m` of this same photos connection, which generates the gap and that query. That totally within what Relay's connection manager should support.

The warning is mainly to prevent people from directly doing `before/first` and `after/last` inside components. Those two combinations are used for polling additional things off of a connection and should not be part of any component's queries. The warning is showing up because we recently updated the write path to also read out some edges for some additional logic.

@josephsavona  do you think we can move that warning about doing `before/first` and `after/last` to the transform step so we don't get a lot of false positive warnings?
",yuzhi,2015-09-10 00:23:39
247,2015-09-07 18:23:54,"> do you think we can move that warning about doing before/first and after/last to the transform step so we don't get a lot of false positive warnings?

@yuzhi Awesome idea, I'm on it.
",josephsavona,2015-09-10 00:23:39
247,2015-09-07 18:27:31,"> My best guess is you have some components fetching the first:n of this photos connection and some components fetching the last:m of this same photos connection, which generates the gap and that query. That totally within what Relay's connection manager should support.

That is correct :)
",amccloud,2015-09-10 00:23:39
247,2015-09-07 22:02:07,"@josephsavona I can remove the warning from GraphQLRange once you update the transform.
",yuzhi,2015-09-10 00:23:39
247,2015-09-08 03:02:39,"@yuzhi sounds perfect
",josephsavona,2015-09-10 00:23:39
247,2015-09-10 00:23:39,"Removed it from GraphQLRange https://github.com/facebook/relay/commit/a04a51486c2576c4a0dcdb091023e1bda0d0a5fe
",yuzhi,2015-09-10 00:23:39
246,2015-09-05 22:55:30,"First off all, love idea and the great talks about it on ReactEurope. But I still get stuck quite a lot (which I should expect from a technical preview). Here is my current problem:

My data is modeled like this:

<S_CODE_TOKEN>

Now I want to display a Babushka list for which I have a List and a ListItem Component:

list.js

<S_CODE_TOKEN>

list-item.js

<S_CODE_TOKEN>

Naturally this leads to the stack size being exceeded. Am I doing something wrong fragment wise?
",Gregoor,2015-09-10 09:16:18
246,2015-09-06 07:46:28,"Recursive fragments are supported so long as you explicitly specify a stopping point. The pattern for this is to create a variable that determines if the nested item should be expanded or not - default it to false, and then only ""expand"" the items one level deep to begin with:

<S_CODE_TOKEN>

The parent component of this list can then specify that the first level of items should be expanded initially:

<S_CODE_TOKEN>
",josephsavona,2015-09-10 09:16:18
246,2015-09-06 09:53:47,"Just what I was looking for! Thanks a lot Joesph.
",Gregoor,2015-09-10 09:16:18
246,2015-09-06 10:35:43,"Now I'm getting the following error:

<S_CODE_TOKEN>

Which doesn't make a whole lot of sense to me, because the babushka being passed to the List component is obviously fetched by Relay and not mocked by me. Am I missing something?
",Gregoor,2015-09-10 09:16:18
246,2015-09-06 23:38:29,"@Gregoor is it possible to link to a gist of the code for the parent and child component?
",josephsavona,2015-09-10 09:16:18
246,2015-09-06 23:56:20,"Does [this](https://gist.github.com/Gregoor/937909c2773b30f28d6f) suffice?

I can't really make sense of the error in that context. :( Thanks for getting back to me so quickly
",Gregoor,2015-09-10 09:16:18
246,2015-09-07 00:22:19,"Commented on the gist, but since `SpeciesList` expects the `species` prop to be an array of species, it should mark the fragment as plural: `fragment on Species @relay(plural:true) {...}`.
",josephsavona,2015-09-10 09:16:18
246,2015-09-07 09:04:52,"Out of all the words in the english language, I pick one where the singular and plural is isomorphic. Oh brain, why?

Anyway thanks, didn't know about the annotations(?). Are they already documented somewhere?
But I do think that species is singular in both cases, since the list component fetches the subspecies itself (which should be available).

I changed the naming once again to something more familiar and heteromorphic.
",Gregoor,2015-09-10 09:16:18
246,2015-09-10 09:16:18,"http://stackoverflow.com/questions/32497759/recursive-data-components-later-fetches-throwing-an-error
",Gregoor,2015-09-10 09:16:18
246,2015-10-01 04:54:24,"Hi @Gregoor @josephsavona ...,
I'm a little bit confused. React, Relay and GraphQL are quite new for me.
Is it possible for example to render recursively a directory structure with n descendants in a single http request?
If not, what's the source of the ""problem""?
- GraphQL doesn't provide a syntax to query recursively data
- or Relay doesn't know how to use this GraphQL syntax.

Relay batch the queries so in the worst case scenario, if I understand, I'll have a single GraphQL Query per level and by using a condition like ${BabushkaList.getFragment('babushka') we can tweak the thing to get n levels at the same time.

Thanks for clarifications.
",grifx,2015-09-10 09:16:18
246,2015-10-01 17:24:49,"@grifx: Instead of a boolean you can use a number that you decrement every level of recursion. If it's `<= 0` you don't expand.
",kassens,2015-09-10 09:16:18
246,2016-01-05 00:05:19,"What is the deal with `#if()` in `BabushkaList.getFragment('babushka').if(variables.expand)`? It looks like `RelayContainer.getFragment()` returns a `RelayQueryFragment` which doesn't seem to have an `#if()` on its prototype.

*\* Edit **

Posted too soon: it's a `RelayFragmentReference`. Will continue investigating but any guidance regarding where I might read (non-code) about this would be great.
",dminkovsky,2015-09-10 09:16:18
246,2016-01-05 01:30:20,"@dminkovsky `RelayFragmentReference` and the `if/unless` functions on it aren't documented. The plan is to replace these with standard GraphQL `@include`/`@skip` directives so that you could write something like:

<S_CODE_TOKEN>
",josephsavona,2015-09-10 09:16:18
246,2016-01-05 01:33:40,"@joesavona I was wondering just that—the relationship between if/unless and
directives. Thanks for clarifying!

понедельник, 4 января 2016 г. пользователь Joseph Savona написал:

> @dminkovsky https://github.com/dminkovsky RelayFragmentReference and
> the if/unless functions on it aren't documented. The plan is to replace
> these with standard GraphQL @include/@skip directives.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/246#issuecomment-168863730.
",dminkovsky,2015-09-10 09:16:18
245,2015-09-05 22:20:41,"I tried to add directives to my GraphQL query in Container, like:

<S_CODE_TOKEN>

But they were cut out by Relay. Am I missing something?
",vladar,2015-09-16 18:31:08
245,2015-09-06 07:50:59,"@vladar Thanks for filing an issue - Relay doesn't support arbitrary directives (it uses the `@relay(...)` directive for some metadata). This is definitely something we would like to support going forward.
",josephsavona,2015-09-16 18:31:08
245,2015-09-06 07:59:56,"Thanks for clarifications. But `@include` and `@skip` are not arbitrary. They are part of GraphQL specification - http://facebook.github.io/graphql/#sec--skip
",vladar,2015-09-16 18:31:08
245,2015-09-06 23:40:10,"@vladar touche. yes, we should support these. I'll update the title of this issue to reflect this.
",josephsavona,2015-09-16 18:31:08
245,2015-09-08 13:41:35,"Is it necessary for Relay to be cutting out the directives? Presumably if they were left intact it would be possible to support arbitrary ones as well.
",AndrewIngram,2015-09-16 18:31:08
245,2015-09-08 14:23:04,"@AndrewIngram, that's a good point. I think the reason we've defaulted to a conservative policy here so far is that directives can drastically alter the semantics of a query, and Relay very much wants to be able to both statically analyze component queries and dynamically construct new ones at runtime (for example, to compute minimal diff queries in order to request only data that is not already present in the store).

In addition to that, directives as they exist in open source GraphQL are a relatively new addition to the language, so support for them is still pretty recent and basic.

But yes, we should not only handle directives in the spec, but also consider what the implications of ""passing through"" any other directives that we don't explicitly support might be.
",wincent,2015-09-16 18:31:08
245,2015-09-08 15:28:33,"Incidentally, this is the use case I'm trying to support:

<S_CODE_TOKEN>

At the moment, I'm handing this by making the users connection return a promise with an empty array if there's no query. But ideally we wouldn't even be hitting that part of the graph at all
",AndrewIngram,2015-09-16 18:31:08
245,2015-09-11 01:00:28,"+1
",grydstedt,2015-09-16 18:31:08
245,2015-09-16 18:31:08,"This is fixed in master and will be available in the next release :-)
",josephsavona,2015-09-16 18:31:08
245,2015-09-29 15:30:12,"Did this make it into the latest release? I'm currently using `0.3.2` but it seems to be ignoring the include directives still.
",emilsjolander,2015-09-16 18:31:08
245,2015-09-29 16:08:45,"cc @josephsavona 
",kassens,2015-09-16 18:31:08
245,2015-10-05 14:20:09,"Any word on this? @josephsavona doesn't seem to be working for me either.
",aweary,2015-09-16 18:31:08
245,2015-10-09 23:06:10,"@josephsavona I can confirm it: the `@include` directive is apparently ignored
",guigrpa,2015-09-16 18:31:08
245,2015-10-09 23:58:29,"@guigrpa @Aweary Do you mean that the queries are sent to the server without directives that were specified in a container fragment? Or are the directives there but are being ignored (e.g. Relay gives you the data even though the directive says to skip, or vice-versa)?
",josephsavona,2015-09-16 18:31:08
245,2015-10-10 00:13:14,"From what I saw the babel plugin just returned an error for the fragment, which was then called.
",aweary,2015-09-16 18:31:08
245,2015-10-10 01:34:38,"@Aweary can you provide the fragment itself and the error message & stack (if present)?
",josephsavona,2015-09-16 18:31:08
245,2015-10-10 06:29:01,"Here's what I am seeing: this is the fragment:

<S_CODE_TOKEN>

The query that's being sent includes the `node` field without an `id` arg, so the GraphQL server returns an error: `""Field \""node\"" argument \""id\"" of type \""ID!\"" is required but not provided.""` The Relay client shows a warning (`Warning: fetchWithRetries: HTTP error, retrying.`) and then retries and retries...
",guigrpa,2015-09-16 18:31:08
245,2015-10-10 16:21:15,"@guigrpa I see what's happening - this is not about directives.

Relay requires that the `node(id: $id)` field be on the **root** - see the [Object Identification guide](http://facebook.github.io/relay/docs/graphql-object-identification.html#content). It appears that your schema nests this field inside a `Viewer` type, and this nesting is not supported by Relay. Containers should fetch data for any object of a type (in this case the fragment should probably be `project => Relay.QL`fragment on ProjectDetail { ... }``). See the [routes guide](http://facebook.github.io/relay/docs/guides-routes.html#content) for more information about this important distinction.

As for why it isn't working _now_, GraphQL is rejecting the query since `$projectId` is null. A better pattern would be to have separate fragments for `viewer` and `project` (which would use the `node` root query).
",josephsavona,2015-09-16 18:31:08
245,2015-10-10 16:39:40,"@josephsavona I should note that the error I was getting was due to using the `@include` directive in an inline fragment which I already noted here: https://github.com/facebook/relay/issues/443

If I use it on each field it seems to be working just fine :+1: 
",aweary,2015-09-16 18:31:08
245,2015-10-10 18:27:27,"Thanks everyone for confirming that directives themselves are working as-expected. I'll leave this issue closed.

@guigrpa - please feel free to ask follow-up questions about the `node` field and route/container distinction on [Stack Overflow](stackoverflow.com/questions/ask?tags=relayjs)
",josephsavona,2015-09-16 18:31:08
244,2015-09-05 21:53:01,"Not sure I'm phrasing this question right but I'm building a search interface where Relay keeps sending the query inappropriately to the `node` root instead of the `viewer`.

The relevant parts of my schema look like:

<S_CODE_TOKEN>

The first time I run a search query, the query looks like:

`query Router{viewer{id,..._11k0wzb}} fragment _11k0wzb on User{_search58fc16:search(first:30,query:”the query”){}}}`

But if I change the query  using `setVariables` (or `forceFetch`), instead of going to the viewer root, it now goes to node e.g:

`query Search{node(id:""VXNlcjox""){..._2h807t8}} fragment _2h807t8 on User{_search89ucld:search(first:30,query:”new query”){}}}`

As the node root type doesn't know how to resolve searches, it returns null.

I'm probably missing something obvious but how do I make search queries actually search every time?
",KyleAMathews,2015-09-05 23:24:44
244,2015-09-05 21:57:58,"And fwiw, I'm using react-router-relay.
",KyleAMathews,2015-09-05 23:24:44
244,2015-09-05 23:24:43,"The problem was in my `nodeDefinitions`. I wasn't loading the user id correctly or identifying the node object. Once I got those working everything worked properly :)
",KyleAMathews,2015-09-05 23:24:44
244,2015-09-05 23:25:35,"Clearly still figuring this Relay thing out but loving it so far. https://twitter.com/kylemathews/status/640289107122368513
",KyleAMathews,2015-09-05 23:24:44
244,2015-09-07 19:33:24,"@KyleAMathews Really happy to heard that! Thanks for filing issues and helping to make Relay better :-)
",josephsavona,2015-09-05 23:24:44
243,2015-09-05 21:28:18,"With react and react-relay bundled into app.js bundle react is complaining about a missing key attribute. For some reason the warning is omitted if react is loaded with a script tag. 
",l-urence,2015-09-08 18:09:14
243,2015-09-07 19:33:59,":+1: 
",josephsavona,2015-09-08 18:09:14
243,2015-09-08 16:53:00,"Thanks @l-urence!
",wincent,2015-09-08 18:09:14
243,2015-09-08 17:40:26,"> For some reason the warning is omitted if react is loaded with a script tag.

Perhaps you are using a minified build when you include React via the script tag. AFAIK, the key warning only gets issued when using a `__DEV__` build.

In any case, the key warning should be fixed. I've merged this internally with a minor tweak (to maintain alphabetical property ordering) and it should sync back out here shortly.

Thanks once again for the PR @l-urence!
",wincent,2015-09-08 18:09:14
243,2015-09-08 18:09:14,"@wincent yes the `__DEV__` build makes sense. I noticed a second deprecated warning with `React.render(/*....*/)` in the example. It seems that `React.render(/*...*/)` should be replaced with `ReactDOM.render(/*....*/)` in React v0.14.0.
",l-urence,2015-09-08 18:09:14
243,2015-09-08 18:18:56,"> It seems that `React.render(/*...*/)` should be replaced with `ReactDOM.render(/*....*/)` in React v0.14.0.

Yep! Want to submit a PR for that too? I'll make a separate issue in any case so that we don't forget.
",wincent,2015-09-08 18:09:14
242,2015-09-05 20:00:59,"The problem I faced with is that when I render a list of items (where item is a container), I can't set `key` value properly because actual data is not available during iteration - it only becomes available inside the container.

<S_CODE_TOKEN>

In this example `key={item.id}` doesn't do anything because item data is not resolved yet and `item.id` is `undefined`.

Currently I have to use `item.__dataID__`, but this feels like a hack, because `__dataID__` seems to be an implementation detail and may change some day. 

Can I rely on it or maybe there is a better way to do this? Couldn't find anything relevant in docs.
",vladar,2015-09-07 19:19:37
242,2015-09-06 07:53:56,"Can you paste the GraphQL fragment for the `ListComponent` container? This is likely a matter of having the parent ask for the `id` of each list element.

eg:

<S_CODE_TOKEN>
",josephsavona,2015-09-07 19:19:37
242,2015-09-06 08:15:50,"Whole container looks like this:

<S_CODE_TOKEN>

List is iterated by non-contanier intermediate component that simply receives `items` from parent as a prop.
",vladar,2015-09-07 19:19:37
242,2015-09-07 19:04:06,"Thanks for pasting - as I mentioned, you can add the `id` field so that the parent (thing iterating the list) has a value to use for `key`:

<S_CODE_TOKEN>
",josephsavona,2015-09-07 19:19:37
242,2015-09-07 19:05:26,"Also, note that `__underscore__` and `_underscore` properties should be considered private (not used by application code) and are subject to change.
",josephsavona,2015-09-07 19:19:37
242,2015-09-07 19:19:37,"Makes sense. Thanks!
",vladar,2015-09-07 19:19:37
242,2015-09-07 19:34:12,"Happy to help!
",josephsavona,2015-09-07 19:19:37
241,2015-09-05 19:00:02,"When working with Webpack hot reloading, it'd be great if when you change a query, it gets re-run. Currently I have to reload my browser.
",KyleAMathews,
241,2015-09-08 22:46:26,"cc @steveluscher :)
",yungsters,
241,2015-12-03 21:31:38,":100: please :)
",carlosepp,
241,2016-03-04 01:40:01,"+1

I am wondering also if Hot Module Replacement works together with Relay Containers. It does not work on my setup, however, I might do something wrong. I use Relay, React and React Router Relay. Is it possible to get it working? Thanks.
",ghost,
241,2016-03-04 01:42:30,"Have you had a look at this: https://github.com/doabit/react-relay-graphql-starter-kit ?
",nicerr,
241,2016-03-04 08:51:31,"Thank you for the answer.
`""preset"": ""react-hmre""` works.
Previously I tried:

<S_CODE_TOKEN>

and it was not working.
",ghost,
241,2016-12-22 16:47:51,"I can definitely see the value of this, although it's a bit tricky. In the new core, all graphql tagged templates are replaced with references to generated JS modules, which would likely be amenable to hot-reloading. However, the module that includes the query wouldn't necessarily update and know to re-issue the query. Definitely something to keep thinking about in the future once the new core is available.",josephsavona,
240,2015-09-05 04:14:01,"This PR introduces two new tools for prototyping Relay apps:
1. An instance of GraphiQL that runs against an in-memory schema
2. A code playground that lets you live edit a Relay app and its schema

These tools are intended primarily for use on the Relay homepage and in the next generation of the Relay tutorial (#6).
# Getting started with this PR

Install all the things.

<S_CODE_TOKEN>
# The GraphiQL tool
1. Visit http://localhost:8080/relay/prototyping/graphiql.html
   1. `HelloSchema` will be loaded; Make the following query:
      
      <S_CODE_TOKEN>
2. Add `?query=` to the end of the URL with your own URL encoded query text. The GraphiQL browser will load prefilled with that query text.
3. Add `?schema` to the end of the URL with your own URL encoded JavaScript schema source code. The GraphiQL browser will eval the supplied JavaScript code as it boots, and will configure GraphiQL to make queries against it.

![graphiql](https://cloud.githubusercontent.com/assets/13243/9697623/6cd79daa-5348-11e5-9fbf-2267139995b4.gif)
# The prototyping tool
1. Visit http://localhost:8080/relay/prototyping/playground.html
   1. `HelloSchema` and `HelloApp` will be loaded and executed; You can make changes to the code.
   2. Try pasting the following schema and app into the editors; https://gist.github.com/steveluscher/3abe6d6f598d70423f76
2. Add `?code=` to the end of the URL with your own URL encoded app source code. The playground will boot with your app code prefilled in the editor
3. Add `?schema` to the end of the URL with your own URL encoded JavaScript schema source code. The playground will eval the supplied JavaScript code as it boots, will configure the in-browser babel-relay-plugin to transform and validate `Relay.QL` calls against it, and will configure GraphiQL to make queries against it.

![playground](https://cloud.githubusercontent.com/assets/13243/9697624/757090ac-5348-11e5-8261-3bf7a10d41b0.gif)
",steveluscher,2015-09-08 23:10:49
240,2015-09-05 04:25:53,"cc/ @schrockn @dschafer @leebyron
",steveluscher,2015-09-08 23:10:49
240,2015-09-05 05:10:20,"Woot!
",wincent,2015-09-08 23:10:49
239,2015-09-05 00:23:43,"But does on io.js 3.2.0.

This error is thrown on older versions of node

<S_CODE_TOKEN>
",KyleAMathews,2015-09-05 01:27:44
239,2015-09-05 00:59:39,"#217 fixed this. Doesn't look like @yungsters got around to publishing the updated package with that.
",zpao,2015-09-05 01:27:44
239,2015-09-05 01:27:43,"Thanks for the reminder. [babel-relay-plugin@0.2.2](https://www.npmjs.com/package/babel-relay-plugin) has been published.
",yungsters,2015-09-05 01:27:44
239,2015-09-05 06:01:28,"Thanks!

On Fri, Sep 4, 2015 at 6:27 PM Timothy Yung notifications@github.com
wrote:

> Closed #239 https://github.com/facebook/relay/issues/239.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/239#event-401717263.
",KyleAMathews,2015-09-05 01:27:44
238,2015-09-04 22:43:34,"This is a Jest-provided extension, so not suitable for use outside the
test suite.

Test plan: Boot up Relay Starter Kit. See it load, and no errors about
inexistent `requireActual`.

CC: @yungsters 
",wincent,2015-09-05 00:20:55
237,2015-09-04 20:58:42,"We should rename `REQUIRED_CHILDREN` to be `EXTRA_FRAGMENT` or something that explains how it is merely supplementary fields that may be needed in order to correctly respond to the success of the mutation.

For example, if you're sending a mutation that creates a new account and you want to navigate immediately to that new account (e.g. using a URL with the new account's ID), the new account may not be part of the response if it is not currently rendered (i.e. it is not the intersection of what can change and what is cached on the client). In this case, you need to use this (tentatively-named) `EXTRA_FRAGMENT` configuration to add additional fields (like the new account's ID).

We should also revise the documentation to explain its use cases instead of simply saying, ""Avoid this."" Also, it is not currently documented on the website at all.
",yungsters,2016-02-08 22:59:31
237,2015-10-27 09:46:26,"Incidentally, this is exactly what I needed to know about for this: https://github.com/facebook/relay/issues/447 (http://stackoverflow.com/questions/33001632/patterns-for-transient-user-notifications-with-relay).
",AndrewIngram,2016-02-08 22:59:31
237,2015-11-10 19:07:54,"@steveluscher 's answer (http://stackoverflow.com/questions/32539189/how-to-get-the-id-of-a-new-object-from-a-mutation/32546415#32546415) explains how to use `REQUIRED_CHILDREN` for adding a new node and getting It's ID to be used in callback. However @wincent (http://stackoverflow.com/a/33367168/96725) states that It could also be used for deleting a node without requiring It's parent (where node doesn't know its parent etc.) Could you please provide an example for this use case too? I'm currently working on a mutation, where deleted node isn't aware of it's parents. 
",oguzbilgic,2016-02-08 22:59:31
237,2016-02-08 22:59:31,"I'm going to fold this into #538, which is about overhauling the mutations API. (It will be easier to manage with the various interrelated mutations issues in a single place.)
",wincent,2016-02-08 22:59:31
236,2015-09-03 22:48:16,"I am attempting use the relay-starter-kit to make a createWidgetMutation that looks like this:

<S_CODE_TOKEN>

When I use FIELDS_CHANGE as the mutation config, the widget object does not get passed back in the payload, but widgetId is passed back.  When I use REQUIRED_CHILDREN, the object does get passed back, but the documentation for REQUIRED_CHILDREN says to avoid using this type.  What should I use instead of REQUIRED_CHILDREN?

My mutation looks like this for REQUIRED_CHILDREN:

<S_CODE_TOKEN>

and the getConfigs looks like this for FIELDS_CHANGE:

<S_CODE_TOKEN>
",ashinohara,2015-09-05 01:28:45
236,2015-09-04 20:54:58,"Thanks for bringing this up. Indeed, you do need to use `CHILDREN_REQUIRED` because `widget` does not have a parent field (from my understanding) that the view could possibly have already fetched or rendered.

I spoke with @yuzhi and we came to the conclusion that:
- `CHILDREN_REQUIRED` should be renamed to something like `EXTRA_FRAGMENT`.
- We need to revise the code documentation (and add website documentation) for this and its valid use cases.

I hope this answers your question. I'll open a separate issue to rename and revise documentation.

---

Separately, I noticed you have `widget` and `widgetId`. Why not just fetch `widget { id }`?
",yungsters,2015-09-05 01:28:45
236,2015-09-04 20:58:53,"Filed #237.
",yungsters,2015-09-05 01:28:45
236,2015-09-04 21:04:32,"> Separately, I noticed you have widget and widgetId. Why not just fetch widget { id }?

@yungsters my guess is because global IDs are supposed to be opaque :smile_cat: Is there a current recommended method to retrieve the non-global ID of an entity/node other than adding an extra field?
",mhart,2015-09-05 01:28:45
236,2015-09-04 21:49:57,"@mhart No, but `widget { id }` should be the opaque global ID. If for whatever reason, you actually need the non-global ID, I would actually recommend making _that_ available via an extra field. Does that make sense?
",yungsters,2015-09-05 01:28:45
236,2015-09-04 21:58:37,"That's what I'm saying.
",mhart,2015-09-05 01:28:45
236,2015-09-04 21:59:40,"(ie, my guess is that @ashinohara added that field to get access to the ID of the node – because there's no other way to do it!)
",mhart,2015-09-05 01:28:45
236,2015-09-04 22:00:52,"I think it's just one aspect of Relay that's confusing – that the IDs on your objects will actually be transformed and no longer available to the client... unless you add an extra field.
",mhart,2015-09-05 01:28:45
236,2015-09-05 01:28:45,"Oooh, I see what you mean. Sorry for the confusion.

Anyway, I think the questions here are resolved? We can follow-up on #237.
",yungsters,2015-09-05 01:28:45
236,2015-09-09 15:31:54,"@yungsters Yes, we can consider this resolved.  The reason I was retrieving widgetId to begin with was to debug the behavior of REQUIRED_CHILDREN vs. FIELDS_CHANGE.
",ashinohara,2015-09-05 01:28:45
235,2015-09-03 21:10:50,"If you pass in params from the route using e.g.

<S_CODE_TOKEN>

then `prepareVariables` isn't called on the override parameters passed by the route (just `initialVariables`).

It seems like we should probably run the override parameters through too, so that everything going into the fragment query goes through `prepareVariables` first.
",devknoll,2015-09-04 03:58:08
235,2015-09-04 03:58:08,"Double checked the Relay source and debugged a little harder, and found out that `prepareVariables` is actually being called here, but some other strange thing is happening. I'll open a new issue when I discover it.
",devknoll,2015-09-04 03:58:08
235,2015-09-04 06:12:11,"I'm working on a related change that should address this.
2015年9月3日(木) 14:10 Gerald Monaco notifications@github.com:

> If you pass in params from the route using e.g.
> 
> viewer: () => Relay.QL`query { viewer }`
> 
> then prepareVariables on the container is called, but prevVariables is an
> empty object, rather than the params passed in from the route as would be
> expected.
> 
> It seems like maybe we should also run any override parameters through
> prepareVariables as well.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/235.
",josephsavona,2015-09-04 03:58:08
235,2015-11-11 05:48:40,"I do notice an odd thing here where the variables passed in from a wrapper seem to clobber `initialVariables`.
",taion,2015-09-04 03:58:08
234,2015-09-03 17:15:38,"Hello,
I have the following schema

<S_CODE_TOKEN>

the following fragment on a Component:

<S_CODE_TOKEN>

and the following fatQuery for the AddCustomerMutation:

<S_CODE_TOKEN>

The first fetch query is perfect

<S_CODE_TOKEN>

but the mutation query doesn't consider that Market implements Company and produce this query:

<S_CODE_TOKEN>

Am I doing something wrong?
",davide-ganito,2015-09-12 00:07:22
234,2015-09-03 17:52:03,"What does your `AddCustomerMutation` look like? And can you provide some more detail about what is wrong with the mutation query you pasted?
",yungsters,2015-09-12 00:07:22
234,2015-09-03 18:38:01,"The `AddCustomerMutation` add a new `Customer` to the `Firm` customer's list and return the modified Firm.
Every `Customer` has a `company` field of type `CompanyInterface`.
I have 3 kinds of company: `Marker`, `Supplier`, `Firm`.

In my Component I specify, with an inline fragment, which fields I want to fetch from  the `Market`:

<S_CODE_TOKEN>

but i have this mutation query:

<S_CODE_TOKEN>
",davide-ganito,2015-09-12 00:07:22
234,2015-09-03 19:52:12,"@yungsters This could be caused by tracked queries being flattened. These should be unflattened when the mutation is constructed (via `refragmentRelayQuery`) - not sure why that isn't taking effect here.
",josephsavona,2015-09-12 00:07:22
234,2015-09-03 22:18:28,"I have noticed that when calling the `buildMutationFragment` by `buildFragmentForField` the `mutatedFields` param has the node corresponding to `balanceProductMarket` recorded as `RelayQueryField` at the same level of the others `CompanyInterface` fields.

Inside the `refragmentRelayQuery`it is marked as 'RelayQueryFragment` instead.

This could be of any help?
Thx!
",davide-ganito,2015-09-12 00:07:22
234,2015-09-11 05:06:18,"Did b16c384 take care of this, @josephsavona, or is there more to do here?
",steveluscher,2015-09-12 00:07:22
234,2015-09-12 00:07:22,"@steveluscher yes, this has been resolved.
",josephsavona,2015-09-12 00:07:22
233,2015-09-03 16:28:32,"The motivating use case here is clearing the cache on logout. We already have an internal task for this (t6995165) but I'm creating this issue for external visibility. 

For now, the workaround is to do a full page refresh on logout. The long-term plan here is #559 - instead of resetting the store, applications will be create new instances of `RelayEnvironment` when necessary.
",wincent,2016-05-10 15:52:15
233,2015-09-08 20:50:10,"This will be useful for the prototyping tools (#240). Right now, it's possible to paint yourself into a corner where you have cached results for a given field/call combination, but you've changed the underlying resolve method in the schema tab.
",steveluscher,2016-05-10 15:52:15
233,2015-09-10 09:07:49,"Great, need this :)
",quazzie,2016-05-10 15:52:15
233,2015-09-10 11:24:54,"Things that need to be touched just from a quick peek at the code:
- In `RelayStoreData.js`: `_records`, `_queuedRecords` must be reset to `{}`, `_recordsStore` and `_queuedStore` must be reinitialized with the empty record-sets. `_cachedRecords` should stay as is, I assume. `_queryTracker` must be reinitialized. `RelayStoreGarbageCollector` should also be reinitialized if needed.
- In `RelayStore.js`: `queuedStore` can no longer be cached. 

The more interesting part: How should `RelayStoreData` announce this change to the rest of the system? Should Relay go back into a `fetching`-state after a call to `reset`?
",clentfort,2016-05-10 15:52:15
233,2015-09-10 15:42:41,"@clentfort Yeah, the tricky part isn't so much the resetting as it is deciding what to do if components are still mounted.
",josephsavona,2016-05-10 15:52:15
233,2015-09-10 16:13:32,"@josephsavona: If we change some stuff we could use the infrastructure that is available for the garbage collector and simply error-out if any data is still subscribed to.
We could change the `RelayStoreQueryResolver` to emit events when new subscriptions are created/disposed, this would enable us to count the number of active subscriptions and not allow `reset` if there are any.
This would even allow us to decouple some things (i.e. we could make `RelayStoreQueryResolver` unaware of the garbage collector)!
",clentfort,2016-05-10 15:52:15
233,2015-09-26 05:25:08,"Is there any work around for this that could be used on react-native? A page refresh isn't really an option there. :)
",skevy,2016-05-10 15:52:15
233,2015-09-26 18:42:12,"@skevy The workaround for now in React Native is the brute-force equivalent of a page refresh - tear down the current JS context and start a new one. 
",josephsavona,2016-05-10 15:52:15
233,2015-09-26 18:47:48,"Here's what needs to change to make this happen:
- Add `Relay.Store.reset()`: Implement an `invariant` check that there are no rendered Relay containers, no pending queries, and no mutations - only allow reset if this check passes.
- Find every module that calls `RelayStoreData.getDefaultInstance()` and holds onto a reference to the result. Instead of caching the result in module scope, always call `getDefaultInstance()` when the instance is about to be used.
- tests
- documentation

I started a rough version of this at https://github.com/josephsavona/relay/commit/7fdb68df465df8df32bfe63b57a9463fc70d6824 - feel free to use this as the basis of the above implementation. It implements the invariant check I mentioned above, but all the new methods need tests.
",josephsavona,2016-05-10 15:52:15
233,2015-09-26 18:50:21,"cc @skevy @devknoll @taion @fson anybody interested? ;-)
",josephsavona,2016-05-10 15:52:15
233,2015-09-27 16:00:20,"Would it be reasonable for the `RelayRootContainer` to manage the
`RelayStoreData` instance?

My concern is that only exposing this low-level `Relay.Store.reset()` API, we
are leaving all the complexity of orchestrating the reset (tearing down the
components, resetting, rendering the components again) to the developer.

This could become quite complex to do, especially if data is fetched both before
and after the reset. For example resetting data on login/logout:

<S_CODE_TOKEN>

If the data would be tied to the lifecycle of `RootContainer`, one could simply
use the `key` property in the RootContainer to force it to be re-mounted when
the login state changes. Are there any disadvantages to that approach?
",fson,2016-05-10 15:52:15
233,2015-09-27 18:34:36,"@fson 

I like the idea of not having that global singleton Relay store.

Ignoring implementation difficulties for now, there are a couple of practical API considerations.
- For things like modals and overlays and other dynamic content with data dependencies, when not associating a route to them, it's probably easiest to just set up a new `RootContainer` - this `RootContainer` ideally should share the same store as the top-level `RootContainer`; perhaps `RootContainer`s can export the store as context and children `RootContainer`s can try to use those first
  - The context approach requires things that use portals to use `unstable_renderSubtreeIntoContainer`, though... ideally anybody doing this is using something like `react-overlays` that deals with this for them
- Same as above, but taking the naive routing approach @cpojer covers at https://medium.com/@cpojer/relay-and-routing-36b5439bad9, instead of using `react-router-relay` or something equivalent
- Same as above, but for mocking `.defer` support with extra `RootContainer`s
- @skevy can comment on this, but I believe naive approaches with navigator on RN lead to multiple sibling `RootContainer`s that would not be able to share state with this approach, and that actually keeping everything under a single top-level `RootContainer` requires quite a lot of work
",taion,2016-05-10 15:52:15
233,2015-09-27 18:39:18,"@fson Interesting idea. For background, we've found lots of use cases for having multiple `<RelayRootContainer>` instances that share data within a single application. For example, on React Native each screen within a navigation stack typically has its own root container, and if you're integrating Relay into an existing app you might have root containers for each small UI component that you convert to use Relay. 

That said, you're absolutely right that a more complete solution is to integrate RelayRootContainer into the `reset()` lifecycle. Perhaps:
- Allow `reset()` to be called while queries are pending and simply abort them. 
- If a reset occurs, `RelayRootContainer` immediately resets itself as it if was just rendered: it reissues queries for the route and shows the `renderLoading` indicator.
- What to do about pending mutations is less clear.
",josephsavona,2016-05-10 15:52:15
233,2015-09-27 18:43:22,"> I like the idea of not having that global singleton Relay store.

@taion We agree. Earlier versions of Relay had _way_ more global state, and we've been steadily refactoring to move this state into instance objects. The eventual goal is that you could configure a `RelayContext`-style object and pass it into the root container, and all query fetching, mutations, etc would then go through that context. This would obviously also help for server rendering.
",josephsavona,2016-05-10 15:52:15
233,2015-09-27 18:48:59,"@josephsavona 

What about (optionally) separating that out from `Relay.RootContainer` entirely? The idea would be something like having a `RelayContext` component that exports the context via `getChildContext`.

Then each `Relay.RootContainer` could just try to get its relay context via its `getContext` (and optionally create a new one if there isn't one available already, to simplify normal use cases where you just have a single `RootContainer` up top).

This would work well for the standard RN use case, because you could just wrap the navigator in a `RelayContext` component and have the `RootContainer`s share data. You'd still have to deal with `unstable_renderSubtreeIntoContainer` with dynamic modals rendered into portals for the web, but that's a much more minor issue.

The benefit of doing this would be that it might be possible to avoid an explicit imperative `reset` method, and just re-mount the `RelayContext` component, as @fson said.
",taion,2016-05-10 15:52:15
233,2015-09-27 20:55:46,"@taion Yes! That's basically the long-term vision. However, there's still a bunch of work needed to get there. The approach I outlined for `Relay.Store.reset()` is more meant as a useful stopgap until we have true `RelayContext`s.
",josephsavona,2016-05-10 15:52:15
233,2015-11-13 17:47:06,"It would also be great to have the ability to invalidate certain entries of the cache. E.g. if we know that certain data can be updated from other sources or other users it would be great to be able to say, for example, after 10min invalidate this part of the cache and if the user re-visits that page requery the invalidated parts that are needed to display the current components.
",Globegitter,2016-05-10 15:52:15
233,2015-11-13 18:51:41,"This issue will largely be addressed by #558, which makes all Relay state contextual (implements the `RelayContext` idea discussed above).

@Globegitter - Yeah, that would be cool. The API could be `Relay.Store.invalidate(query)`, and the implementation would move any records or fields referenced by the query from the ""fresh"" data (`RelayStoreData#_records`) to ""stale"" data (`RelayStoreData#_cachedRecords`). This would cause Relay to refetch the information, without disrupting existing components that may be displaying the data.
",josephsavona,2016-05-10 15:52:15
233,2015-11-13 19:38:11,"Instead of (or perhaps in addition to) invalidating it'd be nice to be able
to set expiration times. If relay is a cache it'd be nice to have normal
cache APIs available :-)
On Fri, Nov 13, 2015 at 10:51 AM Joseph Savona notifications@github.com
wrote:

> This issue will largely be addressed by #558
> https://github.com/facebook/relay/issues/558, which makes all Relay
> state contextual (implements the RelayContext idea discussed above).
> 
> @Globegitter https://github.com/Globegitter - Yeah, that would be cool.
> The API could be Relay.Store.invalidate(query), and the implementation
> would move any records or fields referenced by the query from the ""fresh""
> data (RelayStoreData#_records) to ""stale"" data (
> RelayStoreData#_cachedRecords). This would cause Relay to refetch the
> information, without disrupting existing components that may be displaying
> the data.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/233#issuecomment-156521834.
",KyleAMathews,2016-05-10 15:52:15
233,2015-11-13 20:00:14,"@KyleAMathews Yup, we're looking into this. However, in early experiments storing the metadata required to record expiration times had a non-trivial impact on product performance.
",josephsavona,2016-05-10 15:52:15
233,2015-11-13 22:29:28,"@KyleAMathews @josephsavona yep being able to set expiration times would be great as well. But yeah getting performance right is of course important as well ;)
",Globegitter,2016-05-10 15:52:15
233,2015-11-13 22:55:30,"Could expiration exist outside of core? Seems like if we exposed `Relay.Store.invalidate` then it should be fairly trivial to build on top of that.

I think it'd be really nice to keep the core fairly simple and break out `relay-addons` similar to React if we need to :+1: 
",devknoll,2016-05-10 15:52:15
233,2015-11-13 23:24:01,"Yeah I can definitely see supporting an expire command being
complicated/slow. Also perhaps not advisable as given the multi-faceted
nature of intertwined nature of graphql queries, an expire command could be
pretty blunt. Some views might not want its data invalidated from
underneath it. An invalidate command keeps the control on the view layer
which seems the right trade off for engineers/product owners to think about
things. Basically its a poor man's subscription :-)

A related question, could you invalidate on a timer while the view is
active and have the data refreshed underneath it?
On Fri, Nov 13, 2015 at 4:55 PM Gerald Monaco notifications@github.com
wrote:

> Could expiration exist outside of core? Seems like if we exposed
> Relay.Store.invalidate then it should be fairly trivial to build on top
> of that.
> 
> I think it'd be really nice to keep the core fairly simple and break out
> relay-addons similar to React if we need to [image: :+1:]
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/233#issuecomment-156581999.
",KyleAMathews,2016-05-10 15:52:15
233,2015-11-13 23:28:01,"> A related question, could you invalidate on a timer while the view is active and have the data refreshed underneath it?

@KyleAMathews This is trivial to do today: use `forceFetch`. For example, to poll for updates on a query, use:

<S_CODE_TOKEN>
",josephsavona,2016-05-10 15:52:15
233,2015-11-13 23:31:33,"> Could expiration exist outside of core?

@devknoll Good question. It isn't possible today without hijacking some internal methods. It could be an interesting experiment to try building it and see what hooks you need. Again though, the main consideration is perf.
",josephsavona,2016-05-10 15:52:15
233,2015-11-13 23:35:32,":+1: I've been very happy with using `forceFetch` for this pattern. It's much nicer than Flux equivalents since it's tied to the specific view getting refreshed.
",taion,2016-05-10 15:52:15
233,2015-12-02 21:41:29,"@josephsavona I know that you guys have been working hard on making Relay state contextual, and it seems like you've made a lot of progress.

Is it in a place yet that would make implementing this easier? 

I still want to log out of my app :)
",skevy,2016-05-10 15:52:15
233,2015-12-04 05:00:48,"I'm curious about this too. What's left to be done here, and is there anywhere I can help?
",bmcmahen,2016-05-10 15:52:15
233,2015-12-04 05:48:16,"We've made a lot of progress on contextualizing Relay state, but we're not all the way there yet. This is something we're actively exploring and plan to implement when it's feasible. In general we encourage community contributions, but this particular change affects the core of Relay and it will be difficult for us to review or accept PRs.
",josephsavona,2016-05-10 15:52:15
233,2015-12-04 05:58:33,"But what about all of those PRs from @devknoll? :stuck_out_tongue_winking_eye: 
",taion,2016-05-10 15:52:15
233,2015-12-04 07:28:12,"@taion that contributed to the ""made a lot of progress"" part ;-)
",josephsavona,2016-05-10 15:52:15
233,2015-12-04 16:12:12,"@taion to clarify, the recent work around contextualizing state was focused on moving the remaining pieces of state into `RelayStoreData`. This was relatively straightforward in terms of outward API impact and performance. The remaining changes have a much more nuanced impact on both of these aspects - we'll try to do the work in the open as much as possible to get community feedback.
",josephsavona,2016-05-10 15:52:15
233,2015-12-07 15:03:43,"@josephsavona , you've written earlier:

> @skevy The workaround for now in React Native is the brute-force equivalent of a page refresh - tear down the current JS context and start a new one.

Do you have any examples or directions on how to do this?
",macrostart,2016-05-10 15:52:15
233,2015-12-07 15:40:10,"I'm not familiar enough with the current React Native APIs - this is a good question for stack overflow. 
",josephsavona,2016-05-10 15:52:15
233,2015-12-07 18:27:50,"@marcoreat I've posted a [stack overflow question](http://stackoverflow.com/questions/34094297/tearing-down-the-current-js-context-in-react-native) about this, but have yet to receive an answer.
",bmcmahen,2016-05-10 15:52:15
233,2015-12-13 22:30:42,"I think I've finally figured this out. All I did was create my own native module that calls the bridge reload function as found within the developer menu. You can find the dev menu code [here](https://github.com/facebook/react-native/blob/master/React/Modules/RCTDevMenu.m).
",bmcmahen,2016-05-10 15:52:15
233,2015-12-17 19:44:25,"@bmcmahen Can you explain how to call reload method. I tried creating a native module importing `RCTBridgeModule.h` and tried calling [self.bridge reload] but gives me compilation error.
",shahankit,2016-05-10 15:52:15
233,2015-12-17 21:17:05,"hey @shahankit  Have a look here: https://gist.github.com/nickhudkins/16a268f0957bdde92b07
",nickhudkins,2016-05-10 15:52:15
233,2015-12-18 03:52:19,"Yeah, what @nickhudkins has there is pretty much what I did. 
",bmcmahen,2016-05-10 15:52:15
233,2015-12-18 05:51:29,"Ohk sorry I had just imported RCTBridgeModule and not RCTBridge. Thanks for reply.
",shahankit,2016-05-10 15:52:15
233,2016-01-04 23:41:10,"@josephsavona hello

You mention a ""forceFetch"" method but I don't see it documented here is it normal? https://facebook.github.io/relay/docs/api-reference-relay-store.html
",slorber,2016-05-10 15:52:15
233,2016-01-05 00:54:49,"You can find it here: https://facebook.github.io/relay/docs/api-reference-relay-container.html#forcefetch
",steveluscher,2016-05-10 15:52:15
233,2016-01-06 21:30:42,"thanks I wasn't looking at the good page!
",slorber,2016-05-10 15:52:15
233,2016-01-20 14:03:18,"> @KyleAMathews This is trivial to do today: use forceFetch. For example, to poll for updates on a query, >use:
> 
> `const query = Relay.createQuery(Relay.QL`query { ... }`, {var: 'foo'});
>   Relay.Store.forceFetch({query}, readyState => { ... });`

Is there way to make it work as `fatQuery`, so I can refetch everything that is being tracked on some particular connection?

Reason why I just don't call forceFetch inside component that has full query is simply because I need to do it somewhere else.
Something like this:

<S_CODE_TOKEN>
",jardakotesovec,2016-05-10 15:52:15
233,2016-01-30 21:26:22,"Kind of a related question how you guys handle after user logging in orther than full page reloading? Some views need to be added or updated 
",tuananhtd,2016-05-10 15:52:15
233,2016-01-30 23:44:38,"@tuananhtd that's a great question for [Stack Overflow](http://stackoverflow.com/questions/ask?tags=relayjs) :-)
",josephsavona,2016-05-10 15:52:15
233,2016-03-31 00:53:12,"I don't see any reason for this to be open anymore. Based on the discussion in https://github.com/facebook/relay/pull/898#issuecomment-191816193 that concluded that this feature isn't needed now when the new environment api has landed (https://github.com/facebook/relay/issues/558).
",edvinerikson,2016-05-10 15:52:15
233,2016-03-31 00:59:11,"@edvinerikson The question of how to reset the Relay store still comes up occasionally, so having this issue is a useful way for users to find the current status. I'll update the description to make the plan more clear.
",josephsavona,2016-05-10 15:52:15
233,2016-05-01 08:06:34,"How do you emulate reset() using the Environment API?
",mattecapu,2016-05-10 15:52:15
233,2016-05-01 08:21:56,"This is how I'm doing it:

util.js

<S_CODE_TOKEN>

index.ios.js

<S_CODE_TOKEN>

use Relay.Renderer directly or create your own wrapper than passes `environment={currentRelay.store}`.  see [RelayRootContainer source](https://github.com/facebook/relay/blob/a1a4d99cb698e1eed63d28f8291ef114115d515d/src/container/RelayRootContainer.js)
",joenoon,2016-05-10 15:52:15
233,2016-05-10 15:52:15,"I'm closing as this is now possible in the release branch. Stores cannot be reset, instead you can create a new instance of `Relay.Environment` and pass that to `<Relay.Renderer environment={...} />`.
",josephsavona,2016-05-10 15:52:15
233,2016-05-18 20:11:06,"At the moment, using custom environments won't work with mutations.  The patch is in the repo at https://github.com/facebook/relay/commit/b44fcb2f69c69ae32a9a691949d65f11dfb09fa7 , but it hasn't been released, so you'll have to manually patch it in order to get custom environments to work with mutations.  Once you're patched, you can do `this.props.relay.commitUpdate(new MyMutation({ ...inputs }))`

If you don't use the patched version, Mutations won't find cached objects correctly given in the inputs

Further reading: https://github.com/facebook/relay/issues/1136
",BlooJeans,2016-05-10 15:52:15
233,2017-02-15 01:03:29,@joenoon Have you got an example app which uses this to reset the environment? ^ ,jamesone,2016-05-10 15:52:15
233,2017-02-15 03:39:03,"@jamesone actually what I do now is a bit different.  I haven't tried changing the entire environment out in months, but I remember having problems getting it to work right in my app.  Sounds like it might have been addressed since then.

Not sure if this will address your needs, but what I've been doing that seems to work pretty good for me is I have a simple mutation that by default has a fatQuery that will force the entire `viewer` to refresh.  So when the app returns from the background I just issue this mutation, and anything open in the app will refresh with current data:

<S_CODE_TOKEN>

On the server side its just a mutation with this:

<S_CODE_TOKEN>",joenoon,2016-05-10 15:52:15
233,2017-03-07 00:05:46,Why isn't there a command `Relay.reset()` which simply wipes **EVERYTHING** from the app?,jamesone,2016-05-10 15:52:15
233,2017-03-07 00:59:21,"Because it's much cleaner to just instantiate a `new Relay.Environment()` instead of trying to make sure you've cleaned everything on the global singleton `Relay.Store`.

And https://github.com/facebook/relay/issues/233#issuecomment-220143451 no longer applies.

So just do the right thing and make a new environment.",taion,2016-05-10 15:52:15
232,2015-09-03 14:46:18,"This has happened to me a couple times now — a mutation will silently fail if a key in a config is spelled incorrectly.

This works: 

<S_CODE_TOKEN>

But this will just silently cause half of the mutation query to go missing:

<S_CODE_TOKEN>

Same thing goes for the very British mistake of specifying `rangeBehaviours` instead of `rangeBehaviors` — a truly insidious problem!
",sgwilym,2016-09-03 00:10:05
232,2015-09-03 15:58:40,"Thanks for the report, @sgwilym. I think we could probably add some (`__DEV__`-only) runtime config shape validation, likely in `RelayMutationQuery.buildQuery` it we had to. But we do have Flow types for those shapes there already though. When your code has an error in it, does it pass Flow typecheck?
",wincent,2016-09-03 00:10:05
232,2015-09-03 16:00:30,"I'm not using Flow, so I wouldn’t have any idea 😁

Is it assumed that users of Relay are all using Flow typechecking…?
",sgwilym,2016-09-03 00:10:05
232,2015-09-03 17:05:43,"> Is it assumed that users of Relay are all using Flow typechecking…?

No. Relay itself uses Flow extensively, but the type annotations get stripped at build time, of course, and how you transform/preprocess/check your userland code is up to you.

Looking in <code>[RelayTypes](https://github.com/facebook/relay/blob/master/src/tools/RelayTypes.js)</code>, which is the list of types that we've exposed because we consider them useful to external users who may want to typecheck their code with Flow (and in addition to usefulness, these are the minimal set that we consider less likely to need to change over time), I see we're not exporting the config shapes anyway.

So on the balance, a runtime check is probably in order.

[**Edit:** fix Markdown fail.]
",wincent,2016-09-03 00:10:05
232,2015-12-16 10:03:53,"I also got hurt by fieldIDs vs fieldIds. Checking that a FIELDS_CHANGE config requires a fieldIDs would be nice. 
",angelf,2016-09-03 00:10:05
232,2016-04-15 13:29:29,"Me too. Spent hours today finding that I once wrote fieldIds and once fieldsIDs. Luckily the relay playground throws an error
",jkettmann,2016-09-03 00:10:05
232,2016-04-15 14:48:55,"@jkettmann I'm glad that Relay playground helped here. Note that the latest version of Relay validates mutation configs - @wincent even added hints that suggest the correct keyword if its misspelled ;-)
",josephsavona,2016-09-03 00:10:05
232,2016-04-15 14:52:37,"@josephsavona Thanks, great news. Good reason to update my dependencies ;-)
",jkettmann,2016-09-03 00:10:05
232,2016-09-03 00:10:05,"Closing this thread as it is pretty stale. We added a bunch of validation for mutation configs in [v0.8.0](https://github.com/facebook/relay/releases/tag/v0.8.0), and mutation configs as such are going away entirely in [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable), being replaced by a new API.

Thanks to @sgwilym and @jkettmann for chiming in.
",wincent,2016-09-03 00:10:05
231,2015-09-03 12:10:26,"I've got a mutation that creates a new Leaf in a schema kind of like this:

<S_CODE_TOKEN>

The fat query in my mutation looks like this:

<S_CODE_TOKEN>

and the configs look like this: 

<S_CODE_TOKEN>

Executing this query throws a warning in the console:

<S_CODE_TOKEN>

The mutation query received by the server doesn’t have the `trunk { id }` or `newTrunkLeafEdge` fields, so the GraphQL server doesn’t return them. I know Relay intersects the mutation query with a 'tracked query' — maybe something is going wrong there?
",sgwilym,2015-11-02 21:20:27
231,2015-09-03 14:31:56,"<s>This might not be anything to do with `RANGE_ADD`, as I'm now getting a similar problem in an extremely simply `FIELDS_CHANGE` mutation: Relay never queries for `updatedObject { updatedField }`.</s>

I found the cause of this (#232), but the problem in my first comment still stands. 
",sgwilym,2015-11-02 21:20:27
231,2015-09-03 15:35:57,"> I found the cause of this (#232), but the problem in my first comment still stands.

Thanks for investigating and reporting. If #232 fixes your problem, which remaining problem are you referring to in the first comment?
",yungsters,2015-11-02 21:20:27
231,2015-09-03 15:41:01,"The problem is that the mutation doesn’t include the fragments for `trunk` or `newTrunkLeafEdge`, so the returned payload is missing them to, meaning I get the error: 

`writeRelayUpdatePayload(): Expected response payload to include the newly created edge `newUserComicEdge` and its `node` field. Did you forget to update the `RANGE_ADD` mutation config?`

When the `RANGE_ADD` mutation config is present and correct.
",sgwilym,2015-11-02 21:20:27
231,2015-09-03 16:24:12,"Just to take this out of the abstract a bit, I've made a gist with the actual mutation, where I'm calling it from, the resulting query + variables, and the returned payload: https://gist.github.com/sgwilym/77191368cf1885a289e2
",sgwilym,2015-11-02 21:20:27
231,2015-09-03 16:37:40,"Thanks to the help of @devknoll, I found out this issue is because nowhere else in the app is `user { comics }` being queried, so the query from the mutation is being subtracted. I guess my only remaining confusion then is whether Relay should be throwing errors like the one posted above when it doesn't receive the corresponding fragment for a query that it itself subtracted.
",sgwilym,2015-11-02 21:20:27
231,2015-09-03 16:45:49,"@sgwilym Good point - the error could be more informative and check whether the field was in the query (which means its a server error to not include in the response) or if it isn't in the query (which means it was subtracted and the message could tell you the field isn't being queried anywhere).
",josephsavona,2015-11-02 21:20:27
231,2015-09-08 00:36:56,"I spent quite a while debugging the same thing, too. It was the same issue that @sgwilym was having; i.e., the app wasn't querying the relevant fields.  A more helpful warning message might be useful here.
",bmcmahen,2015-11-02 21:20:27
231,2015-09-16 04:53:17,"I'm running into this issue as well. In my case, I'm trying to use the returned data in the mutation's `onSuccess` (in particular, I'm routing to a page with the returned node's `id`), so I need the data to be returned, even if the data isn't being queried elsewhere in the app.

Is there a (good) way to force the fields to be put in the query, even if they're not used? I could do something silly like add a dummy `query viewer { books(first: 1) { edges { nodes { id } } } }` to ensure that the fields are used, but that doesn't seem great.
",xymostech,2015-11-02 21:20:27
231,2015-09-17 01:56:25,"I wrote about how to use the `REQUIRED_CHILDREN` config to force certain fields to be made available to your `onSuccess` handler, @xymostech: http://stackoverflow.com/questions/32539189/how-to-get-the-id-of-a-new-object-from-a-mutation

See also #237.
",steveluscher,2015-11-02 21:20:27
231,2015-09-17 02:04:30,"The task. Given a `RANGE_ADD` mutation config:

1) If Relay never queries for the new edge because they were eliminated during the intersection of the tracked and fat queries, explain that there's a client-side problem and how to fix it (namely to make sure the parent/connection is used – ie. tracked – in your app)
2) If the server never responds with the newly created edge despite having been queried for it, explain that the problem is on the server side.
",steveluscher,2015-11-02 21:20:27
231,2015-09-17 02:22:11,"@steveluscher Awesome! Looks like #237 also addresses the fact that `REQUIRED_CHILDREN` is undocumented so far. :+1: 
",xymostech,2015-11-02 21:20:27
231,2015-11-02 21:20:27,"merging into #542 
",josephsavona,2015-11-02 21:20:27
230,2015-09-03 07:48:47,"The `RelayNodeInterface.js` mock is currently requiring a module that does not exist: https://github.com/facebook/relay/blob/master/src/__forks__/interface/__mocks__/RelayNodeInterface.js#L18
",yungsters,2015-09-03 16:05:27
230,2015-09-03 07:49:35,"This will be fixed, but no one is awake right now to accept my internal diff. It will be fixed first thing in the morning. (Just wanted to file this task to admit awareness.)
",yungsters,2015-09-03 16:05:27
230,2015-09-03 14:59:26,"Just accepted your internal diff.
",wincent,2015-09-03 16:05:27
230,2015-09-03 16:05:26,"Closed by cf8ecd462ef37663d3d6814740552b7d524b63da.
",yungsters,2015-09-03 16:05:27
229,2015-09-03 06:32:28,,yungsters,2015-09-03 17:47:16
229,2015-09-03 17:47:16,"Merged via 669dffa2bf01b7cfd56935847f8698021febe599.
",yungsters,2015-09-03 17:47:16
228,2015-09-02 23:52:40,"Is there a way to get information regarding refetches when a fetch is triggered using `setVariables`. Neither `renderFetched`, `renderLoading`, or `onReadyStateChange` is called. The use case would be to show some loading spinner or similar when fetching more edges in a connection.
",grydstedt,2015-09-03 00:07:47
228,2015-09-03 00:05:29,"The props you mentioned are on `<RelayRootContainer>`. In this case, you're changing variables for a Container. The `this.props.relay.setVariables()` function accepts an [`onReadyStateChange` argument](http://facebook.github.io/relay/docs/api-reference-relay-container.html#setvariables) that you can use to determine when changed variables are available:

<S_CODE_TOKEN>
",josephsavona,2015-09-03 00:07:47
228,2015-09-03 00:07:47,"Awesome, thank you!
",grydstedt,2015-09-03 00:07:47
227,2015-09-02 23:20:20,"When I change the the values of a nested input object, a trigger to refetch doesn't happen?

<S_CODE_TOKEN>
",grydstedt,2015-09-03 00:39:44
227,2015-09-02 23:21:19,"Adding a `cache` variable seems to work.

<S_CODE_TOKEN>
",grydstedt,2015-09-03 00:39:44
227,2015-09-03 00:09:05,"The reason this doesn't work is that `filter.sort = 2` _mutates_ the value of a variables. Note that variables should be treated [as if they were immutable](http://facebook.github.io/relay/docs/api-reference-relay-container.html#variables):

> Never mutate this.props.relay.variables directly as it will not trigger data to be fetched properly. Treat this.props.relay.variables as if it were immutable, just like props.

<S_CODE_TOKEN>
",josephsavona,2015-09-03 00:39:44
227,2015-09-03 00:39:44,"Thank you for clarifying! I read that but didn't realize that setVariables needed to be passed a new immutable object as well, just directly modifying `relay.variables`
",grydstedt,2015-09-03 00:39:44
226,2015-09-02 20:36:18,,devknoll,2015-09-03 15:38:55
226,2015-09-02 21:25:12,"Thanks again, @devknoll. Will merge.
",wincent,2015-09-03 15:38:55
225,2015-09-02 17:20:03,,devknoll,2015-09-03 15:39:01
225,2015-09-02 19:03:10,"Thanks @devknoll! I'll get this merged.
",wincent,2015-09-03 15:39:01
224,2015-09-02 16:10:23,"This is lower friction than the SSH URL because it works even without a
GitHub account and a configured SSH key.

Note there is one other SSH URL in the repo that I did not change in
`website/README.md`. That one specifically deals with publishing the
website, for which you need push access, and SSH is going to be more
convenient for that.
",wincent,2015-09-02 16:44:28
223,2015-09-02 16:10:06,,josephsavona,2015-09-02 16:50:29
223,2015-09-02 16:17:19,"Oh no! What happened? :frowning: 
",devknoll,2015-09-02 16:50:29
223,2015-09-02 16:51:04,"We want to eventually turn this into an invariant, but there are currently callers that do something along the following lines:

<S_CODE_TOKEN>

The route is used by multiple components and some declare the `accountA` fragment while others declare the `accountB` fragment. @josephsavona and I have came up with a way to refactor the products to use two routes, but we need to unbreak them before landing the invariant.
",yungsters,2015-09-02 16:50:29
223,2015-09-02 16:59:04,"Thanks for the explanation :+1: 
",devknoll,2015-09-02 16:50:29
222,2015-09-02 15:51:14,,devknoll,2015-09-02 16:44:03
222,2015-09-02 16:16:02,"Thanks @devknoll! I'll get this merged.
",wincent,2015-09-02 16:44:03
221,2015-09-02 13:34:38,"The slack channel at https://reactiflux.slack.com/messages/relay/ gives me a message ""To start using Slack, you'll need to be invited by your team administrator."" How can I get an invitation?
",boosh,2015-09-02 16:18:55
221,2015-09-02 14:08:02,"Slack is a bit weird in this sense — it’s not really made for big public channels yet. However, you can be 'invited' in using the signup form on this page: http://www.reactiflux.com
",sgwilym,2015-09-02 16:18:55
221,2015-09-02 15:16:59,"Oh. It'd be helpful to note that in the `CONTRIBUTING.md` file in that case. Thanks.
",boosh,2015-09-02 16:18:55
220,2015-09-02 12:29:51,"I have a model where a child object can belong to `n` parent objects. If I delete a child object belonging to many parents, it doesn’t seem like there’s any way for Relay to update all the stored parent objects with this information:
- `FIELDS_CHANGE` only returns a single object’s information, which doesn't work for situations where parent objects have different edges in their child connections.
- `NODE_DELETE`, `RANGE_ADD`, and `RANGE_DELETE` only take a single `parentID` in their mutator configuration, meaning only one parent object will have the deleted object removed from its connections.

I suppose the same problems apply if you wanted to add an edge between a new object and many parents.

Haven’t tried this, but would something like this work?

<S_CODE_TOKEN>

But then again, you’d need to dynamically change the return fields of the payload, and changing the schema on the fly doesn’t sound like a very good idea 😅
",sgwilym,2016-09-03 01:05:04
220,2015-09-02 16:20:41,"A little follow-up from a discussion in the #ruby channel on GraphQL Slack:

It seems like there's some mixing of tree and graph going on here. If `NODE_DELETE` means that a node is being deleted from a graph, then shouldn't _all_ edges be deleted (and thus a `parentName`/`parentID` need not be specified)?

Would the current `NODE_DELETE` be better named `EDGE_DELETE` for its current behavior? Then perhaps a proper graph node deletion configuration be added too?
",devknoll,2016-09-03 01:05:04
220,2015-09-02 16:29:41,"Ideally, `NODE_DELETE` _would_ allow updating many parents. I think we do not have this capability because there has not been a good way to declare the fat query without making the mutation payload include the entire schema.

What we _do_ do currently is delete all edges and update all connections when a node is deleted. It happens here:

https://github.com/facebook/relay/blob/2a86be3e71cdc6511fa994e3de539f72070da1b4/src/traversal/writeRelayUpdatePayload.js#L145-L156
",yungsters,2016-09-03 01:05:04
220,2015-09-02 16:55:55,"Doh, thanks for the clarification @yungsters 

Two random, most likely bad ideas:
1. We could automatically issue `node` queries on any known parents after the mutation (possibly just a single plural selection?) Bad because there's an async gap between the mutation finishing and the result coming in.
2. Relay mutation spec could be updated to include an opt-in `parent(parentIDs: [ID!])` field on mutation payloads. This could be added automatically by Relay and would include a list of all local nodes with a connection containing an edge to the node in question. Bad because... not entirely sure what fields we would select while preventing overfetching?
",devknoll,2016-09-03 01:05:04
220,2015-09-02 20:42:15,"Actually, that _might_ just work. That's what the fat query is for. Imagine:

<S_CODE_TOKEN>

(where `nodes` is what I was previously calling `parent`)

Then Relay would automatically add the aforementioned `[ID!]` argument to the `nodes` field, containing the ID of every local node with a connection containing the edge being mutated.

There's a risk of overfetching here, since you might have two parents with the same `TypeA` but different requirements. Theoretically this could just be expanded and run on an ID by ID basis with a subtracted set, i.e.

<S_CODE_TOKEN>

Maybe I'm missing something else though...
",devknoll,2016-09-03 01:05:04
220,2015-09-03 18:43:48,"To make this less magical and prevent possible collisions with existing fields that would come with a spec change, you could define a `parentField` in the config, so Relay could automatically generate:

<S_CODE_TOKEN>

from a fat query:

<S_CODE_TOKEN>

Spec would just require that a mutation config using `parentField` have a payload with a field named `parentField` that accepts `id: ID!` argument and has a return value that covers the set of [TypeA, TypeB, ...] (i.e. a `Node` or union).

Relay could possibly also throw a warning or invariant if there is some parent ID that is not covered by a type fragment.
",devknoll,2016-09-03 01:05:04
220,2016-09-03 01:05:04,"With the [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable) release approaching, we'll have an entirely new mutation API that is more expressive/imperative. Significant further work on Relay 1 mutation API is unlikely, at least from Facebook, as we are turning our efforts towards getting Relay 2 out the door. So I am going to close this one and label it as ""relay 1"". Thank you to everybody who participated in the thread!
",wincent,2016-09-03 01:05:04
219,2015-09-02 09:02:27,"Fixes a little typo in an example of a `RANGE_ADD` mutation query.
",sgwilym,2015-09-02 16:59:46
219,2015-09-02 09:05:38,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-09-02 16:59:46
219,2015-09-02 10:03:10,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-09-02 16:59:46
219,2015-09-02 16:36:03,"Great! Thanks for this, @sgwilym. I'll get this merged in.
",wincent,2015-09-02 16:59:46
218,2015-09-02 08:33:16,"This would useful in a scenario where you have a mutation that persist a new record but you have enough information display that record immediately to the user.

<S_CODE_TOKEN>

Something like that?
",amccloud,2016-05-10 15:50:20
218,2015-09-03 00:18:41,"Knowing when the optimistic record has been created makes sense, and having access to the `clientMutationId` would presumably be used for checking for errors within the view that you're pushing?

This seems like a good use case, and shouldn't be too difficult to support. The main points to consider when implementing this (mostly in `RelayMutationTransaction`) are to avoid firing the callback multiple times ([`_handleOptimisticUpdate()`](https://github.com/facebook/relay/blob/master/src/mutation/RelayMutationTransaction.js#L290-L302) is called again if another mutation has to be rolled back)
",josephsavona,2016-05-10 15:50:20
218,2015-09-03 03:12:01,"@josephsavona I'm not actually sure about the `clientMutationId`. The idea is to have the next view query the store for the optimistic response (and eventually real response) by that client id.
",amccloud,2016-05-10 15:50:20
218,2015-09-03 16:48:34,"Yeah, you can't fetch records via a `clientMutationId`. The schema would need some field for identifying the newly created object that wouldn't change between the optimistic payload and the server response.
",josephsavona,2016-05-10 15:50:20
218,2015-09-04 21:25:14,"Adding an `onOptimistic` callback does indeed make sense. As discussed, you probably don't want to ever use `clientMutationId` for anything.

If this is a `RANGE_ADD` mutation, the new node will have an optimistically generated client-side `id` that you can use in the callback. Unfortunately, Relay should but does not currently support generating optimistic client-side IDs for other types of mutations (e.g. creating a new orphaned node).
",yungsters,2016-05-10 15:50:20
218,2015-09-24 16:34:28,"+1 on adding `onOptimistic`, seems very useful.
",grydstedt,2016-05-10 15:50:20
218,2016-05-10 15:50:20,"@amccloud @grydstedt does this still seem useful, or have you found workarounds? I'm going to close this due to inactivity, but feel free to comment or submit a PR to add this callback!
",josephsavona,2016-05-10 15:50:20
217,2015-09-02 04:31:30,"This ES6 features break the plugin if the code is not transpiled before publishing to NPM.
",SimonDegraeve,2015-09-03 16:12:31
217,2015-09-03 06:36:38,"@josephsavona Looks like this made it into the published 0.2.1. We may want to publish a 0.2.2 with this fix after it's merged.
",yungsters,2015-09-03 16:12:31
217,2015-09-03 06:38:58,"Indeed, version 0.2.1 is broken for me, that's why I made this pull request.
",SimonDegraeve,2015-09-03 16:12:31
217,2015-09-03 07:53:26,"I'll merge this and push a new package first thing in the morning.
",yungsters,2015-09-03 16:12:31
216,2015-09-02 00:57:03,,josephsavona,2015-09-02 01:11:04
215,2015-09-02 00:54:48,"As written, this sentence was a little hard to read:

> A system without globally unique IDs can usually create one

Create one what? An ID, or a system?

I've reworded this to make it clear that the system can create IDs by
switching to the plural, and I've added a missing hyphen in
""type-specific"".
",wincent,2015-09-02 01:34:30
215,2015-09-02 01:34:20,"Thanks!
",kassens,2015-09-02 01:34:30
214,2015-09-02 00:31:31,,josephsavona,2015-09-02 00:51:12
213,2015-09-01 23:58:54,,josephsavona,2015-09-02 00:32:58
212,2015-09-01 21:43:34,,kassens,2015-09-02 21:25:33
212,2015-09-02 19:11:40,"Moved the exposed internals now to a new module RelayInternals.js
",kassens,2015-09-02 21:25:33
211,2015-09-01 21:29:16,"The previous version of `printRelayQuery` incorrectly generated the `variables` for a query before processing children.

Fixes #203 
",josephsavona,2015-09-01 23:36:07
210,2015-09-01 20:50:41,"Upgrade dependency to latest plugin version
",josephsavona,2015-09-01 23:56:02
209,2015-09-01 19:49:20,,wincent,2015-09-01 20:34:48
208,2015-09-01 18:57:21,"When using an input object with a connection I'm getting `Variable ""$filter_0"" is not defined by operation “Route`. Do I need to define all used variables in a Route somehow?

Example:

<S_CODE_TOKEN>

This connection is defined as follows:

<S_CODE_TOKEN>

Thanks for your help.
",grydstedt,2015-09-01 20:24:42
208,2015-09-01 18:59:03,"Full query:

<S_CODE_TOKEN>
",grydstedt,2015-09-01 20:24:42
208,2015-09-01 20:24:42,"Closing. Duplicate of https://github.com/facebook/relay/issues/203
",grydstedt,2015-09-01 20:24:42
207,2015-09-01 18:47:44,"How do I access the `relay` prop to pass it as property in `renderLoading`?

<S_CODE_TOKEN>

In Component, `this.props.relay` is undefined and `relay` is not defined as a property in `Relay.RootContainer`.
",grydstedt,2015-09-02 23:13:39
207,2015-09-01 21:43:38,"The relay props are provided by the RelayContainer HoC, not passed in by RootContainer. If Component is a container, the props should be there.
",devknoll,2015-09-02 23:13:39
207,2015-09-01 22:53:22,"`renderLoading` is intended for showing a placeholder - loading spinner, etc - while the data for a Relay Container is being fetched. `this.props.relay` is only available inside of components wrapped with `Relay.createContainer()`. What are you trying to do?
",josephsavona,2015-09-02 23:13:39
206,2015-09-01 15:48:54,"It's kind of a bummer that folks need to write their own `babelRelayPlugin.js` for each project. I'm going to add support for a `.graphqlrc` file that points to a schema instead.

I heard there were plans for the plugin going forward. Can someone expand on those? Would this be something you'd like to see merged into the main plugin?
",devknoll,2015-11-02 20:57:21
206,2015-09-02 00:16:13,"Allowing configuration via a `.graphqlrc` seems reasonable tome.

I'm actually not familiar with these ""plans for the plugin going forward"". @josephsavona?
",yungsters,2015-11-02 20:57:21
206,2015-09-02 00:25:07,"> Going forward, we'll provide additional documentation and make it easier to work with this plugin. Expect more information soon.
> - https://facebook.github.io/relay/docs/guides-babel-plugin.html#content
",devknoll,2015-11-02 20:57:21
206,2015-09-02 04:05:19,"@devknoll The goal is to be able to create a plugin from a `schema.js` file directly, instead of having to convert from schema -> introspection JSON. The blocker for this is that the schema file ends up `require()`-ing a different instance of `graphql` than the plugin does, and `instanceof` checks fail in `GraphQLPrinter.js`. 
",josephsavona,2015-11-02 20:57:21
206,2015-09-02 06:24:42,"@josephsavona However that doesn't help people who have their GraphQL server in another repository, running on a different server or using one of the growing number of other server implementations than graphql-js.

I'm more interested in fetching the schema using the introspection query, since it can work in these scenarios as well. Generalizing it might have some difficulties, because of varying authentication methods people might use etc. But maybe we can still provide a script that, like DefaultNetworkLayer in Relay, works for simpler cases out of the box so people don't need to worry about this when they are just getting started?
",fson,2015-11-02 20:57:21
206,2015-09-03 19:55:33,"@devknoll I was just commenting about making integration with JS schemas easier, but I agree that we should also simplify things for products using alternate GraphQL implementations.
",josephsavona,2015-11-02 20:57:21
206,2015-09-07 04:56:59,"@fson i'm currently doing that.

<S_CODE_TOKEN>
",amccloud,2015-11-02 20:57:21
206,2015-09-07 19:08:55,"@amccloud nice. a generic version of this that pulled configuration from `.graphql` would be pretty cool. PRs welcome! ;-)
",josephsavona,2015-11-02 20:57:21
206,2015-09-07 20:06:02,"Yeah, this is basically the idea I was shooting for. A JSON-based `.graphqlrc` file that allowed you to specify a `schema`, that could either be a local path or a remote GraphQL endpoint.

It seems like it would also be very simple to make it handle a JS file exporting a graphql-js schema, and just have it run the same introspection query for that use case, right @josephsavona?

I'm still not entirely sure that it belongs in the main repo though... It would be nice for other tools if the `.graphqlrc` handling code was extracted into another module (but I suppose something like `require('babel-relay-plugin/graphqlrc')` wouldn't be terrible).
",devknoll,2015-11-02 20:57:21
206,2015-09-07 20:46:07,"> It seems like it would also be very simple to make it handle a JS file exporting a graphql-js schema, and just have it run the same introspection query

Yup, we tried this but as I mentioned: ""the schema file ends up require()-ing a different instance of graphql than the plugin does, and instanceof checks fail in GraphQLPrinter.js"".

> I'm still not entirely sure that it belongs in the main repo though

I agree, but at the same time `babel-relay-plugin` already is a separate npm module (and might ultimately end up in a separate repo if that makes sense). For a new user experience, it would great if you could `npm install --save-dev babel-relay-plugin`, set up your `.graphqlrc` file, and have queries compile w/o any more effort. Regardless, I definitely agree that a config file and handler for various forms of schemas would be great to have.
",josephsavona,2015-11-02 20:57:21
206,2015-09-08 09:15:40,"I think babel v6 will have a way to pass options in plugins, not 100% sure about the details though.

In any case, if you're adding support for a `.graphqlrc` file, please consider allowing it to be configured in your `package.json` as well. A lot of packages do this, as it lets you avoid having to keep adding files to your projects. (And having tons of config files that have to be kept in your project's root is annoying.)
",cesarandreu,2015-11-02 20:57:21
206,2015-09-08 17:12:50,"That's a good idea @cesarandreu. I wonder if there's an npm library that just takes care of all of this already...
",devknoll,2015-11-02 20:57:21
206,2015-09-29 12:44:35,"Using sync-request to fetch the schema from an endpoint inline within the babel plugin is a neat idea.  For working with the js-schema we could do a similar thing using spawn-sync (the underlying module that allows for synchronous requests).
",ForbesLindesay,2015-11-02 20:57:21
206,2015-11-02 20:57:21,"So far we haven't heard any feedback about defining a `babelRelayPlugin.js` file as being a significant source of friction for users of Relay. I'm going to close this out - we encourage users to create wrappers around `babel-relay-plugin` to make it easy to define plugins that use local or remote schemas, using the suggestions listed here.
",josephsavona,2015-11-02 20:57:21
206,2016-01-25 10:45:32,"I just came across this myself while setting up my dev environment to work with relay. While writing my own `baelRelayPlugin.js` isn't too onerous, I think it would be much nicer if I could do the following in my babel config (I am storing my babel config in `package.json`):

<S_CODE_TOKEN>
",F21,2015-11-02 20:57:21
206,2016-01-25 22:27:21,"Maybe unrelated but to use the `babel-relay-plugin` within the `.babelrc` you can use the [babel-plugin-loader](https://github.com/BerndWessels/babel-relay-plugin-loader) which lets you specify the location of the `schema.json` in your `package.json`.
Cheers
Bernd
",BerndWessels,2015-11-02 20:57:21
205,2015-09-01 13:26:10,"GraphQL make possible to post multiple mutation tasks in one request - is possible to do that with Relay? 
",jardakotesovec,2016-05-10 15:47:54
205,2015-09-01 13:34:04,"Looking at [`sendMutation`](https://github.com/facebook/relay/blob/master/src/network-layer/default/RelayDefaultNetworkLayer.js#L49-L67) in the default network layer I would say no, not possible. It only ever sends one mutation at a time.
Maybe if you explain why you want to send multiple mutations at once either a suggestion on how to improve your design can be made, or it can serve as an example for when multiple mutations are useful.
",clentfort,2016-05-10 15:47:54
205,2015-09-01 13:59:21,"Lets say that I have context menu where I can change many things about the image: its metadata, tags and groups.  I like the idea of having several simple mutations with clear purpose rather than having one `updateImage' mutation which does everything based on args.

I understand that I could trigger several mutations via separate requests, but its not optimal - it causes more data to send/receive and possibly more re-renders. 

GraphQL support that..  I would think that there was some flexibility reason for it.

But also I can imagine that things can get complicated to handle that..  and they are pretty complicated already..  so also depends on complexity that it would bring... 
",jardakotesovec,2016-05-10 15:47:54
205,2015-09-01 20:04:31,"Relay does not currently support sending multiple mutations for a single request, but there isn't any reason we can't add support for it.
",yungsters,2016-05-10 15:47:54
205,2016-05-10 15:47:54,"This is definitely a nice to have, but we haven't seen strong demand for this feature. I'm going to close it due to inactivity, but feel free to comment here and we can reopen.
",josephsavona,2016-05-10 15:47:54
205,2016-07-28 17:52:39,"We would love to see this too.
",jwaldrip,2016-05-10 15:47:54
205,2017-01-20 14:11:45,"so I cant do a mutation like this ?
<S_CODE_TOKEN>
That really hurts :(",kareem3d,2016-05-10 15:47:54
205,2017-01-20 23:24:11,"@kareem3d: What would `setViewer` do? (And specifically, what would it do that couldn't be achieved by adding another argument to the input to `createProduct`?) Independently of that, overriding the viewer is a delicate issue in Relay/GraphQL due to the pervasive use of caching (where switching viewers may involve large parts or all of the cache to be invalidated).",wincent,2016-05-10 15:47:54
205,2017-01-21 07:39:01,"@wincent `setViewer` will take a token as an input and save the viewer in the context(request). this is my first try tho with graphql and relay so I'm not sure what's the best approach to handle authentication but I have been working for the last 5 days only on the graphql side and I decided to wrap all my queries with a root type that will take the token as an argument and all other queries are nested. for mutations I had in mind that they execute sequentially so I created a setViewer mutation with a token input that a user must run before any other mutation. it was quite sad after I started working on relay that it doesnt support something like that.

Now I have moved to Authorization header and removed the root query and things actually becoming much easier to manage but it just doesnt feel like a graphql way of authentication I think...",kareem3d,2016-05-10 15:47:54
205,2017-01-24 00:16:51,"@kareem3d: It's conventional to pass auth tokens along at the network layer level, but outside the query itself (see [this guide](https://facebook.github.io/relay/docs/guides-network-layer.html) for an example). You can then pass information about the authorized user through to the field resolvers on the server [via context](https://github.com/graphql/graphql-js/blob/7064b9d27cc677b714098d3851ba1daa2fca1043/src/execution/execute.js#L119).",wincent,2016-05-10 15:47:54
204,2015-09-01 11:07:10,,moretti,2015-09-01 18:06:35
204,2015-09-01 18:06:34,"Thanks!
",yungsters,2015-09-01 18:06:35
203,2015-09-01 10:18:14,"I have been using nested argument like this in 0.1.1 and it worked fine.

<S_CODE_TOKEN>

Relay embedded these args like this:

<S_CODE_TOKEN>

With version Relay 0.2 it creates reference to variables like this:

<S_CODE_TOKEN>

I am pretty sure that I am passing variables object correctly to graphql function on server, but I get error from server

<S_CODE_TOKEN>

Any idea whats going on?    Name `$tagIds_0` is clearly generated somehow by relay - so not sure how I could reflect that on server.
",jardakotesovec,2015-09-11 00:06:53
203,2015-09-01 16:06:08,"@jardakotesovec are you using the default network layer? Can you paste the full query that is sent to the server, along with the full set of variables? The snippet you included starts at an `ImageStore` fragment.
",josephsavona,2015-09-11 00:06:53
203,2015-09-01 16:08:56,"Note that `tagIds_0` is being generated by Relay - passing input objects as variables allows the server to parse them appropriately (for example, it lets the server distinguish strings/enums). 
",josephsavona,2015-09-11 00:06:53
203,2015-09-01 19:07:16,"Here is the whole payload from 0.2.0

<S_CODE_TOKEN>

And server responds

<S_CODE_TOKEN>

On server we are using latest graphql 0.4.2. 
",jardakotesovec,2015-09-11 00:06:53
203,2015-09-01 19:10:46,"And yes, I am using default network layer. 
",jardakotesovec,2015-09-11 00:06:53
203,2015-09-01 19:14:37,"Seeing same thing, unclear where this variable should be defined.
",grydstedt,2015-09-11 00:06:53
203,2015-09-01 20:08:57,"@josephsavona Looks like the printed query is missing the type declaration for `$tagIds_0`.
",yungsters,2015-09-11 00:06:53
203,2015-09-01 23:37:38,"@jardakotesovec @grydstedt this is now fixed on master.
",josephsavona,2015-09-11 00:06:53
203,2015-09-04 09:05:06,"Just updated to relay 0.2.1 and graphql 0.4.3 and request changed

<S_CODE_TOKEN>

And I get error from server: 

<S_CODE_TOKEN>

Is that correct now and do I just need somehow add this object type? Thanks!
",jardakotesovec,2015-09-11 00:06:53
203,2015-09-08 09:19:38,"I can't reopen this issue..  should I open new one? Issue is still the same..  
",jardakotesovec,2015-09-11 00:06:53
203,2015-09-10 10:40:12,"@josephsavona ping :-)
",jardakotesovec,2015-09-11 00:06:53
203,2015-09-10 15:46:34,"@jardakotesovec My bad, I didn't realize you couldn't reopen. Do you get this issue if you're running on master (for both `react-relay` and `babel-relay-plugin`)?
",josephsavona,2015-09-11 00:06:53
203,2015-09-10 17:21:29,"Thanks @josephsavona . You were right - `babel-relay-plugin` was behind, now the type is almost correct :-).  At the moment I am using relay 0.2.1 and babel-relay-plugin 0.2.2.

It still does not handle correctly the non null type situation, my definitions is:

<S_CODE_TOKEN>

Therefore in request should be `relationType!`, which is not. Is that something that might be fixed already in master(s)?

Error I get: 

<S_CODE_TOKEN>

Here is the request example:

<S_CODE_TOKEN>
",jardakotesovec,2015-09-11 00:06:53
203,2015-09-10 22:34:41,"@jardakotesovec this is fixed in the PR - the printed type now accounts for arbitrarily nested lists/non-null annotations so that Relay will print `$relationType_1:relationType!` in your example. Working on getting this landed.
",josephsavona,2015-09-11 00:06:53
203,2015-09-11 00:06:51,"@jardakotesovec should be fixed on master now - let me know if this is still a problem!
",josephsavona,2015-09-11 00:06:53
202,2015-09-01 08:23:13,"As @zpao suggested (reference #58) here is the new PR with the rules from [facebook/fbjs#49](https://github.com/facebook/fbjs/pull/49).

I'll still need some guidance on what should be Relay specific.

At the moment with the current fbjs rules there is a lot of errors on [no-undef](http://eslint.org/docs/rules/no-undef.html) (example: $FlowIssue, $FixMe, $Enum and also when defining Flow types, this is related to [babel-eslint/known-issues](https://github.com/babel/babel-eslint#known-issues) - [babel-eslint#130](https://github.com/babel/babel-eslint/issues/130) and [babel-eslint#132](https://github.com/babel/babel-eslint/issues/132))

@josephsavona @zpao what are your thoughts?
",knowbody,2015-09-09 02:00:31
202,2015-09-01 17:45:55,"Here are the ""undefined"" identifiers:
- `$Enum`
- `$FixMe`
- `$FlowFixMe`
- `$FlowIssue`
- `Iterator`
- `IteratorResult`
- `ReactClass`
- `ReactElement`

I think we should just define these as globals in `.eslintrc` for now.
",yungsters,2015-09-09 02:00:31
202,2015-09-01 17:47:03,"Yea, you can define them here for now. They should make their way back to fbjs (and there are probably other ones that we should just copy over from flow). We have them defined internally, I just went for the minimal sync.
",zpao,2015-09-09 02:00:31
202,2015-09-01 23:23:35,"@zpao should be good
",knowbody,2015-09-09 02:00:31
202,2015-09-04 00:02:37,"@yungsters done, the tests are failing but not sure why, haven't done any changes to `src/`
",knowbody,2015-09-09 02:00:31
202,2015-09-05 00:30:21,":thumbsup: thanks! We'll go through the land internally and merge out process, should be all wrapped up soon.
",zpao,2015-09-09 02:00:31
201,2015-09-01 03:18:01,"Fixes #199 by using the parent Relay package instead of installing 0.2.0 from npm.
",devknoll,2015-09-01 17:47:24
201,2015-09-01 05:11:52,"Thanks!
",yungsters,2015-09-01 17:47:24
201,2015-09-01 16:57:44,"@yungsters Let me know if this is the approach we want to take here. I could also see value in having the examples pointing to a released package.
",devknoll,2015-09-01 17:47:24
201,2015-09-01 16:59:49,"This is good. I would've merged it already but one of our tools for importing pull requests is a little bonkers right now. Will try to fix it today.
",yungsters,2015-09-01 17:47:24
201,2015-09-01 17:47:25,"Thanks for fixing this!
",yungsters,2015-09-01 17:47:24
200,2015-09-01 02:22:05,"The examples are missing the fragment queries in their home routes
",drabinowitz,2015-09-01 17:48:12
200,2015-09-01 02:57:19,"This is intentional, see #115 
",devknoll,2015-09-01 17:48:12
200,2015-09-01 03:05:35,"Thanks for the quick update my bad. I looked for an issue on the subject
but I must have missed that one.
On Aug 31, 2015 10:57 PM, ""Gerald Monaco"" notifications@github.com wrote:

> This is intentional, see #115 https://github.com/facebook/relay/pull/115
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/pull/200#issuecomment-136560146.
",drabinowitz,2015-09-01 17:48:12
199,2015-09-01 02:21:28,"Steps to reproduce:
1. Clone latest `master` (HEAD currently: 618d09de30cc13f2183dd93ce59949d07ca734a3)
2. npm cache clean
3. cd examples/todo
4. npm install
5. npm start
6. Load localhost:3000 in the browser (see stack trace below):

`
Uncaught TypeError: Cannot read property 'todos' of nullrender @ app.js:5464g._renderValidatedComponentWithoutOwnerOrContext @ react.min.js:13g._renderValidatedComponent @ react.min.js:13g.mountComponent @ react.min.js:13a.mountComponent @ react.min.js:14g.mountComponent @ react.min.js:13a.mountComponent @ react.min.js:14g._updateRenderedComponent @ react.min.js:13g._performComponentUpdate @ react.min.js:13g.updateComponent @ react.min.js:13g.receiveComponent @ react.min.js:13a.receiveComponent @ react.min.js:14g._updateRenderedComponent @ react.min.js:13g._performComponentUpdate @ react.min.js:13g.updateComponent @ react.min.js:13g.performUpdateIfNecessary @ react.min.js:13a.performUpdateIfNecessary @ react.min.js:14u @ react.min.js:15o.perform @ react.min.js:15o.perform @ react.min.js:15v.perform @ react.min.js:15D @ react.min.js:15o.closeAll @ react.min.js:15o.perform @ react.min.js:15d.batchedUpdates @ react.min.js:14s @ react.min.js:15r @ react.min.js:14c.enqueueSetState @ react.min.js:14r.setState @ react.min.js:13onReadyStateChange @ relay.js:15655(anonymous function) @ relay.js:9384tryCallOne @ relay.js:3440(anonymous function) @ relay.js:3506flush @ relay.js:9047
`
",ndaversa,2015-09-01 17:47:24
198,2015-09-01 01:28:35,"We import `babel-core` here to get the `parseTemplate()` function. `babel-core` doesn't import well in-browser, so I've inlined `parseTemplate()` here.

This will make it possible to run the babel-plugin in-browser.
",steveluscher,2015-09-01 20:11:51
197,2015-08-31 23:43:39,,josephsavona,2015-09-01 01:43:12
196,2015-08-31 17:43:40,"I haven't published these yet but probably will soon. This just ensures we're using the newer versions where we're splitting the scripts part out of `fbjs` into its own package.

Check with me before you merge. I'm planning on getting 1 more thing into fbjs-scripts (and then test in React as well) before publishing.
",zpao,2015-09-01 22:30:27
195,2015-08-31 17:24:50,"subj
",gyzerok,2015-09-21 23:44:09
195,2015-09-01 20:07:18,"Can you elaborate on what you think we can adopt from the React Native release process?
",yungsters,2015-09-21 23:44:09
195,2015-09-02 07:20:18,"@yungsters I'm talking about their every two weeks stable release. It seems like with this in mind they are able to move forward faster than other FB projects. Another good example is iojs.
",gyzerok,2015-09-21 23:44:09
195,2015-09-03 21:31:22,"@gyzerok: React Native is a bit special in a sense that it has a gigantic API surface, so doing feature releases would be very hard as many individuals need to figure out when is a good time to ship their feature. React and Relay are different as they have a very small API surface. So it is manageable to proper releases and for each of them have a much higher quality upgrade path, release notes...
",vjeux,2015-09-21 23:44:09
195,2015-09-21 23:44:09,"We're currently in a pretty early phase and plan on releasing the latest version to npm every Friday. We'll revisit the release schedule when we see this not working out.
",kassens,2015-09-21 23:44:09
194,2015-08-31 10:05:42,"Any reason RootContainer is opaque when it comes to props? I'm trying to configure react-native's Navigator component to work with relay. I've gotten it to successfully work, but any components rendered into RootContainer do not have access to the navigator prop.
#### Navigator.renderScene

<S_CODE_TOKEN>
#### Example route

<S_CODE_TOKEN>
",amccloud,2015-08-31 17:09:51
194,2015-08-31 16:34:37,"@amccloud This is intentional - `Relay.RootContainer` does not pass through props. However, you can customize the props passed to the component via the [`renderFetched()` prop](https://facebook.github.io/relay/docs/guides-root-container.html#renderfetched). In this example, you might do:

<S_CODE_TOKEN>
",josephsavona,2015-08-31 17:09:51
194,2015-08-31 17:09:51,"I see, thanks!
",amccloud,2015-08-31 17:09:51
194,2016-08-23 20:54:43,"<S_CODE_TOKEN>

worked for me to pass between scenes using `react-native-router-flux`
",ssomnoremac,2015-08-31 17:09:51
193,2015-08-31 02:19:39,"I would like to access variables in my fragments outside of the GraphQL fragments (specifically I would like to use a different fragment depending on the variables).  However, when I took a look at the passed in variables they are GraphQLCallVariables without an immediately apparent way for me to access their values.  I was wondering if Relay exposes a public method to get the values from these variables:

<S_CODE_TOKEN>
",drabinowitz,2015-08-31 03:33:49
193,2015-08-31 19:51:32,"The `variables` is intentionally opaque. In fact, the function `variables => ...` is only ever executed once and memoized for subsequent access. This allows structural comparison of fragments without having to traverse the entire query tree.
",yungsters,2015-08-31 03:33:49
193,2015-08-31 19:54:28,"yup realized that after opening the ticket sorry about that, thanks for the response!
",drabinowitz,2015-08-31 03:33:49
192,2015-08-30 17:23:11,"The mutations ""complete example"" on http://facebook.github.io/relay/docs/guides-mutations.html doesn't mention routes. Please update the docs to include sample routes and how to render the `LikeButton` component, or at the very least document that a route is still required.
",boosh,2015-09-17 01:48:01
192,2015-08-31 09:10:05,"As additional feedback I'm really struggling with getting any mutations working. More thorough, complete examples of mutations in the docs would be very helpful.

**Update**: OK I've finally got a `create item` mutation sort of working but it's taken a lot longer than I'd have liked. 

Examples of common mutations (CRUD) would be very helpful.
",boosh,2015-09-17 01:48:01
192,2015-08-31 16:29:36,"@boosh Did you look at the guides for Routes and Containers? Note that there are complete working examples of mutations in the [TodoMVC Example App](https://github.com/facebook/relay/tree/master/examples/todo/js/mutations).
",josephsavona,2015-09-17 01:48:01
192,2015-09-01 19:03:54,"Yes I read the guide but it wasn't obvious to me that the Routes and Containers also related to Mutations. I read the mutation docs only when I needed it. A link to the todomvc app would be helpful too.
",boosh,2015-09-17 01:48:01
192,2015-09-04 18:47:44,"@boosh Can you elaborate on what kind of documentation you think would be helpful? I'm not sure what we need to call out regarding routes when explaining mutations.
",yungsters,2015-09-17 01:48:01
192,2015-09-06 08:48:09,"I guess it's more to restructure the docs a little bit to make each page more standalone. I.e. the mutations docs shouldn't assume that people have previously read the container and route docs in that session or can remember everything about them.

There's potentially a lot of new tech here - relay, react, relay server, graphql, etc, etc. and it can be a bit overwhelming to try to understand it all in one go. So I think it's pretty natural to develop in iterations.

I've been developing my app by getting reads working (so I built a relay server and read the docs on relay containers & routes). I set up a couple of pages using mocked data. Then when I went back to add in support for mutations I was a bit confused as to how the pieces fitted together. I knew that containers needed routes, but I didn't realise mutations did since I had this slightly disjointed dev process. 

So just a short summary on the the mutations page saying that mutations also require routes would have helped, as would a complete example of say, creating a component that can trigger a mutation, and code to render it (i.e. so it's obvious it needs a route). That way, the docs would be a bit more standalone as people dip in and out while they develop.
",boosh,2015-09-17 01:48:01
192,2015-09-07 19:10:26,"@boosh The sequence you describe makes sense - get reads working, then try mutations. I'm curious how you got reads working without routes though?
",josephsavona,2015-09-17 01:48:01
192,2015-09-08 08:20:27,"I did use routes for reads, but then I just didn't realise that I also needed them for mutations. As I say, I think the way to make that clearer is for the pages to be a bit more standalone - i.e. extend the example mutations to include routes and render calls. That would also help to show how to pass parameters to the routes/mutations, etc. 

Probably what made me think I didn't need routes was the heading on the mutations page ""A complete example"". It's not complete since it doesn't include routing and a render call. These are just the misinterpretations you make when you're in a hurry I guess, so it'd be handy to make the examples more explicitly complete.
",boosh,2015-09-17 01:48:01
192,2015-09-08 17:58:44,"@boosh Thanks for explaining your workflow. What you're suggesting makes a lot of sense. At the bare minimum, we could link back to previous guides with a short contextual blurb connecting the two guides.

But one part I am still unclear about (and maybe I'm missing something) is what you need to know about routes in order to build and send a mutation. It is necessary to construct the mutation fragments (and optionally if you're using `prepareVariables`), but otherwise the fact that routes are necessary should be pretty transparent. Have you found somewhere we are unexpectedly leaking routing concepts into mutations?
",yungsters,2015-09-17 01:48:01
192,2015-09-12 12:10:26,"OK so I've had 2 problems with this:
1. The first is that using a `viewer` as an outer object is a very common pattern, but the docs don't show how to use this. The docs all pass parameters to the outermost route, but in fact, for my queries it's my subqueries I need to parameterise since the `viewer` is just a container to work around #112.
2. In the example at https://facebook.github.io/relay/docs/guides-mutations.html, the mutation has a 'story' fragment that returns the ID. It took me ages to realise that I still needed to call `MyMutation.getFragment('story')` even if the component I was calling it from already required all of the same data (e.g. `story.id` in this case). It seemed like that was unnecessary, but because of how things should be standalone components it is necessary. This was just my misunderstanding from being new to react & relay.
",boosh,2015-09-17 01:48:01
192,2015-09-17 01:48:01,"If I understand correctly, the biggest problem that you encountered was that Relay offered no warning for failing to compose a mutation's fragment(s) all the way down to the root of your application. We have no sensible way of presenting a warning, right now, since all fragments are optional.

We do, however, have an idea to add the notion of required or optional fragments. If we introduce this system, and eventually make all fragments required-by-default, we'll be able to warn when there's a missing link in the chain. This might look something like this:

<S_CODE_TOKEN>

This should offer a more rigorous solution than documentation alone, so we should head for that. Tracked in #333.
",steveluscher,2015-09-17 01:48:01
191,2015-08-30 09:01:07,"The IDs of some of my objects are significant. I need to make calls to an external calendar service passing the numeric ID of my Entry object as a parameter.

At the moment I'm base64 decoding the IDs from the server, and extracting the second element after splitting on colons to retrieve the actual, server-side ID of the object. I'm then creating a new component using the props for an Entry, but replacing the base64 encoded ID with this actual numeric one. After reading https://facebook.github.io/relay/docs/graphql-object-identification.html#content I guess I shouldn't do that. 

So what's the recommended way of storing the actual server ID on a returned item? 
",boosh,2015-08-30 17:25:10
191,2015-08-30 09:22:19,"@boosh The `id` field is required to be globally unique and base64 encoding is a way to signal the client that it should treat it as an opaque string, even if you encode more information in it on the server. Decoding it on the client breaks this encapsulation.

Maybe you could simply add another field in your Entry type (e.g. `entryId`) that returns the numeric ID you can use to make calls to the external service?
",fson,2015-08-30 17:25:10
191,2015-08-30 09:30:37,"@fson anyway to name relay's globally unique id `gid` and leave id as is?
",amccloud,2015-08-30 17:25:10
191,2015-08-30 09:43:40,"There's already a `__dataID__` attribute that contains the base64 encoded ID. I was assuming that relay was using that for caching, etc. Does it actually use the `id` field instead?
",boosh,2015-08-30 17:25:10
191,2015-08-30 09:54:12,"@amccloud I don't think so. The `Node` interface has one field `id` and Relay expects it to be the unique ID that it can use to refetch the object using the `node(id)` root field. Do you have some scenario where just using some other field for the non-unique ID wouldn't work? If that's the case maybe you can make a wrapper for your component that renames the props passed to it?

@boosh As far as I know the `__dataID__` property is used to store the ID in the internal store of Relay. The public API Relay expects from the server is unique ID in the `id` field as defined in the [Object Identification spec](https://facebook.github.io/relay/docs/graphql-object-identification.html).

Also note that base64 encoding the ID is not mandatory. The only requirement for the `id` is that it's globally unique. But if your IDs are only unique within a single type, base64 encoding the type and that ID just happens to be a simple way to make them globally unique.
",fson,2015-08-30 17:25:10
191,2015-08-30 10:00:03,"Hmm. I _could_ add an extra field on the server, and I guess I'll have to in the short term if my fiddling with the `id` is a Bad Thing. But it introduces a mismatch between the client and server model, and is something that could be easily confused and go wrong. 

I expect this would be quite a common scenario so it'd be nice if the framework handled it natively instead of having to send a duplicate field for each type.

I guess I could always add a trait to extend my types with that will automatically add this duplicate ID for me, so it might not be too much of a burden...
",boosh,2015-08-30 17:25:10
191,2015-08-30 17:25:10,"I'll just return an extra ID instead of fiddling with the `id` field.
",boosh,2015-08-30 17:25:10
191,2015-08-30 17:32:33,"@fson you're correct that `__dataID__` is for the internal ID of the record and should not be accessed by application code (following the usual convention that anything prefixed with an underscore is ""private"").

@boosh this issue was brought up and discussed in #75 - see there for why we haven't added support _yet_. For now, the solution of adding an extra field seems best.

Longer term, we would like to support type-specific IDs (that could then be transparent values), but this is not high priority for the core team. We'll file a public issue to document the changes required to make this work - it would be a great area to have some input from the community!
",josephsavona,2015-08-30 17:25:10
191,2015-08-30 17:33:05,"also, @fson, thanks for answering this!
",josephsavona,2015-08-30 17:25:10
190,2015-08-30 04:49:57,"Partially fixes #182 and another small issue inconsistency I found. This doesn't fix nested anchors yet.
",devknoll,2015-09-01 18:04:46
190,2015-08-31 16:27:17,"@steveluscher For the separate problem of duplicate/nested anchors, I'm currently thinking of just modifying https://github.com/facebook/relay/blob/master/website/core/Header.js to keep the slug in the context and nesting them on render.

Sound good?
",devknoll,2015-09-01 18:04:46
190,2015-09-01 01:30:47,":+1: 
",steveluscher,2015-09-01 18:04:46
190,2015-09-01 06:16:38,"Went a slightly different direction with this. I noticed that the anchor links break down at H4, everything above that appears to be unique per page. So this will start generating nested anchors at H4. The benefit of this is that all of the existing anchors (except those that were duplicated) will continue to work.

WTB tests or anchor testing software :wink: 

cc @steveluscher
",devknoll,2015-09-01 18:04:46
189,2015-08-29 00:52:03,,cpojer,2015-08-29 00:58:12
189,2015-08-29 10:38:27,"Just out of curiosity: What is the advantage of doing this?
",clentfort,2015-08-29 00:58:12
189,2015-08-29 15:29:10,"@clentfort: consistency with other, non-test modules, which all use top-level requires.

We can do this now thanks to an ""inline requires"" transform, which means that things like `resetModuleRegistry` still work.
",wincent,2015-08-29 00:58:12
189,2015-08-29 16:28:46,"If anyone else is curious about the ""inline requires"" transform, it's defined [here](https://github.com/facebook/fbjs/blob/41cd335d5afb17eb7b188f3ecba76ee595ad92f5/scripts/babel/inline-requires.js).

Looks like it transforms code like this:

<S_CODE_TOKEN>

to this:

<S_CODE_TOKEN>
",fson,2015-08-29 00:58:12
189,2015-08-30 22:40:53,"From the internal document I shared about this change:

### Pros
- Modules work the same way as in regular JS files.
- no more `var A`, `A = require('A')`; making it easier to add modules to tests. This will also make it much easier for automated tooling (codemods) to modify and understand require's – because they are static instead of dynamic.
- If the test doesn't reset the module registry (because the tested module doesn't have internal state), this is just the much nicer and friendlier way to do things. Many modules actually already do it this way – if they add module internal state, they'll have to rewrite the require-calls to be in beforeEach.
- In a perfect future, when a full test run at FB takes only 10 seconds to complete and our mocking is 10x faster, we can get rid of jest.resetModuleFactory and automatically reset state for every tests. Because we'll have a better guarantee that there are no inter-test dependencies we can experiment with parallelizing individual test runs (ie. every call to `it`) within a single test file. Open source jest already resets the module registry on every call to `it` by default.
- Will allow us to move to ES2015 import/export syntax for tests: not doing this actively blocks us from moving forward on this when we decide to do so. If we switch for regular JS module and can't do it for tests, we'll maintain two ways to import modules forever.

### Cons
- Tests are a little bit more magical:
  - When the module registry is reset, A in one test is not equal to A in another test because the variable A actually doesn't even exist in a test any more and is replaced with require('A') calls transparently.
  -  _require_ in tests is already magic I don't think making it slightly more magical is a big deal. require can require the actual module, the mock file or the mock file that requires the actual module. It works differently depending on dontMock/mock calls.
  - It will be different for people who are used to the current system but I expect people new to jest will understand that jest.resetModuleRegistry() (or whatever I will probably rename it to) reset state and that everyone is ok with throwing a little bit of JS knowledge overboard for tests. Personally, if I try to forget everything I know about tests, this is how I would expect my tests to work.
  - I think communication and documentation will take care of this issue.
  - I think all the items in the _Pros_ section outweigh this point.

There were two more cons about deploying this to open source. This has, as shown in this and my previous PR, already been resolved. The last remaining thing is to find a way to deploy this to all users of jest (or babel-jest).
",cpojer,2015-08-29 00:58:12
188,2015-08-28 21:30:24,"The check for argv.$0 failed since it hardcoded `node`. This is not a lot
prettier, but at least doesn't depend on the binary name.
",kassens,2015-08-28 22:31:56
187,2015-08-28 21:28:45,"See https://github.com/facebook/fbjs/pull/45
",cpojer,2015-08-28 23:31:02
186,2015-08-28 19:17:49,"Uh oh. @yungsters it seems like the NetworkLayer changes from #70 made it in, but the doc changes did not. This brings them back!
",devknoll,2015-08-28 22:35:56
186,2015-08-28 22:36:02,"thanks!
",josephsavona,2015-08-28 22:35:56
185,2015-08-28 02:13:37,"GraphQL servers may support various forms of pagination, for example:

<S_CODE_TOKEN>

Relay currently supports only a) - the `edges{node{...}}` variant, and warns about case b) only if the field is called `nodes`. This PR changes the warning by detecting any use of the b) pattern regardless of the field's name.

cc @dschafer @leebyron @schrockn @yuzhi 
",josephsavona,2015-08-28 22:37:11
184,2015-08-27 19:34:44,"Hi,

I think it is a good idea to have an example of Relay using a real database instead of data stored in an array. This example shows how to use Relay with a MongoDB database, mainly following the principles of the Star Wars example.

Main differences: 
- Does not use graphql-relay. While graphql-relay library empowers productivity, it hides some concepts of graphql and makes it a bit more difficult to understand. Instead, NodeInterface and NodeField are defined in the schema.
- No [name]Database.js. Instead, you can find a Models folder within data folder. There you can find Mongoose schemas and CRUD functions that returns promises.

I have also added some features:
- `npm run restart` script to rebuild schema and start server
- `npm run print-schema` script to print the schema on graphql format on a file within data folder.
- `npm run print-instrospection`. The same than above but with introspection.
- `npm run populate` A script to populate a local MongoDB database with some Mock data. This mock data are some of the most influential programmers in computer science history (including Mark Zuckerberg, of course).
- _Readme_ file with an explanation of the example.

Thank you very much

Mario C.
",sayden,2015-08-29 19:09:57
184,2015-08-27 20:00:41,"This is fantastic. Can I use this for an upcoming Relay Community Roundup?

We've discussed the notion of adding more examples to the Relay repository [before](https://github.com/facebook/relay/pull/128#issuecomment-134620980) but feel like we're not the right people to maintain more than a handful of them in the long-term. We would, however, _love_ if you would publish this under your own GitHub account, and would be happy to answer questions and review code.

Some of your npm commands might be useful in the starter-kit, and I'd be happy to merge in some PRs [there](https://github.com/relayjs/relay-starter-kit).

How does that sound?
",steveluscher,2015-08-29 19:09:57
184,2015-08-27 22:12:00,"This is great. I agree with @steveluscher that this is ultimately best placed in a separate repo.

A few suggestions though:
- By not using `graphql-relay-js`, there's less guarantee that the root fields and mutation will work with Relay. For example, Relay requires that all mutations accept a single argument `input` - [see the spec](http://facebook.github.io/relay/docs/graphql-mutations.html#content) - but the mutations here don't follow this pattern and won't work with `Relay.Mutation`. Also it would probably be best to include an example for each root field (Note that `users` and `hobbies` return lists of items, which is currently unsupported. see #112 )
- file naming is inconsistent (`.js` but some `.es6`)
",josephsavona,2015-08-29 19:09:57
184,2015-08-28 08:34:55,"Hi,

Sure Steve, you everybody can use the example, I will feel very proud :)

Project is currently maintained in my own github account in https://github.com/sayden/relay-mongoose-example (forked from relay-starter-kit) so I can keep pushing on it. I will also make a pull-request on the starter kit to add the `restart`, `print-schema` and `print-introspection` scripts. While I will keep an eye on relay as I feel it like the new ""holy-grail"" in cs. :)

Joseph, I really appreciate that you point me my mistakes. While I like pretty much GraphQL and Relay technologies I still feel a bit confused with the documentation and some of the obscure things of graphql-relay library.

By the way, I develop `hobbies` and `users` mainly to check the integrity of the data through curl / postman after mutations.

I was also trying to develop a more structured file tree like in this repo I started to learn a bit more of graphql https://github.com/sayden/graphql-mongodb-example/tree/master/Models/User but I was facing cyclical dependencies problems when adding a interface.

Thank you very much again.
",sayden,2015-08-29 19:09:57
184,2015-08-28 15:10:31,"Wow... this is good.
thanks
",spyalert01,2015-08-29 19:09:57
184,2015-08-29 19:09:57,"Great, feel free to file issues if you encounter any more issues during development. I'm going to close this out now that you have it on your own repo. Thanks!
",josephsavona,2015-08-29 19:09:57
184,2015-08-30 02:14:54,"Hi @sayden ,
I downloaded your script. and npm run update-schema, then npm run start.
I goto browser, and I see blank page. 
How should I run and test your script and mutation?
",spyalert01,2015-08-29 19:09:57
184,2015-08-30 07:45:31,"Hi @sayden 
Here is my 
UserSchema
=========== user schema start =========
let UserSchema = new mongoose.Schema({
  id: {
    type: String,
    required: true,
    unique: true,
    index: true,
    default: mongoose.Types.ObjectId
  },
  name: String,
  surname: String,
});

UserSchema.set('toJSON', {getters: true});
let ModUser = mongoose.model('User', UserSchema);

exports.UserSchema = ModUser;

exports.getModUserById = () => {
    return new Promise((resolve, reject) => {
        ModUser.findOne().exec((err, res) => {
            if(err){
                reject(err);
            }else{
                resolve(res);
            }
            //err ? reject(err) : resolve(res);
        })
    });
};
================ user schme stop ===========

and here is my schema.js 

==== partial schema.js start -====== 
import ModUser from './modules/ModUser.js';

var appUserType = new GraphQLObjectType({
  name: 'AppUser',
  description: 'A person who uses our app',
  fields: () => ({
    id: globalIdField('AppUser'),
    name: {
      type: GraphQLString,
      description: 'The name of User',
    },
    surname: {
      type: GraphQLString,
      description: 'The surname of User',
    },
  }),
  interfaces: [nodeInterface],
});

var queryType = new GraphQLObjectType({
  name: 'Query',
  fields: () => ({
    node: nodeField,
    // Add your own root fields here
    appsales: {
      type: appSalesType,
      resolve: () => getAppSales(),
    },
    appuser: {
        type: appUserType,
        resolve: () => {
console.log('aaaa', ModUser.getModUserById);
            ModUser.getModUserById;
        },
    }, 
  }),
});
==== partial schema.js stop -====== 

when the script executed it goes to var queryType ---> appuser 
In the browser grapqhql post (inspect element i see result NULL)

in the CLI 
if I console.log('aaa', ModUser.getModUserById)
it shows 
return new Promise((resolve, reject) => {
        ModUser.findOne().exec((err, res) => {
            if(err){
                reject(err);
            }else{
                resolve(res);
            }
            //err ? reject(err) : resolve(res);
        })
    });

If I use console.log('aaa', ModUser.getModUserById) 
I get the following in CLI
aaaa { 'Symbol(record)_3.aa68p23em81714i':
   { p: [Circular],
     c: [],
     a: undefined,
     s: 0,
     d: false,
     v: undefined,
     h: false,
     n: false } }

What could have been wrong in my script?
",spyalert01,2015-08-29 19:09:57
184,2015-08-31 06:31:29,"Hi @spyalert01 

I moved your question to issues in my repository. I'll answer it there to not generate ""spam"" here.

Any other question regarding the project, please open issue here: https://github.com/sayden/relay-mongoose-example
",sayden,2015-08-29 19:09:57
184,2015-08-31 07:59:12,"@sayden, 
thanks. I can't post an issue there initially.
",spyalert01,2015-08-29 19:09:57
184,2015-09-20 16:59:27,"Hi @josephsavona @steveluscher 

I've been abroad and I couldn't fix this properly. I have the example working with mutations already as @josephsavona point me. I have also added some easy navigation using url parameters.

I have to say that mutations lacks a bit more documentation to understand well how it works. It has been more a trial an error process until I managed to make it work.

For example, it confused me for one entire day that `clientMutationId` was always 0 when capturing the request of the mutation until I realized that performing a second mutation gives it an `clientMutationId` of 1, etc. I was thinking that `clientMutationId` must be the id of the object to be mutated.

I have also in the To-do the pull-request to relay-starter-kit. Anyways, I think it is ready if you want to reference it in the React Community Roundup yet.
",sayden,2015-08-29 19:09:57
184,2015-10-28 14:00:18,"Simple Mongoose and GraphQL integration.

<S_CODE_TOKEN>

There is obviously a bit more complexity you can build in (also with some separation), but this is just a simple quick snippet.
",Aourin,2015-08-29 19:09:57
183,2015-08-27 17:39:49,,austinlyons,2015-08-27 21:23:40
183,2015-08-27 17:42:33,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-08-27 21:23:40
183,2015-08-27 19:02:55,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-08-27 21:23:40
182,2015-08-27 17:31:05,"Not all `<href>` point to named anchors that exist, and on some pages there exist non-unique named anchors. Fixing this should make it easier for people to link to a specific point in the documentation.
",steveluscher,2015-09-01 18:04:46
182,2015-09-02 01:55:42,"Thanks @devknoll!
",steveluscher,2015-09-01 18:04:46
181,2015-08-27 07:47:57,"Another crack at #20 / #131

Rather than building the query set from the set of all fragments that a component has, it builds them from the set **required** by the route, and throws if the component doesn't provide one.

I'm on the fence about keeping `hasFragment`.

This should be compatible with FB code, but let me know if it's not @steveluscher @josephsavona
",devknoll,2015-08-29 17:44:00
181,2015-08-27 17:34:57,"Fixed. @josephsavona do you have any thoughts about `hasFragment`? I don't really like bloating the RelayContainer interface...
",devknoll,2015-08-29 17:44:00
181,2015-08-27 17:39:20,"@devknoll looks like you made updates before i finished adding all my comments. Can you double-check all of the feedback?

> do you have any thoughts about `hasFragment`?

Adding `hasFragment()` seems reasonable.
",josephsavona,2015-08-29 17:44:00
181,2015-08-27 17:51:24,":white_check_mark: Updated missing fragment invariant
:white_check_mark: Updated invalid query invariant
:white_check_mark: Changed to 'does not'
:white_check_mark: Nixed fragmentName
:white_check_mark: Fixed test name

Everything should be there now @josephsavona, thanks for your time & effort!
",devknoll,2015-08-29 17:44:00
181,2015-08-29 01:39:52,"@devknoll we're basically all set to merge this once the merge conflicts are resolved (sorry about that, but the fix should be minor)
",josephsavona,2015-08-29 17:44:00
181,2015-08-29 02:19:59,"Whoops, thanks for the heads up @josephsavona 
",devknoll,2015-08-29 17:44:00
181,2015-08-29 17:44:12,"@devknoll awesome job on this. thank you!
",josephsavona,2015-08-29 17:44:00
180,2015-08-27 04:18:15,"[Per @josephsavona's request](https://twitter.com/en_JS/status/635842439991836673), this is some initial feedback on my experience going through [the tutorial](https://facebook.github.io/relay/docs/tutorial.html). I should mention I had little exposure to and no experience with either GraphQL or Relay before this.

I started getting very lost around [the section on authoring a schema](https://facebook.github.io/relay/docs/tutorial.html#authoring-a-schema). I found myself typing the code listings to follow along, but not really understanding what everything meant or did as I did so (especially at the call to `nodeDefinitions` and when defining types/connections). There's quite a bit of verbose-looking code to it all, and I felt like it might be apparent to me at the end what it did, but that point never really came.

In the end, I got the game to work after some fiddling (I chose a different name for the mutation and thus the fat query's `fragment on CheckHidingSpotForTreasurePayload` didn't work), but I didn't really understand why, and my attempt to add a simple mutation to reset the game state without needing to restart the server took me a surprisingly large amount of time to get right.

In the end, I decided to start over and go as raw and simple as possible. With the help of [this article](https://medium.com/@clayallsopp/your-first-graphql-server-3c766ab4f0a2) I started with a _super minimal_ schema, and once I got it working (and realized how little code was actually required), I managed to come up with this simple schema that fetches data from Reddit:

<S_CODE_TOKEN>

It was then a relatively simple matter of copying patterns from the tutorial to render the data with React and Relay (after dropping the second `after` parameter from the root field). I was [very happy to see it all work](https://twitter.com/BinaryMuse/status/636737593577598976). Now that I understand the basics and have a somewhat-working knowledge, I feel comfortable with learning what's wrong/could be improved with my little schema, and [diving into graphql-relay](https://github.com/graphql/graphql-relay-js) and learning more advanced techniques.

In hindsight, I think my confusion stemmed from two things:
1. I wasn't very familiar with GraphQL. I understood the ideas, but basically none of the implementation. A skim of the spec helped, but at the time I felt there was very little official documentation to point me in the right direction. This is partially my fault for not being quite prepared, though either a pointer to another document or something to that matter would probably be helpful.
2. `graphql-relay`'s abstractions—while I'm sure they're very useful (I'm still digging in), they seemed to be the cause of what seemed like a lot of noise in the code as I was copying it down. The names didn't resonate any kind of meaning with me, and the documentation for them only makes sense if you're already familiar with the basics.

I hope this issue doesn't come off as too critical; the project is of course young, and docs are hard, and I was hardly the best candidate for them. :) Relay (and GraphQL) seems super cool, and I'm looking forward to learning more!
",BinaryMuse,2015-09-01 20:48:49
180,2015-08-27 16:42:17,"@BinaryMuse It's really helpful to have this kind of specific, constructive feedback as we improve the documentation. Thanks for this!
",josephsavona,2015-09-01 20:48:49
180,2015-08-27 16:42:30,"cc @steveluscher 
",josephsavona,2015-09-01 20:48:49
180,2015-08-27 18:36:28,"This is excellent feedback @BinaryMuse; thank you! I hope that I've done it justice here: https://github.com/facebook/relay/issues/6#issuecomment-135514251.
",steveluscher,2015-09-01 20:48:49
180,2015-08-27 18:45:15,"The overview you [posted there](https://github.com/facebook/relay/issues/6#issuecomment-135514251) sounds perfect!
",BinaryMuse,2015-09-01 20:48:49
180,2015-09-01 20:48:49,"This looks closable to me now, thanks to https://github.com/facebook/relay/issues/6#issuecomment-135514251. Feel free to re-open if I am mistaken.

Thanks very much for the great feedback, @BinaryMuse!
",wincent,2015-09-01 20:48:49
179,2015-08-27 01:37:53,,steveluscher,2015-08-27 01:43:54
178,2015-08-27 00:35:45,"This bakes the compilation of the Markdown files under `website/graphql/` into the script that generates the docs, eliminating the need for a second step.
",steveluscher,2015-08-27 17:19:50
177,2015-08-26 23:48:02,"Updates the test schema to ensure that all implementors of `Node` have all its fields.
",josephsavona,2015-08-27 01:42:30
176,2015-08-26 22:45:26,"This prevents the docs from being rebuilt when the browser requests, for instance, relay.css.
",steveluscher,2015-08-27 01:46:51
176,2015-08-26 22:52:15,":thumbsup:
",zpao,2015-08-27 01:46:51
175,2015-08-26 22:18:36,,yungsters,2015-08-27 22:13:13
175,2015-08-26 22:21:08,"Hrrrm... this breaks `npm test [jest-args]`.
",yungsters,2015-08-27 22:13:13
175,2015-08-26 22:21:12,"What's the advantage of keeping these both in the `test` command? If it's just for travis, would it make flow and tests 2 separate runs that can fail independently? (that's what we did for fbjs)
",zpao,2015-08-27 22:13:13
175,2015-08-26 22:22:51,"I think it's so that `npm test` runs both Flow and Jest (to discourage people from submitting pull requests that break Flow types). @steveluscher would know the original intent.
",yungsters,2015-08-27 22:13:13
175,2015-08-27 05:13:05,"It was indeed to reduce the incidence of PRs that pass tests but fail typechecking.

It's somewhat wasteful to run flow on the whole project when doing something like `npm test RelayContainer`, but it's also Pretty Fast, So Meh™
",steveluscher,2015-08-27 22:13:13
174,2015-08-26 20:56:37,"The GIT repo referenced here no longer exists.  Is this the new location for that repo?
",philcockfield,2015-08-27 22:13:42
174,2015-08-26 21:13:49,"See comment - can you use the `git@...` version for consistency?
",josephsavona,2015-08-27 22:13:42
174,2015-08-27 03:24:58,"@josephsavona - good call - changed it to use the `git@` version.
",philcockfield,2015-08-27 22:13:42
173,2015-08-26 20:26:24,"Updates the OSS `printRelayQuery` to return `{text,variables}` instead of only the query text. This corresponds to the internal printer change from b5c15125e1f781ef9fb7a6d9fc2cf2b7944a1a24.

An example of the output is as follows:

<S_CODE_TOKEN>
",josephsavona,2015-08-26 23:19:15
172,2015-08-26 19:09:18,"Changes the babel plugin to output metadata about the name of non-scalar argument types. This is a prerequisite for sending queries with these argument types to the server correctly.

See #100 
",josephsavona,2015-08-26 20:03:43
171,2015-08-26 17:27:05,"I'm trying to return a list of event items. My server correctly returns the following:

<S_CODE_TOKEN>

My component is only being provided with the first item in the list though, i.e. the event with ID 8, instead of the whole list. Here's my component:

<S_CODE_TOKEN>

And the route:

<S_CODE_TOKEN>

Looking at the examples (todo, the one in relay-starter-kit) I can see that all of the list types are wrapped in Connection objects that provide metadata. Is this a requirement? I'd have expected the above to work and to be able to extend it in future by changing it to a Connection object when I needed to, instead of having to do it to begin with.
",boosh,2015-08-29 10:30:26
171,2015-08-26 17:44:50,"Not all list type are required to be in a Connection. If you don't need any pagination logic, it's sufficient to just have the field return an array of events `[Event]`.

I noticed a few things that might cause problems in your current setup:
- Relay currently doesn't support plural root fields, see #112 for more information and workaround. We are looking into better support for root fields
- If you are planning on using the `Event` component to render all the events in the props, you have to specify in the fragment to be plural with `fragment on Event @relay(plural: true)`
",yuzhi,2015-08-29 10:30:26
171,2015-08-27 19:44:32,"I tried specifying the fragment to be plural and I got an error: 

<S_CODE_TOKEN>

I only want to give a single user ID and get a list of events back for them. I guess I don't need to make it plural. I still can't get it working. This is a root field with one argument that queries a single node.

My server returns multiple Events, but relay is only picking up the first one for some reason. Any other ideas what might be causing this? I don't need pagination, etc. so don't need a Connection...
",boosh,2015-08-29 10:30:26
171,2015-08-27 23:17:14,"> Relay currently doesn't support plural root fields, see #112 for more information and workaround. We are looking into better support for root fields

You might need to wrap your events field in a `viewer` root field as mentioned in #112. 
",yuzhi,2015-08-29 10:30:26
171,2015-08-29 10:30:26,"Yes that solves it. Thanks!
",boosh,2015-08-29 10:30:26
170,2015-08-26 10:35:25,"Is it possibile to create some kind of fragment template. For example:

<S_CODE_TOKEN>

I was thinking about som generic components for connection pagination...
What do you think?
",davide-ganito,2015-09-01 20:46:31
170,2015-08-26 21:29:51,"This type of polymorphic fragment definition isn't supported. A similar option is to use interfaces - for example, multiple types might have connection fields with the type `UsersConnection` and `node` fields of type `User`. This would allow you to create generic components that could paginate a list of users. 

@dschafer Can you think of any other options?
",josephsavona,2015-09-01 20:46:31
170,2015-08-28 15:53:17,"@davide-ganito you can do it yourself:

<S_CODE_TOKEN>
",gyzerok,2015-09-01 20:46:31
170,2015-08-28 17:04:33,"> you can do it yourself:

@gyzerok This type of dynamic templating won't work. The babel plugin has to know the type name at compile time. 
",josephsavona,2015-09-01 20:46:31
170,2015-08-28 17:30:46,"Renouncing to the compile time schema validation, would it be possibile to implement this in the babel plugin? 
Watching the transpiled code i have noticed that the fragment is produced by a self calling lambda.

<S_CODE_TOKEN>

Would it be possible to transpile in something like the the following in presence of a @gyzerok like syntax?

<S_CODE_TOKEN>
",davide-ganito,2015-09-01 20:46:31
170,2015-08-28 17:59:41,"@davide-ganito The exact type has to be known at compile time in order to properly compile all the subfields. I'll reiterate: templated queries are not currently supported.

Can you provide an example of how you would use a generic connection fragment? There are likely simpler, supported solutions or reasonable alternatives.
",josephsavona,2015-09-01 20:46:31
170,2015-08-28 18:54:09,"If you _really_ need to do this, here are two crazy ideas off the top of my head:
- Easy but unsafe: Bypass the babel plugin entirely and just have a `createFragment` function that returns the function that would have been transpiled (the format of this might change, but I _think_ the intention is to eventually stabilize it with pure & serializable JSON objects, right Joe?)
- Harder but safe: Make a babel plugin that parses your templates first and generates Relay.QL statements that the Relay babel plugin can transform later.
",devknoll,2015-09-01 20:46:31
170,2015-08-29 07:17:55,"Ok @josephsavona, thx!
I have not try it yet, do you think that something like this could work?

<S_CODE_TOKEN>
",davide-ganito,2015-09-01 20:46:31
170,2015-08-29 07:27:13,"And i will use it like this:

<S_CODE_TOKEN>
",davide-ganito,2015-09-01 20:46:31
170,2015-08-29 19:06:42,"Yeah, I don't see any red flags. Try it!
",josephsavona,2015-09-01 20:46:31
170,2015-09-01 20:46:30,"I'm going to close this out for now, as it looks like you've found a solution. Feel free to re-open or create a new issue if you have any more questions or suggestions.

Thanks for opening the ticket, @davide-ganito.
",wincent,2015-09-01 20:46:31
170,2016-01-25 06:52:40,"@davide-ganito did your solution works?

I also want wrap `Connection` to component, which provide infinite scroll with spinner. 
Or may be such component exists already?
",nodkz,2015-09-01 20:46:31
170,2016-01-27 08:20:00,"Yes, with a little adjustment. But in my experience it wasn't so useful.
I'm taking a look to the source, if it seems to work I can post the last version.
",davide-ganito,2015-09-01 20:46:31
170,2016-01-28 05:35:32,"Very curious about your solution, too @davide-ganito I have been trying to hack apart the babel relay plugin to prevent schema validation, but I think it's doing too much with the type information. Mainly, I want to do with @gyzerok put together:

<S_CODE_TOKEN>
",stevewillard,2015-09-01 20:46:31
170,2016-01-28 15:53:15,"We absolutely agree that there should be a way to define a generic ""connection"" interface such that you can create a reusable connection container along the lines of @davide-ganito's [comment](https://github.com/facebook/relay/issues/170#issuecomment-135951324). 

The main challenge in implementing this is that Relay needs to know the fragment type name in order to properly transform the query. Because `Relay.QL` tags are compiled away, runtime `createFragment`-style functions (per @stevewillard's example above) won't work. For example, depending on the fragment type it's either a connection or not - Relay needs to know this at runtime, but the information is only available in the schema at build time (schemas can easily be too large to load at runtime).

I mention this only to encourage that we look for solutions within the GraphQL type system, as opposed to runtime hackery. @leebyron - any ideas?
",josephsavona,2015-09-01 20:46:31
169,2015-08-26 03:24:28,"Changes `babel-relay-plugin` to output the type names for complex (non-scalar) types, and updates the OSS variant of `printRelayQuery` to return `{text,variables}` instead of only the query text. This corresponds to the change in b5c15125e1f781ef9fb7a6d9fc2cf2b7944a1a24.

An example of the output is as follows:

<S_CODE_TOKEN>
",josephsavona,2015-08-26 19:04:30
169,2015-08-26 19:04:30,"I'll split the babel plugin and `src/` changes into separate PRs
",josephsavona,2015-08-26 19:04:30
168,2015-08-25 23:57:35,"In the blog post introducing Relay, @josephsavona said, ""We're working to extend Relay to provide a unified interface for interacting not only with server data, but also in-memory and native device data (and, even better, a mix of all three).""

I was curious to hear more about what that means exactly :)

Does this mean you'd like Relay to replace Flux at Facebook? Will you be able to create client-side only GraphQL types that you can query/mutate client side?

Any plans to do stuff like time-traveling debugging, user state saving/restoring, etc.?
",KyleAMathews,2015-08-28 17:22:46
168,2015-08-26 21:01:36,"Thanks for asking! Note that issue #114 gives an overview of this feature and is intended as a place to gather feedback from the community about additional use-cases. I'll address your specific questions here though:

> Does this mean you'd like Relay to replace Flux at Facebook? 

Short answer: no. Note that Relay is an implementation of the Flux pattern (can Flux replace itself? ;-). Consider that mutations are effectively asynchronous action creators, payloads from the server are actions, and the cache is a single integrated store. Our goal is to solve product use-cases that require interacting with data from multiple (potentially async) sources. 

> Will you be able to create client-side only GraphQL types that you can query/mutate client side?

Yup, that's the basic idea - see more on #114. 

> Any plans to do stuff like time-traveling debugging, user state saving/restoring, etc.?

Our short-term goals are to provide development tools for Relay and to facilitate offline operation. We're not specifically planning to implement time-traveling debugging, for example, but we absolutely appreciate the value of these kinds of tools. Having an initial version of Relay dev tools could be a great place for the community to get involved on building these features.
",josephsavona,2015-08-28 17:22:46
168,2015-08-28 03:40:08,"@KyleAMathews We're always interested in feedback and if this plan addresses any use-cases you might have been thinking of. Also, I should clarify that while our goal isn't to ""replace Flux"", implementing this feature could allow us to replace generic variations of Flux in a lot of places.
",josephsavona,2015-08-28 17:22:46
168,2015-08-28 15:56:16,"@KyleAMathews you can use GraphQL client-side today.
",gyzerok,2015-08-28 17:22:46
168,2015-08-28 17:22:46,":+1: Thanks @josephsavona! I'll close this issue in lieu of #114 
",KyleAMathews,2015-08-28 17:22:46
167,2015-08-25 20:58:29,"queryRequest and mutationRequest fulfilment expect the data to be wrapped in a obj with shape {response: <data>},
",pasviegas,2015-08-26 21:56:37
167,2015-08-25 21:03:25,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-08-26 21:56:37
167,2015-08-25 23:03:02,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-08-26 21:56:37
167,2015-08-26 21:56:45,"@pasviegas thanks for fixing!
",josephsavona,2015-08-26 21:56:37
167,2015-08-27 15:35:18,"You're welcome! :)
",pasviegas,2015-08-26 21:56:37
166,2015-08-25 16:20:53,"I have `CreateSessionMutation` with `sid` field defined in `getMutation` and `getFatQuery`.

<S_CODE_TOKEN>

I want to call that mutation inside flux, get id of created session, store that id inside localStorage.
`Relay.update(mutation, {onSuccess})` returns only `{createSession:{clientMutationId:""0""}}` without `sid`.
How to get created `sid` from flux?
",vslinko,2016-03-07 20:55:32
166,2015-08-25 16:58:32,"Thanks for filing an issue! There's a couple steps to get this mutation working:
- `getConfigs` should be configured to handle a `FIELD_CHANGE`  - see the example at https://facebook.github.io/relay/docs/guides-mutations.html#a-complete-example
- To get the results of a field in the fat query, at least one component should be querying for that data. In this case, the component that triggers the mutation should query for `... { session { sid } }`. When the mutation is complete, the value of that data will be the new `sid`. 

Here's a rough example:

<S_CODE_TOKEN>
",josephsavona,2016-03-07 20:55:32
166,2015-08-25 20:01:08,"If what you are adding is a completely new node in the system, where you have not had a chance to fetch any fields to yet, `FIELDS_CHANGE` might not see any fields that it needs to update. If that's the case, you can use `REQUIRED_CHILDREN` with a query to fetch any field you want on that might not have been fetched yet. Since no view needs this information, you can use the `onSuccess` callback with the mutation to do wtv you want with the payload.
",yuzhi,2016-03-07 20:55:32
166,2015-08-25 21:57:07,"@yuzhi Thank you! It works! But why `REQUIRED_CHILDREN` isn't documented?
",vslinko,2016-03-07 20:55:32
166,2015-08-25 22:23:09,"Not sure, we'll update it!
",yuzhi,2016-03-07 20:55:32
166,2016-01-21 10:49:28,"Sorry, but I think this common issue have not resolved.

How to complete a `/auth/signin` action/mutation ?

This is a test:

<S_CODE_TOKEN>

In the server side, I use python graphene define:

<S_CODE_TOKEN>

this would send a query string to server:

<S_CODE_TOKEN>

if drop 'REQUIRED_CHILDREN' usage, the query string send to server:

<S_CODE_TOKEN>

Is there nice method to fetch columns like 'sid, expired' ?

any help would be appreciated,
Thanks
",gwind,2016-03-07 20:55:32
166,2016-01-21 16:00:06,"> Is there nice method to fetch columns like 'sid, expired' ?

@gwind The canonical way to fetch fields on a new object such as this - where no fields could have been fetched yet - is to use `REQUIRED_CHILDREN`. It looks like those two fields are getting queried if you use that config - what part isn't working?
",josephsavona,2016-03-07 20:55:32
166,2016-01-22 01:42:32,"@josephsavona Thanks :smile: 

Yes, no parts doesn't working. But my concerns is:
- `REQUIRED_CHILDREN` is not pointed in the formal document -  [Mutator configuration](https://facebook.github.io/relay/docs/guides-mutations.html#mutator-configuration) and anywhere else.
  
  Does this config is not suggested? #236 
- Is there any method to fetch `addons` field from mutation except `REQUIRED_CHILDREN` ?
  
  the query string is always like `mutation Signin($input_0:SignInMutationInput!){signin(input:$input_0){clientMutationId}}` by default, only `clientMutationId` field.
  
  can we define getMutation like this in the future ?
  
  <S_CODE_TOKEN>

thanks again
",gwind,2016-03-07 20:55:32
166,2016-01-22 14:43:31,"Reopening bc we should either document this approach or support an alternative. 
",josephsavona,2016-03-07 20:55:32
166,2016-02-04 04:25:13,"I encountered #745 and started searching for ways to get `REQUIRED_CHILDREN` results into the store (currently these results are not added to the store, which makes sense—how would Relay know to add them?). I suspect that #745 leads a fair number of people to `REQUIRED_CHILDREN`, with new nodes being the other use case?
",dminkovsky,2016-03-07 20:55:32
166,2016-03-03 02:08:07,"+1 to documenting or finding another approach and documenting that. Just got very confused by this, and had to grep through the source+issues to find out what a `REQUIRED_CHILDREN` config signature looked like.
",ianstormtaylor,2016-03-07 20:55:32
165,2015-08-25 14:06:53,"Relay is making this request:

<S_CODE_TOKEN>

My server replies with:

<S_CODE_TOKEN>

But then I get an error:

<S_CODE_TOKEN>

Here's my route:

<S_CODE_TOKEN>

And `App.js`:

<S_CODE_TOKEN>

Is the server replying with an unexpected response, or is this a problem in relay itself?
",boosh,2015-08-25 20:06:18
165,2015-08-25 15:07:37,"Are you using the `relay-starter-kit` or configuring things yourself? Be sure to include a polyfill for ES6 features - the examples all use the [`babel/polyfill`](https://github.com/facebook/relay/blob/master/examples/todo/js/app.js#L1).
",josephsavona,2015-08-25 20:06:18
165,2015-08-25 15:08:48,"Also - thanks for providing so much information! Makes it super easy to debug :+1: 
",josephsavona,2015-08-25 20:06:18
165,2015-08-25 15:19:23,"Yes, I used relay-starter-kit to begin with (with `babel/polyfill`). I'm hooking it up to a sangria (http://sangria-graphql.org) server and I'm trying to work out whether the problem is that sangria isn't returning compatible data, or whether the problem is with relay/relay-starter-kit/what I've done. 
",boosh,2015-08-25 20:06:18
165,2015-08-25 16:41:12,"The sample payload you posted looks correct. If you breakpoint at the error, what is the value of `dataID`? What browser are you using?
",josephsavona,2015-08-25 20:06:18
165,2015-08-25 17:41:30,"I'm using Chrome Version 44.0.2403.157 (64-bit) on OSX. I get the same issue in Firefox 39.0.3.

It's difficult to see what's going on. It seems to be an issue with resolving a promise. If that's as useful as I imagine I'll create a repo with my client and server in so you can tinker yourself. That'll probably be tomorrow.
",boosh,2015-08-25 20:06:18
165,2015-08-25 17:45:07,"Looks like an issue in your schema. How is your schema defined? 
Make sure you're using `graphql-relay` and `globalIdField` to define your object's IDs.
",gabriel-laet,2015-08-25 20:06:18
165,2015-08-25 19:56:47,"Ohh got it - `id` should be a string, not an int.

Edit: specifically, the GraphQL server may represent the value of `id` as any scalar type, but it should serialize to/from a string. This is the case by default if you're using `graphql-relay-js`, so perhaps this is an issue with how you configured the schema.
",josephsavona,2015-08-25 20:06:18
165,2015-08-25 20:06:18,"Awesome! Thank you! Yes, I thought I was optimising my schema by changing ID to be an int. I've changed it to a string and it works now.
",boosh,2015-08-25 20:06:18
165,2015-08-25 20:16:20,"Awesome, glad you got it sorted. And thanks for following up!
",josephsavona,2015-08-25 20:06:18
164,2015-08-25 07:16:42,"Hi everyone!
This is an extraction of my schema.

<S_CODE_TOKEN>

Why, when i use the following mutation Relay doesn't request the `scenarioMarketAreaEdge`?

<S_CODE_TOKEN>

The `createScenario` mutation works fine instead:

<S_CODE_TOKEN>

I'm missing something?
Thx!
",davide-ganito,2015-08-25 12:59:09
164,2015-08-25 12:59:09,"Ok, I think I have solved.
I have added a `scenario` field to the payload

<S_CODE_TOKEN>

and changed the fatQuery:

<S_CODE_TOKEN>

now everything is working fine!
",davide-ganito,2015-08-25 12:59:09
164,2015-08-25 15:14:25,"Glad you figured it out! Thanks for following up with the solution :-)
",josephsavona,2015-08-25 12:59:09
163,2015-08-25 04:26:36,"See http://flowtype.org/docs/advanced-configuration.html#options
",cpojer,2015-08-25 17:44:26
163,2015-08-25 04:27:07,".travis should probably also do a `flow check` :)
",cpojer,2015-08-25 17:44:26
163,2015-08-25 17:42:44,"`npm test` does `npm run typecheck && NODE_ENV=test jest`, so Travis does typechecking automatically!
",steveluscher,2015-08-25 17:44:26
163,2015-08-25 17:44:22,"Awesome!
",cpojer,2015-08-25 17:44:26
162,2015-08-24 22:05:56,"The use case i have in mind is a form for creating a complex record. Ideally, I'd like to be able to use introspection to pull down a schema of the record and then use that to generate some form fields. I was wondering what you thought of this use case and/or if there is a simple way to do this in Relay. I suppose I could create a ""default record"" and then display that in my form, but I figured I would try being clever first.
",drabinowitz,2015-08-26 21:37:02
162,2015-08-24 23:03:54,"There's no reason why this couldn't work. 

@dschafer I tried transpiling an instrospection query with `babel-relay-plugin`, but got an error at [this line in GraphQLPrinter](https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/GraphQLPrinter.js#L105):

`options.schema.getQueryType().getFields()[rootCallName];`

Probably because the `__schema` field doesn't exist in the application's schema. Any ideas?
",josephsavona,2015-08-26 21:37:02
162,2015-08-24 23:40:09,"Yeah, there was some discussion whether `__schema` and `__typename` should be revealed in introspection; I think @leebyron had the most context on why they are not.

It's not clear to me that issuing an introspection query to the server at runtime would always be ideal; in particular, introspection queries might be relatively inefficient (I know this is true of Facebook's schema), and they might change underneath the client (for example, developers might add or deprecate fields on the record, so the client might get a field that it isn't familiar with).

On the other hand, using an introspection query to quickly bootstrap a client-side view seems like it would be an awesome way to get off of the ground; it might be interesting to build a mutation scaffold that would use introspection to find all mutations, then build basic form views for executing those mutations.
",dschafer,2015-08-26 21:37:02
162,2015-08-26 21:37:02,"Thanks for asking about this, it's an interesting idea. We'll keep this in mind going forward, but we are not likely to add this soon. I'm going to close this out but feel free to reopen if you have more questions or if this is a blocker (in which case, the change would have to happen in `graphql`).
",josephsavona,2015-08-26 21:37:02
161,2015-08-24 17:32:31,"<S_CODE_TOKEN>

What's the preferred way to unit test Relay container components?
",devknoll,2015-08-29 08:27:02
161,2015-08-24 17:51:11,"Relay has a `RelayTestUtils` helper that's used internally for testing containers. Would it make sense to expose some of this for Relay clients to use?
",devknoll,2015-08-29 08:27:02
161,2015-08-24 18:21:15,"Just in case it helps anyone else: My current workflow with Jest is to define `__mocks__/react-relay.js` with:

<S_CODE_TOKEN>

Then a component can be tested with:

<S_CODE_TOKEN>

where `fixtures` is an object matching the expected shape of the GraphQL response/fragments. As a side note, it'd be awesome if fixtures like this could be automatically generated, given that we have a schema :smile: 
",devknoll,2015-08-29 08:27:02
161,2015-08-24 19:50:52,"@devknoll: That's a pretty solid solution to get tests working now. Relay will pass through any props whose name matches a `fragments` key as-is. You'll get a warning about fake data but this is safe to ignore in tests. 

Most of `RelayTestUtils` is intended for internal tests (and we wouldn't want people depending on these APIs) but we would definitely accept PRs to build a public `TestUtils`-esque API for Relay. `RelayTestUtils.createRenderer()` is a good place to start ;-)
",josephsavona,2015-08-29 08:27:02
161,2016-05-17 18:18:38,"@devknoll Does **mocks** live within Jest's **tests** directory. 

Is there anywhere I can read about this or see a example in a little more detail?
",rterysen-openroad,2015-08-29 08:27:02
161,2016-08-29 12:35:26,"you can create a directory **mocks**

and create a react-relay.js file in it
",sibelius,2015-08-29 08:27:02
161,2017-02-15 23:02:19,"If anyone else comes across this who is looking for a non-jest solution, replacing `Relay.createContainer` with a custom version that doesn't actually create the container may be helpful.

<S_CODE_TOKEN>

A more complete `mocha`/`enzyme` [example can be found here](https://github.com/airbnb/enzyme/issues/398#issuecomment-280167713).",wbyoung,2015-08-29 08:27:02
160,2015-08-24 16:50:26,"See https://github.com/relayjs/relay-starter-kit/pull/10
",albertstill,2015-08-24 20:01:51
160,2015-08-24 20:02:05,"@albertstill thanks!
",josephsavona,2015-08-24 20:01:51
159,2015-08-24 16:11:41,"My introspection query works fine, but when i try to transpile my code i get this error: ""Introspection must provide input type for arguments."".
Somebody knows what's his meaning?

Thx!
",davide-ganito,2015-08-24 17:40:56
159,2015-08-24 16:55:57,"This error originates from `graphql` - it appears that your schema file is missing a definition for an input argument. Can you share a link to your schema?
",josephsavona,2015-08-24 17:40:56
159,2015-08-24 17:21:54,"There was a `GraphQLList` in the `inputFields` of a mutation causing the issue.
Aren't the List allowed in input fileds?
",davide-ganito,2015-08-24 17:40:56
159,2015-08-24 17:26:19,"> Aren't the List allowed in input fileds?

Lists should be allowed in input fields; can you post a gist on https://github.com/graphql/graphql-js/issues/151 of your schema? Sounds like this may be a bug in `buildClientSchema` where it doesn't allow that.
",dschafer,2015-08-24 17:40:56
159,2015-08-24 17:29:55,"Ok, I think it's my fault.
I was using a `GraphQLObjectType` rather than a `GraphQLInputObjectType` as type for the `GraphQLList`. Sorry...
",davide-ganito,2015-08-24 17:40:56
159,2015-08-24 17:40:56,"No worries! Glad you got it sorted out.
",josephsavona,2015-08-24 17:40:56
158,2015-08-24 11:18:20,"Hello!
Can I use a connection as a root field of my query?
If yes, how can a configure a mutation RANGE_ADD?

Thanks!
",davide-ganito,2015-08-24 12:57:08
158,2015-08-24 12:57:08,"Sorry for replication, i have just seen the #112.
",davide-ganito,2015-08-24 12:57:08
157,2015-08-24 02:29:02,"I found this `path` variable on the example routes confusing - I couldn't find any documentation on it, and changing or removing it seems to have no effect on the examples.  Is it safe to remove?
",charlieschwabacher,2015-08-24 20:37:05
157,2015-08-24 17:14:45,"Can you PR the same change over at https://github.com/relayjs/relay-starter-kit ? :smile: 
",devknoll,2015-08-24 20:37:05
157,2015-08-24 17:33:45,"done! https://github.com/relayjs/relay-starter-kit/pull/18
",charlieschwabacher,2015-08-24 20:37:05
156,2015-08-23 19:24:55,"Hi!

I am very new to all this. And I have trouble with getting Relay in my little client rendering app up and running. 

For some reason I end up with this error:

<S_CODE_TOKEN>

I seem to end up with queryBuilder being a GraphQLQuery object and not a function. 
Also I am not really sure why it is using the ""relayDepricated.js"" instead of the relay.js.
I am really puzzled with this. Any idea how this could happen?

Best regards!
",MoeSattler,2015-08-24 06:39:21
156,2015-08-23 19:43:39,"The most likely cause of the error is that your route defined a query like this:

<S_CODE_TOKEN>

Instead of

<S_CODE_TOKEN>

I'm not sure why you're seeing `relayDeprecated.js` - are you basing your app off of the starter kit, or did you configure it manually? (and if so, how?)
",josephsavona,2015-08-24 06:39:21
156,2015-08-23 19:53:23,"Thanks for your answer.

I used a function. My route looks like this:

<S_CODE_TOKEN>

I did not use the starter kit. 
This is how I created the container and how I am rendering:

<S_CODE_TOKEN>

I am using babel+webpack:

<S_CODE_TOKEN>
",MoeSattler,2015-08-24 06:39:21
156,2015-08-23 20:10:49,"Aha! Thanks for pasting the code, it's very close but there are few minor issues.

1) The route query definition should follow the example in the [Relay.Route guide](https://facebook.github.io/relay/docs/guides-routes.html#routes-and-queries).

<S_CODE_TOKEN>

2) The container code should be updated as follows:

<S_CODE_TOKEN>
",josephsavona,2015-08-24 06:39:21
156,2015-08-23 20:14:02,"Also, it appears that your webpack configuration may not be using the `babel-relay-plugin` at all (your code `require()`s it but doesn't reference it). Can you paste your full configuration?

Note that the `relay-starter-kit` is definitely the best and easiest way to get started.
",josephsavona,2015-08-24 06:39:21
156,2015-08-23 20:23:30,"It seems to have resolved that issue! Now I am running in some React Issues (Invariant Violation: addComponentAsRefTo(...)), probably not directly related. 
Thanks a lot Joseph!

Regarding babel-relay-plugin. AFAIK it runs just fine. It also validates agains my schema. I just forgot to remove the require statements when I moved part of the logic.
Full webkit config:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

You are probably right about the starter-kit.
But I'd really love to use my own GraphQL Server (which is already ready).
Also the starter-kit + tutorial both looked really intimidating for a newby like me.
",MoeSattler,2015-08-24 06:39:21
156,2015-08-24 06:39:21,"Cool, sounds like the config is not a problem. 

>  the starter-kit + tutorial both looked really intimidating for a newby like me

Thanks for this feedback! We'll keep on improving these areas - if there are specific items that were unclear, please open a new issue - or submit a PR! 
",josephsavona,2015-08-24 06:39:21
155,2015-08-23 18:27:03,"`getFatQuery` and `fragments` had minor typos.
",fson,2015-08-24 20:20:50
155,2015-08-24 20:20:52,"thanks!
",josephsavona,2015-08-24 20:20:50
154,2015-08-23 11:34:09,"Actually I need a way to access static methods of original component and looks like there is no way to access them when Component is wrapped with RelayContainer?
",vladar,2015-08-23 12:03:39
154,2015-08-23 12:03:39,"I realized that it is possible to assign static methods to Container instead of Component:

<S_CODE_TOKEN>

Not that pretty, but works.
",vladar,2015-08-23 12:03:39
154,2015-08-24 21:03:48,"Doing all this kind of forwarding makes static analysis harder. Originally we used mixins instead of containers and statics were automatically available. When we moved to containers we used to forward statics (and instance methods) because that made it easier to move to the new implementation. We realized that doing the forwarding for static fields wasn't very useful, so we moved them to the containers and removed support for the feature. This is the recommended solution.

We are doing the same for instance methods internally. There is a forked file called RelayContainerProxy and we are working on getting rid of it internally – we are hoping that React will provide a solution for this in the future.
",cpojer,2015-08-23 12:03:39
154,2015-08-24 21:59:38,"Cool, thanks for explanation
",vladar,2015-08-23 12:03:39
154,2015-11-05 07:35:24,"i found a way to access the origin component:

<S_CODE_TOKEN>

don't know if it is a proper way
",filod,2015-08-23 12:03:39
153,2015-08-23 10:24:39,"Is there a roadmap on how/when `legacy` will be removed. I wonder especially about `FragmentPointers` which are in `legacy` but are used all throughout Relay.
",clentfort,2015-08-23 19:48:18
153,2015-08-23 19:48:18,"The main distinction for the `legacy/` directory is that we haven't added Flow type annotations to these files; not that they're deprecated. We'll incrementally update these files going forward.
",josephsavona,2015-08-23 19:48:18
152,2015-08-22 23:43:39,"In the following step of this tutorial, there is some code that imports
these classes from this file.

<S_CODE_TOKEN>

However, since they are not exported, they will be undefined when
imported. This comes into play in the `nodeDefinitions` object type
resolver when we try to run `obj instanceof Game`. Since `Game` is
undefined, this will result in an error such as:

> Expecting a function in instanceof check, but got undefined

For the scope of this tutorial, this doesn't seem to make much
difference. However, for folks wanting to move beyond this tutorial into
something a little more complicated, such as pagination, this oddity
could be a stumbling block to learning.
",lencioni,2015-08-22 23:55:14
152,2015-08-22 23:54:49,"lg2m. Thanks, @lencioni!
",wincent,2015-08-22 23:55:14
151,2015-08-22 23:27:44,"'intermediary' was misspelled
",ning-github,2015-08-26 02:00:31
150,2015-08-22 20:15:26,,KyleAMathews,2015-08-22 23:33:23
149,2015-08-22 16:40:37,"I have a route that looks like this:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

It used query directly to the `bulld` (`query { build()... }`), but because it has multiple arguments, I had to wrap it in a `viewer` as described here: https://github.com/facebook/relay/issues/112

When I try and fetch the data, I get the following error:

> Uncaught Error: Invariant Violation: Queries supplied at the root should contain exactly one fragment and no fields. Query `BuildRoute` contains a field, `build`. If you need to fetch fields, declare them in a Relay container.

I'm probably doing something silly.
",keithpitt,2015-08-24 15:24:31
149,2015-08-22 18:19:21,"Route queries should contain only the root field - in this case `viewer`. Try moving the `build` field into the fragment of the root container.
",josephsavona,2015-08-24 15:24:31
149,2015-08-24 15:24:30,"@keithpitt I'm going to close this issue, but feel free to reopen if the solution above doesn't work for you - see also #112 which will make Root queries more flexible.
",josephsavona,2015-08-24 15:24:31
149,2016-10-31 14:39:22,"This might sound silly, but I got across the same problem.

I followed the steps in #112 where it is told to wrap it. But I cannot add the fragment that I need in this case.

Any ideas on how to really fix this?
",CDRO,2015-08-24 15:24:31
148,2015-08-22 15:49:33,"Hello everyone!
I have noticed that the mock warning defined [here](https://github.com/facebook/relay/blob/f9622640c58eac5519da4311885c5d711315f37f/src/container/RelayContainer.js#L633) trigger also when you forget to put a child component fragment in the parent query.
Could be useful to rememeber this case in the message?

Bye!
",davide-ganito,2016-05-10 15:46:34
148,2015-08-22 18:22:22,"Hi @davide-ganito, thanks for filing this issue. The error message is warning about exactly this case, though I agree the warning could be clearer. Feel free to send a PR otherwise we'll address it! 
",josephsavona,2016-05-10 15:46:34
148,2016-05-10 15:46:34,"Closing due to inactivity - feel free to ping here and we'll reopen, or submit a PR to address!
",josephsavona,2016-05-10 15:46:34
147,2015-08-22 12:07:27,"I have following tree of React components:

<S_CODE_TOKEN>

And `Content` is resolved at runtime (say page component depending on URI). I could potentially put Relay RootContainer in `Layout.render()` method, but `Layout` has data requirements on itself.

Is it possible to have several nested `RootContainers`? Or how would you approach this?
",vladar,2015-08-23 09:03:19
147,2015-08-22 18:26:25,"It is possible to have nested `<RelayRootContainer>`s, but this would incur multiple round trips. However, the case that you're describing is similar to the problem of nested routes - have you looked at react-router? That in combination with https://github.com/devknoll/relay-nested-routes would allow fetching all the data for the Layout and Conent. 

See also @cpojer's [great blog post about this topic](https://medium.com/@cpojer/relay-and-routing-36b5439bad9).
",josephsavona,2015-08-23 09:03:19
147,2015-08-23 09:03:19,"Very helpful, thanks!

I realized that `renderFetched` method of RootContainer is probably all I need for my scenario. In my case Content knows about it's layout, so it may include Layout's data requirements.

Then I can have one RootContainer:

<S_CODE_TOKEN>

Where `Component.renderLayout(data)` will just do:

<S_CODE_TOKEN>
",vladar,2015-08-23 09:03:19
147,2015-08-23 11:35:15,"Actually it seems to be impossible to do yet because of #154
",vladar,2015-08-23 09:03:19
146,2015-08-22 06:56:26,"Given a fragment with a range whose call is `first(1)` one moment, and `first(2)` the next, make sure that `GraphQLStoreQueryResolver::resolve()` re-resolves it.

Fixes #120.
",steveluscher,2015-08-26 02:00:31
145,2015-08-22 02:51:55,"I was thinking about a potential client optimization for relay, and was wondering how feasible it would be. I am currently thinking that abusing the node interface may get some of the way there. I am still a bit hazy about how relay works so I may be way off base here.

Imagine a universe of types {A, B, C, Root}.

with some shorthand type definitions:

<S_CODE_TOKEN>

I believe that relay is able to reason about the traversals to C from any of the individual originating nodes, but not comprehensively between them. The type contract is only applied on the nodes, but what if it could be applied to traversals (optionally) as well?

something like

<S_CODE_TOKEN>

which, when compiled into the schema, could help relay identify objects at the end of edges better. I was thinking of using the node interface in my fragments to do that part of the way, but that seems like it would be really messy in practice.
",ts-smith,2015-08-24 03:25:49
145,2015-08-22 18:32:11,"Can you provide a specific example (data) and what type of data access you want to optimize? It's not clear what the goal is.

Note that Relay can directly refetch any object that implements `Node`, via its `id` and the `node_id: $id)` root field defined in the spec.
",josephsavona,2015-08-24 03:25:49
145,2015-08-23 17:15:32,"I realized that the thing I proposed would not be able to work in a significant number of cases, so it probably wouldn't be worth the trouble. But the originating problem comes from having multiple root queries that don't seem to be able to share the cached results, because the arguments aren't standardized (I think). For example, I may have a query like

<S_CODE_TOKEN>

I think that since the actual B root query has not been seen before if it is ""selected"" for the first time, the query builder won't know that it has already seen the node. I was thinking I could do a node query for B

<S_CODE_TOKEN>

instead, so that the standardized node arguments would facilitate optimized query generation.
",ts-smith,2015-08-24 03:25:49
145,2015-08-23 19:59:49,"This can occur at any level of the hierarchy and is not specific to roots; in general given some new query, it's possible that the client happens to have fetched a subset of that data. For example, given the query `node(id: 1) { foo { bar { ... } } }`, the client may have already fetched the `bar` record via `node(id: bar) {...}` or via `node(id: foo) { bar { ... } }`, or from some other completely unrelated node that happens to link to `bar`. However, there is no way to avoid refetching this subset of data without the server knowing _exactly_ what has been fetched by the client.

In short, it turns out to be impractical to try and avoid this category of refetching. Instead, Relay will detect if the results of a new query overlap with existing records. When this happens the new results are merged into the cache, and only components whose data actually changed will re-render. 

Note that typical navigation patterns - moving from a ""list of things"" screen to an item detail screen - means that in practice this type of refetching is quite rare.
",josephsavona,2015-08-24 03:25:49
145,2015-08-23 22:26:57,"I see. My suggestion was then, I suppose, to flatten the queries as much as possible on the client so that each layer can be checked locally. Then you would have to descend through the graph layer by layer, which might make it so less fetching is done in total, but would induce a communication overhead with added complexity which would probably defeat the purpose.
",ts-smith,2015-08-24 03:25:49
145,2015-08-24 03:25:49,"Yeah, ultimately it's better to trade a moderate amount of refetching to achieve the performance win of a single round trip. 

I'm gong to close this out, but thanks for the great discussion and keep up the suggestions!
",josephsavona,2015-08-24 03:25:49
144,2015-08-22 01:49:16,"I should add tests...
",devknoll,2015-08-27 17:14:36
143,2015-08-22 01:24:20,"If we have data stored in Mongo, are we suppose to link the database.js with Mongo to deal with retrieving data for GraphQL?

I found that schema.js somehow specify the datatype, which is redundant? since we have data in mongo with its related type.

Is there a simple example on this?

is there any prefered database engine that is perfered by graphhQL? 
",spyalert01,2015-08-22 18:37:46
143,2015-08-22 18:37:46,"GraphQL is agnostic of data storage and programming languages. As for how to integrate with MongoDB, this is a really great question to ask at [the graphql repo](https://github.com/graphql/graphql-js)
",josephsavona,2015-08-22 18:37:46
142,2015-08-21 22:25:35,,yuzhi,2015-08-21 22:50:45
141,2015-08-21 22:16:37,"Trying to imlement a workaround for root query with two arguments, mentioned in #112.

And receive error:

<S_CODE_TOKEN>

Am I missing something? Here is route query:

<S_CODE_TOKEN>

Component fragment:

<S_CODE_TOKEN>

Then root container initialization:

<S_CODE_TOKEN>

No request is made. Just fails with this error.

Can you please shed some lights on what this error actually means?
",vladar,2015-08-22 09:32:45
141,2015-08-21 23:47:01,"The component fragment references two variables, `$entityType` and `$slug`, and the error message indicates that no values are defined for these. When the values of variables come from the route, they need to be passed down in the call to `getFragment`:

<S_CODE_TOKEN>
",josephsavona,2015-08-22 09:32:45
141,2015-08-22 09:32:45,"Ah missed that. Thanks!
",vladar,2015-08-22 09:32:45
141,2015-08-22 11:23:31,"Another note if someone faces with this problem. Make sure to define `initialVariables` on your container (even if they are nulls). Otherwise Relay will fail to merge them back after update and throw:

<S_CODE_TOKEN>
",vladar,2015-08-22 09:32:45
141,2015-11-20 11:50:20,"Hi, i'm using this pattern with `react-relay-router` and the `entity` field is not available as `viewer` prop on render.
I have implemented `prepareVariables` in the `CompanyPage` Container and I have noticed that it is called 3 times. 
The first and the second with the correct params injected, the last one with the `initialVariable` values.

By the way, why `prepareVariables` is called 3 times?
",davide-ganito,2015-08-22 09:32:45
141,2016-06-29 12:05:32,"@josephsavona, the answer is very helpful. Is there any documentation about those arguments? If not, I could write it.
",lvarayut,2015-08-22 09:32:45
141,2016-06-29 15:39:58,"@lvarayut check out http://facebook.github.io/relay/docs/api-reference-relay-container.html#getfragment-overriding-fragment-variables
",josephsavona,2015-08-22 09:32:45
141,2016-06-29 15:41:07,"Also, the [`initialVariables`](http://facebook.github.io/relay/docs/api-reference-relay-container.html#getfragment-overriding-fragment-variables) docs mention that a default value must be provided for any variables that you reference within the fragment.
",josephsavona,2015-08-22 09:32:45
141,2016-06-29 15:55:50,"The documentation doesn't say anything about arguments in the `viewer: (Component, variables)`; both Component and variables. Especially, the `variables` is the second argument in the Route, however, it's  the first argument in the Container. I think that they are very important and worth to be mentioned.
",lvarayut,2015-08-22 09:32:45
141,2016-06-29 17:11:23,"@lvarayut I see what you mean. Feel free to send a PR to expand on the docs!
",josephsavona,2015-08-22 09:32:45
140,2015-08-21 22:15:54,"While looking into #132, I realized that theoretically the batching behavior that I'm looking for _should_ already exist. Specifically, `RelayPendingQueryTracker` should prevent us from making another request for data that's already in-flight, i.e. it should subtract new queries from all existing queries.

However, I'm seeing the following being sent over the RelayNetworkLayer:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

In this example, I am rendering two RootContainers that have the same Relay.Route on them. `_subtractPending` is definitely calling `subtractRelayQuery` on the pair of queries, but the result is strictly equal.

Is this intended behavior?
",devknoll,2015-09-01 16:12:43
140,2015-08-22 00:03:35,"Subtraction is primarily focused on avoiding duplicate queries in the case that the query processing happens on the server (part of our internal server/preload modes that we are working to open-source). In this case, the fact that the identical queries aren't being subtracted is probably a bug.

We're continuing to work on supporting query batching in the OSS release, but subtraction is only part of this (and will probably be removed at some point b/c there are now simpler ways to achieve the same effect).
",josephsavona,2015-09-01 16:12:43
140,2015-08-22 00:05:34,"Thanks Joseph.

> and will probably be removed at some point b/c there are now simpler ways to achieve the same effect

Can you expand on this when you get a chance?
",devknoll,2015-09-01 16:12:43
140,2015-08-22 01:20:37,"Relay (internally) supports a ""preload"" mode in which the server begins processing queries while the client is downloading and initializing the application code. The idea is that by the time the client is ready to execute the app, the query results are already available (rather than having to wait until this point to even initiate a query). Subtraction allows Relay to detect when a query that the client would execute is the same as one for which the server has already fetched data - preventing the client from duplicating a request. Going forward, we'll likely replace subtraction with a simpler way of correlating the client queries & server responses.

Note that outside of this use case, we've found that most queries don't actually subtract out. The marginal benefit doesn't justify the complexity of an extra step.
",josephsavona,2015-09-01 16:12:43
140,2015-08-24 16:06:25,"Interesting, thank you for the comments. It sounds like in the long term, just not issuing duplicate queries on the user side is the way to go :wink: 

> In this case, the fact that the identical queries aren't being subtracted is probably a bug

Do we want to label this a bug? Otherwise it can probably be closed.
",devknoll,2015-09-01 16:12:43
140,2015-08-24 16:46:30,"@devknoll do you have a good repro case that you could share? 
",josephsavona,2015-09-01 16:12:43
140,2015-08-24 16:58:52,"@josephsavona Dead simple repro case here: https://github.com/devknoll/relay-starter-kit/tree/duplicate-queries

You can imagine a more sophisticated scenario where e.g. a Header queries for a Viewer's user for name, profile picture, and then some other component (e.g. a Newsfeed comment box) also needs the viewer profile picture. In such a case, the data would be requested twice.
",devknoll,2015-09-01 16:12:43
140,2015-08-24 17:42:46,"That was easy ;-) - thanks!
",josephsavona,2015-09-01 16:12:43
140,2015-09-01 16:12:43,"I'm going to close this out for now.

> we've found that most queries don't actually subtract out

This seems true and I only ran into this issue because I was doing something weird. Happy to reopen if necessary, but doesn't seem like a huge issue right now.
",devknoll,2015-09-01 16:12:43
139,2015-08-21 19:30:08,,ning-github,2015-08-21 22:51:29
138,2015-08-21 19:17:19,"On master, I'm seeing field aliases that look like `_0NaN`. Seems to be due to https://github.com/facebook/relay/blob/master/package.json#L31 being used over the one in fbjs.

Not quite sure which one we _want_ to be using, but the crc32 on npm returns a base16 string :smile: 

@yungsters @yuzhi 
",devknoll,2015-08-21 23:49:01
138,2015-08-21 19:38:41,"Thanks for bringing this up. I thought I removed those lines in https://github.com/facebook/relay/pull/122/

Will investigate!
",yuzhi,2015-08-21 23:49:01
138,2015-08-21 19:45:37,"Oops, you're right :smile: 
",devknoll,2015-08-21 23:49:01
138,2015-08-21 23:49:01,"merged it again here https://github.com/facebook/relay/pull/142
",yuzhi,2015-08-21 23:49:01
138,2015-08-22 04:11:13,"Thanks :)

Sent from my iPhone

> On Aug 21, 2015, at 4:49 PM, Yuzhi notifications@github.com wrote:
> 
> Closed #138.
> 
> —
> Reply to this email directly or view it on GitHub.
",devknoll,2015-08-21 23:49:01
137,2015-08-21 19:14:39,"I fixed a typo by removing the word 'was'. This is the only change that I made in the repo.
",lyip1992,2015-08-21 22:52:22
136,2015-08-21 18:01:19,"Relay was built to support server-side rendering, and we are doing so internally at Facebook. @voideanvalue gives a great overview of [how that works](https://github.com/facebook/relay/issues/36#issuecomment-130402024). However, the necessary hooks and APIs are not exposed in the OSS release. A future update to Relay will provide support and documentation for this feature.
",josephsavona,2016-06-22 01:47:56
136,2015-09-02 23:16:40,"I'm not sure if this is the right place to report this, but the `whatwg-fetch` dependency coming from `fbjs` means that `react-relay` currently can't be imported in Node.

I believe this can be fixed by switching https://github.com/facebook/fbjs/blob/cb1f3026bcc3852616fad85b8aa12dca554fb093/src/__forks__/fetch.js#L14-L15 to use `isomorphic-fetch`, which does the right thing (mostly).
",taion,2016-06-22 01:47:56
136,2015-09-23 17:38:00,"@taion is right, when I try to use server rendering, I get this error:

<S_CODE_TOKEN>

which is what you get when you use `whatwg-fetch` instead of `isomorphic-fetch`: https://github.com/github/fetch/issues/125

Is there any workaround?
",adriantoine,2016-06-22 01:47:56
136,2015-09-23 18:02:03,"I just tried to locally change my node modules and to replace (inside `fbjs/lib/fetch.js`, and I installed `isomorphic-fetch` as well):

<S_CODE_TOKEN>

by:

<S_CODE_TOKEN>

and my app seems to ""isomorphically"" work fine, so that was the only thing preventing me from rendering relay components on server side.

I guess `fbjs` is used by other projects so it's probably not safe to change it now, however `isomorphic-fetch` is built on top of `whatwg-fetch` so it might be alright.

Is this going to be addressed soon?

Thanks!
",adriantoine,2016-06-22 01:47:56
136,2015-09-24 15:26:29,"Yeah, this same issue affects using Relay on React Native

@yungsters @zpao - should we require that users bring their own `fetch` polyfill? Another option would be to split `RelayDefaultNetworkLayer` into its own package.
",josephsavona,2016-06-22 01:47:56
136,2015-09-24 16:20:31,"I don't think splitting out `RelayDefaultNetworkLayer` is going to help - unless I'm missing something, I'm still going to want to import that when using Node anyway, so it just moves the problem around instead of fixing it.

The nice thing about using `isomorphic-fetch` is that it's something of a de facto solution for web things, since it will just work. With React Native, I assume attempting to use `isomorphic-fetch` will just be a no-op; is that not the case? Any web use cases are going to be using `isomorphic-fetch` anyway, so I feel like it'd be easier if that were just bundled, assuming it doesn't break RN.
",taion,2016-06-22 01:47:56
136,2015-09-24 17:21:57,"I had looked at node fetch modules when @steveluscher did this initially. We sort of brushed off the node case. But it's obviously an issue people are having.

I hadn't seen `isomorphic-fetch` at the time, I sort of like that. The only problem with it is that afaik, it's not going to be awesome for browser packaging when using Webpack (unless that has started reading the `browser` field in `package.json`). Browserify should be fine though. I'd like to hear from Webpack experts about what would need to be done (my concern is not for us consuming it here but for the end user app consuming Relay).

For React Native… I'm not sure. The node one uses node APIs and maybe we bring in some shimming so that packaging works but I also wouldn't be surprised if we don't. Would want to talk to experts. There might already be a `fetch` polyfill implemented in the RN runtime and if it uses the `browser` package there maybe it _just works_.

Seems like we can probably move the fetch discussion elsewhere since it's not really the point of this issue, just a piece of the puzzle.
",zpao,2016-06-22 01:47:56
136,2015-09-30 16:51:59,"@zpao https://facebook.github.io/react-native/docs/network.html#fetch
",devknoll,2016-06-22 01:47:56
136,2015-10-01 09:04:42,"I was trying server rendering with Relay, using all hints which were provided in github answers:
- [change `fetch` to `isomorphic-fetch`](https://github.com/github/fetch/issues/125) in fbjs package
- [add document error handler](https://github.com/facebook/fbjs/pull/59/commits) in fbjs package.

And after that I have issue [with two versions of React](https://github.com/facebook/react/issues/2402), which I can not resolve, because I delete react node_module everywhere where it was used, and still have this error.

So, does  somebody has an example of simple server rendering with Relay and GraphQL? Or, does somebody has success in server rendering with Relay + GraphQL. Thank you.
",mikhail-riabokon,2016-06-22 01:47:56
136,2015-10-06 09:53:12,"Actually fetching data with Relay + GraphQL is working, the problem in render Relay components. 
I have created the [repository](https://github.com/mikhail-riabokon/relay-server-rendering) where you can check and see this problem.
",mikhail-riabokon,2016-06-22 01:47:56
136,2015-10-06 12:57:52,"@mikhail-riabokon it won't work until https://github.com/facebook/fbjs/pull/61 is merged
",adriantoine,2016-06-22 01:47:56
136,2015-10-06 13:00:34,"@adriantoine Yes. I know it, but fetch is not only one problem with Relay on server.
",mikhail-riabokon,2016-06-22 01:47:56
136,2015-10-06 13:02:40,"My repo example includes node_modules where I changed this packages, just for test. 
",mikhail-riabokon,2016-06-22 01:47:56
136,2015-10-21 21:33:36,":+1: 

Do we have any updates on this? Spent the past 2 days trying to figure out how to use Relay Isomorphically...
",RavenHursT,2016-06-22 01:47:56
136,2015-10-21 21:46:51,"This is slowing my team up. I would love to see a solution. From what I can tell the issue is with react-native: https://github.com/facebook/fbjs/issues/60
",dcomcto,2016-06-22 01:47:56
136,2015-10-21 22:05:59,"We've sort of derailed this issue I think. Ultimately those `fetch` issues are peripheral to the real question of providing the relevant hooks.
",taion,2016-06-22 01:47:56
136,2015-10-22 00:33:30,"@RavenHursT 

> Do we have any updates on this?

I don't believe anybody is actively working on this internally right now (although this issue is currently assigned to @voideanvalue he's working on other stuff presently). It's possible that providing support to an external contributor who wants to work on this might get us there faster than doing it ourselves.
",wincent,2016-06-22 01:47:56
136,2015-10-22 21:14:56,"@wincent I'm more than willing to give a hand.. can you or @voideanvalue give me a starting point or two where I could start spelunking into the problem?
",RavenHursT,2016-06-22 01:47:56
136,2015-10-29 00:16:52,"I guess the problem is that Relay Containers are rendered on server side (with `{renderToString} from 'react-dom/server'`) as `<noscript>` tags. This causes components expecting child elements in these containers throw error `TypeError: Cannot read property 'firstChild' of undefined` because `<noscript>` has no children.
@mikhail-riabokon This is actually caused by [react-router-relay](https://github.com/relay-tools/react-router-relay) library, because its returning `null` [here](https://github.com/relay-tools/react-router-relay/blob/master/src/Container.js#L74). Probably it should somehow delay execution of [routeAggregator.getData](https://github.com/relay-tools/react-router-relay/blob/master/src/Container.js#L35).
",madeuz,2016-06-22 01:47:56
136,2015-10-29 02:15:26,"@RavenHursT: Are you still interested? https://github.com/facebook/relay/issues/36#issuecomment-130402024 spells out what's needed on a high level. I'm happy to help out by answering any questions that you might have.

(Sorry for the delayed response, I haven't been actively following this repo.)
",voideanvalue,2016-06-22 01:47:56
136,2015-10-29 19:09:43,"I definitely am.  My team really does need to get server-side rendering with Relay/React by the end of Q12016.  @voideanvalue I'll definitely ping you with any questions I come across.  Thanks!
",RavenHursT,2016-06-22 01:47:56
136,2015-11-09 09:32:20,"Any update on this?
",davide-ganito,2016-06-22 01:47:56
136,2015-11-10 18:59:54,"Glad to report that I have just managed to implement server side rendering for Relay: https://github.com/denvned/isomorphic-relay

Here is an example: https://github.com/denvned/isomorphic-relay/tree/master/examples/star-wars

@voideanvalue, can you please have a look? And thank you for the great [info](https://github.com/facebook/relay/issues/36#issuecomment-130402024). It helped me very much!
",denvned,2016-06-22 01:47:56
136,2015-11-18 22:39:42,":+1: 
",RavenHursT,2016-06-22 01:47:56
136,2016-01-08 22:47:55,"Any word on this? Anyone on the Relay team working on this at all yet?
",aweary,2016-06-22 01:47:56
136,2016-01-10 02:13:07,"I'm wondering the same. Most other third party implementations get the job done, but fall under certain scenarios.
",alewaros,2016-06-22 01:47:56
136,2016-01-10 03:56:19,"With the help of the community we've made good progress towards this. The main prerequisite is making all Relay state contextual instead of global, so that the same node process can be used to handle HTTP requests from multiple users. Almost all modules have been converted and there are pending PRs for the remaining pieces. We're tracking that work in #558. 
",josephsavona,2016-06-22 01:47:56
136,2016-01-11 16:21:13,"Thanks @josephsavona, exciting to see so much progress on this. I'll keep an eye on #558 :+1: 
",aweary,2016-06-22 01:47:56
136,2016-05-27 07:54:54,"Hello, what is the current state of this issue? I'm currently doing research on how to integrate relay into our react infrastructure and was wondering if ss-rendering is now easily possible?
",danez,2016-06-22 01:47:56
136,2016-05-27 09:58:09,"#558 is closed. That means it should work now?
",andyhu,2016-06-22 01:47:56
136,2016-05-27 12:20:09,"#559 is the next step in making SSR work, per the comments in #558
",aweary,2016-06-22 01:47:56
136,2016-05-27 15:55:49,"@andyhu server rendering does work today, check out https://github.com/denvned/isomorphic-relay
",josephsavona,2016-06-22 01:47:56
136,2016-05-27 15:59:50,"@josephsavona do you guys think that `isomorphic-relay` is ready for production as far as you know?
",aweary,2016-06-22 01:47:56
136,2016-05-27 16:05:27,"I haven't used it personally (yet), but from my external perspective it looks pretty good.
",wincent,2016-06-22 01:47:56
136,2016-06-20 13:35:56,"Up!
",DenisIzmaylov,2016-06-22 01:47:56
136,2016-06-21 10:41:56,"Any news on that?
",rdewolff,2016-06-22 01:47:56
136,2016-06-21 16:05:50,"@DenisIzmaylov @rdewolff Our current recommendation is to use `isomorphic-relay` alongside Relay if you need server rendering right now.
",josephsavona,2016-06-22 01:47:56
136,2016-06-22 01:47:56,"This looks closeable to me now, so going to close it.
",wincent,2016-06-22 01:47:56
136,2016-06-22 01:48:55,"Are there any plans to eventually bring that support into the main Relay repo, or will it remain a third-party thing for the time being?
",taion,2016-06-22 01:47:56
136,2016-06-22 01:54:07,"No immediate plans. We very much like the idea of having a small, well-defined core, upon which and with which other stuff can be straightforwardly built. (Note: this is more aspirational than reality at the moment, but we are working on it.)
",wincent,2016-06-22 01:47:56
135,2015-08-21 17:01:00,"As mentioned in title, If I wanna do pagination like here
https://github.com/transedward/relay-chat/blob/add-pagination/js/components/MessageSection.js#L60
I use `this.props.relay.setVariables` to add number by 1 when I click Load More
But I also have a AddMessageMutation, if I didn't change `fragments` and `getFatQuery` then 
the new added message won't be counted in `last: $number`, which caused the loaded message disappeared by one.
What I wanna is pass a number here https://github.com/transedward/relay-chat/blob/add-pagination/js/components/MessageComposer.js#L49
So AddMessageMutation would how much messages currently there is, then I wanna add it by one
when adding new message
But since `prepareVariables` is a static method for AddMessageMutation, I can't pass props into it.
Is there any way I can fix that?
",transedward,2015-09-09 00:18:59
135,2015-08-24 15:27:22,"#146 seems related - cc @steveluscher 
",josephsavona,2015-09-09 00:18:59
135,2015-08-24 17:09:13,"to be more specific, 
I don't think it's related with #146
I have done with the [Load more](https://github.com/transedward/relay-chat/blob/add-pagination/js/components/MessageSection.js#L37) and it works as expected as like in fb messenger
it would load more when you hit load more(or scroll position in reality) as long as you didn't type new message
You can easily using `this.props.relay.setVariable` in component [as show here](https://github.com/transedward/relay-chat/blob/add-pagination/js/components/MessageSection.js#L60)

But you can't do that with `Relay.Mutation` Because `initialVariables` and `prepareVariables` is at `static` level, you can't pass anything to that, so you can't influence `variables` in Mutation [`fragments`](https://github.com/transedward/relay-chat/blob/add-pagination/js/mutations/AddMessageMutation.js#L6)
I am not sure if that is a purpose design. If so, how do you solve the issue about `mutation cause a variable in fragments changed`
If I don't handle that, `AddMessageMutation` would cause new message attached in `MessageSection` but the total number to be shown is the same, so the top message would disappear accordingly.
",transedward,2015-09-09 00:18:59
135,2015-08-24 22:35:07,"I think I understand what you're trying to do here. Perhaps the right thing to do is to delegate back to the parent when you know that a message has been created. By then, your optimistic mutation will have been applied, so the parent can increment the counter to accommodate it.

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",steveluscher,2015-09-09 00:18:59
135,2015-08-25 05:03:17,"Thanks @steveluscher 
But in my opinion, I'm sure this is ""good enough"" for an ideal API
In Relay doc, it's encouraged to put all relevant and influenced field in `Mutation getConfig` 
And in this case, it's the `AddMessageMutation` cause the field the variable change,
but the handler in on upper component, which I think it's a little bit suboptimal
Why not let `variables` in `Mutation` being a instance method and let `Mutation input` named something else like `getInputs`
If you think this is worth discussion, I will close this one and open another issue.
If not, you can close this issue since my original question is solved
",transedward,2015-09-09 00:18:59
135,2015-09-09 00:18:59,"I think we need to consider ‘variables’ and ‘fields’ separately.

It's true that you should declare any required fields in a mutation to guarantee that they get rolled up into the root query. This way, you can be sure that whatever data you need to perform the mutation and generate the optimistic response will have been fetched when you need it.

Variables on the other hand, I'm not sure. I'm going to stick with the recommendation above for now. If you end up coming up with something that you think works better, and in general, feel free to bring it up, or send us a PR.

Thanks!
",steveluscher,2015-09-09 00:18:59
134,2015-08-21 12:51:46,"Hi All, 
this question is not tech related.
I am trying to understand how the whole react-relay work so that I know how to structure the way I handle project.

Normally my practice is to ounderstand client requirement, then build wire-frame for agreement. After which will get Designer to draft some art work for the system. 
Then we will make Hardcoded in HTML to let customer click and check page by page. Only then finally we insert data and action to the html to make he whole thing work.

After reading the example, I somehow feel relay must come with Database and schema before component. 

My question is, can we make some hardcoded component to build up the look n feel of the system then only insert data?

With the current way, I really confuse, and don't know how to start.

Thanks.
",spyalert01,2015-08-21 18:09:55
134,2015-08-21 17:08:04,"> After reading the example, I somehow feel relay must come with Database and schema before component.

Relay does require that you implement a GraphQL server to provide data to the application. If you want to use Relay for a prototype, you might consider building a simple server that provides sample data. A good place to start with this approach is the [relay-starter-kit](https://github.com/facebook/relay-starter-kit).

However, it sounds like the easiest option is to start off by just building plain React components first, and only add a GraphQL server and Relay for data-fetching later on.
",josephsavona,2015-08-21 18:09:55
134,2015-08-21 18:09:55,"Feel free to reopen if you have additional questions.
",josephsavona,2015-08-21 18:09:55
134,2015-08-22 01:25:20,"@josephsavona  thanks
",spyalert01,2015-08-21 18:09:55
133,2015-08-21 02:39:54,"Hi, 
When we learn about store and action. We understand that we can make component listen to store. And one component can listen to multiple store. 
When one component is updated, the component that listen to the same store will be updated autoamatically because it subscribed to the same store.

I am wondering, how can we do the same for this in Relay?
",spyalert01,2015-08-21 02:56:03
133,2015-08-21 02:54:31,"Relay automatically sets up subscriptions so that [Container](http://facebook.github.io/relay/docs/guides-containers.html#content)s update whenever the data they are rendering changes - either due to a refetch or a mutation. Containers also implement an efficient `shouldComponentUpdate` that prevents re-rendering when data hasn't changed.
",josephsavona,2015-08-21 02:56:03
133,2015-08-21 02:56:03,"thanks. will take a look
",spyalert01,2015-08-21 02:56:03
132,2015-08-20 23:14:30,"Currently, if you have pass a route into a `RootContainer` that has n queries, then n fetches are made to the server.

This actually seems like an issue that should be resolvable before the query even hits the network layer, so fixing it should mean good things even for custom network layers!

@yungsters @josephsavona @dschafer Is there any fundamental problem with just generating a union of the queries in `processQueue` before sending them off? Is this compatible with future plans for `@defer`'d queries?
",devknoll,2015-08-24 20:20:06
132,2015-08-20 23:24:19,"Good question: there is no technical reason why multiple queries can't be grouped together. In fact, our internal network layer sends multiple queries in a single request. We simply didn't have time to implement this for OSS before the preview release. This is on the list of upcoming improvements, along with deferred queries.
",josephsavona,2015-08-24 20:20:06
132,2015-08-24 17:09:14,"Actually, putting a little more thought into this, it might not be as trivial as just always generating a union of the queries. At least on a desktop with a fast internet connection, you might actually get improved performance by hitting multiple endpoint servers in parallel rather than waiting for a single one to complete all of the work.

On a mobile device where connection latency is high, this would probably be less true though. This just means that this might have to be a configurable option, rather than a rule.
",devknoll,2015-08-24 20:20:06
132,2015-08-24 20:20:06,"A union is just one option, but it definitely is more performant to batch queries in a single request. I'm going to close this issue, but we'll continue to improve query batch going forward. 
",josephsavona,2015-08-24 20:20:06
131,2015-08-20 16:23:34,"We were a bit too hasty with this change; our bad. It's conceivable that a Relay Container could specify a fragment that contains fields or not, depending on the active route. In fact, this is how some of our internal apps are built; some routes contain a subset of a container's available fragments, with the knowledge that those fragments won't apply when that route is active.

I'll reopen #20 so we can continue talking about this.

Reverts facebook/relay#49
",steveluscher,2015-08-20 16:37:12
131,2015-08-20 16:28:40,"@steveluscher Yeah, I was worried that it would be a little too strict -- https://github.com/facebook/relay/pull/49#discussion_r37269845. Shall I open a PR that just requires that the route provides everything the container wants instead?

cc @josephsavona
",devknoll,2015-08-20 16:37:12
131,2015-08-20 16:31:04,"Unfortunately, that's exactly the thing that's breaking some of our apps. A container might have `foo` and `bar` fragments, but when `FooRoute` is active there's no need for the `bar` fragment. The `FooRoute` in this case doesn't have a `bar` fragment, and this invariant gets tripped.
",steveluscher,2015-08-20 16:37:12
131,2015-08-20 16:32:09,"Ahhh, right, that makes total sense, sorry about that. Thanks for the extra clarification :+1: 
",devknoll,2015-08-20 16:37:12
130,2015-08-20 09:42:42,"If we are building a bigger application where we have several module, we may be defining a few schema, and hence has multiple schema.json files.

How can we make sure all these schemas are properly loaded?
",spyalert01,2015-08-21 00:08:24
130,2015-08-20 15:25:20,"Can you elaborate more on why you need multiple schemas? GraphQL is designed to support multiple backends within the same schema. Unfortunately, Relay currently does not support multiple schemas in one application. However, it maybe possible in the future as we support data from multiple sources (see #114)
",yuzhi,2015-08-21 00:08:24
130,2015-08-20 15:53:30,"When dealing with bigger application, we may need to group schema based on module requirement, the schema.js file may be big and messy when handle bigger application if we can't group it.

it will make thing hard to maintain as well.

Just like when we are doing MVC, we can have many M.
",spyalert01,2015-08-21 00:08:24
130,2015-08-20 16:13:53,"It's natural to split your schema definition into multiple files. However, you'll still have one file that imports all these type definitions and defines the root and mutation types. 
",josephsavona,2015-08-21 00:08:24
130,2015-08-20 16:35:27,"Wouldn't it take too much memory / space, if we keep importing those schema that we don't need at certain point of time?
",spyalert01,2015-08-21 00:08:24
130,2015-08-20 17:10:12,"It won't! You see, from the perspective of the client code, the `schema.json` is only used to compile `Relay.QL`…`;` expressions. If you make no mention of one part of your schema in a `Relay.QL` expression, then no extra bytes will be compiled into your client code.

On the server side, a larger schema will take up more memory on your server, but as compared to other parts of your app, you should be able to let that schema file grow as large as you like without consequences.

We recommend having one schema that describes your entire data universe. Relay will use only the parts of that query it needs to compile client code, and will generate requests to your `/graphql` endpoint that query only those parts of the schema necessary to resolve data for your running app.
",steveluscher,2015-08-21 00:08:24
130,2015-08-20 23:01:51,"Is React Relay suitable to build medium to large size application using React+Relay?
Example a Mini ERP System or a Retail Chain Management System, that involve End to End process of a business?
I used to do this in PHP.
",spyalert01,2015-08-21 00:08:24
130,2015-08-21 00:08:24,"Relay is in use in Facebook's Groups and Mobile Ads Manager apps, as well as a number of products currently under development. It's working well for us, and we hope that it works just as well for you!

If you have any more questions about using a GraphQL schema with Relay, feel free to reopen this issue, or open a new one on a new topic.
",steveluscher,2015-08-21 00:08:24
129,2015-08-20 09:39:32,"So far most of the example uses

<S_CODE_TOKEN>

This is actually run time generation. WebpackDevServer should be more for Development. If we want to have the same for production,
1. How should we rewrite the server.js?
2. webpack.config.js?

Thanks
",spyalert01,2015-08-20 17:02:46
129,2015-08-20 17:02:46,"There are many ways to go to production, and Webpack is only one of them. If you chose to go with Webpack to build your static assets, the configuration that you see in `server.js` would make up most of your `webpack.config.js`:

<S_CODE_TOKEN>

Running `webpack -p` with that config should yield a productionized JavaScript bundle that you can include in your HTML file and serve using any server you like (express, nginx, et cetera).

From that point, you might want to investigate features like [code splitting](http://webpack.github.io/docs/code-splitting.html) and [multiple entry points](http://webpack.github.io/docs/multiple-entry-points.html) to split up your bundles as your app grows.

I hope that this gives you a headstart. To learn more about how others are deploying their React applications in production, consider asking around on the Reactiflux Slack. There's a #webpack group in there. You can sign up here: http://www.reactiflux.com/
",steveluscher,2015-08-20 17:02:46
129,2015-08-21 09:03:26,"HI @steveluscher 
Thanks for your answer. 
The part that you show, I understand, and I know how to deal with it. But how about the part that I show. How can I move that part out from server.js to webpack.config.js?
",spyalert01,2015-08-20 17:02:46
129,2015-08-21 14:07:56,"@spyalert01 

The part that you show in your original example is creating a development http server. The settings you are passing to `WebpackDevServer` are not relevant to a production server deployment.

As @steveluscher said, you can use `webpack -p` to have Webpack bundle all of your assets (in the exmaple `webpack.config.js` this would output `app.js`). Then, you would have your production web server, `express` for example, serve the bundle generated by Webpack, `app.js`, alongside your index.html page (and other static non-bundled assets).

Webpack does not provide a production web server, it just bundles your assets together. You must then serve those bundled assets yourself. See [this blog post](http://christianalfoni.com/articles/2015_04_19_The-ultimate-webpack-setup) for examples on how to set this up.
",fortruce,2015-08-20 17:02:46
129,2015-08-21 14:22:37,"@fortune
so 
var app = new WebpackDevServer(compiler, {
  contentBase: '/public/',
  proxy: {'/graphql': `http://localhost:${GRAPHQL_PORT}`},
  publicPath: '/js/',
  stats: {colors: true}
});
must be in the server.js in order to interact with GraphQL data right?

I brought this up because I read some article saying webpackdevserver is for development environment. Not for production as it will slow down the system. 

Which I also realise on the star-wars, and treasurehunt, it really take time to start the server for testing purposes.
",spyalert01,2015-08-20 17:02:46
129,2015-08-21 14:30:29,"Right, `WebpackDevServer` is for development only!
It is used in the examples because it does not require any additional packages such as `express` or any other server implementation and provides easy logging to the command line. It is not recommended to use it for any form of a production webserver!

Have a look at [relay-starter-kit](https://github.com/relayjs/relay-starter-kit) which is a nice starting point for a new relay application.
",clentfort,2015-08-20 17:02:46
129,2015-08-21 14:33:21,"@spyalert01 
You should use a completely separate `server.js` file for production. You do not want to include anything webpack specific in your production `server.js`. Webpack is a build step - you should use it to generate the final application bundle you then serve.

For example, your production `server.js` might be simply:

<S_CODE_TOKEN>

This is assuming you have copied the bundled assets generated by webpack, your `app.js` output of `webpack -p`, to the `public/` directory.
",fortruce,2015-08-20 17:02:46
129,2015-08-21 14:36:17,"I see. thanks
",spyalert01,2015-08-20 17:02:46
129,2015-11-06 20:29:07,"Hi all,
I'm struggling here. I have a Relay app working perfectly when running locally. But when I use webpack to generate my production build, I keep getting this error in the console.

<S_CODE_TOKEN>

This is my production webpack config:

<S_CODE_TOKEN>

I am running my build with the following command:

<S_CODE_TOKEN>

Any help would be appreciated.
",chiedo,2015-08-20 17:02:46
129,2015-11-06 20:45:16,"LOL. Wow. The above was working, I just had a typo.

'static', 'dist'

should have been

'dist', 'static'
",chiedo,2015-08-20 17:02:46
129,2015-11-07 03:34:56,":+1: 
",steveluscher,2015-08-20 17:02:46
129,2016-06-15 14:46:51,"@standardtoaster is there a recipe how to do code splitting and the stuff like this (taken from [rsk](https://github.com/kriasoft/react-starter-kit)):

<S_CODE_TOKEN>
",koistya,2015-08-20 17:02:46
129,2016-06-15 15:26:26,"@standardtoaster correct me if I'm wrong, if you're using code-splitting, you can perform a GraphQL/Relay query only after the component was loaded into run-time? (e.g. you can't download data and some component that requires that data at the same time)
",koistya,2015-08-20 17:02:46
128,2015-08-20 07:52:14,"I have been working on this chat example and now it's working as flux-chat
Feature Highlight:
1.  use with `relayNestedRoutes` and `React Router` to let multiple routes and route params as query params work
   https://github.com/transedward/relay/blob/master/examples/chat/js/app.js#L39-L48
2. using `route params` as global state variable (ex: currentThreadID), not ideal for now, but it shows a 
   different possibility
3. and a more complicated model structure as `user->threads->messages`

Currently the code maybe a little bit messy, but I would hear some feedback and advice from anyone
Thanks in advance!
",transedward,2015-08-25 15:30:28
128,2015-08-20 23:50:42,"I haven't had the chance to look through all the code yet, but thank you for contributing!
",yuzhi,2015-08-25 15:30:28
128,2015-08-25 13:26:17,"I have added some pagination example for pagination [here](https://github.com/transedward/relay-chat)
and not sure if I should add it in this PR.
I hope to get some feedback.
",transedward,2015-08-25 15:30:28
128,2015-08-25 15:19:59,"The Relay code looks pretty good to me. Can you include the pagination code in this PR too so I can take a look at the whole thing at the same time?
After discussing with my teammates, we decided that in order to ensure the long-term maintainability of everything in the Relay repo, we are not planning on adding any more examples (we might move the existing examples to a different repo in the future). However, we’ll be happy to take a look at and review code for new examples. We definitely want to encourage you to start a new repo with this awesome example.
Thank you so much for working on this. We are excited that you found Relay interesting and implemented an chat example. I think a lot of people will find it useful. 
",yuzhi,2015-08-25 15:30:28
128,2015-08-25 15:30:22,"thanks, @yuzhi nice to hear. I had one already. and below is how I do pagination on messages
https://github.com/transedward/relay-chat/blob/add-pagination/js/components/MessageComposer.js#L53-L60 how I add on `onFailure`

https://github.com/transedward/relay-chat/blob/add-pagination/js/components/MessageSection.js#L66-L74 `the handle callback passed from upper component`

I would keep developing this example for future feature like server-side rendering...
and any one interested can follow [here](https://github.com/transedward/relay-chat).

I am also looking forward for future development of Relay, hoping it will be more mature and bringing benefit for everyone using it.
",transedward,2015-08-25 15:30:28
127,2015-08-20 04:00:29,"I think RelayContainer depends on `React.unstable_batchedUpdates` which doesn't appear to be available under react-native. Instead it is `React.addons.batchedUpdated`.
",amccloud,2015-09-17 01:00:15
127,2015-08-20 22:57:40,"@zpao What is the best approach here?
",josephsavona,2015-09-17 01:00:15
127,2015-08-20 23:02:09,"This ties into the work that needs to be done to get react native all on board with react 0.14 and no longer providing their own override. (eg, you would do `require('react')` to create classes, the same way you do on web - that would be the isomorphic react, then `require('react-native')` gives you something else, like the renderer a la `require('react-dom')`).

cc @spicyj @sebmarkbage who have been working on this.

Not sure how far out that is, but perhaps React Native can just add `unstable_batchedUpdates` to their React overrride.
",zpao,2015-09-17 01:00:15
127,2015-08-20 23:03:17,"Yes, the react-native package should expose that helper.
",spicyj,2015-09-17 01:00:15
127,2015-08-20 23:13:52,"@zpao Gotcha. Explains why I had to alias react to react-native to use relay.
",amccloud,2015-09-17 01:00:15
127,2015-09-11 11:16:32,"Ran into this issue when working through the react-treasurehunt example on Windows.

I don't have a deep enough understanding to figure out why unstable_batchedUpdates is undefined, but I modifed `injectBatchingStrategy` in `GraphQLStoreChangeEmitter.js` to get the example to work properly.

<S_CODE_TOKEN>
",timkrins,2015-09-17 01:00:15
127,2015-09-11 13:59:12,"Ah, my particular issue is fixed in commit 2d82240. Note, this was unrelated to React Native.
",timkrins,2015-09-17 01:00:15
127,2015-09-11 16:12:59,"On React Native you'll temporarily need to add a file called ReactDOM.js:

<S_CODE_TOKEN>

but I was under the impression that the open-source Relay package has a couple other problems before it can be used directly in React Native…
",spicyj,2015-09-17 01:00:15
127,2015-09-11 16:28:15,"@spicyj Very few. This was one of the main issues. I am successfully using relay with react-native. I use webpack so I aliased react to react-native. I also had to include https://github.com/johanneslumpe/react-native-browser-polyfill
",amccloud,2015-09-17 01:00:15
127,2015-09-11 16:49:29,"I'm not sure why you would need a `self` global…
",spicyj,2015-09-17 01:00:15
127,2015-09-17 01:00:15,"It looks like the original issue is fixed. Feel free to reopen or file a new task if there's more to be done here (other than that covered by #26).
",steveluscher,2015-09-17 01:00:15
126,2015-08-20 03:29:17,"Specifically talking about this field:

https://github.com/facebook/relay/blob/2a86be3e71cdc6511fa994e3de539f72070da1b4/examples/todo/data/schema.js#L173

I can't find a reference to it in the client code at all.

Is it just unused? If so, maybe it could have a comment (or be removed?)
",mhart,2016-06-28 00:01:14
126,2015-08-20 18:20:50,"Thanks for pointing this out! It is unused in the current implementation, but the current implementation also refetches the todos, whether or not their `complete` flag has been flipped. This would also work:

<S_CODE_TOKEN>

…but having to specify at least one `id` for `changedTodos` in `fieldIDs` is awkward, especially because this mutation is designed to make supplying the actual todos optional.

Maybe there's something else that we could do here, like:

<S_CODE_TOKEN>

… to signal that we want to intersect the fat query with the union of all the tracked queries for this type, and send the resultant query up with the mutation.

Thoughts, @yuzhi @joesavona, @yungsters?
",steveluscher,2016-06-28 00:01:14
126,2015-09-04 18:44:09,"I think the correct way to deal with this is to fetch `completedCount` on `viewer { todos }` as in your snippet. I think we can get rid of `changedTodos` because it never makes sense for a field on the client to be updated by it.
",yungsters,2016-06-28 00:01:14
126,2016-06-28 00:01:14,"> …it never makes sense for a field on the client to be updated by it.

But we do need to update the `complete` field on each changed todo.

This has been implemented in https://github.com/relayjs/relay-examples/pull/2
",steveluscher,2016-06-28 00:01:14
126,2016-06-28 00:12:15,"@steveluscher that repo doesn't seem to exist (or is private?)
",mhart,2016-06-28 00:01:14
126,2016-06-28 01:16:13,"@zpao is https://github.com/relayjs/relay-examples private?
",mhart,2016-06-28 00:01:14
126,2016-06-28 02:38:03,"It's private, for a few moments longer. Stay tuned!

> On Jun 27, 2016, at 5:12 PM, Michael Hart notifications@github.com wrote:
> 
> @steveluscher that repo doesn't seem to exist (or is private?)
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",steveluscher,2016-06-28 00:01:14
126,2016-06-28 20:13:57,"Cool, I can see it now, thanks!
",mhart,2016-06-28 00:01:14
125,2015-08-20 03:20:19,"Probably stemming from a lack of understanding, but is there a reason that `getFatQuery` needs to be so fine-grained and nested and not just rely on the server to send back the fields that have changed (possibly with a little help from the client by just specifying a query root or similar)?

(I'm thinking of things like https://github.com/facebook/relay/blob/master/examples/todo/js/mutations/MarkAllTodosMutation.js#L26-L37 )

It feels like the client needs to have a lot of knowledge of what fields the server will actually change, which makes it harder to change behaviour on the server without also updating the clients – I get this is generally true for traditional REST APIs, but I kinda feel like GraphQL could be smarter than that?

Possibly the same is true for `getConfigs` – is there no way for the server to signal to the client what it did?
",mhart,2015-11-02 17:54:46
125,2015-08-20 03:31:14,"I think it would make a lot of sense for `getFatQuery` and `getConfigs` to live on the server rather than on the client, because they're not properties of the client at all.

I don't think it's possible for the server to know in the general case what fields have changed, and what updates should be made. Imagine my GraphQL server is just calling out to a bunch of REST servers; there's no way in general for it to know a priori what fields are going to change - at best it'd have to receive the response from the REST server and do a deep diff operation, which seems potentially quite tricky and fragile in practice.
",taion,2015-11-02 17:54:46
125,2015-08-20 17:12:29,"> I don't think it's possible for the server to know in the general case what fields have changed, and what updates should be made.

Yup! That's exactly the reason for `getFatQuery` and `getConfigs`; it's impractical for GraphQL to understand how a given mutation may directly or indirectly affect the data model. That said, we are exploring the possibility of moving some of the configuration to the server.
",josephsavona,2015-11-02 17:54:46
125,2015-08-20 17:22:14,"> it's impractical for GraphQL to understand how a given mutation may directly or indirectly affect the data model

I mean, I get this, but how can the same thing not be said about the client? Even more so because it's not actually the one modifying the data – the server is.

Whether the server can figure it out automatically or whether you just specify it explicitly as part of a mutation (in your schema), it definitely feels more like a server responsibility.

> we are exploring the possibility of moving some of the configuration to the server

Cool! Any discussion of what this might look like anywhere?
",mhart,2015-11-02 17:54:46
125,2015-08-20 17:41:20,"Just to elaborate on what Joe mentioned:
Currently we are using `FatQuery` to intersect with queries we’ve fetched so far to figure out the exact set of data want to update with the server response (to avoid over-fetching and under-fetching). It’s unlikely for the server to keep track of what fields each client has fetched. This is especially important when there is a relationship change. For example, let’s say there is a view with a user's profile picture. Once the user does a UpdateProfilePicture Mutation, the server might know that `user.profilePicture` now points to this new `profilePicture`’s id, but it might not know what the client also need the `profilePicture`’s new `url` for a specific size. While the server can send data for all the fields under the `profilePicture`, it can be pretty inefficient and cause cycles. Doing the query intersection on the client side ensures that the new `url` is fetched without including unneeded fields. 

The configs are needed on the client side in order for Relay to know what to do with both optimistic mutations and how to handle the server mutation. It tells Relay whether it need to merged in a field or add a new edge in the beginning of a connection. 

These two things definitely don’t have to be client specific and can live somewhere on the server. However, since it is not part of GraphQL and we need to access to them within Relay, having them in the client seemed like the easiest place for most people to get started.
",yuzhi,2015-11-02 17:54:46
125,2015-08-20 20:53:07,"One more thought here - there's also quite a lot of potential overlap between `getOptimisticResponse` and `getFatQuery` + `getConfigs`. For example, at http://facebook.github.io/relay/docs/guides-mutations.html#optimistic-updates, if you wrote e.g.

<S_CODE_TOKEN>

This would actually contain all the information in `getFatQuery`.
",taion,2015-11-02 17:54:46
125,2015-08-20 21:41:28,"How about `fragments`? Is there some duplicated info there too or is it just me?
",mhart,2015-11-02 17:54:46
125,2015-08-20 22:56:21,"@taion They may look similar in that example because the optimistic payload is very thorough, but keep in mind that optimistic responses are completely optional. Mutations can have simpler optimistic response or no optimistic updates at all. The optimistic response also doesn't tell Relay store where to add edges or what to do with fields that are just a list of ids that are meant to be deleted. One potential thing we might not need from the optimistic payload is the `story.id` since that can be inferred from the `getConfigs`, but I'm not sure how the rest are being overlapped.

@mhart Fragments in mutations are mainly a way to declare what the mutation might need to generate the optimistic payload, which might also include fields that don't need to be in the `fatQuery` or be part of the `getConfigs`. It's similar to how components has fragments to declare what it needs to generate the view. What do you think it is duplicating or does it just look similar to the other ones in the examples?
",yuzhi,2015-11-02 17:54:46
125,2015-08-20 23:03:12,"Understood - I brought that up because it seems like in cases where I do want to specify a very thorough optimistic response, I end up duplicating a lot of work. Maybe this is better handled by some ""mutation helper"" utility that lets me specify both parts in one shot.
",taion,2015-11-02 17:54:46
125,2015-08-20 23:28:08,"Thanks for the feedback. I understand there are a number of pieces going into a single mutation that can seem very daunting to get started. This is definitely one of the more complex problem that Relay is trying to support. Going forward, we'll continue to find ways to improve and simplify the mutation API to make it easier to use without sacrificing features. Hopefully, we've answered why we have `fatQueries` and `getConfigs` in the current version of the mutation API. I'm going to close this issue for now, but we want to encourage more discussions on this. Please continue to open issues if you have more questions about why different parts of the API is needed or have ideas on simplifying them.
",yuzhi,2015-11-02 17:54:46
125,2015-08-20 23:29:42,":+1: I definitely need to get more experience using mutations in anger before I have a sense for what the actual API pain points are, rather than just hypothetical ones.
",taion,2015-11-02 17:54:46
125,2015-11-02 17:54:42,"I've created a new meta-task at #538 to track this and several other issues about the mutations API. Let's continue the discussion there!
",josephsavona,2015-11-02 17:54:46
124,2015-08-19 23:19:07,"I'm reading through the documentation for relay. Great work on this. I understand this is a ""technical preview"" so I wanted to offer some advice.

I find React's api is so dead simple that I felt confident I could use it correctly.

I was expecting similar simplicity with Relay. The api is too complex for me to feel confident in using it. Are there any plans to simplify Relay's API?

To give you an idea, when I imagined Relay before it was released, I was expecting a lot less wiring up of things. I would simply define a graphql query in the container component which Relay would magically merge with queries from other components, make a query off to the server, shell the data back out to components when available. Route and RootContainer feel cumbersome to me. The Mutations api also feels disjointed. I find it hard to understand in what order things happen (lifecycle) and the naming of the methods and everything feels a little off/confusing.

Perhaps I just need to keep reading the docs and it will all become clear. But maybe Relay needs to be crafted with a little more empathy?
",jehoshua02,2015-08-20 22:54:48
124,2015-08-19 23:28:39,"Oh yeah, and I was wondering if components really need to be aware of Relay at all (`this.props.relay`) and if Relay could be refined to instead pass down callbacks for mutations.
",jehoshua02,2015-08-20 22:54:48
124,2015-08-19 23:38:35,"I also appreciate all the work that's gone into this.  However, I've spent a good amount of time with the docs and examples so far and I agree with the points made.  I don't like ""magic"" things, but the API feels very disjoint for Mutations (graphql for most of it but objects with custom types for getConfigs).  The babel-relay-plugin is very frustrating to use since you have to pass it an introspected JSON file.  Also, all of the sub-classing is very awkward, especially where some of it is just to define new static properties.

I walked our local node user group through Relay this week and everyone seemed to agree.
",phated,2015-08-20 22:54:48
124,2015-08-20 02:09:28,"Thanks for you honest feedback. We're always interested in finding ways to make things more approachable and understandable. In general, the most actionable type feedback is example application code that uses your ""ideal"" or desired API. Please feel free to post code or a link to a gist here so we have concrete examples to discuss. 

@jehoshua02, can you provide some example code for your proposed Container API and how that would be different? Note that routes provide a fixed starting point in the graph (query), and containers are reusable (fragment). Also note that `this.props.relay` provides props such as `variables` and `setVariables()` that are necessary for almost any component using Relay.

@phated a couple points:
- `babel-relay-plugin`: The dependency on the instrospection JSON is definitely a limitation. Fortunately, it's a temporary one! Once the `graphql` API stabilizes we'll enable the creation of plugins from JS schema files. 
- As for the mutation API, we agree that less configuration would be good. We plan to improve this API, and would welcome suggestions! 
",josephsavona,2015-08-20 22:54:48
124,2015-08-20 03:45:19,"@josephsavona I'm very glad my plea for empathy was heard. I wasn't sure which way it would go. I'd like to take a whack at proposing ways the api can be simplified after I read the docs more and have some time to play with Relay.

However, in my experience, when I have written some code, especially documentation, I find that following the documentation, pretending I am completely unfamiliar with the library helps me identify how the documentation and especially the code can be polished and refined further. I also wouldn't expect someone else to know how code I've written could be improved better than myself.

That said, I'd still be happy to point out things I struggle to understand, or things that feel awkward, and provide ""dream code"" as long as it is understood that my feedback may be incomplete and feeble at this point.
",jehoshua02,2015-08-20 22:54:48
124,2015-08-20 06:08:43,"I'm fully agreed with @jehoshua02 about hes thoughts about Relay API. My were definitely the same. I think that Routes and Mutations are redundant. More than that currently Relay is tightly coupled with server schema implementation. I do not like all those wrappers for creating GraphQL schema. So it looks like now Relay is tightly coupled to the facebook. On the other hand React API is really awesome and simple. But its only IMO.

@josephsavona 
Please check [my repo](https://github.com/gyzerok/redux-graphql) where I started to create custom implementation of Relay in July before official release.
The motivation was: 
1) bored to wait official release 
2) In Relay you need to provide custom implementation for only-client stores, so you need to use one other framework for it which is bad in my opinion
3) Redux is really awesome and I like to use its devTools even in Relay context
So I've ended up with some Redux-tools implementation which current provides data fetching mechanism. 
I've found [react-redux](https://github.com/rackt/react-redux) idea about Smart and Dumb components quite cool. Generally you create Smart components for your root view tree nodes (which correspondes to routes) and dumb component for other views. You can read more about it in the react-redux docs. So my implementation is kind of react-redux fork.
Readme is currently out of date. Please check `examples` directory to see my ideal api for this.

@jehoshua02 If you interested in more simple API, I would be happy if you can help me in my project. Together we may challenge better API which later on we can provide to Relay team.
",gyzerok,2015-08-20 22:54:48
124,2015-08-20 15:24:11,"I like the current API and initially felt the same awkwardness, but the pillow told me that may be that's just because the framework aims to be ultra flexible and targets different levels of abstractions at once, and they are not trying to build something that works only for React, or the web. For me, that's a possible explanation for the changes to the API, so far.

May be one can trade that flexibility for some simplicity by wrapping the parts that don't need to be so flexible. For instance a wrapper could provide simplicity by managing Route and RootContainer under the hood, and a redux-like pattern (or may be redux) could provide further extensibility in a simper way via middleware. For instance, some people may want to put middleware in their mutations and network layers. I think all that can be done today in user land though some wrapping (probably without any  monkey patching).

I love this project, thanks a lot!
",drojas,2015-08-20 22:54:48
124,2015-08-20 22:54:48,"Thanks again for the feedback. It's important to remember that Relay is a younger framework than React, and also that the problem space is more complex. We'll continue to improve the documentation and streamline the API going forward. I'm going to close this issue, but we encourage you to continue the discussion by filing separate issues with either questions about unclear aspects of the API, or with sample code demonstrating API proposals.
",josephsavona,2015-08-20 22:54:48
123,2015-08-19 23:00:48,"Some of the APIReference-Container links use camelCasing but the links should be all lower case
",drabinowitz,2015-08-21 22:56:16
122,2015-08-19 18:44:03,,yuzhi,2015-08-20 22:02:37
121,2015-08-19 09:20:07,"I've exhausted my debugging options and can't seem to figure out what is going on here

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",amccloud,2015-08-20 22:39:59
121,2015-08-19 15:41:50,"Nothing specific jumped out at me. The some of the gibberish characters you see are just auto-generated fragment names and field aliases. One thing I wanted to double check is does your `viewer` root field return a `User` type?

@dschafer does anything look out of place to you?
",yuzhi,2015-08-20 22:39:59
121,2015-08-19 17:48:41,"> Syntax Error GraphQL request (1:87)

Syntax error is at character 87 in

<S_CODE_TOKEN>

Which by my math is pointing inside `_photos-kk19l4`. @leebyron, is that not a valid alias?

I can't repro this lex error on graphql-js master, either; I tried adding it as a text case to the lexer and it seems to pass just fine, weirdly.
",dschafer,2015-08-20 22:39:59
121,2015-08-19 17:49:26,"I think the hyphen might be confusing it.
",dschafer,2015-08-20 22:39:59
121,2015-08-19 17:51:58,"Yeah, according to the grammar, `-` isn't a valid token in an alias. So it is reading `_photos` as a `NAME`, then it sees `-` which ends the `NAME` and starts a `NUMBER`, then it sees `k` which is invalid in a number and throws.
",dschafer,2015-08-20 22:39:59
121,2015-08-19 17:56:07,"@yuzhi if I remove the photos field from the query it works just fine at returning my UserType. 
",amccloud,2015-08-20 22:39:59
121,2015-08-19 18:09:50,"> I can't repro this lex error on graphql-js master, either; I tried adding it as a text case to the lexer and it seems to pass just fine, weirdly.

Ah, I had a bug in my code. Just submitted https://github.com/graphql/graphql-js/pull/139 which will slightly improve the error message here (and contains a minimal repro of this as a test case demonstrating the ""expected"" result).
",dschafer,2015-08-20 22:39:59
121,2015-08-19 18:19:04,"I see. I'll update our alias function
",yuzhi,2015-08-20 22:39:59
121,2015-08-19 19:30:31,"@yuzhi That fixed it for me!
",amccloud,2015-08-20 22:39:59
121,2015-08-20 22:39:43,"#122 has been merged. Closing issue.
",yuzhi,2015-08-20 22:39:59
120,2015-08-19 06:39:33,"https://github.com/ts-smith/relay/commit/0f2f827be08a52de658a38bee701d901cc20eadb

When incrementing the $first variable while there are more unshown todos, the child (TodoList) seems to get a view of the data that is ""one behind"" the view of the parent (TodoApp).
",ts-smith,2015-08-26 02:00:31
120,2015-08-19 15:34:12,"Sorry, I'm not sure I understand the problem exactly. What do you mean by ""one behind"" the view of the parent? Do you have examples of what the parents has, vs what the child has?
Note that `setVariable` is async and the parent will not get one additional edge until it has been fetched from the server and stored in Relay. You can add a [onReadyState callback](http://facebook.github.io/relay/docs/guides-ready-state.htm) for when the additional edge is ready.
",yuzhi,2015-08-26 02:00:31
120,2015-08-19 17:43:46,"If I do something like 

<S_CODE_TOKEN>

to force the todo list to rebuild every time, the list will start to show one more item whenever the parent view gets more data. Without doing that, in order to get one more item to render, I need to increment $first twice. Then each additional increment gets one more, but behind where it should be. If I inspect the data the parent has during rendering, it has the desired items, but the child container doesn't get them. Looking at the fragments (that I believe it uses to extract from the data store or something) it has a fragment that looks like the previous query.
",ts-smith,2015-08-26 02:00:31
120,2015-08-21 22:17:34,"We dug into this, and should have a fix for you soon. Thanks @ts-smith!
",steveluscher,2015-08-26 02:00:31
119,2015-08-19 04:30:31,"I've got a simple `getConfigs()` like:

<S_CODE_TOKEN>

At first, I mistakenly tried using:

<S_CODE_TOKEN>

But nothing happened. After correctly adding the `id` field, everything was happy. It would be great if we could throw a warning in here (if there's a matching fieldID but the optimistic response doesn't contain an ID).

It might even be better if this could automatically be inferred. Have there been situations at FB where the ID in an optimistic response and the config have ever differed?

Happy to resolve this but want other thoughts first :smile: 
",devknoll,2015-08-24 16:02:16
119,2015-08-19 18:53:41,"I think that would be very useful here for anything with a `FIELDS_CHANGE` change config during an optimistic mutation. I don't remember run into any cases where the optimistic payload and the id in the config had a mismatch, so a infer could be useful for these optimistic payloads.
",yuzhi,2015-08-24 16:02:16
119,2015-08-19 19:05:25,"@yuzhi Do you think it would be useful for the connection config types too? I haven't used them much yet, but they refer to a `parentID` which could theoretically also be missing from an optimistic mutation.
",devknoll,2015-08-24 16:02:16
119,2015-08-20 01:04:23,"I don't think it would hurt. Overall, mutations could use a lot more warnings messages that can help guide developers with setting up their mutations. These changes doesn't have to be automagic, but should at least have useful messages, so someone who reads it will have an good idea of what to fix instead of just a silent failure. Mutation configs could also be easier to set up. There are definitely a lot of improvements that can be made to mutations.
",yuzhi,2015-08-24 16:02:16
119,2015-08-24 16:02:16,"I think I agree regarding the automagic. A warning seems pretty good. I opened #144 for this, so I'll move any further discussion there!
",devknoll,2015-08-24 16:02:16
119,2016-01-05 21:47:25,"I just got bit by this problem. A warning would have saved me some time. When I figured out what was wrong, I realized that I had been had by this same issue some time ago too, doubling the pain :).

It was unintuitive for me that the optimistic payload should contain the ID given that the ID specified by the config. Does Relay even have the ability to handle IDs changing?

Is there a way to ""correctly"" specific any optimistic payload for a mutation that has a `REQUIRED_CHILDREN` config that handles the creation of a new node, wherein the `REQUIRED_CHILDREN` fragment asks for the created ID? In such a situation, the ID comes with the response payload and cannot be predicted in the optimistic result. 
",dminkovsky,2015-08-24 16:02:16
119,2016-01-06 19:56:58,"Is [this comment from the todos example](https://github.com/facebook/relay/blob/6229170583737b8fb633777b911ba40cbe37c312/examples/todo/js/mutations/AddTodoMutation.js#L60-L61) the result of behavior? @yungsters 
",dminkovsky,2015-08-24 16:02:16
118,2015-08-19 03:38:13,"There's still some work to be done to complete the TodoMVC example: add routing [as per the spec](https://github.com/tastejs/todomvc/blob/master/app-spec.md#routing).
",steveluscher,2015-09-24 17:50:28
118,2015-09-11 04:40:43,"@taion did this in https://github.com/taion/relay-todomvc

…putting a PR on my wishlist. :gift: 
",steveluscher,2015-09-24 17:50:28
118,2015-09-14 02:50:26,"I'm still intending on PRing this. Not this weekend though - updating packages for RC1 of React and React Router took up all of my time for open source and then some. Later this week most likely.
",taion,2015-09-24 17:50:28
118,2015-09-17 00:57:10,":+1: 
",steveluscher,2015-09-24 17:50:28
117,2015-08-19 01:21:45,"Renaming `GraphQL_EXPERIMENTAL` to `GraphQL` in 1cfd48d1df9ea726d6775931fea05bf2420c4cff appears to have confused Flow.
",yungsters,2015-08-19 16:31:13
116,2015-08-18 22:45:02,"Address #110 by adding `npm run update-schema` command and a script to regenerate the test schema.
",josephsavona,2015-08-18 23:05:30
115,2015-08-18 21:43:18,"See #104 and #20. This might also conflict a little with #112

Just  wanted to throw this up before I go too far down any rabbit holes. The goal of this PR is to allow route queries to be defined like:

<S_CODE_TOKEN>

without having to specify `${Component.getFragment('viewer')}` mechanically.

The current change works (for some definition of working) but lacks tests and I'm still wrapping my head around the Relay internals. That being said:
- Does this seem like the correct approach? Any gotchas with variables I'm missing?
- How to we want to handle the two old formats? Should we add some deprecation notices now?
- Any other questions/comments?

.

༼ つ ◕_◕ ༽つ
",devknoll,2015-09-01 01:32:30
115,2015-08-19 17:09:18,"EDIT: nevermind, I forgot about this fixture https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/__fixtures__/queryWithoutFields.fixture

Be sure to add a `babel-relay-plugin` fixture to ensure that this new syntax will compile without validation errors. We had to add an exception to skip one rule for mutations, and I suspect the same rule may cause issues with the below, because input variables are undefined. See [here](https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/GraphQLDocumentTransformer.js#L106-L112)

<S_CODE_TOKEN>
",josephsavona,2015-09-01 01:32:30
115,2015-08-19 17:49:04,"Thanks @josephsavona -- actually, I'm pleased that none of my changes are done in a _total_ vacuum :wink: they all at least get tested on my production app too, since that's where I usually run into an issue first :smile: So I would have caught that! 

Any thoughts with regards to the now two old deprecated formats? Does it still make sense for the signature here to be `() => Relay.QL` (maybe variables require it?) rather than the regular return like mutations? 
",devknoll,2015-09-01 01:32:30
115,2015-08-19 21:27:44,"We have code internally that uses the deprecated variant, and in general functions are preferred for lazy evaluation. The `() => Relay.QL...` pattern feels appropriate here; mutations only use regular functions because of `class` syntax.
",josephsavona,2015-09-01 01:32:30
115,2015-08-24 21:33:25,"Whoops, thanks @josephsavona. #58 can't come soon enough ;-) Let me know if this is likely to be accepted and I'll add doc updates to the PR
",devknoll,2015-09-01 01:32:30
115,2015-08-25 04:20:19,"My apologies for not getting to a more thorough review of this earlier. Please see comments, but this is a good direction. :+1: 
",josephsavona,2015-09-01 01:32:30
115,2015-08-25 04:56:08,"No worries, thanks for the feedback!
",devknoll,2015-09-01 01:32:30
115,2015-08-27 04:49:34,"> Let's be more explicit about when the new logic will take effect in order to avoid surprising behavior 

Ahhh, had something like that originally. Fixed.

> `field.isScalar()`

`GraphQLFieldNode`s don't have an `isScalar`, so I'm checking for # of child fields directly instead.

> RelayQL: Expected query

I changed this to `buildRQL` since it seems to follow the conventions more as far as I can tell.

> `query.name`

Wasn't sure if you wanted the name from the route/fragment or the root call. Went with the latter, let me know.

> We should also add a test case in getRelayQueries-test that ensures route params are passed through properly.

Let me know if the new test addresses your concerns!

@josephsavona Thanks, and sorry for the delay! I'll get the doc changes in soon too.
",devknoll,2015-09-01 01:32:30
115,2015-08-27 19:28:48,":white_check_mark: `getQuery` -> `getFragment`
:white_check_mark: `fragment` -> `fragmentReference`
:white_check_mark: `GraphQL.QueryFragment` -> `RelayFragmentReference`

I also went ahead and cleaned up the rest of the calls to `getQuery` in buildRQL-test.js, and added a line to the changelog.

cc @josephsavona Thanks!
",devknoll,2015-09-01 01:32:30
115,2015-08-28 01:41:10,"@devknoll awesome! thanks again for working on this. i'm working on syncing this and your other change.
",josephsavona,2015-09-01 01:32:30
115,2015-08-29 19:47:08,"Should be good to go now @josephsavona, thanks!
",devknoll,2015-09-01 01:32:30
115,2015-09-01 01:32:54,"@devknoll this is awesome. thanks!
",josephsavona,2015-09-01 01:32:30
115,2015-09-02 14:19:56,"When using this syntax, the query parameters will not get forwarded to the fragment as variables, right?
",taion,2015-09-01 01:32:30
115,2015-09-02 14:23:08,"`route.params` are _always_ passed to `Component.getFragment` with this syntax.
",devknoll,2015-09-01 01:32:30
115,2015-09-02 15:16:23,"Ah, I see. Cool! Is the old syntax to be considered deprecated?
",taion,2015-09-01 01:32:30
115,2015-09-02 15:25:40,"I don't think so. Passing different params to `getFragment` seems like a valid thing to want to do in some cases, but @josephsavona could comment on longer term plans.

I see it as mostly just a way to cut down on some of the initial boilerplate necessary, since most often queries are going to be of the same format:

<S_CODE_TOKEN>

That being said, I do wonder if perhaps this would have been better solved at the babel plugin layer instead, so that the actual queries getting to Relay don't change...
",devknoll,2015-09-01 01:32:30
115,2015-09-02 15:44:00,"Ah, cool. On closer inspection it also looks like https://github.com/facebook/relay/pull/115/files#diff-b64b5d2eefab1f19d7cf0a21d6546db7R107 gives me pretty good backward compatibility anyway. Very nice.
",taion,2015-09-01 01:32:30
115,2015-09-02 15:47:15,"Glad to hear that. Let me know. The more I think about it, the more I'm /facepalming for not just doing this in the babel plugin :smile: 
",devknoll,2015-09-01 01:32:30
115,2015-09-02 17:22:33,"Well, if you change it... let me know.

The one thing I lose out on here is that, when I proxy the fragment for the React Router integration using the current trick, I can restrict the variables passed into the fragment to just the ones that are relevant to the current route (i.e. only the URL parameters for the current route and its ancestors, and the query parameters for the current route): https://github.com/relay-tools/react-router-relay/blob/v0.4.2/src/RouteAggregator.js#L54-L55

With the shorthand, all fragments will receive as variables all parameters on the Relay route. Probably not a big deal in practice. I'm still going to use the shorthand, anyway.
",taion,2015-09-01 01:32:30
114,2015-08-18 20:45:59,"As mentioned in the [introductory blog post](http://facebook.github.io/react/blog/2015/08/11/relay-technical-preview.html#whats-next), we're exploring ways to extend Relay to represent data from multiple sources. These data sources could be in-memory objects, native device APIs, or a (GraphQL) server.

The goal is to allow a unified programming model for accessing all the information relevant to an application - while also retaining a few important invariants:
- Components use GraphQL to describe their data dependencies.
- Given a desired output (e.g. a root container) the framework can _statically_ determine all of the required data inputs (e.g. what to fetch, from where, and in what order).
- Avoid unnecessary re-computation of intermediate or other derived data.
## Proposed API

The proposed API for product developers is the same GraphQL fragments that we use today. Products can define a unified schema of all of their data, and query it as you would expect:

<S_CODE_TOKEN>

Some considerations here are how to namespace fields & types to avoid collisions between different data sources, the API for registering non-server types, and the API for updating non-server data.
## RFC

We'd appreciate your input about possible use-cases for this feature. Some cases that we have considered are retrieving a list of photos via native devices APIs or storing a list of in-progress drafts/edits.
",josephsavona,2017-01-30 23:54:34
114,2015-08-23 11:22:30,"How pluggable would this be? I can imagine situations where I as a user do not need this extended flexibility.
I'm worried that adding this as a core part of relay bloats the project and makes adoption and maintenance harder (for both users and developers).

I'd propose to bundle this work into a new project: A client-side GraphQL proxy that takes care of analyzing GraphQL queries and can dispatches parts/fragments to individual endpoints.
The custom network layer should be powerful enough to allow this kind of integration!
",clentfort,2017-01-30 23:54:34
114,2015-08-23 20:43:03,"@clentfort Those are natural concerns, thanks for bringing them up! Implementing local state management at the network layer has a number of problems, including the fact that all client data would be duplicated (once at the network layer, once in the Relay cache), it would force local data changes to use the heavyweight `Relay.Mutation`s for what should be lightweight changes (for example, optimistic payloads aren't necessary when you're directly changing the source of truth), and it would prevent a variety of runtime optimizations that are critical in practice. In short: this needs to be in the framework.

> I'm worried that adding this as a core part of relay bloats the project

We're confident that this enhancement will have the exact opposite effect: a solid architecture for non-server data sources will actually lead us to modularize the codebase even further. 
",josephsavona,2017-01-30 23:54:34
114,2015-08-23 21:31:29,"> Implementing local state management at the network layer has a number of problems, including the fact that all client data would be duplicated (once at the network layer, once in the Relay cache)

This might be true for pure in-memory data but not for any kind of device data which will be stored somewhere else. Having relay manage this kind of data sources adds tons of unneeded complexity!
To eliminate problems with cache duplication it might be feasible to add additional meta-data to responses from the proxy that instruments Relay to not cache data. (Which might be a general cool feature to have for data that should always be fetched from the server.)

> It would force local data changes to use the heavyweight `Relay.Mutation`s for what should be lightweight changes (for example, optimistic payloads aren't necessary when you're directly changing the source of truth)

This would require to have at least a secondary API for writing mutations of in-memory data, nullifying some of the benefits of using GraphQL in the first place.
To solve the problem of optimistic payloads Relay could be changed to accept a stream of responses for a request: If a optimistic update is needed the proxy could just generate a response and ""send"" it to Relay immediately, than gather responses from all its data-sources and pass those on. If no optimistic update is needed because it was only an in-memory change the proxy can generate that answer immediately. (I know this would move optimistic updates out of Relay for situations where the proxy is used, but at the same time the proxy would have more knowledge about how an optimistic update should look like).

>  It would prevent a variety of runtime optimizations that are critical in practice

Could you elaborate which optimizations?
",clentfort,2017-01-30 23:54:34
114,2015-08-24 07:20:02,"@clentfort thanks for the feedback and ideas :-) We'll be sure to engage with the community about architectural choices via follow-up issues and pull-requests. However, for now I'd like to refocus the discussion on concrete use cases in order to fully define the problem first. 

A use case that we've considered is validation of client-only data. For example, when a user creates a draft of a post to a group, it's invalid if they lack privileges to post to that group. In these cases, the validity of the draft is a function of the draft itself (local data) and user/system settings (server data). Further, any change to either input source should ultimately update any views displaying the draft's validity. We've been referring to this as _composed_ state.

Are there other examples of composed state? Is there a need for arbitrary levels of composition, or is `data source -> compose -> react view` sufficient?
",josephsavona,2017-01-30 23:54:34
114,2015-08-24 07:21:20,"cc @vladar who had asked about client-side data in #106 
",josephsavona,2017-01-30 23:54:34
114,2015-08-24 12:22:06,"@josephsavona My current case (real world example): 

Consider thread of comments. Single comment can be ""focused"" or not. Focused comment will be highlighted + there is separate non-child component in the sidebar that displays full details about comment author.

So what I need effectively is:
1. Know if currently rendered comment is ""focused"" to show some outline.
2. Find out currently active thread (there may be many different threads)
3. Receive details about author of focused comment for currently active thread

So this is pretty much transient local state. It must be shared because required by different hierarchies or React components (thread and authorInfo).

Ideally, with Relay-only solution I would write query like this:

<S_CODE_TOKEN>

I guess, I would also want to add some `directive` to query to mark field as local state.

But even if you can implement something like this for querying - there is another question about handing local state transitions. They may require some state transition engine behind them (like Flux store / state reducer).

Also they may be ""mixed"" - say local state changed when some mutation is executed that also mutates data on the server.

There are indeed many edge cases here.
",vladar,2017-01-30 23:54:34
114,2015-08-26 18:38:42,"A common use case for this would be dealing with non-GraphQL data sources.
We use an on-device service to store data about current device state. The data is pushed to the client via a socket connection. We wind up storing this in Flux stores and then merging Relay data and Flux data in the container, which is fairly error-prone and complex.

Currently we have something like this:

<S_CODE_TOKEN>

and:

<S_CODE_TOKEN>

In order to render the current app state, we need to resolve the GraphQL query, find the appropriate matching id in the FluxStore, and merge the information together.

One solution would be to have local fields that: 
 1) have a getter method that can retrieve arbitrary local data based on query results (id in the case above). essentially they can ""augment"" server-side data with local state once a query is resolved
 2) can subscribe to change events in a FluxStore or to arbitrary event emitters.

This would open up a path for relatively easy migration from Flux-based apps to Relay.
",ykagan,2017-01-30 23:54:34
114,2015-08-26 21:05:33,"@ykagan that's a great example of the uses-cases we've looked at. It's common for products to have views that compose server & local data. Validation is another example: item data is local, but rules about validity come from the server.
",josephsavona,2017-01-30 23:54:34
114,2015-09-18 10:15:53,"By looking at the relay based mvc example that runs grpahql on client-side...
I think it is very interesting to run a grpahql service on client-side that would bridge to non-graphql sources. That way, the application would talk to all sorts of data via graphql.

I was going to try an implementation where I inject a customized network layer that will call the default fetcher for specific queries like 'query { viewer}'. And use the client-side graphql service for queries like 'query { cache }'.
For transpiling purposes, i'd merge the 2 schemas and use that combined schema for transpiling.
However, both schemas contain their own 'node' field, which (haven't tested this yet) might run into issue.

I think the 'multiple schema' usage mentioned in #130 might actually offer a way to do local caching with graphql?
",u9520107,2017-01-30 23:54:34
114,2015-09-18 14:33:32,"Executing GraphQL queries that go to remotes sounds like a bad idea to me. For example, it's highlighted explicitly as not being recommended for production on the relay-local-schema package.

A GraphQL gateway running in a data center has the advantage of reliable, fast access to the data sources it's using, especially if they're also yours. The GraphQL query getting evaluated on your phone on browser has none of these advantages.
",taion,2017-01-30 23:54:34
114,2015-09-18 14:46:16,"@taion 
Well yeah, but I could be using graphql and resolving to localStorage or indexDB completed on the device. Setting up the cache service like a backend on a webworker maybe, and let all the components fetch data via Relay regardless of fetching from backend or fetching from local cache.

But I guess that's added work to write the cache service with graphql if we can use localStorage from the beginning. Not to mention more overhead for simply storing some data on client-side.

Just a thought anyway...
",u9520107,2017-01-30 23:54:34
114,2015-09-18 16:56:13,"Oh, I misunderstood what you said. Never mind. That makes sense.
",taion,2017-01-30 23:54:34
114,2015-11-25 21:14:54,"I'm working on an app that uses DOM elements as a data source. The DOM elements are on the same web page as my React UX, but they are not rendered by React.

My app is a JS script that can be added to a website to enhance it's functionality. Some Chrome extensions might want to do something similar.

I realize my use-case is pretty niche, but I would love to be able to write out my React component data needs in GraphQL and have a relatively easy way to fill in those needs with arbitrary data that is already available in memory (DOM elements in my case).

Currently I use propTypes instead. I have custom code that reads the component propTypes and uses them to provide the components with their data.
",ahfarmer,2017-01-30 23:54:34
114,2015-11-29 19:27:21,"@ahfarmer It's possible to polyfill this today by injecting a custom network layer, and then running a GraphQL schema in the browser. This is actually how the Relay Playground works - take a look at the [source](https://github.com/facebook/relay/blob/master/website-prototyping-tools/RelayPlayground.js#L19), in particular the use of `relay-local-schema`.
",josephsavona,2017-01-30 23:54:34
114,2015-12-16 04:25:02,"Is someone working on this right now? We need it badly.

Our use-case is VERY similar to @vladar's with focused comments. 
",staugaard,2017-01-30 23:54:34
114,2015-12-16 05:45:41,"@staugaard This is something we're continuing to explore; we aren't ready to release anything just yet. However, in the meantime there is a very flexible alternative: use a [custom network layer](http://facebook.github.io/relay/docs/guides-network-layer.html#content). You can inject a custom network layer that runs a GraphQL schema in the browser and resolves queries using a combination of local and remote data. This is actually how the Relay Playground works, using [`relay-local-schema`](https://www.npmjs.com/package/relay-local-schema).
",josephsavona,2017-01-30 23:54:34
114,2015-12-23 22:47:02,"I am working on a `RelayCompositeNetworkLayer` at the moment.  The idea being that you might have multiple schemas and you want to send each to a different network layer.  The 99% use case is 'server' data and 'local' data.

<S_CODE_TOKEN>

This works, but has a few downsides being at the network layer.  So here is feedback on how it could be better if done as part of `Relay.QL` babel plugin.  Also, these downsides could just be specific to my implementation of the idea :).

## schema information on the client

In order to split the query the network layer (and therefore the client code) needs to know which schema each field belongs to.  For example it needs to know `User#drafts` is `local` and `User#name` is `server`.  This is fine for small schemas, but you can imagine for a large schema (e.g. facebook) this would be unworkable.  Instead it would be nice to only download enough schema information as required.  `Relay.QL` could do this by adding `metadata` to the query on which schema a field belongs to.  You'd only get as much schema information as the client is currently rendering.

## missed caching

Given the following query where `drafts` is `local` but `user` is `server`:

<S_CODE_TOKEN>

We would make three queries:

`query { viewer { id, name } }`
`query { node(id: $viewerid) { ... on User { draft { text author { id } } } }`
`query { node(id: $authorid) { ... on User { name } } }`

If the `viewer` and `author` are the same user, the third query is unnecessary -- the `Relay.Store` has this information.  At the network layer the third request is unavoidable.  Instead if `Relay.QL` assigned schema then the query could be split / diffed as part of the `Relay.Store` workflow (e.g. similar to how the `GraphQLQueryRunner` ... I think ... does `defer` stuff).

In order to get around this at the network layer you could modify the original RelayQuery so that the `PendingQueryTracker` will send any overlapping dependent queries and then the network layer can call back into `RelayStore.primeCache` resulting in only the smallest diffed queries being sent.  Clearly this is a bad idea and would be better if this was done as part of the query running.

## partial responses

The network layer can only send back a single response.  So if a query is split into three sub queries at the network layer no data can be returned until all queries have completed.  If the queries were created by relay internals it could create multiple requests and resolve each individually (again, like `defer`).

## N + 1

This isn't really specific to doing it at the network layer, but more of an issue with having multiple schemas / remotes.  Again, another query:

<S_CODE_TOKEN>

This is a natural query to write but if `drafts` are local and `user` is remote then you could end up making 10 requests for `author` -- one per draft.

So one idea is making the extension one-way.  Local can extend server, but it can't have fields go back to server.

---

I think that sums up thoughts I've had on this so far.  That said, doing it at the network layer works fine (so far) and it is pretty cool to query local / server data from the same query interface.  Of course I have no idea how many edge cases my implementation is missing ;p
",eyston,2017-01-30 23:54:34
114,2015-12-28 18:36:46,"@eyston Great writeup! Here are some brief thoughts on the main points:
- As you mentioned, using a custom network layer can simulate local state to some extent, but it doesn't take full advantage of Relay's knowledge of what data is cached and may cause the application to make additional (possibly unnecessary) queries.
- As far as schema information, the schema would definitely need to know which fields are part of the server and client schemas. `babel-relay-plugin` provides an opportunity to make this information available within the query representation, avoiding the need to download the schema at runtime.
- Making extensions one way (server data references local data) is relatively easy. Two-way extension (local data references server data) appears to be necessary for certain use-cases but could incur additional round-trips. In additional to the complexity of managing the dependencies of the n+1 fetches in this case, we'd also want to make it clear to the user that their query was making these additional fetches.

Another challenge is determining a simple API for mutating local state. By way of comparison, the `Relay.Mutation` API describes complex client/server interactions and is necessarily somewhat complex.
",josephsavona,2017-01-30 23:54:34
114,2015-12-28 19:53:43,"Here is the code for the composite network layer I'm working on: https://github.com/eyston/relay-composite-network-layer

It works but has a huge limitation in that it only handles query cases I've thought of :)

Minor side note -- testing is hard because I don't know how to clear the `Relay.Store` between tests so order matters and some queries could be using cached data ;p
",eyston,2017-01-30 23:54:34
114,2015-12-28 22:12:27,"Well that's cool.

On Mon, Dec 28, 2015 at 12:53 PM Huey Petersen notifications@github.com
wrote:

> Here is the code for the composite network layer I'm working on:
> https://github.com/eyston/relay-composite-network-layer
> 
> It works but has a huge limitation in that it only handles query cases
> I've thought of :)
> 
> Minor side note -- testing is hard because I don't know how to clear the
> Relay.Store between tests so order matters and some queries could be
> using cached data ;p
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/114#issuecomment-167640891.
",KyleAMathews,2017-01-30 23:54:34
114,2016-02-02 13:25:18,"I think the simplest solution would be to use something like a Flux pattern for handling a client-side specific data. My initial idea was also about making a composition of the network layers. Very curious about how this issue will evolve.
",Kureev,2017-01-30 23:54:34
114,2016-02-03 01:39:21,"Something else this would enable is being able to query public GraphQL servers from within your app e.g. those @ https://www.graphqlhub.com/

You could have, for example, a sidebar with the latest 10 HN posts.
",KyleAMathews,2017-01-30 23:54:34
114,2016-02-03 02:09:09,"> being able to query public GraphQL servers from within your app

@KyleAMathews Do you mean query multiple public GraphQL servers? You could query a public server today by configuring a network layer.
",josephsavona,2017-01-30 23:54:34
114,2016-02-03 06:28:14,"Wait how would that work?
On Tue, Feb 2, 2016 at 6:09 PM Joseph Savona notifications@github.com
wrote:

> being able to query public GraphQL servers from within your app
> 
> @KyleAMathews https://github.com/KyleAMathews Do you mean query
> multiple public GraphQL servers? You could query a public server today by
> configuring a network layer.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/114#issuecomment-178957965.
",KyleAMathews,2017-01-30 23:54:34
114,2016-02-03 17:50:26,"@KyleAMathews configure a network layer and request data? what am i missing?
",josephsavona,2017-01-30 23:54:34
114,2016-02-03 19:26:07,"In my HN news example, Relay would need to know about _two_ schemas, the one I control + the HN one and intelligently split out queries depending on what schema the query is for. So just like we'll be able to split out client-only queries, we'd also (I assume) be able to send queries to 3rd-party public GraphQL servers. AFAIK this isn't possible right now.
",KyleAMathews,2017-01-30 23:54:34
114,2016-02-10 19:57:05,"@en_JS

seems like you already sorted out what needs to happen... 

from the ""Future"" section of the Relay Roadmap

Support client/local state
API for resolving fields locally: #431.
Support querying & compiling client-only fields by extending the server schema, and a means for writing data for these fields into the cache: #114.

:+1: 
",idibidiart,2017-01-30 23:54:34
114,2016-03-15 17:32:08,"First off, thanks for open sourcing Relay. There's some really clever ideas in this project, and we really appreciate all the work the team has done.

We're currently evaluating Relay, and how to elegantly combine client state and events with Relay server data is the biggest unanswered question (we've looked at Stackoverflow and the issues here).

@josephsavona What's the recommended way of doing this in production today? We think that nailing this will be one of the best indicators of how well Relay fits our needs. It appears to be the biggest weakness (and potential risk) with using Relay before this issue is resolved.

I'm assuming Facebook tackled this problem in some way for the complex UI state in AdsManager? 

**Side note**: We'd love to see a blog post on best practices regarding Schema design :)
",jimkyndemeyer,2017-01-30 23:54:34
114,2016-03-15 17:57:47,"We're in the same boat. I hear people are using Redux Forms and ad-hock solutions for local state and while that sounds fine I'm curious if the story gets better when client-only state can be supported as first class citizen. I think it may be far more important conceptually than technically necessary.
",idibidiart,2017-01-30 23:54:34
114,2016-03-15 20:16:48,"> client state and events with Relay ... What's the recommended way of doing this in production today?

@jimkyndemeyer Great question. For many of our Relay apps we haven't needed any separate client-side state solution - React component state plus Relay has been sufficient. If your app _is_ complex enough to need a separate solution for client state, we'd recommend pairing Relay with Flux (Redux). You can fetch & render server data with Relay and manage your local state with Redux. Check out [`recompose`](https://github.com/acdlite/recompose) which has some great helpers for working with both Redux and Relay. Finally, if you need access to server data outside of a container (e.g. in an action creator), you can use Relay's imperative data-fetching API to request it:

<S_CODE_TOKEN>

It's pretty easy to wrap that snippet in a Promise-returning function e.g. for use with `redux-saga`.
",josephsavona,2017-01-30 23:54:34
114,2016-03-16 00:40:26,"IMO, if you mix in too much of the imperative approach to state management you go back to square one. When you need to change your UI you'll have a lot of rework. 

@josephsavona I had captured the following after talking to you a while back. Is this still in the roadmap?

> Any app state that is not sync'd to the db is not something that Relay encompasses right now, but there is an ongoing discussion for handling scenarios like client-side form validation and state updates from sources other than the db (e.g. websocket)
> 
> These important scenarios will be addressed according to the Relay Roadmap (https://github.com/facebook/relay/wiki/Roadmap):
> 
> API for resolving fields locally: #431.
> 
> Support querying & compiling client-only fields by extending the server schema, and a means for writing data for these fields into the cache: #114. 
",idibidiart,2017-01-30 23:54:34
114,2016-03-16 12:16:53,"@idibidiart at some level data-fetching will be imperative. Action creators are the natural place to do this in redux, and data-fetching can even be accomplished in a functional/declarative style via redux-saga. 

> I had captured the following after talking to you a while back...is this still in the roadmap?

Unfortunately I haven't had time to review your gist that you're citing, so I can't confirm to what extent it reflects our thoughts/plans. This specific issue (local state) is definitely something we would like to solve at some point, hence the ongoing discussion here. 
",josephsavona,2017-01-30 23:54:34
114,2016-03-16 13:35:53,"@josephsavona Thanks for the info. I looked it over, and we'll definitely use the imperative API for ad-hoc searches etc.

We're looking for an elegant way of synchronizing local shared state with the Relay variables that are kept inside Relay containers. The use case is similar to what @vladar and @staugaard posted.

Let me give you an example based on the TodoMVC app by adding a new feature:

Imagine the user can click on a todo to select it. On the right hand side, there should be a Relay container that displays additional details about the selected todo.

To make sure this happens we need shared state, e.g. a `selectedTodoId` property in a store. The `Todo` component can dispatch a `SELECT_TODO` action, and our `Relay(TodoDetails)` container needs to use the `selectedTodoId` value as a variable to query the details of the todo.

From what I can find in the Relay Container API, the way to do this is to use `this.props.relay.setVariables`.

The trick is to call `setVariables` each time any relevant local state changes. I found an example of calling setVariables to keep them in sync at [fdecampredon/f337605e393a5b032b85#file-redux-relay-js-L73-L80](https://gist.github.com/fdecampredon/f337605e393a5b032b85#file-redux-relay-js-L73-L80)

We've arrived at something similar in our prototyping: An additional HoC that is placed in-between a Relay container and the component that needs the Relay data as props. So something like:

<S_CODE_TOKEN>

`ClientStateRelayVariablesListener` does the following:
- It renders `ComponentThatNeedsData` by forwarding all props
- It subscribes to the store and each time a property changes it checks for a matching Relay variable name on `this.props.relay.variables`. If there is a match it calls `this.props.relay.setVariables`on behalf of `ComponentThatNeedsData`

That's the basic gist of what we're doing. The actual implementation is a bit more complicated since `setVariables`is async, so we queue up the local state changes and only signal them once the Relay data comes back

While the query is running we set a ""(variableName)IsLoading"" boolean on the store, e.g. `selectedTodoIdIsLoading`. This allows the details component to render a spinner. As a side note we use mobx to signal the names and values of properties that change on the store.

I guess I'm looking for some kind of feedback as to whether this approach is the way to go?

We don't want to overlook something in the current Relay API, or over-engineer this. Our goal is to provide a great DX where our team doesn't have to also write setVariables boilerplate code each time they mutate shared local state.
",jimkyndemeyer,2017-01-30 23:54:34
114,2016-03-16 15:08:24,"I think you already are over-engineering that – such cases are probably handled by a component wrapping a new Relay RootContainer fetching just the required data. Logically, it's not dissimilar to showing a modal or a popover that has its own data requirements.
",taion,2017-01-30 23:54:34
114,2016-03-16 15:15:42,"I agree with @talon here

@josephsavona :  those were capturing what the Relay Roadmap stated, not my gist. Sorry for the confusion. Your Relay roadmap had stated at some point these ideas/features were being pursued:

> API for resolving fields locally: #431.
> 
> Support querying & compiling client-only fields by extending the server schema, and a means for writing data for these fields into the cache: #114.

Are these still on the Roadmap? 

When it comes to the subject of client-only state and Relay, I think the two features listed in the Roadmap (see Update #1 below) are must-have eventually. But I see a risk at a conceptual level in what many people take for granted: that client's job is to specify to the server how to satisfy user intent -- This leads to all sorts of complications. App state that sync'd via Relay between the UI component tree and our graph model on the server should be all that is needed in most cases (other than client-only state say animation state and other client state that we don't care to sync to server, e.g having 5 windows open in Gmail) Client should relay mutations to that state that are due to user interaction and the server should figure out user intent and how to satisfy it. Having the client figure out user intent and how to satisfy it (and, specifically, having to keep stateful client-side logic to do that) means that you're isolating that part of the application's behavior in the client, which leads to a much heavier and more complicated client codebase.
",idibidiart,2017-01-30 23:54:34
114,2016-03-16 15:23:15,"@taion I don't really understand your answer. Can you outline how you would solve the scenario I outlined. I'd be more than happy to learn that we are in fact over-engineering this :)
",jimkyndemeyer,2017-01-30 23:54:34
114,2016-03-16 15:26:49,"Use a new `<RootContainer>`. Generate a Relay route (possibly in `componentWillReceiveProps`) when the injected selected ID gets updated from the store.
",taion,2017-01-30 23:54:34
114,2016-03-16 15:40:01,"@taion Isn't that just an implementation detail? Whether we're using setVariables or updating a route,  the challenge is to ensure that the store and the relevant Relay (root)containers alway stay in sync.

What we've done with the additional HoC is let developers say abstractly, ""My Relay variable ""foo"" should always stay in sync with property ""foo"" on store ""Bar"". The HoC then takes care of the subscription logic, e..g remembering to unsubscribe in unmount. Without the HoC that code is scattered throughout the component tree.
",jimkyndemeyer,2017-01-30 23:54:34
114,2016-03-16 17:32:42,"Sort of – you get all the ""subscription"" handling for free with either React context or Redux containers, though, so it's not trivial.
",taion,2017-01-30 23:54:34
114,2016-05-01 07:31:01,"I have a use case that can be easily explained as a TodoList app.
For apps like TodoList, it needs to be able to work when user is offline.
Users should be able to see (or query) a list of todos, add (or mutate) a new todo, mark a todo as complete, or remove a todo, ... regardless of their online status.
Then, when user comes back online it needs to sync the local data with the server data.
So, majority of the schema is shared between server and local, while there could be some operations or parts of schema that require online status such as managing notification settings, changing user password, etc.
Thus, there could be eventually two graphql servers, remote and local (graphql on top of Realm DB running locally).
",joonhocho,2017-01-30 23:54:34
114,2016-07-29 17:48:23,"While hacking this week we realized that we had most of the pieces necessary to support client state (as part of a larger update to Relay core). We'll go into more detail on the wider changes in a blog post next week-ish and some upcoming conference talks, but here's what we are thinking for local state.

Developers can specify extensions to the server schema within their GraphQL queries, using the schema definition language. For example:

<S_CODE_TOKEN>

The `hasViewerRead` field will be removed at query ""compile"" time, so that this field isn't queried on the server (which doesn't know about the field). On the client, developers can write arbitrary logic to mutate the contents of the store - like Flux/Redux actions. We're still iterating on this API, but it would be along the lines of:

<S_CODE_TOKEN>

UI components would automatically be subscribed and have access to these fields via `RelayContainer` fragments. So whenever the value of `hasViewerRead` changes, components would re-render.

There are lots of things for us to work out. Can we support client _only_ state (w/o any server schema at all)? How about intercepting server payloads to set default values for client fields? We're not sure! We look forward to exploring these with the community over the coming months.

For now, keep your eyes out for that blog post ;-)
",josephsavona,2017-01-30 23:54:34
114,2016-08-12 23:47:26,"@josephsavona do you have any updates? Getting proper support for local state in Relay is huge (no pun intended)!

There is no branch to track how things progress, which I assume is because of Facebooks from Internal use to OSS release workflow.
",hkjorgensen,2017-01-30 23:54:34
114,2016-08-13 00:04:02,"@hkjorgensen No updates yet. We're actively working on building out the new core, and will make it open-source once we're confident about using it in production. In the meantime, we hope to share more about Relay local state in the upcoming talks mentioned in our [recent blog post](https://facebook.github.io/react/blog/2016/08/05/relay-state-of-the-state.html#conclusion).
",josephsavona,2017-01-30 23:54:34
114,2017-01-30 23:54:34,"Removing the ""inprogress"" label because nobody is explicitly working on this right now. Rather, we're focusing on rolling out the new core and APIs, and these do have support for declaring and using client fields, albeit at a low-level; we still have to figure out the right way to expose this functionality in the higher-level API.

In fact, I think it makes the most sense to close this one, where some of the commentary is now outdated, and instead make a new issue that explicit targets making the existing client-field capability in the new core exposed in an ergonomic way.",wincent,2017-01-30 23:54:34
113,2015-08-18 20:10:25,"In #89 itwas pointed out that using other scalars as cursors would be useful,
since clients might want to provide a custom scalar the serializes as a String.
Update the spec to ensure that is possible.

This change keeps the requirement that cursors serialize as strings, which
be strongenough to allow clients to handle different servers. It no longer
mandates a type, so servers can just use String if they prefer, or define
a custom scalar if they prefer.

Fixes #89.
",dschafer,2015-08-19 18:56:56
113,2015-08-18 23:06:57,"@dschafer this requires no client changes, correct?
",josephsavona,2015-08-19 18:56:56
113,2015-08-19 17:34:22,"> @dschafer this requires no client changes, correct?

Correct.
",dschafer,2015-08-19 18:56:56
113,2015-08-19 17:34:43,"Will fix the inline, then merge!
",dschafer,2015-08-19 18:56:56
112,2015-08-18 18:58:55,"## Problem

Relay currently only knows how to handle these three types of root fields:
- Root field with no arguments and queries a single node.
  - e.g. `empire` queries `{id: ""123"", ...}`
- Root field with one argument and queries a single node.
  - e.g. `ship(id: ""456"")` queries `{id: ""456"", ...}`
- Root field with one array argument and queries an array of nodes.
  - e.g. `ships(ids: [""456"", ""789""])` queries `[{id: ""456"", ...}, {id: ""789"", ...}]`

However, it has become clear that Relay needs to support any kind of root field. For example:
- Root field with multiple arguments.
- Root field with no arguments and queries an array of nodes.
- Root field that is a connection.
## Workaround

For now, the unsupported use cases can be implemented by creating a ""global node"", commonly called the `viewer`. You can then add arbitrary fields to `viewer`.

<S_CODE_TOKEN>
## Rationale

Historically, GraphQL (as used internally at Facebook) did not have a root type or root fields. Instead, it had special ""root calls"" such as `node`, `nodes`, `me`, and `usernames`. Much of Relay was built on top of this assumption that the ""root calls"" return nodes.

For example, when we fetch `me` and get `{id: ""123"", ...}`, we record the association between the `me` root field and the node with ID of 123. Now, if we ever encounter another query for `me`, we can check our store for the node with ID of 123 and resolve the query without having to potentially re-fetch all of the fields we already have for `me`.

Another example, when we fetch `nodes(ids: [""123"", ""456""])`, we record the association between each argument and their respective response nodes. This allows us to fulfill queries for `node(id: ""123"")` and `node(id: ""456"")` even though we may never have independently queried for either before. (We would also be able to fulfill `me` if the association from above was established.)
## Next Steps
- [x] Support literal enum and input object values (#894)
- [x] Support arbitrary values in root calls (#895)
- [ ] Define a consistent method for annotating a root argument as ""identifying"". Identifying arguments have a 1:1 correspondence between the argument value and the `id` of the response. Currently all root arguments are assumed to be identifying.
- [ ] Allow arbitrary root calls with or without identifying arguments.
",yungsters,2016-09-03 00:45:11
112,2015-08-25 15:58:25,"@yungsters @josephsavona is it possible that this change would also allow us to remove the Relay-specific Input Objects on mutations? It seems super strange that GraphQL supports multiple arguments but then Relay forces them to all be wrapped up ;-)

Edit: would lose the ability to have a single variable in the document and stuff all the values into a variable as an input object though.
",devknoll,2016-09-03 00:45:11
112,2015-09-16 23:20:56,"Do you have any example code as to how the `viewer` root field would look like on the server side (nodejs)?
",vincentriemer,2016-09-03 00:45:11
112,2015-09-17 00:30:08,"@vincentriemer take a look at the [todo app's schema](https://github.com/facebook/relay/blob/master/examples/todo/data/schema.js#L106-L115) for an example of setting up a root `viewer` field.
",josephsavona,2016-09-03 00:45:11
112,2015-10-09 08:56:45,"This really confused me.  This limitation should be spelled out more clearly in the docs and in relay-starter-kit.

There is already a root object: the `GraphQLSchema`.  Its direct descendants can be `GraphQLObjectType`s with fields in them that can be other `GraphQLObjectType`s.  However, it seems that the first level `GraphQLObjectType`s are different from all others in that Relay refuses to query them in certain ways.

In the starter kit, the root object is `queryType`, and it defines a field `viewer` which is a `userType`.  `queryType` even has a comment in it: `// Add your own root fields here`.  But you don't want to add your own root fields here because they will have limited functionality.  You really want to add them into the `viewer`.  So does it make sense for the `viewer` to be a `userType`?  I don't think it does.

I think the starter kit should change the `userType` into a generic wrapper type and move the comment into that type instead.

Btw, I really wanted to create a connection type at the root level.  Requiring two levels of `GraphQLObjectType` in a row to get to normal functionality seems silly.

As for making things continue to work at Facebook, I don't know the specifics, but it seems like removing this restriction shouldn't negatively impact anything, right?  You'd just need to make Relay's parser smart enough to parse queries that don't fall under this restriction.  If you wanted to keep the restriction internally, you could write some sort of validation process to check if anyone is violating the restriction before submitting their code.
",nickretallack,2016-09-03 00:45:11
112,2015-10-09 09:48:09,"Thanks for this, @nickretallack. Right now, I'm working on literally nothing else but enabling identifying/non-identifying singular/plural fields at the root, including connections. Hold tight!
",steveluscher,2016-09-03 00:45:11
112,2015-10-27 16:45:55,":+1: 
",RavenHursT,2016-09-03 00:45:11
112,2015-11-16 20:14:54,"Just ran into this. Would love to see root fields with multiple arguments!
",stevewillard,2016-09-03 00:45:11
112,2015-12-23 16:31:02,"One problem with the `viewer` approach is that Relay seems not to let you specify multiple levels of nesting at the root query level:

<S_CODE_TOKEN>

Is there a workaround for making that work?  Or should my root query always just be statically set to `query { viewer }`?
",ForbesLindesay,2016-09-03 00:45:11
112,2015-12-23 16:39:00,"@ForbesLindesay There's no technical reason we couldn't allow nesting in the root query. The only thing that would have to change is GraphQLFragmentPointer's createForRoot method, which makes a simplifying assumption that the fragment is a direct child - any interest in sending a PR? ;-)

Otherwise, yes, most apps end up with mostly viewer/node root queries. 
",josephsavona,2016-09-03 00:45:11
112,2015-12-23 20:29:48,"@steveluscher has there been any progress on this? Is there anyway I can help? Right now, we're basically using `JSON.stringify()` to send in multiple arguments via Relay to a root query.  It's a very hacky solution, but seems to be working.  Would love to be able to remove this cruft from our project sooner rather than later ;-)
",RavenHursT,2016-09-03 00:45:11
112,2015-12-23 20:31:20,"The right solution seems like it would be to fix this issue.  If you have pointers on what to do though I can try and produce a pull request.  I'm not really clear on the details of what code does what.
",ForbesLindesay,2016-09-03 00:45:11
112,2015-12-24 01:47:22,"@RavenHursT: Indeed, though at one time I was moving full steam on this project, it's been moved to the backburner. I laid some of the groundwork (we moved from storing an association between ‘fieldNames’ and ‘rootCallIds’ to one between a field's ‘storage key’ (a hash of its name and it sorted arguments) and its ‘identifying argument value.’ Next steps include:
1. Extend the `rootCallMap` such that you can express associations between an identifying argument value (or `EMPTY` if there's no identifier) and one _or more_ data IDs (`{[identifyingArgValue: string]: DataID | Array<DataID>}`)
2. Find every instance of `forEachRootCallArg`, rename it to `forEachIdentifyingArgValue`, and teach it to store arrays of `DataID` when the field in question is plural.
3. Right now `forEachRootCallArg` assumes that root calls will have one argument and one argument only, and that any argument that appears is the identifying one. Tear down this assumption by creating a first-class GraphQL type `GraphQLIdentifier` that you can use to ‘tag’ an argument as being the ‘identifying’ one in an identifying root field. Configure the printer to print metadata that calls out the identifying argument. Teach `RelayRootQuery#getIdentifyingArg` to use this metadata to return the identifying argument (right now it just returns the first argument, if any).

The first two tasks should enable plural non-identifying root fields. The third one should unlock non-identifying arguments on root fields.
",steveluscher,2016-09-03 00:45:11
112,2015-12-31 06:23:43,"@yungsters If I were to embrace the origins of Relay, and build a system of my own that has a similar ""root call"" named `viewer`, is it fair to say that `viewer` is sort of like the current active user's window into the nested data fields?

<S_CODE_TOKEN>

If I were currently signed in as a some user, the `accounts` field would take my session and authorization into account, on the back-end, and only provide me with the items I should be able to access, or any other properties that may change based on who I am?

How would this system work without the requirement of a user being signed in, but having the ability to create an account and sign in? With the `accounts` connection being under the `viewer`, it's not possible to mutate `accounts` and so there's a chicken/egg problem there.

I'm trying to figure out how to embrace this design, and also build a user auth system entirely on top of GraphQL / Relay.
",ryancole,2016-09-03 00:45:11
112,2015-12-31 06:40:59,"@ryancole You have the description of `viewer` correct. For example, at Facebook, `viewer` contains a `news_feed` connection field that is always the current viewer's news feed. Another notable field that `viewer` has is the `actor` field which allows querying the current user's information.

As far as I know, our internal GraphQL endpoint was not originally designed for usage without authentication. However, the data model backing `viewer` _does_ support the notion of an ""unauthenticated user"". More recently, we've augmented the GraphQL endpoint to support fetching fields for unauthenticated users, but off the top of my head, I do not know what is and is not accessible.

What I imagine to be common with most applications that deal with authentication (and which is certainly true for Facebook) is for the entire client store to be reset when authenticating as a user. This is useful for a variety of reasons including isolation of concerns (e.g. modules that can assume there is a logged in user vs. those that do not make this assumption) as well as privacy and security (i.e. the simplest way to ensure that there is no cross-contamination or leaking of a user's private information is to start with a clean slate).

For example, most of the Facebook mobile apps built using React Native and Relay implement authentication without Relay, but — upon obtaining an access token — switch to relying on Relay for all user client data management.

This would certainly complicate things in a system where a user can authenticate using multiple accounts (e.g. something like an operating system such as Windows or OS X where a user can be logged in as multiple user simultaneously). But if you do not need this degree of control, I would try to keep things simple. Hope this makes sense / helps!
",yungsters,2016-09-03 00:45:11
112,2015-12-31 07:01:22,"> With the accounts connection being under the viewer, it's not possible to mutate accounts and so there's a chicken/egg problem there.

Is this actually true? I believe that if your `viewer` has a global ID (i.e. it's a Node), it will work just fine. Maybe not though, I haven't actually tried it.
",NevilleS,2016-09-03 00:45:11
112,2016-01-11 18:44:01,"Just ran into similar issues to @ForbesLindesay on a side project I was working on.

My work-around was to create a self-pointer to my root type on my root type:

<S_CODE_TOKEN>

and then all of my routes use the same `RootQuery`:

<S_CODE_TOKEN>

Instead of then creating a deeply nested query to pass to my route, I just create a wrapper component:

<S_CODE_TOKEN>

This has ended up working reasonably well for me; I end up not really using the root query functionality to drill down to the object in my schema, and use the wrappers to do that instead.
",dschafer,2016-09-03 00:45:11
112,2016-01-11 20:38:36,"@dschafer thanks for sharing! :+1: 
",emmenko,2016-09-03 00:45:11
112,2016-02-05 16:28:13,"The ability to have nesting in root queries per @ForbesLindesay's [comment](https://github.com/facebook/relay/issues/112#issuecomment-166937271) would be great. Would make composition and refactoring easier. 

>  There's no technical reason we couldn't allow nesting in the root query. — @josephsavona 

Really? Doesn't there have to be at most one leaf in a root query? Otherwise, how would Relay know at which leaf to anchor fragments?
",dminkovsky,2016-09-03 00:45:11
112,2016-02-05 17:31:16,"> Doesn't there have to be at most one leaf in a root query?

Yes, but Relay could do a recursive search for fragment references (throwing if there is not exactly one of them).
",josephsavona,2016-09-03 00:45:11
112,2016-03-03 18:55:25,"Note: We've recently made progress on this with #894 and #895 - these allow root field arguments to be any type including enums and input objects. I've updated the description with next steps.
",josephsavona,2016-09-03 00:45:11
112,2016-03-11 17:06:11,"I wish Relay would support routes like this one (using **slugs** instead of **IDs**):

<S_CODE_TOKEN>

or, **even better** this:

<S_CODE_TOKEN>

That is supposed to match a URL such as `/koistya/products/t-shirt`.

If you have a tip for me how to make it work, I would greatly appreciate that!
",koistya,2016-09-03 00:45:11
112,2016-03-11 23:15:38,"Have you tried using https://github.com/relay-tools/react-router-relay ?
",josephsavona,2016-09-03 00:45:11
112,2016-03-12 21:07:14,"Nope. But I think my problem is not the router itself (a custom one works great for me), but the lack of the support of multiple arguments in root queries. Also, I'd like to find a way to make Realy send a single query request. So I could define my routes as per example above (a single `query` request with multiple top-level fields in it).
",koistya,2016-09-03 00:45:11
112,2016-03-13 03:24:07,"@koistya somewere Jimmy Jia wrote that to make single request for multiple queries - it is the task of Network Layer. Such NL does not exist yet, but I found https://github.com/eyston/relay-composite-network-layer This is a lit bit different thing, but may be useful as an example for writing such NL.

BTW when connection is root query, you will have different logic with infinite scrolling list. You should pass `first` arg to router (then it should be passed to query), nor `this.props.relay.setVariables({first: incValue})`. And I had some problem with sorting (it was problem with multiple arguments in root queries).

So I come back to single root, aka `Viewer`, and happy again like an elephant.
",nodkz,2016-09-03 00:45:11
112,2016-04-11 12:53:22,"@steveluscher do you know when this will ship? 
",mattecapu,2016-09-03 00:45:11
112,2016-04-11 14:14:54,"@mattecapu We aren't actively working on this. I'd recommend checking out @dschafer's [comment](https://github.com/facebook/relay/issues/112#issuecomment-170648934) for a good workaround. 
",josephsavona,2016-09-03 00:45:11
112,2016-04-11 14:34:52,"@josephsavona thank you, can I know why this isn't a priority? I was pretty baffled to discover Relay isn't capable yet to do this kind of things as they seem very natural.
As of @dschafer's comment, it looks like a workaround for the multiple-parameters issue, while I need to fetch an array

<S_CODE_TOKEN>

But I get

> RelayOSSNodeInterface: Expected payload for root field `comp1s` to be a single non-array result, instead received an array with 1 results.

And I'm not really grasping the `viewer` workaround.
",mattecapu,2016-09-03 00:45:11
112,2016-04-11 16:30:15,"FWIW, since the workaround is so simple (add a ""viewer""-esque field on your
root query), I'm pretty OK that the Relay team is focusing on other stuff 😁

On Mon, Apr 11, 2016, 10:35 AM Matteo Capucci notifications@github.com
wrote:

> @josephsavona https://github.com/josephsavona thank you, can I know why
> this isn't a priority? I was pretty baffled to discover Relay isn't capable
> yet to do this kind of things as they seem very natural.
> 
> —
> You are receiving this because you commented.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/112#issuecomment-208376966
",NevilleS,2016-09-03 00:45:11
112,2016-04-11 16:49:47,"@mattecapu:

>  can I know why this isn't a priority?

Prioritization is tough, because there are always a lot more things that we would like to do than we have immediate capacity for. Even articulating why decisions are made the way they are can be tough. Perhaps the best way to get insight into what we're working on and why is to take a look at [our meeting notes](https://github.com/facebook/relay/tree/master/meta/meeting-notes). Let us know if you'd like to know more about any of the things that we're actively working on mentioned in there.
",wincent,2016-09-03 00:45:11
112,2016-04-11 17:02:30,"@NevilleS the issue is that this thread is perhaps the only documentation of this ""feature"", so it's a bit disappointing to dive into Relay and then stumble upon this obstacle. Moreover the `viewer` design pattern is not explained anywhere (at least I can't find an explanation, I'll be happy to be wrong on this!) and as a beginner I scratched my head looking at the example and thinking ""Why this?"".
In fact I'd be happy to understand how to work around this for now.

@wincent I may sound pedant/unrespectful but actually I'm a great fan of the whole React/Relay/GraphQL thing and I understand the last two are still a pretty novel technology so it's fair to have some issues! I want you (and the rest of the team) to know I really appreciate your work and effort in doing this! OSS is hard and you're doing fine anyway :smile: 
The question was more a matter of understanding, because the queries I wrote seemed straightforward to me and clashing with this issue made me wonder if I really understood how Relay is supposed to work or I'm missing something.
",mattecapu,2016-09-03 00:45:11
112,2016-04-12 07:07:16,"Okay building on @dschafer's solution I managed to work around this. For now is just an ad-hock hack but I hope to encapsulate this logic in a general-purpose wrapper.

I edited the code above in the following way:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

My `react-router` routes

<S_CODE_TOKEN>

Hope to help someone with this
",mattecapu,2016-09-03 00:45:11
112,2016-05-04 08:03:59,"Do I understand correctly that this issues covers just root fields? I was [wondering](http://stackoverflow.com/questions/36788140/plural-identifying-fields-in-relay-also-for-non-root-fieds) if there are any existing or planned options how to tell relay that some argument is identifying or that its the graphQL id.  Therefore Relay could just fetch additional data.

It would make fetching some additional information very convenient, because if I want get (on demand) some additional information in some component I need to do it in fragment. I don't see how I could make it with root fields which are always defined along with root container&component.
",jardakotesovec,2016-09-03 00:45:11
112,2016-05-04 15:49:20,"> any existing or planned options how to tell relay that some argument is identifying or that its the graphQL id

Can you clarify how this would be different than `node`? 

> It would make fetching some additional information very convenient,

Hmm. Can you clarify your goal here? There are two options for fetching data in a component, whichever is more convenient: use `setVariables`/`forceFetch` or manually construct a query and fetch it. The second option is easy to overlook, but you can always create a root query _without_ a route and fetch it:

<S_CODE_TOKEN>

Note that this method will write the results of the query into the cache, and all affected components will re-render if necessary (i.e. you don't need to call `setState` or anything in the callback above).
",josephsavona,2016-09-03 00:45:11
112,2016-05-05 07:32:18,"@josephsavona I apologize for vague description what I had in mind. Example should clear it up.

<S_CODE_TOKEN>

This is the on demand scenario when I want to get metadata for formats using `setVariables`. My use case is that I have some general informations for all formats (from initial 'static' query) but need to get some extra informations on demand on different places in the app and wanted to reduce over-fetching. So I know the ids for formats and want to get extra fields on-demand for few of them.

But afaik it is not possible to tell Relay that I am gonna use list of actual graphQL ids. Therefore it re-fetches format for any new combination of ids.

So lets say at first I would do:
1) `setVariables({formatIds: [id1, id2]})`, relay fetches formats id1 and id2 with all required fields in this fragment instead of just missing fields.
2) `setVariables({formatIds: [id3, id2]})`, relay fetches formats with id3 and id2 instead of just missing fields for id3

`node` field is the closest thing, but I can't use it for list of ids and use it in component fragment to get data from container.  
",jardakotesovec,2016-09-03 00:45:11
112,2016-05-05 10:41:23,"It might even be nice to have a concept of `nodes()` field which would require either a `type` or `ids` param but also would allow for some additional optional filters so this could be used for fetching all nodes of the given type, fetch all nodes given the list of ids and have some additional customer filters (e.g. I want only nodes of a type that include a title)

Looking something like this:

<S_CODE_TOKEN>

Or of course wrapped in the viewer.
",Globegitter,2016-09-03 00:45:11
112,2016-05-05 17:54:10,"aahh @jardakotesovec have you seen the `@relay(plural: true)` option yet? That would allow you to ask for multiple ids and return you all these elements.
",Globegitter,2016-09-03 00:45:11
112,2016-05-05 18:37:33,"> node field is the closest thing, but I can't use it for list of ids and use it in component fragment to get data from container.

Relay supports [plural identifying root fields](http://facebook.github.io/relay/graphql/objectidentification.htm#sec-Fields) which work exactly as you're describing. If you implement a `nodes(ids: [ID!]): [Node]` field in the schema, Relay understands that each of the id arguments corresponds to the specific `Node` with that id. If you fetch `nodes(ids: [1,2])` and then `nodes(ids: [2,3])`, Relay will know that id 2 has already been fetched, and diff this to only fetch `node(id: 3)`.
",josephsavona,2016-09-03 00:45:11
112,2016-05-07 14:49:24,"@josephsavona

> Note that this method will write the results of the query into the cache, and all affected components will re-render if necessary (i.e. you don't need to call setState or anything in the callback above).

I actually tried that, I built a query to fetch some additional fields on a node and sent it to the node interface.
The query built by Relay looks correct (only the missing fields are asked), but the result is never merged into the cache.
The only way I found to get the updated data is `Relay.Store.readQuery(query)[0];`
Any idea what I'm doing wrong ?
",kamek-pf,2016-09-03 00:45:11
112,2016-05-07 21:56:50,"@kamek-pf the public data-fetching APIs always merge data into the cache. If you're not seeing an update one of two things could be happening: 
- mismatched ID - maybe the component isn't listening on the id that is updated. To confirm this, check the earlier results and later results to make sure the IDs match 
- wrong API. it sounds like you're calling the right method, but if you paste your code we can help diagnose. 

Either way, can you open a new issue for this? This is tangential to the OP. 
",josephsavona,2016-09-03 00:45:11
112,2016-05-09 06:40:57,"@josephsavona I am aware of the _plural identifying root field_, but I have two issues there
- I need this field `formats` it on different places in the app inside components and I don't see how I could use them inside fragment, since its root field
- And yes it allows to link keys with objects, but it does not know that its actual graphQL id, therefore if I get all formats (with some basic fields) at the beginning and want to get extra fields using root identyfing fields, it fetches all fields and creates additional mapping between id and object. This issue was mentioned [here](https://github.com/facebook/relay/issues/457).
",jardakotesovec,2016-09-03 00:45:11
112,2016-07-20 02:53:57,"So, with the `viewer` workaround, how do we query the `node` root field if everything goes through `viewer`? Is this what the additional ""self-pointer to my root type"" workaround is used for? So you can do something like:

<S_CODE_TOKEN>

But doing that gives me:

<S_CODE_TOKEN>
",LegNeato,2016-09-03 00:45:11
112,2016-07-20 08:21:28,"@LegNeato The `node` field needs to be on `Query`, alongside your `root` node.
",mjtamlyn,2016-09-03 00:45:11
112,2016-07-20 20:39:26,"I have it there but still not getting how to query it from client code as the client fragments all refer to `viewer`.

<S_CODE_TOKEN>

I'll poke at it some more and take it to stackoverflow if I still don't get it.
",LegNeato,2016-09-03 00:45:11
112,2016-07-21 15:42:27,"@LegNeato I used to have my own copy of node called `object()` below of client. I believe the reason I named it ""object"" is the error you posted above. The check for the location of ""node"" that Relay does is, I think, to dumb to understand that this is an additional node field. Try to rename it.

However, have you considered (I am doing this now instead myself) just using two root queries:

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",miracle2k,2016-09-03 00:45:11
112,2016-07-22 18:58:42,"I ended up figuring it out, or at least something that works nicely. @miracle2k I think I can't just blindly use `$id` as some routes have multiple nested ids. Honestly didn't try it though.

In the schema definition:

<S_CODE_TOKEN>

In the `react-router` definitions:

<S_CODE_TOKEN>

In the client component:

<S_CODE_TOKEN>
",LegNeato,2016-09-03 00:45:11
112,2016-09-03 00:45:11,"We're preparing [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable), which completely removes the restrictions and special casing around root fields. So I'm going to close this as we're unlikely to take any direct action on it, but people using Relay 1 will still be able to find this issue via search. Thanks to everybody who has participated in the thread!
",wincent,2016-09-03 00:45:11
112,2016-11-13 20:41:44,"@maletor That extra level of indirection isn't necessary. It's sufficient to do:

<S_CODE_TOKEN>
",josephsavona,2016-09-03 00:45:11
111,2015-08-18 18:55:17,,devknoll,2015-08-18 21:00:26
110,2015-08-18 16:54:46,"It seems that a script to generate `scripts/jest/testschema.json` is missing from the repository?

I need to add a type to the schema to use in a test case, but it seems that there should be a script to read the schema and dump the results of introspection query to JSON. I could write a script to do this with graphql-js, but maybe there already is one and it was just forgotten from this repo?
",fson,2015-08-18 23:06:00
110,2015-08-18 17:31:54,"In the meantime, to unblock you, you can adapt [this one](https://github.com/facebook/relay/blob/master/examples/todo/scripts/updateSchema.js) for your purpose!

cc/ @josephsavona
",steveluscher,2015-08-18 23:06:00
110,2015-08-18 17:37:12,"We should add a script to do this at `scripts/jest/update-testschema.js`.
",yungsters,2015-08-18 23:06:00
110,2015-08-18 23:06:00,"added `npm run update-schema` in #116 
",josephsavona,2015-08-18 23:06:00
110,2015-08-19 07:45:07,"Great, thanks @josephsavona!
",fson,2015-08-18 23:06:00
109,2015-08-18 16:15:28,"Per @zao in facebook/fbjs#38:

> We really shouldn't be doing - this flag is only consumed in downstream installs. Saying that fbjs is only compatible with node > 2 is a lie. It might be all we test with but that doesn't make it true.
> 
> It would be good to have some prevention mechanism to make sure the right versions of tools are being used for development (Eg, check node and npm versions)
> 
> Actually 1 place that might use this info is TravisCI. Just confirm in relay what version gets run both before and with a PR to remove this line.
",yungsters,2015-08-18 17:08:29
109,2015-08-18 16:15:42,"cc @cpojer 
",yungsters,2015-08-18 17:08:29
109,2015-08-18 17:09:02,"Ah. #npmn00b

It almost seems like we want `devEngines`. Hope the node/iojs reconciliation will rid us of this problem however.
",cpojer,2015-08-18 17:08:29
108,2015-08-18 13:29:02,"I've been trying to add a fragment to the top level `queryType` in a `Relay.Route` but I get this error `Encountered a GraphQL validation error processing file '/Users/albertstill/github/website-next/js/routes/AppHomeRoute.js'. Check your terminal for details.` and no error in my terminal. Seems the babel-relay-plugin is seeing it as an error and transpiling my JS to throw an error in the browser.

I tested the query I want to happen in Postman and it works. The reason I want to add a fragment to the  `queryType` type is because I have a root level field called `posts` that returns a `PostConnection`. We do not have the concept of a `viewer` root level field.  

<S_CODE_TOKEN>
",albertstill,2015-08-20 23:47:23
108,2015-08-18 14:51:34,"There's currently a very hard assumption being made that all Relay.Routes define a single root query, and include a single fragment.

I can't speak for the Relay team on whether or not this will change (though I think it's unlikely), but probably the easiest thing would be to wrap your posts field in another object type (like a viewer root would have done for you).
",devknoll,2015-08-20 23:47:23
108,2015-08-18 16:09:51,"As @devknoll explained, the easiest thing would be to have a ""viewer""-like object for now. For context, root fields are expected to conform to the Object Identification spec which allows Relay to create a mapping from `root field name + argument => node ID`. For example:
- `node(id: 123)`
  - Response: `{id: 123, ...}`
  - We know that `node` with `id` of `123` maps to the node with ID of 123.
- `user(usernames: [yungsters, en_js])`
  - Response: `[{id: 456, ...}, {id: 789, ...}]`
  - We know that `user` with `username` of `yungsters` maps to the node with ID of 456.
  - We know that `user` with `username` of `en_js` maps to the node with ID of 789.

We want to change some assumptions made to be able to enable querying arbitrary fields from the root (e.g. a connection), but for now it isn't super smooth.
",yungsters,2015-08-20 23:47:23
108,2015-08-18 18:59:12,"See #112 for a better explanation.
",yungsters,2015-08-20 23:47:23
108,2015-08-20 23:47:23,"I am going to close this issue. Please follow along at #112 for discussion and updates on root field support.
",yuzhi,2015-08-20 23:47:23
107,2015-08-18 12:33:42,"`this.props.users` is object of first user instead of array. Note that top level GraphQL query `users` has the right type `new GraphQLList(userType)`. Consider this code:

**app.jsx:**

<S_CODE_TOKEN>

**Users.jsx:**

<S_CODE_TOKEN>

**HomeRoute.js**:

<S_CODE_TOKEN>

Where could be the problem? Thank you.
",Nutelac,2015-08-18 17:38:59
107,2015-08-18 15:03:47,"The `Users` container needs to know that it should be getting an array. 
Can you try replacing `fragment on User` with `fragment on User @relay(plural:true)`?
",yuzhi,2015-08-18 17:38:59
107,2015-08-18 16:41:06,"Unfortunately, this does not works. It throws `Invariant Violation: GraphQLFragmentPointer: Wrong plurality, single data ID supplied with plural fragment.`. I'm pretty sure that this query returns array:

<S_CODE_TOKEN>
",Nutelac,2015-08-18 17:38:59
107,2015-08-18 17:29:31,"Here is [repo](https://github.com/Nutelac/react-relay-issue).
",Nutelac,2015-08-18 17:38:59
107,2015-08-18 17:35:08,"The problem you're running into is the same one that several others have been filing issues about. Basically, fields on the root are treated specially and assumed to either:
- Map to a single node (e.g. `node(id: 123)`, `me`), or...
- Map to an array of nodes (e.g. `nodes(ids: [123, 456])`).

Your `users` field does not have any arguments, so it is assumed to respond with a single record. For now, if you create a root object (e.g. `viewer`) and add a `users` field on it, this should work. However, @yuzhi also brought up the point that you might actually want `users` to be a connection instead of a plural field. (If you ever have hundreds of users, you might want to paginate instead of getting them all back.)

I'll write up a more comprehensive issue to explain what the problem is, why it exists, current workarounds, and future plans.
",yungsters,2015-08-18 17:38:59
107,2015-08-18 18:59:25,"See #112 for a better explanation.
",yungsters,2015-08-18 17:38:59
106,2015-08-18 11:39:52,"I'm currently working on an example from flux-chat to relay
https://github.com/transedward/relay/tree/master/examples/chat
I tried remove everything from flux, but encounter some problem
For example: How to deal with currentID of ThreadStore in Flux when user clicking thread
Since it's not something you would like to put in database but a necessary state for application
I come up with two solution:
1. put in connectionField like todoApp completeCount, 
   https://github.com/facebook/relay/blob/master/examples/todo/data/schema.js#L88
   but since resolve function can only get connection back, I don't where I can send thread.id into function and get access to it?
2. like the bottom part of this, http://facebook.github.io/relay/docs/guides-routes.html#content
   `addEventListener` for `pushState`, and every time you click thread, then `window.pushState({currentID}, '')`, but stored in a variable in `Relay.createContainer`
   like I do it here, https://github.com/transedward/relay/blob/master/examples/chat/js/components/MessageSection.js#L62
   But seems like Relay will parse this before any component mounted, you can't access any history state here
   I prefer this approach because in the future I can do thing like `/thread/{id}`
   then parse the `id` for `currentID` but by default when `/` then display the newest thread

I would to hear some feedback and suggest on this, thanks
",transedward,2015-08-24 19:53:10
106,2015-08-18 20:29:44,"1. Relay currently only supports the caching of server data. To store purely client state, such as the  `currentID` representing the active message thread, we recommend continuing to use a Flux store or similar solution. We're working to support non-server data as a future enhancement.
2. It's a bit unclear what you're trying to do here with routing. Can you provide more specific links to where you have the Route configured with a path of `/thread/{id}`, and how you're managing routing?
",josephsavona,2015-08-24 19:53:10
106,2015-08-19 01:15:15,"@josephsavona speaking of routing, is there more detailed example on how relay works with multiple routings and view-switching? As far as I can see currently all examples are single-routed, thanks.
",coodoo,2015-08-24 19:53:10
106,2015-08-19 01:26:57,"cc @steveluscher who was going to work on an example with multiple routes
",josephsavona,2015-08-24 19:53:10
106,2015-08-19 02:12:53,"> where you have the Route configured with a path of /thread/{id}

Sorry I need to rephrase: in the future, seems it's a simple app, I just store in `history.state`
But if state works here, it's not difficult to build a simple ""relay-router""
But if I didn't figure it wrong, the starting of `Relay.createContainer` is before any lifecycle of `React`, right?
So we can't put any expression like `history.state.currentID` in `initialVariables` property, it has to be `value` like `123`
In this way, we can't let '/' has a default route to '/threads/{threads.egdes[0].node.id}'
",transedward,2015-08-24 19:53:10
106,2015-08-19 03:43:19,"Lots of routing related work coming down the pipe in #118 and relayjs/relay-starter-kit#15!
",steveluscher,2015-08-24 19:53:10
106,2015-08-20 03:55:47,"now the example is working except that AddMessageMutation not optimistically update as expected
Anyone with interest can see it here: https://github.com/transedward/relay
and one with hot-reloading and source-map to make debug happy here: https://github.com/transedward/relay-chat
I would also try new approach to improve the latter one
",transedward,2015-08-24 19:53:10
106,2015-08-23 10:48:31,"It would be great if components could declare client-side data requirements in the same container. 

If we could extend server schema on the client with transient data - we could have unified interface for dealing with data, regardless of it being client- or server-based.

Custom network layer could probably handle data splitting on request / merging it back on response.
",vladar,2015-08-24 19:53:10
106,2015-08-23 10:59:15,"See #114 for a proposed API on how to access in-memory (or similar) data.
",clentfort,2015-08-24 19:53:10
106,2015-08-23 11:20:08,"@clentfort thanks for sharing - missed that one.
",vladar,2015-08-24 19:53:10
106,2015-08-24 15:22:22,"@transedward this thread has gotten a bit off-topic. Were you able to resolve the issue with optimistic updates for `AddMessageMutation`s?
",josephsavona,2015-08-24 19:53:10
106,2015-08-24 16:53:25,"@josephsavona No, as I  reported #135, I would post a more explained-through there
You can close this issue if you guys think the issue about client side data managing is well under tracked.
I have gotten the route working. So I get the answer with my original question
",transedward,2015-08-24 19:53:10
106,2015-08-24 19:53:10,"Yeah, we're tracking the client-side data management enhancement in #114 - thanks for filing this!
",josephsavona,2015-08-24 19:53:10
105,2015-08-18 11:23:00,"I'm currently working on an example from flux-chat to relay
https://github.com/transedward/relay/tree/master/examples/chat
I face a problem on console and it said check your terminal
But my terminal is fine and didn't show anything, how can I further useful information
",transedward,2015-08-18 17:28:42
105,2015-08-18 16:11:51,"> I face a problem on console [...]

Can you copy/paste the problem you're running into here?

---

**Edit:** D'oh, did not see the title of the issue.

> Uncaught Error: Encountered a GraphQL validation error processing file
",yungsters,2015-08-18 17:28:42
105,2015-08-18 17:02:40,"It sounds like the default dev server configuration isn't outputting GraphQL validation errors correctly on the console. Thanks for bringing this up, I can look into it.
",josephsavona,2015-08-18 17:28:42
105,2015-08-18 17:28:38,"This should be resolved by #96 - thanks @devknoll! (feel free to re-open if it isn't)
",josephsavona,2015-08-18 17:28:42
105,2015-09-26 13:36:44,"@transedward, This issue still happens to me. Was it solved for you? Because if it was I'll probably have to try and check if it's something else on my end.
",alexandrethsilva,2015-08-18 17:28:42
105,2015-09-26 15:42:17,"@alexandrethsilva Hey, I don't remember really well, but check your babel-relay-plugin for sure. and Maybe open another issue if there is any useful error or warning message. I haven't encounter that problem since then.
",transedward,2015-08-18 17:28:42
104,2015-08-18 08:36:20,"See discussion in #20.

I'll try to get this in the next day or so if nobody beats me to it :smile: 
",devknoll,2015-08-24 16:03:04
104,2015-08-18 17:28:04,"@yungsters Are there any internal users of `buildRQL.Query`? Seems like it's only being used for routes. I'll probably make this change there if not.
",devknoll,2015-08-24 16:03:04
104,2015-08-18 17:29:35,"@devknoll Nope, `getRelayQueries` is the only caller of `buildRQL.Query`.
",yungsters,2015-08-24 16:03:04
104,2015-08-24 16:03:04,"#115 with the changes, so I'm going to close this issue out.
",devknoll,2015-08-24 16:03:04
103,2015-08-18 06:52:04,"@cpojer 
RE: #102 
",knowbody,2015-08-18 07:12:35
103,2015-08-18 06:54:00,"This is not entirely correct. Can you also rename the check from `getQuery` to `getFragment`?
",cpojer,2015-08-18 07:12:35
103,2015-08-18 06:54:12,"Also, I was about to send out this same PR, but I guess you beat me to it :P
",cpojer,2015-08-18 07:12:35
103,2015-08-18 06:55:15,"Community: 1
@cpojer: 0
",yungsters,2015-08-18 07:12:35
103,2015-08-18 07:01:41,"yeah, changing it, sorry :smile: 
",knowbody,2015-08-18 07:12:35
103,2015-08-18 07:12:34,"I squashed your two commits into a single one because this was a simple fix. I hope you do not mind – thank you very much for your contribution and keep it up :)

See 3e0fa93c6a6be180bb10c7846acd95de25dd29fc
",cpojer,2015-08-18 07:12:35
103,2015-08-18 07:15:37,"of course I don't mind, I ""stole"" your PR lol :+1: 
",knowbody,2015-08-18 07:12:35
102,2015-08-18 06:24:53,"https://github.com/facebook/relay/blob/master/src/container/isRelayContainer.js#L17

This should probably check for `getFragmentNames` now :)
",cpojer,2015-08-18 07:12:46
102,2015-08-18 07:12:46,"Fixed in https://github.com/facebook/relay/commit/3e0fa93c6a6be180bb10c7846acd95de25dd29fc
",cpojer,2015-08-18 07:12:46
101,2015-08-18 05:42:23,"Fixes the only Flow error that currently exists:

<S_CODE_TOKEN>
",yungsters,2015-08-18 17:11:59
100,2015-08-17 23:44:27,"I tried to pass an input object as an argument to a field, which resulted in following error: `Unexpected arg kind: ObjectValue`.

The fragment in question looks like this:

<S_CODE_TOKEN>

The error is [thrown here, in GraphQLPrinter.js](https://github.com/facebook/relay/blob/5a39c90d82ca47bbe508e8200bb052a031c8a30e/scripts/babel-relay-plugin/src/GraphQLPrinter.js#L298). It seems only builtin scalar types and variables are supported by GraphQLPrinter. Does this mean the only way to pass an input object in Relay is to write `credits(orderBy: $orderBy)` and pass it in the variables instead?
",fson,2015-09-04 18:48:15
100,2015-08-18 17:06:15,"The main reason we didn't support input objects right off the bat is that it's possible for them to contain nested variables, which complicates processing of arguments at runtime. It isn't too difficult to add support for them, but the simple workaround is a variable as you suggested.

Example nested variable:

<S_CODE_TOKEN>
",josephsavona,2015-09-04 18:48:15
100,2015-08-18 17:12:39,"Thanks for the explanation @josephsavona!

A quick follow up question: I changed this to a variable like this:

<S_CODE_TOKEN>

Now I'm getting an error on the server: `Argument ""orderBy"" expected type ""ReindexOrderBy"" but got: {field: ""name"", order: ""ASC""}`. (That is, the schema expects an enum `ASC` but Relay printed it as a string.)
Is `printRelayQuery` not printing enums inside input objects a known bug or should I open a separate issue about that?
",fson,2015-09-04 18:48:15
100,2015-08-18 17:19:21,"This is a known limitation - we didn't have time to add support for printing enums inside input objects. Again, this isn't difficult but it requires adding quite a bit more metadata about arguments in order to print them correctly. 

cc @leebyron @dschafer is there anything we can do to make it easier for tools to autogenerate valid inputs?
",josephsavona,2015-09-04 18:48:15
100,2015-08-18 18:11:34,"@josephsavona I noticed the enum values sent separately in the request body using the `variables` property would already work. When does Relay send variables separately and when does it bake them in the query string?

I wonder if I could somehow force them to be sent separately and use this to work around the fact that enums can't be printed. If not, I'll just try to avoid enums in input objects for now.
",fson,2015-09-04 18:48:15
100,2015-08-18 20:39:42,"Relay inlines _all_ variables in queries in order to allow the same fragment to be used with different values. The `variables` HTTP query param ends up being ignored (because no variables appear in the query) - they're only useful for debugging what the root variables were.

For an example of why inlining is necessary, consider the `ProfilePicture` component. It might appear in multiple places in the application hierarchy, each referencing the same `$size` variable, but with different values:

<S_CODE_TOKEN>

The solution for enums within object values is to construct a new variable for every input object, so that it can be sent as plain JSON instead of an inline value.
",josephsavona,2015-09-04 18:48:15
100,2015-08-19 16:40:38,"Thanks for the explanation @josephsavona. That makes sense.

Just making sure I understood the proposed solution for supporting enums within object values, if we were to implement that the fragments and variables sent to the server would be something like this?

<S_CODE_TOKEN>

variables (with generated unique names):

<S_CODE_TOKEN>
",fson,2015-09-04 18:48:15
100,2015-08-21 00:08:11,"Heads up that I'll send a PR for this soon.
",josephsavona,2015-09-04 18:48:15
100,2015-08-21 01:49:03,"I've started adding support here - https://github.com/josephsavona/relay/commits/inputobjects - but this will also require some upstream changes. `printRelayQuery` needs to return `{text, variables}` instead of the text alone.
",josephsavona,2015-09-04 18:48:15
100,2015-08-21 17:05:34,"@josephsavona Looks good so far!

Noticed `printRelayQuery` is in `__forks__`. What is the ""canonical"" repo for it?
",fson,2015-09-04 18:48:15
100,2015-08-22 17:37:43,"Correct me if I'm wrong: `__forks__` contains modules that differ from facebooks internal version of relay. Since facebook does not yet use the RFC version of GraphQL internally they need a different printer for their queries.
",clentfort,2015-09-04 18:48:15
100,2015-08-22 23:31:03,"Yup, that's is. This is the same Relay we use internally and the forks account for the (minor) differences in GraphQL versions.
",josephsavona,2015-09-04 18:48:15
99,2015-08-17 22:47:48,"Let's say I have a client side route like `/widgets?color={color}`. Correspondingly, I want a query that looks like

<S_CODE_TOKEN>

After some stumbling, it seems like the best way to do this is something like:

<S_CODE_TOKEN>

Is this indeed the correct approach, or am I horribly abusing undocumented features?
",taion,2015-08-18 06:05:10
99,2015-08-17 22:53:16,"I imagine all will be made clear once the `todo` example gets fleshed out, but this was just one of the first things I hit in trying to do a quick Relay-based PoC, so wanted to see how far I was from the right track.
",taion,2015-08-18 06:05:10
99,2015-08-18 03:09:02,"Yes this seems correct.
",cpojer,2015-08-18 06:05:10
99,2015-08-18 06:05:10,"Cool, just wanted to make sure I wasn't abusing private APIs. Thanks!
",taion,2015-08-18 06:05:10
99,2015-08-18 22:39:11,"@taion Found this too: https://facebook.github.io/relay/docs/api-reference-relay-mutation.html#getfragment-static-method so I guess that makes it official? :wink: 
",devknoll,2015-08-18 06:05:10
98,2015-08-17 21:46:40,"made it more clear to read
",liesislukas,2015-09-01 19:50:47
98,2015-08-17 22:04:45,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-09-01 19:50:47
98,2015-08-18 04:30:49,"Thanks for this. Would you mind updating the title to something more descriptive than ""Update GraphQL-RelaySpecification.md""?
",wincent,2015-09-01 19:50:47
98,2015-08-18 07:03:05,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-09-01 19:50:47
98,2015-08-18 19:37:12,"looks good?
",liesislukas,2015-09-01 19:50:47
98,2015-08-19 16:36:50,"@liesislukas thanks for the contribution! please see our feedback so we can merge.
",josephsavona,2015-09-01 19:50:47
98,2015-08-28 16:39:42,"Ping @liesislukas; we'd love to get this in. Do you have time to update the PR with @josephsavona's comments?
",steveluscher,2015-09-01 19:50:47
98,2015-09-01 19:50:47,"@liesislukas, I've added another commit on top of this one [here](https://github.com/facebook/relay/pull/209) to address the issues raised, so I am going to close out this pull request.

Thanks for your contribution!

[Edit: actually added the link.]
",wincent,2015-09-01 19:50:47
97,2015-08-17 21:10:04,"My understanding is that data requirements on Relay Containers are defined statically and are fetched regardless if component is shown. 

Therefore logic what data will be actually necessary has to be deduced in Relay.Route from the parameters - that might be coming from url parameters or some other context.

So I guess creating several Relay.Route objects covering different scenarios is way to go currently. I know that its obvious to use multiple Relay.Route when different views are shown. But I mean for example scenario when user is on  page with list of albums and clicks on one of them to see pop-up menu with songs list (which is kind of sub-route scenario). That could affect url (using react-router) that could switch to different Relay.Route object that would additionally call `getFragment` on that pop-up menu.

I noticed in examples that Relay.Route always just call `getFragment` on `Component` which is argument. But I assume that calling `getFragment` directly in Relay.Route also from other components is also reasonable? 

Does this approach make sense? Wondering if there are some other tricks how to conditionally change data requirement - and I mean decide whether data be fetched or not (for example based on the fact if pop-up menu is opened or not). 

Thanks!
",jardakotesovec,2015-08-27 17:48:38
97,2015-08-17 21:56:24,"> But I assume that calling getFragment directly in Relay.Route also from other components is also reasonable?

At the moment, there's a 1:1 mapping between a route root query and a fragment. You should also check https://github.com/facebook/relay/issues/20#issuecomment-130770234, because the `Component` argument is going away too. So, multiple routes probably aren't what you're looking for.

Digging through the source code, you might be able to achieve what you're looking for using variables, doing something like this:

<S_CODE_TOKEN>

And then running `setVariables` when you need to get the songs. Note: this is untested, and I have no idea if this will be a supported feature.
",devknoll,2015-08-27 17:48:38
97,2015-08-17 22:29:03,"Another possibility would be to just use connections, and do something like:

<S_CODE_TOKEN>

and use `setVariables` again to grab the list.
",devknoll,2015-08-27 17:48:38
97,2015-08-20 07:41:28,"These conditional fragments would be great pattern for these use cases.

<S_CODE_TOKEN>

Could someone from fb please comment if thats pattern we can use at the moment/future?

Thanks
",jardakotesovec,2015-08-27 17:48:38
97,2015-08-21 18:05:43,"@jardakotesovec Sorry for missing this: yes, `${Child.getFragment(..).if(variables.foo)}` is supported. Be sure to check the value of `variables.showPopup` in your render code and skip rendering `<SongList>` when it's false, otherwise you'll get errors about missing data.
",josephsavona,2015-08-27 17:48:38
97,2015-08-27 17:48:38,"@jardakotesovec did that solution work for you? I'm going to close this issue since the question is answered, but feel free to reopen if you have any additional questions!
",josephsavona,2015-08-27 17:48:38
96,2015-08-17 19:55:32,"Errors that are thrown in babel-relay-plugin that aren't validation errors still get a

> Encountered a GraphQL validation error processing file `...`. Check your terminal for details.

But nothing is actually ever logged to the terminal.

This PR makes sure that _something_ is shown to help with debugging.
",devknoll,2015-08-18 17:11:44
96,2015-08-18 17:11:58,"Awesome! I was about to work on this :-)
",josephsavona,2015-08-18 17:11:44
95,2015-08-17 19:40:58,"It would be very handy if getSchema (https://github.com/facebook/relay/blob/master/scripts/babel-relay-plugin/src/getBabelRelayPlugin.js#L198) could accept a promise/async function for schemaProvider. 
That way we wouldn't have to rebuild the schema into a file and read from it. Instead it could just be done on the fly.

Thanks!
",grydstedt,2015-08-27 17:46:50
95,2015-08-18 05:00:23,"I like where you're trying to take this! I plan on taking this on as part of relayjs/relay-starter-kit#13.
",steveluscher,2015-08-27 17:46:50
95,2015-08-18 21:02:13,"Awesome!
",grydstedt,2015-08-27 17:46:50
95,2015-08-27 17:46:50,"This is a great idea, but babel transforms files synchronously, so the schema must also be available synchronously when the plugin is used. The way around this is to load the schema (asynchronously) first, and _then_ compile via babel.
",josephsavona,2015-08-27 17:46:50
95,2015-08-27 17:47:37,"I'm closing this due to the synchronous limitation and because @steveluscher is tracking `babel-relay-plugin` updates at relayjs/relay-starter-kit#13.
",josephsavona,2015-08-27 17:46:50
94,2015-08-17 19:04:04,"Totally understand this error for mutations (given the standard `INPUT_TYPE`), but I just got this on a root query in a route. Is this intended to apply to _all_ root queries, or just mutations?

In the mean time, I'll just refactor that query to take a single `input`, like mutations.
",devknoll,2015-08-18 20:13:13
94,2015-08-17 19:10:19,"This is intended, as Relay needs to understand how the argument values of the root field correspond to the response values. We've solved this by limiting the flexibility of the root field, but it is possible that we could remove this limitation.

Can you describe an example use-case where multiple arguments would be valuable?
",josephsavona,2015-08-18 20:13:13
94,2015-08-17 19:19:51,"In my situation, I have a route with two variables (`/:moduleSlug/:tutorialSlug`), both required to resolve the query. I was trying to pass them to a `tutorial(module: $module, tutorial: $tutorial)` root query.

The INPUT_TYPE seems like it will work for now, but not ideal. Let me know if you have another idea for how this could be solved.
",devknoll,2015-08-18 20:13:13
94,2015-08-17 19:25:49,"How about lists and connections as root fields? That is also limited, right?
",jardakotesovec,2015-08-18 20:13:13
94,2015-08-17 19:34:25,"Never mind, input objects don't work here either (`Unexpected arg kind: ObjectValue`)...
",devknoll,2015-08-18 20:13:13
94,2015-08-18 14:58:57,"@devknoll this might be a bit hacky, but have you tried getting that root query to take in a string and JSON.stringify the two variables? 

@jardakotesovec  Correct, connections can not be root fields at the moment. As @josephsavona  mentioned, we might be able to remove these limitations
",yuzhi,2015-08-18 20:13:13
94,2015-08-18 15:03:04,"@yuzhi So, I think in my own case, I might just change my urls to be less hierarchical (they are getting ridiculous as is...). 

But lots of folks do use hierarchical urls, so it seems like a restriction worth removing, if possible.
",devknoll,2015-08-18 20:13:13
94,2015-08-18 20:01:27,"See #112 for more detailed explanation.
",yuzhi,2015-08-18 20:13:13
94,2015-08-18 20:13:13,"Thanks yuzhi. I'll close this one so the discussion can move there!
",devknoll,2015-08-18 20:13:13
93,2015-08-17 19:02:48,"Update GraphQL packages in babel-relay-plugin and examples to latest versions.
",fson,2015-08-26 02:27:18
92,2015-08-17 18:45:28,"If you accidentally leave off the little fat arrow (`() =>`) when defining a fragment like:

<S_CODE_TOKEN>

you will receive a very cryptic:  `fragmentBuilder is not a function`. This PR improves it to instead say:

> Relay(MyComponent): Expected query fragment named `viewer` to be a function returning a fragment. A typical fragment is defined using: viewer: () => Relay.QL`fragment on Type {...}`
",devknoll,2015-08-18 20:03:54
92,2015-08-18 17:15:43,"Looks good.
",yungsters,2015-08-18 20:03:54
92,2015-08-18 17:17:20,"@yungsters no it doesn't, give me a minute :smile: 
",devknoll,2015-08-18 20:03:54
92,2015-08-18 17:19:13,"Sorry, noticed a typo. Should be good now @yungsters :smile: 
",devknoll,2015-08-18 20:03:54
92,2015-08-18 17:27:05,"Can we make the error message consistent with the rest of Relay? Perhaps

<S_CODE_TOKEN>
",josephsavona,2015-08-18 20:03:54
92,2015-08-18 17:34:45,"Good call. Done as per your suggestion.
",devknoll,2015-08-18 20:03:54
92,2015-08-18 17:39:57,"Thanks!
",yuzhi,2015-08-18 20:03:54
91,2015-08-17 17:56:18,"E.g. a DateTime field could be automatically turned into a Moment.js object.

Is this possible already and I just missed it in the docs?
",KyleAMathews,2016-09-03 00:47:51
91,2015-08-17 19:04:50,"This isn't currently supported, and you'd have to manually convert complex types e.g. in your components given the plain data from Relay. This is definitely a use-case worth considering.

I'll leave this open to gather feedback about the idea and examples of data types people may need.
",josephsavona,2016-09-03 00:47:51
91,2015-08-17 20:23:35,"The most common use case that comes to mind is indeed DateTime (that was the first custom scalar type we added in our own GraphQL server). Another example that would be useful in apps that deal with location data could be a geo point, for example hydrated to `google.maps.LatLng`.

Because these scalar types and their client-side representation are application specific, if this is going to be added to Relay it should probably be fully extendable, e.g. you could define a mapping from your GraphQL types to your JavaScript object builders. Transit-js might be a [good place](http://swannodette.github.io/2014/07/30/hijacking-json/) to look for an example on how to provide extension points for this.

I think this is could be an interesting idea. While it can also be implemented separately in the transport layer, e.g. with Transit, the GraphQL schema already has the necessary type information for hydrating types, meaning no extra metadata about the object type would need to be passed in the responses. This might save lots of bytes in apps that handle large amounts of data.

On the other hand this could add complexity to the framework, so maybe it would be worth it to consider if this could be done as a separate library outside Relay? A custom `RelayNetworkLayer` gets access to the runtime representation of each query in `sendQueries` and `sendMutation`. Maybe if the Babel plugin would store enough information about the types in the tree, the hydration of responses and serialization of requests could happen in the network layer using that information about the query?
",fson,2016-09-03 00:47:51
91,2015-08-17 21:22:22,"Yeah, Transit-js was what I was thinking of when I wrote this issue.
",KyleAMathews,2016-09-03 00:47:51
91,2015-08-18 19:15:48,"This would be useful for having fields that represent plain JSON objects as well.
",taion,2016-09-03 00:47:51
91,2015-08-18 19:53:54,"The transport layer is probably the wrong place to introduce this as it couples too much of the system together; in particular, the transpiler (to annotate types), the query representation (to expose this metadata), and any network implementation. It also increases the responsibility of a network layer, putting a burden on all implementors.

The best way to approach this is to change `babel-relay-plugin` to annotate the types of leaf fields, and add support in the payload processing phase (`RelayQueryWriter`) for deserializing ""complex"" values. For each leaf field, check if it has a non-scalar (Int, String, Boolean) type and if so, determine if there is an injected handler for that type. Pseudo code:

<S_CODE_TOKEN>

cc @yungsters 
",josephsavona,2016-09-03 00:47:51
91,2015-08-18 19:56:36,"Edit: summarizing on offline discussion with @yungsters - given the complexity of the ""ideal"" solution I described above, we're inclined to _not_ add support for deserializing complex values right now. Doing so could conflict with other planned improvements such as querying local/device data and representing the cache as an immutable object.

We'd be curious to see how you approach this in a custom network layer and see about integrating that work down the road.
",josephsavona,2016-09-03 00:47:51
91,2015-08-18 20:16:18,"For me not super high as a) it'll be a month or so before I start
implementing relay and b) it's pretty easy to just hydrate in views for now.
On Tue, Aug 18, 2015 at 12:56 PM Joseph Savona notifications@github.com
wrote:

> How would you rate the priority of this?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/91#issuecomment-132332431.
",KyleAMathews,2016-09-03 00:47:51
91,2015-08-18 20:20:36,"It's of very low importance to me as well - it's easy enough to handle this in my own code for now.
",taion,2016-09-03 00:47:51
91,2015-08-18 20:26:06,"Thanks for the feedback. I'll close this for now but feel free to reopen later!
",josephsavona,2016-09-03 00:47:51
91,2015-08-29 21:09:58,"On using this pattern a bit, I find that there's a bit of a complication in that naively dehydrating data from Relay on-the-fly causes issues with breaking reference equality, which breaks using shallow equality for pure components.

I've taken to doing something like https://gist.github.com/taion/df126b9252825927b037 to avoid e.g. breaking referential equality on `blob1` when e.g. `blob2` changes because `arg` changes.
",taion,2016-09-03 00:47:51
91,2015-10-12 06:46:29,"Someone mentioned seeing related performance issues with repeatedly instantiating Moment.js objects on the component.

Would it be possible to re-open this issue? I understand that this is unlikely to be a priority, especially given adequate user-side workarounds, but this is something that needs to be handled... somewhere.
",taion,2016-09-03 00:47:51
91,2015-12-02 21:25:41,"Here's an additional problem.

Suppose I have a field that deserializes into a non-scalar type. If I use this field in multiple nested components, I have a choice of either deserializing this in each component, or doing this once at top-level and passing through the deserialized value.

Neither is ideal. If I deserialize at top-level, the non-scalar prop defeats the Relay container `shouldComponentUpdate` check, and I get excessive re-renders. If I deserialize in each component, then I'm doing work multiple times for no good reason.
",taion,2016-09-03 00:47:51
91,2016-06-27 23:31:54,"I've talked this over with some people and have written a draft specification. We're not pursuing this internally, but if folks are motivated to get this working, we'd be happy to take a look at something similar to this proposed spec:

# A method for serializing/deserializing scalar fields on the client

Given a scalar value sent from the server, like ‘1980-03-27’, you might want to interact with it as a JavaScript `Date` object on the client (eg. by creating a `Date` instance with `new Date('1980-03-27')`). What follows is a proposal to implement custom, runtime serializers/deserializers on the client.

## Custom scalar types as deserializable

The idea is to consider all fields of type `GraphQLScalarType` as in need of a serializer/deserializer to be used with Relay. Given a field with this `.graphql` definition:

<S_CODE_TOKEN>

…which was, for instance, generated with this `graphql-js` schema:

<S_CODE_TOKEN>

…Relay should look up a custom serializer/deserializer at runtime to use to deal with values of this type.

## Specification
1. Map typenames to their serializer/deserializer using the following API:
   
   <S_CODE_TOKEN>
2. Check to see if you have a registered deserializer when you go to read a scalar value (see `readRelayQueryData#_readScalar()`)
   - if no deserializer is registered, return the raw value
   - if a deserializer is registered use it to produce the value
3. Memoize the deserialized values and clean up the memo when those fields are no longer used (see, for instance `_updateGarbageCollectorSubscriptionCount` in GraphQLStoreQueryResolver)
4. When printing mutation queries, serialize the values for transport over the wire. See `printArgument` of `printRelayOSSQuery`.
",steveluscher,2016-09-03 00:47:51
91,2016-09-03 00:47:51,"Going to close this as [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable) will have support for arbitrary ""handle"" fields, for which you can register a handler in a way similar to what @steveluscher has suggested. As we're unlikely to undertake the work required to implement something like that on Relay 1, I'm going to mark this one as closed for now.

Thanks to everybody for their input!
",wincent,2016-09-03 00:47:51
90,2015-08-17 16:38:28,"`<width>` was the old variable syntax, `$width` is the new one. Lets make the invariant a little less confusing!
",devknoll,2015-08-17 18:31:59
90,2015-08-17 16:43:30,"@yungsters @yuzhi Perhaps we should add a `RelayGraphQLInterface` with a `formatVariable(name: string): string` method, so that we can format these strings appropriately?
",josephsavona,2015-08-17 18:31:59
90,2015-08-17 18:12:11,"@josephsavona We can just deal with the new syntax internally. The eventual plan is to move to the new syntax anyway, so we might as well get everyone used to it. :)
",yungsters,2015-08-17 18:31:59
89,2015-08-17 10:23:55,"We'd like to use a custom scalar type for cursors, but a spec says that it should be a String. I wonder if spec can be changed so that any scalar can be used as cursor.
",freiksenet,2015-08-19 18:56:56
89,2015-08-17 16:28:31,"cc @dschafer 
",josephsavona,2015-08-19 18:56:56
89,2015-08-17 18:19:53,"What custom scalar type would you want to use? There's no conceptual reason why it has to be a String; we just picked that because it's kind of the ""superset"" of all scalars (i.e. if your cursors are ints, you can always treat them as strings by `toString`'ing them), so I'm curious what you had in mind; definitely open to changes to make things easier here.

I sort of wonder if we should have made a custom scalar type called `Cursor` that serializes as a String, is the result of `Edge.cursor`, and is the input to `after:` and `before:`, to clarify that these aren't just any strings.
",dschafer,2015-08-19 18:56:56
89,2015-08-17 18:28:37,"We handle opaque strings like ID and Cursor as scalars that serialize to strings and deserialize to objects with appropriate data in them.

On Mon, Aug 17, 2015 at 9:20 PM, Dan Schafer notifications@github.com
wrote:

> What custom scalar type would you want to use? There's no conceptual reason why it has to be a String; we just picked that because it's kind of the ""superset"" of all scalars (i.e. if your cursors are ints, you can always treat them as strings by `toString`'ing them), so I'm curious what you had in mind; definitely open to changes to make things easier here.
> 
> ## I sort of wonder if we should have made a custom scalar type called `Cursor` that serializes as a String, is the result of `Edge.cursor`, and is the input to `after:` and `before:`, to clarify that these aren't just any strings.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/facebook/relay/issues/89#issuecomment-131915512
",freiksenet,2015-08-19 18:56:56
89,2015-08-17 19:05:05,"Also #73
",devknoll,2015-08-19 18:56:56
89,2015-08-18 06:23:33,"@dschafer: Good idea! Just naming a scalar type Cursor and having it to work similar to ID (so implementation details up to server, serializes as string) would be enough for us.
",freiksenet,2015-08-19 18:56:56
89,2015-08-18 15:59:28,"Looks like serializing cursors to strings behind a facade is the answer. Closing this out, but feel free to re-open if I' mistaken.
",yungsters,2015-08-19 18:56:56
89,2015-08-18 16:08:56,"@yungsters Currently the spec says you must return either a String or a Non‐Null wrapper around a String, so a scalar `Cursor` type is not allowed. I think changing the type from `String` to `Cursor` as @dschafer hinted would also make sense from the user point of view, as it would make it clear that a valid cursor is expected and not just any string.
",fson,2015-08-19 18:56:56
89,2015-08-18 20:10:49,"I just put up a PR with a proposed spec fix for this; let me know what you think!
",dschafer,2015-08-19 18:56:56
89,2015-08-19 04:49:54,"Looks good to me! 

Thanks!

On Tue, Aug 18, 2015 at 11:10 PM, Dan Schafer notifications@github.com
wrote:

> ## I just put up a PR with a proposed spec fix for this; let me know what you think!
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/facebook/relay/issues/89#issuecomment-132335525
",freiksenet,2015-08-19 18:56:56
88,2015-08-17 06:06:43,"When I start the todo example (as per the README) is page is trying to communicate with the GraphQL server on port 3000, but I get a 404 because the GraphQL server is listening on port 8080.
",aexmachina,2015-08-17 23:28:13
88,2015-08-17 07:39:42,"this should not happen. The application is running on [port 3000](https://github.com/facebook/relay/blob/master/examples/todo/server.js#L8) and the GraphQL server on 8080 which is fine.

Could you send the error you get in the terminal?
",knowbody,2015-08-17 23:28:13
88,2015-08-17 18:25:26,"@aexmachina  Are you still having problems with the todo example?
",yuzhi,2015-08-17 23:28:13
88,2015-08-17 23:28:12,"`npm cache clean && rm -rf node_modules/ && npm install` fixed it. Thanks.
",aexmachina,2015-08-17 23:28:13
87,2015-08-17 01:17:40,"Since there are `NODE_DELETE` and `RANGE_DELETE` types, I'm wondering why `NODE_ADD` is not needed? 

Personally I'm guessing that's because when you create a new object, it should always belong to one of the edges, hence `RANGE_ADD` is good enough, is that correct?
",coodoo,2015-08-19 00:29:33
87,2015-08-17 17:41:00,"Great Question! I think you got the gist of the idea.
The mutation configs we have right now serves two main purposes:
1. Tells us how to handle the different mutation fields
2. Helps us figure out what fields need to be refetched with the mutation based on what we have stored for a particular node so far.
Reason number 2 is the one I want to focus more on. When a completely new node is added, there is no way for Relay have stored any fields for that new node so far.
If the new node is going to be a field referenced another node (ex. updating a User’s `current_status`), we can use that node (the User node in this case) to figure out what fields we’ll need to fetch with the mutation as part of a `FIELD_CHANGE` mutation config.
If a new node is going to be referenced from a connection (ex. adding a comment in a connection of comments), we can look at the fields under edges that has been fetched for that connection (comments connection) to figure out the fields we would need for this new node as part of a `RANGE_ADD` mutation config.
If the new node is not referenced by another node, it is unlikely for the current view to need any data on the new node. However, we have seen people do a route transition after a new node is created. Even though no fields are needed to update the current view, it’s possible to use `REQUIRED_CHILDREN` to always fetch any additional fields (like the new node's `id`) so that it could be used during an `onSuccess` mutation callback.
",yuzhi,2015-08-19 00:29:33
87,2015-08-19 00:29:33,"Thanks for the great details!
",coodoo,2015-08-19 00:29:33
87,2015-09-30 19:32:19,"I dig this. however I'm wondering how would one go to handle something like a ""signup"" flow; where the `viewer` (ie: a query root type) will go from, let's say, an empty object to an actual user. 

At this point I'm thinking that a route change or reload would make sense but is there another way? I guess one would want to have something like https://github.com/facebook/relay/issues/233 in the future?
",thenikso,2015-08-19 00:29:33
87,2015-09-30 19:38:51,"@thenikso Since so many things might change when you log in, we currently recommend just doing a classical page refresh to clear all data. In the future a something like #233 might be useful.
",kassens,2015-08-19 00:29:33
86,2015-08-17 00:25:47,"`hasOptimisticUpdate` returns true after mutation is applied if optimistic update data equals to real one. easy to get this behaviour in provided `relay-treasurehunt` example by adding `hasTreasure: false` to `hidingSpot` in `CheckHidingSpotForTreasureMutation.getOptimisticResponse`
",barbuza,2015-10-15 04:54:26
86,2015-08-17 01:52:57,"Thanks for reporting this. This is mainly caused by not triggering an render when the optimistic node is no longer optimistic. We are aware of this and will be fixing it soon.
",yuzhi,2015-10-15 04:54:26
86,2015-10-15 04:54:26,"This was fixed by 3e27531d20087510db8747cb708682efb24acef5.
",yungsters,2015-10-15 04:54:26
85,2015-08-16 21:44:25,"Currently the nodeDefinitions object function checks the object instance against undefined as Game and HidingSpot are not exported.

This doesn't seem to make any difference the example apps functionality -- but should export these anyway to be thorough.
",tomatau,2015-08-17 16:44:53
85,2015-08-16 21:51:37,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-08-17 16:44:53
85,2015-08-17 08:02:03,"Have signed
",tomatau,2015-08-17 16:44:53
85,2015-08-17 08:02:14,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-08-17 16:44:53
85,2015-08-17 16:44:59,"good find, thanks!
",josephsavona,2015-08-17 16:44:53
84,2015-08-16 19:03:15,"The [Connections Specification](https://github.com/facebook/relay/blob/master/website/graphql/Connections.md#fields-2) states that `hasNextPage` of `PageInfo`:

> hasNextPage will be **true** if the client is paginating with first, and the server has determined that the client has reached the **end** of the set of edges defined by their cursors. More formally:
> 
> HasNextPage(allEdges, before, after, first, last)
> 1. If first was not set, return false.
> 2. Let edges be the result of calling ApplyCursorsToEdges(allEdges, before, after).
> 3. **If edges contains more than first elements, return false.**
> 4. Return true.

(emphasis mine)

This description seems backwards, and does not reflect the [implementation](https://github.com/graphql/graphql-relay-js/blob/master/src/connection/arrayconnection.js#L46-L72):

<S_CODE_TOKEN>

Instead, it should read:

> hasNextPage will be **true** if the client is paginating with first, and the server has determined that the client has **not** reached the end of the set of edges defined by their cursors. More formally:
> 1. ...
> 2. ...
> 3. If edges contains more than first elements, return **true**.
> 4. Return **false**

The same is true for `hasPreviousPage`. 
",fortruce,2015-08-18 19:51:47
84,2015-08-17 16:29:10,"cc @dschafer 
",yuzhi,2015-08-18 19:51:47
83,2015-08-15 22:31:32,"Without adapting js/components/App.js and js/routes/AppHomeRoute.js server start throws errors
",ghost,2015-08-24 20:22:27
83,2015-08-17 16:49:12,"It's necessary to call `npm start` at some point to run the application, so this will require some changes. We'd prefer either:
- documenting in the tutorial that errors are expected and they will be resolved in the succeeding steps
- or moving the `npm start` command further down in the tutorial to the point where no errors would be thrown if previous steps were done correctly.

My preference is probably the second option - cc @steveluscher 
",josephsavona,2015-08-24 20:22:27
83,2015-08-17 17:52:14,"Would you like to update this PR according to option 2, @h1nr1ch? That should be a good stopgap solution until I get a chance to rewrite the tutorial later this month (#6).
",steveluscher,2015-08-24 20:22:27
83,2015-08-24 20:22:27,"Feel free to reopen, we'd be happy to accept a PR for option 2.
",josephsavona,2015-08-24 20:22:27
82,2015-08-15 22:01:31,,ghost,2015-08-18 17:40:43
82,2015-08-15 22:02:37,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-08-18 17:40:43
82,2015-08-15 22:12:33,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-08-18 17:40:43
82,2015-08-17 16:51:13,"@h1nr1ch the change itself looks good, but can you please update this with a brief description?
",josephsavona,2015-08-18 17:40:43
81,2015-08-15 18:40:20,"Can Relay somehow work with websockets instead of REST endpoints? 
",hipertracker,2015-08-15 20:34:58
81,2015-08-15 20:14:36,"Thanks for the question! See this answer in the wiki: https://github.com/facebook/relay/wiki/Frequently-Asked-Questions#can-i-use-websockets-instead-of-xhrfetch and the related discussion in https://github.com/facebook/relay/issues/51.
",fson,2015-08-15 20:34:58
81,2015-08-15 20:35:21,"Please feel free to reopen if you have additional questions not covered in the wiki.
",josephsavona,2015-08-15 20:34:58
80,2015-08-15 16:00:02,"The `CheckHidingSpotForTreasureMutation` contains a reference to `text` in the `mutateAndGetPayload` method. However this variable is not used and is `undefined`. It looks like it might be a relic from the todo example.
",drabinowitz,2015-08-17 17:47:55
80,2015-08-17 16:51:39,"cc @steveluscher 
",josephsavona,2015-08-17 17:47:55
80,2015-08-17 17:47:51,":blush:
",steveluscher,2015-08-17 17:47:55
79,2015-08-15 14:10:11,"In Guides-Containers.md the fragment is named `profilePicture` but the key the React component accesses is at `user.profilePhoto`

profilePhoto is more consistently used in the doc so I went with that name.
",drabinowitz,2015-08-15 14:59:12
79,2015-08-15 14:59:05,"Thanks, @drabinowitz!
",wincent,2015-08-15 14:59:12
79,2015-08-15 15:05:00,"I went ahead and merged this, as I think it's a step in the direction of consistency, but we could go further, as the component itself is still called `ProfilePicture` so we still have some mixed usage. If you want to go all the way I'd suggest making everything ""picture"".
",wincent,2015-08-15 14:59:12
78,2015-08-15 05:42:34,,bbirand,2015-08-15 06:48:56
78,2015-08-15 06:48:47,"Thanks, @bbirand!
",wincent,2015-08-15 06:48:56
77,2015-08-15 05:36:19,"In the todo example I'm getting this from the Graph page.

<S_CODE_TOKEN>
",OmgImAlexis,2015-08-18 08:23:32
77,2015-08-15 20:37:12,"Hi, can you provide steps to reproduce this issue? Also, are you on latest (master)? 
",josephsavona,2015-08-18 08:23:32
77,2015-08-15 20:39:35,"@OmgImAlexis This looks like the error you get from the GraphQL server if you did not pass a query or the query you passed was empty. Can you check that you are accessing the app on [http://localhost:3000](http://localhost:3000)? The example server listens in two ports, the app on port `3000` and the GraphQL server on port 8080.

If you want to try the GraphQL server without using the app, you can do so with curl, for example:

<S_CODE_TOKEN>

Or with JSON:

<S_CODE_TOKEN>
",fson,2015-08-18 08:23:32
77,2015-08-15 22:52:25,"@fson You're right, I haven't played with GraphQL before so I wasn't sure what to expect from that. Saying so, that sounds like a weird error to throw back when an empty query is passed to it, don't you think?
",OmgImAlexis,2015-08-18 08:23:32
77,2015-08-17 21:02:39,"@OmgImAlexis The error message has been improved in the newer version of `express-graphql`, which now returns this error message:

<S_CODE_TOKEN>

I've opened a pull request (#93) to update the version of this package used in the examples.
",fson,2015-08-18 08:23:32
77,2015-08-18 08:23:32,"Closing this out in favor of #93.
",yungsters,2015-08-18 08:23:32
76,2015-08-15 02:20:44,"Spec says that `input` must be ""_a NON_NULL wrapper around an INPUT_OBJECT_"". This PR fixes the introspection result to correctly have the INPUT_OBJECT wrapped.
",devknoll,2015-08-18 19:53:50
76,2015-08-15 05:33:00,"cc @dschafer 
",josephsavona,2015-08-18 19:53:50
76,2015-08-18 19:53:33,"Thanks!
",dschafer,2015-08-18 19:53:50
76,2015-08-18 19:53:56,"Oops, meant to merge, not close.
",dschafer,2015-08-18 19:53:50
75,2015-08-15 00:40:14,"When implementing a Relay-compatible GraphQL API within an existing application, one point of friction is the requirement of globally-unique IDs as part of the `Node` interface. Combining the type name with the existing type-unique ID is often suggested, but this can make interop with legacy APIs more involved.

Fundamentally there isn't a reason why the client needs anything other than a type-unique ID, since it always knows the type of the `Node` it's requesting.

The most obvious implementation to me would be to add a `type` argument to the `node` root call. If enabled, Relay would then prepend the type name to any internal `DataID`s to keep the simplicity of a single store, but expose type-unique IDs externally to the application.

@leebyron thanks for suggesting I open this issue.
",pushrax,2015-08-15 01:00:47
75,2015-08-15 00:57:22,"> Fundamentally there isn't a reason why the client needs anything other than a type-unique ID, since it always knows the type of the `Node` it's requesting.

Currently, Relay does not always know the concrete type of the node that is being requested. We would have to augment every field with a dynamic `parentType` (e.g. interfaces) with a query for the type. Not impossible, but it does add more to the request, response, and processing.
",yungsters,2015-08-15 01:00:47
75,2015-08-15 01:00:33,"Building on @yungsters's comment - supporting type-specific IDs is less trivial than it might seem at first glance and introduces complexity and maintenance cost to the framework. It's more than a matter of adding a `type` field to the `node` call. Relay would have to fetch and track the type of _every_ record in the system and use this information everywhere it constructs queries (which is obviously often). 

Given that it is trivial for the server to encode/decode a global ID to/from type + ID, it is not clear that the cost of implementation and maintenance is justified. We'd be curious to hear feedback from you and the community about this.
",josephsavona,2015-08-15 01:00:47
75,2015-08-15 01:00:47,"That makes sense. For some reason I was assuming Relay already kept track of concrete types, but now that I think about it there is no way to know that information in some cases given the current response spec. It's probably more work to actually implement that within a given GraphQL server than implementing GUIDs.
",pushrax,2015-08-15 01:00:47
74,2015-08-14 23:48:06,,cpojer,2015-08-15 00:16:19
73,2015-08-14 20:01:25,"...as opposed to opaque IDs?

https://facebook.github.io/relay/graphql/connections.htm
",devknoll,2015-08-15 05:51:22
73,2015-08-14 20:04:40,"One reasonable explanation: ID coercion might have application-specific semantics incompatible with cursors, and the Relay team didn't want to force folks to build their own scalar type for cursors.
",devknoll,2015-08-15 05:51:22
73,2015-08-14 21:55:41,"The connection pattern, if you want to call it that, that Relay uses has its roots in the years-old GraphQL used internally at Facebook. That GraphQL is much less formally specified than the new-and-shiny GraphQL technical preview that we've released to the world.

Effectively, both cursors and ids were/are opaque and arbitrary (really, implementation-specific), and strings, because of the use of JSON as a serialization format.

We wanted to keep the open source GraphQL spec small and precisely-but-minimally specified, so it doesn't have a lot to say about connections.
",wincent,2015-08-15 05:51:22
73,2015-08-15 05:51:22,"Thanks!
",devknoll,2015-08-15 05:51:22
72,2015-08-14 16:43:33,"Hi,
I was trying to include Relay in my webpack bundle but when I render it throw a ""setState on unmounted component"" warning and crash.
If I include React and Relay from a script tag everything works fine. Can you tell me why?

The Relay object accessed by import have not the DefaultNetworkLayer property too. 
I have to require and inject it by myself.

Have a great day!
Davide
",davide-ganito,2015-08-17 16:31:47
72,2015-08-15 21:46:30,"Hi @davide-ganito! The `DefaultNetworkLayer` missing from the `Relay` object was fixed in version 0.1.1 of the `react-relay` package, so if you install the latest version that should help.

With regards to the other issue (""setState on unmounted component""), could you please provide the code that throws this error for you? Thanks!
",fson,2015-08-17 16:31:47
72,2015-08-16 17:12:29,"I ran into the exact same error `setState on unmounted component` when trying to `import Relay from 'react-relay'`, but it was fixed by updating to v0.1.1. Unfortunately, I don't have the code around anymore to trigger the error.
",fortruce,2015-08-17 16:31:47
72,2015-08-17 16:31:47,"@davide-ganito can you confirm that this is fixed after upgrading to 0.1.1? If not, please feel free to reopen. 
",josephsavona,2015-08-17 16:31:47
72,2015-08-18 10:03:09,"Solved, yes. Thank you.
",davide-ganito,2015-08-17 16:31:47
71,2015-08-14 09:02:44,"I'm getting this error:

<S_CODE_TOKEN>

Don't know where is the problem. Error is probably caused by `Relay.createContainer` function. I'm using Babel in my application, but I'm compiling it via Webpack before running.
",Nutelac,2015-08-14 11:17:16
71,2015-08-14 09:33:59,"Hey, thanks for your question. Looks like you need to enable [Babel Relay Plugin](https://facebook.github.io/relay/docs/guides-babel-plugin.html). This plugin needs to be added to your Babel plugins and it converts the `Relay.QL` tagged template strings to code that describes the query.

See [relay-starter-kit](https://github.com/relayjs/relay-starter-kit) for an example of how to do this. Here are the relevant parts:
- [build/babelRelayPlugin.js](https://github.com/relayjs/relay-starter-kit/blob/83f3e3696c62c4bb975f2127d8c07b5730b4dcf4/build/babelRelayPlugin.js) – reads your schema from a `schema.json` file and creates an instance of `babel-relay-plugin` with the schema.
- [server.js](https://github.com/relayjs/relay-starter-kit/blob/83f3e3696c62c4bb975f2127d8c07b5730b4dcf4/server.js#L26) – the line in webpack configuration that tells Babel to use the plugin.
- [scripts/updateSchema.js](https://github.com/relayjs/relay-starter-kit/blob/83f3e3696c62c4bb975f2127d8c07b5730b4dcf4/scripts/updateSchema.js) – a script you can run to update the `schema.json` file.
",fson,2015-08-14 11:17:16
71,2015-08-14 11:17:16,"Thank you, now it's everything works well.
",Nutelac,2015-08-14 11:17:16
71,2016-05-27 13:46:28,"is this the same for react-native?
",sibelius,2015-08-14 11:17:16
71,2016-05-27 16:26:21,"@sibeliusseraphini: Yes, if you see this error you're probably also missing the transform.
",kassens,2015-08-14 11:17:16
71,2016-12-15 07:43:27,@fson what if we're trying to use Relay with an external source? For instance I want to work with the Github GraphQL API but `updateSchema.js` keeps overriding my attempts to fetch remote data.,trentontri,2015-08-14 11:17:16
71,2016-12-15 11:59:10,"@trentontri To use an external API, the schema needs to be fetched using an introspection query from the server. You could use https://github.com/graphcool/babel-plugin-react-relay to set that up in an easy way (you'll only need to configure the URL of the GraphQL endpoint).",fson,2015-08-14 11:17:16
71,2016-12-16 09:15:54,"I've run into this issue several times with my React Native apps, but I've managed to get through it with the method above.
I'm getting the same error now but its quite a different situation.

Say for instance you have a Relay Container called ArticleList which requests articles.
Inside it, it gets a Fragment defined in ArticleListItem.
I'm trying to package these components into a npm library, so that in my other apps I can do

<S_CODE_TOKEN>

in all of our future apps and get a list of articles with the queries baked in.

I setup `babelRelayPlugin.js` which will be run when `.babelrc` is read in the `my-companies-common-components` directory, but this doesn't seem to do it. Am I doing something out of the ordinary here?",Naoto-Ida,2015-08-14 11:17:16
71,2016-12-16 16:03:21,"My guess is that the way you have babel configured in the main plugin, it isn't transforming files from node_modules. It might be better to transform the my-company-components before ""publishing""  ",josephsavona,2015-08-14 11:17:16
71,2016-12-19 04:27:14,"I have the same setup in the *my-company-components* project, then run a command called `build` which is `babel src -d lib --presets es2015,stage-0,react` in order to transpile, then set the package's main file to `lib/index.js`. Output in `lib` is looking ok from what I can gather.",Naoto-Ida,2015-08-14 11:17:16
70,2015-08-14 06:24:54,"Per discussion in #48, replaces the second and third arguments to `DefaultNetworkLayer` with a `fetch`-like `init` object. This will allow a higher degree of configuration (e.g. it allows setting custom headers).
",yungsters,2015-08-20 22:02:37
70,2015-08-14 06:26:02,"I originally wanted to make the network layer throw if `body`, `headers['Content-Type']`, or `method` were supplied, but I figured I'd just keep things simple.
",yungsters,2015-08-20 22:02:37
70,2015-08-18 06:58:55,"Note that this PR depends on changes in fbjs. I'll publish a new version of fbjs to go with this PR when this is ready.

@devknoll Per our discussion, I've removed `credentials: 'same-origin'` as a default.
",yungsters,2015-08-20 22:02:37
69,2015-08-14 06:10:48,,wincent,2015-08-14 06:12:20
69,2015-08-14 06:12:44,"Only took me 10 minutes to type this up using Colemak...
",wincent,2015-08-14 06:12:20
69,2015-08-14 06:15:39,"Ghaker typ ghf tux! Ug'r kucf gy havf a tpfrh ;aup yt fjfr yk ghf sycr.
",steveluscher,2015-08-14 06:12:20
68,2015-08-14 05:23:12,"In the section that introduces the `renderFetched` callback in [root container guide](https://facebook.github.io/relay/docs/guides-root-container.html#renderfetched), it reads,

<S_CODE_TOKEN>

I suppose all `renderLoading` mentioned above should be `renderFetched` instead?
",MrOrz,2015-08-14 06:57:27
68,2015-08-14 06:57:27,"Yup, sorry for the confusion!

This is fixed in a0bed17e8c0f222ad7c8b0994442452548246ee1. We'll push a new version of the documentation first thing in the morning.
",yungsters,2015-08-14 06:57:27
67,2015-08-14 05:09:31,"A back-end implementation with a real database wouldn't have direct access to the full dataset. The relay-treasurehunt and todo examples are already written this way.

See graphql/graphql-js#120
",cletusw,2015-08-14 23:37:22
67,2015-08-14 05:10:42,"@dschafer @steveluscher 
",cletusw,2015-08-14 23:37:22
67,2015-08-14 06:04:46,"I checked this out, and can confirm that it works! I'll leave it to @dschafer to push the button, since he might be interested in something like this for his [original example](https://github.com/graphql/graphql-relay-js/blob/master/src/__tests__/starWarsData.js).
",steveluscher,2015-08-14 23:37:22
67,2015-08-14 15:04:04,"@steveluscher Just curious -- how did you test the IntroduceShip mutation? I feel like the UI for that is missing...
",cletusw,2015-08-14 23:37:22
67,2015-08-14 16:47:59,"Also, I've submitted graphql/graphql-relay-js#7 to do the same thing to the example in graphql-relay-js. It's a shame it has to be duplicated (and slightly different) here and there.
",cletusw,2015-08-14 23:37:22
67,2015-08-14 23:37:21,"Thanks!
",dschafer,2015-08-14 23:37:22
66,2015-08-14 04:05:32,"<S_CODE_TOKEN>

Should this be changed to just an `install` hook instead of a `preinstall` hook?
",mhart,2015-08-14 04:26:28
66,2015-08-14 04:22:50,"Actually, now that I look at this further, I think it's because you have a specific list of files in package.json for inclusion – and the scripts directory is not in there.
",mhart,2015-08-14 04:26:28
66,2015-08-14 04:26:27,"I think #64 is going to fix this, we're removing the preinstall hook entirely and just depending on the real package.
",zpao,2015-08-14 04:26:28
66,2015-08-14 04:31:51,"Hmmm, that indeed does get rid of the error – but now there's no `dist` or `lib` directories – I need to manually go in and `npm install && npm run build` to get them there.
",mhart,2015-08-14 04:26:28
66,2015-08-14 04:32:17,"Ugh, nope that doesn't even work, I get `No gulpfile found`
",mhart,2015-08-14 04:26:28
66,2015-08-14 04:34:06,"(presumably because `gulpfile.js` is not in the `files` list in `package.json`)
",mhart,2015-08-14 04:26:28
66,2015-08-14 04:42:28,"Ah yes. Well with the build step there isn't going to be a good way to make installing via git work. I don't really like the hacks (move devDeps like gulp to deps). We made that call in React (which with our build system there is even worse). I'll leave it up to the team here to decide what's best for them.

What's your reasoning for wanting to install direct from github? I know there are a couple fixes in master that the team will be shipping soon so if that's it, I'd say wait a little bit or just use `npm link`.
",zpao,2015-08-14 04:26:28
66,2015-08-14 04:45:58,"Yeah, quite a few fixes TBH – I couldn't even get what I wanted to do working with what's on npm at the moment.

Was actually hoping to push up an open source lib for relay, and was just going to point to the github URL until the next release, but I guess that's not an option.

I'll just wait :panda_face: 
",mhart,2015-08-14 04:26:28
66,2015-08-14 04:48:46,"Ah gotcha. Sorry to delay anything open source! I bet you won't have to wait long, right @steveluscher nudgenudge ;)
",zpao,2015-08-14 04:26:28
66,2015-08-14 06:11:14,"@yungsters wanted to push v0.1.1 tonight, but I whined and said “tomorrow.”

So… tomorrow.
",steveluscher,2015-08-14 04:26:28
66,2015-08-14 18:54:33,"All good now, thanks y'all! :+1: 
",mhart,2015-08-14 04:26:28
65,2015-08-14 02:57:17,"Would be great if the Relay dist files could be CommonJS compatible (in the same way the `react[.min].js` files are with the whole `...typeof exports...` surrounding block)

Among other things, this would make it easier to use Relay with browserify.

With `dist/relay[.min].js` built on the latest master I get errors like `Uncaught TypeError: Cannot read property 'MutationObserver' of undefined`
",mhart,2015-08-14 05:51:43
65,2015-08-14 05:52:31,"Good idea. Thanks! If you're still having trouble with that `TypeError` open a separate issue and we'll help you out.
",steveluscher,2015-08-14 05:51:43
64,2015-08-14 00:06:17,"See discussion in f0ea07a7e87bfbfae26776cbb476d222802a3e67.
",yungsters,2015-08-14 04:27:26
64,2015-08-14 04:26:49,":shipit:
",zpao,2015-08-14 04:27:26
63,2015-08-13 22:47:46,"I've got a hierarchy like:

<S_CODE_TOKEN>

where `< ... />` is filled in with a component by the router, depending on which route the user is visiting. Both `<Header/>` and `< ... />` are `Relay.Container`s.

As far as I can tell, there is no way to make `<App>` a Relay.Container that includes fragments from `<Header/>` and `< ... />`, so I've resorted to sticking both into their own separate RootContainers, with their own routes.

Am I missing something? How does/would FB design this?

Thanks :smile: 
",devknoll,2015-08-14 05:22:39
63,2015-08-13 23:40:51,"Great question. Relay has support for this, but it's an advanced feature and so we didn't initially document it. Note that the API is likely to change (but we'll mark it as deprecated before doing so). However, we'd appreciate your feedback on this API and any suggestions you may have.

#### Current API

Here's how you can construct a container whose child is dynamic based on the current route:

<S_CODE_TOKEN>

In addition to the standard forms of fragment composition documented [here](http://facebook.github.io/relay/docs/api-reference-relay-ql.html#fragment-composition), you can also pass a value of the type 

<S_CODE_TOKEN>

Basically, a function that accepts an object with a `name: string` property, and returns an (optional) fragment. 

#### (Proposed) Future API

The future API we've explored for this would use GraphQL _directives_:

<S_CODE_TOKEN>
",josephsavona,2015-08-14 05:22:39
63,2015-08-13 23:45:00,"This is great, thank you! I'll try it out and get back to you.
",devknoll,2015-08-14 05:22:39
63,2015-08-14 00:56:02,"Wait... @josephsavona 

<S_CODE_TOKEN>

Wouldn't this only let the composed fragments compose on `Node`? If `ContainerB` wanted a `User` instead, he wouldn't be able to fragment on that, right?
",devknoll,2015-08-14 05:22:39
63,2015-08-14 01:01:21,"@devknoll With the Relay GraphQL spec most types will implement the `Node` interface, so this would be okay. In your example if `RouteA` matched, you'd end up with the following (valid) GraphQL:

<S_CODE_TOKEN>
",josephsavona,2015-08-14 05:22:39
63,2015-08-14 01:03:29,"Yup! Just realized that. It looks like there may actually be a bug with graphql-ruby or at least my implementation. Thanks again, and sorry for bothering :smile: 
",devknoll,2015-08-14 05:22:39
63,2015-08-14 02:04:50,"For posterity, the actual query being generated actually looks more like this:

<S_CODE_TOKEN>

This looks like it should be syntactically the same as the above, but I think the first fragment on `Node` caused graphql-ruby to lose the `Viewer` type information, forcing it to fall back to a default-implemented `resolve_type`.
",devknoll,2015-08-14 05:22:39
63,2015-09-09 07:19:30,"@josephsavona unfortunately it doesn't help in following situations:
1. Trully dynamic components when parent is not aware of all possible children (like Relay.RootContainer)
2. Code splitting - when actual child component is loaded on demand and you don't have reference to it's container at static time

Would be great if Relay could provide some solution for these cases as well as they are fairly common.
",vladar,2015-08-14 05:22:39
63,2016-03-04 05:00:38,"Referenced to https://github.com/facebook/relay/issues/896
and http://stackoverflow.com/questions/35067685/getfragment-from-a-dynamic-component-in-relay
",nodkz,2015-08-14 05:22:39
62,2015-08-13 21:14:46,"Little bit of cleanup, little bit of fixing things.

I tested this by running the starter kit with `npm install --production` (well for this, `npm install --production` and then link it)
",zpao,2015-08-13 23:48:38
62,2015-08-13 23:48:20,"@wincent I think that was just me being n00b when I initially created the repository. (I was testing with `npm pack` and forgot to remove the file before checking in.)
",yungsters,2015-08-13 23:48:38
61,2015-08-13 20:56:49,"Not certain if this is a bug, but...

Modifying the TodoApp container in the todo example like this (ignoring the ...on User part):

<S_CODE_TOKEN>

results in a node query with a subcomponent like this (when the cursor is change):

...`_todosdf82087a:todos(after:\""YXJyYXljb25uZWN0aW9uOjM=\"",first:\""4\"")`...

resulting in the error: 

<S_CODE_TOKEN>
",ts-smith,2015-08-13 22:25:07
61,2015-08-13 22:25:07,"Thanks for reporting this and making the error so clear. This is actually a duplicate of #40, so I'm going to close it out and track progress there.
",josephsavona,2015-08-13 22:25:07
60,2015-08-13 16:17:23,"These are the things the relay devtools will need.

because who doesn't want this goodness?
![image](https://cloud.githubusercontent.com/assets/112170/9255108/06d617c4-419c-11e5-8d9a-ae6e2cb7ffe0.png)
",jaredly,2015-08-13 23:50:50
60,2015-08-13 17:03:30,"@jaredly awesome - can you add a link to the code for that screenshot? Those are internal modules and the API is likely to change.
",josephsavona,2015-08-13 23:50:50
60,2015-08-13 17:15:52,"getting that together now
",jaredly,2015-08-13 23:50:50
60,2015-08-13 17:25:08,"here's the relevant code https://github.com/jaredly/react-devtools/blob/relay/plugins/Relay/backend.js
that interfaces w/ relay internals
",jaredly,2015-08-13 23:50:50
59,2015-08-13 15:30:18,"First off, thank you for your wonderful work. Been looking forward to this day for months :)

I've been tangling around with the examples and starter-kit. Besides encountering issues upon paging (tickets already open), I stumbled upon a feature I wanted to test, but honestly have no idea how to approach best.

Let's take the starter-kit example. I want to introduce a search field to get widgets (of my user) by name. Let's say I want to get all widgets starting with ""A"", either paginated or not.

How would I need to extend the example to make this happen. I would assume that I need to pass some kind of additional ""search"" or ""find"" argument to the widgets sub-query, so I could pass it into the resolve function before returning the arrayed connections.
But currently I do not see how I could add an additional argument to the connection type, to let it go through.

Or would that even be the wrong way to do it and I should make a separate (root) query for this kind of behavior?

An extended example on how to solve this would be great.
Thanks in advance and kind regards,
Daniel
",danielgriese,2015-08-13 19:46:17
59,2015-08-13 16:20:03,"The widget field definition in the schema looks like this:

<S_CODE_TOKEN>

The `args` definition uses the default connection args from `graphql-relay`, but it's just a plain object that you can extend to add more args. By default it looks like this:

<S_CODE_TOKEN>

You can add your own arguments to the field. E.g.

<S_CODE_TOKEN>

By extending the connectionArgs using the object spread operator we won't have to copy-paste those default args to our definition, so we can write:

<S_CODE_TOKEN>

Note that all the argument values are passed to the resolve function, so now you just need to modify your database function `getWidgets` to filter the widgets using the name passed to it and finally change the fragment in your React component to use the new argument.

Hope this helps!
",fson,2015-08-13 19:46:17
59,2015-08-13 19:46:17,"good question, @danielgriese, and great answer @fson!

I'm closing this out because the answer is quite thorough, but I've added a link to it here: https://github.com/facebook/relay/wiki/Frequently-Asked-Questions

Feel free to reopen if you have follow-up questions.
",josephsavona,2015-08-13 19:46:17
59,2015-08-14 06:58:00,"Thanks for your reply @fson!
We should note that the babel-node call in the updateSchema script needs to be extended to allow for spread operators. Took me a while to get it to run, I'm just using ""--stage 1"" now.

The proposed solution works fine, if I set the widgetName with a value in the initialVariables of my Container. 
But when I hook it up to an input field, dynamically setting the variable value via this.props.relay.setVariables I get 400 - Bad Request errors from the server.

Query being sent by Relay:

<S_CODE_TOKEN>

Return the following error:
""Cannot query field ""widgets"" on ""Node"".""

I guess the problem lies in the details of the starter-kit-example. Probably it is resolving the ID to a Node instead to a User. I'll try to investigate it a bit further.

Thanks and kind regards,
Daniel
",danielgriese,2015-08-13 19:46:17
59,2015-11-27 09:46:45,"Just a follow up on this question. Let's say we have different widgets belonging to different users. My immediate idea would be to do a query something like `{user(id:1){widgets(userId:1){widgetName}}}` But that seems bad to put the userId twice. Is there a better practice?
",icylabsDev,2015-08-13 19:46:17
58,2015-08-13 15:18:20,"This is going to solve #57 

I thought it would be good to add eslint to the project at this stage. I have borrowed the eslint rules from react repo. I have fixed most of the linting errors, however in those I was not sure how you guys want to deal with refactoring I left there and added `/* eslint ... */` on top of the file to just generate the warning for now.

The most common issues are:  
- [`no-shadow`](http://eslint.org/docs/rules/no-shadow.html)
- [`no-unused-expressions`](http://eslint.org/docs/rules/no-unused-expressions.html)
- and also sometimes `warnings` and `invariants` are missing a error message

Please let me know how would you like to fix the above and I do those changes.
",knowbody,2015-09-01 16:10:42
58,2015-08-13 17:26:15,"This is awesome. I think we'll want to do something better than copy-pasta the React files as-is though.

On the subject of all the `shadow` warnings, it's such a common idiom in the codebase that I wonder whether we should just disable that lint (in some cases the readability actually suffers due to the awkward variable names).
",wincent,2015-09-01 16:10:42
58,2015-08-13 19:22:58,"@wincent Agreed about disabling `shadow` warnings.
",josephsavona,2015-09-01 16:10:42
58,2015-08-13 20:02:44,"@wincent @josephsavona cool I'll disable it and fix the issues. I copied react's one just to start this off, thought that you might have some kind of guidelines at Facebook. Any other suggestions?

what do you think about `no-unused-expressions`?
at the moment there is a lot of places where we do something if the expression is `true`, e.g.:
in src/container/RelayContainer.js (256):

<S_CODE_TOKEN>

with `no-unused-expressions` it would need to look like:

<S_CODE_TOKEN>

not sure which one do you prefer?

---

also not sure why the tests are failing on travis, seems like some issue while installing from npm
",knowbody,2015-09-01 16:10:42
58,2015-08-14 01:26:43,"Thinking about the implications of this more: all of the code passes our internal lint checks, and it will complicate syncing if the ESLint config here is more restrictive than our internal linting. Can you relax the rules just enough to not require any changes to files in `src/`? E.g., allow for missing trailing commas, disable `no-unused-expressions` and `no-shadow`. 

Thanks again for collaborating on this!
",josephsavona,2015-09-01 16:10:42
58,2015-08-14 04:35:01,"Next on my list for fbjs is to get our lint config in a good place to be shared and reused. For React we opted to be more restrictive than the rest of FB because we could be (we sync in, not out so it doesn't matter).

FWIW, we actually might not be passing internally, we should force a full check :)

`no-unused-expressions` is off internally (there were too many uses, but is one of those cases where we opted to be stricter in React) so we shouldn't change those here. Not sure of `no-shadow` off the top of my head.
",zpao,2015-09-01 16:10:42
58,2015-08-14 07:49:48,"@josephsavona ok, I'll do that and update the PR. @zpao I think for now let's just add the basic ESlint rules and make sure they pass, and then we can add the ones which we see there is a need for?
",knowbody,2015-09-01 16:10:42
58,2015-08-14 11:41:11,"@josephsavona updated the code, let me know what you think.  

travis is still failing while trying to run `npm install`

**Edit:**
was just looking at [your style guide](https://github.com/facebook/relay/blob/master/CONTRIBUTING.md#style-guide) and you have included trailing commas, so in that case the [style guide](https://github.com/facebook/relay/blob/master/CONTRIBUTING.md#style-guide) should be updated or leave the `comma-dangle` in ESlint rules
",knowbody,2015-09-01 16:10:42
58,2015-08-15 00:38:36,"@knowbody I'm sorry if my previous comment wasn't clear. The addition of ESLint here should require no changes whatsoever to the `src/` directory. This will ensure that future syncs between OSS and our internal repository can proceed smoothly. Let's disable the `comma-dangle` rule (also it appears some variables were renamed - leftover fixes from `no-shadow`, maybe?

Regarding style: we do prefer trailing commas, but this is the one preference for which we don't also have an internal lint rule (and so there are some inconsistencies in the existing code).
",josephsavona,2015-09-01 16:10:42
58,2015-08-16 18:50:39,"@zpao thanks for the hints :+1: 

@josephsavona check it now please. I think I fixed all you asked for
",knowbody,2015-09-01 16:10:42
58,2015-08-21 11:56:58,"@josephsavona @wincent is anything blocking this to be merged?
",knowbody,2015-09-01 16:10:42
58,2015-08-24 21:08:18,"@knowbody See comments above. Again, we _sincerely_ appreciate all the effort you've put into this, but to simplify syncing code for now the configuration should consider the code valid as-is, and there should be no changes to the `src/` directory.
",josephsavona,2015-09-01 16:10:42
58,2015-08-24 22:51:25,"@josephsavona sure, sorry fixing all that now
",knowbody,2015-09-01 16:10:42
58,2015-08-24 23:22:09,"@josephsavona should be good to go now
",knowbody,2015-09-01 16:10:42
58,2015-08-31 20:43:29,"You'll be able to drop a lot of this, apart from some finer tuning, once we pull in https://github.com/facebook/fbjs/pull/49 (might end up being better to end up abandoning this PR entirely and starting clean).
",zpao,2015-09-01 16:10:42
58,2015-09-01 07:51:14,"@zpao just seen the merge you've done with react. agree, let's close and I start the new PR with the rules from fbjs repo. How does it sound? @josephsavona 
",knowbody,2015-09-01 16:10:42
58,2015-09-01 16:10:42,"closing and moving discussion to #202 
",josephsavona,2015-09-01 16:10:42
57,2015-08-13 15:12:12,,knowbody,2015-08-14 01:27:48
57,2015-08-14 01:27:48,"Let's discuss on the #58 
",josephsavona,2015-08-14 01:27:48
56,2015-08-13 14:37:59,"<S_CODE_TOKEN>

when access http://localhost:3000 using firefox ,everything is ok,but safari show one error 

<S_CODE_TOKEN>
",wanghaisheng,2015-08-13 15:28:14
56,2015-08-13 15:18:13,"This has been reported in #42 and a fix has been suggested in pull request #50.
",fson,2015-08-13 15:28:14
55,2015-08-13 10:49:48,"I get an error while trying to run tests: `npm run tests`

this is what I get:
<img width=""554"" alt=""screen shot 2015-08-13 at 11 48 54"" src=""https://cloud.githubusercontent.com/assets/3802023/9248157/5cdcc40a-41b1-11e5-8176-5bffe51b7fb8.png"">
",knowbody,2015-08-14 16:18:46
55,2015-08-13 15:37:29,"@knowbody Jest not working on node 0.12.x is a known issue (see https://github.com/facebook/jest/issues/243). For me the tests started working after installing node 0.10 and running `npm rebuild`.

From #10 it seems that as soon as Jest 0.5.0 stable version gets released, this project can move to iojs and the old version of node is no longer needed.
",fson,2015-08-14 16:18:46
55,2015-08-13 15:49:04,"oh, make sense now, thanks @fson!
",knowbody,2015-08-14 16:18:46
55,2015-08-13 15:50:09,"we could mention that in the README I guess.
",knowbody,2015-08-14 16:18:46
55,2015-08-13 15:57:50,"@knowbody I think that's a good idea. There's a warning from `npm install` if you're running an unsupported version, but it's pretty easy to miss.
",fson,2015-08-14 16:18:46
55,2015-08-13 16:02:05,"so which version should I use? v0.10.0?
I'm using [n](https://github.com/tj/n) for managing node versions but with 0.10.0 I get errors when I try to do `npm install`
",knowbody,2015-08-14 16:18:46
55,2015-08-13 16:07:33,"@knowbody I installed v0.10.40, which is the latest 0.10.x release and it worked with that.
",fson,2015-08-14 16:18:46
55,2015-08-13 16:33:07,"with 0.10.40 fails. I get:

<S_CODE_TOKEN>
",knowbody,2015-08-14 16:18:46
55,2015-08-14 07:01:27,"@knowbody Try double checking your `npm --version`. I know whenever I re-install 0.10.x, the `npm` I get is archaic (v1.x.x).
",yungsters,2015-08-14 16:18:46
55,2015-08-14 15:11:26,"@yungsters I don't know actually what happened but tried to `npm install` yesterday again and it worked with node 0.10.40 and npm 1.4.28.

I just think we should add clear instructions as it's important to run those tests locally and I'm guessing most of ppl use 0.12.7.

any ETA on when Jest 0.5.0 stable will be released?
",knowbody,2015-08-14 16:18:46
55,2015-08-14 16:18:46,"Thanks for bringing up this issue - I've documented the configuration required to run tests at https://github.com/facebook/relay/wiki/Frequently-Asked-Questions#error-running-npm-test - please feel to reopen this if there are any additional questions.
",josephsavona,2015-08-14 16:18:46
55,2015-08-14 23:50:55,"I published jest 0.5 today and sent a pull request to upgrade relay to iojs and jest, see #74 
",cpojer,2015-08-14 16:18:46
54,2015-08-13 09:25:30,"for node 0.11 up and iojs removing WARN message on npm install
",chentsulin,2015-08-16 17:09:31
54,2015-08-13 18:03:39,"Thanks for the PR! Although I think we might want to keep the dependency pegged at 0.10.x until Jest's issues with Node are sorted out (see https://github.com/facebook/jest/issues/243).
",wincent,2015-08-16 17:09:31
54,2015-08-14 04:53:07,"@wincent I think we still have this in React but we should probably remove it there too. Unfortunately that field is checked on end users. Ideally we could just check it on developers machines (actually, we probably could write a simple prepublish hook…).

It's not an enforced dependency and with iojs shuffling along it might be time to give it up.
",zpao,2015-08-16 17:09:31
54,2015-08-16 17:09:31,"We are now only compatible with iojs v2+, see: #74
",cpojer,2015-08-16 17:09:31
53,2015-08-13 07:07:31,"Might be worth coming up with a better workflow to manage these projects. It's great that they can all run out of the box with their own `npm install`, but so far any change to one of them means a change to all four.

We should see if we can come up with a script to generate the shared bits (similar to react/addons in 0.14.0). We could keep the output in git to keep it easy to use (if that's a goal) or just add a top level task to generate them.

:wink: 
",devknoll,2015-08-14 18:05:38
53,2015-08-13 17:33:09,"@steveluscher: thoughts?
",wincent,2015-08-14 18:05:38
53,2015-08-14 03:36:36,"Great idea! At the moment, I'm happy to make changes in four places until such time as building automation starts to pass the XKCD test, but if you have time or ideas I'm happy to have you run with it.
",steveluscher,2015-08-14 18:05:38
53,2015-08-14 06:59:24,"Also curious to hear if @zpao has any feedback.
",yungsters,2015-08-14 18:05:38
53,2015-08-14 18:03:51,"I tend to agree with about XCKD test with the added caveat that feeling like you're wasting time doing manual changes might be worse than actually wasting time.

FWIW, now is probably the _most_ churny time for the examples as we work out of the technical preview. This might stop being an issue soon.
",zpao,2015-08-14 18:05:38
53,2015-08-14 18:05:38,"> FWIW, now is probably the most churny time for the examples as we work out of the technical preview. This might stop being an issue soon.

Totally agree. Tell you what, I'll close this out for now and keep an idea on it. I'll reopen if after some time it still feels like a big deal.
",devknoll,2015-08-14 18:05:38
52,2015-08-13 07:02:08,"`express` should be a `dependency` instead of devDependency because it's used by server.
",chentsulin,2015-08-13 16:59:15
52,2015-08-13 07:02:50,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-08-13 16:59:15
52,2015-08-13 07:16:43,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-08-13 16:59:15
52,2015-08-13 16:59:20,"awesome, thanks!
",josephsavona,2015-08-13 16:59:15
51,2015-08-13 06:53:15,"What are the current thoughts on using Websockets in the network layer?  

How would you keep all clients up-to-date when a mutation is sent from a single client?  In the other clients' environment, it would just receive a query response but, there wouldn't be a request object to go with it in the network layer.  Or is it as simple as Relay is not made with this kind of data flow in mind?
",gmmurphy,2015-08-14 16:24:09
51,2015-08-13 06:55:51,"cc/ @laneyk
",steveluscher,2015-08-14 16:24:09
51,2015-08-13 06:57:00,"There's also an ongoing discussion about subscriptions in GraphQL going on in #subscriptions channel on slack (www.github.com/facebook/graphql) which may(?) address this use case.
",devknoll,2015-08-14 16:24:09
51,2015-08-13 17:52:09,"> Or is it as simple as Relay is not made with this kind of data flow in mind?

It's definitely within scope. As @devknoll mentioned, we are actively discussing what subscriptions should look like in open source GraphQL. Internally, we already have prototypes that work with Relay, but they depend on bits of internal infra. We need to figure out how best to tackle this in open source, and websockets may be part of the solution.
",wincent,2015-08-14 16:24:09
51,2015-08-14 16:24:09,"Thanks for the great question! I've documented this in the wiki - please feel free to re-open if you have additional questions.

wiki: https://github.com/facebook/relay/wiki/Frequently-Asked-Questions#does-relay-support-real-time-updates
",josephsavona,2015-08-14 16:24:09
51,2016-03-07 15:53:48,"What is the current status of this? Any progress for real-time updates with Relay? Thanks!
",tgy,2015-08-14 16:24:09
51,2016-03-07 16:19:17,"@toogy We're tracking progress on this at #541. There are some open PRs from the community but we haven't had the bandwidth to support these well. Once #558 and #559 are complete we should be in a better place to focus on this.
",josephsavona,2015-08-14 16:24:09
50,2015-08-13 06:44:18,"This is discussd in #14 and reported in #42. /cc @yungsters 
",sairion,2015-08-13 17:17:42
50,2015-08-13 17:05:13,"@sairion thanks!
",josephsavona,2015-08-13 17:17:42
49,2015-08-13 05:34:09,"Partially fixes #20 by warning unsuspecting users.
",devknoll,2015-08-18 08:33:06
49,2015-08-13 21:50:57,"This now addresses https://github.com/facebook/relay/issues/20#issuecomment-130770234, raising an error if either a route or the container have any unmatched queries/fragments.

cc @yungsters @josephsavona
",devknoll,2015-08-18 08:33:06
49,2015-08-17 21:00:26,"Oops. I've removed the ES2015/polyfill dependency (and made the check run only in `__DEV__`) and pushed a new version. Would love any thoughts + feedback on this!
.
.
.
.
.
.
༼ つ ◕_◕ ༽つ GIVE FEEDBACK
",devknoll,2015-08-18 08:33:06
49,2015-08-18 07:02:44,"How about doing this in `getRelayQueries` so that the warning is closer to where the dependent code exists?
",yungsters,2015-08-18 08:33:06
49,2015-08-18 07:06:46,"If you stick with `invariant`, add an entry under **master** in [`CHANGELOG.md`](https://github.com/facebook/relay/blob/master/CHANGELOG.md).
",yungsters,2015-08-18 08:33:06
49,2015-08-18 07:11:35,"Ha, this was actually originally in `getRelayQueries`. I'll move it back.
",devknoll,2015-08-18 08:33:06
49,2015-08-18 08:05:01,"Ok, should be up to your specs now :smile: 
",devknoll,2015-08-18 08:33:06
49,2015-08-18 08:33:09,"This is great! Thanks.
",yungsters,2015-08-18 08:33:06
48,2015-08-13 04:40:32,"Hey, so I'm playing around with Relay and I need to add an authentication token to all outgoing HTTP calls made by Relay. Is my only option to implement my own NetworkLayer?

Do you think it'd be useful to add a `beforeSend` type hook inside the layer so we can make changes to the requests before sending them off? In my case, I need to add a HTTP header.

Let me know if there's another place where I should be asking this question! Thanks!
",keithpitt,2015-08-14 06:54:39
48,2015-08-13 13:01:30,"More broadly the default network layer should be capable of handling interceptors that can manipulate both the request and the response.
",tlvenn,2015-08-14 06:54:39
48,2015-08-13 18:10:50,"The default network layer was intended to be a simple example for how to create your own. (In fact, I thought that not everyone would want to be using a `fetch` polyfill.) It really does not do all that much, so while I'm not opposed to making it more flexible, is there any particular reason you wouldn't want to simply create your own?

If there is something valuable in the default network layer that you really would not want to re-implement, maybe we should be exposing it in a way that custom network layers can re-use them.

If we think the best path is still to make the network layer more flexible, would it be sufficient to replace the second and third constructor arguments (`timeout` and `retryDelays`) with an fetch `init` argument that gets spread into the actual `init` that we pass (to either `fetch` or `fetchWithRetries`)?
",yungsters,2015-08-14 06:54:39
48,2015-08-13 18:58:23,"I'm not so sure about interceptors for request/response (though these may be good for dev tools - but a dev tool could also probably just implement its own proxying network layer, right?) but I think that some way to add headers is probably the last thing the default network layer needs to truly become a default. It seems like a common enough use case.

`init` seems like it might be a good compromise.
",devknoll,2015-08-14 06:54:39
48,2015-08-14 05:50:22,"> though these may be good for dev tools - but a dev tool could also probably just implement its own proxying network layer, right?

Yup, see #60. Alternatively, a man-in-the-middle network layer could be used for this:

<S_CODE_TOKEN>
",yungsters,2015-08-14 06:54:39
48,2015-08-14 06:54:39,"We're trying to maintain good GitHub hygiene, so I'm going to close this out in favor of #70. Feel free to continue discussion there.
",yungsters,2015-08-14 06:54:39
48,2015-08-14 16:45:16,"That's great! That PR solves my problem. Thanks for that!! :heart: 
",keithpitt,2015-08-14 06:54:39
47,2015-08-13 03:47:02,"See facebook/relay-starter-kit#4
",cletusw,2015-08-13 04:01:20
47,2015-08-13 04:01:22,"Thanks!
",voideanvalue,2015-08-13 04:01:20
46,2015-08-13 03:27:48,,willpiers,2015-08-13 03:33:09
46,2015-08-13 03:33:31,"hadn't finished reading the docs
",willpiers,2015-08-13 03:33:09
45,2015-08-13 01:35:27,"Related PR in Relay Starter Kit: https://github.com/facebook/relay-starter-kit/pull/5
",kossnocorp,2015-08-13 01:44:49
44,2015-08-13 00:41:03,"Same as https://github.com/facebook/relay-starter-kit/pull/2
",devknoll,2015-08-13 01:32:52
44,2015-08-13 01:32:47,"Awesome. Thank you!
",voideanvalue,2015-08-13 01:32:52
43,2015-08-12 22:10:34,,devknoll,2015-08-13 01:07:45
43,2015-08-13 01:07:49,"Thanks :)
",voideanvalue,2015-08-13 01:07:45
42,2015-08-12 21:38:06,"The TodoMVC example from the README does not work in browsers that do not support `String#repeat`. At time of writing [the browsers that support it are Chrome and Firefox](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#Browser_compatibility). This should either be done manually or the babel polyfill core-js should be included in the build that bundles Relay.
### Steps to Reproduce
1. Follow the [directions in the README](https://github.com/facebook/relay/blob/58b4e27bcfd3da53ef9917a912b2fffd92994246/README.md#example) for running an example.
2. Load [http://localhost:3000/](http://localhost:3000/) in a browser without support for `String#repeat`, i.e. Safari.
### Expected

The page should load the TodoMVC app.
### Actual

A runtime error occurs before the page can be properly loaded (`TypeError: undefined is not a function (evaluating ''\\ '.repeat(prefix.length)')`).
",eventualbuddha,2015-08-13 17:18:10
42,2015-08-12 21:54:00,"Thanks for reporting! @steveluscher is looking into this in #14.
",voideanvalue,2015-08-13 17:18:10
42,2015-08-13 17:18:10,"#50 added the babel polyfill to all the examples, which should resolve this issue. When using Relay in your own projects, be sure to include a polyfill.
",josephsavona,2015-08-13 17:18:10
41,2015-08-12 21:26:52,,devknoll,2015-08-12 21:42:01
41,2015-08-12 21:42:04,"Thank you!
",voideanvalue,2015-08-12 21:42:01
40,2015-08-12 21:17:10,"I've followed the [setVariables example](https://facebook.github.io/relay/docs/api-reference-relay-container.html#setvariables) for creating a pagination in nodes, however is not working with the current changes: https://github.com/syrusakbary/relay-starter-kit/commit/75703bb041772fe6c2592ca198af38d0166fb5e6

Here is the error I'm getting in the browsers console:

<S_CODE_TOKEN>

Related issue in _Relay Starter Kit_: https://github.com/facebook/relay-starter-kit/issues/3
",syrusakbary,2015-08-14 23:57:55
40,2015-08-13 00:48:09,"Thanks! We're on it.
",steveluscher,2015-08-14 23:57:55
40,2015-08-13 22:27:35,"FYI we fixed this upstream and will be syncing the change down later today or early tomorrow.
",josephsavona,2015-08-14 23:57:55
40,2015-08-13 23:35:32,"Great! Thanks @josephsavona @steveluscher 
",syrusakbary,2015-08-14 23:57:55
40,2015-08-14 23:57:55,"This was fixed in 0.1.1 - https://github.com/facebook/relay/blob/master/CHANGELOG.md#011-august-14-2015

Thanks for reporting, and feel free to reopen if there are any further issues!
",josephsavona,2015-08-14 23:57:55
39,2015-08-12 19:07:15,"Potentially confusing typo.
",NickStefan,2015-08-12 21:02:10
39,2015-08-12 19:08:48,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-08-12 21:02:10
39,2015-08-12 20:11:45,"Thanks for this, Nick! Would you like to follow those instructions above to sign the contributor license agreement? That way, we'll be able to easily merge your PRs in the future.
",steveluscher,2015-08-12 21:02:10
39,2015-08-12 20:50:33,"signed it. the CLA bot should show up soon enough ;)
",NickStefan,2015-08-12 21:02:10
39,2015-08-12 20:51:56,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-08-12 21:02:10
38,2015-08-12 16:58:36,"Fixes #13.
",zpao,2015-08-12 20:55:31
38,2015-08-12 20:20:13,"Note, we probably want to update docs a bit as well to make it clear that the app should be installing React.
",zpao,2015-08-12 20:55:31
38,2015-08-12 20:55:59,"Documented in 9612c90.
",steveluscher,2015-08-12 20:55:31
37,2015-08-12 16:33:19,,Shraymonks,2015-08-12 17:23:08
37,2015-08-12 17:23:10,"Thanks Raymond!
",voideanvalue,2015-08-12 17:23:08
36,2015-08-12 15:01:42,"It seems to me that this would require an API to serialize the store state and rehydrate on the client otherwise the initial client render may differ from the server rendered one.

Is this feature planned?

Thanks
",stevoland,2015-08-21 18:01:52
36,2015-08-12 18:27:09,"Actually, it's already mostly implemented and we do use it internally at Facebook. Just that the hooks aren't exposed currently and it is undocumented at this point. We do plan to expose and document in the near future.

In the meanwhile, for the curious, here's how it works on a high level:

Instead of sending a serialized version of the store from the server along with the markup and then rehydrating the store on the client, we send the query responses that we used for the initial render on the server. The client can then use this response to build a store identical to the one that was built on the server and re-conciliate the render. Do note that this means that the server and the client must generate exactly the same initial query.

And these are the pieces of code you need to know about to make it work:
- `GraphQLQueryRunner.run` optionally [accepts a `fetchMode`](https://github.com/facebook/relay/blob/2a86be3e71cdc6511fa994e3de539f72070da1b4/src/legacy/store/GraphQLQueryRunner.js#L76) argument that it passes on to `RelayPendingQueryTracker`. Note that [`RelayStore.primeCache`](https://github.com/facebook/relay/blob/2a86be3e71cdc6511fa994e3de539f72070da1b4/src/store/RelayStore.js#L85-L90) that is [called by the internals of `RelayRootContainer`](https://github.com/facebook/relay/blob/2a86be3e71cdc6511fa994e3de539f72070da1b4/src/container/RelayRootContainer.js#L193) currently doesn't accept this.
- When fetchMode is `DliteFetchModeContstants.FETCH_MODE_PRELOAD`, (`RelayPendingQueryTracker` creates a promise for the pending query, but doesn't actually fetch it)[https://github.com/facebook/relay/blob/2a86be3e71cdc6511fa994e3de539f72070da1b4/src/store/RelayPendingQueryTracker.js#L87-L90]. So if you send code that calls `RelayPendingQueryTracker.resolvePreloadQuery` with the results of the queries, along with the initial markup, Relay can rebuild the store and re-conciliate the render.

We actually have a wrapper internally that allows us to do all this. The technical preview, in its current form, would require some modification to make this work. I'll try to write an example when I find some free time.

Side note: This actually allows us to do another interesting thing, apart from just server rendering the entire application. We can boost the performance of a client-side rendered application by actually starting the fetching of the queries on the server with the initial request while starting a render with fetchMode being `DliteFetchModeContstants.FETCH_MODE_PRELOAD` on the client and streaming down the results of the queries as they're available. We call it, surprise surprise, the preload mode.

To compare, here is what a somewhat simplified sequence of events looks like:

Client Only:

<S_CODE_TOKEN>

Completely server side:

<S_CODE_TOKEN>

Preload:

<S_CODE_TOKEN>
",voideanvalue,2015-08-21 18:01:52
36,2015-08-12 20:37:35,"That preload mode sounds amazingly cool.

Is there anything between server-side and preload, where e.g. some set of initial requests that are ""fast"" to render and generate the core of the page are rendered entirely on the server, while slower requests are streamed to the client after the initial client render?
",taion,2015-08-21 18:01:52
36,2015-08-12 21:03:00,"The fast / slow async loading sounds overly complex and instead async stuff should be implemented on client side as needed.

> On Aug 12, 2015, at 4:37 PM, Jimmy Jia notifications@github.com wrote:
> 
> That preload mode sounds amazingly cool.
> 
> Is there anything between server-side and preload, where e.g. some set of initial requests that are ""fast"" to render and generate the core of the page are rendered entirely on the server, while slower requests are streamed to the client after the initial client render?
> 
> —
> Reply to this email directly or view it on GitHub.
",pkieltyka,2015-08-21 18:01:52
36,2015-08-12 21:04:24,"@pkieltyka It's a perfectly reasonable way to handle server-side rendering with Flux - set an aggressive timeout on the server, let some portion of the requests succeed there, and then have clients re-request all the missing data. It lets you split the difference between showing your user a mostly-blank page, and with letting everything be held up by the slowest request.
",taion,2015-08-21 18:01:52
36,2015-08-12 21:36:55,"Actually, you can start fetching all queries on the server, stream the results to the client and have the client do an initial render with only a subset of all the queries and then re-render as and when more query results arrive :). Look at [Ready State](https://facebook.github.io/relay/docs/guides-ready-state.html#onreadystatechange) (ready v/s done) and how `GraphQLQueryRunner` changes it.
",voideanvalue,2015-08-21 18:01:52
36,2015-08-12 23:50:15,"Oh, got it - very cool!
",taion,2015-08-21 18:01:52
36,2015-08-13 03:22:40,"However, if you look closely, you might notice that we do not currently have a way to get a ready state of `{ready: true, done: false}`, though. The `DefaultNetworkLayer` that we released yesterday does not have the ability to receive streaming responses. We didn't think it was important enough to hold up getting the public release out there. :X
",yungsters,2015-08-21 18:01:52
36,2015-08-13 06:38:40,"@voideanvalue But how do you set proper HTTP response code in the ""preload"" case? For example, user asked for missing resource and you should send 404, but you've sent 200 in the initial response because you haven't fetched your data yet. 
",th0r,2015-08-21 18:01:52
36,2015-08-13 11:41:08,"@voideanvalue Thanks for the thorough response, really appreciated!

> I'll try to write an example when I find some free time.

That would be fantastic!
",stevoland,2015-08-21 18:01:52
36,2015-08-14 05:43:36,"@th0r We'd enforce full server rendering if we might want the HTTP response to return a non-200 response code. We would typically only want to do this for bots though. 
",joshduck,2015-08-21 18:01:52
36,2015-08-14 08:43:57,"Hi everyone!
I did't get how to render the markup server side. I have to load the store in some way before calling React.renderToString()?
Thx!
",davide-ganito,2015-08-21 18:01:52
36,2015-08-17 16:41:06,"@davide-ganito as @voideanvalue mentioned, Relay supports server rendering but:

>  the hooks aren't exposed currently and it is undocumented at this point. We do plan to expose and document [them] in the near future. 
",josephsavona,2015-08-21 18:01:52
36,2015-08-21 18:01:52,"Thanks for asking about this! We'll track progress of server-side rendering support in #136
",josephsavona,2015-08-21 18:01:52
35,2015-08-12 14:47:08,"I believe I have read all the available resource, but still having difficulties to understand why I should explicitly handle the adding mutation on the client via `getConfigs`, its from example for `IntroduceShipMutation` mutation.  

<S_CODE_TOKEN>

If I look into server side implementation for this mutation, it returns all ships for that faction, so why client should handle this (append) manually?

<S_CODE_TOKEN>

I can see benefit of doing this when server is sending just new ship and not the whole faction. On the other hand if client has to handle these kind of mutation itself it seems like duplicating the logic and having limited options ('append', 'prepend').  

And how it all would go together with arguments for connections. Having two ship connections with argument that would filter the result - how to update when new ship is added? This new ship might appear in any of these two connections depending on filtering arguments. How would I make connections to refetch.

Thank you! And apologize in case I missed some relevant docs.
",jardakotesovec,2016-09-03 00:07:37
35,2015-08-12 21:38:14,"The `outputFields` and the fat query are closely related. It's not that the mutation always returns all of the ships for a given faction after having run, its that the mutation makes the faction field _available_ for querying as part of the `IntroduceShipMutationPayload`. If the client asks, the server mutation shall oblige.

Returning all of the ships as a response to adding a ship is not the goal of exposing `faction` though. You could think of other things the client mutation might be interested in on `faction` other than the `edges` of the `ships` connection, such as the total number of ships:

<S_CODE_TOKEN>

So, having added a ship, the response might look like this:

<S_CODE_TOKEN>
",steveluscher,2016-09-03 00:07:37
35,2015-08-12 21:57:30,"Also, the config governs how Relay handles the optimistic response too, so whether or not you fetch the edges on the `ships` connection from the server, it will know where to stick the new ship before the server has even responded, 
",steveluscher,2016-09-03 00:07:37
35,2015-08-12 23:00:30,"…and lastly, even if your fat query includes the ships connection with no subfields (ie. `faction { ships }`), Relay will strip out the `edges` subfield from the intersection of the fat query and the tracked query, so no refetching of all of the ships takes place. Take a look at https://github.com/facebook/relay/blob/master/src/mutation/RelayMutationQuery.js#L213-L221

I'll make it my job to make this more clear in the mutations docs. Thanks!
",steveluscher,2016-09-03 00:07:37
35,2015-08-13 06:38:06,"Right, thanks. I understand that this covers many use cases in optimal way and definitely makes sense.

How about if the mutation have some more complicated logic and would for example insert ship somewhere in the middle. I wonder what options I have when I want make Relay to refetch ships. Is updating facet using `FIELDS_CHANGE` way to go?

<S_CODE_TOKEN>
",jardakotesovec,2016-09-03 00:07:37
35,2015-08-13 06:54:05,"Exactly!

Leaving this issue open to track improvements to the mutations guide that cover these topics.
",steveluscher,2016-09-03 00:07:37
35,2015-08-14 16:30:03,"I am not sure if this is in the docs but any connection not listed in the `RANGE_ADD`'s `rangeBehaviors` will be refetched from the server and we won't be able to do an optimistic append or prepend for those at the moment. So if you are adding a ship and you also have fetched for `orderby:size`, that connection would be refetched from the server automatically with the `RANGE_ADD` config. 
",yuzhi,2016-09-03 00:07:37
35,2015-10-03 04:03:24,"I also would like better documentation for this. It definitely seems confusing at first, especially that coming into it, I think people are confused why mutations have to be so verbose, expecting Relay to be somehow ""smarter"".

In particular, the `RANGE_ADD configuration`. Here's the best that I can figure it:

<S_CODE_TOKEN>

So Relay takes `edgeName` from the response, takes the object with `parentID` from it's cache. It then adds the new edge to the connection field ""connectionName"" of the ""parentID"" object.

That leaves me with some questions:
- Why is it necessary that the connection from ""connectionName"" is part of the response? Shouldn't Relay, with only ""parentID.connectionName"", already know where to attach the edge? 
  I would assume that now, in 99% of the cases, when ""parentID"" only has one connection of the given type, so it should't even be necessary to tell Relay about ""connectionName"" in those cases?
- Why is ""parentName"" used for? What if my connection is nested more than one level deep? (`viewer { items { tags }`) - Is the parent the viewer or the items?
",miracle2k,2016-09-03 00:07:37
35,2015-10-12 19:47:03,"> I would assume that now, in 99% of the cases, when ""parentID"" only has one connection of the given type, so it should't even be necessary to tell Relay about ""connectionName"" in those cases?

Are you suggesting that we scan all fields on the `parentID` to find the field which is a connection and happens to contain an `edges` type that matches the type of the returned connection edge? You are certainly right that this could be made easier for a large portion of use cases.

> Why is ""parentName"" used for?

The `parentName` is the field on the **response payload** that corresponds to the parent field. This is important in the case that fields on the parent need to be updated.

I agree that it's confusing which of these configurations apply to which things — the response payload? the client data? the schema?

The `RelayMutation` docblock might help make these clearer: https://github.com/facebook/relay/blob/fbf8c50825ff609a5ab101a934f0b9e165ab5d9b/src/mutation/RelayMutation.js#L114-L129
",yungsters,2016-09-03 00:07:37
35,2015-12-22 10:52:08,"Would also like to know how to specify parentName when connection is nested (`viewer { cart { items } }`)
",JonasFromell,2016-09-03 00:07:37
35,2016-09-03 00:07:37,"I'm going to close this now because the mutations API is going to be drastically improved, simpler and different in [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable), so we aren't likely to be able to dedicate any resources to documenting the old system at this time. (Even so, if somebody wants to submit a PR improving the docs I'll be happy to review it.)

Thanks to everybody who contributed to this thread!

(Just in case anybody stumbles on this thread looking for more info on mutations in the future: since this thread was originally started, we've talked a little bit about the concepts behind mutations: for example, see the videos on [the videos page](https://facebook.github.io/relay/docs/videos.html)).
",wincent,2016-09-03 00:07:37
34,2015-08-12 13:41:03,"The POST bodies with these escaped strings are currently overly verbose, harder to debug and require extra parsing on both ends.

These bodies already have Content-Type application/json and express-graphql will only parse the variables param if it needs to (for example in the case of FormData): https://github.com/graphql/express-graphql/blob/9e6765f3c9e9e2f14da3c5fd2616afe73239f62b/src/index.js#L138-L146

I've signed the CLA and all tests pass, thanks!
",mhart,2015-08-13 02:46:56
34,2015-08-13 02:46:53,"Thanks again for discovering this! And thanks for making sure tests pass. :)
",yungsters,2015-08-13 02:46:56
33,2015-08-12 11:32:50,"The LikeButton component in the Mutations guide seemed to be missing
the RelayContainer: the fragments were directly specified on the
component even though this doesn't seem to be supported.
Add the container for LikeButton.

Also add a bunch of missing closing parens for containers in the docs.
",fson,2015-08-12 20:08:54
33,2015-08-12 20:08:57,"Right you are; thanks!
",steveluscher,2015-08-12 20:08:54
32,2015-08-12 10:15:58,"@dschafer mentioned that using cursors when, eg, ordering changes is not guaranteed to be correct. Should compliant server implementation:

a) signal error 
b) return null
c) proceed as normal, even if result might be pretty random?
",freiksenet,2015-08-18 08:22:38
32,2015-08-12 18:50:39,"The behavior right now is unspecified, and the behavior might vary on a connection-by-connection basis. For some connections it might appear to work, though the results are probably unexpected. An object’s ID often makes a nice cursor, but if we do that, the cursors are the same no matter what ordering we use; similarly, if we're using offsets as cursors, the cursors are the same for every ordering. Other connections throw a specific error that the client will recognize that says “that cursor is not valid” (we do that for news feed, for example; feed on the homepage doesn’t go back infinitely, so if you have an old enough cache, the cursor might not be valid on the server anymore).

We might be able to clarify the spec by adding some _may_ language here; a server _may_ encode information in the cursor that identifies the other arguments passed to the connection; if it does so and sees a cursor used with different arguments, it _may_ throw an error indicating the issue to the client. That's a nice suggested behavior for cases where it makes sense to use more complex cursors, while still allowing the ""ID as cursor"" and ""offset as cursor"" cases to be valid in the spec.

Let me know what you think of that language, and I can update the spec?
",dschafer,2015-08-18 08:22:38
32,2015-08-12 18:55:07,"Yeah, this change sounds good! I am still undecided myself on that issue, so it's good to have permissive language on that in the spec. 

Thank you!

On Wed, Aug 12, 2015 at 9:50 PM, Dan Schafer notifications@github.com
wrote:

> The behavior right now is unspecified, and the behavior might vary on a connection-by-connection basis. For some connections it might appear to work, though the results are probably unexpected. An object’s ID often makes a nice cursor, but if we do that, the cursors are the same no matter what ordering we use; similarly, if we're using offsets as cursors, the cursors are the same for every ordering. Other connections throw a specific error that the client will recognize that says “that cursor is not valid” (we do that for news feed, for example; feed on the homepage doesn’t go back infinitely, so if you have an old enough cache, the cursor might not be valid on the server anymore).
> We might be able to clarify the spec by adding some _may_ language here; a server _may_ encode information in the cursor that identifies the other arguments passed to the connection; if it does so and sees a cursor used with different arguments, it _may_ throw an error indicating the issue to the client. That's a nice suggested behavior for cases where it makes sense to use more complex cursors, while still allowing the ""ID as cursor"" and ""offset as cursor"" cases to be valid in the spec.
> 
> ## Let me know what you think of that language, and I can update the spec?
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/facebook/relay/issues/32#issuecomment-130410202
",freiksenet,2015-08-18 08:22:38
32,2015-08-13 08:31:49,"Do I understand correctly that currently there is no mechanism to invalidate cursors (and start over) on the client if I change arguments on connection?
",jardakotesovec,2015-08-18 08:22:38
32,2015-08-13 09:06:35,"If you change the arguments then you will get new cursors for this arguments, old cursors would still be valid for old arguments. Why would you want to invalidate them?
",freiksenet,2015-08-18 08:22:38
32,2015-08-13 09:15:33,"@freiksenet Right, In that case I apparently don't understand correctly what is the actual issue you reported. 

> mentioned that using cursors when, eg, ordering changes is not guaranteed to be correct. 

I thought that you are referring of changing connection argument (orderby) is causing the problem with cursors. Maybe if you could give me example with bit more context.

Thanks!
",jardakotesovec,2015-08-18 08:22:38
32,2015-08-13 12:18:48,"If you change some of the arguments like orderBy, cursors might not be valid for those new arguments, so server might want to signal an error. Those cursors are still valid for old connection arguments. My question was just whether server should signal error.
",freiksenet,2015-08-18 08:22:38
32,2015-08-13 12:59:06,"Quoting @yuzhi from slack

> You can have something like `connectionName(orderby: 'foo', first: 10)`, Relay will keep it > separate from `connectionName(first:10)`, and do it's best to keep the ordering we got from the server.

@freiksenet So as you also mentioned - Relay use new cursors with new arguments for connection.

I understand @dschafer example - when cursors on server changes for some reason (cache expires, data changes by different client, ...) it makes sense to inform client that existing cursors are invalid. 

But still don't understand why changing connection arguments on client would cause the problem as Relay should keep separate cursors automatically.

Hope I am not causing more confusion.. but its important for me to understand what limitations are potentially there. Thanks!
",jardakotesovec,2015-08-18 08:22:38
32,2015-08-13 13:02:13,"I am talking about server-side behavior, not client-side. It's good that Relay handles it, but I need to know how our server should handle it too for clients different than Relay. This repository includes spec for GraphQL servers, that's why I am raising the issue here :)
",freiksenet,2015-08-18 08:22:38
32,2015-08-13 13:04:30,"Ok, now its clear. Thanks.
",jardakotesovec,2015-08-18 08:22:38
32,2015-08-18 08:22:38,"Looks like all questions have been answered. If that is not the case, I apologize and please feel free to re-open.
",yungsters,2015-08-18 08:22:38
31,2015-08-12 10:00:24,,knowbody,2015-08-12 20:06:35
30,2015-08-12 09:52:51,"[Here](https://github.com/facebook/relay/blob/45348c5b5d34b47be90d139db641571e8c6e412d/website/graphql/Connections.md#pagination-algorithm) it says that it first slices with `first` and then with `last`, but the algorithm says the opposite. Which one is correct?
",freiksenet,2015-08-13 19:19:22
30,2015-08-13 19:14:55,"I'll change the spec to match the reference implementation.
",dschafer,2015-08-13 19:19:22
29,2015-08-12 07:16:07,,charlieschwabacher,2015-08-12 18:58:06
29,2015-08-12 18:58:07,"Thanks!
",voideanvalue,2015-08-12 18:58:06
28,2015-08-12 07:00:52,"https://github.com/facebook/relay/blob/master/docs/APIReference-Mutation.md#example-4

The example given is for `getFatQuery`.
",devknoll,2015-08-14 05:19:43
27,2015-08-12 05:35:25,"Related to issue discussed in #7 

Term ""Routes"" usually is used to describe url related routing. I think adding a Note to Routes documentation, should save people time to understand that routes are about root queries and not url routing.
",genbit,2015-08-13 04:36:38
27,2015-08-13 02:50:21,"Thanks, this is great! Just one minor suggestion, and I think there might be a typo.
",yungsters,2015-08-13 04:36:38
27,2015-08-13 03:00:49,"Yes, block quote definitely looks better, fixed typo as well. Thanks for sharing more info about future of routes.
",genbit,2015-08-13 04:36:38
27,2015-08-13 03:57:38,"fixed indentation 
",genbit,2015-08-13 04:36:38
27,2015-08-13 04:36:48,"Thanks again!
",yungsters,2015-08-13 04:36:38
26,2015-08-12 05:27:52,"The remaining steps are:
- [x] Relay/React Native/fbjs versioning
- [x] Use the appropriate `unstableBatchedUpdates` depending on React/React Native
- [x] Version of `fetch` polyfill for React Native
- [ ] Document the use of `babel-relay-plugin` with React Native (see discussion at https://github.com/facebook/relay/pull/714#issuecomment-181204627) 
- [x] Create a fresh React Native project, set up Relay, configure the plugin per the documentation added in the previous step, and make sure everything works as expected.

Note: edited by @josephsavona
",qingfeng,2016-03-09 23:44:30
26,2015-08-12 18:52:32,"have not tried yet, but looks like so. 
some examples from docs use react native components
https://facebook.github.io/relay/docs/guides-containers.html#content
",yongxu,2016-03-09 23:44:30
26,2015-08-12 19:53:24,"Relay should work as-is on React Native - if not, feel free to let us know and re-open this!
",josephsavona,2016-03-09 23:44:30
26,2015-08-17 07:30:38,"@josephsavona even if relay components aren't inheriting react-native's Component?

https://github.com/facebook/relay/blob/master/src/container/RelayContainer.js#L23

I'm getting `Can't find variable: document` in getActiveElement
",amccloud,2016-03-09 23:44:30
26,2015-08-17 08:17:37,"I also needed to include [johanneslumpe/react-native-browser-polyfill](https://github.com/johanneslumpe/react-native-browser-polyfill) to get around a similar issue `Can't find variable: self` in whatwg-fetch
",amccloud,2016-03-09 23:44:30
26,2015-08-25 21:54:39,"@josephsavona Relay cannot work as-is with React Native because Relay includes React web as a hard dependency, and including React web into React Native is not functional.

Here's a commit that shows the minimal changes to build relay against react-native:
https://github.com/facebook/relay/commit/e0037c78931edc3286e5217894348ca8ece1225b

The 'dist' step of building relay still fails with that commit, with the error:
![image](https://cloud.githubusercontent.com/assets/699550/9480445/21f4eb66-4b51-11e5-8ceb-e89682a80416.png)

I'm not sure exactly why that's failing.

The last two things we had to do to get relay working with react native was:
- Commit relay's `/lib` directory since building `dist` failed (above)
- stub `process.env` before including Relay in the react-native application, since `process` doesn't exist in react-native's JS environment.  This is only necessary until the `dist` step of compilation works, since dist will remove all `process.env` references. I made a pseudo-module called 'relay',, which is a bit silly but functional:

<S_CODE_TOKEN>
",boourns,2016-03-09 23:44:30
26,2015-08-25 23:14:24,"Last thing I forgot to mention regarding relay's compatibility with react-native:

relay assumes `self` is present.  This is true in react-native _only when debugging in Chrome_.  If you are not debugging in Chrome you will get an error `self is not defined` when including Relay.  A solution is to add https://github.com/johanneslumpe/react-native-browser-polyfill to your react-native project.
",boourns,2016-03-09 23:44:30
26,2015-08-29 22:16:15,"@josephsavona can we re-open this?
",amccloud,2016-03-09 23:44:30
26,2015-08-30 18:53:29,"@amccloud thanks for investigating, I'm reopening to give us a place to track this.
",josephsavona,2016-03-09 23:44:30
26,2015-08-30 19:28:58,"The last thing we needed to do to get relay working with react-native was to use react-native's global `fetch` by deleting the `var fetch = require('fbjs/lib/fetch');` line from `lib/RelayDefaultNetworkLayer.js`.

We've gotten basic requests working following the steps I've outlined above in my comments on this issue, but I'm not 100% certain other things aren't broken yet.
",boourns,2016-03-09 23:44:30
26,2015-08-31 05:29:02,"@boourns that's great. I also had to delete `var fetch = require('fbjs/lib/fetch')` from the following library which was declared in `lib/RelayDefaultNetworkLayer.js`:
`var fetchWithRetries = require('fbjs/lib/fetchWithRetries');`
",clintonwoo,2016-03-09 23:44:30
26,2015-09-02 14:19:13,"@boourns @clintonwoo Hello guys, followed your step all the way, however i get an error 'can't find variable fetchWithRetries', however when adding it i get 'cannot find variable: self'. Any tips would be greatly appreciated. github repo is https://github.com/almasakchabayev/reactNativeRelayWebpackDemo. 
",almascript,2016-03-09 23:44:30
26,2015-09-02 14:44:43,"@almasakchabayev follow this comment: https://github.com/facebook/relay/issues/26#issuecomment-134767414
",boourns,2016-03-09 23:44:30
26,2015-09-02 15:06:23,"@boourns It worked when I changed fetchWithRetries in 'function _sendQuery' to just fetch. Great! Thanks a lot!
",almascript,2016-03-09 23:44:30
26,2015-09-04 15:15:04,"@boourns Maybe a dumb question: What do you mean by: ""Commit relay's `/lib` directory since building `dist` failed (above)"" ?
",lukasreichart,2016-03-09 23:44:30
26,2015-09-04 15:31:58,"@lukasreichart 

Ideally we would build relay against react-native, do a `dist` build which would result in a single `relay.js` file, which could be copied into the react-native project.  The minimal changes to build relay against react-native are here: https://github.com/facebook/relay/commit/e0037c78931edc3286e5217894348ca8ece1225b

With that commit applied, the `src` to `lib` transpilation step succeeds, but doing a dist build of relay fails.  See the screenshot posted in my original comment.  So that commit is not sufficient in the long-term.

The proper solution will be to figure out why the dist build fails and making it not fail, but I don't really know what the problem is there yet.  

In the meantime if you want to try relay with react native, the hack solution is to fork relay, apply https://github.com/facebook/relay/commit/e0037c78931edc3286e5217894348ca8ece1225b, commit `/lib` and then add that relay fork to your react-native project as an npm dependency.  And then make the other changes I outline.
",boourns,2016-03-09 23:44:30
26,2015-09-10 11:30:37,"@boourns Thanks you've directed me to the right path. But now I have a problem with the `babel-relay-plugin`. I'am using this [script](https://github.com/facebook/relay/blob/master/examples/todo/build/babelRelayPlugin.js). But keep getting an Error: `Invariant Violation: RelayQL: Unexpected invocation at runtime. Either the Babel transform was not set up, or it failed to identify this call site. Make sure it is being used varbatim as `Relay.QL``

This error occurs when you use `Relay.QL` ( which should have been replaced by the babel-relay-plugin). The strange thing is, that in index.ios.bundle, all `Relay.QL`statements have been replaced correctly.

Any ideas on this one? 
",lukasreichart,2016-03-09 23:44:30
26,2015-09-10 14:43:14,"@lukasreichart in `package.json` for your project change the `start` command to be:

<S_CODE_TOKEN>

And then you need to run your react-native packager via 'npm start' instead of running `react-native start` or using the packager that xcode boots up.

This is another workaround we had to apply, not sure how to make this just gracefully happen yet.
",boourns,2016-03-09 23:44:30
26,2015-09-10 14:50:56,"@boourns Would you mind sharing the content of your `./lib/babelTransform.js` file?
",lukasreichart,2016-03-09 23:44:30
26,2015-09-10 14:56:13,"Sorry, discussing with @jahfer now who did this portion of the work.  Disclaimer again that this is hacks on hacks on hacks, not a robust solution to getting it working :)

What we did was copy the original react-native babel transformer from https://github.com/facebook/react-native/blob/master/packager/transformer.js into your project, and add the relay plugin:

<S_CODE_TOKEN>

`babelRelayPlugin.js` comes from https://github.com/relayjs/relay-starter-kit
",boourns,2016-03-09 23:44:30
26,2015-09-10 17:37:07,"I think my transform is working now. Thank you very much. @boourns 
Getting a new Error: `fetch is not a function` which is very strange, because fetch is globally defined in react native(?).
Did you also encounter this error?
",lukasreichart,2016-03-09 23:44:30
26,2015-09-10 17:39:27,"@lukasreichart yes, you need to follow this comment:
https://github.com/facebook/relay/issues/26#issuecomment-136176547

and this comment:
https://github.com/facebook/relay/issues/26#issuecomment-137116894

let me know how that works
",boourns,2016-03-09 23:44:30
26,2015-09-23 22:20:46,"So to enumerate what needs to be done:
1. Relay's ""react"" dependencies need to be made compatible with ""react-native"". I've opened up https://github.com/facebook/react-native/issues/2985 to move RN to use ""react"" from npm so that any library that depends on React but not ReactDOM will work with RN. Relay's peerDependency on ReactDOM is only for the examples so we should be good there.
2. Need to drop the dependency on the ""fetch"" polyfill. My thinking is that fbjs should make the fetch polyfill optional (or exclude it altogether) and ask that the developer provide their own definition of `global.fetch`, similar to how most libraries don't bundle a Promise implementation because every developer has different needs.

Optional and desired:
1. Publish src to npm alongside libs and add an entry to package.json like `""react-native"": ""src""` that tells the RN packager to read from src. (This is currently unimplemented in the packager but I believe there are PRs out to add it. It is similar in spirit to [the ""browser"" field](https://gist.github.com/defunctzombie/4339901).) It's much nicer when debugging to have the raw source files and to have full control over how they are transformed. Developers can easily load the Babel plugin via `.babelrc`.
2. Publish the Babel plugin separately if the RQL syntax and output are pretty stable and ready to be semver'd. If it is changing a lot with every Relay release then this doesn't yet make sense.
",ide,2016-03-09 23:44:30
26,2015-09-26 22:17:41,"@ide thanks for the summary!

what about the `ReactDOM` require here?

https://github.com/facebook/relay/blob/master/src/container/RelayContainer.js#L24
",boourns,2016-03-09 23:44:30
26,2015-09-26 22:19:40,"Good point. The injection should probably be moved out of RelayContainer since it's setting up the environment. 
",ide,2016-03-09 23:44:30
26,2015-09-27 01:25:44,"There's a bunch of other discussion about `fetch` in https://github.com/facebook/relay/issues/136 and https://github.com/facebook/fbjs/issues/60. I made https://github.com/facebook/fbjs/pull/61 as a result (uses `isomorphic-fetch` module). Though looking the comments above about RN, looks like the main issue about `self` not being defined won't be resolved. We could add `global.self` if it's not defined but that's not awesome… RN already has a fetch polyfill so maybe just saying that fbjs should depend on a global `fetch` function being available is ok.
",zpao,2016-03-09 23:44:30
26,2015-09-27 01:33:18,"I'm 80ish% sure depending on a global `fetch` is the right solution since that's been a win when libraries do the same with `Promise` and users can address their own needs, whether that's using a custom Promises library like bluebird or selectively shipping a Promise polyfill only to browsers that don't natively support it.

My 20% reservation comes from the fact that `fetch` is not an ECMAScript standard so it doesn't make sense to expect Node to support it. That said, `fetch` is reasonable to polyfill on Node so asking users to define `fetch` and telling them about `isomorphic-fetch` is pretty pragmatic in my eyes.
",ide,2016-03-09 23:44:30
26,2015-09-27 01:36:56,"Polyfilling the global in node is generally not smiled upon so we may have different opinions on ""tolerable"" :) It is pretty pragmatic though (and we could probably wrap it up with a warning in `__DEV__` - still provide a `fetch` module in fbjs and when consumed it just exports `global.fetch` and warns if it doesn't exist)
",zpao,2016-03-09 23:44:30
26,2015-09-27 01:42:03,"Mm good point... I was thinking more about the difficulty of writing the polyfill implementation (as opposed to, say, jsdom) than polluting the global scope. Another idea is to use the ""browser"" field in package.json (which RN's packager supports) to publish a different version of fbjs depending on the environment.
",ide,2016-03-09 23:44:30
26,2015-09-27 08:58:35,"@ide 

By

> use the ""browser"" field in package.json

Do you mean specifically ""pull in `node-fetch` when running on Node, but do not polyfill `fetch` when running on browser and RN""?

Seems like the easiest way to accomplish that would be to modify `node-fetch` to use a no-op `""browser""` entrypoint and just import that in fbjs.
",taion,2016-03-09 23:44:30
26,2015-09-27 09:03:20,"The ""browser"" field also lets you override specific modules so I think you could write this in fbjs's package.json:

<S_CODE_TOKEN>
",ide,2016-03-09 23:44:30
26,2015-09-27 18:27:51,"I like the idea of ""bring-your-own-fetch"" in browser and using `node-fetch` on Node.

However, it's worth noting that this is not consistent with the approach Relay is (implicitly) using for promises. By virtue of using `babel-runtime`... wait, no, why is Relay pulling in `Promise` from fbjs? Doesn't `babel-runtime` take care of this for you?
",taion,2016-03-09 23:44:30
26,2015-09-27 18:45:45,"> why is Relay pulling in Promise from fbjs?

@taion We're using some not-sure-why-they-aren't-standard Promise methods like `done`
",josephsavona,2016-03-09 23:44:30
26,2015-09-29 21:14:27,"Going back to @ide's point from https://github.com/facebook/relay/issues/26#issuecomment-143511705, would it be reasonable to only polyfill `fetch` via `node-fetch` when running in Node, and letting the user bring his or her own `fetch` when running on the browser?
",taion,2016-03-09 23:44:30
26,2015-10-05 08:57:56,"I see that `react-relay` currently depends on `react@0.14.0-rc` and `react-dom`. Shouldn't it just depend on only `react` in the future?
Then we also need to wait `react-native` to depends on that incoming `react` 0.14.0+ so this can be interoperable, right?
",gre,2016-03-09 23:44:30
26,2015-10-07 09:57:55,"Anyone have had luck using relay with react-native 0.11.4 or 0.12.0-rc?
",kusamakura,2016-03-09 23:44:30
26,2015-10-07 10:33:51,"@kusamakura you can clone https://github.com/almasakchabayev/relay, it includes node_modules and lib folder, works with 0.11, there were some problem with 0.12.
",almascript,2016-03-09 23:44:30
26,2015-10-07 10:34:06,"@kusamakura I have Relay working with react-native 0.11.4 (see fork here: https://github.com/ProjectSeptemberInc/relay/commits/react-native ). I've followed @boourns tips tracked in this issue but also skipped all commits since Relay integrated ReactDOM : https://github.com/facebook/relay/commit/2d822400dbcf14f9636ab3149477f4ff0a0ee466 (so I'm based on the commit before it..)

This solution is temporary and is based on one month ago source code.

BTW in this last commit, @spicyj said that

> Internally for RN, we'll shim ReactDOM as just `{unstable_batchedUpdates: ReactUpdates.batchedUpdates}`

I hope react-native compatibility will be addressed soon.
",gre,2016-03-09 23:44:30
26,2015-10-07 14:04:53,"@almasakchabayev  i am using u r node_modules and lib folders but i am getting following error while starting app!

`Unable to resolve module immutable from myproject/node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorBreadcrumbNavigationBar.js
Unable to resolve module immutable from myproject/node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorNavigationBar.js`
",chandu0101,2016-03-09 23:44:30
26,2015-10-07 14:11:01,"@chandu0101 maybe the version of react-native in your app is 0.12?
",almascript,2016-03-09 23:44:30
26,2015-10-07 14:49:41,"> @chandu0101 maybe the version of react-native in your app is 0.12? 

hmm no , btw why my version matters here i am using u r node_modules lib folder ..(btw  i am new to this js build tools/systems) 
",chandu0101,2016-03-09 23:44:30
26,2015-10-07 14:57:50,"@gre 
 i am using your fork , while starting app i am getting following error 

`console.error: ""Object is not a function (evaluating fetch(uri,init))""` 
",chandu0101,2016-03-09 23:44:30
26,2015-10-07 15:03:19,"@chandu0101 In you app you require 'react-native' and 'relay'. I suppose the version of react-native, that you require and the version of react-native in relay should be the same. Not sure about your error, maybe try adding polyfill as suggested by @boourns 
",almascript,2016-03-09 23:44:30
26,2015-10-07 15:06:47,"@almasakchabayev  thanks for reply , i got it working by using @gre fork and your work around 

> when I changed fetchWithRetries in 'function _sendQuery' to just fetch. 
",chandu0101,2016-03-09 23:44:30
26,2015-10-07 15:07:32,"@chandu0101 Well done!
",almascript,2016-03-09 23:44:30
26,2015-10-07 15:13:49,"also I forgot to say I'm using my fork like this:

**relay.js**

<S_CODE_TOKEN>

( but that's basically quoting @boourns )
",gre,2016-03-09 23:44:30
26,2015-10-08 03:21:42,"@almasakchabayev @gre Awesome, thanks! My problem was that I was using 0.12.0-rc for some Android bugfixes. 😭
",kusamakura,2016-03-09 23:44:30
26,2015-10-08 13:39:01,"I'm interested in it to replace a mobile BFF ('backend for front end', an API adaptation layer we wrote for our native mobile apps) which is a bottleneck in terms of development. React Native would have even more value to us it had GraphQL support out of the box.  

I guess given @gre 's prototype, it would be safe to assume that we'll have GraphQL support in React Native at some point in the near future? 
",idibidiart,2016-03-09 23:44:30
26,2015-10-08 13:54:17,"Yeah Relay is very close to work with React Native, I guess it's mainly accidental that it doesn't work there, there are no strong dependency on React DOM as far as I know.
Anyway, let's hope React 0.14 will help the transition.
",gre,2016-03-09 23:44:30
26,2015-10-15 21:08:55,"Did anyone manage to get react-relay 0.4.0 working with react-native 0.12.0?
Tried to apply the suggestions from above to the new versions, but when I run the app on Android I get errors:

<S_CODE_TOKEN>
",stylesuxx,2016-03-09 23:44:30
26,2015-10-16 15:56:33,"So, I just made this work in a reusuable way yesterday for my team, and I thought I would post the steps I took (these are for the current master branch of RN):

1) Make sure that instead of importing ""react"", Relay is importing ""react-native"". This is super temporary change that won't be needed once https://github.com/facebook/react-native/issues/2985 is resolved. I did it through the build process in `react-relay`.

2) FBJS fixes: There are two, as has been discussed.

The first is:

![image of asap error](https://s3.amazonaws.com/f.cl.ly/items/3E3S1W0L1d1M2h1q2a1T/Screen%20Shot%202015-10-16%20at%2011.09.17%20AM.png) 

This happens, as far as I can tell, because of RN's packager dependency resolver. The resolver doesn't respect nested requires, and simply searches all files for ""require"" statements and tries to resolve those deps. In this case, in the `asap` library, on line 81 of `raw.js`, it's requiring a module called `domain`. This doesn't apply in the RN context, but the RN packager chokes (and now throws hard errors, vs. a couple weeks ago when it would just throw in the console and could be ignored). The only way to fix this at the moment is to comment out that `require`. I've opened an issue in RN to discuss this: https://github.com/facebook/react-native/issues/3463

The second issue is the FBJS fetch polyfill (as has been discussed).

The fetch polyfill looks like this:

<S_CODE_TOKEN>

It would be great if we could replace it with something like this:

<S_CODE_TOKEN>

This way, there wouldn't really need to be any updates to how Relay uses fetch, and could instead be fixed in fbjs.

However, this fails for two reasons, the first being the aforementioned RN packager issue where it doesn't respect conditional `require`'s. The second reason has something to do with how `@providesModule` works, as this file is only loaded on RN when I remove the `@providesModule` directive from the top comment. Not completely sure why or how this works.

3) ReactDOM dep for `unstable_batchedUpdates`.

To fix this issue, you have to change ReactDOM.js (in the `react` package) to be the following:

<S_CODE_TOKEN>

I'm not sure what the right way forward on this is.

RN makes this method available under the `ReactNative` module...but since Relay needs this method and it's platform dependent, it would require Relay to somehow do execution environment detection. I'm not sure what FB's plan is to resolve this going forward.

---

Anyway, just wanted to summarize my findings here. Hope this helps people in the interim while these internal problems are fixed.
",skevy,2016-03-09 23:44:30
26,2015-10-26 09:52:48,"@skevy do you have a ready-to-use fork somewhere?
",gre,2016-03-09 23:44:30
26,2015-10-26 13:32:40,"It's a bit more complicated than that. He told me offline and I got it set up. You need facebook/react-native#3625 skevy/relay#react-native and skevy/fbjs#react-native 
",brysgo,2016-03-09 23:44:30
26,2015-10-26 13:38:07,"I've got a ready-to-use fork here: https://github.com/Shopify/relay

Currently using it against react-native 0.11 release (while we deal with an integration test / packager issue preventing us from upgrading to 0.13)
",boourns,2016-03-09 23:44:30
26,2015-10-26 13:45:09,"@brysgo is correct, it's a bit involved and needs those forks. FBJS and Relay need to be installed from a local Sinopia or the like, as FB npm ignores ""src"". Also, it differs from the Shopify fork as it works with RN master (well, my fork of RN master, which was up to date as of last Thurs, and includes a packager PR that I submitted https://github.com/facebook/react-native/pull/3625)
",skevy,2016-03-09 23:44:30
26,2015-10-31 00:16:43,"Is it likely that React Native v0.14.0-rc will have a better story out of the box ?
",tlvenn,2016-03-09 23:44:30
26,2015-10-31 00:18:00,"@Tlvenn unfortunately no. Probably not till RN 0.15 at least. 
",skevy,2016-03-09 23:44:30
26,2015-11-18 15:18:01,"Can this be closed? Watching this here - https://code.facebook.com/videos/931163756933706/f8-2015-react-native-and-relay-bringing-modern-web-techniques-to-mobile/ - gives the impression that relay is working in conjunction with react native.
",jeromecovington,2016-03-09 23:44:30
26,2015-11-18 15:53:32,"@jeromecovington we cannot close this until the problem, as described by all of the preceding comments, is fixed. That video you reference was released before Relay was even open-sourced.

Will Relay _eventually_ work with React Native out of the box? Absolutely. Does it right now? Absolutely not.
",skevy,2016-03-09 23:44:30
26,2015-11-18 15:56:14,"@skevy - understood, and thanks for the clarification.
",jeromecovington,2016-03-09 23:44:30
26,2015-11-18 16:31:43,"That video just shows that Relay + RN works for Facebook :D Less so the rest of us.
",taion,2016-03-09 23:44:30
26,2015-11-20 10:55:51,"Do we have any tentative release number planned for RN support out of the box ? 

Is there any workaround to get it working in meanwhile ? 
",shishircc,2016-03-09 23:44:30
26,2015-11-20 11:55:54,"For me the workaround provided by @skevy works well with RN 0.13.0 and Relay 0.4.0.
",l-urence,2016-03-09 23:44:30
26,2015-11-20 14:25:10,"I opened a repo with `react-native init` equivalent project, with relay support, based on @skevy work. https://github.com/lenaten/react-native-relay.
",lenaten,2016-03-09 23:44:30
26,2015-11-20 15:08:55,"Thanks @skevy , @lenaten and @l-urence !
",shishircc,2016-03-09 23:44:30
26,2015-11-24 02:24:16,"@lenaten I've already run your project, but I got this error when I open the android application `Unable to download js bundle. Did you forget to start the development server or connect your device?` even though I had already started the react-native packager webserver.

Is there any workaround with this? By the way, I am using `react-native cli version 0.1.7`
",gmochid,2016-03-09 23:44:30
26,2015-11-24 05:17:11,"@gmochid - Doesn't sound like a relay problem. Make sure you follow the on device instructions and run a reverse proxy through adb. 
",brysgo,2016-03-09 23:44:30
26,2015-11-24 08:18:14,"@gmochid, Actually I found few more steps to do before get relay working:
- Add [babelRelayPlugin.js](https://github.com/relayjs/relay-starter-kit/blob/master/build/babelRelayPlugin.js) to project and add it to plugins array in `node_modules/react-native/packager/transformer.js`. 
- Add `schema.json` generated by relay's `update-schema` script to project, and add reference to it in `babelRelayPlugin.js`.
- Use `npm install -g react-native-cli@0.1.4` instead of `npm install -g react-native-cli`.
- Modify `/usr/local/bin/react-native` script to download react-native@0.13.0 instead of the latest version, and then run `react-native init` again.
- Since you don't run your graphql server in iphone/android, be sure you set your graphql server address in `index.<android/ios>.js`, for example:

<S_CODE_TOKEN>

Now I get relay working perfectly with android and iphone. 
I pushed this changes to my repo and update the readme instructions. 
Please let me know if there are more issues.
",lenaten,2016-03-09 23:44:30
26,2015-11-24 09:28:33,"@lenaten I get issue saying that index.os.js could not be found. (only thing I have not done is run the react-native init again because the clones app already points to react native 0.13 (can init be run on existing project?))

![simulator screen shot 24 nov 2015 5 27 10 pm](https://cloud.githubusercontent.com/assets/7352186/11362759/ab8fd8c4-92d0-11e5-8049-87f0a6e25133.png)
",shishircc,2016-03-09 23:44:30
26,2015-11-24 09:33:15,"@shishircc can you please start a clean project as described in my updated repo, and add your existing code after that.
There are many things that can go wrong...
",lenaten,2016-03-09 23:44:30
26,2015-11-24 10:40:05,"thanks @lenaten , the iOS app is now successfully running. Your repository is very useful ! 
",shishircc,2016-03-09 23:44:30
26,2015-11-24 12:14:33,"@lenaten when i clone your repo and try to run it, i am getting an error alert in xcode, like this
![screen shot 2015-11-24 at 4 35 07 pm](https://cloud.githubusercontent.com/assets/11956308/11366383/f3e26b62-92d2-11e5-8b4a-0f77c26844a6.png)
",shaikhussian,2016-03-09 23:44:30
26,2015-11-24 12:17:26,"Did you use git clone command ? Or did you download the code from github ? 

When I used git clone, I did not get this warning 
",shishircc,2016-03-09 23:44:30
26,2015-11-24 12:29:19,"@shaikhussian Go to System Preferences, then to Security & Privacy and  set “Allow applications downloaded from:” to Anywhere.
",lenaten,2016-03-09 23:44:30
26,2015-11-24 12:50:29,"@shishircc @lenaten  did i need to  add any extra like webpack.config.js file and babel, why because when i clone and try to run it i  got an error like this:
![ios simulator screen shot 24-nov-2015 6 17 30 pm](https://cloud.githubusercontent.com/assets/11956308/11367163/ebd9688a-92d7-11e5-9e7b-8546490b7ea5.png)
even i installed babel-relay-plugin
",shaikhussian,2016-03-09 23:44:30
26,2015-11-24 13:11:23,"@shaikhussian Please open new issues in react-native-relay repo.
BTW, do you have a valid schema in `react-native-relay/data/schema.json`?
",lenaten,2016-03-09 23:44:30
26,2015-11-24 13:12:12,"@shaikhussian

Yes, I got that too. That's expected. This is because this kit is only for
UI and has a empty data schema file. Also It does not include the graphql
backend server.

What I did was get the relay starter kit from github, npm install it and
npm start it.

Copy the schema file from  it to the react native relay data folder

Change the url in index.ios.js to point to local host port for the graphql
server

I am in process of doing this. So I will post more details once I am done.

On Tuesday, 24 November 2015, shaikhussian notifications@github.com wrote:

> @shishircc https://github.com/shishircc did you add any extra like
> webpack.config.js and babel, why because when i clone and try to run it i
> got an error like this:
> [image: ios simulator screen shot 24-nov-2015 6 17 30 pm]
> https://cloud.githubusercontent.com/assets/11956308/11367163/ebd9688a-92d7-11e5-9e7b-8546490b7ea5.png
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/26#issuecomment-159258078.
",shishircc,2016-03-09 23:44:30
26,2015-11-24 23:19:22,"Can someone post a very simple RN app using Relay? For whatever reason, I can't get anything to render.
",trbngr,2016-03-09 23:44:30
26,2015-11-25 00:30:16,"I just added usage example, please give it try.
",lenaten,2016-03-09 23:44:30
26,2015-11-25 01:04:18,"@lenaten Thanks a million! Everything is perfect.
",trbngr,2016-03-09 23:44:30
26,2015-11-25 02:29:22,"@lenaten works like a charm on ios. thank you very much.

But I got an issue on Android, it shows only white screen. I am using emulator Google Nexus API 22 on genymotion.
",gmochid,2016-03-09 23:44:30
26,2015-11-25 09:24:05,"@gmochid Find the network interface name in:
VirtualBox -> [Your Android VM] -> Settings -> Network -> Adapter [N] Attached To Host Only Adapter -> Name.
Find the IP address with `ifconfig` command, then replace the localhost string in `config.js` with the IP address.
It's should work in android and ios.
",lenaten,2016-03-09 23:44:30
26,2015-11-25 11:14:23,"@shaikhussian if you can't access this url via browser and see the Graphiql interface, it's a sign for a mistake in the deployment process.. Actually the config need to point to http://development.myappdemo.net:3003/graphql, which display ""Reset your FitVite Password here..""....
",lenaten,2016-03-09 23:44:30
26,2015-11-25 12:48:46,"@lenaten just now i change it, till now it directly redirect into forgot password page, now i changed forgot password url and till now i didn't included Graphiql code into my project.
Just now i checked it in xcode, it shows like this:'fetchWithRetries(): Still no successful response after 1 retries, giving up.'
 but in simulator it shows black white screen
in config.js
export default config = {
  graphqlURL: ""http://development.myappdemo.net:3003/graphql"",
}
",shaikhussian,2016-03-09 23:44:30
26,2015-11-25 13:48:35,"@shaikhussian I would happy to help, but please continue react-native-relay related discussions in https://gitter.im/lenaten/react-native-relay or open a new issue.
",lenaten,2016-03-09 23:44:30
26,2015-11-27 07:57:33,"anyone have working patch for `0.16.0-rc`( it supports stateless functions :sunglasses: ) ? 
",chandu0101,2016-03-09 23:44:30
26,2015-12-14 14:00:27,"Working on 0.16. Not managed to get it work for now, still stuck on the very cryptic error message:

`TypeError: undefined is not an object (evaluating 'GLOBAL.Text={...`

![simulator screen shot 14 dec 2015 14 59 12](https://cloud.githubusercontent.com/assets/246520/11782753/43880640-a273-11e5-88fb-706044e5cb0c.png)
",rricard,2016-03-09 23:44:30
26,2015-12-14 14:03:56,"Otherwise here's what I did (on this branch of this example project I'm trying to update: https://github.com/rricard/MobileSync/tree/reac_native_update):
1. patch fetch in fbjs
2. create `react` and `react-dom` packages in `node_modules` redirecting to `react-native`
3. now, I'm trying to figure out why the global context object (`this`) is always undefined.
",rricard,2016-03-09 23:44:30
26,2015-12-15 04:17:13,"+1 resolving this will be incredibly beneficial to RN projects @vjeux @mkonicek @nicklockwood any work happening in RN to make Relay integration easier? We're deciding whether to use Relay for a product which is going to be huge in Australia .. This one issue is holding us back!
",zuhair-naqvi,2016-03-09 23:44:30
26,2015-12-15 05:46:02,"I suggest using this as starting point. It works out of box. It has
modified version of RN and relay which work well together.

https://github.com/lenaten/react-native-relay.

Read the repository readme for more information

On 15 December 2015 at 12:17, zuhair-naqvi notifications@github.com wrote:

> +1 resolving this will be incredibly beneficial to RN projects @vjeux
> https://github.com/vjeux @mkonicek https://github.com/mkonicek
> @nicklockwood https://github.com/nicklockwood any work happening in RN
> to make Relay integration easier? We're deciding whether to use Relay for a
> product which is going to be huge in Australia .. This one issue is holding
> us back!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/relay/issues/26#issuecomment-164640639.
",shishircc,2016-03-09 23:44:30
26,2015-12-15 06:32:18,"@shishircc Unfortunately https://github.com/lenaten/react-native-relay only works against React Native 0.13.0 which doesn't work with React 0.14!

We attempted to get it to work against 0.16.0 because the rest of our stack uses React 0.14 but haven't been able to get it running thus far... ;_;
",mpretty-cyro,2016-03-09 23:44:30
26,2015-12-15 06:35:36,"^ :sob:
",zuhair-naqvi,2016-03-09 23:44:30
26,2015-12-15 09:59:33,"@zuhair-naqvi this is what RN team is working on: https://github.com/facebook/react-native/issues/2985

in the meantime, maybe Relay could use this workaround? https://github.com/facebook/react-native/issues/2985#issuecomment-162483264

(see also https://productpains.com/post/react-native/react-native-to-depend-on-react/ )
",gre,2016-03-09 23:44:30
26,2015-12-15 11:20:04,"@rricard  seems when i require `react-relay`, the whole javascript env will be broken. `react-relay` use `fbjs` overrides the `fbjs` which `react-native` uses, this cause conflicts in Promise, fetch..etc.. (don't know how to fix this :disappointed:  )
",filod,2016-03-09 23:44:30
26,2015-12-15 11:25:31,"I don't know but by adding libs one by one, react-relay is not the first offender, the babel-relay-plugin seems to break it alone. I don't exactly know how the react packager works but if we could exclude some paths from being taken in account in the haste map, that could make a difference. Having facebook/react-native#2985 resolved will improve the situation but not fix it magically either I think. I'll see what I can do to help when I have some time for that but I personally can't work with RN with this issue without at least a workaround. 
",rricard,2016-03-09 23:44:30
26,2015-12-15 11:29:41,"Something weird seems to happen with RN 0.16 in the scope when importing some packages in your `node_modules`. Note that you don't need to import one of the offending packages in your entry point (I reused the entry point from the template to conduct those tests) to see RN fail.
",rricard,2016-03-09 23:44:30
26,2015-12-15 16:58:04,"I have Relay working on RN master (as of 4 days ago, at least) with the following forks (which are just updated versions of the earlier branches I've mentioned in this thread):

https://github.com/skevy/react-native/commits/skevy-latest
https://github.com/skevy/relay/tree/react-native-at-master
https://github.com/skevy/fbjs/commits/react-native-at-master

(apologies for the crappy branch naming...we have multiple apps using different versions of rn...so it's kind of a mess at the moment. Working on cleaning it up).
",skevy,2016-03-09 23:44:30
26,2015-12-15 16:59:03,"All of my commits are rebased on top of those forks...so it should be easy to see the things that were changed to make it all work. And FWIW, we're using these in three apps in production.
",skevy,2016-03-09 23:44:30
26,2015-12-15 17:06:25,"Oh, and to get Relay's babel plugin to work...I used a custom transformer.js (which is just a copy of RN's transformer.js), and you can see the only thing it really adds is requiring the Relay plugin.

https://gist.github.com/skevy/1a814befb036b98b30d2

This is kind of a hacky solution, and the real solution is to make it so that the RN packager correctly uses your projects babelrc...but I just haven't had time to work on PR for that yet.
",skevy,2016-03-09 23:44:30
26,2015-12-15 17:07:57,"Also, to echo @gre, I can assure you all that it's high on the RN team's priority list to get Relay (and other libs that depend on react but not react-dom) working without forking all this stuff.
",skevy,2016-03-09 23:44:30
26,2015-12-15 17:12:42,"Wow cool! Will try !

> On 15 Dec 2015, at 17:58, Adam Miskiewicz notifications@github.com wrote:
> 
> I have Relay working on RN master (as of 4 days ago, at least) with the following forks (which are just updated versions of the earlier branches I've mentioned in this thread):
> 
> https://github.com/skevy/react-native/commits/skevy-latest
> https://github.com/skevy/relay/tree/react-native-at-master
> https://github.com/skevy/fbjs/commits/react-native-at-master
> 
> (apologies for the crappy branch naming...we have multiple apps using different versions of rn...so it's kind of a mess at the moment. Working on cleaning it up).
> 
> —
> Reply to this email directly or view it on GitHub.
",rricard,2016-03-09 23:44:30
26,2015-12-15 17:13:28,":+1: 

@skevy Great job! can we use your packages directly ? (maybe in npmjs.org)
",filod,2016-03-09 23:44:30
26,2015-12-15 17:14:56,"I publish to an internal sinopia/npm on-site installation. I would recommend sinopia (especially if you're just a single person or a small team), as it's super easy to get running on your local machine. You can even use docker:  https://github.com/RnbWd/sinopia-docker
",skevy,2016-03-09 23:44:30
26,2015-12-15 18:04:29,"You can also point to the fork via git https://docs.npmjs.com/files/package.json#git-urls-as-dependencies
",rricard,2016-03-09 23:44:30
26,2015-12-15 18:09:47,"Unfortunately, with both fbjs and relay, you can't do that, because the built versions of the src are not checked into git.
",skevy,2016-03-09 23:44:30
26,2015-12-15 18:11:22,"Well, we could still trigger the `prepublish` hook for those repos as a `postinstall` hook right ? I'll try!
If it works, I'll make a gist.
",rricard,2016-03-09 23:44:30
26,2015-12-15 18:15:45,"That's usually a tricky route to go down - unless your set of build dependencies is relatively small, you just end up failing on the missing build dependencies for most users.
",taion,2016-03-09 23:44:30
26,2015-12-15 18:27:32,"Yea, I know people should indeed be aware that using a private npm repository is safer but it usually does the trick, so yea, only do this if you only need like only RN & Relay
",rricard,2016-03-09 23:44:30
26,2015-12-15 18:33:17,"It's not possible anyway to do like that due to the relationship between `fbjs` and `react-relay`. Use a private NPM !
",rricard,2016-03-09 23:44:30
26,2015-12-15 20:02:35,"I've set up a private npm and I've published three packages based on @skevy's branches, but since the packages are scoped to my organization (`@org/fbjs`, `@org/react-relay`, `@org/react-native`) I'm having a hard time with `require` as I have to do `require(""@org/fbjs"")` instead of `require(""fbjs"")`.

I'm new to the whole private npm world, so I'm probably doing something wrong.

Any hints to how I can avoid this?
",theodorton,2016-03-09 23:44:30
26,2015-12-15 20:53:50,"@theodorton I believe you can just name the packages differently (without your namespace as it's your private registry) and push those
",JNK,2016-03-09 23:44:30
26,2015-12-15 21:02:36,"I think I got private/scoped packages from npmjs.com confused with a privately hosted npm registry. I'll look into sinopia.
",theodorton,2016-03-09 23:44:30
26,2015-12-15 21:06:35,"I assumed you had setup a private sinopia repo, sorry :smile: 
",JNK,2016-03-09 23:44:30
26,2015-12-16 00:27:55,"@mpretty-homepass check this out!
",zuhair-naqvi,2016-03-09 23:44:30
26,2015-12-16 07:41:11,"@skevy 

~~hi, as you suggest, i setup my own sinopia, and publish the package.~~

~~but now, i can not even start **an empty app**, i got this error:~~

<S_CODE_TOKEN>

~~any hint on this ?~~

---

sorry ， seems forgot to `AppRegistry.registerComponent` will cause this. now i can use relay, thanks again !
",filod,2016-03-09 23:44:30
26,2015-12-16 23:08:09,"@skevy Thank you so much, I managed to get your fork's working using Sinopia and the list @lenaten mentions here https://github.com/facebook/relay/issues/26#issuecomment-159192009
",mpretty-cyro,2016-03-09 23:44:30
26,2015-12-17 08:36:58,"@mpretty-homepass can you push your working project with the node_modules directory to the repo at https://github.com/lenaten/react-native-relay. It's could be useful to many people and save their time and efforts.
",lenaten,2016-03-09 23:44:30
26,2015-12-17 09:41:12,"@lenaten no problem, I've just created a pull request, not exactly ideal as I'm quite new to npm & react so you could probably ditch a bunch of npm modules I committed to the repo (I tried removing them for the commit but running 'npm install' afterwards seemed to break the fixes).
",mpretty-cyro,2016-03-09 23:44:30
26,2015-12-17 10:28:47,"Just FYI for anyone who was going to use my updated fork - it looks like it's not working on Android yet.
",mpretty-cyro,2016-03-09 23:44:30
26,2015-12-30 23:56:47,"> This should also allow relay to work seamlessly with RN, but I haven't verified this.

https://github.com/facebook/react-native/commit/6a838a4201f99ae5e88b3684bb798d363815dd53
",chandu0101,2016-03-09 23:44:30
26,2016-01-03 17:54:35,"For all those people tracking this issue:

Following the https://github.com/facebook/react-native/commit/6a838a4201f99ae5e88b3684bb798d363815dd53, I have submitted several PR's that do the remaining work to get Relay working out of the box with React Native.

They are as follows:

**React Native:**
https://github.com/facebook/react-native/pull/5084 - Removes `fbjs` knowledge from the packager, allowing for Relay to not choke on weird problems from requiring `fbjs`.
https://github.com/facebook/react-native/pull/5097 - Updates Babel to the latest version, to avoid issues with the Babel Relay Plugin.

**FBJS**
https://github.com/facebook/fbjs/pull/95 - Does the things required by https://github.com/facebook/react-native/pull/5084 

**Relay**
https://github.com/facebook/relay/pull/713 - Adds React Native compatibility by removing ReactDOM dependency.
https://github.com/facebook/relay/pull/714 - Makes the Babel Relay Plugin run before other transforms, so that there's no issues when using it from a nested .babelrc (such as in React Native).

_Note: some of the PR's are RFC's, and they make take a while to get reviewed, updated and merged. But when all of these are merged, and released, in some form, Relay will work out of the box in React Native_
",skevy,2016-03-09 23:44:30
26,2016-01-04 19:05:16,"@skevy Thank you so much. Would be great if you could post here once it all has been merged and released.
",BerndWessels,2016-03-09 23:44:30
26,2016-01-29 08:19:00,"Is this complete?
",tmitchel2,2016-03-09 23:44:30
26,2016-01-29 08:24:00,"@tmitchel2 waiting for facebook/react-native#5084 and facebook/react-native#4062 it seems
",mikberg,2016-03-09 23:44:30
26,2016-01-29 08:26:12,"Additionally the following need to be fixed in Relay as well: c0e6da5cca5ea71dd739f5200da2e6c0cd4a95b5
",tlvenn,2016-03-09 23:44:30
26,2016-01-31 12:05:37,"@lenaten @skevy Have you tried using decorators with patched react-native, relay. I couldn't use it even after whitelisting es7.decorators in .babel.json.
",shahankit,2016-03-09 23:44:30
26,2016-02-01 14:00:40,"Got it working by installing `babel-plugin-transform-class-properties`
",shahankit,2016-03-09 23:44:30
26,2016-02-05 19:34:34,"So from the last few messages in this thread it sounds like it's not exactly working out of the box quite yet. Would it be possible to get this reopened to track when it is finished, if that's the case?
",BobertForever,2016-03-09 23:44:30
26,2016-02-11 13:50:55,"Also have a problem with relay and react-native packager. Just trying to add relay package to master-version of react-native and run `packager/packager.sh --resetCache`. And I'm getting an error:

> Failed to build DependencyGraph: Naming collision detected: /Users/ugputu/ws/play/react-native/node_modules/react-relay/node_modules/fbjs/flow/include/warning.js collides with /Users/ugputu/ws/play/react-native/node_modules/react-relay/node_modules/fbjs/lib/warning.js

Same problems with the stable version of react-native (0.19.0). Is it going to work?
",ugputu18,2016-03-09 23:44:30
26,2016-02-11 19:07:18,"Following relay closely and using it in my web projects I still see too many moving parts and assume we have to wait until a 1.0 release before its worth the effort integrating it with react-native. That is most likely why there is not much momentum from ""official"" side to get this working for now.

Maybe its better to help get relay to a decent state before integrating it into react native. Otherwise the frustration about a half baked constantly breaking solution might become to big.
",BerndWessels,2016-03-09 23:44:30
26,2016-02-11 19:08:51,"either way this issue should be reopened as the bot closed it prematurely /cc @josephsavona 
",boourns,2016-03-09 23:44:30
26,2016-02-12 16:13:25,"Reopening since this was closed accidentally by the bot.

We really appreciate everyone's patience on this issue. At this point most of the work to enable React Native compatibility in open source is now complete. The main outstanding aspect is the babel configuration - #714. We plan to test and document the config settings before announcing official compatibility and closing this issue.
",josephsavona,2016-03-09 23:44:30
26,2016-02-12 16:19:31,"thanks @josephsavona!
",boourns,2016-03-09 23:44:30
26,2016-02-12 18:42:18,"@BerndWessels Quite the contrary. There's a lot of momentum from the ""official"" side. As @josephsavona has just said, there's only one issue left. There were a lot of PRs and a lot of back and forth that went into this. It was a substantial effort with lots of work put in both officially, and unofficially.
",pthrasher,2016-03-09 23:44:30
26,2016-02-12 22:31:17,"@pthrasher thanks! :-)
",josephsavona,2016-03-09 23:44:30
26,2016-02-12 22:33:50,"Thanks for your patience on this, @BerndWessels. I've been working all week to land a few last PRs across the ecosystem that will let us use Relay in React Native projects. I'll keep chipping away at this iceberg along with @skevvy, @davidaurelio, and many others until it's done!
",steveluscher,2016-03-09 23:44:30
26,2016-02-12 23:09:38,"No more custom REST layer for mobile a la Backend For Frontend (BFF). ""One data model everywhere"" is all we need. 
",idibidiart,2016-03-09 23:44:30
26,2016-02-12 23:10:18,"Waiting with excitment! 
",idibidiart,2016-03-09 23:44:30
26,2016-02-14 19:24:41,"@pthrasher @steveluscher @josephsavona thanks for all your effort.
Sometimes it is hard to see what is going on behind the scenes just from following the Git Issues.
I believe Relay is the way to go and being able to use it in web and mobile will clean up my code base a lot.
Looking forward to it.
",BerndWessels,2016-03-09 23:44:30
26,2016-02-19 01:10:33,"what is the prescribed way to try this out until the ""official"" release is ready? 
",faceyspacey,2016-03-09 23:44:30
26,2016-02-19 10:21:10,"@faceyspacey i used this repo https://github.com/lenaten/react-native-relay and i got it working
",note89,2016-03-09 23:44:30
26,2016-02-19 15:37:32,"@skevy are we just waiting on these two PRs ?

https://github.com/facebook/react-native/pull/5084
https://github.com/facebook/relay/pull/714

Looks like the others are closed or merged.
",geekgonecrazy,2016-03-09 23:44:30
26,2016-02-23 16:46:43,"Any update on this?
",bcarroll22,2016-03-09 23:44:30
26,2016-02-23 17:41:11,"@bcarroll22 everyone is pretty busy with React Conf this week; we'll update this issue as soon as we make progress. 
",josephsavona,2016-03-09 23:44:30
26,2016-02-23 21:27:42,"thanks!
",bcarroll22,2016-03-09 23:44:30
26,2016-03-01 15:22:38,"a zoo of fbjs versions for current `npm` releases. @josephsavona 
<img width=""177"" alt=""screen shot 2016-03-01 at 16 20 54"" src=""https://cloud.githubusercontent.com/assets/1857263/13431443/b6193600-dfc9-11e5-9aa2-2f8d572e913e.png"">
",eugenehp,2016-03-09 23:44:30
26,2016-03-02 18:31:09,"Looks like facebook/react-native#5084 just dropped. Only item left is #714.
",pthrasher,2016-03-09 23:44:30
26,2016-03-02 19:25:12,"After much research and dialog with the community, I feel this captures the essence of why this would be so significant for React Native: https://gist.github.com/idibidiart/49a095b6bc528638f34f

Sorry, to put this into the Issues log, but I'm hoping others who come here randomly and have no idea why this matters so much could benefit from the aforementioned dialog. Thanks for all the hard work and for giving the React Native community so much love! 
",idibidiart,2016-03-09 23:44:30
26,2016-03-02 20:39:25,"Looks like #714 is closed finally.
",jefferyvincent,2016-03-09 23:44:30
26,2016-03-02 20:47:37,"@jefferyvincent NAJZ!
",note89,2016-03-09 23:44:30
26,2016-03-02 23:46:19,"Working on supporting this **native**ly: https://github.com/facebook/node-haste/pull/46
",vespakoen,2016-03-09 23:44:30
26,2016-03-03 21:09:33,"Awesome! And what about fbjs and so on?
",tonygriv,2016-03-09 23:44:30
26,2016-03-04 02:05:11,"If this is basically ready could someone post a short description of how to get it set up. (PS, great work everyone, this is so exciting!)
",siderakis,2016-03-09 23:44:30
26,2016-03-04 02:43:59,"I'm working on a React Native example app for `/relay/examples/` right now.

![soon1](https://cloud.githubusercontent.com/assets/13243/13516507/c05ce4b6-e16f-11e5-9163-33f5d8c9a03b.jpg)
",steveluscher,2016-03-09 23:44:30
26,2016-03-04 03:01:54,"Can you cut a new release first so we can use Relay with the latest Babel 6? (:
",taion,2016-03-09 23:44:30
26,2016-03-04 06:54:33,"Typing as fast as I can.

![avtarblood](https://cloud.githubusercontent.com/assets/13243/13520175/e22e200a-e192-11e5-92ea-76c395af98b8.gif)
",steveluscher,2016-03-09 23:44:30
26,2016-03-05 08:35:24,"@skevy awesome job getting everything up and running.

I've just tried pulling the latest code from RN master, installed react-relay 0.7.3 and setup the .babelrc as per https://github.com/facebook/relay/pull/714 but I still seem to be running in to issues (see screenshot), not sure if I'm missing a step that I couldn't see in the thread. Any thoughts? (was hoping to be able to try converting from redux to relay this weekend).

![untitled](https://cloud.githubusercontent.com/assets/15862619/13546669/4066bf7a-e309-11e5-88ee-02af17394fed.png)
",mpretty-cyro,2016-03-09 23:44:30
26,2016-03-05 09:56:15,"Same here. It was working with my previous RN 0.21.0 fork in which I merged https://github.com/facebook/react-native/pull/5084 by my self. I noticed that the fbjs stubs are missing from the https://github.com/facebook/react-native/pull/5084 PR. I tried everything from here https://github.com/facebook/react-native/issues/4968 multiple times without any effect. 
",l-urence,2016-03-09 23:44:30
26,2016-03-06 00:29:26,"Things are moving really fast here as we try to bring Relay and React Native together. Does your latest install of react-native have this commit? https://github.com/facebook/react-native/commit/54b6b925203d43eadb36e6960aa7efe50ad6a102
",steveluscher,2016-03-09 23:44:30
26,2016-03-06 00:40:15,"@steveluscher I actually managed to get it running and yea that's pretty much what I had to do (I re-applied the blacklist changes from here https://github.com/facebook/react-native/commit/ad8a33586410c6f9048983f64f8f86e0715e73b8 also removing the fbjs/Map one which seems to be what that commit does). I also had to remove the 'Libraries/vendor/core/isEmpty.js' and 'Libraries/vendor/core/Map.js' files then it started working (though not sure if this is needed).

Must have pulled the latest changes to master just before that commit came through.

cc @l-urence
",mpretty-cyro,2016-03-09 23:44:30
26,2016-03-06 10:05:26,"I agree with @mpretty-homepass. After `rm -rf node_modules` and `npm install` with latest RN from https://github.com/facebook/react-native (including https://github.com/facebook/react-native/commit/54b6b925203d43eadb36e6960aa7efe50ad6a102 commit) RN + Relay 0.7.3 are running fine as far as I can see. Thx guys!
",l-urence,2016-03-09 23:44:30
26,2016-03-06 10:27:26,"But I have still the same :(

Failed to build DependencyGraph: Naming collision detected: {project_folder}/node_modules/react-relay/node_modules/react/node_modules/fbjs/lib/warning.js collides with {project_folder}/node_modules/react-native/node_modules/fbjs/lib/warning.js

Error: Naming collision detected: {project_folder}/node_modules/react-relay/node_modules/react/node_modules/fbjs/lib/warning.js collides with {project_folder}/node_modules/react-native/node_modules/fbjs/lib/warning.js

My package.json:

""dependencies"": {
    ""babel-relay-plugin"": ""^0.7.3"",
    ""react"": ""^0.14.7"",
    ""react-native"": ""^0.21.0"",
    ""react-native-date"": ""^1.0.3"",
    ""react-native-material-kit"": ""^0.3.0"",
    ""react-native-router-flux"": ""^2.3.6"",
    ""react-native-scrollable-tab-view"": ""^0.3.8"",
    ""react-relay"": ""^0.7.3""
  }
",tonygriv,2016-03-09 23:44:30
26,2016-03-06 11:10:19,"@tonygriv You should try to install RN from github repo. Change your package.json to: 

<S_CODE_TOKEN>

and maybe reinstall all node_modules.
",l-urence,2016-03-09 23:44:30
26,2016-03-06 12:01:21,"@l-urence, ok, thanks, it works.

And how to set up a babel transform for it? I have an error:

`Unexpected invocation at runtime. Either the Babel transform was not set up, or it failed to identity this call site. Make sure it is beign used varbatim as`Relay.QL`.
`

According to this comment https://github.com/facebook/relay/pull/714#issuecomment-181204627, I tried to set up this, but something went wrong.
",tonygriv,2016-03-09 23:44:30
26,2016-03-06 13:17:57,"@tonygriv This setup works for me:

babelRelayPlugin.js:

<S_CODE_TOKEN>

.babelrc:

<S_CODE_TOKEN>
",l-urence,2016-03-09 23:44:30
26,2016-03-06 17:03:11,"I'm using: 
package.json

<S_CODE_TOKEN>

babelRelayPlugin.js:

<S_CODE_TOKEN>

.babelrc:

<S_CODE_TOKEN>

and seeing the error message:

<S_CODE_TOKEN>

Any ideas? I'm guessing I need to update the babel configuration, or something.

`babel --version  is 5.8.35 (babel-core 5.8.35)`
",siderakis,2016-03-09 23:44:30
26,2016-03-06 17:07:35,"@siderakis, try npm i babel --save-dev (not global). I think it needs babel 6+.

@l-urence, problem is still present:

> Unexpected invocation at runtime. Either the Babel transform was not set up, or it failed to identity this call site. Make sure it is beign used varbatim asRelay.QL. 
",tonygriv,2016-03-09 23:44:30
26,2016-03-06 17:09:07,"@tonygriv That error indicates that the Babel plugin isn't correctly configured. Either it isn't being run at all, or some other plugin (probably the React Native one) is executing first and removing the `Relay.QL` tagged template expressions so `babel-relay-plugin` can't find them.
",josephsavona,2016-03-09 23:44:30
26,2016-03-06 17:19:20,"Wow, you guys are responsive!

https://github.com/facebook/react-native/commit/f9b744d50137de25357994fe2e829f98104e2242

I'm looking into included the webpack loader as explained in the linked comment. Any pointers would be appreciated.
",siderakis,2016-03-09 23:44:30
26,2016-03-06 17:53:12,"I ran into almost all of the problems you've reported above, while building the forthcoming Relay / React Native example app. In addition to running all of the latest versions of React Native and Relay and using NPM 3, my `.babelrc` presently looks like this (requires Babel 6.5+):

<S_CODE_TOKEN>
",steveluscher,2016-03-09 23:44:30
26,2016-03-06 18:10:08,"@steveluscher have you tried running RN + Relay with  chrome debugging enabled? I get ""Unexpected end of input"". With debugging disabled or the Relay specific code commented out all works fine. Are you running Relay form npm or latest from github?
",l-urence,2016-03-09 23:44:30
26,2016-03-06 18:17:27,"**EDIT**: Oh… I just read your comment more carefully. I didn't realize that this worked with Chrome debugging disabled. That's an excellent clue as to what's gone wrong. Thanks! cc/ @shayne @davidaurelio 

Yes. That's the next thing we're working on. It looks like `fetch()` (used by Relay's default network layer) is broken in RN. The fetch promise resolves with no content, so the JSON parser chokes (`JSON.parse('')`).

In the meantime, I might have to write a network layer that uses `XMLHttpRequest`.
",steveluscher,2016-03-09 23:44:30
26,2016-03-06 18:37:26,"About Unexpected invocation at runtime error. I rm -rf node_modules, clear npm cache and npm install ones more. Everything looks good.
",tonygriv,2016-03-09 23:44:30
26,2016-03-06 23:40:32,"@steveluscher Thx! It works with a custom network layer using XMLHttpRequest. 
",l-urence,2016-03-09 23:44:30
26,2016-03-06 23:42:14,"Just filed the Fetch API bug here: https://github.com/facebook/react-native/issues/6326
",steveluscher,2016-03-09 23:44:30
26,2016-03-07 11:33:04,"@steveluscher Just wanted to let you know I pulled the latest from master and re-installed the modules and it now works without any changes.

Also, for anyone who is interested, https://github.com/relay-tools/relay-local-schema will work if you make a few minor changes to graphql-relay to support react-native (give me a yell if anyone wants the changes required).
",mpretty-cyro,2016-03-09 23:44:30
26,2016-03-07 13:31:50,"After updating `package.json` with `""react-native"": ""facebook/react-native""`  running the command `pod install`  gives the following error:

Fetching podspec for `RNVectorIcons` from `../node_modules/react-native-vector-icons`
Fetching podspec for `React` from `../node_modules/react-native`
Fetching podspec for `react-native-fbsdkcore` from `../node_modules/react-native-fbsdkcore`
Fetching podspec for `react-native-fbsdklogin` from `../node_modules/react-native-fbsdklogin`
Fetching podspec for `react-native-fbsdkshare` from `../node_modules/react-native-fbsdkshare`
[!] Unable to satisfy the following requirements:
- `React/Core (from`../node_modules/react-native`)` required by `Podfile`
",siderakis,2016-03-09 23:44:30
26,2016-03-07 22:27:45,"The fbjs issues seem to be resolved now. However, I am still running into issues with react-native and babelRelayPlugin after updating my `package.json`.

Here is what the code looks like:

# 

**package.json:**

<S_CODE_TOKEN>

# 

**.babelrc**:

option A:

<S_CODE_TOKEN>

option B:

<S_CODE_TOKEN>

# 

**babelRelayPlugin.js:**

<S_CODE_TOKEN>

# 

**NPM Errors**
If I run `npm start` I get the following issue:

.babelrc option A:

<S_CODE_TOKEN>

.babelrc option B:

<S_CODE_TOKEN>

Which option of the .babelrc is correct (A or B)? Also, is the  'start' within the package.json correct? Thanks! JV
",jefferyvincent,2016-03-09 23:44:30
26,2016-03-08 01:34:07,"I believe option A shows that error because **babelRelayPlugin.js** exports  `{ plugins: [getBabelRelayPlugin(schema.data)] };` , so it has two levels of plugins:

<S_CODE_TOKEN>

To confirm you could try `module.exports = getBabelRelayPlugin(schema.data);` with option A.

I'm also stuck with the same error while using option B.
",siderakis,2016-03-09 23:44:30
26,2016-03-08 18:13:28,"Here's the results:

**.babelrc** using option A:

<S_CODE_TOKEN>

**babelRelayPlugin.js** updated:

<S_CODE_TOKEN>

Running `npm start`: 

<S_CODE_TOKEN>

Confirms that using:

`module.exports = { plugins: [getBabelRelayPlugin(schema.data)] };`

within the **babelRelayPlugin.js** is incorrect as @siderakis pointed out. 
",jefferyvincent,2016-03-09 23:44:30
26,2016-03-08 20:38:05,"Has anyone resolved this issue?

<S_CODE_TOKEN>

Also, if I remove .babelrc I don't get this error anymore. (but I still get errors further down the process).
",siderakis,2016-03-09 23:44:30
26,2016-03-08 20:44:44,"I've played around with that file by changing the spread operator on line 120 to:
`get React() { return require('React'); },`

and that leads to the following error:

<S_CODE_TOKEN>

And down the rabbit hole we go. I am not sure why a spread operator is used like that there.
",jefferyvincent,2016-03-09 23:44:30
26,2016-03-08 20:50:01,"Have you tried to install RN 0.22.0-rc? Should work out of the box with Babel configured like this: 

<S_CODE_TOKEN>
",l-urence,2016-03-09 23:44:30
26,2016-03-08 21:06:20,"@l-urence I just tried to use RN 0.22.0-rc and here are my results:

**package.json**

<S_CODE_TOKEN>

**.babelrc**

<S_CODE_TOKEN>

**babelRelayPlugin.js:**

<S_CODE_TOKEN>

running `npm start` and receiving the following error:

<S_CODE_TOKEN>

Does your **package.json** differ from mine?
",jefferyvincent,2016-03-09 23:44:30
26,2016-03-08 22:22:35,"@jefferyvincent: You are using `babel-preset-react` in your `package.json` when you should be using `babel-preset-react-native`. 
",oblador,2016-03-09 23:44:30
26,2016-03-08 22:41:48,"Thanks @oblador, but I am still seeing the same error above even after deleting my node_modules folder and running `npm install` and `npm clear cache`.

**package.json** updated:

<S_CODE_TOKEN>

Error:

<S_CODE_TOKEN>
",jefferyvincent,2016-03-09 23:44:30
26,2016-03-08 22:47:24,"@jefferyvincent: That _should_ work, try resetting some caches like `rm -fr $TMPDIR/react-*` and killing watchman with `watchman watch-del-all`.
",oblador,2016-03-09 23:44:30
26,2016-03-08 22:54:19,"@oblador: I ran those commands and restarted and I still end up with that same error. No idea what `Error: Cannot find module 'slash'`?
",jefferyvincent,2016-03-09 23:44:30
26,2016-03-08 22:56:44,"@jefferyvincent: This sounds like NPM 3 troubles, try switching to NPM 2 or just installing `slash` manually and moving it to the `babel-core`'s `node_modules` folder.
",oblador,2016-03-09 23:44:30
26,2016-03-08 23:01:22,"Bingo! Thanks @oblador that did the trick. I ran `sudo npm install slash`
",jefferyvincent,2016-03-09 23:44:30
26,2016-03-08 23:02:59,"Given the number of subscribers to this issue, it might be best to limit discussion to just issue-related topics, rather than support. This is generating a lot of noise.
",taion,2016-03-09 23:44:30
26,2016-03-08 23:28:55,"@taion, I was merely trying to properly document the above steps more clearly, since there were some discrepancies as to how the .babelrc file should be written. With that said, my comments above due constitute as issue-related. ;)
",jefferyvincent,2016-03-09 23:44:30
26,2016-03-09 01:36:11,"We shouldn't have to keep this thread open much longer. https://github.com/facebook/relay/pull/929
",steveluscher,2016-03-09 23:44:30
26,2016-03-09 23:44:30,"I just checked out a fresh copy of Relay from master, and did the following:

<S_CODE_TOKEN>

A wild React Native and Relay app appeared.

Countless thanks to @skevy, @boourns, @gre, @davidaurelio, @martinbigio, @zpao, @spicyj, and everyone on this thread who helped us tear down the barriers to using Relay with React Native in the open source community. I can't wait to field all of your React Native specific GitHub issues.

We're done here. Open new issues at https://github.com/facebook/relay/issues or https://github.com/facebook/react-native/issues as you discover them!
",steveluscher,2016-03-09 23:44:30
26,2016-03-10 02:00:02,"Awesome work @steveluscher!
",martinbigio,2016-03-09 23:44:30
26,2016-03-10 02:26:57,":tada: 
",filod,2016-03-09 23:44:30
26,2016-03-10 11:07:30,"(Edited : I will found help on discord) 

:tada: 
",tychota,2016-03-09 23:44:30
26,2016-03-10 11:17:20,"@steveluscher awesome work!
",davidaurelio,2016-03-09 23:44:30
26,2016-03-10 12:13:35,"@steveluscher :+1: 
",eugenehp,2016-03-09 23:44:30
26,2016-03-11 05:04:46,"@steveluscher Great ![](https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png)
",gmochid,2016-03-09 23:44:30
25,2015-08-12 05:16:28,"`index.js` needs to be built by gulp because it contains ES6 spreads.

c.c. @yungsters 
",devknoll,2015-08-12 19:57:48
25,2015-08-12 19:57:48,"Solved by c495d68eb6 instead
",devknoll,2015-08-12 19:57:48
25,2015-08-12 20:05:29,"…and inspired by your feedback. Thanks!
",steveluscher,2015-08-12 19:57:48
24,2015-08-12 05:01:15,,brettkan,2015-08-12 05:12:54
24,2015-08-12 05:13:02,"Thank you!
",voideanvalue,2015-08-12 05:12:54
23,2015-08-12 04:49:01,"By default, no cookies are passed along with `fetch`. It seems unintentional that we would want everyone to implement their own `Relay.NetworkLayer` to support authentication, so I think we should send them by default.
",devknoll,2015-08-12 17:57:43
23,2015-08-12 17:57:50,"Sounds good to me. Thanks!
",yungsters,2015-08-12 17:57:43
22,2015-08-12 04:25:38,"This makes it slightly easier to update the site when new versions are release.
",zpao,2015-08-12 17:57:11
22,2015-08-12 04:32:09,"Note: I did it this way because I couldn't require the package data from within a file in website.

And here's what it looks like - definitely prevents moving past.
<img width=""807"" alt=""screen shot 2015-08-11 at 9 31 14 pm"" src=""https://cloud.githubusercontent.com/assets/8445/9216579/5a40bac2-4070-11e5-8a1e-7ecdf3be8990.png"">
",zpao,2015-08-12 17:57:11
22,2015-08-12 17:57:12,"Nice!
",yungsters,2015-08-12 17:57:11
21,2015-08-12 03:55:05,,charlieschwabacher,2015-08-12 04:14:30
20,2015-08-12 03:15:56,"Well, that was a pretty annoying problem to try to hunt down... ;-)

If your queries don't seem to be running, it's because the query in your `Relay.Route` and the query in your `Relay.Container` need to have the same name, otherwise it isn't run.
",devknoll,2015-08-29 22:20:05
20,2015-08-13 03:11:49,"Ahh... yes, I apologize greatly for not getting to this before we shipped yesterday. I'll try to get it fixed as soon as possible (unless someone beats me to it with a PR).
",yungsters,2015-08-29 22:20:05
20,2015-08-13 03:26:07,"@yungsters What's the ideal behavior? Would it be sufficient to just find the `route.queries` that includes a particular fragment and keep everything else the same?
",devknoll,2015-08-29 22:20:05
20,2015-08-13 03:31:23,"@devknoll Yes, I think that is the ideal behavior. Unfortunately, there is no good way of figuring out which queries in `route.queries` includes `X` when all we have to work with is `${Component.getFragment(X)}`.
",yungsters,2015-08-29 22:20:05
20,2015-08-13 03:49:44,"Ok, two ideas.
1. Super hacky: Run `route.queries[y]` with a mock component to find the fragment names it's looking for. Maybe parse the result to grab the type and make sure it matches on the component too.
2. A little better: Modify the babel plugin to just stick the possible `X`s as metadata on a `route.queries[y]`

Does one of these sound like an approach you'd take?
",devknoll,2015-08-29 22:20:05
20,2015-08-13 04:53:37,"Whoah, idea 1 _is_ super hacky, but I like the way you think. ;)

Another more involved possibility is that we do something like what we did with `RelayMutation#getName`:

<S_CODE_TOKEN>

The more I think about it, there really is no semantic value to the keys in `queries`. What if we got rid of `${Component.getFragment(X)}` all together and made it clearer that the query name must match your component's fragment name?

I'm also curious what @josephsavona thinks about this.
",yungsters,2015-08-29 22:20:05
20,2015-08-13 05:04:11,"> What if we got rid of `${Component.getFragment(X)}` all together and made it clearer that the query name must match your component's fragment name?

I like this idea a lot. I like that it makes it more consistent with mutations and gets rid of the (seemingly arbitrary) `Component` argument, while making it clearer that the `query` name means something.

In either case, is there a reason we couldn't also just throw an invariant in there to make sure that that every fragment matches a route query? Maybe it'll save some other folks some time ;-)
",devknoll,2015-08-29 22:20:05
20,2015-08-13 17:26:06,"> What if we got rid of ${Component.getFragment(X)} all together and made it clearer that the query name must match your component's fragment name?

Yes. We should do that, and also implement @devknoll's idea - root component fragments are automatically added whenever the route key matches the component key, and it's a warning/error if either one has a key that the other is missing.
",josephsavona,2015-08-29 22:20:05
20,2015-08-29 22:20:05,"Solved by #181 
",devknoll,2015-08-29 22:20:05
19,2015-08-12 02:50:49,"Loving this so far, great work.

Can't get DefaultNetworkLayer:

<S_CODE_TOKEN>
",grydstedt,2015-08-12 02:53:07
19,2015-08-12 02:53:07,"Saw this was already addressed
",grydstedt,2015-08-12 02:53:07
18,2015-08-12 01:42:19,"I believe the provided parameters text field and the response text field should be matching. This PR matches those two text fields.
",mjw56,2015-08-12 02:52:53
18,2015-08-12 02:52:56,"Thanks!
",yungsters,2015-08-12 02:52:53
17,2015-08-12 01:36:57,,christianpv,2015-08-12 02:52:14
17,2015-08-12 02:52:17,"Thanks!
",yungsters,2015-08-12 02:52:14
16,2015-08-12 01:11:10,"`renderFetched` gets arguments, not `renderLoading`.
",dittos,2015-08-12 02:51:52
16,2015-08-12 02:52:00,"Thanks! :+1: 
",yungsters,2015-08-12 02:51:52
15,2015-08-12 00:33:40,"`Relay.DefaultNetworkLayer` isn't being exported, presumably because package.json has main set to lib/RelayPublic.js instead of index.js
",devknoll,2015-08-12 01:46:48
15,2015-08-12 01:46:48,"Will be fixed by eb7cb350f69da52813809935a69d11fac810fcb8.
",yungsters,2015-08-12 01:46:48
15,2015-08-12 01:49:31,"Thanks @yungsters - does index.js need to be added to `files` in package.json too? Not sure if `main` will include it automatically...
",devknoll,2015-08-12 01:46:48
15,2015-08-12 01:50:01,"@devknoll Good catch. :)
",yungsters,2015-08-12 01:46:48
15,2015-08-12 01:54:46,"@devknoll Actually, it looks like npm automatically includes `index.js` (maybe because it's set to `main`). But being explicit never hurts.
",yungsters,2015-08-12 01:46:48
15,2015-08-12 01:55:06,"Nice! :+1: 
",devknoll,2015-08-12 01:46:48
15,2015-08-12 05:05:53,"@yungsters Looks like index.js needs to be included in the gulp file too! :smile: 
",devknoll,2015-08-12 01:46:48
14,2015-08-12 00:24:59,"There are a few browsers which does not support `String.prototype.repeat`: http://kangax.github.io/compat-table/es6/#String.prototype_methods_String.prototype.repeat

My latest Safari crashes on example. I'm not entirely sure about directly importing babel-runtime in `src`, but at least it is cleaner than using for-loop :) (I hoped fbjs have something like this)

(edit: I think directly requiring `babel-runtime` did not work, so I've just desugared it.)
",sairion,2015-08-13 06:43:13
14,2015-08-12 17:55:37,"Relay makes pervasive use of ES2015 functionality. This might be the result of an issue with how we're using `babel-runtime`.
",yungsters,2015-08-13 06:43:13
14,2015-08-12 21:02:52,"I'll look into this to see if there's a bug with the polyfill step.
",steveluscher,2015-08-13 06:43:13
14,2015-08-12 23:56:21,"As @yungsters mentioned, we're using ES2015 quite heavily. I know now why `babel-runtime` isn't polyfilling `String::repeat()`. @sebmck explains:

> It doesn't alias prototype methods. You can never be sure that something is always the right type. So in `foo.repeat()` you can't tell that `foo` is always going to be a string (you could with flow types but that's not implemented), so it's an unsafe transformation. Although in that case you can easily tell since it's just a string literal, but it'd be weird to support one and not the other.

This has helped to open up a wider discussion: should Relay attempt to bring its own polyfills, or should we empower (and require) you to bring the polyfills appropriate for your project. [React does this](https://facebook.github.io/react/docs/working-with-the-browser.html#polyfills-needed-to-support-older-browsers), to a certain extent. cc/ @zpao
",steveluscher,2015-08-13 06:43:13
14,2015-08-13 03:26:52,"In the interest of moving fast and promoting ES2015 (after all, it is 2015 now), I personally think we should just do a better job of documenting that polyfills are necessary, and we should include them in our examples. Thoughts?
",yungsters,2015-08-13 06:43:13
14,2015-08-13 03:57:18,"(Sorry, I mistakenly closed and reopened)

I see the point. But in respect of shipping with shim, shimming ES5 is rather easy, and es5-shim/es5-sham do most of the job. Shimming ES2015+ requires more than just including some files in `<head />` (which is you people already know well), and the border line of transpiling and shimming is a bit blur IMHO (i.e. Transpiled and bundled `lib/*`, they already get shipped with `babel-runtime/core-js/[counterparts]`). Including whole `babel/polyfill` solves this issue, it would be overkill and problematic to some extent (it is just a personal opinion over core-js). I think dealing with Babel, like making Babel plugin, is the nicest option but surely will take some time.

Well, whether it is documenting 'polyfill needed here' or another option, I think it is fine. I just wanted to make people not disappointed right after running the examples :)  
",sairion,2015-08-13 06:43:13
14,2015-08-13 04:40:57,"I totally agree about the fact that shipping with shims might be too imposing. For now, we'll 1) fix the examples to include shims, and 2) update our documentation with information about shimming and recommended shimming options.
",yungsters,2015-08-13 06:43:13
14,2015-08-13 06:43:13,"@yungsters  OK, then I'm going to close this and will send separate PR. Thanks!
",sairion,2015-08-13 06:43:13
13,2015-08-11 23:48:24,"https://github.com/facebook/relay/blob/0f546869f549bd3939f7fe5744f233f1f7574401/package.json#L35 should be in peerDependencies, or else you'll get multiple copies of React in some cases and it's important that that doesn't happen.
",spicyj,2015-08-12 20:55:31
13,2015-08-12 00:05:44,"I missed that before launch, oops! Looks like the examples are all ok and it should be as simple as removing it from `dependencies` to `peerDependencies` (and then also specifying it in `devDependencies` so tests work)
",zpao,2015-08-12 20:55:31
12,2015-08-11 23:39:41,"To eliminate warnings.
",enaqx,2015-08-12 02:48:38
12,2015-08-12 02:48:40,"Thanks!
",yungsters,2015-08-12 02:48:38
11,2015-08-11 23:17:51,,Jyrno42,2015-08-11 23:41:34
11,2015-08-11 23:41:36,"Thanks!
",voideanvalue,2015-08-11 23:41:34
10,2015-08-11 23:11:14,,cpojer,2015-08-15 00:16:19
10,2015-08-11 23:14:25,"IMO, wait until you ship jest 0.5 stable. I think that's my plan for React.
",zpao,2015-08-15 00:16:19
10,2015-08-13 03:10:34,"Just wondering, are there any planned changes between jest 0.5-alpha and stable?
",yungsters,2015-08-15 00:16:19
10,2015-08-13 04:00:13,"no more big breaking changes but I'd be lying if I said I have made up my mind about what will go in. I'll tag the final 0.5 either this week or next week, so there will probably not be an alpha.

I think the one thing I want to adopt though is that jest releases in the future will only happen if it was successfully deployed on our www codebase at Facebook, which is likely the biggest jest deploy. This makes sure that we don't fall behind on jest updates and also that jest is stable across a large number of test cases.
",cpojer,2015-08-15 00:16:19
9,2015-08-11 23:10:47,,enaqx,2015-08-11 23:40:43
9,2015-08-11 23:40:56,"Thanks!
",voideanvalue,2015-08-11 23:40:43
8,2015-08-11 23:08:10,"This seems like a very mechanical requirement. Is there any chance this could be pulled into the babel plugin, similar to how JSX automatically defines a `displayName`?
",devknoll,2015-08-22 23:58:23
8,2015-08-12 01:48:51,"This is a good idea.

I would have gone as far as suggesting we rename `routeName` to `displayName`, but the `routeName` is used for much more than just display purposes. (For example, it is used as a cache key in a couple parts of Relay.)
",yungsters,2015-08-22 23:58:23
8,2015-08-13 01:31:52,"I could probably get this in.

@yungsters do you have a good idea of what would make a good `routeName`? I assume `baseName` isn't enough if it's being relied on for cache keys. Maybe `baseName + hash(uri)`?

That only works if you only have one route per file though... ;-)
",devknoll,2015-08-22 23:58:23
8,2015-08-13 03:09:39,"As a first iteration, we could only auto-generate `routeName` if someone extends `Relay.Route` using the class syntax without defining a static `routeName`.

Maybe as an improvement, if the class is anonymous and the default export (e.g. `export default class extends Relay.Route { ... }` or `module.exports = class extends Relay.Route { ... }`), then we can use the `baseName` (by which I assume you are referring to the path basename?).

Otherwise, we can simply not auto-generate the `routeName` and let the runtime exception explain that their route is incomplete.

> Maybe `baseName + hash(uri)`?

I'm reluctant to include `uri` because I actually think we'll want to remove that from `RelayRoute` in the near future. Check out #27 for more context.
",yungsters,2015-08-22 23:58:23
8,2015-08-13 03:16:28,"By `uri` I meant of the .js file itself (in case an app uses some format like `pages/*/route.js`).

Everything else sounds good. I'll see what I can do :smile: 
",devknoll,2015-08-22 23:58:23
8,2015-08-13 03:36:20,"@devknoll Ahh, makes sense.
",yungsters,2015-08-22 23:58:23
8,2015-08-24 17:22:57,"I closed this because:
- Having used routes more over the past 12 days, this issue hasn't bitten me again or been a big deal. The issue might be a knee jerk reaction.
- At least when bundled with react-router, Relay.Routes aren't being used at all, and so any integration with Babel would go unused there anyway.
",devknoll,2015-08-22 23:58:23
7,2015-08-11 22:07:43,"Not an issue, just some questions to understand how Routes in Relay work. Example which uses creates routes  would be nice to have.

Why do we need 'path' property?
For example, from documentation it looks like developer must handle location changes manually:

<S_CODE_TOKEN>

not clear what kind of role 'path' property have or will have in future.
",genbit,2015-08-18 08:20:02
7,2015-08-11 23:06:01,"We definitely need more examples of how routes can be used (and maybe how it integrates with other open source routing solutions).

When you refer to the `path` property, I assume you're referring to the `static path?: string` property or `RelayRoute`. This is kind of a remnant of the larger role that `RelayRoute` used to play in application routing. (This is also why we chose not to document the `uri` and `path` properties, heh.)

In the future, I think we will strip out any routing-specific properties (and maybe even rename `RelayRoute` to be something more like `RelayQueryRoots` or `RelayQueryConfig`).
",yungsters,2015-08-18 08:20:02
7,2015-08-12 05:10:14,"> In the future, I think we will strip out any routing-specific properties (and maybe even rename RelayRoute to be something more like RelayQueryRoots or RelayQueryConfig).

:+1: I was confused by it's name when I started reading the documentation. ""It's called a route, where do I set the path? How does this work with the history API"" are things that I was thinking.
",keithpitt,2015-08-18 08:20:02
7,2015-08-12 05:22:22,"@yungsters thanks for explanation! Maybe note somewhere in docs will be useful, I believe many people will have similar confusion. 
",genbit,2015-08-18 08:20:02
7,2015-08-12 14:52:16,"> In the future, I think we will strip out any routing-specific properties (and maybe even rename RelayRoute to be something more like RelayQueryRoots or RelayQueryConfig).

@yungsters This would be great, also for (spoken) conversation: I can imagine some confusion could pop up with the phonetically incestuous names of  `Relay.Route`, `Relay.Container`, and `Relay.RootContainer`.
",sgwilym,2015-08-18 08:20:02
7,2015-08-13 03:03:50,"> This would be great, also for (spoken) conversation:

I don't know... all the confusion and laughs when confusing route and root were pretty fun. Haha, but yes... more reason to rename it.
",yungsters,2015-08-18 08:20:02
7,2015-08-18 08:20:02,"Now that we've got the helpful documentation, closing this out. I have an internal task to track the removal of `path` and `uri`.
",yungsters,2015-08-18 08:20:02
6,2015-08-11 21:28:24,"It would be nice if the QuickStart Tutorial followed more of a ""Hello, World""/thin-thread model. After the npm install, use as little code as possible to get something showing on the screen. Then, pick a simple feature to add to the ""game"", and follow that feature all the way from front-end to back-end. The later Guides go through Relay's features one by one, so the tutorial can be organized more iteratively.
",cletusw,2016-09-02 23:57:47
6,2015-08-11 21:51:07,"This is a great approach! I'll make it my job to iterate on the tutorial along these lines. Expect to see the tutorial, and the docs, evolve quite a bit over the next little while!
",steveluscher,2016-09-02 23:57:47
6,2015-08-11 21:54:07,"Awesome! I'd love to stay involved throughout that process.
",cletusw,2016-09-02 23:57:47
6,2015-08-13 05:46:35,"Awesome idea!
",gyzerok,2016-09-02 23:57:47
6,2015-08-13 06:58:49,":+1: 
I would be happy if i could make one, like anyone here. Let's make this happen.
",checkraiser,2016-09-02 23:57:47
6,2015-08-27 18:25:32,"Based on some spectacular feedback from @BinaryMuse, @frantic, and others, here's what I'm thinking:

Split the tutorial into three acts: _Hello GraphQL_, _Hello Relay_, and _Schema Building_.

# Hello GraphQL

Now that [GraphiQL](https://github.com/graphql/graphiql) is open source, we should be able to drop it straight into the Relay docs, so that we can query a GraphQL schema interactively, and see the shape and content of the response immediately. Use the same schema that we use for the _Hello Relay_ tutorial. My present thinking for what the schema should describe is a list of stories with comments & likes.

# Hello Relay

Building upon a knowledge of how to write queries against a GraphQL endpoint, start to build a React app using Relay. First write enough code to query for a list of stories and display them. Next learn how to use calls by adding pagination. Next learn how to compose components and queries by adding comments below each story. Next, learn about mutations by adding the ability to create new comments. All of these activities should be possible to execute in-browser, using an interactive code editor and an in-memory schema.

# Schema Building

The last piece is to lead someone through the creation of a custom schema. This will explain how to use the [graphql-relay-js](https://github.com/graphql/graphql-relay-js) helpers, and in doing so should explain some core concepts like connections, cursors, and nodes. We might even consider punting on this section for the Relay website, since there have already been some excellent writeups on this topic from you: @clayallsopp [[1]](https://medium.com/@clayallsopp/your-first-graphql-server-3c766ab4f0a2) @davidchang [[2]](http://davidandsuzi.com/writing-a-basic-api-with-graphql/) Rising Stack [[3]](https://blog.risingstack.com/graphql-overview-getting-started-with-graphql-and-nodejs/). I have yet to see a Relay focussed one, so maybe there's still some work to do here.

I'm going to get started from the top. If you have thoughts or ideas, pen them down here!
",steveluscher,2016-09-02 23:57:47
6,2015-08-27 21:45:34,"It might be worth considering the order of introducing basic schema building with introducing Relay mutations. When I was getting started, I got all of my ""read"" stuff set up before I did my first mutation, and I think I'm pretty happy I went with that path. Mutations are extremely powerful and amazing, but they seem ""harder"" to me in some sense than setting up the ""read"" paths on the schema.
",taion,2016-09-02 23:57:47
6,2015-08-28 06:29:58,"One thing that I feel would be a shame to overlook in a tutorial is motivation: a succinct written roundup of some common frustrations that GraphQL and Relay solves would be a great boost for working through the tutorial and understanding _why_ you need a Schema. Not being shy about pointing out these advantages when you've implemented them in the tutorial would be great too.
",sgwilym,2016-09-02 23:57:47
6,2015-09-15 03:42:10,"+1
",enriquecaballero,2016-09-02 23:57:47
6,2015-10-01 09:33:27,"I came in here to communicate that I think the tutorial needs serious work, and I found this issue. I got overwhelmed myself, and I had someone else communicate to me they got lost quickly themselves. Glad people are working on this. The guides themselves are much better, but if I'd just had to deal with the tutorial I'd have given up. The tutorial is unfortunately currently bad advertising for Relay. I'm going to give more constructive feedback next.

Splitting this into ""intro to GraphQL"", ""intro to Relay client"" and ""how to build a Relay-compliant GraphQL schema"" would be good. Some people who are looking to learn Relay are going to work with existing
GraphQL schemas and won't even need the latter tutorial. They are interested in the client-side only. And if I use some other implementation technology for the GraphQL server, such as Python, I'm not interested
in the JS details of that either.

I think the ""Hello Relay"" tutorial should focus on building a client-side app only against some existing GraphQL endpoint. It's fine if I get some kind of demo server installed or can point my code to an existing one on the web. It shouldn't go into how to construct the endpoint at all. I'm fine if this is done on the filesystem without in-browser magic. Benefits of just going for the filesystem:
- closer to the layout of real world projects that use Relay.
- it's also simpler to implement such a tutorial than something that's more fancy and uses in-browser editing facilities, etc. I think a better tutorial should be done quickly to limit further damage the current one does.

I also don't like the current tutorial approach where you take an existing project, ignore almost entirely what it is in it, and replace it with vast amounts of tutorial-specific code. I'm happy to explore the layout of an existing project, but I'd rather do it just checking that project out and reading source code comments that explain what it all does and points to further details elsewhere.

I like how @steveluscher separates multiple steps of the Relay tutorial:
- A UI that shows a list of stories.
- Pagination of stories. This shows off a core Relay feature quickly.
- Compose components and GraphQL fragments by adding comments below each story.
- Mutations. Creating new comments.

Each step should end in a fully working Relay project that doesn't require you to know about the next steps yet. There's nothing about the server implementation in any of this.
",faassen,2016-09-02 23:57:47
6,2015-10-01 10:08:22,"Big +1. 

I think we need a step-by-step tutorials on how to create a GraphQL server + Relay/React client from scratch and we need a common example like `list users` + `create new user`. Everything above that is an overkill. At the moment it's difficult to start with all that new logic even for someone who is using node and react for quite some time. And we need this https://github.com/facebook/relay/issues/206 issue to be resolved because this is where the confusion starts. 
I would expect from a tutorial to have just 2 easy steps - first `create a server` using the [express-graphql](https://github.com/graphql/express-graphql), then `build relay component` with a single GraphQL call. All that schema exporting and creating a plugin and complex schema structure, must be wrapped into some magic (as part of relay library that you include, then everything works out of the box). You can enable all that extra features for experts but 90+% of people won't use that.
",xpepermint,2016-09-02 23:57:47
6,2015-10-01 13:12:00,"Agreed and agreed.
",enriquecaballero,2016-09-02 23:57:47
6,2015-10-01 14:07:42,"I'm reasonably happy with the content of the tutorial, BTW - I think in general it's not good to assume that a user already has access to a GraphQL server, and most people using Relay will need to build out their own GraphQL server, most likely with something plugging into graphql-js (and if not, most of the other APIs aren't meaningfully different semantically anyway).

In terms of depth, I also am pretty happy with how things look right now - compare for example the React tutorial, which also aims to go into relatively minimal depth.

I do think the structure can be improved, though. I think it'd be more clear if it presented:
1. Building the read-only parts of the GraphQL schema
   1. Optionally, using GraphiQL to interact with just the GraphQL server
2. Pulling data with Relay from the GraphQL server
3. Writing GraphQL mutations
4. Writing Relay mutations

That's pretty much the order in which I went through the tutorial, and I found it pretty good for explaining the concepts present in the tutorial.

Lastly, I'd consider providing a list of examples including what each example shows, just to help people who prefer looking at code over prose.
",taion,2016-09-02 23:57:47
6,2015-10-01 14:19:59,"BTW, I really like the approach e.g. here https://github.com/mtscout6/react-bootstrap-getting-started/tree/master with having `master` be the initial scaffolding for the tutorial, and subsequent steps being assigned to git tags.
",taion,2016-09-02 23:57:47
6,2015-10-01 14:26:26,"@taion I think there are many cases where UI developers are using Relay _without_ having to worry about the GraphQL server implementation, and more cases where developers may want to use another GraphQL server implementation altogether. For that reason, I much prefer a structure by @steveluscher, where schema building is deferred to the end. This way you serve both audiences: people who just want to use Relay on the client side, and people who are interested in building Relay-compliant server implementations. 

If you have a big discussion about graphql-js with Relay extensions from the start, you risk losing part of the audience. You bury the lead on Relay too: Relay is about making it easier to develop UIs, and instead you distract people with a lot of stuff about server implementation requirements that may or may not be relevant to them, but what is in any case not the main selling point of Relay.

So @taion, since you're happy with the tutorial as is, do you think it would get worse if it followed a structure as suggested by @steveluscher? 
",faassen,2016-09-02 23:57:47
6,2015-10-01 14:29:10,"> I think there are many cases where UI developers are using Relay without having to worry about the GraphQL server implementation, and more cases where developers may want to use another GraphQL server implementation altogether

:+1:  , i am in same boat :) 
",chandu0101,2016-09-02 23:57:47
6,2015-10-01 14:48:07,"I don't know - to me, Relay and GraphQL are two sides of the same coin. Relay makes it easier to build UIs, yes, but what makes it _better_ at building UIs than something like React Resolver or React Transmit are specifically the query patterns enabled by GraphQL. The real sell for Relay to me is not that ""it lets me specify my data dependencies on each component"", but that it lets me do so while still getting everything in a single round-trip, and likewise for mutations.

Those are really important reasons up front; they're hard to explain with a 5 minute pitch the way that React's ""declarative UI"" is very easy to understand, but it's an extremely important contrast to draw. DX matters, yes, but what's special about Relay is that it solves problems you just couldn't solve without GraphQL.

I think of a Relay tutorial that talks about containers before at least talking a little about schemas as being a little bit like a Flux tutorial that walks you through connecting to the stores before it talks about the stores themselves at all. I really think of my GraphQL server as partially moving what used to be my front-end data fetching into my back-end, so it makes a lot of sense for me to start with at least parts of the GraphQL schema, just to illustrate what's going on.

At least for the moment, someone planning on adopting GraphQL and Relay is much more likely to be in a position of already having an existing e.g. REST API to work with, rather than having an existing GraphQL API.
",taion,2016-09-02 23:57:47
6,2015-10-01 15:07:33,"@taion Obviously a Relay tutorial needs to talk a bit about GraphQL, first, which is exactly what @steveluscher proposed. What it doesn't need to do first is talk about how to implement a server like that. You can show how to build a UI with an existing demo server. Your concern for those who want to work in a different order are easily taken care of by use of a paragraph somewhere on top of the Relay tutorial: ""We are going to use a demo GraphQL server for the UI tutorial, but see <link> if you want to skip ahead and see how you can build your own."" That way what Relay is all about is focused on first. The ""how to build your own"" can then start saying ""We're going to use this specific set of JS technologies, but see <link> for alternatives.""

The Relay project should not be in the business of explaining how to implement a full GraphQL server anyway: that's the job of the GraphQL project. It should only explain how you can make a GraphQL server Relay compliant, and it can use the JS reference implementations as examples.
",faassen,2016-09-02 23:57:47
6,2015-10-01 15:51:35,"I agree that a Relay tutorial should not show how to set up a GraphQL server. Fortunately, the existing tutorial doesn't - it only shows you how to set up a schema.

The problem with a Relay tutorial that starts at `Relay.createContainer` without talking about building a schema is that it'd be like a Flux tutorial that talked about connecting to stores before talking about populating the stores! You could teach Flux that way, but I'm not aware that anybody does.

For a user considering Relay right now, this consideration most likely be in the context of considering GraphQL as well - if I'm not Facebook, I'm unlikely to have a GraphQL schema set up if I'm not planning on using Relay, and I can't use Relay without that GraphQL schema.

I really think the issue with the schema presentation is much more the _how_ than the _what_. Relay users will have to know about nodes, connections, and mutations, but it's probably not necessary to show building all 3 before building my first component - that to me is what ""iterative"" means.

It's true that not everyone will be implementing their GraphQL server/schema in JS, but I think the choice of graphql-js makes perfect sense for a tutorial for a couple of reasons. First, the code demonstrated is sufficiently straightforward that differences to any other implementation are going to be more cosmetic than anything else. Second, anybody working through this tutorial is probably already familiar with JS, so graphql-js makes a good lingua franca for illustrating the basic concepts, without getting too much into implementation-specific details. Lastly, express-graphql is probably just the easiest way to get started with a real GraphQL server by a long shot (not counting something like relay-local-schema which is more for toys) - look at e.g. https://github.com/relayjs/relay-starter-kit/blob/b34f8a9bbee276af7697e6e0cdf8e0e766c72e95/server.js#L11-L16, which is literally 3 statements to get things up and running.

Something like setting up a full-fledged schema that connects to backend models should be considered out-of-scope for a Relay tutorial, just as connecting to a full-featured backend should be considered out-of-scope for a Flux tutorial. I think something like what's currently present, but presented in a more iterative manner, is a really good fit for demonstrating Relay + GraphQL as a system, and furthermore I think the appropriate introduction does need to touch a bit on both.
",taion,2016-09-02 23:57:47
6,2015-10-01 16:19:26,"A meta-point - who's the marginal consumer of this tutorial? Probably anybody who's a infra dev at FB or who has been involved in writing Relay- or GraphQL-related libraries already is right out.
",taion,2016-09-02 23:57:47
6,2015-10-12 16:49:33,"I've been the assignee on this task for far too long with no action, so I'm going to put it back up for grabs. In the back of my mind, I've been wanting to take [this code](https://gist.github.com/steveluscher/3abe6d6f598d70423f76) and parcel it out into [the sections that I've outlined above](https://github.com/facebook/relay/issues/6#issuecomment-135514251), making use of the code injection features of `/prototyping/graphiql.html` and `/prototyping/playground.html` to embed interactive examples along the way (you can URL encode schema or app source code into the playground through the `?source=…&schema=…` query params, and to GraphiQL using the `?schema=…` query param).

I'll revisit this a few weeks, before time which I don't think I'll have time to knock it out. 
",steveluscher,2016-09-02 23:57:47
6,2015-12-01 23:16:42,"In regards to schema building - I'm wondering how one might break up pieces (such as ObjectType definitions and Mutation definitions) into modules. It would be nice to see that done correctly in an example.
",rojobuffalo,2016-09-02 23:57:47
6,2016-09-02 23:57:47,"Going to close this out because we will be rebuilding the website/tutorial experience for the release of [Relay 2](https://speakerdeck.com/wincent/relay-2-simpler-faster-more-predictable). Thanks to everybody who provided input on this issue, as it is helpful in informing our understanding of how people new to the framework (and to GraphQL) approach the whole thing.
",wincent,2016-09-02 23:57:47
5,2015-08-11 21:26:14,"`id` is an `ID!`, not a `String!`.
",dschafer,2015-08-11 21:26:49
4,2015-08-11 20:49:15,"The `<Image>` tag seems to use `user.profilePhoto.uri`, which is missing int he schema?
",bbirand,2015-08-12 05:10:49
4,2015-08-11 20:56:04,"Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!
",facebook-github-bot,2015-08-12 05:10:49
4,2015-08-12 03:37:49,"Thanks for fixing this! I think you have to sign the Facebook CLA, though.
",yungsters,2015-08-12 05:10:49
4,2015-08-12 05:03:09,"Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!
",facebook-github-bot,2015-08-12 05:10:49
4,2015-08-12 05:10:59,"Thank you!
",voideanvalue,2015-08-12 05:10:49
3,2015-08-11 20:35:45,,vslinko,2015-08-11 21:08:51
3,2015-08-11 21:08:58,"Thanks!
",josephsavona,2015-08-11 21:08:51
2,2015-08-11 20:04:27,"The examples use `babel-node` which is provided by the `babel` npm package.
",voideanvalue,2015-08-11 20:07:56
2,2015-08-11 20:11:47,"Thanks! https://github.com/facebook/relay-starter-kit will need this too.
",steveluscher,2015-08-11 20:07:56
2,2015-08-11 20:17:52,"facebook/relay-starter-kit#1 :)
",voideanvalue,2015-08-11 20:07:56
1,2015-08-11 19:50:48,"I didn't have babel installed globally on my machine so `babel-node` couldn't be found when I tried to follow the example instructions, this just adds that step to the README

I used the verbose cli flags for npm so it's more clear to people who aren't so familiar with it what is going on.
",brentvatne,2015-08-11 20:04:05
1,2015-08-11 20:02:55,":+1: 
",alinz,2015-08-11 20:04:05
1,2015-08-11 20:03:31,"Sorry about this, should be fixed now: https://github.com/facebook/relay/commits/master
",vjeux,2015-08-11 20:04:05
1,2015-08-11 20:05:22,"great :smile: thanks @vjeux 
",brentvatne,2015-08-11 20:04:05
1,2015-08-11 20:08:38,"Fixed in #2. Thanks!
",voideanvalue,2015-08-11 20:04:05
